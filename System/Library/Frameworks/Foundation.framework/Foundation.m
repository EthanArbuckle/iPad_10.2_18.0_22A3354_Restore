uint64_t __DataStorage._bytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t __DataStorage._offset.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t NSKeyValueAccessorHash(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

void destroy for __CharacterSetStorage.Backing(id *a1)
{

}

ValueMetadata *type metadata accessor for Date()
{
  return &type metadata for Date;
}

uint64_t NSNotFound.getter()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

ValueMetadata *type metadata accessor for UUID()
{
  return &type metadata for UUID;
}

ValueMetadata *type metadata accessor for URL()
{
  return &type metadata for URL;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance String()
{
  return String._bridgeToObjectiveCImpl()();
}

ValueMetadata *type metadata accessor for TimeZone()
{
  return &type metadata for TimeZone;
}

uint64_t NSKeyValueAccessorIsEqual(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  v3 = *(void **)(a1 + 16);
  if (v3 == *(void **)(a2 + 16))
    return 1;
  else
    return objc_msgSend(v3, "isEqual:");
}

uint64_t destroy for Locale()
{
  return swift_unknownObjectRelease();
}

void static String.Encoding.utf8.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

CFTypeRef __karetain(int a1, CFTypeRef cf)
{
  return CFRetain(cf);
}

uint64_t protocol witness for _LocaleProtocol.doesNotRequireSpecialCaseHandling.getter in conformance _LocaleICU()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

NSString *_NSNewStringByAppendingStrings(malloc_zone_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9, uint64_t a10)
{
  size_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  malloc_zone_t *v24;
  char *v25;
  malloc_zone_t *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  malloc_zone_t *v37;
  size_t *v38;
  _QWORD v39[82];

  v39[80] = *MEMORY[0x1E0C80C00];
  v38 = (size_t *)&a10;
  v11 = a9;
  if (a9)
  {
    v12 = 0;
    LOBYTE(v13) = 1;
    do
    {
      if (v12 == 40)
        objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("Too many strings to append"), 0));
      if (v13)
      {
        v14 = objc_msgSend((id)v11, "fastestEncoding");
        if (__NSDefaultStringEncodingFullyInited)
          v15 = _NSDefaultStringEncoding;
        else
          v15 = _NSDefaultCStringEncoding();
        v13 = v14 == v15;
      }
      else
      {
        v13 = 0;
      }
      v39[v12] = v11;
      v16 = v12 + 1;
      v17 = v38++;
      v11 = *v17;
      ++v12;
    }
    while (*v17);
    v18 = 0;
    v19 = v16 - 1;
    while (1)
    {
      v20 = (void *)v39[v18];
      if (v13)
      {
        v21 = objc_msgSend(v20, "cStringLength");
        v39[v18 + 40] = v21;
        v11 += v21;
        if (v19 == v18)
        {
          v37 = a1;
          if (v11)
          {
            v24 = a1;
            if (!a1)
              v24 = malloc_default_zone();
            v25 = (char *)malloc_type_zone_malloc(v24, v11, 0x4A6F13AEuLL);
          }
          else
          {
            v25 = 0;
          }
          v28 = 0;
          v36 = v25;
          do
          {
            v29 = (void *)v39[v28];
            v30 = v39[v28 + 40];
            if (__NSDefaultStringEncodingFullyInited)
              v31 = _NSDefaultStringEncoding;
            else
              v31 = _NSDefaultCStringEncoding();
            objc_msgSend(v29, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v25, v30, 0, v31, 0, 0, v30, 0);
            v25 += v30;
            ++v28;
          }
          while (v16 != v28);
          v23 = v36;
          a1 = v37;
          return -[NSString initWithCStringNoCopy:length:freeWhenDone:](+[NSString allocWithZone:](NSString, "allocWithZone:", a1), "initWithCStringNoCopy:length:freeWhenDone:", v23, v11, 1);
        }
      }
      else
      {
        v22 = objc_msgSend(v20, "length");
        v39[v18 + 40] = v22;
        v11 += v22;
        if (v19 == v18)
        {
          if ((v11 & 0x8000000000000000) != 0)
            return 0;
          if (v11)
          {
            v26 = a1;
            if (!a1)
              v26 = malloc_default_zone();
            v27 = (char *)malloc_type_zone_malloc(v26, 2 * v11, 0x4A6F13AEuLL);
          }
          else
          {
            v27 = 0;
          }
          v33 = 0;
          v34 = v27;
          do
          {
            v35 = v39[v33 + 40];
            objc_msgSend((id)v39[v33], "getCharacters:range:", v34, 0, v35);
            v34 += 2 * v35;
            ++v33;
          }
          while (v16 != v33);
          return -[NSString initWithCharactersNoCopy:length:freeWhenDone:](+[NSString allocWithZone:](NSString, "allocWithZone:", a1), "initWithCharactersNoCopy:length:freeWhenDone:", v27, v11, 1);
        }
      }
      ++v18;
    }
  }
  v23 = 0;
  return -[NSString initWithCStringNoCopy:length:freeWhenDone:](+[NSString allocWithZone:](NSString, "allocWithZone:", a1), "initWithCStringNoCopy:length:freeWhenDone:", v23, v11, 1);
}

id @objc static NSLocale._current.getter()
{
  if (one-time initialization token for cache != -1)
    swift_once();
  return (id)LocaleCache.currentNSLocale()();
}

uint64_t LocaleCache.currentNSLocale()()
{
  os_unfair_lock_s **v0;
  uint64_t *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  _OWORD v8[9];

  v1 = (uint64_t *)&(*v0)[4];
  v2 = *v0 + 31;
  swift_retain();
  os_unfair_lock_lock(v2);
  closure #1 in LocaleCache.currentNSLocale()(v1, v8);
  os_unfair_lock_unlock(v2);
  swift_release();
  v3 = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return v3;
  LocaleCache.preferences()(v8);
  v5 = v4;
  swift_retain();
  os_unfair_lock_lock(v2);
  closure #2 in LocaleCache.currentNSLocale()(v8, v5 & 1, &v7);
  os_unfair_lock_unlock(v2);
  swift_release();
  v3 = v7;
  if (v7)
  {
    outlined release of LocalePreferences(v8);
    return v3;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id closure #1 in LocaleCache.currentNSLocale()@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  objc_super v14;

  LocaleCache.State.resetCurrentIfNeeded()();
  v4 = (void *)a1[6];
  v5 = v4;
  if (!v4)
  {
    v6 = *a1;
    if (*a1)
    {
      v7 = a1[1];
      v8 = (objc_class *)type metadata accessor for _NSSwiftLocale();
      v9 = (char *)objc_allocWithZone(v8);
      v10 = &v9[OBJC_IVAR____NSSwiftLocale_locale];
      *(_QWORD *)v10 = v6;
      *((_QWORD *)v10 + 1) = v7;
      v11 = String._bridgeToObjectiveCImpl()();
      v14.receiver = v9;
      v14.super_class = v8;
      swift_unknownObjectRetain_n();
      v5 = objc_msgSendSuper2(&v14, sel_initWithLocaleIdentifier_, v11);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      a1[6] = (uint64_t)v5;
      v12 = v5;
    }
    else
    {
      v5 = 0;
    }
  }
  *a2 = v5;
  return v4;
}

Swift::Void __swiftcall LocaleCache.State.resetCurrentIfNeeded()()
{
  uint64_t v0;
  uint64_t NoteCount;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t MidnightNoteCount;
  uint64_t v6;

  NoteCount = _CFLocaleGetNoteCount();
  v2 = _CFTimeZoneGetNoteCount();
  v3 = __OFADD__(NoteCount, v2);
  v4 = NoteCount + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  MidnightNoteCount = _CFCalendarGetMidnightNoteCount();
  v3 = __OFADD__(v4, MidnightNoteCount);
  v6 = v4 + MidnightNoteCount;
  if (v3)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  if (v6 != *(_QWORD *)(v0 + 96) || *(_BYTE *)(v0 + 104) == 1)
  {
    swift_unknownObjectRelease();
    *(_QWORD *)v0 = 0;
    *(_QWORD *)(v0 + 8) = 0;
    *(_QWORD *)(v0 + 96) = v6;
    *(_BYTE *)(v0 + 104) = 0;

    *(_QWORD *)(v0 + 48) = 0;
    if (*MEMORY[0x1E0C9B070])
    {
      _CFNotificationCenterInitializeDependentNotificationIfNecessary();
      return;
    }
    goto LABEL_10;
  }
}

void sub_1817DD2C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  free(*(void **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_1817DD524(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t _NSGetUsingKeyValueGetter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (_NSKeyValueObserverRegistrationEnableLockingAssertions)
    os_unfair_lock_assert_not_owner((const os_unfair_lock *)&_NSKeyValueObserverRegistrationLock);
  v4 = *(_QWORD *)(a2 + 48);
  if (v4 == 2)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a2 + 32))(a1, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
  if (v4 == 1)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a2 + 32))(a1, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 56));
  if (v4)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a2 + 32))(a1, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72));
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 32))(a1, *(_QWORD *)(a2 + 40));
}

SEL NSSelectorFromString(SEL aSelectorName)
{
  char *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  char v5[1000];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (aSelectorName)
  {
    v1 = (char *)aSelectorName;
    v2 = objc_msgSend((id)aSelectorName, "length");
    if (objc_msgSend(v1, "getCString:maxLength:encoding:", v5, 1000, 4) && strlen(v5) == v2)
    {
      v3 = v5;
      return sel_registerName(v3);
    }
    if (!v2)
    {
LABEL_9:
      v3 = (const char *)objc_msgSend(v1, "UTF8String");
      return sel_registerName(v3);
    }
    v4 = 0;
    while (objc_msgSend(v1, "characterAtIndex:", v4))
    {
      if (v2 == ++v4)
        goto LABEL_9;
    }
    return 0;
  }
  return aSelectorName;
}

Class NSClassFromString(Class aClassName)
{
  Class v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  char v5[1000];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (aClassName)
  {
    v1 = aClassName;
    v2 = -[objc_class length](aClassName, "length");
    if (-[objc_class getCString:maxLength:encoding:](v1, "getCString:maxLength:encoding:", v5, 1000, 4)&& strlen(v5) == v2)
    {
      v3 = v5;
      return objc_lookUpClass(v3);
    }
    if (!v2)
    {
LABEL_9:
      v3 = (const char *)-[objc_class UTF8String](v1, "UTF8String");
      return objc_lookUpClass(v3);
    }
    v4 = 0;
    while (-[objc_class characterAtIndex:](v1, "characterAtIndex:", v4))
    {
      if (v2 == ++v4)
        goto LABEL_9;
    }
    return 0;
  }
  return aClassName;
}

_QWORD *_NSNewValue(float64x2_t *a1, char *__s1, NSZone *a3)
{
  CFMutableSetRef v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  CFIndex version;
  size_t v16;
  char *v17;
  objc_class *v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *IndexedIvars;
  char *v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  __int128 v35;
  CFSetCallBacks callBacks;
  _QWORD value[3];

  value[2] = *MEMORY[0x1E0C80C00];
  v35 = 0uLL;
  v34 = 0uLL;
  v33 = 0uLL;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  v25 = 0uLL;
  if (!strcmp(__s1, "{_NSRange=II}"))
  {
    *(_QWORD *)&v7 = *(_QWORD *)&a1->f64[0];
    *((_QWORD *)&v7 + 1) = HIDWORD(*(_QWORD *)&a1->f64[0]);
    v35 = v7;
    v8 = &_NSCachedTypeInfoRange64;
    a1 = (float64x2_t *)&v35;
LABEL_24:
    v9 = 4;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{_NSRange=QQ}"))
  {
    v8 = &_NSCachedTypeInfoRange64;
    goto LABEL_24;
  }
  if (!strcmp(__s1, "{CGPoint=ff}"))
  {
    v34 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    v8 = &_NSCachedTypeInfoPoint64;
    a1 = &v34;
LABEL_27:
    v9 = 1;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{CGPoint=dd}"))
  {
    v8 = &_NSCachedTypeInfoPoint64;
    goto LABEL_27;
  }
  if (!strcmp(__s1, "{CGSize=ff}"))
  {
    v33 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    v8 = &_NSCachedTypeInfoSize64;
    a1 = &v33;
LABEL_30:
    v9 = 2;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{CGSize=dd}"))
  {
    v8 = &_NSCachedTypeInfoSize64;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "{CGRect={CGPoint=ff}{CGSize=ff}}"))
  {
    v10 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[1]);
    v31 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    v32 = v10;
    v8 = &_NSCachedTypeInfoRect64;
    a1 = &v31;
LABEL_33:
    v9 = 3;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
  {
    v8 = &_NSCachedTypeInfoRect64;
    goto LABEL_33;
  }
  if (!strcmp(__s1, "{CGAffineTransform=ffffff}"))
  {
    v11 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[1]);
    v28 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    v29 = v11;
    v30 = vcvtq_f64_f32(*(float32x2_t *)&a1[1].f64[0]);
    v8 = &_NSCachedTypeInfoCGAffineTransform64;
    a1 = &v28;
LABEL_36:
    v9 = 10;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{CGAffineTransform=dddddd}"))
  {
    v8 = &_NSCachedTypeInfoCGAffineTransform64;
    goto LABEL_36;
  }
  if (!strcmp(__s1, "{UIEdgeInsets=ffff}"))
  {
    v12 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[1]);
    v26 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    v27 = v12;
    v8 = &_NSCachedTypeInfoUIEdgeInsets64;
    a1 = &v26;
LABEL_39:
    v9 = 11;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{UIEdgeInsets=dddd}"))
  {
    v8 = &_NSCachedTypeInfoUIEdgeInsets64;
    goto LABEL_39;
  }
  if (!strcmp(__s1, "{NSEdgeInsets=ffff}"))
  {
    v13 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[1]);
    v26 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    v27 = v13;
    v8 = &_NSCachedTypeInfoNSEdgeInsets64;
    a1 = &v26;
LABEL_42:
    v9 = 12;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{NSEdgeInsets=dddd}"))
  {
    v8 = &_NSCachedTypeInfoNSEdgeInsets64;
    goto LABEL_42;
  }
  if (!strcmp(__s1, "{NSDirectionalEdgeInsets=ffff}"))
  {
    v14 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[1]);
    v26 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    v27 = v14;
    v8 = &_NSCachedTypeInfoNSDirectionalEdgeInsets64;
    a1 = &v26;
LABEL_45:
    v9 = 14;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{NSDirectionalEdgeInsets=dddd}"))
  {
    v8 = &_NSCachedTypeInfoNSDirectionalEdgeInsets64;
    goto LABEL_45;
  }
  if (!strcmp(__s1, "{UIOffset=ff}"))
  {
    v25 = vcvtq_f64_f32(*(float32x2_t *)&a1->f64[0]);
    v8 = &_NSCachedTypeInfoUIOffset64;
    a1 = &v25;
LABEL_48:
    v9 = 13;
    goto LABEL_57;
  }
  if (!strcmp(__s1, "{UIOffset=dd}"))
  {
    v8 = &_NSCachedTypeInfoUIOffset64;
    goto LABEL_48;
  }
  value[0] = 0;
  value[1] = __s1;
  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_24);
  v6 = (CFMutableSetRef)qword_1ECD09668;
  if (!qword_1ECD09668)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_24);
    memset(&callBacks, 0, 32);
    callBacks.equal = (CFSetEqualCallBack)cachedObjCTypeInfoIsEqual;
    callBacks.hash = (CFSetHashCallBack)cachedObjCTypeInfoHash;
    v6 = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, &callBacks);
    os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_24);
    if (qword_1ECD09668)
    {
      CFRelease(v6);
      v6 = (CFMutableSetRef)qword_1ECD09668;
    }
    else
    {
      qword_1ECD09668 = (uint64_t)v6;
    }
  }
  v8 = (uint64_t *)CFSetGetValue(v6, value);
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_24);
  if (!v8)
  {
    callBacks.version = 0;
    NSGetSizeAndAlignment(__s1, (NSUInteger *)&callBacks, 0);
    version = callBacks.version;
    v16 = strlen(__s1);
    v17 = (char *)malloc_type_malloc(v16 + 17, 0x2CF71276uLL);
    v24 = v17;
    if (!v17)
      return 0;
    *(_QWORD *)v17 = version;
    *((_QWORD *)v17 + 1) = v17 + 16;
    strlcpy(v17 + 16, __s1, v16 + 1);
    os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_24);
    v8 = (uint64_t *)CFSetGetValue((CFSetRef)qword_1ECD09668, value);
    if (v8)
    {
      free(v24);
    }
    else
    {
      CFSetSetValue((CFMutableSetRef)qword_1ECD09668, v24);
      v8 = (uint64_t *)v24;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_24);
  }
  v9 = 0;
LABEL_57:
  v18 = (objc_class *)__NSConcreteValueClass;
  if (!__NSConcreteValueClass)
  {
    v18 = (objc_class *)objc_opt_self();
    __NSConcreteValueClass = (uint64_t)v18;
  }
  v19 = *v8;
  v20 = (_QWORD *)objc_msgSend(NSAllocateObject(v18, *v8, a3), "init");
  v21 = v20;
  if (v20)
  {
    v20[2] = v8;
    v20[1] = v9;
    IndexedIvars = object_getIndexedIvars(v20);
    memmove(IndexedIvars, a1, v19);
  }
  return v21;
}

id NSAllocateObject(Class aClass, NSUInteger extraBytes, NSZone *zone)
{
  id Instance;
  void *v5;
  void *v7;

  Instance = class_createInstance(aClass, extraBytes);
  if (!Instance)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** NSAllocateObject(): attempt to allocate object of class '%s' failed"), class_getName(aClass)), 0);
    objc_exception_throw(v7);
  }
  v5 = Instance;
  if (*MEMORY[0x1E0C9A980])
  {
    object_getClassName(Instance);
    __CFSetLastAllocationEventName();
  }
  return v5;
}

id _NSGetLongLongValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithLongLong:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));
}

id _NSGetIntValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithInt:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));
}

id _NSGetDoubleValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  ((void (*)(uint64_t, SEL))Implementation)(a1, Name);
  return (id)objc_msgSend(v5, "initWithDouble:");
}

NSValue *_NSGetRectValueWithMethod(uint64_t a1, int a2, Method m)
{
  IMP Implementation;
  SEL Name;

  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  ((void (*)(uint64_t, SEL))Implementation)(a1, Name);
  return +[NSValue valueWithRect:](NSValue, "valueWithRect:");
}

NSValue *_NSGetPointValueWithMethod(uint64_t a1, int a2, Method m)
{
  IMP Implementation;
  SEL Name;

  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  ((void (*)(uint64_t, SEL))Implementation)(a1, Name);
  return +[NSValue valueWithPoint:](NSValue, "valueWithPoint:");
}

NSValue *_NSGetSizeValueWithMethod(uint64_t a1, int a2, Method m)
{
  IMP Implementation;
  SEL Name;

  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  ((void (*)(uint64_t, SEL))Implementation)(a1, Name);
  return +[NSValue valueWithSize:](NSValue, "valueWithSize:");
}

uint64_t _NSGetObjectGetAssignValueInIvar(uint64_t a1, int a2, Ivar v)
{
  return *(_QWORD *)(a1 + ivar_getOffset(v));
}

id _NSGetFloatValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  ((void (*)(uint64_t, SEL))Implementation)(a1, Name);
  return (id)objc_msgSend(v5, "initWithFloat:");
}

id _NSGetUnsignedLongLongValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLongLong:", *(_QWORD *)(a1 + ivar_getOffset(a3)));
}

id _NSGetBoolValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", *(unsigned __int8 *)(a1 + ivar_getOffset(a3)));
}

ValueMetadata *type metadata accessor for String.Encoding()
{
  return &type metadata for String.Encoding;
}

void __karelease(int a1, CFTypeRef cf)
{
  CFRelease(cf);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UUID(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

ValueMetadata *type metadata accessor for Locale()
{
  return &type metadata for Locale;
}

ValueMetadata *type metadata accessor for IndexPath()
{
  return &type metadata for IndexPath;
}

uint64_t __DataStorage._length.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

ValueMetadata *type metadata accessor for DateInterval()
{
  return &type metadata for DateInterval;
}

uint64_t partial apply for closure #1 in static String._unconditionallyBridgeFromObjectiveC(_:)(uint64_t result)
{
  if (result)
    return _NSTaggedPointerStringGetBytes();
  __break(1u);
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1)
{
  uint64_t *v1;

  return JSONDecoderImpl.KeyedContainer.contains(_:)(a1, *v1, v1[1], v1[2]);
}

uint64_t destroy for JSONDecoderImpl.KeyedContainer()
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t _NSXPCSerializationIntegerForObject(_QWORD *a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (!*a2)
    return 0;
  v4 = 0;
  if (_getIntAtMarker(a1, &v4, v2, v5))
    return v4;
  else
    return 0;
}

uint64_t _setAllowedClass(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = *(_QWORD *)(result + 4440);
    if (v2 >= 271)
      objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("decodeObjectOfClass:forKey: too many nested collections"), 0));
    v3 = v2 + 1;
    *(_QWORD *)(result + 4440) = v3;
    *(_QWORD *)(result + 2264 + 8 * v3) = a2;
  }
  return result;
}

_QWORD *_setAllowedClasses(_QWORD *result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (a2)
  {
    v2 = result;
    v3 = result[555];
    if (v3 >= 271)
      objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("decodeObjectOfClass:forKey: too many nested collections"), 0));
    result[555] = v3 + 1;
    result = a2;
    v2[v2[555] + 283] = result;
  }
  return result;
}

void _resetAllowedClasses(uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    *(_QWORD *)(a1 + 2264 + 8 * (*(_QWORD *)(a1 + 4440))--) = 0;
  }
}

void *_NSXPCSerializationAddASCIIString(uint64_t a1, void *key, uint64_t a3, int a4)
{
  const __CFDictionary *Mutable;
  const void *Value;
  void *result;
  unint64_t v10;
  char v11;

  if (a3 && a4)
  {
    Mutable = *(const __CFDictionary **)(a1 + 8240);
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
      *(_QWORD *)(a1 + 8240) = Mutable;
    }
    Value = CFDictionaryGetValue(Mutable, key);
    if (Value)
      return _NSXPCSerializationAddReference(a1, (unint64_t)Value);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 8240), key, *(const void **)(a1 + 8200));
  }
  v10 = a3 + 1;
  _reserveSpace(a1, 1);
  v11 = 15;
  if ((unint64_t)(a3 + 1) < 0xF)
    v11 = a3 + 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = v11 | 0x70;
  if (v10 >= 0xF)
    _NSXPCSerializationAddInteger(a1, a3 + 1);
  _reserveSpace(a1, a3 + 1);
  result = memmove((void *)(*(_QWORD *)(a1 + 8216) + *(_QWORD *)(a1 + 8200)), key, a3 + 1);
  *(_QWORD *)(a1 + 8200) += v10;
  return result;
}

void *_NSXPCSerializationAddInteger(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  size_t v5;
  void *result;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = a2;
  if (HIDWORD(a2))
    v3 = 8;
  else
    v3 = 4;
  if (a2 >= 0x10000)
    v4 = v3;
  else
    v4 = 2;
  if (a2 >= 0x100)
    v5 = v4;
  else
    v5 = 1;
  _reserveSpace(a1, 1);
  *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = v5 | 0x10;
  _reserveSpace(a1, v5);
  result = memmove((void *)(*(_QWORD *)(a1 + 8216) + *(_QWORD *)(a1 + 8200)), v7, v5);
  *(_QWORD *)(a1 + 8200) += v5;
  return result;
}

void *_NSXPCSerializationAddReference(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  size_t v5;
  void *result;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v7[0] = a2;
  if (HIDWORD(a2))
    v3 = 8;
  else
    v3 = 4;
  if (a2 >= 0x10000)
    v4 = v3;
  else
    v4 = 2;
  if (a2 >= 0x100)
    v5 = v4;
  else
    v5 = 1;
  _reserveSpace(a1, 1);
  *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = v5 | 0x80;
  _reserveSpace(a1, v5);
  result = memmove((void *)(*(_QWORD *)(a1 + 8216) + *(_QWORD *)(a1 + 8200)), v7, v5);
  *(_QWORD *)(a1 + 8200) += v5;
  return result;
}

void _reserveSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  _BYTE *v6;
  float v7;
  mach_vm_size_t v8;
  uint64_t v9;
  vm_map_t *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  const __CFString *v15;
  void *__dst;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8200);
  v3 = __CFADD__(v2, a2);
  v4 = v2 + a2;
  if (v3)
  {
    v13 = (void *)MEMORY[0x1E0C99DA0];
    v14 = *MEMORY[0x1E0C99778];
    v15 = CFSTR("Unable to allocate enough memory to encode data (overflow)");
    goto LABEL_21;
  }
  if (v4 <= *(_QWORD *)(a1 + 8208))
    return;
  if ((float)v4 > 1.1529e19)
  {
    v13 = (void *)MEMORY[0x1E0C99DA0];
    v14 = *MEMORY[0x1E0C99778];
    v15 = CFSTR("Unable to allocate enough memory to encode data (overflow 2)");
    goto LABEL_21;
  }
  v6 = (_BYTE *)(a1 + 8248);
  v7 = (float)v4 * 1.6;
  v8 = (unint64_t)v7;
  if ((unint64_t)v7 <= 0x20000)
  {
    if (!*(_BYTE *)(a1 + 8249))
    {
      *(_QWORD *)(a1 + 8216) = MEMORY[0x186DA80E4](*(_QWORD *)(a1 + 8216), (unint64_t)v7, 3628536420, &__block_literal_global_92);
      *(_QWORD *)(a1 + 8208) = v8;
      return;
    }
    v11 = malloc_type_malloc((unint64_t)v7, 0xC9AD6493uLL);
    if (v11)
    {
      v12 = v11;
      memcpy(v11, *(const void **)(a1 + 8216), *(_QWORD *)(a1 + 8200));
      *(_QWORD *)(a1 + 8216) = v12;
      *(_QWORD *)(a1 + 8208) = v8;
      *(_BYTE *)(a1 + 8249) = 0;
      return;
    }
    goto LABEL_20;
  }
  __dst = 0;
  v9 = v8 + *MEMORY[0x1E0C85AD8] - 1;
  if (((unint64_t)v9 & -*MEMORY[0x1E0C85AD8]) > v8)
    v8 = v9 & -*MEMORY[0x1E0C85AD8];
  v10 = (vm_map_t *)MEMORY[0x1E0C83DA0];
  if (mach_vm_allocate(*MEMORY[0x1E0C83DA0], (mach_vm_address_t *)&__dst, v8, 687865857))
  {
LABEL_20:
    v13 = (void *)MEMORY[0x1E0C99DA0];
    v14 = *MEMORY[0x1E0C99778];
    v15 = CFSTR("Unable to allocate enough memory to encode data");
LABEL_21:
    objc_exception_throw((id)objc_msgSend(v13, "exceptionWithName:reason:userInfo:", v14, v15, 0, __dst, v17));
  }
  memmove(__dst, *(const void **)(a1 + 8216), *(_QWORD *)(a1 + 8200));
  if (*v6)
  {
    mach_vm_deallocate(*v10, *(_QWORD *)(a1 + 8216), *(_QWORD *)(a1 + 8208));
  }
  else if (!*(_BYTE *)(a1 + 8249))
  {
    free(*(void **)(a1 + 8216));
  }
  *(_QWORD *)(a1 + 8216) = __dst;
  *(_QWORD *)(a1 + 8208) = v8;
  *(_WORD *)v6 = 1;
}

void _NSXPCSerializationAddString(uint64_t a1, CFStringRef theString, int a3)
{
  CFIndex Length;
  const __CFDictionary *Mutable;
  const void *Value;
  char *v9;
  char v10;
  CFIndex v11[2];
  CFRange v12;

  v11[1] = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(theString);
  if (Length >= 1)
  {
    Mutable = *(const __CFDictionary **)(a1 + 8232);
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0);
      *(_QWORD *)(a1 + 8232) = Mutable;
    }
    Value = CFDictionaryGetValue(Mutable, theString);
    if (Value)
    {
      _NSXPCSerializationAddReference(a1, (unint64_t)Value);
      return;
    }
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 8232), theString, *(const void **)(a1 + 8200));
  }
  if (a3 && (v11[0] = 0, (v9 = (char *)_stringIsASCII(theString, v11)) != 0))
  {
    _NSXPCSerializationAddASCIIString(a1, v9, v11[0], 0);
  }
  else
  {
    _reserveSpace(a1, 1);
    v10 = 15;
    if (Length < 15)
      v10 = Length;
    *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = v10 | 0x60;
    if (Length >= 15)
      _NSXPCSerializationAddInteger(a1, Length);
    _reserveSpace(a1, 2 * Length);
    v12.location = 0;
    v12.length = Length;
    CFStringGetCharacters(theString, v12, (UniChar *)(*(_QWORD *)(a1 + 8216) + *(_QWORD *)(a1 + 8200)));
    *(_QWORD *)(a1 + 8200) += 2 * Length;
  }
}

NSNumber *_decodeObjectAfterSettingAllowListForKey(uint64_t a1, const __CFString *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v8[0] = 0;
  v8[1] = 0;
  v4 = (_QWORD *)(a1 + 24);
  v5 = *(_QWORD **)(a1 + 56 + 8 * *(unsigned int *)(a1 + 2260));
  if (a2)
  {
    if (_NSXPCSerializationCreateObjectInDictionaryForKey(v4, v5, a2, (uint64_t)v8))
      return _decodeObject_0(a1, a2, (uint64_t)v8);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7 + 1;
    if (_NSXPCSerializationCreateObjectInDictionaryForGenericKey(v4, v5, v7, (uint64_t)v8))
      return _decodeObject_0(a1, a2, (uint64_t)v8);
  }
  return 0;
}

uint64_t _decodeObject(unint64_t *a1, const void *a2, _QWORD *a3)
{
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  id v13[2];

  v13[1] = *(id *)MEMORY[0x1E0C80C00];
  v13[0] = 0;
  v6 = atomic_load(a1 + 2);
  atomic_store(v6 | 8, a1 + 2);
  v7 = (void *)MEMORY[0x186DA8F78]();
  if (a1[10])
  {
    v8 = _decodeObjectXML((uint64_t)a1, a2, v13);
  }
  else
  {
    v11 = 0;
    v12 = 0;
    if (!_decodeOffsetAndRef((objc_class *)a1, (uint64_t)a2, &v12, &v11))
    {
      v9 = 0;
      goto LABEL_6;
    }
    v8 = _decodeObjectBinary((uint64_t)a1, v11, (uint64_t)a2, (CFTypeRef *)v13);
  }
  v9 = v8;
LABEL_6:
  objc_autoreleasePoolPop(v7);
  *a3 = v13[0];
  return v9;
}

NSNumber *_decodeObject_0(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  void *v3;
  const __CFString *v4;
  const void *v5;
  int v7;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  unsigned int v14;
  unsigned int v15;
  void *Value;
  uint64_t v17;
  void *v18;
  const char *v19;
  const char *v20;
  Class v21;
  objc_class *v22;
  objc_class *v23;
  void *v24;
  id v25;
  __CFDictionary *v26;
  NSString *v27;
  NSString *v28;
  NSString *v29;
  NSString *v30;
  NSString *v31;
  NSString *v32;
  unint64_t v33[2];
  const void *v34;
  uint64_t v35;
  uint64_t v36;

  v3 = 0;
  v36 = *MEMORY[0x1E0C80C00];
  if (a2)
    v4 = a2;
  else
    v4 = CFSTR("<no key>");
  v5 = *(const void **)a3;
  if (*(_QWORD *)a3)
  {
    v7 = *(_DWORD *)(a3 + 8);
    if (v7 != 255)
    {
      HIDWORD(v9) = *(_DWORD *)(a3 + 8);
      LODWORD(v9) = v7 - 16;
      v3 = 0;
      switch((v9 >> 4))
      {
        case 0u:
        case 1u:
        case 0xEu:
          objc_msgSend((id)a1, "_validateAllowedClass:forKey:allowingInvocations:", NSNumber, v4, 1);
          return _NSXPCSerializationNumberForObject((uint64_t *)(a1 + 24), (unint64_t *)a3);
        case 3u:
          objc_msgSend((id)a1, "_validateAllowedClass:forKey:allowingInvocations:", MEMORY[0x1E0C99D50], v4, 1);
          return (NSNumber *)_NSXPCSerializationDataForObject((_QWORD *)(a1 + 24), (unint64_t *)a3);
        case 5u:
          objc_msgSend((id)a1, "_validateAllowedClass:forKey:allowingInvocations:", NSString, v4, 1);
          return (NSNumber *)_NSXPCSerializationStringForObject((_QWORD *)(a1 + 24), (char **)a3);
        case 6u:
          objc_msgSend((id)a1, "_validateAllowedClass:forKey:allowingInvocations:", NSString, v4, 1);
          v12 = _NSXPCSerializationASCIIStringForObject((_QWORD *)(a1 + 24), (unint64_t *)a3);
          if (v12)
            return (NSNumber *)+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12);
          v3 = 0;
          break;
        case 7u:
          v13 = (const void *)_NSXPCSerializationReferenceForObject((_QWORD *)(a1 + 24), (unint64_t *)a3);
          v14 = _NSXPCSerializationTypeForReference((_QWORD *)(a1 + 24), (unint64_t)v13);
          if (v14 == 255)
          {
            v27 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("decodeObjectForKey: Invalid reference marker for object with key %@"), v4);
            objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), v27, 0));
          }
          v15 = v14;
          Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v13);
          if (Value)
          {
            v3 = Value;
            objc_msgSend((id)a1, "_validateReusedReference:forKey:", Value, v4);
          }
          else
          {
            v34 = v13;
            v35 = v15;
            v3 = (void *)_decodeObject_0(a1, v4, &v34);
            if (!v3)
            {
              v32 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("decodeObjectForKey: Invalid reference object for reference with key %@"), v4);
              objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), v32, 0));
            }
          }
          return (NSNumber *)v3;
        case 9u:
        case 0xDu:
          return (NSNumber *)v3;
        case 0xAu:
          objc_msgSend((id)a1, "_validateAllowedClass:forKey:allowingInvocations:", NSNumber, v4, 1);
          v11 = 1;
          return +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v11);
        case 0xBu:
          objc_msgSend((id)a1, "_validateAllowedClass:forKey:allowingInvocations:", NSNumber, v4, 1);
          v11 = 0;
          return +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v11);
        default:
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = 0;
          if (++*(_DWORD *)(a1 + 2260) >= 0x110u)
            objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("decodeObjectForKey: too many nested collections"), 0));
          v18 = *(void **)(a1 + 2248);
          *(_QWORD *)(a1 + 2248) = 0;
          *(_QWORD *)(a1 + 56 + 8 * *(unsigned int *)(a1 + 2260)) = a3;
          v34 = 0;
          v35 = 0;
          if (_NSXPCSerializationCreateObjectInDictionaryForASCIIKey((_QWORD *)(a1 + 24), (_QWORD *)a3, "$xpc", (uint64_t)&v34))
          {
            v3 = (void *)objc_msgSend((id)a1, "_xpcObjectForIndex:", _NSXPCSerializationIntegerForObject((_QWORD *)(a1 + 24), (unint64_t *)&v34));
            objc_msgSend((id)a1, "_validateAllowedXPCType:forKey:", object_getClass(v3), v4);
          }
          else
          {
            v33[0] = 0;
            v33[1] = 0;
            if (!_NSXPCSerializationCreateObjectInDictionaryForASCIIKey((_QWORD *)(a1 + 24), (_QWORD *)a3, "$class", (uint64_t)v33))objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("decodeObjectForKey: class name missing"), 0));
            v19 = (const char *)_NSXPCSerializationASCIIStringForObject((_QWORD *)(a1 + 24), v33);
            if (!v19)
              objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("decodeObjectForKey: class name missing (2)"), 0));
            v20 = v19;
            v21 = objc_lookUpClass(v19);
            if (!v21)
            {
              v28 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("decodeObjectForKey: class \"%s\" not loaded or does not exist"), v20);
              objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), v28, 0));
            }
            objc_msgSend((id)a1, "_validateAllowedClass:forKey:allowingInvocations:", v21, v4, 1);
            if (v18)
              _removeAllowedClass(a1, v18);
            v22 = -[objc_class allocWithZone:](v21, "allocWithZone:", objc_msgSend((id)a1, "zone"));
            if (!v22)
            {
              v29 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("decodeObjectForKey: Class \"%s\" returned nil from +alloc while being decoded for key %@"), v20, v4);
              objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), v29, 0));
            }
            v23 = -[objc_class initWithCoder:](v22, "initWithCoder:", a1);
            if (!v23)
            {
              v30 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("decodeObjectForKey: Object of class \"%s\" returned nil from -initWithCoder: while being decoded for key %@"), v20, v4);
              objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), v30, 0));
            }
            v24 = (void *)-[objc_class awakeAfterUsingCoder:](v23, "awakeAfterUsingCoder:", a1);
            v3 = v24;
            if (!v24)
            {
              v31 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("decodeObjectForKey: Object of class \"%s\" returned nil from -awakeAfterUsingCoder: while being decoded for key %@"), v20, v4);
              objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), v31, 0));
            }
            v25 = v24;
          }
          *(_QWORD *)(a1 + 16) = v17;
          --*(_DWORD *)(a1 + 2260);
          *(_QWORD *)(a1 + 2248) = 0;
          if (v3)
          {
            v26 = *(__CFDictionary **)(a1 + 40);
            if (v26)
              CFDictionaryAddValue(v26, v5, v3);
          }
          return (NSNumber *)v3;
      }
    }
  }
  return (NSNumber *)v3;
}

void sub_1817E1BB0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1817E18F4);
  }
  _Unwind_Resume(exc_buf);
}

BOOL _NSXPCSerializationCreateObjectInDictionaryForASCIIKey(_QWORD *a1, _QWORD *a2, char *__s, uint64_t a4)
{
  _BOOL8 v8;
  _QWORD v10[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___NSXPCSerializationCreateObjectInDictionaryForASCIIKey_block_invoke;
  v10[3] = &unk_1E0F55EA8;
  v10[6] = strlen(__s);
  v10[7] = __s;
  v10[4] = &v11;
  v10[5] = a1;
  v10[8] = a4;
  if (_iterateDictionaryKeysAndValues(a1, a2, (uint64_t)v10))
    v8 = *((_BYTE *)v12 + 24) != 0;
  else
    v8 = 0;
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1817E266C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _NSXPCSerializationCreateObjectInDictionaryForKey(_QWORD *a1, _QWORD *a2, const __CFString *a3, uint64_t a4)
{
  const char *v8;
  _BOOL8 v9;
  _QWORD v11[10];
  CFIndex v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v12 = 0;
  v8 = _stringIsASCII(a3, &v12);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___NSXPCSerializationCreateObjectInDictionaryForKey_block_invoke;
  v11[3] = &unk_1E0F55ED0;
  v11[6] = a1;
  v11[7] = v8;
  v11[4] = a3;
  v11[5] = &v13;
  v11[8] = v12;
  v11[9] = a4;
  if (_iterateDictionaryKeysAndValues(a1, a2, (uint64_t)v11))
    v9 = *((_BYTE *)v14 + 24) != 0;
  else
    v9 = 0;
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_1817E2790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _iterateDictionaryKeysAndValues(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27[2];

  result = 0;
  v27[1] = *MEMORY[0x1E0C80C00];
  v5 = *a2 + 8;
  v6 = *a2 >= 0xFFFFFFFFFFFFFFF8;
  v7 = v6 << 63 >> 63;
  if (v7 == v6 && (v7 & 0x8000000000000000) == 0)
  {
    v8 = a1[1];
    if (v8 <= v5)
      return 0;
    v9 = *(_QWORD *)(*a2 + *a1 + 1);
    if (v9 == v5)
      return 1;
    result = 0;
    v10 = *a2 + 9;
    v11 = v5 == -1;
    v12 = v11 << 63 >> 63;
    v27[0] = v10;
    if (v12 != v11 || v12 < 0 || v8 <= v10)
      return result;
    if (v9 < v10)
      return 1;
    while (1)
    {
      v25 = v10;
      v26 = 255;
      LODWORD(v26) = *(_BYTE *)(*a1 + v10) & 0xF0;
      v23 = v10;
      v24 = 0;
      if ((_DWORD)v26 == 128)
      {
        if (!_getReferenceAtMarker(a1, &v23, v10, &v24))
          return 0;
        v14 = v23;
        if (!_getLastByteOfValueIncludingMarker(a1, v23, &v24))
          return 0;
        v25 = v10;
        LODWORD(v26) = *(_BYTE *)(*a1 + v14) & 0xF0;
      }
      if (!_getLastByteOfValueIncludingMarker(a1, v10, &v24))
        return 0;
      v15 = v24 + 1;
      v16 = v24 == -1;
      v17 = v16 << 63 >> 63;
      if (v17 != v16 || v17 < 0 || a1[1] <= v15)
        return 0;
      v21 = v24 + 1;
      v22 = 255;
      LODWORD(v22) = *(_BYTE *)(*a1 + v15) & 0xF0;
      if (!(*(unsigned int (**)(uint64_t, unint64_t *, uint64_t *))(a3 + 16))(a3, &v25, &v21))
        return 1;
      result = _getLastByteOfValueIncludingMarker(a1, v15, v27);
      if (!(_DWORD)result)
        break;
      result = 0;
      v18 = v27[0] + 1;
      v19 = v27[0] == -1;
      v20 = v19 << 63 >> 63;
      ++v27[0];
      if (v20 != v19 || v20 < 0)
        break;
      if (a1[1] <= v18)
        return 1;
      if (v10 >= v18)
        return 0;
      v10 = v18;
      if (v9 < v18)
        return 1;
    }
  }
  return result;
}

uint64_t _getLastByteOfValueIncludingMarker(_QWORD *a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  uint64_t result;
  char v6;
  int v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  if (v3 <= a2)
    return 0;
  result = 0;
  v6 = *(_BYTE *)(*a1 + a2);
  v7 = v6 & 0xF0;
  switch((v7 - 16) >> 4)
  {
    case 0u:
    case 7u:
    case 0xEu:
      v9 = a2 + (v6 & 0xF);
      *a3 = v9;
      if (__CFADD__(a2, v6 & 0xF) || v9 >= a1[1])
        return 0;
      goto LABEL_34;
    case 1u:
      if ((v6 & 0xF) == 3)
      {
        result = 0;
        v19 = __CFADD__(a2, 8);
        v13 = a2 + 8;
      }
      else
      {
        if ((v6 & 0xF) != 2)
          return 0;
        result = 0;
        v19 = __CFADD__(a2, 4);
        v13 = a2 + 4;
      }
      v20 = v19;
      v21 = v20 << 63 >> 63;
      *a3 = v13;
      if (v21 != v20 || v21 < 0)
        return result;
LABEL_33:
      if (a1[1] <= v13)
        return 0;
LABEL_34:
      result = 1;
      break;
    case 3u:
    case 5u:
    case 6u:
      v10 = v6 & 0xF;
      v22 = v10;
      if ((v6 & 0xF) == 0)
        goto LABEL_18;
      if ((_DWORD)v10 == 15)
      {
        v23[0] = a2 + 1;
        if (a2 + 1 >= v3)
          return 0;
        if (!_getIntAtMarker(a1, &v22, a2 + 1, v23))
          return 0;
        a2 = v23[0];
        if (v23[0] >= a1[1])
          return 0;
        v10 = v22;
        if (v22 < 0)
          return 0;
      }
      v11 = v10 << (v7 == 96);
      v12 = v11 >> 63;
      v19 = __CFADD__(a2, v11);
      v13 = a2 + v11;
      v14 = v19 ? v12 + 1 : v12;
      v15 = v14 << 63 >> 63;
      *a3 = v13;
      if (v15 != v14 || v15 < 0)
        return 0;
      goto LABEL_33;
    case 9u:
    case 0xCu:
      result = 0;
      v16 = a2 >= 0xFFFFFFFFFFFFFFF7;
      v17 = v16 << 63 >> 63;
      if (v17 != v16 || v17 < 0 || v3 <= a2 + 9)
        return result;
      v18 = *(_QWORD *)(a2 + *a1 + 1);
      *a3 = v18;
      if (v18 >= v3)
        return 0;
      goto LABEL_34;
    case 0xAu:
    case 0xBu:
    case 0xDu:
LABEL_18:
      *a3 = a2;
      goto LABEL_34;
    default:
      return result;
  }
  return result;
}

uint64_t _getIntAtMarker(_QWORD *a1, _QWORD *a2, unint64_t a3, unint64_t *a4)
{
  char v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[1] <= a3)
    return 0;
  v5 = *(_BYTE *)(*a1 + a3);
  if ((v5 & 0xF0) != 0x10)
    return 0;
  v6 = 0;
  v7 = v5 & 0xF;
  v8 = __CFADD__(a3, v5 & 0xF);
  v9 = a3 + (v5 & 0xF);
  v10 = v8;
  v11 = v10 << 63 >> 63;
  *a4 = v9;
  if (v11 == v10 && (v11 & 0x8000000000000000) == 0)
  {
    if (a1[1] > v9)
    {
      v6 = 0;
      switch(v7)
      {
        case 1:
          v6 = 1;
          __memcpy_chk();
          *a2 = 0;
          break;
        case 2:
        case 4:
        case 8:
          __memcpy_chk();
          *a2 = 0;
          v6 = 1;
          break;
        default:
          return v6;
      }
      return v6;
    }
    return 0;
  }
  return v6;
}

uint64_t _getASCIIStringAtMarker(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t *a4, unint64_t *a5)
{
  unint64_t v5;
  char v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v22[0] = a3;
  v5 = a1[1];
  if (v5 <= a3)
    return 0;
  v10 = *(_BYTE *)(*a1 + a3);
  if ((v10 & 0xF0) == 0x80)
  {
    result = _getReferenceAtMarker(a1, v22, a3, a5);
    if ((_DWORD)result)
      return _getASCIIStringAtMarker(a1, a2, v22[0], a4, &v21);
    return result;
  }
  if ((v10 & 0xF0) != 0x70)
    return 0;
  v12 = v10 & 0xF;
  v13 = a3 + 1;
  v21 = v12;
  v22[0] = v13;
  if (v13 >= v5)
    return 0;
  if ((_DWORD)v12 == 15)
  {
    result = _getIntAtMarker(a1, &v21, v13, v22);
    if (!(_DWORD)result)
      return result;
    result = 0;
    v13 = v22[0] + 1;
    v14 = v22[0] == -1;
    v15 = v14 << 63 >> 63;
    if (v15 != v14 || v15 < 0)
      return result;
    if (a1[1] <= v13)
      return 0;
    v12 = v21;
  }
  v16 = v12 < 1;
  v17 = v12 - 1;
  if (v16)
    return 0;
  result = 0;
  v18 = v13 + v17;
  v19 = __CFADD__(v13, v17);
  v20 = v19 << 63 >> 63;
  *a5 = v18;
  if (v20 == v19 && (v20 & 0x8000000000000000) == 0)
  {
    if (a1[1] > v18 && !*(_BYTE *)(*a1 + v18))
    {
      *a2 = *a1 + v13;
      *a4 = v17;
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL _getReferenceAtMarker(_QWORD *a1, _QWORD *a2, unint64_t a3, unint64_t *a4)
{
  char v6;
  _BOOL8 result;
  int v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v15;
  int v16;

  if (a1[1] <= a3)
    return 0;
  v6 = *(_BYTE *)(*a1 + a3);
  if ((v6 & 0xF0) != 0x80)
    return 0;
  result = 0;
  v8 = v6 & 0xF;
  v9 = __CFADD__(a3, v6 & 0xF);
  v10 = a3 + (v6 & 0xF);
  v11 = v9;
  v12 = v11 << 63 >> 63;
  *a4 = v10;
  if (v12 != v11 || v12 < 0)
    return result;
  v13 = a1[1];
  if (v13 <= v10)
    return 0;
  result = 0;
  v15 = (_BYTE *)*a1;
  switch(v8)
  {
    case 1:
    case 2:
    case 4:
    case 8:
      __memcpy_chk();
      *a2 = 0;
      if (!v13)
        return 0;
      v16 = *v15 & 0xF0;
      result = (*v15 & 0xB0) != 0x80 && v16 != 176 && v16 != 224;
      break;
    default:
      return result;
  }
  return result;
}

const char *_stringIsASCII(const __CFString *a1, CFIndex *a2)
{
  CFIndex Length;
  const char *result;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  UniChar v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex v19;
  CFStringEncoding *v20;
  CFStringEncoding v21;
  _OWORD v22[8];
  CFStringRef theString;
  const UniChar *v24;
  const char *v25;
  uint64_t v26;
  CFIndex v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFRange v31;

  v30 = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(a1);
  result = CFStringGetCStringPtr(a1, 0x600u);
  if (result)
    goto LABEL_29;
  memset(v22, 0, sizeof(v22));
  theString = a1;
  v26 = 0;
  v27 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  v24 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  v28 = 0;
  v29 = 0;
  v25 = CStringPtr;
  if (!Length)
  {
LABEL_26:
    v20 = (CFStringEncoding *)MEMORY[0x1E0C9A950];
    v21 = *MEMORY[0x1E0C9A950];
    if (*MEMORY[0x1E0C9A950] == -1)
    {
      __CFStringComputeEightBitStringEncoding();
      v21 = *v20;
    }
    result = CFStringGetCStringPtr(a1, v21);
    if (!result)
      return result;
LABEL_29:
    if (a2)
      *a2 = Length;
    return result;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 64;
  while (1)
  {
    v12 = (unint64_t)v10 >= 4 ? 4 : v10;
    v13 = v27;
    if (v27 > v10)
    {
      if (v24)
      {
        v14 = v24[v10 + v26];
      }
      else if (v25)
      {
        v14 = v25[v26 + v10];
      }
      else
      {
        if (v29 <= v10 || v9 > v10)
        {
          v16 = v12 + v8;
          v17 = v11 - v12;
          v18 = v10 - v12;
          v19 = v18 + 64;
          if (v18 + 64 >= v27)
            v19 = v27;
          v28 = v18;
          v29 = v19;
          if (v27 >= v17)
            v13 = v17;
          v31.length = v13 + v16;
          v31.location = v18 + v26;
          CFStringGetCharacters(theString, v31, (UniChar *)v22);
          v9 = v28;
        }
        v14 = *((_WORD *)v22 + v10 - v9);
      }
      if (v14 > 0x7Eu)
        return 0;
    }
    ++v10;
    --v8;
    ++v11;
    if (Length == v10)
      goto LABEL_26;
  }
}

const __CFString *_NSXPCSerializationStringForObject(_QWORD *a1, char **a2)
{
  char *v2;
  const __CFString *v4;
  unint64_t v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v4 = 0;
  if (!v2)
    return 0;
  if (_getStringAtMarker(a1, &v4, v2, v5))
    return v4;
  return 0;
}

uint64_t _getStringAtMarker(_QWORD *a1, const __CFString **a2, char *a3, unint64_t *a4)
{
  char *v5;
  const __CFDictionary *v8;
  const __CFString *Value;
  unint64_t v10;
  char v11;
  int v12;
  uint64_t result;
  CFStringRef v14;
  CFIndex v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __CFString *v24;
  __CFDictionary *v25;
  char *cStr;
  CFIndex numChars;
  void *key[2];

  v5 = a3;
  key[1] = *(void **)MEMORY[0x1E0C80C00];
  key[0] = a3;
  v8 = (const __CFDictionary *)a1[2];
  if (v8)
  {
    Value = (const __CFString *)CFDictionaryGetValue(v8, a3);
    if (Value)
    {
LABEL_31:
      *a2 = Value;
      return 1;
    }
  }
  v10 = a1[1];
  if (v10 <= (unint64_t)v5)
    return 0;
  v11 = v5[*a1];
  v12 = v11 & 0xF0;
  if (v12 == 112)
  {
    cStr = 0;
    result = _getASCIIStringAtMarker(a1, &cStr, (unint64_t)v5, &numChars, a4);
    if (!(_DWORD)result)
      return result;
    v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x600u);
LABEL_28:
    v24 = (__CFString *)v14;
    v25 = (__CFDictionary *)a1[2];
    if (v25)
      CFDictionarySetValue(v25, v5, v24);
    Value = v24;
    goto LABEL_31;
  }
  if (v12 == 128)
  {
    result = _getReferenceAtMarker(a1, key, (unint64_t)v5, a4);
    if ((_DWORD)result)
      return _getStringAtMarker(a1, a2, key[0], &numChars);
    return result;
  }
  if (v12 != 96)
    return 0;
  v15 = v11 & 0xF;
  numChars = v15;
  if ((v11 & 0xF) == 0)
  {
    *a4 = (unint64_t)v5;
    if (!a2)
      return 1;
    Value = &stru_1E0F56070;
    goto LABEL_31;
  }
  key[0] = ++v5;
  if ((unint64_t)v5 >= v10)
    return 0;
  if ((_DWORD)v15 != 15
    || (result = _getIntAtMarker(a1, &numChars, (unint64_t)v5, (unint64_t *)key), (_DWORD)result)
    && (result = 0, v5 = (char *)key[0] + 1, v16 = key[0] == (void *)-1, v17 = v16 << 63 >> 63, v17 == v16)
    && (v17 & 0x8000000000000000) == 0
    && (result = 0, a1[1] > (unint64_t)v5)
    && (v15 = numChars, (numChars & 0x8000000000000000) == 0))
  {
    if (2 * v15 < 0)
      return 0;
    result = 0;
    v18 = 2 * v15 - 1;
    v19 = v18 >> 63;
    v20 = __CFADD__(v5, v18);
    v21 = &v5[v18];
    v22 = v20 ? v19 + 1 : v19;
    v23 = v22 << 63 >> 63;
    *a4 = (unint64_t)v21;
    if (v23 == v22 && (v23 & 0x8000000000000000) == 0)
    {
      if (a1[1] > (unint64_t)v21)
      {
        if (!a2)
          return 1;
        v14 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE30], (const UniChar *)&v5[*a1], v15);
        goto LABEL_28;
      }
      return 0;
    }
  }
  return result;
}

void _appendZeroedBytes(uint64_t a1)
{
  _reserveSpace(a1, 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 8216) + *(_QWORD *)(a1 + 8200)) = 0;
  *(_QWORD *)(a1 + 8200) += 8;
}

uint64_t _NSXPCSerializationASCIIStringForObject(_QWORD *a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v4 = 0;
  if (!v2)
    return 0;
  if (_getASCIIStringAtMarker(a1, &v4, v2, &v5, v6))
    return v4;
  return 0;
}

void _NSXPCSerializationStartDictionaryWrite(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1[1024] >= 1024)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Data structure has too many nested collections to encode"), 0));
  _reserveSpace((uint64_t)a1, 1);
  *(_BYTE *)(a1[1027] + a1[1025]) = -48;
  v2 = a1[1025] + 1;
  a1[1025] = v2;
  v3 = a1[1024];
  a1[1024] = v3 + 1;
  a1[v3] = v2;
  _appendZeroedBytes((uint64_t)a1);
}

void _NSXPCSerializationAddObjectRef(uint64_t a1, void *key)
{
  __CFDictionary *v4;
  CFDictionaryKeyCallBacks keyCallBacks;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = *(__CFDictionary **)(a1 + 8224);
  if (!v4)
  {
    keyCallBacks.version = 0;
    *(_OWORD *)&keyCallBacks.retain = *(_OWORD *)(MEMORY[0x1E0C9B3A0] + 8);
    memset(&keyCallBacks.copyDescription, 0, 24);
    v4 = CFDictionaryCreateMutable(0, 0, &keyCallBacks, 0);
    *(_QWORD *)(a1 + 8224) = v4;
  }
  CFDictionaryAddValue(v4, key, *(const void **)(a1 + 8200));
}

_QWORD *_NSXPCSerializationEndArrayWrite(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v1 = a1[1024];
  if (!v1)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Unbalanced end of array collection"), 0));
  v2 = a1[1025];
  v3 = v1 - 1;
  a1[1024] = v3;
  v4 = a1[v3];
  v6[0] = v2 - 1;
  return _replaceBytes(a1, v4, 8, v6);
}

_QWORD *_replaceBytes(_QWORD *result, uint64_t a2, int64_t a3, void *__src)
{
  __int128 v4;

  v4 = a2 + (__int128)a3;
  if ((BYTE8(v4) & 1) == 0 && result[1025] >= (unint64_t)v4)
    return memmove((void *)(result[1027] + a2), __src, a3);
  return result;
}

BOOL _decodeOffsetAndRef(objc_class *a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  int OffsetForValueFromDictionary3;
  _BOOL8 result;
  NSObject *v10;
  uint8_t buf[4];
  NSString *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  OffsetForValueFromDictionary3 = __CFBinaryPlistGetOffsetForValueFromDictionary3();
  result = 0;
  if (OffsetForValueFromDictionary3)
  {
    if ((_getUIDFromData(a1, (_BYTE *)(*((_QWORD *)a1 + 13) + *a3), *((_QWORD *)a1 + 13) + *((_QWORD *)a1 + 14) - 1, a4) & 1) != 0)
    {
      return *a4 != 0;
    }
    else
    {
      v10 = _NSRuntimeIssuesLog();
      result = os_log_type_enabled(v10, OS_LOG_TYPE_FAULT);
      if (result)
      {
        *(_DWORD *)buf = 138543618;
        v12 = _NSMethodExceptionProem(a1, sel_decodeObjectForKey_);
        v13 = 2114;
        v14 = a2;
        _os_log_fault_impl(&dword_1817D9000, v10, OS_LOG_TYPE_FAULT, "%{public}@: value for key (%{public}@) is not an object. This will become an error in the future.", buf, 0x16u);
        return 0;
      }
    }
  }
  return result;
}

uint64_t _NSXPCSerializationTypeForReference(_QWORD *a1, unint64_t a2)
{
  int v4;
  unint64_t v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (!a2 || !_getLastByteOfValueIncludingMarker(a1, a2, v8))
    return 255;
  v4 = *(_BYTE *)(*a1 + a2) & 0xF0;
  if ((*(_BYTE *)(*a1 + a2) & 0xB0) == 0x80 || v4 == 176 || v4 == 224)
    return 0;
  else
    return *(_BYTE *)(*a1 + a2) & 0xF0;
}

uint64_t _NSXPCSerializationReferenceForObject(_QWORD *a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (!*a2)
    return 0;
  v4 = 0;
  if (_getReferenceAtMarker(a1, &v4, v2, v5))
    return v4;
  else
    return 0;
}

void _NSXPCSerializationStartArrayWrite(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1[1024] >= 1024)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Data structure has too many nested collections to encode"), 0));
  _reserveSpace((uint64_t)a1, 1);
  *(_BYTE *)(a1[1027] + a1[1025]) = -96;
  v2 = a1[1025] + 1;
  a1[1025] = v2;
  v3 = a1[1024];
  a1[1024] = v3 + 1;
  a1[v3] = v2;
  _appendZeroedBytes((uint64_t)a1);
}

void _NSXPCSerializationAddDouble(uint64_t a1, double a2)
{
  _reserveSpace(a1, 1);
  *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = 35;
  _reserveSpace(a1, 8);
  *(double *)(*(_QWORD *)(a1 + 8216) + *(_QWORD *)(a1 + 8200)) = a2;
  *(_QWORD *)(a1 + 8200) += 8;
}

void _NSXPCSerializationAddBool(uint64_t a1, int a2)
{
  char v4;

  _reserveSpace(a1, 1);
  if (a2)
    v4 = -80;
  else
    v4 = -64;
  *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = v4;
}

void _removeAllowedClass(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 2264 + 8 * *(_QWORD *)(a1 + 4440));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = (void *)objc_msgSend(v4, "mutableCopy");
    objc_msgSend(v5, "removeObject:", a2);

  }
  else
  {
    if (v4 != a2)
      return;
    v5 = 0;
  }
  *(_QWORD *)(a1 + 2264 + 8 * *(_QWORD *)(a1 + 4440)) = v5;
}

Swift::Void __swiftcall _NSSwiftCalendar.encode(with:)(NSCoder with)
{
  char *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  __int128 v7;
  objc_super v8;
  __int128 v9;
  __int128 v10;

  v2 = v1;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____NSSwiftCalendar__lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  v7 = *(_OWORD *)(v4 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  v10 = v7;
  if (one-time initialization token for cache != -1)
    swift_once();
  v5 = static CalendarCache.cache + 16;
  v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v5, (uint64_t *)&v9);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  LOBYTE(v5) = specialized static Calendar.== infix(_:_:)((uint64_t)&v10, (uint64_t)&v9);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v5 & 1) == 0)
  {
    v8.receiver = v2;
    v8.super_class = (Class)type metadata accessor for _NSSwiftCalendar();
    objc_msgSendSuper2(&v8, sel_encodeWithCoder_, with.super.isa);
  }
}

_BYTE *destructiveInjectEnumTag for PredicateExpressionCodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t destroy for IndexPath.Storage(uint64_t a1)
{
  return outlined consume of IndexPath.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t getEnumTagSinglePayload for Locale(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for JSONDecoderImpl.KeyedContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t hashProbe(_QWORD *a1, uint64_t a2, uint64_t *a3, _BYTE *a4, int a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = (*(uint64_t (**)(uint64_t, _QWORD))(a1[3] + 16))(a2, *(_QWORD *)(a1[3] + 8));
  v10 = (0x8D6271D7234E6D5ALL - v9) ^ ((v9 - 0x24FCFFB6D7ECFEF6) << 9);
  v11 = (0x24FCFFB6D7ECFEF7 - v9 - v10) ^ (v10 >> 8);
  v12 = (v9 - 0x24FCFFB6D7ECFEF6 - v10 - v11) ^ (v11 >> 38);
  v13 = (v10 - v11 - v12) ^ (v12 << 23);
  v14 = (v11 - v12 - v13) ^ (v13 >> 5);
  v15 = (v12 - v13 - v14) ^ (v14 >> 35);
  v16 = (v13 - v14 - v15) ^ (v15 << 49);
  v17 = (v14 - v15 - v16) ^ (v16 >> 11);
  v18 = (v15 - v16 - v17) ^ (v17 >> 12);
  v26 = ((v17 - v18 - ((v16 - v17 - v18) ^ (v18 << 18))) ^ (((v16 - v17 - v18) ^ (v18 << 18)) >> 22)) & (a1[6] - 1);
  if (a4)
    *a4 = 0;
LABEL_3:
  for (i = v26; ; i = (a1[6] - 1) & (i + 1))
  {
    v27 = 1;
    v20 = (*(uint64_t (**)(uint64_t, char *))(a1[4] + 24))(a1[1] + 8 * i, &v27);
    if (v20)
      break;
    if (v27)
      return i;
    if (a5)
    {
      (*(void (**)(uint64_t))(a1[4] + 48))(a1[1] + 8 * i);
      v22 = a1[5];
      if (v22)
        a1[5] = v22 - 1;
      else
        objc_msgSend(a1, "raiseCountUnderflowException");
      objc_msgSend(a1, "rehashAround:", i);
      goto LABEL_3;
    }
LABEL_9:
    ;
  }
  v21 = v20;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(a1[3] + 24))(a2, v20, *(_QWORD *)(a1[3] + 8)))
  {
    (*(void (**)(uint64_t))(a1[4] + 32))(v21);
    goto LABEL_9;
  }
  v23 = a1[4];
  if (a3)
  {
    (*(void (**)(uint64_t))(v23 + 40))(v21);
    *a3 = v21;
  }
  else
  {
    (*(void (**)(uint64_t))(v23 + 32))(v21);
  }
  if (a4)
    *a4 = 1;
  return i;
}

uint64_t probeGC(_QWORD *a1, unint64_t a2, _BYTE *a3, uint64_t *a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  BOOL v26;
  uint64_t v27;
  void (**v28)(uint64_t);
  uint64_t v32;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 1))
  {
    v8 = a2;
  }
  else if (*(_BYTE *)v7)
  {
    v8 = a2 >> 3;
  }
  else
  {
    v8 = (*(uint64_t (**)(unint64_t, _QWORD))(v7 + 16))(a2, *(_QWORD *)(v7 + 8));
  }
  v9 = (0x8D6271D7234E6D5ALL - v8) ^ ((v8 - 0x24FCFFB6D7ECFEF6) << 9);
  v10 = (0x24FCFFB6D7ECFEF7 - (v8 + v9)) ^ (v9 >> 8);
  v11 = (v8 - 0x24FCFFB6D7ECFEF6 - (v9 + v10)) ^ (v10 >> 38);
  v12 = (v9 - (v10 + v11)) ^ (v11 << 23);
  v13 = (v10 - (v11 + v12)) ^ (v12 >> 5);
  v14 = (v11 - (v12 + v13)) ^ (v13 >> 35);
  v15 = (v12 - (v13 + v14)) ^ (v14 << 49);
  v16 = (v13 - (v14 + v15)) ^ (v15 >> 11);
  v17 = (v14 - (v15 + v16)) ^ (v16 >> 12);
  v18 = ((v16 - (v17 + ((v15 - (v16 + v17)) ^ (v17 << 18)))) ^ (((v15 - (v16 + v17)) ^ (v17 << 18)) >> 22)) & (a1[10] - 1);
  v32 = v18;
  while (1)
  {
    v34 = 1;
    v19 = a1 + 1;
    v20 = a1[4];
    v21 = *(unsigned __int8 *)(v20 + 4);
    if (!*(_BYTE *)(v20 + 4))
      break;
    v22 = *(_QWORD *)(*v19 + 8 * v18);
    if (v22)
      goto LABEL_9;
LABEL_12:
    if (v34)
      return v18;
    if (a5)
    {
      (*(void (**)(uint64_t))(a1[4] + 48))(a1[1] + 8 * v18);
      v23 = (*(uint64_t (**)(uint64_t, _QWORD))(a1[8] + 24))(a1[5] + 8 * v18, 0);
      v24 = v23;
      v25 = *(void (**)(uint64_t, _QWORD))(a1[6] + 16);
      if (v25)
        v26 = v23 == 0;
      else
        v26 = 1;
      if (!v26)
        v25(v23, *(_QWORD *)(a1[7] + 8));
      (*(void (**)(uint64_t))(a1[8] + 32))(v24);
      (*(void (**)(uint64_t))(a1[8] + 48))(a1[5] + 8 * v18);
      v27 = a1[9];
      if (v27)
        a1[9] = v27 - 1;
      else
        objc_msgSend(a1, "raiseCountUnderflowException");
      objc_msgSend(a1, "rehashAround:", v18);
      v18 = v32;
    }
    else
    {
LABEL_21:
      if (!v21)
        (*(void (**)(uint64_t))(a1[4] + 32))(v22);
      v18 = (a1[10] - 1) & (v18 + 1);
    }
  }
  v22 = (*(uint64_t (**)(uint64_t, char *))(v20 + 24))(*v19 + 8 * v18, &v34);
  if (!v22)
    goto LABEL_12;
LABEL_9:
  if (!(*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(a1[3] + 24))(a2, v22, *(_QWORD *)(a1[3] + 8)))goto LABEL_21;
  if (a3)
    *a3 = 1;
  if (a4)
  {
    *a4 = v22;
    if (!v21)
    {
      v28 = (void (**)(uint64_t))(a1[4] + 40);
      goto LABEL_33;
    }
  }
  else if (!v21)
  {
    v28 = (void (**)(uint64_t))(a1[4] + 32);
LABEL_33:
    (*v28)(v22);
  }
  return v18;
}

BOOL pointerEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t storePointerAt(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 8 * a2) = a3;
  return result;
}

uint64_t objectEqual(void *a1, void *a2)
{
  if (a1 == a2)
    return 1;
  else
    return objc_msgSend(a1, "isEqual:", a2);
}

void *retainingAcquire(void *a1, const char *a2, int a3)
{
  if (a3)
    return (void *)objc_msgSend(a1, "copy");
  else
    return a1;
}

id storeARCWeakAt(uint64_t a1, uint64_t a2, id obj)
{
  id *v3;

  v3 = (id *)(a1 + 8 * a2);
  if (*v3 == (id)1)
    *v3 = 0;
  return objc_storeWeak(v3, obj);
}

uint64_t empty(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD);

  if (a2)
  {
    v2 = a2;
    v3 = (_QWORD *)result;
    v4 = 0;
    do
    {
      v5 = (*(uint64_t (**)(uint64_t, _QWORD))(v3[3] + 24))(*v3 + v4, 0);
      v6 = v5;
      if (v5)
      {
        v7 = *(void (**)(uint64_t, _QWORD))(v3[1] + 16);
        if (v7)
          v7(v5, *(_QWORD *)(v3[2] + 8));
      }
      (*(void (**)(uint64_t))(v3[3] + 48))(*v3 + v4);
      result = (*(uint64_t (**)(uint64_t))(v3[3] + 32))(v6);
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t empty_0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD);

  if (a2)
  {
    v2 = a2;
    v3 = (_QWORD *)result;
    v4 = 0;
    do
    {
      v5 = (*(uint64_t (**)(uint64_t, _QWORD))(v3[3] + 24))(*v3 + v4, 0);
      v6 = v5;
      if (v5)
      {
        v7 = *(void (**)(uint64_t, _QWORD))(v3[1] + 16);
        if (v7)
          v7(v5, *(_QWORD *)(v3[2] + 8));
      }
      (*(void (**)(uint64_t))(v3[3] + 32))(v6);
      result = (*(uint64_t (**)(uint64_t))(v3[3] + 48))(*v3 + v4);
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *clearPointerAt(_QWORD *result)
{
  *result = 0;
  return result;
}

id *clearARCWeakAtWithSentinel(id *location)
{
  id *v1;

  v1 = location;
  if ((unint64_t)*location >= 2)
    location = (id *)objc_storeWeak(location, 0);
  *v1 = (id)1;
  return location;
}

uint64_t cStringHash(uint64_t a1, void (*a2)(void))
{
  a2();
  return CFStringHashISOLatin1CString();
}

uint64_t cStringHash_0(const char *a1)
{
  strlen(a1);
  return CFStringHashCString();
}

unint64_t pointerHash(unint64_t a1)
{
  return a1 >> 3;
}

id *clearARCWeakAt(id *location)
{
  id *v1;

  v1 = location;
  if (*location)
    location = (id *)objc_storeWeak(location, 0);
  *v1 = 0;
  return location;
}

uint64_t _NSGetFileSystemRepresentation(_BYTE *a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    if ((objc_msgSend(a3, "isEqual:", &stru_1E0F56070) & 1) == 0)
      return objc_msgSend(a3, "__swiftFillFileSystemRepresentationWithPointer:maxLength:", a1, a2);
  }
  else
  {
    *a1 = 0;
  }
  return 0;
}

void _NSXPCSerializationAddNumber(uint64_t a1, CFNumberRef number)
{
  int v4;
  double valuePtr;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if ((CFNumberRef)*MEMORY[0x1E0C9AE50] == number)
  {
    v4 = 1;
LABEL_8:
    _NSXPCSerializationAddBool(a1, v4);
    return;
  }
  if ((CFNumberRef)*MEMORY[0x1E0C9AE40] == number)
  {
    v4 = 0;
    goto LABEL_8;
  }
  if (CFNumberIsFloatType(number))
  {
    if (CFNumberGetByteSize(number) > 4)
    {
      valuePtr = 0.0;
      CFNumberGetValue(number, kCFNumberFloat64Type, &valuePtr);
      _NSXPCSerializationAddDouble(a1, valuePtr);
    }
    else
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
      _NSXPCSerializationAddFloat(a1, *(float *)&valuePtr);
    }
  }
  else if (_CFNumberGetType2() == 17)
  {
    valuePtr = 0.0;
    v6 = 0;
    CFNumberGetValue(number, kCFNumberMaxType|kCFNumberSInt8Type, &valuePtr);
    _NSXPCSerializationAddUnsignedInteger(a1, v6);
  }
  else
  {
    valuePtr = 0.0;
    CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
    _NSXPCSerializationAddInteger(a1, *(unint64_t *)&valuePtr);
  }
}

unint64_t NSKeyValueShareableObservationInfoNSHTHash(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFIndex Count;
  CFIndex v6;
  size_t v7;
  _BYTE *v8;
  unint64_t v9;
  __int128 v10;
  unsigned __int8 *v11;
  unint64_t i;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  unsigned __int8 *v28;
  unint64_t j;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  _BYTE v35[32];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (objc_opt_class() != qword_1ECD09C28)
    return *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 8))
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      LOBYTE(v3) = CFArrayGetCount(*(CFArrayRef *)(v3 + 8)) & 0x3F;
    }
    else
    {
      v4 = 0;
    }
    LODWORD(v9) = 0;
    v10 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)v35 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)&v35[16] = v10;
    v11 = &v35[3];
    for (i = 36; i > 7; i -= 4)
    {
      v13 = *(v11 - 3) + 16 * v9;
      v14 = *(v11 - 2) + 16 * (v13 ^ (16 * (v13 >> 28)));
      v15 = *(v11 - 1) + 16 * (v14 ^ (16 * (v14 >> 28)));
      v16 = *v11;
      v11 += 4;
      v17 = v16 + 16 * (v15 ^ (16 * (v15 >> 28)));
      v9 = (v17 ^ ((v17 & 0xF0000000) >> 24)) & ~(v17 & 0xF0000000);
    }
    return ((v9 << v3) | (v9 >> v3)) ^ v4;
  }
  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(a1 + 16) + 8));
    v6 = Count;
    v7 = 8 * Count;
    if ((unint64_t)(8 * Count) < 0x81)
    {
      if (Count)
      {
        MEMORY[0x1E0C80A78](Count);
        v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
        bzero(v8, v7);
      }
      else
      {
        v8 = 0;
      }
    }
    else
    {
      v8 = malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 8), "getObjects:range:", v8, 0, v6);
    v2 = 0;
    if (v6)
    {
      v19 = 0;
      v20 = 0;
      v21 = *(_QWORD *)(a1 + 72);
      while (v19 == v21)
      {
LABEL_31:
        if (++v19 == v6)
        {
          if (v7 > 0x80)
            free(v8);
          return v2;
        }
      }
      v22 = *(_QWORD *)&v8[8 * v19];
      if (v22)
      {
        if ((*(_BYTE *)(v22 + 40) & 0x20) != 0)
          v23 = 8;
        else
          v23 = 32;
        v24 = *(_QWORD *)(v22 + v23);
        if ((*(_BYTE *)(v22 + 40) & 0x20) != 0)
          goto LABEL_25;
      }
      else
      {
        v24 = 0;
        if ((MEMORY[0x28] & 0x20) != 0)
        {
LABEL_25:
          v25 = *(_QWORD *)(v22 + 32);
          goto LABEL_28;
        }
      }
      v25 = 0;
LABEL_28:
      LODWORD(v26) = 0;
      v27 = *(_OWORD *)(v22 + 16);
      *(_QWORD *)v35 = v24;
      *(_OWORD *)&v35[8] = v27;
      *(_QWORD *)&v35[24] = v25;
      v28 = &v35[3];
      for (j = 36; j > 7; j -= 4)
      {
        v30 = *(v28 - 3) + 16 * v26;
        v31 = *(v28 - 2) + 16 * (v30 ^ (16 * (v30 >> 28)));
        v32 = *(v28 - 1) + 16 * (v31 ^ (16 * (v31 >> 28)));
        v33 = *v28;
        v28 += 4;
        v34 = v33 + 16 * (v32 ^ (16 * (v32 >> 28)));
        v26 = (v34 ^ ((v34 & 0xF0000000) >> 24)) & ~(v34 & 0xF0000000);
      }
      v2 ^= (v26 << (v20 & 0x3F)) | (v26 >> (v20 & 0x3F));
      ++v20;
      goto LABEL_31;
    }
  }
  return v2;
}

void static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  if (!a1)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v11 = 3;
LABEL_11:
    *(_BYTE *)(a2 + 16) = v11;
    return;
  }
  v3 = a1;
  v4 = (unint64_t)objc_msgSend(v3, sel_length);
  if (v4 == 2)
  {
    v13 = objc_msgSend(v3, sel_indexAtPosition_, 0);
    v14 = objc_msgSend(v3, sel_indexAtPosition_, 1);

    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v14;
    *(_BYTE *)(a2 + 16) = 1;
    return;
  }
  v5 = v4;
  if (v4 == 1)
  {
    v12 = objc_msgSend(v3, sel_indexAtPosition_, 0);

    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
  if (!v4)
  {
    v6 = specialized IndexPath.Storage.init(arrayLiteral:)(MEMORY[0x1E0DEE9D8]);
    v8 = v7;
    v10 = v9;

    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 16) = v10;
    return;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v15 + 16) = v5;
    objc_msgSend(v3, sel_getIndexes_range_, v15 + 32, 0, v5);
    *(_QWORD *)(v15 + 16) = v5;

    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = 0;
    v11 = 2;
    goto LABEL_11;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _NSFileSystemRepresentationWithPath(__CFString *a1)
{
  size_t MaximumSizeOfFileSystemRepresentation;
  size_t v3;
  char *v4;
  char *v5;
  const __CFString *v7;
  NSString *v8;
  void *v9;
  _QWORD *v10;

  if (!a1 || -[__CFString isEqual:](a1, "isEqual:", &stru_1E0F56070))
  {
    v7 = CFSTR("*** -[NSFileManager fileSystemRepresentationWithPath:]: nil or empty path argument");
    goto LABEL_11;
  }
  MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(a1);
  if (MaximumSizeOfFileSystemRepresentation != -1)
  {
    v3 = MaximumSizeOfFileSystemRepresentation;
    v4 = (char *)malloc_type_malloc(MaximumSizeOfFileSystemRepresentation, 0x1EAC088BuLL);
    if (!v4)
    {
      v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** -[NSFileManager fileSystemRepresentationWithPath:]: unable to allocate memory for length (%ld)"), v3);
      v9 = (void *)MEMORY[0x1E0C99DA0];
      v10 = (_QWORD *)MEMORY[0x1E0C99850];
      goto LABEL_12;
    }
    v5 = v4;
    if ((-[__CFString __swiftFillFileSystemRepresentationWithPointer:maxLength:](a1, "__swiftFillFileSystemRepresentationWithPointer:maxLength:", v4, v3) & 1) != 0)return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:", v5, strlen(v5) + 1), "bytes");
    free(v5);
    v7 = CFSTR("*** -[NSFileManager fileSystemRepresentationWithPath:]: Unable to form file system representation for string");
LABEL_11:
    v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v7);
    v9 = (void *)MEMORY[0x1E0C99DA0];
    v10 = (_QWORD *)MEMORY[0x1E0C99778];
LABEL_12:
    objc_exception_throw((id)objc_msgSend(v9, "exceptionWithName:reason:userInfo:", *v10, v8, 0));
  }
  return 0;
}

void sub_1817E89AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 72), 8);
  _Unwind_Resume(a1);
}

void *_NSXPCSerializationAddData(uint64_t a1, CFDataRef theData)
{
  CFIndex Length;
  unint64_t v5;
  char v6;
  const UInt8 *BytePtr;
  CFIndex v8;
  void *result;

  Length = CFDataGetLength(theData);
  v5 = Length;
  if (Length < 15)
  {
    v6 = Length | 0x40;
    _reserveSpace(a1, 1);
    *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = v6;
  }
  else
  {
    _reserveSpace(a1, 1);
    *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = 79;
    _NSXPCSerializationAddInteger(a1, v5);
  }
  BytePtr = CFDataGetBytePtr(theData);
  v8 = CFDataGetLength(theData);
  _reserveSpace(a1, v8);
  result = memmove((void *)(*(_QWORD *)(a1 + 8216) + *(_QWORD *)(a1 + 8200)), BytePtr, v8);
  *(_QWORD *)(a1 + 8200) += v8;
  return result;
}

uint64_t __NSSwiftData.bytes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 16);
    if (!v2)
      return 47824;
    v3 = *(_QWORD *)(v1 + 40);
    v4 = __OFSUB__(0, v3);
    v5 = -v3;
    if (!v4)
    {
      if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__range + 16) & 1) == 0)
        return v2 + v5 + *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__range);
      goto LABEL_9;
    }
    __break(1u);
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

void _NSMutableDataGrowBytes(uint64_t a1, const char *a2, size_t a3, int a4)
{
  char v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  _BOOL4 v16;
  int v17;
  malloc_zone_t *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  _QWORD *v22;
  size_t v23;
  uint64_t v24;
  malloc_zone_t *v25;
  char *v26;
  malloc_zone_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  malloc_zone_t *v31;
  int v32;
  char v33;
  NSUInteger v34;
  NSUInteger v35;
  void *v36;
  const char *v37;
  int v38;

  v8 = 1;
  if (a3 >> 19)
    v8 = 2;
  v9 = a3 >> v8;
  if (__CFADD__(v9, a3))
    v9 = 0;
  v10 = v9 + a3;
  if (*(_QWORD *)(a1 + 24) <= v10)
    v11 = v10;
  else
    v11 = *(_QWORD *)(a1 + 24);
  v12 = objc_msgSend((id)a1, "length");
  if (v11 > 0x20000)
    v13 = a4;
  else
    v13 = 0;
  if (*(_QWORD *)(a1 + 32))
  {
    v37 = a2;
    v38 = a4;
    v14 = objc_msgSend((id)a1, "_canUseRealloc");
    v15 = v14;
    if (v12)
      v16 = a3 / v12 > 3;
    else
      v16 = 1;
    v17 = v14 ^ 1;
    if ((v13 & v16 & 1) != 0 || v17)
    {
      v18 = malloc_default_zone();
      v19 = (unint64_t)malloc_type_zone_calloc(v18, 1uLL, v11, 0xAB93A664uLL);
      if (v19)
      {
        v20 = (char *)v19;
        v21 = *(_QWORD *)(a1 + 32);
        if (v12 < 0x80000)
        {
          v23 = v12;
          if (!v12)
          {
LABEL_43:
            a4 = v38;
LABEL_55:
            objc_msgSend((id)a1, "_freeBytes", v23);
            goto LABEL_58;
          }
        }
        else
        {
          v22 = (_QWORD *)MEMORY[0x1E0C85AD8];
          if (((*MEMORY[0x1E0C85AD8] - 1) & (v21 | v19)) != 0
            || (malloc_default_zone(), malloc_zone_claimed_address()))
          {
            v19 = (unint64_t)v20;
            v23 = v12;
          }
          else
          {
            v34 = v12 & -*v22;
            NSCopyMemoryPages((const void *)v21, v20, v34);
            v21 += v34;
            v19 = (unint64_t)&v20[v34];
            v23 = v12 - v34;
            if (v12 == v34)
              goto LABEL_43;
          }
        }
        memmove((void *)v19, (const void *)v21, v23);
        goto LABEL_43;
      }
    }
    if ((v15 & 1) != 0)
    {
      v24 = MEMORY[0x186DA80E4](*(_QWORD *)(a1 + 32), v11, 3842720738, 0);
      if (v24)
      {
        v20 = (char *)v24;
        v13 = 0;
        a4 = v38;
        goto LABEL_58;
      }
      if (a3 > 0x20000)
        v13 = v38;
      else
        v13 = 0;
      v32 = v13 & v16;
      a4 = v38;
      if ((v32 | v17) != 1)
      {
LABEL_50:
        v20 = (char *)MEMORY[0x186DA80E4](*(_QWORD *)(a1 + 32), a3, 3513052257, 0);
        v13 = 0;
        v11 = a3;
        if (v20)
          goto LABEL_58;
        goto LABEL_70;
      }
    }
    else
    {
      a4 = v38;
      if (a3 > 0x20000)
        v13 = v38;
      else
        v13 = 0;
    }
    v27 = malloc_default_zone();
    v28 = (unint64_t)malloc_type_zone_calloc(v27, 1uLL, a3, 0xAB93A664uLL);
    if (!v28)
    {
      if (!v15)
        goto LABEL_70;
      goto LABEL_50;
    }
    v20 = (char *)v28;
    v29 = *(_QWORD *)(a1 + 32);
    if (v12 < 0x80000)
    {
      v23 = v12;
      if (!v12)
      {
LABEL_54:
        v11 = a3;
        goto LABEL_55;
      }
    }
    else
    {
      v30 = (_QWORD *)MEMORY[0x1E0C85AD8];
      if (((*MEMORY[0x1E0C85AD8] - 1) & (v29 | v28)) != 0
        || (malloc_default_zone(), malloc_zone_claimed_address()))
      {
        v28 = (unint64_t)v20;
        v23 = v12;
      }
      else
      {
        v35 = v12 & -*v30;
        NSCopyMemoryPages((const void *)v29, v20, v35);
        v29 += v35;
        v28 = (unint64_t)&v20[v35];
        v23 = v12 - v35;
        a4 = v38;
        if (!v23)
          goto LABEL_54;
      }
    }
    memmove((void *)v28, (const void *)v29, v23);
    goto LABEL_54;
  }
  v25 = malloc_default_zone();
  if (v13)
    v26 = (char *)malloc_type_zone_calloc(v25, 1uLL, v11, 0xAB93A664uLL);
  else
    v26 = (char *)malloc_type_zone_malloc(v25, v11, 0xAB91708DuLL);
  v20 = v26;
  if (!v26)
  {
    v37 = a2;
    if ((a4 & 1) != 0)
    {
      v31 = malloc_default_zone();
      if (a3 > 0x20000)
      {
        v13 = 1;
        v20 = (char *)malloc_type_zone_calloc(v31, 1uLL, a3, 0xAB93A664uLL);
        if (v20)
          goto LABEL_58;
LABEL_70:
        v36 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: unable to allocate memory for length (%lu)"), _NSMethodExceptionProem((objc_class *)a1, v37), a3), 0);
        objc_exception_throw(v36);
      }
    }
    else
    {
      v31 = malloc_default_zone();
    }
    v20 = (char *)malloc_type_zone_malloc(v31, a3, 0xAB91708DuLL);
    v13 = 0;
    if (v20)
      goto LABEL_58;
    goto LABEL_70;
  }
LABEL_58:
  if (a3 > v12 && a4 && (v13 & 1) == 0)
    bzero(&v20[v12], a3 - v12);
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 8) &= ~4u;
  if (v13)
    v33 = 0;
  else
    v33 = 2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 8) & 0xFD | v33;
}

uint64_t NSKeyValueShareableObservationInfoNSHTIsEqual(CFArrayRef *a1, CFArrayRef *a2)
{
  unint64_t Count;
  CFIndex v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  Class Class;
  CFArrayRef *v14;
  CFArrayRef *v15;
  CFArrayRef v16;
  _BOOL8 v17;
  CFIndex v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  _BOOL4 v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  CFArrayRef v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  const __CFArray *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  CFArrayRef v49;
  CFArrayRef v50;
  char *v51;
  char *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  CFStringRef v68;
  void *v69;
  CFStringRef v70;
  void *v71;
  CFStringRef v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
    return 1;
  if (object_getClass(a1) == (Class)qword_1ECD09C28 || object_getClass(a2) == (Class)qword_1ECD09C28)
  {
    Class = object_getClass(a1);
    if (Class == (Class)qword_1ECD09C28)
      v14 = a2;
    else
      v14 = a1;
    if (Class == (Class)qword_1ECD09C28)
      v15 = a1;
    else
      v15 = a2;
    v16 = v15[2];
    if (*((_BYTE *)v15 + 8))
    {
      if (v16)
        Count = objc_msgSend(*((id *)v16 + 1), "count");
      else
        Count = 0;
      v25 = -[__CFArray count](v14[1], "count");
      if (v25 == Count + 1)
      {
        if (Count >> 60)
          goto LABEL_100;
        v26 = v25;
        if (Count <= 1)
          v27 = 1;
        else
          v27 = Count;
        *(_QWORD *)&v28 = MEMORY[0x1E0C80A78](v27).n128_u64[0];
        v30 = (char *)&v74 - v29;
        v76 = 0;
        if (Count >= 0x101)
        {
          v30 = (char *)_CFCreateArrayStorage();
          v24 = v30;
        }
        else
        {
          v24 = 0;
        }
        v36 = v15[2];
        if (v36)
          objc_msgSend(*((id *)v36 + 1), "getObjects:range:", v30, 0, Count, v28);
        if (v26 >> 60)
        {
          v70 = CFStringCreateWithFormat(0, 0, CFSTR("*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt"), v28, v26);
          v71 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v70, 0);
          CFRelease(v70);
          objc_exception_throw(v71);
        }
        if (v26 <= 1)
          v37 = 1;
        else
          v37 = v26;
        MEMORY[0x1E0C80A78](v37);
        v39 = (char *)&v74 - v38;
        v40 = 0;
        v75 = 0;
        if (v26 >= 0x101)
        {
          v40 = _CFCreateArrayStorage();
          v39 = (char *)v40;
        }
        -[__CFArray getObjects:range:](v14[1], "getObjects:range:", v39, 0, v26);
        if (Count)
        {
          v41 = Count;
          v42 = v39;
          while (*(_QWORD *)v30 == *(_QWORD *)v42)
          {
            v42 += 8;
            v30 += 8;
            if (!--v41)
              goto LABEL_61;
          }
        }
        else
        {
LABEL_61:
          v43 = *(_QWORD *)&v39[8 * Count];
          if (*(CFArrayRef *)(v43 + 16) == v15[4]
            && v15[5] == (CFArrayRef)(*(_BYTE *)(v43 + 40) & 0xF)
            && *(CFArrayRef *)(v43 + 24) == v15[6])
          {
            v44 = (*(_BYTE *)(v43 + 40) & 0x20) != 0 ? *(const __CFArray **)(v43 + 32) : 0;
            if (v44 == v15[7])
            {
              v31 = *(_QWORD *)(v43 + 8) == (_QWORD)v15[3];
              goto LABEL_95;
            }
          }
        }
        v31 = 0;
LABEL_95:
        v66 = (void *)v40;
        goto LABEL_96;
      }
      return 0;
    }
    Count = CFArrayGetCount(*((CFArrayRef *)v16 + 1));
    v18 = CFArrayGetCount(v14[1]);
    if (v18 != Count - 1)
      return 0;
    if (Count >> 60)
      goto LABEL_100;
    v19 = v18;
    if (Count <= 1)
      v20 = 1;
    else
      v20 = Count;
    *(_QWORD *)&v21 = MEMORY[0x1E0C80A78](v20).n128_u64[0];
    v23 = (char *)&v74 - v22;
    v76 = 0;
    if (Count >= 0x101)
    {
      v23 = (char *)_CFCreateArrayStorage();
      v24 = v23;
    }
    else
    {
      v24 = 0;
    }
    objc_msgSend(*((id *)v15[2] + 1), "getObjects:range:", v23, 0, Count, v21);
    if (v19 >> 60)
    {
      v72 = CFStringCreateWithFormat(0, 0, CFSTR("*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt"), v19);
      v73 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v72, 0);
      CFRelease(v72);
      objc_exception_throw(v73);
    }
    if (v19 <= 1)
      v45 = 1;
    else
      v45 = v19;
    MEMORY[0x1E0C80A78](v45);
    v47 = (char *)&v74 - v46;
    v48 = 0;
    v75 = 0;
    if (v19 >= 0x101)
    {
      v48 = _CFCreateArrayStorage();
      v47 = (char *)v48;
    }
    -[__CFArray getObjects:range:](v14[1], "getObjects:range:", v47, 0, v19);
    v49 = v15[9];
    if (v49)
    {
      v50 = v15[9];
      v51 = v23;
      v52 = v47;
      while (*(_QWORD *)v51 == *(_QWORD *)v52)
      {
        v52 += 8;
        v51 += 8;
        v50 = (CFArrayRef)((char *)v50 - 1);
        if (!v50)
          goto LABEL_78;
      }
    }
    else
    {
LABEL_78:
      v53 = Count + ~(unint64_t)v49;
      if (!v53)
      {
        v31 = 1;
        goto LABEL_91;
      }
      v54 = &v23[8 * (_QWORD)v49];
      if (*((_QWORD *)v54 + 1) == *(_QWORD *)&v47[8 * (_QWORD)v49])
      {
        v59 = 0;
        v60 = v54 + 16;
        v61 = (uint64_t)&v47[8 * (_QWORD)v49 + 8];
        v62 = Count - (_QWORD)v49 - 2;
        do
        {
          v63 = v59;
          if (v62 == v59)
            break;
          v64 = *(_QWORD *)&v60[8 * v59];
          v65 = *(_QWORD *)(v61 + 8 * v59++);
        }
        while (v64 == v65);
        v31 = v63 + 1 >= v53;
        goto LABEL_91;
      }
    }
    v31 = 0;
LABEL_91:
    v66 = (void *)v48;
LABEL_96:
    free(v66);
    free(v24);
    return v31;
  }
  Count = CFArrayGetCount(a1[1]);
  v5 = CFArrayGetCount(a2[1]);
  if (v5 != Count)
    return 0;
  if (Count >> 60)
  {
LABEL_100:
    v68 = CFStringCreateWithFormat(0, 0, CFSTR("*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt"), Count);
    v69 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v68, 0);
    CFRelease(v68);
    objc_exception_throw(v69);
  }
  if (Count <= 1)
    v6 = 1;
  else
    v6 = Count;
  if (Count >= 0x101)
    v7 = 1;
  else
    v7 = v6;
  v8 = 8 * v7;
  *(_QWORD *)&v9 = MEMORY[0x1E0C80A78](v5).n128_u64[0];
  v11 = (uint64_t *)((char *)&v74 - v10);
  v76 = 0;
  if (Count >= 0x101)
  {
    v11 = (_QWORD *)_CFCreateArrayStorage();
    v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  v32 = -[__CFArray getObjects:range:](a1[1], "getObjects:range:", v11, 0, Count, v9);
  MEMORY[0x1E0C80A78](v32);
  v33 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = 0;
  v75 = 0;
  if (Count < 0x101)
  {
    v35 = v33;
  }
  else
  {
    v34 = (_QWORD *)_CFCreateArrayStorage();
    v35 = v34;
  }
  -[__CFArray getObjects:range:](a2[1], "getObjects:range:", v35, 0, Count);
  if (Count)
  {
    if (*v11 == *v35)
    {
      v55 = 1;
      do
      {
        v56 = v55;
        if (Count == v55)
          break;
        v57 = v11[v55];
        v58 = v35[v55++];
      }
      while (v57 == v58);
      v17 = v56 >= Count;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = 1;
  }
  free(v34);
  free(v12);
  return v17;
}

void sub_1817EA16C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_1817EA1D8()
{
  JUMPOUT(0x1817EA1D0);
}

uint64_t NSConcreteMapTable_reclaim(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  void (*v12)(uint64_t, _QWORD);
  void (*v13)(uint64_t, _QWORD);
  uint64_t v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 80))
    return 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = a1 + 24;
  v15 = a1 + 16;
  v16 = a1 + 8;
  do
  {
    v6 = (void *)MEMORY[0x186DA8F78]();
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 24))(*(_QWORD *)(a1 + 8) + v2, 0);
    v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 64) + 24))(*(_QWORD *)(a1 + 40) + v2, 0);
    if (v7 | v8)
    {
      v9 = v8;
      if (v7)
        v10 = v8 == 0;
      else
        v10 = 0;
      if (v10)
      {
        v12 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 16);
        if (v12)
          v12(v7, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 48))(*(_QWORD *)(a1 + 8) + v2);
        *(_BYTE *)(a1 + 116) = 1;
        (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 32))(v7);
      }
      else
      {
        if (v7)
          v11 = 1;
        else
          v11 = v8 == 0;
        if (v11)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 32))(v7);
          (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 32))(v9);
          ++v4;
        }
        else
        {
          v13 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v16 + 40) + 16);
          if (v13)
            v13(v8, *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 48))(*(_QWORD *)(a1 + 40) + v2);
          *(_BYTE *)(a1 + 116) = 1;
          (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 32))(v9);
        }
      }
    }
    objc_autoreleasePoolPop(v6);
    ++v3;
    v2 += 8;
  }
  while (v3 < *(_QWORD *)(a1 + 80));
  return v4;
}

void freeenv(void **a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  void *v5;

  if (a2)
  {
    v3 = a2;
    v4 = a1;
    do
    {
      v5 = *v4++;
      free(v5);
      --v3;
    }
    while (v3);
  }
  free(a1);
}

void _NSXPCSerializationAddUnsignedInteger(uint64_t a1, uint64_t a2)
{
  _reserveSpace(a1, 1);
  *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = -8;
  _reserveSpace(a1, 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 8216) + *(_QWORD *)(a1 + 8200)) = a2;
  *(_QWORD *)(a1 + 8200) += 8;
}

void *mallocAcquire(const void *a1, uint64_t (*a2)(const void *), int a3)
{
  const void *v3;
  size_t v4;
  void *v5;

  v3 = a1;
  if (a3)
  {
    v4 = a2(a1);
    v5 = malloc_type_calloc(1uLL, v4, 0x80CAF228uLL);
    memmove(v5, v3, v4);
    return v5;
  }
  return (void *)v3;
}

uint64_t outlined consume of IndexPath.Storage(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t getEnumTagSinglePayload for iovec(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

ValueMetadata *type metadata accessor for Calendar()
{
  return &type metadata for Calendar;
}

_OWORD *initializeBufferWithCopyOfBuffer for Locale(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for LocalizedStringResource()
{
  return &type metadata for LocalizedStringResource;
}

BOOL cachedObjCTypeInfoIsEqual(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a1 + 8), *(const char **)(a2 + 8)) == 0;
}

uint64_t Measurement.init(value:unit:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  return result;
}

BOOL cStringEqual(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

BOOL static Date.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

void Data.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t getEnumTagSinglePayload for AttributedString._AttributeValue(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

CFTypeRef _NSDescriptionWithStringProxyFunc(void *a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  const void *v10;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (a5)
      *a5 = 1;
    if (a4)
    {
      v10 = (const void *)objc_msgSend(a1, "_dynamicContextEvaluation:patternString:", a2, a3);
      if (v10)
        return CFRetain(v10);
    }
  }
  else if (a5)
  {
    *a5 = 0;
  }
  return 0;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)();
}

BOOL __NSOperationImplicitObservationArrayEqualCallback(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t storeEnumTagSinglePayload for iovec(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

uint64_t cachedObjCTypeInfoHash(uint64_t a1)
{
  strlen(*(const char **)(a1 + 8));
  return CFStringHashISOLatin1CString();
}

uint64_t NSKeyValuePropertyHash(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  return objc_msgSend(*(id *)(a1 + 16), "hash") ^ v1;
}

ValueMetadata *type metadata accessor for Calendar.Component()
{
  return &type metadata for Calendar.Component;
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance [A](void *a1, uint64_t *a2, uint64_t a3)
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(_QWORD *)(a3 + 16));
}

ValueMetadata *type metadata accessor for CharacterSet()
{
  return &type metadata for CharacterSet;
}

Foundation::Date __swiftcall Date.init(timeIntervalSinceReferenceDate:)(Foundation::Date timeIntervalSinceReferenceDate)
{
  Foundation::Date *v1;

  v1->_time = timeIntervalSinceReferenceDate._time;
  return timeIntervalSinceReferenceDate;
}

BOOL _isEqualCString(char *__s1, char *a2)
{
  _BOOL8 result;

  if (__s1 == a2)
    return 1;
  result = 0;
  if (__s1)
  {
    if (a2)
      return strcmp(__s1, a2) == 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IndexPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of IndexPath.Storage(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t outlined copy of IndexPath.Storage(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRetain();
  return result;
}

xpc_object_t _xpcRetainCallback(int a1, xpc_object_t object)
{
  return xpc_retain(object);
}

void _xpcReleaseCallback(int a1, xpc_object_t object)
{
  xpc_release(object);
}

double Measurement.value.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

void NSEndMapTableEnumeration(NSMapEnumerator *enumerator)
{
  if (enumerator)
  {
    enumerator->_si = enumerator->_pi;
    free(enumerator->_bs);
    enumerator->_bs = 0;
  }
  else
  {
    NSLog((NSString *)CFSTR("%s: state argument is NULL"), "void NSEndMapTableEnumeration(NSMapEnumerator * _Nonnull)");
  }
}

void _encodeObject(uint64_t a1, const void *a2, void *value, int a4)
{
  void *v5;
  const __CFSet *v8;
  int v9;
  BOOL v10;
  const __CFDictionary *v11;
  int v12;
  uint64_t v13;
  objc_class *v14;
  uint64_t *v15;
  int ValueIfPresent;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  CFTypeRef v20;
  CFIndex v21;
  uint64_t v22;
  CFTypeRef v23;
  __objc2_class *v24;
  const char *Name;
  NSString *v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  const char *v34;
  NSString *v35;
  NSString *v36;
  const __CFDictionary *v37;
  objc_class *v38;
  objc_class *Class;
  _BOOL4 isMetaClass;
  objc_class *v41;
  char v42;
  unsigned int v43;
  CFTypeRef v44;
  unsigned int v45;
  CFTypeRef v46;
  void *v47;
  unint64_t v48;
  __CFArray *i;
  NSString *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t j;
  Class v56;
  __CFArray *v57;
  uint64_t v58;
  const void *v59;
  uint64_t v60;
  CFTypeID v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  CFTypeID v65;
  unint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  void *valuea[16];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v5 = value;
  v75 = *MEMORY[0x1E0C80C00];
  valuea[0] = value;
  v8 = *(const __CFSet **)(a1 + 120);
  if (v8)
  {
    v9 = CFSetContainsValue(v8, value);
    v10 = v9 != 0;
    v11 = *(const __CFDictionary **)(a1 + 56);
    if (!v11)
    {
      if (v9)
        goto LABEL_16;
      goto LABEL_9;
    }
  }
  else
  {
    v11 = *(const __CFDictionary **)(a1 + 56);
    if (!v11)
    {
LABEL_9:
      v13 = objc_msgSend(v5, "replacementObjectForKeyedArchiver:", a1);
      if (v13 && *(_QWORD *)(a1 + 24) && (objc_opt_respondsToSelector() & 1) != 0)
        v13 = objc_msgSend(*(id *)(a1 + 24), "archiver:willEncodeObject:", a1, v13);
      objc_msgSend((id)a1, "replaceObject:withObject:", v5, v13);
      v5 = (void *)v13;
      goto LABEL_16;
    }
    v10 = 0;
  }
  v12 = CFDictionaryContainsKey(v11, v5);
  if (!v10 && !v12)
    goto LABEL_9;
  if (v12)
  {
    CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 56), v5, (const void **)valuea);
    v5 = valuea[0];
  }
LABEL_16:
  v14 = (objc_class *)objc_msgSend(v5, "classForKeyedArchiver");
  if (v14 || (v14 = (objc_class *)objc_opt_class()) != 0)
  {
    if (objc_msgSend((id)a1, "requiresSecureCoding"))
      objc_msgSend((id)a1, "validateClassSupportsSecureCoding:", v14);
  }
  v15 = (uint64_t *)MEMORY[0x1E0C9AE00];
  if (!v5)
  {
    v17 = 0;
LABEL_29:
    v20 = __NSKeyedArchiverUIDCreateCached(*v15, v17, a1);
    addValueToTopContainerE(a1, a2, v20);
    CFRelease(v20);
    return;
  }
  valuea[0] = 0;
  ValueIfPresent = CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 48), v5, (const void **)valuea);
  v17 = valuea[0];
  if (ValueIfPresent)
    v18 = LODWORD(valuea[0]) == -1;
  else
    v18 = 1;
  if (!v18)
    goto LABEL_29;
  valuea[0] = 0;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 72), v5, (const void **)valuea))
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), v5);
    v19 = valuea[0];
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:", CFSTR("$null"));
    v19 = objc_msgSend(*(id *)(a1 + 40), "count") - 1;
  }
  v21 = v19;
  if (a4)
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 72), v5, (const void *)v19);
  else
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), v5, (const void *)v19);
  v22 = *v15;
  v23 = __NSKeyedArchiverUIDCreateCached(v22, v21, a1);
  addValueToTopContainerE(a1, a2, v23);
  CFRelease(v23);
  if ((a4 & 1) == 0)
  {
    v24 = (__objc2_class *)v14;
    if (*class_getName(v14) == 37)
    {
      Name = class_getName(v14);
      v24 = (__objc2_class *)objc_lookUpClass(Name + 1);
    }
    if (v24)
    {
      v26 = (NSString *)objc_msgSend((id)a1, "classNameForClass:", v24);
      if (v26 || (v26 = (NSString *)objc_msgSend((id)objc_opt_class(), "classNameForClass:", v24)) != 0)
        v24 = (__objc2_class *)NSClassFromString(v26);
    }
    _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v24, 1);
    if (v24 == (__objc2_class *)__NSStringClass)
    {
      if (objc_msgSend(v5, "length") != 5 || objc_msgSend(v5, "compare:", CFSTR("$null")))
        goto LABEL_48;
    }
    else if (v24 == NSNumber || v24 == (__objc2_class *)MEMORY[0x1E0C99D50])
    {
LABEL_48:
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), v21, v5);
LABEL_113:
      if (*(_QWORD *)(a1 + 24))
      {
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(*(id *)(a1 + 24), "archiver:didEncodeObject:", a1, v5);
      }
      return;
    }
    v27 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    v28 = (void *)objc_opt_new();
    _CFDictionarySetCapacity();
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v28);
    ++*(_QWORD *)(a1 + 112);

    v29 = atomic_load((unint64_t *)(a1 + 16));
    atomic_store(v29 & 0xFFFFFFFFFFFFFFFELL, (unint64_t *)(a1 + 16));
    v30 = objc_msgSend(*(id *)(a1 + 32), "count") - 1;
    if (v30 < 0)
      v31 = 0;
    else
      v31 = objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v30);
    objc_msgSend(v5, "encodeWithCoder:", a1);
    v32 = objc_msgSend(*(id *)(a1 + 32), "count") - 1;
    if (v32 < 0)
      v33 = 0;
    else
      v33 = (const void *)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v32);
    if ((const void *)v31 != v33)
    {
LABEL_110:
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), v21, v33);
      v64 = objc_msgSend(*(id *)(a1 + 32), "count");
      objc_msgSend(*(id *)(a1 + 32), "removeObjectAtIndex:", v64 - 1);
      if (v64 - 1 >= 1)
      {
        v65 = CFGetTypeID((CFTypeRef)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v64 - 2));
        v66 = atomic_load((unint64_t *)(a1 + 16));
        atomic_store(v66 & 0xFFFFFFFFFFFFFFFELL | (v65 == 19), (unint64_t *)(a1 + 16));
      }
      *(_QWORD *)(a1 + 88) = v27;
      goto LABEL_113;
    }
    if (*class_getName(v14) == 37)
    {
      v34 = class_getName(v14);
      v14 = objc_lookUpClass(v34 + 1);
    }
    v69 = v27;
    if (v14)
    {
      v35 = (NSString *)objc_msgSend((id)a1, "classNameForClass:", v14);
      if (v35 || (v35 = (NSString *)objc_msgSend((id)objc_opt_class(), "classNameForClass:", v14)) != 0)
      {
        v14 = NSClassFromString(v35);
        v36 = v35;
        if (!v14)
          goto LABEL_64;
      }
      else
      {
        v36 = 0;
      }
      v67 = 0;
      v41 = v14;
LABEL_75:
      _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v14, 1);
      v42 = 0;
      goto LABEL_76;
    }
    v36 = 0;
LABEL_64:
    v37 = *(const __CFDictionary **)(a1 + 80);
    if (!v37)
      goto LABEL_69;
    v38 = (objc_class *)CFDictionaryGetValue(v37, v36);
    if (v38)
    {
      v14 = v38;
      Class = object_getClass(v38);
      isMetaClass = class_isMetaClass(Class);
      v41 = 0;
      v42 = 1;
      v67 = 1;
      if (!isMetaClass)
        goto LABEL_76;
      goto LABEL_75;
    }
    if (!*(_QWORD *)(a1 + 80))
LABEL_69:
      *(_QWORD *)(a1 + 80) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    v14 = (objc_class *)objc_opt_new();
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 80), v36, v14);

    if (!v14)
    {
      v43 = 0;
LABEL_78:
      v44 = __NSKeyedArchiverUIDCreateCached(v22, v43, a1);
      addValueToTopContainerE(a1, CFSTR("$class"), v44);
      CFRelease(v44);

      v27 = v69;
      goto LABEL_110;
    }
    v41 = 0;
    v42 = 1;
    v67 = 1;
LABEL_76:
    v68 = v42;
    valuea[0] = 0;
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 48), v14, (const void **)valuea)
      || (v43 = valuea[0], LODWORD(valuea[0]) == -1))
    {
      valuea[0] = 0;
      if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 72), v14, (const void **)valuea))
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), v14);
        v45 = valuea[0];
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 40), "addObject:", CFSTR("$null"));
        v45 = objc_msgSend(*(id *)(a1 + 40), "count") - 1;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), v14, (const void *)v45);
      v46 = __NSKeyedArchiverUIDCreateCached(v22, v45, a1);
      addValueToTopContainerE(a1, CFSTR("$class"), v46);
      CFRelease(v46);
      v47 = (void *)objc_opt_new();
      _CFDictionarySetCapacity();
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v47);
      ++*(_QWORD *)(a1 + 112);

      v48 = atomic_load((unint64_t *)(a1 + 16));
      atomic_store(v48 & 0xFFFFFFFFFFFFFFFELL, (unint64_t *)(a1 + 16));
      if (!v36)
        v36 = NSCopyStringFromClass(v14);
      addValueToTopContainerE(a1, CFSTR("$classname"), v36);

      if ((v67 & 1) == 0)
      {
        for (i = (__CFArray *)objc_opt_new(); v41; v41 = (objc_class *)-[objc_class superclass](v41, "superclass"))
        {
          v50 = NSCopyStringFromClass(v41);
          CFArrayAppendValue(i, v50);

        }
        addValueToTopContainerE(a1, CFSTR("$classes"), i);

      }
      if ((v68 & 1) != 0)
        v51 = 0;
      else
        v51 = (void *)-[objc_class classFallbacksForKeyedArchiver](v14, "classFallbacksForKeyedArchiver");
      v27 = v69;
      if (objc_msgSend(v51, "count"))
      {
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v71, valuea, 16);
        if (v52)
        {
          v53 = v52;
          v54 = *(_QWORD *)v72;
          do
          {
            for (j = 0; j != v53; ++j)
            {
              if (*(_QWORD *)v72 != v54)
                objc_enumerationMutation(v51);
              v56 = NSClassFromString(*(NSString **)(*((_QWORD *)&v71 + 1) + 8 * j));
              if (v56)
                _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v56, 1);
            }
            v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v71, valuea, 16);
          }
          while (v53);
        }
        addValueToTopContainerE(a1, CFSTR("$classhints"), v51);
        v27 = v69;
      }
      v57 = *(__CFArray **)(a1 + 40);
      v58 = objc_msgSend(*(id *)(a1 + 32), "count") - 1;
      if (v58 < 0)
        v59 = 0;
      else
        v59 = (const void *)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v58);
      CFArraySetValueAtIndex(v57, v45, v59);
      v60 = objc_msgSend(*(id *)(a1 + 32), "count");
      objc_msgSend(*(id *)(a1 + 32), "removeObjectAtIndex:", v60 - 1);
      if (v60 - 1 >= 1)
      {
        v61 = CFGetTypeID((CFTypeRef)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v60 - 2));
        v62 = atomic_load((unint64_t *)(a1 + 16));
        if (v61 == 19)
          v63 = v62 | 1;
        else
          v63 = v62 & 0xFFFFFFFFFFFFFFFELL;
        atomic_store(v63, (unint64_t *)(a1 + 16));
      }
      goto LABEL_110;
    }
    goto LABEL_78;
  }
}

void addValueToTopContainerE(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6;
  __CFArray *v7;
  char v8;
  CFIndex Count;
  NSObject *v10;
  int v11;
  const void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend(*(id *)(a1 + 32), "count") - 1;
  if (v6 < 0)
    v7 = 0;
  else
    v7 = (__CFArray *)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v6);
  v8 = atomic_load((unint64_t *)(a1 + 16));
  if ((v8 & 1) != 0)
  {
    CFArrayAppendValue(v7, a3);
    ++*(_QWORD *)(a1 + 112);
  }
  else
  {
    Count = CFDictionaryGetCount(v7);
    CFDictionarySetValue(v7, a2, a3);
    *(_QWORD *)(a1 + 112) += 2;
    if (Count == CFDictionaryGetCount(v7))
    {
      v10 = _NSOSLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = 138412290;
        v12 = a2;
        _os_log_error_impl(&dword_1817D9000, v10, OS_LOG_TYPE_ERROR, "*** NSKeyedArchiver warning: replacing existing value for key '%@'; probable duplication of encoding keys in class hierarchy",
          (uint8_t *)&v11,
          0xCu);
      }
    }
  }
}

unint64_t _classOverridesSelector(objc_class *a1, const char *a2)
{
  unint64_t result;
  void (*v5)(void);
  objc_class *Superclass;
  objc_class *v7;
  Method InstanceMethod;

  result = (unint64_t)class_getMethodImplementation(a1, a2);
  if (result)
  {
    v5 = (void (*)(void))result;
    Superclass = class_getSuperclass(a1);
    if (Superclass && (v7 = Superclass, v5 == class_getMethodImplementation(Superclass, a2)))
    {
      InstanceMethod = class_getInstanceMethod(a1, a2);
      return InstanceMethod != class_getInstanceMethod(v7, a2);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

CFTypeRef __NSKeyedArchiverUIDCreateCached(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;

  v5 = *(_QWORD *)(a3 + 96);
  v6 = *(_QWORD *)(a3 + 104);
  if (v5)
    v7 = v6 > a2;
  else
    v7 = 0;
  if (!v7)
  {
    LODWORD(v8) = 2 * v6;
    if (!v6)
      LODWORD(v8) = 256;
    if (v8 <= a2)
      v8 = a2;
    else
      v8 = v8;
    *(_QWORD *)(a3 + 104) = v8;
    v9 = MEMORY[0x186DA80F0](*MEMORY[0x1E0C9AE30]);
    *(_QWORD *)(a3 + 96) = v9;
    bzero((void *)(v9 + 8 * v6), 8 * (*(_QWORD *)(a3 + 104) - v6));
    v5 = *(_QWORD *)(a3 + 96);
  }
  v10 = *(const void **)(v5 + 8 * a2);
  if (!v10)
  {
    v10 = (const void *)_CFKeyedArchiverUIDCreate();
    *(_QWORD *)(*(_QWORD *)(a3 + 96) + 8 * a2) = v10;
  }
  return CFRetain(v10);
}

uint64_t _NSCoderCheckPotentiallyMangledClassNameAndWarn(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  if (result)
  {
    v3 = result;
    result = (uint64_t)class_getName((Class)result);
    if (*(_BYTE *)result == 95 && *(_BYTE *)(result + 1) == 84 && *(_BYTE *)(result + 2))
    {
      v4 = atomic_load(_NSCoderCheckPotentiallyMangledClassNameAndWarn_warningMethodIsAvailable);
      if ((v4 & 1) == 0)
      {
        result = objc_opt_respondsToSelector();
        if ((result & 1) == 0)
          return result;
        atomic_store(1u, _NSCoderCheckPotentiallyMangledClassNameAndWarn_warningMethodIsAvailable);
      }
      return +[NSKeyedUnarchiver _swift_checkClassAndWarnForKeyedArchiving:operation:](NSKeyedUnarchiver, "_swift_checkClassAndWarnForKeyedArchiving:operation:", v3, a2 ^ 1u);
    }
  }
  return result;
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  const char *Name;

  if (aSelector && (Name = sel_getName(aSelector)) != 0)
    return -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]([NSString alloc], "initWithBytesNoCopy:length:encoding:freeWhenDone:", Name, strlen(Name), 4, 0);
  else
    return 0;
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  const char *Name;

  if (aClass && (Name = class_getName(aClass)) != 0)
    return -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]([NSString alloc], "initWithBytesNoCopy:length:encoding:freeWhenDone:", Name, strlen(Name), 4, 0);
  else
    return 0;
}

void sub_1817ECD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t _getUIDFromData(void *a1, _BYTE *a2, unint64_t a3, unint64_t *a4)
{
  char v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v10;
  unsigned int v11;

  v4 = *a2;
  if ((*a2 & 0xF0) != 0x80)
    return 0;
  v5 = v4 & 0xF;
  v6 = (v4 & 0xF) + 2;
  if (__CFADD__(a2, v6) || (unint64_t)&a2[v6] > a3)
  {
    objc_msgSend(a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSArchiverArchiveInconsistency"), 4864, CFSTR("overflow while attempting to read %lu bytes (uid)"), v6);
    return 0;
  }
  v7 = a2 + 1;
  switch(v5)
  {
    case 0:
      v8 = *v7;
      break;
    case 1:
      v8 = __rev16(*(unsigned __int16 *)(a2 + 1));
      break;
    case 3:
      v8 = bswap32(*(_DWORD *)(a2 + 1));
      break;
    case 7:
      v8 = bswap64(*(_QWORD *)(a2 + 1));
      break;
    default:
      v8 = 0;
      v10 = (v5 + 1);
      do
      {
        v11 = *v7++;
        v8 = v11 | (v8 << 8);
        --v10;
      }
      while (v10);
      break;
  }
  *a4 = v8;
  return 1;
}

BOOL _decodeObjectBinary(uint64_t a1, unsigned int a2, uint64_t a3, CFTypeRef *a4)
{
  _BOOL8 result;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  objc_class *v16;
  objc_class *v17;
  NSString *v18;
  NSString *v19;
  NSString *v20;
  uint64_t v21;
  uint64_t i;
  NSString *v23;
  id v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  const __CFDictionary *v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CFTypeRef cf;
  CFTypeRef v41;
  void *value[16];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (_decodeObjectReference(a1, 200, a3, a2, a4))
    return *a4 != 0;
  v39 = 0;
  cf = 0;
  if (!__CFBinaryPlistGetOffsetForValueFromArray2()
    || (v9 = *(_QWORD *)(a1 + 104), v10 = (unsigned __int8 *)(v9 + v39), __CFADD__(v9, v39))
    || v9 + *(_QWORD *)(a1 + 112) - 1 <= (unint64_t)v10)
  {
    objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSArchiverArchiveInconsistency"), 4864, CFSTR("%@: object reference beyond limit or other data corruption"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
    goto LABEL_9;
  }
  v11 = *v10 >> 4;
  v12 = v11 >= 5;
  v13 = v11 - 5;
  if (v12 && v13 >= 2)
  {
    v38 = 0;
    if (!__CFBinaryPlistGetOffsetForValueFromDictionary3()
      || (v14 = *(_QWORD *)(a1 + 104), __CFADD__(v14, v38))
      || (v15 = v14 + *(_QWORD *)(a1 + 112) - 1, v15 < v14 + v38))
    {
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSArchiverArchiveInconsistency"), 4864, CFSTR("%@: missing class information for object"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }
    v37 = 0;
    _getUIDFromData((void *)a1, (_BYTE *)(v14 + v38), v15, &v37);
    if (!v37)
    {
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSArchiverArchiveInconsistency"), 4864, CFSTR("%@: null class for object"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }
    if (!__CFBinaryPlistGetOffsetForValueFromArray2()
      || (unint64_t)(*(_QWORD *)(a1 + 104) + *(_QWORD *)(a1 + 112) - 1) < *(_QWORD *)(a1 + 104))
    {
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSArchiverArchiveInconsistency"), 4864, CFSTR("%@: bogus class information for object"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }
    if (!__CFBinaryPlistGetOffsetForValueFromDictionary3()
      || (unint64_t)(*(_QWORD *)(a1 + 104) + *(_QWORD *)(a1 + 112) - 1) < *(_QWORD *)(a1 + 104))
    {
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSArchiverArchiveInconsistency"), 4864, CFSTR("%@: missing class name for class"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }
    if ((__CFBinaryPlistCreateObject() & 1) == 0)
    {
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSArchiverArchiveInconsistency"), 4864, CFSTR("%@: corrupt data or object is too large to decode"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }
    if ((_NSIsNSString() & 1) == 0)
    {
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSInvalidUnarchiveOperationException"), 4864, CFSTR("%@: cannot decode object of class (%@) for key (%@); the archive appears to be corrupt (non-string class name)"),
        _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),
        0,
        a3);
      goto LABEL_9;
    }
    __CFBinaryPlistGetOffsetForValueFromDictionary3();
    v34 = *(_QWORD *)(a1 + 128);
    __CFBinaryPlistGetOffsetForValueFromDictionary3();
    v16 = (objc_class *)objc_msgSend((id)a1, "classForClassName:", 0, v34);
    if (v16)
      goto LABEL_33;
    v16 = (objc_class *)objc_msgSend((id)objc_opt_class(), "classForClassName:", 0);
    if (v16)
      goto LABEL_33;
    v16 = NSClassFromString(0);
    if (v16)
      goto LABEL_33;
    v41 = 0;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v36 = objc_msgSend(0, "countByEnumeratingWithState:objects:count:", &v43, value, 16);
    if (v36)
    {
      v35 = *(_QWORD *)v44;
      while (2)
      {
        for (i = 0; i != v36; ++i)
        {
          if (*(_QWORD *)v44 != v35)
            objc_enumerationMutation(0);
          v23 = *(NSString **)(*((_QWORD *)&v43 + 1) + 8 * i);
          if ((_NSIsNSString() & 1) == 0)
          {
            v20 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: data is corrupt or object is too large to decode"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
            CFRelease(v41);
            goto LABEL_43;
          }
          v16 = NSClassFromString(v23);
          if (v16)
            goto LABEL_63;
        }
        v36 = objc_msgSend(0, "countByEnumeratingWithState:objects:count:", &v43, value, 16);
        if (v36)
          continue;
        break;
      }
    }
    v16 = 0;
LABEL_63:
    if (v41)
      CFRelease(v41);
    if (v16)
    {
LABEL_33:
      if ((objc_msgSend(*(id *)(a1 + 120), "classNameAllowed:", v16) & 1) == 0)
      {
        v18 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
        v19 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: data to unarchive contains class (%@) which has not been allowed"), v18, NSStringFromClass(v16));
        goto LABEL_42;
      }
    }
    else
    {
      if (!*(_QWORD *)(a1 + 8) || (objc_opt_respondsToSelector() & 1) == 0)
      {
        v16 = 0;
        goto LABEL_35;
      }
      v41 = 0;
      v16 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "unarchiver:cannotDecodeObjectOfClassName:originalClasses:", a1, 0, 0);
      if (v41)
        CFRelease(v41);
      if (!v16)
        goto LABEL_35;
    }
    if (_coderValidateClassValidToMessageForUnarchiving(v16))
    {
LABEL_35:
      v17 = (objc_class *)-[objc_class classForKeyedUnarchiver](v16, "classForKeyedUnarchiver");
      if (v17)
      {
        if (objc_msgSend((id)a1, "requiresSecureCoding"))
        {
          if (a3)
          {
            if ((objc_msgSend((id)a1, "validateAllowedClass:forKey:", v17, a3) & 1) == 0)
              goto LABEL_9;
          }
          else
          {
            objc_msgSend((id)a1, "validateClassSupportsSecureCoding:", v17);
          }
        }
        _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v17, 0);
        v21 = *(_QWORD *)(a1 + 120);
        if (-[NSCoder _isPossibleNestedCollectionClass:](a1, v17) && *(_BYTE *)(v21 + 40))
        {
          if (*(_BYTE *)(v21 + 41))
          {
            *(_WORD *)(v21 + 40) = 0;
            objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSInvalidUnarchiveOperationException"), 4864, CFSTR("%1$@: value for key (%2$@) contains too many nested (%3$@)s"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_), a3, 0);
            goto LABEL_9;
          }
          *(_BYTE *)(v21 + 41) = 1;
        }
        LOBYTE(v43) = 1;
        v24 = coderAllocateClassForUnarchival((void *)a1, v17, &v43);
        cf = v24;
        if ((_BYTE)v43)
        {
          v25 = *(_DWORD *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = 0;
          v26 = *(_QWORD *)(a1 + 72);
          v27 = *(_QWORD *)(v26 + 32);
          *(_QWORD *)(v26 + 32) = v39;
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)a2, v24);
          v28 = (void *)objc_msgSend((id)objc_msgSend((id)cf, "initWithCoder:", a1), "awakeAfterUsingCoder:", a1);
          v29 = v28;
          *(_DWORD *)(*(_QWORD *)(a1 + 120) + 16) = a2;
          *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32) = v27;
          *(_DWORD *)(a1 + 64) = v25;
          cf = v28;
          if (v28)
          {
            value[0] = v28;
            v30 = *(const __CFDictionary **)(a1 + 32);
            if (v30 && CFDictionaryGetValueIfPresent(v30, v29, (const void **)value))
            {
              if (value[0] != v29)
              {

                v31 = value[0];
              }
            }
            else
            {
              v32 = v29;
              if (*(_QWORD *)(a1 + 8) && (objc_opt_respondsToSelector() & 1) != 0)
              {
                v33 = (void *)objc_msgSend(*(id *)(a1 + 8), "unarchiver:didDecodeObject:", a1, v29);
                value[0] = v33;
              }
              else
              {
                v33 = value[0];
              }
              if (v33)
                objc_msgSend((id)a1, "_replaceObject:withObject:", v29);
              else
                value[0] = v29;

            }
            cf = value[0];
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), value[0], (const void *)a2);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), (const void *)a2, cf);
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)a2);
          *a4 = cf;
          return 1;
        }
LABEL_9:
        result = 0;
        *a4 = 0;
        return result;
      }
      v20 = 0;
LABEL_43:
      if (v20)
        objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSArchiverArchiveInconsistency"), 4864, CFSTR("%@"), v20);
      else
        objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSInvalidUnarchiveOperationException"), 4864, CFSTR("%1$@: cannot decode object of class (%2$@) for key (%3$@) because no class named \"%2$@\" was found; the class needs to be defined in source code or linked in from a library (ensure the class is part of the correct target). If the class was renamed, use setClassName:forClass: to add a class translation mapping to NSKeyedUnarchiver"),
          _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),
          0,
          a3);
      goto LABEL_9;
    }
    v19 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: unexpected non-objectlike class (%@)"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_), 0);
LABEL_42:
    v20 = v19;
    goto LABEL_43;
  }
  __CFBinaryPlistCreateObject();
  *a4 = 0;
  return 1;
}

void sub_1817EDAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  const void *v28;

  if (a2)
  {
    objc_begin_catch(exception_object);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v27 + 48), v28);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _decodeObjectReference(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  int v9;
  uint64_t result;
  void *v11;
  char v12;
  void *value[2];

  value[1] = *(void **)MEMORY[0x1E0C80C00];
  *a5 = 0;
  v9 = objc_msgSend((id)a1, "requiresSecureCoding");
  value[0] = 0;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 48), (const void *)a4, (const void **)value))
  {
    result = CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 56), (const void *)a4, (const void **)value);
    if (!(_DWORD)result)
      return result;
    if (v9
      && !objc_msgSend((id)a1, "_validateAllowedClassesContainsClassOfReference:forKey:", value[0], a3))
    {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if (decodingCyclesIsAllowedForCoder(a1))
  {
LABEL_3:
    if (v9
      && (objc_msgSend((id)a1, "_validateAllowedClassesContainsClass:forKey:", objc_msgSend(value[0], "classForCoder"), a3) & 1) == 0)
    {
LABEL_13:
      v11 = 0;
      goto LABEL_14;
    }
LABEL_9:
    v11 = value[0];
LABEL_14:
    *a5 = v11;
    return 1;
  }
  v12 = atomic_load((unint64_t *)(a1 + 16));
  if ((v12 & 0x20) == 0 && !_os_feature_enabled_impl())
  {
    if (_decodeObjectReference_onceToken != -1)
      dispatch_once(&_decodeObjectReference_onceToken, &__block_literal_global_592);
    goto LABEL_3;
  }
  objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSInvalidUnarchiveOperationException"), 4864, CFSTR("%@: object cycles are disallowed"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
  return 1;
}

BOOL _coderValidateClassValidToMessageForUnarchiving(objc_class *a1)
{
  return class_respondsToSelector(a1, sel_methodSignatureForSelector_)
      && class_respondsToSelector(a1, sel_doesNotRecognizeSelector_)
      && class_respondsToSelector(a1, sel_forwardInvocation_);
}

id coderAllocateClassForUnarchival(void *a1, objc_class *a2, _BYTE *a3)
{
  objc_class *Superclass;
  uint64_t v7;
  const char *v8;
  void (*MethodImplementation)(void);
  NSObject *v11;
  _BYTE buf[24];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *a3 = 1;
  if (objc_msgSend(a1, "requiresSecureCoding"))
  {
    if (qword_1ECD09688 != -1)
      dispatch_once(&qword_1ECD09688, &__block_literal_global_607);
    *(_QWORD *)buf = sel_classForKeyedArchiver;
    *(_QWORD *)&buf[8] = sel_classForArchiver;
    *(_QWORD *)&buf[16] = sel_classForCoder;
    Superclass = class_getSuperclass(a2);
    v7 = 0;
    while (1)
    {
      v8 = *(const char **)&buf[v7];
      MethodImplementation = class_getMethodImplementation(a2, v8);
      if (MethodImplementation != *(void (**)(void))((char *)&_MergedGlobals_41 + v7 + 32))
        break;
      v7 += 8;
      if (v7 == 24)
        goto LABEL_11;
    }
    if (Superclass != (objc_class *)MEMORY[0x1E0DE7910]
      && MethodImplementation == class_getMethodImplementation(Superclass, v8))
    {
      *a3 = 0;
    }
  }
LABEL_11:
  if (*a3)
    return objc_allocWithZone(a2);
  v11 = _NSOSLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = a2;
    _os_log_fault_impl(&dword_1817D9000, v11, OS_LOG_TYPE_FAULT, "Class '%{public}@' unexpectedly found in possibly-altered archive. -[%{public}@ classForCoder] is inherited from a superclass and should likely have replaced this object at encode time. To be allowed in archives, it should override -classForCoder itself.", buf, 0x16u);
  }
  objc_msgSend(a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSArchiverArchiveInconsistency"), 4864, CFSTR("%@: class '%@' unexpectedly found in possibly-altered archive. -[%@ classForCoder] is inherited from a superclass and should likely have replaced this object at encode time. To be allowed in archives, it should override -classForCoder itself"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_), a2, a2);
  return 0;
}

NSString *NSCopyStringFromClass(objc_class *a1)
{
  const char *Name;

  if (a1 && (Name = class_getName(a1)) != 0)
    return -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]([NSString alloc], "initWithBytesNoCopy:length:encoding:freeWhenDone:", Name, strlen(Name), 4, 0);
  else
    return 0;
}

unint64_t type metadata accessor for NSUUID()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSUUID;
  if (!lazy cache variable for type metadata for NSUUID)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  }
  return result;
}

void _encodeInt32(uint64_t a1, const void *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  addValueToTopContainerE(a1, a2, v5);
  CFRelease(v5);
}

void _encodeDouble(uint64_t a1, const void *a2, double a3)
{
  CFNumberRef v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  *(double *)v6 = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, v6);
  addValueToTopContainerE(a1, a2, v5);
  CFRelease(v5);
}

void _encodeFloat(uint64_t a1, const void *a2, float a3)
{
  CFNumberRef v5;
  float valuePtr;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  addValueToTopContainerE(a1, a2, v5);
  CFRelease(v5);
}

uint64_t _NSGetUnsignedInt2(_QWORD *a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;

  v1 = (unsigned __int8 *)(*a1)++;
  v2 = (char)*v1;
  v3 = *v1;
  if (v2 < 0)
    return (v3 - 128) + (_NSGetUnsignedInt2() << 7);
  return v3;
}

ValueMetadata *type metadata accessor for DateComponents()
{
  return &type metadata for DateComponents;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

void oq_end_waiting(NSMapTable *a1)
{
  pthread_override_t __override;
  void *key;
  NSMapEnumerator enumerator;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  memset(&enumerator, 0, sizeof(enumerator));
  NSEnumerateMapTable(&enumerator, a1);
  __override = 0;
  key = 0;
  while (NSNextMapEnumeratorPair(&enumerator, &key, (void **)&__override))
  {
    if (__override)
      pthread_override_qos_class_end_np(__override);
  }

}

BOOL NSNextMapEnumeratorPair(NSMapEnumerator *enumerator, void **key, void **value)
{
  NSUInteger si;
  NSUInteger pi;
  void *bs;

  if (!enumerator)
  {
    NSLog((NSString *)CFSTR("%s: state argument is NULL"), key, value, "BOOL NSNextMapEnumeratorPair(NSMapEnumerator * _Nonnull, void ** _Nullable, void ** _Nullable)");
LABEL_9:
    LOBYTE(bs) = 1;
    return (char)bs;
  }
  pi = enumerator->_pi;
  si = enumerator->_si;
  if (enumerator->_pi > si)
  {
    if (key)
      *key = (void *)*((_QWORD *)enumerator->_bs + si);
    if (value)
      *value = (void *)*((_QWORD *)enumerator->_bs + si + pi);
    enumerator->_si = si + 1;
    goto LABEL_9;
  }
  bs = enumerator->_bs;
  if (bs)
  {
    free(bs);
    LOBYTE(bs) = 0;
    enumerator->_bs = 0;
  }
  return (char)bs;
}

uint64_t dealloc(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v5)(_QWORD, uint64_t);

  v2 = *(_QWORD **)(result + 24);
  if (v2)
  {
    v4 = (_QWORD *)result;
    if (v2[3] && v2[6])
    {
      result = empty_0(result, a2);
      v2 = (_QWORD *)v4[3];
    }
    v5 = (uint64_t (*)(_QWORD, uint64_t))v2[2];
    if (v5)
      return v5(*v4, a2);
  }
  return result;
}

NSMapEnumerator *__cdecl NSEnumerateMapTable(NSMapEnumerator *__return_ptr retstr, NSMapTable *table)
{
  NSUInteger v4;
  NSUInteger v5;
  char *v6;
  NSMapEnumerator *result;

  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "NSMapEnumerator NSEnumerateMapTable(NSMapTable * _Nonnull)");
  retstr->_pi = 0;
  retstr->_si = 0;
  retstr->_bs = 0;
  v4 = -[NSMapTable count](table, "count");
  v5 = v4;
  retstr->_pi = v4;
  retstr->_si = 0;
  if (v4)
    v6 = (char *)malloc_type_calloc(v4, 0x10uLL, 0x80040B8603338uLL);
  else
    v6 = 0;
  retstr->_bs = v6;
  result = -[NSMapTable getKeys:values:](table, "getKeys:values:", v6, &v6[8 * v5]);
  retstr->_pi = (NSUInteger)result;
  return result;
}

void NSKeyValueWillChangeWithPerThreadPendingNotifications(void *a1, uint64_t a2, int a3, void (*a4)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *), uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  id **v19;
  uint64_t v20;
  id *v21;
  id *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL isClass;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void (*v31)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *);
  uint64_t v32;
  CFTypeRef v33[2];
  uint64_t v34;
  uint64_t v35;

  v31 = a4;
  v32 = a5;
  v35 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  v10 = (uint64_t)_NSKeyValueRetainedObservationInfoForObject(a1, 0);
  v11 = objc_msgSend(a1, "_implicitObservationInfo");
  v12 = v11;
  if (v10)
  {
    v11 = objc_msgSend(*(id *)(v10 + 8), "count");
    v13 = v11;
    if (v12)
    {
LABEL_3:
      v11 = objc_msgSend(*(id *)(v12 + 8), "count");
      v14 = v11;
      goto LABEL_6;
    }
  }
  else
  {
    v13 = 0;
    if (v11)
      goto LABEL_3;
  }
  v14 = 0;
LABEL_6:
  v29 = a2;
  v15 = v14 + v13;
  MEMORY[0x1E0C80A78](v11);
  v17 = (uint64_t *)((char *)&v29 - v16);
  if (v10)
    _NSKeyValueObservationInfoGetObservances(v10, (uint64_t)&v29 - v16, v13);
  v30 = a3;
  if (v12)
    _NSKeyValueObservationInfoGetObservances(v12, (uint64_t)&v17[v13], v14);
  v18 = a6;
  if (v15)
  {
    v19 = (id **)v17;
    v20 = v14 + v13;
    do
    {
      if (-[NSKeyValueObservance retainedObserver](*v19))
      {
        v21 = *v19;
        if (*v19)
        {
          if (((_BYTE)v21[5] & 0x20) != 0)
            v21 = (id *)v21[4];
          else
            v21 = 0;
        }
      }
      else
      {
        v21 = 0;
        *v19 = 0;
      }
      v22 = v21;
      ++v19;
      --v20;
    }
    while (v20);
  }
  os_unfair_recursive_lock_unlock();
  if (v10 | v12)
  {
    v33[1] = (CFTypeRef)1;
    v23 = v29;
    v24 = v18;
    v25 = v18;
    v26 = v30;
    v33[0] = NSKVOCopyPendingNotificationStack(a1, v29, v25, v30, 1);
    v34 = v10;
    if (v10)
      NSKeyValueWillChange((uint64_t)a1, v23, v26, v17, v13, v31, v32, (void (*)(uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))NSKeyValuePushPendingNotificationPerThread, (uint64_t)v33, v24);
    if (v12)
    {
      v34 = 0;
      NSKeyValueWillChange((uint64_t)a1, v23, v26, &v17[v13], v14, v31, v32, (void (*)(uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))NSKeyValuePushPendingNotificationPerThread, (uint64_t)v33, v24);
    }
    if (!CFArrayGetCount((CFArrayRef)v33[0]))
      NSKVOPendingNotificationStackRemove(a1, v23, v24, v26);
    CFRelease(v33[0]);
  }
  for (; v15; --v15)
  {
    if (!*v17)
      goto LABEL_33;
    isClass = object_isClass((id)*v17);
    v28 = *v17;
    if (!isClass)
    {

      v28 = *v17;
    }
    if (!v28)
      goto LABEL_35;
    if ((*(_BYTE *)(v28 + 40) & 0x20) != 0)
      v28 = *(_QWORD *)(v28 + 32);
    else
LABEL_33:
      v28 = 0;
LABEL_35:

    ++v17;
  }

}

uint64_t allocateInitialCapacity(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(a1[3] + 8))(a2);
  *a1 = result;
  if (!result)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("*** NSHashTable unable to allocate memory -- allocation function failed"), 0));
  return result;
}

uint64_t allocateInitialCapacity_0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(a1[3] + 8))(a2);
  *a1 = result;
  if (!result)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("*** NSMapTable unable to allocate memory -- allocation function failed"), 0));
  return result;
}

uint64_t allocateInitialCapacity_1(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(a1[3] + 8))(a2);
  *a1 = result;
  if (!result)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("*** NSPointerArray unable to allocate memory -- allocation function failed"), 0));
  return result;
}

void *allocateStorage(size_t a1)
{
  if (a1 >> 61)
    return 0;
  else
    return malloc_type_calloc(a1, 8uLL, 0x80040B8603338uLL);
}

void *_NSKeyValueRetainedObservationInfoForObject(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  os_unfair_lock_lock(&NSKeyValueObservationInfoLock);
  os_unfair_lock_assert_owner(&NSKeyValueObservationInfoLock);
  if (a2)
    v4 = (void *)(*(uint64_t (**)(void *, char *))(a2 + 16))(a1, sel_observationInfo);
  else
    v4 = (void *)objc_msgSend(a1, "observationInfo");
  v5 = v4;
  v6 = v4;
  os_unfair_lock_unlock(&NSKeyValueObservationInfoLock);
  return v5;
}

_QWORD *allocateStorageWithSentinel(unint64_t a1)
{
  _QWORD *result;
  uint64_t i;

  if (a1 >> 61)
    return 0;
  result = malloc_type_malloc(8 * a1, 0x80040B8603338uLL);
  if (result && a1)
  {
    for (i = 0; i != a1; ++i)
      result[i] = 1;
  }
  return result;
}

void freeWeakStorage(id *location, uint64_t a2)
{
  uint64_t v3;
  id *v4;

  if (a2)
  {
    v3 = a2;
    v4 = location;
    do
    {
      if ((unint64_t)*v4 >= 2)
        objc_storeWeak(v4, 0);
      ++v4;
      --v3;
    }
    while (v3);
  }
  free(location);
}

void NSKVOPendingNotificationStackRemove(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  __CFDictionary **v7;
  __CFDictionary *v8;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) == 0)
  {
    v8 = (__CFDictionary *)objc_msgSend(a1, "_pendingChangeNotificationsArrayForKey:create:", a2, 0);
    if (!v8)
      return;
    goto LABEL_6;
  }
  v7 = (__CFDictionary **)_CFGetTSD();
  if (v7)
  {
    v8 = *v7;
    if (*v7)
    {
LABEL_6:
      if (CFDictionaryGetCount(v8) >= 1)
      {
        v9[0] = a1;
        v9[1] = a2;
        v9[2] = a3;
        CFDictionaryRemoveValue(v8, v9);
      }
    }
  }
}

void NSKeyValueDidChangeWithPerThreadPendingNotifications(void *a1, uint64_t a2, char a3, void (*a4)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, _OWORD *), uint64_t a5)
{
  const __CFArray *v10;
  const __CFArray *v11;
  id v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v10 = (const __CFArray *)NSKVOCopyPendingNotificationStack(a1, a2, a5, a3, 0);
  if (v10)
  {
    v11 = v10;
    if (CFArrayGetCount(v10) >= 1)
    {
      v12 = a1;
      v13[0] = v11;
      v13[1] = 0;
      v13[2] = a5;
      NSKeyValueDidChange((uint64_t)a1, a2, a3, a4, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t *, __int128 *, uint64_t *, CFTypeRef *, uint64_t))NSKeyValuePopPendingNotificationPerThread, (uint64_t)v13);
      if (!CFArrayGetCount(v11))
        NSKVOPendingNotificationStackRemove(a1, a2, a5, a3);

    }
    CFRelease(v11);
  }
}

CFTypeRef NSKVOCopyPendingNotificationStack(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  int v5;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const void *Value;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a5;
  v19 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) != 0)
    v9 = NSKVOPendingPerThreadNotificationStack(a5);
  else
    v9 = (const __CFDictionary *)objc_msgSend(a1, "_pendingChangeNotificationsArrayForKey:create:", a2, a5);
  v10 = v9;
  if (!v9 || (v5 & 1) == 0 && CFDictionaryGetCount(v9) < 1)
    return 0;
  *(_QWORD *)&v17 = a1;
  *((_QWORD *)&v17 + 1) = a2;
  v18 = a3;
  Value = CFDictionaryGetValue(v10, &v17);
  if (!Value)
  {
    if (v5)
    {
      Value = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, &NSKVOPendingNotificationArrayCallbacks);
      v12 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
      v13 = v18;
      *(_OWORD *)v12 = v17;
      *((_QWORD *)v12 + 2) = v13;
      v14 = *((id *)v12 + 1);
      v15 = *((id *)v12 + 2);
      CFDictionarySetValue(v10, v12, Value);
      CFRelease(Value);
    }
  }
  if (Value)
    return CFRetain(Value);
  else
    return 0;
}

CFMutableDictionaryRef NSKVOPendingPerThreadNotificationStack(char a1)
{
  CFMutableDictionaryRef *v2;
  CFMutableDictionaryRef *v3;
  CFMutableDictionaryRef result;
  malloc_zone_t *v5;

  v2 = (CFMutableDictionaryRef *)_CFGetTSD();
  if (!v2)
  {
    if ((a1 & 1) == 0)
      return 0;
    v5 = malloc_default_zone();
    v3 = (CFMutableDictionaryRef *)malloc_type_zone_calloc(v5, 1uLL, 0x58uLL, 0xC2E5A2B2uLL);
    _CFSetTSD();
    result = *v3;
    if (*v3)
      return result;
LABEL_7:
    result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, &NSKVOPendingNotificationStackIdentifierCallbacks, MEMORY[0x1E0C9B3A0]);
    *v3 = result;
    return result;
  }
  v3 = v2;
  result = *v2;
  if (!result && (a1 & 1) != 0)
    goto LABEL_7;
  return result;
}

void NSKeyValueDidChange(uint64_t a1, uint64_t a2, char a3, void (*a4)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, _OWORD *), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t *, __int128 *, uint64_t *, CFTypeRef *, uint64_t), uint64_t a7)
{
  void *v14;
  int v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  CFTypeRef cf2;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  v14 = (void *)_NSKeyValueDebugger();
  if (v14)
    objc_msgSend(v14, "_object:trackChangeForKeyOrKeys:operation:", a1, a2, 1);
  v35 = 0;
  v36[0] = 0;
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  v30 = 0;
  v31 = 0;
  cf2 = 0;
  v15 = a6(a1, a2, &v35, &v32, &v30, &cf2, a7);
  v16 = 0;
  if (v15)
  {
    do
    {
      objc_msgSend(*(id *)(v35 + 16), "object:withObservance:didChangeValueForKeyOrKeys:recurse:forwardingValues:", a1, v35, cf2, 1, v30, v31);
      v17 = (const void *)objc_msgSend(*(id *)(v35 + 16), "keyPath");
      v18 = (uint64_t)v17;
      if ((a3 & 1) != 0)
        v19 = 0;
      else
        v19 = CFEqual(v17, cf2);
      v20 = *(_BYTE *)(v35 + 40) & 0xF;
      v24[0] = v32;
      v24[1] = v33;
      v25 = v34;
      a4(&v26, a1, v18, a5, v19 != 0, v20, v24);
      v32 = v26;
      v33 = v27;
      v34 = v28;
      v21 = *(void **)(v35 + 8);
      v22 = *(_QWORD *)(v35 + 24);
      if ((*(_BYTE *)(v35 + 40) & 0x20) != 0)
        v23 = *(_QWORD *)(v35 + 32);
      else
        v23 = 0;
      v26 = v32;
      v27 = v33;
      v28 = v34;
      NSKeyValueNotifyObserver(v21, v18, a1, v22, v23, 0, &v26, v36);
    }
    while ((a6(a1, a2, &v35, &v32, &v30, &cf2, a7) & 1) != 0);
    v16 = (void *)v36[0];
  }

}

CFIndex NSKeyValuePopPendingNotificationPerThread(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _OWORD *a5, uint64_t *a6, uint64_t a7)
{
  const __CFArray *v14;
  CFIndex result;
  CFIndex v16;
  unsigned __int8 *v17;
  int v18;
  char *ValueAtIndex;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v25;
  __int128 v26;
  uint64_t *v27;

  v14 = *(const __CFArray **)a7;
  result = CFArrayGetCount(*(CFArrayRef *)a7);
  if (result)
  {
    v16 = result;
    v27 = a6;
    v17 = *(unsigned __int8 **)(a7 + 8);
    if (!v17)
      goto LABEL_14;
    v18 = v17[2];
    v16 = result - 1;
    if (v17 != CFArrayGetValueAtIndex(v14, result - 1))
      __assert_rtn("NSKeyValuePopPendingNotificationPerThread", "NSKeyValueObserving.m", 980, "moreParameters->mostRecentEntry == CFArrayGetValueAtIndex(stack, stackCount - 1)");
    CFArrayRemoveValueAtIndex(v14, v16);
    if (!v18)
    {
LABEL_14:
      do
      {
        if (v16-- < 1)
          break;
        ValueAtIndex = (char *)CFArrayGetValueAtIndex(v14, v16);
        if (*((_QWORD *)ValueAtIndex + 1) != a1
          || (v20 = ValueAtIndex, !objc_msgSend(*((id *)ValueAtIndex + 2), "isEqual:", a2))
          || (v21 = *(_QWORD *)(a7 + 16)) != 0 && *((_QWORD *)v20 + 4) != v21)
        {
          __assert_rtn("NSKeyValuePopPendingNotificationPerThread", "NSKeyValueObserving.m", 1001, "currentEntry->observable==inObservable && [currentEntry->triggerKeyOrKeys isEqual:inTriggerKeyOrKeys] && (!moreParameters->onlyObservanceToMatchOrNil || (currentEntry->observance==moreParameters->onlyObservanceToMatchOrNil))");
        }
        v22 = *((_QWORD *)v20 + 3);
        if (!v22
          || _NSKeyValueCheckObservationInfoForPendingNotification(*((void **)v20 + 1), *((_QWORD *)v20 + 4), v22))
        {
          *a3 = *((_QWORD *)v20 + 4);
          v25 = *(_OWORD *)(v20 + 40);
          v26 = *(_OWORD *)(v20 + 56);
          *(_QWORD *)(a4 + 32) = *((_QWORD *)v20 + 9);
          *(_OWORD *)a4 = v25;
          *(_OWORD *)(a4 + 16) = v26;
          *a5 = *((_OWORD *)v20 + 5);
          *v27 = a2;
          *(_QWORD *)(a7 + 8) = v20;
          return 1;
        }
        v23 = v20[2];
        CFArrayRemoveValueAtIndex(v14, v16);
      }
      while (!v23);
    }
    return 0;
  }
  return result;
}

uint64_t NSKeyValueNotifyObserver(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t result;
  void *v17;
  __int128 v18;
  NSKeyValueChangeDictionary *v19;
  NSKeyValueChangeDictionary *v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(a1, "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:", a2, a3, *a7, a7[1], a7[2], a7[3], a4);
  v17 = (void *)*a8;
  if (*a8)
  {
    v18 = *((_OWORD *)a7 + 1);
    v23 = *(_OWORD *)a7;
    v24 = v18;
    v25 = a7[4];
    objc_msgSend(v17, "setDetailsNoCopy:originalObservable:", &v23, a5);
    v19 = (NSKeyValueChangeDictionary *)*a8;
  }
  else
  {
    v20 = [NSKeyValueChangeDictionary alloc];
    v21 = *((_OWORD *)a7 + 1);
    v23 = *(_OWORD *)a7;
    v24 = v21;
    v25 = a7[4];
    v19 = -[NSKeyValueChangeDictionary initWithDetailsNoCopy:originalObservable:isPriorNotification:](v20, "initWithDetailsNoCopy:originalObservable:isPriorNotification:", &v23, a5, a6);
    *a8 = (uint64_t)v19;
  }
  v22 = -[NSKeyValueChangeDictionary retainCount](v19, "retainCount");
  result = NSKVONotify(a1, a2, a3, *a8, a4);
  if (v22 != 0x7FFFFFFFFFFFFFFFLL)
  {
    result = objc_msgSend((id)*a8, "retainCount");
    if (result != v22)
      return objc_msgSend((id)*a8, "retainObjects");
  }
  return result;
}

void *NSKeyValueDidChangeBySetting@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  __int128 v7;

  if (!a2)
  {
    if (a3)
      __assert_rtn("NSKeyValueDidChangeBySetting", "NSKeyValueObserving.m", 617, "inObservedKeyPath");
  }
  v7 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)a6 = *(_OWORD *)a5;
  *(_OWORD *)(a6 + 16) = v7;
  *(_QWORD *)(a6 + 32) = *(_QWORD *)(a5 + 32);
  if ((a4 & 1) != 0)
  {
    if (a3)
    {
      result = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", a2);
      if (result)
      {
LABEL_7:
        *(_QWORD *)(a6 + 16) = result;
        return result;
      }
    }
    else
    {
      result = (void *)objc_msgSend(result, "valueForKeyPath:", a2);
      if (result)
        goto LABEL_7;
    }
    result = (void *)objc_msgSend(MEMORY[0x1E0C99E38], "null");
    goto LABEL_7;
  }
  return result;
}

void sub_1817F21C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1817F1E74);
  }
  _Unwind_Resume(a1);
}

void __NSOQSchedule(uint64_t a1)
{
  os_unfair_lock_s *v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  unsigned __int8 v12;
  os_unfair_lock_s *v13;
  int v14;
  unsigned __int8 v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  void *v19;
  os_unfair_lock_s *v20;
  NSObject *v21;
  void *v22;
  BOOL v23;
  id *v24;
  id v25;
  os_unfair_lock_s *v26;
  unint64_t v27;
  os_unfair_lock_s *v28;
  _OWORD *ptr;
  os_unfair_lock_s *v30;
  _OWORD __src[16];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (os_unfair_lock_s *)(a1 + 8);
    memset(__src, 0, sizeof(__src));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    v3 = *(_DWORD *)(a1 + 168);
    v4 = *(_DWORD *)(a1 + 172);
    v5 = (v3 - v4);
    if (v3 <= v4)
    {
      os_unfair_lock_unlock(v2);
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v26 = v2;
      v27 = 32;
      ptr = __src;
      do
      {
        v8 = atomic_load((unsigned __int8 *)(a1 + 500));
        if ((v8 & 1) != 0 || v6 >= 6)
          break;
        v9 = &v2[2 * ((uint64_t)(char)(__NSOperationPrios[v6] + ((__NSOperationPrios[v6] >> 13) & 3)) >> 2)
               + 4];
        v10 = *(os_unfair_lock_s **)&v9[6]._os_unfair_lock_opaque;
        v30 = v9 + 6;
        if (v10)
        {
          v11 = 0;
          v28 = v9 + 18;
          while (1)
          {
            v12 = atomic_load((unsigned __int8 *)(a1 + 500));
            if ((v12 & 1) != 0)
              goto LABEL_36;
            v13 = v10;
            v10 = *(os_unfair_lock_s **)&v10[6]._os_unfair_lock_opaque;
            v14 = atomic_load((unsigned __int8 *)&v13[59]._os_unfair_lock_opaque + 1);
            if (v14 == 80)
              break;
LABEL_31:
            if (v10)
              v23 = v5 == 0;
            else
              v23 = 1;
            v11 = v13;
            if (v23)
              goto LABEL_36;
          }
          v15 = atomic_load((unsigned __int8 *)&v13[59]._os_unfair_lock_opaque + 3);
          if ((v15 & 1) == 0)
          {
            os_unfair_lock_lock(v13 + 58);
            v16 = *(_QWORD *)&v13[14]._os_unfair_lock_opaque;
            os_unfair_lock_unlock(v13 + 58);
            if (!v16)
            {
              if (v7 + 1 <= v27)
              {
                v19 = ptr;
              }
              else
              {
                v17 = malloc_good_size(8 * v27 + 8);
                v27 = v17 >> 3;
                v18 = v17 & 0xFFFFFFFFFFFFFFF8;
                if (ptr == __src)
                {
                  v19 = malloc_type_malloc(v18, 0x80040B8603338uLL);
                  memmove(v19, __src, 8 * v7);
                }
                else
                {
                  v19 = malloc_type_realloc(ptr, v18, 0x80040B8603338uLL);
                }
              }
              ptr = v19;
              *((_QWORD *)v19 + v7++) = v13;
            }
            goto LABEL_31;
          }
          v20 = v11 + 6;
          if (!v11)
            v20 = v30;
          *(_QWORD *)&v20->_os_unfair_lock_opaque = v10;
          if (!v10)
            *(_QWORD *)&v28->_os_unfair_lock_opaque = v11;
          *(_QWORD *)&v13[6]._os_unfair_lock_opaque = 0;
          atomic_store(0x88u, (unsigned __int8 *)&v13[59]._os_unfair_lock_opaque + 1);
          ++*(_DWORD *)(a1 + 172);
          if (*(_BYTE *)(a1 + 506))
          {
            v21 = MEMORY[0x1E0C80D38];
            goto LABEL_22;
          }
          v21 = *(NSObject **)(a1 + 176);
          if (v21)
LABEL_22:
            dispatch_retain(v21);
          else
            v21 = oq_synthesize_backing_queue(a1);
          os_unfair_lock_lock(v13 + 58);
          v22 = _Block_copy(*(const void **)&v13[28]._os_unfair_lock_opaque);
          os_unfair_lock_unlock(v13 + 58);
          if (object_getClass(v13) == (Class)_NSBarrierOperation)
            dispatch_barrier_async(v21, v22);
          else
            dispatch_async(v21, v22);
          --v5;
          dispatch_release(v21);
          _Block_release(v22);
          v13 = v11;
          goto LABEL_31;
        }
LABEL_36:
        ++v6;
        v2 = v26;
      }
      while (v5 > 0);
      os_unfair_lock_unlock(v2);
      if (v7)
      {
        v24 = (id *)ptr;
        do
        {
          if (objc_msgSend(*v24, "isReady"))
            atomic_store(1u, (unsigned __int8 *)*v24 + 239);
          v25 = *v24++;

          --v7;
        }
        while (v7);
      }
      if (ptr != __src)
        free(ptr);
    }
  }
}

void op_invalidate_queue_and_schedule_locked(uint64_t a1)
{
  os_unfair_lock_s *v2;
  void *v3;
  const void *v4;
  id v5;

  v2 = (os_unfair_lock_s *)(a1 + 232);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 232));
  v3 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v4 = *(const void **)(a1 + 112);
  v5 = *(id *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  os_unfair_lock_unlock(v2);

  if (v4)
    _Block_release(v4);

}

void __addOperations(objc_class *a1, const char *a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  int v15;
  int v16;
  __CFString *v17;
  unsigned __int8 *v18;
  int v19;
  _BOOL4 v20;
  uint64_t j;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  int v25;
  NSString *v26;
  uint64_t v27;
  const char *v28;
  NSString *v29;
  int v30;
  int v31;
  unint64_t v32;
  BOOL v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD v37[2];
  void (*v38)(uint64_t);
  void *v39;
  objc_class *v40;
  uint64_t *v41;
  uint64_t *v42;
  _QWORD *v43;
  char v44;
  _QWORD v45[2];
  void (*v46)(_QWORD *, uint64_t);
  void *v47;
  objc_class *v48;
  uint64_t *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[6];
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  void (*v66)(uint64_t);
  uint64_t v67;
  _BYTE v68[128];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (!(a3 | a4) || a4 && !objc_msgSend((id)a4, "count"))
    return;
  v62 = 0;
  v63 = &v62;
  v64 = 0x3052000000;
  v65 = __Block_byref_object_copy__11;
  v66 = __Block_byref_object_dispose__11;
  v67 = 0;
  v61[0] = 0;
  v61[1] = v61;
  v61[2] = 0x3052000000;
  v61[3] = __Block_byref_object_copy__11;
  v61[4] = __Block_byref_object_dispose__11;
  v61[5] = 0;
  v57 = 0;
  v58 = &v57;
  v59 = 0x2020000000;
  v60 = 0;
  v53 = 0;
  v54 = &v53;
  v55 = 0x2020000000;
  v56 = 0;
  v10 = MEMORY[0x1E0C809B0];
  v45[0] = MEMORY[0x1E0C809B0];
  v45[1] = 3221225472;
  v46 = ____addOperations_block_invoke;
  v47 = &unk_1E0F4FCA8;
  v48 = a1;
  v49 = &v53;
  v50 = &v57;
  v51 = v61;
  v52 = &v62;
  if (a3)
  {
    ____addOperations_block_invoke(v45, a3);
  }
  else
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v11 = objc_msgSend((id)a4, "countByEnumeratingWithState:objects:count:", &v69, v68, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v70;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v70 != v12)
            objc_enumerationMutation((id)a4);
          v46(v45, *(_QWORD *)(*((_QWORD *)&v69 + 1) + 8 * i));
        }
        v11 = objc_msgSend((id)a4, "countByEnumeratingWithState:objects:count:", &v69, v68, 16);
      }
      while (v11);
    }
  }
  if (v58[3])
  {
    for (j = v63[5]; j; v63[5] = j)
    {
      v22 = j;
      j = *(_QWORD *)(j + 16);
      op_invalidate_queue_and_schedule_locked(v22);
      *(_QWORD *)(v63[5] + 8) = 0;
      v23 = v63;
      *(_QWORD *)(v63[5] + 16) = 0;
      v24 = (unsigned __int8 *)(v23[5] + 237);
      while (1)
      {
        v25 = __ldaxr(v24);
        if (v25 != 72)
          break;
        if (!__stlxr(0, v24))
          goto LABEL_36;
      }
      __clrex();
LABEL_36:

    }
    if (a4)
    {
      v26 = _NSMethodExceptionProem(a1, a2);
      v27 = v58[3];
      v28 = "s are";
      if (v27 == 1)
        v28 = " is";
      v29 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %lu (of %lu) operation%s finished, executing, or already in a queue, and cannot be enqueued"), v26, v27, v54[3] + v27, v28);
      objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v29, 0));
    }
    v30 = atomic_load((unsigned __int8 *)(a3 + 237));
    HIDWORD(v32) = v30;
    LODWORD(v32) = v30 - 216;
    v31 = v32 >> 2;
    if ((v31 - 6) >= 2)
    {
      if (v31)
        v33 = v31 == 2;
      else
        v33 = 1;
      if (!v33)
      {
        v36 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: operation is already enqueued on a queue"), _NSMethodExceptionProem(a1, a2)), 0);
        objc_exception_throw(v36);
      }
      v34 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: operation is executing and cannot be enqueued"), _NSMethodExceptionProem(a1, a2)), 0);
      objc_exception_throw(v34);
    }
    v35 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: operation is finished and cannot be enqueued"), _NSMethodExceptionProem(a1, a2)), 0);
    objc_exception_throw(v35);
  }
  v14 = 0;
  v37[0] = v10;
  v37[1] = 3221225472;
  v38 = ____addOperations_block_invoke_5;
  v39 = &unk_1E0F4FCD0;
  v40 = a1;
  v41 = &v53;
  v15 = 1;
  v42 = &v62;
  v43 = v61;
  v44 = a5;
  do
  {
    while (1)
    {
      v16 = v15;
      v17 = _NSOperationQueueOperationsAndOperationCountKeys[v14];
      if (v17 == CFSTR("operations"))
        break;
      if (v17 == CFSTR("operationCount"))
      {
        v18 = (unsigned __int8 *)a1 + 504;
        goto LABEL_21;
      }
      v15 = 0;
      v14 = 1;
      if ((v16 & 1) == 0)
        goto LABEL_25;
    }
    v18 = (unsigned __int8 *)a1 + 503;
LABEL_21:
    v19 = atomic_load(v18);
    v20 = v19 != 0;
    if (v19)
      break;
    v15 = 0;
    v14 = 1;
  }
  while (((v16 ^ 1) & 1) == 0);
  if (v20)
  {
    -[objc_class _changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:](a1, "_changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:", _NSOperationQueueOperationsAndOperationCountKeys, 2, 0, 0, v37);
    goto LABEL_26;
  }
LABEL_25:
  v38((uint64_t)v37);
LABEL_26:
  if ((a5 & 1) == 0)
    __NSOQSchedule((uint64_t)a1);
  _Block_object_dispose(&v53, 8);
  _Block_object_dispose(&v57, 8);
  _Block_object_dispose(v61, 8);
  _Block_object_dispose(&v62, 8);
}

void sub_1817F3498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void ____addOperations_block_invoke(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  int v6;
  id v7;
  dispatch_qos_class_t v8;
  dispatch_block_t v9;
  uint64_t v10;
  dispatch_block_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD aBlock[6];
  _QWORD v16[6];
  _QWORD block[7];

  block[6] = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)(a2 + 237);
  do
  {
    if (__ldaxr(v4))
    {
      __clrex();
      ++*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
      return;
    }
  }
  while (__stlxr(0x48u, v4));
  ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    while (1)
    {
      v6 = __ldaxr(v4);
      if (v6 != 72)
        break;
      if (!__stlxr(0, v4))
        return;
    }
    __clrex();
  }
  else
  {
    v7 = (id)a2;
    atomic_store(objc_msgSend((id)a2, "isReady"), (unsigned __int8 *)(a2 + 239));
    v8 = atomic_load((unsigned __int8 *)(a2 + 241));
    if (v8)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ____addOperations_block_invoke_2;
      block[3] = &unk_1E0F4C650;
      block[4] = a1[4];
      block[5] = a2;
      v9 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v8, 0, block);
    }
    else
    {
      v10 = a1[4];
      if (oq_get_property_qos(v10))
      {
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = ____addOperations_block_invoke_4;
        aBlock[3] = &unk_1E0F4C650;
        aBlock[4] = v10;
        aBlock[5] = a2;
        v9 = _Block_copy(aBlock);
      }
      else
      {
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 3221225472;
        v16[2] = ____addOperations_block_invoke_3;
        v16[3] = &unk_1E0F4C650;
        v16[4] = v10;
        v16[5] = a2;
        v9 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, v16);
      }
    }
    v11 = v9;
    v12 = (void *)a1[4];
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 232));
    if (*(_QWORD *)(a2 + 32))
      __assert_rtn("iop_set_queue_and_adopt_schedule_locked", "NSOperation.m", 316, "iop->__queue == nil");
    *(_QWORD *)(a2 + 32) = v12;
    if (*(_QWORD *)(a2 + 112))
      __assert_rtn("iop_set_queue_and_adopt_schedule_locked", "NSOperation.m", 318, "iop->__schedule == nil");
    *(_QWORD *)(a2 + 112) = v11;
    *(_QWORD *)(a2 + 104) = voucher_copy();
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 232));
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40);
    *(_QWORD *)(a2 + 16) = 0;
    v13 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40);
    if (v13)
      v14 = (_QWORD *)(v13 + 16);
    else
      v14 = (_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40);
    *v14 = a2;
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40) = a2;
  }
}

uint64_t oq_get_property_qos(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v1 = atomic_load((unsigned __int8 *)(a1 + 502));
  v2 = 5;
  if (v1 > 20)
  {
    if (v1 == 21)
      return -1;
    v3 = 25;
    if (v1 == 33)
      v2 = 33;
    v4 = v1 == 25;
  }
  else
  {
    if (!v1)
      return 0;
    v3 = 9;
    if (v1 == 17)
      v2 = 17;
    v4 = v1 == 9;
  }
  if (v4)
    return v3;
  else
    return v2;
}

void ____addOperations_block_invoke_5(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int property_qos;

  if (!*(_BYTE *)(a1 + 64))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v3 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 144);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + v2, v3));
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
    *(_QWORD *)(v5 + 8) = v6;
    if (!v6)
      v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    do
    {
      if (!*(_BYTE *)(a1 + 64))
      {
        for (i = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 72); i; i = (_QWORD *)i[3])
          iop_addDependency((unsigned __int8 *)(v5 + 8), i, (void *)v5);
      }
      v8 = (unsigned __int8 *)(v5 + 237);
      while (1)
      {
        v9 = __ldaxr(v8);
        if (v9 != 72)
          break;
        if (!__stlxr(0x50u, v8))
          goto LABEL_16;
      }
      __clrex();
LABEL_16:
      v10 = *(unsigned __int8 *)(v5 + 238);
      if (v10 == 255)
      {
        if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 168) == 1)
        {
          v10 = 0;
        }
        else
        {
          property_qos = op_get_property_qos(v5);
          v10 = 0;
          if (property_qos > 16)
          {
            if (property_qos > 24)
            {
              if (property_qos == 25)
              {
                v10 = 4;
              }
              else
              {
                if (property_qos != 33)
                  goto LABEL_39;
                v10 = 8;
              }
            }
            else if (property_qos == 17)
            {
              v10 = 252;
            }
            else if (property_qos != 21)
            {
              goto LABEL_39;
            }
          }
          else if ((property_qos + 1) >= 2)
          {
            if (property_qos != 5 && property_qos != 9)
            {
LABEL_39:
              __break(1u);
              return;
            }
            v10 = 248;
          }
        }
      }
      *(_QWORD *)(v5 + 24) = 0;
      v11 = 8 * ((int)((v10 + (((char)v10 >> 13) & 3)) << 24) >> 26) + 16;
      v12 = *(_QWORD *)(a1 + 32) + v11;
      v13 = *(_QWORD *)(v12 + 80);
      v14 = (uint64_t *)(v12 + 32);
      if (v13)
        v14 = (uint64_t *)(v13 + 24);
      *v14 = v5;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + v11 + 80) = v5;
      v5 = *(_QWORD *)(v5 + 16);
    }
    while (v5);
  }
  if (!*(_BYTE *)(a1 + 64))
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
}

NSObject *oq_synthesize_backing_queue(uint64_t a1)
{
  NSObject *v1;
  dispatch_qos_class_t v3;
  NSObject *v4;
  unsigned __int8 v5;
  int v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject **)(a1 + 184);
  if (!v1)
  {
    v3 = atomic_load((unsigned __int8 *)(a1 + 502));
    if (v3)
      v4 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E0C80D50], v3, 0);
    else
      v4 = MEMORY[0x1E0C80D50];
    v5 = atomic_load((unsigned __int8 *)(a1 + 501));
    if ((v5 & 1) != 0)
      v4 = dispatch_queue_attr_make_with_overcommit();
    v1 = dispatch_queue_create(0, v4);
    if (*(_BYTE *)(a1 + 200))
      goto LABEL_21;
    v8[0] = 0;
    objc_msgSend(*(id *)(a1 + 192), "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", a1 + 200, 299, v8, 4, 0, 0, objc_msgSend(*(id *)(a1 + 192), "length"), 0);
    *(_BYTE *)(a1 + 8 + v8[0] + 192) = 0;
    __strlcat_chk();
    v6 = atomic_load((unsigned __int8 *)(a1 + 502));
    if (v6 <= 16)
    {
      if (v6 && v6 != 5 && v6 != 9)
        goto LABEL_20;
    }
    else if (v6 > 24)
    {
      if (v6 != 33 && v6 != 25)
        goto LABEL_20;
    }
    else if (v6 != 17 && v6 != 21)
    {
      goto LABEL_20;
    }
    __strlcat_chk();
LABEL_20:
    __strlcat_chk();
LABEL_21:
    dispatch_queue_set_label_nocopy();
    *(_QWORD *)(a1 + 184) = v1;
  }
  dispatch_retain(v1);
  return v1;
}

uint64_t __NSOPERATION_IS_INVOKING_MAIN__(void *a1)
{
  return objc_msgSend(a1, "main");
}

uint64_t NSKVONotify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (_NSKeyValueObserverRegistrationEnableLockingAssertions)
    os_unfair_lock_assert_not_owner((const os_unfair_lock *)&_NSKeyValueObserverRegistrationLock);
  return objc_msgSend(a1, "observeValueForKeyPath:ofObject:change:context:", a2, a3, a4, a5);
}

uint64_t op_get_property_qos(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v1 = atomic_load((unsigned __int8 *)(a1 + 241));
  v2 = 5;
  if (v1 > 20)
  {
    if (v1 == 21)
      return -1;
    v3 = 25;
    if (v1 == 33)
      v2 = 33;
    v4 = v1 == 25;
  }
  else
  {
    if (!v1)
      return 0;
    v3 = 9;
    if (v1 == 17)
      v2 = 17;
    v4 = v1 == 9;
  }
  if (v4)
    return v3;
  else
    return v2;
}

uint64_t __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t NSKeyValuePopPendingNotificationLocal(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _OWORD *a5, _QWORD *a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v13 = a7[1];
  if (v13 < 1)
    return 0;
  while (1)
  {
    v14 = *a7;
    v15 = v13 - 1;
    a7[1] = v13 - 1;
    v16 = (uint64_t *)(v14 + 80 * (v13 - 1));
    if (!v16[8] || _NSKeyValueCheckObservationInfoForPendingNotification(a1, *v16, a7[5]))
      break;

    v17 = v14 + 80 * v15;
    v13 = a7[1];
    if (v13 <= 0)
      return 0;
  }
  *a3 = *v16;
  v19 = v14 + 80 * v15;
  v20 = *(_OWORD *)(v19 + 8);
  v21 = *(_OWORD *)(v19 + 24);
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(v19 + 40);
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v21;
  *a5 = *(_OWORD *)(v19 + 48);
  *a6 = *(_QWORD *)(v19 + 72);
  v22 = *(_QWORD *)(v19 + 16);
  a7[2] = *(_QWORD *)(*v16 + 8);
  a7[3] = v22;
  a7[4] = *(_QWORD *)(v19 + 48);
  return 1;
}

uint64_t _NSKeyValueCheckObservationInfoForPendingNotification(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  os_unfair_lock_lock(&NSKeyValueObservationInfoLock);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
  if (v6)
  {
    v7 = (*(uint64_t (**)(void *, char *))(v6 + 16))(a1, sel_observationInfo);
    if (v7)
      goto LABEL_3;
LABEL_6:
    v8 = 0;
    goto LABEL_8;
  }
  v7 = objc_msgSend(a1, "observationInfo");
  if (!v7)
    goto LABEL_6;
LABEL_3:
  if (v7 == a3)
    v8 = 1;
  else
    v8 = objc_msgSend(*(id *)(v7 + 8), "containsObject:", a2);
LABEL_8:
  os_unfair_lock_unlock(&NSKeyValueObservationInfoLock);
  return v8;
}

void *NSKeyValueDidChangeBySetMutation@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v7 = *(_OWORD *)(a6 + 16);
  if (a4)
  {
    *(_OWORD *)a7 = *(_OWORD *)a6;
    *(_OWORD *)(a7 + 16) = v7;
    *(_QWORD *)(a7 + 32) = *(_QWORD *)(a6 + 32);
  }
  else
  {
    v8[0] = *(_OWORD *)a6;
    v8[1] = v7;
    v9 = *(_QWORD *)(a6 + 32);
    return NSKeyValueDidChangeBySetting(result, a2, a3, a5, (uint64_t)v8, a7);
  }
  return result;
}

__n128 NSKeyValueDidChangeByOrderedToManyMutation@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, char a5@<W4>, __int128 *a6@<X5>, uint64_t a7@<X8>)
{
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  __int128 v18;
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[11];
  _QWORD v30[4];
  _QWORD v31[8];
  __int128 v32;
  __int128 v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    v18 = a6[1];
    v32 = *a6;
    v33 = v18;
    v34 = (void (*)(uint64_t))*((_QWORD *)a6 + 4);
    NSKeyValueDidChangeBySetting(a1, a2, a3, a5, (uint64_t)&v32, a7);
    return result;
  }
  v12 = (id)*((_QWORD *)a6 + 3);
  v13 = _CFGetTSD();
  if (v13 && (v14 = v13, v15 = _CFGetTSD(), v14 == a2) && (void *)v15 == a1)
  {
    v16 = 0;
    v17 = 0;
    if ((a5 & 1) == 0)
      goto LABEL_20;
  }
  else
  {
    _CFSetTSD();
    _CFSetTSD();
    v16 = (void *)objc_msgSend(a1, "valueForKey:", a2);
    _CFSetTSD();
    _CFSetTSD();
    if (v16 && _NSIsNSOrderedSet())
    {
      v20 = *(_QWORD *)a6;
      if (*(_QWORD *)a6 == 4)
      {
        *(_QWORD *)&v32 = 0;
        *((_QWORD *)&v32 + 1) = &v32;
        *(_QWORD *)&v33 = 0x3052000000;
        *((_QWORD *)&v33 + 1) = __Block_byref_object_copy__9;
        v34 = __Block_byref_object_dispose__9;
        v35 = 0;
        v21 = objc_msgSend(*((id *)a6 + 4), "bytes");
        v31[0] = MEMORY[0x1E0C809B0];
        v31[1] = 3221225472;
        v31[2] = __NSKeyValueDidChangeByOrderedToManyMutation_block_invoke;
        v31[3] = &unk_1E0F4F0A8;
        v31[6] = &v32;
        v31[7] = v21;
        v31[4] = v16;
        v31[5] = v12;
        objc_msgSend(v12, "enumerateIndexesUsingBlock:", v31);
        v22 = *(void **)(*((_QWORD *)&v32 + 1) + 40);
        if (v22)
          v12 = v22;

        *((_QWORD *)a6 + 4) = 0;
        _Block_object_dispose(&v32, 8);
        v20 = *(_QWORD *)a6;
      }
      if (v20 == 2)
      {
        *(_QWORD *)&v32 = 0;
        *((_QWORD *)&v32 + 1) = &v32;
        *(_QWORD *)&v33 = 0x3052000000;
        *((_QWORD *)&v33 + 1) = __Block_byref_object_copy__9;
        v34 = __Block_byref_object_dispose__9;
        v35 = 0;
        v23 = objc_msgSend(*((id *)a6 + 4), "bytes");
        v24 = objc_msgSend(*((id *)a6 + 4), "length");
        v25 = objc_msgSend(v16, "count");
        v30[0] = 0;
        v30[1] = v30;
        v30[2] = 0x2020000000;
        v30[3] = 0;
        v29[0] = MEMORY[0x1E0C809B0];
        v29[1] = 3221225472;
        v29[2] = __NSKeyValueDidChangeByOrderedToManyMutation_block_invoke_2;
        v29[3] = &unk_1E0F4F0D0;
        v29[8] = v24 >> 3;
        v29[9] = v23;
        v29[10] = v25;
        v29[6] = v30;
        v29[7] = &v32;
        v29[4] = v16;
        v29[5] = v12;
        objc_msgSend(v12, "enumerateIndexesUsingBlock:", v29);
        v26 = *(void **)(*((_QWORD *)&v32 + 1) + 40);
        if (v26)
          v12 = v26;

        *((_QWORD *)a6 + 4) = 0;
        _Block_object_dispose(v30, 8);
        _Block_object_dispose(&v32, 8);
      }
    }
    v17 = 1;
    if ((a5 & 1) == 0)
      goto LABEL_20;
  }
  if (*(_QWORD *)a6 != 3)
  {
    if ((v17 & 1) == 0)
      v16 = (void *)objc_msgSend(a1, "valueForKey:", a2);
    v27 = objc_msgSend(v16, "objectsAtIndexes:", v12);
    goto LABEL_24;
  }
LABEL_20:
  v27 = 0;
LABEL_24:
  result = (__n128)a6[1];
  *(_OWORD *)a7 = *a6;
  *(__n128 *)(a7 + 16) = result;
  v28 = *((_QWORD *)a6 + 4);
  *(_QWORD *)(a7 + 24) = v12;
  *(_QWORD *)(a7 + 32) = v28;
  *(_QWORD *)(a7 + 16) = v27;
  return result;
}

void sub_1817F4890(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

BOOL specialized static CGRect._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  int v5;

  v3 = objc_retainAutorelease(a1);
  v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGRect(0);
  v5 = strcmp(v4, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  if (v5)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 32) = 1;
  }
  else
  {
    *(_BYTE *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    objc_msgSend(v3, sel_getValue_size_, a2, 32);
  }
  return v5 == 0;
}

BOOL specialized static CGSize._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  int v5;

  v3 = objc_retainAutorelease(a1);
  v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGSize(0);
  v5 = strcmp(v4, "{CGSize=dd}");
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v5)
  {
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)(a2 + 16) = 0;
    objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }
  return v5 == 0;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for CGSize);
}

void type metadata accessor for CGRect(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for CGRect);
}

uint64_t storeEnumTagSinglePayload for Locale(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LocalizedStringResource(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSString()
{
  void **v0;
  void *v1;

  v1 = *v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  AnyHashable.init<A>(_:)();

}

uint64_t NSKeyValuePropertyIsEqual(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  v3 = *(void **)(a1 + 16);
  if (v3 == *(void **)(a2 + 16))
    return 1;
  else
    return objc_msgSend(v3, "isEqual:");
}

uint64_t ___writeJSONObject_block_invoke_3(uint64_t a1)
{
  if ((_NSIsNSString() & 1) == 0)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Invalid (non-string) key in JSON dictionary"), 0));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a1 < *a2;
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;

  v2 = range1.location + range1.length;
  if (range1.location + range1.length <= range2.location + range2.length)
    v2 = range2.location + range2.length;
  if (range1.location >= range2.location)
    range1.location = range2.location;
  range1.length = v2 - range1.location;
  return range1;
}

double Date.timeIntervalSince1970.getter()
{
  double *v0;

  return *v0 + 978307200.0;
}

BOOL static Date.> infix(_:_:)(double *a1, double *a2)
{
  return *a2 < *a1;
}

id Measurement.unit.getter()
{
  id *v0;

  return *v0;
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSObject(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance NSObject(a1, a2, (SEL *)&selRef_debugDescription);
}

BOOL protocol witness for SingleValueDecodingContainer.decodeNil() in conformance JSONDecoderImpl()
{
  return JSONDecoderImpl.decodeNil()();
}

BOOL JSONDecoderImpl.decodeNil()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL8 result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 24 * v2;
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
    v6 = *(unsigned __int8 *)(v3 + 24);
    return !(v5 | v4) && v6 == 160;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL static UUID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL NSShouldRetainWithZone(id anObject, NSZone *requestedZone)
{
  NSZone *v3;
  NSZone *v4;
  BOOL result;
  malloc_zone_t *v6;

  v3 = (NSZone *)malloc_zone_from_ptr(anObject);
  v4 = v3;
  if (requestedZone)
    return v3 == requestedZone;
  v6 = malloc_default_zone();
  result = 1;
  if (v4 && v4 != (NSZone *)v6)
    return 0;
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

_WORD *NSKVOPendingNotificationRetain(uint64_t a1, _WORD *a2)
{
  _WORD *result;

  result = a2;
  ++*a2;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t destroy for PropertyListEncoder._Options()
{
  return swift_bridgeObjectRelease();
}

void *_NSBundlePathFromExecutablePath(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  stat v7;
  char v8[1026];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = (void *)objc_msgSend((id)objc_msgSend(a1, "_stringByResolvingSymlinksInPathUsingCache:", 1), "stringByDeletingLastPathComponent");
  v2 = (void *)objc_msgSend(v1, "stringByDeletingLastPathComponent");
  v3 = (void *)objc_msgSend(v2, "lastPathComponent");
  if (!objc_msgSend(v3, "compare:options:range:", CFSTR("Contents"), 0, 0, objc_msgSend(v3, "length"))
    || !objc_msgSend(v3, "compare:options:range:", CFSTR("Executables"), 0, 0, objc_msgSend(v3, "length"))
    && (v2 = (void *)objc_msgSend(v2, "stringByDeletingLastPathComponent"),
        v4 = (void *)objc_msgSend(v2, "lastPathComponent"),
        !objc_msgSend(v4, "compare:options:range:", CFSTR("Support Files"), 0, 0, objc_msgSend(v4, "length"))))
  {
    v5 = (void *)objc_msgSend(v2, "stringByDeletingLastPathComponent");
    memset(&v7, 0, sizeof(v7));
    if (objc_msgSend(v5, "getFileSystemRepresentation:maxLength:", v8, 1024))
    {
      if (!stat(v8, &v7))
      {
        if (access(v8, 4))
        {
          getpid();
          sandbox_check();
        }
        else if ((v7.st_mode & 0xF000) == 0x4000)
        {
          return v5;
        }
      }
    }
  }
  return v1;
}

BOOL NSBOOLFromString(void *a1)
{
  uint64_t v2;
  uint64_t v3;

  if ((objc_msgSend(a1, "isEqual:", CFSTR("YES")) & 1) != 0)
    return 1;
  v3 = objc_msgSend(a1, "length");
  v2 = 1;
  if (objc_msgSend(a1, "compare:options:range:", CFSTR("YES"), 1, 0, v3))
  {
    v2 = 1;
    if (objc_msgSend(a1, "compare:options:range:", CFSTR("Y"), 1, 0, v3))
      return objc_msgSend(a1, "integerValue") != 0;
  }
  return v2;
}

id StringProtocol.localizedCompare<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  void *v7;
  uint64_t v8;
  id v9;

  StringProtocol._ephemeralString.getter();
  v7 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  StringProtocol._ephemeralString.getter();
  v8 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, *a6, v8);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

void *_NSFrameworkPathFromLibraryPath(void *result)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  stat v8;
  char v9[1026];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = (void *)objc_msgSend((id)objc_msgSend(result, "_stringByResolvingSymlinksInPathUsingCache:", 1), "stringByDeletingLastPathComponent");
    v2 = (void *)objc_msgSend(v1, "pathExtension");
    if (!objc_msgSend(v2, "compare:options:range:", CFSTR("framework"), 0, 0, objc_msgSend(v2, "length")))
      goto LABEL_6;
    v3 = (void *)objc_msgSend(v1, "stringByDeletingLastPathComponent");
    v4 = (void *)objc_msgSend(v3, "lastPathComponent");
    v5 = objc_msgSend(v4, "compare:options:range:", CFSTR("Versions"), 0, 0, objc_msgSend(v4, "length"));
    result = 0;
    if (!v5)
    {
      v1 = (void *)objc_msgSend(v3, "stringByDeletingLastPathComponent");
      v6 = (void *)objc_msgSend(v1, "pathExtension");
      if (!objc_msgSend(v6, "compare:options:range:", CFSTR("framework"), 0, 0, objc_msgSend(v6, "length"))
        || (v7 = objc_msgSend(v6, "compare:options:range:", CFSTR("axbundle"), 0, 0, objc_msgSend(v6, "length")),
            result = 0,
            !v7))
      {
LABEL_6:
        memset(&v8, 0, sizeof(v8));
        if (objc_msgSend(v1, "getFileSystemRepresentation:maxLength:", v9, 1024) && !stat(v9, &v8))
        {
          if (access(v9, 4))
          {
            getpid();
            sandbox_check();
          }
          else if ((v8.st_mode & 0xF000) == 0x4000)
          {
            return v1;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t _NSSortFunctionMany(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, char *, _QWORD, _QWORD);
  uint64_t result;
  uint64_t v14;
  uint64_t (**v15)(uint64_t, uint64_t, uint64_t);
  uint64_t (*MethodImplementation)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  objc_class *v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = a3[4];
  if (v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = *a1;
    v8 = *a2;
    v9 = a3[3];
    v28 = a3[4];
    v29 = *a1;
    v30 = *a2;
    do
    {
      if (v6 >= v9)
      {
        _NSInitializeCacheLine(v6, a3);
        ++v9;
      }
      v10 = *a3;
      v11 = *a3 + v5;
      v12 = *(uint64_t (**)(_QWORD, char *, _QWORD, _QWORD))(v11 + 16);
      if (v12)
      {
        result = v12(*(_QWORD *)(v11 + 8), sel_compareObject_toObject_, *(_QWORD *)(a3[1] + 8 * v7), *(_QWORD *)(a3[1] + 8 * v8));
        if (result)
          return result;
      }
      else
      {
        v14 = *(_QWORD *)(v10 + v5);
        v15 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16 * v7);
        MethodImplementation = *v15;
        if (!*v15)
        {
          v17 = a3[1];
          v18 = *(_QWORD *)(v17 + 8 * v29);
          if (*(_QWORD *)(v10 + v5 + 24))
            v18 = objc_msgSend(*(id *)(v17 + 8 * v29), "valueForKeyPath:");
          if (v18 == objc_msgSend(MEMORY[0x1E0C99E38], "null", v28))
            v19 = 0;
          else
            v19 = v18;
          if (v19)
          {
            v20 = v10 + v5;
            if (*(_QWORD *)(v10 + v5 + 40))
            {
              v21 = (objc_class *)objc_opt_class();
              MethodImplementation = (uint64_t (*)(uint64_t, uint64_t, uint64_t))class_getMethodImplementation(v21, *(SEL *)(v20 + 40));
            }
            else
            {
              MethodImplementation = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 + 8) + 32);
            }
          }
          else
          {
            MethodImplementation = _NSNullCompare;
          }
          *v15 = MethodImplementation;
          *(_QWORD *)(v14 + 16 * v29 + 8) = v19;
          v8 = v30;
        }
        v22 = (_QWORD *)(v14 + 16 * v8);
        if (*v22)
        {
          v23 = (void *)v22[1];
        }
        else
        {
          v23 = *(void **)(a3[1] + 8 * v8);
          if (*(_QWORD *)(v10 + v5 + 24))
            v23 = (void *)objc_msgSend(v23, "valueForKeyPath:");
          if (v23 == (void *)objc_msgSend(MEMORY[0x1E0C99E38], "null", v28))
            v23 = 0;
          if (v23)
          {
            v24 = v10 + v5;
            if (*(_QWORD *)(v10 + v5 + 40))
            {
              v25 = (objc_class *)objc_opt_class();
              v26 = class_getMethodImplementation(v25, *(SEL *)(v24 + 40));
            }
            else
            {
              v26 = *(void **)(*(_QWORD *)(v24 + 8) + 32);
            }
          }
          else
          {
            v26 = _NSNullCompare;
          }
          v3 = v28;
          *v22 = v26;
          *(_QWORD *)(v14 + 16 * v30 + 8) = v23;
        }
        v7 = v29;
        v27 = (uint64_t *)(v10 + v5 + 40);
        if (MethodImplementation == _NSNullCompare)
          v27 = (uint64_t *)&selRef_compare_;
        result = _NSCompareObject(*(_QWORD *)(v14 + 16 * v29 + 8), (uint64_t)v23, (uint64_t)MethodImplementation, *v27, *(unsigned __int8 *)(v10 + v5 + 32), *(unsigned __int8 *)(v10 + v5 + 33));
        v8 = v30;
        if (result)
          return result;
      }
      ++v6;
      v5 += 48;
    }
    while (v3 != v6);
  }
  return 0;
}

uint64_t _NSCompareObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (a1 == a2)
    return 0;
  if (a1)
  {
    if (a2)
    {
      if (a4)
        result = ((uint64_t (*)(uint64_t, uint64_t))a3)(a1, a4);
      else
        result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
      if (!a5)
        return -result;
    }
    else
    {
      v9 = 1;
      if (((a5 ^ 1) & a6) == 0)
        v9 = -1;
      if (a5 ^ 1 | a6)
        return v9;
      else
        return 1;
    }
  }
  else
  {
    v8 = -1;
    if (((a5 ^ 1) & a6) == 0)
      v8 = 1;
    if (a5 ^ 1 | a6)
      return v8;
    else
      return -1;
  }
  return result;
}

unint64_t URL.pathComponents.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  id v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t isStackAllocationSafe;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  BOOL v103;
  uint64_t v104;
  unint64_t v106;
  void *v107;
  uint64_t countAndFlagsBits;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  Swift::String v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    v123 = v2;
    v3 = URL.path(percentEncoded:)(1);
    object = v3._object;
    v5 = 0xE100000000000000;
    v121 = 47;
    v122 = 0xE100000000000000;
    v120 = v3;
    countAndFlagsBits = v3._countAndFlagsBits;
    if (((uint64_t)v3._object & 0x1000000000000000) != 0)
    {
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v42 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      StringProtocol._ephemeralString.getter();
      v43 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v44 = objc_msgSend(v42, sel_componentsSeparatedByString_, v43);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (!v44)
      {
        v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        goto LABEL_47;
      }
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v45 = swift_dynamicCastClass();
      if (v45)
      {
        v17 = (_QWORD *)v45;

        goto LABEL_47;
      }
      swift_unknownObjectRelease();
      objc_msgSend(v44, sel_copy);
      v47 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v17 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v47);

    }
    else
    {
      swift_bridgeObjectRetain();
      v107 = v3._object;
      v6 = String.subscript.getter();
      v8 = v7;
      v116 = v9;
      v117 = v10;
      v113 = _stringCompareInternal(_:_:_:_:expecting:)();
      v118 = 47;
      v119 = 0xE100000000000000;
      v11 = Substring.init<A>(_:)();
      v112 = v13;
      v114 = v14;
      v115 = v8;
      v15 = (unint64_t *)(v8 >> 14);
      v16 = v6 >> 14;
      if (v6 >> 14 >= v8 >> 14)
      {
        v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        goto LABEL_41;
      }
      v109 = v12;
      v110 = v11;
      v111 = v11 ^ v12;
      v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v106 = v6 >> 14;
      v18 = v6 >> 14;
      while (1)
      {
        if ((unint64_t)v15 < v18)
          goto LABEL_125;
        swift_bridgeObjectRetain();
        v19 = v6;
        v5 = Substring.subscript.getter();
        v21 = v20;
        v23 = v22;
        v25 = v24;
        swift_bridgeObjectRelease();
        if ((v5 ^ v21) < 0x4000 || v111 < 0x4000)
          break;
        if ((v113 & 1) != 0)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v5 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v110, v109, v112, v114, 0, 0, 0, 0, 0, v5, v21, v23, v25);
          v27 = v26;
          v29 = v28;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v5 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v110, v109, v112, v114, 0, 0, 0, 0, 0, v5, v21, v23, v25);
          v27 = v30;
          v29 = v31;
        }
        swift_bridgeObjectRelease();
        if ((v29 & 1) != 0)
        {
          v16 = v18;
          goto LABEL_41;
        }
        v16 = v27 >> 14;
        if (v5 >> 14 == v27 >> 14)
        {
          v16 = v18;
          goto LABEL_41;
        }
        if (v5 >> 14 < v18)
          goto LABEL_126;
        v32 = Substring.subscript.getter();
        v33 = MEMORY[0x186DA4634](v32);
        v5 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        v36 = v17[2];
        v35 = v17[3];
        if (v36 >= v35 >> 1)
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v17);
        v17[2] = v36 + 1;
        v37 = &v17[2 * v36];
        v37[4] = v33;
        v37[5] = v5;
        swift_bridgeObjectRelease();
        v18 = v27 >> 14;
        v6 = v19;
        if (v16 >= (unint64_t)v15)
          goto LABEL_41;
      }
      if ((v5 ^ v21) < 0x4000)
      {
        v16 = v18;
      }
      else
      {
        v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v16 = v106;
      }
      swift_bridgeObjectRelease();
LABEL_41:
      if ((unint64_t)v15 < v16)
        goto LABEL_127;
      v48 = Substring.subscript.getter();
      v5 = MEMORY[0x186DA4634](v48);
      v15 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_128:
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      object = v107;
      v51 = v17[2];
      v50 = v17[3];
      if (v51 >= v50 >> 1)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v50 > 1), v51 + 1, 1, v17);
      v17[2] = v51 + 1;
      v52 = &v17[2 * v51];
      v52[4] = v5;
      v52[5] = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_47:
    v53 = v17[2];
    v54 = (unint64_t *)MEMORY[0x1E0DEE9D8];
    if (v53)
    {
      v55 = v17 + 5;
      v56 = MEMORY[0x1E0DEE9D8];
      do
      {
        v61 = *(v55 - 1);
        v60 = *v55;
        v62 = HIBYTE(*v55) & 0xF;
        if ((*v55 & 0x2000000000000000) == 0)
          v62 = v61 & 0xFFFFFFFFFFFFLL;
        if (v62)
        {
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v121 = v56;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v56 + 16) + 1, 1);
            v56 = v121;
          }
          v58 = *(_QWORD *)(v56 + 16);
          v57 = *(_QWORD *)(v56 + 24);
          if (v58 >= v57 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
            v56 = v121;
          }
          *(_QWORD *)(v56 + 16) = v58 + 1;
          v59 = v56 + 16 * v58;
          *(_QWORD *)(v59 + 32) = v61;
          *(_QWORD *)(v59 + 40) = v60;
        }
        v55 += 2;
        --v53;
      }
      while (v53);
    }
    else
    {
      v56 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    v121 = v56;
    swift_bridgeObjectRetain();
    v64 = countAndFlagsBits;
    v65 = specialized Collection.first.getter(countAndFlagsBits, (unint64_t)object);
    v67 = v66;
    swift_bridgeObjectRelease();
    if (v67)
    {
      if (v65 == 47 && v67 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v68 & 1) == 0)
          goto LABEL_65;
      }
      specialized Array.replaceSubrange<A>(_:with:)(0, 0, 47, 0xE100000000000000);
    }
LABEL_65:
    swift_bridgeObjectRetain();
    v69 = specialized BidirectionalCollection.last.getter(v64, (unint64_t)object);
    v71 = v70;
    swift_bridgeObjectRelease();
    if (v71)
    {
      if (v69 == 47 && v71 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v72 & 1) == 0)
          goto LABEL_75;
      }
      if (String.count.getter() > 1)
      {
        v41 = v121;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_131;
        while (1)
        {
          v74 = *(_QWORD *)(v41 + 16);
          v73 = *(_QWORD *)(v41 + 24);
          if (v74 >= v73 >> 1)
            v41 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v73 > 1), v74 + 1, 1, (_QWORD *)v41);
          *(_QWORD *)(v41 + 16) = v74 + 1;
          v75 = v41 + 16 * v74;
          *(_QWORD *)(v75 + 32) = 47;
          *(_QWORD *)(v75 + 40) = 0xE100000000000000;
          swift_bridgeObjectRelease_n();
          v121 = v41;
LABEL_76:
          v76 = v121;
          v17 = *(_QWORD **)(v121 + 16);
          if (v17)
            break;
          swift_bridgeObjectRelease();
          v41 = MEMORY[0x1E0DEE9D8];
LABEL_113:
          v101 = *(_QWORD *)(v41 + 16);
          if (v101 < 2)
            return v41;
          v102 = v41 + 16 * v101;
          v103 = *(_QWORD *)(v102 + 16) == 47 && *(_QWORD *)(v102 + 24) == 0xE100000000000000;
          if (!v103 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return v41;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v104 = *(_QWORD *)(v41 + 16);
            if (v104)
              goto LABEL_121;
          }
          else
          {
            v41 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v41);
            v104 = *(_QWORD *)(v41 + 16);
            if (v104)
            {
LABEL_121:
              *(_QWORD *)(v41 + 16) = v104 - 1;
LABEL_122:
              swift_bridgeObjectRelease();
              return v41;
            }
          }
          __break(1u);
LABEL_131:
          v41 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v41 + 16) + 1, 1, (_QWORD *)v41);
        }
        v120._countAndFlagsBits = (uint64_t)v54;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v17, 0);
        v5 = 0;
        v117 = v76;
        v15 = (unint64_t *)(v76 + 40);
        while (1)
        {
          v77 = *(v15 - 1);
          v41 = *v15;
          v78 = HIBYTE(*v15) & 0xF;
          v79 = v77 & 0xFFFFFFFFFFFFLL;
          if ((*v15 & 0x2000000000000000) != 0)
            v80 = HIBYTE(*v15) & 0xF;
          else
            v80 = v77 & 0xFFFFFFFFFFFFLL;
          if (!v80)
          {
LABEL_98:
            v88 = 0;
            v89 = 0xE000000000000000;
            goto LABEL_99;
          }
          if ((v41 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain();
            v80 = String.UTF8View._foreignCount()();
            if (v80 < 0)
            {
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
              goto LABEL_128;
            }
            goto LABEL_92;
          }
          if ((v41 & 0x2000000000000000) != 0)
          {
            v121 = *(v15 - 1);
            v122 = v41 & 0xFFFFFFFFFFFFFFLL;
            v86 = swift_bridgeObjectRetain();
            v54 = &v106;
            MEMORY[0x1E0C80A78](v86);
            v84 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)&v106 - v87, (unsigned __int8 *)&v121, v78, MEMORY[0x1E0DEE9E8], (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
          }
          else
          {
            if ((v77 & 0x1000000000000000) != 0)
            {
              v81 = (unsigned __int8 *)((v41 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else
            {
              v81 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
              v79 = v100;
              if (v100 < 0)
              {
                __break(1u);
LABEL_111:
                swift_bridgeObjectRelease();
                goto LABEL_113;
              }
            }
            isStackAllocationSafe = swift_bridgeObjectRetain();
            if (v79 >= 1025)
            {
              isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
              if ((isStackAllocationSafe & 1) == 0)
              {
                v98 = swift_slowAlloc();
                v88 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v98, v81, v79, MEMORY[0x1E0DEE9E8], (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
                v89 = v99;
                MEMORY[0x186DA9E78](v98, -1, -1);
                if (v89 != 1)
                  goto LABEL_97;
                goto LABEL_91;
              }
            }
            MEMORY[0x1E0C80A78](isStackAllocationSafe);
            v84 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)&v106 - v83, v81, v79, MEMORY[0x1E0DEE9E8], (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
          }
          v88 = v84;
          v89 = v85;
          if (v85 != 1)
            goto LABEL_97;
LABEL_91:
          if (v80 < 0)
            goto LABEL_124;
LABEL_92:
          v90 = swift_bridgeObjectRetain();
          if (v80 < 1025 || (v90 = swift_stdlib_isStackAllocationSafe(), (v90 & 1) != 0))
          {
            MEMORY[0x1E0C80A78](v90);
            v88 = (uint64_t)specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)&v106 - v91, v77, v41, MEMORY[0x1E0DEE9E8]);
            v89 = v92;
          }
          else
          {
            v93 = swift_slowAlloc();
            v88 = (uint64_t)specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v93, v77, v41, MEMORY[0x1E0DEE9E8]);
            v89 = v94;
            MEMORY[0x186DA9E78](v93, -1, -1);
          }
          swift_bridgeObjectRelease();
LABEL_97:
          swift_bridgeObjectRelease();
          if (!v89)
            goto LABEL_98;
LABEL_99:
          v41 = v120._countAndFlagsBits;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v41 + 16) + 1, 1);
            v41 = v120._countAndFlagsBits;
          }
          v96 = *(_QWORD *)(v41 + 16);
          v95 = *(_QWORD *)(v41 + 24);
          if (v96 >= v95 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1);
            v41 = v120._countAndFlagsBits;
          }
          v15 += 2;
          *(_QWORD *)(v41 + 16) = v96 + 1;
          v97 = v41 + 16 * v96;
          *(_QWORD *)(v97 + 32) = v88;
          *(_QWORD *)(v97 + 40) = v89;
          v17 = (_QWORD *)((char *)v17 - 1);
          if (!v17)
            goto LABEL_111;
        }
      }
    }
LABEL_75:
    swift_bridgeObjectRelease_n();
    goto LABEL_76;
  }
  v38 = objc_msgSend(v1, sel_pathComponents);
  if (!v38)
    return MEMORY[0x1E0DEE9D8];
  v39 = v38;
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v40 = swift_dynamicCastClass();
  if (!v40)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v39, sel_copy);
    v46 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v41 = specialized _arrayForceCast<A, B>(_:)(v46);

    goto LABEL_122;
  }
  v41 = v40;

  return v41;
}

uint64_t _NSOpenFileDescriptor_Protected(char *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  NSString *v11;
  const char *v12;
  int v13;
  int v14;
  uint64_t v16;
  statfs v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = (a3 & 0xF0000000) - 0x10000000;
  if (v7 >> 28 >= 5)
  {
    v11 = -[NSString stringByDeletingLastPathComponent](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1), "stringByDeletingLastPathComponent");
    if (!-[NSString length](v11, "length"))
      v11 = -[NSFileManager currentDirectoryPath](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "currentDirectoryPath");
    v12 = -[NSString fileSystemRepresentation](v11, "fileSystemRepresentation");
    if (!v12)
      return open(a1, a2, a4);
    v16 = 0;
    v17.f_blocks = 0;
    v17.f_bfree = 0;
    v17.f_bsize = 5;
    v17.f_iosize = 0x40000000;
    v13 = getattrlist(v12, &v17, &v16, 8uLL, 1u);
    v8 = HIDWORD(v16);
    v14 = v13 ? -1 : HIDWORD(v16);
    if ((v14 + 1) < 2)
      return open(a1, a2, a4);
  }
  else
  {
    v8 = *(_DWORD *)((char *)&unk_18227E628 + (v7 >> 26));
  }
  v9 = open_dprotected_np(a1, a2, v8, 0, a4);
  v10 = *__error();
  if ((_DWORD)v9 != -1 || v10 != 45)
  {
    *__error() = v10;
    return v9;
  }
  memset(&v17, 0, 512);
  if (!statfs(a1, &v17) && (v17.f_flags & 0x80) != 0)
  {
    *__error() = 45;
    return 0xFFFFFFFFLL;
  }
  *__error() = 45;
  return open(a1, a2, a4);
}

void *_attributesAtPath(const char *a1, char a2, NSError **a3)
{
  ssize_t v6;
  size_t v7;
  char *v8;
  ssize_t v9;
  ssize_t v10;
  void *v11;
  void *v12;
  const char *v13;
  NSString *v14;
  NSString *v15;
  const char *v16;
  id v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  ssize_t v26;
  size_t v27;
  void *v28;
  ssize_t v29;
  uint64_t v30;
  uint64_t v31;
  NSError **v32;

  v6 = listxattr(a1, 0, 0, 1);
  if (v6 < 1)
  {
    v8 = 0;
LABEL_21:
    v11 = 0;
    goto LABEL_22;
  }
  v7 = v6;
  v8 = (char *)malloc_type_malloc(v6, 0x33EE517DuLL);
  if (!v8)
    goto LABEL_21;
  v9 = listxattr(a1, v8, v7, 1);
  if (v9 < 1)
    goto LABEL_21;
  v10 = v9;
  v32 = a3;
  v11 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 3);
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 4);
  if (v10 << 32 >= 1)
  {
    v13 = v8;
    do
    {
      if (!strcmp(v13, "com.apple.ResourceFork") && (a2 & 1) != 0
        || !strcmp(v13, "com.apple.FinderInfo")
        || !strcmp(v13, "system.Security"))
      {
        v16 = v13 - 1;
        while (*(unsigned __int8 *)++v16)
          ;
      }
      else
      {
        v14 = -[NSString initWithUTF8String:]([NSString alloc], "initWithUTF8String:", v13);
        if (v14)
        {
          v15 = v14;
          objc_msgSend(v12, "addObject:", v14);

        }
        v16 = v13 - 1;
        while (*(unsigned __int8 *)++v16)
          ;
      }
      v13 = v16 + 1;
    }
    while (v16 + 1 < &v8[(int)v10]);
  }
  if (objc_msgSend(v12, "count"))
  {
    v19 = v12;
  }
  else
  {

    v12 = 0;
  }
  v21 = objc_msgSend(v12, "count");
  if (v21 >= 1)
  {
    v22 = 0;
    v23 = v21;
    do
    {
      v24 = (void *)objc_msgSend(v12, "objectAtIndex:", v22);
      v25 = (const char *)objc_msgSend(v24, "UTF8String");
      v26 = getxattr(a1, v25, 0, 0, 0, 1);
      if (v26 >= 1)
      {
        v27 = v26;
        v28 = malloc_type_malloc(v26, 0x47164B52uLL);
        v29 = getxattr(a1, v25, v28, v27, 0, 1);
        if (v29 == -1)
        {
          if (v32)
          {
            v31 = *__error();
            *v32 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(v31, (uint64_t)+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1), 1, 0, 0);
          }
          free(v28);
        }
        else
        {
          v30 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v28, v29, 1);
          if (v30)
            objc_msgSend(v11, "setObject:forKey:", v30, v24);
        }
      }
      ++v22;
    }
    while (v23 != v22);
  }
LABEL_22:
  free(v8);
  if (objc_msgSend(v11, "count"))
    return v11;
  else
    return 0;
}

void sub_1817F7BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _NSDataCreateDispatchDataFromData(void *a1, char a2)
{
  uint64_t v2;
  _QWORD v4[6];
  char v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7 = &v6;
  v8 = 0x3052000000;
  v9 = __Block_byref_object_copy__1;
  v10 = __Block_byref_object_dispose__1;
  v11 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___NSDataCreateDispatchDataFromData_block_invoke;
  v4[3] = &unk_1E0F4D300;
  v5 = a2;
  v4[4] = a1;
  v4[5] = &v6;
  objc_msgSend(a1, "enumerateByteRangesUsingBlock:", v4);
  v2 = v7[5];
  if (!v2)
  {
    v2 = MEMORY[0x1E0C80D00];
    v7[5] = MEMORY[0x1E0C80D00];
  }
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_1817F7CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1817F825C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 136), 8);
  _Block_object_dispose((const void *)(v26 - 104), 8);
  _Unwind_Resume(a1);
}

void *_NSCleanupTemporaryDirectory(void *result)
{
  void *v1;

  if (result)
  {
    v1 = result;
    result = (void *)rmdir((const char *)objc_msgSend(result, "fileSystemRepresentation"));
    if ((_DWORD)result)
      return (void *)-[NSFileManager removeItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtPath:error:", v1, 0);
  }
  return result;
}

NSError *_NSErrorWithFilePath(uint64_t a1, uint64_t a2)
{
  char isKindOfClass;
  const NSErrorUserInfoKey *v5;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = &NSURLErrorKey;
  if ((isKindOfClass & 1) == 0)
    v5 = &NSFilePathErrorKey;
  return +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), a1, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", a2, *v5, 0));
}

uint64_t _NSWriteExtendedAttributesToFileDescriptor(int a1, void *a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  const char *v13;
  void *v14;
  BOOL v15;
  _BYTE v17[200];
  _BYTE v18[128];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v19, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v20 != v10)
          objc_enumerationMutation(a2);
        v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        v13 = v17;
        if ((objc_msgSend(v12, "getCString:maxLength:encoding:", v17, 200, 4) & 1) == 0)
          v13 = (const char *)objc_msgSend(v12, "UTF8String");
        v14 = (void *)objc_msgSend(a2, "objectForKey:", v12);
        if (fsetxattr(a1, v13, (const void *)objc_msgSend(v14, "bytes"), objc_msgSend(v14, "length"), 0, 0))
          v15 = a3 == 0;
        else
          v15 = 1;
        if (!v15)
        {
          if (a4)
            *a4 = *__error();
          return 0;
        }
      }
      v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v19, v18, 16);
      if (v9)
        continue;
      break;
    }
  }
  return 1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return String.LocalizationValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue(_QWORD *a1)
{
  return String.LocalizationValue.encode(to:)(a1);
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("{{%.*g, %.*g}, {%.*g, %.*g}}"), 17, *(_QWORD *)&aRect.origin.x, 17, *(_QWORD *)&aRect.origin.y, 17, *(_QWORD *)&aRect.size.width, 17, *(_QWORD *)&aRect.size.height);
}

void sub_1817F8D58(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void setProtocolMetadata(Protocol *a1, uint64_t a2)
{
  Protocol **v4;
  Protocol **v5;
  unint64_t v6;
  uint64_t v7;
  Protocol *v8;
  objc_method_description *v9;
  objc_method_description *v10;
  objc_method_description *v11;
  objc_method_description *v12;
  unsigned int outCount;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    outCount = 0;
    v4 = protocol_copyProtocolList(a1, &outCount);
    if (v4)
    {
      v5 = v4;
      if (outCount)
      {
        v6 = 0;
        v7 = _MergedGlobals_156;
        do
        {
          if (v7 != -1)
            dispatch_once(&_MergedGlobals_156, &__block_literal_global_88);
          v8 = v5[v6];
          if (v8 == (Protocol *)qword_1ECD0A8F0)
          {
            v7 = -1;
          }
          else
          {
            setProtocolMetadata(v8, a2);
            v7 = _MergedGlobals_156;
          }
          ++v6;
        }
        while (v6 < outCount);
      }
      free(v5);
    }
    v9 = protocol_copyMethodDescriptionList(a1, 1, 1, &outCount);
    if (v9)
    {
      v10 = v9;
      setProtocolMetdataWithMethods(a1, a2, (uint64_t)v9, outCount);
      free(v10);
    }
    v11 = protocol_copyMethodDescriptionList(a1, 0, 1, &outCount);
    if (v11)
    {
      v12 = v11;
      setProtocolMetdataWithMethods(a1, a2, (uint64_t)v11, outCount);
      free(v12);
    }
  }
}

uint64_t setProtocolContextFlush(uint64_t result)
{
  uint64_t v1;

  if (*(_DWORD *)(result + 8))
  {
    v1 = result;
    result = class_addMethodsBulk();
    *(_DWORD *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t String.LocalizationValue.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[2];
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.CodingKeys>);
  v13 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[1] = *v1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v16 = static LocaleCache.cache;
  v6 = LocaleCache.current.getter();
  v12[0] = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  v8 = v14;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v3);
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
    v10 = swift_bridgeObjectRetain();
    v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJ14CodableStorageOs5NeverOTg506_sSS10d3E17ef90V6encode33_6BD3BCCACE0AF34AB8D7E61AF16B41642to14fallbackLocaleys7Encoder_p_AA0O0VtKFAC14gh3V14iJ8OALXEfU_AF6LocaleVTf1cn_nTf4ng_n(v10, v6, v12[0]);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    v16 = v11;
    v15 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String.LocalizationValue.FormatArgument.CodableStorage]);
    lazy protocol witness table accessor for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A](&lazy protocol witness table cache variable for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A], &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage and conformance String.LocalizationValue.FormatArgument.CodableStorage, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage, MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v3);
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

char *String.init(format:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;

  swift_bridgeObjectRetain();
  v6 = specialized withVaList<A>(_:_:)(a3, a1, a2, 0, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

char *specialized withVaList<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *result;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  type metadata accessor for __VaListBuilder();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 8;
  v6[3] = 0;
  v7 = v6 + 3;
  v6[4] = 0;
  v6[5] = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_25:
    v26 = __VaListBuilder.va_list()();
    if (a4)
    {
      *((_QWORD *)&v34 + 1) = &type metadata for Locale;
      *(_QWORD *)&v33 = a4;
      *((_QWORD *)&v33 + 1) = a5;
    }
    else
    {
      v33 = 0u;
      v34 = 0u;
    }
    type metadata accessor for NSString();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v27 = NSString.__allocating_init(format:locale:arguments:)(a2, a3, &v33, v26);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    swift_release();

    return (char *)v28;
  }
  v9 = 0;
  v10 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v10 + 40 * v9, (uint64_t)&v33);
    v11 = *((_QWORD *)&v34 + 1);
    v12 = v35;
    __swift_project_boxed_opaque_existential_1(&v33, *((uint64_t *)&v34 + 1));
    result = (char *)MEMORY[0x186DA5FA8](v11, v12);
    v14 = *v7;
    v15 = *((_QWORD *)result + 2);
    v16 = __OFADD__(*v7, v15);
    v17 = *v7 + v15;
    if (v16)
      break;
    v18 = result;
    v19 = v6[4];
    if (v19 >= v17)
      goto LABEL_18;
    if (v19 + 0x4000000000000000 < 0)
      goto LABEL_31;
    v20 = (char *)v6[5];
    if (2 * v19 > v17)
      v17 = 2 * v19;
    v6[4] = v17;
    if ((unint64_t)(v17 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_32;
    result = (char *)swift_slowAlloc();
    v6[5] = result;
    if (v20)
    {
      if (result != v20 || result >= &v20[8 * v14])
        memmove(result, v20, 8 * v14);
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      result = (char *)v6[5];
    }
    if (!result)
      goto LABEL_33;
    v22 = *((_QWORD *)v18 + 2);
    if (v22)
    {
      v23 = (uint64_t *)(v18 + 32);
      v24 = *v7;
      while (1)
      {
        v25 = *v23++;
        *(_QWORD *)&result[8 * v24] = v25;
        v24 = *v7 + 1;
        if (__OFADD__(*v7, 1))
          break;
        *v7 = v24;
        if (!--v22)
          goto LABEL_3;
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v9;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    if (v9 == v8)
      goto LABEL_25;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *result;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t ObjectType;
  void *v30;
  id v31;
  id v32;
  id v33;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  type metadata accessor for __VaListBuilder();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 8;
  v6[3] = 0;
  v7 = v6 + 3;
  v6[4] = 0;
  v6[5] = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_25:
    v26 = __VaListBuilder.va_list()();
    v27 = (void *)objc_opt_self();
    v28 = String._bridgeToObjectiveCImpl()();
    ObjectType = swift_getObjectType();
    v30 = (void *)(*(uint64_t (**)(uint64_t))(a5 + 496))(ObjectType);
    v31 = String.LocalizationOptions._nsOptions.getter();
    v32 = objc_msgSend(v27, sel__stringWithFormat_locale_options_arguments_, v28, v30, v31, v26);
    swift_unknownObjectRelease();

    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    swift_release();

    return (char *)v33;
  }
  v9 = 0;
  v10 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v10 + 40 * v9, (uint64_t)v35);
    v11 = v36;
    v12 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    result = (char *)MEMORY[0x186DA5FA8](v11, v12);
    v14 = *v7;
    v15 = *((_QWORD *)result + 2);
    v16 = __OFADD__(*v7, v15);
    v17 = *v7 + v15;
    if (v16)
      break;
    v18 = result;
    v19 = v6[4];
    if (v19 >= v17)
      goto LABEL_18;
    if (v19 + 0x4000000000000000 < 0)
      goto LABEL_28;
    v20 = (char *)v6[5];
    if (2 * v19 > v17)
      v17 = 2 * v19;
    v6[4] = v17;
    if ((unint64_t)(v17 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_29;
    result = (char *)swift_slowAlloc();
    v6[5] = result;
    if (v20)
    {
      if (result != v20 || result >= &v20[8 * v14])
        memmove(result, v20, 8 * v14);
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      result = (char *)v6[5];
    }
    if (!result)
      goto LABEL_30;
    v22 = *((_QWORD *)v18 + 2);
    if (v22)
    {
      v23 = (uint64_t *)(v18 + 32);
      v24 = *v7;
      while (1)
      {
        v25 = *v23++;
        *(_QWORD *)&result[8 * v24] = v25;
        v24 = *v7 + 1;
        if (__OFADD__(*v7, 1))
          break;
        *v7 = v24;
        if (!--v22)
          goto LABEL_3;
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v9;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    if (v9 == v8)
      goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

uint64_t protocol witness for CVarArg._cVarArgEncoding.getter in conformance String()
{
  return specialized CVarArg<>._cVarArgEncoding.getter();
}

id NSString.__allocating_init(format:locale:arguments:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v16;

  v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v7 = a3[3];
  if (v7)
  {
    v8 = __swift_project_boxed_opaque_existential_1(a3, a3[3]);
    v9 = *(_QWORD *)(v7 - 8);
    v10 = MEMORY[0x1E0C80A78](v8);
    v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v9 + 16))(v12, v10);
    v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  }
  else
  {
    v13 = 0;
  }
  v14 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFormat_locale_arguments_, v6, v13, a4);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v14;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.CodingKeys, &unk_1E0F32AC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.CodingKeys, &unk_1E0F32AC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.CodingKeys, &unk_1E0F32AC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String.LocalizationValue.CodingKeys, &unk_1E0F32AC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String.LocalizationValue.FormatArgument.CodableStorage]);
    v10 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(a2, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage, a3);
    result = MEMORY[0x186DA9D64](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.CodableStorage);
}

uint64_t String.LocalizationValue.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _BYTE *v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE v104[88];
  uint64_t v105;
  uint64_t v106;

  v91 = a2;
  v85 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  v92 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v84 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v95 = (char *)&v60 - v5;
  MEMORY[0x1E0C80A78](v6);
  v94 = (char *)&v60 - v7;
  v77 = v8;
  MEMORY[0x1E0C80A78](v9);
  v90 = (char *)&v60 - v10;
  v83 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
  v98 = *(_QWORD *)(v83 - 8);
  v11 = *(_QWORD *)(v98 + 64);
  MEMORY[0x1E0C80A78](v83);
  v82 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v81 = (char *)&v60 - v13;
  MEMORY[0x1E0C80A78](v14);
  v89 = (char *)&v60 - v15;
  MEMORY[0x1E0C80A78](v16);
  v88 = (char *)&v60 - v17;
  v80 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
  v97 = *(_QWORD *)(v80 - 8);
  v18 = *(_QWORD *)(v97 + 64);
  MEMORY[0x1E0C80A78](v80);
  v79 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v78 = (char *)&v60 - v20;
  MEMORY[0x1E0C80A78](v21);
  v87 = (char *)&v60 - v22;
  MEMORY[0x1E0C80A78](v23);
  v86 = (char *)&v60 - v24;
  v96 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  v76 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v93 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v99 = (uint64_t)&v60 - v27;
  MEMORY[0x1E0C80A78](v28);
  v101 = (uint64_t)&v60 - v29;
  v100 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.CodingKeys>);
  v30 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v32 = (char *)&v60 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys();
  v33 = v106;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v33)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v75 = a1;
  v72 = v18;
  v73 = v11;
  v106 = v30;
  LOBYTE(v102) = 0;
  v34 = v100;
  v36 = KeyedDecodingContainer.decode(_:forKey:)();
  v38 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String.LocalizationValue.FormatArgument.CodableStorage]);
  v104[64] = 1;
  lazy protocol witness table accessor for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A](&lazy protocol witness table cache variable for type [String.LocalizationValue.FormatArgument.CodableStorage] and conformance <A> [A], &lazy protocol witness table cache variable for type String.LocalizationValue.FormatArgument.CodableStorage and conformance String.LocalizationValue.FormatArgument.CodableStorage, (uint64_t)&protocol conformance descriptor for String.LocalizationValue.FormatArgument.CodableStorage, MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (!*(_QWORD *)(v102 + 16))
  {
    v47 = MEMORY[0x1E0DEE9D8];
    v48 = v106;
LABEL_15:
    (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v59 = v91;
    *v91 = v47;
    v59[1] = v36;
    v59[2] = v38;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v69 = v36;
  v70 = v32;
  v68 = v102;
  v39 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOG_SSs5NeverOTg506_sSS10d3E17ef31V4fromACs7Decoder_p_tKcfcSSAC14gh3V14iJ54Ocfu_33_3c0eda9a63dc724d562b3e4a722c2209AISSTf3nnnpk_nTf1cn_n(v102);
  v74 = 0;
  v40 = *(_QWORD *)(v39 + 16);
  v67 = v38;
  if (v40)
  {
    swift_bridgeObjectRetain();
    v41 = 0;
    v42 = (void **)(v39 + 40);
    v43 = 0xE000000000000000;
    do
    {
      v44 = (uint64_t)*(v42 - 1);
      v45 = *v42;
      v102 = v41;
      v103 = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46._countAndFlagsBits = v44;
      v46._object = v45;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v41 = v102;
      v43 = v103;
      v42 += 2;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
    v34 = v100;
  }
  swift_bridgeObjectRelease();
  v49 = v70;
  KeyedDecodingContainer.codingPath.getter();
  v50 = v74;
  _assertValidDecodedFormat(_:validFormatSpecifiers:codingPath:)();
  v66 = v50;
  if (!v50)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v51 = v68;
    v52 = *(_QWORD *)(v68 + 16);
    v47 = MEMORY[0x1E0DEE9D8];
    if (v52)
    {
      v105 = MEMORY[0x1E0DEE9D8];
      v74 = v52;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52, 0);
      v53 = v51 + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
      v54 = (uint64_t)v93;
      v63 = v77 + 3;
      v64 = v93 + 8;
      v65 = v104;
      v61 = v72 + 7;
      v62 = v73 + 7;
      v71 = *(_QWORD *)(v76 + 72);
      *(_QWORD *)&v55 = &type metadata for Date;
      v60 = v55;
      v77 = v53;
      v56 = v101;
      outlined init with copy of ICUNumberFormatter.Signature(v53, v101, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      v57 = v99;
      outlined init with copy of ICUNumberFormatter.Signature(v56, v99, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      outlined init with copy of ICUNumberFormatter.Signature(v57, v54, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      v58 = (char *)&loc_1817FA94C + 4 * algn_182150A02[swift_getEnumCaseMultiPayload()];
      __asm { BR              X9 }
    }
    v38 = v67;
    v48 = v106;
    v36 = v69;
    v32 = v70;
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t))(v106 + 8))(v49, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
}

uint64_t lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x186DA9D64](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  id *v1;
  id v2;

  v2 = *v1;
}

ValueMetadata *type metadata accessor for Locale.Language()
{
  return &type metadata for Locale.Language;
}

double Date.timeIntervalSinceReferenceDate.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void protocol witness for SingleValueDecodingContainer.decode(_:) in conformance JSONDecoderImpl()
{
  specialized JSONDecoderImpl.decode(_:)();
}

void specialized JSONDecoderImpl.decode(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 24 * v2;
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
    v6 = *(_QWORD *)(v0 + 160);
    v7 = *(_BYTE *)(v3 + 24);
    swift_retain();
    specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v4, v5, v7, v6, 0, 0, 0, 255);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    if ((*(_BYTE *)(v1 + 24 * v2 + 24) & 0xE0) == 0x40)
      return;
    v3 = *(_QWORD *)(v0 + 160);
    swift_retain();
    _CodingPathNode.path.getter(v3);
    swift_release();
    v4 = *(_QWORD *)(v0 + 16);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = *(_BYTE *)(v4 + 24 * v5 + 24);
      type metadata accessor for DecodingError();
      swift_allocError();
      JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E0DEAFA0], v6, v7);
      swift_bridgeObjectRelease();
      swift_willThrow();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t getEnumTagSinglePayload for DateComponents(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 282))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

void sub_1817FC228(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_1817FC994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  free(v1);
  free(v2);
  _Unwind_Resume(a1);
}

void sub_1817FCD44(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_1817FD0E4(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  id v3;

  if (a2)
  {
    if (a2 == 2)
    {
      v3 = objc_begin_catch(exception_object);
      objc_exception_throw(v3);
    }
    objc_begin_catch(exception_object);
    free(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1817FD6EC()
{
  __break(1u);
}

void sub_1817FD768(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x1817FD744);
  }
  JUMPOUT(0x1817FD798);
}

id *_NSKeyValueObservationInfoCreateByAdding(NSKeyValueObservationInfo *a1, NSObject *a2, NSKeyValueProperty *a3, uint64_t a4, void *a5, NSObject *a6, _BYTE *a7, _QWORD *a8)
{
  NSPointerFunctions *v15;
  NSKeyValueShareableObservationInfoKey *v16;
  id *v17;
  uint64_t v18;
  id *v19;
  id *v20;
  NSHashTable *v21;
  NSKeyValueShareableObservanceKey *v22;
  char v23;
  NSObject *v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  void *v29;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock_with_options();
  if (!qword_1ECD09C20)
  {
    v15 = -[NSPointerFunctions initWithOptions:]([NSPointerFunctions alloc], "initWithOptions:", 5);
    -[NSPointerFunctions setHashFunction:](v15, "setHashFunction:", NSKeyValueShareableObservationInfoNSHTHash);
    -[NSPointerFunctions setIsEqualFunction:](v15, "setIsEqualFunction:", NSKeyValueShareableObservationInfoNSHTIsEqual);
    qword_1ECD09C20 = -[NSHashTable initWithPointerFunctions:capacity:]([NSHashTable alloc], "initWithPointerFunctions:capacity:", v15, 0);

  }
  if (!qword_1ECD09C28)
    qword_1ECD09C28 = objc_opt_self();
  v16 = (NSKeyValueShareableObservationInfoKey *)qword_1ECD09C30;
  if (!qword_1ECD09C30)
  {
    v16 = objc_alloc_init(NSKeyValueShareableObservationInfoKey);
    qword_1ECD09C30 = (uint64_t)v16;
  }
  v16->_addingNotRemoving = 1;
  v16->_baseObservationInfo = a1;
  v16->_additionObserver = a2;
  v16->_additionProperty = a3;
  v16->_additionOptions = a4 & 0xFFFFFFFFFFFFFFFBLL;
  v16->_additionContext = a5;
  v16->_additionOriginalObservable = a6;
  v17 = (id *)objc_msgSend((id)qword_1ECD09C20, "member:");
  v18 = qword_1ECD09C30;
  *(_QWORD *)(qword_1ECD09C30 + 56) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  if (v17)
  {
    v19 = v17;
    v20 = v17;
    *a7 = 1;
    *a8 = objc_msgSend(v19[1], "lastObject");
  }
  else
  {
    v21 = (NSHashTable *)qword_1ECD09C38;
    if (!qword_1ECD09C38)
    {
      v21 = +[NSHashTable weakObjectsHashTable](NSHashTable, "weakObjectsHashTable");
      qword_1ECD09C38 = (uint64_t)v21;
    }
    v22 = (NSKeyValueShareableObservanceKey *)qword_1ECD09C40;
    if (!qword_1ECD09C40)
    {
      v22 = objc_alloc_init(NSKeyValueShareableObservanceKey);
      qword_1ECD09C40 = (uint64_t)v22;
      v21 = (NSHashTable *)qword_1ECD09C38;
    }
    v22->super._observer = a2;
    v22->super._property = a3;
    v23 = *((_BYTE *)&v22->super + 40) & 0xF0 | a4 & 0xB | 0x20;
    if (!a6)
      v23 = *((_BYTE *)&v22->super + 40) & 0xD0 | a4 & 0xB;
    *((_BYTE *)&v22->super + 40) = v23;
    if (a6)
      v24 = a6;
    else
      v24 = a2;
    v22->super._context = a5;
    v22->super._originalObservableOrUnownedObserver.originalObservable = v24;
    v25 = -[NSHashTable member:](v21, "member:");
    v32[0] = v25;
    v26 = qword_1ECD09C40;
    *(_QWORD *)(qword_1ECD09C40 + 32) = 0;
    *(_QWORD *)(v26 + 8) = 0;
    if (v25)
    {
      v27 = v25;
      v28 = v25;
    }
    else
    {
      v27 = -[NSKeyValueObservance _initWithObserver:property:options:context:originalObservable:]([NSKeyValueObservance alloc], "_initWithObserver:property:options:context:originalObservable:", a2, a3, a4, a5, a6);
      v32[0] = v27;
      if ((v27[40] & 0x40) != 0)
        objc_msgSend((id)qword_1ECD09C38, "addObject:", v27);
    }
    if (a1)
    {
      v19 = -[NSKeyValueObservationInfo _copyByAddingObservance:](a1, "_copyByAddingObservance:", v27);
    }
    else
    {
      v19 = -[NSKeyValueObservationInfo _initWithObservances:count:hashValue:]([NSKeyValueObservationInfo alloc], "_initWithObservances:count:hashValue:", v32, 1, 0);
      v27 = (_BYTE *)v32[0];
    }

    if (*((_BYTE *)v19 + 24))
    {
      v29 = (void *)MEMORY[0x186DA8F78]();
      objc_msgSend((id)qword_1ECD09C20, "addObject:", v19);
      objc_autoreleasePoolPop(v29);
    }
    *a7 = 0;
    *a8 = v32[0];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_100);
  return v19;
}

void *__cdecl NSHashInsertIfAbsent(NSHashTable *table, const void *pointer)
{
  void *v4;

  if (!table)
    NSLog((NSString *)CFSTR("%s: hash table argument is NULL"), "void * _Nullable NSHashInsertIfAbsent(NSHashTable * _Nonnull, const void * _Nullable)");
  if (!pointer)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("*** NSHashInsertIfAbsent(): attempt to insert NULL pointer"), 0));
  v4 = -[NSHashTable getItem:](table, "getItem:", pointer);
  if (!v4)
    -[NSHashTable addObject:](table, "addObject:", pointer);
  return v4;
}

void sub_1817FE6FC()
{
  objc_end_catch();
  JUMPOUT(0x1817FE708);
}

_QWORD *_NSXPCSerializationIterateArrayObject(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v3 = *a2 + 8;
  v4 = *a2 >= 0xFFFFFFFFFFFFFFF8;
  v5 = v4 << 63 >> 63;
  if (v5 == v4 && (v5 & 0x8000000000000000) == 0)
  {
    v6 = result;
    v7 = result[1];
    if (v7 > v3)
    {
      v8 = *(_QWORD *)(*a2 + *result + 1);
      if (v8 != v3)
      {
        v9 = *a2 + 9;
        v10 = v3 == -1;
        v11 = v10 << 63 >> 63;
        v18[0] = v9;
        if (v11 == v10 && (v11 & 0x8000000000000000) == 0 && v7 > v9 && v8 >= v9)
        {
          do
          {
            v16 = v9;
            v17 = 255;
            if (v9 >= v7)
              break;
            LODWORD(v17) = *(_BYTE *)(*v6 + v9) & 0xF0;
            result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t *))(a3 + 16))(a3, &v16);
            if (!(_DWORD)result)
              break;
            result = (_QWORD *)_getLastByteOfValueIncludingMarker(v6, v9, v18);
            v13 = v18[0] + 1;
            v14 = v18[0] == -1;
            v15 = v14 << 63 >> 63;
            ++v18[0];
            if (v15 != v14)
              break;
            if (v15 < 0)
              break;
            if (v9 >= v13)
              break;
            v7 = v6[1];
            if (v7 <= v13)
              break;
            v9 = v13;
          }
          while (v8 >= v13);
        }
      }
    }
  }
  return result;
}

void sub_1817FF068(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

xpc_object_t _NSXPCSerializationCreateWriteData(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  xpc_object_t v7;

  v2 = *(const void **)(a1 + 8224);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 8224) = 0;
  }
  v3 = *(const void **)(a1 + 8232);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 8232) = 0;
  }
  v4 = *(const void **)(a1 + 8240);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 8240) = 0;
  }
  v5 = *(const void **)(a1 + 8216);
  if (*(_BYTE *)(a1 + 8248))
  {
    v6 = dispatch_data_create(v5, *(_QWORD *)(a1 + 8208), 0, (dispatch_block_t)*MEMORY[0x1E0C80CF8]);
    v7 = xpc_data_create_with_dispatch_data(v6);
    dispatch_release(v6);
  }
  else
  {
    v7 = xpc_data_create(v5, *(_QWORD *)(a1 + 8200));
    if (!*(_BYTE *)(a1 + 8249))
      free(*(void **)(a1 + 8216));
  }
  return v7;
}

_QWORD *_NSXPCSerializationAddInvocationWithOnlyObjectArgumentsArray(double *a1, uint64_t a2, _BYTE *a3, uint64_t *a4)
{
  _NSXPCSerializationStartArrayWrite(a4);
  for (; a2; --a2)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      _NSXPCSerializationAddNull((uint64_t)a4);
    else
      _NSXPCSerializationAddTypedObjCValuesToArray(a3, (uint64_t)a4, "@", a1);
    ++a1;
  }
  return _NSXPCSerializationEndArrayWrite(a4);
}

void _NSXPCSerializationAddNull(uint64_t a1)
{
  _reserveSpace(a1, 1);
  *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = -32;
}

_QWORD *_NSXPCSerializationAddInvocationArgumentsArray(void *a1, void *a2, _BYTE *a3, uint64_t *a4, int a5)
{
  uint64_t v5;
  int v10;
  uint64_t v11;
  _WORD *v12;
  _BYTE *v13;
  __int16 v14;
  double v15;
  uint64_t v16;
  double *v17;
  double *v19[2];

  LODWORD(v5) = a5;
  v19[1] = *(double **)MEMORY[0x1E0C80C00];
  v10 = objc_msgSend(a2, "numberOfArguments");
  _NSXPCSerializationStartArrayWrite(a4);
  if (v10 > (int)v5)
  {
    v11 = v10;
    if (v10 > (unint64_t)(int)v5)
    {
      v5 = (int)v5;
      while (1)
      {
        v12 = (_WORD *)objc_msgSend(a2, "_argInfo:", v5);
        v13 = v12;
        v14 = v12[17];
        if ((v14 & 0x80) != 0)
        {
          v13 = *(_BYTE **)v12;
          v14 = *(_WORD *)(*(_QWORD *)v12 + 34);
        }
        if (v14 < 0)
          break;
        if ((v14 & 0x1000) != 0)
        {
          v19[0] = 0;
          objc_msgSend(a1, "getArgument:atIndex:", v19, v5);
          if (!v19[0])
            break;
          _NSXPCSerializationAddTypedObjCValuesToArray(a3, (uint64_t)a4, (_BYTE *)(*(_QWORD *)v13 + 37), v19[0]);
        }
        else
        {
          *(_QWORD *)&v15 = MEMORY[0x1E0C80A78](v12).n128_u64[0];
          v17 = (double *)((char *)v19 - ((v16 + 15) & 0x1FFFFFFF0));
          objc_msgSend(a1, "getArgument:atIndex:", v17, v5, v15);
          _NSXPCSerializationAddTypedObjCValuesToArray(a3, (uint64_t)a4, v13 + 37, v17);
        }
LABEL_12:
        if (v11 == ++v5)
          return _NSXPCSerializationEndArrayWrite(a4);
      }
      _NSXPCSerializationAddNull((uint64_t)a4);
      goto LABEL_12;
    }
  }
  return _NSXPCSerializationEndArrayWrite(a4);
}

BOOL static Date.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

uint64_t destroy for DateComponents()
{
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

Class UTTypeClass()
{
  Class result;

  result = NSClassFromString((NSString *)CFSTR("UTType"));
  if (!result)
  {
    if (UTTypeClass_predicate != -1)
      dispatch_once(&UTTypeClass_predicate, &__block_literal_global_1135);
    return NSClassFromString((NSString *)CFSTR("UTType"));
  }
  return result;
}

uint64_t NSFileWrapperChildNameHash_CFDictionary(void *a1)
{
  return objc_msgSend((id)objc_msgSend(a1, "lowercaseString"), "hash");
}

uint64_t NSFileWrapperChildNameIsEqual_CFDictionary(void *a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend(a1, "lowercaseString"), "isEqualToString:", objc_msgSend(a2, "lowercaseString"));
}

Ivar NSKeyValueIvarForPattern(objc_class *a1, char *__format, ...)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  size_t v7;
  _QWORD v9[2];
  va_list va;

  va_start(va, __format);
  v9[1] = *MEMORY[0x1E0C80C00];
  v4 = vsnprintf(0, 0, __format, va);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v9 - v5;
  va_copy((va_list)v9, va);
  vsnprintf((char *)v9 - v5, v7, __format, va);
  return class_getInstanceVariable(a1, v6);
}

Method NSKeyValueMethodForPattern(void *a1, char *__format, ...)
{
  uint64_t v4;
  size_t v5;
  char *v6;
  const char *v7;
  Method InstanceMethod;
  _QWORD v10[2];
  va_list va;

  va_start(va, __format);
  v10[1] = *MEMORY[0x1E0C80C00];
  va_copy((va_list)v10, va);
  v4 = vsnprintf(0, 0, __format, va);
  v5 = (int)v4 + 1;
  if ((v4 + 1) < 0x81)
  {
    if ((_DWORD)v4 == -1)
    {
      v6 = 0;
    }
    else
    {
      MEMORY[0x1E0C80A78](v4);
      v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v6, v5);
    }
  }
  else
  {
    v6 = (char *)malloc_type_malloc((int)v4 + 1, 0x100004077774924uLL);
  }
  va_copy((va_list)v10, va);
  vsnprintf(v6, v5, __format, va);
  v7 = NSResolvedSelectorForName(a1, v6);
  if (v7)
    InstanceMethod = class_getInstanceMethod((Class)a1, v7);
  else
    InstanceMethod = 0;
  if (v5 >= 0x81)
    free(v6);
  return InstanceMethod;
}

SEL NSResolvedSelectorForName(void *a1, char *str)
{
  objc_method *ClassMethod;

  if (!a1 || !object_isClass(a1) || class_isMetaClass((Class)a1) || sel_lookUpByName())
    return sel_registerName(str);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if ((objc_msgSend(a1, "_classShouldAlwaysRegisterSelectorNamed:", str) & 1) != 0)
      return sel_registerName(str);
  }
  else
  {
    if ((objc_msgSend(a1, "isProxy") & 1) != 0)
      return sel_registerName(str);
    if (_MergedGlobals_108 != -1)
      dispatch_once(&_MergedGlobals_108, &__block_literal_global_29);
    if (class_getMethodImplementation((Class)a1, sel_forwardInvocation_) != (IMP)qword_1ECD09DB0)
      return sel_registerName(str);
    if (class_getMethodImplementation((Class)a1, sel_forwardingTargetForSelector_) != (IMP)qword_1ECD09DB8)
      return sel_registerName(str);
    ClassMethod = class_getClassMethod((Class)a1, sel_resolveInstanceMethod_);
    if (method_getImplementation(ClassMethod) != (IMP)qword_1ECD09DA8)
      return sel_registerName(str);
  }
  return 0;
}

void *_NS_os_log_callback(void *result, _BYTE *a2, unint64_t a3, _BYTE *a4)
{
  void *v7;
  void *v8;
  int v9;
  int v10;
  objc_class *v11;
  __CFString *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v7 = result;
    v8 = (void *)MEMORY[0x186DA8F78]();
    if ((objc_msgSend(v7, "isProxy") & 1) != 0 || object_isClass(v7))
      v7 = (void *)objc_msgSend(v7, "description");
    if (_NSIsNSObject())
    {
      if (a4 && !*a4)
      {
        v12 = (__CFString *)objc_msgSend(v7, "description");
      }
      else
      {
        v9 = _NSIsNSNumber() ^ 1;
        if (!a4)
          LOBYTE(v9) = 1;
        if ((v9 & 1) == 0)
          *a4 = 0;
        v10 = _NSIsNSCFConstantString() ^ 1;
        if (!a4)
          LOBYTE(v10) = 1;
        if ((v10 & 1) == 0)
          *a4 = 0;
        v11 = (objc_class *)objc_opt_class();
        if (class_respondsToSelector(v11, sel_redactedDescription))
        {
          v12 = (__CFString *)objc_msgSend(v7, "redactedDescription");
          if (a4)
            *a4 = 0;
        }
        else
        {
          v12 = &stru_1E0F56070;
        }
      }
      v15 = -[__CFString length](v12, "length");
      v16 = v15;
      if (v15)
      {
        if (a3 >= 2
          && ((v17[0] = 0,
               (-[__CFString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v12, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", a2, a3 - 1, v17, 4, 2, 0, v15, 0) & 1) != 0)|| -[__CFString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v12, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", a2, a3 - 1, v17, 7, 2, 0,
                              v16,
                              0)))
        {
          a2[v17[0]] = 0;
          v13 = 1;
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = 1;
        if (a2)
        {
          v14 = 1;
          if (a3)
            *a2 = 0;
          goto LABEL_32;
        }
      }
      v14 = 1;
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
LABEL_32:
    objc_autoreleasePoolPop(v8);
    return (void *)(v13 & v14);
  }
  return result;
}

void sub_181802414(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x181802428);
  }
  _Unwind_Resume(exc_buf);
}

void sub_181802434(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

CFTypeRef _NSDescriptionWithLocaleFunc(void *a1, uint64_t a2)
{
  const __CFString *v4;

  if (a1)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v4 = (const __CFString *)objc_msgSend(a1, "descriptionWithLocale:", a2);
    else
      v4 = (const __CFString *)objc_msgSend(a1, "description");
  }
  else
  {
    v4 = CFSTR("*nil*");
  }
  if (!v4)
    v4 = CFSTR("*nil description*");
  return CFRetain(v4);
}

const UInt8 *bytesInEncoding(void *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFData *v16;
  const UInt8 *BytePtr;
  const __CFData *v18;
  uint64_t v19;
  void *v21;
  NSString *v22;
  uint64_t v23;
  uint64_t v24;
  UInt8 bytes[1001];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v10 = objc_msgSend(a1, "length");
  v11 = v10;
  v23 = 0;
  v24 = 0;
  v12 = a5;
  v13 = 4;
  if (a4)
    v13 = 6;
  v14 = v13 | a5;
  if (v10 > 0xA5
    || (objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", bytes, 1000, &v24, a2, v13 | v12, 0, v10, 0) & 1) == 0|| (v15 = v24, bytes[v24] = 0, v16 = CFDataCreate(0, bytes, v15 + 1), BytePtr = CFDataGetBytePtr(v16), v18 = v16, !BytePtr))
  {
    if (objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", 0, 0x7FFFFFFFFFFFFFFELL, &v24, a2, v14, 0, v11, 0)&& (v19 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", v24 + 1), "mutableBytes")) != 0&& (BytePtr = (const UInt8 *)v19, objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v19, v24, &v23, a2,
                          v14,
                          0,
                          v11,
                          0))
      && v23 == v24)
    {
      BytePtr[v23] = 0;
    }
    else
    {
      if (a3)
      {
        v21 = (void *)MEMORY[0x1E0C99DA0];
        v22 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Conversion to encoding %ld failed"), a2);
        objc_exception_throw((id)objc_msgSend(v21, "exceptionWithName:reason:userInfo:", CFSTR("NSCharacterConversionException"), v22, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", a1, CFSTR("_NSString"), 0)));
      }
      return 0;
    }
  }
  return BytePtr;
}

uint64_t UUID.uuidString.getter()
{
  __int128 *v0;
  __int128 v2;
  char out[40];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  memset(out, 0, 37);
  v2 = *v0;
  _foundation_uuid_unparse_upper((const unsigned __int8 *)&v2, out);
  return String.init(cString:)();
}

BOOL _NSKVONotifyingMutatorsShouldNotifyForIsaAndKey(objc_class *a1, const void *a2)
{
  _BOOL8 v4;
  CFSetRef *IndexedIvars;

  if ((char *)class_getMethodImplementation(a1, sel__isKVOA) != (char *)NSKVOIsAutonotifying)
    return 0;
  IndexedIvars = (CFSetRef *)object_getIndexedIvars(a1);
  os_unfair_recursive_lock_lock_with_options();
  v4 = CFSetContainsValue(IndexedIvars[2], a2) != 0;
  os_unfair_recursive_lock_unlock();
  return v4;
}

NSString *__cdecl NSStringFromPoint(NSPoint aPoint)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("{%.*g, %.*g}"), 17, *(_QWORD *)&aPoint.x, 17, *(_QWORD *)&aPoint.y);
}

CFCharacterSetRef static CharacterSet.whitespacesAndNewlines.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AttributedString._AttributeValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_181804C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t __NSFinalizeThreadData()
{
  uint64_t result;
  _QWORD *v1;
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  __CFRunLoopSource *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  CFRunLoopSourceContext v19;
  _BYTE v20[128];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  _CFSetTSD();
  result = _NSThreadGet0(1);
  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 8);
  v3 = *(unsigned __int8 *)(v2 + 52);
  if (v3 == 2)
  {
    *(_BYTE *)(v2 + 52) = 3;
    pthread_attr_destroy((pthread_attr_t *)(*(_QWORD *)(result + 8) + 72));

    return _CFSetTSD();
  }
  else if (v3 == 1)
  {
    *(_BYTE *)(v2 + 52) = 2;
    _CFAutoreleasePoolPush();

    *(_QWORD *)(v1[1] + 32) = 0;
    return _CFAutoreleasePoolPop();
  }
  else if (!*(_BYTE *)(v2 + 52))
  {
    *(_BYTE *)(v2 + 52) = 1;
    _CFAutoreleasePoolPush();
    objc_msgSend(+[NSNotificationCenter _defaultCenterWithoutCreating](NSNotificationCenter, "_defaultCenterWithoutCreating"), "postNotificationName:object:userInfo:", CFSTR("NSThreadWillExitNotification"), v1, 0);
    atomic_store(0xFu, (unsigned __int8 *)(v1[1] + 55));
    objc_sync_enter(v1);
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v4 = *(void **)(v1[1] + 56);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v26, v25, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v27 != v6)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * i), "signal:", 1);
        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v26, v25, 16);
      }
      while (v5);
    }
    v8 = v1[1];
    v9 = *(void **)(v8 + 64);
    if (v9)
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v20, 16);
      if (v10)
      {
        v11 = *(_QWORD *)v22;
        do
        {
          for (j = 0; j != v10; ++j)
          {
            if (*(_QWORD *)v22 != v11)
              objc_enumerationMutation(v9);
            v13 = (__CFRunLoopSource *)objc_msgSend(*(id *)(v1[1] + 64), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * j));
            memset(&v19, 0, sizeof(v19));
            CFRunLoopSourceGetContext(v13, &v19);
            free(v19.info);
          }
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v20, 16);
        }
        while (v10);
      }

      *(_QWORD *)(v1[1] + 64) = 0;
      v8 = v1[1];
    }
    v14 = *(void **)(v8 + 56);
    if (v14)
    {

      *(_QWORD *)(v1[1] + 56) = 0;
    }
    objc_sync_exit(v1);
    v15 = (_QWORD *)v1[1];
    if (v15)
      v15 = (_QWORD *)v15[3];

    v16 = (_QWORD *)v1[1];
    if (v16)
    {
      v16[3] = 0;
      v16 = (_QWORD *)v1[1];
      if (v16)
        v16 = (_QWORD *)v16[1];
    }

    v18 = v1[1];
    v17 = v1 + 1;
    *(_QWORD *)(v18 + 8) = 0;

    *(_QWORD *)(*v17 + 32) = 0;
    return _CFAutoreleasePoolPop();
  }
  return result;
}

void sub_1818055A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _performFileHandleSource(uint64_t a1)
{
  uint64_t v1;
  int v2;
  __CFRunLoopSource *v3;
  void *v4;
  char v5;
  int v6;
  const __CFString *v7;
  uint64_t v8;
  signed int v10;
  signed int v12;
  signed int v14;
  uint64_t v15;
  signed int v16;
  NSNumber *v17;
  NSObject *v18;
  NSNumber *v19;
  NSObject *v20;
  id v21;
  __int128 v22;
  NSNumber *v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned __int16 *)(a1 + 16);
  v3 = *(__CFRunLoopSource **)(a1 + 24);
  _CFAutoreleasePoolPush();
  v4 = 0;
  v5 = 1;
  v6 = v2 - 12;
  v7 = 0;
  switch(v6)
  {
    case 0:
      v8 = atomic_load((unsigned int *)(v1 + 16));
      if ((_DWORD)v8 == -1)
      {
        v16 = atomic_load((unsigned int *)(v1 + 12));
        v23 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v16);
        *(_QWORD *)&v22 = CFSTR("NSFileHandleError");
        v4 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
      }
      else
      {
        v23 = (NSNumber *)objc_msgSend(objc_allocWithZone((Class)NSFileHandle), "initWithFileDescriptor:closeOnDealloc:", v8, 1);
        *(_QWORD *)&v22 = CFSTR("NSFileHandleNotificationFileHandleItem");
        v4 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);

      }
      v5 = 0;
      v7 = CFSTR("NSFileHandleConnectionAcceptedNotification");
      break;
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 2:
      if (atomic_load((unsigned int *)(v1 + 12)))
      {
        v10 = atomic_load((unsigned int *)(v1 + 12));
        v23 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v10);
        v24 = objc_msgSend(MEMORY[0x1E0C99D50], "data");
        v22 = xmmword_1E0F4DC28;
        v4 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 2);
        v5 = 0;
      }
      else
      {
        v17 = *(NSNumber **)(v1 + 32);
        if (!v17)
          v17 = (NSNumber *)objc_msgSend(MEMORY[0x1E0C99D50], "data");
        v23 = v17;
        *(_QWORD *)&v22 = CFSTR("NSFileHandleNotificationDataItem");
        v4 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
        v18 = *(NSObject **)(v1 + 32);
        if (v18)
          dispatch_release(v18);
        v5 = 0;
        *(_QWORD *)(v1 + 32) = 0;
      }
      v7 = CFSTR("NSFileHandleReadCompletionNotification");
      break;
    case 4:
      if (atomic_load((unsigned int *)(v1 + 12)))
      {
        v12 = atomic_load((unsigned int *)(v1 + 12));
        v23 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v12);
        v24 = objc_msgSend(MEMORY[0x1E0C99D50], "data");
        v22 = xmmword_1E0F4DC28;
        v4 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 2);
        v5 = 0;
      }
      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v1 + 8));
        v19 = *(NSNumber **)(v1 + 32);
        if (!v19)
          v19 = (NSNumber *)objc_msgSend(MEMORY[0x1E0C99D50], "data");
        v23 = v19;
        *(_QWORD *)&v22 = CFSTR("NSFileHandleNotificationDataItem");
        v4 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
        os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 8));
        v20 = *(NSObject **)(v1 + 32);
        if (v20)
          dispatch_release(v20);
        v5 = 0;
        *(_QWORD *)(v1 + 32) = 0;
      }
      v7 = CFSTR("NSFileHandleReadToEndOfFileCompletionNotification");
      break;
    case 8:
      if (atomic_load((unsigned int *)(v1 + 12)))
      {
        v14 = atomic_load((unsigned int *)(v1 + 12));
        v23 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v14);
        *(_QWORD *)&v22 = CFSTR("NSFileHandleError");
        v15 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
      }
      else
      {
        v15 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
      }
      v4 = (void *)v15;
      v5 = 0;
      v7 = CFSTR("NSFileHandleDataAvailableNotification");
      break;
    default:
      v7 = 0;
      break;
  }
  CFRunLoopSourceInvalidate(v3);
  CFRelease(v3);
  v21 = v4;
  _CFAutoreleasePoolPop();
  if ((v5 & 1) == 0)
    -[NSNotificationCenter postNotificationName:object:userInfo:](+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", v7, v1, v4);

  CFRelease((CFTypeRef)v1);
}

uint64_t _NSThreadGet0(int a1)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  int v7;
  uint64_t v8;

  v2 = pthread_self();
  v3 = (_opaque_pthread_t *)pthread_main_thread_np();
  v4 = pthread_equal(v2, v3);
  v5 = a1 == 1;
  if (v4)
    v6 = 1;
  else
    v6 = a1 == 1;
  if (!v4)
    v5 = 0;
  if (a1)
    v7 = v5;
  else
    v7 = 1;
  if (!v6 || (v8 = _CFGetTSD()) == 0)
  {
    if (v7)
    {
      if (_MergedGlobals_7_2 != -1)
        dispatch_once(&_MergedGlobals_7_2, &__block_literal_global_50);
      v8 = qword_1ECD099F8;
    }
    else
    {
      v8 = objc_opt_new();
      atomic_store(0xEu, (unsigned __int8 *)(*(_QWORD *)(v8 + 8) + 55));
      *(_QWORD *)(*(_QWORD *)(v8 + 8) + 136) = pthread_self();
    }
    _CFSetTSD();
    if (v6)
      _CFSetTSD();
  }
  return v8;
}

BOOL isBlock(void *a1)
{
  objc_class *Class;
  Class Superclass;
  objc_class *v3;
  uint64_t v4;
  _BOOL8 v5;

  if (!a1)
    return 0;
  Class = object_getClass(a1);
  Superclass = class_getSuperclass(Class);
  if (!Superclass)
    return 0;
  v3 = Superclass;
  do
  {
    v4 = objc_opt_class();
    v5 = v3 == (objc_class *)v4;
    if (v3 == (objc_class *)v4)
      break;
    v3 = class_getSuperclass(v3);
  }
  while (v3);
  return v5;
}

void sub_181806D4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t threadRunLoop(_opaque_pthread_t *a1)
{
  if (pthread_equal(a1, 0))
    return 0;
  else
    return _CFRunLoopGet0();
}

void sub_181807764(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x181807734);
  }
  _Unwind_Resume(a1);
}

uint64_t matchTypeEncoding(char *__s1, char *__s2, uint64_t a3)
{
  uint64_t result;
  const char *v5;
  int v7;
  NSUInteger v8;
  NSUInteger v9;
  NSUInteger alignp;
  NSUInteger sizep;
  unsigned __int8 *v12;
  unsigned __int8 *v13[2];

  result = 0;
  v13[1] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  v12 = (unsigned __int8 *)__s2;
  v13[0] = (unsigned __int8 *)__s1;
  if (__s1)
  {
    v5 = __s2;
    if (__s2)
    {
      if (__s1 == __s2 || !strcmp(__s1, __s2))
        return 1;
      alignp = 0;
      sizep = 0;
      NSGetSizeAndAlignment(__s1, &sizep, &alignp);
      v8 = 0;
      v9 = 0;
      NSGetSizeAndAlignment(v5, &v9, &v8);
      if (sizep == v9 && sizep == a3 && alignp == v8)
      {
        if (*__s1)
        {
          while (*v5)
          {
            if ((mungeUnionsAndStructures(v13) & 1) == 0)
              return 0;
            result = mungeUnionsAndStructures(&v12);
            if (!(_DWORD)result)
              return result;
            if (*v13[0] != *v12)
              return 0;
            if (!*v13[0])
              break;
            v7 = v13[0][1];
            v5 = (const char *)++v12;
            ++v13[0];
            result = 1;
            if (!v7)
              return result;
          }
        }
        return 1;
      }
      return 0;
    }
  }
  return result;
}

void sub_181807F9C()
{
  __break(1u);
}

void sub_181807FF4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181808000(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18180800CLL);
}

void *_NSXPCSerializationAddRawData(uint64_t a1, const void *a2, unint64_t a3)
{
  char v6;
  void *result;

  if (a3 < 0xF)
  {
    v6 = a3 | 0x40;
    _reserveSpace(a1, 1);
    *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = v6;
  }
  else
  {
    _reserveSpace(a1, 1);
    *(_BYTE *)(*(_QWORD *)(a1 + 8216) + (*(_QWORD *)(a1 + 8200))++) = 79;
    _NSXPCSerializationAddInteger(a1, a3);
  }
  _reserveSpace(a1, a3);
  result = memmove((void *)(*(_QWORD *)(a1 + 8216) + *(_QWORD *)(a1 + 8200)), a2, a3);
  *(_QWORD *)(a1 + 8200) += a3;
  return result;
}

void sub_1818083F4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181808410(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18180841CLL);
}

uint64_t _NSAttributeDictionaryClass()
{
  uint64_t result;

  result = attributeDictionaryClass;
  if (!attributeDictionaryClass)
  {
    result = (uint64_t)objc_lookUpClass("NSAttributeDictionary");
    attributeDictionaryClass = result;
    if (!result)
    {
      result = objc_opt_self();
      attributeDictionaryClass = result;
    }
  }
  return result;
}

uint64_t blockForLocation(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  os_unfair_lock_lock((os_unfair_lock_t)&__NSRLEArrayLock);
  v6 = *(_QWORD *)(a1 + 16);
  if (a2 <= v6 >> 1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&__NSRLEArrayLock);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 36);
    os_unfair_lock_unlock((os_unfair_lock_t)&__NSRLEArrayLock);
    if (v6 > a2)
    {
      v8 = (uint64_t *)(a1 + 16 * v7 + 24);
      do
      {
        v9 = *v8;
        v8 -= 2;
        v6 -= v9;
        --v7;
      }
      while (v7 && v6 > a2);
      goto LABEL_10;
    }
  }
  v10 = a1 + 16 * v7--;
  v11 = (uint64_t *)(v10 + 40);
  v12 = v6;
  do
  {
    v6 = v12;
    v13 = *v11;
    v11 += 2;
    v12 += v13;
    ++v7;
  }
  while (v12 <= a2);
LABEL_10:
  os_unfair_lock_lock((os_unfair_lock_t)&__NSRLEArrayLock);
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 36) = v7;
  os_unfair_lock_unlock((os_unfair_lock_t)&__NSRLEArrayLock);
  if (a3)
  {
    v14 = *(_QWORD *)(a1 + 16 * v7 + 40);
    *a3 = v6;
    a3[1] = v14;
  }
  return v7;
}

uint64_t _NSScanIntFromString(void *a1, void *a2, int *a3, unint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSCharacterSet *v23;
  uint64_t result;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSCharacterSet *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSCharacterSet *v37;
  int v38;
  unsigned int v39;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[4];
  UChar32 c[4];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)c = 0u;
  v44 = 0u;
  memset(v45, 0, sizeof(v45));
  v43 = 0u;
  v6 = *a4;
  v7 = objc_msgSend(a1, "length");
  *((_QWORD *)&v44 + 1) = v7;
  *(_QWORD *)&v45[0] = v6;
  *(_QWORD *)&v44 = a1;
  if (v7 <= v6)
  {
    *(_QWORD *)&v43 = 0;
    v9 = 0xFFFF;
  }
  else
  {
    if (v7 - v6 >= 0x20)
      v8 = 32;
    else
      v8 = v7 - v6;
    *(_QWORD *)&v43 = v8;
    objc_msgSend(a1, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v6, v8);
    v9 = WORD4(v45[0]);
  }
  LOWORD(c[2]) = v9;
  *((_QWORD *)&v43 + 1) = 1;
  if (a2)
  {
    if (objc_msgSend(a2, "characterIsMember:"))
    {
      do
      {
        v10 = *((_QWORD *)&v43 + 1);
        if (*((_QWORD *)&v43 + 1) - 1 >= (unint64_t)v43)
          break;
        if (*((_QWORD *)&v43 + 1) >= (unint64_t)v43)
        {
          v12 = *(_QWORD *)&v45[0] + v43;
          if (*((_QWORD *)&v44 + 1) > *(_QWORD *)&v45[0] + (_QWORD)v43)
          {
            if (*((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + (_QWORD)v43) >= 0x20uLL)
              v13 = 32;
            else
              v13 = *((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + v43);
            *(_QWORD *)&v45[0] += v43;
            *(_QWORD *)&v43 = v13;
            objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v12, v13);
            LOWORD(c[2]) = WORD4(v45[0]);
            *((_QWORD *)&v43 + 1) = 1;
            continue;
          }
          *((_QWORD *)&v43 + 1) = v43 + 1;
          v11 = -1;
        }
        else
        {
          ++*((_QWORD *)&v43 + 1);
          v11 = *((_WORD *)v45 + v10 + 4);
        }
        LOWORD(c[2]) = v11;
      }
      while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
    }
    v9 = LOWORD(c[2]);
  }
  v42 = v9 == 45;
  if (v9 != 45 && v9 != 43)
    goto LABEL_45;
  v14 = *((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1) >= (unint64_t)v43)
  {
    v16 = *(_QWORD *)&v45[0] + v43;
    if (*((_QWORD *)&v44 + 1) > *(_QWORD *)&v45[0] + (_QWORD)v43)
    {
      if (*((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + (_QWORD)v43) >= 0x20uLL)
        v17 = 32;
      else
        v17 = *((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + v43);
      *(_QWORD *)&v45[0] += v43;
      *(_QWORD *)&v43 = v17;
      objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v16, v17);
      LOWORD(c[2]) = WORD4(v45[0]);
      *((_QWORD *)&v43 + 1) = 1;
      if (!a2)
        goto LABEL_45;
      goto LABEL_33;
    }
    *((_QWORD *)&v43 + 1) = v43 + 1;
    v15 = -1;
  }
  else
  {
    ++*((_QWORD *)&v43 + 1);
    v15 = *((_WORD *)v45 + v14 + 4);
  }
  LOWORD(c[2]) = v15;
  if (!a2)
    goto LABEL_45;
LABEL_33:
  if (objc_msgSend(a2, "characterIsMember:"))
  {
    do
    {
      v18 = *((_QWORD *)&v43 + 1);
      if (*((_QWORD *)&v43 + 1) - 1 >= (unint64_t)v43)
        break;
      if (*((_QWORD *)&v43 + 1) >= (unint64_t)v43)
      {
        v20 = *(_QWORD *)&v45[0] + v43;
        if (*((_QWORD *)&v44 + 1) > *(_QWORD *)&v45[0] + (_QWORD)v43)
        {
          if (*((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + (_QWORD)v43) >= 0x20uLL)
            v21 = 32;
          else
            v21 = *((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + v43);
          *(_QWORD *)&v45[0] += v43;
          *(_QWORD *)&v43 = v21;
          objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v20, v21);
          LOWORD(c[2]) = WORD4(v45[0]);
          *((_QWORD *)&v43 + 1) = 1;
          continue;
        }
        *((_QWORD *)&v43 + 1) = v43 + 1;
        v19 = -1;
      }
      else
      {
        ++*((_QWORD *)&v43 + 1);
        v19 = *((_WORD *)v45 + v18 + 4);
      }
      LOWORD(c[2]) = v19;
    }
    while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
  }
LABEL_45:
  v22 = LOWORD(c[2]);
  v23 = (NSCharacterSet *)isADigit_set;
  if (!isADigit_set)
  {
    v23 = +[NSCharacterSet decimalDigitCharacterSet](NSCharacterSet, "decimalDigitCharacterSet");
    isADigit_set = (uint64_t)v23;
  }
  result = -[NSCharacterSet characterIsMember:](v23, "characterIsMember:", v22);
  if ((_DWORD)result)
  {
    v39 = result;
    v25 = 0;
    while (1)
    {
      if (v25 > 214748363)
      {
        if (v25 != 214748364)
          goto LABEL_54;
        v26 = LOWORD(c[2]) - 48;
        if (v26 > 9)
          v26 = u_charDigitValue(LOWORD(c[2]));
        if (v26 - v42 >= 7)
        {
LABEL_54:
          while (1)
          {
            v27 = *((_QWORD *)&v43 + 1);
            if (*((_QWORD *)&v43 + 1) >= (unint64_t)v43)
            {
              v29 = *(_QWORD *)&v45[0] + v43;
              if (*((_QWORD *)&v44 + 1) > *(_QWORD *)&v45[0] + (_QWORD)v43)
              {
                if (*((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + (_QWORD)v43) >= 0x20uLL)
                  v30 = 32;
                else
                  v30 = *((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + v43);
                *(_QWORD *)&v45[0] += v43;
                *(_QWORD *)&v43 = v30;
                objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v29, v30);
                v28 = WORD4(v45[0]);
                LOWORD(c[2]) = WORD4(v45[0]);
                *((_QWORD *)&v43 + 1) = 1;
                goto LABEL_63;
              }
              *((_QWORD *)&v43 + 1) = v43 + 1;
              v28 = 0xFFFFLL;
            }
            else
            {
              ++*((_QWORD *)&v43 + 1);
              v28 = *((unsigned __int16 *)v45 + v27 + 4);
            }
            LOWORD(c[2]) = v28;
LABEL_63:
            v31 = (NSCharacterSet *)isADigit_set;
            if (!isADigit_set)
            {
              v31 = +[NSCharacterSet decimalDigitCharacterSet](NSCharacterSet, "decimalDigitCharacterSet");
              isADigit_set = (uint64_t)v31;
            }
            if (!-[NSCharacterSet characterIsMember:](v31, "characterIsMember:", v28))
            {
              if (v42)
                v25 = 0x80000000;
              else
                v25 = 0x7FFFFFFF;
              v32 = LOWORD(c[2]);
              v42 = 0;
              goto LABEL_81;
            }
          }
        }
      }
      v33 = LOWORD(c[2]) - 48;
      if (v33 > 9)
        v33 = u_charDigitValue(LOWORD(c[2]));
      v25 = v33 + 10 * v25;
      v34 = *((_QWORD *)&v43 + 1);
      if (*((_QWORD *)&v43 + 1) < (unint64_t)v43)
        break;
      v35 = *(_QWORD *)&v45[0] + v43;
      if (*((_QWORD *)&v44 + 1) <= *(_QWORD *)&v45[0] + (_QWORD)v43)
      {
        *((_QWORD *)&v43 + 1) = v43 + 1;
        v32 = 0xFFFFLL;
        goto LABEL_80;
      }
      if (*((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + (_QWORD)v43) >= 0x20uLL)
        v36 = 32;
      else
        v36 = *((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + v43);
      *(_QWORD *)&v45[0] += v43;
      *(_QWORD *)&v43 = v36;
      objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v35, v36);
      v32 = WORD4(v45[0]);
      LOWORD(c[2]) = WORD4(v45[0]);
      *((_QWORD *)&v43 + 1) = 1;
LABEL_81:
      v37 = (NSCharacterSet *)isADigit_set;
      if (!isADigit_set)
      {
        v37 = +[NSCharacterSet decimalDigitCharacterSet](NSCharacterSet, "decimalDigitCharacterSet");
        isADigit_set = (uint64_t)v37;
      }
      if (!-[NSCharacterSet characterIsMember:](v37, "characterIsMember:", v32))
      {
        if (a3)
        {
          if (v42)
            v38 = -v25;
          else
            v38 = v25;
          *a3 = v38;
        }
        *a4 = *(_QWORD *)&v45[0] + *((_QWORD *)&v43 + 1) - 1;
        return v39;
      }
    }
    ++*((_QWORD *)&v43 + 1);
    v32 = *((unsigned __int16 *)v45 + v34 + 4);
LABEL_80:
    LOWORD(c[2]) = v32;
    goto LABEL_81;
  }
  return result;
}

uint64_t _NSScanLongLongFromString(void *a1, void *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSCharacterSet *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSCharacterSet *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSCharacterSet *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[4];
  UChar32 c[4];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)c = 0u;
  v44 = 0u;
  memset(v45, 0, sizeof(v45));
  v43 = 0u;
  v6 = *a4;
  v7 = objc_msgSend(a1, "length");
  *((_QWORD *)&v44 + 1) = v7;
  *(_QWORD *)&v45[0] = v6;
  *(_QWORD *)&v44 = a1;
  if (v7 <= v6)
  {
    *(_QWORD *)&v43 = 0;
    v9 = 0xFFFF;
  }
  else
  {
    if (v7 - v6 >= 0x20)
      v8 = 32;
    else
      v8 = v7 - v6;
    *(_QWORD *)&v43 = v8;
    objc_msgSend(a1, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v6, v8);
    v9 = WORD4(v45[0]);
  }
  LOWORD(c[2]) = v9;
  *((_QWORD *)&v43 + 1) = 1;
  if (a2)
  {
    if (objc_msgSend(a2, "characterIsMember:"))
    {
      do
      {
        v10 = *((_QWORD *)&v43 + 1);
        if (*((_QWORD *)&v43 + 1) - 1 >= (unint64_t)v43)
          break;
        if (*((_QWORD *)&v43 + 1) >= (unint64_t)v43)
        {
          v12 = *(_QWORD *)&v45[0] + v43;
          if (*((_QWORD *)&v44 + 1) > *(_QWORD *)&v45[0] + (_QWORD)v43)
          {
            if (*((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + (_QWORD)v43) >= 0x20uLL)
              v13 = 32;
            else
              v13 = *((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + v43);
            *(_QWORD *)&v45[0] += v43;
            *(_QWORD *)&v43 = v13;
            objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v12, v13);
            LOWORD(c[2]) = WORD4(v45[0]);
            *((_QWORD *)&v43 + 1) = 1;
            continue;
          }
          *((_QWORD *)&v43 + 1) = v43 + 1;
          v11 = -1;
        }
        else
        {
          ++*((_QWORD *)&v43 + 1);
          v11 = *((_WORD *)v45 + v10 + 4);
        }
        LOWORD(c[2]) = v11;
      }
      while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
    }
    v9 = LOWORD(c[2]);
  }
  v42 = v9 == 45;
  if (v9 != 45 && v9 != 43)
    goto LABEL_45;
  v14 = *((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1) >= (unint64_t)v43)
  {
    v16 = *(_QWORD *)&v45[0] + v43;
    if (*((_QWORD *)&v44 + 1) > *(_QWORD *)&v45[0] + (_QWORD)v43)
    {
      if (*((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + (_QWORD)v43) >= 0x20uLL)
        v17 = 32;
      else
        v17 = *((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + v43);
      *(_QWORD *)&v45[0] += v43;
      *(_QWORD *)&v43 = v17;
      objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v16, v17);
      LOWORD(c[2]) = WORD4(v45[0]);
      *((_QWORD *)&v43 + 1) = 1;
      if (!a2)
        goto LABEL_45;
      goto LABEL_33;
    }
    *((_QWORD *)&v43 + 1) = v43 + 1;
    v15 = -1;
  }
  else
  {
    ++*((_QWORD *)&v43 + 1);
    v15 = *((_WORD *)v45 + v14 + 4);
  }
  LOWORD(c[2]) = v15;
  if (!a2)
    goto LABEL_45;
LABEL_33:
  if (objc_msgSend(a2, "characterIsMember:"))
  {
    do
    {
      v18 = *((_QWORD *)&v43 + 1);
      if (*((_QWORD *)&v43 + 1) - 1 >= (unint64_t)v43)
        break;
      if (*((_QWORD *)&v43 + 1) >= (unint64_t)v43)
      {
        v20 = *(_QWORD *)&v45[0] + v43;
        if (*((_QWORD *)&v44 + 1) > *(_QWORD *)&v45[0] + (_QWORD)v43)
        {
          if (*((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + (_QWORD)v43) >= 0x20uLL)
            v21 = 32;
          else
            v21 = *((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + v43);
          *(_QWORD *)&v45[0] += v43;
          *(_QWORD *)&v43 = v21;
          objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v20, v21);
          LOWORD(c[2]) = WORD4(v45[0]);
          *((_QWORD *)&v43 + 1) = 1;
          continue;
        }
        *((_QWORD *)&v43 + 1) = v43 + 1;
        v19 = -1;
      }
      else
      {
        ++*((_QWORD *)&v43 + 1);
        v19 = *((_WORD *)v45 + v18 + 4);
      }
      LOWORD(c[2]) = v19;
    }
    while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
  }
LABEL_45:
  v22 = LOWORD(c[2]);
  v23 = (NSCharacterSet *)isADigit_set;
  if (!isADigit_set)
  {
    v23 = +[NSCharacterSet decimalDigitCharacterSet](NSCharacterSet, "decimalDigitCharacterSet");
    isADigit_set = (uint64_t)v23;
  }
  result = -[NSCharacterSet characterIsMember:](v23, "characterIsMember:", v22);
  if ((_DWORD)result)
  {
    v39 = result;
    v25 = 0;
    while (1)
    {
      if (v25 > 0xCCCCCCCCCCCCCCBLL)
      {
        if (v25 != 0xCCCCCCCCCCCCCCCLL)
          goto LABEL_54;
        v26 = LOWORD(c[2]) - 48;
        if (v26 > 9)
          v26 = u_charDigitValue(LOWORD(c[2]));
        if (v26 - v42 >= 7)
        {
LABEL_54:
          while (1)
          {
            v27 = *((_QWORD *)&v43 + 1);
            if (*((_QWORD *)&v43 + 1) >= (unint64_t)v43)
            {
              v29 = *(_QWORD *)&v45[0] + v43;
              if (*((_QWORD *)&v44 + 1) > *(_QWORD *)&v45[0] + (_QWORD)v43)
              {
                if (*((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + (_QWORD)v43) >= 0x20uLL)
                  v30 = 32;
                else
                  v30 = *((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + v43);
                *(_QWORD *)&v45[0] += v43;
                *(_QWORD *)&v43 = v30;
                objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v29, v30);
                v28 = WORD4(v45[0]);
                LOWORD(c[2]) = WORD4(v45[0]);
                *((_QWORD *)&v43 + 1) = 1;
                goto LABEL_63;
              }
              *((_QWORD *)&v43 + 1) = v43 + 1;
              v28 = 0xFFFFLL;
            }
            else
            {
              ++*((_QWORD *)&v43 + 1);
              v28 = *((unsigned __int16 *)v45 + v27 + 4);
            }
            LOWORD(c[2]) = v28;
LABEL_63:
            v31 = (NSCharacterSet *)isADigit_set;
            if (!isADigit_set)
            {
              v31 = +[NSCharacterSet decimalDigitCharacterSet](NSCharacterSet, "decimalDigitCharacterSet");
              isADigit_set = (uint64_t)v31;
            }
            if (!-[NSCharacterSet characterIsMember:](v31, "characterIsMember:", v28))
            {
              if (v42)
                v25 = 0x8000000000000000;
              else
                v25 = 0x7FFFFFFFFFFFFFFFLL;
              v32 = LOWORD(c[2]);
              v42 = 0;
              goto LABEL_81;
            }
          }
        }
      }
      v33 = LOWORD(c[2]) - 48;
      if (v33 > 9)
        v33 = u_charDigitValue(LOWORD(c[2]));
      v25 = v33 + 10 * v25;
      v34 = *((_QWORD *)&v43 + 1);
      if (*((_QWORD *)&v43 + 1) < (unint64_t)v43)
        break;
      v35 = *(_QWORD *)&v45[0] + v43;
      if (*((_QWORD *)&v44 + 1) <= *(_QWORD *)&v45[0] + (_QWORD)v43)
      {
        *((_QWORD *)&v43 + 1) = v43 + 1;
        v32 = 0xFFFFLL;
        goto LABEL_80;
      }
      if (*((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + (_QWORD)v43) >= 0x20uLL)
        v36 = 32;
      else
        v36 = *((_QWORD *)&v44 + 1) - (*(_QWORD *)&v45[0] + v43);
      *(_QWORD *)&v45[0] += v43;
      *(_QWORD *)&v43 = v36;
      objc_msgSend((id)v44, sel_getUid("getCharacters:range:"), (char *)v45 + 8, v35, v36);
      v32 = WORD4(v45[0]);
      LOWORD(c[2]) = WORD4(v45[0]);
      *((_QWORD *)&v43 + 1) = 1;
LABEL_81:
      v37 = (NSCharacterSet *)isADigit_set;
      if (!isADigit_set)
      {
        v37 = +[NSCharacterSet decimalDigitCharacterSet](NSCharacterSet, "decimalDigitCharacterSet");
        isADigit_set = (uint64_t)v37;
      }
      if (!-[NSCharacterSet characterIsMember:](v37, "characterIsMember:", v32))
      {
        if (a3)
        {
          if (v42)
            v38 = -v25;
          else
            v38 = v25;
          *a3 = v38;
        }
        *a4 = *(_QWORD *)&v45[0] + *((_QWORD *)&v43 + 1) - 1;
        return v39;
      }
    }
    ++*((_QWORD *)&v43 + 1);
    v32 = *((unsigned __int16 *)v45 + v34 + 4);
LABEL_80:
    LOWORD(c[2]) = v32;
    goto LABEL_81;
  }
  return result;
}

ValueMetadata *type metadata accessor for NSFastEnumerationIterator()
{
  return &type metadata for NSFastEnumerationIterator;
}

uint64_t JSONEncoder.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = 1;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  v1 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v0 + 136) = v2;
  return v0;
}

uint64_t JSONDecoder.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingUserInfoKey?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  CodingUserInfoKey.init(rawValue:)();
  v4 = type metadata accessor for CodingUserInfoKey();
  v5 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey, v3, v4);
    v7 = v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 16) = 2;
    *(_QWORD *)(v7 + 24) = 1;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    v8 = MEMORY[0x1E0DEE9E0];
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_QWORD *)(v7 + 96) = 0;
    *(_QWORD *)(v7 + 104) = v8;
    *(_BYTE *)(v7 + 112) = 0;
    v9 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
    v10 = swift_allocObject();
    *(_DWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v0 + v9) = v10;
    return v0;
  }
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __JSONEncoder(uint64_t a1, uint64_t a2)
{
  return __JSONEncoder.encode(_:)(a1, a2);
}

uint64_t __JSONEncoder.encode(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  if (((*(uint64_t (**)(void))(*v2 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  type metadata accessor for JSONReference();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  *(_BYTE *)(v5 + 32) = 0;
  swift_bridgeObjectRetain();
  v6 = swift_retain();
  MEMORY[0x186DA4AFC](v6);
  if (*(_QWORD *)((v2[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v2[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

uint64_t JSONDecoder.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey;
  v2 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 48);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options), *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 8), *(_BYTE *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 16));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v3);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v4, v5);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t JSONDecoderImpl.__deallocating_deinit()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 128);
  outlined consume of JSONEncoder.DateEncodingStrategy(*(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  outlined consume of JSONEncoder.KeyEncodingStrategy(v1);
  outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v2, v3);
  outlined consume of JSONEncoder.KeyEncodingStrategy(v4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance __JSONEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __JSONEncoder.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t __JSONEncoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v6 = v3 + 2;
  if (((*(uint64_t (**)(void))(*v3 + 208))() & 1) != 0)
  {
    type metadata accessor for JSONReference();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v7 + 24) = 0;
    *(_BYTE *)(v7 + 32) = 4;
    v8 = swift_retain();
    MEMORY[0x186DA4AFC](v8);
    if (*(_QWORD *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_13;
  }
  v10 = *v6;
  if (!((unint64_t)*v6 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_7;
LABEL_15:
    v12 = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v11 = _CocoaArrayWrapper.endIndex.getter();
  if (!v11)
    goto LABEL_15;
LABEL_7:
  v12 = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((v10 & 0xC000000000000001) == 0)
  {
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v12 < *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v13 = *(_QWORD *)(v10 + 8 * v12 + 32);
      swift_retain();
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_17:
  v13 = MEMORY[0x186DA53A8](v12, v10);
LABEL_12:
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v13 + 32) == 4)
  {
LABEL_13:
    v14 = type metadata accessor for _JSONKeyedEncodingContainer(0, a2, a3, v9);
    swift_retain();
    swift_retain();
    MEMORY[0x186DA9D64](&protocol conformance descriptor for _JSONKeyedEncodingContainer<A>, v14);
    return KeyedEncodingContainer.init<A>(_:)();
  }
LABEL_20:
  result = swift_release();
  __break(1u);
  return result;
}

BOOL __JSONEncoder.canEncodeNewValue.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return v2 == *(_QWORD *)(v0 + 152);
}

void protocol witness for Decoder.container<A>(keyedBy:) in conformance JSONDecoderImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  JSONDecoderImpl.container<A>(keyedBy:)(a1, a2, a3);
}

void JSONDecoderImpl.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = v3[2];
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  v7 = v3;
  v8 = v5 + 24 * v6;
  v10 = *(_QWORD *)(v8 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  v11 = *(unsigned __int8 *)(v8 + 24);
  if (v11 >> 5 != 3)
  {
    v12 = v11 >> 5 == 5 && (v9 | v10) == 0;
    if (v12 && v11 == 160)
    {
      v23 = type metadata accessor for DecodingError();
      swift_allocError();
      v25 = v24;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      v26 = v7[20];
      swift_retain();
      _CodingPathNode.path.getter(v26);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x1E0DEC460], v23);
      swift_willThrow();
      return;
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    *v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    v14 = v7[20];
    swift_retain();
    _CodingPathNode.path.getter(v14);
    swift_release();
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v30 = (_QWORD *)0xD000000000000035;
    v31 = 0x800000018230E9E0;
    v15 = v7[2];
    if (*(_QWORD *)(v15 + 16))
      __asm { BR              X10 }
    goto LABEL_15;
  }
  v19 = v7[20];
  v21 = v7[17];
  v30 = (_QWORD *)v7[16];
  v20 = (unint64_t)v30;
  v31 = v21;
  v33 = v19 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain_n();
  swift_retain();
  outlined copy of JSONEncoder.KeyEncodingStrategy((unint64_t)v30);
  v22 = static JSONDecoderImpl.KeyedContainer.stringify(objectRegion:using:codingPathNode:keyDecodingStrategy:)(v10, v9, (uint64_t)v7, v19, (unint64_t *)&v30);
  if (v4)
  {
    swift_release();
    swift_release_n();
    outlined consume of JSONEncoder.KeyEncodingStrategy(v20);
  }
  else
  {
    v27 = v22;
    outlined consume of JSONEncoder.KeyEncodingStrategy(v20);
    swift_release();
    v30 = v7;
    v31 = v19;
    v32 = v27;
    v29 = type metadata accessor for JSONDecoderImpl.KeyedContainer(0, a2, a3, v28);
    MEMORY[0x186DA9D64](&protocol conformance descriptor for JSONDecoderImpl.KeyedContainer<A>, v29);
    KeyedDecodingContainer.init<A>(_:)();
  }
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x186DA9CBC](a1, v6, a5);
}

unint64_t outlined consume of JSONEncoder.KeyEncodingStrategy(unint64_t result)
{
  if (result >= 2)
    return swift_release();
  return result;
}

unint64_t outlined copy of JSONEncoder.KeyEncodingStrategy(unint64_t result)
{
  if (result >= 2)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for JSONDecoderImpl.KeyedContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JSONDecoderImpl.KeyedContainer);
}

uint64_t type metadata accessor for _JSONKeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _JSONKeyedEncodingContainer);
}

void outlined consume of JSONEncoder.DateEncodingStrategy(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {
    swift_release();
  }
  else if (!a3)
  {

  }
}

uint64_t outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static DecodingError._typeMismatch(at:expectation:reality:)@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;

  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x756F662074756220;
  v7._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = specialized static DecodingError._typeDescription(of:)(a2);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x64616574736E6920;
  v9._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a3 = a1;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v10 = *MEMORY[0x1E0DEC450];
  v11 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(a3, v10, v11);
}

uint64_t specialized static DecodingError._typeDescription(of:)(_QWORD *a1)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v5;
  _BYTE v6[40];
  __int128 v7;
  uint64_t v8;

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  v2 = v8;
  outlined destroy of Any?((uint64_t)&v7);
  if (!v2)
    return 0x76206C6C756E2061;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)&v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    outlined init with copy of Any((uint64_t)a1, (uint64_t)&v7);
    v3 = &v7;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    return 0x7265626D756E2061;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)&v7);
  outlined init with take of Any(&v7, &v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    v3 = (__int128 *)v6;
    goto LABEL_7;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v6);
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    return 0x676E697274732061;
  }
  else
  {
    outlined init with copy of Any((uint64_t)a1, (uint64_t)v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      return 0x7961727261206E61;
    }
    else
    {
      outlined init with copy of Any((uint64_t)a1, (uint64_t)v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        return 0x6F69746369642061;
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        swift_getDynamicType();
        return _typeName(_:qualified:)();
      }
    }
  }
}

BOOL __JSONReferencingEncoder.canEncodeNewValue.getter()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[2];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = v0[18];
  swift_retain();
  v4 = _CodingPathNode.path.getter(v3);
  swift_release();
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0[20] + 144);
  swift_retain();
  v7 = _CodingPathNode.path.getter(v6);
  swift_release();
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRelease();
  return v2 == v5 + ~v8;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URL.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x65766974616C6572;
  else
    return 1702060386;
}

NSCalendar __swiftcall Calendar._bridgeToObjectiveC()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (NSCalendar)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1);
}

NSCalendar __swiftcall _CalendarICU.bridgeToNSCalendar()()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSCalendar result;
  objc_super v7;

  v1 = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU(&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU, (uint64_t)&protocol conformance descriptor for _CalendarICU);
  v2 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  v3 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = v0;
  *(_QWORD *)(v4 + 24) = v1;
  *(_QWORD *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v4;
  v5 = *MEMORY[0x1E0C996C8];
  v7.receiver = v3;
  v7.super_class = v2;
  swift_retain();
  result.super.isa = (Class)objc_msgSendSuper2(&v7, sel_initWithCheckedCalendarIdentifier_, v5);
  if (!result.super.isa)
    __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for _CalendarICU();
    result = MEMORY[0x186DA9D64](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

id specialized _CalendarAutoupdating.bridgeToNSCalendar()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  objc_class *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  __int128 v7;
  objc_super v8;
  __int128 v9;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static CalendarCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v0, (uint64_t *)&v9);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  v2 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  v7 = v9;
  v3 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 16) = v7;
  *(_QWORD *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v4;
  v5 = *MEMORY[0x1E0C996C8];
  v8.receiver = v3;
  v8.super_class = v2;
  result = objc_msgSendSuper2(&v8, sel_initWithCheckedCalendarIdentifier_, v5);
  if (!result)
    __break(1u);
  return result;
}

uint64_t closure #1 in CalendarCache.autoupdatingCurrent.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _CalendarAutoupdating, (uint64_t)&protocol conformance descriptor for _CalendarAutoupdating);
    v5 = v3;
  }
  else
  {
    type metadata accessor for _CalendarAutoupdating();
    v5 = swift_allocObject();
    *(_QWORD *)(a1 + 16) = v5;
    v4 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _CalendarAutoupdating, (uint64_t)&protocol conformance descriptor for _CalendarAutoupdating);
    swift_retain();
  }
  *a2 = v5;
  a2[1] = v4;
  return swift_retain();
}

uint64_t specialized _setDownCastConditional<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;
  int v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  id v74;
  int v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  int64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;

  v89 = a3;
  v5 = type metadata accessor for Optional();
  v80 = *(_QWORD *)(v5 - 8);
  v81 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v79 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v87 = (char *)&v79 - v16;
  MEMORY[0x1E0C80A78](v17);
  v88 = (char *)&v79 - v18;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v79 - v20;
  v22 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v23 = (char *)a1;
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_3;
LABEL_5:
    v24 = MEMORY[0x1E0DEE9E8];
    goto LABEL_6;
  }
  v23 = (char *)a1;
  if (!__CocoaSet.count.getter())
    goto LABEL_5;
LABEL_3:
  type metadata accessor for _SetStorage();
  v24 = static _SetStorage.allocate(capacity:)();
LABEL_6:
  v25 = (unint64_t)v23;
  v92 = v24;
  v26 = MEMORY[0x1E0DEE9B0];
  if (a2 == MEMORY[0x1E0DEA968])
  {
    if (v22)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for NSObject();
      lazy protocol witness table accessor for type NSObject and conformance NSObject();
      result = Set.Iterator.init(_cocoa:)();
      v25 = (unint64_t)v93;
      v87 = v94;
      v31 = v95;
      v32 = v96;
      v33 = v97;
    }
    else
    {
      v60 = -1 << *(_BYTE *)(v25 + 32);
      v61 = *(_QWORD *)(v25 + 56);
      v87 = (char *)(v25 + 56);
      v31 = ~v60;
      v62 = -v60;
      if (v62 < 64)
        v63 = ~(-1 << v62);
      else
        v63 = -1;
      v33 = v63 & v61;
      result = swift_bridgeObjectRetain();
      v32 = 0;
    }
    v83 = v31;
    v85 = v25 & 0x7FFFFFFFFFFFFFFFLL;
    v86 = (unint64_t)(v31 + 64) >> 6;
    v64 = MEMORY[0x1E0DEA968];
    v84 = v26 + 8;
    v65 = v25;
    if ((v25 & 0x8000000000000000) != 0)
      goto LABEL_58;
    while (1)
    {
      if (v33)
      {
        v66 = (v33 - 1) & v33;
        v67 = __clz(__rbit64(v33)) | (v32 << 6);
        v68 = v32;
      }
      else
      {
        v71 = v32 + 1;
        if (__OFADD__(v32, 1))
          goto LABEL_86;
        if (v71 >= v86)
        {
LABEL_83:
          v91 = 0;
LABEL_84:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          return v92;
        }
        v72 = *(_QWORD *)&v87[8 * v71];
        v68 = v32 + 1;
        if (!v72)
        {
          v68 = v32 + 2;
          if (v32 + 2 >= v86)
            goto LABEL_83;
          v72 = *(_QWORD *)&v87[8 * v68];
          if (!v72)
          {
            v68 = v32 + 3;
            if (v32 + 3 >= v86)
              goto LABEL_83;
            v72 = *(_QWORD *)&v87[8 * v68];
            if (!v72)
            {
              v68 = v32 + 4;
              if (v32 + 4 >= v86)
                goto LABEL_83;
              v72 = *(_QWORD *)&v87[8 * v68];
              if (!v72)
              {
                v68 = v32 + 5;
                if (v32 + 5 >= v86)
                  goto LABEL_83;
                v72 = *(_QWORD *)&v87[8 * v68];
                if (!v72)
                {
                  v73 = v32 + 6;
                  do
                  {
                    if (v86 == v73)
                      goto LABEL_83;
                    v72 = *(_QWORD *)&v87[8 * v73++];
                  }
                  while (!v72);
                  v68 = v73 - 1;
                }
              }
            }
          }
        }
        v66 = (v72 - 1) & v72;
        v67 = __clz(__rbit64(v72)) + (v68 << 6);
      }
      v70 = *(void **)(*(_QWORD *)(v25 + 48) + 8 * v67);
      v91 = v70;
      v74 = v70;
      while (1)
      {
        v90 = (uint64_t)v70;
        type metadata accessor for NSObject();
        v75 = swift_dynamicCast();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v10, v75 ^ 1u, 1, v64);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v64) == 1)
        {
          swift_release();
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          (*(void (**)(char *, uint64_t))(v80 + 8))(v10, v81);
          return 0;
        }
        v76 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        v76(v21, v10, v64);
        v77 = (uint64_t)v88;
        v76(v88, v21, v64);
        v78 = type metadata accessor for _NativeSet();
        result = _NativeSet._unsafeUpdate(with:)(v77, v78);
        v32 = v68;
        v33 = v66;
        v25 = v65;
        if ((v65 & 0x8000000000000000) == 0)
          break;
LABEL_58:
        v69 = __CocoaSet.Iterator.next()();
        if (!v69)
          goto LABEL_83;
        v90 = v69;
        type metadata accessor for NSObject();
        swift_dynamicCast();
        v70 = v91;
        v68 = v32;
        v66 = v33;
      }
    }
  }
  v86 = (int64_t)v14;
  if (v22)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject();
    lazy protocol witness table accessor for type NSObject and conformance NSObject();
    result = Set.Iterator.init(_cocoa:)();
    v25 = (unint64_t)v93;
    v85 = (uint64_t)v94;
    v28 = v95;
    v29 = v96;
    v30 = v97;
  }
  else
  {
    v34 = -1 << *(_BYTE *)(v25 + 32);
    v35 = *(_QWORD *)(v25 + 56);
    v85 = v25 + 56;
    v28 = ~v34;
    v36 = -v34;
    if (v36 < 64)
      v37 = ~(-1 << v36);
    else
      v37 = -1;
    v30 = v37 & v35;
    swift_bridgeObjectRetain();
    result = swift_retain();
    v29 = 0;
  }
  v79 = v28;
  v83 = v25 & 0x7FFFFFFFFFFFFFFFLL;
  v84 = (unint64_t)(v28 + 64) >> 6;
  v38 = v24 + 56;
  v82 = v26 + 8;
  v88 = (char *)v25;
  while ((v25 & 0x8000000000000000) != 0)
  {
    v43 = __CocoaSet.Iterator.next()();
    if (!v43)
      goto LABEL_82;
    v90 = v43;
    type metadata accessor for NSObject();
    swift_dynamicCast();
    v44 = v91;
    v42 = v29;
    v40 = v30;
LABEL_40:
    v90 = (uint64_t)v44;
    type metadata accessor for NSObject();
    v49 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, v49 ^ 1u, 1, a2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, a2) == 1)
    {
      swift_release();
      swift_release();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v7, v81);
      return 0;
    }
    v50 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v51 = v87;
    v50(v87, v7, a2);
    v52 = v86;
    v50((char *)v86, v51, a2);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v53 = -1 << *(_BYTE *)(v24 + 32);
    v54 = result & ~v53;
    v55 = v54 >> 6;
    if (((-1 << v54) & ~*(_QWORD *)(v38 + 8 * (v54 >> 6))) != 0)
    {
      v39 = __clz(__rbit64((-1 << v54) & ~*(_QWORD *)(v38 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0;
      v25 = (unint64_t)v88;
    }
    else
    {
      v56 = 0;
      v57 = (unint64_t)(63 - v53) >> 6;
      v25 = (unint64_t)v88;
      do
      {
        if (++v55 == v57 && (v56 & 1) != 0)
        {
          __break(1u);
          goto LABEL_85;
        }
        v58 = v55 == v57;
        if (v55 == v57)
          v55 = 0;
        v56 |= v58;
        v59 = *(_QWORD *)(v38 + 8 * v55);
      }
      while (v59 == -1);
      v39 = __clz(__rbit64(~v59)) + (v55 << 6);
    }
    *(_QWORD *)(v38 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
    result = ((uint64_t (*)(unint64_t, int64_t, uint64_t))v50)(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v11 + 72) * v39, v52, a2);
    ++*(_QWORD *)(v24 + 16);
    v29 = v42;
    v30 = v40;
  }
  if (v30)
  {
    v40 = (v30 - 1) & v30;
    v41 = __clz(__rbit64(v30)) | (v29 << 6);
    v42 = v29;
LABEL_39:
    v44 = *(void **)(*(_QWORD *)(v25 + 48) + 8 * v41);
    v91 = v44;
    v48 = v44;
    goto LABEL_40;
  }
  v45 = v29 + 1;
  if (!__OFADD__(v29, 1))
  {
    if (v45 >= v84)
      goto LABEL_82;
    v46 = *(_QWORD *)(v85 + 8 * v45);
    v42 = v29 + 1;
    if (!v46)
    {
      v42 = v29 + 2;
      if (v29 + 2 >= v84)
        goto LABEL_82;
      v46 = *(_QWORD *)(v85 + 8 * v42);
      if (!v46)
      {
        v42 = v29 + 3;
        if (v29 + 3 >= v84)
          goto LABEL_82;
        v46 = *(_QWORD *)(v85 + 8 * v42);
        if (!v46)
        {
          v42 = v29 + 4;
          if (v29 + 4 >= v84)
            goto LABEL_82;
          v46 = *(_QWORD *)(v85 + 8 * v42);
          if (!v46)
          {
            v42 = v29 + 5;
            if (v29 + 5 >= v84)
              goto LABEL_82;
            v46 = *(_QWORD *)(v85 + 8 * v42);
            if (!v46)
            {
              v47 = v29 + 6;
              while (v84 != v47)
              {
                v46 = *(_QWORD *)(v85 + 8 * v47++);
                if (v46)
                {
                  v42 = v47 - 1;
                  goto LABEL_38;
                }
              }
LABEL_82:
              v91 = 0;
              swift_release();
              goto LABEL_84;
            }
          }
        }
      }
    }
LABEL_38:
    v40 = (v46 - 1) & v46;
    v41 = __clz(__rbit64(v46)) + (v42 << 6);
    goto LABEL_39;
  }
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
  return result;
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AnyHashable(void *a1, uint64_t a2)
{
  id v4;
  _BOOL8 v5;
  _QWORD v7[5];

  outlined destroy of AnyHashable?(a2);
  v7[0] = a1;
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  v4 = a1;
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable?(a2, (uint64_t)v7);
  v5 = v7[3] != 0;
  outlined destroy of AnyHashable?((uint64_t)v7);
  return v5;
}

uint64_t outlined destroy of AnyHashable?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyHashable?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSObject and conformance NSObject()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type NSObject and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSObject and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject();
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject);
  }
  return result;
}

uint64_t outlined init with copy of AnyHashable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyHashable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void closure #1 in _CalendarICU.date(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  double v10;
  int v11;
  char v12;
  char v13;
  _BYTE v14[8];
  double v15;
  char v16;
  _BYTE v17[16];
  _BYTE v18[16];
  _BYTE v19[16];
  _BYTE v20[16];
  _BYTE v21[16];
  _BYTE v22[16];
  _BYTE v23[16];
  _BYTE v24[16];
  _BYTE v25[16];
  _BYTE v26[16];
  _BYTE v27[16];
  _BYTE v28[16];
  _BYTE v29[16];
  _BYTE v30[16];
  int v31;
  char v32;
  int v33;
  char v34;
  int v35;
  char v36;
  int v37;
  char v38;
  int v39;
  char v40;
  int v41;
  char v42;
  int v43;
  char v44;
  uint64_t v45;
  char v46;
  int v47;
  char v48;
  int v49;
  char v50;
  int v51;
  char v52;
  int v53;
  char v54;
  int v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  MEMORY[0x186DAA160](*(_QWORD *)(a1 + 32));
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)&v31, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v32 & 1) == 0)
    ucal_set();
  outlined init with take of LocalePreferences?(a2 + 48, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v34 & 1) == 0)
    ucal_set();
  outlined init with take of LocalePreferences?(a2 + 256, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v28, (uint64_t)&v35, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v36 & 1) == 0)
    ucal_set();
  outlined init with take of LocalePreferences?(a2 + 240, (uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v27, (uint64_t)&v37, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v38 & 1) == 0)
    ucal_set();
  outlined init with take of LocalePreferences?(a2 + 272, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v26, (uint64_t)&v39, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v40 & 1) == 0)
    ucal_set();
  outlined init with take of LocalePreferences?(a2 + 176, (uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v25, (uint64_t)&v41, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v42 & 1) == 0)
    ucal_set();
  outlined init with take of LocalePreferences?(a2 + 192, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)&v43, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v44 & 1) == 0)
    ucal_set();
  outlined init with take of LocalePreferences?(a2 + 64, (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v23, (uint64_t)&v45, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v46 & 1) == 0)
  {
    if (__OFSUB__(v45, 1))
      __break(1u);
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 96, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v22, (uint64_t)&v47, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v48 & 1) == 0)
    ucal_set();
  outlined init with take of LocalePreferences?(a2 + 80, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v21, (uint64_t)&v49, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v50 & 1) == 0)
    ucal_set();
  outlined init with take of LocalePreferences?(a2 + 112, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v51, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v52 & 1) == 0)
    ucal_set();
  outlined init with take of LocalePreferences?(a2 + 128, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v53, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v54 & 1) == 0)
    ucal_set();
  outlined init with take of LocalePreferences?(a2 + 144, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)&v55, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v56 & 1) == 0)
    ucal_set();
  outlined init with take of LocalePreferences?(a2 + 160, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)&v57, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if (v58)
    v5 = 0.0;
  else
    v5 = (double)v57 * 0.000000001;
  outlined init with take of LocalePreferences?(a2 + 281, (uint64_t)&v12, &demangling cache variable for type metadata for Bool?);
  outlined init with take of LocalePreferences?((uint64_t)&v12, (uint64_t)&v13, &demangling cache variable for type metadata for Bool?);
  if ((v13 & 1) != 0)
    ucal_set();
  v11 = 0;
  ucal_getMillis();
  v7 = v5 + v6 / 1000.0 + -978307200.0;
  v10 = v7;
  _CalendarICU._locked_timeZoneTransitionInterval(at:)(&v10, (uint64_t)v14);
  if ((v16 & 1) == 0)
    v7 = v7 - v15;
  v8 = v11 > 0;
  v9 = 0.0;
  if (v11 <= 0)
    v9 = v7;
  *(double *)a3 = v9;
  *(_BYTE *)(a3 + 8) = v8;
}

void _CalendarICU._locked_timeZoneTransitionInterval(at:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(double *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(double *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  char v19;

  v4 = *a1;
  if (*a1 < -3187299600.0
    || (type metadata accessor for _TimeZoneICU(),
        v16 = v4 + -172800.0 + 34400000.0,
        v17 = v4 + -172800.0,
        static _TimeZoneICU.nextDaylightSavingTimeTransition(forLocked:startingAt:limit:)(&v17, &v16, (uint64_t)&v18),
        (v19 & 1) != 0)
    || (v5 = v18, v6 = v18, v4 < v18))
  {
LABEL_8:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    return;
  }
  v7 = *(_QWORD *)(v2 + 48);
  ObjectType = swift_getObjectType();
  v18 = v6 + -1.0;
  v9 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v7 + 40);
  swift_unknownObjectRetain();
  v10 = v9(&v18, ObjectType, v7);
  swift_unknownObjectRelease();
  v11 = *(_QWORD *)(v2 + 48);
  v12 = swift_getObjectType();
  v18 = v6 + 1.0;
  v13 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v11 + 40);
  swift_unknownObjectRetain();
  v14 = v13(&v18, v12, v11);
  swift_unknownObjectRelease();
  v15 = v10 - v14;
  if (!__OFSUB__(v10, v14))
  {
    if (v15 >= 1 && v4 < v6 + (double)v15)
    {
      *(double *)a2 = v5;
      *(double *)(a2 + 8) = (double)v15;
      *(_BYTE *)(a2 + 16) = 0;
      return;
    }
    goto LABEL_8;
  }
  __break(1u);
}

void static _TimeZoneICU.nextDaylightSavingTimeTransition(forLocked:startingAt:limit:)(double *a1@<X1>, double *a2@<X2>, uint64_t a3@<X8>)
{
  double v4;

  v4 = (*a2 + 978307200.0) * 1000.0;
  if (v4 >= (*a1 + 978307200.0) * 1000.0)
  {
    ucal_getMillis();
    ucal_setMillis();
    if (ucal_getTimeZoneTransitionDate() && v4 >= 0.0)
    {
      *(double *)a3 = 0.0 / 1000.0 + -978307200.0;
      *(_BYTE *)(a3 + 8) = 0;
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 1;
    }
    ucal_setMillis();
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 1;
  }
}

uint64_t type metadata accessor for _TimeZoneICU()
{
  return objc_opt_self();
}

uint64_t closure #1 in _CalendarICU.date(byAdding:to:wrappingComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  double v17;
  double v18;
  _BYTE v19[16];
  _BYTE v20[16];
  _BYTE v21[16];
  _BYTE v22[16];
  _BYTE v23[16];
  _BYTE v24[16];
  _BYTE v25[16];
  _BYTE v26[16];
  _BYTE v27[16];
  _BYTE v28[16];
  _BYTE v29[16];
  _BYTE v30[16];
  _BYTE v31[16];
  _BYTE v32[16];
  _BYTE v33[16];
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  _BYTE v42[16];
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v8 = fmax(a5, -2.11845067e11);
  if (a5 <= 1.59271755e13)
    v9 = v8;
  else
    v9 = 1.59271755e13;
  MEMORY[0x186DAA160](*(_QWORD *)(a1 + 32));
  v10 = 0.0;
  v11 = trunc(v9);
  if ((*(_QWORD *)&v9 & 0x7FF0000000000000) != 0x7FF0000000000000)
    v10 = v9 - v11;
  if (v10 >= 0.0)
    v12 = v10;
  else
    v12 = v10 + 1.0;
  ucal_setMillis();
  outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v33, (uint64_t)&v34, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v35 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(0, v34, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 48, (uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)&v36, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v37 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(1, v36, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 272, (uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v31, (uint64_t)&v38, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v39 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(17, v38, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 64, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)&v40, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v41 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(2, v40, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 256, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)&v43, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v44 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(3, v43, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 240, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v28, (uint64_t)&v45, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v46 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(4, v45, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 192, (uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v27, (uint64_t)&v47, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v48 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(8, v47, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 224, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v26, (uint64_t)&v49, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v50 & 1) == 0)
  {
    v13 = v49;
    outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)v42, (uint64_t *)&demangling cache variable for type metadata for Int?);
    if (v42[8] == 1)
      _CalendarICU._locked_add(_:amount:wrap:status:)(3, v13, a3 & 1);
  }
  outlined init with take of LocalePreferences?(a2 + 80, (uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v25, (uint64_t)&v51, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v52 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(5, v51, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 96, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)&v53, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v54 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(6, v53, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 176, (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v23, (uint64_t)&v55, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v56 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(7, v55, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 112, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v22, (uint64_t)&v57, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v58 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(11, v57, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 128, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v21, (uint64_t)&v59, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v60 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(12, v59, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 144, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v61, (uint64_t *)&demangling cache variable for type metadata for Int?);
  if ((v62 & 1) == 0)
    _CalendarICU._locked_add(_:amount:wrap:status:)(13, v61, a3 & 1);
  outlined init with take of LocalePreferences?(a2 + 160, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v63, (uint64_t *)&demangling cache variable for type metadata for Int?);
  v14 = v64;
  v15 = v63;
  result = ucal_getMillis();
  v18 = (double)v15 * 0.000000001;
  if (v14)
    v18 = 0.0;
  *(double *)a4 = v18 + v12 + v17 / 1000.0 + -978307200.0;
  *(_BYTE *)(a4 + 8) = 0;
  return result;
}

uint64_t outlined init with take of LocalePreferences?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x186DA9D4C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void _CalendarICU._locked_add(_:amount:wrap:status:)(int a1, uint64_t a2, char a3)
{
  int v5;
  int Limit;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v17;
  int v18;
  int v19;
  double v20;
  double v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  double v28;
  double v29;
  double v30;
  char v31;

  if (a1 == 14)
  {
LABEL_2:
    if ((a3 & 1) == 0)
    {
LABEL_25:
      v17 = 0;
      v18 = 0;
      v19 = 0;
      goto LABEL_34;
    }
LABEL_3:
    v5 = 0;
LABEL_4:
    Limit = ucal_getLimit();
    v7 = ucal_getLimit();
    v8 = v7 - Limit;
    if (__OFSUB__(v7, Limit))
    {
      __break(1u);
    }
    else
    {
      v9 = v8 + 1;
      if (!__OFADD__(v8, 1))
      {
        v10 = ucal_get();
        v11 = v10 + a2;
        if (!__OFADD__(v10, (_DWORD)a2))
        {
          v12 = __OFSUB__(v11, Limit);
          v13 = v11 - Limit;
          if (!v12)
          {
            if (v9)
            {
              if (v13 == 0x80000000 && v9 == -1)
                goto LABEL_64;
              v14 = v13 % v9;
              if (v14 < 0)
              {
                v12 = __OFADD__(v14, v9);
                v14 += v9;
                if (v12)
                  goto LABEL_66;
              }
              v15 = v14 + Limit;
              if (!__OFADD__(v14, Limit))
              {
                if (v15 >= v10 || a2 < 1)
                {
                  if (__OFSUB__(v15, v10))
                  {
LABEL_65:
                    __break(1u);
LABEL_66:
                    __break(1u);
                    return;
                  }
                  if (!v5)
                  {
                    v17 = 0;
                    v18 = 0;
                    v19 = 0;
                    goto LABEL_34;
                  }
                }
                else
                {
                  ucal_getMillis();
                  v21 = v20 / 1000.0 + -978307200.0;
                  if (a1 == 14 || (a1 - 10) > 3)
                    LOBYTE(v22) = 6;
                  else
                    v22 = 0x5040303u >> (8 * (a1 - 10));
                  _CalendarICU.totalSecondsInSmallUnits(_:status:)(a1);
                  LOBYTE(v29) = v22;
                  v30 = v21;
                  _CalendarICU._locked_setToFirstInstant(of:at:)((unsigned __int8 *)&v29);
                  if ((v5 & 1) == 0)
                  {
                    v17 = 0;
                    v18 = 0;
                    v19 = 0;
                    goto LABEL_34;
                  }
                }
LABEL_31:
                v23 = ucal_get();
                v24 = ucal_get();
                v18 = v23 + v24;
                if (__OFADD__(v23, v24))
                {
LABEL_63:
                  __break(1u);
LABEL_64:
                  __break(1u);
                  goto LABEL_65;
                }
                v17 = ucal_get();
                v19 = 1;
LABEL_34:
                ucal_getMillis();
                ucal_setMillis();
                if (!v19)
                  return;
                v25 = ucal_get();
                v26 = ucal_get();
                v27 = v25 + v26;
                if (!__OFADD__(v25, v26))
                {
                  if (!__OFSUB__(v18, v27))
                  {
                    if (v18 != v27)
                    {
                      ucal_getMillis();
                      ucal_setMillis();
                      if (ucal_get() != v17)
LABEL_39:
                        ucal_setMillis();
                    }
                    return;
                  }
                  goto LABEL_62;
                }
LABEL_61:
                __break(1u);
LABEL_62:
                __break(1u);
                goto LABEL_63;
              }
LABEL_60:
              __break(1u);
              goto LABEL_61;
            }
LABEL_59:
            __break(1u);
            goto LABEL_60;
          }
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
    }
    __break(1u);
    goto LABEL_57;
  }
  switch(a1)
  {
    case 9:
    case 10:
    case 11:
    case 21:
      switch(a1)
      {
        case 9:
          if ((a3 & 1) == 0)
            goto LABEL_31;
          v5 = 1;
          break;
        case 10:
        case 11:
          if ((a3 & 1) == 0)
            goto LABEL_25;
          goto LABEL_3;
        case 21:
          goto LABEL_2;
        default:
          v5 = 0;
          v17 = 0;
          v18 = 0;
          v19 = 0;
          if ((a3 & 1) == 0)
            goto LABEL_34;
          goto LABEL_4;
      }
      goto LABEL_4;
    case 12:
      if ((a3 & 1) == 0)
        goto LABEL_25;
      goto LABEL_3;
    case 13:
      if ((a3 & 1) == 0)
        goto LABEL_25;
      goto LABEL_3;
    default:
      if ((a3 & 1) != 0)
        ucal_roll();
      else
        ucal_add();
      ucal_getMillis();
      if (a2 >= 1)
      {
        v29 = v28 / 1000.0 + -978307200.0;
        _CalendarICU._locked_timeZoneTransitionInterval(at:)(&v29, (uint64_t)&v30);
        if ((v31 & 1) == 0)
          goto LABEL_39;
      }
      break;
  }
}

uint64_t _NativeSet._unsafeUpdate(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = v2;
  v7 = *v2;
  v9 = *(_QWORD *)(v8 + 24);
  v25 = v10;
  v23[1] = v9;
  result = dispatch thunk of Hashable._rawHashValue(seed:)();
  v12 = -1 << *(_BYTE *)(v7 + 32);
  v13 = result & ~v12;
  v14 = *(_QWORD *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13;
  v24 = v4;
  if ((v14 & 1) != 0)
  {
    v15 = ~v12;
    v16 = *(_QWORD *)(v4 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v17(v6, *(_QWORD *)(v7 + 48) + v16 * v13, v3);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v6, v3);
      if ((v18 & 1) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v24 + 40))(*(_QWORD *)(*(_QWORD *)v23[0] + 48) + v16 * v13, v25, v3);
      v13 = (v13 + 1) & v15;
      if (((*(_QWORD *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v19 = *(_QWORD *)v23[0];
    if (*(_QWORD *)(*(_QWORD *)v23[0] + 16) >= *(_QWORD *)(*(_QWORD *)v23[0] + 24))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v19 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v13;
      result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))(*(_QWORD *)(v19 + 48) + *(_QWORD *)(v24 + 72) * v13, v25, v3);
      v20 = *(_QWORD *)(v19 + 16);
      v21 = __OFADD__(v20, 1);
      v22 = v20 + 1;
      if (!v21)
      {
        *(_QWORD *)(v19 + 16) = v22;
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for _CalendarAutoupdating()
{
  return objc_opt_self();
}

void sub_18180FD28(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  NSData result;

  __asm { BR              X10 }
  return result;
}

id sub_18180FD90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v3 = v0;
  v4 = v1;
  v5 = BYTE2(v1);
  v6 = BYTE3(v1);
  v7 = BYTE4(v1);
  v8 = BYTE5(v1);
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, &v3, BYTE6(v1));
}

char *__DataStorage.bridgedReference(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v6;
  char *v7;
  char *v8;
  char *v9;

  if (a1 == a2)
    return (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_init);
  v6 = objc_allocWithZone((Class)type metadata accessor for __NSSwiftData());
  swift_retain();
  v7 = (char *)objc_msgSend(v6, sel_init);
  *(_QWORD *)&v7[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = v2;
  v8 = v7;
  swift_release();
  v9 = &v8[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(_QWORD *)v9 = a1;
  *((_QWORD *)v9 + 1) = a2;
  v9[16] = 0;

  return v8;
}

uint64_t type metadata accessor for __NSSwiftData()
{
  return objc_opt_self();
}

id _NSXPCSerializationDataForObject(_QWORD *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (!*a2)
    return 0;
  v4 = a1[1];
  if (v4 <= v2)
    return 0;
  v5 = *(_BYTE *)(*a1 + v2);
  if ((v5 & 0xF0) != 0x40)
    return 0;
  v6 = v5 & 0xF;
  v14 = v6;
  if ((v5 & 0xF) != 0)
  {
    v7 = v2 + 1;
    v15[0] = v2 + 1;
    if (v2 + 1 < v4)
    {
      if ((_DWORD)v6 != 15
        || _getIntAtMarker(a1, &v14, v2 + 1, v15)
        && (v7 = v15[0] + 1, v8 = v15[0] == -1, v9 = v8 << 63 >> 63, v9 == v8)
        && (v9 & 0x8000000000000000) == 0
        && (v4 = a1[1], v4 > v7)
        && (v6 = v14, (v14 & 0x8000000000000000) == 0))
      {
        v10 = (v6 - 1) >> 63;
        if (__CFADD__(v7, v6 - 1))
          ++v10;
        v11 = v10 << 63 >> 63;
        v12 = v11 != v10;
        if (v4 > v7 + v6 - 1 && !v12 && (v11 & 0x8000000000000000) == 0)
          return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", *a1 + v7, v6);
      }
    }
    return 0;
  }
  return (id)objc_msgSend(MEMORY[0x1E0C99D50], "data");
}

void sub_181810E10(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ___writeJSONArray_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char __src;
  uint64_t v12;

  v6 = result;
  v12 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v7 = *(_QWORD *)(result + 32);
    __src = 44;
    result = _appendBytes(&__src, 1uLL, v7, 44);
    if ((result & 1) == 0)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 24) = 0;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 24))
    {
      if ((*(_BYTE *)(v6 + 48) & 1) != 0)
      {
        v8 = *(_QWORD *)(v6 + 32);
        v10 = 10;
        result = _appendBytes(&v10, 1uLL, v8, 10);
        if ((result & 1) == 0)
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 24) = 0;
      }
    }
  }
  v9 = *(_QWORD *)(v6 + 40);
  if (*(_BYTE *)(*(_QWORD *)(v9 + 8) + 24))
  {
    if ((*(_BYTE *)(v6 + 48) & 1) != 0)
    {
      result = _appendBytes(*(char **)(v6 + 56), 2 * *(_QWORD *)(v6 + 64) + 2, *(_QWORD *)(v6 + 32), 2 * *(_BYTE *)(v6 + 64));
      v9 = *(_QWORD *)(v6 + 40);
      if ((result & 1) == 0)
      {
        *(_BYTE *)(*(_QWORD *)(v9 + 8) + 24) = 0;
        v9 = *(_QWORD *)(v6 + 40);
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v9 + 8) + 24))
  {
    result = _writeJSONValue(*(_QWORD *)(v6 + 32), a2, *(_QWORD *)(v6 + 64) + 1, *(_QWORD *)(v6 + 48));
    v9 = *(_QWORD *)(v6 + 40);
    if ((result & 1) == 0)
    {
      *(_BYTE *)(*(_QWORD *)(v9 + 8) + 24) = 0;
      v9 = *(_QWORD *)(v6 + 40);
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(v9 + 8) + 24))
    *a4 = 1;
  return result;
}

uint64_t ___writeJSONObject_block_invoke(uint64_t result, CFStringRef theString, uint64_t a3, _BYTE *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char __src;
  uint64_t v19;

  v7 = (uint64_t *)result;
  v19 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(result + 40);
  if (*(_BYTE *)(*(_QWORD *)(v8 + 8) + 24))
  {
    if ((*(_BYTE *)(result + 56) & 1) != 0)
    {
      result = _appendBytes(*(char **)(result + 64), 2 * *(_QWORD *)(result + 72) + 2, *(_QWORD *)(result + 32), 2 * *(_BYTE *)(result + 72));
      v8 = v7[5];
      if ((result & 1) == 0)
      {
        *(_BYTE *)(*(_QWORD *)(v8 + 8) + 24) = 0;
        v8 = v7[5];
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 8) + 24))
  {
    result = _writeJSONString(v7[4], theString, v7[7]);
    v8 = v7[5];
    if ((result & 1) == 0)
    {
      *(_BYTE *)(*(_QWORD *)(v8 + 8) + 24) = 0;
      v8 = v7[5];
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 8) + 24))
  {
    if ((v7[7] & 1) != 0)
    {
      v9 = v7[4];
      __src = 32;
      result = _appendBytes(&__src, 1uLL, v9, 32);
      v8 = v7[5];
      if ((result & 1) == 0)
      {
        *(_BYTE *)(*(_QWORD *)(v8 + 8) + 24) = 0;
        v8 = v7[5];
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 8) + 24))
  {
    v10 = v7[4];
    v17 = 58;
    result = _appendBytes(&v17, 1uLL, v10, 58);
    v8 = v7[5];
    if ((result & 1) == 0)
    {
      *(_BYTE *)(*(_QWORD *)(v8 + 8) + 24) = 0;
      v8 = v7[5];
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 8) + 24))
  {
    if ((v7[7] & 1) != 0)
    {
      v11 = v7[4];
      v16 = 32;
      result = _appendBytes(&v16, 1uLL, v11, 32);
      v8 = v7[5];
      if ((result & 1) == 0)
      {
        *(_BYTE *)(*(_QWORD *)(v8 + 8) + 24) = 0;
        v8 = v7[5];
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 8) + 24))
  {
    result = _writeJSONValue(v7[4], a3, v7[9] + 1, v7[7]);
    v8 = v7[5];
    if ((result & 1) == 0)
    {
      *(_BYTE *)(*(_QWORD *)(v8 + 8) + 24) = 0;
      v8 = v7[5];
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 8) + 24) && *(_QWORD *)(*(_QWORD *)(v7[6] + 8) + 24) < (unint64_t)v7[10])
  {
    v12 = v7[4];
    v15 = 44;
    result = _appendBytes(&v15, 1uLL, v12, 44);
    if ((result & 1) == 0)
      *(_BYTE *)(*(_QWORD *)(v7[5] + 8) + 24) = 0;
    v8 = v7[5];
    if (*(_BYTE *)(*(_QWORD *)(v8 + 8) + 24))
    {
      if ((v7[7] & 1) != 0)
      {
        v13 = v7[4];
        v14 = 10;
        result = _appendBytes(&v14, 1uLL, v13, 10);
        v8 = v7[5];
        if ((result & 1) == 0)
        {
          *(_BYTE *)(*(_QWORD *)(v8 + 8) + 24) = 0;
          v8 = v7[5];
        }
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 8) + 24))
    ++*(_QWORD *)(*(_QWORD *)(v7[6] + 8) + 24);
  else
    *a4 = 1;
  return result;
}

uint64_t _appendBytes@<X0>(char *__src@<X1>, size_t __n@<X2>, uint64_t a3@<X0>, char a4@<W8>)
{
  size_t v4;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = __n;
  v7 = *(_DWORD *)(a3 + 16);
  if (v7 == 1)
  {
    v12 = *(_QWORD *)(a3 + 32);
    v11 = *(_QWORD *)(a3 + 40);
    if (v11 + __n >= v12)
    {
      if (v11 + __n <= 2 * v12)
        v14 = 2 * v12;
      else
        v14 = v11 + __n;
      v13 = MEMORY[0x186DA80E4](*(_QWORD *)(a3 + 24), v14, 573190747, 0);
      *(_QWORD *)(a3 + 24) = v13;
      *(_QWORD *)(a3 + 32) = v14;
      v11 = *(_QWORD *)(a3 + 40);
    }
    else
    {
      v13 = *(_QWORD *)(a3 + 24);
    }
    memcpy((void *)(v13 + v11), __src, v4);
    *(_QWORD *)(a3 + 40) += v4;
    goto LABEL_18;
  }
  if (v7 != 2)
    return a4 & 1;
  if (!__n)
  {
LABEL_18:
    a4 = 1;
    return a4 & 1;
  }
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = objc_msgSend(*(id *)(a3 + 8), "write:maxLength:", &__src[v8], v4);
    if (v10 < 0)
      break;
    if (v10)
    {
      v8 += v10;
      *(_QWORD *)(a3 + 72) += v10;
      a4 = 1;
      v4 -= v10;
      if (!v4)
        return a4 & 1;
    }
    else
    {
      if (++v9 >= 0xBu)
      {
        v15 = MEMORY[0x1E0C9AA70];
        v16 = 640;
        goto LABEL_21;
      }
      pthread_yield_np();
    }
  }
  v15 = MEMORY[0x1E0C9AA70];
  v16 = 512;
LABEL_21:
  objc_msgSend((id)a3, "setFailure:", +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), v16, v15));
  a4 = 0;
  return a4 & 1;
}

uint64_t _writeJSONString(uint64_t a1, CFStringRef theString, char a3)
{
  uint64_t v6;
  uint64_t result;
  void *v8;
  NSString *v9;

  if (*(_DWORD *)(a1 + 16) == 1)
    v6 = *(_QWORD *)(a1 + 40);
  else
    v6 = 0;
  if ((_convertJSONString((_QWORD *)a1, theString, a3, 1) & 1) != 0
    || (*(_QWORD *)(a1 + 40) = v6, (_convertJSONString((_QWORD *)a1, theString, a3, 0) & 1) != 0))
  {
    if (*(_DWORD *)(a1 + 16) == 2)
    {
      result = _appendBytes(*(char **)(a1 + 24), *(_QWORD *)(a1 + 40), a1, 2);
      if (!(_DWORD)result)
        return result;
      *(_QWORD *)(a1 + 40) = 0;
    }
    return 1;
  }
  else
  {
    v8 = (void *)MEMORY[0x1E0C99D80];
    v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("The string %p failed to convert to UTF8"), theString);
    objc_msgSend((id)a1, "setFailure:", +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3852, objc_msgSend(v8, "dictionaryWithObjectsAndKeys:", v9, *MEMORY[0x1E0C9AFA8], 0)));
    return 0;
  }
}

uint64_t _convertJSONString(_QWORD *a1, CFStringRef theString, char a3, int a4)
{
  CFIndex Length;
  CFStringEncoding v9;
  uint64_t v10;
  const char *CStringPtr;
  UInt8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  CFIndex v19;
  CFIndex v20;
  uint64_t v21;
  CFIndex Bytes;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CFIndex v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFIndex v50;
  CFStringEncoding encoding;
  const __CFString *theStringa;
  CFIndex usedBufLen[2];
  CFRange v54;

  usedBufLen[1] = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(theString);
  if (a4)
    v9 = 0;
  else
    v9 = 134217984;
  theStringa = theString;
  encoding = v9;
  CStringPtr = CFStringGetCStringPtr(theString, v9);
  v12 = (UInt8 *)CStringPtr;
  if (!CStringPtr)
  {
    if (a1[8] < (unint64_t)Length)
      -[_NSJSONWriter resizeTemporaryBuffer:](a1, Length);
    v12 = (UInt8 *)a1[7];
  }
  v14 = a1[4];
  v13 = a1[5];
  v15 = v13 + 6 * Length + 3;
  if (v15 >= v14)
  {
    if (v15 <= 2 * v14)
      v17 = 2 * v14;
    else
      v17 = v13 + 6 * Length + 3;
    v16 = MEMORY[0x186DA80E4](a1[3], v17, 573190747, 0);
    a1[3] = v16;
    a1[4] = v17;
    v13 = a1[5];
  }
  else
  {
    v16 = a1[3];
  }
  a1[5] = v13 + 1;
  *(_BYTE *)(v16 + v13) = 34;
  if (Length < 1)
  {
LABEL_45:
    v47 = a1[3];
    v48 = a1[5];
    a1[5] = v48 + 1;
    *(_BYTE *)(v47 + v48) = 34;
    return 1;
  }
  v18 = 0;
  v19 = Length;
  while (1)
  {
    usedBufLen[0] = 0;
    if (CStringPtr)
    {
      v19 = 0;
      usedBufLen[0] = Length;
LABEL_20:
      v23 = 0;
      while (1)
      {
        if (a4 && (char)v12[v23] < 0)
          return 0;
        v24 = v12[v23];
        if (v24 == 92)
        {
          v29 = a1[3];
          v30 = a1[5];
          a1[5] = v30 + 1;
          *(_BYTE *)(v29 + v30) = 92;
          v31 = a1[3];
          v32 = a1[5];
          a1[5] = v32 + 1;
          *(_BYTE *)(v31 + v32) = 92;
        }
        else if (v24 == 34)
        {
          v25 = a1[3];
          v26 = a1[5];
          a1[5] = v26 + 1;
          *(_BYTE *)(v25 + v26) = 92;
          v27 = a1[3];
          v28 = a1[5];
          a1[5] = v28 + 1;
          *(_BYTE *)(v27 + v28) = 34;
        }
        else
        {
          if ((a3 & 8) == 0 || v24 != 47)
          {
            if (v24 != 47)
            {
              v33 = a1[3];
              v34 = a1[5];
              a1[5] = v34 + 1;
              if (v24 > 0x1F)
              {
                *(_BYTE *)(v33 + v34) = v24;
              }
              else
              {
                *(_BYTE *)(v33 + v34) = 92;
                switch(v24)
                {
                  case 8u:
                    v35 = a1[3];
                    v36 = a1[5];
                    a1[5] = v36 + 1;
                    v37 = 98;
                    goto LABEL_43;
                  case 9u:
                    v35 = a1[3];
                    v36 = a1[5];
                    a1[5] = v36 + 1;
                    v37 = 116;
                    goto LABEL_43;
                  case 0xAu:
                    v35 = a1[3];
                    v36 = a1[5];
                    a1[5] = v36 + 1;
                    v37 = 110;
                    goto LABEL_43;
                  case 0xCu:
                    v35 = a1[3];
                    v36 = a1[5];
                    a1[5] = v36 + 1;
                    v37 = 102;
                    goto LABEL_43;
                  case 0xDu:
                    v35 = a1[3];
                    v36 = a1[5];
                    a1[5] = v36 + 1;
                    v37 = 114;
LABEL_43:
                    *(_BYTE *)(v35 + v36) = v37;
                    break;
                  default:
                    v42 = a1[3];
                    v43 = a1[5];
                    a1[5] = v43 + 1;
                    *(_BYTE *)(v42 + v43) = 117;
                    v50 = v18;
                    v44 = Length;
                    v45 = CStringPtr;
                    v46 = v10;
                    snprintf_l((char *)(a1[3] + a1[5]), 5uLL, 0, "%04x", v24);
                    v10 = v46;
                    CStringPtr = v45;
                    Length = v44;
                    v18 = v50;
                    a1[5] += 4;
                    break;
                }
              }
              goto LABEL_35;
            }
            v38 = a1[3];
            v39 = a1[5];
            a1[5] = v39 + 1;
            *(_BYTE *)(v38 + v39) = 92;
          }
          v40 = a1[3];
          v41 = a1[5];
          a1[5] = v41 + 1;
          *(_BYTE *)(v40 + v41) = 47;
        }
LABEL_35:
        if ((unint64_t)++v23 >= usedBufLen[0])
          goto LABEL_44;
      }
    }
    v20 = v18;
    v54.location = v18;
    v54.length = v19;
    v21 = v10;
    Bytes = CFStringGetBytes(theStringa, v54, encoding, 0, 0, v12, a1[8], usedBufLen);
    if (!Bytes)
      return 0;
    v10 = v21;
    CStringPtr = 0;
    v19 -= Bytes;
    v18 = Bytes + v20;
    if (usedBufLen[0])
      goto LABEL_20;
LABEL_44:
    if (v19 <= 0)
      goto LABEL_45;
  }
}

uint64_t _writeJSONValue(void *a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  void *v9;
  CFTypeID v10;
  char v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  NSString *v17;
  _QWORD __src[2];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (_NSIsNSString())
    return _writeJSONString((uint64_t)a1, a2, a4);
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    __src[0] = 0;
    __src[1] = 0;
    v19 = 0;
    if (!a2 || (-[__CFString decimalValue](a2, "decimalValue"), (__src[0] & 0x1F00) != 0x1000))
    {
      v9 = (void *)-[__CFString stringValue](a2, "stringValue");
      return objc_msgSend(a1, "appendString:range:", v9, 0, objc_msgSend(v9, "length"));
    }
    v15 = (void *)MEMORY[0x1E0C99DA0];
    v16 = *MEMORY[0x1E0C99778];
    v17 = (NSString *)CFSTR("NaN number in JSON write");
LABEL_22:
    objc_exception_throw((id)objc_msgSend(v15, "exceptionWithName:reason:userInfo:", v16, v17, 0));
  }
  if (!_NSIsNSNumber())
  {
    if (_NSIsNSDictionary())
      return _writeJSONObject((uint64_t)a1, a2, a3, a4);
    if (_NSIsNSArray())
      return _writeJSONArray((uint64_t)a1, a2, a3, a4);
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      LODWORD(__src[0]) = 1819047278;
      return _appendBytes((char *)__src, 4uLL, (uint64_t)a1, 110);
    }
    v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Invalid type in JSON write (%@)"), objc_opt_class());
    v15 = (void *)MEMORY[0x1E0C99DA0];
    v16 = *MEMORY[0x1E0C99778];
    goto LABEL_22;
  }
  v10 = CFGetTypeID(a2);
  if (v10 != CFBooleanGetTypeID())
    return _writeJSONNumber((uint64_t)a1, a2);
  if (-[__CFString BOOLValue](a2, "BOOLValue"))
  {
    v11 = v20;
    v12 = (char *)&_writeJSONBoolean_trueData;
    v13 = (uint64_t)a1;
    v14 = 4;
  }
  else
  {
    v11 = v20;
    v12 = "false";
    v13 = (uint64_t)a1;
    v14 = 5;
  }
  return _appendBytes(v12, v14, v13, v11);
}

uint64_t _writeJSONObject(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t appended;
  char v23;
  char v24;
  _QWORD v26[2];
  _QWORD v27[10];
  _QWORD v28[2];
  uint64_t (*v29)(uint64_t, CFStringRef, uint64_t, char *);
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  _QWORD __src[4];
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) != 0)
  {
    v11 = 2 * a3;
    MEMORY[0x1E0C80A78](a1);
    v10 = (char *)v26 - ((v11 + 17) & 0xFFFFFFFFFFFFFFF0);
    bzero(v10, 2 * a3 + 2);
    memset(v10, 32, 2 * a3 + 2);
    LOBYTE(__src[0]) = 123;
    if (_appendBytes((char *)__src, 1uLL, a1, 123))
    {
      LOBYTE(__src[0]) = 10;
      if ((_appendBytes((char *)__src, 1uLL, a1, 10) & 1) != 0)
      {
        v8 = objc_msgSend(a2, "count");
        v9 = v8;
        if (v8)
          goto LABEL_8;
        LOBYTE(__src[0]) = 10;
        if (_appendBytes((char *)__src, 1uLL, a1, 10))
        {
          if (!a3 || _appendBytes((char *)v26 - ((v11 + 17) & 0xFFFFFFFFFFFFFFF0), 2 * a3, a1, v24))
          {
LABEL_36:
            LOBYTE(__src[0]) = 125;
            return _appendBytes((char *)__src, 1uLL, a1, 125);
          }
        }
      }
    }
    return 0;
  }
  LOBYTE(__src[0]) = 123;
  if (!_appendBytes((char *)__src, 1uLL, a1, 123))
    return 0;
  v8 = objc_msgSend(a2, "count");
  v9 = v8;
  if (!v8)
    goto LABEL_36;
  v10 = 0;
LABEL_8:
  __src[0] = 0;
  __src[1] = __src;
  __src[2] = 0x2020000000;
  __src[3] = 1;
  v38 = 0;
  v39 = &v38;
  v40 = 0x2020000000;
  v12 = MEMORY[0x1E0C809B0];
  v41 = 1;
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v29 = ___writeJSONObject_block_invoke;
  v30 = &unk_1E0F51DC0;
  v31 = a1;
  v32 = &v38;
  v35 = v10;
  v36 = a3;
  v33 = __src;
  v34 = a4;
  v37 = v9;
  if ((a4 & 2) != 0)
  {
    v26[1] = v26;
    v13 = MEMORY[0x1E0C80A78](v8);
    v14 = &v26[-128];
    v15 = MEMORY[0x1E0C80A78](v13);
    v16 = &v26[-128];
    MEMORY[0x1E0C80A78](v15);
    v17 = &v26[-128];
    if (v9 >= 0x81)
    {
      v14 = malloc_type_malloc(8 * v9, 0x80040B8603338uLL);
      v16 = malloc_type_malloc(8 * v9, 0x80040B8603338uLL);
      v17 = malloc_type_malloc(8 * v9, 0x100004000313F17uLL);
    }
    objc_msgSend(a2, "getObjects:andKeys:count:", v16, v14, v9);
    v18 = 0;
    do
    {
      if ((objc_msgSend((id)v14[v18], "isNSString") & 1) == 0)
      {
        if (v9 >= 0x81)
        {
          free(v14);
          free(v16);
          free(v17);
        }
        objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Invalid (non-string) key in JSON dictionary"), 0));
      }
      ++v18;
    }
    while (v9 != v18);
    v19 = 0;
    do
    {
      v17[v19] = v19;
      ++v19;
    }
    while (v9 != v19);
    v27[5] = v12;
    v27[6] = 3221225472;
    v27[7] = ___writeJSONObject_block_invoke_2;
    v27[8] = &__block_descriptor_40_e11_q24__0q8q16l;
    v27[9] = v14;
    CFSortIndexes();
    v20 = 0;
    v43 = 0;
    do
    {
      v29((uint64_t)v28, (CFStringRef)v14[v17[v20]], v16[v17[v20]], &v43);
      if (v43)
        v21 = 1;
      else
        v21 = v9 - 1 == v20;
      ++v20;
    }
    while (!v21);
    if (v9 >= 0x81)
    {
      free(v14);
      free(v16);
      free(v17);
    }
  }
  else
  {
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = ___writeJSONObject_block_invoke_3;
    v27[3] = &unk_1E0F51E08;
    v27[4] = v28;
    objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v27);
  }
  if (*((_BYTE *)v39 + 24)
    && ((a4 & 1) == 0
     || (v43 = 10, _appendBytes(&v43, 1uLL, a1, 10))
     && (!a3 || _appendBytes(v10, 2 * a3, a1, v23))))
  {
    v43 = 125;
    appended = _appendBytes(&v43, 1uLL, a1, 125);
  }
  else
  {
    appended = 0;
  }
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(__src, 8);
  return appended;
}

void sub_181812638(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t _writeJSONNumber(uint64_t a1, id a2)
{
  __objc2_class *Class;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  size_t v11;
  char *v13;
  uint64_t v14;
  int v15;
  double v16;
  unsigned int v17;
  void *v18;
  int v19;
  void *v20;
  uint64_t v21;
  NSString *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  Class = (__objc2_class *)object_getClass(a2);
  if (Class == _NSJSONRoundTrippingNumber)
  {
    v9 = (const char *)objc_msgSend((id)objc_msgSend(a2, "stringValue"), "UTF8String");
    if (v9)
    {
      v10 = (char *)v9;
      v11 = strlen(v9);
      return _appendBytes(v10, v11, a1, v25);
    }
    qword_1EDC47C18 = (uint64_t)"Unable to allocate UTF-8 representation of JSON number.";
    __break(1u);
    v20 = (void *)MEMORY[0x1E0C99DA0];
    v21 = *MEMORY[0x1E0C99778];
    v22 = (NSString *)CFSTR("Invalid number value (NaN) in JSON write");
LABEL_51:
    objc_exception_throw((id)objc_msgSend(v20, "exceptionWithName:reason:userInfo:", v21, v22, 0));
  }
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 == 2)
  {
    MEMORY[0x1E0C80A78](Class);
    v13 = (char *)&v23;
    v23 = 0u;
    v24 = 0u;
  }
  else if (v5 == 1)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    if (v6 + 33 >= v7)
    {
      if (v6 + 33 <= 2 * v7)
        v14 = 2 * v7;
      else
        v14 = v6 + 33;
      v8 = MEMORY[0x186DA80E4](*(_QWORD *)(a1 + 24), v14, 573190747, 0);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = v14;
      v6 = *(_QWORD *)(a1 + 40);
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 24);
    }
    v13 = (char *)(v8 + v6);
  }
  else
  {
    v13 = 0;
  }
  v15 = *(char *)objc_msgSend(a2, "objCType");
  if (v15 <= 80)
  {
    if (v15 > 72)
    {
      if (v15 == 73)
      {
        *(_QWORD *)&v24 = objc_msgSend(a2, "unsignedIntValue");
        goto LABEL_31;
      }
      if (v15 == 76)
      {
        objc_msgSend(a2, "unsignedLongValue");
        v17 = snprintf_l(v13, 0x20uLL, 0, "%lu");
        goto LABEL_38;
      }
    }
    else
    {
      if (v15 == 66)
      {
LABEL_26:
        *(_QWORD *)&v24 = (int)objc_msgSend(a2, "charValue");
LABEL_33:
        v17 = snprintf_l(v13, 0x20uLL, 0, "%d");
        goto LABEL_38;
      }
      if (v15 == 67)
      {
        *(_QWORD *)&v24 = objc_msgSend(a2, "unsignedCharValue");
LABEL_31:
        v17 = snprintf_l(v13, 0x20uLL, 0, "%u");
        goto LABEL_38;
      }
    }
LABEL_50:
    *(_QWORD *)&v24 = *(char *)objc_msgSend(a2, "objCType");
    v22 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Invalid number type in JSON write (%c)"), (_QWORD)v24);
    v20 = (void *)MEMORY[0x1E0C99DA0];
    v21 = *MEMORY[0x1E0C99778];
    goto LABEL_51;
  }
  switch(v15)
  {
    case 'c':
      goto LABEL_26;
    case 'd':
    case 'f':
      objc_msgSend(a2, "doubleValue");
      if (fabs(v16) != INFINITY)
      {
        objc_msgSend(a2, "doubleValue");
        v17 = snprintf_l(v13, 0x20uLL, 0, "%0.*g");
        break;
      }
      v20 = (void *)MEMORY[0x1E0C99DA0];
      v21 = *MEMORY[0x1E0C99778];
      v22 = (NSString *)CFSTR("Invalid number value (infinite) in JSON write");
      goto LABEL_51;
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'r':
      goto LABEL_50;
    case 'i':
      *(_QWORD *)&v24 = objc_msgSend(a2, "intValue");
      goto LABEL_33;
    case 'l':
      objc_msgSend(a2, "longValue");
      v17 = snprintf_l(v13, 0x20uLL, 0, "%ld");
      break;
    case 'q':
      objc_msgSend(a2, "longLongValue");
      v17 = snprintf_l(v13, 0x20uLL, 0, "%lld");
      break;
    case 's':
      objc_msgSend(a2, "shortValue");
      v17 = snprintf_l(v13, 0x20uLL, 0, "%hi");
      break;
    default:
      if (v15 != 81)
      {
        if (v15 == 83)
        {
          objc_msgSend(a2, "unsignedShortValue");
          v17 = snprintf_l(v13, 0x20uLL, 0, "%hu");
          break;
        }
        goto LABEL_50;
      }
      objc_msgSend(a2, "unsignedLongLongValue");
      v17 = snprintf_l(v13, 0x20uLL, 0, "%llu");
      break;
  }
LABEL_38:
  if ((int)v17 < 1)
    return 0;
  if (v17 < 0x20)
  {
    v19 = *(_DWORD *)(a1 + 16);
    if (v19 == 2)
    {
      return _appendBytes(v13, v17, a1, 2);
    }
    else
    {
      if (v19 == 1)
        *(_QWORD *)(a1 + 40) += v17;
      return 1;
    }
  }
  else
  {
    v18 = (void *)objc_msgSend(a2, "stringValue");
    return objc_msgSend((id)a1, "appendString:range:", v18, 0, objc_msgSend(v18, "length"));
  }
}

uint64_t _writeJSONArray(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  uint64_t appended;
  char v11;
  _QWORD v14[9];
  uint64_t __src;
  uint64_t *p_src;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](a1);
    v8 = (char *)&v14[-1] - ((v9 + 17) & 0xFFFFFFFFFFFFFFF0);
    bzero(v8, 2 * a3 + 2);
    memset(v8, 32, 2 * a3 + 2);
    LOBYTE(__src) = 91;
    if (_appendBytes((char *)&__src, 1uLL, a1, 91))
    {
      LOBYTE(__src) = 10;
      if ((_appendBytes((char *)&__src, 1uLL, a1, 10) & 1) != 0)
        goto LABEL_6;
    }
    return 0;
  }
  LOBYTE(__src) = 91;
  if (!_appendBytes((char *)&__src, 1uLL, a1, 91))
    return 0;
  v8 = 0;
LABEL_6:
  __src = 0;
  p_src = &__src;
  v17 = 0x2020000000;
  v18 = 1;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___writeJSONArray_block_invoke;
  v14[3] = &unk_1E0F51E30;
  v14[4] = a1;
  v14[5] = &__src;
  v14[6] = a4;
  v14[7] = v8;
  v14[8] = a3;
  objc_msgSend(a2, "enumerateObjectsUsingBlock:", v14);
  if (*((_BYTE *)p_src + 24)
    && ((a4 & 1) == 0
     || (v19 = 10, _appendBytes(&v19, 1uLL, a1, 10))
     && (!a3 || _appendBytes(v8, 2 * a3, a1, v11))))
  {
    v19 = 93;
    appended = _appendBytes(&v19, 1uLL, a1, 93);
  }
  else
  {
    appended = 0;
  }
  _Block_object_dispose(&__src, 8);
  return appended;
}

void sub_181812C94(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void _encodeBytes(uint64_t a1, const UInt8 *a2, CFIndex a3, const void *a4)
{
  CFDataRef v6;

  if (a2)
  {
    v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, a3);
    addValueToTopContainerE(a1, a4, v6);
    CFRelease(v6);
  }
  else
  {
    addValueToTopContainerE(a1, a4, CFSTR("$null"));
  }
}

void *__cdecl NSAllocateMemoryPages(NSUInteger bytes)
{
  NSString *v3;
  vm_address_t address[2];

  address[1] = *MEMORY[0x1E0C80C00];
  address[0] = 0;
  if (vm_allocate(*MEMORY[0x1E0C83DA0], address, bytes, 687865857))
  {
    v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** NSAllocateMemoryPages(%lu) failed"), bytes);
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v3, 0));
  }
  return (void *)address[0];
}

void sub_181813128(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x18181303CLL);
  }
  _Unwind_Resume(a1);
}

NSString *__cdecl NSDecimalString(const NSDecimal *dcm, id locale)
{
  void *v3;
  _OWORD v5[2];

  if (locale)
  {
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  __NSDecimalString(_:_:)((uint64_t)dcm, (uint64_t)v5);
  outlined destroy of Any?((uint64_t)v5);
  v3 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return (NSString *)v3;
}

id static Date._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  if (result)
  {
    result = objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    *a2 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for IndexSet()
{
  return &type metadata for IndexSet;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PredicateExpressionCodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a1 == *a2;
}

Foundation::Date __swiftcall Date.init(timeIntervalSince1970:)(Swift::Double timeIntervalSince1970)
{
  double *v1;
  Foundation::Date result;

  result._time = timeIntervalSince1970 + -978307200.0;
  *v1 = result._time;
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UUID()
{
  Hasher.init(_seed:)();
  UUID.hash(into:)();
  return Hasher._finalize()();
}

uint64_t UUID.hash(into:)()
{
  return Hasher.combine(bytes:)();
}

uint64_t JSONDecoderImpl.KeyedContainer.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  swift_bridgeObjectRetain();
  v5 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a4 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    v8 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t JSONMap.loadValue(at:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 <= a1)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 41;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v5 = v3 + 32;
  v6 = *(_QWORD *)(v5 + 8 * a1);
  result = 1;
  switch(v6)
  {
    case 0:
    case 8:
      if (a1 + 1 >= v4)
        goto LABEL_20;
      v8 = a1 + 2;
      if (v8 >= v4)
        goto LABEL_22;
      result = *(_QWORD *)(v5 + 8 * v8);
      break;
    case 1:
    case 9:
      if (a1 + 1 >= v4)
        goto LABEL_21;
      v9 = a1 + 2;
      if (v9 >= v4)
        goto LABEL_23;
      result = *(_QWORD *)(v5 + 8 * v9);
      break;
    case 2:
      return 0;
    case 3:
      return result;
    case 4:
      return 0;
    case 5:
      if (a1 + 2 >= v4)
        goto LABEL_25;
      return a1 + 3;
    case 6:
      if (a1 + 2 >= v4)
        goto LABEL_24;
      return a1 + 3;
    case 7:
      return 0;
    default:
      goto LABEL_26;
  }
  return result;
}

Swift::Int __swiftcall JSONMap.offset(after:)(Swift::Int after)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  if (after < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 41;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
LABEL_16:
    after = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return after;
  }
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 <= after)
    goto LABEL_12;
  v4 = v2 + 32;
  switch(*(_QWORD *)(v4 + 8 * after))
  {
    case 0:
    case 1:
    case 8:
    case 9:
      v5 = __OFADD__(after, 3);
      after += 3;
      if (!v5)
        return after;
      __break(1u);
LABEL_7:
      ++after;
      break;
    case 2:
    case 3:
    case 4:
      goto LABEL_7;
    case 5:
    case 6:
      if (after + 1 >= v3)
        goto LABEL_13;
      return *(_QWORD *)(v4 + 8 * (after + 1));
    case 7:
      _StringGuts.grow(_:)(68);
      v8._countAndFlagsBits = 0xD000000000000041;
      v8._object = (void *)0x8000000182305D70;
      String.append(_:)(v8);
      v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = 41;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      goto LABEL_16;
    default:
      goto LABEL_14;
  }
  return after;
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  uint64_t v27;
  _QWORD *v28;
  _QWORD v29[4];

  v10 = MEMORY[0x1E0DEA968];
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  if (a3 != v10 || a4 != MEMORY[0x1E0DEE9B8] + 8)
  {
    v12 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (!v12)
    {
      if (*(uint64_t *)(*(_QWORD *)(a3 - 8) + 72) < 8 || *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) <= 7)
      {
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        lazy protocol witness table accessor for type NSObject and conformance NSObject();
        swift_unknownObjectRetain();
        v14 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
        if (!v14)
        {
          v15 = (unint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
          v14 = ~(v15 >> 1) & 0x4000000000000000 | v15;
        }
        v16 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v14, a3, a4, a5);
        swift_bridgeObjectRelease();
        *a2 = v16;
        return v16 != 0;
      }
      else
      {
        v21 = objc_msgSend(a1, sel_count);
        LOBYTE(v29[0]) = 1;
        v26[2] = a3;
        v26[3] = a4;
        v26[4] = a5;
        v26[5] = a1;
        v27 = MEMORY[0x1E0C80A78](v21);
        v28 = v29;
        v22 = _NativeDictionary.init(_unsafeUninitializedCapacity:allowingDuplicates:initializingWith:)(v27, a3 == v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #1 in static Dictionary._conditionallyBridgeFromObjectiveC(_:result:), (uint64_t)v26, a3, a4);
        v17 = LOBYTE(v29[0]);
        if (LOBYTE(v29[0]) != 1)
        {
          swift_release();
          v22 = 0;
        }
        *a2 = v22;
      }
      return v17;
    }
    goto LABEL_15;
  }
  v12 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v12)
  {
LABEL_15:
    *a2 = v12;
    return 1;
  }
  v19 = (uint64_t)objc_msgSend(a1, sel_count);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v20 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v20 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v23 = v20[6];
  v24 = v20[7];
  swift_retain();
  result = (uint64_t)objc_msgSend(a1, sel__getObjects_andKeys_count_, v24, v23, v19);
  if (v19 < 1)
  {
    v25 = v19;
    if (!v19)
    {
      v17 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v25 = v19;
    v29[0] = 0;
    v29[1] = 0;
    swift_unknownObjectRetain();
    _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
    result = swift_unknownObjectRelease();
  }
  if (__OFSUB__(v19, v25))
    goto LABEL_34;
  result = swift_arrayDestroy();
  v17 = 0;
LABEL_28:
  if (v19 >= 0)
  {
    v20[2] = 0;
    swift_release();
    if ((_DWORD)v17)
    {
      *a2 = v20;
    }
    else
    {
      swift_release();
      *a2 = 0;
    }
    return v17;
  }
  __break(1u);
  __break(1u);
LABEL_34:
  __break(1u);
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v8 = ~v4;
    do
    {
      v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v5);
      v10 = *v9;
      v11 = v9[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((specialized static Dictionary<>.== infix(_:_:)(v10, a1) & 1) != 0)
      {
        v12 = specialized static Set.== infix(_:_:)(v11, a2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v12 & 1) != 0)
          return v5;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v5 = (v5 + 1) & v8;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;
  _BYTE v6[72];

  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v6, a1);
  specialized Set.hash(into:)((uint64_t)v6, a2);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  Swift::String_optional v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;

  v2 = v1;
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v7 = v4[3] >> 1, v7 < v5))
  {
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 1, v4);
    v7 = v4[3] >> 1;
  }
  v8 = v4[2];
  v9 = v7 - v8;
  v10 = specialized Sequence._copySequenceContents(initializing:)(&v25, &v4[2 * v8 + 4], v7 - v8, a1);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v10)
  {
    v11 = v4[2];
    v12 = __OFADD__(v11, v10);
    v13 = v11 + v10;
    if (v12)
    {
      __break(1u);
      goto LABEL_23;
    }
    v4[2] = v13;
  }
  if (v10 == v9)
  {
LABEL_11:
    v9 = v4[2];
    v17 = ICU.Enumerator.Elements.Iterator.next()();
    object = v17.value._object;
    countAndFlagsBits = v17.value._countAndFlagsBits;
    if (!v17.value._object)
      goto LABEL_9;
    while (1)
    {
      v18 = v4[3];
      v19 = v18 >> 1;
      if ((uint64_t)(v18 >> 1) < v9 + 1)
      {
        v22 = countAndFlagsBits;
        v23 = object;
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v9 + 1, 1, v4);
        object = v23;
        v4 = v24;
        countAndFlagsBits = v22;
        v19 = v4[3] >> 1;
        if (v9 < v19)
        {
LABEL_16:
          v20 = &v4[2 * v9 + 5];
          while (1)
          {
            *(v20 - 1) = countAndFlagsBits;
            *v20 = object;
            ++v9;
            v21 = ICU.Enumerator.Elements.Iterator.next()();
            object = v21.value._object;
            countAndFlagsBits = v21.value._countAndFlagsBits;
            if (!v21.value._object)
              break;
            v20 += 2;
            if (v19 == v9)
            {
              v9 = v19;
              goto LABEL_13;
            }
          }
LABEL_23:
          v4[2] = v9;
          break;
        }
      }
      else if (v9 < v19)
      {
        goto LABEL_16;
      }
LABEL_13:
      v4[2] = v9;
    }
  }
LABEL_9:
  result = swift_release();
  *(_QWORD *)v2 = v4;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v1;
  char **v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  char **v29;
  uint64_t v30;
  char *v31;
  int v32;
  char v33;

  v2 = v1;
  v4 = type metadata accessor for Unicode._NFD();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Unicode._NFD.Iterator();
  v8 = *(char ***)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v31 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = dispatch thunk of Sequence.underestimatedCount.getter();
  v11 = *v1;
  v12 = *((_QWORD *)*v2 + 2);
  v13 = v12 + v10;
  if (__OFADD__(v12, v10))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    v24 = *v2;
    v25 = *((_QWORD *)*v2 + 2);
    dispatch thunk of IteratorProtocol.next()();
    if ((v33 & 1) != 0)
      return ((uint64_t (*)(char *, int64_t))v8[1])(v31, v13);
    while (1)
    {
      v26 = *((_QWORD *)v24 + 3);
      v27 = v26 >> 1;
      if ((uint64_t)(v26 >> 1) >= v25 + 1)
        break;
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v25 + 1, 1, v24);
      *v2 = v24;
      v28 = v33;
      v27 = *((_QWORD *)v24 + 3) >> 1;
      if ((v33 & 1) == 0)
        goto LABEL_21;
LABEL_18:
      *((_QWORD *)v24 + 2) = v25;
      if ((v28 & 1) != 0)
        return ((uint64_t (*)(char *, int64_t))v8[1])(v31, v13);
    }
    v28 = 0;
    do
    {
LABEL_21:
      if (v25 >= v27)
        break;
      *(_DWORD *)&v24[4 * v25++ + 32] = v32;
      dispatch thunk of IteratorProtocol.next()();
      v28 = v33;
    }
    while ((v33 & 1) == 0);
    goto LABEL_18;
  }
  v14 = v10;
  v29 = v8;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  v8 = v2;
  *v2 = v11;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v16 = *((_QWORD *)v11 + 3) >> 1, v16 < v13))
  {
    if (v12 <= v13)
      v17 = v13;
    else
      v17 = v12;
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v17, 1, v11);
    *v2 = v11;
    v16 = *((_QWORD *)v11 + 3) >> 1;
  }
  v18 = v16 - *((_QWORD *)v11 + 2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v19 = dispatch thunk of Sequence._copyContents(initializing:)();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  if (v19 < v14)
    goto LABEL_15;
  v8 = v29;
  v13 = v30;
  if (v19 < 1)
    goto LABEL_12;
  v21 = *((_QWORD *)*v2 + 2);
  v22 = __OFADD__(v21, v19);
  v23 = v21 + v19;
  if (!v22)
  {
    *((_QWORD *)*v2 + 2) = v23;
LABEL_12:
    if (v19 != v18)
      return ((uint64_t (*)(char *, int64_t))v8[1])(v31, v13);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[v9 + 4];
  if (a1 + 32 < v10 + 8 * v8 && v10 < a1 + 32 + 8 * v8)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<JSONMap.Value>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributeScope.Type>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(id: PredicateExpressions.VariableID, value: Any)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(skeleton: String, measurementUnit: Duration.UnitsFormatStyle.Unit, measurementValue: Double)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PresentationIntent.IntentType>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rope<AttributedString._InternalRun>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Morphology.Pronoun>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DateComponents>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 288);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[36 * v8 + 4])
          memmove(v12, a4 + 4, 288 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString._AttributeStorage>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ICUNumberFormatterBase.AttributePosition>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafePointer<UInt16>?>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(component: Calendar.Component, value: Int)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.TimeFormatStyle.Attributed.PatternComponent>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<iovec>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Slice<DispatchData.Region>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DispatchData.Region>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String.LocalizationValue.FormatArgument>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[15 * v8 + 4])
          memmove(v12, a4 + 4, 120 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Error>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Slice<UnsafeBufferPointer<UInt8>>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Slice<UnsafeRawBufferPointer>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (skeleton: String, measurementUnit: Duration.UnitsFormatStyle.Unit, measurementValue: Double));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String?, value: Any));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 288 * a1 + 32;
    v6 = a3 + 288 * v4;
    if (v5 >= v6 || v5 + 288 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 120 * a1 + 32;
    v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 24 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = 2 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 40 * a1 + 32);
    v6 = 40 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BPlistTrailer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

void JSONDecoderImpl.createTypeMismatchError(type:for:value:)(uint64_t a1@<X0>, char a2@<W4>, _QWORD *a3@<X8>)
{
  Swift::String v4;
  Swift::String v5;

  *a3 = a1;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x756F662074756220;
  v5._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v5);
  __asm { BR              X10 }
}

uint64_t sub_1818147B4()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  v1._countAndFlagsBits = 0x7265626D756ELL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x64616574736E6920;
  v2._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v2);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v3 = *MEMORY[0x1E0DEC450];
  v4 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v0, v3, v4);
}

uint64_t static JSONScanner.stringValue(from:fullSource:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _BYTE *v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  v8 = (_BYTE *)(a1 + a2);
  v9 = (_BYTE *)a1;
  if (a2 >= 1)
  {
    do
    {
      v10 = *v9;
      if (v10 == 92)
        break;
      if (v10 < 0x20)
        break;
      ++v9;
    }
    while (v9 < v8);
    if ((unint64_t)v9 < a1)
    {
      __break(1u);
      return v19[0];
    }
  }
  result = static String._tryFromUTF8(_:)();
  if (v12)
  {
    v19[0] = result;
    v19[1] = v12;
    if (v8 != v9)
    {
      if (v8 < v9)
      {
        __break(1u);
        return result;
      }
      specialized static JSONScanner._slowpath_stringValue(from:appendingTo:fullSource:)(v9, v8 - v9, v19, a3, a4);
      if (v4)
        return swift_bridgeObjectRelease();
      return v19[0];
    }
  }
  else
  {
    v13 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a3, a4);
    v15 = v14;
    v17 = v16;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v18 = v13;
    *(_QWORD *)(v18 + 8) = v15;
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 40) = 0;
    *(_BYTE *)(v18 + 48) = 0;
    return swift_willThrow();
  }
  return result;
}

_BYTE *specialized static JSONScanner._slowpath_stringValue(from:appendingTo:fullSource:)(_BYTE *result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _BYTE *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v9 = result;
  if (a2 < 1)
  {
    v11 = (unint64_t)result;
LABEL_14:
    v17 = static String._tryFromUTF8(_:)();
    if (v18)
    {
      String.append(_:)(*(Swift::String *)&v17);
      return (_BYTE *)swift_bridgeObjectRelease();
    }
    else
    {
LABEL_16:
      v19 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11, a4, a5);
      v21 = v20;
      v23 = v22;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v24 = v19;
      *(_QWORD *)(v24 + 8) = v21;
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0;
      *(_QWORD *)(v24 + 40) = 0;
      *(_BYTE *)(v24 + 48) = 0;
      return (_BYTE *)swift_willThrow();
    }
  }
  else
  {
    v10 = &result[a2];
    v11 = (unint64_t)result;
    v12 = result;
    do
    {
      v13 = *v12;
      if ((_DWORD)v13 == 92)
      {
        if ((unint64_t)v12 < v11)
        {
          __break(1u);
LABEL_20:
          v25 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v12, a4, a5);
          v27 = v26;
          v29 = v28;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v30 = v13;
          *(_QWORD *)(v30 + 8) = v25;
          *(_QWORD *)(v30 + 16) = v27;
          *(_QWORD *)(v30 + 24) = v29;
          *(_QWORD *)(v30 + 32) = 0;
          *(_QWORD *)(v30 + 40) = 0;
          *(_BYTE *)(v30 + 48) = 7;
          return (_BYTE *)swift_willThrow();
        }
        v14 = static String._tryFromUTF8(_:)();
        if (!v15)
          goto LABEL_16;
        String.append(_:)(*(Swift::String *)&v14);
        swift_bridgeObjectRelease();
        result = v12 + 1;
        v16 = v10 - (v12 + 1);
        if (((v12 + 1 - v9) | v16) < 0)
        {
          __break(1u);
          goto LABEL_22;
        }
        result = specialized static JSONScanner.parseEscapeSequence(from:into:fullSource:)(result, v16, a3, a4, a5);
        if (v5)
          return result;
        v11 = (unint64_t)result;
        v12 = result;
      }
      else
      {
        if (v13 < 0x20)
          goto LABEL_20;
        ++v12;
      }
    }
    while (v12 < v10);
    if ((unint64_t)v12 >= v11)
      goto LABEL_14;
LABEL_22:
    __break(1u);
  }
  return result;
}

_BYTE *specialized static JSONScanner.parseEscapeSequence(from:into:fullSource:)(_BYTE *result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;

  if (a2)
  {
    v5 = result;
    v6 = *result;
    switch(*result)
    {
      case '"':
        goto LABEL_11;
      case '/':
        v6 = 47;
        goto LABEL_11;
      case '\\':
        v6 = 92;
        goto LABEL_11;
      case 'b':
        v6 = 8;
        goto LABEL_11;
      case 'f':
        v6 = 12;
        goto LABEL_11;
      case 'n':
        v6 = 10;
        goto LABEL_11;
      case 'r':
        v6 = 13;
        goto LABEL_11;
      case 't':
        v6 = 9;
LABEL_11:
        v13._countAndFlagsBits = v6;
        v13._object = (void *)0xE100000000000000;
        String.append(_:)(v13);
        result = v5 + 1;
        break;
      case 'u':
        if (a2 >= 1)
          v14 = 1;
        else
          v14 = a2;
        result = specialized static JSONScanner.parseUnicodeSequence(from:into:fullSource:allowNulls:)((unint64_t)&result[v14], a2 - v14, a3, a4, a5, 1);
        break;
      default:
        v7 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a4, a5);
        v9 = v8;
        v11 = v10;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v12 = v6;
        *(_QWORD *)(v12 + 8) = v7;
        *(_QWORD *)(v12 + 16) = v9;
        *(_QWORD *)(v12 + 24) = v11;
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 40) = 0;
        *(_BYTE *)(v12 + 48) = 6;
        result = (_BYTE *)swift_willThrow();
        break;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEBB20], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEBB00], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEBB18], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x186DA9D64](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSUInteger v4;
  BOOL v5;
  NSUInteger location;
  BOOL v7;

  v2 = range1.location + range1.length;
  if (range1.location + range1.length >= range2.location + range2.length)
    v3 = range2.location + range2.length;
  else
    v3 = range1.location + range1.length;
  if (range2.location > range1.location || range1.location >= range2.location + range2.length)
  {
    v4 = v3 - range2.location;
    v5 = range2.location >= v2;
    if (range2.location < v2)
      location = range2.location;
    else
      location = 0;
    if (v5)
      v4 = 0;
    v7 = range1.location > range2.location;
    if (range1.location <= range2.location)
      range1.location = location;
    else
      range1.location = 0;
    if (v7)
      range1.length = 0;
    else
      range1.length = v4;
  }
  else
  {
    range1.length = v3 - range1.location;
  }
  return range1;
}

void NSZoneFree(NSZone *zone, void *ptr)
{
  if (zone)
    malloc_zone_free((malloc_zone_t *)zone, ptr);
  else
    free(ptr);
}

uint64_t storeEnumTagSinglePayload for LocalizedStringResource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t IndexPath.count.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD))((char *)sub_1818151D8 + 4 * byte_182068FC0[*(unsigned __int8 *)(v0 + 16)]))(0);
}

uint64_t sub_1818151D8()
{
  return 1;
}

uint64_t sub_1818151E0()
{
  return 2;
}

uint64_t sub_1818151E8()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance URLQueryItem()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  objc_super v12;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v5 = (objc_class *)type metadata accessor for _NSSwiftURLQueryItem();
  v6 = (char *)objc_allocWithZone(v5);
  v7 = &v6[OBJC_IVAR____NSSwiftURLQueryItem_queryItem];
  *(_QWORD *)v7 = v1;
  *((_QWORD *)v7 + 1) = v2;
  *((_QWORD *)v7 + 2) = v4;
  *((_QWORD *)v7 + 3) = v3;
  v8 = String._bridgeToObjectiveCImpl()();
  if (v3)
    v9 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v9 = 0;
  v12.receiver = v6;
  v12.super_class = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = objc_msgSendSuper2(&v12, sel_initWithName_value_, v8, v9);
  swift_unknownObjectRelease();

  return v10;
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  NSString *result;

  result = (NSString *)protocol_getName(proto);
  if (result)
    return +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", result);
  return result;
}

uint64_t assignWithCopy for Measurement(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t isDimensional()
{
  char isKindOfClass;

  if ((objc_opt_respondsToSelector() & 1) != 0)
    isKindOfClass = 1;
  else
    isKindOfClass = objc_opt_isKindOfClass();
  return isKindOfClass & 1;
}

id NSUnitTemperature.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  void *ObjCClassFromMetadata;
  id v6;
  id v7;
  id result;
  id v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v6 = objc_msgSend(ObjCClassFromMetadata, sel_baseUnit);
  v7 = specialized bestUnitForUsage<A>(_:dimension:usage:)(v3, v2, v6, v4);
  swift_unknownObjectRelease();

  result = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), sel_initWithDimension_, v7);
  if (result)
  {
    v9 = result;

    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id Measurement<>.converted(to:)@<X0>(void *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  id v4;
  double v5;
  id v6;
  double v7;
  id v8;
  unsigned __int8 v9;
  id v10;
  double v11;

  v4 = *(id *)v2;
  v5 = *(double *)(v2 + 8);
  if ((objc_msgSend(*(id *)v2, sel_isEqual_) & 1) == 0)
  {
    v6 = objc_msgSend(v4, sel_converter);
    objc_msgSend(v6, sel_baseUnitValueFromValue_, v5);
    v5 = v7;

    swift_getObjectType();
    v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_baseUnit);
    v9 = objc_msgSend(a1, sel_isEqual_, v8);

    if ((v9 & 1) == 0)
    {
      v10 = objc_msgSend(a1, sel_converter);
      objc_msgSend(v10, sel_valueFromBaseUnitValue_, v5);
      v5 = v11;

    }
  }
  *(_QWORD *)a2 = a1;
  a2[1] = v5;
  return a1;
}

id specialized bestUnitForUsage<A>(_:dimension:usage:)(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4)
{
  uint64_t ObjectType;
  void (*v7)(_QWORD *__return_ptr, uint64_t, uint64_t);
  char v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  id v20;
  id result;
  NSUnitVolume *v22;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSUnitTemperature);
  ObjectType = swift_getObjectType();
  v7 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a2 + 456);
  swift_unknownObjectRetain();
  v7((_QWORD *)((char *)v24 + 4), ObjectType, a2);
  swift_unknownObjectRelease();
  v8 = BYTE4(v24[0]);
  if (BYTE4(v24[0]) != 2)
  {
    v19 = (void *)objc_opt_self();
    if ((v8 & 1) != 0)
      v20 = objc_msgSend(v19, sel_celsius);
    else
      v20 = objc_msgSend(v19, sel_fahrenheit);
    return v20;
  }
  v9 = *(void (**)(uint64_t, uint64_t))(a2 + 64);
  swift_unknownObjectRetain();
  v9(ObjectType, a2);
  swift_unknownObjectRelease();
  HIDWORD(v24[0]) = 0;
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_icuType);
  if (v10)
  {
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

    v15 = Usage.rawValue.getter(a4);
    v17 = v16;
    if (v14)
    {
      if ((v12 == (id)0x796772656E65 && v14 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v15 == 0x746C7561666564 && v17 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        v18 = 0;
      }
      else
      {
        v18 = 0;
      }
      goto LABEL_18;
    }
  }
  else
  {
    Usage.rawValue.getter(a4);
  }
  v18 = 1;
LABEL_18:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }
  String.utf8CString.getter();
  uameasfmt_getUnitsForUsage();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  v22 = getDimensionUnitFromUnitSpecifier(HIDWORD(v24[0]));
  swift_bridgeObjectRelease();
  if (!v22)
    return a3;
  objc_opt_self();
  result = (id)swift_dynamicCastObjCClass();
  if (!result)
  {

    return a3;
  }
  return result;
}

uint64_t Usage.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181816490 + 4 * byte_1820E9010[a1]))(0x746C7561666564, 0xE700000000000000);
}

uint64_t sub_181816490()
{
  return 0x6E6F73726570;
}

uint64_t sub_1818164A4()
{
  return 1685024614;
}

uint64_t sub_1818164B4()
{
  return 0x682D6E6F73726570;
}

uint64_t sub_1818164D8()
{
  return 1684107122;
}

uint64_t sub_1818164E8()
{
  return 0x656C2D6C61636F66;
}

uint64_t sub_181816508()
{
  return 0x6C6C61666E696172;
}

uint64_t sub_181816530()
{
  return 0x79746C6269736976;
}

uint64_t sub_181816548()
{
  return 0x6372746D6F726162;
}

uint64_t sub_181816560()
{
  return 1684957559;
}

uint64_t sub_181816570()
{
  return 0x72656874616577;
}

uint64_t sub_181816584()
{
  return 0x6469756C66;
}

uint64_t sub_181816598()
{
  return 0x6469766F72507361;
}

NSUnitVolume *getDimensionUnitFromUnitSpecifier(unsigned int a1)
{
  __objc2_class *v1;
  __objc2_class *v2;
  NSUnitVolume *result;
  uint64_t v4;

  if (a1 > 1)
  {
    if ((unint64_t)a1 - 256 > 4)
    {
      if ((unint64_t)a1 - 512 > 8)
      {
        if (a1 - 4609 <= 8 && ((1 << (a1 - 1)) & 0x103) != 0)
        {
          v2 = NSUnitConcentrationMass;
          return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
        }
        v4 = a1 & 0xFFFFFFFC;
        if (v4 == 3328)
        {
          if (a1 == 3331)
          {
            return (NSUnitVolume *)+[NSUnitFuelEfficiency milesPerImperialGallon](NSUnitFuelEfficiency, "milesPerImperialGallon");
          }
          else
          {
            if (a1 != 3329)
            {
              v2 = NSUnitFuelEfficiency;
              return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
            }
            return (NSUnitVolume *)+[NSUnitFuelEfficiency milesPerGallon](NSUnitFuelEfficiency, "milesPerGallon");
          }
        }
        else
        {
          if (a1 == 4611)
          {
            v2 = NSUnitDispersion;
            return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
          }
          if ((unint64_t)a1 - 1024 > 9)
          {
            if ((a1 & 0xFFFFFFFE) == 0xF00)
            {
              v1 = NSUnitElectricCurrent;
              if (a1 != 3841)
                goto LABEL_3;
              return (NSUnitVolume *)+[NSUnitElectricCurrent milliamperes](NSUnitElectricCurrent, "milliamperes");
            }
            else
            {
              if (a1 == 3842)
              {
                v2 = NSUnitElectricResistance;
                return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
              }
              if (a1 == 3843)
              {
                v2 = NSUnitElectricPotentialDifference;
                return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
              }
              if ((unint64_t)a1 - 3072 > 5)
              {
                if (v4 == 4096)
                {
                  switch(a1)
                  {
                    case 0x1001u:
                      return (NSUnitVolume *)+[NSUnitFrequency kilohertz](NSUnitFrequency, "kilohertz");
                    case 0x1002u:
                      return (NSUnitVolume *)+[NSUnitFrequency megahertz](NSUnitFrequency, "megahertz");
                    case 0x1003u:
                      return (NSUnitVolume *)+[NSUnitFrequency gigahertz](NSUnitFrequency, "gigahertz");
                    default:
                      v2 = NSUnitFrequency;
                      return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
                  }
                }
                else
                {
                  if (a1 == 4352)
                  {
                    v2 = NSUnitIlluminance;
                    return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
                  }
                  if ((unint64_t)a1 - 3584 > 0xA)
                  {
                    if ((unint64_t)a1 - 1280 > 0x12)
                    {
                      if ((unint64_t)a1 - 1536 > 0xA)
                      {
                        if ((unint64_t)a1 - 1792 > 5)
                        {
                          switch(a1)
                          {
                            case 0x800u:
                              result = +[NSUnitPressure hectopascals](NSUnitPressure, "hectopascals");
                              break;
                            case 0x801u:
                              result = +[NSUnitPressure inchesOfMercury](NSUnitPressure, "inchesOfMercury");
                              break;
                            case 0x802u:
                              result = +[NSUnitPressure millibars](NSUnitPressure, "millibars");
                              break;
                            case 0x803u:
                              result = +[NSUnitPressure millimetersOfMercury](NSUnitPressure, "millimetersOfMercury");
                              break;
                            case 0x804u:
                              result = +[NSUnitPressure poundsForcePerSquareInch](NSUnitPressure, "poundsForcePerSquareInch");
                              break;
                            case 0x806u:
                              result = +[NSUnitPressure kilopascals](NSUnitPressure, "kilopascals");
                              break;
                            case 0x807u:
                              result = +[NSUnitPressure megapascals](NSUnitPressure, "megapascals");
                              break;
                            case 0x809u:
                              result = +[NSUnitPressure bars](NSUnitPressure, "bars");
                              break;
                            default:
                              if (v4 == 2304)
                              {
                                switch(a1)
                                {
                                  case 0x903u:
                                    result = +[NSUnitSpeed knots](NSUnitSpeed, "knots");
                                    break;
                                  case 0x902u:
                                    result = +[NSUnitSpeed milesPerHour](NSUnitSpeed, "milesPerHour");
                                    break;
                                  case 0x901u:
                                    result = +[NSUnitSpeed kilometersPerHour](NSUnitSpeed, "kilometersPerHour");
                                    break;
                                  default:
                                    v2 = NSUnitSpeed;
                                    return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
                                }
                              }
                              else if ((unint64_t)a1 - 2560 > 2)
                              {
                                if (a1 - 2823 < 0x10 || a1 - 2816 <= 0x18 && ((1 << a1) & 0x100003F) != 0)
                                {
                                  switch(a1)
                                  {
                                    case 0xB01u:
                                      result = +[NSUnitVolume cubicKilometers](NSUnitVolume, "cubicKilometers");
                                      break;
                                    case 0xB02u:
                                      result = +[NSUnitVolume cubicMiles](NSUnitVolume, "cubicMiles");
                                      break;
                                    case 0xB03u:
                                      result = +[NSUnitVolume milliliters](NSUnitVolume, "milliliters");
                                      break;
                                    case 0xB04u:
                                      result = +[NSUnitVolume centiliters](NSUnitVolume, "centiliters");
                                      break;
                                    case 0xB05u:
                                      result = +[NSUnitVolume deciliters](NSUnitVolume, "deciliters");
                                      break;
                                    case 0xB07u:
                                      result = +[NSUnitVolume megaliters](NSUnitVolume, "megaliters");
                                      break;
                                    case 0xB08u:
                                      result = +[NSUnitVolume cubicCentimeters](NSUnitVolume, "cubicCentimeters");
                                      break;
                                    case 0xB09u:
                                      result = +[NSUnitVolume cubicMeters](NSUnitVolume, "cubicMeters");
                                      break;
                                    case 0xB0Au:
                                      result = +[NSUnitVolume cubicInches](NSUnitVolume, "cubicInches");
                                      break;
                                    case 0xB0Bu:
                                      result = +[NSUnitVolume cubicFeet](NSUnitVolume, "cubicFeet");
                                      break;
                                    case 0xB0Cu:
                                      result = +[NSUnitVolume cubicYards](NSUnitVolume, "cubicYards");
                                      break;
                                    case 0xB0Du:
                                      result = +[NSUnitVolume acreFeet](NSUnitVolume, "acreFeet");
                                      break;
                                    case 0xB0Eu:
                                      result = +[NSUnitVolume bushels](NSUnitVolume, "bushels");
                                      break;
                                    case 0xB0Fu:
                                      result = +[NSUnitVolume teaspoons](NSUnitVolume, "teaspoons");
                                      break;
                                    case 0xB10u:
                                      result = +[NSUnitVolume tablespoons](NSUnitVolume, "tablespoons");
                                      break;
                                    case 0xB11u:
                                      result = +[NSUnitVolume fluidOunces](NSUnitVolume, "fluidOunces");
                                      break;
                                    case 0xB12u:
                                      result = +[NSUnitVolume cups](NSUnitVolume, "cups");
                                      break;
                                    case 0xB13u:
                                      result = +[NSUnitVolume pints](NSUnitVolume, "pints");
                                      break;
                                    case 0xB14u:
                                      result = +[NSUnitVolume quarts](NSUnitVolume, "quarts");
                                      break;
                                    case 0xB15u:
                                      result = +[NSUnitVolume gallons](NSUnitVolume, "gallons");
                                      break;
                                    case 0xB16u:
                                      result = +[NSUnitVolume metricCups](NSUnitVolume, "metricCups");
                                      break;
                                    case 0xB18u:
                                      result = +[NSUnitVolume imperialGallons](NSUnitVolume, "imperialGallons");
                                      break;
                                    default:
                                      v2 = NSUnitVolume;
                                      return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
                                  }
                                }
                                else
                                {
                                  result = 0;
                                }
                              }
                              else if (a1 == 2561)
                              {
                                result = +[NSUnitTemperature fahrenheit](NSUnitTemperature, "fahrenheit");
                              }
                              else
                              {
                                if (a1 != 2560)
                                {
                                  v2 = NSUnitTemperature;
                                  return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
                                }
                                result = +[NSUnitTemperature celsius](NSUnitTemperature, "celsius");
                              }
                              break;
                          }
                        }
                        else
                        {
                          switch(a1)
                          {
                            case 0x701u:
                              result = +[NSUnitPower kilowatts](NSUnitPower, "kilowatts");
                              break;
                            case 0x702u:
                              result = +[NSUnitPower horsepower](NSUnitPower, "horsepower");
                              break;
                            case 0x703u:
                              result = +[NSUnitPower milliwatts](NSUnitPower, "milliwatts");
                              break;
                            case 0x704u:
                              result = +[NSUnitPower megawatts](NSUnitPower, "megawatts");
                              break;
                            case 0x705u:
                              result = +[NSUnitPower gigawatts](NSUnitPower, "gigawatts");
                              break;
                            default:
                              v2 = NSUnitPower;
                              return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
                          }
                        }
                      }
                      else
                      {
                        switch(a1)
                        {
                          case 0x600u:
                            result = +[NSUnitMass grams](NSUnitMass, "grams");
                            break;
                          case 0x602u:
                            result = +[NSUnitMass ounces](NSUnitMass, "ounces");
                            break;
                          case 0x603u:
                            result = +[NSUnitMass poundsMass](NSUnitMass, "poundsMass");
                            break;
                          case 0x604u:
                            result = +[NSUnitMass stones](NSUnitMass, "stones");
                            break;
                          case 0x605u:
                            result = +[NSUnitMass micrograms](NSUnitMass, "micrograms");
                            break;
                          case 0x606u:
                            result = +[NSUnitMass milligrams](NSUnitMass, "milligrams");
                            break;
                          case 0x607u:
                            result = +[NSUnitMass metricTons](NSUnitMass, "metricTons");
                            break;
                          case 0x608u:
                            result = +[NSUnitMass shortTons](NSUnitMass, "shortTons");
                            break;
                          case 0x609u:
                            result = +[NSUnitMass carats](NSUnitMass, "carats");
                            break;
                          case 0x60Au:
                            result = +[NSUnitMass ouncesTroy](NSUnitMass, "ouncesTroy");
                            break;
                          default:
                            v2 = NSUnitMass;
                            return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
                        }
                      }
                    }
                    else
                    {
                      switch(a1)
                      {
                        case 0x501u:
                          result = +[NSUnitLength centimeters](NSUnitLength, "centimeters");
                          break;
                        case 0x502u:
                          result = +[NSUnitLength kilometers](NSUnitLength, "kilometers");
                          break;
                        case 0x503u:
                          result = +[NSUnitLength millimeters](NSUnitLength, "millimeters");
                          break;
                        case 0x504u:
                          result = +[NSUnitLength picometers](NSUnitLength, "picometers");
                          break;
                        case 0x505u:
                          result = +[NSUnitLength feet](NSUnitLength, "feet");
                          break;
                        case 0x506u:
                          result = +[NSUnitLength inches](NSUnitLength, "inches");
                          break;
                        case 0x507u:
                          result = +[NSUnitLength miles](NSUnitLength, "miles");
                          break;
                        case 0x508u:
                          result = +[NSUnitLength yards](NSUnitLength, "yards");
                          break;
                        case 0x509u:
                          result = +[NSUnitLength lightyears](NSUnitLength, "lightyears");
                          break;
                        case 0x50Au:
                          result = +[NSUnitLength decimeters](NSUnitLength, "decimeters");
                          break;
                        case 0x50Bu:
                          result = +[NSUnitLength micrometers](NSUnitLength, "micrometers");
                          break;
                        case 0x50Cu:
                          result = +[NSUnitLength nanometers](NSUnitLength, "nanometers");
                          break;
                        case 0x50Du:
                          result = +[NSUnitLength nauticalMiles](NSUnitLength, "nauticalMiles");
                          break;
                        case 0x50Eu:
                          result = +[NSUnitLength fathoms](NSUnitLength, "fathoms");
                          break;
                        case 0x50Fu:
                          result = +[NSUnitLength furlongs](NSUnitLength, "furlongs");
                          break;
                        case 0x510u:
                          result = +[NSUnitLength astronomicalUnits](NSUnitLength, "astronomicalUnits");
                          break;
                        case 0x511u:
                          result = +[NSUnitLength parsecs](NSUnitLength, "parsecs");
                          break;
                        case 0x512u:
                          result = +[NSUnitLength scandinavianMiles](NSUnitLength, "scandinavianMiles");
                          break;
                        default:
                          v2 = NSUnitLength;
                          return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
                      }
                    }
                  }
                  else
                  {
                    switch(a1)
                    {
                      case 0xE00u:
                        result = +[NSUnitInformationStorage bits](NSUnitInformationStorage, "bits");
                        break;
                      case 0xE02u:
                        result = +[NSUnitInformationStorage gigabits](NSUnitInformationStorage, "gigabits");
                        break;
                      case 0xE03u:
                        result = +[NSUnitInformationStorage gigabytes](NSUnitInformationStorage, "gigabytes");
                        break;
                      case 0xE04u:
                        result = +[NSUnitInformationStorage kilobits](NSUnitInformationStorage, "kilobits");
                        break;
                      case 0xE05u:
                        result = +[NSUnitInformationStorage kilobytes](NSUnitInformationStorage, "kilobytes");
                        break;
                      case 0xE06u:
                        result = +[NSUnitInformationStorage megabits](NSUnitInformationStorage, "megabits");
                        break;
                      case 0xE07u:
                        result = +[NSUnitInformationStorage megabytes](NSUnitInformationStorage, "megabytes");
                        break;
                      case 0xE08u:
                        result = +[NSUnitInformationStorage terabits](NSUnitInformationStorage, "terabits");
                        break;
                      case 0xE09u:
                        result = +[NSUnitInformationStorage terabytes](NSUnitInformationStorage, "terabytes");
                        break;
                      case 0xE0Au:
                        result = +[NSUnitInformationStorage petabytes](NSUnitInformationStorage, "petabytes");
                        break;
                      default:
                        v2 = NSUnitInformationStorage;
                        return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
                    }
                  }
                }
              }
              else
              {
                switch(a1)
                {
                  case 0xC00u:
                    result = +[NSUnitEnergy calories](NSUnitEnergy, "calories");
                    break;
                  case 0xC01u:
                    result = +[NSUnitEnergy foodcalories](NSUnitEnergy, "foodcalories");
                    break;
                  case 0xC03u:
                    result = +[NSUnitEnergy kilocalories](NSUnitEnergy, "kilocalories");
                    break;
                  case 0xC04u:
                    result = +[NSUnitEnergy kilojoules](NSUnitEnergy, "kilojoules");
                    break;
                  case 0xC05u:
                    result = +[NSUnitEnergy kilowattHours](NSUnitEnergy, "kilowattHours");
                    break;
                  default:
                    v2 = NSUnitEnergy;
                    return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
                }
              }
            }
          }
          else
          {
            switch(a1)
            {
              case 0x404u:
                result = +[NSUnitDuration hours](NSUnitDuration, "hours");
                break;
              case 0x405u:
                result = +[NSUnitDuration minutes](NSUnitDuration, "minutes");
                break;
              case 0x407u:
                result = +[NSUnitDuration milliseconds](NSUnitDuration, "milliseconds");
                break;
              case 0x408u:
                result = +[NSUnitDuration microseconds](NSUnitDuration, "microseconds");
                break;
              case 0x409u:
                result = +[NSUnitDuration nanoseconds](NSUnitDuration, "nanoseconds");
                break;
              default:
                v2 = NSUnitDuration;
                return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
            }
          }
        }
      }
      else
      {
        switch(a1)
        {
          case 0x201u:
            result = +[NSUnitArea squareKilometers](NSUnitArea, "squareKilometers");
            break;
          case 0x202u:
            result = +[NSUnitArea squareFeet](NSUnitArea, "squareFeet");
            break;
          case 0x203u:
            result = +[NSUnitArea squareMiles](NSUnitArea, "squareMiles");
            break;
          case 0x204u:
            result = +[NSUnitArea acres](NSUnitArea, "acres");
            break;
          case 0x205u:
            result = +[NSUnitArea hectares](NSUnitArea, "hectares");
            break;
          case 0x206u:
            result = +[NSUnitArea squareCentimeters](NSUnitArea, "squareCentimeters");
            break;
          case 0x207u:
            result = +[NSUnitArea squareInches](NSUnitArea, "squareInches");
            break;
          case 0x208u:
            result = +[NSUnitArea squareYards](NSUnitArea, "squareYards");
            break;
          default:
            v2 = NSUnitArea;
            return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 0x101u:
          result = +[NSUnitAngle arcMinutes](NSUnitAngle, "arcMinutes");
          break;
        case 0x102u:
          result = +[NSUnitAngle arcSeconds](NSUnitAngle, "arcSeconds");
          break;
        case 0x103u:
          result = +[NSUnitAngle radians](NSUnitAngle, "radians");
          break;
        case 0x104u:
          result = +[NSUnitAngle revolutions](NSUnitAngle, "revolutions");
          break;
        default:
          v2 = NSUnitAngle;
          return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
      }
    }
  }
  else
  {
    v1 = NSUnitAcceleration;
    if (a1)
    {
LABEL_3:
      v2 = v1;
      return (NSUnitVolume *)-[__objc2_class baseUnit](v2, "baseUnit");
    }
    return (NSUnitVolume *)+[NSUnitAcceleration gravity](NSUnitAcceleration, "gravity");
  }
  return result;
}

uint64_t type metadata accessor for NSMorphologyPronoun(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t protocol witness for _LocaleProtocol.forceTemperatureUnit.getter in conformance _LocaleICU@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;
  _BYTE v5[144];
  _BYTE v6[152];

  outlined init with take of LocalePreferences?(v1 + 40, (uint64_t)v5);
  outlined init with take of LocalePreferences?((uint64_t)v5, (uint64_t)v6);
  result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v6);
  v4 = v6[137];
  if ((_DWORD)result == 1)
    v4 = 2;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.forceTemperatureUnit.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 456))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

id NSUnitLength.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *ObjCClassFromMetadata;
  id v10;
  id v11;
  id result;
  id v13;

  v6 = *a1;
  v7 = a1[1];
  v8 = *a2;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v10 = objc_msgSend(ObjCClassFromMetadata, sel_baseUnit);
  v11 = specialized bestUnitForUsage<A>(_:dimension:usage:)(v6, v7, v10, v8, a3, a4);
  swift_unknownObjectRelease();

  result = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), sel_initWithDimension_, v11);
  if (result)
  {
    v13 = result;

    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id specialized bestUnitForUsage<A>(_:dimension:usage:)(uint64_t a1, uint64_t a2, void *a3, int a4, unint64_t *a5, uint64_t a6)
{
  uint64_t ObjectType;
  void (*v11)(_BYTE *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  id result;
  NSUnitVolume *v32;
  uint64_t v33;
  unint64_t *v34;
  int v35;
  uint64_t v36;
  id v37;
  _BYTE v38[12];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v37 = a3;
  v42 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v11 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(a2 + 448);
  swift_unknownObjectRetain();
  v11(&v38[4], ObjectType, a2);
  swift_unknownObjectRelease();
  v12 = v39;
  if (v39)
  {
    v34 = a5;
    v35 = a4;
    v36 = a6;
    v13 = *(_QWORD *)&v38[4];
    v14 = v40;
    v15 = v41;
    v16 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 64);
    swift_unknownObjectRetain();
    v17 = v16(ObjectType, a2);
    v19 = v18;
    v20 = swift_unknownObjectRelease();
    *(_QWORD *)&v38[4] = 0;
    v39 = 0;
    MEMORY[0x1E0C80A78](v20);
    closure #1 in static Locale.identifierWithKeywordValue(_:key:value:)((uint64_t)&v33, 158, v17, v19, 29549, 0xE200000000000000, v14, v15, (uint64_t *)&v38[4]);
    if (v39)
      swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v13, v12);
    LOBYTE(a4) = v35;
    a5 = v34;
  }
  else
  {
    v21 = *(void (**)(uint64_t, uint64_t))(a2 + 64);
    swift_unknownObjectRetain();
    v21(ObjectType, a2);
    swift_unknownObjectRelease();
  }
  type metadata accessor for NSMorphologyPronoun(0, a5);
  *(_QWORD *)v38 = 0;
  v22 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_icuType);
  if (!v22)
  {
    Usage.rawValue.getter(a4);
    goto LABEL_16;
  }
  v23 = v22;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v26 = v25;

  v27 = Usage.rawValue.getter(a4);
  v29 = v28;
  if (!v26)
  {
LABEL_16:
    v30 = 1;
    goto LABEL_18;
  }
  if ((v24 == (id)0x796772656E65 && v26 == 0xE600000000000000
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && (v27 == 0x746C7561666564 && v29 == 0xE700000000000000
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    v30 = 0;
  }
  else
  {
    v30 = 0;
  }
LABEL_18:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }
  String.utf8CString.getter();
  uameasfmt_getUnitsForUsage();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  if (*(int *)v38 >= 1)
  {
    swift_bridgeObjectRelease();
    return v37;
  }
  v32 = getDimensionUnitFromUnitSpecifier(*(unsigned int *)&v38[4]);
  swift_bridgeObjectRelease();
  if (!v32)
    return v37;
  objc_opt_self();
  result = (id)swift_dynamicCastObjCClass();
  if (!result)
  {

    return v37;
  }
  return result;
}

uint64_t protocol witness for _LocaleProtocol.forceMeasurementSystem.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 448))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for Measurement(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void sub_1818179B0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id _NSGetUnsignedLongLongValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithUnsignedLongLong:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));
}

id newJSONObject(uint64_t a1, char a2, id *a3)
{
  unint64_t v5;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  NSString *v11;
  NSNumber *v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  _QWORD *v16;
  CFIndex v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  void *v21;
  void *v22;
  unint64_t v23;
  _QWORD *v24;
  CFArrayRef v25;
  CFArrayRef v26;
  void *v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  CFIndex v39;
  uint64_t v40;
  NSString *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSString *v45;
  NSNumber *v46;
  CFDictionaryRef v47;
  unint64_t v48;
  uint64_t v49;
  CFIndex v50;
  uint64_t v51;
  NSString *v52;
  NSNumber *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSString *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSString *v61;
  NSNumber *v62;
  void **v63;
  void **v64;
  void *v65;
  void *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSString *v70;
  NSNumber *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSString *v76;
  NSNumber *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSString *v82;
  NSNumber *v83;
  CFIndex v84;
  char *__src;
  int v86;
  char v87;
  _QWORD v88[32];
  _QWORD v89[32];
  const __CFString *v90;
  const __CFString *v91;
  NSString *v92;
  NSNumber *v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 24);
LABEL_5:
    if (*(_QWORD *)(a1 + 16) <= v5 + 1)
    {
      if (a3)
      {
        v7 = *(_QWORD *)(a1 + 48);
        v8 = v5 >= v7;
        v9 = v5 - v7;
        if (v8)
          v10 = v9;
        else
          v10 = 0;
        v11 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unexpected end of file during JSON parse."), *(_QWORD *)(a1 + 40), v10);
        v12 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", *(_QWORD *)(a1 + 24));
        v88[0] = CFSTR("NSDebugDescription");
        v88[1] = CFSTR("NSJSONSerializationErrorIndex");
        v89[0] = v11;
        v89[1] = v12;
        *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v89, v88, 2));

      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v5 + 1;
      if (skipJSONWhitespace(a1, a3, 0))
      {
        v5 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(*(_QWORD *)a1 + v5) == 125)
        {
          *(_QWORD *)(a1 + 24) = v5 + 1;
          if ((*(_BYTE *)(a1 + 8) & 1) != 0)
            return objc_alloc_init(MEMORY[0x1E0C99E08]);
          else
            return objc_alloc_init(MEMORY[0x1E0C99D80]);
        }
        v86 = 0;
        goto LABEL_17;
      }
    }
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(*(_QWORD *)a1 + v5) == 123)
    goto LABEL_5;
  v86 = 1;
LABEL_17:
  v14 = 0;
  v15 = (char *)v88;
  v16 = v89;
  v17 = 1;
  v18 = 32;
  v87 = 1;
  while (1)
  {
    v19 = v17 - 1;
    if ((*(_BYTE *)(a1 + 8) & 8) != 0)
    {
      v20 = 1;
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)a1 + v5) != 34)
      {
        if (a3)
        {
          v48 = *(_QWORD *)(a1 + 48);
          v8 = v5 >= v48;
          v49 = v5 - v48;
          v50 = v17 - 1;
          if (v8)
            v51 = v49;
          else
            v51 = 0;
          v52 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("No string key for value in object"), *(_QWORD *)(a1 + 40), v51);
          v53 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", *(_QWORD *)(a1 + 24));
          v90 = CFSTR("NSDebugDescription");
          v91 = CFSTR("NSJSONSerializationErrorIndex");
          v92 = v52;
          v93 = v53;
          *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v92, &v90, 2));

          v19 = v50;
        }
        goto LABEL_51;
      }
      v20 = 0;
    }
    newJSONString((_QWORD *)a1, v20, a3);
    if (!v21)
      goto LABEL_51;
    v22 = v21;
    if ((skipJSONWhitespace(a1, a3, 0) & 1) == 0)
    {
LABEL_50:

LABEL_51:
      v13 = 0;
      v17 = v19;
      goto LABEL_88;
    }
    v23 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(*(_QWORD *)a1 + v23) != 58)
    {
      v36 = v87;
      if (a3)
      {
        v37 = *(_QWORD *)(a1 + 48);
        v8 = v23 >= v37;
        v38 = v23 - v37;
        v39 = v17 - 1;
        if (v8)
          v40 = v38;
        else
          v40 = 0;
        v41 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("No value for key in object"), *(_QWORD *)(a1 + 40), v40);
        goto LABEL_63;
      }
LABEL_64:

      v13 = 0;
      v17 = v19;
      goto LABEL_89;
    }
    if (*(_QWORD *)(a1 + 16) <= v23 + 1)
    {
      v36 = v87;
      if (a3)
      {
        v42 = *(_QWORD *)(a1 + 48);
        v8 = v23 >= v42;
        v43 = v23 - v42;
        v39 = v17 - 1;
        if (v8)
          v44 = v43;
        else
          v44 = 0;
        v41 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unexpected end of file during JSON parse."), *(_QWORD *)(a1 + 40), v44);
LABEL_63:
        v45 = v41;
        v46 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", *(_QWORD *)(a1 + 24));
        v90 = CFSTR("NSDebugDescription");
        v91 = CFSTR("NSJSONSerializationErrorIndex");
        v92 = v45;
        v93 = v46;
        *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v92, &v90, 2));

        v19 = v39;
        goto LABEL_64;
      }
      goto LABEL_64;
    }
    *(_QWORD *)(a1 + 24) = v23 + 1;
    if ((skipJSONWhitespace(a1, a3, 0) & 1) == 0)
      goto LABEL_50;
    v24 = v16;
    v25 = newJSONValue((NSString *)a1, a3);
    if (!v25)
    {

      v13 = 0;
      --v17;
      goto LABEL_88;
    }
    v26 = v25;
    if (v19 >= v18)
    {
      v84 = v17 - 1;
      __src = v15;
      v18 *= 2;
      if ((v87 & 1) != 0)
      {
        v27 = NSAllocateObjectArray(v18);
        v28 = (char *)NSAllocateObjectArray(v18);
        v29 = v28;
        if (!v28 || !v27)
        {
          free(v28);
          free(v27);

          if (a3)
          {
            v72 = *(_QWORD *)(a1 + 24);
            v73 = *(_QWORD *)(a1 + 48);
            v8 = v72 >= v73;
            v74 = v72 - v73;
            if (v8)
              v75 = v74;
            else
              v75 = 0;
            v76 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Memory exhausted during parse of dictionary."), *(_QWORD *)(a1 + 40), v75);
            v77 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", *(_QWORD *)(a1 + 24));
            v90 = CFSTR("NSDebugDescription");
            v91 = CFSTR("NSJSONSerializationErrorIndex");
            v92 = v76;
            v93 = v77;
            *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v92, &v90, 2));

          }
          v13 = 0;
          v36 = 1;
LABEL_115:
          v17 = v84;
          v15 = __src;
          v16 = v24;
          goto LABEL_89;
        }
        memmove(v27, v24, v14);
        memmove(v29, __src, v14);
      }
      else
      {
        v29 = NSReallocateObjectArray(v15, v18);
        v30 = NSReallocateObjectArray(v24, v18);
        v27 = v30;
        if (!v29 || !v30)
        {
          free(v29);
          free(v27);

          if (a3)
          {
            v78 = *(_QWORD *)(a1 + 24);
            v79 = *(_QWORD *)(a1 + 48);
            v8 = v78 >= v79;
            v80 = v78 - v79;
            if (v8)
              v81 = v80;
            else
              v81 = 0;
            v82 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Memory exhausted during parse of dictionary."), *(_QWORD *)(a1 + 40), v81);
            v83 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", *(_QWORD *)(a1 + 24));
            v90 = CFSTR("NSDebugDescription");
            v91 = CFSTR("NSJSONSerializationErrorIndex");
            v92 = v82;
            v93 = v83;
            *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v92, &v90, 2));

          }
          v36 = 0;
          v13 = 0;
          goto LABEL_115;
        }
      }
      v87 = 0;
      v24 = v27;
      v15 = v29;
    }
    *(_QWORD *)&v15[v14] = v22;
    v24[v14 / 8] = v26;
    v16 = v24;
    if (!v86)
      break;
    if (!skipJSONWhitespace(a1, a3, 1))
      goto LABEL_67;
    v32 = *(_QWORD *)(a1 + 16);
    v31 = *(_QWORD *)(a1 + 24);
    if (v32 <= v31)
      goto LABEL_67;
    if (*(_BYTE *)(*(_QWORD *)a1 + v31) != 44)
    {
      if (a3)
      {
        v58 = *(_QWORD *)(a1 + 48);
        v8 = v31 >= v58;
        v59 = v31 - v58;
        if (v8)
          v60 = v59;
        else
          v60 = 0;
        v61 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Badly formed object"), *(_QWORD *)(a1 + 40), v60);
        v62 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", *(_QWORD *)(a1 + 24));
        v90 = CFSTR("NSDebugDescription");
        v91 = CFSTR("NSJSONSerializationErrorIndex");
        v92 = v61;
        v93 = v62;
        *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v92, &v90, 2));

      }
LABEL_87:
      v13 = 0;
LABEL_88:
      v36 = v87;
      goto LABEL_89;
    }
    v33 = v31 + 1;
    if (v32 <= v33)
      goto LABEL_67;
    *(_QWORD *)(a1 + 24) = v33;
    if (!skipJSONWhitespace(a1, a3, 1))
      goto LABEL_67;
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(a1 + 16) <= v5)
      goto LABEL_67;
LABEL_49:
    ++v17;
    v14 += 8;
  }
  if (!skipJSONWhitespace(a1, a3, 0))
    goto LABEL_87;
  v34 = *(_QWORD *)(a1 + 24);
  v35 = *(unsigned __int8 *)(*(_QWORD *)a1 + v34);
  if (v35 == 44)
  {
    if (*(_QWORD *)(a1 + 16) > v34 + 1)
    {
      *(_QWORD *)(a1 + 24) = v34 + 1;
      if (!skipJSONWhitespace(a1, a3, 0))
        goto LABEL_87;
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(*(_QWORD *)a1 + v5) == 125)
        goto LABEL_67;
      goto LABEL_49;
    }
    v36 = v87;
    if (a3)
    {
      v67 = *(_QWORD *)(a1 + 48);
      v8 = v34 >= v67;
      v68 = v34 - v67;
      if (v8)
        v69 = v68;
      else
        v69 = 0;
      v57 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unexpected end of file during JSON parse."), *(_QWORD *)(a1 + 40), v69);
      goto LABEL_101;
    }
    goto LABEL_102;
  }
  if (v35 != 125)
  {
    v36 = v87;
    if (a3)
    {
      v54 = *(_QWORD *)(a1 + 48);
      v8 = v34 >= v54;
      v55 = v34 - v54;
      if (v8)
        v56 = v55;
      else
        v56 = 0;
      v57 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Badly formed object"), *(_QWORD *)(a1 + 40), v56);
LABEL_101:
      v70 = v57;
      v71 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", *(_QWORD *)(a1 + 24));
      v90 = CFSTR("NSDebugDescription");
      v91 = CFSTR("NSJSONSerializationErrorIndex");
      v92 = v70;
      v93 = v71;
      *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v92, &v90, 2));

    }
LABEL_102:
    v13 = 0;
    goto LABEL_89;
  }
LABEL_67:
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithObjects:forKeys:count:", v24, v15, v17);
    goto LABEL_88;
  }
  v36 = v87;
  if (dyld_program_sdk_at_least())
    v47 = (CFDictionaryRef)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjects:forKeys:count:", v24, v15, v17);
  else
    v47 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v15, (const void **)v24, v17, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = (uint64_t)v47;
LABEL_89:
  if (v17)
  {
    v63 = (void **)v16;
    v64 = (void **)v15;
    do
    {
      v65 = *v63++;

      v66 = *v64++;
      --v17;
    }
    while (v17);
  }
  if ((v36 & 1) == 0)
  {
    free(v16);
    free(v15);
  }
  ++*(_QWORD *)(a1 + 24);
  return (id)v13;
}

uint64_t skipJSONWhitespace(uint64_t a1, _QWORD *a2, char a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  NSString *v16;
  NSNumber *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  _QWORD v24[2];
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  if (v6 > v7)
  {
    if ((*(_BYTE *)(a1 + 8) & 8) != 0)
    {
      while (1)
      {
        v18 = *(_QWORD *)a1;
        v19 = v7 + 1;
        if (v6 <= v7 + 1)
          v20 = 0;
        else
          v20 = *(unsigned __int8 *)(v18 + v19);
        v21 = *(unsigned __int8 *)(v18 + v7);
        switch(*(_BYTE *)(v18 + v7))
        {
          case 9:
          case 0xB:
          case 0xC:
            goto LABEL_31;
          case 0xA:
            goto LABEL_28;
          case 0xD:
            *(_QWORD *)(a1 + 24) = v19;
            if (v6 <= v19 || *(_BYTE *)(v18 + v19) != 10)
              goto LABEL_35;
            v19 = v7 + 2;
LABEL_28:
            *(_QWORD *)(a1 + 24) = v19;
LABEL_35:
            ++*(_QWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 48) = v19;
            goto LABEL_36;
          default:
            if (v21 == 160 || v21 == 32)
            {
LABEL_31:
              *(_QWORD *)(a1 + 24) = v19;
            }
            else
            {
              v22 = v6 > v19 && v21 == 47;
              v23 = v22;
              if (v22 && v20 == 47)
              {
                *(_QWORD *)(a1 + 24) = v7 + 2;
                if ((skipJSON5Comment((uint64_t *)a1, 1, a2) & 1) == 0)
                  return 0;
              }
              else
              {
                if (v20 != 42)
                  v23 = 0;
                if (v23 != 1)
                  return 1;
                *(_QWORD *)(a1 + 24) = v7 + 2;
                result = skipJSON5Comment((uint64_t *)a1, 0, a2);
                if (!(_DWORD)result)
                  return result;
              }
            }
LABEL_36:
            v6 = *(_QWORD *)(a1 + 16);
            v7 = *(_QWORD *)(a1 + 24);
            if (v6 <= v7)
              goto LABEL_16;
            break;
        }
      }
    }
    v8 = *(_QWORD *)a1;
    do
    {
      v9 = *(unsigned __int8 *)(v8 + v7);
      if (v9 > 0xC)
      {
        if (v9 != 32)
        {
          if (v9 != 13)
            return 1;
          v10 = v7 + 1;
          *(_QWORD *)(a1 + 24) = v7 + 1;
          if (v6 > v7 + 1 && *(_BYTE *)(v8 + v10) == 10)
          {
            v10 = v7 + 2;
            *(_QWORD *)(a1 + 24) = v7 + 2;
          }
          ++*(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 48) = v10;
          v7 = v10;
          continue;
        }
      }
      else if (v9 != 9)
      {
        if (v9 != 10)
          return 1;
        *(_QWORD *)(a1 + 24) = ++v7;
        ++*(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 48) = v7;
        continue;
      }
      *(_QWORD *)(a1 + 24) = ++v7;
    }
    while (v6 > v7);
  }
LABEL_16:
  *(_QWORD *)(a1 + 24) = v6;
  if ((a3 & 1) != 0)
    return 1;
  if (a2)
  {
    v12 = *(_QWORD *)(a1 + 48);
    v13 = v6 >= v12;
    v14 = v6 - v12;
    if (v13)
      v15 = v14;
    else
      v15 = 0;
    v16 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unexpected end of file"), *(_QWORD *)(a1 + 40), v15);
    v17 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", *(_QWORD *)(a1 + 24));
    v24[0] = CFSTR("NSDebugDescription");
    v24[1] = CFSTR("NSJSONSerializationErrorIndex");
    v25[0] = v16;
    v25[1] = v17;
    *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, v24, 2));

  }
  return 0;
}

void newJSONString(_QWORD *a1, int a2, _QWORD *a3)
{
  unint64_t v5;
  const uint8_t *v6;
  uint8_t v7;
  char v8;
  char v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  const uint8_t *v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  char v22;
  BOOL v24;
  char v25;
  char v26;
  char v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  NSString *v34;
  NSNumber *v35;
  char v36;
  unint64_t v37;
  __objc2_class *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  const uint8_t *v46;
  int v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint8_t v58;
  uint8_t v59;
  char v60;
  BOOL v61;
  unsigned __int8 v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  NSString *v67;
  NSNumber *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSString *v73;
  NSNumber *v74;
  id v75;
  NSString *v76;
  char v77;
  __objc2_class **v78;
  void *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSString *v83;
  NSNumber *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSString *v89;
  NSNumber *v90;
  unint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSString *v96;
  NSNumber *v97;
  int32_t v98;
  void *v99;
  id v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSString *v107;
  NSNumber *v108;
  unint64_t v109;
  unint64_t v110;
  NSString *v111;
  uint64_t v112;
  NSString *v113;
  NSNumber *v114;
  unint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSString *v120;
  NSNumber *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  NSString *v129;
  NSNumber *v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  unint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSString *v141;
  NSNumber *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  NSString *v146;
  NSNumber *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  NSString *v151;
  NSNumber *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  NSString *v156;
  NSNumber *v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  NSString *v161;
  NSNumber *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  NSString *v166;
  NSNumber *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  NSString *v171;
  NSNumber *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  NSString *v176;
  NSNumber *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  NSString *v181;
  NSNumber *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  NSString *v186;
  NSNumber *v187;
  NSString *v188;
  NSString *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  const uint8_t *__s2;
  _QWORD v194[5];
  int v195;
  NSString *v196;
  NSNumber *v197;
  uint64_t v198;
  char v199;
  _QWORD v200[2];
  const __CFString *v201;
  const __CFString *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v5 = a1[3];
  v6 = (const uint8_t *)*a1;
  v7 = v6[v5];
  if (v7 != 34)
  {
    v10 = a1[1] & 8;
    v11 = v7 != 39 || v10 == 0;
    if (!v11)
    {
      v8 = 0;
      ++v5;
      v9 = 1;
      goto LABEL_16;
    }
    if (a2 != 1 || !v10)
    {
      if (a3)
      {
        v64 = a1[6];
        v31 = v5 >= v64;
        v65 = v5 - v64;
        if (v31)
          v66 = v65;
        else
          v66 = 0;
        v67 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("String without surrounding quotes"), a1[5], v66);
        v68 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
        v201 = CFSTR("NSDebugDescription");
        v202 = CFSTR("NSJSONSerializationErrorIndex");
        v196 = v67;
        v197 = v68;
        *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

      }
      return;
    }
    if (((v7 & 0xDF) - 65) < 0x1Au
      || (v6[v5] - 36 <= 0x3B ? (v12 = ((1 << (v7 - 36)) & 0x900000000000001) == 0) : (v12 = 1), !v12))
    {
LABEL_15:
      v9 = 0;
      v13 = 1;
      v8 = 1;
      goto LABEL_17;
    }
    if ((char)v6[(int)v5] > -65)
    {
      v98 = v5;
    }
    else
    {
      v98 = utf8_back1SafeBody(v6, 0, v5);
      v6 = (const uint8_t *)*a1;
    }
    v101 = (char)v6[v98];
    v102 = v6[v98];
    if ((v101 & 0x80000000) == 0)
    {
LABEL_213:
      if (_MergedGlobals_141 != -1)
        dispatch_once(&_MergedGlobals_141, &__block_literal_global_66);
      if (!MEMORY[0x186DAA934](qword_1ECD0A450, v102))
      {
        if (a3)
        {
          v103 = a1[3];
          v104 = a1[6];
          v31 = v103 >= v104;
          v105 = v103 - v104;
          if (v31)
            v106 = v105;
          else
            v106 = 0;
          v107 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Disallowed first character in JSON5 object key"), a1[5], v106);
          v108 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
          v201 = CFSTR("NSDebugDescription");
          v202 = CFSTR("NSJSONSerializationErrorIndex");
          v196 = v107;
          v197 = v108;
          *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

        }
        return;
      }
      goto LABEL_15;
    }
    v122 = v98;
    v123 = v98 + 1;
    v124 = a1[2];
    if (v124 != v123)
    {
      if (v102 < 0xE0)
      {
        if (v102 < 0xC2)
          goto LABEL_234;
        v133 = v102 & 0x1F;
      }
      else
      {
        if (v102 > 0xEF)
        {
          if (v102 > 0xF4)
            goto LABEL_234;
          v135 = v6[v123];
          if (((_writeJSONBoolean_falseData[(v135 >> 4) + 5] >> (v102 + 16)) & 1) == 0)
            goto LABEL_234;
          v123 = v122 + 2;
          if (v124 == v122 + 2)
            goto LABEL_234;
          v132 = v6[v123] ^ 0x80;
          if (v132 > 0x3F)
            goto LABEL_234;
          LODWORD(v131) = v135 & 0x3F | (((_DWORD)v102 - 240) << 6);
        }
        else
        {
          v131 = v101 & 0xF;
          if (((a00000000000000[v131] >> (v6[v123] >> 5)) & 1) == 0)
            goto LABEL_234;
          v132 = v6[v123] & 0x3F;
        }
        LODWORD(v123) = v123 + 1;
        if (v124 == (int)v123)
          goto LABEL_234;
        v123 = (int)v123;
        v133 = v132 | ((_DWORD)v131 << 6);
      }
      v134 = v6[v123] ^ 0x80;
      if (v134 <= 0x3F)
      {
        v102 = v134 | (v133 << 6);
        goto LABEL_213;
      }
    }
LABEL_234:
    if (a3)
    {
      v125 = a1[3];
      v126 = a1[6];
      v31 = v125 >= v126;
      v127 = v125 - v126;
      if (v31)
        v128 = v127;
      else
        v128 = 0;
      v129 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unparseable UTF8 character"), a1[5], v128);
      v130 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
      v201 = CFSTR("NSDebugDescription");
      v202 = CFSTR("NSJSONSerializationErrorIndex");
      v196 = v129;
      v197 = v130;
      *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

    }
    return;
  }
  v8 = 0;
  v9 = 0;
  ++v5;
LABEL_16:
  v13 = 2;
LABEL_17:
  v14 = a1[2];
  if (v14 <= v5)
  {
    if (a3)
    {
      v29 = a1[3];
      v30 = a1[6];
      v31 = v29 >= v30;
      v32 = v29 - v30;
      if (v31)
        v33 = v32;
      else
        v33 = 0;
      v34 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unexpected end of file during string parse"), a1[5], v33);
      v35 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
      v201 = CFSTR("NSDebugDescription");
      v202 = CFSTR("NSJSONSerializationErrorIndex");
      v196 = v34;
      v197 = v35;
      *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

    }
  }
  else
  {
    v15 = 0;
    v16 = (const uint8_t *)*a1;
    v17 = -2128831035;
    v18 = v5;
    while (1)
    {
      v19 = v16[v18];
      if (v19 < 0x20)
        break;
      v17 = 16777619 * (v17 ^ v19);
      if (v19 == 92)
      {
        if (v14 <= v18 + 1)
          goto LABEL_51;
        v20 = v16[v18 + 1];
        if (v20 == 117)
        {
          v21 = v18 + 6;
LABEL_52:
          v15 = 1;
          goto LABEL_53;
        }
        if ((a1[1] & 8) == 0)
        {
LABEL_51:
          v21 = v18 + 2;
          goto LABEL_52;
        }
        switch(v20)
        {
          case 10:
            v21 = v18 + 2;
            break;
          case 13:
            v21 = v18 + 2;
            if (v14 > v18 + 2 && v16[v21] == 10)
              v21 = v18 + 3;
            break;
          case 120:
            v21 = v18 + 4;
            goto LABEL_52;
          default:
            goto LABEL_51;
        }
        ++a1[5];
        a1[6] = v21;
        goto LABEL_52;
      }
      if (v19 == 39)
        v22 = v9;
      else
        v22 = 0;
      v24 = v7 == 34 && v19 == 34;
      if (v19 == 58)
        v25 = v8;
      else
        v25 = 0;
      if ((v25 & 1) != 0 || (v22 & 1) != 0 || v24)
        goto LABEL_74;
      v26 = (v19 & 0x7F) == 0x20 ? v8 : 0;
      if ((v26 & 1) != 0)
        goto LABEL_74;
      v11 = v19 == 47;
      v27 = v8 ^ 1;
      v21 = v18 + 1;
      if (!v11)
        v27 = 1;
      if ((v27 & 1) == 0 && v14 > v21)
      {
        v28 = v16[v21];
        if (v28 == 42 || v28 == 47)
          goto LABEL_74;
      }
LABEL_53:
      v18 = v21;
      if (v14 <= v21)
      {
        if (a3)
        {
          v69 = a1[3];
          v70 = a1[6];
          v31 = v69 >= v70;
          v71 = v69 - v70;
          if (v31)
            v72 = v71;
          else
            v72 = 0;
          v73 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unterminated string"), a1[5], v72);
          v74 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
          v201 = CFSTR("NSDebugDescription");
          v202 = CFSTR("NSJSONSerializationErrorIndex");
          v196 = v73;
          v197 = v74;
          *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

        }
        return;
      }
    }
    if (v19 == 10)
      v36 = v8;
    else
      v36 = 0;
    v37 = v18;
    if ((v36 & 1) != 0)
    {
LABEL_73:
      ++a1[5];
      a1[6] = v37;
LABEL_74:
      if (v18 == v5)
      {
        a1[3] = v5 + 1;
        if ((a1[1] & 2) != 0)
          v38 = NSMutableString;
        else
          v38 = NSString;
        v75 = objc_alloc_init(v38);
        return;
      }
      v39 = v18 - 1;
      v40 = v18 - v5;
      __s2 = &v16[v5];
      v192 = (uint64_t)(a1 + 7);
      v41 = (uint64_t)&a1[4 * v17 + 7];
      if (*(_DWORD *)(v41 + 24) == v17 && *(_QWORD *)(v41 + 8) == v40 && !memcmp(*(const void **)v41, __s2, v18 - v5))
      {
        v99 = *(void **)(v192 + 32 * v17 + 16);
        if (v99)
        {
          a1[3] = v39 + v13;
          if ((a1[1] & 2) != 0)
            objc_msgSend(v99, "mutableCopy");
          else
            v100 = v99;
          return;
        }
      }
      if ((v15 & 1) != 0)
      {
        v191 = a3;
        v42 = malloc_type_malloc(v18 - v5, 0x100004077774924uLL);
        v190 = v18 - v5;
        if (v5 < v18)
        {
          v43 = v18 - v5;
          v44 = 0;
          while (1)
          {
            if (v44 >= v43)
            {
              if (2 * v43 <= 6)
                v43 = 6;
              else
                v43 *= 2;
              v196 = 0;
              v197 = (NSNumber *)&v196;
              v198 = 0x2020000000;
              v199 = 0;
              v194[0] = MEMORY[0x1E0C809B0];
              v194[1] = 3221225472;
              v194[2] = __newJSONString_block_invoke_2;
              v194[3] = &unk_1E0F4F470;
              v194[4] = &v196;
              v45 = MEMORY[0x186DA80E4](v42, v43, 762037687, v194);
              if (LOBYTE(v197[3].super.super.isa))
              {
                if (v191)
                {
                  v109 = a1[3];
                  v110 = a1[6];
                  v111 = [NSString alloc];
                  v112 = v109 - v110;
                  if (v109 < v110)
                    v112 = 0;
                  v113 = -[NSString initWithFormat:](v111, "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Memory exhausted during parse of string."), a1[5], v112);
                  v114 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
                  v200[0] = CFSTR("NSDebugDescription");
                  v200[1] = CFSTR("NSJSONSerializationErrorIndex");
                  v201 = (const __CFString *)v113;
                  v202 = (const __CFString *)v114;
                  *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v201, v200, 2));

                }
                _Block_object_dispose(&v196, 8);
                return;
              }
              v42 = (_BYTE *)v45;
              _Block_object_dispose(&v196, 8);
            }
            v46 = (const uint8_t *)*a1;
            v47 = *(unsigned __int8 *)(*a1 + v5);
            if (v47 == 92)
              break;
            v42[v44] = v47;
LABEL_154:
            ++v44;
            if (++v5 >= v18)
              goto LABEL_187;
          }
          if (v5 >= v39)
          {
            if (v191)
            {
              v116 = a1 + 3;
              v115 = a1[3];
              v117 = a1[6];
              v31 = v115 >= v117;
              v118 = v115 - v117;
              if (v31)
                v119 = v118;
              else
                v119 = 0;
              v120 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unfinished control character"), a1[5], v119);
              v121 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", *v116);
              v201 = CFSTR("NSDebugDescription");
              v202 = CFSTR("NSJSONSerializationErrorIndex");
              v196 = v120;
              v197 = v121;
              *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

            }
            goto LABEL_231;
          }
          v48 = v46[v5 + 1];
          v49 = v5 + 2;
          if (v48 > 0x61)
          {
            switch(v46[v5 + 1])
            {
              case 'n':
                goto LABEL_98;
              case 'o':
              case 'p':
              case 'q':
              case 's':
                goto LABEL_104;
              case 'r':
                v50 = 13;
                goto LABEL_152;
              case 't':
                v50 = 9;
                goto LABEL_152;
              case 'u':
                v195 = 0;
                if ((parseJSONUnicodePointAtLocation(a1, v49, v18 - 1, &v195, v191) & 1) == 0)
                  goto LABEL_231;
                if ((a1[1] & 8) != 0 && !v195)
                {
                  free(v42);
                  if (v191)
                  {
                    v137 = a1 + 3;
                    v136 = a1[3];
                    v138 = a1[6];
                    v31 = v136 >= v138;
                    v139 = v136 - v138;
                    if (v31)
                      v140 = v139;
                    else
                      v140 = 0;
                    v141 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unsupported escaped (unicode) null"), a1[5], v140);
                    v142 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", *v137);
                    v201 = CFSTR("NSDebugDescription");
                    v202 = CFSTR("NSJSONSerializationErrorIndex");
                    v196 = v141;
                    v197 = v142;
                    *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

                  }
                  return;
                }
                if ((v195 & 0xFC00) == 0xD800)
                {
                  if (v5 + 11 > v39)
                  {
                    a1[3] = v5;
                    if (v191)
                    {
                      v153 = a1[6];
                      v31 = v5 >= v153;
                      v154 = v5 - v153;
                      if (v31)
                        v155 = v154;
                      else
                        v155 = 0;
                      v156 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unexpected end of file during string parse (expected low-surrogate code point but did not find one)."), a1[5], v155);
                      v157 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
                      v201 = CFSTR("NSDebugDescription");
                      v202 = CFSTR("NSJSONSerializationErrorIndex");
                      v196 = v156;
                      v197 = v157;
                      *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

                    }
                    goto LABEL_231;
                  }
                  v55 = v5 + *a1;
                  if (*(_BYTE *)(v55 + 6) != 92 || *(_BYTE *)(v55 + 7) != 117)
                  {
                    a1[3] = v5;
                    if (v191)
                    {
                      v143 = a1[6];
                      v31 = v5 >= v143;
                      v144 = v5 - v143;
                      if (v31)
                        v145 = v144;
                      else
                        v145 = 0;
                      v146 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Missing low code point in surrogate pair"), a1[5], v145);
                      v147 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
                      v201 = CFSTR("NSDebugDescription");
                      v202 = CFSTR("NSJSONSerializationErrorIndex");
                      v196 = v146;
                      v197 = v147;
                      *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

                    }
LABEL_231:
                    free(v42);
                    return;
                  }
                  if ((parseJSONUnicodePointAtLocation(a1, v5 + 8, v18 - 1, (_WORD *)&v195 + 1, v191) & 1) == 0)
                    goto LABEL_231;
                  if ((HIWORD(v195) & 0xFC00) != 0xDC00)
                  {
                    a1[3] = v5;
                    if (v191)
                    {
                      v168 = a1[6];
                      v31 = v5 >= v168;
                      v169 = v5 - v168;
                      if (v31)
                        v170 = v169;
                      else
                        v170 = 0;
                      v171 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Invalid surrogate pair in unicode escape sequence"), a1[5], v170);
                      v172 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
                      v201 = CFSTR("NSDebugDescription");
                      v202 = CFSTR("NSJSONSerializationErrorIndex");
                      v196 = v171;
                      v197 = v172;
                      *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

                    }
                    goto LABEL_231;
                  }
                  v188 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]([NSString alloc], "initWithBytesNoCopy:length:encoding:freeWhenDone:", &v195, 4, 2483028224, 0);
                  v200[0] = 0;
                  v56 = -[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v188, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", &v42[v44], 6, v200, 4, 0, 0, -[NSString length](v188, "length"), 0);

                  if (!v56)
                  {
                    a1[3] = v5;
                    if (v191)
                    {
                      v173 = a1[6];
                      v31 = v5 >= v173;
                      v174 = v5 - v173;
                      if (v31)
                        v175 = v174;
                      else
                        v175 = 0;
                      v176 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unable to convert hex escape sequence (with high character) to UTF8-encoded character"), a1[5], v175);
                      v177 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
                      v201 = CFSTR("NSDebugDescription");
                      v202 = CFSTR("NSJSONSerializationErrorIndex");
                      v196 = v176;
                      v197 = v177;
                      *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

                    }
                    goto LABEL_231;
                  }
                  v57 = v200[0];
                  v5 += 10;
                }
                else
                {
                  v189 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]([NSString alloc], "initWithBytesNoCopy:length:encoding:freeWhenDone:", &v195, 2, 2483028224, 0);
                  v200[0] = 0;
                  v63 = -[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v189, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", &v42[v44], 6, v200, 4, 0, 0, -[NSString length](v189, "length"), 0);

                  if (!v63)
                  {
                    a1[3] = v5;
                    if (v191)
                    {
                      v158 = a1[6];
                      v31 = v5 >= v158;
                      v159 = v5 - v158;
                      if (v31)
                        v160 = v159;
                      else
                        v160 = 0;
                      v161 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unable to convert hex escape sequence (no high character) to UTF8-encoded character."), a1[5], v160);
                      v162 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
                      v201 = CFSTR("NSDebugDescription");
                      v202 = CFSTR("NSJSONSerializationErrorIndex");
                      v196 = v161;
                      v197 = v162;
                      *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

                    }
                    goto LABEL_231;
                  }
                  v57 = v200[0];
                  v5 += 4;
                }
                v44 = v44 + v57 - 1;
                break;
              default:
                if (v48 == 98)
                {
                  v50 = 8;
                }
                else
                {
                  if (v48 != 102)
                    goto LABEL_104;
                  v50 = 12;
                }
                goto LABEL_152;
            }
            goto LABEL_153;
          }
          if (v48 == 34)
          {
            v42[v44] = 34;
          }
          else
          {
            if (v48 == 47)
            {
              v50 = 47;
            }
            else if (v48 == 92)
            {
              v50 = 92;
            }
            else
            {
LABEL_104:
              v51 = a1[1];
              v52 = v51 & 8;
              if (v48 == 120 && v52 != 0)
              {
                v58 = v46[v49];
                v59 = v46[v5 + 3];
                v60 = v58 - 48;
                if ((v58 - 48) >= 0xAu
                  && (v58 - 65 <= 0x25 ? (v61 = ((1 << (v58 - 65)) & 0x3F0000003FLL) == 0) : (v61 = 1),
                      v61)
                  || (v62 = v59 - 48, (v59 - 48) >= 0xAu)
                  && (v59 - 65 > 0x25 || ((1 << (v59 - 65)) & 0x3F0000003FLL) == 0))
                {
                  a1[3] = v5;
                  if (v191)
                  {
                    v183 = a1[6];
                    v31 = v5 >= v183;
                    v184 = v5 - v183;
                    if (v31)
                      v185 = v184;
                    else
                      v185 = 0;
                    v186 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unable to convert hex ('x') escape sequence character"), a1[5], v185);
                    v187 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
                    v201 = CFSTR("NSDebugDescription");
                    v202 = CFSTR("NSJSONSerializationErrorIndex");
                    v196 = v186;
                    v197 = v187;
                    *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

                  }
                  goto LABEL_231;
                }
                if ((v58 - 48) >= 0xAu)
                {
                  if ((v58 - 65) > 5u)
                  {
                    if ((v58 - 97) > 5u)
                      goto LABEL_305;
                    v60 = v58 - 87;
                  }
                  else
                  {
                    v60 = v58 - 55;
                  }
                }
                if ((v59 - 48) >= 0xAu)
                {
                  if ((v59 - 65) > 5u)
                  {
                    if ((v59 - 97) > 5u)
                    {
LABEL_305:
                      __break(1u);
                      return;
                    }
                    v62 = v59 - 87;
                  }
                  else
                  {
                    v62 = v59 - 55;
                  }
                }
                if (!(v62 | (16 * v60)))
                {
                  a1[3] = v5;
                  if (v191)
                  {
                    v148 = a1[6];
                    v31 = v5 >= v148;
                    v149 = v5 - v148;
                    if (v31)
                      v150 = v149;
                    else
                      v150 = 0;
                    v151 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unsupported escaped (hex) null"), a1[5], v150);
                    v152 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
                    v201 = CFSTR("NSDebugDescription");
                    v202 = CFSTR("NSJSONSerializationErrorIndex");
                    v196 = v151;
                    v197 = v152;
                    *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

                  }
                  goto LABEL_231;
                }
                v42[v44] = v62 | (16 * v60);
                v5 += 2;
                goto LABEL_153;
              }
              if (v48 != 39 || v52 == 0)
              {
                if (v48 == 48 && (v51 & 8) != 0)
                {
                  a1[3] = v5;
                  if (v191)
                  {
                    v163 = a1[6];
                    v31 = v5 >= v163;
                    v164 = v5 - v163;
                    if (v31)
                      v165 = v164;
                    else
                      v165 = 0;
                    v166 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unsupported escaped null"), a1[5], v165);
                    v167 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
                    v201 = CFSTR("NSDebugDescription");
                    v202 = CFSTR("NSJSONSerializationErrorIndex");
                    v196 = v166;
                    v197 = v167;
                    *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

                  }
                  goto LABEL_231;
                }
                if (v48 != 10 || (v51 & 8) == 0)
                {
                  if (v48 != 13 || (v51 & 8) == 0)
                  {
                    a1[3] = v5;
                    if (v191)
                    {
                      v178 = a1[6];
                      v31 = v5 >= v178;
                      v179 = v5 - v178;
                      if (v31)
                        v180 = v179;
                      else
                        v180 = 0;
                      v181 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Invalid escape sequence"), a1[5], v180);
                      v182 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
                      v201 = CFSTR("NSDebugDescription");
                      v202 = CFSTR("NSJSONSerializationErrorIndex");
                      v196 = v181;
                      v197 = v182;
                      *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

                    }
                    goto LABEL_231;
                  }
                  if (v49 < v39 && v46[v49] == 10)
                    ++v5;
                }
LABEL_98:
                v50 = 10;
              }
              else
              {
                v50 = 39;
              }
            }
LABEL_152:
            v42[v44] = v50;
          }
LABEL_153:
          ++v5;
          goto LABEL_154;
        }
        v44 = 0;
LABEL_187:
        v78 = off_1E0F11090;
        if ((a1[1] & 2) != 0)
          v78 = off_1E0F10DA0;
        v79 = (void *)objc_msgSend(objc_alloc(*v78), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v42, v44, 4, 1);
        if (!v79)
        {
          if (v191)
          {
            v92 = a1 + 3;
            v91 = a1[3];
            v93 = a1[6];
            v31 = v91 >= v93;
            v94 = v91 - v93;
            if (v31)
              v95 = v94;
            else
              v95 = 0;
            v96 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unable to convert data to string"), a1[5], v95);
            v97 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", *v92);
            v201 = CFSTR("NSDebugDescription");
            v202 = CFSTR("NSJSONSerializationErrorIndex");
            v196 = v96;
            v197 = v97;
            *v191 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

          }
          goto LABEL_231;
        }
        a1[3] = v39 + v13;
        _setInCache(v192, v79, v17, (uint64_t)__s2, v190);
      }
      else
      {
        v76 = -[NSString initWithBytes:length:encoding:]([NSString alloc], "initWithBytes:length:encoding:", *a1 + v5, v18 - v5, 4);
        if (v76)
        {
          a1[3] = v39 + v13;
          _setInCache(v192, v76, v17, (uint64_t)__s2, v40);
        }
        else if (a3)
        {
          v85 = a1[3];
          v86 = a1[6];
          v31 = v85 >= v86;
          v87 = v85 - v86;
          if (v31)
            v88 = v87;
          else
            v88 = 0;
          v89 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unable to convert data to string"), a1[5], v88);
          v90 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
          v201 = CFSTR("NSDebugDescription");
          v202 = CFSTR("NSJSONSerializationErrorIndex");
          v196 = v89;
          v197 = v90;
          *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

        }
      }
    }
    else
    {
      v77 = v8 ^ 1;
      if (v19 != 13)
        v77 = 1;
      if ((v77 & 1) == 0)
      {
        v37 = v18;
        if (v14 > v18 + 1)
        {
          if (v16[v18 + 1] == 10)
            v37 = v18 + 1;
          else
            v37 = v18;
        }
        goto LABEL_73;
      }
      a1[3] = v18;
      if (a3)
      {
        v80 = a1[6];
        v31 = v18 >= v80;
        v81 = v18 - v80;
        if (v31)
          v82 = v81;
        else
          v82 = 0;
        v83 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unescaped control character"), a1[5], v82);
        v84 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
        v201 = CFSTR("NSDebugDescription");
        v202 = CFSTR("NSJSONSerializationErrorIndex");
        v196 = v83;
        v197 = v84;
        *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v196, &v201, 2));

      }
    }
  }
}

void sub_18181A840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFArrayRef newJSONValue(NSString *a1, id *a2)
{
  Class isa;
  Class v5;
  BOOL v6;
  int64_t v7;
  int64_t v8;
  NSString *v9;
  NSNumber *v10;
  CFArrayRef v11;
  Class v12;
  Class v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  void *v19;
  Class v20;
  Class v21;
  objc_class *v22;
  const __CFArray *v23;
  Class v24;
  const __CFArray *v25;
  Class v26;
  int64_t v27;
  int64_t v28;
  NSString *v29;
  NSNumber *v30;
  id v31;
  id v32;
  id v33;
  Class v36;
  Class v37;
  int v38;
  objc_class *v39;
  void *v40;
  uint64_t v41;
  size_t v42;
  CFIndex v43;
  char *p_src;
  unint64_t v45;
  char v46;
  unint64_t v47;
  Class v48;
  int v49;
  int v50;
  char *v51;
  char *v52;
  char v53;
  CFArrayRef v54;
  objc_class *v55;
  objc_class *v56;
  Class v57;
  int64_t v58;
  int64_t v59;
  NSString *v60;
  Class v61;
  int64_t v62;
  int64_t v63;
  Class v64;
  int64_t v65;
  int64_t v66;
  Class v67;
  int64_t v68;
  int64_t v69;
  NSString *v70;
  NSNumber *v71;
  Class v72;
  Class v73;
  Class v74;
  int64_t v75;
  int64_t v76;
  Class v77;
  int64_t v78;
  int64_t v79;
  NSString *v80;
  Class v81;
  int64_t v82;
  int64_t v83;
  NSString *v84;
  NSNumber *v85;
  void **v86;
  void *v87;
  Class v88;
  int64_t v89;
  int64_t v90;
  NSString *v91;
  NSNumber *v92;
  Class v93;
  Class v94;
  int64_t v95;
  int64_t v96;
  NSString *v97;
  NSNumber *v98;
  Class v99;
  Class v100;
  int64_t v101;
  int64_t v102;
  NSString *v103;
  NSNumber *v104;
  void *v105;
  id v106;
  NSString *__src;
  NSNumber *v108;
  const __CFString *v109;
  const __CFString *v110;
  const __CFString *v111;
  const __CFString *v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  if (a1[4].super.isa >= (Class)0x201)
  {
    if (a2)
    {
      isa = a1[3].super.isa;
      v5 = a1[6].super.isa;
      v6 = isa >= v5;
      v7 = isa - v5;
      if (v6)
        v8 = v7;
      else
        v8 = 0;
      v9 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Too many nested arrays or dictionaries"), a1[5].super.isa, v8);
      v10 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3].super.isa);
      v111 = CFSTR("NSDebugDescription");
      v112 = CFSTR("NSJSONSerializationErrorIndex");
      __src = v9;
      v108 = v10;
      *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &__src, &v111, 2));

    }
    return 0;
  }
  v12 = a1->super.isa;
  v14 = (unint64_t)a1[2].super.isa;
  v13 = a1[3].super.isa;
  if (v14 <= (unint64_t)v13 + 1)
    v15 = 0;
  else
    v15 = *((unsigned __int8 *)v13 + (_QWORD)v12 + 1);
  v16 = *((unsigned __int8 *)v13 + (_QWORD)v12);
  v17 = (unint64_t)v13 + 2;
  if (v14 <= v17)
    v18 = 0;
  else
    v18 = *((unsigned __int8 *)v12 + v17);
  v106 = 0;
  v19 = (void *)MEMORY[0x186DA8F78]();
  if (v16 == 34)
    goto LABEL_26;
  if (v16 == 123)
  {
    ++a1[4].super.isa;
    v23 = (const __CFArray *)newJSONObject(a1, 0, &v106);
LABEL_23:
    v11 = v23;
    goto LABEL_33;
  }
  if (v16 != 91)
  {
    v24 = a1[1].super.isa;
    if ((v24 & 8) != 0 && v16 == 39)
    {
LABEL_26:
      newJSONString(a1, 0, &v106);
LABEL_27:
      v11 = v25;
      goto LABEL_34;
    }
    if ((v16 - 102) <= 0xE && ((1 << (v16 - 102)) & 0x4101) != 0)
    {
      v36 = a1[3].super.isa;
      v37 = a1->super.isa;
      v38 = *((unsigned __int8 *)a1->super.isa + (unint64_t)v36);
      switch(v38)
      {
        case 't':
          v55 = (Class)((char *)v36 + 3);
          if (a1[2].super.isa > (Class)((char *)v36 + 3))
          {
            a1[3].super.isa = v55;
            if (*((_BYTE *)v37 + (_QWORD)v36 + 1) == 114
              && *((_BYTE *)v37 + (_QWORD)v36 + 2) == 117
              && *((_BYTE *)v55 + (_QWORD)v37) == 101)
            {
              v40 = (void *)*MEMORY[0x1E0C9AE50];
              v41 = (uint64_t)v36 + 4;
              goto LABEL_89;
            }
            a1[3].super.isa = v36;
            v64 = a1[6].super.isa;
            v6 = v36 >= v64;
            v65 = v36 - v64;
            if (v6)
              v66 = v65;
            else
              v66 = 0;
            v60 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Something looked like a 'true' but wasn't"), a1[5].super.isa, v66);
LABEL_118:
            v70 = v60;
            v71 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3].super.isa);
            v111 = CFSTR("NSDebugDescription");
            v112 = CFSTR("NSJSONSerializationErrorIndex");
            __src = v70;
            v108 = v71;
            v106 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &__src, &v111, 2));

            v11 = 0;
            goto LABEL_34;
          }
          break;
        case 'n':
          v56 = (Class)((char *)v36 + 3);
          if (a1[2].super.isa > (Class)((char *)v36 + 3))
          {
            a1[3].super.isa = v56;
            if (*((_BYTE *)v37 + (_QWORD)v36 + 1) == 117
              && *((_BYTE *)v37 + (_QWORD)v36 + 2) == 108
              && *((_BYTE *)v56 + (_QWORD)v37) == 108)
            {
              v40 = (void *)objc_msgSend(MEMORY[0x1E0C99E38], "null");
              v41 = (uint64_t)a1[3].super.isa + 1;
              goto LABEL_89;
            }
            a1[3].super.isa = v36;
            v67 = a1[6].super.isa;
            v6 = v36 >= v67;
            v68 = v36 - v67;
            if (v6)
              v69 = v68;
            else
              v69 = 0;
            v60 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Something looked like a 'null' but wasn't"), a1[5].super.isa, v69);
            goto LABEL_118;
          }
          break;
        case 'f':
          v39 = (Class)((char *)v36 + 4);
          if (a1[2].super.isa > (Class)((char *)v36 + 4))
          {
            a1[3].super.isa = v39;
            if (*((_BYTE *)v37 + (_QWORD)v36 + 1) == 97
              && *((_BYTE *)v37 + (_QWORD)v36 + 2) == 108
              && *((_BYTE *)v37 + (_QWORD)v36 + 3) == 115
              && *((_BYTE *)v39 + (_QWORD)v37) == 101)
            {
              v40 = (void *)*MEMORY[0x1E0C9AE40];
              v41 = (uint64_t)v36 + 5;
LABEL_89:
              a1[3].super.isa = (Class)v41;
LABEL_95:
              v25 = v40;
              goto LABEL_27;
            }
            a1[3].super.isa = v36;
            v61 = a1[6].super.isa;
            v6 = v36 >= v61;
            v62 = v36 - v61;
            if (v6)
              v63 = v62;
            else
              v63 = 0;
            v60 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Something looked like a 'false' but wasn't"), a1[5].super.isa, v63);
            goto LABEL_118;
          }
          break;
        default:
          v40 = 0;
          goto LABEL_95;
      }
      v57 = a1[6].super.isa;
      v6 = v36 >= v57;
      v58 = v36 - v57;
      if (v6)
        v59 = v58;
      else
        v59 = 0;
      v60 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unexpected end of file during JSON parse."), a1[5].super.isa, v59);
      goto LABEL_118;
    }
    if ((v16 - 48) <= 9)
    {
      if ((v24 & 8) == 0 || (v15 & 0xFFFFFFDF) != 0x58)
        goto LABEL_78;
LABEL_161:
      v25 = (const __CFArray *)newJSON5HexNumber(a1, &v106);
      goto LABEL_27;
    }
    if (v16 == 45)
    {
      if ((v24 & 8) != 0 && v15 == 48 && (v18 & 0xFFFFFFDF) == 0x58)
        goto LABEL_161;
      if (((v24 & 8) == 0 || v15 != 73) && v15 != 78)
        goto LABEL_78;
    }
    else if ((v24 & 8) != 0 && v16 == 43)
    {
      v72 = a1[3].super.isa;
      if (a1[2].super.isa <= (Class)((char *)v72 + 1))
      {
        v88 = a1[6].super.isa;
        v6 = v72 >= v88;
        v89 = v72 - v88;
        if (v6)
          v90 = v89;
        else
          v90 = 0;
        v91 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unexpected end of file during JSON parse."), a1[5].super.isa, v90);
        v92 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3].super.isa);
        v111 = CFSTR("NSDebugDescription");
        v112 = CFSTR("NSJSONSerializationErrorIndex");
        __src = v91;
        v108 = v92;
        v106 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &__src, &v111, 2));

      }
      else
      {
        a1[3].super.isa = (Class)((char *)v72 + 1);
      }
      if (v15 == 48 && (v18 & 0xFFFFFFDF) == 0x58)
        goto LABEL_161;
      if (v15 != 78 && v15 != 73)
        goto LABEL_78;
    }
    else if (((v24 & 8) == 0 || v16 != 73) && ((v24 & 8) == 0 || v16 != 78))
    {
      if ((v24 & 8) == 0 || v16 != 46)
      {
        v73 = a1[3].super.isa;
        v74 = a1[6].super.isa;
        v6 = v73 >= v74;
        v75 = v73 - v74;
        if (v6)
          v76 = v75;
        else
          v76 = 0;
        v60 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Invalid value"), a1[5].super.isa, v76);
        goto LABEL_118;
      }
LABEL_78:
      v25 = (const __CFArray *)newJSONNumber((uint64_t)a1, &v106);
      goto LABEL_27;
    }
    v25 = (const __CFArray *)newJSON5InfinityOrNaN((uint64_t *)a1, &v106);
    goto LABEL_27;
  }
  ++a1[4].super.isa;
  v20 = a1[3].super.isa;
  if (a1[2].super.isa <= (Class)((char *)v20 + 1))
  {
    v26 = a1[6].super.isa;
    v6 = v20 >= v26;
    v27 = v20 - v26;
    if (v6)
      v28 = v27;
    else
      v28 = 0;
    v29 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unexpected end of file during JSON parse."), a1[5].super.isa, v28);
    v30 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3].super.isa);
    v111 = CFSTR("NSDebugDescription");
    v112 = CFSTR("NSJSONSerializationErrorIndex");
    __src = v29;
    v108 = v30;
    v106 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &__src, &v111, 2));

    goto LABEL_32;
  }
  a1[3].super.isa = (Class)((char *)v20 + 1);
  if (!skipJSONWhitespace((uint64_t)a1, &v106, 0))
  {
LABEL_32:
    v11 = 0;
    goto LABEL_33;
  }
  v21 = a1[3].super.isa;
  if (*((_BYTE *)a1->super.isa + (unint64_t)v21) == 93)
  {
    a1[3].super.isa = (Class)((char *)v21 + 1);
    if (((uint64_t)a1[1].super.isa & 1) != 0)
      v22 = (objc_class *)MEMORY[0x1E0C99DE8];
    else
      v22 = (objc_class *)MEMORY[0x1E0C99D20];
    v23 = (const __CFArray *)objc_alloc_init(v22);
    goto LABEL_23;
  }
  v105 = v19;
  v42 = 0;
  v43 = 1;
  p_src = (char *)&__src;
  v45 = 32;
  v46 = 1;
  do
  {
    v47 = v43 - 1;
    v11 = (CFArrayRef)newJSONValue(a1, &v106);
    if (!v11)
    {
      v53 = v46;
LABEL_147:
      v43 = v47;
      goto LABEL_148;
    }
    if ((skipJSONWhitespace((uint64_t)a1, &v106, 0) & 1) == 0)
    {
      v53 = v46;
LABEL_145:

LABEL_146:
      v11 = 0;
      goto LABEL_147;
    }
    v48 = a1[3].super.isa;
    v49 = *((unsigned __int8 *)a1->super.isa + (unint64_t)v48);
    if (v49 != 44)
    {
      if (v49 == 93)
      {
        v50 = 1;
        goto LABEL_62;
      }
      v53 = v46;
      v77 = a1[6].super.isa;
      v6 = v48 >= v77;
      v78 = v48 - v77;
      if (v6)
        v79 = v78;
      else
        v79 = 0;
      v80 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Badly formed array"), a1[5].super.isa, v79);
      goto LABEL_144;
    }
    if (a1[2].super.isa <= (Class)((char *)v48 + 1))
    {
      v53 = v46;
      v81 = a1[6].super.isa;
      v6 = v48 >= v81;
      v82 = v48 - v81;
      if (v6)
        v83 = v82;
      else
        v83 = 0;
      v80 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unexpected end of file during JSON parse."), a1[5].super.isa, v83);
LABEL_144:
      v84 = v80;
      v85 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3].super.isa);
      v109 = CFSTR("NSDebugDescription");
      v110 = CFSTR("NSJSONSerializationErrorIndex");
      v111 = (const __CFString *)v84;
      v112 = (const __CFString *)v85;
      v106 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v111, &v109, 2));

      goto LABEL_145;
    }
    v50 = 0;
    a1[3].super.isa = (Class)((char *)v48 + 1);
LABEL_62:
    if (v47 < v45)
      goto LABEL_68;
    v45 *= 2;
    if ((v46 & 1) == 0)
    {
      v52 = NSReallocateObjectArray(p_src, v45);
      if (v52)
      {
        v46 = 0;
        p_src = v52;
        goto LABEL_68;
      }
      free(p_src);

      v99 = a1[3].super.isa;
      v100 = a1[6].super.isa;
      v6 = v99 >= v100;
      v101 = v99 - v100;
      if (v6)
        v102 = v101;
      else
        v102 = 0;
      v103 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Memory exhausted during parse of array."), a1[5].super.isa, v102);
      v104 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3].super.isa);
      v109 = CFSTR("NSDebugDescription");
      v110 = CFSTR("NSJSONSerializationErrorIndex");
      v111 = (const __CFString *)v103;
      v112 = (const __CFString *)v104;
      v106 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v111, &v109, 2));

      v53 = 0;
      goto LABEL_146;
    }
    v51 = (char *)NSAllocateObjectArray(v45);
    if (!v51)
    {

      v93 = a1[3].super.isa;
      v94 = a1[6].super.isa;
      v6 = v93 >= v94;
      v95 = v93 - v94;
      if (v6)
        v96 = v95;
      else
        v96 = 0;
      v97 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Memory exhausted during parse of array."), a1[5].super.isa, v96);
      v98 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3].super.isa);
      v109 = CFSTR("NSDebugDescription");
      v110 = CFSTR("NSJSONSerializationErrorIndex");
      v111 = (const __CFString *)v97;
      v112 = (const __CFString *)v98;
      v106 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v111, &v109, 2));

      v11 = 0;
      v53 = 1;
      v43 = v47;
LABEL_148:
      v19 = v105;
      if (!v43)
        goto LABEL_151;
      goto LABEL_149;
    }
    p_src = v51;
    memmove(v51, &__src, v42);
    v46 = 0;
LABEL_68:
    *(_QWORD *)&p_src[v42] = v11;
    if (!skipJSONWhitespace((uint64_t)a1, &v106, 0))
    {
      v53 = v46;
      v11 = 0;
      goto LABEL_148;
    }
    ++v43;
    v42 += 8;
  }
  while (((*((_BYTE *)a1->super.isa + (unint64_t)a1[3].super.isa) != 93) & ~v50) != 0);
  v53 = v46;
  --v43;
  if (((uint64_t)a1[1].super.isa & 1) != 0)
  {
    v11 = (CFArrayRef)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:count:", p_src, v43);
    goto LABEL_148;
  }
  v19 = v105;
  if (dyld_program_sdk_at_least())
    v54 = (CFArrayRef)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", p_src, v43);
  else
    v54 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)p_src, v43, MEMORY[0x1E0C9B378]);
  v11 = v54;
  if (v43)
  {
LABEL_149:
    v86 = (void **)p_src;
    do
    {
      v87 = *v86++;

      --v43;
    }
    while (v43);
  }
LABEL_151:
  if ((v53 & 1) == 0)
    free(p_src);
  ++a1[3].super.isa;
LABEL_33:
  --a1[4].super.isa;
LABEL_34:
  if (v106)
    v31 = v106;
  objc_autoreleasePoolPop(v19);
  v32 = v106;
  if (a2 && v106)
    *a2 = v106;
  v33 = v32;
  return v11;
}

id _setInCache(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  id result;

  v9 = a1 + 32 * a3;
  v10 = *(void **)(v9 + 16);
  if (v10)

  result = a2;
  *(_QWORD *)(v9 + 16) = result;
  *(_DWORD *)(v9 + 24) = a3;
  *(_QWORD *)v9 = a4;
  *(_QWORD *)(v9 + 8) = a5;
  return result;
}

NSString *newJSONNumber(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  NSString *v16;
  uint64_t v17;
  const __CFString *v18;
  char *v19;
  NSNumber *v20;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  NSNumber *v29;
  uint64_t v30;
  NSNumber *v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unint64_t v49;
  _BOOL4 v50;
  unint64_t v51;
  uint64_t v52;
  int v54;
  BOOL v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  int v74;
  double v75;
  NSDecimalNumber *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  NSString *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  NSString *v84;
  NSString *v85;
  NSNumber *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  NSNumber *v99;
  int v100;
  _QWORD v101[2];
  const __CFString *v102;
  const __CFString *v103;
  uint64_t v104;

  v3 = (_QWORD *)a1;
  v104 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)a1;
  v6 = (unsigned __int8 *)(*(_QWORD *)a1 + v4);
  v7 = *v6;
  v8 = v7;
  v9 = v4;
  if (v7 == 45)
  {
    v9 = v4 + 1;
    if (*(_QWORD *)(a1 + 16) <= v4 + 1)
    {
      if (a2)
      {
        v14 = *(_QWORD *)(a1 + 48);
        v12 = v4 >= v14;
        v13 = v4 - v14;
        goto LABEL_9;
      }
      return 0;
    }
    *(_QWORD *)(a1 + 24) = v9;
    v8 = *(unsigned __int8 *)(v5 + v9);
    v10 = v8 - 48;
    if ((*(_BYTE *)(a1 + 8) & 8) != 0)
    {
      if (v8 != 46 && v10 >= 0xA)
      {
LABEL_5:
        if (a2)
        {
          v11 = *(_QWORD *)(a1 + 48);
          v12 = v9 >= v11;
          v13 = v9 - v11;
LABEL_9:
          if (v12)
            v15 = v13;
          else
            v15 = 0;
          v16 = [NSString alloc];
          v17 = v3[5];
          v97 = v15;
          v18 = CFSTR("Number with minus sign but no digits");
LABEL_13:
          v19 = -[NSString initWithFormat:](v16, "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), v18, v17, v97);
          v20 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", v3[3]);
          v102 = CFSTR("NSDebugDescription");
          v103 = CFSTR("NSJSONSerializationErrorIndex");
          v98 = v19;
          v99 = v20;
          *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v98, &v102, 2));

          return 0;
        }
        return 0;
      }
    }
    else if (v10 >= 0xA)
    {
      goto LABEL_5;
    }
  }
  if (v8 == 48)
  {
    ++v9;
    v23 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 24) = v9;
    if (v23 <= v9)
    {
      v29 = [NSNumber alloc];
      v30 = 0;
      goto LABEL_33;
    }
    if (*(unsigned __int8 *)(v5 + v9) - 48 <= 9)
    {
      if (!a2)
        return 0;
      v24 = *(_QWORD *)(a1 + 48);
      v12 = v9 >= v24;
      v25 = v9 - v24;
      if (v12)
        v26 = v25;
      else
        v26 = 0;
      v16 = [NSString alloc];
      v17 = v3[5];
      v97 = v26;
      v18 = CFSTR("Number with leading zero");
      goto LABEL_13;
    }
  }
  else if ((v8 - 48) > 9)
  {
    if (v8 != 46 || (*(_QWORD *)(a1 + 8) & 8) == 0)
    {
      if (!a2)
        return 0;
      v33 = *(_QWORD *)(a1 + 48);
      v12 = v9 >= v33;
      v34 = v9 - v33;
      if (v12)
        v35 = v34;
      else
        v35 = 0;
      v16 = [NSString alloc];
      v17 = v3[5];
      v97 = v35;
      v18 = CFSTR("Malformed number");
      goto LABEL_13;
    }
    v23 = *(_QWORD *)(a1 + 16);
    if (v23 <= v9 + 1)
    {
      if (!a2)
        return 0;
      v57 = *(_QWORD *)(a1 + 48);
      v12 = v9 >= v57;
      v58 = v9 - v57;
      if (v12)
        v59 = v58;
      else
        v59 = 0;
      v16 = [NSString alloc];
      v17 = v3[5];
      v97 = v59;
      v18 = CFSTR("Decimal point before EoF");
      goto LABEL_13;
    }
    if (*(unsigned __int8 *)(v5 + v9 + 1) - 48 >= 0xA)
    {
      if (!a2)
        return 0;
      v70 = *(_QWORD *)(a1 + 48);
      v12 = v9 >= v70;
      v71 = v9 - v70;
      if (v12)
        v72 = v71;
      else
        v72 = 0;
      v16 = [NSString alloc];
      v17 = v3[5];
      v97 = v72;
      v18 = CFSTR("Decimal point with no digits");
      goto LABEL_13;
    }
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v27 = v9 + 1;
    do
    {
      v9 = v27;
      *(_QWORD *)(a1 + 24) = v27;
      if (v23 <= v27)
        break;
      v28 = *(unsigned __int8 *)(v5 + v27++) - 48;
    }
    while (v28 < 0xA);
  }
  if (v23 > v9 && *(_BYTE *)(v5 + v9) == 46)
  {
    v36 = v9 + 1;
    if ((*(_BYTE *)(a1 + 8) & 8) == 0)
    {
      if (v23 <= v36)
      {
        v36 = v9;
      }
      else
      {
        *(_QWORD *)(a1 + 24) = v36;
        if (*(unsigned __int8 *)(v5 + v36) - 48 <= 9)
        {
          v37 = v9 + 2;
          while (v23 != v37)
          {
            *(_QWORD *)(a1 + 24) = v37;
            v38 = *(unsigned __int8 *)(v5 + v37++) - 48;
            if (v38 >= 0xA)
              goto LABEL_123;
          }
LABEL_177:
          v41 = 0;
          v39 = 0;
          *(_QWORD *)(a1 + 24) = v23;
          v40 = 1;
          v9 = v23;
          goto LABEL_57;
        }
      }
      if (!a2)
        return 0;
      v77 = *(_QWORD *)(a1 + 48);
      v12 = v36 >= v77;
      v78 = v36 - v77;
      if (v12)
        v79 = v78;
      else
        v79 = 0;
      v16 = [NSString alloc];
      v17 = v3[5];
      v97 = v79;
      v18 = CFSTR("Number with decimal point but no additional digits");
      goto LABEL_13;
    }
    *(_QWORD *)(a1 + 24) = v36;
    if (v23 <= v36)
    {
      v39 = 0;
      v40 = 0;
    }
    else
    {
      if (*(unsigned __int8 *)(v5 + v36) - 48 <= 9)
      {
        v37 = v9 + 2;
        while (v23 != v37)
        {
          *(_QWORD *)(a1 + 24) = v37;
          v69 = *(unsigned __int8 *)(v5 + v37++) - 48;
          if (v69 >= 0xA)
          {
LABEL_123:
            v41 = 0;
            v39 = 0;
            v9 = v37 - 1;
            v40 = 1;
            goto LABEL_57;
          }
        }
        goto LABEL_177;
      }
      v40 = 0;
      v39 = -1;
    }
    v41 = 1;
    ++v9;
    goto LABEL_57;
  }
  v39 = 0;
  v40 = 0;
  v41 = 1;
LABEL_57:
  if (v23 <= v9 || (*(unsigned __int8 *)(v5 + v9) | 0x20) != 0x65)
  {
    if (!v41)
      goto LABEL_98;
    v46 = 0;
    v47 = (unsigned __int8 *)(v5 + v9 + v39 - 1);
    if (v7 == 45)
      v48 = v6 + 1;
    else
      v48 = v6;
    v49 = 1;
    while (v47 >= v48)
    {
      v50 = 0;
      v51 = 0;
      if (v49)
      {
        v52 = *v47 - 48;
        if (*v47 != 48)
        {
          v51 = v52 * v49;
          v50 = __CFADD__(v46, v52 * v49) || ((unint64_t)v52 * (unsigned __int128)v49) >> 64 != 0;
        }
      }
      --v47;
      v54 = v49 > 0x1999999999999999 || v50;
      a1 = 10 * v49;
      if (v47 >= v48)
      {
        v55 = v49 == 0;
      }
      else
      {
        a1 = v49;
        v55 = 1;
      }
      v46 += v51;
      if (v55)
        v56 = v50;
      else
        v56 = v54;
      v49 = a1;
      if (v56)
        goto LABEL_98;
    }
    if (v7 != 45)
    {
      v31 = -[NSNumber initWithUnsignedLongLong:]([NSNumber alloc], "initWithUnsignedLongLong:", v46);
      return newJSONNumberCreateRoundTripping((uint64_t)v3, v4, v31);
    }
    if (v46 > 0x8000000000000000)
    {
LABEL_98:
      v45 = 0;
      goto LABEL_99;
    }
    v29 = [NSNumber alloc];
    v30 = -(uint64_t)v46;
LABEL_33:
    v31 = -[NSNumber initWithLongLong:](v29, "initWithLongLong:", v30);
    return newJSONNumberCreateRoundTripping((uint64_t)v3, v4, v31);
  }
  v42 = v9 + 1;
  if (v23 <= v9 + 1)
  {
    if (!a2)
      return 0;
    v66 = *(_QWORD *)(a1 + 48);
    v12 = v9 >= v66;
    v67 = v9 - v66;
    if (v12)
      v68 = v67;
    else
      v68 = 0;
    v16 = [NSString alloc];
    v17 = v3[5];
    v97 = v68;
    v18 = CFSTR("Number with exponent followed by EoF");
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 24) = v42;
  v43 = *(unsigned __int8 *)(v5 + v42);
  if (v43 != 45 && v43 != 43)
  {
    if ((v43 - 48) >= 0xA)
    {
      if (!a2)
        return 0;
      v93 = *(_QWORD *)(a1 + 48);
      if (v9 >= v93)
        v94 = v42 - v93;
      else
        v94 = 0;
      v16 = [NSString alloc];
      v17 = v3[5];
      v97 = v94;
      v18 = CFSTR("Number with 'e' but no additional digits");
      goto LABEL_13;
    }
    v45 = 2;
    v44 = v9 + 1;
    goto LABEL_168;
  }
  v44 = v9 + 2;
  if (v23 <= v44)
  {
LABEL_181:
    if (!a2)
      return 0;
    v90 = *(_QWORD *)(a1 + 48);
    v12 = v42 >= v90;
    v91 = v42 - v90;
    if (v12)
      v92 = v91;
    else
      v92 = 0;
    v16 = [NSString alloc];
    v17 = v3[5];
    v97 = v92;
    v18 = CFSTR("Number with '+' or '-' but no additional digits");
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 24) = v44;
  if (*(unsigned __int8 *)(v5 + v44) - 48 > 9)
  {
    v42 = v44;
    goto LABEL_181;
  }
  v45 = 3;
LABEL_168:
  v9 = v44 + 1;
  while (1)
  {
    *(_QWORD *)(a1 + 24) = v9;
    if (v23 <= v9 || *(unsigned __int8 *)(v5 + v9) - 48 > 9)
      break;
    ++v45;
    ++v9;
    if (v45 == 6)
    {
      *(_QWORD *)(a1 + 24) = v4;
      if (!a2)
        return 0;
      v87 = *(_QWORD *)(a1 + 48);
      v12 = v4 >= v87;
      v88 = v4 - v87;
      if (v12)
        v89 = v88;
      else
        v89 = 0;
      v16 = [NSString alloc];
      v17 = v3[5];
      v97 = v89;
      v18 = CFSTR("Number wound up as NaN");
      goto LABEL_13;
    }
  }
LABEL_99:
  v60 = v9 - v4;
  if (v9 == v4)
  {
    if (!a2)
      return 0;
    v61 = v3[6];
    v12 = v4 >= v61;
    v62 = v4 - v61;
    if (v12)
      v63 = v62;
    else
      v63 = 0;
    v16 = [NSString alloc];
    v17 = v3[5];
    v97 = v63;
    v18 = CFSTR("Invalid number");
    goto LABEL_13;
  }
  v64 = 24;
  if (v7 == 45)
    v64 = 25;
  if ((v40 & 1) != 0)
  {
    if (v7 == 45 && v60 >= 4)
    {
      if (v6[1] != 48)
      {
LABEL_135:
        --v64;
        goto LABEL_136;
      }
      v65 = v6[2];
    }
    else
    {
      if (v7 == 45 || v60 < 3 || *v6 != 48)
        goto LABEL_135;
      v65 = v6[1];
    }
    if (v65 != 46)
      goto LABEL_135;
  }
  else
  {
    v64 -= 2;
  }
LABEL_136:
  if (v45 + v64 - 5 < v60)
    goto LABEL_195;
  MEMORY[0x1E0C80A78](a1);
  v73 = &v95;
  if (v60 >= 0x1A)
  {
    v73 = (uint64_t *)malloc_type_malloc(v60 + 1, 0xC3E660F6uLL);
    if (!v73)
    {
      qword_1EDC47C18 = (uint64_t)"Unable to allocate space to decode JSON number.";
      __break(1u);
      JUMPOUT(0x18181BF18);
    }
  }
  memcpy(v73, v6, v60);
  *((_BYTE *)v73 + v60) = 0;
  v74 = *__error();
  *__error() = 0;
  v98 = 0;
  v75 = strtod_l((const char *)v73, &v98, 0);
  if (v75 == 0.0 && *v98 || v75 == INFINITY && *__error() == 34)
    v76 = 0;
  else
    v76 = -[NSNumber initWithDouble:]([NSNumber alloc], "initWithDouble:", v75);
  *__error() = v74;
  if (v73 != &v95)
    free(v73);
  if (!v76)
  {
LABEL_195:
    if (a2)
      *a2 = 0;
    v80 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]([NSString alloc], "initWithBytesNoCopy:length:encoding:freeWhenDone:", *v3 + v4, v60, 1, 0);
    v76 = -[NSDecimalNumber initWithString:]([NSDecimalNumber alloc], "initWithString:", v80);

    v98 = 0;
    v99 = 0;
    v100 = 0;
    if (!v76 || (-[NSDecimalNumber decimalValue](v76, "decimalValue"), ((unsigned __int16)v98 & 0x1F00) == 0x1000))
    {
      v3[3] = v4;
      if (a2)
      {
        v81 = v3[6];
        v12 = v4 >= v81;
        v82 = v4 - v81;
        if (v12)
          v83 = v82;
        else
          v83 = 0;
        v84 = [NSString alloc];
        v96 = v3[5];
        v85 = -[NSString initWithFormat:](v84, "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Number wound up as NaN"), v96, v83);
        v86 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", v3[3]);
        v101[0] = CFSTR("NSDebugDescription");
        v101[1] = CFSTR("NSJSONSerializationErrorIndex");
        v102 = (const __CFString *)v85;
        v103 = (const __CFString *)v86;
        *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v102, v101, 2));

      }
      return 0;
    }
  }
  return newJSONNumberCreateRoundTripping((uint64_t)v3, v4, v76);
}

NSString *newJSONNumberCreateRoundTripping(uint64_t a1, uint64_t a2, void *a3)
{
  NSString *result;
  NSString *v5;
  _NSJSONRoundTrippingNumber *v6;

  if (!a3 || (*(_BYTE *)(a1 + 9) & 0x10) == 0)
    return (NSString *)a3;
  result = -[NSString initWithBytes:length:encoding:]([NSString alloc], "initWithBytes:length:encoding:", *(_QWORD *)a1 + a2, *(_QWORD *)(a1 + 24) - a2, 4);
  if (result)
  {
    v5 = result;
    v6 = -[_NSJSONRoundTrippingNumber initWithNumber:representation:]([_NSJSONRoundTrippingNumber alloc], "initWithNumber:representation:", a3, result);

    return (NSString *)v6;
  }
  else
  {
    qword_1EDC47C18 = (uint64_t)"Unable to allocate string from UTF-8 JSON data.";
    __break(1u);
  }
  return result;
}

char *NSReallocateObjectArray(void *ptr, unint64_t a2)
{
  size_t v4;
  unint64_t v5;
  size_t v6;
  malloc_zone_t *v7;
  char *v8;
  char *v9;
  NSString *v11;

  if (a2 >> 61)
  {
    v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** attempt to allocate id buffer with too large of a count (%lu) -- possibly data is corrupt"), a2);
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v11, 0));
  }
  if (!ptr)
    return (char *)NSAllocateObjectArray(a2);
  v4 = malloc_size(ptr);
  v5 = 8 * a2;
  v6 = malloc_good_size(8 * a2);
  v7 = malloc_default_zone();
  v8 = (char *)malloc_type_zone_calloc(v7, 1uLL, v6, 0xCC510C36uLL);
  v9 = v8;
  if (v8)
  {
    if (v4 >= v5)
      v4 = v5;
    memmove(v8, ptr, v4);
    if (v6 > v4)
      bzero(&v9[v4], v6 - v4);
    free(ptr);
  }
  return v9;
}

uint64_t parseJSONUnicodePointAtLocation(_QWORD *a1, unint64_t a2, unint64_t a3, _WORD *a4, _QWORD *a5)
{
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  NSString *v11;
  NSString *v12;
  NSNumber *v13;
  int v15;
  uint64_t v16;
  int v17;
  unsigned __int8 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  if (a2 + 3 > a3)
  {
    a1[3] = a2;
    if (a5)
    {
      v7 = a1[6];
      v8 = a2 >= v7;
      v9 = a2 - v7;
      if (v8)
        v10 = v9;
      else
        v10 = 0;
      v11 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Early end of unicode escape sequence"), a1[5], v10);
      goto LABEL_7;
    }
    return 0;
  }
  v15 = 0;
  v16 = 16;
  while (1)
  {
    v17 = *(unsigned __int8 *)(*a1 + a2);
    v18 = v17 - 48;
    if ((v17 - 48) >= 0xA)
      break;
LABEL_15:
    ++a2;
    v16 -= 4;
    v15 += v18 << v16;
    if (!v16)
    {
      *a4 = v15;
      return 1;
    }
  }
  if ((v17 - 65) <= 5)
  {
    v18 = v17 - 55;
    goto LABEL_15;
  }
  if ((v17 - 97) <= 5)
  {
    v18 = v17 - 87;
    goto LABEL_15;
  }
  a1[3] = a2;
  if (a5)
  {
    v19 = a1[6];
    v8 = a2 >= v19;
    v20 = a2 - v19;
    if (v8)
      v21 = v20;
    else
      v21 = 0;
    v11 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Invalid hex digit in unicode escape sequence"), a1[5], v21);
LABEL_7:
    v12 = v11;
    v13 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
    v22[0] = CFSTR("NSDebugDescription");
    v22[1] = CFSTR("NSJSONSerializationErrorIndex");
    v23[0] = v12;
    v23[1] = v13;
    *a5 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 2));

  }
  return 0;
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  double *v0;

  return (NSDate)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
}

_QWORD *protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  return _JSONKeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t result;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56[5];

  v9 = v4[1];
  type metadata accessor for JSONReference();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_BYTE *)(v10 + 32) = 0;
  v11 = *v4;
  v12 = v4[2];
  v14 = *(_QWORD *)(a4 + 16);
  v13 = *(_QWORD *)(a4 + 24);
  v56[3] = v14;
  v56[4] = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v56);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_1, a3, v14);
  swift_bridgeObjectRetain();
  v16 = _JSONKeyedEncodingContainer._converted(_:)(v56, v11, v9, v12);
  v18 = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  if (*(_BYTE *)(v9 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v19 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_BYTE *)(v9 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v56[0] = v19;
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
  v23 = *(_QWORD *)(v19 + 16);
  v24 = (v21 & 1) == 0;
  v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v11) = v21;
    if (*(_QWORD *)(v19 + 24) < v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
      v26 = v56[0];
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
      if ((v11 & 1) != (v28 & 1))
        goto LABEL_51;
      v22 = v27;
      if ((v11 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v29 = *(_QWORD *)(v26 + 56);
      swift_release();
      *(_QWORD *)(v29 + 8 * v22) = v10;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v49 = *(_QWORD *)(v9 + 16);
      v50 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 16) = v26;
      *(_QWORD *)(v9 + 24) = 0;
      v51 = *(_BYTE *)(v9 + 32);
      *(_BYTE *)(v9 + 32) = 4;
      outlined consume of JSONReference.Backing(v49, v50, v51);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v26 = v19;
      if ((v21 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v22, v16, v18, v10, v26);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v30 = static _DictionaryStorage.copy(original:)();
  v26 = v30;
  if (!*(_QWORD *)(v19 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v31 = (void *)(v30 + 64);
  v32 = (unint64_t)((1 << *(_BYTE *)(v26 + 32)) + 63) >> 6;
  if (v26 != v19 || (unint64_t)v31 >= v19 + 64 + 8 * v32)
    memmove(v31, (const void *)(v19 + 64), 8 * v32);
  v53 = v19 + 64;
  v33 = 0;
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(v19 + 16);
  v34 = 1 << *(_BYTE *)(v19 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v36 = v35 & *(_QWORD *)(v19 + 64);
  v54 = (unint64_t)(v34 + 63) >> 6;
  while (1)
  {
    if (v36)
    {
      v37 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      v55 = v33;
      v38 = v37 | (v33 << 6);
      goto LABEL_19;
    }
    v45 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v45 >= v54)
      goto LABEL_45;
    v46 = *(_QWORD *)(v53 + 8 * v45);
    v47 = v33 + 1;
    if (!v46)
    {
      v47 = v33 + 2;
      if (v33 + 2 >= v54)
        goto LABEL_45;
      v46 = *(_QWORD *)(v53 + 8 * v47);
      if (!v46)
      {
        v47 = v33 + 3;
        if (v33 + 3 >= v54)
          goto LABEL_45;
        v46 = *(_QWORD *)(v53 + 8 * v47);
        if (!v46)
        {
          v47 = v33 + 4;
          if (v33 + 4 >= v54)
            goto LABEL_45;
          v46 = *(_QWORD *)(v53 + 8 * v47);
          if (!v46)
          {
            v47 = v33 + 5;
            if (v33 + 5 >= v54)
              goto LABEL_45;
            v46 = *(_QWORD *)(v53 + 8 * v47);
            if (!v46)
            {
              v47 = v33 + 6;
              if (v33 + 6 >= v54)
                goto LABEL_45;
              v46 = *(_QWORD *)(v53 + 8 * v47);
              if (!v46)
              {
                v47 = v33 + 7;
                if (v33 + 7 >= v54)
                  goto LABEL_45;
                v46 = *(_QWORD *)(v53 + 8 * v47);
                if (!v46)
                {
                  v47 = v33 + 8;
                  if (v33 + 8 >= v54)
                    goto LABEL_45;
                  v46 = *(_QWORD *)(v53 + 8 * v47);
                  if (!v46)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v36 = (v46 - 1) & v46;
    v55 = v47;
    v38 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_19:
    v39 = 16 * v38;
    v40 = (_QWORD *)(*(_QWORD *)(v19 + 48) + 16 * v38);
    v41 = v40[1];
    v42 = 8 * v38;
    v43 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + v42);
    v44 = (_QWORD *)(*(_QWORD *)(v26 + 48) + v39);
    *v44 = *v40;
    v44[1] = v41;
    *(_QWORD *)(*(_QWORD *)(v26 + 56) + v42) = v43;
    swift_bridgeObjectRetain();
    swift_retain();
    v33 = v55;
  }
  v48 = v33 + 9;
  if (v33 + 9 >= v54)
    goto LABEL_45;
  v46 = *(_QWORD *)(v53 + 8 * v48);
  if (v46)
  {
    v47 = v33 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v47 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    if (v47 >= v54)
      goto LABEL_45;
    v46 = *(_QWORD *)(v53 + 8 * v47);
    ++v48;
    if (v46)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t result;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58[6];

  v5 = v4;
  v8 = v4[1];
  v58[0] = a1;
  v58[1] = a2;
  v9 = dispatch thunk of CustomStringConvertible.description.getter();
  v11 = v10;
  type metadata accessor for JSONReference();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v9;
  *(_QWORD *)(v12 + 24) = v11;
  *(_BYTE *)(v12 + 32) = 1;
  v13 = *v5;
  v14 = v5[2];
  v16 = *(_QWORD *)(a4 + 16);
  v15 = *(_QWORD *)(a4 + 24);
  v58[3] = v16;
  v58[4] = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(boxed_opaque_existential_1, a3, v16);
  v18 = _JSONKeyedEncodingContainer._converted(_:)(v58, v13, v8, v14);
  v20 = v19;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  if (*(_BYTE *)(v8 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v21 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v58[0] = v21;
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20);
  v25 = *(_QWORD *)(v21 + 16);
  v26 = (v23 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v16) = v23;
    if (*(_QWORD *)(v21 + 24) < v27)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
      v28 = v58[0];
      v29 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20);
      if ((v16 & 1) != (v30 & 1))
        goto LABEL_51;
      v24 = v29;
      if ((v16 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v31 = *(_QWORD *)(v28 + 56);
      swift_release();
      *(_QWORD *)(v31 + 8 * v24) = v12;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v51 = *(_QWORD *)(v8 + 16);
      v52 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 16) = v28;
      *(_QWORD *)(v8 + 24) = 0;
      v53 = *(_BYTE *)(v8 + 32);
      *(_BYTE *)(v8 + 32) = 4;
      outlined consume of JSONReference.Backing(v51, v52, v53);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v28 = v21;
      if ((v23 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v24, v18, v20, v12, v28);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v32 = static _DictionaryStorage.copy(original:)();
  v28 = v32;
  if (!*(_QWORD *)(v21 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v33 = (void *)(v32 + 64);
  v34 = (unint64_t)((1 << *(_BYTE *)(v28 + 32)) + 63) >> 6;
  if (v28 != v21 || (unint64_t)v33 >= v21 + 64 + 8 * v34)
    memmove(v33, (const void *)(v21 + 64), 8 * v34);
  v55 = v21 + 64;
  v35 = 0;
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(v21 + 16);
  v36 = 1 << *(_BYTE *)(v21 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & *(_QWORD *)(v21 + 64);
  v56 = (unint64_t)(v36 + 63) >> 6;
  while (1)
  {
    if (v38)
    {
      v39 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v57 = v35;
      v40 = v39 | (v35 << 6);
      goto LABEL_19;
    }
    v47 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v47 >= v56)
      goto LABEL_45;
    v48 = *(_QWORD *)(v55 + 8 * v47);
    v49 = v35 + 1;
    if (!v48)
    {
      v49 = v35 + 2;
      if (v35 + 2 >= v56)
        goto LABEL_45;
      v48 = *(_QWORD *)(v55 + 8 * v49);
      if (!v48)
      {
        v49 = v35 + 3;
        if (v35 + 3 >= v56)
          goto LABEL_45;
        v48 = *(_QWORD *)(v55 + 8 * v49);
        if (!v48)
        {
          v49 = v35 + 4;
          if (v35 + 4 >= v56)
            goto LABEL_45;
          v48 = *(_QWORD *)(v55 + 8 * v49);
          if (!v48)
          {
            v49 = v35 + 5;
            if (v35 + 5 >= v56)
              goto LABEL_45;
            v48 = *(_QWORD *)(v55 + 8 * v49);
            if (!v48)
            {
              v49 = v35 + 6;
              if (v35 + 6 >= v56)
                goto LABEL_45;
              v48 = *(_QWORD *)(v55 + 8 * v49);
              if (!v48)
              {
                v49 = v35 + 7;
                if (v35 + 7 >= v56)
                  goto LABEL_45;
                v48 = *(_QWORD *)(v55 + 8 * v49);
                if (!v48)
                {
                  v49 = v35 + 8;
                  if (v35 + 8 >= v56)
                    goto LABEL_45;
                  v48 = *(_QWORD *)(v55 + 8 * v49);
                  if (!v48)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v38 = (v48 - 1) & v48;
    v57 = v49;
    v40 = __clz(__rbit64(v48)) + (v49 << 6);
LABEL_19:
    v41 = 16 * v40;
    v42 = (_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * v40);
    v43 = v42[1];
    v44 = 8 * v40;
    v45 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + v44);
    v46 = (_QWORD *)(*(_QWORD *)(v28 + 48) + v41);
    *v46 = *v42;
    v46[1] = v43;
    *(_QWORD *)(*(_QWORD *)(v28 + 56) + v44) = v45;
    swift_bridgeObjectRetain();
    swift_retain();
    v35 = v57;
  }
  v50 = v35 + 9;
  if (v35 + 9 >= v56)
    goto LABEL_45;
  v48 = *(_QWORD *)(v55 + 8 * v50);
  if (v48)
  {
    v49 = v35 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v49 = v50 + 1;
    if (__OFADD__(v50, 1))
      break;
    if (v49 >= v56)
      goto LABEL_45;
    v48 = *(_QWORD *)(v55 + 8 * v49);
    ++v50;
    if (v48)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for JSONReference()
{
  return objc_opt_self();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  __int128 v38;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v37 = (_QWORD *)(v6 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v36 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v24 >= v36)
          goto LABEL_33;
        v25 = v37[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v36)
            goto LABEL_33;
          v25 = v37[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v36)
            {
LABEL_33:
              swift_release();
              v4 = v3;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v6 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v25 = v37[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_40;
                if (v15 >= v36)
                  goto LABEL_33;
                v25 = v37[v15];
                ++v26;
                if (v25)
                  goto LABEL_30;
              }
            }
            v15 = v26;
          }
        }
LABEL_30:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v38 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v38;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v4 = v9;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v4 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v36;
  v23 = (_QWORD *)(v6 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  __int128 v40;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v3;
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v15 << 6);
      goto LABEL_31;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v12)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v38 + 8 * v24);
    ++v15;
    if (!v26)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v12)
        goto LABEL_33;
      v26 = *(_QWORD *)(v38 + 8 * v15);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v12)
        {
LABEL_33:
          swift_release();
          v4 = v37;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v26 = *(_QWORD *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v15 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_42;
            if (v15 >= v12)
              goto LABEL_33;
            v26 = *(_QWORD *)(v38 + 8 * v15);
            ++v27;
            if (v26)
              goto LABEL_30;
          }
        }
        v15 = v27;
      }
    }
LABEL_30:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_31:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v40 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v32);
    if ((v39 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v30 = v18 == v29;
        if (v18 == v29)
          v18 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v31 == -1);
      v19 = __clz(__rbit64(~v31)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 16 * v19;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v20);
    *v21 = v35;
    v21[1] = v34;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + v20) = v40;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v37;
  v25 = (_QWORD *)(v6 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  _OWORD v37[2];

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v36 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_41;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v35 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v34 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v34)
      break;
    v19 = (_QWORD *)(v6 + 64);
    v20 = *(_QWORD *)(v35 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v34)
        goto LABEL_34;
      v20 = *(_QWORD *)(v35 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v14 >= v34)
              goto LABEL_34;
            v20 = *(_QWORD *)(v35 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v14 = v21;
      }
    }
LABEL_21:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    v22 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * v17);
    if ((v36 & 1) != 0)
    {
      outlined init with take of Any(v23, v37);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v37);
      v24 = v22;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    Hasher.init(_seed:)();
    String.hash(into:)();
    v25 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v28);
      }
      while (v32 == -1);
      v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v22;
    result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v19 = (_QWORD *)(v6 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v6 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, _CalendarProtocol>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v29 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v12)
          goto LABEL_33;
        v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_33;
          v21 = v29[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v29 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v21 = v29[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v30 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
        swift_unknownObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v27;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftLocale>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, _LocaleProtocol>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
  v44 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v43 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v41 = v2;
  v42 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_22;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v42)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v43 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_34;
      v24 = *(_QWORD *)(v43 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v42)
        {
LABEL_34:
          swift_release();
          v3 = v41;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = *(_QWORD *)(v43 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v13 >= v42)
              goto LABEL_34;
            v24 = *(_QWORD *)(v43 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v13 = v25;
      }
    }
LABEL_21:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v5 + 56) + 72 * v21;
    if ((v44 & 1) != 0)
    {
      v45 = *(_OWORD *)v29;
      v30 = *(_OWORD *)(v29 + 16);
      v31 = *(_OWORD *)(v29 + 32);
      v32 = *(_OWORD *)(v29 + 48);
      v49 = *(_QWORD *)(v29 + 64);
      v47 = v31;
      v48 = v32;
      v46 = v30;
    }
    else
    {
      outlined init with copy of AttributedString._AttributeValue(v29, (uint64_t)&v45);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v7 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v11 + 8 * (v34 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v11 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v11 + 8 * v35);
      }
      while (v39 == -1);
      v14 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v28;
    v15[1] = v27;
    v16 = *(_QWORD *)(v7 + 56) + 72 * v14;
    *(_OWORD *)v16 = v45;
    v17 = v46;
    v18 = v47;
    v19 = v48;
    *(_QWORD *)(v16 + 64) = v49;
    *(_OWORD *)(v16 + 32) = v18;
    *(_OWORD *)(v16 + 48) = v19;
    *(_OWORD *)(v16 + 16) = v17;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v41;
  v23 = (_QWORD *)(v5 + 64);
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v40 = 1 << *(_BYTE *)(v5 + 32);
  if (v40 >= 64)
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v40;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v13++, 1))
      goto LABEL_40;
    if (v13 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v13);
    if (!v25)
    {
      v26 = v13 + 1;
      if (v13 + 1 >= v40)
      {
LABEL_31:
        swift_release();
        v3 = v39;
        if ((v42 & 1) == 0)
          goto LABEL_38;
        goto LABEL_34;
      }
      v25 = *(_QWORD *)(v41 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          v13 = v26 + 1;
          if (__OFADD__(v26, 1))
            break;
          if (v13 >= v40)
            goto LABEL_31;
          v25 = *(_QWORD *)(v41 + 8 * v13);
          ++v26;
          if (v25)
            goto LABEL_20;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v13;
    }
LABEL_20:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_21:
    v27 = 16 * v22;
    v28 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v27);
    v30 = *v28;
    v29 = v28[1];
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v27);
    v33 = *v31;
    v32 = v31[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v36 = v16 == v35;
        if (v16 == v35)
          v16 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v37 == -1);
      v17 = __clz(__rbit64(~v37)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v30;
    v19[1] = v29;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v33;
    v20[1] = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v29 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v12)
          goto LABEL_33;
        v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_33;
          v21 = v29[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v29 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v21 = v29[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v30 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, _NSSwiftTimeZone>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, _TimeZoneProtocol>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.IdentifierType, String>);
  v34 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_33;
        v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_33;
          v21 = v33[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_33;
                v21 = v33[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v29 = *v28;
      v30 = v28[1];
      if ((v34 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v27;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v16);
      *v17 = v29;
      v17[1] = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, ICU.CaseMap>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
  v45 = a2;
  v48 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v6 = 1 << *(_BYTE *)(v5 + 32);
  v43 = (_QWORD *)(v5 + 64);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v5 + 64);
  v41 = v2;
  v42 = (unint64_t)(v6 + 63) >> 6;
  v9 = v48 + 64;
  result = swift_retain();
  v11 = 0;
  v44 = v5;
  while (1)
  {
    if (v8)
    {
      v46 = (v8 - 1) & v8;
      v47 = v11;
      v20 = __clz(__rbit64(v8)) | (v11 << 6);
      goto LABEL_31;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v42)
      break;
    v22 = v43;
    v23 = v43[v21];
    v24 = v11 + 1;
    if (!v23)
    {
      v24 = v11 + 2;
      if (v11 + 2 >= v42)
        goto LABEL_33;
      v23 = v43[v24];
      if (!v23)
      {
        v25 = v11 + 3;
        if (v11 + 3 >= v42)
        {
LABEL_33:
          swift_release();
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = v43[v25];
        if (!v23)
        {
          while (1)
          {
            v24 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v24 >= v42)
              goto LABEL_33;
            v23 = v43[v24];
            ++v25;
            if (v23)
              goto LABEL_30;
          }
        }
        v24 = v11 + 3;
      }
    }
LABEL_30:
    v46 = (v23 - 1) & v23;
    v47 = v24;
    v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v30;
    v32 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 48 * v20;
    v34 = *(_QWORD *)v33;
    v35 = *(_QWORD *)(v33 + 8);
    v36 = *(_QWORD *)(v33 + 16);
    v37 = *(_QWORD *)(v33 + 24);
    v38 = *(_QWORD *)(v33 + 32);
    v39 = *(_BYTE *)(v33 + 40);
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v34, v35, v36, v37, v38, v39);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v12 = -1 << *(_BYTE *)(v48 + 32);
    v13 = result & ~v12;
    v14 = v13 >> 6;
    if (((-1 << v13) & ~*(_QWORD *)(v9 + 8 * (v13 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v9 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      v16 = v38;
      v17 = v34;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v12) >> 6;
      v16 = v38;
      v17 = v34;
      do
      {
        if (++v14 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v14 == v27;
        if (v14 == v27)
          v14 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v9 + 8 * v14);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v14 << 6);
    }
    *(_QWORD *)(v9 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v18 = (_QWORD *)(*(_QWORD *)(v48 + 48) + 16 * v15);
    *v18 = v31;
    v18[1] = v32;
    v19 = *(_QWORD *)(v48 + 56) + 48 * v15;
    *(_QWORD *)v19 = v17;
    *(_QWORD *)(v19 + 8) = v35;
    *(_QWORD *)(v19 + 16) = v36;
    *(_QWORD *)(v19 + 24) = v37;
    *(_QWORD *)(v19 + 32) = v16;
    *(_BYTE *)(v19 + 40) = v39;
    ++*(_QWORD *)(v48 + 16);
    v5 = v44;
    v8 = v46;
    v11 = v47;
  }
  swift_release();
  v3 = v41;
  v22 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v40 = 1 << *(_BYTE *)(v5 + 32);
  if (v40 >= 64)
    bzero(v22, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v40;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v48;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, UnsafeMutablePointer<UnsafeMutableRawPointer?>>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v10;
    v31 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      result = MEMORY[0x186DA5EC4](*(_QWORD *)(v7 + 40), v21, 4);
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt, PredicateExpressions.VariableID>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<Int, _NSSwiftTimeZone>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = 1 << *(_BYTE *)(v5 + 32);
    v34 = v3;
    v35 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v35)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v35)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v35);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v35)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(void **)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        v31 = v30;
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v13)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v30;
                goto LABEL_40;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v13)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v31 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0)
        swift_unknownObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v17 == v25;
          if (v17 == v25)
            v17 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v11)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v11)
        goto LABEL_33;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v14 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v19);
    *v20 = v34;
    v20[1] = v33;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + v19) = v39;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = *(_QWORD *)(v5 + 56) + v31;
    v36 = *(_QWORD *)v35;
    v37 = *(_BYTE *)(v35 + 8);
    if ((v42 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = *(_QWORD *)(v7 + 56) + v18;
    *(_QWORD *)v20 = v36;
    *(_BYTE *)(v20 + 8) = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint8x8_t v3;
  uint8x8_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int64_t v65;
  int16x8_t v66;
  int16x8_t v67;
  char v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80[72];
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  unsigned __int32 v86;
  uint64_t v87;
  char v88;
  char v89;
  unsigned __int32 v90;
  char v91;
  char v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;

  v5 = v2;
  v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.PatternCacheKey, String>);
  v63 = a2;
  v74 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v7 + 16))
  {
    v59 = v2;
    v8 = 1 << *(_BYTE *)(v7 + 32);
    v61 = (_QWORD *)(v7 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v7 + 64);
    v60 = (unint64_t)(v8 + 63) >> 6;
    v11 = v74 + 64;
    result = swift_retain();
    v13 = 0;
    v62 = v7;
    while (1)
    {
      if (v10)
      {
        v64 = (v10 - 1) & v10;
        v65 = v13;
        v22 = __clz(__rbit64(v10)) | (v13 << 6);
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v60)
          goto LABEL_33;
        v24 = v61[v23];
        v25 = v13 + 1;
        if (!v24)
        {
          v25 = v13 + 2;
          if (v13 + 2 >= v60)
            goto LABEL_33;
          v24 = v61[v25];
          if (!v24)
          {
            v26 = v13 + 3;
            if (v13 + 3 >= v60)
            {
LABEL_33:
              swift_release();
              v5 = v59;
              if ((v63 & 1) != 0)
              {
                v58 = 1 << *(_BYTE *)(v7 + 32);
                if (v58 >= 64)
                  bzero(v61, ((unint64_t)(v58 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v61 = -1 << v58;
                *(_QWORD *)(v7 + 16) = 0;
              }
              break;
            }
            v24 = v61[v26];
            if (!v24)
            {
              while (1)
              {
                v25 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_40;
                if (v25 >= v60)
                  goto LABEL_33;
                v24 = v61[v25];
                ++v26;
                if (v24)
                  goto LABEL_30;
              }
            }
            v25 = v13 + 3;
          }
        }
LABEL_30:
        v64 = (v24 - 1) & v24;
        v65 = v25;
        v22 = __clz(__rbit64(v24)) + (v25 << 6);
      }
      v31 = *(_QWORD *)(v7 + 56);
      v32 = *(_QWORD *)(v7 + 48) + 96 * v22;
      v34 = *(_QWORD *)v32;
      v33 = *(_QWORD *)(v32 + 8);
      v35 = *(_BYTE *)(v32 + 16);
      v36 = *(_BYTE *)(v32 + 24);
      v37 = *(_QWORD *)(v32 + 32);
      v4.i32[0] = *(_DWORD *)(v32 + 40);
      v38 = *(_QWORD *)(v32 + 48);
      v39 = *(_BYTE *)(v32 + 56);
      v40 = *(_BYTE *)(v32 + 57);
      v3.i32[0] = *(_DWORD *)(v32 + 58);
      v41 = *(_BYTE *)(v32 + 62);
      v42 = *(_BYTE *)(v32 + 63);
      v43 = *(_QWORD *)(v32 + 64);
      v44 = *(_BYTE *)(v32 + 72);
      v45 = *(_BYTE *)(v32 + 73);
      v46 = *(_QWORD *)(v32 + 80);
      v47 = *(_QWORD *)(v32 + 88);
      v48 = (uint64_t *)(v31 + 16 * v22);
      v49 = v48[1];
      v72 = *v48;
      v78 = v37;
      v79 = v33;
      v76 = v35;
      v77 = v36;
      v75 = *(_QWORD *)v32;
      if ((v63 & 1) == 0)
      {
        v50 = *(_QWORD *)(v32 + 80);
        v73 = *(_BYTE *)(v32 + 62);
        v71 = *(_BYTE *)(v32 + 63);
        v51 = *(_QWORD *)(v32 + 64);
        v52 = *(_BYTE *)(v32 + 72);
        v53 = *(_BYTE *)(v32 + 73);
        v54 = *(_BYTE *)(v32 + 56);
        v55 = *(_QWORD *)(v32 + 88);
        v56 = *(_BYTE *)(v32 + 57);
        v57 = *(_QWORD *)(v32 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38 = v57;
        v40 = v56;
        v47 = v55;
        v39 = v54;
        v45 = v53;
        v44 = v52;
        v43 = v51;
        v42 = v71;
        v41 = v73;
        v46 = v50;
        v34 = v75;
        v37 = v78;
        v33 = v79;
        v35 = v76;
        v36 = v77;
      }
      v81 = v34;
      v82 = v33;
      v83 = v35;
      v84 = v36;
      v85 = v37;
      v66 = (int16x8_t)vmovl_u8(v4);
      v67 = (int16x8_t)vmovl_u8(v3);
      v86 = vmovn_s16(v66).u32[0];
      v14 = v38;
      v87 = v38;
      v88 = v39;
      v68 = v40;
      v69 = v45;
      v89 = v40;
      v90 = vmovn_s16(v67).u32[0];
      v91 = v41;
      v92 = v42;
      v93 = v43;
      v94 = v44;
      v95 = v45;
      v70 = v46;
      v96 = v46;
      v97 = v47;
      Hasher.init(_seed:)();
      ICUDateFormatter.PatternCacheKey.hash(into:)((uint64_t)v80);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v74 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        v19 = v49;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v15) >> 6;
        v19 = v49;
        do
        {
          if (++v17 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v17 == v28;
          if (v17 == v28)
            v17 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v17);
        }
        while (v30 == -1);
        v18 = __clz(__rbit64(~v30)) + (v17 << 6);
      }
      *(_QWORD *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v20 = *(_QWORD *)(v74 + 48) + 96 * v18;
      *(_QWORD *)v20 = v75;
      *(_QWORD *)(v20 + 8) = v79;
      *(_BYTE *)(v20 + 16) = v76;
      *(_BYTE *)(v20 + 24) = v77;
      *(_QWORD *)(v20 + 32) = v78;
      *(_DWORD *)(v20 + 40) = vmovn_s16(v66).u32[0];
      *(_QWORD *)(v20 + 48) = v14;
      *(_BYTE *)(v20 + 56) = v39;
      *(_BYTE *)(v20 + 57) = v68;
      *(_DWORD *)(v20 + 58) = vmovn_s16(v67).u32[0];
      *(_BYTE *)(v20 + 62) = v41;
      *(_BYTE *)(v20 + 63) = v42;
      *(_QWORD *)(v20 + 64) = v43;
      *(_BYTE *)(v20 + 72) = v44;
      *(_BYTE *)(v20 + 73) = v69;
      *(_QWORD *)(v20 + 80) = v70;
      *(_QWORD *)(v20 + 88) = v47;
      v21 = (_QWORD *)(*(_QWORD *)(v74 + 56) + 16 * v18);
      *v21 = v72;
      v21[1] = v19;
      ++*(_QWORD *)(v74 + 16);
      v7 = v62;
      v10 = v64;
      v13 = v65;
    }
  }
  result = swift_release();
  *v5 = v74;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<NSURLResourceKey, Any>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyHashable>);
  v40 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1))
          goto LABEL_39;
        if (v15 >= v12)
        {
LABEL_32:
          swift_release();
          v3 = v2;
          if ((v40 & 1) != 0)
          {
            v39 = 1 << *(_BYTE *)(v5 + 32);
            if (v39 >= 64)
              bzero((void *)(v5 + 64), ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v9 = -1 << v39;
            *(_QWORD *)(v5 + 16) = 0;
          }
          break;
        }
        v24 = v9[v15];
        if (!v24)
        {
          v25 = v15 + 1;
          if (v15 + 1 >= v12)
            goto LABEL_32;
          v24 = v9[v25];
          if (!v24)
          {
            while (1)
            {
              v15 = v25 + 1;
              if (__OFADD__(v25, 1))
                break;
              if (v15 >= v12)
                goto LABEL_32;
              v24 = v9[v15];
              ++v25;
              if (v24)
                goto LABEL_19;
            }
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_19:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v15 << 6);
      }
      v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(v5 + 56) + 40 * v22;
      if ((v40 & 1) != 0)
      {
        v30 = *(_OWORD *)v29;
        v31 = *(_OWORD *)(v29 + 16);
        v43 = *(_QWORD *)(v29 + 32);
        v41 = v30;
        v42 = v31;
      }
      else
      {
        outlined init with copy of AnyHashable(v29, (uint64_t)&v41);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v32 = -1 << *(_BYTE *)(v7 + 32);
      v33 = result & ~v32;
      v34 = v33 >> 6;
      if (((-1 << v33) & ~*(_QWORD *)(v13 + 8 * (v33 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v13 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v37 = v34 == v36;
          if (v34 == v36)
            v34 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)(v13 + 8 * v34);
        }
        while (v38 == -1);
        v16 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v16);
      *v17 = v28;
      v17[1] = v27;
      v18 = *(_QWORD *)(v7 + 56) + 40 * v16;
      v19 = v41;
      v20 = v42;
      *(_QWORD *)(v18 + 32) = v43;
      *(_OWORD *)v18 = v19;
      *(_OWORD *)(v18 + 16) = v20;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  Swift::UInt v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, String>);
  v34 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_40;
        result = v5 + 64;
        if (v8 >= v12)
        {
LABEL_31:
          if ((v34 & 1) == 0)
          {
            result = swift_release();
            v3 = v2;
            goto LABEL_38;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero(v33, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v33 = -1 << v32;
          v3 = v2;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v22 = v33[v8];
        if (!v22)
        {
          v23 = v8 + 1;
          if (v8 + 1 >= v12)
            goto LABEL_31;
          v22 = v33[v23];
          if (!v22)
          {
            while (1)
            {
              v8 = v23 + 1;
              if (__OFADD__(v23, 1))
                break;
              if (v8 >= v12)
                goto LABEL_31;
              v22 = v33[v8];
              ++v23;
              if (v22)
                goto LABEL_20;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        v11 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v25 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      v26 = *v25;
      v27 = v25[1];
      if ((v34 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v24);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v16 == v29;
          if (v16 == v29)
            v16 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v31 == -1);
        v17 = __clz(__rbit64(~v31)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = v24;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17);
      *v18 = v26;
      v18[1] = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Weekday, [Int]>);
  v32 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1))
          goto LABEL_38;
        if (v15 >= v12)
        {
LABEL_31:
          swift_release();
          v3 = v2;
          if ((v32 & 1) != 0)
          {
            v31 = 1 << *(_BYTE *)(v5 + 32);
            if (v31 >= 64)
              bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v9 = -1 << v31;
            *(_QWORD *)(v5 + 16) = 0;
          }
          break;
        }
        v23 = v9[v15];
        if (!v23)
        {
          v24 = v15 + 1;
          if (v15 + 1 >= v12)
            goto LABEL_31;
          v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              v15 = v24 + 1;
              if (__OFADD__(v24, 1))
                break;
              if (v15 >= v12)
                goto LABEL_31;
              v23 = v9[v15];
              ++v24;
              if (v23)
                goto LABEL_20;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_20:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }
      v25 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v21);
      v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
      if ((v32 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v7 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v19) = v25;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v19) = v26;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        if (v8 >= v13)
        {
LABEL_29:
          if ((v34 & 1) == 0)
          {
            result = swift_release();
            v3 = v33;
            goto LABEL_36;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v32;
          v3 = v33;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v20 = v9[v8];
        if (!v20)
        {
          v21 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_29;
          v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              v8 = v21 + 1;
              if (__OFADD__(v21, 1))
                break;
              if (v8 >= v13)
                goto LABEL_29;
              v20 = v9[v8];
              ++v21;
              if (v20)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Range<Int>]>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_40;
    if (v14 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v14);
    if (!v24)
    {
      v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        v3 = v35;
        if ((v37 & 1) == 0)
          goto LABEL_38;
        goto LABEL_34;
      }
      v24 = *(_QWORD *)(v36 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          v14 = v25 + 1;
          if (__OFADD__(v25, 1))
            break;
          if (v14 >= v11)
            goto LABEL_31;
          v24 = *(_QWORD *)(v36 + 8 * v14);
          ++v25;
          if (v24)
            goto LABEL_20;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v17 == v31;
        if (v17 == v31)
          v17 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, Int>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = a2;
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_31;
        v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_31;
          v18 = v31[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v18 = v31[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v16);
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v20;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, String>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v9;
    v32 = v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v34[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero(v34, 8 * v33);
                else
                  *v34 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v21 = v34[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v19);
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v29 = *v28;
      v30 = v28[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = MEMORY[0x186DA5EC4](*(_QWORD *)(v7 + 40), v27, 4);
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v16) = v27;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v16);
      *v17 = v29;
      v17[1] = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Date.FormatStyle.DateStyle, String>);
  v34 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_33;
        v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_33;
          v21 = v33[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_33;
                v21 = v33[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v29 = *v28;
      v30 = v28[1];
      if ((v34 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v16);
      *v17 = v29;
      v17[1] = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v35 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v33 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v20 = v19 | (v13 << 6);
      }
      else
      {
        v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v34)
          goto LABEL_35;
        v22 = v33[v21];
        ++v13;
        if (!v22)
        {
          v13 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_35;
          v22 = v33[v13];
          if (!v22)
          {
            v13 = v21 + 2;
            if (v21 + 2 >= v34)
              goto LABEL_35;
            v22 = v33[v13];
            if (!v22)
            {
              v23 = v21 + 3;
              if (v23 >= v34)
              {
LABEL_35:
                swift_release();
                v3 = v2;
                if ((v35 & 1) != 0)
                {
                  v32 = 1 << *(_BYTE *)(v5 + 32);
                  if (v32 >= 64)
                    bzero(v33, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                  else
                    *v33 = -1 << v32;
                  *(_QWORD *)(v5 + 16) = 0;
                }
                break;
              }
              v22 = v33[v23];
              if (!v22)
              {
                while (1)
                {
                  v13 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_42;
                  if (v13 >= v34)
                    goto LABEL_35;
                  v22 = v33[v13];
                  ++v23;
                  if (v22)
                    goto LABEL_32;
                }
              }
              v13 = v23;
            }
          }
        }
LABEL_32:
        v10 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
      v30 = *v28;
      v29 = v28[1];
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
      if ((v35 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v30;
      v18[1] = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  char v34;

  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, XMLPlistMap.Value>);
  v34 = a2;
  v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v32 = (_QWORD *)(v4 + 64);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v4 + 64);
    v33 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 64;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v18 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v19 = v18 | (v12 << 6);
      }
      else
      {
        v20 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v20 >= v33)
          goto LABEL_35;
        v21 = v32[v20];
        ++v12;
        if (!v21)
        {
          v12 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_35;
          v21 = v32[v12];
          if (!v21)
          {
            v12 = v20 + 2;
            if (v20 + 2 >= v33)
              goto LABEL_35;
            v21 = v32[v12];
            if (!v21)
            {
              v22 = v20 + 3;
              if (v22 >= v33)
              {
LABEL_35:
                swift_release();
                if ((v34 & 1) != 0)
                {
                  v31 = 1 << *(_BYTE *)(v4 + 32);
                  if (v31 >= 64)
                    bzero(v32, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                  else
                    *v32 = -1 << v31;
                  *(_QWORD *)(v4 + 16) = 0;
                }
                break;
              }
              v21 = v32[v22];
              if (!v21)
              {
                while (1)
                {
                  v12 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_42;
                  if (v12 >= v33)
                    goto LABEL_35;
                  v21 = v32[v12];
                  ++v22;
                  if (v21)
                    goto LABEL_32;
                }
              }
              v12 = v22;
            }
          }
        }
LABEL_32:
        v9 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v12 << 6);
      }
      v27 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v19);
      v29 = *v27;
      v28 = v27[1];
      v30 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v19);
      if ((v34 & 1) == 0)
      {
        outlined copy of XMLPlistMap.Value(v30);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v6 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v10 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v16);
      *v17 = v29;
      v17[1] = v28;
      *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v16) = v30;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  __int128 v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONMap.Value>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_33;
        v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_33;
          v23 = v36[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v37 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v35)
                  goto LABEL_33;
                v23 = v36[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v38 = *(_OWORD *)v32;
      v33 = *(_BYTE *)(v32 + 16);
      if ((v37 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
      *(_OWORD *)v19 = v38;
      *(_BYTE *)(v19 + 16) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::UInt v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119[72];
  uint64_t __dst[50];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateIntervalFormatter.Signature, ICUDateIntervalFormatter?>);
  v67 = a2;
  v83 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = 1 << *(_BYTE *)(v5 + 32);
    v62 = v2;
    v63 = (_QWORD *)(v5 + 64);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v5 + 64);
    v64 = (unint64_t)(v6 + 63) >> 6;
    v66 = v83 + 64;
    result = swift_retain();
    v10 = 0;
    v65 = v5;
    while (1)
    {
      if (v8)
      {
        v69 = (v8 - 1) & v8;
        v70 = v10;
        v36 = __clz(__rbit64(v8)) | (v10 << 6);
        if ((v67 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        v48 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v48 >= v64)
          goto LABEL_33;
        v49 = v63[v48];
        v50 = v10 + 1;
        if (!v49)
        {
          v50 = v10 + 2;
          if (v10 + 2 >= v64)
            goto LABEL_33;
          v49 = v63[v50];
          if (!v49)
          {
            v51 = v10 + 3;
            if (v10 + 3 >= v64)
            {
LABEL_33:
              swift_release();
              v3 = v62;
              if ((v67 & 1) != 0)
              {
                v61 = 1 << *(_BYTE *)(v5 + 32);
                if (v61 >= 64)
                  bzero(v63, ((unint64_t)(v61 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v63 = -1 << v61;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v49 = v63[v51];
            if (!v49)
            {
              while (1)
              {
                v50 = v51 + 1;
                if (__OFADD__(v51, 1))
                  goto LABEL_40;
                if (v50 >= v64)
                  goto LABEL_33;
                v49 = v63[v50];
                ++v51;
                if (v49)
                  goto LABEL_22;
              }
            }
            v50 = v10 + 3;
          }
        }
LABEL_22:
        v69 = (v49 - 1) & v49;
        v70 = v50;
        v36 = __clz(__rbit64(v49)) + (v50 << 6);
        if ((v67 & 1) != 0)
        {
LABEL_10:
          v37 = *(_QWORD *)(v5 + 56);
          v38 = *(_QWORD *)(v5 + 48) + 392 * v36;
          v88 = *(_QWORD *)(v38 + 8);
          v89 = *(_QWORD *)v38;
          v86 = *(_QWORD *)(v38 + 24);
          v87 = *(_QWORD *)(v38 + 16);
          v39 = *(_QWORD *)(v38 + 48);
          v84 = *(_QWORD *)(v38 + 40);
          v85 = *(_QWORD *)(v38 + 32);
          v41 = *(_QWORD *)(v38 + 56);
          v40 = *(_QWORD *)(v38 + 64);
          v42 = *(_QWORD *)(v38 + 72);
          v43 = *(_QWORD *)(v38 + 80);
          v44 = *(_QWORD *)(v38 + 88);
          v90 = *(_BYTE *)(v38 + 96);
          v93 = *(_QWORD *)(v38 + 112);
          v94 = *(_QWORD *)(v38 + 104);
          v91 = *(_QWORD *)(v38 + 128);
          v92 = *(_QWORD *)(v38 + 120);
          v97 = *(_QWORD *)(v38 + 144);
          v98 = *(_QWORD *)(v38 + 136);
          v95 = *(_QWORD *)(v38 + 160);
          v96 = *(_QWORD *)(v38 + 152);
          v101 = *(_QWORD *)(v38 + 176);
          v102 = *(_QWORD *)(v38 + 168);
          v99 = *(_QWORD *)(v38 + 192);
          v100 = *(_QWORD *)(v38 + 184);
          v103 = *(_BYTE *)(v38 + 200);
          v68 = *(_QWORD *)(v37 + 8 * v36);
          v104 = *(_BYTE *)(v38 + 201);
          v107 = *(_QWORD *)(v38 + 216);
          v108 = *(_QWORD *)(v38 + 208);
          v105 = *(_QWORD *)(v38 + 232);
          v106 = *(_QWORD *)(v38 + 224);
          v111 = *(_QWORD *)(v38 + 248);
          v112 = *(_QWORD *)(v38 + 240);
          v45 = *(_QWORD *)(v38 + 272);
          v109 = *(_QWORD *)(v38 + 264);
          v110 = *(_QWORD *)(v38 + 256);
          v114 = *(_QWORD *)(v38 + 288);
          v115 = *(_QWORD *)(v38 + 280);
          v113 = *(_QWORD *)(v38 + 296);
          v116 = *(_QWORD *)(v38 + 312);
          v117 = *(_QWORD *)(v38 + 304);
          v46 = *(_QWORD *)(v38 + 328);
          v118 = *(_QWORD *)(v38 + 320);
          v77 = *(_QWORD *)(v38 + 344);
          v78 = *(_QWORD *)(v38 + 336);
          v79 = *(unsigned __int8 *)(v38 + 352);
          v47 = *(_QWORD *)(v38 + 368);
          v80 = *(_QWORD *)(v38 + 360);
          v81 = *(_QWORD *)(v38 + 376);
          v82 = *(_QWORD *)(v38 + 384);
          goto LABEL_24;
        }
      }
      memcpy(__dst, (const void *)(*(_QWORD *)(v5 + 48) + 392 * v36), 0x188uLL);
      v52 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
      v81 = __dst[47];
      v82 = __dst[48];
      v47 = __dst[46];
      v79 = LOBYTE(__dst[44]);
      v80 = __dst[45];
      v46 = __dst[41];
      v77 = __dst[43];
      v78 = __dst[42];
      v117 = __dst[38];
      v118 = __dst[40];
      v45 = __dst[34];
      v115 = __dst[35];
      v116 = __dst[39];
      v113 = __dst[37];
      v114 = __dst[36];
      v111 = __dst[31];
      v112 = __dst[30];
      v109 = __dst[33];
      v110 = __dst[32];
      v107 = __dst[27];
      v108 = __dst[26];
      v105 = __dst[29];
      v106 = __dst[28];
      v104 = BYTE1(__dst[25]);
      v103 = __dst[25];
      v101 = __dst[22];
      v102 = __dst[21];
      v99 = __dst[24];
      v100 = __dst[23];
      v97 = __dst[18];
      v98 = __dst[17];
      v95 = __dst[20];
      v96 = __dst[19];
      v93 = __dst[14];
      v94 = __dst[13];
      v91 = __dst[16];
      v92 = __dst[15];
      v90 = __dst[12];
      v88 = __dst[1];
      v89 = __dst[0];
      v86 = __dst[3];
      v87 = __dst[2];
      v84 = __dst[5];
      v85 = __dst[4];
      v39 = __dst[6];
      v41 = __dst[7];
      v40 = __dst[8];
      v42 = __dst[9];
      v43 = __dst[10];
      v44 = __dst[11];
      outlined retain of ICUDateIntervalFormatter.Signature(__dst);
      v68 = v52;
      swift_retain();
LABEL_24:
      Hasher.init(_seed:)();
      __dst[0] = v89;
      __dst[1] = v88;
      __dst[2] = v87;
      __dst[3] = v86;
      __dst[4] = v85;
      __dst[5] = v84;
      v75 = v41;
      v76 = v39;
      __dst[6] = v39;
      __dst[7] = v41;
      v73 = v42;
      v74 = v40;
      __dst[8] = v40;
      __dst[9] = v42;
      v71 = v44;
      v72 = v43;
      __dst[10] = v43;
      __dst[11] = v44;
      LOBYTE(__dst[12]) = v90;
      __dst[13] = v94;
      __dst[14] = v93;
      __dst[15] = v92;
      __dst[16] = v91;
      __dst[17] = v98;
      __dst[18] = v97;
      __dst[19] = v96;
      __dst[20] = v95;
      __dst[21] = v102;
      __dst[22] = v101;
      __dst[23] = v100;
      __dst[24] = v99;
      LOBYTE(__dst[25]) = v103;
      BYTE1(__dst[25]) = v104;
      __dst[26] = v108;
      __dst[27] = v107;
      __dst[28] = v106;
      __dst[29] = v105;
      __dst[30] = v112;
      __dst[31] = v111;
      __dst[32] = v110;
      __dst[33] = v109;
      __dst[34] = v45;
      __dst[35] = v115;
      __dst[36] = v114;
      __dst[37] = v113;
      __dst[38] = v117;
      __dst[39] = v116;
      __dst[40] = v118;
      __dst[41] = v46;
      __dst[42] = v78;
      __dst[43] = v77;
      Locale.Components.hash(into:)((uint64_t)v119);
      Hasher._combine(_:)(v79);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v53 = Hasher._finalize()();
      v54 = -1 << *(_BYTE *)(v83 + 32);
      v55 = v53 & ~v54;
      v56 = v55 >> 6;
      if (((-1 << v55) & ~*(_QWORD *)(v66 + 8 * (v55 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v55) & ~*(_QWORD *)(v66 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0;
        v12 = v81;
        v13 = v80;
        v14 = v79;
        v15 = v117;
        v16 = v118;
        v17 = v46;
        v18 = v78;
        result = v82;
        v19 = v47;
        v20 = v77;
        v22 = v115;
        v21 = v116;
        v23 = v45;
        v25 = v113;
        v24 = v114;
        v27 = v111;
        v26 = v112;
        v29 = v109;
        v28 = v110;
        v31 = v107;
        v30 = v108;
        v33 = v105;
        v32 = v106;
        v34 = v104;
      }
      else
      {
        v57 = 0;
        v58 = (unint64_t)(63 - v54) >> 6;
        v12 = v81;
        v13 = v80;
        v14 = v79;
        v15 = v117;
        v16 = v118;
        v17 = v46;
        v18 = v78;
        result = v82;
        v19 = v47;
        v20 = v77;
        v22 = v115;
        v21 = v116;
        v23 = v45;
        v25 = v113;
        v24 = v114;
        v27 = v111;
        v26 = v112;
        v29 = v109;
        v28 = v110;
        v31 = v107;
        v30 = v108;
        v33 = v105;
        v32 = v106;
        v34 = v104;
        do
        {
          if (++v56 == v58 && (v57 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v59 = v56 == v58;
          if (v56 == v58)
            v56 = 0;
          v57 |= v59;
          v60 = *(_QWORD *)(v66 + 8 * v56);
        }
        while (v60 == -1);
        v11 = __clz(__rbit64(~v60)) + (v56 << 6);
      }
      *(_QWORD *)(v66 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v35 = *(_QWORD *)(v83 + 48) + 392 * v11;
      *(_QWORD *)v35 = v89;
      *(_QWORD *)(v35 + 8) = v88;
      *(_QWORD *)(v35 + 16) = v87;
      *(_QWORD *)(v35 + 24) = v86;
      *(_QWORD *)(v35 + 32) = v85;
      *(_QWORD *)(v35 + 40) = v84;
      *(_QWORD *)(v35 + 48) = v76;
      *(_QWORD *)(v35 + 56) = v75;
      *(_QWORD *)(v35 + 64) = v74;
      *(_QWORD *)(v35 + 72) = v73;
      *(_QWORD *)(v35 + 80) = v72;
      *(_QWORD *)(v35 + 88) = v71;
      *(_BYTE *)(v35 + 96) = v90;
      *(_QWORD *)(v35 + 104) = v94;
      *(_QWORD *)(v35 + 112) = v93;
      *(_QWORD *)(v35 + 120) = v92;
      *(_QWORD *)(v35 + 128) = v91;
      *(_QWORD *)(v35 + 136) = v98;
      *(_QWORD *)(v35 + 144) = v97;
      *(_QWORD *)(v35 + 152) = v96;
      *(_QWORD *)(v35 + 160) = v95;
      *(_QWORD *)(v35 + 168) = v102;
      *(_QWORD *)(v35 + 176) = v101;
      *(_QWORD *)(v35 + 184) = v100;
      *(_QWORD *)(v35 + 192) = v99;
      *(_BYTE *)(v35 + 200) = v103;
      *(_BYTE *)(v35 + 201) = v34;
      *(_QWORD *)(v35 + 208) = v30;
      *(_QWORD *)(v35 + 216) = v31;
      *(_QWORD *)(v35 + 224) = v32;
      *(_QWORD *)(v35 + 232) = v33;
      *(_QWORD *)(v35 + 240) = v26;
      *(_QWORD *)(v35 + 248) = v27;
      *(_QWORD *)(v35 + 256) = v28;
      *(_QWORD *)(v35 + 264) = v29;
      *(_QWORD *)(v35 + 272) = v23;
      *(_QWORD *)(v35 + 280) = v22;
      *(_QWORD *)(v35 + 288) = v24;
      *(_QWORD *)(v35 + 296) = v25;
      *(_QWORD *)(v35 + 304) = v15;
      *(_QWORD *)(v35 + 312) = v21;
      *(_QWORD *)(v35 + 320) = v16;
      *(_QWORD *)(v35 + 328) = v17;
      *(_QWORD *)(v35 + 336) = v18;
      *(_QWORD *)(v35 + 344) = v20;
      *(_BYTE *)(v35 + 352) = v14;
      *(_QWORD *)(v35 + 360) = v13;
      *(_QWORD *)(v35 + 368) = v19;
      *(_QWORD *)(v35 + 376) = v12;
      *(_QWORD *)(v35 + 384) = result;
      v8 = v69;
      *(_QWORD *)(*(_QWORD *)(v83 + 56) + 8 * v11) = v68;
      ++*(_QWORD *)(v83 + 16);
      v5 = v65;
      v10 = v70;
    }
  }
  result = swift_release();
  *v3 = v83;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUListFormatter.Signature, ICUListFormatter>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = *(_QWORD *)(v5 + 48) + 32 * v21;
    v32 = *(_QWORD *)v30;
    v31 = *(_QWORD *)(v30 + 8);
    v38 = *(_OWORD *)(v30 + 16);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v38);
    Hasher._combine(_:)(*((Swift::UInt *)&v38 + 1));
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      v18 = v38;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      v18 = v38;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v19 = *(_QWORD *)(v7 + 48) + 32 * v17;
    *(_QWORD *)v19 = v32;
    *(_QWORD *)(v19 + 8) = v31;
    *(_OWORD *)(v19 + 16) = v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  Swift::UInt64 v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt64 v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  uint64_t v43;
  Swift::UInt64 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  Swift::UInt8 v55;
  uint64_t v56;
  __int128 v57;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter?>);
  v51 = a2;
  v56 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = 1 << *(_BYTE *)(v5 + 32);
    v49 = (_QWORD *)(v5 + 64);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v5 + 64);
    v47 = v2;
    v48 = (unint64_t)(v6 + 63) >> 6;
    v9 = v56 + 64;
    result = swift_retain();
    v11 = 0;
    v50 = v5;
    while (1)
    {
      if (v8)
      {
        v52 = (v8 - 1) & v8;
        v53 = v11;
        v26 = __clz(__rbit64(v8)) | (v11 << 6);
      }
      else
      {
        v27 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v27 >= v48)
          goto LABEL_36;
        v28 = v49[v27];
        v29 = v11 + 1;
        if (!v28)
        {
          v29 = v11 + 2;
          if (v11 + 2 >= v48)
            goto LABEL_36;
          v28 = v49[v29];
          if (!v28)
          {
            v30 = v11 + 3;
            if (v11 + 3 >= v48)
            {
LABEL_36:
              swift_release();
              v3 = v47;
              if ((v51 & 1) != 0)
              {
                v46 = 1 << *(_BYTE *)(v5 + 32);
                if (v46 >= 64)
                  bzero(v49, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v49 = -1 << v46;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v28 = v49[v30];
            if (!v28)
            {
              while (1)
              {
                v29 = v30 + 1;
                if (__OFADD__(v30, 1))
                  goto LABEL_43;
                if (v29 >= v48)
                  goto LABEL_36;
                v28 = v49[v29];
                ++v30;
                if (v28)
                  goto LABEL_33;
              }
            }
            v29 = v11 + 3;
          }
        }
LABEL_33:
        v52 = (v28 - 1) & v28;
        v53 = v29;
        v26 = __clz(__rbit64(v28)) + (v29 << 6);
      }
      v35 = *(_QWORD *)(v5 + 56);
      v36 = *(_QWORD *)(v5 + 48) + 96 * v26;
      v38 = *(_QWORD *)v36;
      v37 = *(_QWORD *)(v36 + 8);
      v39 = *(_QWORD *)(v36 + 16);
      v40 = *(_QWORD *)(v36 + 24);
      v41 = *(unsigned __int8 *)(v36 + 32);
      v57 = *(_OWORD *)(v36 + 40);
      v42 = *(unsigned __int8 *)(v36 + 56);
      v43 = *(_QWORD *)(v36 + 72);
      v54 = *(_QWORD *)(v36 + 64);
      v55 = *(_BYTE *)(v36 + 80);
      v44 = *(_QWORD *)(v36 + 88);
      v45 = *(_QWORD *)(v35 + 8 * v26);
      if ((v51 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v41);
      Hasher._combine(_:)(v57);
      Hasher._combine(_:)(*((Swift::UInt *)&v57 + 1));
      Hasher._combine(_:)(v42);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v55);
      if ((v44 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v12 = v44;
      else
        v12 = 0;
      Hasher._combine(_:)(v12);
      v13 = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v56 + 32);
      v15 = v13 & ~v14;
      v16 = v15 >> 6;
      v17 = v43;
      v18 = v44;
      if (((-1 << v15) & ~*(_QWORD *)(v9 + 8 * (v15 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v9 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        v21 = v42;
        v20 = v45;
        v22 = v57;
        result = v39;
        v23 = v41;
        v24 = v38;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v14) >> 6;
        v21 = v42;
        v20 = v45;
        v22 = v57;
        result = v39;
        v23 = v41;
        v24 = v38;
        do
        {
          if (++v16 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v33 = v16 == v32;
          if (v16 == v32)
            v16 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v9 + 8 * v16);
        }
        while (v34 == -1);
        v19 = __clz(__rbit64(~v34)) + (v16 << 6);
      }
      *(_QWORD *)(v9 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v25 = *(_QWORD *)(v56 + 48) + 96 * v19;
      *(_QWORD *)v25 = v24;
      *(_QWORD *)(v25 + 8) = v37;
      *(_QWORD *)(v25 + 16) = result;
      *(_QWORD *)(v25 + 24) = v40;
      *(_BYTE *)(v25 + 32) = v23;
      *(_OWORD *)(v25 + 40) = v22;
      *(_BYTE *)(v25 + 56) = v21;
      *(_QWORD *)(v25 + 64) = v54;
      *(_QWORD *)(v25 + 72) = v17;
      *(_BYTE *)(v25 + 80) = v55;
      *(_QWORD *)(v25 + 88) = v18;
      *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * v19) = v20;
      ++*(_QWORD *)(v56 + 16);
      v5 = v50;
      v8 = v52;
      v11 = v53;
    }
  }
  result = swift_release();
  *v3 = v56;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt32 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICURelativeDateFormatter.Signature, ICURelativeDateFormatter?>);
  v40 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v14 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v37)
          goto LABEL_36;
        v20 = v38[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v37)
            goto LABEL_36;
          v20 = v38[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v37)
            {
LABEL_36:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v38[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v14 >= v37)
                  goto LABEL_36;
                v20 = v38[v14];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v14 = v21;
          }
        }
LABEL_21:
        v10 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = *(_QWORD *)(v5 + 56);
      v23 = *(_QWORD *)(v5 + 48) + 32 * v18;
      v25 = *(_QWORD *)v23;
      v24 = *(_QWORD *)(v23 + 8);
      v26 = *(_DWORD *)(v23 + 16);
      v27 = *(unsigned __int8 *)(v23 + 20);
      *(_QWORD *)&v13 = *(_QWORD *)(v23 + 24);
      v41 = v13;
      v28 = *(_QWORD *)(v22 + 8 * v18);
      if ((v40 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v27)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v26);
      }
      Hasher._combine(_:)(v41);
      Hasher._combine(_:)(DWORD1(v41));
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v7 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v11 + 8 * (v30 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v11 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v11 + 8 * v31);
        }
        while (v35 == -1);
        v15 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = *(_QWORD *)(v7 + 48) + 32 * v15;
      *(_QWORD *)v16 = v25;
      *(_QWORD *)(v16 + 8) = v24;
      *(_DWORD *)(v16 + 16) = v26;
      *(_BYTE *)(v16 + 20) = v27;
      *((_QWORD *)&v13 + 1) = *((_QWORD *)&v41 + 1);
      *(_QWORD *)(v16 + 24) = v41;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v28;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Duration.UnitsFormatStyle.Unit, Double>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v31 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<NSFileAttributeKey, Any>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;
  char v43;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v40 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v38 = v2;
  v39 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_33;
      v24 = v40[v13];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v39)
              goto LABEL_33;
            v24 = v40[v13];
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 32 * v21;
    v34 = *(_QWORD *)v33;
    v35 = *(_BYTE *)(v33 + 8);
    v36 = *(_QWORD *)(v33 + 16);
    v43 = *(_BYTE *)(v33 + 24);
    if ((v42 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 32 * v17;
    *(_QWORD *)v19 = v34;
    *(_BYTE *)(v19 + 8) = v35;
    *(_QWORD *)(v19 + 16) = v36;
    *(_BYTE *)(v19 + 24) = v43;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v9;
    v32 = v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v34[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero(v34, 8 * v33);
                else
                  *v34 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v21 = v34[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v29 = *v28;
      v30 = v28[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v16);
      *v17 = v29;
      v17[1] = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  char v45;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  v45 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v41 = v2;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v43 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v42 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    swift_retain();
    v12 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v18 = v17 | (v12 << 6);
      }
      else
      {
        v19 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        if (v19 >= v42)
          goto LABEL_34;
        v20 = v43[v19];
        ++v12;
        if (!v20)
        {
          v12 = v19 + 1;
          if (v19 + 1 >= v42)
            goto LABEL_34;
          v20 = v43[v12];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v42)
            {
LABEL_34:
              swift_release();
              v3 = v41;
              if ((v45 & 1) != 0)
              {
                v39 = 1 << *(_BYTE *)(v5 + 32);
                if (v39 >= 64)
                  bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v43 = -1 << v39;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v43[v21];
            if (!v20)
            {
              while (1)
              {
                v12 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v12 >= v42)
                  goto LABEL_34;
                v20 = v43[v12];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v12 = v21;
          }
        }
LABEL_21:
        v10 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v12 << 6);
      }
      v22 = 24 * v18;
      v23 = *(_QWORD *)(v5 + 48) + v22;
      v24 = *(_QWORD *)v23;
      v25 = *(_QWORD *)(v23 + 8);
      v26 = *(unsigned __int8 *)(v23 + 16);
      v27 = *(_QWORD *)(v5 + 56) + v22;
      v29 = *(_QWORD *)v27;
      v28 = *(_QWORD *)(v27 + 8);
      v30 = *(_BYTE *)(v27 + 16);
      if ((v45 & 1) == 0)
      {
        outlined copy of _XMLPlistEncodingFormat.Reference(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        outlined copy of _XMLPlistEncodingFormat.Reference(v29, v28, v30);
      }
      Hasher.init(_seed:)();
      if (v26)
        goto LABEL_42;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of _XMLPlistEncodingFormat.Reference(v24, v25, 0);
      v31 = Hasher._finalize()();
      v32 = -1 << *(_BYTE *)(v7 + 32);
      v33 = v31 & ~v32;
      v34 = v33 >> 6;
      if (((-1 << v33) & ~*(_QWORD *)(v11 + 8 * (v33 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v11 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v37 = v34 == v36;
          if (v34 == v36)
            v34 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)(v11 + 8 * v34);
        }
        while (v38 == -1);
        v13 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = 24 * v13;
      v15 = *(_QWORD *)(v7 + 48) + v14;
      *(_QWORD *)v15 = v24;
      *(_QWORD *)(v15 + 8) = v25;
      *(_BYTE *)(v15 + 16) = 0;
      v16 = *(_QWORD *)(v7 + 56) + v14;
      *(_QWORD *)v16 = v29;
      *(_QWORD *)(v16 + 8) = v28;
      *(_BYTE *)(v16 + 16) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  _BYTE v36[72];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AttributedString._AttributeStorage, Int>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v2;
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v34 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v34 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v33;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v34 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v34 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    v35 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v31 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8);
    if ((a2 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    specialized Dictionary<>.hash(into:)((uint64_t)v36, v35);
    specialized Set.hash(into:)((uint64_t)v36, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v35;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v35;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v33;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v23, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPatternGenerator.PatternGeneratorInfo, ICUPatternGenerator?>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = *(_QWORD *)(v5 + 48) + 24 * v20;
    v31 = *(_QWORD *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    v32 = *(unsigned __int8 *)(v29 + 16);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v32);
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = *(_QWORD *)(v7 + 48) + 24 * v17;
    *(_QWORD *)v18 = v31;
    *(_QWORD *)(v18 + 8) = v30;
    *(_BYTE *)(v18 + 16) = v32;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Morphology._CustomPronoun>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v2;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v37 = (v10 - 1) & v10;
        v38 = v13;
        v20 = __clz(__rbit64(v10)) | (v13 << 6);
      }
      else
      {
        v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v35)
          goto LABEL_33;
        v22 = v36[v21];
        v23 = v13 + 1;
        if (!v22)
        {
          v23 = v13 + 2;
          if (v13 + 2 >= v35)
            goto LABEL_33;
          v22 = v36[v23];
          if (!v22)
          {
            v24 = v13 + 3;
            if (v13 + 3 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v36[v24];
            if (!v22)
            {
              while (1)
              {
                v23 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v23 >= v35)
                  goto LABEL_33;
                v22 = v36[v23];
                ++v24;
                if (v22)
                  goto LABEL_30;
              }
            }
            v23 = v13 + 3;
          }
        }
LABEL_30:
        v37 = (v22 - 1) & v22;
        v38 = v23;
        v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 80 * v20;
      v43 = *(_OWORD *)(v32 + 24);
      v44 = *(_OWORD *)(v32 + 8);
      v41 = *(_OWORD *)(v32 + 56);
      v42 = *(_OWORD *)(v32 + 40);
      v39 = *(_QWORD *)v32;
      v40 = *(_QWORD *)(v32 + 72);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 80 * v17;
      v13 = v38;
      *(_QWORD *)v19 = v39;
      *(_OWORD *)(v19 + 8) = v44;
      *(_OWORD *)(v19 + 24) = v43;
      *(_OWORD *)(v19 + 40) = v42;
      *(_OWORD *)(v19 + 56) = v41;
      *(_QWORD *)(v19 + 72) = v40;
      ++*(_QWORD *)(v7 + 16);
      v10 = v37;
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  void *v29;
  id v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, NSExpression>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_33;
        v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_33;
          v21 = v33[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_33;
                v21 = v33[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(void **)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
        v30 = v29;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  Swift::UInt64 v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::UInt64 v17;
  unint64_t v18;
  char v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;
  uint64_t v44;
  Swift::UInt64 v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  Swift::UInt8 v57;
  uint64_t v58;
  __int128 v59;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateFormatter.DateFormatInfo, ICUDateFormatter.DateFormatInfo.UpdateSchedule>);
  v58 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = 1 << *(_BYTE *)(v5 + 32);
    v50 = (_QWORD *)(v5 + 64);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v5 + 64);
    v48 = v2;
    v49 = (unint64_t)(v6 + 63) >> 6;
    v9 = v58 + 64;
    result = swift_retain();
    v11 = 0;
    v51 = v5;
    while (1)
    {
      if (v8)
      {
        v52 = (v8 - 1) & v8;
        v53 = v11;
        v27 = __clz(__rbit64(v8)) | (v11 << 6);
      }
      else
      {
        v28 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v28 >= v49)
          goto LABEL_36;
        v29 = v50[v28];
        v30 = v11 + 1;
        if (!v29)
        {
          v30 = v11 + 2;
          if (v11 + 2 >= v49)
            goto LABEL_36;
          v29 = v50[v30];
          if (!v29)
          {
            v31 = v11 + 3;
            if (v11 + 3 >= v49)
            {
LABEL_36:
              swift_release();
              v3 = v48;
              if ((a2 & 1) != 0)
              {
                v47 = 1 << *(_BYTE *)(v5 + 32);
                if (v47 >= 64)
                  bzero(v50, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v50 = -1 << v47;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v29 = v50[v31];
            if (!v29)
            {
              while (1)
              {
                v30 = v31 + 1;
                if (__OFADD__(v31, 1))
                  goto LABEL_43;
                if (v30 >= v49)
                  goto LABEL_36;
                v29 = v50[v30];
                ++v31;
                if (v29)
                  goto LABEL_33;
              }
            }
            v30 = v11 + 3;
          }
        }
LABEL_33:
        v52 = (v29 - 1) & v29;
        v53 = v30;
        v27 = __clz(__rbit64(v29)) + (v30 << 6);
      }
      v36 = *(_QWORD *)(v5 + 56);
      v37 = *(_QWORD *)(v5 + 48) + 96 * v27;
      v38 = *(_QWORD *)v37;
      v39 = *(_QWORD *)(v37 + 8);
      v40 = *(_QWORD *)(v37 + 16);
      v41 = *(_QWORD *)(v37 + 24);
      v42 = *(unsigned __int8 *)(v37 + 32);
      v59 = *(_OWORD *)(v37 + 40);
      v43 = *(unsigned __int8 *)(v37 + 56);
      v44 = *(_QWORD *)(v37 + 72);
      v56 = *(_QWORD *)(v37 + 64);
      v57 = *(_BYTE *)(v37 + 80);
      v45 = *(_QWORD *)(v37 + 88);
      v46 = (uint64_t *)(v36 + 16 * v27);
      v54 = *v46;
      v55 = *((_BYTE *)v46 + 8);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v42);
      Hasher._combine(_:)(v59);
      Hasher._combine(_:)(*((Swift::UInt *)&v59 + 1));
      Hasher._combine(_:)(v43);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v57);
      if ((v45 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v12 = v45;
      else
        v12 = 0;
      Hasher._combine(_:)(v12);
      v13 = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v58 + 32);
      v15 = v13 & ~v14;
      v16 = v15 >> 6;
      v17 = v45;
      if (((-1 << v15) & ~*(_QWORD *)(v9 + 8 * (v15 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v9 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        v19 = v42;
        v20 = v43;
        v21 = v59;
        result = v40;
        v22 = v41;
        v24 = v38;
        v23 = v39;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v14) >> 6;
        v19 = v42;
        v20 = v43;
        v21 = v59;
        result = v40;
        v22 = v41;
        v24 = v38;
        v23 = v39;
        do
        {
          if (++v16 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v34 = v16 == v33;
          if (v16 == v33)
            v16 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v9 + 8 * v16);
        }
        while (v35 == -1);
        v18 = __clz(__rbit64(~v35)) + (v16 << 6);
      }
      *(_QWORD *)(v9 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v25 = *(_QWORD *)(v58 + 48) + 96 * v18;
      *(_QWORD *)v25 = v24;
      *(_QWORD *)(v25 + 8) = v23;
      *(_QWORD *)(v25 + 16) = result;
      *(_QWORD *)(v25 + 24) = v22;
      *(_BYTE *)(v25 + 32) = v19;
      *(_OWORD *)(v25 + 40) = v21;
      *(_BYTE *)(v25 + 56) = v20;
      *(_QWORD *)(v25 + 64) = v56;
      *(_QWORD *)(v25 + 72) = v44;
      *(_BYTE *)(v25 + 80) = v57;
      *(_QWORD *)(v25 + 88) = v17;
      v26 = *(_QWORD *)(v58 + 56) + 16 * v18;
      *(_QWORD *)v26 = v54;
      *(_BYTE *)(v26 + 8) = v55;
      ++*(_QWORD *)(v58 + 16);
      v5 = v51;
      v8 = v52;
      v11 = v53;
    }
  }
  result = swift_release();
  *v3 = v58;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::Int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  _QWORD *v71;
  int64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[72];
  uint64_t __dst[45];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Components, _LocaleProtocol>);
  v74 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v75 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v70 = v2;
    v71 = (_QWORD *)(v5 + 64);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v5 + 64);
    v72 = (unint64_t)(v7 + 63) >> 6;
    v10 = v6 + 64;
    result = swift_retain();
    v12 = 0;
    v73 = v5;
    while (1)
    {
      if (v9)
      {
        v24 = __clz(__rbit64(v9));
        v25 = (v9 - 1) & v9;
        v26 = v24 | (v12 << 6);
      }
      else
      {
        v27 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v27 >= v72)
          goto LABEL_34;
        v28 = v71[v27];
        ++v12;
        if (!v28)
        {
          v12 = v27 + 1;
          if (v27 + 1 >= v72)
            goto LABEL_34;
          v28 = v71[v12];
          if (!v28)
          {
            v29 = v27 + 2;
            if (v29 >= v72)
            {
LABEL_34:
              swift_release();
              v3 = v70;
              if ((v74 & 1) != 0)
              {
                v69 = 1 << *(_BYTE *)(v5 + 32);
                if (v69 >= 64)
                  bzero(v71, ((unint64_t)(v69 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v71 = -1 << v69;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v28 = v71[v29];
            if (!v28)
            {
              while (1)
              {
                v12 = v29 + 1;
                if (__OFADD__(v29, 1))
                  goto LABEL_41;
                if (v12 >= v72)
                  goto LABEL_34;
                v28 = v71[v12];
                ++v29;
                if (v28)
                  goto LABEL_21;
              }
            }
            v12 = v29;
          }
        }
LABEL_21:
        v25 = (v28 - 1) & v28;
        v26 = __clz(__rbit64(v28)) + (v12 << 6);
      }
      v77 = v25;
      v78 = v12;
      if ((v74 & 1) != 0)
      {
        v30 = *(_QWORD *)(v5 + 56);
        v31 = *(_QWORD *)(v5 + 48) + 352 * v26;
        v32 = *(_QWORD *)v31;
        v79 = *(_QWORD *)(v31 + 8);
        v130 = *(_QWORD *)(v31 + 24);
        v131 = *(_QWORD *)(v31 + 16);
        v128 = *(_QWORD *)(v31 + 40);
        v129 = *(_QWORD *)(v31 + 32);
        v126 = *(_QWORD *)(v31 + 56);
        v127 = *(_QWORD *)(v31 + 48);
        v124 = *(_QWORD *)(v31 + 72);
        v125 = *(_QWORD *)(v31 + 64);
        v122 = *(_QWORD *)(v31 + 88);
        v123 = *(_QWORD *)(v31 + 80);
        v33 = *(_BYTE *)(v31 + 96);
        v34 = *(_QWORD *)(v31 + 104);
        v35 = *(_QWORD *)(v31 + 112);
        v80 = *(_QWORD *)(v31 + 128);
        v36 = *(_QWORD *)(v31 + 136);
        v37 = *(_QWORD *)(v31 + 144);
        v38 = *(_QWORD *)(v31 + 152);
        v81 = *(_QWORD *)(v31 + 160);
        v40 = *(_QWORD *)(v31 + 168);
        v39 = *(_QWORD *)(v31 + 176);
        v41 = *(_QWORD *)(v31 + 184);
        v42 = *(_QWORD *)(v31 + 192);
        v43 = *(_BYTE *)(v31 + 200);
        v44 = *(_BYTE *)(v31 + 201);
        v45 = *(_OWORD *)(v30 + 16 * v26);
        v46 = *(_QWORD *)(v31 + 120);
        v84 = v45;
        v47 = *(_QWORD *)(v31 + 208);
        v48 = *(_QWORD *)(v31 + 216);
        v49 = *(_QWORD *)(v31 + 224);
        v50 = *(_QWORD *)(v31 + 232);
        v51 = *(_QWORD *)(v31 + 240);
        v52 = *(_QWORD *)(v31 + 248);
        v53 = *(_QWORD *)(v31 + 256);
        v54 = *(_QWORD *)(v31 + 264);
        v55 = *(_QWORD *)(v31 + 280);
        v86 = *(_QWORD *)(v31 + 272);
        v56 = *(_QWORD *)(v31 + 288);
        v57 = *(_QWORD *)(v31 + 296);
        v82 = *(_QWORD *)(v31 + 304);
        v92 = *(_QWORD *)(v31 + 312);
        v83 = *(_QWORD *)(v31 + 320);
        v89 = *(_QWORD *)(v31 + 328);
        v59 = *(_QWORD *)(v31 + 336);
        v58 = *(_QWORD *)(v31 + 344);
        v85 = v59;
      }
      else
      {
        memcpy(__dst, (const void *)(*(_QWORD *)(v5 + 48) + 352 * v26), 0x160uLL);
        v84 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v26);
        v89 = __dst[41];
        v90 = __dst[43];
        v82 = __dst[38];
        v83 = __dst[40];
        v92 = __dst[39];
        v85 = __dst[42];
        v86 = __dst[34];
        v87 = __dst[35];
        v118 = __dst[37];
        v120 = __dst[36];
        v114 = __dst[31];
        v116 = __dst[30];
        v110 = __dst[33];
        v112 = __dst[32];
        v106 = __dst[27];
        v108 = __dst[26];
        v102 = __dst[29];
        v104 = __dst[28];
        v98 = __dst[25];
        v100 = BYTE1(__dst[25]);
        v95 = __dst[22];
        v97 = __dst[21];
        v93 = __dst[23];
        v60 = __dst[24];
        v36 = __dst[17];
        v37 = __dst[18];
        v34 = __dst[13];
        v35 = __dst[14];
        v46 = __dst[15];
        v80 = __dst[16];
        v81 = __dst[20];
        v33 = __dst[12];
        v32 = __dst[0];
        v79 = __dst[1];
        v130 = __dst[3];
        v131 = __dst[2];
        v128 = __dst[5];
        v129 = __dst[4];
        v126 = __dst[7];
        v127 = __dst[6];
        v124 = __dst[9];
        v125 = __dst[8];
        v122 = __dst[11];
        v123 = __dst[10];
        outlined retain of Locale.Components(__dst);
        swift_unknownObjectRetain();
        v38 = __dst[19];
        v57 = v118;
        v56 = v120;
        v55 = v87;
        v58 = v90;
        v48 = v106;
        v47 = v108;
        v43 = v98;
        v44 = v100;
        v41 = v93;
        v39 = v95;
        v50 = v102;
        v49 = v104;
        v42 = v60;
        v40 = v97;
        v54 = v110;
        v53 = v112;
        v52 = v114;
        v51 = v116;
      }
      __dst[0] = v32;
      __dst[1] = v79;
      __dst[2] = v131;
      __dst[3] = v130;
      __dst[4] = v129;
      __dst[5] = v128;
      __dst[6] = v127;
      __dst[7] = v126;
      __dst[8] = v125;
      __dst[9] = v124;
      __dst[10] = v123;
      __dst[11] = v122;
      LOBYTE(__dst[12]) = v33;
      __dst[13] = v34;
      __dst[14] = v35;
      __dst[15] = v46;
      __dst[16] = v80;
      v76 = v42;
      __dst[17] = v36;
      __dst[18] = v37;
      __dst[19] = v38;
      __dst[20] = v81;
      v96 = v39;
      __dst[21] = v40;
      __dst[22] = v39;
      v94 = v41;
      __dst[23] = v41;
      __dst[24] = v42;
      v99 = v43;
      v101 = v44;
      LOBYTE(__dst[25]) = v43;
      BYTE1(__dst[25]) = v44;
      v107 = v48;
      v109 = v47;
      __dst[26] = v47;
      __dst[27] = v48;
      v103 = v50;
      v105 = v49;
      __dst[28] = v49;
      __dst[29] = v50;
      v115 = v52;
      v117 = v51;
      __dst[30] = v51;
      __dst[31] = v52;
      v111 = v54;
      v113 = v53;
      __dst[32] = v53;
      __dst[33] = v54;
      __dst[34] = v86;
      v88 = v55;
      __dst[35] = v55;
      v119 = v57;
      v121 = v56;
      __dst[36] = v56;
      __dst[37] = v57;
      __dst[38] = v82;
      __dst[39] = v92;
      __dst[40] = v83;
      __dst[41] = v89;
      __dst[42] = v85;
      v91 = v58;
      __dst[43] = v58;
      Hasher.init(_seed:)();
      Locale.Components.hash(into:)((uint64_t)v132);
      v61 = Hasher._finalize()();
      v62 = -1 << *(_BYTE *)(v75 + 32);
      v63 = v61 & ~v62;
      v64 = v63 >> 6;
      if (((-1 << v63) & ~*(_QWORD *)(v10 + 8 * (v63 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v63) & ~*(_QWORD *)(v10 + 8 * (v63 >> 6)))) | v63 & 0x7FFFFFFFFFFFFFC0;
        v15 = v130;
        v14 = v131;
        result = v128;
        v16 = v129;
        v18 = v126;
        v17 = v127;
        v20 = v124;
        v19 = v125;
        v22 = v122;
        v21 = v123;
      }
      else
      {
        v65 = 0;
        v66 = (unint64_t)(63 - v62) >> 6;
        v15 = v130;
        v14 = v131;
        result = v128;
        v16 = v129;
        v18 = v126;
        v17 = v127;
        v20 = v124;
        v19 = v125;
        v22 = v122;
        v21 = v123;
        do
        {
          if (++v64 == v66 && (v65 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v67 = v64 == v66;
          if (v64 == v66)
            v64 = 0;
          v65 |= v67;
          v68 = *(_QWORD *)(v10 + 8 * v64);
        }
        while (v68 == -1);
        v13 = __clz(__rbit64(~v68)) + (v64 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v23 = *(_QWORD *)(v75 + 48) + 352 * v13;
      *(_QWORD *)v23 = v32;
      *(_QWORD *)(v23 + 8) = v79;
      *(_QWORD *)(v23 + 16) = v14;
      *(_QWORD *)(v23 + 24) = v15;
      *(_QWORD *)(v23 + 32) = v16;
      *(_QWORD *)(v23 + 40) = result;
      *(_QWORD *)(v23 + 48) = v17;
      *(_QWORD *)(v23 + 56) = v18;
      *(_QWORD *)(v23 + 64) = v19;
      *(_QWORD *)(v23 + 72) = v20;
      *(_QWORD *)(v23 + 80) = v21;
      *(_QWORD *)(v23 + 88) = v22;
      *(_BYTE *)(v23 + 96) = v33;
      *(_QWORD *)(v23 + 104) = v34;
      *(_QWORD *)(v23 + 112) = v35;
      *(_QWORD *)(v23 + 120) = v46;
      *(_QWORD *)(v23 + 128) = v80;
      *(_QWORD *)(v23 + 136) = v36;
      *(_QWORD *)(v23 + 144) = v37;
      *(_QWORD *)(v23 + 152) = v38;
      *(_QWORD *)(v23 + 160) = v81;
      *(_QWORD *)(v23 + 168) = v40;
      *(_QWORD *)(v23 + 176) = v96;
      *(_QWORD *)(v23 + 184) = v94;
      *(_QWORD *)(v23 + 192) = v76;
      *(_BYTE *)(v23 + 200) = v99;
      *(_BYTE *)(v23 + 201) = v101;
      *(_QWORD *)(v23 + 208) = v109;
      *(_QWORD *)(v23 + 216) = v107;
      *(_QWORD *)(v23 + 224) = v105;
      *(_QWORD *)(v23 + 232) = v103;
      *(_QWORD *)(v23 + 240) = v117;
      *(_QWORD *)(v23 + 248) = v115;
      *(_QWORD *)(v23 + 256) = v113;
      *(_QWORD *)(v23 + 264) = v111;
      *(_QWORD *)(v23 + 272) = v86;
      *(_QWORD *)(v23 + 280) = v88;
      *(_QWORD *)(v23 + 288) = v121;
      *(_QWORD *)(v23 + 296) = v119;
      *(_QWORD *)(v23 + 304) = v82;
      *(_QWORD *)(v23 + 312) = v92;
      *(_QWORD *)(v23 + 320) = v83;
      *(_QWORD *)(v23 + 328) = v89;
      *(_QWORD *)(v23 + 336) = v85;
      *(_QWORD *)(v23 + 344) = v91;
      *(_OWORD *)(*(_QWORD *)(v75 + 56) + 16 * v13) = v84;
      ++*(_QWORD *)(v75 + 16);
      v5 = v73;
      v9 = v77;
      v12 = v78;
    }
  }
  result = swift_release();
  *v3 = v75;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, String?>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v29 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v12)
          goto LABEL_33;
        v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_33;
          v21 = v29[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v29 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v21 = v29[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v30 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v27;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

_QWORD *_JSONKeyedEncodingContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, __n128);
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73[5];
  uint64_t v74;

  v71 = a4;
  v72 = a5;
  v70 = a1;
  v8 = *(_QWORD *)(a3 + 16);
  v69 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v69 - 8);
  v10 = MEMORY[0x1E0C80A78](v69);
  v12 = (char *)&v66 - v11;
  v67 = a2;
  v68 = v5;
  v13 = *(_QWORD *)(*v5 + 144);
  v14 = *(_QWORD *)(v8 - 8);
  v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v15((char *)&v66 - v11, a2, v8, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v8);
  v16 = *(__int128 **)(a3 + 24);
  swift_retain();
  v17 = v74;
  v18 = __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(v70, v13, (uint64_t)v12, v71, v8, v72, v16);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v69);
    return (_QWORD *)swift_release();
  }
  v71 = 0;
  v72 = (_QWORD *)v9;
  v21 = v68;
  v20 = v69;
  v22 = v67;
  if (v18)
  {
    v74 = v18;
  }
  else
  {
    type metadata accessor for JSONReference();
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v23 + 24) = 0;
    v74 = v23;
    *(_BYTE *)(v23 + 32) = 4;
  }
  ((void (*)(char *, uint64_t))v72[1])(v12, v20);
  swift_release();
  v24 = v21;
  v25 = v21[1];
  v26 = *v24;
  v27 = v24[2];
  v73[3] = v8;
  v73[4] = (uint64_t)v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v73);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v15)(boxed_opaque_existential_1, v22, v8);
  v29 = _JSONKeyedEncodingContainer._converted(_:)(v73, v26, v25, v27);
  v31 = v30;
  result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  if (*(_BYTE *)(v25 + 32) != 4)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v32 = *(_QWORD *)(v25 + 16);
  *(_QWORD *)(v25 + 16) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_BYTE *)(v25 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v32;
  v34 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v31);
  v36 = *(_QWORD *)(v32 + 16);
  v37 = (v35 & 1) == 0;
  v38 = __OFADD__(v36, v37);
  v39 = v36 + v37;
  if (v38)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v22) = v35;
    if (*(_QWORD *)(v32 + 24) < v39)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
      v40 = v73[0];
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v31);
      if ((v22 & 1) == (v41 & 1))
        goto LABEL_13;
      v34 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v40 = v32;
LABEL_13:
      if ((v22 & 1) != 0)
      {
LABEL_14:
        v42 = *(_QWORD *)(v40 + 56);
        v43 = 8 * v34;
        swift_release();
        *(_QWORD *)(v42 + v43) = v74;
LABEL_52:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v63 = *(_QWORD *)(v25 + 16);
        v64 = *(_QWORD *)(v25 + 24);
        *(_QWORD *)(v25 + 16) = v40;
        *(_QWORD *)(v25 + 24) = 0;
        v65 = *(_BYTE *)(v25 + 32);
        *(_BYTE *)(v25 + 32) = 4;
        outlined consume of JSONReference.Backing(v63, v64, v65);
        swift_bridgeObjectRelease();
        return (_QWORD *)swift_release();
      }
LABEL_51:
      specialized _NativeDictionary._insert(at:key:value:)(v34, v29, v31, v74, v40);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }
  v69 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v44 = static _DictionaryStorage.copy(original:)();
  v40 = v44;
  v45 = *(_QWORD *)(v32 + 16);
  if (!v45)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    v34 = v69;
    if ((v22 & 1) != 0)
      goto LABEL_14;
    goto LABEL_51;
  }
  result = (_QWORD *)(v44 + 64);
  v46 = 1 << *(_BYTE *)(v40 + 32);
  v72 = (_QWORD *)(v32 + 64);
  v47 = (unint64_t)(v46 + 63) >> 6;
  if (v40 != v32 || result >= &v72[v47])
  {
    result = memmove(result, v72, 8 * v47);
    v45 = *(_QWORD *)(v32 + 16);
  }
  v48 = 0;
  *(_QWORD *)(v40 + 16) = v45;
  v49 = 1 << *(_BYTE *)(v32 + 32);
  v50 = -1;
  if (v49 < 64)
    v50 = ~(-1 << v49);
  v51 = v50 & *(_QWORD *)(v32 + 64);
  v70 = (unint64_t)(v49 + 63) >> 6;
  while (1)
  {
    if (v51)
    {
      v52 = __clz(__rbit64(v51));
      v51 &= v51 - 1;
      v53 = v52 | (v48 << 6);
      goto LABEL_24;
    }
    v60 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v60 >= v70)
      goto LABEL_50;
    v61 = v72[v60];
    ++v48;
    if (!v61)
    {
      v48 = v60 + 1;
      if (v60 + 1 >= v70)
        goto LABEL_50;
      v61 = v72[v48];
      if (!v61)
      {
        v48 = v60 + 2;
        if (v60 + 2 >= v70)
          goto LABEL_50;
        v61 = v72[v48];
        if (!v61)
        {
          v48 = v60 + 3;
          if (v60 + 3 >= v70)
            goto LABEL_50;
          v61 = v72[v48];
          if (!v61)
          {
            v48 = v60 + 4;
            if (v60 + 4 >= v70)
              goto LABEL_50;
            v61 = v72[v48];
            if (!v61)
            {
              v48 = v60 + 5;
              if (v60 + 5 >= v70)
                goto LABEL_50;
              v61 = v72[v48];
              if (!v61)
              {
                v48 = v60 + 6;
                if (v60 + 6 >= v70)
                  goto LABEL_50;
                v61 = v72[v48];
                if (!v61)
                {
                  v48 = v60 + 7;
                  if (v60 + 7 >= v70)
                    goto LABEL_50;
                  v61 = v72[v48];
                  if (!v61)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    v51 = (v61 - 1) & v61;
    v53 = __clz(__rbit64(v61)) + (v48 << 6);
LABEL_24:
    v54 = 16 * v53;
    v55 = (_QWORD *)(*(_QWORD *)(v32 + 48) + 16 * v53);
    v56 = v55[1];
    v57 = 8 * v53;
    v58 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + v57);
    v59 = (_QWORD *)(*(_QWORD *)(v40 + 48) + v54);
    *v59 = *v55;
    v59[1] = v56;
    *(_QWORD *)(*(_QWORD *)(v40 + 56) + v57) = v58;
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_retain();
  }
  v62 = v60 + 8;
  if (v62 >= v70)
    goto LABEL_50;
  v61 = v72[v62];
  if (v61)
  {
    v48 = v62;
    goto LABEL_49;
  }
  while (1)
  {
    v48 = v62 + 1;
    if (__OFADD__(v62, 1))
      break;
    if (v48 >= v70)
      goto LABEL_50;
    v61 = v72[v48];
    ++v62;
    if (v61)
      goto LABEL_49;
  }
LABEL_56:
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = a5[7] + 72 * result;
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(a4 + 64);
  v7 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v6 + 48) = v7;
  v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v8;
  v9 = a5[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a5[2] = v11;
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = a5[7] + 40 * result;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a4 + 32);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t _JSONKeyedEncodingContainer._converted(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void (*v4)(_QWORD *__return_ptr, uint64_t);
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  __int128 v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD v38[7];

  v38[5] = *MEMORY[0x1E0C80C00];
  v4 = *(void (**)(_QWORD *__return_ptr, uint64_t))(a2 + 120);
  if (v4)
  {
    if (v4 == (void (*)(_QWORD *__return_ptr, uint64_t))1)
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      v5 = dispatch thunk of CodingKey.stringValue.getter();
      v7 = specialized static JSONEncoder.KeyEncodingStrategy._convertToSnakeCase(_:)(v5, v6);
      swift_bridgeObjectRelease();
      return v7;
    }
    else
    {
      v34 = a4;
      v37 = *(_QWORD *)(a2 + 128);
      v32 = *(_OWORD *)(a1 + 3);
      v9 = v32;
      v10 = (char *)__swift_project_boxed_opaque_existential_1(a1, v32);
      v11 = type metadata accessor for Optional();
      v36 = &v30;
      v12 = *(_QWORD **)(v11 - 8);
      v13 = v12[8];
      MEMORY[0x1E0C80A78](v11);
      v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
      v15 = (char *)&v30 - v14;
      v16 = *(_QWORD *)(v9 - 8);
      v31 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
      v31((char *)&v30 - v14, v10, v9);
      v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))((char *)&v30 - v14, 0, 1, v9);
      v33 = &v30;
      v18 = MEMORY[0x1E0C80A78](v17);
      v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x1E0C80A78](v18);
      v21 = (char *)&v30 - v14;
      v22 = (void (*)(char *, char *, uint64_t))v12[2];
      v35 = v11;
      v22((char *)&v30 - v14, (char *)&v30 - v14, v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))((char *)&v30 - v14, 1, v9) == 1)
      {
        v23 = (void (*)(char *, uint64_t))v12[1];
        swift_retain();
        v24 = v35;
        v23(v21, v35);
        v25 = _CodingPathNode.path.getter(v34);
        v23(v15, v24);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, (char *)&v30 - v14, v9);
        swift_retain();
        v26 = _CodingPathNode.path.getter(v34);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18205C850;
        *(_OWORD *)(inited + 56) = v32;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v31((char *)boxed_opaque_existential_1, v20, v9);
        v38[0] = v26;
        specialized Array.append<A>(contentsOf:)(inited);
        v25 = v38[0];
        ((void (*)(char *, uint64_t))v12[1])((char *)&v30 - v14, v35);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v9);
      }
      v4(v38, v25);
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(v38, v38[3]);
      v29 = dispatch thunk of CodingKey.stringValue.getter();
      outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      return v29;
    }
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    return dispatch thunk of CodingKey.stringValue.getter();
  }
}

uint64_t destroy for AttributedString._AttributeValue(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  if (*(_QWORD *)(a1 + 48) != 1)
    swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONWriter.serializeObject(_:depth:)(Swift::OpaquePointer _, Swift::Int depth)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  void *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;

  if (depth > 511)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 1;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = 0;
    *(_BYTE *)(v17 + 48) = 2;
    swift_willThrow();
    return;
  }
  v44 = 123;
  v45 = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(&v44);
  v5 = v3;
  swift_bridgeObjectRelease();
  if (*((_BYTE *)v2 + 8) == 1)
  {
    v44 = 10;
    v45 = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(&v44);
    swift_bridgeObjectRelease();
    if (__OFADD__(*v2, 1))
      goto LABEL_71;
    ++*v2;
    if (*((_QWORD *)_._rawValue + 2))
      JSONWriter.writeIndent()();
  }
  if (*((_BYTE *)v2 + 9) == 1)
  {
    if (one-time initialization token for compatibility1 != -1)
      goto LABEL_72;
    goto LABEL_8;
  }
  v40 = (char *)_._rawValue + 64;
  v18 = 1;
  v19 = 1 << *((_BYTE *)_._rawValue + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *((_QWORD *)_._rawValue + 8);
  v41 = (unint64_t)(v19 + 63) >> 6;
  swift_bridgeObjectRetain();
  v22 = 0;
  while (v21)
  {
    v23 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    v24 = v23 | (v22 << 6);
LABEL_41:
    v28 = (uint64_t *)(*((_QWORD *)_._rawValue + 6) + 16 * v24);
    v30 = *v28;
    v29 = v28[1];
    v31 = *(_QWORD *)(*((_QWORD *)_._rawValue + 7) + 8 * v24);
    if ((v18 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else if ((v2[1] & 1) != 0)
    {
      v44 = 2604;
      v45 = 0xE200000000000000;
      swift_bridgeObjectRetain();
      swift_retain();
      specialized String.withUTF8<A>(_:)(&v44);
      swift_bridgeObjectRelease();
      JSONWriter.writeIndent()();
    }
    else
    {
      v44 = 44;
      v45 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_retain();
      specialized String.withUTF8<A>(_:)(&v44);
      swift_bridgeObjectRelease();
    }
    v44 = 34;
    v45 = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(&v44);
    swift_bridgeObjectRelease();
    v44 = v30;
    v45 = v29;
    swift_bridgeObjectRetain();
    specialized String.withUTF8<A>(_:)(&v44, (uint64_t)v2);
    swift_bridgeObjectRelease();
    v42 = 34;
    v43 = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(&v42);
    swift_bridgeObjectRelease();
    if (*((_BYTE *)v2 + 8) == 1)
    {
      v44 = 2112032;
      v45 = 0xE300000000000000;
    }
    else
    {
      v44 = 58;
      v45 = 0xE100000000000000;
    }
    specialized String.withUTF8<A>(_:)(&v44);
    swift_bridgeObjectRelease();
    JSONWriter.serializeJSON(_:depth:)(v31);
    swift_bridgeObjectRelease();
    swift_release();
    v18 = 0;
    if (v5)
    {
      swift_release();
      return;
    }
  }
  if (__OFADD__(v22++, 1))
  {
    __break(1u);
    goto LABEL_70;
  }
  if (v22 >= v41)
    goto LABEL_65;
  v26 = *(_QWORD *)&v40[8 * v22];
  if (v26)
  {
LABEL_40:
    v21 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v22 << 6);
    goto LABEL_41;
  }
  v27 = v22 + 1;
  if (v22 + 1 >= v41)
    goto LABEL_65;
  v26 = *(_QWORD *)&v40[8 * v27];
  if (v26)
    goto LABEL_39;
  v27 = v22 + 2;
  if (v22 + 2 >= v41)
    goto LABEL_65;
  v26 = *(_QWORD *)&v40[8 * v27];
  if (v26)
    goto LABEL_39;
  v27 = v22 + 3;
  if (v22 + 3 >= v41)
    goto LABEL_65;
  v26 = *(_QWORD *)&v40[8 * v27];
  if (v26)
  {
LABEL_39:
    v22 = v27;
    goto LABEL_40;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v41)
      goto LABEL_65;
    v26 = *(_QWORD *)&v40[8 * v22];
    ++v27;
    if (v26)
      goto LABEL_40;
  }
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  swift_once();
LABEL_8:
  if (static JSONEncoder.compatibility1 == 1)
  {
    v44 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS10Foundation13JSONReferenceCG_So8NSStringC3key_AH5valuets5NeverOTg5061_s10Foundation10JSONWriterV15serializeObject_5depthySDySSAA13e11CG_SitKFSo8F31C3key_AG5valuetSSAK_AgLt_tXEfU_Tf1cn_n((uint64_t)_._rawValue);
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(&v44, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    if (!v5)
    {
      swift_bridgeObjectRelease();
      v6 = *(_QWORD *)(v44 + 16);
      if (v6)
      {
        v7 = (uint64_t *)(v44 + 40);
        v8 = 1;
        do
        {
          v9 = (void *)*(v7 - 1);
          v10 = *v7;
          v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
          v13 = v12;
          if ((v8 & 1) != 0)
          {
            v14 = v9;
            swift_retain();
          }
          else if ((v2[1] & 1) != 0)
          {
            v44 = 2604;
            v45 = 0xE200000000000000;
            v15 = v9;
            swift_retain();
            specialized String.withUTF8<A>(_:)(&v44);
            swift_bridgeObjectRelease();
            JSONWriter.writeIndent()();
          }
          else
          {
            v44 = 44;
            v45 = 0xE100000000000000;
            v16 = v9;
            swift_retain();
            specialized String.withUTF8<A>(_:)(&v44);
            swift_bridgeObjectRelease();
          }
          v44 = 34;
          v45 = 0xE100000000000000;
          specialized String.withUTF8<A>(_:)(&v44);
          swift_bridgeObjectRelease();
          v44 = (uint64_t)v11;
          v45 = v13;
          swift_bridgeObjectRetain();
          specialized String.withUTF8<A>(_:)(&v44, (uint64_t)v2);
          swift_bridgeObjectRelease();
          v42 = 34;
          v43 = 0xE100000000000000;
          specialized String.withUTF8<A>(_:)(&v42);
          swift_bridgeObjectRelease();
          if (*((_BYTE *)v2 + 8) == 1)
          {
            v44 = 2112032;
            v45 = 0xE300000000000000;
          }
          else
          {
            v44 = 58;
            v45 = 0xE100000000000000;
          }
          specialized String.withUTF8<A>(_:)(&v44);
          swift_bridgeObjectRelease();
          JSONWriter.serializeJSON(_:depth:)(v10);
          swift_release();

          swift_bridgeObjectRelease();
          v8 = 0;
          v7 += 2;
          --v6;
        }
        while (v6);
      }
      goto LABEL_65;
    }
LABEL_74:
    swift_release();
    __break(1u);
  }
  else
  {
    v32 = swift_bridgeObjectRetain();
    v33 = specialized _copyCollectionToContiguousArray<A>(_:)(v32);
    swift_bridgeObjectRelease();
    v44 = (uint64_t)v33;
    specialized MutableCollection<>.sort(by:)(&v44, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    if (v5)
      goto LABEL_74;
    v34 = *(_QWORD *)(v44 + 16);
    if (v34)
    {
      v35 = (uint64_t *)(v44 + 48);
      v36 = 1;
      do
      {
        v37 = *(v35 - 2);
        v38 = *(v35 - 1);
        v39 = *v35;
        if ((v36 & 1) != 0)
        {
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else if ((v2[1] & 1) != 0)
        {
          v44 = 2604;
          v45 = 0xE200000000000000;
          swift_bridgeObjectRetain();
          swift_retain();
          specialized String.withUTF8<A>(_:)(&v44);
          swift_bridgeObjectRelease();
          JSONWriter.writeIndent()();
        }
        else
        {
          v44 = 44;
          v45 = 0xE100000000000000;
          swift_bridgeObjectRetain();
          swift_retain();
          specialized String.withUTF8<A>(_:)(&v44);
          swift_bridgeObjectRelease();
        }
        v44 = 34;
        v45 = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)(&v44);
        swift_bridgeObjectRelease();
        v44 = v37;
        v45 = v38;
        swift_bridgeObjectRetain();
        specialized String.withUTF8<A>(_:)(&v44, (uint64_t)v2);
        swift_bridgeObjectRelease();
        v42 = 34;
        v43 = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)(&v42);
        swift_bridgeObjectRelease();
        if (*((_BYTE *)v2 + 8) == 1)
        {
          v44 = 2112032;
          v45 = 0xE300000000000000;
        }
        else
        {
          v44 = 58;
          v45 = 0xE100000000000000;
        }
        specialized String.withUTF8<A>(_:)(&v44);
        swift_bridgeObjectRelease();
        JSONWriter.serializeJSON(_:depth:)(v39);
        swift_release();
        swift_bridgeObjectRelease();
        v36 = 0;
        v35 += 3;
        --v34;
      }
      while (v34);
    }
LABEL_65:
    swift_release();
    if (*((_BYTE *)v2 + 8) == 1)
    {
      v44 = 10;
      v45 = 0xE100000000000000;
      specialized String.withUTF8<A>(_:)(&v44);
      swift_bridgeObjectRelease();
      if (__OFSUB__(*v2, 1))
      {
        __break(1u);
        goto LABEL_74;
      }
      --*v2;
      JSONWriter.writeIndent()();
    }
    v44 = 125;
    v45 = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(&v44);
    swift_bridgeObjectRelease();
  }
}

void specialized String.withUTF8<A>(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = a1[1];
  if ((v2 & 0x1000000000000000) == 0)
  {
    if ((v2 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_7:
    if ((v2 & 0xF00000000000000) == 0)
      return;
    goto LABEL_8;
  }
  v1 = static String._copying(_:)();
  v5 = v4;
  swift_bridgeObjectRelease();
  *a1 = v1;
  a1[1] = v5;
  v2 = v5;
  if ((v5 & 0x2000000000000000) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0)
  {
    if ((v1 & 0xFFFFFFFFFFFFLL) == 0)
      return;
  }
  else
  {
    _StringObject.sharedUTF8.getter();
    if (!v6)
      return;
  }
LABEL_8:
  Data._Representation.append(contentsOf:)();
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v1 = *a1;
  v2 = a1[1];
  if ((v2 & 0x1000000000000000) == 0)
  {
    if ((v2 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v4 = HIBYTE(v2) & 0xF;
    v8[0] = v1;
    v8[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    v3 = v8;
    goto LABEL_7;
  }
  v1 = static String._copying(_:)();
  v7 = v6;
  swift_bridgeObjectRelease();
  *a1 = v1;
  a1[1] = v7;
  v2 = v7;
  if ((v7 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0)
  {
    v3 = (_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v3 = (_QWORD *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)v3, v4);
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Swift::Int64 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  Swift::Int64 v10;
  _QWORD v11[2];

  v1 = *a1;
  v2 = a1[1];
  if ((v2 & 0x1000000000000000) != 0)
  {
    v1 = static String._copying(_:)();
    v9 = v8;
    swift_bridgeObjectRelease();
    *a1 = v1;
    a1[1] = v9;
    v2 = v9;
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_7:
    v11[0] = v1;
    v11[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    _BPlistEncodingFormat.Writer.append(_:count:)(6, HIBYTE(v2) & 0xF);
    v5 = v11;
    v6 = HIBYTE(v2) & 0xF;
    goto LABEL_8;
  }
  if ((v2 & 0x2000000000000000) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0)
  {
    v3 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v3 = _StringObject.sharedUTF8.getter();
    v4 = v10;
  }
  _BPlistEncodingFormat.Writer.append(_:count:)(6, v4);
  v5 = (_QWORD *)v3;
  v6 = v4;
LABEL_8:
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)v5, v6);
}

void Data._Representation.append(contentsOf:)()
{
  __asm { BR              X12 }
}

void sub_18181DEEC(unint64_t a1@<X8>, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v34 = v17;
  LOWORD(v35) = a1;
  BYTE2(v35) = BYTE2(a1);
  v21 = v20 - (_QWORD)v19;
  v22 = HIDWORD(a1);
  HIBYTE(v35) = BYTE3(a1);
  v23 = a1 >> 40;
  v36 = BYTE4(a1);
  if (v19)
    v24 = v20 - (_QWORD)v19;
  else
    v24 = 0;
  v25 = BYTE6(a1);
  v37 = BYTE5(a1);
  v26 = __OFADD__(BYTE6(a1), v24);
  v27 = BYTE6(a1) + v24;
  if (v26)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v27 <= 14)
  {
    v31 = HIWORD(a1);
    if (!v19 || (const void *)v20 == v19)
    {
LABEL_13:
      v29 = v34;
      v30 = v35 | ((unint64_t)v22 << 32) | ((unint64_t)v23 << 40) | ((unint64_t)v31 << 48);
      goto LABEL_14;
    }
    memcpy((char *)&v34 + BYTE6(a1), v19, v20 - (_QWORD)v19);
    if (v21 <= 255)
    {
      LODWORD(v31) = v31 + v21;
      if (((v31 >> 8) & 1) != 0)
        __break(1u);
      LOBYTE(v22) = v36;
      LOBYTE(v23) = v37;
      goto LABEL_13;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_19:
    JUMPOUT(0x18181E220);
  }
  v38 = v17;
  LOWORD(v39) = a1;
  BYTE2(v39) = BYTE2(a1);
  BYTE3(v39) = BYTE3(a1);
  BYTE4(v39) = BYTE4(a1);
  BYTE5(v39) = BYTE5(a1);
  if ((unint64_t)v27 > 0x7FFFFFFE)
  {
    type metadata accessor for __DataStorage();
    v32 = swift_allocObject();
    __DataStorage.init(bytes:length:)((unint64_t)&v38, v25);
    type metadata accessor for Data.RangeReference();
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = 0;
    *(_QWORD *)(v33 + 24) = v25;
    v38 = v33;
    v39 = v32;
    Data.LargeSlice.append(contentsOf:)(v19, v20);
    v29 = v38;
    v30 = v39 | 0x8000000000000000;
  }
  else
  {
    type metadata accessor for __DataStorage();
    v28 = swift_allocObject();
    __DataStorage.init(bytes:length:)((unint64_t)&v38, v25);
    LODWORD(v38) = 0;
    HIDWORD(v38) = v25;
    v39 = v28;
    Data.InlineSlice.append(contentsOf:)(v19, v20);
    v29 = v38;
    v30 = v39 | 0x4000000000000000;
  }
LABEL_14:
  *v18 = v29;
  v18[1] = v30;
}

void Data.InlineSlice.append(contentsOf:)(const void *a1, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  size_t v13;
  uint64_t v14;

  v3 = (int *)v2;
  Data.InlineSlice.ensureUniqueReference()();
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(_QWORD *)(v6 + 40);
  v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v10 = *v3;
  v11 = v3[1];
  if ((int)v11 < *v3 || v9 < v11)
    goto LABEL_15;
  if (a1)
    v13 = a2 - (_QWORD)a1;
  else
    v13 = 0;
  __DataStorage.replaceBytes(in:with:length:)(v3[1], v9, a1, v13);
  v14 = v11 + v13;
  if (__OFADD__(v11, v13))
    goto LABEL_16;
  if (v14 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v14 > 0x7FFFFFFF)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v10 <= (int)v14)
  {
    *v3 = v10;
    v3[1] = v14;
    return;
  }
LABEL_19:
  __break(1u);
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
  int *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *v0;
    v2 = v1[1];
    if ((int)v2 < (int)v3)
    {
      __break(1u);
    }
    else
    {
      v4 = *((_QWORD *)v1 + 1);
      v5 = *(_QWORD *)(v4 + 16);
      if (!v5)
      {
        v9 = 0;
        goto LABEL_7;
      }
      v6 = *(_QWORD *)(v4 + 40);
      v7 = __OFSUB__(v3, v6);
      v8 = v3 - v6;
      if (!v7)
      {
        v9 = v5 + v8;
LABEL_7:
        v10 = v2 - v3;
        type metadata accessor for __DataStorage();
        v11 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v9, v10, 1, 0, 0, v3);
        *((_QWORD *)v1 + 1) = v11;
        swift_release();
        return;
      }
    }
    __break(1u);
  }
}

void __DataStorage.replaceBytes(in:with:length:)(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  Swift::Int v13;
  uint64_t v15;
  Swift::Int v16;
  void *v17;

  v5 = v4[5];
  v6 = a1 - v5;
  if (__OFSUB__(a1, v5))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = __OFSUB__(a2, v5);
  v8 = a2 - v5;
  if (v7)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v8 - v6;
  if (v8 < v6)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (__OFSUB__(v8, v6))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v10 = v4[3];
  v11 = v10 - v9;
  if (__OFSUB__(v10, v9))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v13 = v11 + a4;
  if (__OFADD__(v11, a4))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (__OFSUB__(v13, v10))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v10 >= v13)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
  }
  else
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v11 + a4, 0);
    v4[3] = v13;
  }
  v15 = v4[2];
  if (!v15)
    goto LABEL_32;
  if (v13 == v10)
    goto LABEL_16;
  v16 = v10 - v6;
  if (__OFSUB__(v10, v6))
    goto LABEL_30;
  if (__OFSUB__(v16, v9))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    return;
  }
  memmove((void *)(v15 + v6 + a4), (const void *)(v15 + v6 + v9), v16 - v9);
LABEL_16:
  if (a4)
  {
    v17 = (void *)(v15 + v6);
    if (!a3)
    {
      bzero(v17, a4);
      if (v13 < v10)
        goto LABEL_20;
      return;
    }
    memmove(v17, a3, a4);
  }
  if (v13 < v10)
LABEL_20:
    __DataStorage.setLength(_:)(v13);
}

{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
  }
  else if (v5 >= a1)
  {
    __DataStorage.replaceBytes(in:with:length:)(a1, v5, a3, a4);
    return;
  }
  __break(1u);
}

Swift::Void __swiftcall __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(Swift::Int growingTo, Swift::Bool clear)
{
  Swift::Int *v2;
  _QWORD *object;
  Swift::Int v4;
  BOOL v5;
  char v8;
  Swift::Int v9;
  BOOL v10;
  int64_t v11;
  size_t v12;
  int64_t v13;
  BOOL v14;
  Swift::Int v15;
  _BOOL4 v16;
  size_t v18;
  void *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  size_t v25;
  void *v26;
  char *v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t *v35;
  void (*v36)(unint64_t *, uint64_t);
  void (**v37)(uint64_t, uint64_t);
  char *v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  void *v42;
  int64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  object = v2;
  v4 = v2[4];
  if (v4)
    v5 = v4 < growingTo;
  else
    v5 = 1;
  if (!v5)
    return;
  if (growingTo)
  {
    if (!v4)
    {
      v25 = malloc_good_size(growingTo);
      LODWORD(v62) = 0;
      _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
      if (clear)
        v26 = malloc_type_calloc(1uLL, v25, (unint64_t)WORD1(v62) << 48);
      else
        v26 = malloc_type_malloc(v25, (unint64_t)WORD1(v62) << 48);
      v28 = v26;
      v29 = object[2];
      if (v29)
      {
        if (!v26)
        {
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
          goto LABEL_104;
        }
        specialized static __DataStorage.move(_:_:_:)((vm_address_t)v26, v29, object[3]);
        v30 = object[2];
        if (v30)
        {
          v31 = (void (*)(uint64_t, uint64_t))object[6];
          if (v31)
          {
            v32 = object[3];
            swift_retain();
            v31(v30, v32);
            outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v31);
          }
          else
          {
            free((void *)object[2]);
          }
        }
      }
      v51 = object[6];
      object[6] = 0;
      object[7] = 0;
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v51);
      object[3] = growingTo;
      object[4] = v25;
      object[2] = v28;
      v52 = 1;
LABEL_94:
      *((_BYTE *)object + 64) = v52;
      return;
    }
    if (one-time initialization token for vmOpsThreshold != -1)
      swift_once();
    v8 = 1;
    if (static __DataStorage.vmOpsThreshold <= growingTo)
      v8 = 2;
    v9 = growingTo >> v8;
    if (__OFSUB__(0x7FFFFFFFFFFFFFFFLL, v9))
    {
      __break(1u);
    }
    else
    {
      if (0x7FFFFFFFFFFFFFFFLL - v9 < growingTo)
        v9 = 0;
      v10 = __OFADD__(growingTo, v9);
      v11 = growingTo + v9;
      if (!v10)
      {
        if (v11 <= v4)
          v12 = v4;
        else
          v12 = v11;
        v13 = malloc_good_size(v12);
        v14 = clear && v13 > 0x20000;
        v15 = object[3];
        if (!object[2])
        {
          LODWORD(v62) = 0;
          _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
          if (clear && v13 > 0x20000)
          {
            v27 = (char *)malloc_type_calloc(1uLL, v13, (unint64_t)WORD1(v62) << 48);
            if (v27)
              goto LABEL_84;
          }
          else
          {
            v27 = (char *)malloc_type_malloc(v13, (unint64_t)WORD1(v62) << 48);
            if (v27)
              goto LABEL_84;
          }
          LODWORD(v62) = 0;
          _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
          if (clear && growingTo > 0x20000)
          {
            v14 = 1;
            v27 = (char *)malloc_type_calloc(1uLL, growingTo, (unint64_t)WORD1(v62) << 48);
            goto LABEL_80;
          }
          v50 = (char *)malloc_type_malloc(growingTo, (unint64_t)WORD1(v62) << 48);
LABEL_79:
          v27 = v50;
          v14 = 0;
LABEL_80:
          if (!v27)
          {
            v62 = 0;
            v63 = 0xE000000000000000;
            _StringGuts.grow(_:)(41);
            swift_bridgeObjectRelease();
            v62 = 0xD000000000000026;
            v63 = 0x800000018230EBB0;
            v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            object = v54._object;
            String.append(_:)(v54);
            swift_bridgeObjectRelease();
            v35 = &v62;
            v55._countAndFlagsBits = 41;
            v55._object = (void *)0xE100000000000000;
            String.append(_:)(v55);
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            goto LABEL_82;
          }
LABEL_84:
          v57 = v15 < growingTo && clear || v14;
          if (v15 >= growingTo || !clear || v14)
            goto LABEL_93;
          goto LABEL_91;
        }
        if (v15)
        {
          if (growingTo == 0x8000000000000000 && v15 == -1)
            goto LABEL_101;
          v16 = growingTo / v15 > 3;
          if (growingTo / v15 <= 3 || !clear || v13 <= 0x20000)
            goto LABEL_56;
        }
        else if (!clear || v13 <= 0x20000)
        {
          v16 = 1;
LABEL_56:
          v37 = (void (**)(uint64_t, uint64_t))(object + 6);
          if (object[6])
          {
            LODWORD(v62) = 0;
            _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
            v38 = (char *)malloc_type_calloc(1uLL, v13, (unint64_t)v62 << 32);
            if (v38)
            {
              v39 = object[2];
              if (!v39)
              {
LABEL_106:
                __break(1u);
                goto LABEL_107;
              }
              v27 = v38;
              specialized static __DataStorage.move(_:_:_:)((vm_address_t)v38, v39, v15);
              v40 = object[2];
              if (v40)
              {
                v41 = *v37;
                if (*v37)
                {
                  v61 = object[3];
                  swift_retain();
                  v41(v40, v61);
                  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v41);
                }
                else
                {
                  free((void *)object[2]);
                }
              }
              v58 = object[6];
              *v37 = 0;
              object[7] = 0;
              outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v58);
              goto LABEL_89;
            }
          }
          else
          {
            v42 = (void *)object[2];
            if (!v42)
            {
LABEL_107:
              __break(1u);
              goto LABEL_108;
            }
            LODWORD(v62) = 0;
            _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
            v27 = (char *)malloc_type_realloc(v42, v13, (unint64_t)v62 << 32);
            if (v27)
            {
LABEL_89:
              v57 = 0;
              if (v15 >= growingTo || !clear)
                goto LABEL_93;
LABEL_91:
              if (!__OFSUB__(growingTo, v15))
              {
                bzero(&v27[v15], growingTo - v15);
                v57 = 0;
LABEL_93:
                object[2] = v27;
                object[4] = v13;
                v52 = (v57 & 1) == 0;
                goto LABEL_94;
              }
              goto LABEL_100;
            }
          }
          v43 = malloc_good_size(growingTo);
          v13 = v43;
          if (clear && v43 > 0x20000 && v16)
          {
            LODWORD(v62) = 0;
            _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
            v44 = (char *)malloc_type_calloc(1uLL, v13, (unint64_t)v62 << 32);
            if (v44)
            {
              v45 = object[2];
              if (v45)
              {
                v27 = v44;
                specialized static __DataStorage.move(_:_:_:)((vm_address_t)v44, v45, v15);
                v46 = object[2];
                if (v46)
                {
                  v47 = *v37;
                  if (*v37)
                  {
                    v48 = object[3];
                    swift_retain();
                    v47(v46, v48);
                    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v47);
                  }
                  else
                  {
                    free((void *)object[2]);
                  }
                }
                v59 = object[6];
                *v37 = 0;
                object[7] = 0;
                outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v59);
                v57 = 1;
                goto LABEL_93;
              }
LABEL_109:
              __break(1u);
              return;
            }
          }
          v49 = (void *)object[2];
          if (!v49)
          {
LABEL_108:
            __break(1u);
            goto LABEL_109;
          }
          LODWORD(v62) = 0;
          _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
          v50 = (char *)malloc_type_realloc(v49, v13, (unint64_t)v62 << 32);
          goto LABEL_79;
        }
        LODWORD(v62) = 0;
        _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
        v16 = 1;
        v33 = (char *)malloc_type_calloc(1uLL, v13, (unint64_t)v62 << 32);
        if (v33)
        {
          v34 = object[2];
          if (!v34)
          {
LABEL_105:
            __break(1u);
            goto LABEL_106;
          }
          v27 = v33;
          specialized static __DataStorage.move(_:_:_:)((vm_address_t)v33, v34, v15);
          v35 = (unint64_t *)object[2];
          if (!v35)
            goto LABEL_83;
          v36 = (void (*)(unint64_t *, uint64_t))object[6];
          if (v36)
          {
            v60 = object[3];
            swift_retain();
            v36(v35, v60);
            outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v36);
LABEL_83:
            v56 = object[6];
            object[6] = 0;
            object[7] = 0;
            outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v56);
            goto LABEL_84;
          }
LABEL_82:
          free(v35);
          goto LABEL_83;
        }
        goto LABEL_56;
      }
    }
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  if (v4)
    return;
  v18 = malloc_good_size(object[3]);
  LODWORD(v62) = 0;
  _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v62 + 1);
  v19 = malloc_type_malloc(v18, (unint64_t)v62 << 32);
  if (!v19)
    goto LABEL_103;
  v20 = object[2];
  if (!v20)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  v21 = v19;
  specialized static __DataStorage.move(_:_:_:)((vm_address_t)v19, v20, object[3]);
  v22 = object[2];
  if (v22)
  {
    v23 = (void (*)(uint64_t, uint64_t))object[6];
    if (v23)
    {
      v24 = object[3];
      swift_retain();
      v23(v22, v24);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v23);
    }
    else
    {
      free((void *)object[2]);
    }
  }
  v53 = object[6];
  object[6] = 0;
  object[7] = 0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v53);
  object[2] = v21;
  object[4] = v18;
  *((_BYTE *)object + 64) = 0;
}

void specialized String.withUTF8<A>(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v3 = *a1;
  v4 = a1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
    goto LABEL_39;
  }
  v3 = static String._copying(_:)();
  v16 = v15;
  swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v16;
  v4 = v16;
  if ((v16 & 0x2000000000000000) != 0)
  {
LABEL_39:
    v17 = HIBYTE(v4) & 0xF;
    v27 = v3;
    v28 = v4 & 0xFFFFFFFFFFFFFFLL;
    if (!v17)
      return;
    v18 = (uint64_t *)((char *)&v27 + v17);
    v19 = &v27;
    v20 = &v27;
    while (1)
    {
      v21 = *(unsigned __int8 *)v19;
      v22 = 0xE200000000000000;
      switch(*(_BYTE *)v19)
      {
        case 8:
          if (v20 < v19)
            goto LABEL_64;
          goto LABEL_65;
        case 9:
          if (v20 >= v19)
            goto LABEL_65;
          goto LABEL_64;
        case 0xA:
          if (v20 >= v19)
            goto LABEL_65;
          goto LABEL_64;
        case 0xB:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
          goto LABEL_47;
        case 0xC:
          if (v20 >= v19)
            goto LABEL_65;
          goto LABEL_64;
        case 0xD:
          if (v20 >= v19)
            goto LABEL_65;
          goto LABEL_64;
        case 0x22:
          goto LABEL_63;
        case 0x2F:
          if ((*(_BYTE *)(a2 + 10) & 1) != 0)
            goto LABEL_51;
          if (v20 >= v19)
            goto LABEL_65;
          goto LABEL_64;
        default:
          if (v21 == 92)
          {
            v22 = 0xE200000000000000;
            if (v20 < v19)
              goto LABEL_64;
LABEL_65:
            swift_bridgeObjectRetain();
            if ((v22 & 0xF00000000000000) != 0)
              Data._Representation.append(contentsOf:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v19 = (uint64_t *)((char *)v19 + 1);
            v20 = v19;
            if (v19 >= v18)
            {
LABEL_71:
              if (v20 < v19)
                goto LABEL_72;
              return;
            }
          }
          else
          {
LABEL_47:
            if (v21 < 0x10)
            {
              v23 = 0xE500000000000000;
              goto LABEL_62;
            }
            if (v21 <= 0x1F)
            {
              v23 = 0xE400000000000000;
LABEL_62:
              v26 = v23;
              v29 = *(_BYTE *)v19;
              lazy protocol witness table accessor for type UInt8 and conformance UInt8();
              v24._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
              String.append(_:)(v24);
              swift_bridgeObjectRelease();
              v22 = v26;
LABEL_63:
              if (v20 >= v19)
                goto LABEL_65;
LABEL_64:
              Data._Representation.append(contentsOf:)();
              goto LABEL_65;
            }
LABEL_51:
            v19 = (uint64_t *)((char *)v19 + 1);
            if (v19 >= v18)
              goto LABEL_71;
          }
          break;
      }
    }
  }
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    v5 = (_BYTE *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = v3 & 0xFFFFFFFFFFFFLL;
    if ((v3 & 0xFFFFFFFFFFFFLL) == 0)
      return;
    goto LABEL_5;
  }
  v25 = _StringObject.sharedUTF8.getter();
  if (!v25)
  {
    __break(1u);
    return;
  }
  v5 = (_BYTE *)v25;
  if (v6 >= 1)
  {
LABEL_5:
    v7 = &v5[v6];
    v8 = v5;
    while (1)
    {
      v9 = *v5;
      v10 = 0xE200000000000000;
      v11 = 8796;
      switch(*v5)
      {
        case 8:
          v11 = 25180;
          if (v8 < v5)
            goto LABEL_29;
          goto LABEL_30;
        case 9:
          v11 = 29788;
          if (v8 >= v5)
            goto LABEL_30;
          goto LABEL_29;
        case 0xA:
          v11 = 28252;
          if (v8 >= v5)
            goto LABEL_30;
          goto LABEL_29;
        case 0xB:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
          goto LABEL_12;
        case 0xC:
          v11 = 26204;
          if (v8 >= v5)
            goto LABEL_30;
          goto LABEL_29;
        case 0xD:
          v11 = 29276;
          if (v8 >= v5)
            goto LABEL_30;
          goto LABEL_29;
        case 0x22:
          goto LABEL_28;
        case 0x2F:
          if ((*(_BYTE *)(a2 + 10) & 1) != 0)
            goto LABEL_16;
          v11 = 12124;
          if (v8 >= v5)
            goto LABEL_30;
          goto LABEL_29;
        default:
          if (v9 == 92)
          {
            v10 = 0xE200000000000000;
            v11 = 23644;
            if (v8 < v5)
              goto LABEL_29;
LABEL_30:
            swift_bridgeObjectRetain();
            v27 = v11;
            v28 = v10 & 0xFFFFFFFFFFFFFFLL;
            if ((v10 & 0xF00000000000000) != 0)
              Data._Representation.append(contentsOf:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v8 = ++v5;
            if (v5 >= v7)
            {
LABEL_36:
              if (v8 < v5)
LABEL_72:
                Data._Representation.append(contentsOf:)();
              return;
            }
          }
          else
          {
LABEL_12:
            if (v9 < 0x10)
            {
              v27 = 0x303030755CLL;
              v12 = 0xE500000000000000;
              goto LABEL_27;
            }
            if (v9 <= 0x1F)
            {
              v27 = 808482140;
              v12 = 0xE400000000000000;
LABEL_27:
              v28 = v12;
              lazy protocol witness table accessor for type UInt8 and conformance UInt8();
              v13._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
              String.append(_:)(v13);
              swift_bridgeObjectRelease();
              v11 = v27;
              v10 = v28;
LABEL_28:
              if (v8 >= v5)
                goto LABEL_30;
LABEL_29:
              Data._Representation.append(contentsOf:)();
              goto LABEL_30;
            }
LABEL_16:
            if (++v5 >= v7)
              goto LABEL_36;
          }
          break;
      }
    }
  }
}

void JSONWriter.serializeJSON(_:depth:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18181F178()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  JSONWriter.serializeString(_:)(v2);
  return outlined consume of JSONReference.Backing(v1, (uint64_t)v0, 0);
}

uint64_t JSONReference.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of JSONReference.Backing(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocClassInstance();
}

uint64_t outlined consume of JSONReference.Backing(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  switch(a3)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t __DataStorage.__deallocating_deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  void (*v3)(void *, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = (void *)v0[2];
  if (v2)
  {
    v3 = (void (*)(void *, uint64_t))v1[6];
    if (v3)
    {
      v4 = v1[3];
      swift_retain();
      v3(v2, v4);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v3);
    }
    else
    {
      free(v2);
    }
  }
  v5 = v1[6];
  v1[6] = 0;
  v1[7] = 0;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v1[6]);
  return swift_deallocClassInstance();
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONWriter.serializeString(_:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4[2];
  uint64_t v5;
  unint64_t v6;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v5 = 34;
  v6 = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(&v5);
  swift_bridgeObjectRelease();
  v5 = countAndFlagsBits;
  v6 = (unint64_t)object;
  swift_bridgeObjectRetain();
  specialized String.withUTF8<A>(_:)(&v5, v1);
  swift_bridgeObjectRelease();
  v4[0] = 34;
  v4[1] = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(v4);
  swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LocalizedStringResource.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18181F544 + 4 * byte_182150A26[*v0]))(7955819, 0xE300000000000000);
}

uint64_t sub_18181F544()
{
  return 0x56746C7561666564;
}

uint64_t sub_18181F564()
{
  return 0x656C626174;
}

uint64_t sub_18181F578()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_18181F58C()
{
  return 0x5255656C646E7562;
}

unint64_t sub_18181F5A8()
{
  return 0xD000000000000015;
}

void *__DataStorage.init(bytes:length:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  void *result;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)(v3 + 16) = 0;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  if (a2 > 0x3FFFFFFFFFFFFFFELL)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_4;
  }
  v2 = a2;
  *(_QWORD *)(v3 + 40) = 0;
  if (!a2)
  {
    *(_BYTE *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *v5 = 0;
    return (void *)v3;
  }
  v4 = a1;
  if (one-time initialization token for vmOpsThreshold != -1)
    goto LABEL_13;
LABEL_4:
  if (static __DataStorage.vmOpsThreshold <= v2)
  {
    *(_QWORD *)(v3 + 24) = v2;
    *(_QWORD *)(v3 + 32) = v2;
    *(_BYTE *)(v3 + 64) = 1;
    v8 = 0;
    _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v8 + 1);
    result = malloc_type_malloc(v2, (unint64_t)v8 << 32);
    if (result)
    {
      *v5 = result;
      goto LABEL_10;
    }
  }
  else
  {
    *(_QWORD *)(v3 + 24) = v2;
    v7 = 0;
    _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v7 + 1);
    result = malloc_type_malloc(v2, (unint64_t)v7 << 32);
    if (result)
    {
      *(_QWORD *)(v3 + 16) = result;
      *(_QWORD *)(v3 + 32) = v2;
      *(_BYTE *)(v3 + 64) = 1;
LABEL_10:
      specialized static __DataStorage.move(_:_:_:)((vm_address_t)result, v4, v2);
      return (void *)v3;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_WORD *_So30malloc_type_layout_semantics_ta_generic_data_setter(_WORD *result)
{
  *result |= 0x100u;
  return result;
}

vm_address_t specialized static __DataStorage.move(_:_:_:)(vm_address_t __dst, unint64_t __src, int64_t __len)
{
  vm_address_t v5;
  Swift::Int v6;
  vm_size_t v7;
  vm_map_t v8;
  BOOL v9;

  v5 = __dst;
  if (one-time initialization token for vmOpsThreshold != -1)
    __dst = swift_once();
  if (static __DataStorage.vmOpsThreshold > __len)
  {
LABEL_8:
    if (__len >= 1)
      goto LABEL_9;
    return __dst;
  }
  if (one-time initialization token for _pageSize != -1)
    __dst = swift_once();
  v6 = _pageSize - 1;
  if (__OFSUB__(_pageSize, 1))
  {
    __break(1u);
    goto LABEL_19;
  }
  if ((v6 & (v5 | __src)) != 0)
    goto LABEL_8;
  if (!__src)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = __len & ~v6;
  v8 = _platform_mach_task_self();
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_22:
    __dst = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return __dst;
  }
  __dst = vm_copy(v8, __src, v7, v5);
  if ((_DWORD)__dst)
    __dst = (vm_address_t)memmove((void *)v5, (const void *)__src, v7);
  v9 = __OFSUB__(__len, v7);
  __len -= v7;
  if (v9)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __src += v7;
  v5 += v7;
  if (__len >= 1)
  {
LABEL_9:
    if (__src)
      return (vm_address_t)memmove((void *)v5, (const void *)__src, __len);
    goto LABEL_20;
  }
  return __dst;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E6572727563;
  else
    return 0x696669746E656469;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E656D75677261;
  else
    return 7955819;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONWriter.serializeArray(_:depth:)(Swift::OpaquePointer _, Swift::Int depth)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (depth > 511)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 1;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_BYTE *)(v6 + 48) = 2;
    swift_willThrow();
    return;
  }
  v7 = 91;
  v8 = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(&v7);
  swift_bridgeObjectRelease();
  if (*((_BYTE *)v2 + 8) == 1)
  {
    v7 = 10;
    v8 = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(&v7);
    swift_bridgeObjectRelease();
    if (__OFADD__(*v2, 1))
    {
      __break(1u);
      goto LABEL_22;
    }
    ++*v2;
  }
  if ((unint64_t)_._rawValue >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      v9 = (unint64_t)_._rawValue & 0xC000000000000001;
      if (((unint64_t)_._rawValue & 0xC000000000000001) != 0)
        break;
      if (*(_QWORD *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        v5 = *((_QWORD *)_._rawValue + 4);
        swift_retain();
LABEL_11:
        if ((v2[1] & 1) != 0)
          JSONWriter.writeIndent()();
        __asm { BR              X9 }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter())
        goto LABEL_17;
    }
    v5 = MEMORY[0x186DA53A8](0, _._rawValue);
    goto LABEL_11;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  if (*((_BYTE *)v2 + 8) != 1)
    goto LABEL_20;
  v7 = 10;
  v8 = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(&v7);
  swift_bridgeObjectRelease();
  if (!__OFSUB__(*v2, 1))
  {
    --*v2;
    JSONWriter.writeIndent()();
LABEL_20:
    v7 = 93;
    v8 = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(&v7);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_22:
  __break(1u);
}

uint64_t outlined copy of JSONReference.Backing(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  switch(a3)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeZone.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x616470756F747561;
  else
    return 0x696669746E656469;
}

vm_address_t __DataStorage.init(bytes:length:copy:deallocator:offset:)(unint64_t a1, uint64_t a2, char a3, void (*a4)(unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void (*v7)(unint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  vm_address_t result;
  unsigned int v14;
  unsigned int v15;

  *(_QWORD *)(v6 + 16) = 0;
  v10 = (_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  if (a2 > 0x3FFFFFFFFFFFFFFELL)
  {
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_5;
  }
  v7 = a4;
  v9 = a2;
  v8 = a1;
  *(_QWORD *)(v6 + 40) = a6;
  if (!a2)
    goto LABEL_10;
  if ((a3 & 1) == 0)
  {
    *(_QWORD *)(v6 + 24) = a2;
    *(_QWORD *)(v6 + 32) = a2;
    *(_BYTE *)(v6 + 64) = 0;
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 48) = a4;
    *(_QWORD *)(v6 + 56) = a5;
    return v6;
  }
  if (one-time initialization token for vmOpsThreshold != -1)
    goto LABEL_21;
LABEL_5:
  if (static __DataStorage.vmOpsThreshold > v9)
  {
    *(_QWORD *)(v6 + 24) = v9;
    v14 = 0;
    _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v14 + 1);
    v11 = malloc_type_malloc(v9, (unint64_t)v14 << 32);
    if (v11)
    {
      *(_QWORD *)(v6 + 16) = v11;
      *(_QWORD *)(v6 + 32) = v9;
      *(_BYTE *)(v6 + 64) = 1;
      specialized static __DataStorage.move(_:_:_:)((vm_address_t)v11, v8, v9);
      if (!v7)
        return v6;
      if (!v8)
      {
        __break(1u);
LABEL_10:
        *(_BYTE *)(v6 + 64) = 0;
        *(_QWORD *)(v6 + 24) = 0;
        *(_QWORD *)(v6 + 32) = 0;
        *v10 = 0;
        if (v7)
        {
          if (v8)
            v7(v8, 0);
          goto LABEL_18;
        }
        return v6;
      }
LABEL_17:
      swift_retain();
      v7(v8, v9);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v7);
LABEL_18:
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v7);
      return v6;
    }
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v7);
    __break(1u);
    goto LABEL_23;
  }
  *(_QWORD *)(v6 + 24) = v9;
  *(_QWORD *)(v6 + 32) = v9;
  *(_BYTE *)(v6 + 64) = 1;
  v15 = 0;
  _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v15 + 1);
  v12 = malloc_type_malloc(v9, (unint64_t)v15 << 32);
  if (!v12)
  {
LABEL_23:
    result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v7);
    __break(1u);
    goto LABEL_24;
  }
  *v10 = v12;
  result = specialized static __DataStorage.move(_:_:_:)((vm_address_t)v12, v8, v9);
  if (!v7)
    return v6;
  if (v8)
    goto LABEL_17;
LABEL_24:
  __break(1u);
  return result;
}

uint64_t protocol witness for _JSONDirectArrayEncodable.individualElementRepresentation(options:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Array<A>.individualElementRepresentation(options:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t Array<A>.individualElementRepresentation(options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t (*v28)(_QWORD *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v45 = a4;
  v6 = *(_QWORD *)(a3 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v10;
  v43 = v10[1];
  v44 = v11;
  v42 = v10[2];
  v41 = *((unsigned __int8 *)v10 + 24);
  v40 = v10[4];
  v39 = v10[5];
  v38 = v10[6];
  v37 = v10[7];
  v36 = v10[8];
  v35 = v10[9];
  v34 = v10[10];
  v33 = v10[11];
  v32 = v10[12];
  v31 = v10[13];
  v30 = v10[14];
  v14 = MEMORY[0x186DA4B5C](v12, v13, v8);
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v16 = swift_bridgeObjectRetain();
  result = MEMORY[0x186DA4B68](v16, a3);
  if (!result)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
  if (result >= 1)
  {
    v26 = v7;
    v18 = 0;
    v28 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v45 + 16);
    v27 = a2 & 0xC000000000000001;
    v29 = result;
    do
    {
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && v27)
      {
        result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v26 != 8)
          goto LABEL_15;
        v19 = a2;
        v46[0] = result;
        (*(void (**)(char *, _QWORD *, uint64_t))(v6 + 16))(v9, v46, a3);
        swift_unknownObjectRelease();
      }
      else
      {
        v19 = a2;
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, a2+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v18, a3);
      }
      v46[0] = v44;
      v46[1] = v43;
      v46[2] = v42;
      v47 = v41;
      v48 = v40;
      v49 = v39;
      v50 = v38;
      v51 = v37;
      v52 = v36;
      v53 = v35;
      v54 = v34;
      v55 = v33;
      v56 = v32;
      v57 = v31;
      v58 = v30;
      v20 = v28(v46, a3, v45);
      v22 = v21;
      v24 = v15[2];
      v23 = v15[3];
      if (v24 >= v23 >> 1)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v15);
      ++v18;
      v15[2] = v24 + 1;
      v25 = &v15[2 * v24];
      v25[4] = v20;
      v25[5] = v22;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a3);
      a2 = v19;
    }
    while (v29 != v18);
    goto LABEL_13;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

__n128 LocalizedStringResource.init(stringLiteral:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  uint64_t v16[3];
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;

  v16[0] = MEMORY[0x1E0DEE9D8];
  v16[1] = a1;
  v16[2] = a2;
  if (one-time initialization token for cache != -1)
    swift_once();
  v17 = static LocaleCache.cache;
  *(_QWORD *)&v15 = LocaleCache.current.getter();
  *((_QWORD *)&v15 + 1) = v4;
  memset(v13, 0, sizeof(v13));
  v14 = 2;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v16, 0, 0, &v15, (uint64_t)v13, (uint64_t)&v17);
  v5 = v19;
  v6 = v20;
  v7 = v23;
  result = v18;
  v9 = v22;
  v10 = v21;
  v11 = v24;
  v12 = v25;
  *(_QWORD *)a3 = v17;
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) = v5;
  *(_QWORD *)(a3 + 32) = v6;
  *(_OWORD *)(a3 + 40) = v10;
  *(_OWORD *)(a3 + 56) = v9;
  *(_QWORD *)(a3 + 72) = v7;
  *(_OWORD *)(a3 + 80) = v11;
  *(_OWORD *)(a3 + 96) = v12;
  return result;
}

uint64_t destroy for LocalizedStringResource(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t static Locale.current.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  result = LocaleCache.current.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t LocaleCache.current.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  _OWORD v8[9];

  v1 = *v0;
  v2 = (uint64_t *)(*v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 124));
  LocaleCache.State.resetCurrentIfNeeded()();
  v3 = *(_QWORD *)(v1 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 124));
  swift_release();
  if (v3)
    return v3;
  LocaleCache.preferences()(v8);
  v5 = v4;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 124));
  closure #2 in LocaleCache.current.getter(v2, (uint64_t)v8, v5 & 1, &v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 124));
  swift_release();
  v3 = v7;
  if (v7)
  {
    outlined release of LocalePreferences(v8);
    return v3;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in LocaleCache.current.getter@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  LocaleCache.State.resetCurrentIfNeeded()();
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

void static URL._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;

  if (a1)
  {
    URL.init(reference:)(a1, &v4);
    v3 = v5;
    *(_QWORD *)a2 = v4;
    *(_OWORD *)(a2 + 8) = v3;
  }
  else
  {
    __break(1u);
  }
}

_QWORD *static URL._converted(from:)(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;

  if (!objc_msgSend(a1, sel_isFileReferenceURL))
    return a1;
  v1 = objc_msgSend(a1, sel_filePathURL);
  if (v1)
  {
    v2 = v1;
    URL.init(reference:)(v1, &v6);

    v3 = v6;
LABEL_6:
    swift_release();
    swift_release();
    return (_QWORD *)v3;
  }
  result = URL.init(string:)(&v6, 0xD00000000000002ALL, 0x800000018230F070);
  v3 = v6;
  if (v6)
    goto LABEL_6;
  __break(1u);
  return result;
}

Swift::UInt8_optional protocol witness for IteratorProtocol.next() in conformance Data.Iterator@<W0>(Swift::UInt8 *a1@<X8>)
{
  Swift::UInt8_optional result;

  result = Data.Iterator.next()();
  *a1 = result.value;
  a1[1] = result.is_nil;
  return result;
}

Swift::UInt8_optional __swiftcall Data.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  if (v1 < v2)
  {
    *(_QWORD *)(v0 + 48) = v1 + 1;
    __asm { BR              X10 }
  }
  return (Swift::UInt8_optional)((v1 >= v2) << 8);
}

uint64_t String.init<A>(bytes:encoding:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  id v62;
  void *v63;
  unint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v67 = a1;
  v7 = type metadata accessor for UTF32EndianAdaptor(0, a3, a4, a4);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v66 - v8;
  v68 = a4;
  v11 = type metadata accessor for UTF16EndianAdaptor(0, a3, a4, v10);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v66 - v12;
  v66 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v14);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v66 - v16;
  MEMORY[0x1E0C80A78](v18);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v66 - v22;
  v24 = *a2;
  if (*a2 > 2415919359)
  {
    v36 = 1;
    if (v24 > 2550137087)
    {
      if (v24 != 2550137088)
      {
        if (v24 != 2617245952)
          goto LABEL_34;
        v36 = 0;
      }
LABEL_18:
      MEMORY[0x1E0C80A78](v20);
      *((_BYTE *)&v66 - 16) = v36;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      v37 = v67;
      dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
      if (v70 < 2)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v9, v37, a3);
        v9[*(int *)(v7 + 36)] = v36;
        MEMORY[0x186DA9D64](&protocol conformance descriptor for UTF32EndianAdaptor<A>, v7);
        v38 = specialized String.init<A, B>(_validating:as:)((uint64_t)v9, v7);
        if (!v39)
          return 0;
        return v38;
      }
      return v69;
    }
    if (v24 != 2415919360)
    {
      if (v24 != 2483028224)
        goto LABEL_34;
      v36 = 0;
    }
LABEL_30:
    MEMORY[0x1E0C80A78](v20);
    *((_BYTE *)&v66 - 16) = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v50 = v67;
    dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
    if (v70 < 2)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v13, v50, a3);
      v13[*(int *)(v11 + 36)] = v36;
      MEMORY[0x186DA9D64](&protocol conformance descriptor for UTF16EndianAdaptor<A>, v11);
      v38 = specialized String.init<A, B>(_validating:as:)((uint64_t)v13, v11);
      if (!v51)
        return 0;
      return v38;
    }
    return v69;
  }
  if (v24 > 9)
  {
    if (v24 != 10)
    {
      if (v24 == 2348810496)
      {
        v36 = 2;
        goto LABEL_18;
      }
LABEL_34:
      v52 = v21;
      MEMORY[0x1E0C80A78](v20);
      *(&v66 - 2) = v24;
      MEMORY[0x1E0C80A78](v53);
      *(&v66 - 2) = (uint64_t)partial apply for makeNSString #1 <A>(bytes:) in String.init<A>(bytes:encoding:);
      *(&v66 - 1) = v54;
      v56 = v55;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      v57 = v67;
      dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
      v27 = v69;
      v58 = v70;
      v59 = v66;
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16);
      v60(v56, v57, a3);
      if (v58 == 1)
      {
        v60((uint64_t)v52, v56, a3);
        v61 = dispatch thunk of Sequence._copyToContiguousArray()();
        v62 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v61 + 32, *(_QWORD *)(v61 + 16), v24);
        if (v62)
        {
          v63 = v62;
          v27 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
          swift_release();

          (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v56, a3);
          return v27;
        }
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v56, a3);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v56, a3);
        if (v58)
          return v27;
      }
      return 0;
    }
    v36 = 2;
    goto LABEL_30;
  }
  if (v24 != 1)
  {
    if (v24 == 4)
    {
      v25 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      v26 = v67;
      dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
      v27 = v69;
      v28 = v70;
      v29 = v66;
      v30 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
      v30(v17, v26, a3);
      if (v28 == 1)
      {
        v30(v25, (uint64_t)v17, a3);
        v31 = dispatch thunk of Sequence._copyToContiguousArray()();
        v32 = (unsigned __int8 *)(v31 + 32);
        v33 = *(_QWORD *)(v31 + 16);
        v34 = static String._tryFromUTF8(_:)();
        if (v35)
        {
          v27 = v34;
          swift_release();
          (*(void (**)(char *, uint64_t))(v29 + 8))(v17, a3);
          return v27;
        }
        v27 = (uint64_t)specialized String.init<A, B>(_validating:as:)(v32, v33);
        v28 = v64;
        swift_release();
      }
      (*(void (**)(char *, uint64_t))(v29 + 8))(v17, a3);
      if (v28)
        return v27;
      return 0;
    }
    goto LABEL_34;
  }
  v40 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v41 = v67;
  dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  v27 = v69;
  v42 = v70;
  v43 = v66;
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  v44(v23, v41, a3);
  if (v42 == 1)
  {
    v44(v40, (uint64_t)v23, a3);
    v45 = dispatch thunk of Sequence._copyToContiguousArray()();
    v27 = specialized String.init<A, B>(_validating:as:)((char *)(v45 + 32), *(_QWORD *)(v45 + 16));
    v42 = v46;
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v43 + 8))(v23, a3);
  if (!v42)
  {
    if (one-time initialization token for compatibility1 != -1)
      swift_once();
    if (static String.compatibility1 == 1)
    {
      v44(v40, v41, a3);
      v47 = dispatch thunk of Sequence._copyToContiguousArray()();
      v48 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, v47 + 32, *(_QWORD *)(v47 + 16), 1);
      if (v48)
      {
        v49 = v48;
        v27 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
        swift_release();

        return v27;
      }
      swift_release();
    }
    return 0;
  }
  return v27;
}

uint64_t *initializeBufferWithCopyOfBuffer for Data._Representation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t destroy for Data._Representation(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Data()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  specialized _copyCollectionToContiguousArray<A>(_:)(v1, v2);
  v4 = v3;
  outlined consume of Data._Representation(v1, v2);
  return v4;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

_QWORD *sub_181821D3C()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[16];

  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v2 = (_QWORD *)swift_allocObject();
    v3 = _swift_stdlib_malloc_size(v2);
    v2[2] = BYTE6(v0);
    v2[3] = 2 * v3 - 64;
    outlined copy of Data._Representation(v1, v0);
    Data._copyContents(initializing:)((uint64_t)v7, (uint64_t)(v2 + 4), BYTE6(v0), v1, v0);
    v5 = v4;
    outlined consume of Data._Representation(v1, v0);
    outlined consume of Data._Representation(v7[0], v7[1]);
    if (v5 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x181821E04);
    }
  }
  return v2;
}

void Data.Iterator.init(_:at:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_181821E7C(uint64_t a1)
{
  _OWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  _QWORD v14[16];

  v7 = BYTE6(v2);
  *(_QWORD *)(v6 - 88) = BYTE6(v2);
  v8 = v3 & 0x1F;
  if (v3 <= 0)
    v8 = -(-v3 & 0x1F);
  v9 = __OFSUB__(v3, v8);
  v10 = v3 - v8;
  if (v9)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (__OFSUB__(BYTE6(v2), v10))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (BYTE6(v2) - v10 >= 33)
  {
    v7 = v10 + 32;
    if (__OFADD__(v10, 32))
LABEL_12:
      __break(1u);
  }
  if (v7 < v10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *(_QWORD *)(v6 - 160) = v4;
  *(_QWORD *)(v6 - 152) = v2;
  *(_QWORD *)(v6 - 176) = v10;
  *(_QWORD *)(v6 - 168) = v7;
  MEMORY[0x1E0C80A78](a1);
  v14[2] = v6 - 160;
  v14[3] = v6 - 176;
  v14[4] = v5;
  v14[5] = 32;
  specialized Data._Representation.withUnsafeBytes<A>(_:)((uint64_t)partial apply for specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:), (uint64_t)v14, v4, v2);
  result = outlined consume of Data._Representation(v4, v2);
  v12 = *(_OWORD *)(v6 - 128);
  *v1 = *(_OWORD *)(v6 - 144);
  v1[1] = v12;
  v13 = *(_OWORD *)(v6 - 96);
  v1[2] = *(_OWORD *)(v6 - 112);
  v1[3] = v13;
  return result;
}

void Data.subdata(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void Data._Representation.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t specialized Data.init(bytes:count:)(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return specialized Data.InlineData.init(_:)(__src, &__src[a2]);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)((unint64_t)__src, a2);
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  type metadata accessor for Data.RangeReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  _BYTE *v2;
  char v3;
  _BYTE __dst[14];
  char v6;
  uint64_t v7;

  v2 = __src;
  v7 = *MEMORY[0x1E0C80C00];
  if (!__src)
    goto LABEL_4;
  v3 = (_BYTE)a2 - (_BYTE)__src;
  if (a2 - __src >= 256)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_4:
    v3 = 0;
  }
  memset(__dst, 0, sizeof(__dst));
  v6 = v3;
  if (v2 && a2 != v2)
    memcpy(__dst, v2, a2 - v2);
  return *(_QWORD *)__dst;
}

id static Data._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  id v1;
  id v2;

  if (!a1)
    return 0;
  v1 = a1;
  v2 = specialized Data.init(referencing:)(v1);

  return v2;
}

id specialized Data.init(referencing:)(void *a1)
{
  id result;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  result = objc_msgSend(a1, sel_length);
  if (result)
  {
    v3 = (uint64_t)result;
    if ((objc_msgSend(a1, sel_respondsToSelector_, sel__providesConcreteBacking) & 1) != 0)
      objc_msgSend(a1, sel__providesConcreteBacking);
    objc_msgSend(a1, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSData();
    swift_dynamicCast();
    v4 = objc_retainAutorelease(v9);
    v5 = objc_msgSend(v4, sel_bytes);
    v6 = objc_msgSend(v4, sel_length);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v4;
    type metadata accessor for __DataStorage();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    *(_BYTE *)(v8 + 64) = 0;
    *(_QWORD *)(v8 + 16) = v5;
    *(_QWORD *)(v8 + 24) = v6;
    *(_QWORD *)(v8 + 48) = destructiveProjectEnumData for PredicateCodableError;
    *(_QWORD *)(v8 + 56) = v7;
    return (id)specialized Data._Representation.init(_:count:)((_QWORD *)v8, v3);
  }
  return result;
}

uint64_t type metadata accessor for __DataStorage()
{
  return objc_opt_self();
}

uint64_t specialized Data._Representation.init(_:count:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _BYTE __dst[14];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    swift_release();
    return 0;
  }
  v2 = a2;
  if (a2 > 14)
  {
    if ((unint64_t)a2 <= 0x7FFFFFFE)
      return a2 << 32;
    type metadata accessor for Data.RangeReference();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = v2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v4 = a1[2];
  if (v4)
  {
    v5 = a1[5];
    v6 = __OFSUB__(0, v5);
    v7 = -v5;
    if (!v6)
    {
      v8 = (char *)(v4 + v7);
      if (a1[3] < v2)
        v2 = a1[3];
      v9 = &v8[v2];
      goto LABEL_14;
    }
LABEL_20:
    __break(1u);
  }
  v9 = 0;
  v8 = 0;
  LOBYTE(v2) = 0;
LABEL_14:
  memset(__dst, 0, sizeof(__dst));
  v12 = v2;
  if (v4 && v9 != v8)
    memcpy(__dst, v8, v9 - v8);
  v3 = *(_QWORD *)__dst;
  swift_release();
  return v3;
}

void partial apply for specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2)
{
  partial apply for specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(a1, a2);
}

{
  uint64_t v2;

  specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(a1, a2, **(_QWORD **)(v2 + 16), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8));
}

void specialized closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_181822AEC()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;

  v6 = specialized RandomAccessCollection<>.distance(from:to:)((int)v4, v5, v4, v2);
  result = (void *)specialized RandomAccessCollection<>.distance(from:to:)(v5, v3, v4, v2);
  if (v0)
  {
    if (v1)
      return memcpy(v0, (const void *)(v1 + v6), (size_t)result);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_181822B64 + *((int *)qword_181AFA5A0 + (a4 >> 62))))();
}

uint64_t sub_181822B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, unsigned int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x181822C04);
  }
  return ((uint64_t (*)(void))((char *)&loc_181822BB4 + *((int *)qword_181AFA5B0 + a3)))();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3[2];
  if (!v4)
  {
    if (!__OFSUB__(a2, result))
    {
      v9 = 0;
      v11 = 0;
      return a3(v9, v11);
    }
    goto LABEL_10;
  }
  v5 = v3[5];
  v6 = __OFSUB__(result, v5);
  v7 = result - v5;
  if (!v6)
  {
    v8 = a2 - result;
    if (!__OFSUB__(a2, result))
    {
      v9 = v4 + v7;
      v10 = v3[3];
      if (v10 >= v8)
        v10 = v8;
      v11 = v9 + v10;
      return a3(v9, v11);
    }
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

void URL.init(string:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  if (!_foundation_swift_url_feature_enabled())
  {
    v10 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v10 = a1 & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E98]), sel_initWithString_, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease();
      if (v11)
      {
        v9 = (uint64_t)static URL._converted(from:)(v11);

        v7 = 0;
        goto LABEL_9;
      }
    }
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_11;
  }
  v6 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(a1, a2, 1);
  if (!v6)
    goto LABEL_10;
  v7 = v6;
  v8 = swift_retain();
  v9 = specialized static URL._cfURL(from:baseURL:)(v8);
  swift_release();
LABEL_9:
  *a3 = v9;
  a3[1] = v7;
LABEL_11:
  a3[2] = 0;
}

uint64_t initializeWithCopy for LocalizedStringResource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = *(void **)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = v6;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v9 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

const __CFString *NSStringFromBOOL(int a1)
{
  if (a1)
    return CFSTR("YES");
  else
    return CFSTR("NO");
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExpressionStructure.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void specialized static Bool._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, char *a2)
{
  char v4;
  id v5;
  char v6;
  id v7;
  char v8;

  if (!*MEMORY[0x1E0C9AE50])
  {
    __break(1u);
    goto LABEL_12;
  }
  if (*MEMORY[0x1E0C9AE50] == a1)
  {
    v4 = 1;
    goto LABEL_10;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = 1;
  v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 1);
  v6 = static NSObject.== infix(_:_:)();

  if ((v6 & 1) != 0)
  {
LABEL_10:
    *a2 = v4;
    return;
  }
  if (!*MEMORY[0x1E0C9AE40])
  {
LABEL_12:
    __break(1u);
    return;
  }
  if (*MEMORY[0x1E0C9AE40] == a1)
  {
    v4 = 0;
    goto LABEL_10;
  }
  v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0);
  v8 = static NSObject.== infix(_:_:)();

  v4 = 0;
  if ((v8 & 1) != 0)
    goto LABEL_10;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, SEL *a6)
{
  id v8;
  id v9;
  char v10;

  v8 = objc_msgSend(a1, *a5);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a6, v8);
  v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) != 0)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return v10 & 1;
}

NSString *__NSLocalizedFileSizeDescription(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  long double v20;
  void *v22;
  const __CFString *v23;
  double v24;
  double v25;
  double v26;
  NSNumber *v27;

  if (a3 & 0x70000000 | a1)
  {
    if ((_WORD)a3)
      v8 = (unsigned __int16)a3;
    else
      v8 = 0xFFFF;
    if ((a3 & 0x180000) != 0 && (a3 & 0x40000) == 0)
      v10 = 1024;
    else
      v10 = 1000;
    v11 = objc_msgSend(&unk_1E0FCEB78, "count");
    v12 = v11 - 1;
    if (v11 == 1)
    {
      v16 = (double)v10;
LABEL_32:
      v19 = v12;
    }
    else
    {
      v13 = 0;
      if (a1 >= 0)
        v14 = a1;
      else
        v14 = -a1;
      v15 = (double)v14;
      v16 = (double)v10;
      if (a2)
        v17 = a2;
      else
        v17 = v10;
      v18 = (double)v17;
      v19 = 0x7FFFFFFFFFFFFFFFLL;
      while (1)
      {
        if ((v8 & (1 << v13)) != 0)
          v19 = v13;
        v20 = pow((double)v10, (double)(unint64_t)v13);
        if (fabs(roundedSize(v13, (a3 & 0x400000) == 0, v15 / v20)) < v18 && v19 != 0x7FFFFFFFFFFFFFFFLL)
          break;
        if (v12 == ++v13)
        {
          if (v19 == 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_32;
          break;
        }
      }
    }
    v24 = pow(v16, (double)(unint64_t)v19);
    v25 = (double)a1 / v24;
    v26 = -v25;
    if (a1 >= 0)
      v26 = (double)a1 / v24;
    if (v26 >= 1.0e15)
      v27 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a1 / (unint64_t)v24);
    else
      v27 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v25, v24, v26);
    return __NSLocalizedFileSizeDescriptionFormatNumber(v27, v19, (uint64_t)+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a1), a3, a4);
  }
  else
  {
    v22 = (void *)_NSFoundationBundle();
    if ((a3 & 1) != 0)
      v23 = CFSTR("Zero bytes");
    else
      v23 = CFSTR("Zero KB");
    return (NSString *)objc_msgSend(v22, "localizedStringForKey:value:table:", v23, &stru_1E0F56070, CFSTR("FileSizeFormatting"));
  }
}

NSNumber *_NSXPCSerializationNumberForObject(uint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  const __CFAllocator *v6;
  double *v7;
  CFNumberType v8;
  unint64_t v9;
  NSNumber *result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  unint64_t v16[2];
  double v17[2];

  v17[1] = *(double *)MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *a1;
  v4 = *(unsigned __int8 *)(*a1 + *a2);
  v5 = v4 & 0xF0;
  if (v5 != 240)
  {
    if (v5 == 32)
    {
      if ((v4 & 0xF) == 3)
      {
        v17[0] = 0.0;
        if (_getDoubleAtMarker(a1, v17, v2, v16))
          return +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v17[0]);
      }
      else if ((v4 & 0xF) == 2)
      {
        LODWORD(v17[0]) = 0;
        if (_getFloatAtMarker(a1, v17, v2, v16))
        {
          LODWORD(v15) = LODWORD(v17[0]);
          return +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v15);
        }
      }
    }
    else if (v5 == 16)
    {
      v17[0] = 0.0;
      if (_getIntAtMarker(a1, v17, v2, v16))
      {
        v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
        v7 = v17;
        v8 = kCFNumberSInt64Type;
        return (NSNumber *)CFNumberCreate(v6, v8, v7);
      }
    }
    return 0;
  }
  v9 = a1[1];
  if (v4 < 0xF0 || v9 <= v2)
    return 0;
  result = 0;
  v12 = v2 >= 0xFFFFFFFFFFFFFFF8;
  v13 = v12 << 63 >> 63;
  if (v13 == v12 && (v13 & 0x8000000000000000) == 0 && v9 > v2 + 8)
  {
    v14 = *(_QWORD *)(v2 + v3 + 1);
    v16[0] = 0;
    v16[1] = v14;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    v7 = (double *)v16;
    v8 = kCFNumberMaxType|kCFNumberSInt8Type;
    return (NSNumber *)CFNumberCreate(v6, v8, v7);
  }
  return result;
}

double _NSXPCSerializationDoubleForObject(_QWORD *a1, unint64_t *a2)
{
  unint64_t v2;
  int DoubleAtMarker;
  double result;
  double v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (!*a2)
    return 0.0;
  v5 = 0.0;
  DoubleAtMarker = _getDoubleAtMarker(a1, &v5, v2, v6);
  result = v5;
  if (!DoubleAtMarker)
    return 0.0;
  return result;
}

uint64_t _getDoubleAtMarker(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1[1] <= a3 || *(_BYTE *)(*a1 + a3) != 35)
    return 0;
  v4 = 0;
  v5 = a3 >= 0xFFFFFFFFFFFFFFF8;
  v6 = v5 << 63 >> 63;
  *a4 = a3 + 8;
  if (v6 == v5 && (v6 & 0x8000000000000000) == 0)
  {
    if (a1[1] > a3 + 8)
    {
      *a2 = *(_QWORD *)(a3 + *a1 + 1);
      return 1;
    }
    return 0;
  }
  return v4;
}

uint64_t _decodeFloat(void *a1, const void *a2, float *a3)
{
  uint64_t result;
  double v7;
  float v8;
  double v9[2];

  v9[1] = *(double *)MEMORY[0x1E0C80C00];
  v9[0] = 0.0;
  result = _decodeDouble((uint64_t)a1, a2, v9);
  v7 = v9[0];
  if ((_DWORD)result)
  {
    result = 1;
    if (fabs(v9[0]) != INFINITY && (v9[0] < -3.40282347e38 || v9[0] > 3.40282347e38))
    {
      objc_msgSend(a1, "__failWithExceptionName:errorCode:format:", *MEMORY[0x1E0C99858], 4864, CFSTR("%@: value (%f) for key (%@) too large to fit in 32-bit float"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeFloatForKey_), *(_QWORD *)&v9[0], a2);
      result = 0;
    }
  }
  v8 = v7;
  *a3 = v8;
  return result;
}

uint64_t _decodeDouble(uint64_t a1, const void *a2, double *a3)
{
  unint64_t v6;
  const __CFArray *v7;
  CFIndex Count;
  const __CFArray *ValueAtIndex;
  void *Value;
  id v11;
  double v12;
  unsigned __int8 *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  id v17;
  uint64_t result;
  _QWORD valuePtr[2];

  valuePtr[1] = *MEMORY[0x1E0C80C00];
  v6 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v6 | 8, (unint64_t *)(a1 + 16));
  valuePtr[0] = 0;
  v7 = *(const __CFArray **)(a1 + 80);
  if (!v7)
  {
    v12 = 0.0;
    if (!__CFBinaryPlistGetOffsetForValueFromDictionary3())
    {
LABEL_21:
      result = 0;
      goto LABEL_22;
    }
    v13 = *(unsigned __int8 **)(a1 + 104);
    v14 = (unint64_t)&v13[*(_QWORD *)(a1 + 112) - 1];
    v15 = *v13;
    if (v15 == 35)
    {
      v16 = 9;
      if ((unint64_t)v13 < 0xFFFFFFFFFFFFFFF7 && v14 >= (unint64_t)(v13 + 9))
      {
        v12 = COERCE_DOUBLE(bswap64(*(_QWORD *)(v13 + 1)));
        goto LABEL_18;
      }
    }
    else
    {
      if (v15 != 34)
      {
LABEL_20:
        objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSInvalidUnarchiveOperationException"), 4864, CFSTR("%@: value for key (%@) is not a 64-bit float"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeDoubleForKey_), a2);
        goto LABEL_21;
      }
      v16 = 5;
      if ((unint64_t)v13 < 0xFFFFFFFFFFFFFFFBLL && v14 >= (unint64_t)(v13 + 5))
      {
        v12 = COERCE_FLOAT(bswap32(*(_DWORD *)(v13 + 1)));
LABEL_18:
        result = 1;
        goto LABEL_22;
      }
    }
    objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSArchiverArchiveInconsistency"), 4864, CFSTR("overflow while attempting to read %lu bytes (float)"), v16);
    goto LABEL_20;
  }
  Count = CFArrayGetCount(v7);
  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    v11 = Value;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0);
  }
  else
  {
    Value = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
    v17 = Value;
  }
  v12 = 0.0;
  if (!Value)
    goto LABEL_21;
  if (CFGetTypeID(Value) != 22 || !CFNumberIsFloatType((CFNumberRef)Value))
    goto LABEL_20;
  CFNumberGetValue((CFNumberRef)Value, kCFNumberFloat64Type, valuePtr);
  result = 1;
  v12 = *(double *)valuePtr;
LABEL_22:
  *a3 = v12;
  return result;
}

uint64_t specialized NSCoder.decodeObject<A>(of:forKey:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  void *v3;
  const char *ObjCClassFromMetadata;
  uint64_t v5;
  id v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[32];

  type metadata accessor for NSMorphologyPronoun(0, a3);
  ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
  v5 = String._bridgeToObjectiveCImpl()();
  v6 = (id)__NSCoderDecodeObjectOfClassForKey(v3, ObjCClassFromMetadata, v5, 0);
  swift_unknownObjectRelease();
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  outlined init with take of LocalePreferences?((uint64_t)&v9, (uint64_t)v11, &demangling cache variable for type metadata for Any?);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)&v9, &demangling cache variable for type metadata for Any?);
  if (*((_QWORD *)&v10 + 1))
  {
    if (swift_dynamicCast())
      return v8;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v9, &demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  void *v0;
  const char *ObjCClassFromMetadata;
  uint64_t v2;
  id v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[32];

  ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
  v2 = String._bridgeToObjectiveCImpl()();
  v3 = (id)__NSCoderDecodeObjectOfClassForKey(v0, ObjCClassFromMetadata, v2, 0);
  swift_unknownObjectRelease();
  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v6 = 0u;
    v7 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v6, (uint64_t)v8);
  outlined init with take of Any?((uint64_t)v8, (uint64_t)&v6);
  if (*((_QWORD *)&v7 + 1))
  {
    if (swift_dynamicCast())
      return v5;
    else
      return 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v6, &demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t __NSCoderDecodeObjectOfClassForKey(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
    return objc_msgSend(a1, "decodeTopLevelObjectOfClass:forKey:error:", a2, a3);
  else
    return objc_msgSend(a1, "decodeObjectOfClass:forKey:", a2, a3);
}

double roundedSize(uint64_t a1, int a2, double a3)
{
  double v3;
  double v4;
  double v6;

  v3 = a3;
  if (a2)
  {
    LOBYTE(a3) = numberOfFractionDigits[a1];
    v4 = (double)*(unint64_t *)&a3;
  }
  else
  {
    v4 = 0.0;
    if (v3 >= 1.0e-20 && v3 < 100.0)
      v4 = (double)(uint64_t)(2 - vcvtmd_s64_f64(log10(v3)));
  }
  v6 = __exp10(v4);
  return round(v6 * v3) / v6;
}

void *specialized LocalizedStringResource._withExtensionForBundle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t countAndFlagsBits;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  unint64_t object;
  void (*v20)(char *, _QWORD);
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  const char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ObjectType;
  uint64_t (*v46)(Swift::String *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  NSObject *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  Swift::String v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  id v81;
  id v82;
  void *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  void *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  void *v106;
  id v107;
  void *v108;
  id v109;
  void *v110;
  void *v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  id v115;
  void *v116;
  unint64_t v117;
  os_log_type_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[16];
  Swift::String *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  Swift::String v132;
  char v133[8];
  __int128 v134;
  uint64_t v135;
  _BYTE v136[16];
  __int128 v137;
  Swift::String v138;
  uint64_t v139;
  Swift::String v140;
  uint64_t v141;
  _BYTE v142[16];
  Swift::String v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  _QWORD v148[2];
  uint64_t v149;
  uint64_t v150;

  v4 = v3;
  outlined init with take of LocalePreferences?(a1 + 96, (uint64_t)v142, &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?((uint64_t)v142, (uint64_t)v148, &demangling cache variable for type metadata for String?);
  if (!v148[1])
  {
    if (one-time initialization token for localizedStringLogger != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)localizedStringLogger);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25))
      goto LABEL_32;
    v26 = a2;
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    v28 = "LocalizedStringResource did not contain a sandbox extension token. Proceeding to lookup localized string witho"
          "ut consuming a sandbox extension.";
    goto LABEL_31;
  }
  v8 = v148[0];
  v140 = *(Swift::String *)(a1 + 72);
  v141 = *(_QWORD *)(a1 + 88);
  outlined retain of URL((void **)&v140);
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
  {
    v131 = v8;
    v129 = a2;
    v132._countAndFlagsBits = v3;
    v143 = v140;
    v144 = v141;
    outlined retain of URL((void **)&v140);
    v9 = URL.path(percentEncoded:)(1);
    v143 = v9;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v9._countAndFlagsBits, (unint64_t)v9._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v138._countAndFlagsBits = Set.init(minimumCapacity:)();
    v10 = specialized Set._Variant.insert(_:)(&v134, 0x2FuLL);
    countAndFlagsBits = v138._countAndFlagsBits;
    v12 = v143;
    v13 = ((unint64_t)v143._object >> 56) & 0xF;
    if (((uint64_t)v143._object & 0x2000000000000000) == 0)
      v13 = v143._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      v128 = a3;
      v138 = v143;
      MEMORY[0x1E0C80A78](v10);
      v122 = &v138;
      v123 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      v14 = v132._countAndFlagsBits;
      v15 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v121, v12._countAndFlagsBits, (unint64_t)v12._object);
      v4 = v14;
      if (v16 == 1)
      {
        v17 = v14;
        object = (unint64_t)v138._object;
        v18 = v138._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v20 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v18, object, countAndFlagsBits);
        v22 = v21;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v4 = v17;
      }
      else
      {
        v20 = (void (*)(char *, _QWORD))v15;
        v22 = v16;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      a3 = v128;
      a2 = v129;
      if (!v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v140);
        v20 = 0;
        v22 = 0xE000000000000000;
        goto LABEL_23;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v20 = 0;
      v22 = 0xE000000000000000;
      v4 = v132._countAndFlagsBits;
      a2 = v129;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v140);
LABEL_23:
    v29 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v20, v22);
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  if (!objc_msgSend(objc_retainAutorelease((id)v140._countAndFlagsBits), sel_fileSystemRepresentation))
  {
    outlined release of URL((id *)&v140);
    goto LABEL_25;
  }
  v29 = foundation_sandbox_check_path();
LABEL_24:
  outlined release of URL((id *)&v140);
  if (!v29)
  {
    if (one-time initialization token for localizedStringLogger != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)localizedStringLogger);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25))
      goto LABEL_32;
    v26 = a2;
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    v28 = "LocalizedStringResource contained a sandbox extension token but sandbox check passed without consuming the tok"
          "en. Proceeding to lookup localized string without consuming a sandbox extension.";
LABEL_31:
    _os_log_impl(&dword_1817D9000, v24, v25, v28, v27, 2u);
    v32 = v27;
    a2 = v26;
    MEMORY[0x186DA9E78](v32, -1, -1);
LABEL_32:

LABEL_33:
    v130 = 0;
    v131 = 1;
    goto LABEL_34;
  }
LABEL_25:
  String.utf8CString.getter();
  v30 = sandbox_extension_consume();
  swift_release();
  if (v30 != -1)
  {
    v130 = v30;
    v131 = 0;
    goto LABEL_34;
  }
  if (one-time initialization token for localizedStringLogger != -1)
    swift_once();
  v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)localizedStringLogger);
  outlined retain of LocalizedStringResource(a1);
  outlined retain of LocalizedStringResource(a1);
  v54 = Logger.logObject.getter();
  v55 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v54, (os_log_type_t)v55))
  {
    outlined release of LocalizedStringResource(a1);
    outlined release of LocalizedStringResource(a1);

    goto LABEL_33;
  }
  LODWORD(v131) = v55;
  v132._countAndFlagsBits = v4;
  v56 = swift_slowAlloc();
  v57 = swift_slowAlloc();
  *(_QWORD *)&v134 = v57;
  *(_DWORD *)v56 = 136315394;
  outlined retain of URL((void **)&v140);
  v58 = _foundation_swift_url_feature_enabled();
  v128 = a3;
  v130 = v57;
  if ((v58 & 1) != 0)
  {
    v127 = v54;
    v129 = a2;
    v143 = v140;
    v144 = v141;
    outlined retain of URL((void **)&v140);
    v59 = URL.path(percentEncoded:)(1);
    v143 = v59;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v59._countAndFlagsBits, (unint64_t)v59._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v138._countAndFlagsBits = Set.init(minimumCapacity:)();
    v60 = specialized Set._Variant.insert(_:)(&v149, 0x2FuLL);
    v61 = v138._countAndFlagsBits;
    v62 = v143;
    v63 = ((unint64_t)v143._object >> 56) & 0xF;
    if (((uint64_t)v143._object & 0x2000000000000000) == 0)
      v63 = v143._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v63)
    {
      v138 = v143;
      MEMORY[0x1E0C80A78](v60);
      v122 = &v138;
      v123 = v61;
      swift_bridgeObjectRetain();
      v64 = v132._countAndFlagsBits;
      v65 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v121, v62._countAndFlagsBits, (unint64_t)v62._object);
      v132._countAndFlagsBits = v64;
      if (v66 == 1)
      {
        v67 = v138;
        swift_bridgeObjectRetain();
        v68 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v67._countAndFlagsBits, (unint64_t)v67._object, v61);
        v70 = v69;
        swift_bridgeObjectRelease();
      }
      else
      {
        v68 = (uint64_t)v65;
        v70 = v66;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a2 = v129;
      if (!v70)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v140);
        v68 = 0;
        v70 = 0xE000000000000000;
        goto LABEL_106;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v68 = 0;
      v70 = 0xE000000000000000;
      a2 = v129;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v140);
LABEL_106:
    outlined release of URL((id *)&v140);
    goto LABEL_107;
  }
  v100 = a2;
  v101 = (void *)v140._countAndFlagsBits;
  v102 = objc_msgSend((id)v140._countAndFlagsBits, sel__parameterString);
  if (!v102)
  {
    v115 = objc_msgSend(v101, sel_path);
    if (v115)
    {
      v116 = v115;
      v68 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
      v70 = v117;

      outlined release of URL((id *)&v140);
    }
    else
    {
      outlined release of URL((id *)&v140);
      v68 = 0;
      v70 = 0xE000000000000000;
    }
    goto LABEL_108;
  }
  v103 = v102;
  v127 = v54;
  v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
  v106 = v105;

  if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
    && (v107 = objc_msgSend(v101, sel_path)) != 0)
  {
    v108 = v107;
    v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    v111 = v110;

    v143._countAndFlagsBits = (uint64_t)v109;
    v143._object = v111;
    swift_bridgeObjectRetain();
    v112._countAndFlagsBits = 59;
    v112._object = (void *)0xE100000000000000;
    String.append(_:)(v112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v113._countAndFlagsBits = (uint64_t)v104;
    v113._object = v106;
    String.append(_:)(v113);
    swift_bridgeObjectRelease();
  }
  else
  {
    v143._countAndFlagsBits = 59;
    v143._object = (void *)0xE100000000000000;
    v114._countAndFlagsBits = (uint64_t)v104;
    v114._object = v106;
    String.append(_:)(v114);
  }
  swift_bridgeObjectRelease();
  outlined release of URL((id *)&v140);
  v70 = (unint64_t)v143._object;
  v68 = v143._countAndFlagsBits;
  a2 = v100;
LABEL_107:
  v54 = v127;
LABEL_108:
  v118 = v131;
  v143._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v70, (uint64_t *)&v134);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined release of LocalizedStringResource(a1);
  v119 = outlined release of LocalizedStringResource(a1);
  *(_WORD *)(v56 + 12) = 1026;
  LODWORD(v143._countAndFlagsBits) = MEMORY[0x186DA4118](v119);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl(&dword_1817D9000, v54, v118, "Unable to consume sandbox extension for path '%s' (errno: %{public}d)", (uint8_t *)v56, 0x12u);
  v131 = 1;
  v120 = v130;
  swift_arrayDestroy();
  MEMORY[0x186DA9E78](v120, -1, -1);
  MEMORY[0x186DA9E78](v56, -1, -1);

  v130 = 0;
  v4 = v132._countAndFlagsBits;
  a3 = v128;
LABEL_34:
  v138 = *(Swift::String *)(a1 + 72);
  v139 = *(_QWORD *)(a1 + 88);
  v33 = v138._countAndFlagsBits;
  v34 = objc_allocWithZone((Class)NSBundle);
  outlined retain of URL((void **)&v138);
  v35 = objc_msgSend(v34, sel_initWithURL_, v33);
  if (!v35)
  {
    outlined release of URL((id *)&v138);
    v40 = 0;
    goto LABEL_90;
  }
  v36 = v35;
  v37 = *(_QWORD *)(a2 + 32);
  if (v37)
  {
    v38 = v4;
    v39 = *(_QWORD *)(a2 + 24);
    outlined retain of String.LocalizationOptions(a2);
    goto LABEL_64;
  }
  v132._countAndFlagsBits = v4;
  v129 = a2;
  outlined retain of String.LocalizationOptions(a2);
  v41 = objc_msgSend(v36, sel_localizations);
  if (!v41)
    v41 = (id)_ContiguousArrayBuffer._asCocoaArray()();
  v42 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_18205C850;
  v128 = a3;
  v137 = *(_OWORD *)(a3 + 56);
  v44 = *((_QWORD *)&v137 + 1);
  ObjectType = swift_getObjectType();
  LOBYTE(v143._countAndFlagsBits) = 1;
  v46 = *(uint64_t (**)(Swift::String *, uint64_t, uint64_t))(v44 + 416);
  outlined retain of Locale((uint64_t)&v137);
  v47 = v46(&v143, ObjectType, v44);
  v49 = v48;
  outlined release of Locale((uint64_t)&v137);
  *(_QWORD *)(v43 + 32) = v47;
  *(_QWORD *)(v43 + 40) = v49;
  v50 = objc_msgSend(v42, sel_preferredLocalizationsFromArray_forPreferences_, v41, _ContiguousArrayBuffer._asCocoaArray()());

  swift_unknownObjectRelease();
  if (!v50)
  {
    v52 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v38 = v132._countAndFlagsBits;
    a3 = v128;
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      goto LABEL_59;
LABEL_62:
    swift_bridgeObjectRelease();
    v39 = 0;
    v37 = 0;
    goto LABEL_63;
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  v51 = swift_dynamicCastClass();
  v38 = v132._countAndFlagsBits;
  a3 = v128;
  if (!v51)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v50, sel_copy);
    v71 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v52 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v71);

    swift_bridgeObjectRelease();
    if (v52[2])
      goto LABEL_59;
    goto LABEL_62;
  }
  v52 = (_QWORD *)v51;

  if (!v52[2])
    goto LABEL_62;
LABEL_59:
  v39 = v52[4];
  v37 = v52[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_63:
  a2 = v129;
LABEL_64:
  v72 = *(_BYTE *)(a2 + 16);
  v73 = *(unsigned __int8 *)(a2 + 17);
  v74 = *(_QWORD *)(a3 + 8);
  v127 = *(NSObject **)a3;
  v132 = *(Swift::String *)a2;
  v143 = v132;
  LOBYTE(v144) = v72;
  v124 = v73;
  BYTE1(v144) = v73;
  v125 = v39;
  v145 = v39;
  v146 = v37;
  v147 = 1;
  outlined init with take of LocalePreferences?(a3 + 40, (uint64_t)v136, &demangling cache variable for type metadata for String?);
  v75 = *(_QWORD *)(a3 + 56);
  v76 = *(_QWORD *)(a3 + 64);
  if (v132._countAndFlagsBits)
    v77 = v132._countAndFlagsBits;
  else
    v77 = MEMORY[0x1E0DEE9D8];
  v134 = *(_OWORD *)(a3 + 16);
  v135 = *(_QWORD *)(a3 + 32);
  v78 = v134;
  v149 = v77;
  v150 = 0;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v128 = v74;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79 = v36;
  swift_bridgeObjectRetain();
  outlined retain of String.LocalizationValue((uint64_t)&v134);
  swift_bridgeObjectRetain();
  v126 = v76;
  v80 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v78, &v149, v75, v76);
  v132._countAndFlagsBits = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v81 = v79;
  v129 = v80;
  if (v37)
  {
    swift_bridgeObjectRetain();
    v82 = objc_msgSend(v81, sel_localizations);
    if (!v82)
      v82 = (id)_ContiguousArrayBuffer._asCocoaArray()();
    v83 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = xmmword_18205C850;
    *(_QWORD *)(v84 + 32) = v125;
    *(_QWORD *)(v84 + 40) = v37;
    v85 = objc_msgSend(v83, sel_preferredLocalizationsFromArray_forPreferences_, v82, _ContiguousArrayBuffer._asCocoaArray()());

    swift_unknownObjectRelease();
    if (v85)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      v86 = swift_dynamicCastClass();
      if (v86)
      {
        v87 = (void *)v86;

      }
      else
      {
        swift_unknownObjectRelease();
        objc_msgSend(v85, sel_copy);
        v88 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        v87 = (void *)specialized _arrayForceCast<A, B>(_:)(v88);

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v87 = (void *)MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    v87 = 0;
  }
  v89 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v90 = String._bridgeToObjectiveCImpl()();
  outlined init with take of LocalePreferences?((uint64_t)v136, (uint64_t)&v149, &demangling cache variable for type metadata for String?);
  if (v150)
  {
    v91 = (void *)String._bridgeToObjectiveCImpl()();
    if (!v87)
      goto LABEL_81;
    goto LABEL_80;
  }
  v91 = 0;
  if (v87)
LABEL_80:
    v87 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_81:
  v92 = objc_msgSend(v81, sel_localizedStringForKey_value_table_localizations_, v89, v90, v91, v87);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
  v94 = v93;

  v95 = v129;
  if (!*(_QWORD *)(v129 + 16))
  {
    if ((v124 & 1) != 0
      || (String._bridgeToObjectiveCImpl()(),
          v98 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v98))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      goto LABEL_89;
    }

  }
  swift_unknownObjectRetain();
  v96 = v126;
  v97 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v95, v75, v126, v133);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v40 = specialized withVaList<A>(_:_:)(v97, (uint64_t)v40, v94, v75, v96);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_89:
  outlined release of String.LocalizationValue((uint64_t)&v134);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of URL((id *)&v138);
LABEL_90:
  if ((v131 & 1) == 0)
    sandbox_extension_release();
  return v40;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v15 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      v3 = v15;
      do
      {
        MEMORY[0x186DA53A8](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v15;
        }
        v7 = *(_QWORD *)(v3 + 16);
        v6 = *(_QWORD *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          v3 = v15;
        }
        ++v5;
        *(_QWORD *)(v3 + 16) = v7 + 1;
        v8 = v3 + 16 * v7;
        *(_QWORD *)(v8 + 32) = v13;
        *(_QWORD *)(v8 + 40) = v14;
      }
      while (v2 != v5);
    }
    else
    {
      v9 = a1 + 32;
      v3 = v15;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v15;
        }
        v11 = *(_QWORD *)(v3 + 16);
        v10 = *(_QWORD *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          v3 = v15;
        }
        *(_QWORD *)(v3 + 16) = v11 + 1;
        v12 = v3 + 16 * v11;
        *(_QWORD *)(v12 + 32) = v13;
        *(_QWORD *)(v12 + 40) = v14;
        v9 += 8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v12 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      v3 = v12;
      do
      {
        MEMORY[0x186DA53A8](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v12;
        }
        v7 = *(_QWORD *)(v3 + 16);
        v6 = *(_QWORD *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          v3 = v12;
        }
        ++v5;
        *(_QWORD *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v7 + 32));
      }
      while (v2 != v5);
    }
    else
    {
      v8 = a1 + 32;
      v3 = v12;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v12;
        }
        v10 = *(_QWORD *)(v3 + 16);
        v9 = *(_QWORD *)(v3 + 24);
        if (v10 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
          v3 = v12;
        }
        *(_QWORD *)(v3 + 16) = v10 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v10 + 32));
        v8 += 8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v16 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      v3 = v16;
      do
      {
        MEMORY[0x186DA53A8](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v16;
        }
        v7 = *(_QWORD *)(v3 + 16);
        v6 = *(_QWORD *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          v3 = v16;
        }
        ++v5;
        *(_QWORD *)(v3 + 16) = v7 + 1;
        v8 = v3 + 40 * v7;
        *(_QWORD *)(v8 + 64) = v15;
        *(_OWORD *)(v8 + 32) = v13;
        *(_OWORD *)(v8 + 48) = v14;
      }
      while (v2 != v5);
    }
    else
    {
      v9 = a1 + 32;
      v3 = v16;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v16;
        }
        v11 = *(_QWORD *)(v3 + 16);
        v10 = *(_QWORD *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          v3 = v16;
        }
        *(_QWORD *)(v3 + 16) = v11 + 1;
        v12 = v3 + 40 * v11;
        *(_QWORD *)(v12 + 64) = v15;
        *(_OWORD *)(v12 + 32) = v13;
        *(_OWORD *)(v12 + 48) = v14;
        v9 += 8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v16 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      v3 = v16;
      do
      {
        MEMORY[0x186DA53A8](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v16;
        }
        v7 = *(_QWORD *)(v3 + 16);
        v6 = *(_QWORD *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          v3 = v16;
        }
        ++v5;
        v8 = v3 + 32 * v7;
        *(_QWORD *)(v3 + 16) = v7 + 1;
        *(_QWORD *)(v8 + 32) = v13;
        *(_QWORD *)(v8 + 40) = v14;
        *(_OWORD *)(v8 + 48) = v15;
      }
      while (v2 != v5);
    }
    else
    {
      v9 = a1 + 32;
      v3 = v16;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v16;
        }
        v11 = *(_QWORD *)(v3 + 16);
        v10 = *(_QWORD *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          v3 = v16;
        }
        v12 = v3 + 32 * v11;
        *(_QWORD *)(v3 + 16) = v11 + 1;
        *(_QWORD *)(v12 + 32) = v13;
        *(_QWORD *)(v12 + 40) = v14;
        *(_OWORD *)(v12 + 48) = v15;
        v9 += 8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v15 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      v3 = v15;
      do
      {
        MEMORY[0x186DA53A8](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v15;
        }
        v7 = *(_QWORD *)(v3 + 16);
        v6 = *(_QWORD *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          v3 = v15;
        }
        ++v5;
        v8 = v3 + 24 * v7;
        *(_QWORD *)(v3 + 16) = v7 + 1;
        *(_QWORD *)(v8 + 32) = v13;
        *(_OWORD *)(v8 + 40) = v14;
      }
      while (v2 != v5);
    }
    else
    {
      v9 = a1 + 32;
      v3 = v15;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v15;
        }
        v11 = *(_QWORD *)(v3 + 16);
        v10 = *(_QWORD *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          v3 = v15;
        }
        v12 = v3 + 24 * v11;
        *(_QWORD *)(v3 + 16) = v11 + 1;
        *(_QWORD *)(v12 + 32) = v13;
        *(_OWORD *)(v12 + 40) = v14;
        v9 += 8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

unint64_t specialized static JSONEncoder.KeyEncodingStrategy._convertToSnakeCase(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t i;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t result;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t j;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;

  v3 = a2;
  v4 = a1;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a2) & 0xF;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v6 = String.index(after:)();
    v7 = 7;
    if (((v3 >> 60) & ((v4 & 0x800000000000000) == 0)) != 0)
      v7 = 11;
    v57 = 4 * v5;
    if (4 * v5 < v6 >> 14)
      goto LABEL_93;
    v58 = 15;
    v59 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v56 = v7 | (v5 << 16);
    while (1)
    {
      v8 = String.subscript.getter();
      v11 = v10;
      v12 = v8 >> 14;
      v14 = v13 >> 14;
      if (v8 >> 14 == v13 >> 14)
        break;
      v3 = v8;
      v15 = v9;
      swift_bridgeObjectRetain();
      v16 = Substring.UnicodeScalarView.index(before:)();
      v17 = (v15 >> 59) & 1;
      if ((v11 & 0x1000000000000000) == 0)
        LOBYTE(v17) = 1;
      v18 = 4 << v17;
      for (i = v3; ; i = Substring.UnicodeScalarView.index(_:offsetBy:)())
      {
        if ((i & 0xC) == v18 || (i & 1) == 0)
        {
          v20 = i;
          if ((i & 0xC) == v18)
            v20 = _StringGuts._slowEnsureMatchingEncoding(_:)(i, v15, v11);
          if (v20 >> 14 < v12 || v20 >> 14 >= v14)
          {
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
            goto LABEL_95;
          }
          if ((v20 & 1) == 0)
            _StringGuts.scalarAlignSlow(_:)(v20, v15, v11);
        }
        else if (i >> 14 < v12 || i >> 14 >= v14)
        {
          goto LABEL_90;
        }
        if ((v11 & 0x1000000000000000) != 0)
        {
          v21 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v11 & 0x2000000000000000) == 0 && (v15 & 0x1000000000000000) == 0)
            _StringObject.sharedUTF8.getter();
          v21 = _decodeScalar(_:startingAt:)();
        }
        v22 = v21;
        v23 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v21), 1);
        if (BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v22, v23, 0x700030001))
          break;
        if ((i ^ v16) < 0x4000)
        {
          v3 = v58;
LABEL_79:
          swift_bridgeObjectRelease();
          goto LABEL_80;
        }
      }
      v24 = Substring.UnicodeScalarView.index(after:)();
      result = swift_bridgeObjectRelease_n();
      v26 = i >> 14;
      if (i >> 14 < v58 >> 14 || v24 >> 14 < v26)
      {
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
        return result;
      }
      v27 = v59;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
        v27 = (_QWORD *)result;
      }
      v29 = v27[2];
      v28 = v27[3];
      if (v29 >= v28 >> 1)
      {
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
        v27 = (_QWORD *)result;
      }
      v27[2] = v29 + 1;
      v30 = &v27[2 * v29];
      v30[4] = v58;
      v30[5] = i;
      if (v57 < v26)
        goto LABEL_97;
      v59 = v27;
      v31 = String.subscript.getter();
      v34 = v33;
      v36 = v35 >> 14;
      v61 = v31 >> 14;
      if (v31 >> 14 == v35 >> 14)
      {
        v3 = i;
LABEL_80:
        i = (unint64_t)v59;
        goto LABEL_81;
      }
      v3 = v31;
      v37 = v32;
      swift_bridgeObjectRetain();
      v38 = Substring.UnicodeScalarView.index(before:)();
      v39 = (v37 >> 59) & 1;
      if ((v34 & 0x1000000000000000) == 0)
        LOBYTE(v39) = 1;
      v40 = 4 << v39;
      v60 = v38;
      for (j = v3; ; j = Substring.UnicodeScalarView.index(_:offsetBy:)())
      {
        if ((j & 0xC) == v40 || (j & 1) == 0)
        {
          v43 = j;
          if ((j & 0xC) == v40)
            v43 = _StringGuts._slowEnsureMatchingEncoding(_:)(j, v37, v34);
          if (v43 >> 14 < v61 || v43 >> 14 >= v36)
            goto LABEL_91;
          if ((v43 & 1) == 0)
            _StringGuts.scalarAlignSlow(_:)(v43, v37, v34);
        }
        else if (j >> 14 < v61 || j >> 14 >= v36)
        {
          goto LABEL_92;
        }
        if ((v34 & 0x1000000000000000) != 0)
        {
          v44 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v34 & 0x2000000000000000) == 0 && (v37 & 0x1000000000000000) == 0)
            _StringObject.sharedUTF8.getter();
          v44 = _decodeScalar(_:startingAt:)();
        }
        v45 = v44;
        v46 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(v44), 0);
        if (BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v45, v46, 0x700030000))
          break;
        if ((j ^ v60) < 0x4000)
        {
          v3 = i;
          goto LABEL_79;
        }
      }
      v47 = Substring.UnicodeScalarView.index(after:)();
      result = swift_bridgeObjectRelease_n();
      if (v47 >> 14 < j >> 14)
        goto LABEL_98;
      result = String.index(after:)();
      if (j >> 14 != result >> 14)
      {
        result = String.index(before:)();
        if (i >> 14 > result >> 14)
          goto LABEL_100;
        v48 = result;
        v50 = v59[2];
        v49 = v59[3];
        if (v50 >= v49 >> 1)
        {
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v59);
          v59 = (_QWORD *)result;
        }
        v59[2] = v50 + 1;
        v51 = &v59[2 * v50];
        v51[4] = i;
        v51[5] = v48;
        i = v48;
      }
      v58 = i;
      if (v57 < v47 >> 14)
        goto LABEL_99;
    }
    v3 = v58;
    i = (unint64_t)v59;
LABEL_81:
    swift_bridgeObjectRelease();
    if (v57 < v3 >> 14)
      goto LABEL_94;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_95:
      i = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(i + 16) + 1, 1, (_QWORD *)i);
    v53 = *(_QWORD *)(i + 16);
    v52 = *(_QWORD *)(i + 24);
    if (v53 >= v52 >> 1)
      i = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, (_QWORD *)i);
    *(_QWORD *)(i + 16) = v53 + 1;
    v54 = i + 16 * v53;
    *(_QWORD *)(v54 + 32) = v3;
    *(_QWORD *)(v54 + 40) = v56;
    swift_bridgeObjectRetain();
    v55 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50122_s10Foundation11JSONEncoderC19KeyEncodingStrategyO19_convertToSnakeCase33_12768CA107A31EF2DCE034FD75B541C9LLyS2SFZSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_n(v55);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
    v4 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(uint64_t result, char a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  _BYTE v5[16];
  int v6;
  _UNKNOWN **v7;
  int v8;
  _UNKNOWN **v9;
  int v10;
  _UNKNOWN **v11;
  int v12;
  _UNKNOWN **v13;
  int v14;
  _UNKNOWN **v15;
  int v16;
  _UNKNOWN **v17;
  int v18;
  _UNKNOWN **v19;
  int v20;
  _UNKNOWN **v21;
  int v22;
  _UNKNOWN **v23;
  int v24;
  _UNKNOWN **v25;
  int v26;
  _UNKNOWN **v27;
  int v28;
  _UNKNOWN **v29;
  int v30;
  _UNKNOWN **v31;
  int v32;
  _UNKNOWN **v33;
  int v34;
  _UNKNOWN **v35;
  int v36;
  _UNKNOWN **v37;
  int v38;
  _UNKNOWN **v39;
  int v40;
  _UNKNOWN **v41;
  int v42;
  _UNKNOWN **v43;
  int v44;
  _UNKNOWN **v45;
  int v46;
  _UNKNOWN **v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = qword_1820D9600[a2];
  v6 = 15;
  v7 = &__CFUniCharLetterCharacterSetBitmap;
  v8 = 2;
  v9 = &__CFUniCharLowercaseLetterCharacterSetBitmap;
  v10 = 2;
  v11 = &__CFUniCharUppercaseLetterCharacterSetBitmap;
  v12 = 15;
  v13 = &__CFUniCharNonBaseCharacterSetBitmap;
  v14 = 3;
  v15 = &__CFUniCharCanonicalDecomposableCharacterSetBitmap;
  v16 = 15;
  v17 = &__CFUniCharAlphanumericCharacterSetBitmap;
  v18 = 2;
  v19 = &__CFUniCharPunctuationCharacterSetBitmap;
  v20 = 15;
  v21 = &__CFUniCharLegalCharacterSetBitmap;
  v22 = 1;
  v23 = &__CFUniCharTitlecaseLetterCharacterSetBitmap;
  v24 = 2;
  v25 = &__CFUniCharSymbolAndOperatorCharacterSetBitmap;
  v26 = 2;
  v27 = &__CFUniCharCompatibilityDecomposableCharacterSetBitmap;
  v28 = 2;
  v29 = &__CFUniCharHfsPlusDecomposableCharacterSetBitmap;
  v30 = 2;
  v31 = &__CFUniCharStrongRightToLeftCharacterSetBitmap;
  v32 = 2;
  v33 = &__CFUniCharHasNonSelfLowercaseMappingBitmap;
  v34 = 2;
  v35 = &__CFUniCharHasNonSelfUppercaseMappingBitmap;
  v36 = 2;
  v37 = &__CFUniCharHasNonSelfTitlecaseMappingBitmap;
  v38 = 1;
  v39 = &__CFUniCharHasNonSelfCaseFoldingMappingBitmap;
  v40 = 2;
  v41 = &__CFUniCharHasMirroredMappingBitmap;
  v42 = 15;
  v43 = &__CFUniCharControlAndFormatterBitmap;
  v44 = 15;
  v45 = &__CFUniCharCaseIgnorableCharacterSetBitmap;
  v46 = 15;
  v47 = &__CFUniCharGraphemeExtendCharacterSetBitmap;
  v3 = (unsigned int *)&v5[16 * v2];
  if (*v3 <= result)
    return 0;
  v4 = *((_QWORD *)v3 + 1);
  if (v4)
    return *(_QWORD *)(v4 + 8 * result);
  __break(1u);
  return result;
}

BOOL BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a2)
    return 0;
  v3 = a1 >> (BYTE2(a3) & 0xF);
  if ((a3 & 0xFFF00000) != 0)
    v3 = 0;
  v4 = *(unsigned __int8 *)(a2 + v3);
  if ((unsigned __int16)(WORD2(a3) & a1) >= 0x20u)
    v5 = 0;
  else
    v5 = (1 << (BYTE4(a3) & a1));
  return (v5 & v4) != 0;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit._Unit>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int8>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.LanguageCode>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.Region>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.Collation>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.Currency>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UDateFormatField>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field.Option>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GenericArgument>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PresentationIntent.TableColumn>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DateComponents>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 288);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 288 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Date>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.RecurrenceRule.Month>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String.LocalizationValue.FormatArgument>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 120 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ICUDateFormatter.AttributePosition>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSCalendarUnit>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_XMLPlistEncodingFormat.Reference>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExpressionStructure.Argument>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 32 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExpressionStructure>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Type>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.Language>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<iovec>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(component: Calendar.Component, multitude: Int)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field.Option>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8])
      memmove(v12, v13, 112 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[112 * v8] || v12 >= &v13[112 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

void *String.init(localized:table:bundle:locale:comment:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  id v22;
  _QWORD v23[4];
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v7 = *a1;
  v8 = *a5;
  v9 = a5[1];
  v24 = 256;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v23[0] = MEMORY[0x1E0DEE9D8];
  memset(&v23[1], 0, 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v21 = v9;
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v7, v23, v8, v9);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a4)
    v11 = a4;
  else
    v11 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v12 = String._bridgeToObjectiveCImpl()();
  v22 = a4;
  swift_bridgeObjectRelease();
  v13 = String._bridgeToObjectiveCImpl()();
  if (a3)
    v14 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v14 = 0;
  v15 = objc_msgSend(v11, sel_localizedStringForKey_value_table_localizations_, v12, v13, v14, 0);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  if (*(_QWORD *)(v10 + 16))
  {
    swift_unknownObjectRetain();
    v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v10);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v16 = specialized withVaList<A>(_:_:)(v19, (uint64_t)v16, v18, v8, v21);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v16;
}

uint64_t outlined retain of Locale(uint64_t a1)
{
  swift_unknownObjectRetain();
  return a1;
}

uint64_t outlined release of Locale(uint64_t a1)
{
  swift_unknownObjectRelease();
  return a1;
}

uint64_t outlined retain of String.LocalizationOptions(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t protocol witness for _LocaleProtocol.identifier.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

id *outlined release of URL(id *a1)
{

  swift_release();
  swift_release();
  return a1;
}

void **outlined retain of URL(void **a1)
{
  void *v2;
  id v3;

  v2 = *a1;
  swift_retain();
  v3 = v2;
  swift_retain();
  return a1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t outlined retain of String.LocalizationValue(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of String.LocalizationValue(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t foundation_sandbox_check_path()
{
  getpid();
  return sandbox_check();
}

uint64_t Data.count.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(_QWORD))((char *)&loc_1818280A0 + *((int *)qword_181E4F558 + (a2 >> 62))))(0);
}

uint64_t sub_1818280B0(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

void ____addOperations_block_invoke_3(uint64_t a1)
{
  __NSOQSchedule_f(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t NSKVOPendingNotificationStackIdentifierEqual(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (*(_QWORD *)a1 != *a2)
    return 0;
  result = objc_msgSend(*(id *)(a1 + 8), "isEqual:", a2[1]);
  if ((_DWORD)result)
    return *(_QWORD *)(a1 + 16) == a2[2];
  return result;
}

ValueMetadata *type metadata accessor for Locale.LanguageCode()
{
  return &type metadata for Locale.LanguageCode;
}

uint64_t String.init(data:encoding:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return specialized String.init<A>(bytes:encoding:)(a1, a2, *a3);
}

void static Measurement<>.FormatStyle.UnitWidth.abbreviated.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

ValueMetadata *type metadata accessor for URLQueryItem()
{
  return &type metadata for URLQueryItem;
}

id CGFloat.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_doubleValue);
}

void *_NSFaultInObject(unint64_t *a1, void *a2, uint64_t a3)
{
  void *result;
  unint64_t v6;

  result = (void *)*a1;
  if (result == a2)
  {
    result = (void *)(*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
    while (1)
    {
      v6 = __ldaxr(a1);
      if ((void *)v6 != a2)
        break;
      if (!__stlxr((unint64_t)result, a1))
        return result;
    }
    __clrex();
    if (result != (void *)*a1)
    {

      return (void *)*a1;
    }
  }
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance String(void *a1, _QWORD *a2)
{
  id result;
  uint64_t v5;

  swift_bridgeObjectRelease();
  result = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

void _NSSwiftLocale.object(forKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t ObjectType;
  void (*v60)(uint64_t, uint64_t);
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  unsigned __int8 v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  void **v82;
  id v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t *__return_ptr, uint64_t, uint64_t);
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149[4];

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997E0]);
  v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
LABEL_15:
    v21 = objc_msgSend(v2, sel_localeIdentifier);
    goto LABEL_16;
  }
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997E8]);
  v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v13 == v14)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
LABEL_19:
    v21 = objc_msgSend(v2, sel_languageCode);
    goto LABEL_16;
  }
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997B0]);
  v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
LABEL_21:
    v28 = objc_msgSend(v2, sel_countryCode);
    goto LABEL_22;
  }
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
    goto LABEL_21;
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99820]);
  v31 = v30;
  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v31 == v32)
  {
    swift_bridgeObjectRelease_n();
LABEL_28:
    v28 = objc_msgSend(v2, sel_scriptCode);
    goto LABEL_22;
  }
  v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0)
    goto LABEL_28;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99848]);
  v36 = v35;
  if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v36 == v37)
  {
    swift_bridgeObjectRelease_n();
LABEL_33:
    v28 = objc_msgSend(v2, sel_variantCode);
    goto LABEL_22;
  }
  v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v38 & 1) != 0)
    goto LABEL_33;
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997D0]);
  v41 = v40;
  if (v39 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v41 == v42)
  {
    swift_bridgeObjectRelease_n();
LABEL_38:
    v44 = objc_msgSend(v2, sel_exemplarCharacterSet);
    objc_msgSend(v44, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = v148;
    *(_BYTE *)(v45 + 24) = 0;

    *(_QWORD *)(a2 + 24) = &type metadata for CharacterSet;
    *(_QWORD *)a2 = v45;
    return;
  }
  v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v43 & 1) != 0)
    goto LABEL_38;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99798]);
  v48 = v47;
  if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v48 == v49)
  {
    swift_bridgeObjectRelease_n();
LABEL_43:
    v21 = objc_msgSend(v2, sel_calendarIdentifier);
    goto LABEL_16;
  }
  v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) != 0)
    goto LABEL_43;
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99790]);
  v53 = v52;
  if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v53 == v54)
  {
    swift_bridgeObjectRelease_n();
LABEL_48:
    v56 = &v2[OBJC_IVAR____NSSwiftLocale_locale];
    v57 = *(_QWORD *)&v2[OBJC_IVAR____NSSwiftLocale_locale];
    v58 = *((_QWORD *)v56 + 1);
    *(_QWORD *)(a2 + 24) = &type metadata for Calendar;
    ObjectType = swift_getObjectType();
    v60 = *(void (**)(uint64_t, uint64_t))(v58 + 192);
    swift_unknownObjectRetain();
    v60(ObjectType, v58);
    v149[0] = v57;
    v149[1] = v58;
    Calendar.locale.setter(v149);
    return;
  }
  v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v55 & 1) != 0)
    goto LABEL_48;
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997A0]);
  v63 = v62;
  if (v61 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v63 == v64)
  {
    swift_bridgeObjectRelease_n();
LABEL_53:
    v28 = objc_msgSend(v2, sel_collationIdentifier);
    goto LABEL_22;
  }
  v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v65 & 1) != 0)
    goto LABEL_53;
  v66 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99840]);
  v68 = v67;
  if (v66 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v68 == v69)
  {
    swift_bridgeObjectRelease_n();
LABEL_58:
    v71 = objc_msgSend(v2, sel_usesMetricSystem);
    *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEAFA0];
    *(_BYTE *)a2 = v71;
    return;
  }
  v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v70 & 1) != 0)
    goto LABEL_58;
  v72 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997F0]);
  v74 = v73;
  if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v74 == v75)
  {
    swift_bridgeObjectRelease_n();
LABEL_63:
    v77 = *(_QWORD *)&v2[OBJC_IVAR____NSSwiftLocale_locale + 8];
    v78 = swift_getObjectType();
    v79 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v77 + 296);
    swift_unknownObjectRetain();
    v79(v149, v78, v77);
    swift_unknownObjectRelease();
    v80 = v149[2];
    v81 = v149[3];
    if (one-time initialization token for us != -1)
      swift_once();
    if (xmmword_1EDC3E868 == __PAIR128__(v81, v80) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v82 = (void **)MEMORY[0x1E0C99808];
    }
    else
    {
      if (one-time initialization token for uk != -1)
        swift_once();
      if (xmmword_1EDC3A1E0 == __PAIR128__(v81, v80) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v82 = (void **)MEMORY[0x1E0C99800];
      }
      else
      {
        if (one-time initialization token for metric != -1)
          swift_once();
        if (xmmword_1EDC3AF40 != __PAIR128__(v81, v80))
          _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v82 = (void **)MEMORY[0x1E0C997F8];
      }
    }
    goto LABEL_68;
  }
  v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v76 & 1) != 0)
    goto LABEL_63;
  v85 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99828]);
  v87 = v86;
  if (v85 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v87 == v88)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_78;
  }
  v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v89 & 1) == 0)
  {
    v93 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997C8]);
    v95 = v94;
    if (v93 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v95 == v96)
    {
      swift_bridgeObjectRelease_n();
LABEL_90:
      v21 = objc_msgSend(v2, sel_decimalSeparator);
      goto LABEL_16;
    }
    v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v97 & 1) != 0)
      goto LABEL_90;
    v98 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997D8]);
    v100 = v99;
    if (v98 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v100 == v101)
    {
      swift_bridgeObjectRelease_n();
LABEL_95:
      v21 = objc_msgSend(v2, sel_groupingSeparator);
      goto LABEL_16;
    }
    v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v102 & 1) != 0)
      goto LABEL_95;
    v103 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997C0]);
    v105 = v104;
    if (v103 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v105 == v106)
    {
      swift_bridgeObjectRelease_n();
LABEL_100:
      v21 = objc_msgSend(v2, sel_currencySymbol);
      goto LABEL_16;
    }
    v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v107 & 1) != 0)
      goto LABEL_100;
    v108 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997B8]);
    v110 = v109;
    if (v108 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v110 == v111)
    {
      swift_bridgeObjectRelease_n();
LABEL_105:
      v28 = objc_msgSend(v2, sel_currencyCode);
LABEL_22:
      v22 = v28;
      if (!v22)
      {
LABEL_23:
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        return;
      }
LABEL_17:
      v23 = v22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v26 = v25;

      *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEA968];
      *(_QWORD *)a2 = v24;
      *(_QWORD *)(a2 + 8) = v26;
      return;
    }
    v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v112 & 1) != 0)
      goto LABEL_105;
    v113 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997A8]);
    v115 = v114;
    if (v113 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v115 == v116)
      goto LABEL_113;
    v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v117 & 1) != 0)
    {
LABEL_114:
      v21 = objc_msgSend(v2, sel_collatorIdentifier);
      goto LABEL_16;
    }
    if (one-time initialization token for cfLocaleCollatorID != -1)
      swift_once();
    v118 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSLocaleKey.cfLocaleCollatorID);
    v120 = v119;
    if (v118 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v120 == v121)
    {
LABEL_113:
      swift_bridgeObjectRelease_n();
      goto LABEL_114;
    }
    v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v122 & 1) != 0)
      goto LABEL_114;
    v123 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99810]);
    v125 = v124;
    if (v123 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v125 == v126)
    {
      swift_bridgeObjectRelease_n();
LABEL_120:
      v21 = objc_msgSend(v2, sel_quotationBeginDelimiter);
      goto LABEL_16;
    }
    v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v127 & 1) != 0)
      goto LABEL_120;
    v128 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99818]);
    v130 = v129;
    if (v128 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v130 == v131)
    {
      swift_bridgeObjectRelease_n();
LABEL_125:
      v21 = objc_msgSend(v2, sel_quotationEndDelimiter);
      goto LABEL_16;
    }
    v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v132 & 1) != 0)
      goto LABEL_125;
    v133 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99780]);
    v135 = v134;
    if (v133 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v135 == v136)
    {
      swift_bridgeObjectRelease_n();
LABEL_130:
      v21 = objc_msgSend(v2, sel_alternateQuotationBeginDelimiter);
      goto LABEL_16;
    }
    v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v137 & 1) != 0)
      goto LABEL_130;
    v138 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99788]);
    v140 = v139;
    if (v138 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v140 == v141)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v142 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v142 & 1) == 0)
      {
        if (one-time initialization token for languageIdentifier != -1)
          swift_once();
        v143 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSLocaleKey.languageIdentifier);
        v145 = v144;
        if (v143 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v145 == v146)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v147 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v147 & 1) == 0)
            goto LABEL_23;
        }
        v21 = objc_msgSend(v2, sel_languageIdentifier);
        goto LABEL_16;
      }
    }
    v21 = objc_msgSend(v2, sel_alternateQuotationEndDelimiter);
LABEL_16:
    v22 = v21;
    goto LABEL_17;
  }
LABEL_78:
  v90 = *(_QWORD *)&v2[OBJC_IVAR____NSSwiftLocale_locale + 8];
  v91 = swift_getObjectType();
  v92 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v90 + 408);
  swift_unknownObjectRetain();
  v92(v149, v91, v90);
  swift_unknownObjectRelease();
  if (LOBYTE(v149[0]) == 1)
    v82 = (void **)MEMORY[0x1E0C99830];
  else
    v82 = (void **)MEMORY[0x1E0C99838];
LABEL_68:
  v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v82);
  *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEA968];
  *(_QWORD *)a2 = v83;
  *(_QWORD *)(a2 + 8) = v84;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance String(void *a1, id *a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  *a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2[1] = v4;
  return 1;
}

id static String._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  int isTaggedPointer;
  id v3;
  void *v4;
  uint64_t TaggedPointerTag;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id result;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  if (!a1)
    return 0;
  isTaggedPointer = _objc_isTaggedPointer((unint64_t)a1);
  v3 = a1;
  v4 = v3;
  if (!isTaggedPointer)
  {
LABEL_6:
    if (__CFStringIsCF())
    {

    }
    else
    {
      v7 = v4;
      v8 = String.init(_nativeStorage:)();
      if (v9)
      {
        v6 = v8;

        return (id)v6;
      }
      if (objc_msgSend(v7, sel_length))
        return (id)String.init(_cocoaString:)();

    }
    return 0;
  }
  TaggedPointerTag = _objc_getTaggedPointerTag((uint64_t)v3);
  if ((_DWORD)TaggedPointerTag != 22)
  {
    if ((_DWORD)TaggedPointerTag == 2)
    {
      MEMORY[0x1E0C80A78](TaggedPointerTag);
      v6 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();

      return (id)v6;
    }
    goto LABEL_6;
  }
  v10 = objc_retainAutorelease(v4);
  result = objc_msgSend(v10, sel_UTF8String);
  if (result)
  {
    v12 = result;
    v13 = MEMORY[0x186DA4658]();
    if (v14)
    {
      v6 = v13;

      return (id)v6;
    }
    result = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithUTF8String_, v12);
    if (result)
    {
      v15 = result;
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return (id)v6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t _objc_isTaggedPointer(unint64_t a1)
{
  return a1 >> 63;
}

uint64_t _objc_getTaggedPointerTag(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v1 = 0;
  v2 = *MEMORY[0x1E0DE7C58];
  if ((~a1 & 0xC000000000000007) == 0)
    v2 = 0;
  v3 = v2 ^ a1;
  do
  {
    if ((v3 & 7) == *(_BYTE *)(MEMORY[0x1E0DE7C48] + v1))
      break;
    ++v1;
  }
  while (v1 != 7);
  v4 = v1 | v3;
  v5 = v1 & 7;
  v6 = (v4 >> 55) + 8;
  if (v5 == 7)
    return v6;
  else
    return v5;
}

uint64_t protocol witness for _LocaleProtocol.languageCode.getter in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.languageCode.getter((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.languageCode.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.languageCode.getter(a1, a2);
}

uint64_t closure #1 in _LocaleICU.languageCode.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int Language;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int Script;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int Country;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *object;
  Swift::String v20;
  uint64_t countAndFlagsBits;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  _BYTE v40[224];
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  result = *(_QWORD *)(a1 + 8);
  if (!result)
  {
    *a2 = 0;
    a2[1] = 0;
    return result;
  }
  if (result != 1)
  {
    *a2 = *(_QWORD *)a1;
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }
  v56 = a2;
  v4 = swift_bridgeObjectRetain();
  MEMORY[0x1E0C80A78](v4);
  LODWORD(v64) = 0;
  String.utf8CString.getter();
  Language = uloc_getLanguage();
  swift_release();
  v6 = 0;
  v7 = 0;
  if (Language > 0)
  {
    v40[Language] = 0;
    v6 = MEMORY[0x186DA4658](v40, 0);
  }
  v8 = v6;
  v55 = v7;
  MEMORY[0x1E0C80A78](v6);
  LODWORD(v64) = 0;
  String.utf8CString.getter();
  Script = uloc_getScript();
  v10 = swift_release();
  v11 = 0;
  if ((int)v64 > 0)
  {
    v63 = 0;
  }
  else
  {
    v63 = 0;
    if (Script > 0)
    {
      v40[Script] = 0;
      v10 = MEMORY[0x186DA4658](v40);
      v11 = v10;
      v63 = v12;
    }
  }
  MEMORY[0x1E0C80A78](v10);
  LODWORD(v64) = 0;
  String.utf8CString.getter();
  Country = uloc_getCountry();
  swift_release();
  v14 = 0;
  v15 = 0;
  if ((int)v64 <= 0 && Country > 0)
  {
    v40[Country] = 0;
    v14 = MEMORY[0x186DA4658](v40);
    v15 = v16;
  }
  swift_bridgeObjectRelease();
  v17 = v55;
  if (v55)
  {
    v18 = v8;
    v20 = String.lowercased()();
    object = v20._object;
    countAndFlagsBits = v20._countAndFlagsBits;
  }
  else
  {
    v18 = 0;
    countAndFlagsBits = 0;
    object = 0;
  }
  v60 = object;
  if (v63)
  {
    v64 = v11;
    v65 = v63;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    v22 = String._capitalized()();
    v61 = v22._object;
    v62 = v22._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15)
    {
LABEL_19:
      v59 = v14;
      v23 = String.uppercased()();
      v57 = v23._object;
      v58 = v23._countAndFlagsBits;
      v24 = v15;
      goto LABEL_22;
    }
  }
  else
  {
    v11 = 0;
    v61 = 0;
    v62 = 0;
    if (v15)
      goto LABEL_19;
  }
  v24 = v15;
  v58 = 0;
  v59 = 0;
  v57 = 0;
LABEL_22:
  v25 = *(_QWORD *)a1;
  v50 = *(_QWORD *)(a1 + 8);
  v51 = v25;
  v26 = *(_QWORD *)(a1 + 16);
  v48 = *(_QWORD *)(a1 + 24);
  v49 = v26;
  v47 = *(_QWORD *)(a1 + 32);
  v46 = *(_QWORD *)(a1 + 40);
  v45 = *(_QWORD *)(a1 + 48);
  v44 = *(_QWORD *)(a1 + 56);
  v43 = *(_OWORD *)(a1 + 64);
  v42 = *(_QWORD *)(a1 + 80);
  v41 = *(_QWORD *)(a1 + 88);
  v27 = v18;
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v17;
  v28 = countAndFlagsBits;
  v30 = v59;
  v29 = v60;
  *(_QWORD *)(a1 + 16) = countAndFlagsBits;
  *(_QWORD *)(a1 + 24) = v29;
  v31 = v11;
  v33 = v62;
  v32 = v63;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v32;
  v34 = v61;
  *(_QWORD *)(a1 + 48) = v33;
  *(_QWORD *)(a1 + 56) = v34;
  *(_QWORD *)(a1 + 64) = v30;
  *(_QWORD *)(a1 + 72) = v24;
  v35 = v57;
  *(_QWORD *)(a1 + 80) = v58;
  *(_QWORD *)(a1 + 88) = v35;
  v53 = v27;
  v54 = v28;
  v36 = v24;
  outlined copy of Locale.LanguageCode?(v27, v17);
  v52 = v31;
  v62 = v33;
  v63 = v32;
  v61 = v34;
  outlined copy of Locale.LanguageCode?(v31, v32);
  outlined copy of Locale.LanguageCode?(v30, v36);
  outlined consume of Locale.Language?(v51, v50, v49, v48, v47, v46, v45, v44, v43, *((uint64_t *)&v43 + 1), v42, v41, (void (*)(void))outlined consume of Locale.LanguageCode?);
  if (v17)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = v53;
    outlined consume of Locale.LanguageCode?(v53, v17);
    outlined consume of Locale.LanguageCode?(v52, v63);
    outlined consume of Locale.LanguageCode?(v59, v36);
    swift_bridgeObjectRetain();
    result = outlined consume of Locale.LanguageCode?(v37, v17);
    v38 = v56;
    *v56 = v37;
    v38[1] = v17;
  }
  else
  {
    outlined consume of Locale.LanguageCode?(v53, 0);
    outlined consume of Locale.LanguageCode?(v52, v63);
    result = outlined consume of Locale.LanguageCode?(v59, v36);
    v39 = v56;
    *v56 = 0;
    v39[1] = 0;
  }
  return result;
}

uint64_t protocol witness for _LocaleProtocol.calendarIdentifier.getter in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.calendarIdentifier.getter(&v1[4]);
  os_unfair_lock_unlock(v1 + 140);
  return swift_release();
}

char _LocaleICU._lockedCalendarIdentifier(_:)@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  uint64_t KeywordValuesForLocale;
  void *v11;
  char v13;

  v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 != 16)
    goto LABEL_10;
  v4 = a1;
  v5 = specialized static Locale.keywordValue(identifier:key:)();
  if (v6)
  {
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v13 = 0;
    String.utf8CString.getter();
    KeywordValuesForLocale = ucal_getKeywordValuesForLocale();
    swift_release();
    if (!KeywordValuesForLocale || !uenum_next())
    {
      *(_BYTE *)(v4 + 96) = 0;
      *a2 = 0;
      LOBYTE(a1) = uenum_close();
      return a1;
    }
    v7 = String.init(cString:)();
    v8 = v11;
    uenum_close();
  }
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  LOBYTE(a1) = Calendar.Identifier.init(identifierString:)(v9);
  LOBYTE(v3) = v13;
  if (v13 != 16)
  {
    *(_BYTE *)(v4 + 96) = v13;
LABEL_10:
    *a2 = v3;
    return a1;
  }
  *(_BYTE *)(v4 + 96) = 0;
  *a2 = 0;
  return a1;
}

uint64_t Calendar.Identifier.cfCalendarIdentifier.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18182A2B0 + 4 * byte_1820F8C90[*v0]))(0x6169726F67657267, 0xE90000000000006ELL);
}

uint64_t sub_18182A2B0()
{
  return 0x7473696864647562;
}

uint64_t sub_18182A2C8()
{
  return 0x6573656E696863;
}

uint64_t sub_18182A2E0()
{
  return 0x636974706F63;
}

uint64_t sub_18182A2F4()
{
  return 0x6369706F69687465;
}

unint64_t sub_18182A30C()
{
  return 0xD000000000000013;
}

uint64_t sub_18182A32C()
{
  return 0x776572626568;
}

uint64_t sub_18182A340()
{
  return 0x313036386F7369;
}

uint64_t sub_18182A358()
{
  return 0x6E6169646E69;
}

uint64_t sub_18182A36C()
{
  return 0x63696D616C7369;
}

uint64_t sub_18182A384()
{
  return 0x2D63696D616C7369;
}

unint64_t sub_18182A3F8()
{
  return 0xD000000000000010;
}

uint64_t outlined consume of Locale.Language?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void))
{
  uint64_t result;

  if (a2 != 1)
  {
    a13();
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a13)(a5, a6, a7, a8);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a13)(a9, a10, a11, a12);
  }
  return result;
}

id @objc _NSSwiftLocale.countryCode.getter(char *a1)
{
  uint64_t v2;
  uint64_t ObjectType;
  void (*v4)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)&a1[OBJC_IVAR____NSSwiftLocale_locale + 8];
  ObjectType = swift_getObjectType();
  v4 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 376);
  v5 = a1;
  swift_unknownObjectRetain();
  v4(&v10, ObjectType, v2);
  swift_unknownObjectRelease();
  v6 = v11;
  if (v11)
  {
    v7 = v10;
    swift_bridgeObjectRetain();
    outlined consume of Locale.LanguageCode?(v7, v6);

    v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    return v8;
  }
  else
  {

    return 0;
  }
}

uint64_t protocol witness for _LocaleProtocol.region.getter in conformance _LocaleICU@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 184);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.region.getter((_QWORD *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));
  return swift_release();
}

uint64_t partial apply for closure #1 in _LocaleICU.region.getter@<X0>(_QWORD *a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.region.getter(a1, a2);
}

uint64_t closure #1 in _LocaleICU.region.getter@<X0>(_QWORD *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  int Language;
  uint64_t v21;
  uint64_t v22;
  int Script;
  uint64_t v24;
  uint64_t v25;
  int Country;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t countAndFlagsBits;
  Swift::String v34;
  void *object;
  Swift::String v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String *v49;
  _BYTE v50[272];
  void *v51;
  uint64_t v52;
  Swift::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  result = a1[41];
  v6 = a1[42];
  v7 = a1[43];
  v8 = (void *)a1[44];
  if (v6)
  {
    if (v6 == 1)
    {
      specialized static Locale.keywordValue(identifier:key:)();
      if (v9)
      {
        if (String.count.getter() > 2)
        {
          v10 = specialized Collection.prefix(_:)(2);
          v12 = v11;
          v14 = v13;
          v16 = v15;
          swift_bridgeObjectRelease();
          MEMORY[0x186DA4634](v10, v12, v14, v16);
          swift_bridgeObjectRelease();
          v17 = String.uppercased()();
          swift_bridgeObjectRelease();
          v18 = String.uppercased()();
          *(Swift::String *)(a1 + 41) = v17;
          *(Swift::String *)(a1 + 43) = v18;
          *a2 = v17;
          a2[1] = v18;
          swift_bridgeObjectRetain();
          return swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
      }
      v19 = swift_bridgeObjectRetain();
      MEMORY[0x1E0C80A78](v19);
      LODWORD(v63) = 0;
      String.utf8CString.getter();
      Language = uloc_getLanguage();
      swift_release();
      v21 = 0;
      v22 = 0;
      if (Language > 0)
      {
        v50[Language] = 0;
        v21 = MEMORY[0x186DA4658](v50, 0);
      }
      v58 = v22;
      v61 = v21;
      MEMORY[0x1E0C80A78](v21);
      LODWORD(v63) = 0;
      String.utf8CString.getter();
      Script = uloc_getScript();
      swift_release();
      v24 = 0;
      if ((int)v63 > 0)
      {
        v60 = 0;
      }
      else
      {
        v60 = 0;
        if (Script > 0)
        {
          v50[Script] = 0;
          v24 = MEMORY[0x186DA4658](v50);
          v60 = v25;
        }
      }
      v62 = v24;
      MEMORY[0x1E0C80A78](v24);
      LODWORD(v63) = 0;
      String.utf8CString.getter();
      Country = uloc_getCountry();
      swift_release();
      v27 = 0;
      v53 = a2;
      v28 = 0;
      if ((int)v63 <= 0)
      {
        v29 = v60;
        if (Country > 0)
        {
          v50[Country] = 0;
          v27 = MEMORY[0x186DA4658](v50, 0);
        }
      }
      else
      {
        v29 = v60;
      }
      v30 = v27;
      v57 = v28;
      swift_bridgeObjectRelease();
      v31 = v58;
      if (v58)
      {
        v32 = v61;
        v34 = String.lowercased()();
        countAndFlagsBits = v34._countAndFlagsBits;
        object = v34._object;
      }
      else
      {
        v32 = 0;
        countAndFlagsBits = 0;
        object = 0;
      }
      v52 = countAndFlagsBits;
      if (v29)
      {
        v63 = v62;
        v64 = v29;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        v36 = String._capitalized()();
        v56 = v36._countAndFlagsBits;
        v59 = v36._object;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v62 = 0;
        v56 = 0;
        v59 = 0;
      }
      v37 = v57;
      v54 = v2;
      v61 = v32;
      v51 = object;
      if (v57)
      {
        v38 = String.uppercased()();
        v39 = v38._countAndFlagsBits;
        v40 = v38._object;
        v55 = v37;
        v41 = v30;
        v42 = v37;
      }
      else
      {
        v63 = v32;
        v64 = v31;
        v65 = v52;
        v66 = object;
        v43 = v62;
        v67 = v62;
        v68 = v29;
        v69 = v56;
        v70 = v59;
        v71 = 0u;
        v72 = 0u;
        outlined copy of Locale.LanguageCode?(v32, v31);
        outlined copy of Locale.LanguageCode?(v43, v29);
        outlined copy of Locale.LanguageCode?(0, 0);
        v30 = specialized _withFixedCharBuffer(size:_:)(257, &v63);
        v40 = v44;
        outlined consume of Locale.LanguageCode?(v32, v31);
        outlined consume of Locale.LanguageCode?(v62, v29);
        outlined consume of Locale.LanguageCode?(0, 0);
        v55 = (uint64_t)v40;
        if (v40)
        {
          v45 = String.uppercased()();
          v39 = v45._countAndFlagsBits;
          v40 = v45._object;
        }
        else
        {
          v30 = 0;
          v55 = 0;
          v39 = 0;
        }
        v41 = 0;
        v42 = v57;
      }
      outlined copy of Locale.LanguageCode?(v41, v42);
      outlined consume of Locale.LanguageCode?(v61, v58);
      outlined consume of Locale.LanguageCode?(v62, v60);
      outlined consume of Locale.LanguageCode?(v41, v42);
      v46 = a1[41];
      v47 = a1[42];
      v48 = v55;
      outlined copy of Locale.LanguageCode?(v30, v55);
      result = outlined consume of Locale.Subdivision??(v46, v47);
      a1[41] = v30;
      a1[42] = v48;
      a1[43] = v39;
      a1[44] = v40;
      v49 = v53;
      v53->_countAndFlagsBits = v30;
      v49->_object = (void *)v48;
      v49[1]._countAndFlagsBits = v39;
      v49[1]._object = v40;
    }
    else
    {
      a2->_countAndFlagsBits = result;
      a2->_object = (void *)v6;
      a2[1]._countAndFlagsBits = v7;
      a2[1]._object = v8;
      return outlined copy of Locale.LanguageCode?(result, v6);
    }
  }
  else
  {
    a2->_countAndFlagsBits = result;
    a2->_object = 0;
    a2[1]._countAndFlagsBits = v7;
    a2[1]._object = v8;
  }
  return result;
}

Foundation::Calendar::Identifier_optional __swiftcall Calendar.Identifier.init(identifierString:)(Swift::String identifierString)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  Foundation::Calendar::Identifier_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = identifierString._countAndFlagsBits == 0x6169726F67657267
    && identifierString._object == (void *)0xE90000000000006ELL;
  if (v3
    || (object = identifierString._object,
        countAndFlagsBits = identifierString._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x7473696864647562 && object == (void *)0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (countAndFlagsBits == 0x6573656E696863 && object == (void *)0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else if (countAndFlagsBits == 0x636974706F63 && object == (void *)0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 3;
  }
  else if (countAndFlagsBits == 0x6369706F69687465 && object == (void *)0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 4;
  }
  else if (countAndFlagsBits == 0x61616F69687465 && object == (void *)0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || countAndFlagsBits == 0xD000000000000013 && object == (void *)0x8000000182309420
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 5;
  }
  else if (countAndFlagsBits == 0x776572626568 && object == (void *)0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 6;
  }
  else if (countAndFlagsBits == 0x313036386F7369 && object == (void *)0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 7;
  }
  else if (countAndFlagsBits == 0x6E6169646E69 && object == (void *)0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 8;
  }
  else if (countAndFlagsBits == 0x63696D616C7369 && object == (void *)0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 9;
  }
  else if (countAndFlagsBits == 0x2D63696D616C7369 && object == (void *)0xED00006C69766963
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 10;
  }
  else if (countAndFlagsBits == 0x6573656E6170616ALL && object == (void *)0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 11;
  }
  else if (countAndFlagsBits == 0x6E616973726570 && object == (void *)0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 12;
  }
  else if (countAndFlagsBits == 6516594 && object == (void *)0xE300000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 13;
  }
  else if (countAndFlagsBits == 0x2D63696D616C7369 && object == (void *)0xEC000000616C6274
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 14;
  }
  else if (countAndFlagsBits == 0xD000000000000010 && object == (void *)0x8000000182309440)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 15;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 15;
    else
      v7 = 16;
  }
  *v2 = v7;
  return result;
}

uint64_t _LocaleICU.usesMetricSystem.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  closure #1 in _LocaleICU.measurementSystem.getter((_QWORD *)(v1 + 16), v0, (uint64_t)v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  v2 = v8;
  v3 = v9;
  if (one-time initialization token for us != -1)
    swift_once();
  if (v2 == (_QWORD)xmmword_1EDC3E868 && v3 == *((_QWORD *)&xmmword_1EDC3E868 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
      return 1;
  }
  return 0;
}

uint64_t closure #1 in _LocaleICU.measurementSystem.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int MeasurementSystem;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  Swift::String v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[144];
  _BYTE v36[144];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a1[36];
  v7 = a1[37];
  v6 = a1[38];
  v8 = a1[39];
  if (!v7)
  {
    v30 = v5;
    v10 = specialized static Locale.keywordValue(identifier:key:)();
    if (v11)
    {
      v12 = v10;
      v13 = v11;
      v14 = v10 == 0x6C61697265706D69 && v11 == 0xE800000000000000;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        if (one-time initialization token for uk != -1)
          swift_once();
        v21 = static Locale.MeasurementSystem.uk;
        v20 = *(_QWORD *)algn_1EDC3A1D8;
        v22 = xmmword_1EDC3A1E0;
        a1[36] = static Locale.MeasurementSystem.uk;
        a1[37] = v20;
        *((_OWORD *)a1 + 19) = v22;
        *(_QWORD *)a3 = v21;
        *(_QWORD *)(a3 + 8) = v20;
        *(_OWORD *)(a3 + 16) = v22;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        goto LABEL_30;
      }
      v23 = String.lowercased()();
      a1[36] = v12;
      a1[37] = v13;
      *((Swift::String *)a1 + 19) = v23;
      *(_QWORD *)a3 = v12;
      *(_QWORD *)(a3 + 8) = v13;
      *(Swift::String *)(a3 + 16) = v23;
    }
    else
    {
      outlined init with take of LocalePreferences?(a2 + 40, (uint64_t)v35);
      outlined init with take of LocalePreferences?((uint64_t)v35, (uint64_t)v36);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v36) == 1
        || (LocalePreferences.measurementSystem.getter((uint64_t)&v31), (v15 = v32) == 0))
      {
        String.utf8CString.getter();
        MeasurementSystem = ulocdata_getMeasurementSystem();
        swift_release();
        if (MeasurementSystem == 2)
        {
          if (one-time initialization token for uk != -1)
            swift_once();
          v24 = &static Locale.MeasurementSystem.uk;
        }
        else if (MeasurementSystem == 1)
        {
          if (one-time initialization token for us != -1)
            swift_once();
          v24 = &static Locale.MeasurementSystem.us;
        }
        else
        {
          if (one-time initialization token for metric != -1)
            swift_once();
          v24 = &static Locale.MeasurementSystem.metric;
        }
        v25 = v24[2];
        v26 = v24[3];
        v28 = *v24;
        v27 = v24[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a1[36] = v28;
        a1[37] = v27;
        a1[38] = v25;
        a1[39] = v26;
        *(_QWORD *)a3 = v28;
        *(_QWORD *)(a3 + 8) = v27;
        *(_QWORD *)(a3 + 16) = v25;
        *(_QWORD *)(a3 + 24) = v26;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_30;
      }
      v16 = v33;
      v17 = v34;
      v18 = v31;
      a1[36] = v31;
      a1[37] = v15;
      a1[38] = v16;
      a1[39] = v17;
      *(_QWORD *)a3 = v18;
      *(_QWORD *)(a3 + 8) = v15;
      *(_QWORD *)(a3 + 16) = v16;
      *(_QWORD *)(a3 + 24) = v17;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_30:
    v5 = v30;
    return outlined copy of Locale.LanguageCode?(v5, v7);
  }
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 24) = v8;
  return outlined copy of Locale.LanguageCode?(v5, v7);
}

uint64_t specialized static Locale.keywordValue(identifier:key:)()
{
  int KeywordValue;
  _BYTE v2[102];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  String.utf8CString.getter();
  String.utf8CString.getter();
  KeywordValue = uloc_getKeywordValue();
  swift_release();
  swift_release();
  if (KeywordValue < 1)
    return 0;
  v2[KeywordValue] = 0;
  return MEMORY[0x186DA4658](v2);
}

uint64_t protocol witness for _LocaleProtocol.scriptCode.getter in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.scriptCode.getter((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.scriptCode.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.scriptCode.getter(a1, a2);
}

uint64_t closure #1 in _LocaleICU.scriptCode.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int Language;
  uint64_t v6;
  uint64_t v7;
  int Script;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int Country;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t countAndFlagsBits;
  Swift::String v19;
  void *object;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  _BYTE v46[224];
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 8) == 1)
  {
    v4 = swift_bridgeObjectRetain();
    MEMORY[0x1E0C80A78](v4);
    LODWORD(v68) = 0;
    String.utf8CString.getter();
    Language = uloc_getLanguage();
    swift_release();
    v6 = 0;
    v7 = 0;
    if (Language > 0)
    {
      v46[Language] = 0;
      v6 = MEMORY[0x186DA4658](v46, 0);
    }
    v67 = v7;
    v65 = v6;
    MEMORY[0x1E0C80A78](v6);
    LODWORD(v68) = 0;
    String.utf8CString.getter();
    Script = uloc_getScript();
    swift_release();
    v9 = 0;
    v50 = a2;
    v10 = 0;
    if ((int)v68 <= 0 && Script > 0)
    {
      v46[Script] = 0;
      v9 = MEMORY[0x186DA4658](v46);
      v10 = v11;
    }
    v66 = v9;
    MEMORY[0x1E0C80A78](v9);
    LODWORD(v68) = 0;
    String.utf8CString.getter();
    Country = uloc_getCountry();
    swift_release();
    v13 = 0;
    v14 = 0;
    if ((int)v68 > 0)
    {
      v15 = v67;
    }
    else
    {
      v15 = v67;
      if (Country > 0)
      {
        v46[Country] = 0;
        v13 = MEMORY[0x186DA4658](v46);
        v14 = v16;
      }
    }
    swift_bridgeObjectRelease();
    if (v15)
    {
      v19 = String.lowercased()();
      countAndFlagsBits = v19._countAndFlagsBits;
      object = v19._object;
      v21 = v66;
      if (v10)
        goto LABEL_16;
    }
    else
    {
      v65 = 0;
      countAndFlagsBits = 0;
      object = 0;
      v21 = v66;
      if (v10)
      {
LABEL_16:
        v68 = v21;
        v69 = v10;
        v22 = countAndFlagsBits;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        v23 = String._capitalized()();
        v49 = v23._object;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        countAndFlagsBits = v22;
        v24 = v23._countAndFlagsBits;
        if (v14)
        {
LABEL_17:
          v25 = object;
          v26 = countAndFlagsBits;
          v27 = v21;
          v28 = String.uppercased()();
          v63 = v28._object;
          v64 = v28._countAndFlagsBits;
          v29 = v14;
          v62 = v13;
          goto LABEL_21;
        }
LABEL_20:
        v29 = v14;
        v25 = object;
        v26 = countAndFlagsBits;
        v27 = v21;
        v62 = 0;
        v63 = 0;
        v64 = 0;
LABEL_21:
        v30 = *(_QWORD *)a1;
        v60 = *(_QWORD *)(a1 + 8);
        v61 = v30;
        v31 = *(_QWORD *)(a1 + 16);
        v58 = *(_QWORD *)(a1 + 24);
        v59 = v31;
        v32 = *(_QWORD *)(a1 + 32);
        v56 = *(_QWORD *)(a1 + 40);
        v57 = v32;
        v33 = *(_QWORD *)(a1 + 48);
        v54 = *(_QWORD *)(a1 + 56);
        v55 = v33;
        v53 = *(_OWORD *)(a1 + 64);
        v34 = *(_QWORD *)(a1 + 80);
        v51 = *(_QWORD *)(a1 + 88);
        v52 = v34;
        v35 = v65;
        v36 = v67;
        *(_QWORD *)a1 = v65;
        *(_QWORD *)(a1 + 8) = v36;
        v37 = v26;
        *(_QWORD *)(a1 + 16) = v26;
        *(_QWORD *)(a1 + 24) = v25;
        v38 = v25;
        *(_QWORD *)(a1 + 32) = v27;
        *(_QWORD *)(a1 + 40) = v10;
        v39 = v49;
        *(_QWORD *)(a1 + 48) = v24;
        *(_QWORD *)(a1 + 56) = v39;
        v41 = v62;
        v40 = v63;
        *(_QWORD *)(a1 + 64) = v62;
        *(_QWORD *)(a1 + 72) = v29;
        *(_QWORD *)(a1 + 80) = v64;
        *(_QWORD *)(a1 + 88) = v40;
        v42 = v29;
        v47 = v37;
        v48 = v38;
        outlined copy of Locale.LanguageCode?(v35, v36);
        v66 = v27;
        outlined copy of Locale.LanguageCode?(v27, v10);
        outlined copy of Locale.LanguageCode?(v41, v42);
        outlined consume of Locale.Language?(v61, v60, v59, v58, v57, v56, v55, v54, v53, *((uint64_t *)&v53 + 1), v52, v51, (void (*)(void))outlined consume of Locale.LanguageCode?);
        if (v10)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined consume of Locale.LanguageCode?(v35, v67);
          v43 = v66;
          outlined consume of Locale.LanguageCode?(v66, v10);
          outlined consume of Locale.LanguageCode?(v62, v42);
          swift_bridgeObjectRetain();
          result = outlined consume of Locale.LanguageCode?(v43, v10);
          v44 = v50;
          *v50 = v43;
          v44[1] = v10;
        }
        else
        {
          outlined consume of Locale.LanguageCode?(v35, v67);
          outlined consume of Locale.LanguageCode?(v66, 0);
          result = outlined consume of Locale.LanguageCode?(v62, v42);
          v45 = v50;
          *v50 = 0;
          v45[1] = 0;
        }
        return result;
      }
    }
    v21 = 0;
    v49 = 0;
    v24 = 0;
    if (v14)
      goto LABEL_17;
    goto LABEL_20;
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    *a2 = *(_QWORD *)(a1 + 32);
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t protocol witness for _LocaleProtocol.calendarIdentifier.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 200))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t outlined consume of Locale.Subdivision??(uint64_t result, uint64_t a2)
{
  if (a2 != 1)
    return outlined consume of Locale.LanguageCode?(result, a2);
  return result;
}

uint64_t protocol witness for _LocaleProtocol.currencyCode.getter in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.currencyCode.getter(&v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.currencyCode.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _LocaleICU.currencyCode.getter(v1, a1);
}

uint64_t closure #1 in _LocaleICU.currencyCode.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  int TextAttribute;
  uint64_t v9;
  _DWORD v10[134];
  _BYTE v11[144];
  _QWORD v12[19];

  v12[18] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  outlined init with take of LocalePreferences?(a1 + 40, (uint64_t)v11);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v12);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v12) == 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = v12[14];
    swift_bridgeObjectRetain();
  }
  v6 = _LocaleICU.State.NumberFormattersBox.formatter(for:identifier:numberSymbols:)(2, v4, v3, v5);
  result = swift_bridgeObjectRelease();
  if (v6)
  {
    MEMORY[0x1E0C80A78](result);
    v10[133] = 0;
    TextAttribute = unum_getTextAttribute();
    result = 0;
    v9 = 0;
    if (TextAttribute <= 257 && TextAttribute > 0)
      result = specialized String.init(_utf16:)((uint64_t)v10, TextAttribute);
    *a2 = result;
    a2[1] = v9;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t a1, uint64_t *a2)
{
  return specialized _withFixedCharBuffer(size:_:)(a1, a2, (uint64_t (*)(uint64_t, char *, uint64_t, int *))MEMORY[0x1E0DE63C0]);
}

{
  return specialized _withFixedCharBuffer(size:_:)(a1, a2, (uint64_t (*)(uint64_t, char *, uint64_t, int *))MEMORY[0x1E0DE6430]);
}

{
  return specialized _withFixedCharBuffer(size:_:)(a1, a2, MEMORY[0x1E0DE5B60]);
}

uint64_t protocol witness for _LocaleProtocol.languageCode.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 152))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

ValueMetadata *type metadata accessor for Calendar.Identifier()
{
  return &type metadata for Calendar.Identifier;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _JSONUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return _JSONUnkeyedEncodingContainer.encode<A>(_:)(a1, a2, a3);
}

void protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Data(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2, *v2, v2[1]);
}

NSUInteger NSCountHashTable(NSHashTable *table)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: hash table argument is NULL"), "NSUInteger NSCountHashTable(NSHashTable * _Nonnull)");
  return -[NSHashTable count](table, "count");
}

void sub_18182D560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_18182DD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_18182E448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 56), 8);
  _Unwind_Resume(a1);
}

void NSKVOClass(void *a1, const char *a2)
{
  objc_class *Class;

  Class = object_getClass(a1);
  if (Class == _NSKVONotifyingOriginalClassForIsa(Class))
  {
    class_getInstanceMethod(Class, a2);
    method_invoke();
  }
  else
  {
    objc_opt_class();
  }
}

void _NSKeyValueObservationInfoGetObservances(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSMutableIndexSet *v6;
  NSMutableIndexSet *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD v13[7];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = -[NSIndexSet initWithIndexesInRange:]([NSMutableIndexSet alloc], "initWithIndexesInRange:", 0, a3);
  v7 = v6;
  v8 = 8 * a3;
  if ((unint64_t)(8 * a3) < 0x81)
  {
    if (a3)
    {
      MEMORY[0x1E0C80A78](v6);
      v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v9, 8 * a3);
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = (char *)malloc_type_malloc(8 * a3, 0x80040B8603338uLL);
  }
  objc_msgSend(*(id *)(a1 + 8), "getObjects:range:", v9, 0, a3);
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  if (a3)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)&v9[8 * v10];
      if ((*(_BYTE *)(v11 + 40) & 0x20) == 0)
      {
        v12 = v15;
        *(_QWORD *)(a2 + 8 * v15[3]) = v11;
        ++v12[3];
        -[NSMutableIndexSet removeIndex:](v7, "removeIndex:", v10);
      }
      ++v10;
    }
    while (a3 != v10);
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___NSKeyValueObservationInfoGetObservances_block_invoke;
  v13[3] = &unk_1E0F4ED48;
  v13[4] = &v14;
  v13[5] = a2;
  v13[6] = v9;
  -[NSIndexSet enumerateIndexesUsingBlock:](v7, "enumerateIndexesUsingBlock:", v13);
  if (v8 >= 0x81)
    free(v9);

  _Block_object_dispose(&v14, 8);
}

void sub_18182E7CC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

objc_class *_NSKVONotifyingOriginalClassForIsa(objc_class *a1)
{
  objc_class *v1;

  v1 = a1;
  if ((char *)class_getMethodImplementation(a1, sel__isKVOA) == (char *)NSKVOIsAutonotifying)
    return *(objc_class **)object_getIndexedIvars(v1);
  return v1;
}

uint64_t __NSIndexSetEnumerateBitfield(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;

  v5 = a3 + a4;
  if (a3 + a4 >= 0x40)
    v5 = 64;
  v6 = v5 - a3;
  if (a3 <= 0x3F)
    v7 = a3;
  else
    v7 = 0;
  if (a3 > 0x3F)
    v6 = 0;
  if (v6)
  {
    v45 = 0;
    v44 = v7;
    if ((a2 & 2) == 0)
    {
      v11 = 0;
      v12 = 0;
      v42 = v7 + v6;
      while (2)
      {
        if (v12)
          v13 = v11;
        else
          v13 = 0;
        v14 = v13 - 1;
        while (1)
        {
          if (((-1 << v12) & a1) == 0)
            return 0x7FFFFFFFFFFFFFFFLL;
          v15 = __clz(__rbit64((-1 << v12) & a1));
          v16 = (-1 << v15) & ~a1;
          v12 = __clz(__rbit64(v16));
          if (v11 == ++v14)
            break;
          v17 = 0x7FFFFFFFFFFFFFFFLL;
          if (!v16 || v12 > 0x3F)
            return v17;
        }
        v18 = v42;
        v19 = v44;
        if (v42 >= v12)
          v18 = v12;
        if (v15 > v44 || v44 >= v12)
        {
          if (v44 > v15)
            goto LABEL_45;
          v21 = v18 - v15;
          v19 = v15 < v42 ? v15 : 0;
          v20 = v15 < v42 ? v21 : 0;
          if (!v20)
            goto LABEL_45;
        }
        else
        {
          v20 = v18 - v44;
          if (v18 == v44)
            goto LABEL_45;
        }
        if ((a2 & 0x4000000000000000) != 0)
        {
          __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
          v17 = 0x7FFFFFFFFFFFFFFFLL;
          if (v12 > 0x3F)
            return v17;
          goto LABEL_48;
        }
        if (v19 <= v19 + v20)
          v22 = v19 + v20;
        else
          v22 = v19;
        while (v22 != v19)
        {
          if ((a2 & 0x2000000000000000) != 0)
          {
            if ((__NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5) & 1) != 0)
              return v19;
          }
          else
          {
            __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
          }
          ++v19;
        }
LABEL_45:
        if (v12 > 0x3F)
          return 0x7FFFFFFFFFFFFFFFLL;
LABEL_48:
        ++v11;
        continue;
      }
    }
    if (a1)
    {
      v23 = ~a1;
      v24 = 1;
      v25 = a1;
      while (1)
      {
        v26 = (-1 << __clz(__rbit64(v25))) & v23;
        if (!v26)
          break;
        ++v24;
        v25 = (-1 << __clz(__rbit64(v26))) & a1;
        if (!v25)
        {
          --v24;
          break;
        }
      }
      if (v24)
      {
        v27 = v7 + v6;
        v17 = 0x7FFFFFFFFFFFFFFFLL;
        v43 = v7 + v6;
        while (1)
        {
          LOBYTE(v28) = 0;
          v29 = v24--;
          v30 = v44;
          while (1)
          {
            if (((-1 << v28) & a1) == 0)
            {
              v33 = 0;
              v31 = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_64;
            }
            v31 = __clz(__rbit64((-1 << v28) & a1));
            v32 = (-1 << v31) & v23;
            v28 = __clz(__rbit64(v32));
            if (!--v29)
              break;
            v33 = 0;
            v31 = 0x7FFFFFFFFFFFFFFFLL;
            if (!v32 || v28 > 0x3F)
              goto LABEL_64;
          }
          v33 = v28 - v31;
LABEL_64:
          if (v27 >= v33 + v31)
            v34 = v33 + v31;
          else
            v34 = v27;
          if (v31 > v44 || v44 >= v33 + v31)
          {
            v36 = v34 - v31;
            if (v31 < v27)
              v37 = v31;
            else
              v37 = 0;
            if (v31 >= v27)
              v36 = 0;
            if (v44 <= v31)
              v30 = v37;
            else
              v30 = 0;
            if (v44 <= v31)
              v35 = v36;
            else
              v35 = 0;
            if (!v35)
              goto LABEL_96;
          }
          else
          {
            v35 = v34 - v44;
            if (v34 == v44)
              goto LABEL_96;
          }
          if ((a2 & 0x4000000000000000) != 0)
          {
            __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
            v39 = v45;
            goto LABEL_95;
          }
          if ((uint64_t)(v35 + v30 - 1) >= v30)
          {
            v38 = v35 + v30 - 2;
            do
            {
              if ((a2 & 0x2000000000000000) != 0)
              {
                if (__NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5))
                {
                  v45 = 1;
                  v17 = v38 + 1;
                }
              }
              else
              {
                __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
              }
              v39 = v45;
              if (v45)
                break;
            }
            while (v38-- >= v30);
LABEL_95:
            v27 = v43;
            if (v39)
              return v17;
          }
LABEL_96:
          if (!v24)
            return v17;
        }
      }
    }
  }
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t __NSIndexSetEnumerate(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _BOOL4 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  pthread_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t i;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v55;
  pthread_t v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD block[14];
  _QWORD v60[3];
  char v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0x7FFFFFFFFFFFFFFFLL;
  v8 = a2;
  if (a1 < 0)
  {
    v10 = *MEMORY[0x1E0DE7C58];
    if ((~a1 & 0xC000000000000007) == 0)
      v10 = 0;
    v11 = v10 ^ a1;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if ((~(_BYTE)v11 & 7) == 0)
      v12 = 0xFFFFFFFFFFFFFLL;
    v13 = v12 & (v11 >> 3);
    return __NSIndexSetEnumerateBitfield(v13, a2, a3, a4, a5);
  }
  if ((*(_BYTE *)(a1 + 8) & 2) == 0)
  {
    if ((a2 & 1) != 0)
    {
      v19 = MEMORY[0xFFFFFC034];
      if (MEMORY[0xFFFFFC034] < 2u)
        v8 = a2 & 0xFFFFFFFFFFFFFFFELL;
      if ((v8 & 1) != 0)
      {
        v16 = a3 + a4;
        if ((v8 & 0x4000000000000000) != 0)
        {
          v17 = objc_msgSend((id)a1, "_indexOfRangeAfterOrContainingIndex:");
          v18 = objc_msgSend((id)a1, "_indexOfRangeBeforeOrContainingIndex:", v16 - 1);
        }
        else
        {
          v17 = objc_msgSend((id)a1, "indexGreaterThanOrEqualToIndex:");
          v18 = objc_msgSend((id)a1, "indexLessThanIndex:", a3 + a4);
        }
        v14 = 0x7FFFFFFFFFFFFFFFLL;
        if (v17 != 0x7FFFFFFFFFFFFFFFLL && v18 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v23 = v18 - v17 + 1;
          v24 = 32;
          v25 = 16;
          v26 = 4;
          if (v23 < 4 * v19)
            v26 = 1;
          if (v23 < 16 * v19)
            v25 = v26;
          if (v23 < 32 * v19)
            v24 = v25;
          if (48 * v19 > v23)
            v27 = v24;
          else
            v27 = 48;
          if (v23 < v19 << 6)
            v28 = v27;
          else
            v28 = 64;
          v62 = 0;
          v63 = &v62;
          v64 = 0x2020000000;
          v65 = 0x7FFFFFFFFFFFFFFFLL;
          v60[0] = 0;
          v60[1] = v60;
          v60[2] = 0x2020000000;
          v61 = 0;
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = ____NSIndexSetEnumerate_block_invoke;
          block[3] = &unk_1E0F4E7F8;
          block[8] = v17;
          block[9] = v28;
          block[10] = v18;
          block[11] = v8;
          block[12] = a3;
          block[13] = a4;
          block[4] = a1;
          block[5] = a5;
          block[6] = v60;
          block[7] = &v62;
          dispatch_apply((v28 + v18 - v17) / v28, 0, block);
          if ((*(_BYTE *)(a1 + 8) & 1) == 0)
          {
            v29 = pthread_self();
            v30 = (unint64_t *)(*(_QWORD *)(a1 + 16) + 56);
            while (1)
            {
              v31 = __ldaxr(v30);
              if ((pthread_t)v31 != v29)
                break;
              if (!__stlxr(0, v30))
                goto LABEL_120;
            }
            __clrex();
          }
LABEL_120:
          v14 = atomic_load((unint64_t *)v63 + 3);
          _Block_object_dispose(v60, 8);
          _Block_object_dispose(&v62, 8);
        }
        return v14;
      }
    }
    _CFAutoreleasePoolPush();
    v20 = *(_DWORD *)(a1 + 8);
    if ((v20 & 2) != 0)
    {
      v21 = (_QWORD *)(a1 + 16);
      v22 = (*(_DWORD *)(a1 + 8) & 1) == 0;
    }
    else
    {
      if ((v20 & 1) != 0)
      {
        v33 = *(_QWORD *)(a1 + 24) != 0;
        goto LABEL_80;
      }
      v21 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      v22 = 1;
    }
    if (*v21)
    {
      if (v22)
      {
        v32 = *(_QWORD *)(a1 + 16);
        v33 = *(_QWORD *)(v32 + 8);
        goto LABEL_49;
      }
      v33 = 1;
    }
    else
    {
      v33 = 0;
      if (v22)
      {
        v32 = *(_QWORD *)(a1 + 16);
LABEL_49:
        v34 = v32 + 16 * *(_QWORD *)(v32 + 24) + 64;
        if ((v8 & 2) != 0)
          goto LABEL_50;
        goto LABEL_81;
      }
    }
LABEL_80:
    v34 = a1 + 16;
    if ((v8 & 2) != 0)
    {
LABEL_50:
      LOBYTE(v62) = 0;
      v35 = a3 + a4;
      v36 = objc_msgSend((id)a1, "_indexOfRangeBeforeOrContainingIndex:", a3 + a4 - 1);
      if (v36 <= 0x7FFFFFFFFFFFFFFELL)
      {
        for (i = v36; ; --i)
        {
          v38 = (unint64_t *)(v34 + 16 * i);
          v40 = *v38;
          v39 = v38[1];
          v41 = v39 + v40;
          v42 = v39 + v40 >= v35 ? v35 : v39 + v40;
          if (a3 > v40 || v40 >= v35)
          {
            if (v40 > a3 || a3 >= v41)
            {
              v40 = 0;
              v45 = 0;
            }
            else
            {
              v45 = v42 - a3;
              v40 = a3;
            }
          }
          else
          {
            v45 = v42 - v40;
          }
          if (!v45)
            break;
          if ((v8 & 0x4000000000000000) != 0)
          {
            __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
            v14 = 0x7FFFFFFFFFFFFFFFLL;
            if (i < 1)
              goto LABEL_112;
          }
          else
          {
            v14 = v40 + v45;
            while (v40 < v14)
            {
              --v14;
              if ((v8 & 0x2000000000000000) != 0)
              {
                if ((__NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5) & 1) != 0)
                  goto LABEL_112;
              }
              else
              {
                __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
              }
            }
            if (i < 1)
              goto LABEL_111;
          }
        }
      }
      goto LABEL_111;
    }
LABEL_81:
    LOBYTE(v62) = 0;
    v46 = objc_msgSend((id)a1, "_indexOfRangeAfterOrContainingIndex:", a3);
    v14 = 0x7FFFFFFFFFFFFFFFLL;
    if (v46 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_112;
    v47 = v46;
    if (v46 >= v33)
      goto LABEL_112;
    v48 = a3 + a4;
    do
    {
      while (1)
      {
        v49 = (unint64_t *)(v34 + 16 * v47);
        v14 = *v49;
        v50 = v49[1];
        v51 = v50 + v14;
        v52 = v50 + v14 >= v48 ? v48 : v50 + v14;
        if (a3 > v14 || v14 >= v48)
        {
          if (v14 > a3 || a3 >= v51)
            goto LABEL_111;
          v55 = v52 - a3;
          v14 = a3;
          if (v52 == a3)
            goto LABEL_111;
        }
        else
        {
          v55 = v52 - v14;
          if (v52 == v14)
            goto LABEL_111;
        }
        if ((v8 & 0x4000000000000000) == 0)
          break;
        __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
        v14 = 0x7FFFFFFFFFFFFFFFLL;
        if (++v47 >= v33)
          goto LABEL_112;
      }
      if (v14 < v14 + v55)
      {
        do
        {
          if ((v8 & 0x2000000000000000) != 0)
          {
            if ((__NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5) & 1) != 0)
              goto LABEL_112;
          }
          else
          {
            __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
          }
          ++v14;
          --v55;
        }
        while (v55);
      }
      ++v47;
    }
    while (v47 < v33);
LABEL_111:
    v14 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_112:
    if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    {
      v56 = pthread_self();
      v57 = (unint64_t *)(*(_QWORD *)(a1 + 16) + 56);
      while (1)
      {
        v58 = __ldaxr(v57);
        if ((pthread_t)v58 != v56)
          break;
        if (!__stlxr(0, v57))
          goto LABEL_118;
      }
      __clrex();
    }
LABEL_118:
    _CFAutoreleasePoolPop();
    return v14;
  }
  v13 = *(_QWORD *)(a1 + 16);
  return __NSIndexSetEnumerateBitfield(v13, a2, a3, a4, a5);
}

void sub_18182F238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

objc_class *__NSIndexSetParameterCheckIterate(objc_class *result, const char *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  NSString *v6;
  void *v7;
  _QWORD *v8;
  NSString *v9;
  uint64_t v10;

  if (!a3)
  {
    v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: block is nil"), _NSMethodExceptionProem(result, a2));
    v7 = (void *)MEMORY[0x1E0C99DA0];
    v8 = (_QWORD *)MEMORY[0x1E0C99778];
    goto LABEL_13;
  }
  if ((a4 & 0x800000000000000) != 0 && a6)
  {
    if (a5 > 0x7FFFFFFFFFFFFFFELL || a6 == 0x7FFFFFFFFFFFFFFFLL || a6 < 0)
    {
      v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: a range field {%ld, %ld} is NSNotFound or beyond bounds (%ld)"), _NSMethodExceptionProem(result, a2), a5, a6, 0x7FFFFFFFFFFFFFFFLL);
    }
    else
    {
      if ((uint64_t)(a5 + a6) > 0)
        return result;
      v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: last range index (%ld) beyond bounds (%ld)"), _NSMethodExceptionProem(result, a2), a5 + a6 - 1, 0x7FFFFFFFFFFFFFFELL, v10);
    }
    v6 = v9;
    v7 = (void *)MEMORY[0x1E0C99DA0];
    v8 = (_QWORD *)MEMORY[0x1E0C99858];
LABEL_13:
    objc_exception_throw((id)objc_msgSend(v7, "exceptionWithName:reason:userInfo:", *v8, v6, 0));
  }
  return result;
}

void sub_18182F594(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void _filterObjectsUsingPredicate(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  objc_class *v9;
  IMP MethodImplementation;
  unsigned int (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  double v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t i;
  uint64_t v18;
  CFStringRef v19;
  void *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v8 = objc_msgSend(a1, "count");
  v9 = (objc_class *)objc_opt_class();
  MethodImplementation = class_getMethodImplementation(v9, sel_evaluateWithObject_);
  if (v8 >> 60)
  {
    v19 = CFStringCreateWithFormat(0, 0, CFSTR("*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt"), v8);
    v20 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v19, 0);
    CFRelease(v19);
    objc_exception_throw(v20);
  }
  v11 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))MethodImplementation;
  if (v8 <= 1)
    v12 = 1;
  else
    v12 = v8;
  *(_QWORD *)&v13 = MEMORY[0x1E0C80A78](v12).n128_u64[0];
  v15 = (_QWORD *)((char *)v21 - v14);
  v21[0] = 0;
  if (v8 >= 0x101)
  {
    v15 = (_QWORD *)_CFCreateArrayStorage();
    v16 = v15;
  }
  else
  {
    v16 = 0;
  }
  objc_msgSend(a1, "getObjects:range:", v15, 0, v8, v13, v21[0]);
  for (i = 0; v8; --v8)
  {
    v18 = *v15;
    if (v11(a2, sel_evaluateWithObject_, *v15))
      *(_QWORD *)(a3 + 8 * i++) = v18;
    ++v15;
  }
  *a4 = i;
  free(v16);
}

void sub_18182F76C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t getEnumTagSinglePayload for Locale.Language(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

ValueMetadata *type metadata accessor for AttributedString()
{
  return &type metadata for AttributedString;
}

double UUID.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;
  double v3[3];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v3 = 0uLL;
  _foundation_uuid_generate_random((unsigned __int8 *)v3);
  result = v3[0];
  *a1 = *(_OWORD *)v3;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64(a1, a2, a3, a4, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_);
}

void _sendReplyArgumentsOnly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  NSXPCEncoder *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _xpc_connection_s *v16;
  _BYTE v17[2048];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v12 = -[NSXPCEncoder initWithStackSpace:size:]([NSXPCEncoder alloc], "initWithStackSpace:size:", v17, 2048);
  -[NSXPCEncoder _setConnection:](v12, "_setConnection:", a1);
  -[NSXPCEncoder setDelegate:](v12, "setDelegate:", a1);
  if (*(_QWORD *)(a1 + 80))
    -[NSXPCCoder setUserInfo:](v12, "setUserInfo:");
  -[NSXPCEncoder _encodeInvocationObjectArgumentsOnly:count:typeString:selector:isReply:into:](v12, "_encodeInvocationObjectArgumentsOnly:count:typeString:selector:isReply:into:", a3, a4, a2, 0, 1, a7);

  v15 = atomic_load((unsigned int *)(a1 + 36));
  if ((v15 & 0x40) != 0)
  {
    objc_msgSend(*(id *)(a1 + 152), "sendMessage:", a7, v13, v14);
  }
  else
  {
    v16 = *(_xpc_connection_s **)(a1 + 8);
    if (v16)
      xpc_connection_send_message(v16, a7);
  }
}

void sub_181830D6C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _NSXPCSerializationStartRead(void *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *data;
  size_t v6;
  BOOL v7;
  size_t v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = 0;
  data = xpc_dictionary_get_data(a1, "root", v9);
  v6 = v9[0];
  if (data)
    v7 = (int64_t)v9[0] < 9;
  else
    v7 = 1;
  if (v7)
    return 0;
  *a2 = data;
  a2[1] = v6;
  if (*data != 0x37317473696C7062)
    return 0;
  a2[2] = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
  *(_DWORD *)(a3 + 8) = 255;
  *(_QWORD *)a3 = 8;
  *(_DWORD *)(a3 + 8) = *(_BYTE *)(*a2 + 8) & 0xF0;
  return 1;
}

void sub_1818321E0(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1818321F8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1818322D0(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1818322EC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1818328FC(_Unwind_Exception *exception_object, int a2)
{
  os_unfair_lock_s *v2;

  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_181832928(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181832934(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x181832940);
}

BOOL isMethodFromNSObjectProtocol(Protocol *a1, const char *a2, _BOOL8 a3)
{
  Protocol **v6;
  unint64_t v7;
  uint64_t v8;
  Protocol *v9;
  unint64_t v10;
  Protocol **v12;
  Protocol **v13;
  unint64_t i;
  uint64_t v15;
  unsigned int outCount;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (&unk_1EDCC1AE8 == (_UNKNOWN *)a1)
    return containsMethod(a1, a2, a3);
  outCount = 0;
  v6 = protocol_copyProtocolList(a1, &outCount);
  if (!v6)
    return 0;
  v7 = outCount;
  if (!outCount)
    goto LABEL_11;
  if (*v6 != (Protocol *)&unk_1EDCC1AE8)
  {
    v8 = 1;
    while (outCount != v8)
    {
      v9 = v6[v8++];
      if (v9 == (Protocol *)&unk_1EDCC1AE8)
      {
        v10 = v8 - 1;
        free(v6);
        if (v10 < v7)
          goto LABEL_13;
        return 0;
      }
    }
LABEL_11:
    free(v6);
    return 0;
  }
  free(v6);
LABEL_13:
  if (!containsMethod(a1, a2, a3))
  {
    outCount = 0;
    v12 = protocol_copyProtocolList(a1, &outCount);
    if (v12)
    {
      v13 = v12;
      if (outCount)
      {
        for (i = 0; i < outCount; ++i)
        {
          v15 = isMethodFromNSObjectProtocol(v13[i], a2, a3);
          if ((_DWORD)v15)
            break;
        }
      }
      else
      {
        v15 = 0;
      }
      free(v13);
      return v15;
    }
  }
  return 0;
}

void setProtocolMetadataWithSignature(const char *a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  __int16 v14;
  char v15;
  _WORD *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSString *v25;
  const __CFString *v26;
  uint64_t v27;
  id v28;

  if (qword_1ECD0A8F8 != -1)
    dispatch_once(&qword_1ECD0A8F8, &__block_literal_global_195);
  if (a5)
    v10 = 1;
  else
    v10 = 2;
  v11 = objc_msgSend(a3, "numberOfArguments");
  if (v11 < v10)
  {
    if (a5)
      v26 = CFSTR("reply block of method");
    else
      v26 = CFSTR("method");
    v25 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NSXPCInterface: Too few arguments to %@ (%s / %s)"), v26, a2, sel_getName(a1));
LABEL_42:
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v25, 0));
  }
  v12 = v11;
  if ((a5 & 1) == 0)
  {
    v13 = (_WORD *)objc_msgSend(a3, "_argInfo:", -1);
    v14 = v13[17];
    if ((v14 & 0x80) != 0)
      v14 = *(_WORD *)(*(_QWORD *)v13 + 34);
    if ((v14 & 0x2000) != 0)
      *(_QWORD *)(a4 + 32) = objc_msgSend(a3, "_classForObjectAtArgumentIndex:", -1);
  }
  v28 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (v10 < v12)
  {
    v15 = 0;
    while (1)
    {
      v16 = (_WORD *)objc_msgSend(a3, "_argInfo:", v10);
      v17 = v16[17];
      if ((v17 & 0x80) != 0)
        v17 = *(_WORD *)(*(_QWORD *)v16 + 34);
      if ((v17 & 0x2000) == 0)
        goto LABEL_26;
      if (v17 < 0)
        break;
      v18 = objc_msgSend(a3, "_classForObjectAtArgumentIndex:", v10);
      if (!v18)
      {
        if (objc_msgSend(a3, "_protocolsForObjectAtArgumentIndex:", v10))
          goto LABEL_26;
LABEL_30:
        v21 = qword_1ECD0A900;
        goto LABEL_27;
      }
      v19 = v18;
      if (objc_msgSend((id)qword_1ECD0A908, "containsObject:", v18))
        goto LABEL_30;
      v20 = v28;
      v21 = v19;
LABEL_28:
      objc_msgSend(v20, "addObject:", v21);
      if (v12 == ++v10)
        goto LABEL_31;
    }
    if (a5)
    {
      v25 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NSXPCInterface: Blocks as arguments to the reply block of method (%s / %s) are not allowed"), a2, sel_getName(a1), v27);
      goto LABEL_42;
    }
    if ((v15 & 1) != 0)
    {
      v25 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NSXPCInterface: Only one reply block is allowed per selector (%s / %s)"), a2, sel_getName(a1), v27);
      goto LABEL_42;
    }
    v22 = objc_msgSend(a3, "_signatureForBlockAtArgumentIndex:", v10);
    if (!v22)
    {
      v25 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NSXPCInterface: Unable to get block signature from Protocol data (%s / %s). Use of clang is required for NSXPCInterface."), a2, sel_getName(a1), v27);
      goto LABEL_42;
    }
    v23 = (void *)v22;
    *(_DWORD *)(a4 + 40) = v10;

    *(_QWORD *)a4 = v23;
    v15 = 1;
    setProtocolMetadataWithSignature(a1, a2, v23, a4, 1);
LABEL_26:
    v21 = objc_msgSend(MEMORY[0x1E0C99E60], "set");
LABEL_27:
    v20 = v28;
    goto LABEL_28;
  }
LABEL_31:
  if (a5)
    v24 = 8;
  else
    v24 = 16;

  *(_QWORD *)(a4 + v24) = objc_msgSend(v28, "copy");
}

BOOL selectorInProtocol(SEL aSel, Protocol *p)
{
  SEL name;

  name = protocol_getMethodDescription(p, aSel, 1, 1).name;
  if (!name)
    name = protocol_getMethodDescription(p, aSel, 0, 1).name;
  return name != 0;
}

BOOL containsMethod(Protocol *a1, const char *a2, BOOL isRequiredMethod)
{
  objc_method_description *v4;
  objc_method_description *v5;
  uint64_t v6;
  unint64_t v7;
  const char *name;
  _BOOL8 v9;
  unsigned int outCount;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  outCount = 0;
  v4 = protocol_copyMethodDescriptionList(a1, isRequiredMethod, 1, &outCount);
  if (!v4)
    return 0;
  if (outCount)
  {
    if (v4->name == a2)
    {
      v9 = 1;
    }
    else
    {
      v5 = v4 + 1;
      v6 = 1;
      do
      {
        v7 = v6;
        if (outCount == v6)
          break;
        name = v5->name;
        ++v5;
        ++v6;
      }
      while (name != a2);
      v9 = v7 < outCount;
    }
  }
  else
  {
    v9 = 0;
  }
  free(v4);
  return v9;
}

uint64_t _NSXPCSerializationDecodeInvocationArgumentArray(void *a1, void *a2, void *a3, uint64_t *a4, _QWORD *a5, void *a6)
{
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v36 = a3;
  v40 = *MEMORY[0x1E0C80C00];
  v11 = objc_msgSend(a2, "numberOfArguments");
  result = objc_msgSend(a2, "_argInfo:", 0);
  if (*(__int16 *)(result + 34) < 0)
    v13 = 1;
  else
    v13 = 2;
  v35 = v13;
  if ((int)v13 < (int)v11)
  {
    v14 = *a5;
    v15 = *a5 + 9;
    v16 = *a5 >= 0xFFFFFFFFFFFFFFF7;
    v17 = v16 << 63 >> 63;
    if (v17 != v16 || v17 < 0 || a4[1] <= v15)
      objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("Expected to find array of NSInvocation arguments but there were no entries"), 0));
    v34 = a5;
    v18 = *(_QWORD *)(v14 + *a4 + 1);
    v38 = v15;
    v39 = v18;
    v19 = v11;
    if (v11 > (unint64_t)v35)
    {
      v20 = v35;
      do
      {
        if (v15 > v39 || v15 >= a4[1])
          objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("Expected to find entry in array of NSInvocation arguments but there were no entries"), 0));
        v21 = *(_BYTE *)(*a4 + v15);
        v22 = objc_msgSend(a2, "_argInfo:", v20);
        v23 = v22;
        if ((*(_WORD *)(v22 + 34) & 0x80) != 0)
          v23 = *(_QWORD *)v22;
        if (a6 && (v22 = objc_msgSend(a6, "count"), v22 > v20 - v35))
        {
          v22 = objc_msgSend(a6, "objectAtIndex:");
          v24 = v22;
        }
        else
        {
          v24 = 0;
        }
        if ((*(_WORD *)(v23 + 34) & 0x1000) != 0)
        {
          if ((v21 & 0xF0) == 0xE0)
          {
            objc_msgSend(a1, "setArgument:atIndex:", &_NSXPCSerializationDecodeInvocationArgumentArray_argument, v20);
          }
          else
          {
            v37 = 0;
            v27 = v23;
            do
            {
              v28 = v27;
              if ((*(_WORD *)(v27 + 34) & 0x1000) == 0)
                break;
              v27 = *(_QWORD *)v27;
            }
            while (*(_QWORD *)v28);
            v29 = *(unsigned int *)(v28 + 16);
            v30 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", v29);
            v37 = (_BYTE *)objc_msgSend(v30, "mutableBytes");
            objc_msgSend(a1, "_addAttachedObject:", v30);
            _NSXPCSerializationDecodeTypedObjCValuesFromArray(v36, a4, (_BYTE *)(*(_QWORD *)v23 + 37), v37, v29, 0, (uint64_t)v34, &v38, (uint64_t)a1, v24);
            objc_msgSend(a1, "setArgument:atIndex:", &v37, v20);
          }
        }
        else
        {
          MEMORY[0x1E0C80A78](v22);
          v26 = (char *)&v33 - ((v25 + 15) & 0x1FFFFFFF0);
          _NSXPCSerializationDecodeTypedObjCValuesFromArray(v36, a4, (_BYTE *)(v23 + 37), v26, v25, 0, (uint64_t)v34, &v38, (uint64_t)a1, v24);
          objc_msgSend(a1, "setArgument:atIndex:", v26, v20);
        }
        result = _getLastByteOfValueIncludingMarker(a4, v38, &v38);
        v15 = v38 + 1;
        v31 = v38 == -1;
        v32 = v31 << 63 >> 63;
        ++v38;
        if (v32 != v31 || v32 < 0)
          objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("Overflow of array data"), 0));
        ++v20;
      }
      while (v20 != v19);
    }
  }
  return result;
}

void sub_1818337C8(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (a2 == 1)
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Exception while decoding argument %ld (#%ld of invocation):\n%@\nException: %@"), v3 - *(_QWORD *)(v4 - 128), v3, objc_msgSend(v2, "debugDescription"), objc_msgSend(objc_begin_catch(exception_object), "debugDescription")), 0);
    objc_exception_throw(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_181833870()
{
  objc_end_catch();
  JUMPOUT(0x181833878);
}

uint64_t _NSXPCSerializationDecodeTypedObjCValuesFromArray(void *a1, uint64_t *a2, _BYTE *a3, _BYTE *a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  int v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  uint64_t v47;
  _BYTE *v48;
  void *v49;
  const __CFString *v50;
  const __CFString *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)_xpc_skipAttributesOfType(a3);
  v18 = *(char *)result;
  if (v18 > 90)
  {
    switch(*(_BYTE *)result)
    {
      case 'c':
        v53 = 0;
        v21 = *a8;
        if (*a8 > a8[1] || v21 >= a2[1])
          goto LABEL_103;
        v52 = *a8;
        LODWORD(v53) = *(_BYTE *)(*a2 + v21) & 0xF0;
        if (!a5)
          goto LABEL_104;
        result = -[NSNumber charValue](_NSXPCSerializationNumberForObject(a2, &v52), "charValue");
LABEL_59:
        *a4 = result;
        return result;
      case 'd':
        v53 = 0;
        v35 = *a8;
        if (*a8 > a8[1] || v35 >= a2[1])
          goto LABEL_103;
        v52 = *a8;
        LODWORD(v53) = *(_BYTE *)(*a2 + v35) & 0xF0;
        if (a5 <= 7)
          goto LABEL_104;
        result = -[NSNumber doubleValue](_NSXPCSerializationNumberForObject(a2, &v52), "doubleValue");
        *(_QWORD *)a4 = v36;
        return result;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_108;
      case 'f':
        v53 = 0;
        v37 = *a8;
        if (*a8 > a8[1] || v37 >= a2[1])
          goto LABEL_103;
        v52 = *a8;
        LODWORD(v53) = *(_BYTE *)(*a2 + v37) & 0xF0;
        if (a5 <= 3)
          goto LABEL_104;
        result = -[NSNumber floatValue](_NSXPCSerializationNumberForObject(a2, &v52), "floatValue");
        *(_DWORD *)a4 = v38;
        return result;
      case 'i':
        v53 = 0;
        v39 = *a8;
        if (*a8 > a8[1] || v39 >= a2[1])
          goto LABEL_103;
        v52 = *a8;
        LODWORD(v53) = *(_BYTE *)(*a2 + v39) & 0xF0;
        if (a5 <= 3)
          goto LABEL_104;
        result = -[NSNumber intValue](_NSXPCSerializationNumberForObject(a2, &v52), "intValue");
        goto LABEL_89;
      case 'l':
        v53 = 0;
        v40 = *a8;
        if (*a8 > a8[1] || v40 >= a2[1])
          goto LABEL_103;
        v52 = *a8;
        LODWORD(v53) = *(_BYTE *)(*a2 + v40) & 0xF0;
        if (a5 <= 7)
          goto LABEL_104;
        result = -[NSNumber longValue](_NSXPCSerializationNumberForObject(a2, &v52), "longValue");
        goto LABEL_98;
      case 'q':
        v53 = 0;
        v41 = *a8;
        if (*a8 > a8[1] || v41 >= a2[1])
          goto LABEL_103;
        v52 = *a8;
        LODWORD(v53) = *(_BYTE *)(*a2 + v41) & 0xF0;
        if (a5 <= 7)
          goto LABEL_104;
        result = -[NSNumber longLongValue](_NSXPCSerializationNumberForObject(a2, &v52), "longLongValue");
        goto LABEL_98;
      case 's':
        v53 = 0;
        v42 = *a8;
        if (*a8 > a8[1] || v42 >= a2[1])
          goto LABEL_103;
        v52 = *a8;
        LODWORD(v53) = *(_BYTE *)(*a2 + v42) & 0xF0;
        if (a5 <= 1)
          goto LABEL_104;
        result = -[NSNumber shortValue](_NSXPCSerializationNumberForObject(a2, &v52), "shortValue");
        goto LABEL_84;
      default:
        if (v18 != 91 && v18 != 123)
          goto LABEL_108;
        return _xpc_walkDataStructure((int)a1, 0, (int)a2, (char *)result, (int)a3, (int)a4, a5, 0, a9, a10, a7, (uint64_t)a8);
    }
  }
  if (v18 > 72)
  {
    if (v18 > 80)
    {
      if (v18 == 81)
      {
        v53 = 0;
        v44 = *a8;
        if (*a8 <= a8[1] && v44 < a2[1])
        {
          v52 = *a8;
          LODWORD(v53) = *(_BYTE *)(*a2 + v44) & 0xF0;
          if (a5 > 7)
          {
            result = -[NSNumber unsignedLongLongValue](_NSXPCSerializationNumberForObject(a2, &v52), "unsignedLongLongValue");
            goto LABEL_98;
          }
          goto LABEL_104;
        }
      }
      else
      {
        if (v18 != 83)
          goto LABEL_108;
        v53 = 0;
        v30 = *a8;
        if (*a8 <= a8[1] && v30 < a2[1])
        {
          v52 = *a8;
          LODWORD(v53) = *(_BYTE *)(*a2 + v30) & 0xF0;
          if (a5 > 1)
          {
            result = -[NSNumber unsignedShortValue](_NSXPCSerializationNumberForObject(a2, &v52), "unsignedShortValue");
LABEL_84:
            *(_WORD *)a4 = result;
            return result;
          }
          goto LABEL_104;
        }
      }
    }
    else if (v18 == 73)
    {
      v53 = 0;
      v43 = *a8;
      if (*a8 <= a8[1] && v43 < a2[1])
      {
        v52 = *a8;
        LODWORD(v53) = *(_BYTE *)(*a2 + v43) & 0xF0;
        if (a5 > 3)
        {
          result = -[NSNumber unsignedIntValue](_NSXPCSerializationNumberForObject(a2, &v52), "unsignedIntValue");
LABEL_89:
          *(_DWORD *)a4 = result;
          return result;
        }
        goto LABEL_104;
      }
    }
    else
    {
      if (v18 != 76)
      {
LABEL_108:
        v51 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("decodeDataAt:ofObjCType: undecodable type (%s)"), a3);
        v49 = (void *)MEMORY[0x1E0C99DA0];
        v50 = (const __CFString *)*MEMORY[0x1E0C99750];
        goto LABEL_105;
      }
      v53 = 0;
      v22 = *a8;
      if (*a8 <= a8[1] && v22 < a2[1])
      {
        v52 = *a8;
        LODWORD(v53) = *(_BYTE *)(*a2 + v22) & 0xF0;
        if (a5 > 7)
        {
          result = -[NSNumber unsignedLongValue](_NSXPCSerializationNumberForObject(a2, &v52), "unsignedLongValue");
          goto LABEL_98;
        }
        goto LABEL_104;
      }
    }
LABEL_103:
    v49 = (void *)MEMORY[0x1E0C99DA0];
    v50 = CFSTR("NSInvalidUnarchiveOperationException");
    v51 = CFSTR("Expected to find entry in array of NSInvocation arguments but there were no entries");
    goto LABEL_105;
  }
  switch(*(_BYTE *)result)
  {
    case ':':
      v53 = 0;
      v19 = *a8;
      if (*a8 <= a8[1] && v19 < a2[1])
      {
        v52 = *a8;
        LODWORD(v53) = *(_BYTE *)(*a2 + v19) & 0xF0;
        if (a5 > 7)
        {
          v20 = (const char *)_NSXPCSerializationASCIIStringForObject(a2, &v52);
          result = (uint64_t)sel_registerName(v20);
LABEL_98:
          *(_QWORD *)a4 = result;
          return result;
        }
        goto LABEL_104;
      }
      v49 = (void *)MEMORY[0x1E0C99DA0];
      v50 = CFSTR("NSInvalidUnarchiveOperationException");
      v51 = CFSTR("Expected to find SEL entry in array of NSInvocation arguments but there were no entries");
      goto LABEL_105;
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case 'A':
      goto LABEL_108;
    case '@':
      v53 = 0;
      v31 = *a8;
      if (*a8 <= a8[1] && v31 < a2[1])
      {
        v52 = *a8;
        LODWORD(v53) = *(_BYTE *)(*a2 + v31) & 0xF0;
        if (a5 > 7)
        {
          v32 = (void *)objc_msgSend(a1, "_decodeObjectOfClasses:atObject:", a10, &v52);
          v29 = v32;
          *(_QWORD *)a4 = v32;
          if (a9)
          {
            v28 = (void *)a9;
            return objc_msgSend(v28, "_addAttachedObject:", v29);
          }
          return (uint64_t)v32;
        }
LABEL_104:
        v49 = (void *)MEMORY[0x1E0C99DA0];
        v50 = CFSTR("NSInvalidUnarchiveOperationException");
        v51 = CFSTR("Size of available buffer is not big enough to hold the decoded data");
        goto LABEL_105;
      }
      v49 = (void *)MEMORY[0x1E0C99DA0];
      v50 = CFSTR("NSInvalidUnarchiveOperationException");
      v51 = CFSTR("Expected to find entry in array for an object but there was no entry");
      goto LABEL_105;
    case 'B':
      v33 = *a8;
      if (*a8 > a8[1] || v33 >= a2[1])
        goto LABEL_103;
      if (!a5)
        goto LABEL_104;
      if (v33)
        LOBYTE(v33) = *(unsigned __int8 *)(*a2 + v33) == 176;
      *a4 = v33;
      return result;
    case 'C':
      v53 = 0;
      v34 = *a8;
      if (*a8 > a8[1] || v34 >= a2[1])
        goto LABEL_103;
      v52 = *a8;
      LODWORD(v53) = *(_BYTE *)(*a2 + v34) & 0xF0;
      if (!a5)
        goto LABEL_104;
      result = -[NSNumber unsignedCharValue](_NSXPCSerializationNumberForObject(a2, &v52), "unsignedCharValue");
      goto LABEL_59;
    default:
      if (v18 == 35)
      {
        v53 = 0;
        v45 = *a8;
        if (*a8 <= a8[1] && v45 < a2[1])
        {
          v52 = *a8;
          LODWORD(v53) = *(_BYTE *)(*a2 + v45) & 0xF0;
          v46 = (const char *)_NSXPCSerializationASCIIStringForObject(a2, &v52);
          if (a5 > 7)
          {
            result = (uint64_t)objc_lookUpClass(v46);
            goto LABEL_98;
          }
          goto LABEL_104;
        }
        goto LABEL_103;
      }
      if (v18 != 42)
        goto LABEL_108;
      v53 = 0;
      v23 = *a8;
      if (*a8 > a8[1] || v23 >= a2[1])
        goto LABEL_103;
      if (a5 <= 7)
        goto LABEL_104;
      if (v23 && *(unsigned __int8 *)(*a2 + v23) == 176)
      {
LABEL_99:
        *(_QWORD *)a4 = 0;
        return result;
      }
      _getLastByteOfValueIncludingMarker(a2, v23, a8);
      v24 = *a8 + 1;
      v25 = *a8 == -1;
      v26 = v25 << 63 >> 63;
      *a8 = v24;
      if (v26 != v25 || v26 < 0)
      {
        v49 = (void *)MEMORY[0x1E0C99DA0];
        v50 = CFSTR("NSInvalidUnarchiveOperationException");
        v51 = CFSTR("Unexpected EoF while decoding pointer");
LABEL_105:
        objc_exception_throw((id)objc_msgSend(v49, "exceptionWithName:reason:userInfo:", v50, v51, 0));
      }
      if (a8[1] < v24 || a2[1] <= v24)
      {
        v49 = (void *)MEMORY[0x1E0C99DA0];
        v50 = CFSTR("NSInvalidUnarchiveOperationException");
        v51 = CFSTR("Missing data after non-null entry");
        goto LABEL_105;
      }
      v52 = v24;
      LODWORD(v53) = *(_BYTE *)(*a2 + v24) & 0xF0;
      result = (uint64_t)_NSXPCSerializationDataForObject(a2, &v52);
      if (!result)
        goto LABEL_99;
      v27 = (void *)result;
      result = objc_msgSend((id)result, "length");
      if (!result)
        goto LABEL_99;
      if (a9)
      {
        *(_QWORD *)a4 = objc_msgSend(v27, "bytes");
        v28 = (void *)a9;
        v29 = v27;
        return objc_msgSend(v28, "_addAttachedObject:", v29);
      }
      v47 = objc_msgSend(v27, "length");
      v48 = malloc_type_malloc(v47 + 1, 0x3111E7A1uLL);
      result = objc_msgSend(v27, "getBytes:length:", v48, v47);
      *(_QWORD *)a4 = v48;
      v48[v47] = 0;
      return result;
  }
}

void _NSXPCSerializationAddTypedObjCValuesToArray(_BYTE *a1, uint64_t a2, _BYTE *a3, double *a4)
{
  char *v8;
  int v9;
  const char *Name;
  double v11;
  const char *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  NSString *v18;

  v8 = _xpc_skipAttributesOfType(a3);
  v9 = *v8;
  if (v9 > 90)
  {
    switch(*v8)
    {
      case 'c':
        *(_QWORD *)&v11 = *(char *)a4;
        goto LABEL_22;
      case 'd':
        _NSXPCSerializationAddDouble(a2, *a4);
        return;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_35;
      case 'f':
        _NSXPCSerializationAddFloat(a2, *(float *)a4);
        return;
      case 'i':
        *(_QWORD *)&v11 = *(int *)a4;
        goto LABEL_22;
      case 'l':
      case 'q':
        goto LABEL_21;
      case 's':
        *(_QWORD *)&v11 = *(__int16 *)a4;
        goto LABEL_22;
      default:
        if (v9 != 91 && v9 != 123)
          goto LABEL_35;
        _xpc_walkDataStructure(a1, a2, 0, v8, (uint64_t)a3, (uint64_t)a4, 0xFFFFFFFFLL, 1, 0, 0, 0, 0);
        break;
    }
    return;
  }
  if (v9 > 72)
  {
    if (v9 > 80)
    {
      if (v9 != 81)
      {
        if (v9 != 83)
          goto LABEL_35;
        *(_QWORD *)&v11 = *(unsigned __int16 *)a4;
LABEL_22:
        _NSXPCSerializationAddInteger(a2, *(unint64_t *)&v11);
        return;
      }
    }
    else
    {
      if (v9 == 73)
      {
        *(_QWORD *)&v11 = *(unsigned int *)a4;
        goto LABEL_22;
      }
      if (v9 != 76)
        goto LABEL_35;
    }
LABEL_21:
    v11 = *a4;
    goto LABEL_22;
  }
  switch(*v8)
  {
    case ':':
      Name = sel_getName(*(SEL *)a4);
      goto LABEL_32;
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case 'A':
      goto LABEL_35;
    case '@':
      objc_msgSend(a1, "_encodeUnkeyedObject:", *(_QWORD *)a4);
      return;
    case 'B':
      v14 = *(unsigned __int8 *)a4;
      v15 = a2;
      goto LABEL_34;
    case 'C':
      *(_QWORD *)&v11 = *(unsigned __int8 *)a4;
      goto LABEL_22;
    default:
      if (v9 != 35)
      {
        if (v9 == 42)
        {
          v12 = *(const char **)a4;
          if (v12)
          {
            _NSXPCSerializationAddBool(a2, 0);
            v13 = strlen(v12) + 1;
            _NSXPCSerializationAddRawData(a2, v12, v13);
          }
          else
          {
            v15 = a2;
            v14 = 1;
LABEL_34:
            _NSXPCSerializationAddBool(v15, v14);
          }
          return;
        }
LABEL_35:
        v18 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("encodeDataAt:ofObjCType: unencodable type (%s)"), a3);
        objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v18, 0));
      }
      Name = class_getName(*(Class *)a4);
LABEL_32:
      v16 = (char *)Name;
      v17 = strlen(Name);
      _NSXPCSerializationAddASCIIString(a2, v16, v17, 1);
      break;
  }
}

_BYTE *_xpc_skipAttributesOfType(_BYTE *result)
{
  int v1;
  BOOL v2;

  while (1)
  {
    v1 = (char)*result;
    v2 = (v1 - 78) > 0x24 || ((1 << (*result - 78)) & 0x1300000113) == 0;
    if (v2 && v1 != 43)
      break;
    ++result;
  }
  return result;
}

void setProtocolMetdataWithMethods(Protocol *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t MethodTypeEncoding;
  uint64_t v11;
  void *v12;
  objc_class *Superclass;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  NSString *v26;
  const char *Name;

  if (a4)
  {
    v6 = 0;
    v7 = a4;
    while (1)
    {
      v8 = (void *)MEMORY[0x186DA8F78]();
      v9 = *(const char **)(a3 + 16 * v6);
      MethodTypeEncoding = _protocol_getMethodTypeEncoding();
      if (!MethodTypeEncoding)
        break;
      v11 = objc_msgSend(MEMORY[0x1E0C99DD8], "signatureWithObjCTypes:", MethodTypeEncoding);
      if (!v11)
      {
        Name = protocol_getName(a1);
        v26 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NSXPCInterface: Unable to get method signature from Protocol data (%s / %s)"), Name, sel_getName(v9));
LABEL_31:
        objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v26, 0));
      }
      v12 = (void *)v11;
      if (*(_QWORD *)a2)
      {
        Superclass = class_getSuperclass(*(Class *)a2);
        if (Superclass)
        {
          if (!class_getInstanceMethod(Superclass, v9))
          {
            v14 = objc_msgSend(v12, "_argInfo:", -1);
            if ((*(_WORD *)(v14 + 34) & 0x80) != 0)
              v14 = *(_QWORD *)v14;
            if (*(_BYTE *)(v14 + 36) == 118)
            {
              v15 = objc_msgSend(v12, "numberOfArguments");
              if (v15 == 2)
              {
                v16 = *(int *)(a2 + 8);
                v17 = v16 + 1;
                *(_DWORD *)(a2 + 8) = v16 + 1;
                v18 = (_QWORD *)(a2 + 8 * v16);
                v18[2] = v9;
                v18[130] = _NSXPCDistantObjectSimpleMessageSend0;
                v19 = "v@:";
LABEL_13:
                v18[258] = v19;
                if (v17 == 128)
                  setProtocolContextFlush(a2);
              }
              else
              {
                v20 = v15;
                if ((unint64_t)(v15 - 3) <= 3)
                {
                  v21 = 2;
                  while ((*(_WORD *)(objc_msgSend(v12, "_argInfo:", v21) + 34) & 0x2000) != 0)
                  {
                    if (v20 == ++v21)
                    {
                      if (v20 == 5)
                      {
                        v23 = *(int *)(a2 + 8);
                        v17 = v23 + 1;
                        *(_DWORD *)(a2 + 8) = v23 + 1;
                        v18 = (_QWORD *)(a2 + 8 * v23);
                        v18[2] = v9;
                        v18[130] = _NSXPCDistantObjectSimpleMessageSend3;
                        v19 = "v@:@@@";
                      }
                      else if (v20 == 4)
                      {
                        v24 = *(int *)(a2 + 8);
                        v17 = v24 + 1;
                        *(_DWORD *)(a2 + 8) = v24 + 1;
                        v18 = (_QWORD *)(a2 + 8 * v24);
                        v18[2] = v9;
                        v18[130] = _NSXPCDistantObjectSimpleMessageSend2;
                        v19 = "v@:@@";
                      }
                      else
                      {
                        v22 = *(int *)(a2 + 8);
                        v17 = v22 + 1;
                        *(_DWORD *)(a2 + 8) = v22 + 1;
                        v18 = (_QWORD *)(a2 + 8 * v22);
                        v18[2] = v9;
                        if (v20 == 3)
                        {
                          v18[130] = _NSXPCDistantObjectSimpleMessageSend1;
                          v19 = "v@:@";
                        }
                        else
                        {
                          v18[130] = _NSXPCDistantObjectSimpleMessageSend4;
                          v19 = "v@:@@@@";
                        }
                      }
                      goto LABEL_13;
                    }
                  }
                }
              }
            }
          }
        }
      }
      objc_autoreleasePoolPop(v8);
      if (++v6 == v7)
        return;
    }
    v25 = protocol_getName(a1);
    v26 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NSXPCInterface: Unable to get extended method signature from Protocol data (%s / %s). Use of clang is required for NSXPCInterface."), v25, sel_getName(v9));
    goto LABEL_31;
  }
}

void sub_18183472C(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_181834740(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _NSXPCSerializationDecodeInvocationObjectOnlyArgumentArray(uint64_t a1, unint64_t a2, void *a3, void *a4, _QWORD *a5, _QWORD *a6, void *a7)
{
  unsigned int v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  __int16 v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v14 = objc_msgSend(a3, "numberOfArguments");
  result = objc_msgSend(a3, "_argInfo:", 0);
  if (*(__int16 *)(result + 34) < 0)
    v16 = 1;
  else
    v16 = 2;
  if ((int)(v14 - v16) > a2)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("Too many objects in signature to decode as object-only"), 0));
  if ((int)v14 > (int)v16)
  {
    v17 = *a6;
    v18 = __CFADD__(*a6, 9);
    v19 = *a6 + 9;
    v20 = v18;
    v21 = v20 << 63 >> 63;
    if (v21 != v20 || v21 < 0 || a5[1] <= v19)
      objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("Expected to find array of NSInvocation arguments but there were no entries"), 0));
    v22 = *(_QWORD *)(v17 + *a5 + 1);
    v35 = v19;
    v36 = v22;
    v23 = v14;
    if (v14 > v16)
    {
      v24 = 0;
      v25 = v16 - v23;
      do
      {
        if (a7 && objc_msgSend(a7, "count") > v24)
          v26 = objc_msgSend(a7, "objectAtIndex:", v24);
        else
          v26 = 0;
        v27 = (_WORD *)objc_msgSend(a3, "_argInfo:", v16 + v24);
        v28 = v27[17];
        if ((v28 & 0x80) != 0)
          v28 = *(_WORD *)(*(_QWORD *)v27 + 34);
        if ((v28 & 0x2000) == 0)
          objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("Expected to find object in wire signature of object-only decode of NSInvocation arguments"), 0));
        v33 = 0;
        v34 = 0;
        if (v19 > v36 || v19 >= a5[1])
          objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("Expected to find entry in array of NSInvocation arguments but there were no entries"), 0));
        LODWORD(v34) = 255;
        v33 = v19;
        LODWORD(v34) = *(_BYTE *)(*a5 + v19) & 0xF0;
        v29 = (void *)objc_msgSend(a4, "_decodeObjectOfClasses:atObject:", v26, &v33);
        v30 = v29;
        *(_QWORD *)(a1 + 8 * v24) = v29;
        result = _getLastByteOfValueIncludingMarker(a5, v19, &v35);
        v19 = v35 + 1;
        v31 = v35 == -1;
        v32 = v31 << 63 >> 63;
        ++v35;
        if (v32 != v31 || v32 < 0)
          objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), CFSTR("Overflow of array data"), 0));
        ++v24;
      }
      while (v25 + v24);
    }
  }
  return result;
}

void sub_181834BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  NSString *v17;

  v14 = v13 + v12;
  if (a2 == 1)
  {
    v15 = objc_begin_catch(exception_object);
    if (v14 != v13)
    {
      v16 = v14 - v13;
      do
      {

        --v16;
      }
      while (v16);
    }
    objc_msgSend(v15, "debugDescription");
    v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Exception while decoding argument %ld (#%ld of invocation):\nException: %@"));
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSInvalidUnarchiveOperationException"), v17, 0));
  }
  _Unwind_Resume(exception_object);
}

void sub_181834C74()
{
  objc_end_catch();
  JUMPOUT(0x181834C80);
}

xpc_object_t __NSXPCCONNECTION_IS_WAITING_FOR_A_SYNCHRONOUS_REPLY__(_xpc_connection_s *a1, void *a2)
{
  return xpc_connection_send_message_with_reply_sync(a1, a2);
}

_BYTE *_xpc_walkDataStructure(_BYTE *result, uint64_t a2, uint64_t *a3, char *typePtr, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12)
{
  void *v15;
  int v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *i;
  int v29;
  int v30;
  NSUInteger v31;
  int v32;
  const char *v33;
  NSUInteger v34;
  uint64_t v35;
  uint64_t v36;
  const __CFString *v37;
  NSString *v38;
  const __CFString *v39;
  void *v40;
  const __CFString *v41;
  const __CFString *v42;
  _BYTE *v43;
  NSUInteger alignp;
  NSUInteger sizep[2];

  v15 = result;
  sizep[1] = *MEMORY[0x1E0C80C00];
  alignp = 0;
  sizep[0] = 0;
  v16 = *typePtr;
  if (v16 == 123)
  {
    v27 = typePtr + 1;
    for (i = typePtr + 2; ; ++i)
    {
      v29 = *(i - 1);
      if (v29 > 60)
      {
        if (v29 == 125)
          goto LABEL_28;
        if (v29 == 61)
        {
          v27 = i;
LABEL_28:
          v30 = *v27;
          if (!*v27)
          {
LABEL_41:
            v37 = CFSTR("decodeDataAt:ofObjCType:");
            if (a8)
              v37 = CFSTR("encodeDataAt:ofObjCType:");
            v38 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ badly formed structure description (%s)"), v37, a5);
            goto LABEL_44;
          }
          v31 = 0;
          v32 = 1;
          while (2)
          {
            if (v30 == 125)
              return result;
            if (!v30)
              goto LABEL_41;
            v33 = NSGetSizeAndAlignment(v27, sizep, &alignp);
            if (alignp)
            {
              v34 = (v31 + alignp - 1) / alignp * alignp;
              if (a8)
                goto LABEL_34;
LABEL_36:
              if (!v32)
              {
                _getLastByteOfValueIncludingMarker(a3, *a12, a12);
                v35 = *a12 == -1;
                v36 = v35 << 63 >> 63;
                ++*a12;
                if (v36 != v35 || v36 < 0)
                {
                  v40 = (void *)MEMORY[0x1E0C99DA0];
                  v41 = CFSTR("NSInvalidUnarchiveOperationException");
                  v39 = CFSTR("Unexpected EoF while decoding struct");
                  goto LABEL_47;
                }
              }
              result = (_BYTE *)_NSXPCSerializationDecodeTypedObjCValuesFromArray(v15, a3, v27, (_BYTE *)(a6 + v34), a7 - v34, 0, a11, a12, a9, a10);
              v32 = 0;
            }
            else
            {
              v34 = 0;
              if (!a8)
                goto LABEL_36;
LABEL_34:
              result = (_BYTE *)_NSXPCSerializationAddTypedObjCValuesToArray(v15, a2, v27, a6 + v34, 0);
            }
            v31 = sizep[0] + v34;
            v30 = *(unsigned __int8 *)v33;
            v27 = (char *)v33;
            continue;
          }
        }
      }
      else if (!*(i - 1) || v29 == 41)
      {
        goto LABEL_28;
      }
    }
  }
  if (v16 == 91)
  {
    v18 = typePtr + 1;
    v17 = typePtr[1];
    if (v17 - 48 > 9)
    {
      result = NSGetSizeAndAlignment(typePtr + 1, sizep, &alignp);
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = v19;
        v21 = v17;
        v19 = 10 * v19 + v17 - 48;
        v22 = *++v18;
        v17 = v22;
      }
      while (v22 - 48 < 0xA);
      result = NSGetSizeAndAlignment(v18, sizep, &alignp);
      if (v19)
      {
        v43 = result;
        v23 = 0;
        v24 = 10 * v20 + v21 - 48;
        do
        {
          if (a8)
          {
            _NSXPCSerializationAddTypedObjCValuesToArray(v15, a2, v18, a6 + sizep[0] * v23, 0);
          }
          else
          {
            if (v23)
            {
              _getLastByteOfValueIncludingMarker(a3, *a12, a12);
              v25 = *a12 == -1;
              v26 = v25 << 63 >> 63;
              ++*a12;
              if (v26 != v25 || v26 < 0)
              {
                v40 = (void *)MEMORY[0x1E0C99DA0];
                v41 = CFSTR("NSInvalidUnarchiveOperationException");
                v39 = CFSTR("Unexpected EoF while decoding array");
LABEL_47:
                objc_exception_throw((id)objc_msgSend(v40, "exceptionWithName:reason:userInfo:", v41, v39, 0));
              }
            }
            _NSXPCSerializationDecodeTypedObjCValuesFromArray(v15, a3, v18, (_BYTE *)(a6 + sizep[0] * v23), a7 - sizep[0] * v23, 0, a11, a12, a9, a10);
          }
          ++v23;
        }
        while (v24 != v23);
        result = v43;
      }
    }
    if (*result != 93)
    {
      v42 = CFSTR("decodeDataAt:ofObjCType:");
      if (a8)
        v42 = CFSTR("encodeDataAt:ofObjCType:");
      v38 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ badly formed array description (%s)"), v42, a5);
LABEL_44:
      v39 = (const __CFString *)v38;
      v40 = (void *)MEMORY[0x1E0C99DA0];
      v41 = (const __CFString *)*MEMORY[0x1E0C99750];
      goto LABEL_47;
    }
  }
  return result;
}

void sub_181835148(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18183515C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t storeEnumTagSinglePayload for DateComponents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 280) = 0;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 282) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 282) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

double DateInterval.end.getter@<D0>(double *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1 + v1[1];
  *a1 = result;
  return result;
}

BOOL CharacterSet.contains(_:)(UTF32Char theChar)
{
  uint64_t v1;

  return CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(*(_QWORD *)v1 + 16), theChar) != 0;
}

BOOL static Calendar.Identifier.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64(a1, a2, (SEL *)&selRef_initWithInteger_);
}

NSIndexPath __swiftcall IndexPath._bridgeToObjectiveC()()
{
  NSIndexPath result;

  __asm { BR              X10 }
  return result;
}

id sub_1818358CC()
{
  uint64_t v0;

  return objc_msgSend(objc_allocWithZone((Class)NSIndexPath), sel_initWithIndex_, v0);
}

id sub_1818358F0()
{
  uint64_t v0;

  return objc_msgSend(objc_allocWithZone((Class)NSIndexPath), sel_initWithIndexes_length_, v0 + 32, *(_QWORD *)(v0 + 16));
}

id sub_181835920()
{
  return objc_msgSend(objc_allocWithZone((Class)NSIndexPath), sel_init);
}

uint64_t sub_181835940()
{
  uint64_t v0;
  uint64_t v1;

  _NSIndexPathCreateFromIndexes(v0, *(_QWORD *)(v1 + 8));
  objc_opt_self();
  return swift_dynamicCastObjCClassUnconditional();
}

NSIndexPath *_NSIndexPathCreateFromIndexes(uint64_t a1, uint64_t a2)
{
  _QWORD v3[3];

  v3[2] = *MEMORY[0x1E0C80C00];
  v3[0] = a1;
  v3[1] = a2;
  return -[NSIndexPath initWithIndexes:length:]([NSIndexPath alloc], "initWithIndexes:length:", v3, 2);
}

uint64_t _makeInlinePayload(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = 0;
  v4 = a2;
  switch(a2)
  {
    case 0:
      return v4 | (8 * a2) | 6;
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_6;
    case 3:
      goto LABEL_4;
    case 4:
      v5 = a1[3];
      if (v5 >> 13)
        return 0;
      result = v5 << 47;
LABEL_4:
      v6 = a1[2];
      if (v6 >> 13)
        return 0;
      result |= v6 << 34;
LABEL_6:
      v7 = a1[1];
      if (v7 >> 13)
        return 0;
      result |= v7 << 21;
LABEL_8:
      v8 = *a1;
      if (v8 >> 13)
        return 0;
      v4 = result | (v8 << 8);
      return v4 | (8 * a2) | 6;
    default:
      return result;
  }
}

uint64_t destroy for URLQueryItem()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for String.LocalizationValue()
{
  return &type metadata for String.LocalizationValue;
}

uint64_t _NSDefaultFileSystemEncoding()
{
  return 4;
}

uint64_t NSKVOPendingNotificationStackIdentifierHash(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t i;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 8), "hash", *(_QWORD *)a1);
  LODWORD(result) = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v12[1] = v2;
  v12[2] = v4;
  v5 = (unsigned __int8 *)v12 + 3;
  for (i = 28; i > 7; i -= 4)
  {
    v7 = *(v5 - 3) + 16 * result;
    v8 = *(v5 - 2) + 16 * (v7 ^ (16 * (v7 >> 28)));
    v9 = *(v5 - 1) + 16 * (v8 ^ (16 * (v8 >> 28)));
    v10 = *v5;
    v5 += 4;
    v11 = v10 + 16 * (v9 ^ (16 * (v9 >> 28)));
    result = (v11 ^ ((v11 & 0xF0000000) >> 24)) & ~(v11 & 0xF0000000);
  }
  return result;
}

uint64_t NSAttributedString.init<A>(_:including:)(uint64_t *a1, uint64_t a2, Swift::UInt a3, unint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  id v7;
  uint64_t v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  int v38;
  char v39;
  char v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _OWORD *v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[2];
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76[48];
  char v77[48];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[3];
  __int128 v88[3];
  _BYTE v89[56];
  uint64_t v90;

  v4 = *a1;
  v54 = static AttributeScope.scopeDescription.getter(a3, a4);
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(v4 + 32);
  v87[0] = *(_OWORD *)(v4 + 16);
  v87[1] = v5;
  v6 = *(_OWORD *)(v4 + 48);
  v88[1] = v5;
  v88[2] = v6;
  v87[2] = v6;
  v88[0] = v87[0];
  outlined init with take of any PredicateExpression<Self.Output == B1>(v88, (uint64_t)v89);
  outlined retain of Locale((uint64_t)v89);
  MEMORY[0x186DA46F4](v87);
  v7 = objc_allocWithZone((Class)NSMutableAttributedString);
  v8 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v53 = objc_msgSend(v7, sel_initWithString_, v8);
  swift_unknownObjectRelease();
  v9 = *(_OWORD *)(v4 + 32);
  v84 = *(_OWORD *)(v4 + 16);
  v85 = v9;
  v86 = *(_OWORD *)(v4 + 48);
  result = BigString.startIndex.getter();
  v12 = v11;
  v13 = *(_QWORD *)(v4 + 64);
  v55 = *(_QWORD *)(v4 + 72);
  v51 = (_OWORD *)v4;
  v59 = *(_QWORD *)(v4 + 88);
  v60 = *(_QWORD *)(v4 + 80);
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v13 + 18);
    result = swift_unknownObjectRetain();
  }
  else
  {
    v14 = 0;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v57 = v51 + 1;
  v67 = (void *)v13;
  v68 = v55;
  v69 = v60;
  v70 = v59;
  v71 = v59;
  v72 = v14;
  v52 = v13 + 24;
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v56 = v13;
  while (1)
  {
    if (v13)
    {
      if (v17 == v60)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_unknownObjectRelease();
LABEL_42:
        v50 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithAttributedString_, v53);

        return (uint64_t)v50;
      }
    }
    else if (!v17)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_42;
    }
    if (v71 != v59)
      break;
    v90 = v12;
    v63 = v15;
    v20 = v72;
    v21 = v73;
    if (v73)
    {
      v22 = (_QWORD *)(v73 + 24 * ((v72 >> ((4 * *(_BYTE *)(v73 + 18) + 8) & 0x3C)) & 0xF));
      v23 = v22[3];
      v24 = v22[4];
      v25 = v22[5];
      v19 = __OFADD__(v16, 1);
      v26 = v16 + 1;
      v27 = v19;
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
      if ((v27 & 1) != 0)
        goto LABEL_45;
      v28 = v25;
      v29 = v17;
      v62 = v26;
      v74 = v26;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v65 = v28;
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v20, v13);
      v24 = v30;
      v32 = v31;
      result = swift_unknownObjectRelease();
      v19 = __OFADD__(v16, 1);
      v33 = v16 + 1;
      if (v19)
        goto LABEL_45;
      v65 = v32;
      v29 = v17;
      v62 = v33;
      v74 = v33;
      swift_unknownObjectRetain();
      v23 = specialized Rope._Node.subscript.getter(v20, v13);
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v19 = __OFADD__(v29, v23);
    v34 = v29 + v23;
    if (v19)
      goto LABEL_46;
    v75 = v34;
    if (!v13)
      goto LABEL_48;
    v35 = ((-15 << ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v13 + 18) | ((unint64_t)*(unsigned __int16 *)(v13 + 16) << ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C));
    result = swift_unknownObjectRetain();
    if (v20 >= v35)
      goto LABEL_48;
    v61 = v34;
    if (v21)
    {
      v36 = (4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C;
      v37 = ((v20 >> v36) & 0xF) + 1;
      if (v37 < *(unsigned __int16 *)(v21 + 16))
      {
        v72 = (v37 << v36) | ((-15 << v36) - 1) & v20;
LABEL_28:
        swift_unknownObjectRelease_n();
        goto LABEL_34;
      }
    }
    v38 = *(unsigned __int8 *)(v13 + 18);
    v39 = (4 * v38 + 8) & 0x3C;
    v66[0] = (v20 >> v39) & 0xF;
    if (v38)
    {
      swift_unknownObjectRetain();
      v40 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v52, v66, (uint64_t)&v71, v13, v38);
      swift_unknownObjectRelease();
      if ((v40 & 1) != 0)
        goto LABEL_28;
      v42 = *(unsigned __int8 *)(v13 + 18);
    }
    else
    {
      v41 = ((v20 >> v39) & 0xF) + 1;
      if (v41 < *(unsigned __int16 *)(v13 + 16))
      {
        v72 = (v41 << v39) | ((-15 << v39) - 1) & v20;
        swift_unknownObjectRelease_n();
        v73 = v13;
        goto LABEL_34;
      }
      v42 = 0;
    }
    v43 = *(unsigned __int16 *)(v13 + 16);
    v44 = *(_BYTE *)(v13 + 18);
    swift_unknownObjectRelease_n();
    v71 = v59;
    v72 = ((-15 << ((4 * v44 + 8) & 0x3C)) - 1) & v42 | (unint64_t)(v43 << ((4 * v44 + 8) & 0x3C));
    v73 = 0;
LABEL_34:
    v45 = v51[2];
    v81 = *v57;
    v82 = v45;
    v83 = v51[3];
    BigString.utf8.getter();
    BigString.UTF8View.index(_:offsetBy:)();
    v64 = v46;
    outlined release of Locale((uint64_t)v76);
    v47 = v51[2];
    v78 = *v57;
    v79 = v47;
    v80 = v51[3];
    BigString.utf16.getter();
    v12 = v64;
    v48 = BigString.UTF16View.distance(from:to:)();
    outlined release of Locale((uint64_t)v77);
    if (!*(_QWORD *)(v24 + 16))
    {
      swift_bridgeObjectRelease();
LABEL_39:
      result = swift_bridgeObjectRelease();
      v18 = v63;
      goto LABEL_6;
    }
    v66[0] = v24;
    v66[1] = v65;
    swift_bridgeObjectRetain();
    v49 = specialized Dictionary<>.init(_:attributeTable:options:)(v66, (uint64_t)v54, 0);
    if (v58)
    {
      v50 = v67;

      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRelease();
      return (uint64_t)v50;
    }
    if (!*(_QWORD *)(v49 + 16))
      goto LABEL_39;
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    v18 = v63;
    objc_msgSend(v53, sel_setAttributes_range_, _NativeDictionary.bridged()(), v63, v48);
    result = swift_unknownObjectRelease();
LABEL_6:
    v13 = v56;
    v19 = __OFADD__(v18, v48);
    v15 = v18 + v48;
    v17 = v61;
    v16 = v62;
    if (v19)
      goto LABEL_47;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

{
  return NSAttributedString.init<A>(_:including:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  uint64_t v6;

  v6 = *a1;
  v4 = NSAttributedString.init<A>(_:including:)(&v6, a2, a3, a4);
  swift_release();
  return v4;
}

uint64_t StringProtocol.enumerateSubstrings<A>(in:options:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v9 = v8;
  v29 = a4;
  v30 = a2;
  v27 = a3;
  v14 = *(_QWORD *)(a5 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  StringProtocol._ephemeralString.getter();
  v28 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = StringProtocol._toUTF16Offsets(_:)();
  v19 = v18 - result;
  if (__OFSUB__(v18, result))
  {
    __break(1u);
  }
  else
  {
    v20 = result;
    v21 = v9;
    v22 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v21, a5);
    v23 = (*(unsigned __int8 *)(v14 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v24 = (char *)swift_allocObject();
    *((_QWORD *)v24 + 2) = a5;
    *((_QWORD *)v24 + 3) = a6;
    *((_QWORD *)v24 + 4) = a7;
    *((_QWORD *)v24 + 5) = a8;
    v25 = v29;
    *((_QWORD *)v24 + 6) = v27;
    *((_QWORD *)v24 + 7) = v25;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v24[v23], v16, a5);
    aBlock[4] = partial apply for closure #1 in StringProtocol.enumerateSubstrings<A>(in:options:_:);
    aBlock[5] = v24;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = &block_descriptor_15_0;
    v26 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v28, sel_enumerateSubstringsInRange_options_usingBlock_, v20, v22, v30, v26);
    _Block_release(v26);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ___writeJSONObject_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 8 * a2);
  v5 = *(_QWORD *)(v3 + 8 * a3);
  v6 = objc_msgSend(v4, "length");
  return objc_msgSend(v4, "compare:options:range:locale:", v5, 577, 0, v6, objc_msgSend(MEMORY[0x1E0C99DC8], "systemLocale"));
}

id @objc static NSLocale._system.getter()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  id v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (_QWORD *)(static LocaleCache.cache + 16);
  v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.systemNSLocale()(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

id closure #1 in LocaleCache.systemNSLocale()@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;
  objc_super v14;
  _BYTE v15[144];
  _OWORD v16[9];

  v3 = (void *)a1[8];
  if (v3)
  {
    v4 = (id)a1[8];
  }
  else
  {
    if (a1[2])
    {
      v6 = a1[3];
      v7 = a1[2];
    }
    else
    {
      type metadata accessor for _LocaleICU();
      v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
      _s10Foundation17LocalePreferencesVSgWOi0_(v16);
      outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)v15);
      swift_allocObject();
      v7 = _LocaleICU.init(identifier:prefs:)(0, 0xE000000000000000, (uint64_t)v15);
      a1[2] = v7;
      a1[3] = v6;
      swift_retain();
    }
    v8 = (objc_class *)type metadata accessor for _NSSwiftLocale();
    v9 = (char *)objc_allocWithZone(v8);
    v10 = (uint64_t *)&v9[OBJC_IVAR____NSSwiftLocale_locale];
    *v10 = v7;
    v10[1] = v6;
    v11 = String._bridgeToObjectiveCImpl()();
    v14.receiver = v9;
    v14.super_class = v8;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v12 = objc_msgSendSuper2(&v14, sel_initWithLocaleIdentifier_, v11);
    swift_unknownObjectRelease();
    a1[8] = v12;
    v4 = v12;
    swift_unknownObjectRelease();
    v3 = 0;
  }
  *a2 = v4;
  return v3;
}

void sub_181837CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_181837F00(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18183804C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 56), 8);
  _Unwind_Resume(a1);
}

uint64_t ___getStringLength_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
  return 1;
}

uint64_t ___getStringLength_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
  return 1;
}

void sub_181838DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  _Block_object_dispose(&a48, 8);
  _Unwind_Resume(a1);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v12)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;

  v12 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v15 = v14;
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  swift_retain();
  v12(v13, v15, a3, a4, a5, a6, a7);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in StringProtocol.enumerateSubstrings<A>(in:options:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v7;

  return closure #1 in StringProtocol.enumerateSubstrings<A>(in:options:_:)(a1, a2, a3, a4, a5, a6, a7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v7 + 48));
}

uint64_t closure #1 in StringProtocol.enumerateSubstrings<A>(in:options:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  v19 = 0;
  if (a3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (__OFADD__(a3, a4))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v12 = result;
  result = StringProtocol._toUTF16Indices(_:)();
  if (a5 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v14 = v13;
  if (__OFADD__(a5, a6))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v15 = result;
  v16 = StringProtocol._toUTF16Indices(_:)();
  result = a8(v12, a2, v15, v14, v16, v17, &v19);
  if (v19 == 1)
    *a7 = v19;
  return result;
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("{%lu, %lu}"), range.location, range.length);
}

void protocol witness for Hashable.hash(into:) in conformance Date()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

void **_qfqp2_performParsing(void *a1, void *a2, void *a3)
{
  char *v6;
  int v7;
  void **result;
  int v9;
  int v10;
  void **v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t SetExpression;
  void *v26;
  void *v27;
  NSAggregateExpression *UserFunctionExpression;
  void *v29;
  NSString *v30;
  NSString *v31;
  NSConstantValueExpression *v32;
  NSComparisonPredicate *v33;
  NSVariableExpression *KVCExpression;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSString *v39;
  NSAnyKeyExpression *v40;
  NSAnyKeyExpression *v41;
  NSConstantValueExpression *v42;
  NSString *v43;
  NSCustomPredicateOperator *v44;
  void *v45;
  NSCustomPredicateOperator *v46;
  NSAnyKeyExpression *v47;
  void *v48;
  uint64_t v49;
  NSNumber *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  NSString *v56;
  NSString *v57;
  id v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  NSString *v62;
  NSAnyKeyExpression *v63;
  NSConstantValueExpression *v64;
  int v65;
  int v66;
  NSString *v67;
  uint64_t v68;
  void *v69;
  NSString *v70;
  void *v71;
  void **v72;
  char *__src;
  NSComparisonPredicate *FunctionExpression;
  id v75[5];
  id v76;
  _BYTE v77[1600];
  _BYTE v78[400];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if ((_qfqp2_InitializedGlobals & 1) == 0)
    _qfqp2_InitializedGlobalData();
  if (!a1)
    return 0;
  v6 = (char *)objc_msgSend(a1, "UTF8String");
  v7 = strlen(v6);
  result = (void **)_qfqp2_scan_bytes(v6, v7);
  if (!result)
    return result;
  v71 = a1;
  v72 = result;
  v9 = 0;
  v10 = 0u;
  v75[0] = 0;
  v75[1] = a1;
  v11 = (void **)v77;
  v75[2] = a2;
  v75[3] = a3;
  v75[4] = 0;
  v76 = 0;
  v12 = 200;
  __src = v77;
  v13 = v78;
  v14 = v78;
  v15 = -2;
  while (1)
  {
    *(_WORD *)v13 = v10;
    if (&v14[2 * v12 - 2] <= v13)
    {
      if ((unint64_t)v12 >> 4 > 0x270
        || ((unint64_t)(2 * v12) >= 0x2710 ? (v12 = 10000) : (v12 *= 2),
            v16 = (char *)malloc_type_malloc(10 * v12 + 7, 0x3C0A45C3uLL),
            (v17 = v16) == 0))
      {
        v65 = 2;
        goto LABEL_144;
      }
      v18 = (v13 - v14) >> 1;
      v19 = v18 + 1;
      memcpy(v16, v14, 2 * (v18 + 1));
      memcpy(&v17[(2 * v12 + 7) & 0xFFFFFFFFFFFFFFF8], __src, 8 * (v18 + 1));
      if (v14 != v78)
        free(v14);
      v13 = &v17[2 * v18];
      v11 = (void **)&v17[8 * v19 - 8 + ((2 * v12 + 7) & 0xFFFFFFFFFFFFFFF8)];
      if (v12 <= v19)
      {
        v65 = 1;
        v14 = v17;
        goto LABEL_144;
      }
      __src = &v17[(2 * v12 + 7) & 0xFFFFFFFFFFFFFFF8];
      v14 = v17;
    }
    v20 = yypact[v10];
    if (v20 == -58)
      goto LABEL_32;
    if (v15 == -2)
      v15 = _qfqp2lex((double *)&v76);
    if (v15 < 1)
    {
      v9 = 0;
      v15 = 0u;
    }
    else
    {
      v9 = v15 > 0x153 ? 2 : yytranslate[v15];
    }
    v21 = (v9 + v20);
    if (v21 > 0x32A || v9 != (__int16)yycheck[v21])
    {
LABEL_32:
      v23 = yydefact[v10];
      if (!yydefact[v10])
        goto LABEL_139;
      goto LABEL_33;
    }
    v22 = yytable[v21];
    if (v22 <= 0)
      break;
    if ((_DWORD)v21 == 71)
    {
      v65 = 0;
      goto LABEL_144;
    }
    if (v15)
      v15 = -2;
    else
      v15 = 0;
    v11[1] = v76;
    ++v11;
LABEL_120:
    v13 += 2;
    v10 = v22;
  }
  if (yytable[v21])
  {
    v23 = -v22;
LABEL_33:
    v24 = yyr2[v23];
    switch(v23)
    {
      case 2u:
      case 3u:
        v75[0] = *v11;
        goto LABEL_34;
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x54u:
      case 0x55u:
      case 0x5Du:
      case 0x6Bu:
LABEL_34:
        SetExpression = (uint64_t)*v11;
        break;
      case 9u:
        v38 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = -[NSCompoundPredicate initWithType:subpredicates:]([NSCompoundPredicate alloc], "initWithType:subpredicates:", 1, v38);

        goto LABEL_114;
      case 0xAu:
        SetExpression = objc_alloc_init(NSTruePredicate);
        break;
      case 0xBu:
        SetExpression = objc_alloc_init(NSFalsePredicate);
        break;
      case 0xCu:
      case 0x2Eu:
        SetExpression = (uint64_t)*(v11 - 1);
        break;
      case 0x10u:
        FunctionExpression = (NSComparisonPredicate *)buildANDPredicate(*(v11 - 2), *v11);

        goto LABEL_114;
      case 0x11u:
        FunctionExpression = (NSComparisonPredicate *)buildORPredicate(*(v11 - 2), *v11);

        goto LABEL_114;
      case 0x12u:
        v42 = (NSConstantValueExpression *)invertPredicate(*v11);
        goto LABEL_113;
      case 0x16u:
        FunctionExpression = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]([NSComparisonPredicate alloc], "initWithPredicateOperator:leftExpression:rightExpression:", *(v11 - 1), *(v11 - 2), *v11);

        goto LABEL_114;
      case 0x17u:
        v57 = NSStringForLexedIdentifier(*(v11 - 2));
        v58 = CopyBasicOperatorAddOptions(*(v11 - 4), v57);
        FunctionExpression = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]([NSComparisonPredicate alloc], "initWithPredicateOperator:leftExpression:rightExpression:", v58, *(v11 - 5), *v11);

        goto LABEL_114;
      case 0x18u:
        v41 = objc_alloc_init(NSAnyKeyExpression);
        FunctionExpression = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]([NSComparisonPredicate alloc], "initWithPredicateOperator:leftExpression:rightExpression:", *(v11 - 1), v41, *v11);

        goto LABEL_114;
      case 0x19u:
        v43 = NSStringForLexedIdentifier(*(v11 - 2));
        v44 = PredicateOperatorForCustomSelector((uint64_t)v43);
        FunctionExpression = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]([NSComparisonPredicate alloc], "initWithPredicateOperator:leftExpression:rightExpression:", v44, *(v11 - 3), *v11);

        goto LABEL_114;
      case 0x1Au:
        v70 = NSStringForLexedIdentifier(*(v11 - 2));
        v46 = PredicateOperatorForCustomSelector((uint64_t)v70);
        v47 = objc_alloc_init(NSAnyKeyExpression);
        FunctionExpression = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]([NSComparisonPredicate alloc], "initWithPredicateOperator:leftExpression:rightExpression:", v46, v47, *v11);

        goto LABEL_114;
      case 0x1Eu:
        FunctionExpression = HandleStringAggregatePredicate((uint64_t)*(v11 - 2), (uint64_t)*(v11 - 1), 0, (uint64_t)*v11);

        goto LABEL_114;
      case 0x1Fu:
        v63 = objc_alloc_init(NSAnyKeyExpression);
        FunctionExpression = HandleStringAggregatePredicate((uint64_t)v63, (uint64_t)*(v11 - 1), 0, (uint64_t)*v11);

        goto LABEL_114;
      case 0x20u:
        v56 = NSStringForLexedIdentifier(*(v11 - 2));
        FunctionExpression = HandleStringAggregatePredicate((uint64_t)*(v11 - 5), (uint64_t)*(v11 - 4), v56, (uint64_t)*v11);

        goto LABEL_114;
      case 0x21u:
        v39 = NSStringForLexedIdentifier(*(v11 - 2));
        v40 = objc_alloc_init(NSAnyKeyExpression);
        FunctionExpression = HandleStringAggregatePredicate((uint64_t)v40, (uint64_t)*(v11 - 4), v39, (uint64_t)*v11);

        goto LABEL_114;
      case 0x22u:
        SetExpression = 7;
        break;
      case 0x23u:
        SetExpression = 6;
        break;
      case 0x24u:
        SetExpression = 10;
        break;
      case 0x25u:
        SetExpression = 99;
        break;
      case 0x26u:
        SetExpression = 8;
        break;
      case 0x27u:
        SetExpression = 9;
        break;
      case 0x28u:
        SetExpression = 1000;
        break;
      case 0x29u:
        FunctionExpression = HandleBetweenPredicate((uint64_t)*(v11 - 2), (uint64_t)*v11);

        goto LABEL_114;
      case 0x2Au:
      case 0x2Bu:
        SetExpression = (uint64_t)setOperatorModifier(*v11, 2);
        break;
      case 0x2Cu:
        SetExpression = (uint64_t)setOperatorModifier(*v11, 1);
        break;
      case 0x2Du:
        v48 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", setOperatorModifier(*v11, 2), 0);
        FunctionExpression = -[NSCompoundPredicate initWithType:subpredicates:]([NSCompoundPredicate alloc], "initWithType:subpredicates:", 0, v48);

        goto LABEL_114;
      case 0x3Bu:
        SetExpression = (uint64_t)PredicateOperatorForName(4, 0);
        break;
      case 0x3Cu:
        SetExpression = (uint64_t)PredicateOperatorForName(5, 0);
        break;
      case 0x3Du:
        SetExpression = (uint64_t)PredicateOperatorForName(0, 0);
        break;
      case 0x3Eu:
        SetExpression = (uint64_t)PredicateOperatorForName(2, 0);
        break;
      case 0x3Fu:
        SetExpression = (uint64_t)PredicateOperatorForName(1, 0);
        break;
      case 0x40u:
        SetExpression = (uint64_t)PredicateOperatorForName(3, 0);
        break;
      case 0x41u:
        SetExpression = -[NSUTIPredicateOperator initForVariant:]([NSUTIPredicateOperator alloc], "initForVariant:", 0);
        break;
      case 0x42u:
        SetExpression = -[NSUTIPredicateOperator initForVariant:]([NSUTIPredicateOperator alloc], "initForVariant:", 1);
        break;
      case 0x48u:
      case 0x49u:
        v42 = -[NSConstantValueExpression initWithObject:]([NSConstantValueExpression alloc], "initWithObject:", *v11);
        goto LABEL_113;
      case 0x4Au:
        SetExpression = -[NSConstantValueExpression initWithObject:]([NSConstantValueExpression alloc], "initWithObject:", 0);
        break;
      case 0x4Bu:
        v32 = [NSConstantValueExpression alloc];
        SetExpression = -[NSConstantValueExpression initWithObject:](v32, "initWithObject:", _MergedGlobals_136);
        break;
      case 0x4Cu:
        v64 = [NSConstantValueExpression alloc];
        SetExpression = -[NSConstantValueExpression initWithObject:](v64, "initWithObject:", qword_1ECD0A380);
        break;
      case 0x4Du:
        SetExpression = objc_alloc_init(NSSelfExpression);
        break;
      case 0x4Eu:
        SetExpression = -[NSSymbolicExpression initWithString:]([NSSymbolicExpression alloc], "initWithString:", CFSTR("FIRST"));
        break;
      case 0x4Fu:
        SetExpression = -[NSSymbolicExpression initWithString:]([NSSymbolicExpression alloc], "initWithString:", CFSTR("LAST"));
        break;
      case 0x50u:
        SetExpression = -[NSSymbolicExpression initWithString:]([NSSymbolicExpression alloc], "initWithString:", CFSTR("SIZE"));
        break;
      case 0x51u:
        UserFunctionExpression = -[NSAggregateExpression initWithCollection:]([NSAggregateExpression alloc], "initWithCollection:", *(v11 - 1));
        goto LABEL_129;
      case 0x52u:
      case 0x53u:
      case 0x67u:
        SetExpression = (uint64_t)NSStringForLexedIdentifier(*v11);
        break;
      case 0x56u:
        v49 = (uint64_t)*v11;
        v50 = [NSNumber alloc];
        if (v49 > 0x7FFFFFFF)
          SetExpression = -[NSNumber initWithLongLong:](v50, "initWithLongLong:", v49);
        else
          SetExpression = -[NSNumber initWithInt:](v50, "initWithInt:", v49);
        break;
      case 0x57u:
        SetExpression = -[NSNumber initWithDouble:]([NSNumber alloc], "initWithDouble:", *(double *)v11);
        break;
      case 0x58u:
        v31 = NSStringForLexedIdentifier(*v11);
        KVCExpression = -[NSVariableExpression initWithObject:]([NSVariableExpression alloc], "initWithObject:", v31);
        goto LABEL_132;
      case 0x59u:
        v31 = NSStringForLexedIdentifier(*v11);
        KVCExpression = (NSVariableExpression *)ResolvePredicateArgument(v31, v75);
        goto LABEL_132;
      case 0x5Au:
        SetExpression = (uint64_t)ResolvePredicateArgument(CFSTR("@"), v75);
        break;
      case 0x5Bu:
        SetExpression = (uint64_t)ResolvePredicateArgument(CFSTR("%"), v75);
        break;
      case 0x5Cu:
      case 0x6Au:
        SetExpression = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
        break;
      case 0x5Eu:
      case 0x6Cu:
        v33 = (NSComparisonPredicate *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
        -[NSComparisonPredicate addObject:](v33, "addObject:", *v11);
        FunctionExpression = v33;
        goto LABEL_114;
      case 0x5Fu:
      case 0x6Du:
        objc_msgSend(*(v11 - 2), "addObject:", *v11);
        FunctionExpression = (NSComparisonPredicate *)*(v11 - 2);
        goto LABEL_114;
      case 0x60u:
        v31 = NSStringForLexedIdentifier(*v11);
        KVCExpression = (NSVariableExpression *)CreateKVCExpression((uint64_t)v31);
        goto LABEL_132;
      case 0x61u:
        v30 = NSStringForLexedIdentifier(*v11);
        v31 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("@%@"), v30);
        FunctionExpression = (NSComparisonPredicate *)CreateKVCExpression((uint64_t)v31);

        goto LABEL_115;
      case 0x62u:
        FunctionExpression = (NSComparisonPredicate *)ResolveKeyPathsIntoExpressionSequence(*(v11 - 2), *v11);

        goto LABEL_114;
      case 0x63u:
        FunctionExpression = -[NSVariableAssignmentExpression initWithAssignmentVariable:expression:]([NSVariableAssignmentExpression alloc], "initWithAssignmentVariable:expression:", objc_msgSend(*(v11 - 2), "variable"), *v11);

        goto LABEL_114;
      case 0x64u:
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)*(v11 - 3), *(v11 - 1));

        goto LABEL_135;
      case 0x65u:
        UserFunctionExpression = (NSAggregateExpression *)HandleCastingOperation(*(v11 - 1));
        goto LABEL_129;
      case 0x66u:
        UserFunctionExpression = (NSAggregateExpression *)CreateUserFunctionExpression(*(v11 - 1));
LABEL_129:
        FunctionExpression = (NSComparisonPredicate *)UserFunctionExpression;
        goto LABEL_135;
      case 0x68u:
        v31 = NSStringForLexedIdentifier(*(v11 - 1));
        KVCExpression = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@:"), v31);
LABEL_132:
        FunctionExpression = (NSComparisonPredicate *)KVCExpression;
        goto LABEL_115;
      case 0x69u:
        v62 = NSStringForLexedIdentifier(*(v11 - 2));
        FunctionExpression = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@:%@"), v62, *v11);

        goto LABEL_114;
      case 0x6Eu:
        v36 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(v11 - 3), *(v11 - 1), 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)CFSTR("objectFrom:withIndex:"), v36);

        goto LABEL_135;
      case 0x6Fu:
        v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)CFSTR("add:to:"), v27);

        goto LABEL_114;
      case 0x70u:
        v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)CFSTR("from:subtract:"), v26);

        goto LABEL_114;
      case 0x71u:
        v55 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)CFSTR("multiply:by:"), v55);

        goto LABEL_114;
      case 0x72u:
        v52 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)CFSTR("divide:by:"), v52);

        goto LABEL_114;
      case 0x73u:
        v37 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)CFSTR("raise:toPower:"), v37);

        goto LABEL_114;
      case 0x74u:
        v35 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)CFSTR("bitwiseAnd:with:"), v35);

        goto LABEL_114;
      case 0x75u:
        v51 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)CFSTR("bitwiseOr:with:"), v51);

        goto LABEL_114;
      case 0x76u:
        v54 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)CFSTR("bitwiseXor:with:"), v54);

        goto LABEL_114;
      case 0x77u:
        v45 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)CFSTR("leftshift:by:"), v45);

        goto LABEL_114;
      case 0x78u:
        v53 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *(v11 - 2), *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)CFSTR("rightshift:by:"), v53);

        goto LABEL_114;
      case 0x79u:
        v42 = HandleUnaryMinus(*v11);
LABEL_113:
        FunctionExpression = (NSComparisonPredicate *)v42;
        goto LABEL_114;
      case 0x7Au:
        v29 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", *v11, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)CFSTR("onesComplement:"), v29);

LABEL_114:
        v31 = (NSString *)*v11;
        goto LABEL_115;
      case 0x7Bu:
        FunctionExpression = -[NSSubqueryExpression initWithExpression:usingIteratorVariable:predicate:]([NSSubqueryExpression alloc], "initWithExpression:usingIteratorVariable:predicate:", *(v11 - 5), objc_msgSend(*(v11 - 3), "variable"), *(v11 - 1));

        goto LABEL_135;
      case 0x7Cu:
        SetExpression = (uint64_t)CreateSetExpression(*(v11 - 2), 5, *v11);
        break;
      case 0x7Du:
        SetExpression = (uint64_t)CreateSetExpression(*(v11 - 2), 6, *v11);
        break;
      case 0x7Eu:
        SetExpression = (uint64_t)CreateSetExpression(*(v11 - 2), 7, *v11);
        break;
      case 0x7Fu:
        FunctionExpression = (NSComparisonPredicate *)CreateFetchExpression((uint64_t)*(v11 - 5), (uint64_t)*(v11 - 3), 1);

        goto LABEL_88;
      case 0x80u:
        FunctionExpression = (NSComparisonPredicate *)CreateFetchExpression((uint64_t)*(v11 - 5), (uint64_t)*(v11 - 3), 0);

LABEL_88:
        v31 = (NSString *)*(v11 - 3);
        goto LABEL_115;
      case 0x81u:
        FunctionExpression = -[NSTernaryExpression initWithPredicate:trueExpression:falseExpression:]([NSTernaryExpression alloc], "initWithPredicate:trueExpression:falseExpression:", *(v11 - 5), *(v11 - 3), *(v11 - 1));

LABEL_135:
        v31 = (NSString *)*(v11 - 1);
LABEL_115:

        SetExpression = (uint64_t)FunctionExpression;
        break;
      default:
        SetExpression = (uint64_t)v11[1 - v24];
        break;
    }
    v59 = &v11[-v24];
    v13 -= 2 * v24;
    v59[1] = (void *)SetExpression;
    v11 = v59 + 1;
    v60 = yyr1[v23] - 85;
    v61 = (*(__int16 *)v13 + yypgoto[v60]);
    if (v61 <= 0x32A && yycheck[v61] == *(unsigned __int16 *)v13)
      v22 = yytable[v61];
    else
      v22 = yydefgoto[v60];
    goto LABEL_120;
  }
LABEL_139:
  if (v13 == v14)
  {
    v65 = 1;
    v14 = v13;
  }
  else
  {
    do
    {
      yydestruct(yystos[v10], v11--);
      v66 = *((__int16 *)v13 - 1);
      v13 -= 2;
      v10 = v66;
    }
    while (v13 != v14);
    v65 = 1;
    v13 = v14;
  }
LABEL_144:
  if (v15 != -2 && v15)
    yydestruct(v9, &v76);
  for (; v13 != v14; v13 -= 2)
    yydestruct(yystos[*(__int16 *)v13], v11--);
  if (v14 != v78)
    free(v14);
  if (v65 == 2)
  {
    v68 = objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("The predicate parser overflowed its buffer."), 0);
  }
  else
  {
    if (v65 != 1)
    {
      _qfqp2_delete_buffer(v72);
      return (void **)v75[0];
    }
    v67 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unable to parse the format string \"%@\""), v71);
    v68 = objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v67, 0);
  }
  v69 = (void *)v68;
  _qfqp2_delete_buffer(v72);
  result = (void **)v75[0];
  if (v69)
  {

    return (void **)v69;
  }
  return result;
}

void sub_18183ACD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t _qfqp2lex(double *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  FILE *v7;
  _QWORD *v8;
  void *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  signed int previous_state;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  unint64_t v26;
  int v27;
  int v28;
  char v29;
  int v30;
  size_t v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  size_t v40;
  uint64_t v41;
  int v42;
  void *i;
  int v45;
  unint64_t v46;
  int v47;
  void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  const char *v55;
  size_t v56;
  char *v57;
  int v58;
  const char *v59;
  int v60;
  char v61;
  char *v62;
  NSString *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char v72;
  const char *v74;
  uint64_t *v75;
  int v76;
  const char *v77;
  FILE *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char v89[2048];
  _BYTE v90[17];

  *(_QWORD *)&v90[1] = *MEMORY[0x1E0C80C00];
  v2 = &_MergedGlobals_114;
  v3 = &_MergedGlobals_114;
  v4 = &_MergedGlobals_114;
  v5 = &_MergedGlobals_114;
  if ((_MergedGlobals_135 & 1) == 0)
  {
    _MergedGlobals_135 = 1;
    if (!dword_1ECD0A35C)
      dword_1ECD0A35C = 1;
    if (!_qfqp2in)
      _qfqp2in = *MEMORY[0x1E0C80C18];
    if (!qword_1ECD0A368)
      qword_1ECD0A368 = *MEMORY[0x1E0C80C20];
    if (!yy_buffer_stack || (v6 = *(_QWORD *)yy_buffer_stack) == 0)
    {
      _qfqp2ensure_buffer_stack();
      v7 = (FILE *)_qfqp2in;
      v8 = malloc_type_malloc(0x48uLL, 0xF7B9761EuLL);
      if (!v8
        || (v6 = (uint64_t)v8,
            v8[3] = 0x4000,
            v9 = malloc_type_malloc(0x4002uLL, 0xF7B9761EuLL),
            (*(_QWORD *)(v6 + 8) = v9) == 0))
      {
        v78 = (FILE *)*MEMORY[0x1E0C80C10];
        v79 = "out of dynamic memory in _qfqp2_create_buffer()";
        goto LABEL_231;
      }
      *(_DWORD *)(v6 + 40) = 1;
      _qfqp2_init_buffer(v6, v7);
      *(_QWORD *)yy_buffer_stack = v6;
      v5 = &_MergedGlobals_114;
      v2 = &_MergedGlobals_114;
      v3 = &_MergedGlobals_114;
    }
    yy_n_chars = *(_QWORD *)(v6 + 32);
    v10 = *(_BYTE **)(v6 + 16);
    v2[339] = (uint64_t)v10;
    _qfqp2text = (uint64_t)v10;
    _qfqp2in = *(_QWORD *)v6;
    *((_BYTE *)v3 + 2616) = *v10;
  }
  v85 = v90;
  v86 = 0;
LABEL_15:
  v11 = v2[339];
  *(_BYTE *)v11 = *((_BYTE *)v3 + 2616);
  LODWORD(v12) = *((_DWORD *)v4 + 215);
  v87 = v11;
  do
  {
LABEL_16:
    v13 = yy_ec[4 * *(unsigned __int8 *)v11];
    if (yy_accept[(int)v12])
    {
      dword_1ECD0A360 = v12;
      qword_1ECD0A370 = v11;
    }
    v14 = (int)v12;
    v15 = yy_base[(int)v12] + v13;
    if (yy_chk[v15] != (_DWORD)v12)
    {
      do
      {
        v14 = yy_def[v14];
        if ((int)v14 >= 304)
          LOBYTE(v13) = yy_meta[4 * v13];
        v15 = yy_base[v14] + v13;
      }
      while (yy_chk[v15] != (_DWORD)v14);
    }
    v12 = (int)yy_nxt[v15];
    ++v11;
  }
  while (yy_base[v12] != 1346);
  previous_state = yy_nxt[v15];
  while (2)
  {
    v17 = yy_accept[previous_state];
    if (!v17)
    {
      v11 = qword_1ECD0A370;
      v17 = yy_accept[dword_1ECD0A360];
    }
    v5[340] = v87;
    *((_BYTE *)v3 + 2616) = *(_BYTE *)v11;
    *(_BYTE *)v11 = 0;
    v2[339] = v11;
LABEL_27:
    switch(v17)
    {
      case 0:
        *(_BYTE *)v11 = *((_BYTE *)v3 + 2616);
        v11 = qword_1ECD0A370;
        previous_state = dword_1ECD0A360;
        continue;
      case 1:
      case 2:
        goto LABEL_15;
      case 3:
        return 332;
      case 4:
        return 331;
      case 5:
        return 334;
      case 6:
        return 336;
      case 7:
        return 333;
      case 8:
        return 301;
      case 9:
        return 302;
      case 10:
        return 337;
      case 11:
        return 303;
      case 12:
        return 304;
      case 13:
        return 305;
      case 14:
        return 306;
      case 15:
        return 307;
      case 16:
        return 308;
      case 17:
        return 299;
      case 18:
        return 335;
      case 19:
        return 300;
      case 20:
        return 309;
      case 21:
        return 322;
      case 22:
      case 23:
        return 329;
      case 24:
      case 25:
        return 326;
      case 26:
      case 27:
        return 325;
      case 28:
      case 29:
        return 330;
      case 30:
        return 328;
      case 31:
        return 327;
      case 32:
        return 310;
      case 33:
        return 311;
      case 34:
        return 312;
      case 35:
        return 313;
      case 36:
        return 314;
      case 37:
        return 315;
      case 38:
        return 316;
      case 39:
        return 317;
      case 40:
        return 318;
      case 41:
        return 319;
      case 42:
        return 320;
      case 43:
      case 44:
        return 258;
      case 45:
      case 46:
        return 259;
      case 47:
        return 260;
      case 48:
      case 49:
        return 261;
      case 50:
        return 262;
      case 51:
        return 263;
      case 52:
        return 265;
      case 53:
        return 264;
      case 54:
        return 266;
      case 55:
        return 267;
      case 56:
        return 269;
      case 57:
        return 270;
      case 58:
        return 272;
      case 59:
        return 273;
      case 60:
      case 61:
        return 275;
      case 62:
        return 276;
      case 63:
        return 283;
      case 64:
        return 284;
      case 65:
      case 66:
        return 277;
      case 67:
      case 68:
        return 278;
      case 69:
        return 279;
      case 70:
        return 280;
      case 71:
        return 281;
      case 72:
        return 271;
      case 73:
        return 274;
      case 74:
        return 282;
      case 75:
        return 285;
      case 76:
        return 286;
      case 77:
        return 287;
      case 78:
        return 289;
      case 79:
        return 288;
      case 80:
        return 290;
      case 81:
        return 291;
      case 82:
        return 324;
      case 83:
        return 323;
      case 84:
        return 268;
      case 85:
        v74 = (const char *)v5[340];
        v75 = (uint64_t *)a1;
        v76 = 10;
        return convertTextToInteger(v74, v75, v76);
      case 86:
        return convertTextToDecimal((const char *)v5[340], a1);
      case 87:
        v74 = (const char *)v5[340];
        v75 = (uint64_t *)a1;
        v76 = 16;
        return convertTextToInteger(v74, v75, v76);
      case 88:
        v74 = (const char *)v5[340];
        v75 = (uint64_t *)a1;
        v76 = 8;
        return convertTextToInteger(v74, v75, v76);
      case 89:
        v74 = (const char *)v5[340];
        v75 = (uint64_t *)a1;
        v76 = 2;
        return convertTextToInteger(v74, v75, v76);
      case 90:
        v77 = (const char *)v5[340];
        goto LABEL_214;
      case 91:
        v77 = (const char *)(v5[340] + 1);
LABEL_214:
        *(_QWORD *)a1 = strdup(v77);
        return 295;
      case 92:
        v58 = 3;
        goto LABEL_102;
      case 93:
        v58 = 5;
        goto LABEL_102;
      case 94:
        v58 = 7;
LABEL_102:
        *((_DWORD *)v4 + 215) = v58;
        v86 = v89;
        goto LABEL_15;
      case 95:
        *((_DWORD *)v4 + 215) = 1;
        *v86 = 0;
        *(_QWORD *)a1 = strdup(v89);
        return 296;
      case 96:
        *((_DWORD *)v4 + 215) = 1;
        *v86 = 0;
        *(_QWORD *)a1 = strdup(v89);
        return 297;
      case 97:
        *((_DWORD *)v4 + 215) = 1;
        *v86 = 0;
        *(_QWORD *)a1 = strdup(v89);
        return 298;
      case 98:
      case 102:
      case 118:
      case 119:
      case 120:
        goto LABEL_132;
      case 99:
        v59 = (const char *)(v5[340] + 1);
        v60 = 8;
        goto LABEL_105;
      case 100:
        v59 = (const char *)(v5[340] + 2);
        v60 = 16;
LABEL_105:
        v61 = strtoul_l(v59, 0, v60, 0);
        v62 = v86;
        if (v86 + 1 > v85)
          goto LABEL_132;
        *v86 = v61;
        v86 = v62 + 1;
        goto LABEL_107;
      case 101:
        v83 = a1;
        v63 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%C"), (unsigned __int16)strtoul_l((const char *)(v5[340] + 2), 0, 16, 0));
        v64 = -[NSString lengthOfBytesUsingEncoding:](v63, "lengthOfBytesUsingEncoding:", 4);
        *(_QWORD *)&v65 = MEMORY[0x1E0C80A78](v64).n128_u64[0];
        v67 = (char *)&v80 - v66;
        v88 = 0;
        -[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](v63, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", (char *)&v80 - v66, v64, &v88, 4, 0, 0, -[NSString length](v63, "length", v65), 0);

        if (&v86[v88] > v85)
        {
          dword_1ECD0A35C = 1;
          return 321;
        }
        v4 = &_MergedGlobals_114;
        if (v88)
        {
          v68 = 0;
          v2 = &_MergedGlobals_114;
          v3 = &_MergedGlobals_114;
          v69 = v86;
          do
          {
            v69[v68] = v67[v68];
            ++v68;
          }
          while (v88 > v68);
          v86 = &v69[v68];
        }
        else
        {
          v2 = &_MergedGlobals_114;
          v3 = &_MergedGlobals_114;
        }
        a1 = v83;
        v5 = &_MergedGlobals_114;
        goto LABEL_15;
      case 103:
        v70 = v86;
        v71 = v86 + 1;
        if (v86 + 1 > v85)
          goto LABEL_132;
        v72 = 10;
        goto LABEL_129;
      case 104:
        v70 = v86;
        v71 = v86 + 1;
        if (v86 + 1 > v85)
          goto LABEL_132;
        v72 = 9;
        goto LABEL_129;
      case 105:
        v70 = v86;
        v71 = v86 + 1;
        if (v86 + 1 > v85)
          goto LABEL_132;
        v72 = 13;
        goto LABEL_129;
      case 106:
        v70 = v86;
        v71 = v86 + 1;
        if (v86 + 1 > v85)
          goto LABEL_132;
        v72 = 8;
        goto LABEL_129;
      case 107:
        v70 = v86;
        v71 = v86 + 1;
        if (v86 + 1 > v85)
          goto LABEL_132;
        v72 = 12;
        goto LABEL_129;
      case 108:
        v70 = v86;
        v71 = v86 + 1;
        if (v86 + 1 > v85)
          goto LABEL_132;
        v72 = 7;
        goto LABEL_129;
      case 109:
        v70 = v86;
        v71 = v86 + 1;
        if (v86 + 1 > v85)
          goto LABEL_132;
        v72 = 11;
        goto LABEL_129;
      case 110:
        v70 = v86;
        v71 = v86 + 1;
        if (v86 + 1 > v85)
        {
LABEL_132:
          *((_DWORD *)v4 + 215) = 1;
          return 321;
        }
        v72 = *(_BYTE *)(v5[340] + 1);
LABEL_129:
        *v70 = v72;
        v86 = v71;
        goto LABEL_15;
      case 111:
      case 112:
      case 113:
        v54 = v5;
        v55 = (const char *)v5[340];
        v56 = strlen(v55);
        v57 = &v86[(int)v56];
        if (v57 <= v85)
        {
          strlcpy(v86, v55, (uint64_t)((v56 << 32) + 0x100000000) >> 32);
          v86 = v57;
          v4 = &_MergedGlobals_114;
          v5 = v54;
LABEL_107:
          v2 = &_MergedGlobals_114;
          v3 = &_MergedGlobals_114;
          goto LABEL_15;
        }
        dword_1ECD0A35C = 1;
        return 321;
      case 114:
        *((_DWORD *)v4 + 215) = 1;
        return *(char *)v5[340];
      case 115:
        yy_fatal_error("flex scanner jammed");
      case 116:
        v18 = v5[340];
        *(_BYTE *)v11 = *((_BYTE *)v3 + 2616);
        v19 = yy_buffer_stack;
        v20 = *(_QWORD *)yy_buffer_stack;
        v21 = *(_DWORD *)(*(_QWORD *)yy_buffer_stack + 64);
        v83 = a1;
        v81 = v18;
        if (v21)
        {
          v22 = yy_n_chars;
        }
        else
        {
          v22 = *(_QWORD *)(v20 + 32);
          yy_n_chars = v22;
          *(_QWORD *)v20 = _qfqp2in;
          v20 = *(_QWORD *)v19;
          *(_DWORD *)(*(_QWORD *)v19 + 64) = 1;
        }
        v23 = v2[339];
        v24 = *(_BYTE **)(v20 + 8);
        if (v23 <= (unint64_t)&v24[v22])
        {
          v5 = &_MergedGlobals_114;
          v87 = _qfqp2text;
          v11 = _qfqp2text + ~(_DWORD)v81 + (int)v11;
          v2[339] = v11;
          previous_state = yy_get_previous_state();
          if (yy_accept[previous_state])
          {
            dword_1ECD0A360 = previous_state;
            qword_1ECD0A370 = v11;
          }
          v51 = previous_state;
          v52 = (int)yy_base[previous_state] + 1;
          a1 = v83;
          v2 = &_MergedGlobals_114;
          v3 = &_MergedGlobals_114;
          if (yy_chk[v52] != previous_state)
          {
            do
            {
              v51 = yy_def[v51];
              v52 = (int)yy_base[v51] + 1;
            }
            while (yy_chk[v52] != (_DWORD)v51);
          }
          LODWORD(v12) = yy_nxt[v52];
          if ((_DWORD)v12 && (_DWORD)v12 != 303)
          {
            yy_c_buf_p = ++v11;
            goto LABEL_16;
          }
          continue;
        }
        if (v23 > (unint64_t)&v24[v22 + 1])
        {
          v78 = (FILE *)*MEMORY[0x1E0C80C10];
          v79 = "fatal flex scanner internal error--end of buffer missed";
          goto LABEL_231;
        }
        v25 = (char *)_qfqp2text;
        v26 = v23 - _qfqp2text;
        if (!*(_DWORD *)(v20 + 60))
        {
          a1 = v83;
          v5 = &_MergedGlobals_114;
          if (v26 != 1)
            goto LABEL_87;
LABEL_81:
          v2[339] = (uint64_t)v25;
          v4 = &_MergedGlobals_114;
          v50 = dword_1ECD0A35C;
          if (dword_1ECD0A35C >= 1)
            v50 = dword_1ECD0A35C - 1;
          v17 = (v50 >> 1) + 117;
          goto LABEL_27;
        }
        v27 = v26 - 1;
        if ((int)v26 >= 2)
        {
          v28 = v26 - 1;
          do
          {
            v29 = *v25++;
            *v24++ = v29;
            --v28;
          }
          while (v28);
          v20 = *(_QWORD *)v19;
        }
        v30 = *(_DWORD *)(v20 + 64);
        v82 = (v26 - 1);
        if (v30 == 2)
        {
          yy_n_chars = 0;
          a1 = v83;
          goto LABEL_40;
        }
        v84 = v27;
        v33 = ~v27;
        v34 = *(_QWORD *)(v20 + 24);
        v35 = v34 - v26;
        if ((int)v34 - (int)v26 <= 0)
        {
          while (*(_DWORD *)(v20 + 40))
          {
            v36 = *(void **)(v20 + 8);
            v37 = 2 * v34;
            v38 = v34 + (v34 >> 3);
            if ((int)v37 >= 1)
              v38 = v37;
            *(_QWORD *)(v20 + 24) = v38;
            v39 = malloc_type_realloc(v36, v38 + 2, 0xA2B35647uLL);
            *(_QWORD *)(v20 + 8) = v39;
            if (!v39)
              goto LABEL_224;
            v23 = (unint64_t)v39 + (int)v23 - (int)v36;
            yy_c_buf_p = v23;
            v20 = *(_QWORD *)yy_buffer_stack;
            v34 = *(_QWORD *)(*(_QWORD *)yy_buffer_stack + 24);
            v35 = v34 + v33;
            if ((int)v34 + v33 >= 1)
              goto LABEL_50;
          }
          *(_QWORD *)(v20 + 8) = 0;
LABEL_224:
          v78 = (FILE *)*MEMORY[0x1E0C80C10];
          v79 = "fatal error - scanner input buffer overflow";
LABEL_231:
          fprintf(v78, "%s\n", v79);
          exit(2);
        }
LABEL_50:
        if (v35 >= 0x2000)
          v40 = 0x2000;
        else
          v40 = v35;
        a1 = v83;
        if (!*(_DWORD *)(v20 + 44))
        {
          *__error() = 0;
          for (i = (void *)(*(_QWORD *)(*(_QWORD *)yy_buffer_stack + 8) + v84);
                ;
                i = (void *)(*(_QWORD *)(*(_QWORD *)yy_buffer_stack + 8) + v84))
          {
            v31 = fread(i, 1uLL, v40, (FILE *)_qfqp2in);
            yy_n_chars = v31;
            if (v31)
            {
              v32 = 0;
              v19 = yy_buffer_stack;
              v20 = *(_QWORD *)yy_buffer_stack;
              *(_QWORD *)(*(_QWORD *)yy_buffer_stack + 32) = v31;
              v2 = &_MergedGlobals_114;
              v3 = &_MergedGlobals_114;
              goto LABEL_76;
            }
            if (!ferror((FILE *)_qfqp2in))
              break;
            if (*__error() != 4)
              goto LABEL_229;
            *__error() = 0;
            clearerr((FILE *)_qfqp2in);
          }
          v19 = yy_buffer_stack;
          v20 = *(_QWORD *)yy_buffer_stack;
          v2 = &_MergedGlobals_114;
          v3 = &_MergedGlobals_114;
          v27 = v82;
LABEL_40:
          *(_QWORD *)(v20 + 32) = 0;
          if (v27)
            goto LABEL_41;
          goto LABEL_75;
        }
        v41 = 0;
        while (1)
        {
          v42 = getc((FILE *)_qfqp2in);
          if (v42 == -1 || v42 == 10)
            break;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)yy_buffer_stack + 8) + v84 + v41++) = v42;
          if (v40 == v41)
            goto LABEL_62;
        }
        LODWORD(v40) = v41;
LABEL_62:
        v2 = &_MergedGlobals_114;
        v3 = &_MergedGlobals_114;
        if (v42 == -1)
        {
          v45 = ferror((FILE *)_qfqp2in);
          v3 = &_MergedGlobals_114;
          v2 = &_MergedGlobals_114;
          if (v45)
          {
LABEL_229:
            v78 = (FILE *)*MEMORY[0x1E0C80C10];
            v79 = "input in flex scanner failed";
            goto LABEL_231;
          }
        }
        else if (v42 == 10)
        {
          v32 = 0;
          v19 = yy_buffer_stack;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)yy_buffer_stack + 8) + v84 + v40) = 10;
          v31 = (int)v40 + 1;
          yy_n_chars = v31;
          v20 = *(_QWORD *)v19;
          *(_QWORD *)(*(_QWORD *)v19 + 32) = v31;
          goto LABEL_76;
        }
        v31 = (int)v40;
        yy_n_chars = (int)v40;
        v19 = yy_buffer_stack;
        v20 = *(_QWORD *)yy_buffer_stack;
        *(_QWORD *)(*(_QWORD *)yy_buffer_stack + 32) = (int)v40;
        if ((_DWORD)v40)
        {
          v32 = 0;
          goto LABEL_76;
        }
        if ((_DWORD)v82)
        {
LABEL_41:
          v31 = 0;
          v32 = 2;
          *(_DWORD *)(v20 + 64) = 2;
          goto LABEL_76;
        }
LABEL_75:
        _qfqp2_init_buffer(v20, (FILE *)_qfqp2in);
        v3 = &_MergedGlobals_114;
        v2 = &_MergedGlobals_114;
        v19 = yy_buffer_stack;
        v20 = *(_QWORD *)yy_buffer_stack;
        v31 = *(_QWORD *)(*(_QWORD *)yy_buffer_stack + 32);
        yy_n_chars = v31;
        yy_c_buf_p = *(_QWORD *)(v20 + 16);
        _qfqp2text = yy_c_buf_p;
        _qfqp2in = *(_QWORD *)v20;
        yy_hold_char = *(_BYTE *)yy_c_buf_p;
        v32 = 1;
LABEL_76:
        v46 = v31 + (int)v82;
        if (v46 <= *(_QWORD *)(v20 + 24))
        {
          v49 = *(_QWORD *)(v20 + 8);
          v5 = &_MergedGlobals_114;
        }
        else
        {
          v47 = v32;
          v48 = malloc_type_realloc(*(void **)(v20 + 8), v46 + (v31 >> 1), 0xA2B35647uLL);
          v19 = yy_buffer_stack;
          *(_QWORD *)(*(_QWORD *)yy_buffer_stack + 8) = v48;
          v49 = *(_QWORD *)(*(_QWORD *)v19 + 8);
          if (!v49)
          {
            v78 = (FILE *)*MEMORY[0x1E0C80C10];
            v79 = "out of dynamic memory in yy_get_next_buffer()";
            goto LABEL_231;
          }
          v46 = yy_n_chars + (int)v82;
          v5 = &_MergedGlobals_114;
          v2 = &_MergedGlobals_114;
          v3 = &_MergedGlobals_114;
          v32 = v47;
        }
        yy_n_chars = v46;
        *(_BYTE *)(v49 + v46) = 0;
        *(_BYTE *)(v46 + *(_QWORD *)(*(_QWORD *)v19 + 8) + 1) = 0;
        v25 = *(char **)(*(_QWORD *)v19 + 8);
        v5[340] = (uint64_t)v25;
        if (v32 == 1)
          goto LABEL_81;
        if (!v32)
        {
          v11 = (uint64_t)&v25[~(_DWORD)v81 + (int)v11];
          v2[339] = v11;
          v53 = yy_get_previous_state();
          v3 = &_MergedGlobals_114;
          v2 = &_MergedGlobals_114;
          LODWORD(v12) = v53;
          v87 = (uint64_t)v25;
          v4 = &_MergedGlobals_114;
          goto LABEL_16;
        }
        v24 = *(_BYTE **)(*(_QWORD *)yy_buffer_stack + 8);
        v22 = yy_n_chars;
LABEL_87:
        v11 = (uint64_t)&v24[v22];
        v2[339] = (uint64_t)&v24[v22];
        previous_state = yy_get_previous_state();
        v3 = &_MergedGlobals_114;
        v2 = &_MergedGlobals_114;
        v87 = (uint64_t)v25;
        v4 = &_MergedGlobals_114;
        continue;
      case 117:
        return 0;
      default:
        yy_fatal_error("fatal flex scanner internal error--no action found");
    }
  }
}

NSString *NSStringForLexedIdentifier(void *a1)
{
  NSString *v2;

  v2 = -[NSString initWithUTF8String:]([NSString alloc], "initWithUTF8String:", a1);
  free(a1);
  return v2;
}

NSKeyPathExpression *CreateKVCExpression(uint64_t a1)
{
  NSKeyPathSpecifierExpression *v1;
  NSKeyPathExpression *v2;

  v1 = -[NSKeyPathSpecifierExpression initWithObject:]([NSKeyPathSpecifierExpression alloc], "initWithObject:", a1);
  v2 = -[NSKeyPathExpression initWithKeyPath:]([NSKeyPathExpression alloc], "initWithKeyPath:", v1);

  return v2;
}

id PredicateOperatorForName(uint64_t a1, uint64_t a2)
{
  return +[NSPredicateOperator _newOperatorWithType:modifier:options:](NSPredicateOperator, "_newOperatorWithType:modifier:options:", a1, 0, a2);
}

void yydestruct(int a1, id *a2)
{
  switch(a1)
  {
    case 39:
    case 87:
    case 88:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:

      break;
    case 40:
    case 41:
    case 42:
    case 43:
      free(*a2);
      break;
    default:
      return;
  }
}

_QWORD *_qfqp2_scan_bytes(char *a1, int a2)
{
  size_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  FILE *v15;
  const char *v16;

  v4 = a2 + 2;
  v5 = malloc_type_malloc(v4, 0xF7B9761EuLL);
  if (!v5)
  {
    v15 = (FILE *)*MEMORY[0x1E0C80C10];
    v16 = "out of dynamic memory in _qfqp2_scan_bytes()";
    goto LABEL_16;
  }
  v6 = v5;
  if (a2 >= 1)
  {
    v7 = a2;
    v8 = v5;
    do
    {
      v9 = *a1++;
      *v8++ = v9;
      --v7;
    }
    while (v7);
  }
  *(_WORD *)&v5[a2] = 0;
  if (a2 > 0xFFFFFFFD)
  {
    v15 = (FILE *)*MEMORY[0x1E0C80C10];
    v16 = "bad buffer in _qfqp2_scan_bytes()";
    goto LABEL_16;
  }
  v10 = malloc_type_malloc(0x48uLL, 0xF7B9761EuLL);
  if (!v10)
  {
    v15 = (FILE *)*MEMORY[0x1E0C80C10];
    v16 = "out of dynamic memory in _qfqp2_scan_buffer()";
LABEL_16:
    fprintf(v15, "%s\n", v16);
    exit(2);
  }
  v11 = v10;
  v10[2] = v6;
  v10[3] = v4 - 2;
  *v10 = 0;
  v10[1] = v6;
  v10[4] = v4 - 2;
  v10[5] = 0;
  *((_DWORD *)v10 + 12) = 1;
  *(_QWORD *)((char *)v10 + 60) = 0;
  _qfqp2ensure_buffer_stack();
  v12 = yy_buffer_stack;
  if (!yy_buffer_stack)
  {
LABEL_11:
    *(_QWORD *)v12 = v11;
    yy_n_chars = v11[4];
    yy_c_buf_p = v11[2];
    _qfqp2text = yy_c_buf_p;
    _qfqp2in = *v11;
    yy_hold_char = *(_BYTE *)yy_c_buf_p;
    goto LABEL_12;
  }
  if (*(_QWORD **)yy_buffer_stack != v11)
  {
    if (*(_QWORD *)yy_buffer_stack)
    {
      v13 = yy_c_buf_p;
      *(_BYTE *)yy_c_buf_p = yy_hold_char;
      *(_QWORD *)(*(_QWORD *)v12 + 16) = v13;
      *(_QWORD *)(*(_QWORD *)v12 + 32) = yy_n_chars;
    }
    goto LABEL_11;
  }
LABEL_12:
  *((_DWORD *)v11 + 10) = 1;
  return v11;
}

void _qfqp2_delete_buffer(void **a1)
{
  void **v2;

  if (a1)
  {
    if (yy_buffer_stack)
      v2 = *(void ***)yy_buffer_stack;
    else
      v2 = 0;
    if (v2 == a1)
      *(_QWORD *)yy_buffer_stack = 0;
    if (*((_DWORD *)a1 + 10))
      free(a1[1]);
    free(a1);
  }
}

_QWORD *_qfqp2ensure_buffer_stack()
{
  _QWORD *result;
  _OWORD *v1;
  uint64_t v2;

  result = (_QWORD *)yy_buffer_stack;
  if (!yy_buffer_stack)
  {
    result = malloc_type_malloc(8uLL, 0xF7B9761EuLL);
    yy_buffer_stack = (uint64_t)result;
    if (result)
    {
      *result = 0;
      v2 = 1;
      goto LABEL_7;
    }
LABEL_9:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s\n", "out of dynamic memory in _qfqp2ensure_buffer_stack()");
    exit(2);
  }
  if (yy_buffer_stack_max != 1)
    return result;
  result = malloc_type_realloc((void *)yy_buffer_stack, 0x48uLL, 0xA2B35647uLL);
  yy_buffer_stack = (uint64_t)result;
  if (!result)
    goto LABEL_9;
  v1 = &result[yy_buffer_stack_max];
  *v1 = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  v1[3] = 0u;
  v2 = 9;
LABEL_7:
  yy_buffer_stack_max = v2;
  return result;
}

NSKeyPathExpression *ResolvePredicateArgument(void *a1, _QWORD *a2)
{
  void *v4;
  void ***v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSConstantValueExpression *v14;
  const __CFString *v15;
  NSKeyPathExpression *result;
  NSNumber *v17;
  double *v18;
  double v19;
  const unsigned __int8 *v20;
  NSNumber *v21;
  unsigned __int8 *v22;
  NSNumber *v23;
  double *v24;
  NSNumber *v25;
  void **v26;
  unsigned __int8 *v27;
  ConstStr255Param *v28;
  NSString *v29;
  NSConstantValueExpression *v30;
  const __CFString *v31;
  void **v32;
  __CFString *v33;
  NSKeyPathExpression *KVCExpression;
  NSNumber *v35;
  void **v36;
  ConstStr255Param *v37;
  ConstStr255Param *v38;
  NSNumber *v39;
  void **v40;
  ConstStr255Param *v41;
  NSString *v42;
  NSConstantValueExpression *v43;
  NSNumber *v44;
  unsigned __int16 *v45;
  NSNumber *v46;
  unsigned int *v47;
  NSNumber *v48;
  void **v49;
  NSNumber *v50;
  void **v51;
  NSNumber *v52;
  void **v53;
  NSNumber *v54;
  unsigned int *v55;
  NSNumber *v56;
  void **v57;
  NSNumber *v58;
  void **v59;
  void *v60;
  uint64_t v61;
  NSString *v62;
  void *v63;
  uint64_t v64;
  __CFString *v65;
  ConstStr255Param v66[2];

  v66[1] = *(ConstStr255Param *)MEMORY[0x1E0C80C00];
  if (!objc_msgSend(a1, "length"))
  {
    v60 = (void *)MEMORY[0x1E0C99DA0];
    v61 = *MEMORY[0x1E0C99768];
    v62 = (NSString *)CFSTR("Illegal argument conversion character");
    goto LABEL_64;
  }
  v4 = (void *)a2[2];
  v5 = (void ***)a2[3];
  v6 = a2[4];
  a2[4] = v6 + 1;
  v7 = objc_msgSend(a1, "characterAtIndex:", 0);
  v8 = 0;
  v66[0] = 0;
  v9 = 1;
  while (v7 <= 107)
  {
    if (v7 != 104)
    {
      if (v7 != 76)
        goto LABEL_13;
      goto LABEL_12;
    }
    v10 = -1;
LABEL_8:
    v8 += v10;
    v7 = objc_msgSend(a1, "characterAtIndex:", v9++);
  }
  if (v7 == 108)
  {
    v10 = 1;
    goto LABEL_8;
  }
  if (v7 != 113)
    goto LABEL_13;
LABEL_12:
  v7 = objc_msgSend(a1, "characterAtIndex:", v9);
  v8 = 2;
LABEL_13:
  if (v4)
  {
    v11 = objc_msgSend(v4, "count");
    if ((v6 & 0x8000000000000000) == 0 && v6 + 1 <= v11)
    {
      v12 = objc_msgSend(v4, "objectAtIndex:", v6);
      v13 = v7;
      v65 = (__CFString *)v12;
      switch(v7)
      {
        case '@':
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_17;
          return (NSKeyPathExpression *)v65;
        case 'A':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'O':
        case 'S':
        case 'U':
        case 'X':
        case 'a':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'i':
        case 'o':
        case 'p':
        case 's':
        case 'u':
        case 'x':
LABEL_17:
          v14 = [NSConstantValueExpression alloc];
          v15 = v65;
          goto LABEL_18;
        case 'B':
        case 'H':
        case 'I':
        case 'J':
        case 'L':
        case 'M':
        case 'N':
        case 'P':
        case 'Q':
        case 'R':
        case 'T':
        case 'V':
        case 'W':
        case 'Y':
        case 'Z':
        case '[':
        case '\\':
        case ']':
        case '^':
        case '_':
        case 'b':
        case 'h':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'q':
        case 'r':
        case 't':
        case 'v':
        case 'w':
          goto LABEL_65;
        case 'K':
          return CreateKVCExpression(v12);
        default:
          if ((_DWORD)v13 != 37)
            goto LABEL_65;
          v14 = [NSConstantValueExpression alloc];
          v15 = CFSTR("%");
LABEL_18:
          result = -[NSConstantValueExpression initWithObject:](v14, "initWithObject:", v15);
          break;
      }
      return result;
    }
    v60 = (void *)MEMORY[0x1E0C99DA0];
    v61 = *MEMORY[0x1E0C99768];
    v62 = (NSString *)CFSTR("Insufficient arguments for conversion characters specified in format string.");
LABEL_64:
    objc_exception_throw((id)objc_msgSend(v60, "exceptionWithName:reason:userInfo:", v61, v62, 0));
  }
  v13 = v7;
  switch(v7)
  {
    case '@':
      v32 = (*v5)++;
      v33 = (__CFString *)*v32;
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        KVCExpression = v33;
        goto LABEL_61;
      }
      v30 = [NSConstantValueExpression alloc];
      v31 = v33;
      goto LABEL_60;
    case 'A':
    case 'E':
    case 'F':
    case 'G':
    case 'a':
    case 'e':
    case 'f':
    case 'g':
      if (v8 == 2 || v8 == 1)
      {
        v23 = [NSNumber alloc];
        v24 = (double *)(*v5)++;
        v20 = -[NSNumber initWithDouble:](v23, "initWithDouble:", *v24);
      }
      else
      {
        if (v8)
        {
LABEL_29:
          v27 = 0;
          goto LABEL_56;
        }
        v17 = [NSNumber alloc];
        v18 = (double *)(*v5)++;
        v19 = *v18;
        *(float *)&v19 = *v18;
        v20 = -[NSNumber initWithFloat:](v17, "initWithFloat:", v19);
      }
LABEL_55:
      v27 = (unsigned __int8 *)v20;
      v66[0] = v20;
LABEL_56:
      v43 = -[NSConstantValueExpression initWithObject:]([NSConstantValueExpression alloc], "initWithObject:", v27);

      goto LABEL_57;
    case 'B':
    case 'H':
    case 'I':
    case 'J':
    case 'L':
    case 'M':
    case 'N':
    case 'Q':
    case 'R':
    case 'T':
    case 'V':
    case 'W':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'b':
    case 'h':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'q':
    case 'r':
    case 't':
    case 'v':
    case 'w':
      goto LABEL_65;
    case 'C':
      v35 = [NSNumber alloc];
      v36 = (*v5)++;
      v29 = -[NSNumber initWithShort:](v35, "initWithShort:", *(__int16 *)v36);
      goto LABEL_45;
    case 'D':
    case 'd':
    case 'i':
      switch(v8)
      {
        case -2:
          v25 = [NSNumber alloc];
          v26 = (*v5)++;
          v20 = -[NSNumber initWithChar:](v25, "initWithChar:", *(char *)v26);
          goto LABEL_55;
        case -1:
          v52 = [NSNumber alloc];
          v53 = (*v5)++;
          v20 = -[NSNumber initWithShort:](v52, "initWithShort:", *(__int16 *)v53);
          goto LABEL_55;
        case 0:
          v54 = [NSNumber alloc];
          v55 = (unsigned int *)(*v5)++;
          v20 = -[NSNumber initWithInt:](v54, "initWithInt:", *v55);
          goto LABEL_55;
        case 1:
          v56 = [NSNumber alloc];
          v57 = (*v5)++;
          v20 = -[NSNumber initWithLong:](v56, "initWithLong:", *v57);
          goto LABEL_55;
        case 2:
          v58 = [NSNumber alloc];
          v59 = (*v5)++;
          v20 = -[NSNumber initWithLongLong:](v58, "initWithLongLong:", *v59);
          goto LABEL_55;
        default:
          goto LABEL_29;
      }
    case 'K':
      v37 = (ConstStr255Param *)(*v5)++;
      v66[0] = *v37;
      KVCExpression = CreateKVCExpression((uint64_t)v66[0]);
      goto LABEL_61;
    case 'O':
    case 'U':
    case 'X':
    case 'o':
    case 'u':
    case 'x':
      switch(v8)
      {
        case -2:
          v21 = [NSNumber alloc];
          v22 = (unsigned __int8 *)(*v5)++;
          v20 = -[NSNumber initWithUnsignedChar:](v21, "initWithUnsignedChar:", *v22);
          goto LABEL_55;
        case -1:
          v44 = [NSNumber alloc];
          v45 = (unsigned __int16 *)(*v5)++;
          v20 = -[NSNumber initWithUnsignedShort:](v44, "initWithUnsignedShort:", *v45);
          goto LABEL_55;
        case 0:
          v46 = [NSNumber alloc];
          v47 = (unsigned int *)(*v5)++;
          v20 = -[NSNumber initWithUnsignedInt:](v46, "initWithUnsignedInt:", *v47);
          goto LABEL_55;
        case 1:
          v48 = [NSNumber alloc];
          v49 = (*v5)++;
          v20 = -[NSNumber initWithUnsignedLong:](v48, "initWithUnsignedLong:", *v49);
          goto LABEL_55;
        case 2:
          v50 = [NSNumber alloc];
          v51 = (*v5)++;
          v20 = -[NSNumber initWithUnsignedLongLong:](v50, "initWithUnsignedLongLong:", *v51);
          goto LABEL_55;
        default:
          goto LABEL_29;
      }
    case 'P':
      v38 = (ConstStr255Param *)(*v5)++;
      v66[0] = *v38;
      v29 = (NSString *)CFStringCreateWithPascalString((CFAllocatorRef)*MEMORY[0x1E0C9AE30], v66[0], 0x8000100u);
      goto LABEL_45;
    case 'S':
    case 's':
      v28 = (ConstStr255Param *)(*v5)++;
      v66[0] = *v28;
      v29 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%s"), v66[0]);
      goto LABEL_45;
    case 'c':
      v39 = [NSNumber alloc];
      v40 = (*v5)++;
      v29 = -[NSNumber initWithChar:](v39, "initWithChar:", *(char *)v40);
      goto LABEL_45;
    case 'p':
      v41 = (ConstStr255Param *)(*v5)++;
      v66[0] = *v41;
      v29 = +[NSValue value:withObjCType:](NSValue, "value:withObjCType:", v66, "^v");
LABEL_45:
      v42 = v29;
      v43 = -[NSConstantValueExpression initWithObject:]([NSConstantValueExpression alloc], "initWithObject:", v29);
      goto LABEL_58;
    default:
      if ((_DWORD)v13 != 37)
      {
LABEL_65:
        v63 = (void *)MEMORY[0x1E0C99DA0];
        v64 = *MEMORY[0x1E0C99768];
        v62 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unrecognized conversion specifier '%c' in format string."), v13);
        v60 = v63;
        v61 = v64;
        goto LABEL_64;
      }
      v30 = [NSConstantValueExpression alloc];
      v31 = CFSTR("%");
LABEL_60:
      KVCExpression = -[NSConstantValueExpression initWithObject:](v30, "initWithObject:", v31);
LABEL_61:
      v43 = (NSConstantValueExpression *)KVCExpression;
LABEL_57:
      v42 = 0;
LABEL_58:

      return (NSKeyPathExpression *)v43;
  }
}

uint64_t yy_get_previous_state()
{
  _BYTE *v0;
  uint64_t result;
  unsigned int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v0 = (_BYTE *)_qfqp2text;
  result = dword_1ECD0A35C;
  if (_qfqp2text < (unint64_t)yy_c_buf_p)
  {
    do
    {
      if (*v0)
        v2 = yy_ec[4 * *v0];
      else
        v2 = 1;
      if (yy_accept[(int)result])
      {
        dword_1ECD0A360 = result;
        qword_1ECD0A370 = (uint64_t)v0;
      }
      v3 = (int)result;
      v4 = yy_base[(int)result] + v2;
      if (yy_chk[v4] != (_DWORD)result)
      {
        v5 = v2;
        do
        {
          v3 = yy_def[v3];
          if ((int)v3 >= 304)
            LOBYTE(v5) = yy_meta[4 * v5];
          v4 = yy_base[v3] + v5;
        }
        while (yy_chk[v4] != (_DWORD)v3);
      }
      ++v0;
      result = yy_nxt[v4];
    }
    while (v0 != (_BYTE *)yy_c_buf_p);
  }
  return result;
}

uint64_t convertTextToInteger(const char *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  BOOL v9;
  NSString *v10;
  char *v12;
  char *v13[2];

  v13[1] = *(char **)MEMORY[0x1E0C80C00];
  v13[0] = 0;
  *__error() = 0;
  v6 = strtoll_l(a1, v13, a3, 0);
  if (*__error() != 34)
  {
    if (v13[0] && v13[0] != a1 && !*v13[0])
    {
      *a2 = v6;
      return 292;
    }
    goto LABEL_14;
  }
  v12 = 0;
  *__error() = 0;
  v7 = strtoull_l(a1, &v12, a3, 0);
  v9 = *__error() == 34 || v12 == 0 || v12 == a1;
  if (v9 || *v12)
  {
LABEL_14:
    v10 = -[NSString initWithCString:]([NSString alloc], "initWithCString:", a1);
    *a2 = (uint64_t)-[NSDecimalNumber initWithString:]([NSDecimalNumber alloc], "initWithString:", v10);

    return 294;
  }
  *a2 = (uint64_t)-[NSNumber initWithUnsignedLongLong:]([NSNumber alloc], "initWithUnsignedLongLong:", v7);
  return 294;
}

uint64_t convertTextToDecimal(const char *a1, double *a2)
{
  double v4;
  BOOL v5;
  NSString *v6;
  char *v8[2];

  v8[1] = *(char **)MEMORY[0x1E0C80C00];
  v8[0] = 0;
  v4 = strtod_l(a1, v8, 0);
  if (v8[0])
    v5 = v8[0] == a1;
  else
    v5 = 1;
  if (v5 || *v8[0])
  {
    v6 = -[NSString initWithCString:]([NSString alloc], "initWithCString:", a1);
    *(_QWORD *)a2 = -[NSDecimalNumber initWithString:]([NSDecimalNumber alloc], "initWithString:", v6);

    return 294;
  }
  else
  {
    *a2 = v4;
    return 293;
  }
}

void *setOperatorModifier(void *a1, uint64_t a2)
{
  if ((objc_opt_isKindOfClass() & 1) == 0)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Tried to set a NSComparisonPredicateModifier on a compound predicate. This was probably the result of a predicate containing ANY/ALL BETWEEN."), 0));
  objc_msgSend((id)objc_msgSend(a1, "predicateOperator"), "_setModifier:", a2);
  return a1;
}

NSCustomPredicateOperator *PredicateOperatorForCustomSelector(uint64_t a1)
{
  NSMutableString *v1;
  SEL v2;

  v1 = -[NSString initWithString:]([NSMutableString alloc], "initWithString:", a1);
  -[NSMutableString appendString:](v1, "appendString:", CFSTR(":"));
  v2 = NSSelectorFromString(&v1->super);

  return -[NSCustomPredicateOperator initWithCustomSelector:modifier:]([NSCustomPredicateOperator alloc], "initWithCustomSelector:modifier:", v2, 0);
}

void Measurement<>.FormatStyle.UnitWidth.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t __CharacterSetStorage.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t getObjectValue(uint64_t a1, _QWORD *a2, __CFString *a3, CFIndex *a4, int a5, NSError **a6)
{
  uint64_t NoteCount;
  uint64_t v13;
  _BOOL4 v14;
  CFIndex v15;
  CFIndex v16;
  __CFDateFormatter *v17;
  CFDateRef v18;
  const __CFDate *v19;
  uint64_t v20;
  NSCalendarDate *v21;
  NSError *v22;
  uint64_t result;
  CFRange rangep;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  NoteCount = _CFLocaleGetNoteCount();
  v13 = _CFTimeZoneGetNoteCount() + NoteCount;
  if (v13 + _CFCalendarGetMidnightNoteCount() != *(_QWORD *)(a1 + 24))
    objc_msgSend((id)a1, "_clearFormatter");
  objc_msgSend((id)a1, "_regenerateFormatterIfAbsent");
  if (a5)
  {
    v14 = _CFExecutableLinkedOnOrAfter() != 0;
    if (a4)
    {
LABEL_5:
      v16 = *a4;
      v15 = a4[1];
      goto LABEL_8;
    }
  }
  else
  {
    v14 = 0;
    if (a4)
      goto LABEL_5;
  }
  v15 = -[__CFString length](a3, "length");
  v16 = 0;
LABEL_8:
  rangep.location = v16;
  rangep.length = v15;
  v17 = *(__CFDateFormatter **)(a1 + 16);
  if (v17)
    v18 = CFDateFormatterCreateDateFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE30], v17, a3, &rangep);
  else
    v18 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  v19 = v18;
  v20 = -[__CFString substringFromIndex:](a3, "substringFromIndex:", rangep.length + rangep.location);
  if (v18
    && (!v14
     || -[NSCharacterSet isSupersetOfSet:](+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet"), "isSupersetOfSet:", +[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", v20))))
  {
    if (a4)
      *(CFRange *)a4 = rangep;
    if (a2)
    {
      if (objc_msgSend((id)a1, "generatesCalendarDates"))
      {
        -[__CFDate timeIntervalSinceReferenceDate](v18, "timeIntervalSinceReferenceDate");
        v21 = +[NSCalendarDate dateWithTimeIntervalSinceReferenceDate:](NSCalendarDate, "dateWithTimeIntervalSinceReferenceDate:");
        -[NSCalendarDate setTimeZone:](v21, "setTimeZone:", objc_msgSend((id)a1, "timeZone"));
        -[NSCalendarDate setCalendarFormat:](v21, "setCalendarFormat:", &stru_1E0F56070);
        *a2 = v21;
      }
      else
      {
        *a2 = v18;
      }
    }
    return 1;
  }
  else if (a6)
  {
    v22 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 2048, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", a3, CFSTR("NSInvalidValue"), 0));
    result = 0;
    *a6 = v22;
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t getObjectValue_0(uint64_t a1, _QWORD *a2, __CFString *a3, CFIndex *a4, int a5, _QWORD *a6)
{
  unint64_t v12;
  NSDecimalNumber *v13;
  void *v14;
  void *v15;
  NSCharacterSet *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  NSDecimalNumber **v20;
  uint64_t v21;
  CFIndex v22;
  CFIndex v23;
  __CFNumberFormatter *v24;
  CFAllocatorRef *v25;
  __CFNumberFormatter *v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  NSCharacterSet *v30;
  NSCharacterSet *v31;
  NSCharacterSet *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  __CFString **v38;
  __CFNumberFormatter *v39;
  CFStringRef Format;
  const __CFString *v41;
  CFIndex Length;
  CFIndex v43;
  CFIndex v44;
  BOOL v45;
  int CharacterAtIndex;
  uint64_t v47;
  __CFString *v49;
  uint64_t v50;
  CFIndex v51;
  CFIndex v52;
  __CFNumberFormatter *v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  NSCharacterSet *v58;
  NSCharacterSet *v59;
  NSCharacterSet *v60;
  uint64_t v61;
  uint64_t v62;
  const __CFAllocator *allocator;
  CFIndex v64;
  BOOL v65;
  __CFString *theString;
  _QWORD *v67;
  CFRange rangep;
  __int128 v69;
  int v70;
  UniChar chars[8];
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v12 = 0x1ECCFB000uLL;
  objc_msgSend(*(id *)(a1 + 40), "lock");
  if (-[__CFString isEqualToString:](a3, "isEqualToString:", objc_msgSend((id)a1, "nilSymbol")))
  {
    if (a2)
      *a2 = 0;
    goto LABEL_70;
  }
  if (-[__CFString isEqualToString:](a3, "isEqualToString:", objc_msgSend((id)a1, "negativeInfinitySymbol")))
  {
    if (a2)
    {
      if (objc_msgSend((id)a1, "generatesDecimalNumbers"))
      {
        v13 = +[NSDecimalNumber minimumDecimalNumber](NSDecimalNumber, "minimumDecimalNumber");
LABEL_69:
        *a2 = v13;
        goto LABEL_70;
      }
      v20 = (NSDecimalNumber **)MEMORY[0x1E0C9B210];
      goto LABEL_68;
    }
    goto LABEL_70;
  }
  if (!-[__CFString isEqualToString:](a3, "isEqualToString:", objc_msgSend((id)a1, "positiveInfinitySymbol")))
  {
    v14 = (void *)objc_msgSend((id)a1, "decimalSeparator");
    v15 = (void *)objc_msgSend((id)a1, "groupingSeparator");
    if (objc_msgSend(v15, "length") && objc_msgSend(v15, "characterAtIndex:", 0) == 160
      || objc_msgSend(v14, "length") && objc_msgSend(v14, "characterAtIndex:", 0) == 160)
    {
      v16 = +[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("0123456789"));
      v17 = -[__CFString rangeOfCharacterFromSet:options:](a3, "rangeOfCharacterFromSet:options:", v16, 2);
      v18 = -[__CFString rangeOfCharacterFromSet:options:](a3, "rangeOfCharacterFromSet:options:", v16, 6);
      if (v17 != 0x7FFFFFFFFFFFFFFFLL && v18 != 0x7FFFFFFFFFFFFFFFLL)
      {
        chars[0] = 160;
        a3 = (__CFString *)-[__CFString stringByReplacingOccurrencesOfString:withString:options:range:](a3, "stringByReplacingOccurrencesOfString:withString:options:range:", CFSTR(" "), +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", chars, 1), 2, v17, v18 - v17 + 1);
      }
    }
    if (_CFLocaleGetNoteCount() != *(_QWORD *)(a1 + 24))
      objc_msgSend((id)a1, "_clearFormatter");
    if (a5)
      v19 = _CFExecutableLinkedOnOrAfter() != 0;
    else
      v19 = 0;
    v21 = -[__CFString length](a3, "length");
    v64 = v21;
    if (a4)
    {
      v22 = *a4;
      v23 = a4[1];
    }
    else
    {
      v22 = 0;
      v23 = v21;
    }
    rangep.location = v22;
    rangep.length = v23;
    v24 = *(__CFNumberFormatter **)(a1 + 16);
    v25 = (CFAllocatorRef *)MEMORY[0x1E0C9AE30];
    if (v24 || (objc_msgSend((id)a1, "_regenerateFormatter"), (v24 = *(__CFNumberFormatter **)(a1 + 16)) != 0))
      v24 = CFNumberFormatterCreateNumberFromString(*v25, v24, a3, &rangep, objc_msgSend((id)a1, "allowsFloats") ^ 1);
    v67 = a6;
    v26 = v24;
    v27 = -[__CFString substringFromIndex:](a3, "substringFromIndex:", rangep.length + rangep.location);
    if (v24)
      v28 = v19;
    else
      v28 = 0;
    v65 = v19;
    if (v28)
    {
      v29 = v27;
      v30 = +[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet");
      v31 = +[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", v29);
      v32 = v30;
      v12 = 0x1ECCFB000uLL;
      if (-[NSCharacterSet isSupersetOfSet:](v32, "isSupersetOfSet:", v31))
        goto LABEL_38;
    }
    else if (v24)
    {
      goto LABEL_38;
    }
    v39 = *(__CFNumberFormatter **)(a1 + 16);
    if (!v39)
      goto LABEL_88;
    Format = CFNumberFormatterGetFormat(v39);
    if (!Format)
      goto LABEL_88;
    v41 = Format;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    theString = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0);
    Length = CFStringGetLength(v41);
    if (Length >= 1)
    {
      v43 = Length;
      v44 = 0;
      v45 = 0;
      while (1)
      {
        chars[0] = 0;
        CharacterAtIndex = CFStringGetCharacterAtIndex(v41, v44);
        chars[0] = CharacterAtIndex;
        if ((CharacterAtIndex - 35) > 0x1D)
          break;
        if (((1 << (CharacterAtIndex - 35)) & 0x207FED05) != 0)
          goto LABEL_52;
        if (CharacterAtIndex != 39)
          break;
        v45 = !v45;
LABEL_55:
        if (v43 == ++v44)
          goto LABEL_72;
      }
      if (CharacterAtIndex != 164 && CharacterAtIndex != 8240)
        goto LABEL_55;
LABEL_52:
      if (v45)
      {
        v45 = 1;
      }
      else
      {
        CFStringAppendCharacters(theString, chars, 1);
        v45 = 0;
      }
      goto LABEL_55;
    }
LABEL_72:
    v49 = theString;
    if (CFEqual(theString, v41))
    {
      CFRelease(theString);
      v12 = 0x1ECCFB000;
      goto LABEL_88;
    }
    CFRetain(v41);
    CFNumberFormatterSetFormat(*(CFNumberFormatterRef *)(a1 + 16), theString);
    if (a4)
    {
      v51 = *a4;
      v52 = a4[1];
    }
    else
    {
      v51 = 0;
      v52 = v64;
    }
    rangep.location = v51;
    rangep.length = v52;
    v24 = CFNumberFormatterCreateNumberFromString(allocator, *(CFNumberFormatterRef *)(a1 + 16), a3, &rangep, objc_msgSend((id)a1, "allowsFloats") ^ 1);
    v53 = v24;
    v54 = -[__CFString substringFromIndex:](a3, "substringFromIndex:", rangep.length + rangep.location);
    v55 = v24 == 0;
    if (v24)
      v56 = !v65;
    else
      v56 = 1;
    if ((v56 & 1) == 0)
    {
      v57 = v54;
      v58 = +[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet");
      v59 = +[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", v57);
      v60 = v58;
      v49 = theString;
      v55 = !-[NSCharacterSet isSupersetOfSet:](v60, "isSupersetOfSet:", v59);
    }
    v12 = 0x1ECCFB000;
    CFNumberFormatterSetFormat(*(CFNumberFormatterRef *)(a1 + 16), v41);
    CFRelease(v41);
    CFRelease(v49);
    if ((v55 & 1) != 0)
    {
LABEL_88:
      v34 = v67;
      if (v67)
      {
        v50 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", a3, CFSTR("NSInvalidValue"), 0, v61, v62);
        goto LABEL_90;
      }
LABEL_91:
      v47 = 0;
      goto LABEL_92;
    }
LABEL_38:
    if (a4)
      *(CFRange *)a4 = rangep;
    v33 = objc_msgSend((id)a1, "minimum");
    v34 = v67;
    if (v33 && (v35 = v33, -[__CFNumberFormatter compare:](v24, "compare:", v33) == -1))
    {
      if (!v67)
        goto LABEL_91;
      v37 = (void *)MEMORY[0x1E0C99D80];
      v38 = NSMinimumValidValueErrorKey;
    }
    else
    {
      v36 = objc_msgSend((id)a1, "maximum");
      if (!v36 || (v35 = v36, -[__CFNumberFormatter compare:](v24, "compare:", v36) != 1))
      {
        if (a2)
        {
          if (objc_msgSend((id)a1, "generatesDecimalNumbers"))
          {
            memset(chars, 0, sizeof(chars));
            v72 = 0;
            if (v24)
              -[__CFNumberFormatter decimalValue](v24, "decimalValue");
            v69 = *(_OWORD *)chars;
            v70 = v72;
            *a2 = +[NSDecimalNumber decimalNumberWithDecimal:](NSDecimalNumber, "decimalNumberWithDecimal:", &v69);
          }
          else
          {
            *a2 = v24;
          }
        }
        v47 = 1;
        goto LABEL_92;
      }
      if (!v67)
        goto LABEL_91;
      v37 = (void *)MEMORY[0x1E0C99D80];
      v38 = NSMaximumValidValueErrorKey;
    }
    v50 = objc_msgSend(v37, "dictionaryWithObjectsAndKeys:", v35, *v38, v24, CFSTR("NSInvalidValue"), 0);
LABEL_90:
    v47 = 0;
    *v34 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 2048, v50);
LABEL_92:
    objc_msgSend(*(id *)(a1 + *(int *)(v12 + 1048)), "unlock");
    return v47;
  }
  if (a2)
  {
    if (objc_msgSend((id)a1, "generatesDecimalNumbers"))
    {
      v13 = +[NSDecimalNumber maximumDecimalNumber](NSDecimalNumber, "maximumDecimalNumber");
      goto LABEL_69;
    }
    v20 = (NSDecimalNumber **)MEMORY[0x1E0C9B218];
LABEL_68:
    v13 = *v20;
    goto LABEL_69;
  }
LABEL_70:
  objc_msgSend(*(id *)(a1 + 40), "unlock");
  return 1;
}

void sub_18183EF50(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t normalizedPath(void *a1)
{
  __CFString *v2;

  v2 = CFSTR("/private/preboot/Cryptexes/OS/");
  if ((objc_msgSend(a1, "hasPrefix:", CFSTR("/private/preboot/Cryptexes/OS/")) & 1) != 0)
    return objc_msgSend(a1, "substringFromIndex:", -[__CFString length](v2, "length") - 1);
  v2 = CFSTR("/System/Cryptexes/OS/");
  if (objc_msgSend(a1, "hasPrefix:", CFSTR("/System/Cryptexes/OS/")))
    return objc_msgSend(a1, "substringFromIndex:", -[__CFString length](v2, "length") - 1);
  else
    return (uint64_t)a1;
}

uint64_t _NSReadFromFileDescriptorWithProgress(int a1, char *a2, unint64_t a3, uint64_t a4, int a5)
{
  NSProgress *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  ssize_t v14;
  unint64_t v15;
  NSObject *v17;
  uint64_t v18;
  int v19;
  int *v20;
  char *v21;
  _DWORD v22[2];
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a5 && +[NSProgress currentProgress](NSProgress, "currentProgress"))
  {
    v9 = +[NSProgress progressWithTotalUnitCount:](NSProgress, "progressWithTotalUnitCount:", a3);
    if (v9)
    {
      if (a4)
      {
        v10 = *(unsigned int *)(a4 + 8);
      }
      else
      {
        v18 = _NSPreferredChunkSizeForFileDescriptor(a1);
        if (v18 == -1)
          v10 = a3;
        else
          v10 = v18;
      }
      goto LABEL_8;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = a3;
LABEL_8:
  v11 = a3;
LABEL_9:
  if (!v11)
    return a3 - v11;
  if (!-[NSProgress isCancelled](v9, "isCancelled"))
  {
    if (v10 >= v11)
      v12 = v11;
    else
      v12 = v10;
    if (v12 >= 0x7FFFFFFF)
      v13 = 0x7FFFFFFFLL;
    else
      v13 = v12;
    while (!-[NSProgress isCancelled](v9, "isCancelled"))
    {
      v14 = read(a1, a2, v13);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v15 = v14;
        if (v14)
        {
          v11 -= v14;
          -[NSProgress setCompletedUnitCount:](v9, "setCompletedUnitCount:", a3 - v11);
          a2 += v15;
          if (v15 >= v13)
            goto LABEL_9;
        }
        return a3 - v11;
      }
      if (*__error() != 4)
      {
        if (qword_1ECD09F80 != -1)
          dispatch_once(&qword_1ECD09F80, &__block_literal_global_34);
        v17 = _MergedGlobals_111;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_111, OS_LOG_TYPE_ERROR))
        {
          v19 = *__error();
          v20 = __error();
          v21 = strerror(*v20);
          v22[0] = 67109378;
          v22[1] = v19;
          v23 = 2080;
          v24 = v21;
          _os_log_error_impl(&dword_1817D9000, v17, OS_LOG_TYPE_ERROR, "Encountered read failure %d %s", (uint8_t *)v22, 0x12u);
        }
        return -1;
      }
    }
  }
  return -1;
}

id _NSFileSystemRepresentationString(uint64_t a1, uint64_t a2)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSString), "initWithBytes:length:encoding:", a1, a2, 4);
}

void *__cdecl NSZoneMalloc(NSZone *zone, NSUInteger size)
{
  if (!zone)
    zone = (NSZone *)malloc_default_zone();
  return malloc_type_zone_malloc((malloc_zone_t *)zone, size, 0x4A6F13AEuLL);
}

NSError *_NSErrorWithFilePathErrnoVariantAndExtraUserInfo(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  id v10;
  NSError *v11;
  uint64_t v12;
  const __CFString *v13;
  void *v14;
  char isKindOfClass;
  const NSErrorUserInfoKey *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  NSError *v22;
  _BYTE v24[128];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a1 <= 12)
    {
      if (a1 != 1)
      {
        if (a1 == 2)
        {
          v9 = 260;
          goto LABEL_31;
        }
LABEL_28:
        v9 = 256;
        goto LABEL_31;
      }
    }
    else if (a1 != 13)
    {
      if (a1 == 27)
      {
        v9 = 263;
        goto LABEL_31;
      }
      if (a1 == 63)
      {
        v9 = 258;
        goto LABEL_31;
      }
      goto LABEL_28;
    }
    v9 = 257;
    goto LABEL_31;
  }
  if (a1 <= 27)
  {
    if (a1 > 12)
    {
      if (a1 != 13)
      {
        if (a1 == 17)
        {
          v9 = 516;
          goto LABEL_31;
        }
        goto LABEL_30;
      }
    }
    else if (a1 != 1)
    {
      if (a1 == 2)
      {
        v9 = 4;
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    v9 = 513;
    goto LABEL_31;
  }
  if (a1 <= 62)
  {
    if (a1 != 28)
    {
      if (a1 == 30)
      {
        v9 = 642;
        goto LABEL_31;
      }
      goto LABEL_30;
    }
LABEL_25:
    v9 = 640;
    goto LABEL_31;
  }
  if (a1 == 63)
  {
    v9 = 514;
    goto LABEL_31;
  }
  if (a1 == 69)
    goto LABEL_25;
LABEL_30:
  v9 = 512;
LABEL_31:
  v10 = objc_alloc(MEMORY[0x1E0C99E08]);
  v11 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSPOSIXErrorDomain"), a1, 0);
  if (a4)
    v12 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", a4);
  else
    v12 = 0;
  v13 = CFSTR("NSUserStringVariant");
  if (!a4)
    v13 = 0;
  v14 = (void *)objc_msgSend(v10, "initWithObjectsAndKeys:", v11, CFSTR("NSUnderlyingError"), v12, v13, 0);
  if (a2)
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v16 = &NSURLErrorKey;
    if ((isKindOfClass & 1) == 0)
      v16 = &NSFilePathErrorKey;
    objc_msgSend(v14, "setObject:forKeyedSubscript:", a2, *v16);
  }
  if (objc_msgSend(a5, "count"))
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v17 = objc_msgSend(a5, "countByEnumeratingWithState:objects:count:", &v25, v24, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v26;
      do
      {
        for (i = 0; i != v18; ++i)
        {
          if (*(_QWORD *)v26 != v19)
            objc_enumerationMutation(a5);
          v21 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i);
          if (!objc_msgSend(v14, "objectForKey:", v21))
            objc_msgSend(v14, "setObject:forKey:", objc_msgSend(a5, "objectForKey:", v21), v21);
        }
        v18 = objc_msgSend(a5, "countByEnumeratingWithState:objects:count:", &v25, v24, 16);
      }
      while (v18);
    }
  }
  v22 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), v9, v14);

  return v22;
}

void sub_181840924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

BOOL _NSFileCompressionTypeIsSafeForMapping(uint64_t a1)
{
  BOOL v2;
  _OWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD0A638 != -1)
    dispatch_once(&qword_1ECD0A638, &__block_literal_global_70);
  if (!_MergedGlobals_145)
    return 0;
  memset(v4, 0, sizeof(v4));
  if (_MergedGlobals_145(a1, v4))
    v2 = 1;
  else
    v2 = LODWORD(v4[0]) == 5;
  return !v2;
}

uint64_t _NSReadExtendedAttributesFromFileDescriptor(int a1, void *a2, int a3, int *a4)
{
  void *v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t i;
  void *v13;
  const char *v14;
  ssize_t v15;
  void *v16;
  void *v17;
  void *v18;
  unint64_t v19;
  ssize_t v20;
  size_t v21;
  int *v23;
  uint64_t v25;
  _BYTE value[1000];
  _BYTE v27[200];
  _BYTE v28[128];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v5 = a2;
  v33 = *MEMORY[0x1E0C80C00];
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v29, v28, 16);
  if (!v7)
    return objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
  v8 = v7;
  v23 = a4;
  v9 = 0;
  v10 = *(_QWORD *)v30;
  v11 = 0x1E0C99000uLL;
  v25 = *(_QWORD *)v30;
  while (2)
  {
    for (i = 0; i != v8; ++i)
    {
      if (*(_QWORD *)v30 != v10)
        objc_enumerationMutation(v5);
      v13 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
      v14 = v27;
      if ((objc_msgSend(v13, "getCString:maxLength:encoding:", v27, 200, 4) & 1) == 0)
        v14 = (const char *)objc_msgSend(v13, "UTF8String");
      v15 = fgetxattr(a1, v14, value, 0x3E8uLL, 0, 0);
      if (v15 != -1)
      {
        v16 = (void *)objc_msgSend(objc_alloc(*(Class *)(v11 + 3408)), "initWithBytes:length:", value, v15);
        if (!v16)
          continue;
LABEL_10:
        if (!v9)
          v9 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        objc_msgSend(v9, "setObject:forKey:", v16, v13);

        continue;
      }
      if (*__error() != 34)
        continue;
      v17 = v9;
      v18 = v5;
      v19 = v11;
      v20 = fgetxattr(a1, v14, 0, 0, 0, 0);
      if (v20 == -1)
      {
        v5 = v18;
        v9 = v17;
        v10 = v25;
        continue;
      }
      v21 = v20;
      v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", v20);
      if (fgetxattr(a1, v14, (void *)objc_msgSend(v16, "mutableBytes"), v21, 0, 0) == v21)
      {
        v11 = v19;
        v5 = v18;
        v9 = v17;
        v10 = v25;
        if (!v16)
          continue;
        goto LABEL_10;
      }

      v11 = v19;
      v5 = v18;
      v9 = v17;
      v10 = v25;
      if (a3)
      {
        if (v23)
          *v23 = *__error();
        return 0;
      }
    }
    v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v28, 16);
    if (v8)
      continue;
    break;
  }
  if (!v9)
    return objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
  return (uint64_t)v9;
}

uint64_t type metadata instantiation function for NSObject.KeyValueObservingPublisher()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for AttributeContainer()
{
  return &type metadata for AttributeContainer;
}

NSArray *__cdecl NSAllMapTableValues(NSMapTable *table)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "NSArray * _Nonnull NSAllMapTableValues(NSMapTable * _Nonnull)");
  return (NSArray *)-[NSMapTable allValues](table, "allValues");
}

void protocol witness for RawRepresentable.rawValue.getter in conformance URLComponents.CodingKeys(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

Foundation::Date __swiftcall Date.addingTimeInterval(_:)(Swift::Double a1)
{
  double *v1;
  double *v2;
  Foundation::Date result;

  result._time = *v2 + a1;
  *v1 = result._time;
  return result;
}

uint64_t outlined destroy of Notification(uint64_t a1)
{
  destroy for NSNotificationCenter.Notifications.NotificationWrapper(a1);
  return a1;
}

uint64_t destroy for NSNotificationCenter.Notifications.NotificationWrapper(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return swift_bridgeObjectRelease();
}

void @objc _NSSwiftCalendar.getEra(_:year:month:day:from:)(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, id a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))
{
  uint64_t v14;
  id v15;
  uint64_t v16;

  objc_msgSend(a7, sel_timeIntervalSinceReferenceDate);
  v16 = v14;
  v15 = a1;
  a8(a3, a4, a5, a6, &v16);

}

uint64_t _NSSwiftCalendar.getHour(_:minute:second:nanosecond:from:)(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[112];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  __int128 v29;

  v10 = *a5;
  v11 = *(_QWORD *)(v5 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 32));
  v17 = *(_OWORD *)(v11 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 32));
  v29 = v17;
  v19 = 8304;
  v18 = v10;
  Calendar._dateComponents(_:from:)(&v19, (double *)&v18, v20);
  swift_unknownObjectRelease();
  if (a1)
  {
    v12 = v21;
    if (v22)
      v12 = 0;
    *a1 = v12;
  }
  if (a2)
  {
    v13 = v23;
    if (v24)
      v13 = 0;
    *a2 = v13;
  }
  if (a3)
  {
    v14 = v25;
    if (v26)
      v14 = 0;
    *a3 = v14;
  }
  if (a4)
  {
    v15 = v27;
    if (v28)
      v15 = 0;
    *a4 = v15;
  }
  return outlined release of DateComponents((uint64_t)v20);
}

NSDateComponents __swiftcall DateComponents._bridgeToObjectiveC()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  id v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void *v15;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v34 = *((_BYTE *)v0 + 40);
  v19 = v0[4];
  v20 = v0[6];
  v35 = *((_BYTE *)v0 + 56);
  v21 = v0[8];
  v36 = *((_BYTE *)v0 + 72);
  v22 = v0[10];
  v37 = *((_BYTE *)v0 + 88);
  v5 = v0[12];
  v32 = *((_BYTE *)v0 + 104);
  v23 = v0[14];
  v38 = *((_BYTE *)v0 + 120);
  v24 = v0[16];
  v39 = *((_BYTE *)v0 + 136);
  v25 = v0[18];
  v40 = *((_BYTE *)v0 + 152);
  v26 = v0[20];
  v41 = *((_BYTE *)v0 + 168);
  v27 = v0[22];
  v42 = *((_BYTE *)v0 + 184);
  v28 = v0[24];
  v43 = *((_BYTE *)v0 + 200);
  v29 = v0[26];
  v44 = *((_BYTE *)v0 + 216);
  v18 = (const char *)v0[28];
  v47 = *((_BYTE *)v0 + 280);
  v33 = *((_BYTE *)v0 + 232);
  v30 = v0[30];
  v45 = *((_BYTE *)v0 + 248);
  v31 = v0[32];
  v46 = *((_BYTE *)v0 + 264);
  v6 = v0[34];
  v7 = *((unsigned __int8 *)v0 + 281);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D78]), sel_init);
  if (v2)
  {
    v17 = v5;
    ObjectType = swift_getObjectType();
    v10 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 216);
    swift_unknownObjectRetain();
    v11 = v10(ObjectType, v1);
    v5 = v17;
    v12 = (void *)v11;
    objc_msgSend(v8, sel_setCalendar_, v11);
    swift_unknownObjectRelease();

  }
  if (v3)
  {
    v13 = swift_getObjectType();
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 120);
    swift_unknownObjectRetain();
    v15 = (void *)v14(v13, v4);
    objc_msgSend(v8, sel_setTimeZone_, v15);
    swift_unknownObjectRelease();

  }
  if ((v34 & 1) != 0)
  {
    if ((v35 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    objc_msgSend(v8, sel_setEra_, v19);
    if ((v35 & 1) != 0)
    {
LABEL_7:
      if ((v36 & 1) != 0)
        goto LABEL_8;
      goto LABEL_26;
    }
  }
  objc_msgSend(v8, sel_setYear_, v20);
  if ((v36 & 1) != 0)
  {
LABEL_8:
    if ((v37 & 1) != 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  objc_msgSend(v8, sel_setMonth_, v21);
  if ((v37 & 1) != 0)
  {
LABEL_9:
    if ((v38 & 1) != 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  objc_msgSend(v8, sel_setDay_, v22);
  if ((v38 & 1) != 0)
  {
LABEL_10:
    if ((v39 & 1) != 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  objc_msgSend(v8, sel_setHour_, v23);
  if ((v39 & 1) != 0)
  {
LABEL_11:
    if ((v40 & 1) != 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  objc_msgSend(v8, sel_setMinute_, v24);
  if ((v40 & 1) != 0)
  {
LABEL_12:
    if ((v41 & 1) != 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  objc_msgSend(v8, sel_setSecond_, v25);
  if ((v41 & 1) != 0)
  {
LABEL_13:
    if ((v42 & 1) != 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  objc_msgSend(v8, sel_setNanosecond_, v26);
  if ((v42 & 1) != 0)
  {
LABEL_14:
    if ((v43 & 1) != 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  objc_msgSend(v8, sel_setWeekday_, v27);
  if ((v43 & 1) != 0)
  {
LABEL_15:
    if ((v44 & 1) != 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  objc_msgSend(v8, sel_setWeekdayOrdinal_, v28);
  if ((v44 & 1) != 0)
  {
LABEL_16:
    if ((v45 & 1) != 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  objc_msgSend(v8, sel_setQuarter_, v29);
  if ((v45 & 1) != 0)
  {
LABEL_17:
    if ((v46 & 1) != 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  objc_msgSend(v8, sel_setWeekOfMonth_, v30);
  if ((v46 & 1) != 0)
  {
LABEL_18:
    if ((v47 & 1) != 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  objc_msgSend(v8, sel_setWeekOfYear_, v31);
  if ((v47 & 1) != 0)
  {
LABEL_19:
    if ((v32 & 1) != 0)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  objc_msgSend(v8, sel_setYearForWeekOfYear_, v6);
  if ((v32 & 1) != 0)
  {
LABEL_20:
    if (v7 == 2)
      goto LABEL_21;
LABEL_39:
    objc_msgSend(v8, sel_setLeapMonth_, v7 & 1);
    if ((v33 & 1) != 0)
      return (NSDateComponents)v8;
    goto LABEL_22;
  }
LABEL_38:
  objc_msgSend(v8, sel_setDayOfYear_, v5);
  if (v7 != 2)
    goto LABEL_39;
LABEL_21:
  if ((v33 & 1) == 0)
LABEL_22:
    __NSDateComponentsSetWeek(v8, v18);
  return (NSDateComponents)v8;
}

uint64_t NSMutableDictionary.subscript.setter(uint64_t a1, _QWORD *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = v2;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v6 = _bridgeAnythingToObjectiveC<A>(_:)();
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v8, &demangling cache variable for type metadata for Any?);
  if (v9)
  {
    outlined init with take of Any(&v8, &v10);
    __swift_project_boxed_opaque_existential_1(&v10, v11);
    objc_msgSend(v3, sel_setObject_forKey_, _bridgeAnythingToObjectiveC<A>(_:)(), v6);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v8, &demangling cache variable for type metadata for Any?);
    objc_msgSend(v3, sel_removeObjectForKey_, v6);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    return outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
  }
}

void *_NSSwiftCalendar._components(_:from:)@<X0>(int a1@<W0>, double *a2@<X1>, void *a3@<X8>)
{
  char *v3;
  void *v4;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  __int128 v19;
  double v20;
  uint64_t v21;
  __int128 v22;
  _OWORD __src[18];

  v4 = v3;
  v7 = *a2;
  _fromNSCalendarUnits(_:)(a1);
  v8 = *(_QWORD *)&v3[OBJC_IVAR____NSSwiftCalendar__lock];
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 32));
  v19 = *(_OWORD *)(v8 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 32));
  v22 = v19;
  v9 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v9, &v21);
  v10 = 1.59271755e13;
  if (v7 <= 1.59271755e13)
    v10 = v7;
  v20 = fmax(v10, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v21, &v20, __src);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 0x100000) != 0)
  {
    type metadata accessor for _NSSwiftCalendar();
    v11 = swift_dynamicCastClass();
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + OBJC_IVAR____NSSwiftCalendar__lock);
      v13 = (os_unfair_lock_s *)(v12 + 32);
      v14 = v3;
      os_unfair_lock_lock((os_unfair_lock_t)(v12 + 32));
      v15 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      swift_unknownObjectRetain();
      os_unfair_lock_unlock(v13);

    }
    else
    {
      type metadata accessor for _CalendarBridged();
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = v4;
      v16 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged, (uint64_t (*)(uint64_t))type metadata accessor for _CalendarBridged, (uint64_t)&protocol conformance descriptor for _CalendarBridged);
      v17 = v4;
    }
    swift_unknownObjectRelease();
    *(_QWORD *)&__src[0] = v15;
    *((_QWORD *)&__src[0] + 1) = v16;
    if (*(_QWORD *)&__src[1])
    {
      v22 = __src[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)&v22);
    }
  }
  if ((a1 & 0x100) != 0)
  {
    *(_QWORD *)&__src[14] = *(_QWORD *)&__src[16];
    BYTE8(__src[14]) = BYTE8(__src[16]);
  }
  return memcpy(a3, __src, 0x11AuLL);
}

void *Calendar.dateComponents(_:from:)@<X0>(double *a1@<X1>, void *a2@<X8>)
{
  __int128 *v2;
  double v4;
  uint64_t v5;
  double v6;
  double v8;
  uint64_t v9;
  __int128 v10;

  v4 = *a1;
  v10 = *v2;
  v5 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v5, &v9);
  v6 = 1.59271755e13;
  if (v4 <= 1.59271755e13)
    v6 = v4;
  v8 = fmax(v6, -2.11845067e11);
  return Calendar._dateComponents(_:from:)(&v9, &v8, a2);
}

void *static DateComponents._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v3;
  uint64_t v4;
  void *result;
  _BYTE v6[288];
  _BYTE v7[288];
  uint64_t v8;
  uint64_t v9;
  __int128 __src[18];

  if (a1)
  {
    __src[0] = 0uLL;
    v9 = 0;
    v8 = 0;
    v3 = a1;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, &v8, 0, 1, 0, 1, 0, 1, (uint64_t)v7, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    destructiveProjectEnumData for PredicateCodableError(v7, v4);
    outlined init with take of DateComponents?((uint64_t)v7, (uint64_t)v6);
    static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v3, (uint64_t)v6);
    outlined init with take of DateComponents?((uint64_t)v6, (uint64_t)&v8);
    outlined init with take of DateComponents?((uint64_t)&v8, (uint64_t)__src);
    result = (void *)_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {

      return memcpy(a2, __src, 0x11AuLL);
    }
  }
  else
  {
    __src[0] = 0uLL;
    v9 = 0;
    v8 = 0;
    return (void *)DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, &v8, 0, 1, 0, 1, 0, 1, (uint64_t)a2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1);
  }
  return result;
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:) in conformance _CalendarICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

void *partial apply for closure #1 in _CalendarICU.dateComponents(_:from:)@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _CalendarICU.dateComponents(_:from:)(*(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 32), a1, *(double *)(v1 + 16));
}

void *closure #1 in _CalendarICU.dateComponents(_:from:)@<X0>(_QWORD *a1@<X0>, int a2@<W1>, void *a3@<X8>, double a4@<D0>)
{
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[2];
  __int128 v15;
  _QWORD __src[37];

  __src[36] = *MEMORY[0x1E0C80C00];
  if (a4 > 1.59271755e13)
    a4 = 1.59271755e13;
  v7 = fmax(a4, -2.11845067e11);
  MEMORY[0x186DAA160](a1[4]);
  v8 = floor(v7);
  ucal_setMillis();
  v15 = 0uLL;
  v14[0] = 0;
  v14[1] = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v15, v14, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  if ((a2 & 1) != 0)
  {
    __src[4] = (int)ucal_get();
    LOBYTE(__src[5]) = 0;
    if ((a2 & 2) == 0)
    {
LABEL_5:
      if ((a2 & 0x200) == 0)
        goto LABEL_6;
      goto LABEL_21;
    }
  }
  else if ((a2 & 2) == 0)
  {
    goto LABEL_5;
  }
  __src[6] = (int)ucal_get();
  LOBYTE(__src[7]) = 0;
  if ((a2 & 0x200) == 0)
  {
LABEL_6:
    if ((a2 & 4) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  __src[26] = 0;
  LOBYTE(__src[27]) = 0;
  if ((a2 & 4) == 0)
  {
LABEL_7:
    if ((a2 & 8) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  __src[8] = (int)ucal_get() + 1;
  LOBYTE(__src[9]) = 0;
  if ((a2 & 8) == 0)
  {
LABEL_8:
    if ((a2 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  __src[10] = (int)ucal_get();
  LOBYTE(__src[11]) = 0;
  if ((a2 & 0x40000) == 0)
  {
LABEL_9:
    if ((a2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  __src[12] = (int)ucal_get();
  LOBYTE(__src[13]) = 0;
  if ((a2 & 0x800) == 0)
  {
LABEL_10:
    if ((a2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  __src[32] = (int)ucal_get();
  LOBYTE(__src[33]) = 0;
  if ((a2 & 0x400) == 0)
  {
LABEL_11:
    if ((a2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  __src[30] = (int)ucal_get();
  LOBYTE(__src[31]) = 0;
  if ((a2 & 0x1000) == 0)
  {
LABEL_12:
    if ((a2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  __src[34] = (int)ucal_get();
  LOBYTE(__src[35]) = 0;
  if ((a2 & 0x80) == 0)
  {
LABEL_13:
    if ((a2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  __src[22] = (int)ucal_get();
  LOBYTE(__src[23]) = 0;
  if ((a2 & 0x100) == 0)
  {
LABEL_14:
    if ((a2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  __src[24] = (int)ucal_get();
  LOBYTE(__src[25]) = 0;
  if ((a2 & 0x10) == 0)
  {
LABEL_15:
    if ((a2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  __src[14] = (int)ucal_get();
  LOBYTE(__src[15]) = 0;
  if ((a2 & 0x20) == 0)
  {
LABEL_16:
    if ((a2 & 0x40) == 0)
      goto LABEL_17;
LABEL_32:
    __src[18] = (int)ucal_get();
    LOBYTE(__src[19]) = 0;
    if ((a2 & 0x2000) == 0)
      goto LABEL_39;
    goto LABEL_33;
  }
LABEL_31:
  __src[16] = (int)ucal_get();
  LOBYTE(__src[17]) = 0;
  if ((a2 & 0x40) != 0)
    goto LABEL_32;
LABEL_17:
  if ((a2 & 0x2000) == 0)
    goto LABEL_39;
LABEL_33:
  v9 = (v7 - v8) * 1000000000.0;
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
  }
  if (v9 >= 9.22337204e18)
    goto LABEL_48;
  v10 = (uint64_t)v9;
  if ((uint64_t)v9 == 0x7FFFFFFFFFFFFFFFLL)
    v10 = 0;
  __src[20] = v10;
  LOBYTE(__src[21]) = (uint64_t)v9 == 0x7FFFFFFFFFFFFFFFLL;
LABEL_39:
  if ((*(_QWORD *)&a2 & 0x10004) != 0)
    BYTE1(__src[35]) = ucal_get() != 0;
  if ((a2 & 0x8000) != 0)
  {
    v12 = a1[5];
    v11 = a1[6];
    __src[2] = v12;
    __src[3] = v11;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (__src[0])
    {
      *(_QWORD *)&v15 = v12;
      *((_QWORD *)&v15 + 1) = v11;
      Calendar.timeZone.setter((uint64_t *)&v15);
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  return memcpy(a3, __src, 0x11AuLL);
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v60[3];

  *(_WORD *)(a9 + 280) = 513;
  v34 = *a2;
  v35 = a2[1];
  *(_QWORD *)(a9 + 32) = 0;
  v36 = *a1;
  *(_BYTE *)(a9 + 40) = 1;
  *(_QWORD *)(a9 + 48) = 0;
  *(_BYTE *)(a9 + 56) = 1;
  *(_QWORD *)(a9 + 64) = 0;
  *(_BYTE *)(a9 + 72) = 1;
  *(_QWORD *)(a9 + 80) = 0;
  *(_BYTE *)(a9 + 88) = 1;
  *(_QWORD *)(a9 + 96) = 0;
  *(_BYTE *)(a9 + 104) = 1;
  *(_QWORD *)(a9 + 112) = 0;
  *(_BYTE *)(a9 + 120) = 1;
  *(_QWORD *)(a9 + 128) = 0;
  *(_BYTE *)(a9 + 136) = 1;
  *(_QWORD *)(a9 + 144) = 0;
  *(_BYTE *)(a9 + 152) = 1;
  *(_QWORD *)(a9 + 160) = 0;
  *(_BYTE *)(a9 + 168) = 1;
  *(_QWORD *)(a9 + 176) = 0;
  *(_BYTE *)(a9 + 184) = 1;
  *(_QWORD *)(a9 + 192) = 0;
  *(_BYTE *)(a9 + 200) = 1;
  *(_QWORD *)(a9 + 208) = 0;
  *(_BYTE *)(a9 + 216) = 1;
  *(_QWORD *)(a9 + 224) = 0;
  *(_BYTE *)(a9 + 232) = 1;
  *(_QWORD *)(a9 + 240) = 0;
  *(_BYTE *)(a9 + 248) = 1;
  *(_QWORD *)(a9 + 256) = 0;
  *(_BYTE *)(a9 + 264) = 1;
  *(_QWORD *)(a9 + 272) = 0;
  *(_OWORD *)a9 = v36;
  *(_QWORD *)(a9 + 16) = v34;
  *(_QWORD *)(a9 + 24) = v35;
  if (v34 && (_QWORD)v36)
  {
    v60[0] = v34;
    v60[1] = v35;
    v37 = a7;
    swift_unknownObjectRetain();
    Calendar.timeZone.setter(v60);
    a7 = v37;
  }
  v38 = a3 == 0x7FFFFFFFFFFFFFFFLL;
  if ((a4 & 1) == 0 && a3 == 0x7FFFFFFFFFFFFFFFLL)
    v39 = 0;
  else
    v39 = a3;
  v56 = v39;
  if ((a6 & 1) == 0 && a5 == 0x7FFFFFFFFFFFFFFFLL)
    v40 = 0;
  else
    v40 = a5;
  v55 = v40;
  v41 = a7 == 0x7FFFFFFFFFFFFFFFLL;
  if ((a8 & 1) == 0 && a7 == 0x7FFFFFFFFFFFFFFFLL)
    v42 = 0;
  else
    v42 = a7;
  v54 = v42;
  if ((a11 & 1) == 0 && a10 == 0x7FFFFFFFFFFFFFFFLL)
    v43 = 0;
  else
    v43 = a10;
  if ((a13 & 1) == 0 && a12 == 0x7FFFFFFFFFFFFFFFLL)
    v44 = 0;
  else
    v44 = a12;
  if ((a15 & 1) == 0 && a14 == 0x7FFFFFFFFFFFFFFFLL)
    v45 = 0;
  else
    v45 = a14;
  if ((a17 & 1) == 0 && a16 == 0x7FFFFFFFFFFFFFFFLL)
    result = 0;
  else
    result = a16;
  if ((a19 & 1) == 0 && a18 == 0x7FFFFFFFFFFFFFFFLL)
    v47 = 0;
  else
    v47 = a18;
  if ((a21 & 1) == 0 && a20 == 0x7FFFFFFFFFFFFFFFLL)
    v48 = 0;
  else
    v48 = a20;
  if ((a23 & 1) == 0 && a22 == 0x7FFFFFFFFFFFFFFFLL)
    v49 = 0;
  else
    v49 = a22;
  if ((a25 & 1) == 0 && a24 == 0x7FFFFFFFFFFFFFFFLL)
    v50 = 0;
  else
    v50 = a24;
  if ((a27 & 1) == 0 && a26 == 0x7FFFFFFFFFFFFFFFLL)
    v51 = 0;
  else
    v51 = a26;
  v52 = a28;
  *(_BYTE *)(a9 + 264) = a29 & 1 | (a28 == 0x7FFFFFFFFFFFFFFFLL);
  if ((a29 & 1) == 0 && a28 == 0x7FFFFFFFFFFFFFFFLL)
    v52 = 0;
  *(_BYTE *)(a9 + 280) = a31 & 1 | (a30 == 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(a9 + 32) = v56;
  *(_BYTE *)(a9 + 40) = (a4 | v38) & 1;
  *(_QWORD *)(a9 + 48) = v55;
  *(_BYTE *)(a9 + 56) = a6 & 1 | (a5 == 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(a9 + 64) = v54;
  *(_BYTE *)(a9 + 72) = (a8 | v41) & 1;
  *(_QWORD *)(a9 + 80) = v43;
  *(_BYTE *)(a9 + 88) = a11 & 1 | (a10 == 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(a9 + 112) = v44;
  *(_BYTE *)(a9 + 120) = a13 & 1 | (a12 == 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(a9 + 128) = v45;
  *(_BYTE *)(a9 + 136) = a15 & 1 | (a14 == 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(a9 + 144) = result;
  *(_BYTE *)(a9 + 152) = a17 & 1 | (a16 == 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(a9 + 160) = v47;
  *(_BYTE *)(a9 + 168) = a19 & 1 | (a18 == 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(a9 + 176) = v48;
  *(_BYTE *)(a9 + 184) = a21 & 1 | (a20 == 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(a9 + 192) = v49;
  *(_BYTE *)(a9 + 200) = a23 & 1 | (a22 == 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(a9 + 208) = v50;
  *(_BYTE *)(a9 + 216) = a25 & 1 | (a24 == 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(a9 + 240) = v51;
  *(_BYTE *)(a9 + 248) = a27 & 1 | (a26 == 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(a9 + 256) = v52;
  if ((a31 & 1) == 0 && a30 == 0x7FFFFFFFFFFFFFFFLL)
    v53 = 0;
  else
    v53 = a30;
  *(_QWORD *)(a9 + 272) = v53;
  *(_BYTE *)(a9 + 104) = 1;
  *(_QWORD *)(a9 + 96) = 0;
  return result;
}

uint64_t static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  os_unfair_lock_s *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  __int128 __dst[18];
  uint64_t v51[2];
  _OWORD __src[18];
  uint64_t v53[36];

  outlined init with take of DateComponents?(a2, (uint64_t)v53);
  outlined release of DateComponents?(v53);
  __dst[0] = 0uLL;
  v51[0] = 0;
  v51[1] = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, v51, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  v4 = objc_msgSend(a1, sel_calendar);
  if (v4)
  {
    v5 = v4;
    type metadata accessor for _NSSwiftCalendar();
    v6 = swift_dynamicCastClass();
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + OBJC_IVAR____NSSwiftCalendar__lock);
      v8 = (_OWORD *)(v7 + 16);
      v9 = (os_unfair_lock_s *)(v7 + 32);
      v10 = v5;
      os_unfair_lock_lock(v9);
      closure #1 in _NSSwiftCalendar.calendar.getter(v8, __dst);
      os_unfair_lock_unlock(v9);

      v11 = *((_QWORD *)&__dst[0] + 1);
      v12 = *(_QWORD *)&__dst[0];
    }
    else
    {
      type metadata accessor for _CalendarBridged();
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = v5;
      v11 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged, (uint64_t (*)(uint64_t))type metadata accessor for _CalendarBridged, (uint64_t)&protocol conformance descriptor for _CalendarBridged);
    }
    *(_QWORD *)&__src[0] = v12;
    *((_QWORD *)&__src[0] + 1) = v11;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (*(_QWORD *)&__src[1])
    {
      __dst[0] = __src[1];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)__dst);
    }
    swift_unknownObjectRelease();
  }
  v13 = objc_msgSend(a1, sel_timeZone);
  if (v13)
  {
    v14 = v13;
    type metadata accessor for _NSSwiftTimeZone();
    v15 = swift_dynamicCastClass();
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      v17 = *(_QWORD *)(v15 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      swift_unknownObjectRetain();

    }
    else
    {
      type metadata accessor for _TimeZoneBridged();
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = v14;
      v17 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    }
    *(_QWORD *)&__src[1] = v16;
    *((_QWORD *)&__src[1] + 1) = v17;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (*(_QWORD *)&__src[0])
    {
      *(_QWORD *)&__dst[0] = v16;
      *((_QWORD *)&__dst[0] + 1) = v17;
      Calendar.timeZone.setter((uint64_t *)__dst);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease_n();
    }
  }
  if (objc_msgSend(a1, sel_era) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v18 = objc_msgSend(a1, sel_era);
    if (v18 == (id)0x7FFFFFFFFFFFFFFFLL)
      v19 = 0;
    else
      v19 = v18;
    *(_QWORD *)&__src[2] = v19;
    BYTE8(__src[2]) = v18 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_year) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v20 = objc_msgSend(a1, sel_year);
    if (v20 == (id)0x7FFFFFFFFFFFFFFFLL)
      v21 = 0;
    else
      v21 = v20;
    *(_QWORD *)&__src[3] = v21;
    BYTE8(__src[3]) = v20 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_month) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v22 = objc_msgSend(a1, sel_month);
    if (v22 == (id)0x7FFFFFFFFFFFFFFFLL)
      v23 = 0;
    else
      v23 = v22;
    *(_QWORD *)&__src[4] = v23;
    BYTE8(__src[4]) = v22 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_day) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v24 = objc_msgSend(a1, sel_day);
    if (v24 == (id)0x7FFFFFFFFFFFFFFFLL)
      v25 = 0;
    else
      v25 = v24;
    *(_QWORD *)&__src[5] = v25;
    BYTE8(__src[5]) = v24 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_hour) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v26 = objc_msgSend(a1, sel_hour);
    if (v26 == (id)0x7FFFFFFFFFFFFFFFLL)
      v27 = 0;
    else
      v27 = v26;
    *(_QWORD *)&__src[7] = v27;
    BYTE8(__src[7]) = v26 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_minute) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v28 = objc_msgSend(a1, sel_minute);
    if (v28 == (id)0x7FFFFFFFFFFFFFFFLL)
      v29 = 0;
    else
      v29 = v28;
    *(_QWORD *)&__src[8] = v29;
    BYTE8(__src[8]) = v28 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_second) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v30 = objc_msgSend(a1, sel_second);
    if (v30 == (id)0x7FFFFFFFFFFFFFFFLL)
      v31 = 0;
    else
      v31 = v30;
    *(_QWORD *)&__src[9] = v31;
    BYTE8(__src[9]) = v30 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_nanosecond) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v32 = objc_msgSend(a1, sel_nanosecond);
    if (v32 == (id)0x7FFFFFFFFFFFFFFFLL)
      v33 = 0;
    else
      v33 = v32;
    *(_QWORD *)&__src[10] = v33;
    BYTE8(__src[10]) = v32 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_weekday) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v34 = objc_msgSend(a1, sel_weekday);
    if (v34 == (id)0x7FFFFFFFFFFFFFFFLL)
      v35 = 0;
    else
      v35 = v34;
    *(_QWORD *)&__src[11] = v35;
    BYTE8(__src[11]) = v34 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_weekdayOrdinal) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v36 = objc_msgSend(a1, sel_weekdayOrdinal);
    if (v36 == (id)0x7FFFFFFFFFFFFFFFLL)
      v37 = 0;
    else
      v37 = v36;
    *(_QWORD *)&__src[12] = v37;
    BYTE8(__src[12]) = v36 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_quarter) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v38 = objc_msgSend(a1, sel_quarter);
    if (v38 == (id)0x7FFFFFFFFFFFFFFFLL)
      v39 = 0;
    else
      v39 = v38;
    *(_QWORD *)&__src[13] = v39;
    BYTE8(__src[13]) = v38 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_weekOfMonth) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v40 = objc_msgSend(a1, sel_weekOfMonth);
    if (v40 == (id)0x7FFFFFFFFFFFFFFFLL)
      v41 = 0;
    else
      v41 = v40;
    *(_QWORD *)&__src[15] = v41;
    BYTE8(__src[15]) = v40 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_weekOfYear) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v42 = objc_msgSend(a1, sel_weekOfYear);
    if (v42 == (id)0x7FFFFFFFFFFFFFFFLL)
      v43 = 0;
    else
      v43 = v42;
    *(_QWORD *)&__src[16] = v43;
    BYTE8(__src[16]) = v42 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_yearForWeekOfYear) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v44 = objc_msgSend(a1, sel_yearForWeekOfYear);
    if (v44 == (id)0x7FFFFFFFFFFFFFFFLL)
      v45 = 0;
    else
      v45 = v44;
    *(_QWORD *)&__src[17] = v45;
    BYTE8(__src[17]) = v44 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (objc_msgSend(a1, sel_dayOfYear) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v46 = objc_msgSend(a1, sel_dayOfYear);
    if (v46 == (id)0x7FFFFFFFFFFFFFFFLL)
      v47 = 0;
    else
      v47 = v46;
    *(_QWORD *)&__src[6] = v47;
    BYTE8(__src[6]) = v46 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  if (__NSDateComponentsIsLeapMonthSet(a1))
    BYTE9(__src[17]) = objc_msgSend(a1, sel_isLeapMonth);
  if (__NSDateComponentsWeek(a1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    *(_QWORD *)&__src[14] = __NSDateComponentsWeek(a1);
    BYTE8(__src[14]) = 0;
  }
  memcpy(__dst, __src, 0x11AuLL);
  destructiveProjectEnumData for PredicateCodableError(__dst, v48);
  outlined init with take of DateComponents?((uint64_t)__dst, a2);
  return 1;
}

uint64_t outlined consume of DateComponents?(uint64_t result)
{
  if (result != 1)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

BOOL specialized Set.contains(_:)(unsigned __int8 a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == (_DWORD)v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == (_DWORD)v3;
    if (v12 == (_DWORD)v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  v4 = MEMORY[0x186DA5EC4](*(_QWORD *)(a2 + 40), a1, 1);
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == v3;
    if (v12 == v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

id _NSSwiftCalendar.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  __int128 v9;
  objc_super v10;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  v9 = *(_OWORD *)(v3 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  v4 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  v5 = (char *)objc_allocWithZone(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 32) = 0;
  *(_OWORD *)(v6 + 16) = v9;
  *(_QWORD *)&v5[OBJC_IVAR____NSSwiftCalendar__lock] = v6;
  v7 = *MEMORY[0x1E0C996C8];
  v10.receiver = v5;
  v10.super_class = v4;
  result = objc_msgSendSuper2(&v10, sel_initWithCheckedCalendarIdentifier_, v7);
  if (result)
  {
    a1[3] = v4;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in _NSSwiftCalendar.calendar.getter@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for _NSSwiftCalendar()
{
  return objc_opt_self();
}

uint64_t _fromNSCalendarUnits(_:)(int a1)
{
  char v3;
  uint64_t v4;

  v4 = MEMORY[0x1E0DEE9E8];
  if ((a1 & 2) != 0)
  {
    specialized Set._Variant.insert(_:)(&v3, 0);
    if ((a1 & 4) == 0)
    {
LABEL_3:
      if ((a1 & 8) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_3;
  }
  specialized Set._Variant.insert(_:)(&v3, 1uLL);
  if ((a1 & 8) == 0)
  {
LABEL_4:
    if ((a1 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  specialized Set._Variant.insert(_:)(&v3, 2uLL);
  if ((a1 & 0x10) == 0)
  {
LABEL_5:
    if ((a1 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  specialized Set._Variant.insert(_:)(&v3, 3uLL);
  if ((a1 & 0x20) == 0)
  {
LABEL_6:
    if ((a1 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  specialized Set._Variant.insert(_:)(&v3, 4uLL);
  if ((a1 & 0x40) == 0)
  {
LABEL_7:
    if ((a1 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  specialized Set._Variant.insert(_:)(&v3, 5uLL);
  if ((a1 & 0x80) == 0)
  {
LABEL_8:
    if ((a1 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  specialized Set._Variant.insert(_:)(&v3, 6uLL);
  if ((a1 & 0x200) == 0)
  {
LABEL_9:
    if ((a1 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  specialized Set._Variant.insert(_:)(&v3, 7uLL);
  if ((a1 & 0x400) == 0)
  {
LABEL_10:
    if ((a1 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  specialized Set._Variant.insert(_:)(&v3, 8uLL);
  if ((a1 & 0x800) == 0)
  {
LABEL_11:
    if ((a1 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  specialized Set._Variant.insert(_:)(&v3, 9uLL);
  if ((a1 & 0x1000) == 0)
  {
LABEL_12:
    if ((a1 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  specialized Set._Variant.insert(_:)(&v3, 0xAuLL);
  if ((a1 & 0x2000) == 0)
  {
LABEL_13:
    if ((a1 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  specialized Set._Variant.insert(_:)(&v3, 0xBuLL);
  if ((a1 & 0x4000) == 0)
  {
LABEL_14:
    if ((a1 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  specialized Set._Variant.insert(_:)(&v3, 0xCuLL);
  if ((a1 & 0x10000) == 0)
  {
LABEL_15:
    if ((a1 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  specialized Set._Variant.insert(_:)(&v3, 0x11uLL);
  if ((a1 & 0x8000) == 0)
  {
LABEL_16:
    if ((a1 & 0x100000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  specialized Set._Variant.insert(_:)(&v3, 0xDuLL);
  if ((a1 & 0x100000) == 0)
  {
LABEL_17:
    if ((a1 & 0x200000) == 0)
      goto LABEL_18;
LABEL_37:
    specialized Set._Variant.insert(_:)(&v3, 0xFuLL);
    if ((a1 & 0x100) == 0)
      return v4;
    goto LABEL_19;
  }
LABEL_36:
  specialized Set._Variant.insert(_:)(&v3, 0xEuLL);
  if ((a1 & 0x200000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((a1 & 0x100) != 0)
LABEL_19:
    specialized Set._Variant.insert(_:)(&v3, 0xBuLL);
  return v4;
}

uint64_t specialized Set._Variant.insert(_:)(_BYTE *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = MEMORY[0x186DA5EC4](*(_QWORD *)(v6 + 40), a2, 1);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(unsigned __int8 *)(v10 + v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v10 + v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, unint64_t a2, char a3)
{
  unint64_t *v3;
  unint64_t *v4;
  Swift::UInt v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  Swift::UInt v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  Swift::UInt v73;
  Swift::UInt v74;

  v4 = v3;
  v6 = result;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 16);
  v9 = *(_QWORD *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    v10 = *v3;
    goto LABEL_112;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
    if (v9 > v8)
    {
      v32 = static _SetStorage.copy(original:)();
      v10 = v32;
      if (!*(_QWORD *)(v7 + 16))
        goto LABEL_102;
      result = v32 + 56;
      v33 = v7 + 56;
      v34 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34)
        result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      v35 = 0;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
      v36 = 1 << *(_BYTE *)(v7 + 32);
      v37 = -1;
      if (v36 < 64)
        v37 = ~(-1 << v36);
      v38 = v37 & *(_QWORD *)(v7 + 56);
      v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          v41 = v40 | (v35 << 6);
        }
        else
        {
          v42 = v35 + 1;
          if (__OFADD__(v35, 1))
            goto LABEL_117;
          if (v42 >= v39)
            goto LABEL_102;
          v43 = *(_QWORD *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            v35 = v42 + 1;
            if (v42 + 1 >= v39)
              goto LABEL_102;
            v43 = *(_QWORD *)(v33 + 8 * v35);
            if (!v43)
            {
              v35 = v42 + 2;
              if (v42 + 2 >= v39)
                goto LABEL_102;
              v43 = *(_QWORD *)(v33 + 8 * v35);
              if (!v43)
              {
                v35 = v42 + 3;
                if (v42 + 3 >= v39)
                  goto LABEL_102;
                v43 = *(_QWORD *)(v33 + 8 * v35);
                if (!v43)
                {
                  v44 = v42 + 4;
                  if (v44 >= v39)
                    goto LABEL_102;
                  v43 = *(_QWORD *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      v35 = v44 + 1;
                      if (__OFADD__(v44, 1))
                        goto LABEL_121;
                      if (v35 >= v39)
                        break;
                      v43 = *(_QWORD *)(v33 + 8 * v35);
                      ++v44;
                      if (v43)
                        goto LABEL_65;
                    }
LABEL_102:
                    result = swift_release();
                    *v4 = v10;
LABEL_112:
                    *(_QWORD *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(_BYTE *)(*(_QWORD *)(v10 + 48) + a2) = v6;
                    v70 = *(_QWORD *)(v10 + 16);
                    v71 = __OFADD__(v70, 1);
                    v72 = v70 + 1;
                    if (!v71)
                    {
                      *(_QWORD *)(v10 + 16) = v72;
                      return result;
                    }
LABEL_119:
                    __break(1u);
                    goto LABEL_120;
                  }
                  v35 = v44;
                }
              }
            }
          }
LABEL_65:
          v38 = (v43 - 1) & v43;
          v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }
        *(_BYTE *)(*(_QWORD *)(v10 + 48) + v41) = *(_BYTE *)(*(_QWORD *)(v7 + 48) + v41);
      }
    }
    result = static _SetStorage.resize(original:capacity:move:)();
    v10 = result;
    if (*(_QWORD *)(v7 + 16))
    {
      v74 = v6;
      v46 = 0;
      v47 = v7 + 56;
      v48 = 1 << *(_BYTE *)(v7 + 32);
      if (v48 < 64)
        v49 = ~(-1 << v48);
      else
        v49 = -1;
      v50 = v49 & *(_QWORD *)(v7 + 56);
      v51 = (unint64_t)(v48 + 63) >> 6;
      v52 = result + 56;
      while (1)
      {
        if (v50)
        {
          v54 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          v55 = v54 | (v46 << 6);
        }
        else
        {
          v56 = v46 + 1;
          if (__OFADD__(v46, 1))
            goto LABEL_118;
          if (v56 >= v51)
            goto LABEL_114;
          v57 = *(_QWORD *)(v47 + 8 * v56);
          ++v46;
          if (!v57)
          {
            v46 = v56 + 1;
            if (v56 + 1 >= v51)
              goto LABEL_114;
            v57 = *(_QWORD *)(v47 + 8 * v46);
            if (!v57)
            {
              v46 = v56 + 2;
              if (v56 + 2 >= v51)
                goto LABEL_114;
              v57 = *(_QWORD *)(v47 + 8 * v46);
              if (!v57)
              {
                v46 = v56 + 3;
                if (v56 + 3 >= v51)
                  goto LABEL_114;
                v57 = *(_QWORD *)(v47 + 8 * v46);
                if (!v57)
                {
                  v58 = v56 + 4;
                  if (v58 >= v51)
                    goto LABEL_114;
                  v57 = *(_QWORD *)(v47 + 8 * v58);
                  if (!v57)
                  {
                    while (1)
                    {
                      v46 = v58 + 1;
                      if (__OFADD__(v58, 1))
                        goto LABEL_122;
                      if (v46 >= v51)
                        break;
                      v57 = *(_QWORD *)(v47 + 8 * v46);
                      ++v58;
                      if (v57)
                        goto LABEL_92;
                    }
LABEL_114:
                    swift_release();
                    v4 = v3;
                    v6 = v74;
LABEL_106:
                    *v4 = v10;
                    Hasher.init(_seed:)();
                    Hasher._combine(_:)(v6);
                    result = Hasher._finalize()();
                    v67 = -1 << *(_BYTE *)(v10 + 32);
                    a2 = result & ~v67;
                    if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
                    {
                      v68 = *(_QWORD *)(v10 + 48);
                      if (*(unsigned __int8 *)(v68 + a2) == (_DWORD)v6)
                      {
LABEL_111:
                        result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }
                      else
                      {
                        v69 = ~v67;
                        while (1)
                        {
                          a2 = (a2 + 1) & v69;
                          if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
                            break;
                          if (*(unsigned __int8 *)(v68 + a2) == (_DWORD)v6)
                            goto LABEL_111;
                        }
                      }
                    }
                    goto LABEL_112;
                  }
                  v46 = v58;
                }
              }
            }
          }
LABEL_92:
          v50 = (v57 - 1) & v57;
          v55 = __clz(__rbit64(v57)) + (v46 << 6);
        }
        v59 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 48) + v55);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v59);
        result = Hasher._finalize()();
        v60 = -1 << *(_BYTE *)(v10 + 32);
        v61 = result & ~v60;
        v62 = v61 >> 6;
        if (((-1 << v61) & ~*(_QWORD *)(v52 + 8 * (v61 >> 6))) != 0)
        {
          v53 = __clz(__rbit64((-1 << v61) & ~*(_QWORD *)(v52 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_74;
        }
        v63 = 0;
        v64 = (unint64_t)(63 - v60) >> 6;
        do
        {
          if (++v62 == v64 && (v63 & 1) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          v65 = v62 == v64;
          if (v62 == v64)
            v62 = 0;
          v63 |= v65;
          v66 = *(_QWORD *)(v52 + 8 * v62);
        }
        while (v66 == -1);
        v53 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
        *(_QWORD *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
        *(_BYTE *)(*(_QWORD *)(v10 + 48) + v53) = v59;
        ++*(_QWORD *)(v10 + 16);
      }
    }
LABEL_105:
    swift_release();
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v10 = result;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_105;
  v73 = v6;
  v11 = 0;
  v12 = (_QWORD *)(v7 + 56);
  v13 = 1 << *(_BYTE *)(v7 + 32);
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v15 = v14 & *(_QWORD *)(v7 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_116;
    if (v21 >= v16)
    {
LABEL_66:
      v45 = 1 << *(_BYTE *)(v7 + 32);
      if (v45 > 63)
        bzero((void *)(v7 + 56), ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v12 = -1 << v45;
      v4 = v3;
      v6 = v73;
      *(_QWORD *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_66;
      v22 = v12[v11];
      if (!v22)
      {
        v11 = v21 + 2;
        if (v21 + 2 >= v16)
          goto LABEL_66;
        v22 = v12[v11];
        if (!v22)
        {
          v11 = v21 + 3;
          if (v21 + 3 >= v16)
            goto LABEL_66;
          v22 = v12[v11];
          if (!v22)
            break;
        }
      }
    }
LABEL_29:
    v15 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    v24 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 48) + v20);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v24);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v10 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_115;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v17 + 8 * v27);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_BYTE *)(*(_QWORD *)(v10 + 48) + v18) = v24;
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 4;
  if (v23 >= v16)
    goto LABEL_66;
  v22 = v12[v23];
  if (v22)
  {
    v11 = v23;
    goto LABEL_29;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v16)
      goto LABEL_66;
    v22 = v12[v11];
    ++v23;
    if (v22)
      goto LABEL_29;
  }
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
  return result;
}

{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;

  v4 = v3;
  v6 = result;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 16);
  v9 = *(_QWORD *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    v10 = *v3;
    goto LABEL_107;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt8>);
    if (v9 > v8)
    {
      v32 = static _SetStorage.copy(original:)();
      v10 = v32;
      if (!*(_QWORD *)(v7 + 16))
        goto LABEL_98;
      result = v32 + 56;
      v33 = v7 + 56;
      v34 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34)
        result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      v35 = 0;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
      v36 = 1 << *(_BYTE *)(v7 + 32);
      v37 = -1;
      if (v36 < 64)
        v37 = ~(-1 << v36);
      v38 = v37 & *(_QWORD *)(v7 + 56);
      v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          v41 = v40 | (v35 << 6);
        }
        else
        {
          v42 = v35 + 1;
          if (__OFADD__(v35, 1))
            goto LABEL_112;
          if (v42 >= v39)
            goto LABEL_98;
          v43 = *(_QWORD *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            v35 = v42 + 1;
            if (v42 + 1 >= v39)
              goto LABEL_98;
            v43 = *(_QWORD *)(v33 + 8 * v35);
            if (!v43)
            {
              v35 = v42 + 2;
              if (v42 + 2 >= v39)
                goto LABEL_98;
              v43 = *(_QWORD *)(v33 + 8 * v35);
              if (!v43)
              {
                v35 = v42 + 3;
                if (v42 + 3 >= v39)
                  goto LABEL_98;
                v43 = *(_QWORD *)(v33 + 8 * v35);
                if (!v43)
                {
                  v44 = v42 + 4;
                  if (v44 >= v39)
                    goto LABEL_98;
                  v43 = *(_QWORD *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      v35 = v44 + 1;
                      if (__OFADD__(v44, 1))
                        goto LABEL_117;
                      if (v35 >= v39)
                        break;
                      v43 = *(_QWORD *)(v33 + 8 * v35);
                      ++v44;
                      if (v43)
                        goto LABEL_63;
                    }
LABEL_98:
                    result = swift_release();
                    *v4 = v10;
LABEL_107:
                    *(_QWORD *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(_BYTE *)(*(_QWORD *)(v10 + 48) + a2) = v6;
                    v70 = *(_QWORD *)(v10 + 16);
                    v71 = __OFADD__(v70, 1);
                    v72 = v70 + 1;
                    if (!v71)
                    {
                      *(_QWORD *)(v10 + 16) = v72;
                      return result;
                    }
LABEL_114:
                    __break(1u);
                    goto LABEL_115;
                  }
                  v35 = v44;
                }
              }
            }
          }
LABEL_63:
          v38 = (v43 - 1) & v43;
          v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }
        *(_BYTE *)(*(_QWORD *)(v10 + 48) + v41) = *(_BYTE *)(*(_QWORD *)(v7 + 48) + v41);
      }
    }
    result = static _SetStorage.resize(original:capacity:move:)();
    v10 = result;
    if (!*(_QWORD *)(v7 + 16))
      goto LABEL_101;
    v46 = 0;
    v47 = v7 + 56;
    v48 = 1 << *(_BYTE *)(v7 + 32);
    if (v48 < 64)
      v49 = ~(-1 << v48);
    else
      v49 = -1;
    v50 = v49 & *(_QWORD *)(v7 + 56);
    v51 = (unint64_t)(v48 + 63) >> 6;
    v52 = result + 56;
    while (1)
    {
      if (v50)
      {
        v54 = __clz(__rbit64(v50));
        v50 &= v50 - 1;
        v55 = v54 | (v46 << 6);
      }
      else
      {
        v56 = v46 + 1;
        if (__OFADD__(v46, 1))
          goto LABEL_113;
        if (v56 >= v51)
          goto LABEL_101;
        v57 = *(_QWORD *)(v47 + 8 * v56);
        ++v46;
        if (!v57)
        {
          v46 = v56 + 1;
          if (v56 + 1 >= v51)
            goto LABEL_101;
          v57 = *(_QWORD *)(v47 + 8 * v46);
          if (!v57)
          {
            v46 = v56 + 2;
            if (v56 + 2 >= v51)
              goto LABEL_101;
            v57 = *(_QWORD *)(v47 + 8 * v46);
            if (!v57)
            {
              v58 = v56 + 3;
              if (v58 >= v51)
                goto LABEL_101;
              v57 = *(_QWORD *)(v47 + 8 * v58);
              if (!v57)
              {
                while (1)
                {
                  v46 = v58 + 1;
                  if (__OFADD__(v58, 1))
                    goto LABEL_116;
                  if (v46 >= v51)
                    break;
                  v57 = *(_QWORD *)(v47 + 8 * v46);
                  ++v58;
                  if (v57)
                    goto LABEL_88;
                }
LABEL_101:
                swift_release();
                *v4 = v10;
                result = MEMORY[0x186DA5EC4](*(_QWORD *)(v10 + 40), v6, 1);
                v67 = -1 << *(_BYTE *)(v10 + 32);
                a2 = result & ~v67;
                if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
                {
                  v68 = *(_QWORD *)(v10 + 48);
                  if (*(unsigned __int8 *)(v68 + a2) == (_DWORD)v6)
                  {
LABEL_106:
                    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                    __break(1u);
                  }
                  else
                  {
                    v69 = ~v67;
                    while (1)
                    {
                      a2 = (a2 + 1) & v69;
                      if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
                        break;
                      if (*(unsigned __int8 *)(v68 + a2) == (_DWORD)v6)
                        goto LABEL_106;
                    }
                  }
                }
                goto LABEL_107;
              }
              v46 = v58;
            }
          }
        }
LABEL_88:
        v50 = (v57 - 1) & v57;
        v55 = __clz(__rbit64(v57)) + (v46 << 6);
      }
      v59 = *(_BYTE *)(*(_QWORD *)(v7 + 48) + v55);
      result = MEMORY[0x186DA5EC4](*(_QWORD *)(v10 + 40), v59, 1);
      v60 = -1 << *(_BYTE *)(v10 + 32);
      v61 = result & ~v60;
      v62 = v61 >> 6;
      if (((-1 << v61) & ~*(_QWORD *)(v52 + 8 * (v61 >> 6))) != 0)
      {
        v53 = __clz(__rbit64((-1 << v61) & ~*(_QWORD *)(v52 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_72;
      }
      v63 = 0;
      v64 = (unint64_t)(63 - v60) >> 6;
      do
      {
        if (++v62 == v64 && (v63 & 1) != 0)
        {
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
          goto LABEL_114;
        }
        v65 = v62 == v64;
        if (v62 == v64)
          v62 = 0;
        v63 |= v65;
        v66 = *(_QWORD *)(v52 + 8 * v62);
      }
      while (v66 == -1);
      v53 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_72:
      *(_QWORD *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
      *(_BYTE *)(*(_QWORD *)(v10 + 48) + v53) = v59;
      ++*(_QWORD *)(v10 + 16);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt8>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v10 = result;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_101;
  v11 = 0;
  v12 = (_QWORD *)(v7 + 56);
  v13 = 1 << *(_BYTE *)(v7 + 32);
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v15 = v14 & *(_QWORD *)(v7 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v11 << 6);
      goto LABEL_28;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_111;
    if (v21 >= v16)
    {
LABEL_64:
      v45 = 1 << *(_BYTE *)(v7 + 32);
      if (v45 > 63)
        bzero((void *)(v7 + 56), ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v12 = -1 << v45;
      *(_QWORD *)(v7 + 16) = 0;
      goto LABEL_101;
    }
    v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_64;
      v22 = v12[v11];
      if (!v22)
      {
        v11 = v21 + 2;
        if (v21 + 2 >= v16)
          goto LABEL_64;
        v22 = v12[v11];
        if (!v22)
          break;
      }
    }
LABEL_27:
    v15 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_28:
    v24 = *(_BYTE *)(*(_QWORD *)(v7 + 48) + v20);
    result = MEMORY[0x186DA5EC4](*(_QWORD *)(v10 + 40), v24, 1);
    v25 = -1 << *(_BYTE *)(v10 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_110;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v17 + 8 * v27);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_BYTE *)(*(_QWORD *)(v10 + 48) + v18) = v24;
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v16)
    goto LABEL_64;
  v22 = v12[v23];
  if (v22)
  {
    v11 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v16)
      goto LABEL_64;
    v22 = v12[v11];
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
  return result;
}

{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;

  v4 = v3;
  v6 = result;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 16);
  v9 = *(_QWORD *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    v10 = *v3;
    goto LABEL_111;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<Int>);
    if (v9 > v8)
    {
      v32 = static _SetStorage.copy(original:)();
      v10 = v32;
      if (!*(_QWORD *)(v7 + 16))
        goto LABEL_102;
      result = v32 + 56;
      v33 = v7 + 56;
      v34 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34)
        result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      v35 = 0;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
      v36 = 1 << *(_BYTE *)(v7 + 32);
      v37 = -1;
      if (v36 < 64)
        v37 = ~(-1 << v36);
      v38 = v37 & *(_QWORD *)(v7 + 56);
      v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          v41 = v40 | (v35 << 6);
        }
        else
        {
          v42 = v35 + 1;
          if (__OFADD__(v35, 1))
            goto LABEL_116;
          if (v42 >= v39)
            goto LABEL_102;
          v43 = *(_QWORD *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            v35 = v42 + 1;
            if (v42 + 1 >= v39)
              goto LABEL_102;
            v43 = *(_QWORD *)(v33 + 8 * v35);
            if (!v43)
            {
              v35 = v42 + 2;
              if (v42 + 2 >= v39)
                goto LABEL_102;
              v43 = *(_QWORD *)(v33 + 8 * v35);
              if (!v43)
              {
                v35 = v42 + 3;
                if (v42 + 3 >= v39)
                  goto LABEL_102;
                v43 = *(_QWORD *)(v33 + 8 * v35);
                if (!v43)
                {
                  v44 = v42 + 4;
                  if (v44 >= v39)
                    goto LABEL_102;
                  v43 = *(_QWORD *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      v35 = v44 + 1;
                      if (__OFADD__(v44, 1))
                        goto LABEL_120;
                      if (v35 >= v39)
                        break;
                      v43 = *(_QWORD *)(v33 + 8 * v35);
                      ++v44;
                      if (v43)
                        goto LABEL_65;
                    }
LABEL_102:
                    result = swift_release();
                    *v4 = v10;
LABEL_111:
                    *(_QWORD *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2) = v6;
                    v69 = *(_QWORD *)(v10 + 16);
                    v70 = __OFADD__(v69, 1);
                    v71 = v69 + 1;
                    if (!v70)
                    {
                      *(_QWORD *)(v10 + 16) = v71;
                      return result;
                    }
LABEL_118:
                    __break(1u);
                    goto LABEL_119;
                  }
                  v35 = v44;
                }
              }
            }
          }
LABEL_65:
          v38 = (v43 - 1) & v43;
          v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v41) = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v41);
      }
    }
    result = static _SetStorage.resize(original:capacity:move:)();
    v10 = result;
    if (!*(_QWORD *)(v7 + 16))
      goto LABEL_105;
    v45 = 0;
    v46 = v7 + 56;
    v47 = 1 << *(_BYTE *)(v7 + 32);
    if (v47 < 64)
      v48 = ~(-1 << v47);
    else
      v48 = -1;
    v49 = v48 & *(_QWORD *)(v7 + 56);
    v50 = (unint64_t)(v47 + 63) >> 6;
    v51 = result + 56;
    while (1)
    {
      if (v49)
      {
        v53 = __clz(__rbit64(v49));
        v49 &= v49 - 1;
        v54 = v53 | (v45 << 6);
      }
      else
      {
        v55 = v45 + 1;
        if (__OFADD__(v45, 1))
          goto LABEL_117;
        if (v55 >= v50)
          goto LABEL_105;
        v56 = *(_QWORD *)(v46 + 8 * v55);
        ++v45;
        if (!v56)
        {
          v45 = v55 + 1;
          if (v55 + 1 >= v50)
            goto LABEL_105;
          v56 = *(_QWORD *)(v46 + 8 * v45);
          if (!v56)
          {
            v45 = v55 + 2;
            if (v55 + 2 >= v50)
              goto LABEL_105;
            v56 = *(_QWORD *)(v46 + 8 * v45);
            if (!v56)
            {
              v45 = v55 + 3;
              if (v55 + 3 >= v50)
                goto LABEL_105;
              v56 = *(_QWORD *)(v46 + 8 * v45);
              if (!v56)
              {
                v57 = v55 + 4;
                if (v57 >= v50)
                  goto LABEL_105;
                v56 = *(_QWORD *)(v46 + 8 * v57);
                if (!v56)
                {
                  while (1)
                  {
                    v45 = v57 + 1;
                    if (__OFADD__(v57, 1))
                      goto LABEL_121;
                    if (v45 >= v50)
                      break;
                    v56 = *(_QWORD *)(v46 + 8 * v45);
                    ++v57;
                    if (v56)
                      goto LABEL_92;
                  }
LABEL_105:
                  swift_release();
                  *v4 = v10;
                  result = static Hasher._hash(seed:_:)();
                  v66 = -1 << *(_BYTE *)(v10 + 32);
                  a2 = result & ~v66;
                  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
                  {
                    v67 = *(_QWORD *)(v10 + 48);
                    if (*(_QWORD *)(v67 + 8 * a2) == v6)
                    {
LABEL_110:
                      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }
                    else
                    {
                      v68 = ~v66;
                      while (1)
                      {
                        a2 = (a2 + 1) & v68;
                        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
                          break;
                        if (*(_QWORD *)(v67 + 8 * a2) == v6)
                          goto LABEL_110;
                      }
                    }
                  }
                  goto LABEL_111;
                }
                v45 = v57;
              }
            }
          }
        }
LABEL_92:
        v49 = (v56 - 1) & v56;
        v54 = __clz(__rbit64(v56)) + (v45 << 6);
      }
      v58 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v54);
      result = static Hasher._hash(seed:_:)();
      v59 = -1 << *(_BYTE *)(v10 + 32);
      v60 = result & ~v59;
      v61 = v60 >> 6;
      if (((-1 << v60) & ~*(_QWORD *)(v51 + 8 * (v60 >> 6))) != 0)
      {
        v52 = __clz(__rbit64((-1 << v60) & ~*(_QWORD *)(v51 + 8 * (v60 >> 6)))) | v60 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_74;
      }
      v62 = 0;
      v63 = (unint64_t)(63 - v59) >> 6;
      do
      {
        if (++v61 == v63 && (v62 & 1) != 0)
        {
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }
        v64 = v61 == v63;
        if (v61 == v63)
          v61 = 0;
        v62 |= v64;
        v65 = *(_QWORD *)(v51 + 8 * v61);
      }
      while (v65 == -1);
      v52 = __clz(__rbit64(~v65)) + (v61 << 6);
LABEL_74:
      *(_QWORD *)(v51 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
      *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v52) = v58;
      ++*(_QWORD *)(v10 + 16);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<Int>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v10 = result;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_105;
  v74 = v6;
  v11 = 0;
  v12 = (uint64_t *)(v7 + 56);
  v13 = 1 << *(_BYTE *)(v7 + 32);
  v72 = -1 << v13;
  v73 = v13;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v15 = v14 & *(_QWORD *)(v7 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_115;
    if (v21 >= v16)
    {
LABEL_66:
      if (v73 >= 64)
        bzero((void *)(v7 + 56), 8 * v16);
      else
        *v12 = v72;
      v6 = v74;
      *(_QWORD *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_66;
      v22 = v12[v11];
      if (!v22)
      {
        v11 = v21 + 2;
        if (v21 + 2 >= v16)
          goto LABEL_66;
        v22 = v12[v11];
        if (!v22)
        {
          v11 = v21 + 3;
          if (v21 + 3 >= v16)
            goto LABEL_66;
          v22 = v12[v11];
          if (!v22)
            break;
        }
      }
    }
LABEL_29:
    v15 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    v24 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v20);
    result = static Hasher._hash(seed:_:)();
    v25 = -1 << *(_BYTE *)(v10 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_114;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v17 + 8 * v27);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v18) = v24;
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 4;
  if (v23 >= v16)
    goto LABEL_66;
  v22 = v12[v23];
  if (v22)
  {
    v11 = v23;
    goto LABEL_29;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v16)
      goto LABEL_66;
    v22 = v12[v11];
    ++v23;
    if (v22)
      goto LABEL_29;
  }
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[72];

  v4 = v3;
  v6 = result;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 16);
  v9 = *(_QWORD *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    v10 = *v3;
    goto LABEL_112;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<_BPlistEncodingFormat.Reference>);
    if (v9 > v8)
    {
      v33 = static _SetStorage.copy(original:)();
      v10 = v33;
      if (!*(_QWORD *)(v7 + 16))
        goto LABEL_102;
      result = v33 + 56;
      v34 = v7 + 56;
      v35 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v34 + 8 * v35)
        result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v35);
      v36 = 0;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
      v37 = 1 << *(_BYTE *)(v7 + 32);
      v38 = -1;
      if (v37 < 64)
        v38 = ~(-1 << v37);
      v39 = v38 & *(_QWORD *)(v7 + 56);
      v40 = (unint64_t)(v37 + 63) >> 6;
      while (1)
      {
        if (v39)
        {
          v41 = __clz(__rbit64(v39));
          v39 &= v39 - 1;
          v42 = v41 | (v36 << 6);
        }
        else
        {
          v43 = v36 + 1;
          if (__OFADD__(v36, 1))
            goto LABEL_117;
          if (v43 >= v40)
            goto LABEL_102;
          v44 = *(_QWORD *)(v34 + 8 * v43);
          ++v36;
          if (!v44)
          {
            v36 = v43 + 1;
            if (v43 + 1 >= v40)
              goto LABEL_102;
            v44 = *(_QWORD *)(v34 + 8 * v36);
            if (!v44)
            {
              v36 = v43 + 2;
              if (v43 + 2 >= v40)
                goto LABEL_102;
              v44 = *(_QWORD *)(v34 + 8 * v36);
              if (!v44)
              {
                v36 = v43 + 3;
                if (v43 + 3 >= v40)
                  goto LABEL_102;
                v44 = *(_QWORD *)(v34 + 8 * v36);
                if (!v44)
                {
                  v45 = v43 + 4;
                  if (v45 >= v40)
                    goto LABEL_102;
                  v44 = *(_QWORD *)(v34 + 8 * v45);
                  if (!v44)
                  {
                    while (1)
                    {
                      v36 = v45 + 1;
                      if (__OFADD__(v45, 1))
                        goto LABEL_121;
                      if (v36 >= v40)
                        break;
                      v44 = *(_QWORD *)(v34 + 8 * v36);
                      ++v45;
                      if (v44)
                        goto LABEL_65;
                    }
LABEL_102:
                    result = swift_release();
                    *v4 = v10;
LABEL_112:
                    *(_QWORD *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2) = v6;
                    v75 = *(_QWORD *)(v10 + 16);
                    v76 = __OFADD__(v75, 1);
                    v77 = v75 + 1;
                    if (!v76)
                    {
                      *(_QWORD *)(v10 + 16) = v77;
                      return result;
                    }
LABEL_119:
                    __break(1u);
                    goto LABEL_120;
                  }
                  v36 = v45;
                }
              }
            }
          }
LABEL_65:
          v39 = (v44 - 1) & v44;
          v42 = __clz(__rbit64(v44)) + (v36 << 6);
        }
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v42) = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v42);
        result = swift_retain();
      }
    }
    v47 = static _SetStorage.resize(original:capacity:move:)();
    v10 = v47;
    if (*(_QWORD *)(v7 + 16))
    {
      v79 = v6;
      v48 = 1 << *(_BYTE *)(v7 + 32);
      v49 = v7 + 56;
      if (v48 < 64)
        v50 = ~(-1 << v48);
      else
        v50 = -1;
      v51 = v50 & *(_QWORD *)(v7 + 56);
      v52 = (unint64_t)(v48 + 63) >> 6;
      v53 = v47 + 56;
      result = swift_retain();
      v54 = 0;
      while (1)
      {
        if (v51)
        {
          v56 = __clz(__rbit64(v51));
          v51 &= v51 - 1;
          v57 = v56 | (v54 << 6);
        }
        else
        {
          v58 = v54 + 1;
          if (__OFADD__(v54, 1))
            goto LABEL_118;
          if (v58 >= v52)
            goto LABEL_114;
          v59 = *(_QWORD *)(v49 + 8 * v58);
          ++v54;
          if (!v59)
          {
            v54 = v58 + 1;
            if (v58 + 1 >= v52)
              goto LABEL_114;
            v59 = *(_QWORD *)(v49 + 8 * v54);
            if (!v59)
            {
              v54 = v58 + 2;
              if (v58 + 2 >= v52)
                goto LABEL_114;
              v59 = *(_QWORD *)(v49 + 8 * v54);
              if (!v59)
              {
                v54 = v58 + 3;
                if (v58 + 3 >= v52)
                  goto LABEL_114;
                v59 = *(_QWORD *)(v49 + 8 * v54);
                if (!v59)
                {
                  v60 = v58 + 4;
                  if (v60 >= v52)
                    goto LABEL_114;
                  v59 = *(_QWORD *)(v49 + 8 * v60);
                  if (!v59)
                  {
                    while (1)
                    {
                      v54 = v60 + 1;
                      if (__OFADD__(v60, 1))
                        goto LABEL_122;
                      if (v54 >= v52)
                        break;
                      v59 = *(_QWORD *)(v49 + 8 * v54);
                      ++v60;
                      if (v59)
                        goto LABEL_92;
                    }
LABEL_114:
                    swift_release_n();
                    v6 = v79;
LABEL_106:
                    *v3 = v10;
                    Hasher.init(_seed:)();
                    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v80);
                    result = Hasher._finalize()();
                    v69 = -1 << *(_BYTE *)(v10 + 32);
                    a2 = result & ~v69;
                    if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
                    {
                      v70 = swift_retain();
                      v71 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v70, v6);
                      result = swift_release();
                      if ((v71 & 1) != 0)
                      {
LABEL_111:
                        type metadata accessor for _BPlistEncodingFormat.Reference();
                        result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }
                      else
                      {
                        v72 = ~v69;
                        while (1)
                        {
                          a2 = (a2 + 1) & v72;
                          if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
                            break;
                          v73 = swift_retain();
                          v74 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v73, v6);
                          result = swift_release();
                          if ((v74 & 1) != 0)
                            goto LABEL_111;
                        }
                      }
                    }
                    goto LABEL_112;
                  }
                  v54 = v60;
                }
              }
            }
          }
LABEL_92:
          v51 = (v59 - 1) & v59;
          v57 = __clz(__rbit64(v59)) + (v54 << 6);
        }
        v61 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v57);
        Hasher.init(_seed:)();
        swift_retain();
        _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v80);
        result = Hasher._finalize()();
        v62 = -1 << *(_BYTE *)(v10 + 32);
        v63 = result & ~v62;
        v64 = v63 >> 6;
        if (((-1 << v63) & ~*(_QWORD *)(v53 + 8 * (v63 >> 6))) != 0)
        {
          v55 = __clz(__rbit64((-1 << v63) & ~*(_QWORD *)(v53 + 8 * (v63 >> 6)))) | v63 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_74;
        }
        v65 = 0;
        v66 = (unint64_t)(63 - v62) >> 6;
        do
        {
          if (++v64 == v66 && (v65 & 1) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          v67 = v64 == v66;
          if (v64 == v66)
            v64 = 0;
          v65 |= v67;
          v68 = *(_QWORD *)(v53 + 8 * v64);
        }
        while (v68 == -1);
        v55 = __clz(__rbit64(~v68)) + (v64 << 6);
LABEL_74:
        *(_QWORD *)(v53 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v55;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v55) = v61;
        ++*(_QWORD *)(v10 + 16);
      }
    }
LABEL_105:
    swift_release();
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<_BPlistEncodingFormat.Reference>);
  v11 = static _SetStorage.resize(original:capacity:move:)();
  v10 = v11;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_105;
  v78 = v6;
  v12 = 1 << *(_BYTE *)(v7 + 32);
  v13 = (_QWORD *)(v7 + 56);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & *(_QWORD *)(v7 + 56);
  v16 = (unint64_t)(v12 + 63) >> 6;
  v17 = v11 + 56;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_30;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
      goto LABEL_116;
    if (v22 >= v16)
    {
LABEL_66:
      swift_release();
      v46 = 1 << *(_BYTE *)(v7 + 32);
      v6 = v78;
      if (v46 > 63)
        bzero((void *)(v7 + 56), ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v13 = -1 << v46;
      *(_QWORD *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    v23 = v13[v22];
    ++v18;
    if (!v23)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_66;
      v23 = v13[v18];
      if (!v23)
      {
        v18 = v22 + 2;
        if (v22 + 2 >= v16)
          goto LABEL_66;
        v23 = v13[v18];
        if (!v23)
        {
          v18 = v22 + 3;
          if (v22 + 3 >= v16)
            goto LABEL_66;
          v23 = v13[v18];
          if (!v23)
            break;
        }
      }
    }
LABEL_29:
    v15 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_30:
    v25 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v21);
    Hasher.init(_seed:)();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v80);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v10 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v17 + 8 * (v27 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v17 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_115;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v17 + 8 * v28);
      }
      while (v32 == -1);
      v19 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v19) = v25;
    ++*(_QWORD *)(v10 + 16);
  }
  v24 = v22 + 4;
  if (v24 >= v16)
    goto LABEL_66;
  v23 = v13[v24];
  if (v23)
  {
    v18 = v24;
    goto LABEL_29;
  }
  while (1)
  {
    v18 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v18 >= v16)
      goto LABEL_66;
    v23 = v13[v18];
    ++v24;
    if (v23)
      goto LABEL_29;
  }
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
  return result;
}

{
  unint64_t *v3;
  unint64_t *v4;
  Swift::UInt32 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  Swift::UInt32 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  Swift::UInt32 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  Swift::UInt32 v73;
  Swift::UInt32 v74;

  v4 = v3;
  v6 = result;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 16);
  v9 = *(_QWORD *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    v10 = *v3;
    goto LABEL_112;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Unicode.Scalar>);
    if (v9 > v8)
    {
      v32 = static _SetStorage.copy(original:)();
      v10 = v32;
      if (!*(_QWORD *)(v7 + 16))
        goto LABEL_102;
      result = v32 + 56;
      v33 = v7 + 56;
      v34 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34)
        result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      v35 = 0;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
      v36 = 1 << *(_BYTE *)(v7 + 32);
      v37 = -1;
      if (v36 < 64)
        v37 = ~(-1 << v36);
      v38 = v37 & *(_QWORD *)(v7 + 56);
      v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          v41 = v40 | (v35 << 6);
        }
        else
        {
          v42 = v35 + 1;
          if (__OFADD__(v35, 1))
            goto LABEL_117;
          if (v42 >= v39)
            goto LABEL_102;
          v43 = *(_QWORD *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            v35 = v42 + 1;
            if (v42 + 1 >= v39)
              goto LABEL_102;
            v43 = *(_QWORD *)(v33 + 8 * v35);
            if (!v43)
            {
              v35 = v42 + 2;
              if (v42 + 2 >= v39)
                goto LABEL_102;
              v43 = *(_QWORD *)(v33 + 8 * v35);
              if (!v43)
              {
                v35 = v42 + 3;
                if (v42 + 3 >= v39)
                  goto LABEL_102;
                v43 = *(_QWORD *)(v33 + 8 * v35);
                if (!v43)
                {
                  v44 = v42 + 4;
                  if (v44 >= v39)
                    goto LABEL_102;
                  v43 = *(_QWORD *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      v35 = v44 + 1;
                      if (__OFADD__(v44, 1))
                        goto LABEL_121;
                      if (v35 >= v39)
                        break;
                      v43 = *(_QWORD *)(v33 + 8 * v35);
                      ++v44;
                      if (v43)
                        goto LABEL_65;
                    }
LABEL_102:
                    result = swift_release();
                    *v4 = v10;
LABEL_112:
                    *(_QWORD *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(_DWORD *)(*(_QWORD *)(v10 + 48) + 4 * a2) = v6;
                    v70 = *(_QWORD *)(v10 + 16);
                    v71 = __OFADD__(v70, 1);
                    v72 = v70 + 1;
                    if (!v71)
                    {
                      *(_QWORD *)(v10 + 16) = v72;
                      return result;
                    }
LABEL_119:
                    __break(1u);
                    goto LABEL_120;
                  }
                  v35 = v44;
                }
              }
            }
          }
LABEL_65:
          v38 = (v43 - 1) & v43;
          v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }
        *(_DWORD *)(*(_QWORD *)(v10 + 48) + 4 * v41) = *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v41);
      }
    }
    result = static _SetStorage.resize(original:capacity:move:)();
    v10 = result;
    if (*(_QWORD *)(v7 + 16))
    {
      v74 = v6;
      v46 = 0;
      v47 = v7 + 56;
      v48 = 1 << *(_BYTE *)(v7 + 32);
      if (v48 < 64)
        v49 = ~(-1 << v48);
      else
        v49 = -1;
      v50 = v49 & *(_QWORD *)(v7 + 56);
      v51 = (unint64_t)(v48 + 63) >> 6;
      v52 = result + 56;
      while (1)
      {
        if (v50)
        {
          v54 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          v55 = v54 | (v46 << 6);
        }
        else
        {
          v56 = v46 + 1;
          if (__OFADD__(v46, 1))
            goto LABEL_118;
          if (v56 >= v51)
            goto LABEL_114;
          v57 = *(_QWORD *)(v47 + 8 * v56);
          ++v46;
          if (!v57)
          {
            v46 = v56 + 1;
            if (v56 + 1 >= v51)
              goto LABEL_114;
            v57 = *(_QWORD *)(v47 + 8 * v46);
            if (!v57)
            {
              v46 = v56 + 2;
              if (v56 + 2 >= v51)
                goto LABEL_114;
              v57 = *(_QWORD *)(v47 + 8 * v46);
              if (!v57)
              {
                v46 = v56 + 3;
                if (v56 + 3 >= v51)
                  goto LABEL_114;
                v57 = *(_QWORD *)(v47 + 8 * v46);
                if (!v57)
                {
                  v58 = v56 + 4;
                  if (v58 >= v51)
                    goto LABEL_114;
                  v57 = *(_QWORD *)(v47 + 8 * v58);
                  if (!v57)
                  {
                    while (1)
                    {
                      v46 = v58 + 1;
                      if (__OFADD__(v58, 1))
                        goto LABEL_122;
                      if (v46 >= v51)
                        break;
                      v57 = *(_QWORD *)(v47 + 8 * v46);
                      ++v58;
                      if (v57)
                        goto LABEL_92;
                    }
LABEL_114:
                    swift_release();
                    v6 = v74;
                    v4 = v3;
LABEL_106:
                    *v4 = v10;
                    Hasher.init(_seed:)();
                    Hasher._combine(_:)(v6);
                    result = Hasher._finalize()();
                    v67 = -1 << *(_BYTE *)(v10 + 32);
                    a2 = result & ~v67;
                    if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
                    {
                      v68 = *(_QWORD *)(v10 + 48);
                      if (*(_DWORD *)(v68 + 4 * a2) == v6)
                      {
LABEL_111:
                        result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }
                      else
                      {
                        v69 = ~v67;
                        while (1)
                        {
                          a2 = (a2 + 1) & v69;
                          if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
                            break;
                          if (*(_DWORD *)(v68 + 4 * a2) == v6)
                            goto LABEL_111;
                        }
                      }
                    }
                    goto LABEL_112;
                  }
                  v46 = v58;
                }
              }
            }
          }
LABEL_92:
          v50 = (v57 - 1) & v57;
          v55 = __clz(__rbit64(v57)) + (v46 << 6);
        }
        v59 = *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v55);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v59);
        result = Hasher._finalize()();
        v60 = -1 << *(_BYTE *)(v10 + 32);
        v61 = result & ~v60;
        v62 = v61 >> 6;
        if (((-1 << v61) & ~*(_QWORD *)(v52 + 8 * (v61 >> 6))) != 0)
        {
          v53 = __clz(__rbit64((-1 << v61) & ~*(_QWORD *)(v52 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_74;
        }
        v63 = 0;
        v64 = (unint64_t)(63 - v60) >> 6;
        do
        {
          if (++v62 == v64 && (v63 & 1) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          v65 = v62 == v64;
          if (v62 == v64)
            v62 = 0;
          v63 |= v65;
          v66 = *(_QWORD *)(v52 + 8 * v62);
        }
        while (v66 == -1);
        v53 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
        *(_QWORD *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
        *(_DWORD *)(*(_QWORD *)(v10 + 48) + 4 * v53) = v59;
        ++*(_QWORD *)(v10 + 16);
      }
    }
LABEL_105:
    swift_release();
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Unicode.Scalar>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v10 = result;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_105;
  v73 = v6;
  v11 = 0;
  v12 = (_QWORD *)(v7 + 56);
  v13 = 1 << *(_BYTE *)(v7 + 32);
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v15 = v14 & *(_QWORD *)(v7 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_116;
    if (v21 >= v16)
    {
LABEL_66:
      v45 = 1 << *(_BYTE *)(v7 + 32);
      if (v45 > 63)
        bzero((void *)(v7 + 56), ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v12 = -1 << v45;
      v6 = v73;
      v4 = v3;
      *(_QWORD *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_66;
      v22 = v12[v11];
      if (!v22)
      {
        v11 = v21 + 2;
        if (v21 + 2 >= v16)
          goto LABEL_66;
        v22 = v12[v11];
        if (!v22)
        {
          v11 = v21 + 3;
          if (v21 + 3 >= v16)
            goto LABEL_66;
          v22 = v12[v11];
          if (!v22)
            break;
        }
      }
    }
LABEL_29:
    v15 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    v24 = *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v20);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v24);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v10 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_115;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v17 + 8 * v27);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_DWORD *)(*(_QWORD *)(v10 + 48) + 4 * v18) = v24;
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 4;
  if (v23 >= v16)
    goto LABEL_66;
  v22 = v12[v23];
  if (v22)
  {
    v11 = v23;
    goto LABEL_29;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v16)
      goto LABEL_66;
    v22 = v12[v11];
    ++v23;
    if (v22)
      goto LABEL_29;
  }
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
  return result;
}

{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;

  v4 = v3;
  v6 = result;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 16);
  v9 = *(_QWORD *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    v10 = *v3;
    goto LABEL_111;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectIdentifier>);
    if (v9 > v8)
    {
      v32 = static _SetStorage.copy(original:)();
      v10 = v32;
      if (!*(_QWORD *)(v7 + 16))
        goto LABEL_102;
      result = v32 + 56;
      v33 = v7 + 56;
      v34 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34)
        result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      v35 = 0;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
      v36 = 1 << *(_BYTE *)(v7 + 32);
      v37 = -1;
      if (v36 < 64)
        v37 = ~(-1 << v36);
      v38 = v37 & *(_QWORD *)(v7 + 56);
      v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          v41 = v40 | (v35 << 6);
        }
        else
        {
          v42 = v35 + 1;
          if (__OFADD__(v35, 1))
            goto LABEL_116;
          if (v42 >= v39)
            goto LABEL_102;
          v43 = *(_QWORD *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            v35 = v42 + 1;
            if (v42 + 1 >= v39)
              goto LABEL_102;
            v43 = *(_QWORD *)(v33 + 8 * v35);
            if (!v43)
            {
              v35 = v42 + 2;
              if (v42 + 2 >= v39)
                goto LABEL_102;
              v43 = *(_QWORD *)(v33 + 8 * v35);
              if (!v43)
              {
                v35 = v42 + 3;
                if (v42 + 3 >= v39)
                  goto LABEL_102;
                v43 = *(_QWORD *)(v33 + 8 * v35);
                if (!v43)
                {
                  v44 = v42 + 4;
                  if (v44 >= v39)
                    goto LABEL_102;
                  v43 = *(_QWORD *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      v35 = v44 + 1;
                      if (__OFADD__(v44, 1))
                        goto LABEL_120;
                      if (v35 >= v39)
                        break;
                      v43 = *(_QWORD *)(v33 + 8 * v35);
                      ++v44;
                      if (v43)
                        goto LABEL_65;
                    }
LABEL_102:
                    result = swift_release();
                    *v4 = v10;
LABEL_111:
                    *(_QWORD *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2) = v6;
                    v69 = *(_QWORD *)(v10 + 16);
                    v70 = __OFADD__(v69, 1);
                    v71 = v69 + 1;
                    if (!v70)
                    {
                      *(_QWORD *)(v10 + 16) = v71;
                      return result;
                    }
LABEL_118:
                    __break(1u);
                    goto LABEL_119;
                  }
                  v35 = v44;
                }
              }
            }
          }
LABEL_65:
          v38 = (v43 - 1) & v43;
          v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v41) = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v41);
      }
    }
    result = static _SetStorage.resize(original:capacity:move:)();
    v10 = result;
    if (!*(_QWORD *)(v7 + 16))
      goto LABEL_105;
    v45 = 0;
    v46 = v7 + 56;
    v47 = 1 << *(_BYTE *)(v7 + 32);
    if (v47 < 64)
      v48 = ~(-1 << v47);
    else
      v48 = -1;
    v49 = v48 & *(_QWORD *)(v7 + 56);
    v50 = (unint64_t)(v47 + 63) >> 6;
    v51 = result + 56;
    while (1)
    {
      if (v49)
      {
        v53 = __clz(__rbit64(v49));
        v49 &= v49 - 1;
        v54 = v53 | (v45 << 6);
      }
      else
      {
        v55 = v45 + 1;
        if (__OFADD__(v45, 1))
          goto LABEL_117;
        if (v55 >= v50)
          goto LABEL_105;
        v56 = *(_QWORD *)(v46 + 8 * v55);
        ++v45;
        if (!v56)
        {
          v45 = v55 + 1;
          if (v55 + 1 >= v50)
            goto LABEL_105;
          v56 = *(_QWORD *)(v46 + 8 * v45);
          if (!v56)
          {
            v45 = v55 + 2;
            if (v55 + 2 >= v50)
              goto LABEL_105;
            v56 = *(_QWORD *)(v46 + 8 * v45);
            if (!v56)
            {
              v45 = v55 + 3;
              if (v55 + 3 >= v50)
                goto LABEL_105;
              v56 = *(_QWORD *)(v46 + 8 * v45);
              if (!v56)
              {
                v57 = v55 + 4;
                if (v57 >= v50)
                  goto LABEL_105;
                v56 = *(_QWORD *)(v46 + 8 * v57);
                if (!v56)
                {
                  while (1)
                  {
                    v45 = v57 + 1;
                    if (__OFADD__(v57, 1))
                      goto LABEL_121;
                    if (v45 >= v50)
                      break;
                    v56 = *(_QWORD *)(v46 + 8 * v45);
                    ++v57;
                    if (v56)
                      goto LABEL_92;
                  }
LABEL_105:
                  swift_release();
                  *v4 = v10;
                  result = static Hasher._hash(seed:_:)();
                  v66 = -1 << *(_BYTE *)(v10 + 32);
                  a2 = result & ~v66;
                  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
                  {
                    v67 = *(_QWORD *)(v10 + 48);
                    if (*(_QWORD *)(v67 + 8 * a2) == v6)
                    {
LABEL_110:
                      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }
                    else
                    {
                      v68 = ~v66;
                      while (1)
                      {
                        a2 = (a2 + 1) & v68;
                        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
                          break;
                        if (*(_QWORD *)(v67 + 8 * a2) == v6)
                          goto LABEL_110;
                      }
                    }
                  }
                  goto LABEL_111;
                }
                v45 = v57;
              }
            }
          }
        }
LABEL_92:
        v49 = (v56 - 1) & v56;
        v54 = __clz(__rbit64(v56)) + (v45 << 6);
      }
      v58 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v54);
      result = static Hasher._hash(seed:_:)();
      v59 = -1 << *(_BYTE *)(v10 + 32);
      v60 = result & ~v59;
      v61 = v60 >> 6;
      if (((-1 << v60) & ~*(_QWORD *)(v51 + 8 * (v60 >> 6))) != 0)
      {
        v52 = __clz(__rbit64((-1 << v60) & ~*(_QWORD *)(v51 + 8 * (v60 >> 6)))) | v60 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_74;
      }
      v62 = 0;
      v63 = (unint64_t)(63 - v59) >> 6;
      do
      {
        if (++v61 == v63 && (v62 & 1) != 0)
        {
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }
        v64 = v61 == v63;
        if (v61 == v63)
          v61 = 0;
        v62 |= v64;
        v65 = *(_QWORD *)(v51 + 8 * v61);
      }
      while (v65 == -1);
      v52 = __clz(__rbit64(~v65)) + (v61 << 6);
LABEL_74:
      *(_QWORD *)(v51 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
      *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v52) = v58;
      ++*(_QWORD *)(v10 + 16);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectIdentifier>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v10 = result;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_105;
  v74 = v6;
  v11 = 0;
  v12 = (uint64_t *)(v7 + 56);
  v13 = 1 << *(_BYTE *)(v7 + 32);
  v72 = -1 << v13;
  v73 = v13;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v15 = v14 & *(_QWORD *)(v7 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_115;
    if (v21 >= v16)
    {
LABEL_66:
      if (v73 >= 64)
        bzero((void *)(v7 + 56), 8 * v16);
      else
        *v12 = v72;
      v6 = v74;
      *(_QWORD *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_66;
      v22 = v12[v11];
      if (!v22)
      {
        v11 = v21 + 2;
        if (v21 + 2 >= v16)
          goto LABEL_66;
        v22 = v12[v11];
        if (!v22)
        {
          v11 = v21 + 3;
          if (v21 + 3 >= v16)
            goto LABEL_66;
          v22 = v12[v11];
          if (!v22)
            break;
        }
      }
    }
LABEL_29:
    v15 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    v24 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v20);
    result = static Hasher._hash(seed:_:)();
    v25 = -1 << *(_BYTE *)(v10 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_114;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v17 + 8 * v27);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v18) = v24;
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 4;
  if (v23 >= v16)
    goto LABEL_66;
  v22 = v12[v23];
  if (v22)
  {
    v11 = v23;
    goto LABEL_29;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v16)
      goto LABEL_66;
    v22 = v12[v11];
    ++v23;
    if (v22)
      goto LABEL_29;
  }
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
  return result;
}

{
  unint64_t *v3;
  unint64_t *v4;
  Swift::UInt v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  Swift::UInt v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  Swift::UInt v73;
  Swift::UInt v74;

  v4 = v3;
  v6 = result;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 16);
  v9 = *(_QWORD *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    v10 = *v3;
    goto LABEL_112;
  }
  if ((a3 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Date.ComponentsFormatStyle.Field>);
    if (v9 > v8)
    {
      v32 = static _SetStorage.copy(original:)();
      v10 = v32;
      if (!*(_QWORD *)(v7 + 16))
        goto LABEL_102;
      result = v32 + 56;
      v33 = v7 + 56;
      v34 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
      if (v10 != v7 || result >= v33 + 8 * v34)
        result = (unint64_t)memmove((void *)result, (const void *)(v7 + 56), 8 * v34);
      v35 = 0;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
      v36 = 1 << *(_BYTE *)(v7 + 32);
      v37 = -1;
      if (v36 < 64)
        v37 = ~(-1 << v36);
      v38 = v37 & *(_QWORD *)(v7 + 56);
      v39 = (unint64_t)(v36 + 63) >> 6;
      while (1)
      {
        if (v38)
        {
          v40 = __clz(__rbit64(v38));
          v38 &= v38 - 1;
          v41 = v40 | (v35 << 6);
        }
        else
        {
          v42 = v35 + 1;
          if (__OFADD__(v35, 1))
            goto LABEL_117;
          if (v42 >= v39)
            goto LABEL_102;
          v43 = *(_QWORD *)(v33 + 8 * v42);
          ++v35;
          if (!v43)
          {
            v35 = v42 + 1;
            if (v42 + 1 >= v39)
              goto LABEL_102;
            v43 = *(_QWORD *)(v33 + 8 * v35);
            if (!v43)
            {
              v35 = v42 + 2;
              if (v42 + 2 >= v39)
                goto LABEL_102;
              v43 = *(_QWORD *)(v33 + 8 * v35);
              if (!v43)
              {
                v35 = v42 + 3;
                if (v42 + 3 >= v39)
                  goto LABEL_102;
                v43 = *(_QWORD *)(v33 + 8 * v35);
                if (!v43)
                {
                  v44 = v42 + 4;
                  if (v44 >= v39)
                    goto LABEL_102;
                  v43 = *(_QWORD *)(v33 + 8 * v44);
                  if (!v43)
                  {
                    while (1)
                    {
                      v35 = v44 + 1;
                      if (__OFADD__(v44, 1))
                        goto LABEL_121;
                      if (v35 >= v39)
                        break;
                      v43 = *(_QWORD *)(v33 + 8 * v35);
                      ++v44;
                      if (v43)
                        goto LABEL_65;
                    }
LABEL_102:
                    result = swift_release();
                    *v4 = v10;
LABEL_112:
                    *(_QWORD *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                    *(_BYTE *)(*(_QWORD *)(v10 + 48) + a2) = v6;
                    v70 = *(_QWORD *)(v10 + 16);
                    v71 = __OFADD__(v70, 1);
                    v72 = v70 + 1;
                    if (!v71)
                    {
                      *(_QWORD *)(v10 + 16) = v72;
                      return result;
                    }
LABEL_119:
                    __break(1u);
                    goto LABEL_120;
                  }
                  v35 = v44;
                }
              }
            }
          }
LABEL_65:
          v38 = (v43 - 1) & v43;
          v41 = __clz(__rbit64(v43)) + (v35 << 6);
        }
        *(_BYTE *)(*(_QWORD *)(v10 + 48) + v41) = *(_BYTE *)(*(_QWORD *)(v7 + 48) + v41);
      }
    }
    result = static _SetStorage.resize(original:capacity:move:)();
    v10 = result;
    if (*(_QWORD *)(v7 + 16))
    {
      v74 = v6;
      v46 = 0;
      v47 = v7 + 56;
      v48 = 1 << *(_BYTE *)(v7 + 32);
      if (v48 < 64)
        v49 = ~(-1 << v48);
      else
        v49 = -1;
      v50 = v49 & *(_QWORD *)(v7 + 56);
      v51 = (unint64_t)(v48 + 63) >> 6;
      v52 = result + 56;
      while (1)
      {
        if (v50)
        {
          v54 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          v55 = v54 | (v46 << 6);
        }
        else
        {
          v56 = v46 + 1;
          if (__OFADD__(v46, 1))
            goto LABEL_118;
          if (v56 >= v51)
            goto LABEL_114;
          v57 = *(_QWORD *)(v47 + 8 * v56);
          ++v46;
          if (!v57)
          {
            v46 = v56 + 1;
            if (v56 + 1 >= v51)
              goto LABEL_114;
            v57 = *(_QWORD *)(v47 + 8 * v46);
            if (!v57)
            {
              v46 = v56 + 2;
              if (v56 + 2 >= v51)
                goto LABEL_114;
              v57 = *(_QWORD *)(v47 + 8 * v46);
              if (!v57)
              {
                v46 = v56 + 3;
                if (v56 + 3 >= v51)
                  goto LABEL_114;
                v57 = *(_QWORD *)(v47 + 8 * v46);
                if (!v57)
                {
                  v58 = v56 + 4;
                  if (v58 >= v51)
                    goto LABEL_114;
                  v57 = *(_QWORD *)(v47 + 8 * v58);
                  if (!v57)
                  {
                    while (1)
                    {
                      v46 = v58 + 1;
                      if (__OFADD__(v58, 1))
                        goto LABEL_122;
                      if (v46 >= v51)
                        break;
                      v57 = *(_QWORD *)(v47 + 8 * v46);
                      ++v58;
                      if (v57)
                        goto LABEL_92;
                    }
LABEL_114:
                    swift_release();
                    v4 = v3;
                    v6 = v74;
LABEL_106:
                    *v4 = v10;
                    Hasher.init(_seed:)();
                    Hasher._combine(_:)(v6);
                    result = Hasher._finalize()();
                    v67 = -1 << *(_BYTE *)(v10 + 32);
                    a2 = result & ~v67;
                    if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
                    {
                      v68 = *(_QWORD *)(v10 + 48);
                      if (*(unsigned __int8 *)(v68 + a2) == (_DWORD)v6)
                      {
LABEL_111:
                        result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }
                      else
                      {
                        v69 = ~v67;
                        while (1)
                        {
                          a2 = (a2 + 1) & v69;
                          if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
                            break;
                          if (*(unsigned __int8 *)(v68 + a2) == (_DWORD)v6)
                            goto LABEL_111;
                        }
                      }
                    }
                    goto LABEL_112;
                  }
                  v46 = v58;
                }
              }
            }
          }
LABEL_92:
          v50 = (v57 - 1) & v57;
          v55 = __clz(__rbit64(v57)) + (v46 << 6);
        }
        v59 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 48) + v55);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v59);
        result = Hasher._finalize()();
        v60 = -1 << *(_BYTE *)(v10 + 32);
        v61 = result & ~v60;
        v62 = v61 >> 6;
        if (((-1 << v61) & ~*(_QWORD *)(v52 + 8 * (v61 >> 6))) != 0)
        {
          v53 = __clz(__rbit64((-1 << v61) & ~*(_QWORD *)(v52 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_74;
        }
        v63 = 0;
        v64 = (unint64_t)(63 - v60) >> 6;
        do
        {
          if (++v62 == v64 && (v63 & 1) != 0)
          {
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          v65 = v62 == v64;
          if (v62 == v64)
            v62 = 0;
          v63 |= v65;
          v66 = *(_QWORD *)(v52 + 8 * v62);
        }
        while (v66 == -1);
        v53 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
        *(_QWORD *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
        *(_BYTE *)(*(_QWORD *)(v10 + 48) + v53) = v59;
        ++*(_QWORD *)(v10 + 16);
      }
    }
LABEL_105:
    swift_release();
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Date.ComponentsFormatStyle.Field>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v10 = result;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_105;
  v73 = v6;
  v11 = 0;
  v12 = (_QWORD *)(v7 + 56);
  v13 = 1 << *(_BYTE *)(v7 + 32);
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v15 = v14 & *(_QWORD *)(v7 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v11 << 6);
      goto LABEL_30;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_116;
    if (v21 >= v16)
    {
LABEL_66:
      v45 = 1 << *(_BYTE *)(v7 + 32);
      if (v45 > 63)
        bzero((void *)(v7 + 56), ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v12 = -1 << v45;
      v4 = v3;
      v6 = v73;
      *(_QWORD *)(v7 + 16) = 0;
      goto LABEL_105;
    }
    v22 = v12[v21];
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_66;
      v22 = v12[v11];
      if (!v22)
      {
        v11 = v21 + 2;
        if (v21 + 2 >= v16)
          goto LABEL_66;
        v22 = v12[v11];
        if (!v22)
        {
          v11 = v21 + 3;
          if (v21 + 3 >= v16)
            goto LABEL_66;
          v22 = v12[v11];
          if (!v22)
            break;
        }
      }
    }
LABEL_29:
    v15 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    v24 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 48) + v20);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v24);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v10 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_115;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v17 + 8 * v27);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_BYTE *)(*(_QWORD *)(v10 + 48) + v18) = v24;
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 4;
  if (v23 >= v16)
    goto LABEL_66;
  v22 = v12[v23];
  if (v22)
  {
    v11 = v23;
    goto LABEL_29;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v16)
      goto LABEL_66;
    v22 = v12[v11];
    ++v23;
    if (v22)
      goto LABEL_29;
  }
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of (Hashable & Sendable)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

Swift::Int __swiftcall Calendar.component(_:from:)(Foundation::Calendar::Component _, Foundation::Date from)
{
  Swift::Int result;

  __asm { BR              X11 }
  return result;
}

uint64_t sub_181844AA4(double a1)
{
  double v2;
  uint64_t v3;
  _BYTE v4[288];
  _QWORD v5[42];

  v3 = 1;
  v2 = a1;
  Calendar._dateComponents(_:from:)(&v3, &v2, v4);
  memcpy(v5, v4, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v5);
  if (LOBYTE(v5[5]) == 1)
    return 0;
  else
    return v5[4];
}

void sub_181844EF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, double a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char __src, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char __dst,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  a11 = 0x40000;
  a10 = *(_QWORD *)&a9;
  Calendar._dateComponents(_:from:)(&a11, (double *)&a10, &__src);
  memcpy(&__dst, &__src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)&__dst);
  if ((a63 & 1) == 0)
    JUMPOUT(0x181844EDCLL);
  JUMPOUT(0x181844ED8);
}

NSTimeZone __swiftcall TimeZone._bridgeToObjectiveC()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (NSTimeZone)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 120))(ObjectType, v1);
}

id protocol witness for _TimeZoneProtocol.bridgeToNSTimeZone() in conformance _TimeZoneICU(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  objc_class *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  objc_super v9;

  v4 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *(_QWORD *)v6 = v2;
  *((_QWORD *)v6 + 1) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 32) = 0;
  *(_OWORD *)(v7 + 16) = xmmword_1820E9CE0;
  *(_QWORD *)&v5[OBJC_IVAR____NSSwiftTimeZone_lock] = v7;
  v9.receiver = v5;
  v9.super_class = v4;
  swift_retain();
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t type metadata accessor for _NSSwiftTimeZone()
{
  return objc_opt_self();
}

double _NSSwiftCalendar.timeZone.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t ObjectType;
  double result;
  __int128 v8;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  v4 = (os_unfair_lock_s *)(v3 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  v5 = *(_QWORD *)(v3 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v4);
  ObjectType = swift_getObjectType();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 48))(&v8, ObjectType, v5);
  swift_unknownObjectRelease();
  result = *(double *)&v8;
  *a1 = v8;
  return result;
}

void *partial apply for closure #1 in _CalendarICU.dateComponents(_:from:to:)@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _CalendarICU.dateComponents(_:from:to:)(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1, *(double *)(v1 + 16), *(double *)(v1 + 24));
}

void *closure #1 in _CalendarICU.dateComponents(_:from:to:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double v7;
  double v8;
  double v9;
  int v10;
  int v11;
  double v12;
  double v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17[2];
  __int128 v18;
  _QWORD __src[37];

  __src[36] = *MEMORY[0x1E0C80C00];
  v7 = 1.59271755e13;
  if (a4 <= 1.59271755e13)
  {
    v8 = -2.11845067e11;
    if (a4 <= -2.11845067e11)
    {
      if (a5 <= 1.59271755e13)
      {
        v8 = -2.11845067e11;
        v7 = fmax(a5, -2.11845067e11);
      }
    }
    else
    {
      v7 = 1.59271755e13;
      if (a5 <= 1.59271755e13)
        v7 = fmax(a5, -2.11845067e11);
      v8 = a4;
    }
  }
  else
  {
    v8 = 1.59271755e13;
    if (a5 <= 1.59271755e13)
      v7 = fmax(a5, -2.11845067e11);
    else
      v7 = 1.59271755e13;
  }
  MEMORY[0x186DAA160](*(_QWORD *)(a1 + 32));
  v9 = (v7 + 978307200.0) * 1000.0 - ((v8 + 978307200.0) * 1000.0 - floor((v8 + 978307200.0) * 1000.0));
  ucal_setMillis();
  v18 = 0uLL;
  v17[0] = 0;
  v17[1] = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v18, v17, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  if ((a2 & 1) != 0)
  {
    ucal_getMillis();
    v10 = ucal_get();
    ucal_setMillis();
    v11 = ucal_get();
    ucal_setMillis();
    ucal_set();
    if (__OFSUB__(v11, v10))
    {
      __break(1u);
      goto LABEL_55;
    }
    __src[4] = v11 - v10;
    LOBYTE(__src[5]) = 0;
  }
  if ((a2 & 2) != 0)
  {
    __src[6] = (int)ucal_getFieldDifference();
    LOBYTE(__src[7]) = 0;
    if ((a2 & 0x1000) == 0)
    {
LABEL_16:
      if ((a2 & 0x200) == 0)
        goto LABEL_17;
      goto LABEL_31;
    }
  }
  else if ((a2 & 0x1000) == 0)
  {
    goto LABEL_16;
  }
  __src[34] = (int)ucal_getFieldDifference();
  LOBYTE(__src[35]) = 0;
  if ((a2 & 0x200) == 0)
  {
LABEL_17:
    if ((a2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_31:
  __src[26] = 0;
  LOBYTE(__src[27]) = 0;
  if ((a2 & 4) == 0)
  {
LABEL_18:
    if ((a2 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_33;
  }
LABEL_32:
  __src[8] = (int)ucal_getFieldDifference();
  LOBYTE(__src[9]) = 0;
  if ((a2 & 0x800) == 0)
  {
LABEL_19:
    if ((a2 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_34;
  }
LABEL_33:
  __src[32] = (int)ucal_getFieldDifference();
  LOBYTE(__src[33]) = 0;
  if ((a2 & 0x400) == 0)
  {
LABEL_20:
    if ((a2 & 8) == 0)
      goto LABEL_21;
    goto LABEL_35;
  }
LABEL_34:
  __src[30] = (int)ucal_getFieldDifference();
  LOBYTE(__src[31]) = 0;
  if ((a2 & 8) == 0)
  {
LABEL_21:
    if ((a2 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_36;
  }
LABEL_35:
  __src[10] = (int)ucal_getFieldDifference();
  LOBYTE(__src[11]) = 0;
  if ((a2 & 0x40000) == 0)
  {
LABEL_22:
    if ((a2 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_37;
  }
LABEL_36:
  __src[12] = (int)ucal_getFieldDifference();
  LOBYTE(__src[13]) = 0;
  if ((a2 & 0x80) == 0)
  {
LABEL_23:
    if ((a2 & 0x100) == 0)
      goto LABEL_24;
    goto LABEL_38;
  }
LABEL_37:
  __src[22] = (int)ucal_getFieldDifference();
  LOBYTE(__src[23]) = 0;
  if ((a2 & 0x100) == 0)
  {
LABEL_24:
    if ((a2 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_39;
  }
LABEL_38:
  __src[24] = (int)ucal_getFieldDifference();
  LOBYTE(__src[25]) = 0;
  if ((a2 & 0x10) == 0)
  {
LABEL_25:
    if ((a2 & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_40;
  }
LABEL_39:
  __src[14] = (int)ucal_getFieldDifference();
  LOBYTE(__src[15]) = 0;
  if ((a2 & 0x20) == 0)
  {
LABEL_26:
    if ((a2 & 0x40) == 0)
      goto LABEL_27;
    goto LABEL_41;
  }
LABEL_40:
  __src[16] = (int)ucal_getFieldDifference();
  LOBYTE(__src[17]) = 0;
  if ((a2 & 0x40) == 0)
  {
LABEL_27:
    if ((a2 & 0x2000) == 0)
      return memcpy(a3, __src, 0x11AuLL);
LABEL_42:
    ucal_getMillis();
    v13 = floor((v9 - v12) * 1000000.0);
    if (v13 >= 2147483650.0)
    {
      v15 = 0;
      v14 = 0x7FFFFFFFLL;
    }
    else
    {
      if (v13 > -2147483650.0)
      {
        if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) != 0)
        {
          if (v13 > -9.22337204e18)
          {
            if (v13 < 9.22337204e18)
            {
              v14 = (uint64_t)v13;
              v15 = (uint64_t)v13 == 0x7FFFFFFFFFFFFFFFLL;
              if ((uint64_t)v13 == 0x7FFFFFFFFFFFFFFFLL)
                v14 = 0;
              goto LABEL_52;
            }
LABEL_57:
            __break(1u);
          }
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      v15 = 0;
      v14 = 0xFFFFFFFF80000000;
    }
LABEL_52:
    __src[20] = v14;
    LOBYTE(__src[21]) = v15;
    return memcpy(a3, __src, 0x11AuLL);
  }
LABEL_41:
  __src[18] = (int)ucal_getFieldDifference();
  LOBYTE(__src[19]) = 0;
  if ((a2 & 0x2000) != 0)
    goto LABEL_42;
  return memcpy(a3, __src, 0x11AuLL);
}

uint64_t CVarArg<>._cVarArgEncoding.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;
  uint64_t v4;

  v3 = (id)MEMORY[0x186DA5660](a1, a3);
  swift_unknownObjectRetain();
  v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v4 + 16) = 1;
  *(_QWORD *)(v4 + 32) = v3;
  swift_unknownObjectRelease();
  return v4;
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0;
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v1 < 0 || (v1 & 0x4000000000000000) != 0))
    return (NSArray)swift_unknownObjectRetain();
  _swift_isClassOrObjCExistentialType();
  swift_bridgeObjectRetain();
  return (NSArray)_ContiguousArrayBuffer._asCocoaArray()();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  uint64_t v0;
  uint64_t v1;

  if ((v0 & 0xC000000000000001) != 0)
  {
    if (v0 < 0)
      v1 = v0;
    else
      v1 = v0 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    return (NSDictionary)v1;
  }
  else
  {
    swift_bridgeObjectRetain();
    return (NSDictionary)_NativeDictionary.bridged()();
  }
}

NSArray protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance [A]()
{
  return Array._bridgeToObjectiveC()();
}

id URL.relativeString.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  if (_foundation_swift_url_feature_enabled())
  {
    if (!v2)
    {
      __break(1u);
      JUMPOUT(0x18184584CLL);
    }
    v3 = *(id *)(v2 + 16);
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = objc_msgSend(v1, sel_relativeString);
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  }
  return v3;
}

CFCharacterSetRef static CharacterSet.whitespaces.getter@<X0>(CFCharacterSetRef *a1@<X8>)
{
  CFCharacterSetRef result;
  CFCharacterSetRef v3;

  result = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  if (result)
  {
    v3 = result;
    type metadata accessor for __CharacterSetStorage();
    result = (CFCharacterSetRef)swift_allocObject();
    *((_QWORD *)result + 2) = v3;
    *((_BYTE *)result + 24) = 0;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))JSONDecoderImpl.KeyedContainer.nestedUnkeyedContainer(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))JSONDecoderImpl.KeyedContainer.superDecoder(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t JSONDecoderImpl.KeyedContainer.superDecoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = JSONDecoderImpl.KeyedContainer.decoderForKeyNoThrow<A>(_:)(a1, a2, a3, a4, a5, a5, a6, a6);
  a7[3] = type metadata accessor for JSONDecoderImpl();
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl, (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
  a7[4] = result;
  *a7 = v8;
  return result;
}

uint64_t JSONDecoderImpl.KeyedContainer.decoderForKeyNoThrow<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  void (*v43)(char *, uint64_t);
  unint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  void (*v50)(char *, uint64_t);
  unint64_t v51;
  int64_t *v52;
  int64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  void (*v77)(uint64_t *, uint64_t, uint64_t);
  char *v78;
  char v79;
  _QWORD *v80;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void (*v88)(uint64_t *, uint64_t, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;

  v92 = a3;
  v13 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v85 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Optional();
  v90 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v89 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v82 - v18;
  v91 = a8;
  v20 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a4 + 16) && (v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21), (v23 & 1) != 0))
  {
    v24 = *(_QWORD *)(a4 + 56) + 24 * v22;
    v25 = *(_QWORD *)v24;
    v26 = *(char **)(v24 + 8);
    LODWORD(v86) = *(unsigned __int8 *)(v24 + 16);
    swift_bridgeObjectRelease();
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  }
  else
  {
    swift_bridgeObjectRelease();
    v28 = type metadata accessor for DecodingError();
    v93 = swift_allocError();
    v94 = v15;
    v30 = v29;
    v87 = (char *)v29
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v31 = v91;
    v30[3] = a6;
    v30[4] = v31;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
    v88 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16);
    v88(boxed_opaque_existential_1, a1, a6);
    v86 = _CodingPathNode.path.getter(v92);
    v95 = 0;
    v96 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v95 = 0xD00000000000001DLL;
    v96 = 0x800000018230D870;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 2238496;
    v34._object = (void *)0xE300000000000000;
    String.append(_:)(v34);
    v35._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 3025186;
    v36._object = (void *)0xE300000000000000;
    String.append(_:)(v36);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    v37 = v30;
    v15 = v94;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v37, *MEMORY[0x1E0DEC448], v28);
    v38 = (void *)v93;
    swift_willThrow();

    v27 = (void (*)(char *, uint64_t, uint64_t))v88;
    v25 = 0;
    v26 = 0;
    LODWORD(v86) = 160;
  }
  v39 = *(_QWORD *)(a2 + 24);
  v93 = *(_QWORD *)(a2 + 32);
  v94 = v39;
  v27(v19, a1, a6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, a6);
  v40 = v89;
  v41 = v90;
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v89, v19, v15);
  v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v40, 1, a6);
  v87 = v26;
  v88 = (void (*)(uint64_t *, uint64_t, uint64_t))v25;
  if (v42 == 1)
  {
    v43 = *(void (**)(char *, uint64_t))(v41 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    v43(v19, v15);
    v43(v40, v15);
    v44 = v92;
    swift_retain();
    goto LABEL_13;
  }
  v45 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v46 = v85;
  v45(v85, v40, a6);
  v47 = (uint64_t *)swift_allocObject();
  v48 = v91;
  v47[5] = a6;
  v47[6] = v48;
  v49 = __swift_allocate_boxed_opaque_existential_1(v47 + 2);
  v45((char *)v49, v46, a6);
  v50 = *(void (**)(char *, uint64_t))(v41 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  v50(v19, v15);
  v51 = v92;
  v47[7] = v92;
  if (!(v51 >> 62))
  {
    v52 = (int64_t *)(v51 + 64);
LABEL_11:
    v53 = *v52;
    swift_retain();
    v55 = v53 + 1;
    if (__OFADD__(v53, 1))
    {
      __break(1u);
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  if (v51 >> 62 == 1)
  {
    v52 = (int64_t *)((v51 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_11;
  }
  v55 = 1;
LABEL_12:
  v47[8] = v55;
  v44 = (unint64_t)v47;
LABEL_13:
  v57 = *(void **)(a2 + 40);
  v56 = *(_QWORD *)(a2 + 48);
  v58 = *(_QWORD *)(a2 + 64);
  v59 = *(_QWORD *)(a2 + 72);
  v61 = *(_QWORD *)(a2 + 80);
  v60 = *(char **)(a2 + 88);
  v62 = *(_QWORD *)(a2 + 96);
  v85 = *(char **)(a2 + 104);
  v64 = *(_QWORD *)(a2 + 112);
  v63 = *(_QWORD *)(a2 + 120);
  v83 = v58;
  v84 = v63;
  v65 = *(_QWORD *)(a2 + 136);
  v82 = *(_QWORD *)(a2 + 128);
  v66 = v82;
  v89 = v60;
  v90 = v65;
  v92 = *(_QWORD *)(a2 + 144);
  LODWORD(v91) = *(unsigned __int8 *)(a2 + 152);
  v67 = *(_BYTE *)(a2 + 56);
  type metadata accessor for JSONDecoderImpl();
  a2 = swift_allocObject();
  *(_QWORD *)(a2 + 160) = v44;
  v68 = v93;
  *(_QWORD *)(a2 + 24) = v94;
  *(_QWORD *)(a2 + 32) = v68;
  v69 = v57;
  *(_QWORD *)(a2 + 40) = v57;
  *(_QWORD *)(a2 + 48) = v56;
  v70 = v56;
  v71 = v67;
  *(_BYTE *)(a2 + 56) = v67;
  v73 = v83;
  v72 = v84;
  *(_QWORD *)(a2 + 64) = v83;
  *(_QWORD *)(a2 + 72) = v59;
  v74 = (uint64_t)v89;
  *(_QWORD *)(a2 + 80) = v61;
  *(_QWORD *)(a2 + 88) = v74;
  v75 = v85;
  *(_QWORD *)(a2 + 96) = v62;
  *(_QWORD *)(a2 + 104) = v75;
  *(_QWORD *)(a2 + 112) = v64;
  *(_QWORD *)(a2 + 120) = v72;
  *(_QWORD *)(a2 + 128) = v66;
  v76 = v92;
  *(_QWORD *)(a2 + 136) = v90;
  *(_QWORD *)(a2 + 144) = v76;
  *(_BYTE *)(a2 + 152) = v91;
  outlined copy of JSONEncoder.DateEncodingStrategy(v69, v70, v71);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v73);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v61, v74);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v82);
  swift_bridgeObjectRetain();
  v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v25 = v54[2];
  v55 = v54[3];
  v53 = v25 + 1;
  if (v25 >= v55 >> 1)
LABEL_17:
    v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v55 > 1), v53, 1, v54);
  v78 = v87;
  v77 = v88;
  v79 = v86;
  v54[2] = v53;
  v80 = &v54[3 * v25];
  v80[4] = v77;
  v80[5] = v78;
  *((_BYTE *)v80 + 48) = v79;
  *(_QWORD *)(a2 + 16) = v54;
  return a2;
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

void JSONDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD v27[2];
  __int128 v28;
  _QWORD *v29;
  _BYTE v30[56];
  _BYTE v31[56];
  id v32;

  static JSONDecoder.withUTF8Representation<A>(of:_:)(a2, a3);
  if (!v3)
    return;
  v32 = v3;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {

    swift_willThrow();
    return;
  }

  outlined init with take of JSONError((uint64_t)v30, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(inited + 40) = v6;
  JSONError.debugDescription.getter();
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)v27, &demangling cache variable for type metadata for (String, Any));
  v10 = v27[0];
  v11 = v27[1];
  swift_retain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v13 & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v9[(v12 >> 6) + 8] |= 1 << v12;
  v14 = (uint64_t *)(v9[6] + 16 * v12);
  *v14 = v10;
  v14[1] = v11;
  outlined init with take of Any(&v28, (_OWORD *)(v9[7] + 32 * v12));
  v15 = v9[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
LABEL_11:
    __break(1u);
    return;
  }
  v9[2] = v17;
  swift_release();
  swift_bridgeObjectRelease();
  v29 = v9;
  JSONError.sourceLocation.getter();
  if ((v19 & 1) == 0)
  {
    *((_QWORD *)&v28 + 1) = MEMORY[0x1E0DEB418];
    v27[0] = v18;
    specialized Dictionary.subscript.setter((uint64_t)v27, 0xD00000000000001DLL, 0x8000000182306D20);
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v20 = objc_allocWithZone((Class)NSError);
  v21 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v20, sel_initWithDomain_code_userInfo_, v21, 3840, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  outlined release of JSONError((uint64_t)v31);
  v23 = type metadata accessor for DecodingError();
  swift_allocError();
  v25 = v24;
  v26 = v22;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x1E0DEC458], v23);
  swift_willThrow();

}

uint64_t Data.InlineSlice.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (int)a3;
  if (a3 >> 32 >= (int)a3)
    return __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a3, a3 >> 32, a1);
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in Data.withBufferView<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in Data.withBufferView<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 24));
}

uint64_t closure #1 in Data.withBufferView<A>(_:)(uint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  if (result)
  {
    if (a2 - result >= 0)
      return a3();
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)(a1, a2, *(_QWORD *)(v2 + 24), *(uint64_t (**)(unsigned __int8 *, uint64_t))(v2 + 32));
}

uint64_t closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned __int8 *, uint64_t))
{
  int v6;
  _BOOL4 v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  char v19;
  int v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  int v27;
  int v28;
  char v29;
  char v30;

  if (a3 < 1)
  {
    v11 = 0;
    goto LABEL_5;
  }
  v6 = *a1;
  v7 = a3 == 1;
  if (a3 == 1)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
LABEL_13:
    v14 = 0;
    v15 = 0;
    goto LABEL_21;
  }
  v10 = a1[1];
  if ((unint64_t)a3 < 3)
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_13;
  }
  v14 = a1[2];
  if (a3 == 3)
  {
    v8 = 0;
    v15 = 0;
    v9 = 1;
  }
  else
  {
    v8 = a1[3];
    v9 = 1;
    v15 = 1;
    if (!*a1 && !a1[1] && v14 == 254 && v8 == 255)
    {
      v11 = 4;
LABEL_19:
      v16 = 2550137088;
      goto LABEL_43;
    }
  }
LABEL_21:
  v17 = a3 != 1 && v6 == 254;
  v18 = v17 && v10 == 255;
  v19 = v18;
  if (v18)
    v20 = v9;
  else
    v20 = 0;
  if (v14)
    v20 = 0;
  v17 = (v15 & v20 & (v8 == 0)) == 0;
  v11 = 2;
  if (v17)
  {
    v16 = 2415919360;
  }
  else
  {
    v11 = 4;
    v16 = 2617245952;
  }
  if ((v19 & 1) != 0)
    goto LABEL_43;
  v16 = 2483028224;
  if (a3 != 1 && v6 == 255 && v10 == 254)
  {
    v11 = 2;
    goto LABEL_43;
  }
  if (a3 != 1 && v6 == 239 && v10 == 187)
    v27 = v9;
  else
    v27 = 0;
  if (v27 == 1 && v14 == 191)
  {
    v11 = 3;
    goto LABEL_5;
  }
  if (*a1)
    v28 = 0;
  else
    v28 = v15;
  if (v28 == 1)
  {
    if (a3 == 1)
    {
      v6 = 0;
      v15 = 1;
      goto LABEL_76;
    }
    v30 = v9 ^ 1;
    if (v10)
      v30 = 1;
    if ((v30 & 1) == 0)
    {
      v10 = 0;
      if (!v14)
      {
        if (v8)
        {
          v11 = 0;
          goto LABEL_19;
        }
      }
    }
    if (v9)
    {
      if (!v14 && v10 && v8)
        goto LABEL_97;
      v6 = 0;
      if (v10)
      {
        v7 = 0;
        goto LABEL_102;
      }
LABEL_70:
      v29 = v15 ^ 1;
      v10 = 0;
      if (v14)
        v29 = 1;
      if ((v29 & 1) != 0)
      {
        v7 = 0;
      }
      else
      {
        v15 = 1;
        v14 = 0;
        v7 = 0;
        if (!v8 && v6)
        {
          v11 = 0;
          v16 = 2617245952;
          goto LABEL_43;
        }
      }
LABEL_102:
      v11 = 0;
      if (v7)
        goto LABEL_5;
      if (v10)
        goto LABEL_5;
      if (!v15)
        goto LABEL_5;
      v11 = 0;
      if (v8 || !v6 || !v14)
        goto LABEL_5;
LABEL_43:
      if (v11 >= a2)
        v21 = a2;
      else
        v21 = v11;
      v22 = specialized String.init<A>(bytes:encoding:)((char *)&a1[v21], a2 - v21, v16);
      if (v23)
      {
        MEMORY[0x1E0C80A78](v22);
        specialized String.withUTF8<A>(_:)((uint64_t (*)(_QWORD *, uint64_t))partial apply for closure #1 in closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:));
        return swift_bridgeObjectRelease();
      }
      else
      {
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_OWORD *)(v24 + 32) = 0u;
        *(_BYTE *)(v24 + 48) = 12;
        return swift_willThrow();
      }
    }
    v6 = 0;
LABEL_92:
    LOBYTE(v7) = 0;
    goto LABEL_93;
  }
  if (a3 != 1 && !v10)
  {
    if (v9)
      goto LABEL_70;
    v10 = 0;
    goto LABEL_92;
  }
LABEL_76:
  if (v9)
    goto LABEL_102;
LABEL_93:
  v11 = 0;
  if ((v15 & 1) == 0 && !v7)
  {
    if (!v6 && v10)
    {
LABEL_97:
      v11 = 0;
      v16 = 2415919360;
      goto LABEL_43;
    }
    v11 = 0;
    if (!v10 && v6)
      goto LABEL_43;
  }
LABEL_5:
  if (v11 >= a2)
    v12 = a2;
  else
    v12 = v11;
  return a4(&a1[v12], a2 - v12);
}

uint64_t partial apply for closure #1 in JSONDecoder._decode<A>(_:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in JSONDecoder._decode<A>(_:from:)(a1, a2, *(_QWORD *)(v2 + 24), *(void (**)(uint64_t))(v2 + 32));
}

uint64_t closure #1 in JSONDecoder._decode<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);

  if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 224))() & 1) != 0)
  {
    (*(uint64_t (**)(void))(*(_QWORD *)a3 + 248))();
    v7 = JSON5Scanner.scan()();
  }
  else
  {
    (*(uint64_t (**)(void))(*(_QWORD *)a3 + 248))();
    JSONScanner.scan()();
  }
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if (!v4)
  {
    v39 = a4;
    result = JSONMap.loadValue(at:)(0);
    v37 = v10;
    v38 = result;
    v36 = v11;
    if (v11 > 0xFDu)
    {
      __break(1u);
    }
    else
    {
      v12 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 200))();
      v13 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 8);
      v26 = *(void **)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options);
      v27 = v12;
      v14 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 24);
      v15 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 32);
      v30 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 48);
      v31 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 40);
      v16 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 72);
      v28 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 64);
      v29 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 56);
      v17 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 80);
      v32 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 96);
      v33 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
      v34 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 104);
      v35 = *(_BYTE *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 112);
      v18 = *(_BYTE *)(a3 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 16);
      type metadata accessor for JSONDecoderImpl();
      v19 = swift_allocObject();
      v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v19 + 16) = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v19 + 24) = v27;
      *(_QWORD *)(v19 + 160) = 0x8000000000000000;
      *(_QWORD *)(v19 + 32) = v8;
      *(_QWORD *)(v19 + 40) = v26;
      *(_QWORD *)(v19 + 48) = v13;
      *(_BYTE *)(v19 + 56) = v18;
      *(_QWORD *)(v19 + 64) = v14;
      *(_QWORD *)(v19 + 72) = v15;
      *(_QWORD *)(v19 + 80) = v31;
      *(_QWORD *)(v19 + 88) = v30;
      *(_QWORD *)(v19 + 96) = v29;
      *(_QWORD *)(v19 + 104) = v28;
      *(_QWORD *)(v19 + 112) = v16;
      *(_QWORD *)(v19 + 120) = v17;
      *(_QWORD *)(v19 + 128) = v33;
      *(_QWORD *)(v19 + 136) = v32;
      *(_QWORD *)(v19 + 144) = v34;
      *(_BYTE *)(v19 + 152) = v35;
      outlined copy of JSONEncoder.DateEncodingStrategy(v26, v13, v18);
      outlined copy of JSONEncoder.KeyEncodingStrategy(v14);
      outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v31, v30);
      outlined copy of JSONEncoder.KeyEncodingStrategy(v33);
      swift_bridgeObjectRetain();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v19 + 16) = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        *(_QWORD *)(v19 + 16) = v20;
      }
      v23 = v20[2];
      v22 = v20[3];
      if (v23 >= v22 >> 1)
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
      v20[2] = v23 + 1;
      v24 = &v20[3 * v23];
      v24[4] = v38;
      v24[5] = v37;
      *((_BYTE *)v24 + 48) = v36;
      *(_QWORD *)(v19 + 16) = v20;
      v39(v19);
      swift_release();
      v25 = swift_isUniquelyReferenced_nonNull_native();
      swift_retain();
      JSONDecoderImpl.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(v25);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

id outlined copy of JSONEncoder.DateEncodingStrategy(id result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return (id)swift_retain();
  if (!a3)
    return result;
  return result;
}

void JSONScanner.scan()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  unsigned __int8 *v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(_BYTE *)v0 == 1)
  {
    v2 = *(unsigned __int8 **)(v0 + 24);
    v3 = *(_QWORD *)(v0 + 32);
    if ((unint64_t)v2 >= v3)
      goto LABEL_12;
    while (1)
    {
      v4 = *v2;
      if (v4 >= 0x40)
        break;
      if (((1 << v4) & 0x100002600) != 0)
      {
        *(_QWORD *)(v0 + 24) = ++v2;
        if ((unint64_t)v2 < v3)
          continue;
      }
      goto LABEL_12;
    }
    if (v4 == 123)
    {
      JSONScanner.scanObject()();
      v6 = v7;
      if (v7)
        return;
    }
    else
    {
LABEL_12:
      JSONScanner.scanObject(withoutBraces:)(1);
      v6 = v8;
      if (v8)
        return;
    }
  }
  else
  {
    JSONScanner.scanValue()();
    v6 = v5;
    if (v5)
      return;
  }
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(v0 + 32);
  if (v9 < v10)
  {
    v11 = 0;
    while (1)
    {
      v12 = *(unsigned __int8 *)(v9 + v11);
      if (v12 > 0x20 || ((1 << v12) & 0x100002600) == 0)
      {
        v22 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v9 + v11, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
        v24 = v23;
        v26 = v25;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v27 = 0xD000000000000015;
        *(_QWORD *)(v27 + 8) = 0x8000000182307210;
        *(_QWORD *)(v27 + 16) = v12;
        *(_QWORD *)(v27 + 24) = v22;
        *(_QWORD *)(v27 + 32) = v24;
        *(_QWORD *)(v27 + 40) = v26;
        *(_BYTE *)(v27 + 48) = 1;
        swift_willThrow();
        return;
      }
      if (__OFADD__(v11, 1))
        break;
      v14 = v9 + ++v11;
      if (v14 >= v10)
        goto LABEL_22;
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_22:
  v15 = *(_QWORD *)(v0 + 48);
  v17 = *(_QWORD *)(v0 + 8);
  v16 = *(_QWORD *)(v0 + 16);
  type metadata accessor for JSONMap();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<(buffer: BufferView<UInt8>, allocation: UnsafeRawPointer?)>._Buffer);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 24) = v16;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v18 + 24) = v19;
  *(_DWORD *)(v19 + 40) = 0;
  v1 = (os_unfair_lock_s *)(v19 + 40);
  *(_QWORD *)(v19 + 16) = v17;
  v20 = v19 + 16;
  swift_bridgeObjectRetain();
  JSONMap.loadValue(at:)(0);
  if (v21 > 0xFDu)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((v21 & 0xE0) == 0x20)
  {
    os_unfair_lock_lock(v1);
    closure #1 in XMLPlistMap.copyInBuffer()(v20);
    if (v6)
    {
LABEL_30:
      os_unfair_lock_unlock(v1);
      __break(1u);
      return;
    }
    os_unfair_lock_unlock(v1);
  }
}

_QWORD *JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(unsigned __int8 a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  int64_t v10;
  _QWORD *result;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(a2, a3, a4);
  v8 = *(_QWORD **)v4;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v10 = v9 + 4;
  if (__OFADD__(v9, 4))
  {
    __break(1u);
LABEL_17:
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v9, 1, v8);
    v8 = result;
    v7 = result[3];
    v12 = v7 >> 1;
    goto LABEL_9;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (v7 = v8[3], v12 = v7 >> 1, (uint64_t)(v7 >> 1) < v10))
  {
    if (v9 <= v10)
      v13 = v9 + 4;
    else
      v13 = v9;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v8);
    v8 = result;
    v7 = result[3];
    v12 = v7 >> 1;
  }
  v5 = v8[2];
  v9 = v5 + 1;
  if (v12 <= v5)
    goto LABEL_17;
LABEL_9:
  v8[2] = v9;
  v8[v5 + 4] = a1;
  if ((uint64_t)v12 < (uint64_t)(v5 + 2))
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v5 + 2, 1, v8);
    v8 = result;
  }
  v8[2] = v5 + 2;
  v8[v9 + 4] = v10;
  v15 = v8[2];
  v14 = v8[3];
  v16 = v14 >> 1;
  v17 = v15 + 1;
  if (v14 >> 1 <= v15)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v8);
    v8 = result;
    v14 = result[3];
    v16 = v14 >> 1;
  }
  v8[2] = v17;
  v8[v15 + 4] = 0;
  v18 = v15 + 2;
  if (v16 < v18)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v18, 1, v8);
    v8 = result;
  }
  v8[2] = v18;
  v8[v17 + 4] = 7;
  *(_QWORD *)v4 = v8;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanArray()()
{
  _QWORD *v0;
  _QWORD *v1;
  int64_t v2;
  int64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int64_t *v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = v1[3];
  v6 = v1[4];
  if (v6 == v5)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  v0 = v1;
  v4 = v5 + 1;
  v7 = *(unsigned __int8 *)v5;
  v1[3] = v5 + 1;
  if (v7 != 91)
    goto LABEL_70;
  v8 = v1[5];
  if (v8 > 511)
  {
    v11 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v5 + 2, v1[1], v1[2]);
    v13 = v12;
    v15 = v14;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v16 = v11;
    *(_QWORD *)(v16 + 8) = v13;
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = 0;
    *(_BYTE *)(v16 + 48) = 2;
    swift_willThrow();
    return;
  }
  v1[5] = v8 + 1;
  if (v4 >= v6)
  {
LABEL_8:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v10 = 1;
    *(_OWORD *)(v10 + 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_QWORD *)(v10 + 40) = 0;
    *(_BYTE *)(v10 + 48) = 12;
    swift_willThrow();
LABEL_48:
    --v1[5];
    return;
  }
  while (1)
  {
    v9 = *(unsigned __int8 *)v4;
    if (v9 >= 0x40 || ((0x100002600uLL >> v9) & 1) == 0)
      break;
    v1[3] = ++v4;
    if (v4 >= v6)
      goto LABEL_8;
  }
  if (v9 == 93)
  {
    v1[3] = v4 + 1;
    JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(6u, (_QWORD *)v1[1], v1[2], v4 + 1);
    goto LABEL_48;
  }
  v17 = v9 > 0x20;
  v18 = (1 << v9) & 0x100002600;
  if (!v17 && v18 != 0)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v3 = (int64_t)(v1 + 6);
  v2 = JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)(6u, (_QWORD *)v1[1], v1[2], v4);
  if (v4 >= v6)
  {
    v6 = 0;
LABEL_50:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v27 = 1;
    *(_OWORD *)(v27 + 8) = 0u;
    *(_OWORD *)(v27 + 24) = 0u;
    *(_QWORD *)(v27 + 40) = 0;
    v28 = 12;
    goto LABEL_51;
  }
  v6 = 0;
  while (2)
  {
    while (1)
    {
      v20 = *(unsigned __int8 *)v4;
      if (v20 >= 0x40 || ((0x100002600uLL >> v20) & 1) == 0)
        break;
      v22 = v0[4];
      v4 = v0[3] + 1;
      v0[3] = v4;
      if (v4 >= v22)
        goto LABEL_50;
    }
    switch(*(_BYTE *)v4)
    {
      case '[':
        v1 = v0;
        JSONScanner.scanArray()();
        goto LABEL_32;
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        goto LABEL_26;
      case 'f':
      case 't':
        v1 = v0;
        JSONScanner.scanBool()();
        goto LABEL_32;
      case 'n':
        v1 = v0;
        JSONScanner.scanNull()();
        goto LABEL_32;
      case '{':
        v1 = v0;
        JSONScanner.scanObject()();
        goto LABEL_32;
      default:
        if ((_DWORD)v20 == 34)
        {
          v1 = v0;
          JSONScanner.scanString()();
LABEL_32:
          if (v21)
            goto LABEL_53;
          if (__OFADD__(v6++, 1))
            goto LABEL_71;
          v4 = v0[3];
          v24 = v0[4];
          while (1)
          {
            if (v4 >= v24)
              goto LABEL_50;
            v25 = *(unsigned __int8 *)v4;
            if (v25 >= 0x40 || ((0x100002600uLL >> v25) & 1) == 0)
              break;
            v0[3] = ++v4;
          }
          if ((_DWORD)v25 != 44)
          {
            if ((_DWORD)v25 == 93)
            {
LABEL_65:
              v31 = v4 + 1;
              v0[3] = v4 + 1;
              v29 = (_QWORD *)v0[1];
              v30 = v0[2];
            }
            else
            {
              if (v25 <= 0x20 && ((1 << v25) & 0x100002600) != 0)
              {
                __break(1u);
                goto LABEL_73;
              }
              v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v4, v0[1], v0[2]);
              v36 = v35;
              v38 = v37;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(_OWORD *)v39 = xmmword_18206BE30;
              *(_QWORD *)(v39 + 16) = v25;
              *(_QWORD *)(v39 + 24) = v34;
              *(_QWORD *)(v39 + 32) = v36;
              *(_QWORD *)(v39 + 40) = v38;
              *(_BYTE *)(v39 + 48) = 1;
LABEL_52:
              swift_willThrow();
LABEL_53:
              v29 = (_QWORD *)v0[1];
              v30 = v0[2];
              v31 = v0[3];
            }
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v29, v30, v31);
            v1 = (_QWORD *)v0[6];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
            v4 = v1[2];
            v5 = v1[3];
            v3 = v4 + 1;
            if (v4 < v5 >> 1)
            {
LABEL_57:
              v1[2] = v3;
              v1[v4 + 4] = 7;
              v32 = &v1[v2 + 4];
              *v32 = v3;
              v32[1] = v6;
              --v0[5];
              v0[6] = v1;
              return;
            }
LABEL_72:
            v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v3, 1, v1);
            goto LABEL_57;
          }
          while (1)
          {
            v0[3] = ++v4;
            if (v4 >= v24)
              goto LABEL_50;
            v26 = *(unsigned __int8 *)v4;
            if (v26 >= 0x40)
              break;
            if (((0x100002600uLL >> v26) & 1) == 0)
              goto LABEL_45;
          }
          if (v26 == 93)
            goto LABEL_65;
LABEL_45:
          if (v4 >= v24)
            goto LABEL_50;
          continue;
        }
        if ((_DWORD)v20 == 45)
        {
LABEL_27:
          v1 = v0;
          JSONScanner.scanNumber()();
          goto LABEL_32;
        }
LABEL_26:
        if ((v20 - 58) >= 0xFFFFFFF6)
          goto LABEL_27;
        if (v20 > 0x20 || ((1 << v20) & 0x100002600) == 0)
        {
          v40 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v0[3], v0[1], v0[2]);
          v42 = v41;
          v44 = v43;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v27 = 0;
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v27 + 16) = v20;
          *(_QWORD *)(v27 + 24) = v40;
          *(_QWORD *)(v27 + 32) = v42;
          *(_QWORD *)(v27 + 40) = v44;
          v28 = 1;
LABEL_51:
          *(_BYTE *)(v27 + 48) = v28;
          goto LABEL_52;
        }
LABEL_74:
        __break(1u);
        return;
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanObject()()
{
  _QWORD *v0;
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (unsigned __int8 *)v0[3];
  if ((unsigned __int8 *)v0[4] == v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = *v1;
  v0[3] = v1 + 1;
  if (v2 != 123)
  {
LABEL_7:
    __break(1u);
    return;
  }
  if ((uint64_t)v0[5] > 511)
  {
    v3 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v1, v0[1], v0[2]);
    v5 = v4;
    v7 = v6;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v8 = v3;
    *(_QWORD *)(v8 + 8) = v5;
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    *(_BYTE *)(v8 + 48) = 2;
    swift_willThrow();
  }
  else
  {
    JSONScanner.scanObject(withoutBraces:)(0);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanObject(withoutBraces:)(Swift::Bool withoutBraces)
{
  _QWORD *v1;
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  Swift::Int v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  Swift::Int v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  Swift::Bool done;
  Swift::Int count;

  v2 = v1;
  ++v1[5];
  v4 = (unsigned __int8 *)v1[3];
  v5 = v1[4];
  if ((unint64_t)v4 < v5)
  {
    while (1)
    {
      v6 = *v4;
      if (v6 >= 0x40)
        break;
      if (((1 << v6) & 0x100002600) == 0)
        goto LABEL_11;
      v1[3] = ++v4;
      if ((unint64_t)v4 >= v5)
        goto LABEL_5;
    }
    if (v6 != 125)
    {
LABEL_11:
      count = 0;
      v14 = v1 + 6;
      v15 = JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)(5u, (_QWORD *)v1[1], v1[2], (uint64_t)v4);
      done = 0;
      while (1)
      {
        JSONScanner._scanObjectLoop(withoutBraces:count:done:)(withoutBraces, &count, &done);
        if (v16)
          break;
        if (done)
        {
          v17 = count;
          JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((_QWORD *)v1[1], v1[2], v1[3]);
          v18 = (_QWORD *)v1[6];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
          v20 = v18[2];
          v19 = v18[3];
          v21 = v20 + 1;
          if (v20 >= v19 >> 1)
            v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
          v18[2] = v21;
          v18[v20 + 4] = 7;
          v22 = &v18[v15 + 4];
          *v22 = v21;
          v22[1] = v17;
          v23 = v2[5] - 1;
          v2[6] = v18;
          goto LABEL_27;
        }
      }
      v24 = count;
      JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((_QWORD *)v1[1], v1[2], v1[3]);
      v25 = (_QWORD *)v1[6];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      v26 = v25[2];
      v27 = v25[3];
      v28 = v26 + 1;
      if (v26 >= v27 >> 1)
      {
        v30 = v25;
        v31 = v25[2];
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v26 + 1, 1, v30);
        v26 = v31;
        v25 = v32;
      }
      v25[2] = v28;
      v25[v26 + 4] = 7;
      v29 = &v25[v15 + 4];
      *v29 = v28;
      v29[1] = v24;
      *v14 = v25;
      goto LABEL_26;
    }
    if (withoutBraces)
    {
      v9 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v4, v1[1], v1[2]);
      v11 = v10;
      v13 = v12;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 125;
      *(_QWORD *)(v7 + 24) = v9;
      *(_QWORD *)(v7 + 32) = v11;
      *(_QWORD *)(v7 + 40) = v13;
      v8 = 1;
      goto LABEL_10;
    }
    v1[3] = ++v4;
    goto LABEL_25;
  }
LABEL_5:
  if (withoutBraces)
  {
LABEL_25:
    JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(5u, (_QWORD *)v1[1], v1[2], (uint64_t)v4);
    goto LABEL_26;
  }
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(_QWORD *)v7 = 1;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_QWORD *)(v7 + 40) = 0;
  v8 = 12;
LABEL_10:
  *(_BYTE *)(v7 + 48) = v8;
  swift_willThrow();
LABEL_26:
  v23 = v2[5] - 1;
LABEL_27:
  v2[5] = v23;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner._scanObjectLoop(withoutBraces:count:done:)(Swift::Bool withoutBraces, Swift::Int *count, Swift::Bool *done)
{
  _QWORD *v3;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  JSONScanner.scanString()();
  if (!v7)
  {
    v8 = (unsigned __int8 *)v3[3];
    v9 = v3[4];
    if ((unint64_t)v8 >= v9)
    {
LABEL_6:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v11 = 1;
      *(_OWORD *)(v11 + 8) = 0u;
      *(_OWORD *)(v11 + 24) = 0u;
      *(_QWORD *)(v11 + 40) = 0;
      v12 = 12;
LABEL_18:
      *(_BYTE *)(v11 + 48) = v12;
      swift_willThrow();
    }
    else
    {
      while (1)
      {
        v10 = *v8;
        if (v10 >= 0x40)
          goto LABEL_16;
        if (((1 << v10) & 0x100002600) == 0)
          break;
        v3[3] = ++v8;
        if ((unint64_t)v8 >= v9)
          goto LABEL_6;
      }
      if ((_DWORD)v10 != 58)
      {
LABEL_16:
        v17 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v8, v3[1], v3[2]);
        v19 = v18;
        v21 = v20;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)v11 = xmmword_18206BE40;
        *(_QWORD *)(v11 + 16) = v10;
        goto LABEL_17;
      }
      v3[3] = v8 + 1;
      JSONScanner.scanValue()();
      if (v13)
        return;
      if (!__OFADD__(*count, 2))
      {
        *count += 2;
        v14 = (unsigned __int8 *)v3[3];
        v15 = v3[4];
        if ((unint64_t)v14 >= v15)
          goto LABEL_14;
        while (1)
        {
          v16 = *v14;
          if (v16 >= 0x40 || ((0x100002600uLL >> v16) & 1) == 0)
            break;
          v3[3] = ++v14;
          if ((unint64_t)v14 >= v15)
            goto LABEL_14;
        }
        if ((_DWORD)v16 == 125)
        {
LABEL_28:
          if (!withoutBraces)
          {
            v3[3] = v14 + 1;
LABEL_31:
            *done = 1;
            return;
          }
          v17 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v14, v3[1], v3[2]);
          v19 = v25;
          v21 = v26;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 16) = 125;
        }
        else
        {
          if ((_DWORD)v16 == 44)
          {
            while (1)
            {
              v3[3] = ++v14;
              if ((unint64_t)v14 >= v15)
                break;
              v22 = *v14;
              if (v22 >= 0x40)
              {
                if (v22 != 125)
                  return;
                goto LABEL_28;
              }
              if (((0x100002600uLL >> v22) & 1) == 0)
                return;
            }
LABEL_14:
            if (!withoutBraces)
              goto LABEL_6;
            goto LABEL_31;
          }
          v17 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v14, v3[1], v3[2]);
          v19 = v23;
          v21 = v24;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)v11 = xmmword_18206BE40;
          *(_QWORD *)(v11 + 16) = v16;
        }
LABEL_17:
        *(_QWORD *)(v11 + 24) = v17;
        *(_QWORD *)(v11 + 32) = v19;
        *(_QWORD *)(v11 + 40) = v21;
        v12 = 1;
        goto LABEL_18;
      }
      __break(1u);
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanString()()
{
  _QWORD *v0;
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;

  v9 = 0;
  v2 = JSONScanner.DocumentReader.skipUTF8StringTillNextUnescapedQuote(isSimple:)(&v9);
  if (v1)
    return;
  v3 = (unsigned __int8 *)v0[3];
  if ((unsigned __int8 *)v0[4] == v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = *v3;
  v0[3] = v3 + 1;
  if (v4 != 34)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v5 = v3 - v2;
  v6 = (unsigned __int8 *)v0[1];
  v7 = v2 - v6;
  if (v9)
    v8 = 8;
  else
    v8 = 0;
  JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(v8, v5, v7, v6, v0[2], (uint64_t)(v3 + 1));
}

_QWORD *JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v10;
  _QWORD *v11;
  int64_t v12;
  int64_t v13;
  _QWORD *result;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;

  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(a4, a5, a6);
  v11 = *(_QWORD **)v6;
  v12 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  v13 = v12 + 3;
  if (__OFADD__(v12, 3))
  {
    __break(1u);
LABEL_15:
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v12, 1, v11);
    v11 = result;
    v10 = result[3];
    v15 = v10 >> 1;
    goto LABEL_9;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (v10 = v11[3], v15 = v10 >> 1, (uint64_t)(v10 >> 1) < v13))
  {
    if (v12 <= v13)
      v16 = v12 + 3;
    else
      v16 = v12;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v16, 1, v11);
    v11 = result;
    v10 = result[3];
    v15 = v10 >> 1;
  }
  v13 = v11[2];
  v12 = v13 + 1;
  if (v15 <= v13)
    goto LABEL_15;
LABEL_9:
  v11[2] = v12;
  v11[v13 + 4] = a1;
  if ((uint64_t)v15 < v13 + 2)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v13 + 2, 1, v11);
    v11 = result;
  }
  v11[2] = v13 + 2;
  v11[v12 + 4] = a2;
  v18 = v11[2];
  v17 = v11[3];
  if (v18 >= v17 >> 1)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v11);
    v11 = result;
  }
  v11[2] = v18 + 1;
  v11[v18 + 4] = a3;
  *(_QWORD *)v6 = v11;
  return result;
}

_QWORD *JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;

  v4 = (_QWORD *)*v3;
  v5 = *(_QWORD *)(*v3 + 16);
  if (v5)
    v6 = (*(_QWORD *)(*v3 + 16) & 0x7FFLL) == 0;
  else
    v6 = 0;
  if (!v6)
    return result;
  v7 = (double)a2 / (double)(a3 - (uint64_t)result) * (double)v5;
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v8 = (uint64_t)v7;
  v9 = v3[1];
  if (!v9 || (double)v8 / (double)v9 > 1.25)
  {
    result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)result || v8 > v4[3] >> 1)
    {
      if (v5 <= v8)
        v10 = v8;
      else
        v10 = v5;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v10, 0, v4);
      v4 = result;
    }
    *v3 = v4;
    v3[1] = v8;
  }
  return result;
}

unsigned __int8 *JSONScanner.DocumentReader.skipUTF8StringTillNextUnescapedQuote(isSimple:)(_BYTE *a1)
{
  unint64_t *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned __int8 *result;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = (unsigned __int8 *)v1[2];
  v3 = (unsigned __int8 *)v1[3];
  if (v3 == v2)
    goto LABEL_22;
  v5 = *v2++;
  v4 = v5;
  v1[2] = (unint64_t)v2;
  if (v5 != 34)
  {
    v9 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v2, *v1, v1[1]);
    v2 = v10;
    v12 = v11;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = v4;
    *(_QWORD *)(v13 + 24) = v9;
    *(_QWORD *)(v13 + 32) = v2;
    *(_QWORD *)(v13 + 40) = v12;
    v14 = 1;
    goto LABEL_23;
  }
  result = (unsigned __int8 *)JSONScanner.DocumentReader.skipUTF8StringTillQuoteOrBackslashOrInvalidCharacter()();
  if (v8)
    return v2;
  if (result == 34)
  {
    *a1 = 1;
    return v2;
  }
  v15 = (unsigned __int8 *)v1[2];
  if (v15 >= v3)
  {
LABEL_22:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v13 = 1;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *(_QWORD *)(v13 + 40) = 0;
    v14 = 12;
LABEL_23:
    *(_BYTE *)(v13 + 48) = v14;
LABEL_24:
    swift_willThrow();
    return v2;
  }
  while (1)
  {
    v18 = *v15;
    if (v18 != 92)
    {
      if (v18 == 34)
      {
        *a1 = 0;
        return v2;
      }
      v16 = v15 + 1;
      v1[2] = (unint64_t)(v15 + 1);
      v17 = (unsigned __int8 *)v1[3];
      goto LABEL_11;
    }
    v17 = (unsigned __int8 *)v1[3];
    if (v17 == v15)
      break;
    v1[2] = (unint64_t)(v15 + 1);
    if (v17 == v15 + 1)
      goto LABEL_22;
    v19 = v15[1];
    v16 = v15 + 2;
    v1[2] = (unint64_t)(v15 + 2);
    if (v19 == 117)
    {
      if (v17 - v16 <= 3)
      {
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v22 = 1;
        *(_OWORD *)(v22 + 8) = 0u;
        *(_OWORD *)(v22 + 24) = 0u;
        *(_QWORD *)(v22 + 40) = 0;
        v23 = 12;
LABEL_29:
        *(_BYTE *)(v22 + 48) = v23;
        goto LABEL_24;
      }
      v20 = (unint64_t)&v16[-*v1];
      v21 = (char *)(v20 + 4);
      if (__OFADD__(v20, 4))
        goto LABEL_31;
      if ((((&v21[*v1] - (char *)v16) | v20) & 0x8000000000000000) != 0 || (uint64_t)v1[1] < (uint64_t)v21)
        goto LABEL_32;
      if ((~(((*(_DWORD *)v16 & 0x7F7F7F7F ^ 0x22222222) + 2139062143) | *(_DWORD *)v16) & 0x80808080) != 0)
      {
        v2 = (unsigned __int8 *)static String._fromUTF8Repairing(_:)();
        v25 = v24;
        v26 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v1[2], *v1, v1[1]);
        v28 = v27;
        v30 = v29;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v22 = v2;
        *(_QWORD *)(v22 + 8) = v25;
        *(_QWORD *)(v22 + 16) = v26;
        *(_QWORD *)(v22 + 24) = v28;
        *(_QWORD *)(v22 + 32) = v30;
        *(_QWORD *)(v22 + 40) = 0;
        v23 = 3;
        goto LABEL_29;
      }
      v16 = v15 + 6;
      v1[2] = (unint64_t)(v15 + 6);
    }
LABEL_11:
    v15 = v16;
    if (v16 >= v17)
      goto LABEL_22;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.DocumentReader.skipUTF8StringTillQuoteOrBackslashOrInvalidCharacter()()
{
  uint64_t v0;
  unsigned __int8 *v1;
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(unsigned __int8 **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  if ((unint64_t)v1 >= v2)
  {
LABEL_6:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v4 = 1;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_QWORD *)(v4 + 40) = 0;
    *(_BYTE *)(v4 + 48) = 12;
    swift_willThrow();
    LOBYTE(v3) = 0;
  }
  else
  {
    while (1)
    {
      v3 = *v1;
      if (v3 == 34 || v3 == 92 || v3 < 0x20)
        break;
      *(_QWORD *)(v0 + 16) = ++v1;
      if ((unint64_t)v1 >= v2)
        goto LABEL_6;
    }
  }
  return v3;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanValue()()
{
  _QWORD *v0;
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (_BYTE *)v0[3];
  v2 = v0[4];
  if ((unint64_t)v1 >= v2)
  {
LABEL_7:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v5 = 1;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_QWORD *)(v5 + 40) = 0;
    v6 = 12;
LABEL_8:
    *(_BYTE *)(v5 + 48) = v6;
    swift_willThrow();
  }
  else
  {
    while (1)
    {
      v3 = *v1;
      if (v3 >= 0x40 || ((1 << v3) & 0x100002600) == 0)
        break;
      v0[3] = ++v1;
      if ((unint64_t)v1 >= v2)
        goto LABEL_7;
    }
    switch(*v1)
    {
      case '[':
        JSONScanner.scanArray()();
        return;
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        goto LABEL_14;
      case 'f':
      case 't':
        JSONScanner.scanBool()();
        return;
      case 'n':
        JSONScanner.scanNull()();
        return;
      case '{':
        JSONScanner.scanObject()();
        return;
      default:
        if ((_DWORD)v3 == 34)
        {
          JSONScanner.scanString()();
          return;
        }
        if ((_DWORD)v3 == 45)
          goto LABEL_18;
LABEL_14:
        if ((v3 - 58) >= 0xFFFFFFF6)
        {
LABEL_18:
          JSONScanner.scanNumber()();
          return;
        }
        if (v3 > 0x20 || ((1 << v3) & 0x100002600) == 0)
        {
          v7 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v1, v0[1], v0[2]);
          v9 = v8;
          v11 = v10;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_QWORD *)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
          *(_QWORD *)(v5 + 16) = v3;
          *(_QWORD *)(v5 + 24) = v7;
          *(_QWORD *)(v5 + 32) = v9;
          *(_QWORD *)(v5 + 40) = v11;
          v6 = 1;
          goto LABEL_8;
        }
        __break(1u);
        break;
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanNumber()()
{
  _QWORD *v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  char v6;
  int v7;
  unsigned int v8;
  unsigned __int8 v9;

  v1 = (unsigned __int8 *)v0[3];
  v2 = (unsigned __int8 *)v0[4];
  if (v2 == v1)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    return;
  }
  v3 = v1 + 1;
  v4 = *v1;
  v0[3] = v1 + 1;
  if (v4 != 45 && (v4 - 58) < 0xFFFFFFF6)
    goto LABEL_21;
  if (v3 >= v2)
  {
LABEL_18:
    v9 = 1;
  }
  else
  {
    v6 = 0;
    while (1)
    {
      while (1)
      {
        v7 = *v3;
        if ((v7 - 58) <= 0xFFFFFFF5)
        {
          v8 = v7 - 43;
          if (v8 > 0x3A)
            goto LABEL_16;
          if (((1 << v8) & 0xD) == 0)
            break;
        }
        v0[3] = ++v3;
        if (v3 >= v2)
          goto LABEL_16;
      }
      if (((1 << v8) & 0x400000004000000) == 0)
        break;
      v0[3] = ++v3;
      v6 = 1;
      if (v3 >= v2)
        goto LABEL_17;
    }
LABEL_16:
    if ((v6 & 1) == 0)
      goto LABEL_18;
LABEL_17:
    v9 = 9;
  }
  JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(v9, v3 - v1, (uint64_t)&v1[-v0[1]], (_QWORD *)v0[1], v0[2], (uint64_t)v3);
}

int64_t JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)(unsigned __int8 a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v4;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v18;

  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(a2, a3, a4);
  v6 = *v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v8 = v6[2];
  v7 = v6[3];
  v9 = v8 + 1;
  if (v8 >= v7 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
  v6[2] = v9;
  v6[v8 + 4] = a1;
  v10 = v8 + 3;
  if (__OFADD__(v8, 3))
  {
    __break(1u);
  }
  else
  {
    v11 = v6[3];
    v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) >= v10)
    {
      v13 = v8 + 1;
      goto LABEL_8;
    }
  }
  if (v9 <= v10)
    v18 = v8 + 3;
  else
    v18 = v8 + 1;
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, v18, 1, v6);
  v13 = v6[2];
  v11 = v6[3];
  v12 = v11 >> 1;
LABEL_8:
  v14 = v13 + 1;
  if (v12 <= v13)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v13 + 1, 1, v6);
  v6[2] = v14;
  v6[v13 + 4] = 0;
  v15 = v6[3];
  v16 = v13 + 2;
  if (v16 > (uint64_t)(v15 >> 1))
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16, 1, v6);
  v6[2] = v16;
  v6[v14 + 4] = 0;
  *v4 = v6;
  return v9;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanBool()()
{
  uint64_t *v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  unsigned __int8 *v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v1 = (unsigned __int8 *)v0[3];
  v2 = (unsigned __int8 *)v0[4];
  if (v2 != v1)
  {
    v3 = v0;
    v4 = v1 + 1;
    v5 = *v1;
    v0[3] = (uint64_t)(v1 + 1);
    if (v5 == 116)
    {
      if (v2 >= v4)
      {
        if (v2 - v4 > 2)
        {
          v6 = *(_WORD *)v4 == 30066 && v1[3] == 101;
          if (v6)
          {
            v0[3] = (uint64_t)(v1 + 4);
            v11 = (_QWORD *)v0[1];
            v12 = v0[2];
            v0 += 6;
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v11, v12, (uint64_t)(v1 + 4));
            v3 = (uint64_t *)v3[6];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
LABEL_26:
              v14 = v3[2];
              v13 = v3[3];
              v15 = v14 + 1;
              if (v14 >= v13 >> 1)
              {
                v34 = v14 + 1;
                v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v3);
                v15 = v34;
                v3 = v30;
              }
              v3[2] = v15;
              v16 = &v3[v14];
              v17 = 3;
LABEL_34:
              v16[4] = v17;
              *v0 = (uint64_t)v3;
              return;
            }
LABEL_51:
            v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
            goto LABEL_26;
          }
          if ((((v0[1] + v0[2] - (_QWORD)v2) | (unint64_t)&v4[-v0[1]]) & 0x8000000000000000) == 0)
          {
            if (*v4 == 114)
            {
              if (v1[2] == 117)
                v7 = 2 * (v1[3] != 101);
              else
                v7 = 1;
            }
            else
            {
              v7 = 0;
            }
            v23 = &v4[v7];
            v0[3] = (uint64_t)&v4[v7];
            v32 = 0;
            v33 = 0xE000000000000000;
            _StringGuts.grow(_:)(20);
            swift_bridgeObjectRelease();
            v4 = (unsigned __int8 *)v0[4];
            if (v23 < v4)
              goto LABEL_43;
            __break(1u);
            goto LABEL_40;
          }
          goto LABEL_48;
        }
LABEL_16:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v8 = 1;
        *(_OWORD *)(v8 + 8) = 0u;
        *(_OWORD *)(v8 + 24) = 0u;
        *(_QWORD *)(v8 + 40) = 0;
        v9 = 12;
LABEL_44:
        *(_BYTE *)(v8 + 48) = v9;
        swift_willThrow();
        return;
      }
      __break(1u);
    }
    else if (v5 == 102)
    {
      if (v2 >= v4)
      {
        if (v2 - v4 >= 4)
        {
          if (*(_DWORD *)v4 == 1702063201)
          {
            v0[3] = (uint64_t)(v1 + 5);
            v18 = (_QWORD *)v0[1];
            v19 = v0[2];
            v0 += 6;
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v18, v19, (uint64_t)(v1 + 5));
            v3 = (uint64_t *)v3[6];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
            v21 = v3[2];
            v20 = v3[3];
            v22 = v21 + 1;
            if (v21 >= v20 >> 1)
            {
              v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v3);
              v22 = v21 + 1;
              v3 = v31;
            }
            v3[2] = v22;
            v16 = &v3[v21];
            v17 = 4;
            goto LABEL_34;
          }
          if ((((v0[1] + v0[2] - (_QWORD)v2) | (unint64_t)&v4[-v0[1]]) & 0x8000000000000000) == 0)
          {
            if (*v4 != 97)
            {
              v10 = 0;
              goto LABEL_42;
            }
            if (v1[2] == 108)
            {
              if (v1[3] == 115)
              {
                v6 = v1[4] == 101;
                v10 = 3;
                if (v6)
                  v10 = 0;
              }
              else
              {
                v10 = 2;
              }
LABEL_42:
              v23 = &v4[v10];
              v0[3] = (uint64_t)&v4[v10];
              v32 = 0;
              v33 = 0xE000000000000000;
              v0 = &v32;
              _StringGuts.grow(_:)(20);
              swift_bridgeObjectRelease();
              if ((unint64_t)v23 < v3[4])
              {
LABEL_43:
                v24 = *v23;
                v25 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v23, v3[1], v3[2]);
                v27 = v26;
                v29 = v28;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(_QWORD *)v8 = 0xD000000000000019;
                *(_QWORD *)(v8 + 8) = 0x8000000182307260;
                *(_QWORD *)(v8 + 16) = v24;
                *(_QWORD *)(v8 + 24) = v25;
                *(_QWORD *)(v8 + 32) = v27;
                *(_QWORD *)(v8 + 40) = v29;
                v9 = 1;
                goto LABEL_44;
              }
              goto LABEL_50;
            }
LABEL_40:
            v10 = 1;
            goto LABEL_42;
          }
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        goto LABEL_16;
      }
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    __break(1u);
    goto LABEL_47;
  }
  __break(1u);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CFRange>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[UInt8]>, (uint64_t *)&demangling cache variable for type metadata for [UInt8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeMutablePointer<Int8>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<BPlistMap.Value>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<XMLPlistMap.Value>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[UDateFormatField]>, &demangling cache variable for type metadata for [UDateFormatField]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<String.Encoding>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Range<AttributedString.Index>, NSInflectionRule)>, &demangling cache variable for type metadata for (Range<AttributedString.Index>, NSInflectionRule));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Range<AttributedString.Index>, NSLocalizedNumberFormatRule)>, &demangling cache variable for type metadata for (Range<AttributedString.Index>, NSLocalizedNumberFormatRule));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanNull()()
{
  _QWORD *v0;
  _QWORD *v1;
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[2];
  unint64_t v21;

  v2 = (_BYTE *)v0[3];
  v3 = v0[4];
  if (v3 < (unint64_t)v2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if ((uint64_t)(v3 - (_QWORD)v2) <= 3)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v4 = 1;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_QWORD *)(v4 + 40) = 0;
    v5 = 12;
LABEL_21:
    *(_BYTE *)(v4 + 48) = v5;
    swift_willThrow();
    return;
  }
  v1 = v0;
  if (*(_DWORD *)v2 != 1819047278)
  {
    if ((((v0[1] + v0[2] - v3) | (unint64_t)&v2[-v0[1]]) & 0x8000000000000000) == 0)
    {
      if (*v2 == 110)
      {
        if (v2[1] == 117)
        {
          if (v2[2] == 108)
          {
            v6 = 3;
            if (v2[3] == 108)
              v6 = 0;
          }
          else
          {
            v6 = 2;
          }
        }
        else
        {
          v6 = 1;
        }
      }
      else
      {
        v6 = 0;
      }
      v12 = &v2[v6];
      v0[3] = &v2[v6];
      v20[0] = 0;
      v20[1] = 0xE000000000000000;
      v0 = v20;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      if ((unint64_t)v12 < v1[4])
      {
        v13 = *v12;
        v14 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v12, v1[1], v1[2]);
        v16 = v15;
        v18 = v17;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_QWORD *)v4 = 0xD000000000000016;
        *(_QWORD *)(v4 + 8) = 0x8000000182307290;
        *(_QWORD *)(v4 + 16) = v13;
        *(_QWORD *)(v4 + 24) = v14;
        *(_QWORD *)(v4 + 32) = v16;
        *(_QWORD *)(v4 + 40) = v18;
        v5 = 1;
        goto LABEL_21;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v0[3] = v2 + 4;
  v7 = (_QWORD *)v0[1];
  v8 = v0[2];
  v0 += 6;
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v7, v8, (uint64_t)(v2 + 4));
  v1 = (_QWORD *)v1[6];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_25:
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
  v10 = v1[2];
  v9 = v1[3];
  v11 = v10 + 1;
  if (v10 >= v9 >> 1)
  {
    v21 = v10 + 1;
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v1);
    v11 = v21;
    v1 = v19;
  }
  v1[2] = v11;
  v1[v10 + 4] = 2;
  *v0 = v1;
}

uint64_t JSONDecoder.assumesTopLevelDictionary.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  unsigned __int8 v5;
  __int128 v6;
  __int128 v7;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
  if (!*(_QWORD *)(v1 + 16)
    || (v2 = specialized __RawDictionaryStorage.find<A>(_:)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_assumesTopLevelDictionaryKey),
        (v3 & 1) == 0))
  {
    v6 = 0u;
    v7 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v7 + 1))
  {
LABEL_7:
    outlined destroy of Any?((uint64_t)&v6, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  result = swift_dynamicCast();
  if ((_DWORD)result)
    return v5;
  return result;
}

uint64_t JSONDecoder.userInfo.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t JSONDecoder.allowsJSON5.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 112);
}

uint64_t type metadata accessor for JSONMap()
{
  return objc_opt_self();
}

void partial apply for closure #1 in JSONDecoder.decode<A>(_:from:)(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v4;

  specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(a2, a3, a4, *(ValueMetadata **)(v4 + 32), 0x8000000000000000, 0, 0, 0, 255, *(_QWORD *)(v4 + 16));
}

uint64_t JSONDecoderImpl.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(char a1)
{
  uint64_t v1;
  uint64_t result;
  os_unfair_lock_s *v3;

  if ((a1 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull_native(), (result & 1) == 0))
  {
    v3 = *(os_unfair_lock_s **)(*(_QWORD *)(v1 + 32) + 24);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v3 + 10);
    closure #1 in XMLPlistMap.copyInBuffer()((uint64_t)&v3[4]);
    os_unfair_lock_unlock(v3 + 10);
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for CodingUserInfoKey();
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  ICULegacyNumberFormatter.Signature.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  type metadata accessor for CombineIdentifier();
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95660], MEMORY[0x1E0C95670]);
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  char v15;
  _QWORD v17[2];

  v3 = v2;
  v17[1] = a1;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5, v7);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v15 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for NSString();
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x186DA52A0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  char v12;
  uint64_t v14;
  _BYTE v15[352];
  _BYTE v16[352];
  uint64_t __dst[50];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    v7 = *(unsigned __int8 *)(a1 + 352);
    v8 = *(_QWORD *)(a1 + 360);
    v9 = *(_QWORD *)(a1 + 368);
    v10 = *(_QWORD *)(a1 + 376);
    v14 = *(_QWORD *)(a1 + 384);
    do
    {
      v11 = (const void *)(*(_QWORD *)(v2 + 48) + 392 * v4);
      memcpy(__dst, v11, 0x188uLL);
      memcpy(v16, v11, sizeof(v16));
      memcpy(v15, (const void *)a1, sizeof(v15));
      outlined retain of ICUDateIntervalFormatter.Signature(__dst);
      if (specialized static Locale.Components.== infix(_:_:)((uint64_t)v16, (uint64_t)v15)
        && LOBYTE(__dst[44]) == v7
        && (__dst[45] == v8 && __dst[46] == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (__dst[47] == v10 && __dst[48] == v14)
        {
          outlined release of ICUDateIntervalFormatter.Signature(__dst);
          return v4;
        }
        v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined release of ICUDateIntervalFormatter.Signature(__dst);
        if ((v12 & 1) != 0)
          return v4;
      }
      else
      {
        outlined release of ICUDateIntervalFormatter.Signature(__dst);
      }
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v20;

  v5 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)((uint64_t)v8, a1);
      if ((v13 & 1) != 0)
      {
        v14 = *(int *)(v5 + 20);
        v15 = *(_QWORD *)&v8[v14];
        v16 = *(_QWORD *)&v8[v14 + 8];
        v17 = (_QWORD *)(a1 + v14);
        v18 = v15 == *v17 && v16 == v17[1];
        if ((v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && v8[*(int *)(v5 + 24)] == *(_BYTE *)(a1 + *(int *)(v5 + 24)))
        {
          break;
        }
      }
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v8, type metadata accessor for ICULegacyNumberFormatter.Signature);
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        return v10;
    }
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v8, type metadata accessor for ICULegacyNumberFormatter.Signature);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  char v15;
  _QWORD v17[2];

  v3 = v2;
  v17[1] = a1;
  v5 = type metadata accessor for CombineIdentifier();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5, v7);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95660], MEMORY[0x1E0C95678]);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v15 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

uint64_t closure #1 in XMLPlistMap.copyInBuffer()(uint64_t result)
{
  _QWORD *v1;
  size_t v2;
  size_t v3;
  const void *v4;
  _BYTE *v5;
  _BYTE *v6;

  if (!*(_QWORD *)(result + 16))
  {
    v1 = (_QWORD *)result;
    v2 = *(_QWORD *)(result + 8);
    v3 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
    }
    else
    {
      v4 = *(const void **)result;
      v5 = (_BYTE *)swift_slowAlloc();
      if ((v2 & 0x8000000000000000) != 0)
      {
LABEL_9:
        result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      v6 = v5;
      result = (uint64_t)memmove(v5, v4, v2);
      v6[v2] = 0;
      if ((v3 & 0x8000000000000000) == 0)
      {
        *v1 = v6;
        v1[1] = v3;
        v1[2] = v6;
        return result;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance JSONDecoderImpl(uint64_t a1, uint64_t a2)
{
  return JSONDecoderImpl.decode<A>(_:)(a1, a2);
}

uint64_t JSONDecoderImpl.decode<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  ValueMetadata *v10;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 24 * v4;
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(_QWORD *)(v5 + 16);
    v8 = *(_QWORD *)(v2 + 160);
    v9 = *(_BYTE *)(v5 + 24);
    v10 = (ValueMetadata *)result;
    swift_retain();
    specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v6, v7, v9, v10, v8, 0, 0, 0, 255, a2);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))JSONDecoderImpl.KeyedContainer.nestedContainer<A>(keyedBy:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))JSONDecoderImpl.KeyedContainer.decode<A>(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))
{
  _QWORD *v7;

  return a7(a1, a2, *v7, v7[1], v7[2], *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
}

uint64_t JSONDecoderImpl.KeyedContainer.decode<A>(_:forKey:)@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  ValueMetadata *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;

  v41 = a7;
  v45 = a4;
  v39 = a1;
  v40 = a3;
  v38 = a9;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v35 - v16;
  v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a5 + 16) && (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) != 0))
  {
    v37 = a10;
    v22 = *(_QWORD *)(a5 + 56) + 24 * v20;
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(v22 + 8);
    v36 = *(unsigned __int8 *)(v22 + 16);
    swift_bridgeObjectRelease();
    v25 = *(_QWORD *)(a6 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v17, a2, a6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v17, 0, 1, a6);
    JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v23, v24, v36, v39, v45, (uint64_t)v17, v41, a6, v38, v37, a8);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {
    swift_bridgeObjectRelease();
    v27 = type metadata accessor for DecodingError();
    swift_allocError();
    v29 = v28;
    v42 = (char *)v28
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v29[3] = a6;
    v29[4] = a8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(boxed_opaque_existential_1, a2, a6);
    _CodingPathNode.path.getter(v45);
    v43 = 0;
    v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v43 = 0xD00000000000001DLL;
    v44 = 0x800000018230D870;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 2238496;
    v32._object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    v33._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 3025186;
    v34._object = (void *)0xE300000000000000;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x1E0DEC448], v27);
    return swift_willThrow();
  }
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t outlined init with take of any PredicateExpression<Self.Output == B1>(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void type metadata accessor for NSRunLoopMode(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void type metadata accessor for NSDecimal(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSDecimal);
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance JSONDecoderImpl@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = type metadata accessor for JSONDecoderImpl();
  a1[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl, (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
  *a1 = v3;
  return swift_retain();
}

uint64_t type metadata accessor for JSONDecoderImpl()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for LocalizedStringResource.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1818495F8 + 4 * byte_182150A39[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_18184962C + 4 * byte_182150A34[v4]))();
}

uint64_t sub_18184962C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181849634(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18184963CLL);
  return result;
}

uint64_t sub_181849648(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181849650);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_181849654(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18184965C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for FloatingPointRoundingRule.CodingValue(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationValue.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181849830 + 4 * byte_182150A4D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181849864 + 4 * byte_182150A48[v4]))();
}

uint64_t sub_181849864(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18184986C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181849874);
  return result;
}

uint64_t sub_181849880(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181849888);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18184988C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181849894(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for Locale.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1818498F0 + 4 * byte_182069A93[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181849924 + 4 * byte_182069A8E[v4]))();
}

uint64_t sub_181849924(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18184992C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181849934);
  return result;
}

uint64_t sub_181849940(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181849948);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18184994C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181849954(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t object)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v35 = a2;
  v39 = a3;
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v33 - v12;
  v14 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a4 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15), (v17 & 1) != 0))
  {
    v18 = *(_QWORD *)(a4 + 56) + 24 * v16;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v34 = *(unsigned __int8 *)(v18 + 16);
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v13, a1, a5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v13, 0, 1, a5);
    v22 = v36;
    v23 = JSONDecoderImpl.unwrapString<A>(from:for:_:)(v19, v20, v34, v39, (uint64_t)v13, a5, object);
    if (!v22)
      object = v23;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    swift_bridgeObjectRelease();
    v24 = type metadata accessor for DecodingError();
    swift_allocError();
    v26 = v25;
    v36 = (char *)v25
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v26[3] = a5;
    v26[4] = object;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v39);
    v37 = 0;
    v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v37 = 0xD00000000000001DLL;
    v38 = 0x800000018230D870;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 2238496;
    v29._object = (void *)0xE300000000000000;
    String.append(_:)(v29);
    v30._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    object = (uint64_t)v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 3025186;
    v31._object = (void *)0xE300000000000000;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x1E0DEC448], v24);
    swift_willThrow();
  }
  return object;
}

uint64_t getEnumTagSinglePayload for ExpressionStructure.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t JSONDecoderImpl.KeyedContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t *a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, uint64_t);
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t result;
  void (*v42)(uint64_t *, _BYTE *, uint64_t);
  _BYTE *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _BYTE v59[4];
  int v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;

  v65 = a7;
  v72 = a4;
  v68 = a3;
  v63 = a9;
  v64 = a1;
  v14 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v62 = &v59[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v18 = &v59[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v19);
  v21 = &v59[-v20];
  v69 = a8;
  v22 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a5 + 16) || (v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23), (v25 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v32 = type metadata accessor for DecodingError();
    v68 = swift_allocError();
    v34 = v33;
    v67 = (uint64_t)v33
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v35 = v69;
    v34[3] = a6;
    v34[4] = v35;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(boxed_opaque_existential_1, a2, a6);
    _CodingPathNode.path.getter(v72);
    v70 = 0;
    v71 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v70 = 0xD00000000000001DLL;
    v71 = 0x800000018230D870;
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 2238496;
    v38._object = (void *)0xE300000000000000;
    String.append(_:)(v38);
    v39._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 3025186;
    v40._object = (void *)0xE300000000000000;
    String.append(_:)(v40);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, *MEMORY[0x1E0DEC448], v32);
    return swift_willThrow();
  }
  v26 = *(_QWORD *)(a5 + 56) + 24 * v24;
  v27 = *(_QWORD *)v26;
  v61 = *(_QWORD *)(v26 + 8);
  v60 = *(unsigned __int8 *)(v26 + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v14 + 16))(v21, a2, a6);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v21, 0, 1, a6);
  v28 = v67;
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v16 + 16))(v18, v21, v67);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v18, 1, a6) == 1)
  {
    v29 = *(void (**)(_BYTE *, uint64_t))(v16 + 8);
    v29(v21, v28);
    v29(v18, v28);
    v30 = v72;
    swift_retain();
    v31 = v68;
    goto LABEL_12;
  }
  v42 = *(void (**)(uint64_t *, _BYTE *, uint64_t))(v14 + 32);
  v43 = v62;
  v42((uint64_t *)v62, v18, a6);
  v44 = (uint64_t *)swift_allocObject();
  v45 = v69;
  v44[5] = a6;
  v44[6] = v45;
  v46 = __swift_allocate_boxed_opaque_existential_1(v44 + 2);
  v42(v46, v43, a6);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v21, v28);
  v47 = v72;
  v44[7] = v72;
  if (v47 >> 62)
  {
    v31 = v68;
    if (v47 >> 62 != 1)
    {
      v50 = 1;
      goto LABEL_11;
    }
    v48 = (uint64_t *)((v47 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v48 = (uint64_t *)(v47 + 64);
    v31 = v68;
  }
  v49 = *v48;
  swift_retain();
  v50 = v49 + 1;
  if (!__OFADD__(v49, 1))
  {
LABEL_11:
    v44[8] = v50;
    v30 = (unint64_t)v44;
LABEL_12:
    v44 = a10;
    v28 = *(_QWORD *)(v31 + 160);
    *(_QWORD *)(v31 + 160) = v30;
    v21 = *(_QWORD **)(v31 + 16);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v31 + 16) = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_13;
    goto LABEL_26;
  }
  __break(1u);
LABEL_26:
  v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
  *(_QWORD *)(v31 + 16) = v21;
LABEL_13:
  v53 = v21[2];
  v52 = v21[3];
  if (v53 >= v52 >> 1)
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, v21);
  v21[2] = v53 + 1;
  v54 = &v21[3 * v53];
  v55 = v61;
  v54[4] = v27;
  v54[5] = v55;
  *((_BYTE *)v54 + 48) = v60;
  *(_QWORD *)(v31 + 16) = v21;
  v56 = v66;
  JSONDecoderImpl.container<A>(keyedBy:)(v64, v65, (uint64_t)v44);
  if (v56)
  {
    *(_QWORD *)(v31 + 160) = v28;
    swift_retain();
    swift_release();
    v57 = *(_QWORD **)(v31 + 16);
    if (v57[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v58 = v57[2];
        if (v58)
        {
LABEL_23:
          v57[2] = v58 - 1;
          *(_QWORD *)(v31 + 16) = v57;
          swift_release();
          return swift_release();
        }
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    v57 = specialized _ArrayBuffer._consumeAndCreateNew()(v57);
    v58 = v57[2];
    if (v58)
      goto LABEL_23;
LABEL_19:
    __break(1u);
  }
  *(_QWORD *)(v31 + 160) = v28;
  swift_retain();
  swift_release();
  v57 = *(_QWORD **)(v31 + 16);
  if (!v57[2])
  {
    __break(1u);
LABEL_31:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v57);
    v57 = (_QWORD *)result;
    v58 = *(_QWORD *)(result + 16);
    if (v58)
      goto LABEL_23;
    goto LABEL_32;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_31;
  v58 = v57[2];
  if (v58)
    goto LABEL_23;
LABEL_32:
  __break(1u);
  return result;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PredicateExpressionCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

NSHashTable *__cdecl NSCreateHashTable(NSHashTableCallBacks *callBacks, NSUInteger capacity)
{
  NSZone *v2;
  __int128 v3;
  NSHashTableCallBacks v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)&callBacks->retain;
  *(_OWORD *)&v5.hash = *(_OWORD *)&callBacks->hash;
  *(_OWORD *)&v5.retain = v3;
  v5.describe = callBacks->describe;
  return NSCreateHashTableWithZone(&v5, capacity, v2);
}

NSHashTable *__cdecl NSCreateHashTableWithZone(NSHashTableCallBacks *callBacks, NSUInteger capacity, NSZone *zone)
{
  objc_class *v4;
  NSZone *v5;
  char *v6;
  NSString *(__cdecl *describe)(NSHashTable *, const void *);
  __int128 v8;
  NSHashTable *result;
  unint64_t v10;

  v4 = (objc_class *)objc_opt_self();
  v5 = (NSZone *)malloc_default_zone();
  v6 = (char *)NSAllocateObject(v4, 0, v5);
  describe = callBacks->describe;
  v8 = *(_OWORD *)&callBacks->retain;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)&callBacks->hash;
  *(_OWORD *)(v6 + 24) = v8;
  *((_QWORD *)v6 + 5) = describe;
  result = (NSHashTable *)malloc_type_malloc(0x10uLL, 0x80040B8603338uLL);
  if (result)
  {
    result->super.isa = (Class)__NSHashTableCallback;
    result[1].super.isa = (Class)v6;
    if (*(_OWORD *)&callBacks->retain == 0)
      v10 = 0x2000;
    else
      v10 = 8704;
    *((_QWORD *)v6 + 6) = CFBasicHashCreate(*MEMORY[0x1E0C9AE30], v10, (uint64_t)result);
    return (NSHashTable *)v6;
  }
  else
  {
    qword_1EDC47C18 = (uint64_t)"unable to allocate space for callbacks";
    __break(1u);
  }
  return result;
}

void sub_18184A5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool)(uint64_t a1, void *a2, void *a3)
{
  uint64_t (*v5)(void **, id);
  void *v6;
  id v7;
  void *v9;

  v5 = *(uint64_t (**)(void **, id))(a1 + 32);
  swift_retain();
  URL.init(reference:)(a2, &v9);
  v6 = v9;
  v7 = a3;
  LOBYTE(a2) = v5(&v9, v7);

  swift_release();
  swift_release();
  swift_release();
  return a2 & 1;
}

uint64_t partial apply for closure #1 in NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, a2, *(uint64_t (**)(uint64_t *, uint64_t))(v2 + 16));
}

uint64_t _NSIsPList(uint64_t result, int a2, void *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[128];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = (void *)result;
    if ((_NSIsNSString() & 1) != 0)
      return 1;
    if ((_NSIsNSData() & 1) != 0)
      return 2;
    if ((_NSIsNSNumber() & 1) != 0)
      return 5;
    if ((_NSIsNSDate() & 1) != 0)
      return 6;
    if (a3 && (objc_msgSend(a3, "containsObject:", v5) & 1) != 0)
      return 0;
    if (_NSIsNSArray())
    {
      if (a2)
      {
        objc_msgSend(a3, "addObject:", v5);
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v14, 16);
        if (v6)
        {
          v7 = v6;
          v8 = *(_QWORD *)v16;
LABEL_16:
          v9 = 0;
          while (1)
          {
            if (*(_QWORD *)v16 != v8)
              objc_enumerationMutation(v5);
            if (!_NSIsPList(*(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v9), 1, a3))
              break;
            if (v7 == ++v9)
            {
              v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v14, 16);
              if (v7)
                goto LABEL_16;
              goto LABEL_22;
            }
          }
LABEL_33:
          objc_msgSend(a3, "removeObject:", v5);
          return 0;
        }
LABEL_22:
        objc_msgSend(a3, "removeObject:", v5);
      }
      return 3;
    }
    v10 = _NSIsNSDictionary();
    if (v10)
      result = 4;
    else
      result = 0;
    if (v10 && a2)
    {
      v11 = (void *)objc_msgSend(v5, "keyEnumerator");
      objc_msgSend(a3, "addObject:", v5);
      while (1)
      {
        v12 = objc_msgSend(v11, "nextObject");
        if (!v12)
          break;
        v13 = v12;
        if ((_NSIsNSString() & 1) == 0 || !_NSIsPList(objc_msgSend(v5, "objectForKey:", v13), 1, a3))
          goto LABEL_33;
      }
      objc_msgSend(a3, "removeObject:", v5);
      return 4;
    }
  }
  return result;
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "void * _Nullable NSMapGet(NSMapTable * _Nonnull, const void * _Nullable)");
  return -[NSMapTable objectForKey:](table, "objectForKey:", key);
}

objc_class *_NSSetCheckSize(objc_class *result, const char *a2, unint64_t a3, uint64_t a4)
{
  void *v4;

  if (a3 >> 60)
  {
    v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: absurd %s: %ld"), _NSMethodExceptionProem(result, a2), a4, a3), 0);
    objc_exception_throw(v4);
  }
  return result;
}

void _NSSetRaiseInsertNilException(objc_class *a1, const char *a2)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: attempt to insert nil"), _NSMethodExceptionProem(a1, a2)), 0);
  objc_exception_throw(v2);
}

unint64_t CFBasicHashAddValue(unint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  _BYTE v11[56];
  uint64_t v12;

  v3 = result;
  v12 = *MEMORY[0x1E0C80C00];
  memset(v11, 0, sizeof(v11));
  v4 = *(_QWORD *)(result + 16);
  if ((v4 & 0x3F0000) != 0)
  {
    v5 = v4 & 3;
    switch(v5)
    {
      case 3:
        result = ___CFBasicHashFindBucket3(result, a2, 0, (unint64_t *)v11);
        break;
      case 2:
        result = ___CFBasicHashFindBucket2(result, a2, 0, (unint64_t *)v11);
        break;
      case 1:
        result = ___CFBasicHashFindBucket1(result, a2, 0, (unint64_t *)v11);
        break;
      default:
LABEL_15:
        __break(1u);
        return result;
    }
  }
  else
  {
    v6 = *(_OWORD *)(result + 16);
    *(_QWORD *)v11 = -1;
    *(_QWORD *)&v11[8] = (v6 >> 32) & 0xFFFFFF0000000000;
    *(_QWORD *)&v11[16] = *(_QWORD *)&v11[8];
    memset(&v11[24], 0, 32);
  }
  if (*(_QWORD *)&v11[40])
  {
    v7 = *(_QWORD *)(v3 + 16);
    *(_WORD *)(v3 + 30) = HIWORD(*(_QWORD *)(v3 + 24)) + 1;
    if ((v7 & 0x380) != 0)
    {
      v8 = (v7 >> 7) & 7;
      if (v8)
      {
        ++*(_QWORD *)(*(_QWORD *)(v3 + 8 * v8 + 40) + 8 * *(_QWORD *)v11);
        return result;
      }
      goto LABEL_15;
    }
  }
  else
  {
    v9[0] = *(_OWORD *)v11;
    v9[1] = *(_OWORD *)&v11[16];
    v9[2] = *(unint64_t *)&v11[32];
    v10 = *(_QWORD *)&v11[48];
    return __CFBasicHashAddValue(v3, (uint64_t)v9, a2);
  }
  return result;
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "void NSMapInsert(NSMapTable * _Nonnull, const void * _Nullable, const void * _Nullable)");
  -[NSMapTable setObject:forKey:](table, "setObject:forKey:", value, key);
}

uint64_t CFBasicHashSetValue(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[56];
  uint64_t v12;

  v3 = result;
  v12 = *MEMORY[0x1E0C80C00];
  memset(v11, 0, sizeof(v11));
  v4 = *(_QWORD *)(result + 16);
  if ((v4 & 0x3F0000) != 0)
  {
    v5 = v4 & 3;
    switch(v5)
    {
      case 3:
        ___CFBasicHashFindBucket3(result, a2, 0, (unint64_t *)v11);
        break;
      case 2:
        ___CFBasicHashFindBucket2(result, a2, 0, (unint64_t *)v11);
        break;
      case 1:
        ___CFBasicHashFindBucket1(result, a2, 0, (unint64_t *)v11);
        break;
      default:
        __break(1u);
        return result;
    }
  }
  else
  {
    v6 = *(_OWORD *)(result + 16);
    *(_QWORD *)v11 = -1;
    *(_QWORD *)&v11[8] = (v6 >> 32) & 0xFFFFFF0000000000;
    *(_QWORD *)&v11[16] = *(_QWORD *)&v11[8];
    memset(&v11[24], 0, 32);
  }
  if (*(_QWORD *)&v11[40])
  {
    v7 = *(_OWORD *)v11;
    v8 = *(_OWORD *)&v11[16];
    v9 = *(_OWORD *)&v11[32];
    v10 = *(_QWORD *)&v11[48];
    return __CFBasicHashReplaceValue(v3, &v7, a2);
  }
  else
  {
    v7 = *(_OWORD *)v11;
    v8 = *(_OWORD *)&v11[16];
    v9 = *(unint64_t *)&v11[32];
    v10 = *(_QWORD *)&v11[48];
    return __CFBasicHashAddValue(v3, (uint64_t)&v7, a2);
  }
}

uint64_t CFBasicHashRemoveValue(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  _BYTE v37[56];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  memset(v37, 0, sizeof(v37));
  v3 = *(_QWORD *)(a1 + 16);
  if ((v3 & 0x3F0000) != 0)
  {
    v4 = v3 & 3;
    switch(v4)
    {
      case 3:
        ___CFBasicHashFindBucket3(a1, a2, 0, (unint64_t *)v37);
        break;
      case 2:
        ___CFBasicHashFindBucket2(a1, a2, 0, (unint64_t *)v37);
        break;
      case 1:
        ___CFBasicHashFindBucket1(a1, a2, 0, (unint64_t *)v37);
        break;
      default:
        goto LABEL_49;
    }
  }
  else
  {
    *(_QWORD *)v37 = -1;
    memset(&v37[24], 0, 32);
  }
  v5 = *(_QWORD *)&v37[40];
  if (*(_QWORD *)&v37[40] < 2uLL)
  {
    if (*(_QWORD *)&v37[40] != 1)
      return v5;
    v8 = *(_QWORD *)v37;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    *(_WORD *)(a1 + 30) = HIWORD(v10) + 1;
    *((_QWORD *)&v11 + 1) = v10;
    *(_QWORD *)&v11 = v9;
    v12 = ~(unint64_t)(v11 >> 32) | 0xFFFFFFFFFFLL;
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(v13 + 8 * v8);
    *(_QWORD *)(v13 + 8 * v8) = v12;
    (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 32))(a1, 14, v14, 0);
    v15 = *(_QWORD *)(a1 + 16);
    if ((v15 & 4) != 0)
    {
      v17 = *(_QWORD *)(a1 + 48);
      v18 = *(_QWORD *)(v17 + 8 * v8);
      *(_QWORD *)(v17 + 8 * v8) = v12;
      (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 32))(a1, 15, v18, 0);
      v15 = *(_QWORD *)(a1 + 16);
    }
    v16 = *(_QWORD *)(a1 + 24);
    if ((v15 & 0x18) != 0)
    {
      v19 = (v15 >> 3) & 3;
      if (!v19)
        goto LABEL_49;
      v20 = *(_QWORD *)(a1 + 8 * v19 + 40);
      v21 = *(_QWORD *)(v20 + 8 * v8);
      *(_QWORD *)(v20 + 8 * v8) = v12;
      (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 32))(a1, 16, v21, 0);
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
    }
    if ((v15 & 0x60) != 0)
    {
      v22 = (v15 >> 5) & 3;
      if (!v22)
        goto LABEL_49;
      v23 = *(_QWORD *)(a1 + 8 * v22 + 40);
      v24 = *(_QWORD *)(v23 + 8 * v8);
      *(_QWORD *)(v23 + 8 * v8) = v12;
      (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 32))(a1, 17, v24, 0);
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
    }
    if ((v15 & 0x380) != 0)
    {
      v25 = (v15 >> 7) & 7;
      if (!v25)
        goto LABEL_49;
      *(_QWORD *)(*(_QWORD *)(a1 + 8 * v25 + 40) + 8 * v8) = 0;
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
    }
    if ((v15 & 0x1C00) != 0)
    {
      v26 = (v15 >> 10) & 7;
      if (!v26)
        goto LABEL_49;
      *(_QWORD *)(*(_QWORD *)(a1 + 8 * v26 + 40) + 8 * v8) = 0;
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
    }
    if ((v15 & 0xE000) != 0)
    {
      if (!((unsigned __int16)v15 >> 13))
        goto LABEL_49;
      *(_QWORD *)(*(_QWORD *)(a1 + 8 * ((unsigned __int16)v15 >> 13) + 40) + 8 * v8) = 0;
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
    }
    v27 = (v15 & 0xFFFFFFFFFFC00000) - 0x400000;
    v28 = v27 & 0xFFFFFFFFFFC00000 | v15 & 0x3FFFFF;
    *(_QWORD *)(a1 + 16) = v28;
    *(_QWORD *)(a1 + 24) = v16 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)(WORD2(v16) + 1) << 32);
    v29 = (unsigned __int16)(WORD2(v16) + 1);
    if (WORD2(v16) != 0xFFFF)
    {
      v30 = (v15 >> 16) & 0x3F;
      v31 = __CFBasicHashTableSizes[v30];
      if ((unint64_t)(v30 - 7) > 0x37)
      {
        if ((unint64_t)(v30 - 5) > 0x39)
        {
          if ((v16 & 8) == 0)
          {
LABEL_42:
            v33 = WORD1(v28) & 0x3F;
            if (v33 < 3)
              return v5;
            v34 = v33 - 2;
            goto LABEL_46;
          }
LABEL_44:
          v35 = WORD1(v28) & 0x3F;
          if (v35 < 6)
            return v5;
          v34 = v35 - 5;
LABEL_46:
          if (__CFBasicHashTableCapacities[v34] <= v27 >> 22)
            return v5;
LABEL_47:
          __CFBasicHashRehash(a1, 0);
          return v5;
        }
      }
      else if (v29 >= v31 >> 2)
      {
        goto LABEL_34;
      }
      v32 = v29 >= v31 >> 1;
      if ((v16 & 8) == 0)
      {
LABEL_35:
        if (v32)
          goto LABEL_47;
        goto LABEL_42;
      }
      goto LABEL_39;
    }
LABEL_34:
    v32 = 1;
    if ((v16 & 8) == 0)
      goto LABEL_35;
LABEL_39:
    if (v32)
      goto LABEL_47;
    goto LABEL_44;
  }
  v6 = *(_QWORD *)(a1 + 16);
  *(_WORD *)(a1 + 30) = HIWORD(*(_QWORD *)(a1 + 24)) + 1;
  if ((v6 & 0x380) != 0)
  {
    v7 = (v6 >> 7) & 7;
    if (v7)
    {
      --*(_QWORD *)(*(_QWORD *)(a1 + 8 * v7 + 40) + 8 * *(_QWORD *)v37);
      return v5;
    }
LABEL_49:
    __break(1u);
  }
  return v5;
}

uint64_t __CFBasicHashAddValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  ++*(_WORD *)(a1 + 30);
  result = (**(uint64_t (***)(void))(a1 + 32))();
  v9 = result;
  v10 = *(_QWORD *)(a1 + 16);
  if ((v10 & 0x18) != 0)
  {
    result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 32))(a1, 12, a3, 0);
    v11 = result;
    v10 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 24);
    if ((v10 & 4) == 0)
    {
LABEL_3:
      v13 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 24);
    v11 = result;
    if ((v10 & 4) == 0)
      goto LABEL_3;
  }
  result = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32))(a1, 11, 0, 0);
  v13 = result;
  v10 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
LABEL_6:
  if ((v10 & 0x60) != 0)
  {
    result = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32))(a1, 13, 0, 0);
    v14 = result;
    v10 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v14 = 0;
  }
  if (__CFBasicHashTableCapacities[(v10 >> 16) & 0x3F] <= v10 >> 22)
  {
    __CFBasicHashRehash(a1, 1);
    v15 = *(_DWORD *)(a1 + 16) & 3;
    switch(v15)
    {
      case 3:
        result = ___CFBasicHashFindBucket3(a1, v11, 1, (unint64_t *)v26);
        break;
      case 2:
        result = ___CFBasicHashFindBucket2(a1, v11, 1, (unint64_t *)v26);
        break;
      case 1:
        result = ___CFBasicHashFindBucket1(a1, v11, 1, (unint64_t *)v26);
        break;
      default:
        goto LABEL_43;
    }
    v16 = v26[1];
    *(_OWORD *)a2 = v26[0];
    *(_OWORD *)(a2 + 16) = v16;
    *(_OWORD *)(a2 + 32) = v26[2];
    *(_QWORD *)(a2 + 48) = v27;
    v10 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 24);
  }
  *((_QWORD *)&v17 + 1) = v12;
  *(_QWORD *)&v17 = v10;
  v18 = (v17 >> 32) & 0xFFFFFF0000000000;
  if (*(_QWORD *)(a2 + 8) == ~v18)
  {
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v12 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)(WORD2(v12) - 1) << 32);
  }
  if (v11 == v18 || v11 == ~v18)
    result = __CFBasicHashFindNewMarker(a1, v11, v7, v8);
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * *(_QWORD *)a2) = v9;
  v20 = *(_QWORD *)(a1 + 16);
  if ((v20 & 4) != 0)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * *(_QWORD *)a2) = v13;
    v20 = *(_QWORD *)(a1 + 16);
  }
  v21 = *(_QWORD *)(a1 + 24);
  if ((v20 & 0x18) != 0)
  {
    v22 = (v20 >> 3) & 3;
    if (!v22)
      goto LABEL_43;
    *(_QWORD *)(*(_QWORD *)(a1 + 8 * v22 + 40) + 8 * *(_QWORD *)a2) = v11;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_QWORD *)(a1 + 24);
  }
  if ((v20 & 0x60) != 0)
  {
    v23 = (v20 >> 5) & 3;
    if (!v23)
      goto LABEL_43;
    *(_QWORD *)(*(_QWORD *)(a1 + 8 * v23 + 40) + 8 * *(_QWORD *)a2) = v14;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_QWORD *)(a1 + 24);
  }
  if ((v20 & 0x380) != 0)
  {
    v24 = (v20 >> 7) & 7;
    if (!v24)
      goto LABEL_43;
    *(_QWORD *)(*(_QWORD *)(a1 + 8 * v24 + 40) + 8 * *(_QWORD *)a2) = 1;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_QWORD *)(a1 + 24);
  }
  if ((v20 & 0x1C00) != 0)
  {
    v25 = (v20 >> 10) & 7;
    if (!v25)
      goto LABEL_43;
    *(_QWORD *)(*(_QWORD *)(a1 + 8 * v25 + 40) + 8 * *(_QWORD *)a2) = 0;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_QWORD *)(a1 + 24);
  }
  if ((v20 & 0xE000) != 0)
  {
    result = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t, _QWORD))(a1 + 32))(a1, 22, v11, 0);
    if ((unsigned __int16)*(_QWORD *)(a1 + 16) >> 13)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 8 * ((unsigned __int16)*(_QWORD *)(a1 + 16) >> 13) + 40) + 8 * *(_QWORD *)a2) = result;
      v20 = *(_QWORD *)(a1 + 16);
      v21 = *(_QWORD *)(a1 + 24);
      goto LABEL_42;
    }
LABEL_43:
    __break(1u);
  }
LABEL_42:
  *(_QWORD *)(a1 + 16) = v20 + 0x400000;
  *(_QWORD *)(a1 + 24) = v21;
  return result;
}

unint64_t ___CFBasicHashFindBucket1@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  result = (**(uint64_t (***)(void))(a1 + 32))();
  v8 = *(_QWORD *)(a1 + 16);
  if ((v8 & 0x18) != 0)
  {
    v9 = (v8 >> 3) & 3;
    if (!v9)
      goto LABEL_52;
    v10 = (uint64_t *)(a1 + 8 * v9 + 40);
  }
  else
  {
    v10 = (uint64_t *)(a1 + 40);
  }
  v11 = *v10;
  if ((v8 & 0xE000) != 0)
  {
    if ((unsigned __int16)v8 >> 13)
    {
      v12 = *(_QWORD *)(a1 + 8 * ((unsigned __int16)v8 >> 13) + 40);
      goto LABEL_9;
    }
LABEL_52:
    __break(1u);
    return result;
  }
  v12 = 0;
LABEL_9:
  v13 = (v8 >> 16) & 0x3F;
  v14 = __CFBasicHashTableSizes[v13];
  v15 = (*(__int128 *)(a1 + 16) >> 32) & 0xFFFFFF0000000000;
  *a4 = -1;
  a4[1] = ~v15;
  a4[2] = 0;
  a4[3] = ~v15;
  a4[5] = 0;
  a4[6] = 0;
  a4[4] = 0;
  if (!v13 || v13 == 63)
    return result;
  v16 = result % v14;
  if (v14 <= 1)
    v17 = 1;
  else
    v17 = v14;
  v18 = -1;
  while (1)
  {
    v19 = *(_QWORD *)(v11 + 8 * v16);
    if (v19 == v15)
    {
      if (v18 == -1)
      {
        a4[3] = v15;
        *a4 = v16;
        a4[1] = v15;
      }
      return result;
    }
    if (a3)
      goto LABEL_17;
    if (v19 == ~v15)
    {
      if (v18 == -1)
      {
        *a4 = v16;
        v18 = v16;
      }
      goto LABEL_17;
    }
    if (v19 == a2)
      break;
    if (!v12 || *(_QWORD *)(v12 + 8 * v16) == result)
    {
      v32 = v12;
      v33 = result;
      v31 = v18;
      v20 = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t, uint64_t))(a1 + 32))(a1, 20, v19, a2);
      v18 = v31;
      v12 = v32;
      v21 = v20 == 0;
      result = v33;
      if (!v21)
        goto LABEL_34;
    }
LABEL_17:
    if (v16 + 1 < v14)
      ++v16;
    else
      v16 = v16 + 1 - v14;
    if (!--v17)
      return result;
  }
  v19 = a2;
LABEL_34:
  *a4 = v16;
  v22 = *(_QWORD *)(a1 + 16);
  v23 = v19;
  if ((v22 & 0x18) != 0)
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v16);
  a4[3] = v23;
  if ((v22 & 4) != 0)
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v16);
  else
    v24 = 0;
  a4[4] = v24;
  a4[1] = v19;
  if ((v22 & 0x60) != 0)
  {
    v25 = (v22 >> 5) & 3;
    if (!v25)
      goto LABEL_52;
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * v25 + 40) + 8 * v16);
  }
  else
  {
    v26 = 0;
  }
  a4[2] = v26;
  if ((v22 & 0x380) != 0)
  {
    v27 = (v22 >> 7) & 7;
    if (!v27)
      goto LABEL_52;
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * v27 + 40) + 8 * v16);
  }
  else
  {
    v28 = 1;
  }
  a4[5] = v28;
  if ((v22 & 0x1C00) != 0)
  {
    v29 = (v22 >> 10) & 7;
    if (!v29)
      goto LABEL_52;
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * v29 + 40) + 8 * v16);
  }
  else
  {
    v30 = 1;
  }
  a4[6] = v30;
  return result;
}

__CFString *__NSMapTableCallback(int a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void (*v5)(void);
  _QWORD *v8;
  __CFString *result;
  void (*v10)(void);
  unsigned int (*v11)(void);
  uint64_t (*v12)(void);
  uint64_t (*v13)(void);
  const void *v14;

  v5 = 0;
  v8 = (_QWORD *)a5[1];
  switch(a2)
  {
    case 8:
      result = (__CFString *)malloc_type_malloc(0x10uLL, 0xBE57B2AFuLL);
      if (result)
      {
        v5 = (void (*)(void))result;
        *(_OWORD *)&result->isa = *(_OWORD *)a5;
        return (__CFString *)v5;
      }
      qword_1EDC47C18 = (uint64_t)"unable to allocate space for callbacks";
      __break(1u);
      return result;
    case 9:
      free(a5);
      return 0;
    case 10:
      v10 = (void (*)(void))v8[7];
      if (!v10)
        return (__CFString *)a3;
      goto LABEL_10;
    case 12:
      v10 = (void (*)(void))v8[3];
      if (v10)
LABEL_10:
        v10();
      return (__CFString *)a3;
    case 14:
      v5 = (void (*)(void))v8[8];
      if (v5)
        goto LABEL_12;
      return (__CFString *)v5;
    case 16:
      v5 = (void (*)(void))v8[4];
      if (!v5)
        return (__CFString *)v5;
LABEL_12:
      v5();
      return 0;
    case 20:
      v11 = (unsigned int (*)(void))v8[2];
      if (v11)
        return (__CFString *)v11();
      else
        return (__CFString *)(a3 == a4);
    case 22:
      v12 = (uint64_t (*)(void))v8[1];
      if (v12)
        return (__CFString *)v12();
      return (__CFString *)a3;
    case 24:
      v13 = (uint64_t (*)(void))v8[9];
      if (v13)
        goto LABEL_20;
      return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, CFSTR("<%p>"), a3);
    case 26:
      v13 = (uint64_t (*)(void))v8[5];
      if (!v13)
        return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, CFSTR("<%p>"), a3);
LABEL_20:
      v14 = (const void *)v13();
      return (__CFString *)CFRetain(v14);
    default:
      return (__CFString *)v5;
  }
}

uint64_t CFBasicHashFindBucket@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 16);
  if ((v3 & 0x3F0000) != 0)
  {
    v4 = v3 & 3;
    switch(v4)
    {
      case 3:
        return ___CFBasicHashFindBucket3(result, a2, 0, (unint64_t *)a3);
      case 2:
        return ___CFBasicHashFindBucket2(result, a2, 0, (unint64_t *)a3);
      case 1:
        return ___CFBasicHashFindBucket1(result, a2, 0, (unint64_t *)a3);
      default:
        __break(1u);
        break;
    }
  }
  else
  {
    v5 = (*(__int128 *)(result + 16) >> 32) & 0xFFFFFF0000000000;
    *(_QWORD *)a3 = -1;
    *(_QWORD *)(a3 + 8) = v5;
    *(_QWORD *)(a3 + 16) = v5;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
  }
  return result;
}

uint64_t isEqualObjectMT(uint64_t a1, void *a2, void *a3)
{
  if (a2 == a3)
    return 1;
  else
    return objc_msgSend(a2, "isEqual:");
}

uint64_t hashObjectMT(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "hash");
}

void __CFBasicHashRehash(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  CFAllocatorRef v18;
  _BYTE *v19;
  CFAllocatorRef v20;
  CFAllocatorRef v21;
  CFAllocatorRef v22;
  CFAllocatorRef v23;
  CFAllocatorRef v24;
  uint64_t v25;
  uint64_t v26;
  CFAllocatorRef v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  BOOL v40;
  int v41;
  _BOOL4 v42;
  _QWORD *v43;
  unint64_t *v44;
  _QWORD *v45;
  BOOL v46;
  int v47;
  BOOL v48;
  int v49;
  _QWORD *v50;
  _QWORD *v51;
  BOOL v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  const __CFAllocator *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *ptr;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  _BOOL4 v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *cf;
  _OWORD v84[3];
  uint64_t v85;
  uint64_t v86;

  v2 = 0;
  v86 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  do
  {
    if (__CFBasicHashTableCapacities[v2] >= (int64_t)(a2 + (v3 >> 22)))
      goto LABEL_5;
    ++v2;
  }
  while (v2 != 64);
  while (1)
  {
LABEL_4:
    while (1)
    {
      __break(1u);
LABEL_5:
      v5 = 0;
      v6 = (v4 >> 3) & 1;
      if (a2 != 1)
        v6 = 0;
      v7 = (v3 >> 16) & 0x3F;
      v8 = __CFBasicHashTableSizes[v7];
      v9 = (_BYTE *)(v6 + v2);
      v10 = __CFBasicHashTableSizes[v6 + v2];
      cf = (_BYTE *)a1;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      if (v6 + v2)
      {
        if (v9 != (_BYTE *)63)
          break;
      }
LABEL_62:
      v2 = *(_QWORD *)(a1 + 16);
      v29 = *(_QWORD *)(a1 + 24);
      *((_QWORD *)&v30 + 1) = v29;
      *(_QWORD *)&v30 = v2;
      v31 = (v30 >> 32) & 0xFFFFFF0000000000;
      if (v9 && v9 != (_BYTE *)63)
      {
        if (v10 <= 1)
          v32 = 1;
        else
          v32 = v10;
        v33 = v5;
        v34 = v11;
        v35 = v12;
        v36 = v13;
        do
        {
          *v33 = v31;
          if (v11)
            *v34 = v31;
          if (v12)
            *v35 = v31;
          if (v13)
            *v36 = v31;
          ++v36;
          ++v35;
          ++v34;
          ++v33;
          --v32;
        }
        while (v32);
        v2 = *(_QWORD *)(a1 + 16);
        v29 = *(_QWORD *)(a1 + 24);
      }
      v4 = v2 & 0xFFFFFFFFFFC0FFFFLL | ((unint64_t)(v9 & 0x3F) << 16);
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = v29 & 0xFFFF0000FFFFFFFFLL;
      v3 = *(_QWORD *)(a1 + 40);
      ptr = (void *)v3;
      *(_QWORD *)(a1 + 40) = v5;
      if ((v2 & 4) != 0)
      {
        v3 = *(_QWORD *)(a1 + 48);
        v66 = (void *)v3;
        *(_QWORD *)(a1 + 48) = v11;
      }
      else
      {
        v66 = 0;
      }
      if ((v2 & 0x18) == 0)
      {
        v65 = 0;
        goto LABEL_83;
      }
      v3 = (v2 >> 3) & 3;
      if (v3)
      {
        v3 = a1 + 8 * v3;
        v4 = *(_QWORD *)(v3 + 40);
        v65 = (void *)v4;
        *(_QWORD *)(v3 + 40) = v12;
LABEL_83:
        if ((v2 & 0x60) != 0)
        {
          v3 = (v2 >> 5) & 3;
          if (v3)
          {
            v3 = a1 + 8 * v3;
            v4 = *(_QWORD *)(v3 + 40);
            v64 = (void *)v4;
            *(_QWORD *)(v3 + 40) = v13;
            goto LABEL_87;
          }
        }
        else
        {
          v64 = 0;
LABEL_87:
          if ((v2 & 0x380) == 0)
          {
            v63 = 0;
            goto LABEL_91;
          }
          v3 = (v2 >> 7) & 7;
          if (v3)
          {
            v3 = a1 + 8 * v3;
            v4 = *(_QWORD *)(v3 + 40);
            v63 = (void *)v4;
            *(_QWORD *)(v3 + 40) = v14;
LABEL_91:
            if ((v2 & 0x1C00) != 0)
            {
              v3 = (v2 >> 10) & 7;
              if (v3)
              {
                v3 = a1 + 8 * v3;
                v4 = *(_QWORD *)(v3 + 40);
                v62 = (void *)v4;
                *(_QWORD *)(v3 + 40) = v15;
                goto LABEL_95;
              }
            }
            else
            {
              v62 = 0;
LABEL_95:
              v69 = (unint64_t)v12;
              v70 = (unint64_t)v11;
              v68 = (unint64_t)v13;
              v72 = v15;
              v73 = v14;
              v71 = v16;
              if ((v2 & 0xE000) == 0)
              {
                v61 = 0;
                if (!v7)
                {
LABEL_165:
                  v60 = CFGetAllocator((CFTypeRef)a1);
                  CFAllocatorDeallocate(v60, ptr);
                  CFAllocatorDeallocate(v60, v66);
                  CFAllocatorDeallocate(v60, v65);
                  CFAllocatorDeallocate(v60, v64);
                  CFAllocatorDeallocate(v60, v63);
                  CFAllocatorDeallocate(v60, v62);
                  CFAllocatorDeallocate(v60, v61);
                  return;
                }
LABEL_100:
                if (v7 != 63)
                {
                  v38 = ~v31;
                  v39 = v66;
                  if (v11)
                    v40 = v66 == 0;
                  else
                    v40 = 1;
                  v41 = !v40;
                  v42 = v12 != 0;
                  v43 = ptr;
                  if (v65)
                    v44 = (unint64_t *)v65;
                  else
                    v44 = (unint64_t *)ptr;
                  if (!v65)
                    v42 = 0;
                  v78 = v42;
                  v79 = v41;
                  v45 = v63;
                  v3 = (unint64_t)v64;
                  if (v68)
                    v46 = v64 == 0;
                  else
                    v46 = 1;
                  v47 = !v46;
                  if (v73)
                    v48 = v63 == 0;
                  else
                    v48 = 1;
                  v49 = !v48;
                  v76 = v49;
                  v77 = v47;
                  v50 = v61;
                  v51 = v62;
                  if (v15)
                    v52 = v62 == 0;
                  else
                    v52 = 1;
                  v4 = !v52;
                  if (v16)
                    v53 = v61 == 0;
                  else
                    v53 = 1;
                  v54 = !v53;
                  v74 = v54;
                  v75 = v4;
                  if (v8 <= 1)
                    v55 = 1;
                  else
                    v55 = v8;
                  v56 = v64;
                  v82 = (unint64_t)v5;
                  do
                  {
                    v58 = *v44++;
                    v57 = v58;
                    if (v58 != v31 && v57 != v38)
                    {
                      v85 = 0;
                      memset(v84, 0, sizeof(v84));
                      v2 = *(_DWORD *)(a1 + 16) & 3;
                      switch(*(_DWORD *)(a1 + 16) & 3)
                      {
                        case 3:
                          ___CFBasicHashFindBucket3(a1, v57, 1, (unint64_t *)v84);
                          break;
                        case 2:
                          ___CFBasicHashFindBucket2(a1, v57, 1, (unint64_t *)v84);
                          break;
                        case 1:
                          ___CFBasicHashFindBucket1(a1, v57, 1, (unint64_t *)v84);
                          break;
                        default:
                          goto LABEL_4;
                      }
                      v4 = v82;
                      a1 = (uint64_t)cf;
                      v38 = ~v31;
                      if (v82)
                      {
                        v3 = *(_QWORD *)&v84[0];
                        *(_QWORD *)(v82 + 8 * *(_QWORD *)&v84[0]) = *v43;
                      }
                      if (v79)
                      {
                        v3 = *(_QWORD *)&v84[0];
                        v4 = v70;
                        *(_QWORD *)(v70 + 8 * *(_QWORD *)&v84[0]) = *v39;
                      }
                      if (v78)
                      {
                        v3 = v69;
                        *(_QWORD *)(v69 + 8 * *(_QWORD *)&v84[0]) = v57;
                      }
                      if (v77)
                      {
                        v3 = *(_QWORD *)&v84[0];
                        v4 = v68;
                        *(_QWORD *)(v68 + 8 * *(_QWORD *)&v84[0]) = *v56;
                      }
                      if (v76)
                      {
                        v3 = *(_QWORD *)&v84[0];
                        v4 = v73;
                        *(_QWORD *)(v73 + 8 * *(_QWORD *)&v84[0]) = *v45;
                      }
                      if (v75)
                      {
                        v3 = *(_QWORD *)&v84[0];
                        v4 = v72;
                        *(_QWORD *)(v72 + 8 * *(_QWORD *)&v84[0]) = *v51;
                      }
                      if (v74)
                      {
                        v3 = *(_QWORD *)&v84[0];
                        v4 = v71;
                        *(_QWORD *)(v71 + 8 * *(_QWORD *)&v84[0]) = *v50;
                      }
                    }
                    ++v50;
                    ++v51;
                    ++v45;
                    ++v56;
                    ++v39;
                    ++v43;
                    --v55;
                  }
                  while (v55);
                }
                goto LABEL_165;
              }
              v2 = (unsigned __int16)v2 >> 13;
              if (v2)
              {
                v37 = a1 + 8 * v2;
                v61 = *(void **)(v37 + 40);
                *(_QWORD *)(v37 + 40) = v16;
                if (!v7)
                  goto LABEL_165;
                goto LABEL_100;
              }
            }
          }
        }
      }
    }
    if ((unint64_t)(v10 - 0x1000000000000000) >> 61 != 7)
      break;
    v17 = 8 * v10;
    v18 = CFGetAllocator((CFTypeRef)a1);
    a1 = MEMORY[0x186DA6248](v18, 8 * v10, 2973864055, 0);
    if (a1)
    {
      v19 = (_BYTE *)MEMORY[0x1E0C9A980];
      v81 = a1;
      if (*MEMORY[0x1E0C9A980])
        __CFSetLastAllocationEventName();
      a1 = (uint64_t)cf;
      if ((cf[16] & 4) != 0)
      {
        v20 = CFGetAllocator(cf);
        a1 = MEMORY[0x186DA6248](v20, 8 * v10, 2973864055, 0);
        if (a1)
        {
          v11 = (_QWORD *)a1;
          if (*v19)
            __CFSetLastAllocationEventName();
          a1 = (uint64_t)cf;
          goto LABEL_19;
        }
      }
      else
      {
        v11 = 0;
LABEL_19:
        if ((*(_BYTE *)(a1 + 16) & 0x18) != 0)
        {
          v21 = CFGetAllocator((CFTypeRef)a1);
          a1 = MEMORY[0x186DA6248](v21, 8 * v10, 2973864055, 0);
          if (a1)
          {
            v12 = (_QWORD *)a1;
            if (*v19)
              __CFSetLastAllocationEventName();
            a1 = (uint64_t)cf;
            goto LABEL_25;
          }
        }
        else
        {
          v12 = 0;
LABEL_25:
          if ((*(_BYTE *)(a1 + 16) & 0x60) != 0)
          {
            v22 = CFGetAllocator((CFTypeRef)a1);
            a1 = MEMORY[0x186DA6248](v22, 8 * v10, 2973864055, 0);
            if (a1)
            {
              v13 = (_QWORD *)a1;
              if (*v19)
                __CFSetLastAllocationEventName();
              a1 = (uint64_t)cf;
              goto LABEL_31;
            }
          }
          else
          {
            v13 = 0;
LABEL_31:
            if ((*(_WORD *)(a1 + 16) & 0x380) != 0)
            {
              v23 = CFGetAllocator((CFTypeRef)a1);
              if (__CFAllocatorRespectsHintZeroWhenAllocating())
              {
                a1 = MEMORY[0x186DA6248](v23, 8 * v10, 49052816, 1);
                v14 = a1;
                v2 = MEMORY[0x1E0C9A980];
                if (a1)
                  goto LABEL_38;
              }
              else
              {
                a1 = MEMORY[0x186DA6248](v23, 8 * v10, 3626294421, 0);
                if (a1)
                {
                  v14 = a1;
                  bzero((void *)a1, 8 * v10);
                  v2 = MEMORY[0x1E0C9A980];
LABEL_38:
                  if (*(_BYTE *)v2)
                    __CFSetLastAllocationEventName();
                  a1 = (uint64_t)cf;
                  goto LABEL_41;
                }
              }
            }
            else
            {
              v14 = 0;
LABEL_41:
              v80 = v8;
              if ((*(_BYTE *)(a1 + 17) & 0x1C) == 0)
              {
                v25 = v10;
                v26 = 0;
                goto LABEL_51;
              }
              v24 = CFGetAllocator((CFTypeRef)a1);
              v25 = v10;
              if (__CFAllocatorRespectsHintZeroWhenAllocating())
              {
                a1 = MEMORY[0x186DA6248](v24, 8 * v10, 49052816, 1);
                v26 = a1;
                v2 = MEMORY[0x1E0C9A980];
                if (a1)
                {
LABEL_48:
                  if (*(_BYTE *)v2)
                    __CFSetLastAllocationEventName();
                  a1 = (uint64_t)cf;
LABEL_51:
                  if ((*(_BYTE *)(a1 + 17) & 0xE0) == 0)
                  {
                    v16 = 0;
                    v5 = (_QWORD *)v81;
                    v15 = v26;
                    goto LABEL_61;
                  }
                  v27 = CFGetAllocator((CFTypeRef)a1);
                  if (__CFAllocatorRespectsHintZeroWhenAllocating())
                  {
                    a1 = MEMORY[0x186DA6248](v27, v17, 49052816, 1);
                    v28 = a1;
                    if (a1)
                      goto LABEL_58;
                  }
                  else
                  {
                    a1 = MEMORY[0x186DA6248](v27, v17, 3626294421, 0);
                    if (a1)
                    {
                      v28 = a1;
                      bzero((void *)a1, v17);
LABEL_58:
                      if (*MEMORY[0x1E0C9A980])
                        __CFSetLastAllocationEventName();
                      v5 = (_QWORD *)v81;
                      a1 = (uint64_t)cf;
                      v15 = v26;
                      v16 = v28;
LABEL_61:
                      v10 = v25;
                      v8 = v80;
                      goto LABEL_62;
                    }
                  }
                }
              }
              else
              {
                a1 = MEMORY[0x186DA6248](v24, 8 * v10, 3626294421, 0);
                if (a1)
                {
                  v26 = a1;
                  bzero((void *)a1, v17);
                  v2 = MEMORY[0x1E0C9A980];
                  goto LABEL_48;
                }
              }
            }
          }
        }
      }
    }
  }
  qword_1EDC47C18 = (uint64_t)"overflow while growing CFBasicHash";
  __break(1u);
}

_OWORD *__NSHashTableCallback(int a1, int a2, _OWORD *a3, _OWORD *a4, _QWORD *a5)
{
  _OWORD *result;
  _QWORD *v8;
  void (*v9)(_QWORD, _OWORD *);
  void (*v10)(_QWORD, _OWORD *);
  unsigned int (*v11)(_QWORD, _OWORD *, _OWORD *);
  uint64_t (*v12)(_QWORD, _OWORD *);
  const void *v13;
  uint64_t (*v14)(_QWORD, _OWORD *);

  result = 0;
  v8 = (_QWORD *)a5[1];
  switch(a2)
  {
    case 8:
      result = malloc_type_malloc(0x10uLL, 0xAB540196uLL);
      if (result)
      {
        *result = *(_OWORD *)a5;
      }
      else
      {
        qword_1EDC47C18 = (uint64_t)"unable to allocate space for callbacks";
        __break(1u);
      }
      return result;
    case 9:
      free(a5);
      return 0;
    case 10:
    case 12:
      v9 = (void (*)(_QWORD, _OWORD *))v8[3];
      if (v9)
        v9(a5[1], a3);
      goto LABEL_12;
    case 14:
    case 16:
      v10 = (void (*)(_QWORD, _OWORD *))v8[4];
      if (v10)
        v10(a5[1], a3);
      return 0;
    case 18:
    case 20:
      v11 = (unsigned int (*)(_QWORD, _OWORD *, _OWORD *))v8[2];
      if (v11)
        return (_OWORD *)v11(a5[1], a3, a4);
      else
        return (_OWORD *)(a3 == a4);
    case 22:
      v14 = (uint64_t (*)(_QWORD, _OWORD *))v8[1];
      if (v14)
        result = (_OWORD *)v14(a5[1], a3);
      else
LABEL_12:
        result = a3;
      break;
    case 24:
    case 26:
      v12 = (uint64_t (*)(_QWORD, _OWORD *))v8[5];
      if (v12)
      {
        v13 = (const void *)v12(a5[1], a3);
        result = CFRetain(v13);
      }
      else
      {
        result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, CFSTR("<%p>"), a3);
      }
      break;
    default:
      return result;
  }
  return result;
}

NSMapTable *__cdecl NSCreateMapTable(NSMapTableKeyCallBacks *keyCallBacks, NSMapTableValueCallBacks *valueCallBacks, NSUInteger capacity)
{
  NSZone *v3;
  __int128 v4;
  NSMapTableValueCallBacks v6;
  NSMapTableKeyCallBacks keyCallBacksa;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)&keyCallBacks->retain;
  *(_OWORD *)&keyCallBacksa.hash = *(_OWORD *)&keyCallBacks->hash;
  *(_OWORD *)&keyCallBacksa.retain = v4;
  *(_OWORD *)&keyCallBacksa.describe = *(_OWORD *)&keyCallBacks->describe;
  v6 = *valueCallBacks;
  return NSCreateMapTableWithZone(&keyCallBacksa, &v6, capacity, v3);
}

NSMapTable *__cdecl NSCreateMapTableWithZone(NSMapTableKeyCallBacks *keyCallBacks, NSMapTableValueCallBacks *valueCallBacks, NSUInteger capacity, NSZone *zone)
{
  objc_class *v6;
  NSZone *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  NSString *(__cdecl *describe)(NSMapTable *, const void *);
  NSMapTable *result;
  uint64_t v13;
  unint64_t v14;

  v6 = (objc_class *)objc_opt_self();
  v7 = (NSZone *)malloc_default_zone();
  v8 = (char *)NSAllocateObject(v6, 0, v7);
  v9 = *(_OWORD *)&keyCallBacks->hash;
  v10 = *(_OWORD *)&keyCallBacks->describe;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&keyCallBacks->retain;
  *(_OWORD *)(v8 + 40) = v10;
  *(_OWORD *)(v8 + 8) = v9;
  describe = valueCallBacks->describe;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)&valueCallBacks->retain;
  *((_QWORD *)v8 + 9) = describe;
  result = (NSMapTable *)malloc_type_malloc(0x10uLL, 0x80040B8603338uLL);
  if (result)
  {
    result->super.isa = (Class)__NSMapTableCallback;
    result[1].super.isa = (Class)v8;
    v13 = 10248;
    if (!keyCallBacks->retain)
      v13 = 8200;
    if (valueCallBacks->retain)
      v13 |= 0x200uLL;
    if (keyCallBacks->release)
      v13 |= 0x800uLL;
    if (valueCallBacks->release)
      v14 = v13 | 0x200;
    else
      v14 = v13;
    *((_QWORD *)v8 + 10) = CFBasicHashCreate(*MEMORY[0x1E0C9AE30], v14, (uint64_t)result);
    return (NSMapTable *)v8;
  }
  else
  {
    qword_1EDC47C18 = (uint64_t)"unable to allocate space for callbacks";
    __break(1u);
  }
  return result;
}

_QWORD *CFBasicHashCreate(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!__kCFBasicHashTypeID)
    __kCFBasicHashTypeID = _CFRuntimeRegisterClass();
  result = (_QWORD *)_CFRuntimeCreateInstance();
  if (result)
  {
    v6 = result[2] & 0xFFFFFFFFFFFFFFFCLL | (a2 >> 13) & 3;
    v7 = ((a2 & 0xA00) >> 5) | ((unint64_t)((unsigned __int16)a2 & 0x8000) >> 12) | result[3] & 0xFFFFFFFFFFFFLL | 0x1000000000000;
    if ((a2 & 8) != 0)
      v6 = result[2] & 0xFFFFFFFFFFFFFFE4 | (a2 >> 13) & 3 | 8;
    v8 = 1;
    if ((a2 & 8) != 0)
      v8 = 2;
    if ((a2 & 0x20) != 0)
    {
      v6 = v6 & 0xFFFFFFFFFFFFFC7FLL | (v8 << 7);
      LOBYTE(v8) = v8 + 1;
    }
    if ((a2 & 0x80) != 0)
      v6 = v6 & 0xFFFFFFFFFFFF1FFFLL | ((unint64_t)(v8 & 7) << 13);
    result[2] = v6;
    result[3] = v7;
    result[4] = a3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void NSKVOPendingNotificationStackIdentifierRelease(uint64_t a1, id *a2)
{

  free(a2);
}

ValueMetadata *type metadata accessor for URLResourceValues()
{
  return &type metadata for URLResourceValues;
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, id *a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  *a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2[1] = v4;
  return 1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AnyHashable()
{
  uint64_t v0;
  _QWORD v2[4];

  AnyHashable.base.getter();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  v0 = _bridgeAnythingToObjectiveC<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v0;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t storeEnumTagSinglePayload for Locale.IdentifierType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18184E4D0 + 4 * byte_182069A89[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18184E504 + 4 * byte_182069A84[v4]))();
}

uint64_t sub_18184E504(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18184E50C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18184E514);
  return result;
}

uint64_t sub_18184E520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18184E528);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18184E52C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18184E534(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result;

  result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2())
      return a1;
    else
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NSObject.KeyValueObservingPublisher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NSObject.KeyValueObservingPublisher(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

void DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, unsigned int (*a5)(char *, uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  char *v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, char *, uint64_t);
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v50 = a5;
  v51 = a7;
  v53 = a2;
  v55 = a1;
  v7 = *(char **)(a6 + 8);
  v45 = a3;
  v46 = v7;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v52 = AssociatedConformanceWitness;
  v9 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v38 - v11;
  v13 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v38 - v14;
  v16 = swift_checkMetadataState();
  MEMORY[0x1E0C80A78](v16);
  v41 = (char *)&v38 - v17;
  v43 = v18;
  v44 = v9;
  v19 = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v42 = (char *)&v38 - v21;
  v54 = swift_checkMetadataState();
  v47 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v23 = (char *)&v38 - v22;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v24 = type metadata accessor for Range();
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v38 - v27;
  if (v55)
  {
    v38 = v26;
    v39 = v20;
    v48 = v25;
    dispatch thunk of RangeExpression.relative<A>(to:)();
    dispatch thunk of Collection.subscript.getter();
    v57 = 0;
    v45 = v28;
    v29 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    v30 = v53 - v55;
    if (v29 < v53 - v55)
      v30 = v29;
    v56 = v30;
    v31 = *(void (**)(uint64_t))(v52 + 64);
    v46 = v23;
    v31(v54);
    v32 = v42;
    dispatch thunk of Sequence.makeIterator()();
    v51 = swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    v33 = v40;
    v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    if (v50(v15, 1, AssociatedTypeWitness) != 1)
    {
      v49 = *(uint64_t (**)(char *, char *, uint64_t))(v33 + 32);
      v34 = MEMORY[0x1E0DEE9C0] + 8;
      while (1)
      {
        v35 = v49(v12, v15, AssociatedTypeWitness);
        if (v56 < 1)
          break;
        MEMORY[0x1E0C80A78](v35);
        v36 = v53;
        *(&v38 - 4) = v55;
        *(&v38 - 3) = v36;
        *(&v38 - 2) = (uint64_t)&v57;
        *(&v38 - 1) = (uint64_t)&v56;
        v37 = swift_getAssociatedConformanceWitness();
        (*(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t *, uint64_t, uint64_t, uint64_t))(v37 + 8))(partial apply for closure #1 in DataProtocol.copyBytes<A>(to:from:), &v38 - 6, v34, AssociatedTypeWitness, v37);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v12, AssociatedTypeWitness);
        dispatch thunk of IteratorProtocol.next()();
        if (v50(v15, 1, AssociatedTypeWitness) == 1)
          goto LABEL_10;
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v12, AssociatedTypeWitness);
    }
LABEL_10:
    (*(void (**)(char *, uint64_t))(v39 + 8))(v32, v19);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v54);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v45, v48);
  }
  else
  {
    __break(1u);
  }
}

uint64_t storeEnumTagSinglePayload for Data(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Data(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

void protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance Data(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  Data.withUnsafeBytes<A>(_:)(a1, a2, *v2, v2[1]);
}

void Data.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_18184EC80()
{
  uint64_t (*v0)(uint64_t *, char *);
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v4 = v1;
  v5 = v2;
  v6 = BYTE2(v2);
  v7 = BYTE3(v2);
  v8 = BYTE4(v2);
  v9 = BYTE5(v2);
  return v0(&v4, (char *)&v4 + BYTE6(v2));
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance Data@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return outlined copy of Data._Representation(v2, v3);
}

void protocol witness for Collection.subscript.getter in conformance Data(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  Data._Representation.subscript.getter(*a1, a1[1], *v2, v2[1]);
  *a2 = v4;
  a2[1] = v5;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *(_QWORD *)v2, *(_QWORD *)(v2 + 8));
}

uint64_t partial apply for closure #1 in DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in DataProtocol.copyBytes<A>(to:from:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(uint64_t **)(v2 + 32), *(_QWORD **)(v2 + 40));
}

uint64_t closure #1 in DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v8 = result;
  v9 = *a5;
  if (a3)
  {
    if (a4 - a3 < v9)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    if (result)
      goto LABEL_4;
    goto LABEL_9;
  }
  if (v9 <= 0)
  {
    if (result)
    {
LABEL_4:
      v10 = a2 - result;
      if (*a6 < a2 - result)
        v10 = *a6;
      v11 = result + v10;
      goto LABEL_10;
    }
LABEL_9:
    v11 = 0;
LABEL_10:
    result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v12 = v11 - v8;
    if (!v8)
      v12 = 0;
    if (__OFADD__(*a5, v12))
    {
      __break(1u);
    }
    else
    {
      *a5 += v12;
      v13 = __OFSUB__(*a6, v12);
      v14 = *a6 - v12;
      if (!v13)
      {
        *a6 = v14;
        return result;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
  return result;
}

void ____addOperations_block_invoke_2(uint64_t a1)
{
  __NSOQSchedule_f(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

ValueMetadata *type metadata accessor for URLComponents()
{
  return &type metadata for URLComponents;
}

void ____addOperations_block_invoke_4(uint64_t a1)
{
  __NSOQSchedule_f(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

id __NSCreateBPlistMappedString(uint64_t a1, uint64_t a2)
{
  return +[_NSBPlistMappedString createStringWithOffset:intoMappingData:](_NSBPlistMappedString, "createStringWithOffset:intoMappingData:", a1, a2);
}

uint64_t closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)partial apply(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)(a1, a2);
}

uint64_t partial apply for closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t closure #1 in closure #2 in static String._unconditionallyBridgeFromObjectiveC(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  _CFNonObjCStringGetBytes();

  return 0;
}

uint64_t URL.absoluteString.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  __int128 *v3;
  unint64_t v4;
  __int128 *v5;
  uint64_t v6;
  void *v7;
  _BYTE *v8;
  char v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String_optional v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  char v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  void *v77;
  unsigned __int16 *v78;
  id v79;
  void *v80;
  id v81;
  char v82;
  char v83;
  unint64_t v84;
  void *v85;
  unsigned __int16 *v86;
  id v87;
  void *v88;
  id v89;
  char v90;
  unint64_t v91;
  void *v92;
  unsigned __int16 *v93;
  id v94;
  void *v95;
  id v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  __int16 v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  id v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  Swift::String v133;
  char v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 *v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  unsigned __int16 *v160;
  id v161;
  void *v162;
  id v163;
  char v164;
  void *v165;
  unsigned __int16 *v166;
  id v167;
  void *v168;
  id v169;
  char v170;
  void *v171;
  unsigned __int16 *v172;
  id v173;
  void *v174;
  id v175;
  char v176;
  void *v177;
  unsigned __int16 *v178;
  id v179;
  void *v180;
  id v181;
  char v182;
  Swift::Int v183;
  char v184;
  char v185;
  char v186;
  char v187;
  char v188;
  char v189;
  void *v190;
  unsigned __int16 *v191;
  id v192;
  void *v193;
  id v194;
  char v195;
  char v196;
  _BYTE v197[16];
  uint64_t i;
  int v199;
  __int128 v200;
  uint64_t v201;
  __int128 *v202;
  __int128 v203;
  _OWORD v204[5];
  __int128 v205;
  _OWORD v206[3];
  char v207;
  __int128 v208;
  _BYTE v209[80];
  _BYTE v210[58];
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  _OWORD v219[3];

  v7 = *(void **)v0;
  v6 = *(_QWORD *)(v0 + 8);
  v8 = *(_BYTE **)(v0 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    v10 = objc_msgSend(v7, sel_absoluteString);
    if (!v10)
      return 0;
    v11 = v10;
    v12 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    goto LABEL_12;
  }
  if (!v8)
  {
    swift_retain();
    v11 = v7;
    if (!_foundation_swift_url_feature_enabled())
    {
      v14 = objc_msgSend(v11, sel_relativeString);
      v12 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      swift_release();

      return v12;
    }
    if (!v6)
    {
      __break(1u);
LABEL_233:
      __break(1u);
      goto LABEL_234;
    }
    v12 = *(_QWORD *)(v6 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_12:

    return v12;
  }
  if (!v6)
  {
    __break(1u);
    goto LABEL_227;
  }
  v5 = &v211;
  v9 = *(_BYTE *)(v6 + 218);
  v4 = (unint64_t)&v208;
  v207 = 1;
  *(_QWORD *)&v208 = v6;
  *((_QWORD *)&v208 + 1) = 0x101010101010101;
  v209[0] = 1;
  memset(&v209[8], 0, 72);
  v210[0] = 1;
  memset(&v210[8], 0, 48);
  v210[56] = v9;
  v210[57] = 0;
  if ((*(_BYTE *)(v6 + 48) & 1) == 0)
  {
    swift_retain();
    swift_retain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v6 + 168) & 1) != 0)
      v13 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v13 = String.subscript.getter();
    v27 = MEMORY[0x186DA4634](v13);
    v29 = v28;
    swift_bridgeObjectRelease();
    v30 = String._removingDotSegments.getter(v27, v29);
    v32 = v31;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    BYTE14(v208) = 0;
    if ((v32 & 0x1000000000000000) != 0)
    {
      *(_QWORD *)&v211 = v30;
      *((_QWORD *)&v211 + 1) = v32;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v77 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v78 = (unsigned __int16 *)objc_msgSend(v77, sel__fastCharacterContents);
      v79 = v77;
      if (v78)
      {
        *(_QWORD *)&v211 = v30;
        *((_QWORD *)&v211 + 1) = v32;
        StringProtocol._ephemeralString.getter();
        v80 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v81 = objc_msgSend(v80, sel_length);
        swift_unknownObjectRelease();
        v82 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v78, (uint64_t)v81, 0x10u, 1);
      }
      else
      {
        v82 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v30, v32, 0x10u, 1);
      }
      v83 = v82;
      swift_bridgeObjectRelease_n();
      if ((v83 & 1) == 0)
        goto LABEL_222;
    }
    else if ((v32 & 0x2000000000000000) != 0)
    {
      *(_QWORD *)&v211 = v30;
      *((_QWORD *)&v211 + 1) = v32 & 0xFFFFFFFFFFFFFFLL;
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)((char *)&v211, HIBYTE(v32) & 0xF, 0x10u, 1))goto LABEL_222;
    }
    else
    {
      if ((v30 & 0x1000000000000000) != 0)
      {
        v33 = (char *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v34 = v30 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v33 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v33, v34, 0x10u, 1))
        goto LABEL_222;
    }
    swift_bridgeObjectRelease();
    v26 = v208;
    v203 = v208;
    LOBYTE(v204[0]) = v209[0];
    *(_OWORD *)((char *)v204 + 8) = *(_OWORD *)&v209[8];
    *(_OWORD *)((char *)&v204[1] + 8) = *(_OWORD *)&v209[24];
    *(_OWORD *)((char *)&v204[2] + 8) = *(_OWORD *)&v209[40];
    *(_OWORD *)((char *)&v204[3] + 8) = *(_OWORD *)&v209[56];
    *((_QWORD *)&v204[4] + 1) = *(_QWORD *)&v209[72];
    LOBYTE(v205) = v210[0];
    *((_QWORD *)&v205 + 1) = v30;
    *(_QWORD *)&v206[0] = v32;
    *(_OWORD *)((char *)v206 + 8) = *(_OWORD *)&v210[24];
    *(_OWORD *)((char *)&v206[1] + 8) = *(_OWORD *)&v210[40];
    WORD4(v206[2]) = *(_WORD *)&v210[56];
    v213 = v204[1];
    v214 = v204[2];
    v211 = v208;
    v212 = v204[0];
    *(_OWORD *)((char *)v219 + 10) = *(_OWORD *)((char *)&v206[1] + 10);
    v218 = v206[0];
    v219[0] = v206[1];
    v216 = v204[4];
    v217 = v205;
    v215 = v204[3];
    if ((BYTE8(v208) & 1) != 0)
    {
      if ((_QWORD)v208)
        goto LABEL_41;
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v203);
      v12 = URLComponents._URLComponents.computedString.getter();
      v36 = v35;
      outlined release of URLComponents((uint64_t)&v203);
      if (v36)
        goto LABEL_46;
    }
    v37 = v7;
    swift_retain();
    swift_retain();
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
LABEL_48:
      v12 = *(_QWORD *)(v6 + 16);
      swift_bridgeObjectRetain();
      swift_release();

      swift_release_n();
      goto LABEL_51;
    }
LABEL_49:
    v40 = objc_msgSend(v37, sel_relativeString);
    goto LABEL_50;
  }
  v1 = 0;
  if (v8[48] != 1)
  {
    swift_retain();
    swift_retain();
    v15 = String.subscript.getter();
    v16 = MEMORY[0x186DA4634](v15);
    v18 = v17;
    swift_bridgeObjectRelease();
    v19.value._countAndFlagsBits = v16;
    v19.value._object = v18;
    URLComponents._URLComponents.setScheme(_:)(v19);
    if (!v1)
    {
      swift_bridgeObjectRelease();
      v4 = (unint64_t)&v208;
      goto LABEL_19;
    }
LABEL_234:

    swift_bridgeObjectRelease();
    v199 = 0;
    i = 714;
    goto LABEL_235;
  }
  swift_retain();
  swift_retain();
LABEL_19:
  if (*(_BYTE *)(v6 + 72) != 1
    || *(_BYTE *)(v6 + 96) != 1
    || *(_BYTE *)(v6 + 120) != 1
    || (*(_BYTE *)(v6 + 144) & 1) == 0)
  {
    v205 = *(_OWORD *)v210;
    v206[0] = *(_OWORD *)&v210[16];
    v206[1] = *(_OWORD *)&v210[32];
    *(_OWORD *)((char *)&v206[1] + 10) = *(_OWORD *)&v210[42];
    v204[1] = *(_OWORD *)&v209[16];
    v204[2] = *(_OWORD *)&v209[32];
    v204[3] = *(_OWORD *)&v209[48];
    v204[4] = *(_OWORD *)&v209[64];
    v203 = v208;
    v204[0] = *(_OWORD *)v209;
    v217 = *(_OWORD *)v210;
    v218 = *(_OWORD *)&v210[16];
    v219[0] = *(_OWORD *)&v210[32];
    *(_OWORD *)((char *)v219 + 10) = *(_OWORD *)&v210[42];
    v213 = *(_OWORD *)&v209[16];
    v214 = *(_OWORD *)&v209[32];
    v215 = *(_OWORD *)&v209[48];
    v216 = *(_OWORD *)&v209[64];
    v211 = v208;
    v212 = *(_OWORD *)v209;
    if (BYTE8(v208) != 1)
    {
      outlined retain of URLComponents((uint64_t)&v203);
      v12 = URLComponents._URLComponents.computedString.getter();
      v39 = v38;
      outlined release of URLComponents((uint64_t)&v203);
      if (v39)
        goto LABEL_46;
LABEL_47:
      v37 = v7;
      swift_retain();
      swift_retain();
      if ((_foundation_swift_url_feature_enabled() & 1) != 0)
        goto LABEL_48;
      goto LABEL_49;
    }
    v26 = v203;
    if (!(_QWORD)v203)
      goto LABEL_47;
LABEL_41:
    v12 = *(_QWORD *)(v26 + 16);
    swift_bridgeObjectRetain();
LABEL_46:
    swift_release();
    outlined release of URLComponents((uint64_t)&v203);
    return v12;
  }
  if ((v8[72] & 1) != 0)
    goto LABEL_56;
  v20 = String.subscript.getter();
  v21 = MEMORY[0x186DA4634](v20);
  v23 = v22;
  swift_bridgeObjectRelease();
  BYTE8(v208) = 0;
  BYTE10(v208) = 0;
  if ((v23 & 0x1000000000000000) != 0)
  {
    *(_QWORD *)&v211 = v21;
    *((_QWORD *)&v211 + 1) = v23;
    v84 = lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    v202 = (__int128 *)v84;
    StringProtocol._ephemeralString.getter();
    v85 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v86 = (unsigned __int16 *)objc_msgSend(v85, sel__fastCharacterContents);
    v87 = v85;
    if (v86)
    {
      *(_QWORD *)&v211 = v21;
      *((_QWORD *)&v211 + 1) = v23;
      StringProtocol._ephemeralString.getter();
      v88 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v89 = objc_msgSend(v88, sel_length);
      swift_unknownObjectRelease();
      v90 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v86, (uint64_t)v89, 2u, 1);
      goto LABEL_201;
    }
    goto LABEL_200;
  }
  if ((v23 & 0x2000000000000000) != 0)
  {
    v25 = HIBYTE(v23) & 0xF;
    *(_QWORD *)&v211 = v21;
    *((_QWORD *)&v211 + 1) = v23 & 0xFFFFFFFFFFFFFFLL;
    v24 = (char *)&v211;
  }
  else if ((v21 & 0x1000000000000000) != 0)
  {
    v24 = (char *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v25 = v21 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v24 = (char *)_StringObject.sharedUTF8.getter();
  }
  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v24, v25, 2u, 1))
  {
LABEL_202:
    swift_bridgeObjectRelease();
    v199 = 0;
    i = 810;
    goto LABEL_235;
  }
  while (1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)&v209[24] = v21;
    *(_QWORD *)&v209[32] = v23;
LABEL_56:
    if ((v8[96] & 1) == 0)
    {
      v43 = String.subscript.getter();
      v44 = MEMORY[0x186DA4634](v43);
      v46 = v45;
      swift_bridgeObjectRelease();
      BYTE8(v208) = 0;
      BYTE11(v208) = 0;
      if ((v46 & 0x1000000000000000) != 0)
      {
        *(_QWORD *)&v211 = v44;
        *((_QWORD *)&v211 + 1) = v46;
        v91 = lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        v202 = (__int128 *)v91;
        StringProtocol._ephemeralString.getter();
        v92 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v93 = (unsigned __int16 *)objc_msgSend(v92, sel__fastCharacterContents);
        v94 = v92;
        if (v93)
        {
          *(_QWORD *)&v211 = v44;
          *((_QWORD *)&v211 + 1) = v46;
          StringProtocol._ephemeralString.getter();
          v95 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v96 = objc_msgSend(v95, sel_length);
          swift_unknownObjectRelease();
          v97 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v93, (uint64_t)v96, 2u, 1);
        }
        else
        {
          v97 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v44, v46, 2u, 1);
        }
        v185 = v97;
        swift_bridgeObjectRelease();
        v5 = &v211;
        v4 = (unint64_t)&v208;
        if ((v185 & 1) == 0)
        {
LABEL_205:
          swift_bridgeObjectRelease();
          v199 = 0;
          i = 831;
          goto LABEL_235;
        }
      }
      else
      {
        if ((v46 & 0x2000000000000000) != 0)
        {
          v48 = HIBYTE(v46) & 0xF;
          *(_QWORD *)&v211 = v44;
          *((_QWORD *)&v211 + 1) = v46 & 0xFFFFFFFFFFFFFFLL;
          v47 = (char *)&v211;
        }
        else if ((v44 & 0x1000000000000000) != 0)
        {
          v47 = (char *)((v46 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v48 = v44 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v47 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v47, v48, 2u, 1))
          goto LABEL_205;
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)&v209[40] = v44;
      *(_QWORD *)&v209[48] = v46;
    }
    if ((v8[120] & 1) != 0)
      goto LABEL_92;
    v49 = String.subscript.getter();
    v50 = MEMORY[0x186DA4634](v49);
    v23 = v51;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    BYTE12(v208) = 0;
    *(_WORD *)&v210[56] = 0;
    v52 = specialized Collection.first.getter(v50, v23);
    if ((v52 & 0x1FF) != 0x5B)
      goto LABEL_85;
    if ((v23 & 0x1000000000000000) != 0)
    {
      v183 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v183, 1))
        goto LABEL_233;
      v54 = (v50 >> 59) & 1;
      v52 = MEMORY[0x186DA485C](15, v183 - 1, v50, v23);
LABEL_71:
      if ((v52 & 0xC) != 4 << v54)
        goto LABEL_72;
      goto LABEL_198;
    }
    v53 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0)
      v53 = v50 & 0xFFFFFFFFFFFFLL;
    if (v53)
    {
      v52 = (v53 << 16) - 65532;
      LOBYTE(v54) = 1;
      goto LABEL_71;
    }
    __break(1u);
LABEL_198:
    v52 = _StringGuts._slowEnsureMatchingEncoding(_:)(v52, v50, v23);
LABEL_72:
    v55 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0)
      v55 = v50 & 0xFFFFFFFFFFFFLL;
    v21 = v52 >> 16;
    if (v52 >> 16 < v55)
      break;
    __break(1u);
LABEL_200:
    v90 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, v23, 2u, 1);
LABEL_201:
    v184 = v90;
    swift_bridgeObjectRelease();
    v5 = &v211;
    v4 = (unint64_t)&v208;
    if ((v184 & 1) == 0)
      goto LABEL_202;
  }
  if ((v23 & 0x1000000000000000) != 0)
  {
    v57 = String.UTF8View._foreignSubscript(position:)();
  }
  else if ((v23 & 0x2000000000000000) != 0)
  {
    *(_QWORD *)&v211 = v50;
    *((_QWORD *)&v211 + 1) = v23 & 0xFFFFFFFFFFFFFFLL;
    v57 = *((_BYTE *)&v211 + v21);
  }
  else
  {
    if ((v50 & 0x1000000000000000) != 0)
      v56 = (v23 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v56 = _StringObject.sharedUTF8.getter();
    v57 = *(_BYTE *)(v56 + v21);
  }
  if (v57 != 93)
  {
LABEL_85:
    if ((v23 & 0x1000000000000000) != 0)
    {
      v202 = (__int128 *)v50;
      *(_QWORD *)&v211 = v50;
      *((_QWORD *)&v211 + 1) = v23;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v165 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v166 = (unsigned __int16 *)objc_msgSend(v165, sel__fastCharacterContents);
      v167 = v165;
      if (v166)
      {
        *(_QWORD *)&v211 = v202;
        *((_QWORD *)&v211 + 1) = v23;
        StringProtocol._ephemeralString.getter();
        v50 = (unint64_t)v202;
        v168 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v169 = objc_msgSend(v168, sel_length);
        swift_unknownObjectRelease();
        v170 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v166, (uint64_t)v169, 4u, 1);
      }
      else
      {
        v50 = (unint64_t)v202;
        v170 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)((unint64_t)v202, v23, 4u, 1);
      }
      v187 = v170;
      swift_bridgeObjectRelease_n();
      v5 = &v211;
      if ((v187 & 1) != 0)
        goto LABEL_91;
    }
    else
    {
      if ((v23 & 0x2000000000000000) != 0)
      {
        v60 = HIBYTE(v23) & 0xF;
        *(_QWORD *)&v211 = v50;
        *((_QWORD *)&v211 + 1) = v23 & 0xFFFFFFFFFFFFFFLL;
        v59 = (char *)&v211;
      }
      else if ((v50 & 0x1000000000000000) != 0)
      {
        v59 = (char *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v60 = v50 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v59 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v59, v60, 4u, 1))
        goto LABEL_91;
    }
LABEL_84:
    swift_bridgeObjectRelease();
    v199 = 0;
    i = 876;
    goto LABEL_235;
  }
  swift_bridgeObjectRetain();
  v58 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v50, v23);
  swift_bridgeObjectRelease();
  if ((v58 & 1) == 0)
    goto LABEL_84;
LABEL_91:
  swift_bridgeObjectRetain();
  v61 = swift_bridgeObjectRelease();
  *(_QWORD *)&v209[56] = v50;
  *(_QWORD *)&v209[64] = v23;
  LOBYTE(v211) = 37;
  MEMORY[0x1E0C80A78](v61);
  i = (uint64_t)&v211;
  swift_bridgeObjectRetain();
  v62 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v197, v50, v23);
  swift_bridgeObjectRelease_n();
  v210[56] = v62 & 1;
  v4 = (unint64_t)&v208;
LABEL_92:
  if ((v8[144] & 1) != 0)
    goto LABEL_100;
  v63 = String.subscript.getter();
  v67 = v66;
  if ((v63 ^ v64) >> 14)
  {
    v68 = v63;
    v69 = v64;
    v70 = v65;
    v202 = (__int128 *)_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v63, v64, v65, v66, 10);
    if ((v71 & 0x100) != 0)
    {
      v73 = specialized _parseInteger<A, B>(ascii:radix:)(v68, v69, v70, v67, 10);
      v75 = v74;
      swift_bridgeObjectRelease();
      v5 = &v211;
      v4 = (unint64_t)&v208;
      if ((v75 & 1) == 0)
      {
LABEL_98:
        BYTE8(v208) = 0;
        BYTE13(v208) = 0;
        if (v73 < 0)
          goto LABEL_236;
        *(_QWORD *)&v209[72] = v73;
        v210[0] = 0;
      }
    }
    else
    {
      v72 = v71;
      swift_bridgeObjectRelease();
      v5 = &v211;
      v4 = (unint64_t)&v208;
      if ((v72 & 1) == 0)
      {
        v73 = (uint64_t)v202;
        goto LABEL_98;
      }
    }
LABEL_100:
    if ((*(_BYTE *)(v6 + 168) & 1) != 0)
    {
LABEL_101:
      v76 = MEMORY[0x186DA5030](0, 0xE000000000000000);
      goto LABEL_114;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = (unint64_t)&v208;
    if ((*(_BYTE *)(v6 + 168) & 1) != 0)
      goto LABEL_101;
  }
  v76 = String.subscript.getter();
LABEL_114:
  v98 = MEMORY[0x186DA4634](v76);
  v100 = v99;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v101 = HIBYTE(v100) & 0xF;
  if ((v100 & 0x2000000000000000) == 0)
    v101 = v98 & 0xFFFFFFFFFFFFLL;
  if (!v101)
  {
    v3 = &v203;
    if ((v8[168] & 1) != 0)
      v103 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v103 = String.subscript.getter();
    v111 = MEMORY[0x186DA4634](v103);
    v113 = v112;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    BYTE14(v208) = 0;
    if ((v113 & 0x1000000000000000) != 0)
    {
      *(_QWORD *)&v211 = v111;
      *((_QWORD *)&v211 + 1) = v113;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v159 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v160 = (unsigned __int16 *)objc_msgSend(v159, sel__fastCharacterContents);
      v161 = v159;
      if (v160)
      {
        *(_QWORD *)&v211 = v111;
        *((_QWORD *)&v211 + 1) = v113;
        StringProtocol._ephemeralString.getter();
        v162 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v163 = objc_msgSend(v162, sel_length);
        swift_unknownObjectRelease();
        v164 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v160, (uint64_t)v163, 0x10u, 1);
      }
      else
      {
        v164 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v111, v113, 0x10u, 1);
      }
      v186 = v164;
      swift_bridgeObjectRelease_n();
      v5 = &v211;
      v4 = (unint64_t)&v208;
      v3 = &v203;
      if ((v186 & 1) == 0)
        goto LABEL_222;
    }
    else
    {
      if ((v113 & 0x2000000000000000) != 0)
      {
        v115 = HIBYTE(v113) & 0xF;
        *(_QWORD *)&v211 = v111;
        *((_QWORD *)&v211 + 1) = v113 & 0xFFFFFFFFFFFFFFLL;
        v114 = (char *)&v211;
      }
      else if ((v111 & 0x1000000000000000) != 0)
      {
        v114 = (char *)((v113 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v115 = v111 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v114 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v114, v115, 0x10u, 1))
        goto LABEL_222;
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v210[8] = v111;
    *(_QWORD *)&v210[16] = v113;
    if ((*(_BYTE *)(v6 + 192) & 1) == 0)
    {
      String.subscript.getter();
      swift_bridgeObjectRelease();
      goto LABEL_179;
    }
    if ((v8[192] & 1) != 0)
      goto LABEL_179;
    v116 = String.subscript.getter();
    v2 = MEMORY[0x186DA4634](v116);
    v1 = v117;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    HIBYTE(v208) = 0;
    if ((v1 & 0x1000000000000000) != 0)
    {
      *(_QWORD *)&v211 = v2;
      *((_QWORD *)&v211 + 1) = v1;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v190 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v191 = (unsigned __int16 *)objc_msgSend(v190, sel__fastCharacterContents);
      v192 = v190;
      if (v191)
      {
        *(_QWORD *)&v211 = v2;
        *((_QWORD *)&v211 + 1) = v1;
        StringProtocol._ephemeralString.getter();
        v193 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v194 = objc_msgSend(v193, sel_length);
        swift_unknownObjectRelease();
        v195 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v191, (uint64_t)v194, 0x40u, 1);
      }
      else
      {
        v195 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v2, v1, 0x40u, 1);
      }
      v196 = v195;
      swift_bridgeObjectRelease();
      v5 = &v211;
      v4 = (unint64_t)&v208;
      v3 = &v203;
      if ((v196 & 1) != 0)
        goto LABEL_178;
      goto LABEL_231;
    }
    if ((v1 & 0x2000000000000000) != 0)
    {
      v119 = HIBYTE(v1) & 0xF;
      *(_QWORD *)&v211 = v2;
      *((_QWORD *)&v211 + 1) = v1 & 0xFFFFFFFFFFFFFFLL;
      v118 = (char *)&v211;
      goto LABEL_177;
    }
    if ((v2 & 0x1000000000000000) != 0)
    {
      v118 = (char *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v119 = v2 & 0xFFFFFFFFFFFFLL;
      goto LABEL_177;
    }
LABEL_228:
    v118 = (char *)_StringObject.sharedUTF8.getter();
LABEL_177:
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v118, v119, 0x40u, 1))
    {
LABEL_178:
      swift_bridgeObjectRelease();
      *(_QWORD *)&v210[24] = v2;
      *(_QWORD *)&v210[32] = v1;
      goto LABEL_179;
    }
LABEL_231:
    swift_bridgeObjectRelease();
    v199 = 0;
    i = 918;
    goto LABEL_235;
  }
  if ((*(_BYTE *)(v6 + 168) & 1) != 0)
    v102 = MEMORY[0x186DA5030](0, 0xE000000000000000);
  else
    v102 = String.subscript.getter();
  v104 = MEMORY[0x186DA4634](v102);
  v106 = v105;
  swift_bridgeObjectRelease();
  v107 = specialized Collection.first.getter(v104, v106);
  swift_bridgeObjectRelease();
  if ((v107 & 0x1FF) == 0x2F)
  {
    if ((*(_BYTE *)(v6 + 168) & 1) != 0)
      v108 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v108 = String.subscript.getter();
    v120 = MEMORY[0x186DA4634](v108);
    v122 = v121;
    swift_bridgeObjectRelease();
    v2 = String._removingDotSegments.getter(v120, v122);
    v1 = v123;
    swift_bridgeObjectRelease();
    BYTE8(v208) = 0;
    BYTE14(v208) = 0;
    if ((v1 & 0x1000000000000000) != 0)
    {
      *(_QWORD *)&v211 = v2;
      *((_QWORD *)&v211 + 1) = v1;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v171 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v172 = (unsigned __int16 *)objc_msgSend(v171, sel__fastCharacterContents);
      v173 = v171;
      if (v172)
      {
        *(_QWORD *)&v211 = v2;
        *((_QWORD *)&v211 + 1) = v1;
        StringProtocol._ephemeralString.getter();
        v174 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v175 = objc_msgSend(v174, sel_length);
        swift_unknownObjectRelease();
        v176 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v172, (uint64_t)v175, 0x10u, 1);
      }
      else
      {
        v176 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v2, v1, 0x10u, 1);
      }
      v188 = v176;
      swift_bridgeObjectRelease_n();
      v5 = &v211;
      v4 = (unint64_t)&v208;
      v3 = &v203;
      if ((v188 & 1) != 0)
        goto LABEL_162;
    }
    else
    {
      v3 = &v203;
      if ((v1 & 0x2000000000000000) != 0)
      {
        v125 = HIBYTE(v1) & 0xF;
        *(_QWORD *)&v211 = v2;
        *((_QWORD *)&v211 + 1) = v1 & 0xFFFFFFFFFFFFFFLL;
        v124 = (char *)&v211;
      }
      else
      {
        if ((v2 & 0x1000000000000000) != 0)
        {
          v124 = (char *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v125 = v2 & 0xFFFFFFFFFFFFLL;
          goto LABEL_161;
        }
LABEL_209:
        v124 = (char *)_StringObject.sharedUTF8.getter();
      }
LABEL_161:
      if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v124, v125, 0x10u, 1))
      {
LABEL_162:
        swift_bridgeObjectRelease();
        *(_QWORD *)&v210[8] = v2;
        *(_QWORD *)&v210[16] = v1;
        goto LABEL_179;
      }
    }
LABEL_222:
    swift_bridgeObjectRelease();
    v199 = 0;
    for (i = 897; ; i = 764)
    {
LABEL_235:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_236:
      v199 = 0;
    }
  }
  if ((*(_BYTE *)(v6 + 168) & 1) != 0)
  {
    v109 = v7;
    swift_retain();
    swift_retain();
    v110 = MEMORY[0x186DA5030](0, 0xE000000000000000);
  }
  else
  {
    v4 = *(_QWORD *)(v6 + 24);
    v126 = v7;
    swift_retain();
    swift_retain();
    v110 = String.subscript.getter();
  }
  v3 = (__int128 *)MEMORY[0x186DA4634](v110);
  v2 = v127;
  swift_bridgeObjectRelease();
  if ((specialized Collection.first.getter((uint64_t)v3, v2) & 0x1FF) == 0x2F)
  {
    __break(1u);
    goto LABEL_209;
  }
  if ((v8[168] & 1) != 0)
  {
    swift_retain();
    v128 = MEMORY[0x186DA5030](0, 0xE000000000000000);
  }
  else
  {
    v202 = (__int128 *)v2;
    swift_retain();
    v2 = (unint64_t)v202;
    v128 = String.subscript.getter();
  }
  v129 = MEMORY[0x186DA4634](v128);
  v4 = v130;
  swift_bridgeObjectRelease();
  if (v8[72] != 1 || (v8[96] & 1) == 0 || v8[120] != 1 || (v8[144] & 1) == 0)
  {
    v131 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v131 = v129 & 0xFFFFFFFFFFFFLL;
    if (!v131)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v211 = 47;
      *((_QWORD *)&v211 + 1) = 0xE100000000000000;
      v133._countAndFlagsBits = (uint64_t)v3;
      v133._object = (void *)v2;
      String.append(_:)(v133);
      swift_release();

      swift_bridgeObjectRelease();
      swift_release_n();
      v2 = *((_QWORD *)&v211 + 1);
      v3 = (__int128 *)v211;
      goto LABEL_167;
    }
  }
  v132 = specialized Collection.first.getter((uint64_t)v3, v2);
  if ((v132 & 0x1FF) == 0x2F)
  {
    swift_release();

    swift_release_n();
    swift_bridgeObjectRelease();
    goto LABEL_167;
  }
  v202 = v3;
  LOBYTE(v211) = 47;
  MEMORY[0x1E0C80A78](v132);
  i = (uint64_t)&v211;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection.lastIndex(where:)((unint64_t)closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v197, v129, v4);
  if ((v134 & 1) != 0)
  {
    swift_release();

    swift_release_n();
    swift_bridgeObjectRelease_n();
    v5 = &v211;
    v3 = v202;
    goto LABEL_168;
  }
  swift_bridgeObjectRetain();
  String.index(after:)();
  v5 = (__int128 *)String.subscript.getter();
  v1 = v135;
  v137 = v136;
  v3 = v138;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v203 = 0;
  *((_QWORD *)&v203 + 1) = 0xE000000000000000;
  v139 = String.count.getter();
  *((_QWORD *)&v200 + 1) = v3;
  v201 = v139;
  *(_QWORD *)&v200 = v137;
  v140 = Substring.distance(from:to:)();
  v141 = __OFADD__(v201, v140);
  v142 = v201 + v140;
  if (v141)
  {
LABEL_227:
    __break(1u);
    goto LABEL_228;
  }
  MEMORY[0x186DA4670](v142);
  *(_QWORD *)&v211 = v5;
  *((_QWORD *)&v211 + 1) = v1;
  v212 = v200;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  String.append<A>(contentsOf:)();
  *(_QWORD *)&v211 = v202;
  *((_QWORD *)&v211 + 1) = v2;
  String.append<A>(contentsOf:)();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v2 = *((_QWORD *)&v203 + 1);
  v3 = (__int128 *)v203;
LABEL_167:
  v5 = &v211;
LABEL_168:
  swift_bridgeObjectRetain();
  v143 = String._removingDotSegments.getter((unint64_t)v3, v2);
  v145 = v144;
  swift_bridgeObjectRelease_n();
  BYTE8(v208) = 0;
  BYTE14(v208) = 0;
  v4 = (unint64_t)&v208;
  if ((v145 & 0x1000000000000000) != 0)
  {
    *(_QWORD *)&v211 = v143;
    *((_QWORD *)&v211 + 1) = v145;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    v177 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v178 = (unsigned __int16 *)objc_msgSend(v177, sel__fastCharacterContents);
    v179 = v177;
    if (v178)
    {
      *(_QWORD *)&v211 = v143;
      *((_QWORD *)&v211 + 1) = v145;
      StringProtocol._ephemeralString.getter();
      v180 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v181 = objc_msgSend(v180, sel_length);
      swift_unknownObjectRelease();
      v182 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v178, (uint64_t)v181, 0x10u, 1);
    }
    else
    {
      v182 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v143, v145, 0x10u, 1);
    }
    v189 = v182;
    swift_bridgeObjectRelease_n();
    v5 = &v211;
    v4 = (unint64_t)&v208;
    if ((v189 & 1) == 0)
      goto LABEL_222;
  }
  else
  {
    if ((v145 & 0x2000000000000000) != 0)
    {
      v147 = HIBYTE(v145) & 0xF;
      *(_QWORD *)&v211 = v143;
      *((_QWORD *)&v211 + 1) = v145 & 0xFFFFFFFFFFFFFFLL;
      v146 = (char *)&v211;
    }
    else if ((v143 & 0x1000000000000000) != 0)
    {
      v146 = (char *)((v145 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v147 = v143 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v146 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v146, v147, 0x10u, 1))
      goto LABEL_222;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)&v210[8] = v143;
  *(_QWORD *)&v210[16] = v145;
  v3 = &v203;
LABEL_179:
  v148 = *(_OWORD *)v210;
  v149 = *(_OWORD *)&v210[16];
  v205 = *(_OWORD *)v210;
  v206[0] = *(_OWORD *)&v210[16];
  v150 = *(_OWORD *)&v210[32];
  v206[1] = *(_OWORD *)&v210[32];
  *(__int128 *)((char *)v3 + 138) = *(_OWORD *)(v4 + 138);
  v151 = *(_OWORD *)&v209[16];
  v152 = *(_OWORD *)&v209[32];
  v204[1] = *(_OWORD *)&v209[16];
  v204[2] = *(_OWORD *)&v209[32];
  v153 = *(_OWORD *)&v209[48];
  v154 = *(_OWORD *)&v209[64];
  v204[3] = *(_OWORD *)&v209[48];
  v204[4] = *(_OWORD *)&v209[64];
  v155 = v208;
  v156 = *(_OWORD *)v209;
  v203 = v208;
  v204[0] = *(_OWORD *)v209;
  v217 = v148;
  v218 = v149;
  v219[0] = v150;
  *(__int128 *)((char *)v5 + 138) = *(_OWORD *)(v4 + 138);
  v213 = v151;
  v214 = v152;
  v215 = v153;
  v216 = v154;
  v211 = v155;
  v212 = v156;
  if (BYTE8(v203) != 1)
  {
    outlined retain of URLComponents((uint64_t)&v203);
    v12 = URLComponents._URLComponents.computedString.getter();
    v158 = v157;
    outlined release of URLComponents((uint64_t)&v203);
    if (!v158)
      goto LABEL_183;
    goto LABEL_46;
  }
  v26 = v203;
  if ((_QWORD)v203)
    goto LABEL_41;
LABEL_183:
  v37 = v7;
  swift_retain();
  swift_retain();
  if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    goto LABEL_48;
  v40 = objc_msgSend(v37, sel_relativeString);
LABEL_50:
  v41 = v40;
  v12 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  swift_release();

  swift_release_n();
LABEL_51:
  outlined release of URLComponents((uint64_t)&v203);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t _NSSortFunctionOne(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, char *, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t *v11;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  v6 = *(uint64_t (**)(_QWORD, char *, _QWORD, _QWORD))(*a3 + 16);
  if (v6)
    return v6(*(_QWORD *)(v5 + 8), sel_compareObject_toObject_, *(_QWORD *)(a3[1] + 8 * v3), *(_QWORD *)(a3[1] + 8 * v4));
  v8 = *(_QWORD *)v5 + 16 * v3;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))v8;
  v9 = *(_QWORD *)(v8 + 8);
  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v8 == _NSNullCompare)
    v11 = (uint64_t *)&selRef_compare_;
  else
    v11 = (uint64_t *)(v5 + 40);
  return _NSCompareObject(v9, *(_QWORD *)(*(_QWORD *)v5 + 16 * v4 + 8), (uint64_t)v10, *v11, *(unsigned __int8 *)(v5 + 32), *(unsigned __int8 *)(v5 + 33));
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle()
{
  return &type metadata for Date.ISO8601FormatStyle;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return &type metadata for Date.ISO8601FormatStyle.TimeZoneSeparator;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator()
{
  return &type metadata for Date.ISO8601FormatStyle.TimeSeparator;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.DateSeparator()
{
  return &type metadata for Date.ISO8601FormatStyle.DateSeparator;
}

ValueMetadata *type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return &type metadata for Date.ISO8601FormatStyle.DateTimeSeparator;
}

BOOL NSEqualSizes(NSSize aSize, NSSize bSize)
{
  return aSize.height == bSize.height && aSize.width == bSize.width;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UUID()
{
  __int128 *v0;
  objc_class *v1;
  char *v2;
  __int128 v4;
  objc_super v5;

  v1 = (objc_class *)type metadata accessor for __NSConcreteUUID();
  v4 = *v0;
  v2 = (char *)objc_allocWithZone(v1);
  *(_OWORD *)&v2[OBJC_IVAR_____NSConcreteUUID__storage] = v4;
  v5.receiver = v2;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UUID@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return UUID.init(from:)(a1, a2);
}

uint64_t UUID.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  _QWORD v29[4];
  unint64_t v30;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v29, v29[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    UUID.init(uuidString:)((uint64_t)&v26);
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0)
    {
      v5 = type metadata accessor for DecodingError();
      swift_allocError();
      v7 = v6;
      v8 = a1[3];
      v9 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v8);
      MEMORY[0x186DA5FB4](v8, v9);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v7, *MEMORY[0x1E0DEC458], v5);
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    }
    else
    {
      v11 = v26;
      v10 = v27;
      v12 = v26 >> 8;
      v13 = v26 >> 16;
      v14 = v26 >> 24;
      v15 = HIDWORD(v26);
      v17 = v26 >> 40;
      v18 = HIWORD(v26);
      v19 = HIBYTE(v26);
      v20 = v27 >> 8;
      v21 = v27 >> 16;
      v22 = v27 >> 24;
      v23 = HIDWORD(v27);
      v24 = v27 >> 40;
      v25 = HIWORD(v27);
      v30 = HIBYTE(v27);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      *a2 = v11;
      a2[1] = v12;
      a2[2] = v13;
      a2[3] = v14;
      a2[4] = v15;
      a2[5] = v17;
      a2[6] = v18;
      a2[7] = v19;
      a2[8] = v10;
      a2[9] = v20;
      a2[10] = v21;
      a2[11] = v22;
      a2[12] = v23;
      a2[13] = v24;
      a2[14] = v25;
      a2[15] = v30;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  __int128 *v0;
  objc_class *v1;
  char *v2;
  __int128 v4;
  objc_super v5;

  v1 = (objc_class *)type metadata accessor for __NSConcreteUUID();
  v4 = *v0;
  v2 = (char *)objc_allocWithZone(v1);
  *(_OWORD *)&v2[OBJC_IVAR_____NSConcreteUUID__storage] = v4;
  v5.receiver = v2;
  v5.super_class = v1;
  return (NSUUID)objc_msgSendSuper2(&v5, sel_init);
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSUUID()
{
  void **v0;
  void *v1;
  __int128 v2;

  v1 = *v0;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v1, (uint64_t)&v2);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  AnyHashable.init<A>(_:)();

}

uint64_t specialized static UUID._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  result = specialized static UUID._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSUUID();
    v3._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 544175136;
    v4._object = (void *)0xE400000000000000;
    String.append(_:)(v4);
    v5._countAndFlagsBits = 1145656661;
    v5._object = (void *)0xE400000000000000;
    String.append(_:)(v5);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  uint64_t v12;
  char v13;

  v11 = 0;
  v12 = 0;
  v13 = 1;
  if (!a1)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = specialized static UUID._conditionallyBridgeFromObjectiveC(_:result:)(a1, (uint64_t)&v11);
  if ((result & 1) != 0)
  {
    if ((v13 & 1) == 0)
    {
      v5 = v11;
      v4 = v12;
      v6 = v11 >> 8;
      v7 = v11 >> 16;
      *(_BYTE *)a2 = v11;
      *(_BYTE *)(a2 + 1) = v6;
      *(_BYTE *)(a2 + 2) = v7;
      *(_BYTE *)(a2 + 3) = BYTE3(v5);
      *(_BYTE *)(a2 + 4) = BYTE4(v5);
      *(_BYTE *)(a2 + 5) = BYTE5(v5);
      *(_BYTE *)(a2 + 6) = BYTE6(v5);
      *(_BYTE *)(a2 + 7) = HIBYTE(v5);
      *(_QWORD *)(a2 + 8) = v4;
      return result;
    }
    goto LABEL_6;
  }
LABEL_7:
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  type metadata accessor for NSUUID();
  v8._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 544175136;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 1145656661;
  v10._object = (void *)0xE400000000000000;
  String.append(_:)(v10);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static UUID._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  type metadata accessor for __NSConcreteUUID();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + OBJC_IVAR_____NSConcreteUUID__storage);
  }
  else
  {
    v7 = 0uLL;
    objc_msgSend(a1, sel_getUUIDBytes_, &v7);
    v5 = v7;
  }
  *(_OWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = 0;
  return 1;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for UUID, &type metadata for UUID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for UUID, &type metadata for UUID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for UUID, &type metadata for UUID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for UUID, &type metadata for UUID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for UUID, &type metadata for UUID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

objc_super *__NSConcreteUUID.init(coder:)(id a1)
{
  void *v1;
  char *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  objc_super *v7;
  uint64_t inited;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  objc_super *v28;
  char *v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[2];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v3 = v1;
  if (!objc_msgSend(a1, sel_allowsKeyedCoding))
  {

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 40) = v9;
    *(_QWORD *)(inited + 48) = 0xD000000000000026;
    *(_QWORD *)(inited + 56) = 0x80000001823084C0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v10 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v74);
    v11 = v74;
    v12 = v75;
    swift_retain();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
    if ((v14 & 1) != 0)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v10[(v13 >> 6) + 8] |= 1 << v13;
    v15 = (uint64_t *)(v10[6] + 16 * v13);
    *v15 = v11;
    v15[1] = v12;
    outlined init with take of Any(v76, (_OWORD *)(v10[7] + 32 * v13));
    v16 = v10[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v10[2] = v18;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v19 = objc_allocWithZone((Class)NSError);
    v20 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v21 = objc_msgSend(v19, sel_initWithDomain_code_userInfo_, v20, 4864, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v22 = objc_msgSend(v21, sel_domain);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    if (v23 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v25 != v26)
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  v73 = 0;
  v4 = String._bridgeToObjectiveCImpl()();
  a1 = objc_retainAutorelease(a1);
  v5 = objc_msgSend(a1, sel_decodeBytesForKey_returnedLength_, v4, &v73);
  swift_unknownObjectRelease();
  if (v5)
  {
    if (v73 == 16)
    {
      *(_OWORD *)&v3[OBJC_IVAR_____NSConcreteUUID__storage] = *v5;

      v6 = type metadata accessor for __NSConcreteUUID();
      v70 = v3;
      v7 = (objc_super *)&v70;
LABEL_16:
      v7->super_class = (Class)v6;
      v28 = -[objc_super init](v7, sel_init, v70);

      return v28;
    }
    if (objc_msgSend((id)objc_opt_self(), sel__compatibilityBehavior))
    {
      v30 = &v3[OBJC_IVAR_____NSConcreteUUID__storage];
      *(_QWORD *)v30 = 0;
      *((_QWORD *)v30 + 1) = 0;

      v6 = type metadata accessor for __NSConcreteUUID();
      v71 = v3;
      v7 = (objc_super *)&v71;
      goto LABEL_16;
    }
  }
  else
  {
    if ((objc_msgSend((id)objc_opt_self(), sel__compatibilityBehavior) & 1) != 0)
    {
      v29 = &v3[OBJC_IVAR_____NSConcreteUUID__storage];
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = 0;

      v6 = type metadata accessor for __NSConcreteUUID();
      v72 = v3;
      v7 = (objc_super *)&v72;
      goto LABEL_16;
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v32 = swift_initStackObject();
    *(_OWORD *)(v32 + 16) = xmmword_18205C850;
    *(_QWORD *)(v32 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(v32 + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v32 + 40) = v33;
    *(_QWORD *)(v32 + 48) = 0xD00000000000001FLL;
    *(_QWORD *)(v32 + 56) = 0x800000018230ACB0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v34 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(v32 + 32, (uint64_t)&v74);
    v35 = v74;
    v36 = v75;
    swift_retain();
    v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    if ((v38 & 1) != 0)
      goto LABEL_33;
    v34[(v37 >> 6) + 8] |= 1 << v37;
    v39 = (uint64_t *)(v34[6] + 16 * v37);
    *v39 = v35;
    v39[1] = v36;
    outlined init with take of Any(v76, (_OWORD *)(v34[7] + 32 * v37));
    v40 = v34[2];
    v17 = __OFADD__(v40, 1);
    v41 = v40 + 1;
    if (v17)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v34[2] = v41;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v42 = objc_allocWithZone((Class)NSError);
    v43 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v44 = objc_msgSend(v42, sel_initWithDomain_code_userInfo_, v43, 4865, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v45 = objc_msgSend(v44, sel_domain);
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v48 = v47;

    if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v48 == v49)
      goto LABEL_9;
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v50 & 1) != 0)
      goto LABEL_11;
    __break(1u);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v51 = swift_initStackObject();
  *(_OWORD *)(v51 + 16) = xmmword_18205C850;
  *(_QWORD *)(v51 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(v51 + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v51 + 40) = v52;
  *(_QWORD *)(v51 + 48) = 0xD000000000000027;
  *(_QWORD *)(v51 + 56) = 0x800000018230ACD0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v53 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(v51 + 32, (uint64_t)&v74);
  v54 = v74;
  v55 = v75;
  swift_retain();
  v56 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v55);
  if ((v57 & 1) != 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  v53[(v56 >> 6) + 8] |= 1 << v56;
  v58 = (uint64_t *)(v53[6] + 16 * v56);
  *v58 = v54;
  v58[1] = v55;
  outlined init with take of Any(v76, (_OWORD *)(v53[7] + 32 * v56));
  v59 = v53[2];
  v17 = __OFADD__(v59, 1);
  v60 = v59 + 1;
  if (v17)
    goto LABEL_36;
  v53[2] = v60;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v61 = objc_allocWithZone((Class)NSError);
  v62 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v63 = objc_msgSend(v61, sel_initWithDomain_code_userInfo_, v62, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v64 = objc_msgSend(v63, sel_domain);
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
  v67 = v66;

  if (v65 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v67 == v68)
  {
LABEL_9:
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v69 & 1) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }
LABEL_11:
  objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
  swift_unknownObjectRelease();

  type metadata accessor for __NSConcreteUUID();
  swift_deallocPartialClassInstance();
  return 0;
}

id __NSConcreteUUID.init(uuidString:)()
{
  void *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  objc_super *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v12;
  objc_super v13;
  _QWORD v14[2];
  char v15;

  v1 = v0;
  UUID.init(uuidString:)((uint64_t)v14);
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
    v6 = HIDWORD(v14[0]);
    v5 = v14[1];
    v7 = v14[0] >> 8;
    v8 = v14[0] >> 16;
    v9 = v14[0] >> 24;
    v10 = &v1[OBJC_IVAR_____NSConcreteUUID__storage];
    *v10 = v14[0];
    v10[1] = v7;
    v10[2] = v8;
    v10[3] = v9;
    *((_DWORD *)v10 + 1) = v6;
    *((_QWORD *)v10 + 1) = v5;

    v3 = type metadata accessor for __NSConcreteUUID();
    v12 = v1;
    v4 = (objc_super *)&v12;
    goto LABEL_5;
  }
  if (objc_msgSend((id)objc_opt_self(), sel__compatibilityBehavior))
  {
    v2 = &v1[OBJC_IVAR_____NSConcreteUUID__storage];
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;

    v3 = type metadata accessor for __NSConcreteUUID();
    v13.receiver = v1;
    v4 = &v13;
LABEL_5:
    v4->super_class = (Class)v3;
    return -[objc_super init](v4, sel_init);
  }

  type metadata accessor for __NSConcreteUUID();
  swift_deallocPartialClassInstance();
  return 0;
}

id __NSConcreteUUID.init()()
{
  void *v0;
  char *v1;
  objc_super v3;
  unsigned __int8 out[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  memset(out, 0, 16);
  v1 = v0;
  _foundation_uuid_generate_random(out);
  *(_OWORD *)&v1[OBJC_IVAR_____NSConcreteUUID__storage] = *(_OWORD *)out;

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for __NSConcreteUUID();
  return objc_msgSendSuper2(&v3, sel_init);
}

id __NSConcreteUUID.init(uuidBytes:)(__int128 *a1)
{
  char *v1;
  __int128 v2;
  objc_super v4;

  if (a1)
    v2 = *a1;
  else
    v2 = 0uLL;
  *(_OWORD *)&v1[OBJC_IVAR_____NSConcreteUUID__storage] = v2;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for __NSConcreteUUID();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for __NSConcreteUUID()
{
  return objc_opt_self();
}

uint64_t UUID.init(uuidString:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  __int128 v5;
  unsigned __int8 v6[24];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v6 = 0uLL;
  v2 = String.utf8CString.getter();
  v3 = _foundation_uuid_parse((const char *)(v2 + 32), v6);
  result = swift_release();
  if (v3)
    v5 = 0uLL;
  else
    v5 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_BYTE *)(a1 + 16) = v3 != 0;
  return result;
}

uint64_t __NSPropertyListClasses_ForArchival_ErrorAndException()
{
  if (qword_1ECD0A040 != -1)
    dispatch_once(&qword_1ECD0A040, &__block_literal_global_40);
  return _MergedGlobals_116;
}

const UInt8 *_decodeBytes(uint64_t a1, const void *a2, _QWORD *a3)
{
  unint64_t v6;
  const __CFArray *v7;
  CFIndex Count;
  const __CFArray *ValueAtIndex;
  void *Value;
  id v11;
  int OffsetForValueFromDictionary3;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  char v16;
  BOOL v17;
  id v18;
  const __CFString *v20;
  const __CFString *v21;
  void *v22;
  unint64_t v23;
  BOOL v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  NSString *v28;
  const void *v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v6 | 8, (unint64_t *)(a1 + 16));
  v7 = *(const __CFArray **)(a1 + 80);
  if (!v7)
  {
    v32 = 0;
    if (a3)
      *a3 = 0;
    OffsetForValueFromDictionary3 = __CFBinaryPlistGetOffsetForValueFromDictionary3();
    v13 = 0;
    if (!OffsetForValueFromDictionary3)
      return v13;
    v14 = *(_QWORD *)(a1 + 104);
    v15 = (_BYTE *)(v14 + v32);
    v16 = *(_BYTE *)(v14 + v32);
    if ((v16 & 0xF0) != 0x40)
    {
      v17 = (v16 & 0xF0) == 0x50 && (v16 & 0xF) == 5;
      if (v17 && v15[1] == 36 && v15[2] == 110 && v15[3] == 117 && v15[4] == 108 && v15[5] == 108)
        return 0;
LABEL_29:
      v28 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeBytesForKey_returnedLength_);
      v29 = a2;
      v20 = CFSTR("NSInvalidUnarchiveOperationException");
      v21 = CFSTR("%@: value for key (%@) is not a blob of bytes");
      v22 = (void *)a1;
LABEL_30:
      objc_msgSend(v22, "__failWithExceptionName:errorCode:format:", v20, 4864, v21, v28, v29);
      return 0;
    }
    v23 = v16 & 0xF;
    v13 = v15 + 1;
    v31 = v15 + 1;
    if ((v16 & 0xF) == 0xF)
    {
      v30 = 0;
      if ((_readInt((void *)a1, v13, v14 + *(_QWORD *)(a1 + 112) - 1, &v30, &v31) & 1) == 0)
      {
LABEL_44:
        v28 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeBytesForKey_returnedLength_);
        v21 = CFSTR("%@: data is corrupt");
LABEL_45:
        v22 = (void *)a1;
        v20 = CFSTR("NSArchiverArchiveInconsistency");
        goto LABEL_30;
      }
      v23 = v30;
      if ((v30 & 0x8000000000000000) != 0)
      {
        v28 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeBytesForKey_returnedLength_);
        v29 = (const void *)v23;
        v21 = CFSTR("%@: data bytes is too long to decode (%qd)");
        goto LABEL_45;
      }
      v13 = v31;
      v14 = *(_QWORD *)(a1 + 104);
    }
    v24 = (unint64_t)v13 >= v14;
    v25 = &v13[-v14];
    if (v24)
    {
      v26 = *(_QWORD *)(a1 + 112);
      v24 = v26 >= (unint64_t)v25;
      v27 = v26 - (_QWORD)v25;
      if (v24 && v23 <= v27)
      {
        if (a3)
          *a3 = v23;
        return v13;
      }
    }
    goto LABEL_44;
  }
  Count = CFArrayGetCount(v7);
  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    v11 = Value;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0);
    if (!a3)
      goto LABEL_22;
    goto LABEL_21;
  }
  Value = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
  v18 = Value;
  if (a3)
LABEL_21:
    *a3 = 0;
LABEL_22:
  if (!Value || CFGetTypeID(Value) == 7 && CFEqual(CFSTR("$null"), Value))
    return 0;
  if (CFGetTypeID(Value) != 20)
    goto LABEL_29;
  if (a3)
    *a3 = CFDataGetLength((CFDataRef)Value);
  return CFDataGetBytePtr((CFDataRef)Value);
}

uint64_t _decodeInt32(void *a1, const void *a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  unint64_t v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = 0;
  result = _decodeInt64((uint64_t)a1, a2, v8);
  v7 = v8[0];
  if ((_DWORD)result)
  {
    if (v8[0] == SLODWORD(v8[0]))
    {
      result = 1;
    }
    else
    {
      objc_msgSend(a1, "__failWithExceptionName:errorCode:format:", *MEMORY[0x1E0C99858], 4864, CFSTR("%@: value (%lld) for key (%@) too large to fit in a 32-bit integer"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeInt32ForKey_), v8[0], a2);
      result = 0;
    }
  }
  *a3 = v7;
  return result;
}

uint64_t _decodeInt64(uint64_t a1, const void *a2, unint64_t *a3)
{
  unint64_t v6;
  const __CFArray *v7;
  CFIndex Count;
  const __CFArray *ValueAtIndex;
  void *Value;
  id v11;
  uint64_t result;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  unint64_t valuePtr;
  unint64_t v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v6 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v6 | 8, (unint64_t *)(a1 + 16));
  valuePtr = 0;
  v7 = *(const __CFArray **)(a1 + 80);
  if (v7)
  {
    Count = CFArrayGetCount(v7);
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
    if (CFGetTypeID(ValueAtIndex) == 19)
    {
      Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
      v11 = Value;
      CFArrayRemoveValueAtIndex(ValueAtIndex, 0);
      if (!Value)
        goto LABEL_12;
    }
    else
    {
      Value = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
      v16 = Value;
      if (!Value)
      {
LABEL_12:
        v15 = 0;
        result = 0;
        goto LABEL_15;
      }
    }
    if (CFGetTypeID(Value) == 22 && !CFNumberIsFloatType((CFNumberRef)Value))
    {
      result = CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt64Type, &valuePtr) != 0;
      v15 = valuePtr;
      goto LABEL_15;
    }
LABEL_11:
    objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSInvalidUnarchiveOperationException"), 4864, CFSTR("%@: value for key (%@) is not an integer number"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeInt64ForKey_), a2);
    goto LABEL_12;
  }
  result = __CFBinaryPlistGetOffsetForValueFromDictionary3();
  if (!(_DWORD)result)
  {
    v15 = 0;
    goto LABEL_15;
  }
  v13 = *(_BYTE **)(a1 + 104);
  v14 = (unint64_t)&v13[*(_QWORD *)(a1 + 112) - 1];
  v18[0] = 0;
  if (!_readInt((void *)a1, v13, v14, v18, 0))
    goto LABEL_11;
  v15 = v18[0];
  result = 1;
LABEL_15:
  *a3 = v15;
  return result;
}

uint64_t _readInt(void *a1, _BYTE *a2, unint64_t a3, unint64_t *a4, _QWORD *a5)
{
  char v5;
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned int v12;

  v5 = *a2;
  if ((*a2 & 0xF0) != 0x10)
    return 0;
  v6 = v5 & 0xF;
  v7 = 1 << (v5 & 0xF);
  v8 = &a2[v7 + 1];
  if (__CFADD__(a2, v7 + 1) || (unint64_t)v8 > a3)
  {
    objc_msgSend(a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSArchiverArchiveInconsistency"), 4864, CFSTR("overflow while attempting to read %lu bytes (int)"), v7 + 1);
    return 0;
  }
  v9 = a2 + 1;
  v7 = v7;
  switch((char)v7)
  {
    case 1:
      v10 = *v9;
      break;
    case 2:
      v10 = __rev16(*(unsigned __int16 *)(a2 + 1));
      break;
    case 4:
      v10 = bswap32(*(_DWORD *)(a2 + 1));
      break;
    case 8:
      v10 = bswap64(*(_QWORD *)(a2 + 1));
      break;
    default:
      if (v6 <= 7)
      {
        v10 = 0;
        do
        {
          v12 = *v9++;
          v10 = v12 | (v10 << 8);
          --v7;
        }
        while (v7);
      }
      else
      {
        v10 = 0;
      }
      break;
  }
  *a4 = v10;
  if (a5)
    *a5 = v8;
  return 1;
}

const __CFString *_validateKnownUserInfoKeyTypes(void *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[128];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[128];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a1, "objectForKey:", CFSTR("NSUnderlyingError")))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      return CFSTR("NSUnderlyingError");
  }
  if (objc_msgSend(a1, "objectForKey:", CFSTR("NSLocalizedDescription")) && !_NSIsNSString())
    return CFSTR("NSLocalizedDescription");
  if (objc_msgSend(a1, "objectForKey:", CFSTR("NSLocalizedFailureReason")) && !_NSIsNSString())
    return CFSTR("NSLocalizedFailureReason");
  if (objc_msgSend(a1, "objectForKey:", CFSTR("NSLocalizedRecoverySuggestion")) && !_NSIsNSString())
    return CFSTR("NSLocalizedRecoverySuggestion");
  v2 = objc_msgSend(a1, "objectForKey:", CFSTR("NSLocalizedRecoveryOptions"));
  if (!v2)
    goto LABEL_19;
  v3 = (void *)v2;
  if (!_NSIsNSArray())
    return CFSTR("NSLocalizedRecoveryOptions");
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v55, v54, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v56;
    v7 = CFSTR("NSLocalizedRecoveryOptions");
LABEL_13:
    v8 = 0;
    while (1)
    {
      if (*(_QWORD *)v56 != v6)
        objc_enumerationMutation(v3);
      if (!_NSIsNSString())
        break;
      if (v5 == ++v8)
      {
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v55, v54, 16);
        if (v5)
          goto LABEL_13;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    if (objc_msgSend(a1, "objectForKey:", CFSTR("NSHelpAnchor")) && !_NSIsNSString())
      return CFSTR("NSHelpAnchor");
    if (objc_msgSend(a1, "objectForKey:", CFSTR("NSDebugDescription")) && !_NSIsNSString())
      return CFSTR("NSDebugDescription");
    if (objc_msgSend(a1, "objectForKey:", CFSTR("NSStringEncoding")) && !_NSIsNSNumber())
      return CFSTR("NSStringEncoding");
    if (objc_msgSend(a1, "objectForKey:", CFSTR("NSURL")))
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        return CFSTR("NSURL");
    }
    if (objc_msgSend(a1, "objectForKey:", CFSTR("NSFilePath")) && !_NSIsNSString())
      return CFSTR("NSFilePath");
    if (objc_msgSend(a1, "objectForKey:", CFSTR("NSSourceFilePathErrorKey")) && !_NSIsNSString())
      return CFSTR("NSSourceFilePathErrorKey");
    if (objc_msgSend(a1, "objectForKey:", CFSTR("NSDestinationFilePath")) && !_NSIsNSString())
      return CFSTR("NSDestinationFilePath");
    v9 = objc_msgSend(a1, "objectForKey:", CFSTR("NSMultipleUnderlyingErrorsKey"));
    if (!v9)
      goto LABEL_43;
    v10 = (void *)v9;
    if (!_NSIsNSArray())
      return CFSTR("NSMultipleUnderlyingErrorsKey");
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v50, v49, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v51;
      v7 = CFSTR("NSMultipleUnderlyingErrorsKey");
LABEL_37:
      v14 = 0;
      while (1)
      {
        if (*(_QWORD *)v51 != v13)
          objc_enumerationMutation(v10);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          break;
        if (v12 == ++v14)
        {
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v50, v49, 16);
          if (v12)
            goto LABEL_37;
          goto LABEL_43;
        }
      }
    }
    else
    {
LABEL_43:
      v15 = objc_msgSend(a1, "objectForKey:", CFSTR("NSDetailedErrors"));
      if (!v15)
        goto LABEL_53;
      v16 = (void *)v15;
      if (!_NSIsNSArray())
        return CFSTR("NSDetailedErrors");
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v45, v44, 16);
      if (v17)
      {
        v18 = v17;
        v19 = *(_QWORD *)v46;
        v7 = CFSTR("NSDetailedErrors");
LABEL_47:
        v20 = 0;
        while (1)
        {
          if (*(_QWORD *)v46 != v19)
            objc_enumerationMutation(v16);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            break;
          if (v18 == ++v20)
          {
            v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v45, v44, 16);
            if (v18)
              goto LABEL_47;
            goto LABEL_53;
          }
        }
      }
      else
      {
LABEL_53:
        v21 = objc_msgSend(a1, "objectForKey:", CFSTR("NSCallStackReturnAddresses"));
        if (!v21)
          goto LABEL_63;
        v22 = (void *)v21;
        if (!_NSIsNSArray())
          return CFSTR("NSCallStackReturnAddresses");
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v40, v39, 16);
        if (!v23)
        {
LABEL_63:
          v27 = objc_msgSend(a1, "objectForKey:", CFSTR("NSUserStringVariant"));
          if (v27)
          {
            v28 = (void *)v27;
            if (_NSIsNSArray())
            {
              v37 = 0u;
              v38 = 0u;
              v35 = 0u;
              v36 = 0u;
              v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v35, v34, 16);
              if (v29)
              {
                v30 = v29;
                v31 = *(_QWORD *)v36;
                v7 = CFSTR("NSUserStringVariant");
LABEL_67:
                v32 = 0;
                while (1)
                {
                  if (*(_QWORD *)v36 != v31)
                    objc_enumerationMutation(v28);
                  if (!_NSIsNSString())
                    return v7;
                  if (v30 == ++v32)
                  {
                    v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v35, v34, 16);
                    if (v30)
                      goto LABEL_67;
                    return 0;
                  }
                }
              }
            }
            else if (!_NSIsNSString())
            {
              return CFSTR("NSUserStringVariant");
            }
          }
          return 0;
        }
        v24 = v23;
        v25 = *(_QWORD *)v41;
        v7 = CFSTR("NSCallStackReturnAddresses");
LABEL_57:
        v26 = 0;
        while (1)
        {
          if (*(_QWORD *)v41 != v25)
            objc_enumerationMutation(v22);
          if (!_NSIsNSNumber())
            break;
          if (v24 == ++v26)
          {
            v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v40, v39, 16);
            if (v24)
              goto LABEL_57;
            goto LABEL_63;
          }
        }
      }
    }
  }
  return v7;
}

NSSize NSSizeFromString(NSString *aString)
{
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  NSSize result;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 0.0;
  v4 = 0.0;
  parseFloats(aString, 2, (uint64_t)&v3);
  v1 = v3;
  v2 = v4;
  result.height = v2;
  result.width = v1;
  return result;
}

void sub_181854E80(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t _NSSetUsingKeyValueSetter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 48);
  if (v3 == 2)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(a2 + 32))(a1, *(_QWORD *)(a2 + 40), a3, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
  if (v3 == 1)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a2 + 32))(a1, *(_QWORD *)(a2 + 40), a3, *(_QWORD *)(a2 + 56));
  if (v3)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a2 + 32))(a1, *(_QWORD *)(a2 + 40), a3, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72));
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 32))(a1, *(_QWORD *)(a2 + 40));
}

uint64_t _NSSetFloatValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  objc_msgSend(a3, "floatValue");
  return ((uint64_t (*)(void *, SEL))Implementation)(a1, Name);
}

void _NSSetObjectSetStrongValueForKeyInIvar(uint64_t a1, int a2, void *a3, int a4, Ivar v)
{
  id *v6;

  v6 = (id *)(a1 + ivar_getOffset(v));
  objc_storeStrong(v6, a3);
}

uint64_t _NSSetLongLongValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, objc_msgSend(a3, "longLongValue"));
}

uint64_t _NSSetUnsignedLongLongValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, objc_msgSend(a3, "unsignedLongLongValue"));
}

uint64_t _NSSetBoolValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, objc_msgSend(a3, "BOOLValue"));
}

ptrdiff_t _NSSetBoolValueForKeyInIvar(void *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  char v7;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v7 = objc_msgSend(a3, "BOOLValue");
  result = ivar_getOffset(a5);
  *((_BYTE *)a1 + result) = v7;
  return result;
}

id _NSSetObjectSetWeakValueForKeyInIvar(uint64_t a1, int a2, void *a3, int a4, Ivar v)
{
  id *v6;

  v6 = (id *)(a1 + ivar_getOffset(v));
  return objc_storeWeak(v6, a3);
}

ptrdiff_t _NSSetLongLongValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  uint64_t v7;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v7 = objc_msgSend(a3, "longLongValue");
  result = ivar_getOffset(a5);
  *(_QWORD *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetUnsignedLongLongValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  uint64_t v7;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v7 = objc_msgSend(a3, "unsignedLongLongValue");
  result = ivar_getOffset(a5);
  *(_QWORD *)&a1[result] = v7;
  return result;
}

uint64_t _NSSetValueWithMethod(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v7 = (void *)objc_msgSend(a1, "methodSignatureForSelector:", a2);
  v8 = objc_msgSend(v7, "frameLength");
  *(_QWORD *)&v9 = MEMORY[0x1E0C80A78](v8).n128_u64[0];
  v11 = (char *)v14 - v10;
  objc_msgSend(a3, "getValue:", (char *)v14 - v10, v9);
  v12 = (void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", v7);
  objc_msgSend(v12, "setTarget:", a1);
  objc_msgSend(v12, "setSelector:", a2);
  objc_msgSend(v12, "setArgument:atIndex:", v11, 2);
  return objc_msgSend(v12, "invoke");
}

uint64_t _NSSetValueAndNotifyForKeyInIvar(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *, _QWORD, uint64_t, uint64_t, uint64_t))
{
  objc_msgSend(a1, "willChangeValueForKey:", a4);
  a6(a1, 0, a3, a4, a5);
  return objc_msgSend(a1, "didChangeValueForKey:", a4);
}

uint64_t _NSSetDoubleValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  objc_msgSend(a3, "doubleValue");
  return ((uint64_t (*)(void *, SEL))Implementation)(a1, Name);
}

uint64_t _CreateComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v9[0] = a1;
  v6 = *MEMORY[0x1E0C99730];
  v8[0] = *MEMORY[0x1E0C99740];
  v8[1] = v6;
  v9[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4);
  v8[2] = *MEMORY[0x1E0C99738];
  v9[2] = +[NSValue valueWithRange:](NSValue, "valueWithRange:", a2, a3);
  return objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 3);
}

NSRect NSRectFromString(NSString *aString)
{
  double v1;
  double v2;
  double v3;
  double v4;
  __int128 v5;
  double v6[3];
  uint64_t v7;
  NSRect result;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 0u;
  *(_OWORD *)v6 = 0u;
  parseFloats(aString, 4, (uint64_t)&v5);
  v2 = *((double *)&v5 + 1);
  v1 = *(double *)&v5;
  v4 = v6[1];
  v3 = v6[0];
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

NSValue *newDecodedValue(void *a1, NSZone *a2)
{
  int v4;
  NSValue *v5;
  NSUInteger v6;
  float64x2_t *v7;
  _QWORD *v8;
  uint64_t v9;
  float64_t v11;
  float64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float64_t v18;
  float64_t v19;
  uint64_t v20;
  uint64_t v21;
  float64_t v22;
  float64_t v23;
  uint64_t v24;
  uint64_t v25;
  float64_t v26;
  float64_t v27;
  float64_t v28;
  float64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString *v32;
  char *typePtr;
  NSUInteger sizep;
  float64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a1, "allowsKeyedCoding")
    && objc_msgSend(a1, "containsValueForKey:", CFSTR("NS.special")))
  {
    v4 = objc_msgSend(a1, "decodeIntForKey:", CFSTR("NS.special"));
    switch(v4)
    {
      case 1:
        objc_msgSend(a1, "decodePointForKey:", CFSTR("NS.pointval"));
        v5 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:");
        return v5;
      case 2:
        objc_msgSend(a1, "decodeSizeForKey:", CFSTR("NS.sizeval"));
        v5 = +[NSValue valueWithSize:](NSValue, "valueWithSize:");
        return v5;
      case 3:
        objc_msgSend(a1, "decodeRectForKey:", CFSTR("NS.rectval"));
        v5 = +[NSValue valueWithRect:](NSValue, "valueWithRect:");
        return v5;
      case 4:
        v9 = objc_msgSend((id)objc_msgSend(a1, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("NS.rangeval.length")), "unsignedIntegerValue");
        v5 = +[NSValue valueWithRange:](NSValue, "valueWithRange:", objc_msgSend((id)objc_msgSend(a1, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("NS.rangeval.location")), "unsignedIntegerValue"), v9);
        return v5;
      case 10:
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.atval.a"));
        v35.f64[0] = v11;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.atval.b"));
        v35.f64[1] = v12;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.atval.c"));
        v36 = v13;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.atval.d"));
        v37 = v14;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.atval.tx"));
        v38 = v15;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.atval.ty"));
        v39 = v16;
        v17 = _NSNewValue(&v35, "{CGAffineTransform=dddddd}", 0);
        goto LABEL_23;
      case 11:
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.edgeval.top"));
        v35.f64[0] = v18;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.edgeval.left"));
        v35.f64[1] = v19;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.edgeval.bottom"));
        v36 = v20;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.edgeval.right"));
        v37 = v21;
        v17 = _NSNewValue(&v35, "{UIEdgeInsets=dddd}", 0);
        goto LABEL_23;
      case 12:
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.edgeval.top"));
        v35.f64[0] = v22;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.edgeval.left"));
        v35.f64[1] = v23;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.edgeval.bottom"));
        v36 = v24;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.edgeval.right"));
        v37 = v25;
        v17 = _NSNewValue(&v35, "{NSEdgeInsets=dddd}", 0);
        goto LABEL_23;
      case 13:
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.offset.h"));
        v35.f64[0] = v26;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.offset.v"));
        v35.f64[1] = v27;
        v17 = _NSNewValue(&v35, "{UIOffset=dd}", 0);
        goto LABEL_23;
      case 14:
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.dirEdgeVal.top"));
        v35.f64[0] = v28;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.dirEdgeVal.leading"));
        v35.f64[1] = v29;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.dirEdgeVal.bottom"));
        v36 = v30;
        objc_msgSend(a1, "decodeDoubleForKey:", CFSTR("NS.dirEdgeVal.trailing"));
        v37 = v31;
        v17 = _NSNewValue(&v35, "{NSDirectionalEdgeInsets=dddd}", 0);
LABEL_23:
        v8 = v17;
        break;
      default:
        v32 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("cannot decode special type '%lu'"), v4);
        objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v32, 0));
    }
    return (NSValue *)v8;
  }
  bzero(&v35, 0x400uLL);
  typePtr = 0;
  objc_msgSend(a1, "decodeValueOfObjCType:at:size:", "*", &typePtr, 8);
  if (!typePtr || !*typePtr)
    return 0;
  sizep = 0;
  NSGetSizeAndAlignment(typePtr, &sizep, 0);
  v6 = sizep;
  if (sizep < 0x401)
  {
    v7 = &v35;
  }
  else
  {
    v7 = (float64x2_t *)malloc_type_calloc(sizep, 1uLL, 0x2D55A75uLL);
    if (!v7)
      return 0;
  }
  objc_msgSend(a1, "decodeValueOfObjCType:at:size:", typePtr, v7, v6);
  v8 = _NSNewValue(v7, typePtr, a2);
  if (v7 != &v35)
    free(v7);
  free(typePtr);
  return (NSValue *)v8;
}

void sub_1818569D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x181856630);
  }
  _Unwind_Resume(a1);
}

BOOL _NSXPCSerializationCreateObjectInDictionaryForGenericKey(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v4;
  _QWORD v6[8];
  _QWORD v7[4];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2020000000;
  v7[3] = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___NSXPCSerializationCreateObjectInDictionaryForGenericKey_block_invoke;
  v6[3] = &unk_1E0F55EF8;
  v6[4] = v7;
  v6[5] = &v8;
  v6[6] = a3;
  v6[7] = a4;
  if (_iterateDictionaryKeysAndValues(a1, a2, (uint64_t)v6))
    v4 = *((_BYTE *)v9 + 24) != 0;
  else
    v4 = 0;
  _Block_object_dispose(v7, 8);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_181856C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 56), 8);
  _Unwind_Resume(a1);
}

void parseFloats(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  char *v11;
  BOOL v12;
  char *v13;
  _BYTE v14[100];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = (uint64_t)v14;
    if ((objc_msgSend(a1, "getCString:maxLength:encoding:", v14, 100, 4) & 1) == 0)
      v6 = objc_msgSend(a1, "UTF8String");
    if (a2 && v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v13 = 0;
        v9 = v8[v6];
        if (v8[v6])
          v10 = v9 - 48 >= 0xA;
        else
          v10 = 0;
        if (v10)
        {
          while (v9 > 0x2E || ((1 << v9) & 0x680000000000) == 0)
          {
            v11 = v8 + 1;
            v9 = v8[v6 + 1];
            if (v8[v6 + 1])
              v12 = v9 - 48 >= 0xA;
            else
              v12 = 0;
            ++v8;
            if (!v12)
              goto LABEL_12;
          }
        }
        v11 = v8;
LABEL_12:
        *(double *)(a3 + 8 * v7) = strtod_l(&v11[v6], &v13, 0);
        v8 = &v13[-v6];
        ++v7;
      }
      while (v7 != a2);
    }
  }
}

NSValue *_NSGetValueWithMethod(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(a1, "methodSignatureForSelector:", a2);
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", v4);
  objc_msgSend(v5, "setTarget:", a1);
  objc_msgSend(v5, "setSelector:", a2);
  objc_msgSend(v5, "invoke");
  v6 = objc_msgSend(v4, "methodReturnLength");
  *(_QWORD *)&v7 = MEMORY[0x1E0C80A78](v6).n128_u64[0];
  v9 = (char *)v11 - v8;
  objc_msgSend(v5, "getReturnValue:", (char *)v11 - v8, v7);
  return +[NSValue valueWithBytes:objCType:](NSValue, "valueWithBytes:objCType:", v9, objc_msgSend(v4, "methodReturnType"));
}

void sub_181857064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181857138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181857220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t String.LocalizationValue.init(stringLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = MEMORY[0x1E0DEE9D8];
  a3[1] = result;
  a3[2] = a2;
  return result;
}

void *NSAllocateScannedUncollectable(size_t a1)
{
  malloc_zone_t *v2;

  v2 = malloc_default_zone();
  return malloc_type_zone_calloc(v2, 1uLL, a1, 0xC2E5A2B2uLL);
}

Foundation::Date __swiftcall Date.init()()
{
  double *v0;
  double *v1;
  Foundation::Date result;
  timespec __tp;
  uint64_t v4;

  v1 = v0;
  v4 = *MEMORY[0x1E0C80C00];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  result._time = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *v1 = result._time;
  return result;
}

uint64_t _NSAppendPathExtension(unsigned __int16 *a1, uint64_t *a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;

  if (a5 + *a2 + 1 > a3 || a5 >= 1 && *a4 == 47 || !_CFExtensionUniCharsIsValidToAppend())
    return 0;
  if (*a2 >= 2)
  {
    v9 = *a2 - 1;
    do
    {
      if (a1[v9] != 47)
        break;
      *a2 = v9;
      v10 = v9-- + 1;
    }
    while (v10 > 2);
  }
  v11 = _CFExecutableLinkedOnOrAfter();
  v12 = *a2;
  if (!*a2)
    return 0;
  if (v12 == 2)
  {
    if (*a1 == 92 && a1[1] == 92)
      return 0;
    goto LABEL_23;
  }
  if (v12 != 1
    || ((v13 = 0, v14 = *a1, !v11) ? (v15 = v14 == 126) : (v15 = 0),
        !v15 ? (v16 = 0) : (v16 = 1),
        v14 != 47 && (v16 & 1) == 0))
  {
LABEL_23:
    if (v11 || (v17 = v12 - 1, v12 < 1) || *a1 != 126)
    {
LABEL_33:
      *a2 = v12 + 1;
      a1[v12] = 46;
      memmove(&a1[v12 + 1], a4, 2 * a5);
      *a2 += a5;
      return 1;
    }
    if ((unint64_t)v12 >= 2)
    {
      v18 = a1 + 1;
      while (1)
      {
        v19 = *v18++;
        if (v19 == 47)
          break;
        v13 = 0;
        if (!--v17)
          return v13;
      }
      goto LABEL_33;
    }
    return 0;
  }
  return v13;
}

uint64_t _NSStartOfPathExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (a2 >= 2)
  {
    v3 = a2;
    do
    {
      v2 = v3 - 1;
      if (v3 == 1)
        break;
      v4 = *(unsigned __int16 *)(a1 - 4 + 2 * v3--);
    }
    while (v4 != 47);
  }
  else
  {
    v2 = 0;
  }
  _CFGetPathExtensionRangesFromPathComponentUniChars();
  return v2 - 1;
}

uint64_t _NSExpandTildeInPath(uint64_t result, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  NSString *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a2;
  if ((uint64_t)*a2 >= 1)
  {
    v3 = result;
    if (*(_WORD *)result == 126)
    {
      if (v2 < 2)
      {
        v6 = 0;
        v5 = 1;
      }
      else
      {
        v5 = 1;
        while (*(_WORD *)(result + 2 * v5) != 47)
        {
          if (v2 == ++v5)
          {
            v5 = *a2;
            break;
          }
        }
        if (v5 == 1)
          v6 = 0;
        else
          v6 = +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", result + 2, v5 - 1);
      }
      result = (uint64_t)NSHomeDirectoryForUser(v6);
      if (result)
      {
        v7 = (void *)result;
        result = objc_msgSend((id)result, "length");
        v8 = *a2 - v5;
        if (v8 + result <= 1024)
        {
          v9 = result;
          if ((uint64_t)*a2 > v5)
            memmove((void *)(v3 + 2 * result), (const void *)(v3 + 2 * v5), 2 * v8);
          result = objc_msgSend(v7, "getCharacters:range:", v3, 0, v9);
          *a2 += v9 - v5;
        }
      }
    }
  }
  return result;
}

void _NSStandardizePathUsingCache(unsigned __int16 *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BOOL4 v10;
  int HasDotDot;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned __int16 *v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  size_t v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  const void *v40;
  _BOOL4 v41;
  uint64_t *v42;
  uint64_t v43;
  _BOOL4 v44;
  _BOOL4 v45;
  _WORD *v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  stat __src[14];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  _NSTransmutePathSlashes(a1, a2);
  v6 = *a2;
  v48 = a2;
  if (*a2 < 2)
    goto LABEL_9;
  v7 = v6 - 1;
  while (a1[v7] == 47)
  {
    *a2 = v7;
    v8 = v7 - 1;
    v9 = v7-- + 1;
    if (v9 <= 2)
    {
      v10 = 0;
      v6 = v8 + 1;
      goto LABEL_10;
    }
  }
  v6 = v7 + 1;
  if (v7 + 1 >= 2 && *a1 == 92)
    v10 = a1[1] == 92;
  else
LABEL_9:
    v10 = 0;
LABEL_10:
  HasDotDot = _pathHasDotDot(a1, v6, v10);
  if (HasDotDot)
  {
    v49 = v6;
    __memmove_chk();
    _NSResolveSymlinksInPathUsingCache((unsigned __int16 *)__src, &v49, a3);
    v6 = v49;
    if (v49 > 1024)
      return;
    memmove(a1, __src, 2 * v49);
    v12 = a2;
    *a2 = v6;
  }
  else
  {
    v12 = a2;
  }
  v13 = -2 * v6;
  v14 = 3;
  if (!v10)
    goto LABEL_17;
LABEL_15:
  if (v6 > 4)
  {
    do
    {
      v15 = &a1[v6];
      if (*(v15 - 2) != 47 || *(v15 - 1) != 46)
      {
        if (v10)
        {
          v14 = 3;
          goto LABEL_33;
        }
        goto LABEL_25;
      }
      v6 -= 2;
      *v12 = v6;
      v13 += 4;
      if (v10)
        goto LABEL_15;
LABEL_17:
      ;
    }
    while (v6 >= 3);
    if (v6 != 2)
    {
      v20 = a1 + 1;
      v46 = a1 + 4;
      goto LABEL_103;
    }
LABEL_25:
    if (a1[1] == 47)
    {
      v16 = 0;
      while (a1[v16] == 46)
      {
        v17 = v16 + 2;
        v18 = a1[v16 + 3];
        v16 += 2;
        if (v18 != 47)
          goto LABEL_31;
      }
      v17 = v16;
      if (!v16)
        goto LABEL_32;
LABEL_31:
      *v12 = v6 - v17;
      memmove(a1, &a1[v17], -(v13 + 2 * v17));
      v12 = v48;
      v14 = 0;
      v6 = *v48;
    }
    else
    {
LABEL_32:
      v14 = 0;
    }
  }
LABEL_33:
  if (v6 >= 3)
  {
    while (v14 < v6 - 2)
    {
      v19 = &a1[v14];
      if (*v19 == 47 && v19[1] == 46 && a1[v14 + 2] == 47)
      {
        memmove(v19 + 1, v19 + 3, 2 * (v6 - v14) - 6);
        v12 = v48;
        v6 = *v48 - 2;
        *v48 = v6;
        --v14;
      }
      if (v6 < 3)
        break;
      ++v14;
    }
  }
  v20 = a1 + 1;
  v46 = a1 + 4;
  v21 = HasDotDot ^ 1;
  if (v6 < 3)
    v21 = 1;
  if ((v21 & 1) == 0)
  {
    v47 = v10;
    while (1)
    {
      if (v10)
      {
        v22 = 3;
        if ((unint64_t)v6 >= 4)
        {
          while (a1[v22] != 47)
          {
            if (v6 == ++v22)
            {
              v22 = v6;
              break;
            }
          }
        }
        v23 = v6 <= v22 + 1 ? v22 + 1 : v6;
        while (1)
        {
          v24 = v22 + 1;
          if (v22 + 1 >= v6)
            break;
          v25 = v20[v22++];
          if (v25 == 47)
            goto LABEL_58;
        }
        v24 = v23;
      }
      else
      {
        v24 = 0;
      }
LABEL_58:
      v26 = v6 - 2;
      if (v24 >= v6 - 2)
      {
        v30 = 1;
      }
      else
      {
        v27 = &a1[v24];
        do
        {
          if ((unint64_t)v6 >= 4
            && v24 < v6 - 4
            && *v27 == 47
            && a1[v24 + 1] == 46
            && a1[v24 + 2] == 46
            && a1[v24 + 3] == 47)
          {
            memmove(v27 + 1, v27 + 4, 2 * (v6 - v24) - 8);
            v12 = v48;
            v6 = *v48 - 3;
            *v48 = v6;
            v28 = v24 - 1;
          }
          else
          {
            v28 = v24;
          }
          if (v6 >= 3 && v28 == v6 - 3 && a1[v28] == 47)
          {
            v29 = &a1[v28];
            if (v29[1] == 46 && v29[2] == 46)
            {
              v6 -= 2;
              *v12 = v6;
            }
          }
          v26 = v6 - 2;
          v30 = v6 > 2;
          if (v6 < 3)
            break;
          v31 = v28 + 1;
          if (v31 >= v26)
            break;
        }
        while (v24 == v31);
      }
      if (v30 && v24 < v6)
      {
        while (v24 + 1 < v26)
        {
          v32 = 0;
          v33 = &a1[v24 + 3];
          v34 = 2 * (v6 - 5 - v24);
          while (*(v33 - 2) != 47)
          {
            ++v33;
            ++v32;
            v34 -= 2;
            if (!(1 - v26 + v24 + v32))
              goto LABEL_96;
          }
          v35 = v24 + v32 + 1;
          if (v6 >= 4 && v35 < v6 - 4 && *(v33 - 1) == 46 && *v33 == 46 && v33[1] == 47)
          {
            *v12 = v6 - v32 - 4;
            v37 = v12;
            memmove(&v20[v24], v33 + 2, v34);
            v6 = *v37;
            break;
          }
          if (!(v24 + v32 + 4 - v6) && a1[v6 - 3] == 47 && a1[v6 - 2] == 46 && a1[v6 - 1] == 46)
          {
            *v12 = v24 + 1;
            v6 = v24 + 1;
            break;
          }
          v24 += v32 + 1;
          if (v35 >= v6)
            break;
        }
      }
LABEL_96:
      v10 = v47;
      v36 = _pathHasDotDot(a1, v6, v47);
      if (v6 <= 2)
        break;
      v12 = v48;
      if ((v36 & 1) == 0)
        goto LABEL_103;
    }
    v12 = v48;
  }
LABEL_103:
  _NSTransmutePathSlashes(a1, v12);
  v38 = *v48;
  if (*v48 < 2)
    return;
  while (a1[v38 - 1] == 47)
  {
    *v48 = --v38;
    if ((unint64_t)(v38 + 1) <= 2)
      return;
  }
  memset(__src, 0, 144);
  if (v38 < 23)
  {
    if (v38 < 15)
    {
      if (v38 < 9 || *a1 != 47)
        return;
      v39 = *v20;
      goto LABEL_157;
    }
    if (*a1 != 47)
      return;
    v39 = *v20;
  }
  else
  {
    if (*a1 != 47)
      return;
    v39 = *v20;
    if (v39 == 112)
    {
      if (a1[2] == 114
        && a1[3] == 105
        && *v46 == 118
        && a1[5] == 97
        && a1[6] == 116
        && a1[7] == 101
        && a1[8] == 47
        && a1[9] == 118
        && a1[10] == 97
        && a1[11] == 114
        && a1[12] == 47
        && a1[13] == 97
        && a1[14] == 117
        && a1[15] == 116
        && a1[16] == 111
        && a1[17] == 109
        && a1[18] == 111
        && a1[19] == 117
        && a1[20] == 110
        && a1[21] == 116)
      {
        v40 = a1 + 22;
        if (a1[22] == 47)
        {
          if ((_NSStandardizePathRewriteAutomountIsPathExcluded(a1 + 22, v38 - 22) & 1) == 0)
          {
            v41 = _NSFileExistsAtPath(+[NSFileManager defaultManager](NSFileManager, "defaultManager"), (uint64_t)(a1 + 22), *v48 - 22, __src);
            v42 = v48;
            if (v41)
            {
              v43 = *v48 - 22;
LABEL_168:
              *v42 = v43;
              memmove(a1, v40, 2 * v43);
              return;
            }
          }
          return;
        }
      }
LABEL_158:
      if (a1[2] == 114 && a1[3] == 105 && *v46 == 118 && a1[5] == 97 && a1[6] == 116 && a1[7] == 101)
      {
        v40 = a1 + 8;
        if (a1[8] == 47 && (_NSStandardizePathRewriteAutomountIsPathExcluded(a1 + 8, v38 - 8) & 1) == 0)
        {
          v45 = _NSFileExistsAtPath(+[NSFileManager defaultManager](NSFileManager, "defaultManager"), (uint64_t)(a1 + 8), *v48 - 8, __src);
          v42 = v48;
          if (v45)
          {
            v43 = *v48 - 8;
            goto LABEL_168;
          }
        }
      }
      return;
    }
  }
  if (v39 != 118)
  {
LABEL_157:
    if (v39 != 112)
      return;
    goto LABEL_158;
  }
  if (a1[2] == 97
    && a1[3] == 114
    && *v46 == 47
    && a1[5] == 97
    && a1[6] == 117
    && a1[7] == 116
    && a1[8] == 111
    && a1[9] == 109
    && a1[10] == 111
    && a1[11] == 117
    && a1[12] == 110
    && a1[13] == 116)
  {
    v40 = a1 + 14;
    if (a1[14] == 47 && (_NSStandardizePathRewriteAutomountIsPathExcluded(a1 + 14, v38 - 14) & 1) == 0)
    {
      v44 = _NSFileExistsAtPath(+[NSFileManager defaultManager](NSFileManager, "defaultManager"), (uint64_t)(a1 + 14), *v48 - 14, __src);
      v42 = v48;
      if (v44)
      {
        v43 = *v48 - 14;
        goto LABEL_168;
      }
    }
  }
}

uint64_t _pathHasDotDot(unsigned __int16 *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *i;
  int v15;

  if (a2 < 1)
    return 0;
  v3 = 0;
  v4 = *a1;
  v6 = v4 != 126 && v4 != 47;
  if (a2 != 1 && !v6)
  {
    if (a3)
    {
      v7 = 3;
      if ((unint64_t)a2 >= 4)
      {
        while (a1[v7] != 47)
        {
          if (a2 == ++v7)
          {
            v7 = a2;
            break;
          }
        }
      }
      v8 = v7 + 1;
      if (a2 <= v7 + 1)
        v9 = v7 + 1;
      else
        v9 = a2;
      v10 = v9 - 1;
      while (v8 < a2)
      {
        v11 = a1[v8++];
        if (v11 == 47)
        {
          v10 = v8 - 2;
          break;
        }
      }
      v12 = v10 + 2;
    }
    else
    {
      v12 = 0;
    }
    if (v12 < a2 - 1)
    {
      v13 = v12 + 2;
      for (i = &a1[v12 + 1]; ; ++i)
      {
        if (*(i - 1) != 46 || *i != 46)
          goto LABEL_38;
        if (a2 >= 3 && v13 == 2)
          break;
        if (v13 - 2 < 1 || *(i - 2) != 47)
          goto LABEL_38;
        if (v13 < a2)
        {
          v15 = i[1];
LABEL_31:
          if (v15 == 47)
            return 1;
          goto LABEL_38;
        }
        if (v13 == a2)
          return 1;
LABEL_38:
        if (++v13 - a2 == 1)
          return 0;
      }
      v15 = a1[2];
      goto LABEL_31;
    }
    return 0;
  }
  return v3;
}

void sub_181859F90(_Unwind_Exception *a1)
{
  uint64_t v1;

  free(*(void **)(v1 - 160));
  _Unwind_Resume(a1);
}

BOOL _NSTransmutePathSlashes(_WORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a2;
  if (*a2 >= 2 && *a1 == 92)
    v3 = 2 * (a1[1] == 92);
  else
    v3 = 0;
  if (v3 >= v2)
  {
    v4 = v3;
  }
  else
  {
    v4 = v3;
    while (1)
    {
      v5 = (unsigned __int16)a1[v3];
      if (v5 == 47)
        break;
      v8 = v3 + 1;
      a1[v4] = v5;
LABEL_16:
      ++v4;
      v3 = v8;
      if (v8 >= v2)
        goto LABEL_20;
    }
    a1[v4] = 47;
    if (v2 <= v3 + 1)
      v6 = v3 + 1;
    else
      v6 = v2;
    v7 = v6 - 1;
    while (v7 != v3)
    {
      v8 = v3 + 1;
      v9 = (unsigned __int16)a1[++v3];
      if (v9 != 47)
        goto LABEL_16;
    }
    ++v4;
  }
LABEL_20:
  *a2 = v4;
  return v2 != v4;
}

uint64_t _NSAppendPathComponent(unsigned __int16 *a1, uint64_t *a2, int64_t a3, void *__src, int64_t a5)
{
  uint64_t v7;
  int v8;
  unsigned __int16 *v9;
  _BOOL4 v11;

  if (!a5)
    return 1;
  v7 = *a2;
  if (*a2)
  {
    if (v7 == 1)
    {
      v8 = 47;
      v9 = a1;
    }
    else
    {
      if (v7 != 2 || (v8 = *a1, v8 != 92))
      {
        v11 = 1;
LABEL_13:
        if (v7 + a5 + v11 > a3)
          return 0;
        if (v11)
        {
          a1[v7++] = 47;
          *a2 = v7;
        }
        goto LABEL_17;
      }
      v9 = a1 + 1;
    }
    v11 = *v9 != v8;
    goto LABEL_13;
  }
  if (a5 > a3)
    return 0;
  v7 = 0;
LABEL_17:
  memmove(&a1[v7], __src, 2 * a5);
  *a2 += a5;
  return 1;
}

BOOL _NSFileExistsAtPath(void *a1, uint64_t a2, uint64_t a3, stat *a4)
{
  void *v8;
  _BOOL8 result;
  char v10[1026];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_msgSend(objc_allocWithZone((Class)NSCheapMutableString), "init");
  objc_msgSend(v8, "setContentsNoCopy:length:freeWhenDone:isUnicode:", a2, a3, 0, 1);
  LODWORD(a3) = objc_msgSend(a1, "getFileSystemRepresentation:maxLength:withPath:", v10, 1026, v8);

  result = 0;
  if ((_DWORD)a3)
    return stat(v10, a4) == 0;
  return result;
}

void _NSResolveSymlinksInPathUsingCache(unsigned __int16 *a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  void *v5;
  int v6;
  size_t v7;
  char *v8;
  char *v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int ValueIfPresent;
  BOOL v20;
  ssize_t v21;
  size_t v22;
  uint64_t v23;
  void **v24;
  char *v25;
  unint64_t v26;
  size_t v27;
  void *value[3];
  char __s[1026];
  stat v32;
  char __src[16];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (*a2)
  {
    memset(&v32, 0, sizeof(v32));
    v5 = (void *)objc_msgSend(objc_allocWithZone((Class)NSCheapMutableString), "init");
    objc_msgSend(v5, "setContentsNoCopy:length:freeWhenDone:isUnicode:", a1, v3, 0, 1);
    if (-[NSFileManager getFileSystemRepresentation:maxLength:withPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "getFileSystemRepresentation:maxLength:withPath:", __s, 1025, v5))
    {
      v27 = strlen(__s);

      if ((a3 & 1) != 0)
        goto LABEL_10;
      if (*a2 < 1)
        goto LABEL_10;
      v6 = *a1;
      if (v6 != 126 && v6 != 47)
        goto LABEL_10;
      v64 = 0u;
      v63 = 0u;
      v62 = 0u;
      v61 = 0u;
      v60 = 0u;
      v59 = 0u;
      v58 = 0u;
      v57 = 0u;
      v56 = 0u;
      v55 = 0u;
      v54 = 0u;
      v53 = 0u;
      v52 = 0u;
      v51 = 0u;
      v50 = 0u;
      v49 = 0u;
      v48 = 0u;
      v47 = 0u;
      v46 = 0u;
      v45 = 0u;
      v44 = 0u;
      v43 = 0u;
      v42 = 0u;
      v41 = 0u;
      v40 = 0u;
      v39 = 0u;
      v38 = 0u;
      v37 = 0u;
      v36 = 0u;
      v35 = 0u;
      v34 = 0u;
      *(_OWORD *)__src = 0u;
      value[1] = 0;
      value[2] = 0;
      value[0] = (void *)0x800000000000005;
      if (getattrlist(__s, value, __src, 0x40CuLL, 0)
        || !*(_DWORD *)&__src[8]
        || (v7 = (*(_DWORD *)&__src[8] - 1), v7 >= 0x401))
      {
LABEL_10:
        v26 = 0;
        v8 = __s;
        while (1)
        {
          v9 = v8;
          v10 = v8 - 1;
          v11 = v8 - __s;
          v12 = 2 * (_QWORD)__s - (_QWORD)v8;
          v13 = 1;
          do
          {
            v14 = v13;
            v15 = v11;
            v16 = v12;
            v18 = *++v10;
            v17 = v18;
            ++v13;
            ++v11;
            --v12;
          }
          while (v18 == 47);
          while (v17 && v17 != 47)
          {
            v17 = v8[v14++];
            ++v15;
            --v16;
          }
          v8[v14 - 1] = 0;
          v8 = &v8[v14 - 1];
          if (!a3)
            goto LABEL_27;
          os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_13_0);
          if (!qword_1ECD09960)
          {
            os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_13_0);
            goto LABEL_27;
          }
          value[0] = 0;
          ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_1ECD09960, __s, (const void **)value);
          os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_13_0);
          if (ValueIfPresent)
            v20 = value[0] == 0;
          else
            v20 = 1;
          if (!v20)
          {
            if (v26 > 0x20)
              return;
            __strlcpy_chk();
            v22 = strlen(__src);
            goto LABEL_39;
          }
          if (ValueIfPresent)
          {
LABEL_31:
            *v8 = v17;
            if (!v17)
            {
              v7 = v27;
              v24 = (void **)a2;
              *a2 = 1024;
              v25 = __s;
              goto LABEL_50;
            }
          }
          else
          {
LABEL_27:
            if (lstat(__s, &v32) < 0)
              return;
            if ((v32.st_mode & 0xF000) != 0xA000)
            {
              if (a3)
                _addToStatCache(__s, 0);
              goto LABEL_31;
            }
            if (v26 > 0x20)
              return;
            v21 = readlink(__s, __src, 0x401uLL);
            if (v21 < 0)
              return;
            v22 = v21;
            __src[v21] = 0;
            if (a3)
              _addToStatCache(__s, __src);
LABEL_39:
            v9[v14 - 1] = v17;
            if (__src[0] == 47)
              v23 = 0;
            else
              v23 = v9 - __s + 1;
            if ((uint64_t)(v27 + v22 + v23 - v15) > 1025)
              return;
            if ((uint64_t)(v27 - v15) >= 1)
              memmove(&__s[v22 + v23], &v9[v14 - 1], v27 - v15);
            ++v26;
            memmove(&__s[v23], __src, v22);
            *(_BYTE *)(v16 + v27 + v23 + v22) = 0;
            if (__src[0] == 47)
              v8 = __s;
            else
              v8 = v9;
            v27 = v27 + v22 + v23 - v15;
          }
        }
      }
      v25 = &__src[*(int *)&__src[4] + 4];
      v24 = (void **)a2;
      *a2 = 1024;
LABEL_50:
      _convertToUnichars((unsigned __int16 *)v25, v7, a1, v24);
    }
    else
    {

    }
  }
}

void _convertToUnichars(unsigned __int16 *a1, size_t a2, void *a3, void **a4)
{
  void *v6;
  __int128 v7;
  void *__src[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  *(_OWORD *)__src = 0u;
  if (_NSConvertToASCIIorUnicode2(a1, a2, 4uLL, 1, (uint64_t)&v7, 0) && (v6 = __src[1]) != 0)
  {
    if ((uint64_t)*a4 < (uint64_t)__src[1])
      v6 = *a4;
    *a4 = v6;
    if ((_BYTE)v7)
      objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("_convertToUnichars: Didn't get Unicode"), 0));
    memmove(a3, __src[0], 2 * (_QWORD)v6);
    if (BYTE1(v7))
      free(__src[0]);
  }
  else
  {
    *a4 = 0;
  }
}

uint64_t _hashCString2(char *a1)
{
  size_t v2;
  uint64_t v3;
  __int128 v5;
  void *v6[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  *(_OWORD *)v6 = 0u;
  v2 = strlen(a1);
  if (_NSConvertToASCIIorUnicode2((unsigned __int16 *)a1, v2, 4uLL, 1, (uint64_t)&v5, 0)
    && v6[1]
    && !(_BYTE)v5)
  {
    v3 = CFStringHashCharacters();
    if (BYTE1(v5))
      free(v6[0]);
  }
  else
  {
    strlen(a1);
    return CFStringHashCString();
  }
  return v3;
}

uint64_t _NSConvertToASCIIorUnicode2(unsigned __int16 *a1, size_t size, unint64_t encoding, char a4, uint64_t a5, malloc_zone_t *zone)
{
  malloc_zone_t *v6;
  unsigned __int8 v9;
  int v10;
  BOOL v11;
  unsigned __int16 *v12;
  int v13;
  size_t v14;
  _WORD *v15;
  CFStringEncoding v16;
  unsigned int v17;
  int IsEncodingAvailable;
  int v20;

  *(_BYTE *)a5 = a4 ^ 1;
  *(_BYTE *)(a5 + 1) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  if (!size)
    return 1;
  v6 = zone;
  v9 = a1;
  if (encoding == 10 || !encoding)
  {
    v10 = *a1;
    v11 = v10 == 65534 || v10 == 65279;
    if (v11)
      v12 = a1 + 1;
    else
      v12 = a1;
    if (v11)
      v13 = *a1;
    else
      v13 = 0;
    v14 = (size >> 1) - (v13 != 0);
    *(_BYTE *)a5 = 0;
    *(_QWORD *)(a5 + 24) = v14;
    if (v14 <= 0x1F8)
    {
      v15 = (_WORD *)(a5 + 32);
    }
    else
    {
      if (!zone)
        v6 = malloc_default_zone();
      v15 = malloc_type_zone_malloc(v6, 2 * v14, 0x4A6F13AEuLL);
    }
    *(_QWORD *)(a5 + 16) = v15;
    *(_BYTE *)(a5 + 1) = v14 > 0x1F8;
    if (v13 == 65279)
    {
      memmove(v15, v12, 2 * v14);
    }
    else
    {
      for (; v14; --v14)
      {
        v17 = *v12++;
        *v15++ = bswap32(v17) >> 16;
      }
    }
    return 1;
  }
  if (size >= 3
    && encoding == 4
    && *(unsigned __int8 *)a1 == 239
    && *((unsigned __int8 *)a1 + 1) == 187
    && *((unsigned __int8 *)a1 + 2) == 191)
  {
    if (size != 3)
    {
      v9 = (_BYTE)a1 + 3;
      goto LABEL_24;
    }
    return 1;
  }
LABEL_24:
  v16 = CFStringConvertNSStringEncodingToEncoding(encoding);
  if (v16 == -1)
  {
    if (encoding == 134217984)
    {
      if (_CFExecutableLinkedOnOrAfter())
        NSLog((NSString *)CFSTR("Incorrect NSStringEncoding value 0x%04lX detected. Assuming NSASCIIStringEncoding. Will stop this compatibility mapping behavior in the near future."), 134217984);
      v16 = 1536;
    }
    else
    {
      v16 = -1;
    }
  }
  IsEncodingAvailable = CFStringIsEncodingAvailable(v16);
  if (IsEncodingAvailable)
  {
    v20 = __CFStringDecodeByteStream3();
    *(_BYTE *)a5 = 0;
    *(_QWORD *)(a5 + 24) = 0;
    v9 = v20 != 0;
    if (v20)
    {
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = a5 + 32;
      *(_BYTE *)(a5 + 1) = 0;
      memmove((void *)(a5 + 32), 0, 0);
    }
    else
    {
      *(_BYTE *)(a5 + 1) = 0;
      *(_QWORD *)(a5 + 24) = 0;
    }
  }
  return (IsEncodingAvailable != 0) & v9;
}

void _addToStatCache(const char *a1, const char *a2)
{
  char *v4;
  char *v5;
  const __CFDictionary *v6;
  CFDictionaryKeyCallBacks v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memset(&v7, 0, 32);
  *(_OWORD *)&v7.equal = xmmword_1E0F4FD60;
  v4 = strdup(a1);
  v5 = v4;
  if (a1 != a2)
  {
    if (a2)
      v5 = strdup(a2);
    else
      v5 = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_13_0);
  v6 = (const __CFDictionary *)qword_1ECD09960;
  if (!qword_1ECD09960)
  {
    v6 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, &v7, 0);
    qword_1ECD09960 = (uint64_t)v6;
  }
  if (CFDictionaryContainsKey(v6, v4))
  {
    free(v4);
    if (v4 != v5)
      free(v5);
  }
  else
  {
    CFDictionaryAddValue((CFMutableDictionaryRef)qword_1ECD09960, v4, v5);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_13_0);
}

uint64_t _NSFileExists(uint64_t result, BOOL *a2)
{
  void *v3;
  int v4;
  stat v5;
  char v6[1026];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = (void *)result;
    if ((objc_msgSend((id)result, "isEqual:", &stru_1E0F56070) & 1) != 0)
    {
      return 0;
    }
    else
    {
      result = objc_msgSend(v3, "__swiftFillFileSystemRepresentationWithPointer:maxLength:", v6, 1024);
      if ((_DWORD)result)
      {
        memset(&v5, 0, sizeof(v5));
        v4 = stat(v6, &v5);
        result = v4 == 0;
        if (a2)
        {
          if (!v4)
            *a2 = (v5.st_mode & 0xF000) == 0x4000;
        }
      }
    }
  }
  return result;
}

NSString *__cdecl NSHomeDirectoryForUser(NSString *userName)
{
  void *v1;
  const void *v2;
  void *v3;

  v1 = (void *)CFCopyHomeDirectoryURLForUser();
  if (v1)
  {
    v2 = v1;
    v3 = (void *)objc_msgSend(v1, "path");
    CFRelease(v2);
  }
  else
  {
    v3 = 0;
  }
  return (NSString *)objc_msgSend(v3, "stringByStandardizingPath");
}

Swift::Double __swiftcall Date.timeIntervalSince(_:)(Foundation::Date a1)
{
  double *v1;
  double *v2;

  return *v2 - *v1;
}

ValueMetadata *type metadata accessor for AttributedString.AttributeMergePolicy()
{
  return &type metadata for AttributedString.AttributeMergePolicy;
}

uint64_t Locale.Subdivision.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, JSONDecoderImpl.KeyedContainer.allKeys.getter);
}

id StringProtocol.caseInsensitiveCompare<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return StringProtocol.localizedCompare<A>(_:)(a1, a2, a3, a4, a5, (SEL *)&selRef_caseInsensitiveCompare_);
}

id *_NSKeyValueCreateImplicitObservationInfo(NSObject *a1, void *a2, uint64_t a3, void *a4, objc_class *a5, objc_class **a6)
{
  uint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  NSKeyValueObservationInfo *v15;
  NSKeyValueProperty *v16;
  uint64_t v17;
  id obj;
  char v22;
  uint64_t v23;
  _BYTE v24[128];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = a2;
  v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v25, v24, 16);
  if (v10)
  {
    v11 = v10;
    v12 = 0;
    v13 = *(_QWORD *)v26;
    do
    {
      v14 = 0;
      v15 = (NSKeyValueObservationInfo *)v12;
      do
      {
        if (*(_QWORD *)v26 != v13)
          objc_enumerationMutation(obj);
        v16 = (NSKeyValueProperty *)NSKeyValuePropertyForIsaAndKeyPath(a5, *(void **)(*((_QWORD *)&v25 + 1) + 8 * v14));
        v23 = 0;
        v22 = 0;
        v12 = _NSKeyValueObservationInfoCreateByAdding(v15, a1, v16, a3, a4, 0, &v22, &v23);

        if (a6)
        {
          v17 = -[NSKeyValueProperty isaForAutonotifying](v16, "isaForAutonotifying");
          if (v17)
            a5 = (objc_class *)v17;
        }
        ++v14;
        v15 = (NSKeyValueObservationInfo *)v12;
      }
      while (v11 != v14);
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v24, 16);
    }
    while (v11);
  }
  else
  {
    v12 = 0;
  }
  if (a6)
    *a6 = a5;
  os_unfair_recursive_lock_unlock();
  return v12;
}

void NSKeyValueWillChange(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, void (*a6)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, char *), uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t), uint64_t a9, uint64_t a10)
{
  void *v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  BOOL v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  id v31;
  __int128 v32;
  __int128 v33;
  id v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39[3];

  v27 = a7;
  v39[1] = *MEMORY[0x1E0C80C00];
  v16 = (void *)_NSKeyValueDebugger();
  if (v16)
    objc_msgSend(v16, "_object:trackChangeForKeyOrKeys:operation:", a1, a2, 0);
  v39[0] = 0;
  if (!a5)
  {
    v26 = 0;
    goto LABEL_29;
  }
  do
  {
    v17 = *a4;
    if (a10)
      v18 = v17 == a10;
    else
      v18 = 1;
    v19 = v18;
    if (v17)
      v20 = v19 == 0;
    else
      v20 = 1;
    if (!v20)
    {
      v38 = 0;
      v21 = *(void **)(v17 + 16);
      if (a3)
      {
        v22 = objc_msgSend(v21, "keyPathIfAffectedByValueForMemberOfKeys:", a2);
        v38 = 0;
        if (!v22)
          goto LABEL_26;
      }
      else
      {
        v22 = objc_msgSend(v21, "keyPathIfAffectedByValueForKey:exactMatch:", a2, &v38);
        if (!v22)
          goto LABEL_26;
      }
      v36 = 0;
      v37 = 0;
      if (objc_msgSend(*(id *)(v17 + 16), "object:withObservance:willChangeValueForKeyOrKeys:recurse:forwardingValues:", a1, v17, a2, 1, &v36, v27))
      {
        v35 = 0;
        v34 = 0;
        v32 = 0u;
        v33 = 0u;
        a6(&v32, a1, v22, v38, *(_BYTE *)(v17 + 40) & 0xF, v27, &v35);
        v29 = v32;
        v30 = v33;
        v31 = v34;
        a8(a1, a2, v17, &v29, v36, v37, a9);
        if ((*(_BYTE *)(v17 + 40) & 8) != 0)
        {
          if ((*(_BYTE *)(v17 + 40) & 0x20) != 0)
            v23 = *(_QWORD *)(v17 + 32);
          else
            v23 = 0;
          v24 = *(void **)(v17 + 8);
          v25 = *(_QWORD *)(v17 + 24);
          v29 = v32;
          v30 = v33;
          v31 = v34;
          NSKeyValueNotifyObserver(v24, v22, a1, v25, v23, 1, &v29, v39);
        }
        if (v35)
        {

        }
      }
    }
LABEL_26:
    ++a4;
    --a5;
  }
  while (a5);
  v26 = (void *)v39[0];
LABEL_29:

}

uint64_t _NSKeyValueDebugger()
{
  if (qword_1ECD0A2D0 != -1)
    dispatch_once(&qword_1ECD0A2D0, &__block_literal_global_57);
  return qword_1ECD0A2C8;
}

uint64_t NSKeyValueWillChangeBySetting@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, void *a4@<X4>, _BYTE *a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t result;

  if ((a3 & 2) != 0)
  {
    if (a4)
    {
      result = objc_msgSend(a4, "objectForKey:", a2);
      if (result)
        goto LABEL_6;
    }
    else
    {
      result = objc_msgSend(a1, "valueForKeyPath:", a2);
      if (result)
        goto LABEL_6;
    }
    result = objc_msgSend(MEMORY[0x1E0C99E38], "null");
    goto LABEL_6;
  }
  result = 0;
LABEL_6:
  *a6 = 1;
  a6[1] = result;
  a6[3] = 0;
  a6[4] = 0;
  a6[2] = 0;
  *a5 = 0;
  return result;
}

void NSKeyValuePushPendingNotificationPerThread(void *a1, void *a2, uint64_t a3, uint64_t *a4, void *a5, void *a6, uint64_t a7)
{
  char v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  malloc_zone_t *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;

  v11 = *(_BYTE *)(a7 + 8);
  v12 = *(void **)(a7 + 16);
  v13 = *a4;
  v14 = (void *)a4[1];
  v15 = (void *)a4[2];
  v20 = (void *)a4[3];
  v21 = (void *)a4[4];
  v16 = malloc_default_zone();
  v17 = malloc_type_zone_calloc(v16, 1uLL, 0x60uLL, 0xC2E5A2B2uLL);
  *(_WORD *)v17 = 1;
  v17[1] = a1;
  v17[2] = objc_msgSend(a2, "copy");
  *((_BYTE *)v17 + 2) = v11;
  v17[3] = v12;
  v17[4] = a3;
  v17[5] = v13;
  v17[6] = v14;
  v17[7] = v15;
  v17[8] = v20;
  v17[9] = v21;
  v17[10] = a5;
  v17[11] = a6;
  v18 = *(id *)(v17[4] + 8);
  CFArrayAppendValue(*(CFMutableArrayRef *)a7, v17);
  NSKVOPendingNotificationRelease(v19, v17);
  *(_BYTE *)(a7 + 8) = 0;
}

void NSKVOPendingNotificationRelease(uint64_t a1, void *a2)
{
  int v2;
  uint64_t v4;

  v2 = (__int16)--*(_WORD *)a2;
  if (v2 <= 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    if (v4)

    free(a2);
  }
}

void *NSKeyValuePropertyForIsaAndKeyPathInner(objc_class *a1, void *a2, const __CFSet *a3)
{
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __CFSet *v10;
  __int128 v11;
  CFSetCallBacks v13;
  _QWORD value[4];

  value[3] = *MEMORY[0x1E0C80C00];
  v5 = _NSKeyValueContainerClassForIsa(a1);
  value[0] = 0;
  value[1] = v5;
  value[2] = a2;
  v6 = (void *)CFSetGetValue(a3, value);
  if (!v6 && (!NSKeyValueProperties || (v6 = (void *)CFSetGetValue((CFSetRef)NSKeyValueProperties, value)) == 0))
  {
    if (objc_msgSend(a2, "characterAtIndex:", 0) == 64)
    {
      v7 = -[NSKeyValueComputedProperty _initWithContainerClass:keyPath:propertiesBeingInitialized:]([NSKeyValueComputedProperty alloc], "_initWithContainerClass:keyPath:propertiesBeingInitialized:", v5, a2, a3);
    }
    else
    {
      v8 = objc_msgSend(a2, "rangeOfString:", CFSTR("."));
      if (v9)
        v7 = -[NSKeyValueNestedProperty _initWithContainerClass:keyPath:firstDotIndex:propertiesBeingInitialized:]([NSKeyValueNestedProperty alloc], "_initWithContainerClass:keyPath:firstDotIndex:propertiesBeingInitialized:", v5, a2, v8, a3);
      else
        v7 = -[NSKeyValueUnnestedProperty _initWithContainerClass:key:propertiesBeingInitialized:]([NSKeyValueUnnestedProperty alloc], "_initWithContainerClass:key:propertiesBeingInitialized:", v5, a2, a3);
    }
    v6 = v7;
    v10 = (__CFSet *)NSKeyValueProperties;
    if (!NSKeyValueProperties)
    {
      v11 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
      *(_OWORD *)&v13.version = *MEMORY[0x1E0C9B3B0];
      *(_OWORD *)&v13.release = v11;
      v13.equal = (CFSetEqualCallBack)NSKeyValuePropertyIsEqual;
      v13.hash = (CFSetHashCallBack)NSKeyValuePropertyHash;
      v10 = CFSetCreateMutable(0, 0, &v13);
      NSKeyValueProperties = (uint64_t)v10;
    }
    CFSetAddValue(v10, v6);
    CFSetRemoveValue(a3, v6);

  }
  return v6;
}

void *NSKeyValuePropertyForIsaAndKeyPath(objc_class *a1, void *a2)
{
  void *v4;
  __int128 v5;
  const __CFSet *v6;
  CFSetCallBacks v8;
  _QWORD value[4];

  value[3] = *MEMORY[0x1E0C80C00];
  value[0] = 0;
  value[1] = _NSKeyValueContainerClassForIsa(a1);
  value[2] = a2;
  if (!NSKeyValueProperties || (v4 = (void *)CFSetGetValue((CFSetRef)NSKeyValueProperties, value)) == 0)
  {
    v5 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
    *(_OWORD *)&v8.version = *MEMORY[0x1E0C9B3B0];
    *(_OWORD *)&v8.release = v5;
    v8.equal = (CFSetEqualCallBack)NSKeyValuePropertyIsEqual;
    v8.hash = (CFSetHashCallBack)NSKeyValuePropertyHash;
    v6 = CFSetCreateMutable(0, 0, &v8);
    v4 = NSKeyValuePropertyForIsaAndKeyPathInner(a1, a2, v6);
    CFRelease(v6);
  }
  return v4;
}

void sub_18185D0C4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _NSKeyValueContainerClassForIsa(objc_class *a1)
{
  objc_class *v2;
  NSKeyValueContainerClass *Value;

  if ((objc_class *)_MergedGlobals_99 != a1)
  {
    v2 = _NSKVONotifyingOriginalClassForIsa(a1);
    if (qword_1ECD09C10)
    {
      Value = (NSKeyValueContainerClass *)CFDictionaryGetValue((CFDictionaryRef)qword_1ECD09C10, v2);
      if (Value)
      {
LABEL_8:
        _MergedGlobals_99 = (uint64_t)a1;
        qword_1ECD09C08 = (uint64_t)Value;
        return (uint64_t)Value;
      }
    }
    else
    {
      qword_1ECD09C10 = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
    }
    Value = -[NSKeyValueContainerClass initWithOriginalClass:]([NSKeyValueContainerClass alloc], "initWithOriginalClass:", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1ECD09C10, v2, Value);

    goto LABEL_8;
  }
  return qword_1ECD09C08;
}

void sub_18185D420(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  if (a2)
  {
    objc_begin_catch(exc_buf);
    v12 = _NSKeyValueRetainedObservationInfoForObject(v9, *(_QWORD *)(v10 + 8));
    _NSKeyValueReplaceObservationInfoForObject(v9, *(_QWORD *)(v10 + 8), v12, v11);
    if (v12)

    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_18185D4D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x18185D3C8);
  }
  _Unwind_Resume(a1);
}

void sub_18185D4EC(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    JUMPOUT(0x18185D4F4);
  _Unwind_Resume(a1);
}

void sub_18185D4FC(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18185D508);
}

void _NSKeyValueReplaceObservationInfoForObject(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  if (a4)
    v7 = a4;
  v8 = _CFGetTSD();
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      while (*(void **)v9 != a1)
      {
        v9 = *(_QWORD *)(v9 + 16);
        if (!v9)
          goto LABEL_9;
      }

      *(_QWORD *)(v9 + 8) = a4;
    }
  }
LABEL_9:
  if (!a3 && a4)
    objc_msgSend(a1, "_willBeginKeyValueObserving");
  os_unfair_lock_lock(&NSKeyValueObservationInfoLock);
  os_unfair_lock_assert_owner(&NSKeyValueObservationInfoLock);
  v10 = objc_msgSend(a1, "observationInfo");
  if (a2)
    (*(void (**)(void *, char *, void *))(a2 + 24))(a1, sel_setObservationInfo_, a4);
  else
    objc_msgSend(a1, "setObservationInfo:", a4);
  os_unfair_lock_unlock(&NSKeyValueObservationInfoLock);
  v11 = a3;
  if (a3 && !a4)
  {
    objc_msgSend(a1, "_didEndKeyValueObserving");
    v11 = a3;
  }
  if ((void *)v10 == v11)

}

BOOL _NSKVOUsesBaseClassObservationInfoImplementationForClass(Class cls)
{
  if (qword_1ECD09C60 != -1)
    dispatch_once(&qword_1ECD09C60, &__block_literal_global_17);
  return class_getMethodImplementation(cls, sel_observationInfo) == (IMP)_MergedGlobals_101
      && class_getMethodImplementation(cls, sel_setObservationInfo_) == (IMP)qword_1ECD09C58;
}

void sub_18185DB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      NSLog((NSString *)CFSTR("THIS SHOULD NOT HAVE HAPPENED: %@"));
      objc_exception_rethrow();
    }
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v9);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18185DE9C(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  void *v3;

  if (a2)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_NSKeyValueContainerClassGetNotifyingInfo(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 40);
  if (!result)
  {
    if (class_isMetaClass(*(Class *)(a1 + 8)))
    {
      return *(_QWORD **)(a1 + 40);
    }
    else
    {
      result = _NSKVONotifyingCreateInfoWithOriginalClass(*(Class *)(a1 + 8));
      *(_QWORD *)(a1 + 40) = result;
    }
  }
  return result;
}

void _NSKVONotifyingEnableForInfoAndKey(uint64_t a1, const void *a2)
{
  id v4;
  objc_method *v5;
  char *v6;
  char *v7;
  int v8;
  void (*v9)(void);
  const char *v10;
  const char *v11;
  const char *v12;
  const char *Name;
  const char *v14;
  objc_class *v15;
  const char *v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  const char *v21;
  void (*Implementation)(void);
  const char *TypeEncoding;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  objc_method *v27;
  const char *v28;
  objc_method *v29;
  const char *v30;
  objc_method *v31;
  const char *v32;
  objc_method *v33;
  const char *v34;
  objc_method *v35;
  const char *v36;
  objc_method *v37;
  const char *v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  objc_method *v42;
  const char *v43;
  objc_method *v44;
  const char *v45;
  objc_method *v46;
  const char *v47;
  objc_method *v48;
  const char *v49;
  objc_method *v50;
  const char *v51;
  objc_method *v52;
  const char *v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  objc_method *v57;
  const char *v58;
  objc_method *v59;
  const char *v60;
  objc_method *v61;
  const char *v62;
  objc_method *v63;
  const char *v64;
  objc_method *v65;
  const char *v66;
  const char *v67;
  const char *v68;
  char __source[16];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 16), a2);
  os_unfair_recursive_lock_unlock();
  v4 = _NSKeyValueSetterForClassAndKey(*(const void *(__cdecl **)(CFAllocatorRef, const void *))a1, a2, *(void **)a1);
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_43;
  v5 = (objc_method *)objc_msgSend(v4, "method");
  if (*method_getTypeEncoding(v5) == 118)
  {
    v6 = method_copyArgumentType(v5, 2u);
    v7 = v6;
    v8 = *v6;
    if (v8 > 82)
    {
      switch(*v6)
      {
        case 'c':
          v9 = (void (*)(void))_NSSetCharValueAndNotify;
          break;
        case 'd':
          v9 = (void (*)(void))_NSSetDoubleValueAndNotify;
          break;
        case 'e':
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'r':
          goto LABEL_28;
        case 'f':
          v9 = (void (*)(void))_NSSetFloatValueAndNotify;
          break;
        case 'i':
          v9 = (void (*)(void))_NSSetIntValueAndNotify;
          break;
        case 'l':
          v9 = (void (*)(void))_NSSetLongValueAndNotify;
          break;
        case 'q':
          v9 = (void (*)(void))_NSSetLongLongValueAndNotify;
          break;
        case 's':
          v9 = (void (*)(void))_NSSetShortValueAndNotify;
          break;
        default:
          if (v8 == 83)
          {
            v9 = (void (*)(void))_NSSetUnsignedShortValueAndNotify;
          }
          else
          {
            if (v8 != 123)
              goto LABEL_28;
            if (!strcmp(v6, "{CGPoint=dd}") || !strcmp(v7, "{_NSPoint=ff}"))
            {
              v9 = (void (*)(void))_NSSetPointValueAndNotify;
            }
            else if (!strcmp(v7, "{_NSRange=QQ}"))
            {
              v9 = (void (*)(void))_NSSetRangeValueAndNotify;
            }
            else if (!strcmp(v7, "{CGRect={CGPoint=dd}{CGSize=dd}}")
                   || !strcmp(v7, "{_NSRect={_NSPoint=ff}{_NSSize=ff}}"))
            {
              v9 = (void (*)(void))_NSSetRectValueAndNotify;
            }
            else
            {
              v9 = (void (*)(void))_NSSetSizeValueAndNotify;
              if (strcmp(v7, "{CGSize=dd}") && strcmp(v7, "{_NSSize=ff}"))
                v9 = (void (*)(void))MEMORY[0x1E0C9A858];
            }
          }
          break;
      }
    }
    else
    {
      if (v8 <= 75)
      {
        v9 = (void (*)(void))_NSSetObjectValueAndNotify;
        switch(*v6)
        {
          case '@':
            goto LABEL_41;
          case 'A':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
            goto LABEL_28;
          case 'B':
            v9 = (void (*)(void))_NSSetBoolValueAndNotify;
            goto LABEL_41;
          case 'C':
            v9 = (void (*)(void))_NSSetUnsignedCharValueAndNotify;
            goto LABEL_41;
          case 'I':
            v9 = (void (*)(void))_NSSetUnsignedIntValueAndNotify;
            goto LABEL_41;
          default:
            if (v8 != 35)
              goto LABEL_28;
            goto LABEL_41;
        }
      }
      if (v8 == 76)
      {
        v9 = (void (*)(void))_NSSetUnsignedLongValueAndNotify;
      }
      else
      {
        if (v8 != 81)
        {
LABEL_28:
          if (*(_QWORD *)a1)
            Name = class_getName(*(Class *)a1);
          else
            Name = "nil";
          v67 = method_getName(v5);
          v68 = sel_getName(v67);
          NSLog((NSString *)CFSTR("KVO autonotifying only supports -set<Key>: methods that take id, NSNumber-supported scalar types, and some NSValue-supported structure types. Autonotifying will not be done for invocations of -[%s %s]."), Name, v68);
          free(v7);
          goto LABEL_43;
        }
        v9 = (void (*)(void))_NSSetUnsignedLongLongValueAndNotify;
      }
    }
LABEL_41:
    free(v7);
    v14 = method_getName(v5);
    NSKVONotifyingSetMethodImplementation((Class *)a1, v14, v9, a2);
    if (v9 == (void (*)(void))MEMORY[0x1E0C9A858])
    {
      NSKVONotifyingSetMethodImplementation((Class *)a1, sel_forwardInvocation_, (void (*)(void))NSKVOForwardInvocation, 0);
      v15 = *(objc_class **)(a1 + 8);
      strcpy(__source, "_original_");
      v16 = sel_getName(v14);
      v17 = strlen(v16);
      v18 = v17 + 11;
      MEMORY[0x1E0C80A78](v17);
      v20 = &__source[-((v19 + 26) & 0xFFFFFFFFFFFFFFF0) - 8];
      strlcpy(v20, __source, v18);
      strlcat(v20, v16, v18);
      v21 = sel_registerName(v20);
      Implementation = method_getImplementation(v5);
      TypeEncoding = method_getTypeEncoding(v5);
      class_addMethod(v15, v21, Implementation, TypeEncoding);
    }
  }
  else
  {
    if (*(_QWORD *)a1)
      v10 = class_getName(*(Class *)a1);
    else
      v10 = "nil";
    v11 = method_getName(v5);
    v12 = sel_getName(v11);
    NSLog((NSString *)CFSTR("KVO autonotifying only supports -set<Key>: methods that return void. Autonotifying will not be done for invocations of -[%s %s]."), v10, v12);
  }
LABEL_43:
  v24 = _NSKeyValueMutableArrayGetterForIsaAndKey(*(const void *(__cdecl **)(CFAllocatorRef, const void *))a1, a2);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v25 = objc_msgSend(v24, "mutatingMethods");
    if (v25)
    {
      v26 = (_QWORD *)v25;
      v27 = *(objc_method **)(v25 + 8);
      if (v27)
      {
        v28 = method_getName(v27);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v28, (void (*)(void))NSKVOInsertObjectAtIndexAndNotify, a2);
      }
      v29 = (objc_method *)v26[4];
      if (v29)
      {
        v30 = method_getName(v29);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v30, (void (*)(void))NSKVOInsertObjectsAtIndexesAndNotify, a2);
      }
      v31 = (objc_method *)v26[2];
      if (v31)
      {
        v32 = method_getName(v31);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v32, (void (*)(void))NSKVORemoveObjectAtIndexAndNotify, a2);
      }
      v33 = (objc_method *)v26[5];
      if (v33)
      {
        v34 = method_getName(v33);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v34, (void (*)(void))NSKVORemoveObjectsAtIndexesAndNotify, a2);
      }
      v35 = (objc_method *)v26[3];
      if (v35)
      {
        v36 = method_getName(v35);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v36, (void (*)(void))NSKVOReplaceObjectAtIndexAndNotify, a2);
      }
      v37 = (objc_method *)v26[6];
      if (v37)
      {
        v38 = method_getName(v37);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v38, (void (*)(void))NSKVOReplaceObjectsAtIndexesAndNotify, a2);
      }
    }
  }
  v39 = _NSKeyValueMutableOrderedSetGetterForIsaAndKey(*(const void *(__cdecl **)(CFAllocatorRef, const void *))a1, a2);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v40 = objc_msgSend(v39, "mutatingMethods");
    if (v40)
    {
      v41 = (_QWORD *)v40;
      v42 = *(objc_method **)(v40 + 8);
      if (v42)
      {
        v43 = method_getName(v42);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v43, (void (*)(void))NSKVOInsertObjectAtIndexAndNotify, a2);
      }
      v44 = (objc_method *)v41[4];
      if (v44)
      {
        v45 = method_getName(v44);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v45, (void (*)(void))NSKVOInsertObjectsAtIndexesAndNotify, a2);
      }
      v46 = (objc_method *)v41[2];
      if (v46)
      {
        v47 = method_getName(v46);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v47, (void (*)(void))NSKVORemoveObjectAtIndexAndNotify, a2);
      }
      v48 = (objc_method *)v41[5];
      if (v48)
      {
        v49 = method_getName(v48);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v49, (void (*)(void))NSKVORemoveObjectsAtIndexesAndNotify, a2);
      }
      v50 = (objc_method *)v41[3];
      if (v50)
      {
        v51 = method_getName(v50);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v51, (void (*)(void))NSKVOReplaceObjectAtIndexAndNotify, a2);
      }
      v52 = (objc_method *)v41[6];
      if (v52)
      {
        v53 = method_getName(v52);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v53, (void (*)(void))NSKVOReplaceObjectsAtIndexesAndNotify, a2);
      }
    }
  }
  v54 = _NSKeyValueMutableSetGetterForClassAndKey(*(const void *(__cdecl **)(CFAllocatorRef, const void *))a1, a2, *(void **)a1);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v55 = objc_msgSend(v54, "mutatingMethods");
    if (v55)
    {
      v56 = (_QWORD *)v55;
      v57 = *(objc_method **)(v55 + 8);
      if (v57)
      {
        v58 = method_getName(v57);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v58, (void (*)(void))NSKVOAddObjectAndNotify, a2);
      }
      v59 = (objc_method *)v56[3];
      if (v59)
      {
        v60 = method_getName(v59);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v60, (void (*)(void))NSKVOIntersectSetAndNotify, a2);
      }
      v61 = (objc_method *)v56[4];
      if (v61)
      {
        v62 = method_getName(v61);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v62, (void (*)(void))NSKVOMinusSetAndNotify, a2);
      }
      v63 = (objc_method *)v56[2];
      if (v63)
      {
        v64 = method_getName(v63);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v64, (void (*)(void))NSKVORemoveObjectAndNotify, a2);
      }
      v65 = (objc_method *)v56[5];
      if (v65)
      {
        v66 = method_getName(v65);
        NSKVONotifyingSetMethodImplementation((Class *)a1, v66, (void (*)(void))NSKVOUnionSetAndNotify, a2);
      }
    }
  }
  _NSKeyValueInvalidateCachedMutatorsForIsaAndKey(*(_QWORD *)(a1 + 8), a2);
}

id _NSKeyValueMutableArrayGetterForIsaAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2)
{
  const __CFSet *v4;
  __int128 v5;
  CFHashCode v6;
  id Value;
  CFSetCallBacks v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  v4 = (const __CFSet *)NSKeyValueCachedMutableArrayGetters;
  if (!NSKeyValueCachedMutableArrayGetters)
  {
    v5 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
    *(_OWORD *)&v9.version = *MEMORY[0x1E0C9B3B0];
    *(_OWORD *)&v9.release = v5;
    v9.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v9.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    v4 = CFSetCreateMutable(0, 0, &v9);
    NSKeyValueCachedMutableArrayGetters = (uint64_t)v4;
  }
  v9.version = 0;
  v9.retain = a1;
  *(_OWORD *)&v9.release = (unint64_t)a2;
  if (a2)
  {
    v6 = CFHash(a2);
    v4 = (const __CFSet *)NSKeyValueCachedMutableArrayGetters;
  }
  else
  {
    v6 = 0;
  }
  v9.copyDescription = (CFSetCopyDescriptionCallBack)(v6 ^ (unint64_t)a1);
  Value = (id)CFSetGetValue(v4, &v9);
  if (!Value)
  {
    Value = objc_msgSend(a1, sel__createMutableArrayValueGetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v9.version, v9.release);
    CFSetAddValue((CFMutableSetRef)NSKeyValueCachedMutableArrayGetters, Value);

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18185F6F0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id _NSKeyValueSetterForClassAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2, void *a3)
{
  const __CFSet *v6;
  __int128 v7;
  CFHashCode v8;
  id Value;
  CFSetCallBacks v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  v6 = (const __CFSet *)NSKeyValueCachedSetters;
  if (!NSKeyValueCachedSetters)
  {
    v7 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
    *(_OWORD *)&v11.version = *MEMORY[0x1E0C9B3B0];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    v6 = CFSetCreateMutable(0, 0, &v11);
    NSKeyValueCachedSetters = (uint64_t)v6;
  }
  v11.version = 0;
  v11.retain = a1;
  *(_OWORD *)&v11.release = (unint64_t)a2;
  if (a2)
  {
    v8 = CFHash(a2);
    v6 = (const __CFSet *)NSKeyValueCachedSetters;
  }
  else
  {
    v8 = 0;
  }
  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    Value = objc_msgSend(a3, sel__createValueSetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v11.version, v11.release);
    CFSetAddValue((CFMutableSetRef)NSKeyValueCachedSetters, Value);

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18185F864(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id _NSKeyValueMutableSetGetterForClassAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2, void *a3)
{
  const __CFSet *v6;
  __int128 v7;
  CFHashCode v8;
  id Value;
  CFSetCallBacks v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  v6 = (const __CFSet *)NSKeyValueCachedMutableSetGetters;
  if (!NSKeyValueCachedMutableSetGetters)
  {
    v7 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
    *(_OWORD *)&v11.version = *MEMORY[0x1E0C9B3B0];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    v6 = CFSetCreateMutable(0, 0, &v11);
    NSKeyValueCachedMutableSetGetters = (uint64_t)v6;
  }
  v11.version = 0;
  v11.retain = a1;
  *(_OWORD *)&v11.release = (unint64_t)a2;
  if (a2)
  {
    v8 = CFHash(a2);
    v6 = (const __CFSet *)NSKeyValueCachedMutableSetGetters;
  }
  else
  {
    v8 = 0;
  }
  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    Value = objc_msgSend(a3, sel__createMutableSetValueGetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v11.version, v11.release);
    CFSetAddValue((CFMutableSetRef)NSKeyValueCachedMutableSetGetters, Value);

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18185F9D8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id _NSKeyValueMutableOrderedSetGetterForIsaAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2)
{
  const __CFSet *v4;
  __int128 v5;
  CFHashCode v6;
  id Value;
  CFSetCallBacks v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  v4 = (const __CFSet *)NSKeyValueCachedMutableOrderedSetGetters;
  if (!NSKeyValueCachedMutableOrderedSetGetters)
  {
    v5 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
    *(_OWORD *)&v9.version = *MEMORY[0x1E0C9B3B0];
    *(_OWORD *)&v9.release = v5;
    v9.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v9.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    v4 = CFSetCreateMutable(0, 0, &v9);
    NSKeyValueCachedMutableOrderedSetGetters = (uint64_t)v4;
  }
  v9.version = 0;
  v9.retain = a1;
  *(_OWORD *)&v9.release = (unint64_t)a2;
  if (a2)
  {
    v6 = CFHash(a2);
    v4 = (const __CFSet *)NSKeyValueCachedMutableOrderedSetGetters;
  }
  else
  {
    v6 = 0;
  }
  v9.copyDescription = (CFSetCopyDescriptionCallBack)(v6 ^ (unint64_t)a1);
  Value = (id)CFSetGetValue(v4, &v9);
  if (!Value)
  {
    Value = objc_msgSend(a1, sel__createMutableOrderedSetValueGetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v9.version, v9.release);
    CFSetAddValue((CFMutableSetRef)NSKeyValueCachedMutableOrderedSetGetters, Value);

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18185FB40(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void _NSKeyValueInvalidateCachedMutatorsForIsaAndKey(uint64_t a1, const void *a2)
{
  CFHashCode v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  _QWORD value[5];

  value[4] = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  value[0] = 0;
  value[1] = a1;
  value[2] = a2;
  if (a2)
    v4 = CFHash(a2);
  else
    v4 = 0;
  value[3] = v4 ^ a1;
  if (NSKeyValueCachedSetters)
  {
    v5 = CFSetGetValue((CFSetRef)NSKeyValueCachedSetters, value);
    if (v5)
      CFSetRemoveValue((CFMutableSetRef)NSKeyValueCachedSetters, v5);
  }
  if (NSKeyValueCachedMutableArrayGetters)
  {
    v6 = CFSetGetValue((CFSetRef)NSKeyValueCachedMutableArrayGetters, value);
    if (v6)
      CFSetRemoveValue((CFMutableSetRef)NSKeyValueCachedMutableArrayGetters, v6);
  }
  if (NSKeyValueCachedMutableOrderedSetGetters)
  {
    v7 = CFSetGetValue((CFSetRef)NSKeyValueCachedMutableOrderedSetGetters, value);
    if (v7)
      CFSetRemoveValue((CFMutableSetRef)NSKeyValueCachedMutableOrderedSetGetters, v7);
  }
  if (NSKeyValueCachedMutableSetGetters)
  {
    v8 = CFSetGetValue((CFSetRef)NSKeyValueCachedMutableSetGetters, value);
    if (v8)
      CFSetRemoveValue((CFMutableSetRef)NSKeyValueCachedMutableSetGetters, v8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
}

uint64_t NSKeyValuePushPendingNotificationLocal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  malloc_zone_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  id v22;
  id v23;

  result = objc_msgSend(*(id *)(a7 + 48), "containsObject:", *(_QWORD *)(a3 + 8));
  if ((result & 1) == 0)
  {
    v14 = *(_QWORD *)(a7 + 24);
    if (v14 == *(_QWORD *)a7)
    {
      v15 = 2 * v14;
      if (*(_BYTE *)(a7 + 8))
      {
        v16 = 160 * v14;
        v17 = malloc_default_zone();
        v18 = (char *)malloc_type_zone_calloc(v17, 1uLL, v16, 0xC2E5A2B2uLL);
        memmove(v18, *(const void **)(a7 + 16), 80 * *(_QWORD *)a7);
        *(_QWORD *)(a7 + 16) = v18;
        *(_BYTE *)(a7 + 8) = 0;
      }
      else
      {
        v18 = (char *)NSReallocateScannedUncollectable(*(void **)(a7 + 16), 160 * v14);
        *(_QWORD *)(a7 + 16) = v18;
      }
      *(_QWORD *)a7 = v15;
      v14 = *(_QWORD *)(a7 + 24);
    }
    else
    {
      v18 = *(char **)(a7 + 16);
    }
    *(_QWORD *)(a7 + 24) = v14 + 1;
    v19 = &v18[80 * v14];
    *(_QWORD *)v19 = a3;
    v20 = *(_QWORD *)(a4 + 32);
    v21 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v19 + 8) = *(_OWORD *)a4;
    *((_QWORD *)v19 + 5) = v20;
    *(_OWORD *)(v19 + 24) = v21;
    v22 = *((id *)v19 + 2);
    *((_QWORD *)v19 + 6) = a5;
    *((_QWORD *)v19 + 7) = a6;
    v23 = a5;
    *((_QWORD *)v19 + 8) = *(unsigned __int8 *)(a7 + 32);
    *((_QWORD *)v19 + 9) = a2;
    return (uint64_t)*(id *)(*(_QWORD *)v19 + 8);
  }
  return result;
}

id @objc NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:)(void *a1, int a2, void *a3, void *aBlock)
{
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v6 = _Block_copy(aBlock);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v9 = v8;
  _Block_copy(v6);
  v10 = a1;
  specialized NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:)((uint64_t)v7, v9, v10, (uint64_t)v6);
  _Block_release(v6);
  _Block_release(v6);

  swift_bridgeObjectRelease();
  return (id)_NativeSet.bridged()();
}

uint64_t specialized NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t aBlock;
  uint64_t v33;
  __int128 v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t (*v36)@<X0>(uint64_t *@<X8>);
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  __int128 v40;
  uint64_t (*v41)(uint64_t, uint64_t);

  v39[0] = a3;
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v8 = a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSKeyValueObservingCustomization.Type);
  if (swift_dynamicCast() && specialized static __KVOKeyPathBridgeMachinery._bridgeKeyPath(_:)(a1, a2))
  {
    v9 = (*(uint64_t (**)(void))(v33 + 8))();
    if ((v9 & 0xC000000000000001) != 0)
    {
      __CocoaSet.count.getter();
      v38 = Set.init(minimumCapacity:)();
      __CocoaSet.makeIterator()();
      type metadata accessor for AnyKeyPath();
      Set.Iterator.init(_cocoa:)();
      v9 = v39[0];
      v10 = v39[1];
      v11 = v40;
      v12 = v41;
    }
    else
    {
      v38 = Set.init(minimumCapacity:)();
      v21 = -1;
      v22 = -1 << *(_BYTE *)(v9 + 32);
      v23 = ~v22;
      v10 = v9 + 56;
      v24 = -v22;
      if (v24 < 64)
        v21 = ~(-1 << v24);
      v12 = (uint64_t (*)(uint64_t, uint64_t))(v21 & *(_QWORD *)(v9 + 56));
      v11 = (unint64_t)v23;
    }
    aBlock = v9;
    v33 = v10;
    v34 = v11;
    v35 = v12;
    v36 = closure #1 in NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:);
    v37 = 0;
    specialized LazyMapSequence.Iterator.next()();
    if (v26)
    {
      v27 = v25;
      v28 = v26;
      do
      {
        specialized Set._Variant.insert(_:)(&v31, v27, v28);
        swift_bridgeObjectRelease();
        specialized LazyMapSequence.Iterator.next()();
        v27 = v29;
        v28 = v30;
      }
      while (v30);
    }
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_release();
    return v38;
  }
  v13 = String._bridgeToObjectiveCImpl()();
  v14 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, v13);
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  v15 = static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v15)
  {
    v16 = v15;

    return v16;
  }
  objc_msgSend(v14, sel_count);
  v39[0] = Set.init(minimumCapacity:)();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v39;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = partial apply for specialized closure #1 in static Set._forceBridgeFromObjectiveC(_:result:);
  *(_QWORD *)(v18 + 24) = v17;
  v35 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v36 = (uint64_t (*)@<X0>(uint64_t *@<X8>))v18;
  aBlock = MEMORY[0x1E0C809B0];
  v33 = 1107296256;
  *(_QWORD *)&v34 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((_QWORD *)&v34 + 1) = &block_descriptor;
  v19 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateObjectsUsingBlock_, v19);
  _Block_release(v19);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v19 & 1) == 0)
  {
    v16 = v39[0];

    swift_release();
    return v16;
  }
  __break(1u);
  return result;
}

uint64_t @objc NSObject.__NS_swiftOverlay_automaticallyNotifiesObserversForKey(_:original:)(void *a1, int a2, void *a3, void *aBlock)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v6 = _Block_copy(aBlock);
  v7 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v9 = v8;
  _Block_copy(v6);
  v10 = a1;
  LOBYTE(v7) = specialized NSObject.__NS_swiftOverlay_automaticallyNotifiesObserversForKey(_:original:)(v7, v9, v10, (uint64_t)v6);
  _Block_release(v6);
  _Block_release(v6);

  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized NSObject.__NS_swiftOverlay_automaticallyNotifiesObserversForKey(_:original:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v8 = a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSKeyValueObservingCustomization.Type);
  if (swift_dynamicCast() && specialized static __KVOKeyPathBridgeMachinery._bridgeKeyPath(_:)(a1, a2))
  {
    v9 = (*(uint64_t (**)(void))(v12 + 16))();
    swift_release();
  }
  else
  {
    v10 = String._bridgeToObjectiveCImpl()();
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, v10);
    swift_unknownObjectRelease();
  }
  return v9 & 1;
}

void *NSKeyValueWillChangeBySetMutation@<X0>(void *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t *a7@<X8>)
{
  void *v10;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  char v20;
  void *v21;
  void *v22;

  v10 = result;
  if (a3)
  {
    switch(*(_QWORD *)a5)
    {
      case 1:
        if ((a4 & 1) == 0)
        {
          v13 = 0;
          v14 = 0;
          goto LABEL_33;
        }
        v13 = objc_msgSend(result, "valueForKey:", a2);
        v20 = objc_msgSend(*(id *)(a5 + 8), "intersectsSet:", v13);
        v21 = *(void **)(a5 + 8);
        if ((v20 & 1) != 0)
        {
          result = (void *)objc_msgSend(v21, "mutableCopy");
          v14 = result;
          if (!v13)
            goto LABEL_33;
          result = (void *)objc_msgSend(result, "minusSet:", v13);
        }
        else
        {
          result = (void *)objc_msgSend(v21, "copy");
          v14 = result;
        }
        v13 = 0;
LABEL_33:
        v16 = 2;
        goto LABEL_39;
      case 2:
        if ((a4 & 2) == 0)
          goto LABEL_15;
        v17 = objc_msgSend(result, "valueForKey:", a2);
        v18 = objc_msgSend(*(id *)(a5 + 8), "isSubsetOfSet:", v17);
        v19 = *(void **)(a5 + 8);
        if (v18)
        {
          result = (void *)objc_msgSend(v19, "copy");
          v13 = (uint64_t)result;
        }
        else
        {
          result = (void *)objc_msgSend(v19, "mutableCopy");
          v13 = (uint64_t)result;
          if (v17)
            result = (void *)objc_msgSend(result, "intersectSet:", v17);
        }
        goto LABEL_30;
      case 3:
        if ((a4 & 2) != 0)
        {
          result = (void *)objc_msgSend((id)objc_msgSend(result, "valueForKey:", a2), "mutableCopy");
          v13 = (uint64_t)result;
          if (*(_QWORD *)(a5 + 8))
            result = (void *)objc_msgSend(result, "minusSet:");
        }
        else
        {
LABEL_15:
          v13 = 0;
        }
LABEL_30:
        v14 = 0;
        v16 = 3;
        goto LABEL_39;
      case 4:
        if ((a4 & 2) != 0)
        {
          v22 = (void *)objc_msgSend(result, "valueForKey:", a2);
          result = (void *)objc_msgSend(v22, "mutableCopy");
          v13 = (uint64_t)result;
          if (*(_QWORD *)(a5 + 8))
            result = (void *)objc_msgSend(result, "minusSet:");
          if ((a4 & 1) == 0)
          {
            v14 = 0;
            goto LABEL_38;
          }
          if (v22)
          {
            v14 = (void *)objc_msgSend(*(id *)(a5 + 8), "mutableCopy");
            goto LABEL_37;
          }
        }
        else
        {
          v13 = 0;
          if ((a4 & 1) == 0)
          {
            v16 = 4;
            v14 = 0;
            goto LABEL_39;
          }
        }
        v22 = (void *)objc_msgSend(v10, "valueForKey:", a2);
        result = (void *)objc_msgSend(*(id *)(a5 + 8), "mutableCopy");
        v14 = result;
        if (!v22)
          goto LABEL_38;
LABEL_37:
        result = (void *)objc_msgSend(v14, "minusSet:", v22);
LABEL_38:
        v16 = 4;
LABEL_39:
        *a7 = v16;
        a7[1] = v13;
        a7[4] = 0;
        v15 = 1;
        a7[2] = (uint64_t)v14;
        break;
      default:
        v16 = 0;
        v13 = 0;
        v14 = 0;
        goto LABEL_39;
    }
  }
  else
  {
    if ((a4 & 2) != 0)
    {
      result = (void *)objc_msgSend(result, "valueForKeyPath:", a2);
      if (!result)
        result = (void *)objc_msgSend(MEMORY[0x1E0C99E38], "null");
    }
    else
    {
      result = 0;
    }
    v15 = 0;
    *a7 = 1;
    a7[1] = (uint64_t)result;
    a7[4] = 0;
    a7[2] = 0;
  }
  a7[3] = 0;
  *a6 = v15;
  return result;
}

uint64_t NSKeyValueWillChangeByOrderedToManyMutation@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _BYTE *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  if (a3)
  {
    v13 = a5[1];
    v14 = _CFGetTSD();
    if (v14 && (v15 = v14, v16 = _CFGetTSD(), v15 == a2) && (void *)v16 == a1)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
    }
    else
    {
      _CFSetTSD();
      _CFSetTSD();
      v17 = objc_msgSend(a1, "valueForKey:", a2);
      _CFSetTSD();
      _CFSetTSD();
      if (v17 && _NSIsNSOrderedSet())
      {
        v21 = *a5;
        if (*a5 != 4 && v21 != 2)
        {
          v19 = 0;
          v18 = 1;
          if ((a4 & 2) == 0)
            goto LABEL_20;
LABEL_19:
          if (v21 != 2)
          {
            v23 = (void *)v17;
            if ((v18 & 1) == 0)
              v23 = (void *)objc_msgSend(a1, "valueForKey:", a2);
            result = objc_msgSend(v23, "objectsAtIndexes:", v13);
            v21 = *a5;
            goto LABEL_24;
          }
LABEL_20:
          result = 0;
LABEL_24:
          v24 = v17 & (a4 << 58 >> 63);
          if (result)
            v24 = result;
          *a7 = v21;
          a7[1] = v24;
          a7[2] = 0;
          a7[3] = v13;
          a7[4] = v19;
          goto LABEL_27;
        }
        v22 = objc_msgSend((id)v17, "count");
        v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", 8 * v22);
        objc_msgSend((id)v17, "getObjects:range:", objc_msgSend(v19, "mutableBytes"), 0, v22);
      }
      else
      {
        v19 = 0;
      }
      v18 = 1;
    }
    v21 = *a5;
    if ((a4 & 2) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  if ((a4 & 2) != 0)
  {
    result = objc_msgSend(a1, "valueForKeyPath:", a2);
    if (!result)
      result = objc_msgSend(MEMORY[0x1E0C99E38], "null");
  }
  else
  {
    result = 0;
  }
  *a7 = 1;
  a7[1] = result;
  a7[3] = 0;
  a7[4] = 0;
  a7[2] = 0;
LABEL_27:
  *a6 = 0;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _JSONKeyedEncodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

uint64_t getEnumTagSinglePayload for URLQueryItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for URLRequest()
{
  return &type metadata for URLRequest;
}

uint64_t getEnumTagSinglePayload for IndexPath(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexPath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

NSUInteger NSRoundDownToMultipleOfPageSize(NSUInteger bytes)
{
  return -*MEMORY[0x1E0C85AD8] & bytes;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Bool()
{
  unsigned __int8 *v0;

  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, *v0);
}

id Int64.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_longLongValue);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, JSONDecoderImpl.KeyedContainer.decode(_:forKey:)) & 1;
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(a1, a2, a3, (uint64_t *)specialized JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, JSONDecoderImpl.KeyedContainer.decodeNil(forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;

  return a4(a1, *v4, v4[1], v4[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1;
}

uint64_t JSONDecoderImpl.KeyedContainer.decodeNil(forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;

  v11 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a4 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12), (v14 & 1) != 0))
  {
    v15 = *(_QWORD *)(a4 + 56) + 24 * v13;
    v16 = *(_QWORD *)v15;
    v17 = *(_QWORD *)(v15 + 8);
    v18 = *(unsigned __int8 *)(v15 + 16);
    swift_bridgeObjectRelease();
    if (v17 | v16)
      v19 = 0;
    else
      v19 = v18 == 160;
    v20 = v19;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    v23[3] = a5;
    v23[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(a3);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 2238496;
    v26._object = (void *)0xE300000000000000;
    String.append(_:)(v26);
    v27._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 3025186;
    v28._object = (void *)0xE300000000000000;
    String.append(_:)(v28);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x1E0DEC448], v21);
    swift_willThrow();
  }
  return v20 & 1;
}

uint64_t JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t *v28;

  v11 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(_QWORD *)(a4 + 16) || (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12), (v14 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v19 = type metadata accessor for DecodingError();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    v21[3] = a5;
    v21[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(a3);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 2238496;
    v24._object = (void *)0xE300000000000000;
    String.append(_:)(v24);
    v25._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 3025186;
    v26._object = (void *)0xE300000000000000;
    String.append(_:)(v26);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC448], v19);
LABEL_6:
    swift_willThrow();
    return v18 & 1;
  }
  v15 = *(_QWORD *)(a4 + 56) + 24 * v13;
  v16 = *(_QWORD *)v15;
  v17 = *(unsigned __int8 *)(v15 + 16);
  swift_bridgeObjectRelease();
  if ((v17 & 0xE0) != 0x40)
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.KeyedContainer.createTypeMismatchError(type:forKey:value:)(MEMORY[0x1E0DEAFA0], a1, v17, a3, v28, a5, a6);
    goto LABEL_6;
  }
  v18 = v16 & 1;
  return v18 & 1;
}

void JSONDecoderImpl.KeyedContainer.createTypeMismatchError(type:forKey:value:)(unint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W4>, unint64_t a4@<X6>, unint64_t *a5@<X8>, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v26;
  Swift::String v27;
  unint64_t v28[2];
  int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v28[0] = a4;
  v29 = a3;
  v33 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v28 - v19;
  v30 = a5;
  v28[1] = a1;
  *a5 = a1;
  v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v21((char *)v28 - v19, a2, a6, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, a6);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v20, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, a6) == 1)
  {
    v22 = *(void (**)(char *, uint64_t))(v14 + 8);
    v22(v16, v13);
    _CodingPathNode.path.getter(v28[0]);
    v22(v20, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, a6);
    v23 = _CodingPathNode.path.getter(v28[0]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 56) = a6;
    *(_QWORD *)(inited + 64) = a7;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    ((void (*)(uint64_t *, char *, uint64_t))v21)(boxed_opaque_existential_1, v12, a6);
    v31 = v23;
    specialized Array.append<A>(contentsOf:)(inited);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a6);
  }
  v31 = 0;
  v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v31 = 0xD000000000000013;
  v32 = 0x8000000182309400;
  v26._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x756F662074756220;
  v27._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v27);
  __asm { BR              X10 }
}

uint64_t sub_181861648()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  v1 = *(_QWORD *)(v0 - 184);
  v2._countAndFlagsBits = 0x7265626D756ELL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x64616574736E6920;
  v3._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v3);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  v4 = *MEMORY[0x1E0DEC450];
  v5 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v1, v4, v5);
}

void sub_181861984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _NSFCClaimsLog()
{
  if (qword_1ECD0A798 != -1)
    dispatch_once(&qword_1ECD0A798, &__block_literal_global_797);
  return qword_1ECD0A700;
}

void __NSOQSchedule_f(uint64_t a1, uint64_t a2)
{
  void *v4;
  pthread_t v5;
  void *v6;
  unsigned int v7;
  pthread_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (void *)MEMORY[0x186DA8F78]();
  v5 = pthread_self();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  objc_msgSend(*(id *)(a1 + 152), "addPointer:", v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 232));
  v6 = (void *)voucher_adopt();
  *(_QWORD *)(a2 + 104) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 232));
  _CFSetTSD();
  _CFSetTSD();
  atomic_store(0xD8u, (unsigned __int8 *)(a2 + 237));
  __NSOPERATIONQUEUE_IS_STARTING_AN_OPERATION__((void *)a2);
  _CFSetTSD();
  _CFSetTSD();
  if (objc_msgSend((id)a2, "isFinished"))
  {
    v7 = atomic_load((unsigned __int8 *)(a2 + 237));
    if (v7 <= 0xEF)
      +[__NSOperationInternalObserver _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:](__NSOperationInternalObserver, "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:", CFSTR("isFinished"), a2, 0, 0, 0, 0, 0);
  }

  v8 = pthread_self();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v9 = objc_msgSend(*(id *)(a1 + 152), "count");
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    while ((pthread_t)objc_msgSend(*(id *)(a1 + 152), "pointerAtIndex:", v11) != v8)
    {
      if (v10 == ++v11)
        goto LABEL_11;
    }
    if (v11 != 0x7FFFFFFFFFFFFFFFLL)
      objc_msgSend(*(id *)(a1 + 152), "removePointerAtIndex:", v11);
  }
LABEL_11:
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  objc_autoreleasePoolPop(v4);
}

uint64_t __NSOPERATIONQUEUE_IS_STARTING_AN_OPERATION__(void *a1)
{
  return objc_msgSend(a1, "start");
}

_QWORD *NSSliceInitWithSlice(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = malloc_type_malloc(0x18uLL, 0x1080040B03C7EFDuLL);
  a1[1] = v4;
  v5 = a2[1];
  v6 = *(_QWORD *)(v5 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v5;
  v4[2] = v6;
  result = malloc_type_malloc(0x28uLL, 0x10800408D251DEBuLL);
  a1[2] = result;
  v8 = (__int128 *)a2[2];
  v9 = *v8;
  v10 = v8[1];
  result[4] = *((_QWORD *)v8 + 4);
  *(_OWORD *)result = v9;
  *((_OWORD *)result + 1) = v10;
  if (a2[3])
  {
    result = malloc_type_malloc(0x40uLL, 0x1080040E27AD052uLL);
    a1[3] = result;
    v11 = (_OWORD *)a2[3];
    v13 = v11[2];
    v12 = v11[3];
    v14 = v11[1];
    *(_OWORD *)result = *v11;
    *((_OWORD *)result + 1) = v14;
    *((_OWORD *)result + 2) = v13;
    *((_OWORD *)result + 3) = v12;
  }
  *a1 = 0;
  return result;
}

void NSSliceDealloc(void **a1)
{
  free(a1[1]);
  free(a1[2]);
  free(a1[3]);
}

NSPointerArray *_myersDescent(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  NSPointerArray *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  BOOL v32;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  const char *v39;
  int v40;
  char *v41;
  void *v42;
  CFStringRef v44;
  void *v45;
  CFStringRef v46;
  void *v47;
  char *v48;
  NSPointerArray *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend(a2, "count");
  v7 = objc_msgSend(a1, "count");
  if (v6 >> 60)
    goto LABEL_63;
  v8 = v7;
  if (v6 <= 1)
    v9 = 1;
  else
    v9 = v6;
  *(_QWORD *)&v10 = MEMORY[0x1E0C80A78](v9).n128_u64[0];
  v12 = (char *)&v48 - v11;
  v58 = 0;
  if (v6 >= 0x101)
  {
    v12 = (char *)_CFCreateArrayStorage();
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  objc_msgSend(a2, "getObjects:range:", v12, 0, v6, v10);
  if (v8 >> 60)
  {
    v46 = CFStringCreateWithFormat(0, 0, CFSTR("*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt"), v8);
    v47 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v46, 0);
    CFRelease(v46);
    objc_exception_throw(v47);
  }
  if (v8 <= 1)
    v14 = 1;
  else
    v14 = v8;
  MEMORY[0x1E0C80A78](v14);
  v16 = 0;
  v57 = 0;
  if (v8 < 0x101)
  {
    v17 = (char *)&v48 - v15;
  }
  else
  {
    v16 = (char *)_CFCreateArrayStorage();
    v17 = v16;
  }
  v18 = v17;
  objc_msgSend(a1, "getObjects:range:");
  v19 = -[NSPointerArray initWithOptions:]([NSPointerArray alloc], "initWithOptions:", 2);
  v20 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
  v48 = v13;
  v56 = v20;
  *v20 = 0;
  v51 = v8 + v6;
  if (((v8 + v6) & 0x8000000000000000) == 0)
  {
    v21 = 0;
    v22 = v18;
    v49 = v19;
    v50 = v16;
    while (1)
    {
      if (!v56)
        __assert_rtn("_myersDescent", "NSArray+NSArrayDiffing.m", 48, "prev_v");
      -[NSPointerArray addPointer:](v19, "addPointer:");
      v23 = malloc_type_malloc(8 * v21 + 8, 0x100004000313F17uLL);
      if (!v23)
        break;
      v24 = -v21;
      v54 = v21;
      v55 = -v21 ^ (-v21 >> 63);
      v52 = v22;
      v53 = -v21;
      v25 = v21;
      v26 = -v21;
      do
      {
        if (v26 == v24)
        {
          v27 = v56[v55];
        }
        else
        {
          v28 = 1 - v26;
          if (v26 >= 2)
            v28 = v26 - 2;
          v29 = v56[v28];
          if (v26 == v21 || (v27 = v56[v26 ^ (v26 >> 63)], v29 >= v27))
            v27 = v29 + 1;
        }
        v30 = v27 - v26;
        v31 = v27 - v26 < v8;
        v32 = v27 < v6;
        if (v27 >= v6 || v30 >= v8)
        {
LABEL_36:
          v35 = v26 - 1;
          if (v26 < 1)
            v35 = -v26;
          v23[v35] = v27;
          if (!v32 && !v31)
          {
            free(v23);
            v56 = 0;
            goto LABEL_46;
          }
        }
        else
        {
          v34 = v23;
          while (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a3 + 16))(a3, *(_QWORD *)&v12[8 * v27], *(_QWORD *)&v22[8 * v27]) & 1) != 0)
          {
            v31 = ++v27 + v25 < v8;
            v32 = v27 < v6;
            if (v27 >= v6 || v27 + v25 >= v8)
            {
              v30 = v25 + v27;
              v23 = v34;
              v24 = v53;
              v21 = v54;
              goto LABEL_36;
            }
          }
          v36 = v26 - 1;
          if (v26 < 1)
            v36 = -v26;
          v23 = v34;
          v34[v36] = v27;
          v30 = v25 + v27;
          v24 = v53;
          v21 = v54;
        }
        v26 += 2;
        v25 -= 2;
        v22 -= 16;
      }
      while (v26 <= v21);
      v56 = v23;
LABEL_46:
      v37 = v30 >= v8 && v27 >= v6;
      v19 = v49;
      v16 = v50;
      if (!v37)
      {
        v22 = v52 + 8;
        if (v21++ != v51)
          continue;
      }
      goto LABEL_54;
    }
    qword_1EDC47C18 = (uint64_t)"Out of memory";
    __break(1u);
LABEL_63:
    v44 = CFStringCreateWithFormat(0, 0, CFSTR("*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt"), v6);
    v45 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v44, 0);
    CFRelease(v44);
    objc_exception_throw(v45);
  }
  v27 = 0;
  v30 = 0;
LABEL_54:
  v39 = "x >= n && y >= m";
  v40 = 91;
  if (v27 < v6 || (v41 = v48, v30 < v8))
LABEL_61:
    __assert_rtn("_myersDescent", "NSArray+NSArrayDiffing.m", v40, v39);
  v42 = v56;
  if (v56
    && v42 != -[NSPointerArray pointerAtIndex:](v19, "pointerAtIndex:", -[NSPointerArray count](v19, "count", 91, "x >= n && y >= m") - 1))
  {
    v39 = "v == NULL || v == [result pointerAtIndex:result.count - 1]";
    v40 = 92;
    goto LABEL_61;
  }
  free(v16);
  free(v41);
  return v19;
}

void sub_181864F58(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t _block_invoke(uint64_t a1, void *a2, void *a3)
{
  if (a2 == a3)
    return 1;
  else
    return objc_msgSend(a2, "isEqual:");
}

void _NSXPCInterfaceMethodInfoDealloc(uint64_t a1, id *a2)
{
  if (a2)
  {

    free(a2);
  }
}

_QWORD *initializeWithCopy for URLQueryItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for POSIXError()
{
  return &type metadata for POSIXError;
}

Swift::Double __swiftcall Date.distance(to:)(Foundation::Date to)
{
  double *v1;
  double *v2;

  return *v1 - *v2;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t type metadata accessor for JSONEncoder()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for Locale.Region()
{
  return &type metadata for Locale.Region;
}

void (*AttributeContainer.subscript.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = MEMORY[0x1E0DEE9E8];
  *v3 = MEMORY[0x1E0DEE9E0];
  v3[1] = v4;
  v3[2] = 0;
  v3[3] = 0;
  return AttributeContainer.subscript.modify;
}

id NSData.endIndex.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_length);
}

ValueMetadata *type metadata accessor for Notification()
{
  return &type metadata for Notification;
}

uint64_t LockedState._Buffer.__deallocating_deinit()
{
  char *v0;

  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0
                                                         + class metadata base offset for LockedState._Buffer)
                                             - 8)
                                 + 8))(&v0[*(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v0 + 16)]);
  return swift_deallocClassInstance();
}

uint64_t *destroy for _NSSwiftTimeZone.State(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1 >> 60 != 15)
    return (uint64_t *)outlined consume of Data._Representation(*result, v1);
  return result;
}

uint64_t destroy for _LocaleICU.State(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  if (v2)
  {
    if (v2 == 1)
      goto LABEL_8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[9])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_8:
  if (a1[14])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[18] >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a1[37])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[42] >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[46] >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[49] != 1)
    swift_unknownObjectRelease();
  if (a1[52] >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64(a1, a2, (SEL *)&selRef_initWithLongLong_);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__33(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t NSData.startIndex.getter()
{
  return 0;
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  uint64_t v0;
  uint64_t v1;

  if ((v0 & 0xC000000000000001) != 0)
  {
    if (v0 < 0)
      v1 = v0;
    else
      v1 = v0 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    return (NSSet)v1;
  }
  else
  {
    swift_bridgeObjectRetain();
    return (NSSet)_NativeSet.bridged()();
  }
}

unsigned int *_NSFileHandlePerformSourceContextRetain(unsigned int *result)
{
  unsigned int v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 + 1, result));
  return result;
}

void _encodeInt64(uint64_t a1, const void *a2, uint64_t a3)
{
  CFNumberRef v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v6[0] = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, v6);
  addValueToTopContainerE(a1, a2, v5);
  CFRelease(v5);
}

void append4Bytes(void *a1, unsigned __int8 *a2)
{
  unsigned int v3;
  char v4;
  unsigned int v5;
  char v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  char v16;
  unsigned int v17;
  char v18;
  CFStringRef v19;
  UInt8 bytes[9];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (v3 >= 0xA0)
    v4 = 87;
  else
    v4 = 48;
  bytes[0] = v4 + (*a2 >> 4);
  v5 = v3 & 0xF;
  if (v5 >= 0xA)
    v6 = 87;
  else
    v6 = 48;
  bytes[1] = v6 + v5;
  v7 = a2[1];
  if (v7 >= 0xA0)
    v8 = 87;
  else
    v8 = 48;
  bytes[2] = v8 + (a2[1] >> 4);
  v9 = v7 & 0xF;
  if (v9 >= 0xA)
    v10 = 87;
  else
    v10 = 48;
  bytes[3] = v10 + v9;
  v11 = a2[2];
  if (v11 >= 0xA0)
    v12 = 87;
  else
    v12 = 48;
  bytes[4] = v12 + (a2[2] >> 4);
  v13 = v11 & 0xF;
  if (v13 >= 0xA)
    v14 = 87;
  else
    v14 = 48;
  bytes[5] = v14 + v13;
  v15 = a2[3];
  if (v15 >= 0xA0)
    v16 = 87;
  else
    v16 = 48;
  bytes[6] = v16 + (a2[3] >> 4);
  v17 = v15 & 0xF;
  if (v17 >= 0xA)
    v18 = 87;
  else
    v18 = 48;
  bytes[7] = v18 + v17;
  bytes[8] = 32;
  v19 = CFStringCreateWithBytes(0, bytes, 9, 0x600u, 0);
  objc_msgSend(a1, "appendString:", v19);
  CFRelease(v19);
}

void static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

void sub_181867168()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t ObjCClassFromMetadata;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[120];

  *(_QWORD *)&v9 = v0;
  WORD4(v9) = v1;
  BYTE10(v9) = BYTE2(v1);
  BYTE11(v9) = BYTE3(v1);
  BYTE12(v9) = BYTE4(v1);
  BYTE13(v9) = BYTE5(v1);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, &v9, BYTE6(v1));
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(_QWORD *)&v9 = 0;
  v4 = __NSKeyedUnarchiverSecureUnarchiveObjectOfClass(ObjCClassFromMetadata, (uint64_t)v2, (uint64_t)&v9);

  v5 = (void *)v9;
  if (v4)
  {
    v6 = (id)v9;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
    v7 = v5;
  }
  outlined init with take of Any?((uint64_t)&v9, (uint64_t)v11);
  if (v5)
  {
    v8 = v5;
    swift_willThrow();
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for Any?);

  }
  else
  {
    outlined init with take of Any?((uint64_t)v11, (uint64_t)&v9);
    if (*((_QWORD *)&v10 + 1))
      swift_dynamicCast();
    else
      outlined destroy of Any?((uint64_t)&v9, &demangling cache variable for type metadata for Any?);
  }
}

NSData __swiftcall Data._Representation.bridgedReference()()
{
  NSData result;

  __asm { BR              X10 }
  return result;
}

id sub_181867408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v3 = v0;
  v4 = v1;
  v5 = BYTE2(v1);
  v6 = BYTE3(v1);
  v7 = BYTE4(v1);
  v8 = BYTE5(v1);
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, &v3, BYTE6(v1));
}

void sub_18186765C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181867754(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181867780(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const __CFString *a12, NSString *a13, const __CFString *a14, uint64_t a15)
{
  _QWORD *v15;
  void *v16;
  id v17;
  void *v18;
  const __CFString **v19;
  uint64_t *v20;

  if (a2)
  {
    if (a2 == 2)
    {
      v17 = objc_begin_catch(exc_buf);
      if (v15)
      {
        v18 = v17;
        a11 = 0;
        if ((objc_opt_isKindOfClass() & 1) != 0
          && (objc_msgSend(v16, "__categorizeException:intoError:", v18, &a11), a11))
        {
          a14 = CFSTR("NSUnderlyingError");
          a15 = a11;
          v19 = &a14;
          v20 = &a15;
        }
        else
        {
          a12 = CFSTR("NSDebugDescription");
          objc_msgSend(v18, "debugDescription");
          a13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Caught exception during archival: %@"));
          v19 = &a12;
          v20 = (uint64_t *)&a13;
        }
        *v15 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 4866, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 1));
      }
      objc_end_catch();
      JUMPOUT(0x181867704);
    }
    objc_begin_catch(exc_buf);
    JUMPOUT(0x181867708);
  }
  JUMPOUT(0x181867774);
}

void sub_181867F5C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181867F7C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x181867F34);
}

void sub_181868C0C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1818689F8);
  }
  _Unwind_Resume(exc_buf);
}

id __NSKeyedUnarchiverSecureUnarchiveObjectOfClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", a1, a2, a3);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__20(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__23(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__24(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__25(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__26(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__27(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__28(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__30(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__31(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__32(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__33(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void AttributeContainer.init()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9E8];
  *a1 = MEMORY[0x1E0DEE9E0];
  a1[1] = v1;
}

double NSArray.makeIterator()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = swift_unknownObjectRetain();
  return NSFastEnumerationIterator.init(_:)(v2, a1);
}

ValueMetadata *type metadata accessor for Data()
{
  return &type metadata for Data;
}

unint64_t StringProtocol.write<A>(toFile:atomically:encoding:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t result;
  unint64_t v30;
  unint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;

  v9 = a5;
  v59 = a2;
  v60 = a1;
  v10 = *((_QWORD *)a5 - 1);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v13;
  v61 = *v13;
  v15 = StringProtocol.data(using:allowLossyConversion:)((uint64_t *)&v61, 0);
  if (v16 >> 60 == 15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v17 = objc_allocWithZone((Class)NSError);
    v18 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v17, sel_initWithDomain_code_userInfo_, v18, 517, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v9 = objc_msgSend(v14, sel_domain);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v21 = v20;

    if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v21 == v22)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v15 = swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {
        __break(1u);
        goto LABEL_8;
      }
    }
    return swift_willThrow();
  }
LABEL_8:
  v24 = v15;
  v25 = v16;
  v58 = a7;
  v61 = v14;
  v26 = extendedAttributeData(for:)((unint64_t *)&v61);
  if (v27 >> 60 == 15)
  {
    v28 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_15:
    v46 = v59 & 1;
    (*(void (**)(char *, uint64_t, id))(v10 + 16))(v12, v60, v9);
    v47 = String.init<A>(_:)();
    v49 = v48;
    MEMORY[0x1E0C80A78](v47);
    *(&v51 - 8) = v50;
    *(&v51 - 7) = v49;
    *(&v51 - 6) = 0;
    *((_BYTE *)&v51 - 40) = 0;
    *(&v51 - 4) = v46;
    *(&v51 - 3) = (uint64_t)v28;
    *((_BYTE *)&v51 - 16) = 0;
    specialized Data._Representation.withUnsafeBytes<A>(_:)((uint64_t)_s10Foundation11writeToFile4path4data7options10attributes14reportProgressyAA9PathOrURLO_AA4DataVSo20NSDataWritingOptionsVSDySSAKGSbtKFySWKXEfU_TA_0, (uint64_t)(&v51 - 10), v24, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of Data?(v24, v25);
  }
  v30 = v26;
  v31 = v27;
  v54 = v7;
  v55 = v25;
  v53 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = 0xD000000000000016;
  *(_QWORD *)(inited + 40) = 0x8000000182304550;
  *(_QWORD *)(inited + 48) = v30;
  *(_QWORD *)(inited + 56) = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v28 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v57 = *(_QWORD *)(inited + 32);
  v33 = v30;
  v34 = *(_QWORD *)(inited + 40);
  v35 = *(_QWORD *)(inited + 48);
  v36 = *(_QWORD *)(inited + 56);
  v52 = v33;
  outlined copy of Data?(v33, v31);
  swift_retain();
  swift_bridgeObjectRetain();
  v56 = v35;
  v37 = v35;
  v38 = v36;
  v39 = v57;
  outlined copy of Data._Representation(v37, v38);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v39, v34);
  if ((v40 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v28[(result >> 6) + 8] |= 1 << result;
    v41 = (uint64_t *)(v28[6] + 16 * result);
    *v41 = v39;
    v41[1] = v34;
    v42 = (uint64_t *)(v28[7] + 16 * result);
    v25 = v55;
    *v42 = v56;
    v42[1] = v38;
    v43 = v28[2];
    v44 = __OFADD__(v43, 1);
    v45 = v43 + 1;
    if (!v44)
    {
      v28[2] = v45;
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v52, v31);
      v24 = v53;
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t writeStringToURLOrPath(void *a1, void *a2, unsigned int a3, uint64_t a4, NSError **a5)
{
  uint64_t result;
  uint64_t v9;
  NSError *v10;
  uint64_t v11;
  id v12;
  id v13[2];

  v13[1] = *(id *)MEMORY[0x1E0C80C00];
  v12 = 0;
  v13[0] = 0;
  result = objc_msgSend(a1, "getExternalRepresentation:extendedAttributes:forWritingToURLOrPath:usingEncoding:error:", v13, &v12, a2, a4, a5);
  if ((_DWORD)result)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if ((objc_msgSend(a2, "isFileURL") & 1) == 0)
        return objc_msgSend(v13[0], "writeToURL:options:error:", a2, a3, a5);
      v9 = objc_msgSend(a2, "path");
      if (!v9)
      {
        if (!a5)
          return 0;
        v10 = _NSErrorWithFilePath(4, (uint64_t)a2);
        result = 0;
        *a5 = v10;
        return result;
      }
    }
    else
    {
      v9 = (uint64_t)a2;
    }
    v11 = objc_msgSend(v12, "objectForKey:", CFSTR("com.apple.TextEncoding"));
    if (v11)
      return objc_msgSend(MEMORY[0x1E0C99D50], "_writeDataToPath:data:options:stringEncodingAttributeData:reportProgress:error:", v9, v13[0], a3, v11, 0, a5);
    else
      return objc_msgSend(MEMORY[0x1E0C99D50], "_writeDataToPath:data:options:reportProgress:error:", v9, v13[0], a3, 0, a5);
  }
  return result;
}

uint64_t _NSEncodingToNewDataForExtendedAttribute(unint64_t a1)
{
  CFStringEncoding v1;
  CFStringEncoding v2;
  const __CFString *v3;
  const __CFString *v4;
  CFIndex v5;
  CFIndex usedBufLen;
  UInt8 buffer[100];
  uint64_t v9;
  CFRange v10;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = CFStringConvertNSStringEncodingToEncoding(a1);
  if (v1 == -1)
    return 0;
  v2 = v1;
  usedBufLen = 0;
  v3 = CFStringConvertEncodingToIANACharSetName(v1);
  if (v3)
  {
    v4 = v3;
    v10.length = CFStringGetLength(v3);
    v10.location = 0;
    if (CFStringGetBytes(v4, v10, 0x8000100u, 0x3Fu, 1u, buffer, 70, &usedBufLen))
    {
      v5 = usedBufLen;
    }
    else
    {
      v5 = 0;
      usedBufLen = 0;
    }
  }
  else
  {
    v5 = 0;
  }
  snprintf_l((char *)&buffer[v5], 0x63uLL, 0, ";%u", v2);
  return objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", buffer, strlen((const char *)buffer));
}

NSRect NSIntegralRectWithOptions(NSRect aRect, NSAlignmentOptions opts)
{
  double y;
  double height;
  uint64_t (*v5)(__n128);
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double x;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double width;
  double v54;
  __n128 v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  void *v74;
  uint64_t v75;
  const __CFString *v76;
  NSRect result;

  if (opts & (BYTE1(opts) | BYTE2(opts)) | (BYTE2(opts) & BYTE1(opts)))
  {
    v74 = (void *)MEMORY[0x1E0C99DA0];
    v75 = *MEMORY[0x1E0C99778];
    v76 = CFSTR("The options parameter is invalid. Only one of {in, out, nearest} may be set for a given rect attribute.");
    goto LABEL_97;
  }
  y = aRect.origin.y;
  *(int8x8_t *)&aRect.origin.y = vcnt_s8((int8x8_t)(opts & 0x151515));
  LOWORD(aRect.origin.y) = vaddlv_u8(*(uint8x8_t *)&aRect.origin.y);
  if (LODWORD(aRect.origin.y) != 2)
  {
    v74 = (void *)MEMORY[0x1E0C99DA0];
    v75 = *MEMORY[0x1E0C99778];
    v76 = CFSTR("The options parameter is invalid. There should be specifiers for exactly two out of {minX, maxX, width}.");
    goto LABEL_97;
  }
  *(int8x8_t *)&aRect.origin.y = vcnt_s8((int8x8_t)(opts & 0x2A2A2A));
  LOWORD(aRect.origin.y) = vaddlv_u8(*(uint8x8_t *)&aRect.origin.y);
  if (LODWORD(aRect.origin.y) != 2)
  {
    v74 = (void *)MEMORY[0x1E0C99DA0];
    v75 = *MEMORY[0x1E0C99778];
    v76 = CFSTR("The options parameter is invalid. There should be specifiers for exactly two out of {minY, maxY, height}.");
LABEL_97:
    objc_exception_throw((id)objc_msgSend(v74, "exceptionWithName:reason:userInfo:", v75, v76, 0, aRect.origin.x, aRect.origin.y, aRect.size.width, aRect.size.height));
  }
  height = aRect.size.height;
  if ((opts & 0x8000000000000000) != 0)
    v5 = (uint64_t (*)(__n128))roundTowardsMinusInfinity;
  else
    v5 = (uint64_t (*)(__n128))roundTowardsPlusInfinity;
  if ((opts & 0x10101) != 0)
  {
    v6 = 0.00390625;
    if ((opts & 0x4000000000000000) != 0)
      v6 = 0.0;
    if ((opts & 0x40404) != 0)
    {
      v7 = floor(aRect.origin.x + 0.5);
      v8 = vabdd_f64(aRect.origin.x, v7);
      v9 = floor(aRect.origin.x);
      v10 = ceil(aRect.origin.x);
      if ((opts & 1) != 0)
        v9 = v10;
      if (v8 >= v6)
        v7 = v9;
      v11 = floor(aRect.origin.x + aRect.origin.x + 0.5);
      v12 = vabdd_f64(aRect.origin.x + aRect.origin.x, v11);
      v13 = v6 + v6;
      v14 = v11 * 0.5;
      if (v12 >= v6 + v6)
        x = aRect.origin.x;
      else
        x = v14;
      v16 = floor(x + 0.5);
      if ((opts & 0x10000) != 0)
        v17 = v16;
      else
        v17 = v7;
      v18 = aRect.origin.x + aRect.size.width;
      v19 = floor(v18 + 0.5);
      v20 = vabdd_f64(v18, v19);
      v21 = ceil(v18);
      v22 = floor(v18);
      if ((opts & 4) != 0)
        v21 = v22;
      if (v20 >= v6)
        v23 = v21;
      else
        v23 = v19;
      v24 = floor(v18 + v18 + 0.5);
      v25 = vabdd_f64(v18 + v18, v24);
      v26 = v24 * 0.5;
      if (v25 < v13)
        v18 = v26;
      v27 = floor(v18 + 0.5);
      if ((opts & 0x40000) == 0)
        v27 = v23;
      v28 = v27 - v17;
      goto LABEL_68;
    }
    if ((opts & 0x10000) != 0)
    {
      v43 = floor(aRect.origin.x + aRect.origin.x + 0.5);
      v44 = vabdd_f64(aRect.origin.x + aRect.origin.x, v43);
      v45 = v43 * 0.5;
      if (v44 < v6 + v6)
        aRect.origin.x = v45;
      aRect.origin.x = aRect.origin.x + 0.5;
    }
    else
    {
      v17 = floor(aRect.origin.x + 0.5);
      if (vabdd_f64(aRect.origin.x, v17) < v6)
      {
LABEL_58:
        v46 = floor(aRect.size.width + 0.5);
        v47 = vabdd_f64(aRect.size.width, v46);
        v48 = ceil(aRect.size.width);
        v49 = floor(aRect.size.width);
        if ((opts & 0x10) != 0)
          v48 = v49;
        if (v47 >= v6)
          v46 = v48;
        v50 = floor(aRect.size.width + aRect.size.width + 0.5);
        v51 = vabdd_f64(aRect.size.width + aRect.size.width, v50);
        v52 = v50 * 0.5;
        if (v51 >= v6 + v6)
          width = aRect.size.width;
        else
          width = v52;
        v54 = floor(width + 0.5);
        if ((opts & 0x100000) != 0)
          v28 = v54;
        else
          v28 = v46;
        goto LABEL_68;
      }
      if ((opts & 1) != 0)
      {
        v17 = ceil(aRect.origin.x);
        goto LABEL_58;
      }
    }
    v17 = floor(aRect.origin.x);
    goto LABEL_58;
  }
  v29 = 0.00390625;
  if ((opts & 0x4000000000000000) != 0)
    v29 = 0.0;
  if ((opts & 0x100000) != 0)
  {
    v30 = floor(aRect.size.width + aRect.size.width + 0.5);
    v31 = vabdd_f64(aRect.size.width + aRect.size.width, v30);
    v32 = v30 * 0.5;
    if (v31 >= v29 + v29)
      v33 = aRect.size.width;
    else
      v33 = v32;
    v28 = floor(v33 + 0.5);
  }
  else
  {
    v28 = floor(aRect.size.width + 0.5);
    if (vabdd_f64(aRect.size.width, v28) >= v29)
    {
      if ((opts & 0x10) != 0)
        v28 = floor(aRect.size.width);
      else
        v28 = ceil(aRect.size.width);
    }
  }
  v34 = aRect.origin.x + aRect.size.width;
  v35 = floor(v34 + 0.5);
  v36 = vabdd_f64(v34, v35);
  v37 = ceil(v34);
  v38 = floor(v34);
  if ((opts & 4) != 0)
    v37 = v38;
  if (v36 >= v29)
    v35 = v37;
  v39 = floor(v34 + v34 + 0.5);
  v40 = vabdd_f64(v34 + v34, v39);
  v41 = v39 * 0.5;
  if (v40 < v29 + v29)
    v34 = v41;
  v42 = floor(v34 + 0.5);
  if ((opts & 0x40000) == 0)
    v42 = v35;
  v17 = v42 - v28;
LABEL_68:
  if ((opts & 0x20202) != 0)
  {
    aRect.origin.x = y;
    integralizeRectAttribute(opts & 0x20202, (opts & 0x4000000000000000) != 0, MEMORY[0x1E0C825F8], MEMORY[0x1E0C83410], v5, (__n128)aRect.origin);
    v56 = v55.n128_f64[0];
    if ((opts & 0x80808) != 0)
    {
      v55.n128_f64[0] = y + height;
      integralizeRectAttribute(opts & 0x80808, (opts & 0x4000000000000000) != 0, MEMORY[0x1E0C83410], MEMORY[0x1E0C825F8], v5, v55);
      v58 = v57 - v56;
    }
    else
    {
      v60 = 0.00390625;
      if ((opts & 0x4000000000000000) != 0)
        v60 = 0.0;
      if ((opts & 0x200000) != 0)
      {
        v66 = floor(height + height + 0.5);
        v67 = vabdd_f64(height + height, v66);
        v68 = v66 * 0.5;
        if (v67 >= v60 + v60)
          v69 = height;
        else
          v69 = v68;
        v58 = floor(v69 + 0.5);
      }
      else
      {
        v58 = floor(height + 0.5);
        if (vabdd_f64(height, v58) >= v60)
        {
          if ((opts & 0x20) != 0)
            v58 = floor(height);
          else
            v58 = ceil(height);
        }
      }
    }
  }
  else
  {
    v59 = 0.00390625;
    if ((opts & 0x4000000000000000) != 0)
      v59 = 0.0;
    if ((opts & 0x200000) != 0)
    {
      v61 = floor(height + height + 0.5);
      v62 = vabdd_f64(height + height, v61);
      v63 = v61 * 0.5;
      if (v62 >= v59 + v59)
        v64 = height;
      else
        v64 = v63;
      v58 = floor(v64 + 0.5);
    }
    else
    {
      v58 = floor(height + 0.5);
      if (vabdd_f64(height, v58) >= v59)
        v58 = ceil(height);
    }
    aRect.origin.x = y + height;
    integralizeRectAttribute(opts & 0x80808, (opts & 0x4000000000000000) != 0, MEMORY[0x1E0C83410], MEMORY[0x1E0C825F8], v5, (__n128)aRect.origin);
    v56 = v65 - v58;
  }
  v70 = fmax(v28, 0.0);
  v71 = fmax(v58, 0.0);
  v72 = v17;
  v73 = v56;
  result.size.height = v71;
  result.size.width = v70;
  result.origin.y = v73;
  result.origin.x = v72;
  return result;
}

uint64_t integralizeRectAttribute(uint64_t result, int a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(__n128), __n128 a6)
{
  double v6;
  double v7;

  v6 = 0.0;
  if (!a2)
    v6 = 0.00390625;
  if ((result & 0xFF0000) != 0)
  {
    v7 = floor(a6.n128_f64[0] + a6.n128_f64[0] + 0.5);
    if (vabdd_f64(a6.n128_f64[0] + a6.n128_f64[0], v7) < v6 + v6)
      a6.n128_f64[0] = v7 * 0.5;
    return a5(a6);
  }
  else if (vabdd_f64(a6.n128_f64[0], floor(a6.n128_f64[0] + 0.5)) >= v6)
  {
    if ((_BYTE)result)
      return a3();
    else
      return a4();
  }
  return result;
}

uint64_t StringProtocol.addingPercentEncoding(withAllowedCharacters:)(uint64_t a1)
{
  id v1;
  uint64_t v3;

  v1 = *(id *)(*(_QWORD *)a1 + 16);
  closure #1 in StringProtocol.addingPercentEncoding(withAllowedCharacters:)((uint64_t)v1, &v3);

  return v3;
}

_BYTE *destructiveInjectEnumTag for ExpressionStructure.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void IndexPath.subscript.getter()
{
  __asm { BR              X12 }
}

void sub_18186A950(uint64_t a1@<X8>)
{
  if (a1)
  {
    __break(1u);
    JUMPOUT(0x18186A958);
  }
}

void sub_18186A9A0()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000182306840;
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unsigned int *_timerRetain(unsigned int *result)
{
  unsigned int v1;

  do
    v1 = __ldxr(result);
  while (__stxr(v1 + 1, result));
  return result;
}

BOOL NSEqualRects(NSRect aRect, NSRect bRect)
{
  return aRect.origin.x == bRect.origin.x
      && aRect.origin.y == bRect.origin.y
      && aRect.size.width == bRect.size.width
      && aRect.size.height == bRect.size.height;
}

ValueMetadata *type metadata accessor for URL.DirectoryHint()
{
  return &type metadata for URL.DirectoryHint;
}

ValueMetadata *type metadata accessor for URLError()
{
  return &type metadata for URLError;
}

ValueMetadata *type metadata accessor for URLError.Code()
{
  return &type metadata for URLError.Code;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt32(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int32(a1, a2, (SEL *)&selRef_initWithUnsignedInt_);
}

uint64_t URL.standardized.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  Swift::Int countAndFlagsBits;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t object;
  id v8;
  Swift::String v9;
  id v10;
  void *v11;
  id v12;
  uint64_t result;
  __int128 v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String v35;
  id v36;
  void *v37;
  unint64_t v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unsigned __int16 *v58;
  id v59;
  id v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t *v66;
  id v67;
  unint64_t v68;
  _QWORD v69[3];
  uint64_t v70[3];
  _OWORD v71[8];
  _OWORD v72[2];
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Swift::String v76;
  _BYTE v77[72];
  uint64_t v78;
  __int128 v79;
  _BYTE v80[42];
  _BYTE v81[32];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[2];
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;

  countAndFlagsBits = (Swift::Int)v81;
  v5 = *(void **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    v10 = objc_msgSend(v5, sel_standardizedURL);
    if (v10)
    {
      v11 = v10;
      URL.init(reference:)(v10, v81);

      v12 = *(id *)v81;
      URL.init(reference:)(v12, v81);

      swift_release();
      result = swift_release();
      v14 = *(_OWORD *)&v81[8];
      *(_QWORD *)a1 = *(_QWORD *)v81;
      *(_OWORD *)(a1 + 8) = v14;
    }
    else
    {
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v6;
      swift_retain();
      v27 = v5;
      return swift_retain();
    }
    return result;
  }
  swift_retain();
  object = v5;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    v15 = objc_msgSend((id)object, sel__parameterString);
    if (v15)
    {
      v16 = v15;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (v20 = objc_msgSend((id)object, sel_path)) != 0)
      {
        v21 = v20;
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v24 = v23;

        *(_QWORD *)v81 = v22;
        *(_QWORD *)&v81[8] = v24;
        swift_bridgeObjectRetain();
        v25._countAndFlagsBits = 59;
        v25._object = (void *)0xE100000000000000;
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v26._countAndFlagsBits = (uint64_t)v17;
        v26._object = v19;
        String.append(_:)(v26);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        *(_QWORD *)v81 = 59;
        *(_QWORD *)&v81[8] = 0xE100000000000000;
        v35._countAndFlagsBits = (uint64_t)v17;
        v35._object = v19;
        String.append(_:)(v35);
        swift_release();
        swift_release();

      }
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)v81;
      v34 = *(_QWORD *)&v81[8];
    }
    else
    {
      v36 = objc_msgSend((id)object, sel_path);
      if (v36)
      {
        v37 = v36;
        v32 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v34 = v38;
        swift_release();
        swift_release();

      }
      else
      {
        swift_release();
        swift_release();

        v32 = 0;
        v34 = 0xE000000000000000;
      }
    }
    goto LABEL_36;
  }
  *(_QWORD *)v81 = object;
  *(_QWORD *)&v81[8] = v4;
  *(_QWORD *)&v81[16] = v6;
  v68 = object;
  v8 = (id)object;
  swift_retain();
  swift_retain();
  v9 = URL.path(percentEncoded:)(1);
  countAndFlagsBits = v9._countAndFlagsBits;
  v76 = v9;
  swift_bridgeObjectRetain();
  v67 = v8;
  if (String.count.getter() <= 1)
  {
    object = (unint64_t)v9._object;
  }
  else
  {
    object = (unint64_t)v9._object;
    if ((specialized BidirectionalCollection.last.getter(v9._countAndFlagsBits, (unint64_t)v9._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
      object = (unint64_t)v76._object;
      countAndFlagsBits = v76._countAndFlagsBits;
    }
  }
  *(_QWORD *)v81 = Set.init(minimumCapacity:)();
  specialized Set._Variant.insert(_:)(v71, 0x2FuLL);
  v28 = *(void **)v81;
  v29 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if ((object & 0x2000000000000000) != 0)
    v30 = HIBYTE(object) & 0xF;
  else
    v30 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v30)
  {
    swift_bridgeObjectRelease();
    v32 = 0;
    v34 = 0xE000000000000000;
    countAndFlagsBits = (Swift::Int)v81;
    v39 = v67;
    goto LABEL_32;
  }
  v66 = &v64;
  swift_bridgeObjectRetain();
  if ((object & 0x1000000000000000) != 0)
  {
    v32 = 0;
    v34 = 1;
    goto LABEL_30;
  }
  if ((object & 0x2000000000000000) != 0)
  {
    *(_QWORD *)v81 = countAndFlagsBits;
    *(_QWORD *)&v81[8] = object & 0xFFFFFFFFFFFFFFLL;
    v32 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v81, HIBYTE(object) & 0xF, (uint64_t)v28, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
    v34 = v40;
    goto LABEL_30;
  }
  if ((countAndFlagsBits & 0x1000000000000000) == 0)
    goto LABEL_60;
  v31 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    v32 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(v31, v29, (uint64_t)v28, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
    v34 = v33;
LABEL_30:
    v39 = v67;
    if (v34 == 1)
    {
      swift_bridgeObjectRetain();
      v32 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(countAndFlagsBits, object, (uint64_t)v28);
      v34 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      countAndFlagsBits = (Swift::Int)v81;
      if (!v34)
        goto LABEL_34;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      countAndFlagsBits = (Swift::Int)v81;
      if (!v34)
      {
LABEL_34:
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v32 = 0;
        v34 = 0xE000000000000000;
        goto LABEL_35;
      }
    }
LABEL_32:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_35:
    swift_release();
    swift_release();

    object = v68;
LABEL_36:
    result = swift_bridgeObjectRelease();
    v42 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000) == 0)
      v42 = v32 & 0xFFFFFFFFFFFFLL;
    if (!v42)
    {
      *(_QWORD *)a1 = object;
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v6;
      v45 = (id)object;
      swift_retain();
      return swift_retain();
    }
    if (!v4)
    {
      __break(1u);
      goto LABEL_62;
    }
    v43 = *(_BYTE *)(v4 + 218);
    v89 = 1;
    v101 = 1;
    v100 = 1;
    v99 = 1;
    v98 = 1;
    v97 = 1;
    v96 = 1;
    v95 = 1;
    v94 = 1;
    v93 = 1;
    v92 = 1;
    v91 = v43;
    v90 = 0;
    if ((*(_BYTE *)(v4 + 168) & 1) != 0)
    {
      swift_retain();
      v44 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    }
    else
    {
      swift_retain();
      v44 = String.subscript.getter();
    }
    v46 = MEMORY[0x186DA4634](v44);
    v28 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v48 = String._removingDotSegments.getter(v46, (unint64_t)v28);
    v50 = v49;
    swift_bridgeObjectRelease_n();
    v101 = 0;
    v95 = 0;
    if ((v50 & 0x1000000000000000) != 0)
      break;
    if ((v50 & 0x2000000000000000) != 0)
    {
      v52 = HIBYTE(v50) & 0xF;
      *(_QWORD *)v81 = v48;
      *(_QWORD *)&v81[8] = v50 & 0xFFFFFFFFFFFFFFLL;
      v51 = v81;
    }
    else if ((v48 & 0x1000000000000000) != 0)
    {
      v51 = (char *)((v50 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v52 = v48 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v51 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v51, v52, 0x10u, 1))
      goto LABEL_50;
LABEL_59:
    swift_bridgeObjectRelease();
    v65 = 0;
    v64 = 897;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_60:
    v31 = _StringObject.sharedUTF8.getter();
    v29 = v63;
  }
  v68 = object;
  *(_QWORD *)v81 = v48;
  *(_QWORD *)&v81[8] = v50;
  v28 = (void *)lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  StringProtocol._ephemeralString.getter();
  v57 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v58 = (unsigned __int16 *)objc_msgSend(v57, sel__fastCharacterContents);
  v59 = v57;
  if (v58)
  {
    *(_QWORD *)v81 = v48;
    *(_QWORD *)&v81[8] = v50;
    StringProtocol._ephemeralString.getter();
    v28 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v60 = objc_msgSend(v28, sel_length);
    swift_unknownObjectRelease();
    v61 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v58, (uint64_t)v60, 0x10u, 1);
  }
  else
  {
    v61 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v48, v50, 0x10u, 1);
  }
  v62 = v61;
  swift_bridgeObjectRelease_n();
  object = v68;
  if ((v62 & 1) == 0)
    goto LABEL_59;
LABEL_50:
  swift_bridgeObjectRelease();
  v76._countAndFlagsBits = v4;
  LOBYTE(v76._object) = v101;
  BYTE1(v76._object) = v100;
  BYTE2(v76._object) = v99;
  BYTE3(v76._object) = v98;
  BYTE4(v76._object) = v97;
  BYTE5(v76._object) = v96;
  BYTE6(v76._object) = v95;
  HIBYTE(v76._object) = v94;
  v77[0] = v93;
  memset(&v77[8], 0, 64);
  v78 = 0;
  LOBYTE(v79) = v92;
  *((_QWORD *)&v79 + 1) = v48;
  *(_QWORD *)v80 = v50;
  memset(&v80[8], 0, 32);
  v80[40] = v91;
  v80[41] = v90;
  *(Swift::String *)v81 = v76;
  *(_OWORD *)&v81[16] = *(_OWORD *)v77;
  v84 = *(_OWORD *)&v77[48];
  v85 = 0uLL;
  v82 = *(_OWORD *)&v77[16];
  v83 = *(_OWORD *)&v77[32];
  *(_OWORD *)((char *)v88 + 10) = *(_OWORD *)&v80[26];
  v88[0] = *(_OWORD *)&v80[16];
  v86 = v79;
  v87 = *(_OWORD *)v80;
  v71[7] = *(_OWORD *)v80;
  v72[0] = *(_OWORD *)&v80[16];
  *(_OWORD *)((char *)v72 + 10) = *(_OWORD *)&v80[26];
  v71[2] = *(_OWORD *)&v77[16];
  v71[3] = *(_OWORD *)&v77[32];
  v71[4] = *(_OWORD *)&v77[48];
  v71[5] = 0uLL;
  v71[6] = v79;
  v71[0] = v76;
  v71[1] = *(_OWORD *)v77;
  v73 = object;
  v74 = v4;
  v75 = v6;
  outlined retain of URLComponents((uint64_t)v81);
  URL.baseURL.getter(v70);
  v53 = (void *)v70[0];
  v69[0] = v70[0];
  v69[1] = v70[1];
  v69[2] = v70[2];
  URLComponents.url(relativeTo:)((uint64_t)v69, (uint64_t *)&v73);
  outlined consume of URL?(v53);
  result = outlined release of URLComponents((uint64_t)&v76);
  v54 = v73;
  if (v73)
  {
    v56 = v74;
    v55 = v75;
    result = outlined release of URLComponents((uint64_t)&v76);
    *(_QWORD *)a1 = v54;
    *(_QWORD *)(a1 + 8) = v56;
    *(_QWORD *)(a1 + 16) = v55;
    return result;
  }
LABEL_62:
  __break(1u);
  return result;
}

NSUInteger NSRoundUpToMultipleOfPageSize(NSUInteger bytes)
{
  return (bytes + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
}

void URLRequest.url.getter(uint64_t a1@<X8>)
{
  URLRequest.url.getter((SEL *)&selRef_URL, a1);
}

uint64_t destroy for Locale.Language(_QWORD *a1)
{
  uint64_t result;

  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result = a1[9];
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance NumberFormatStyleConfiguration.Notation.Option@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

const __CFString *_dateFormatFromTemplate(const __CFString *tmplate, CFOptionFlags options, CFLocaleRef locale)
{
  if (tmplate)
    return (id)CFDateFormatterCreateDateFormatFromTemplate((CFAllocatorRef)*MEMORY[0x1E0C9AE30], tmplate, options, locale);
  return tmplate;
}

NSKeyPathExpression *ResolveKeyPathsIntoExpressionSequence(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  NSString *v6;
  NSKeyPathSpecifierExpression *v7;
  char isKindOfClass;
  NSKeyPathExpression *v9;
  uint64_t v10;
  NSKeyPathExpression *v12;

  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_isKindOfClass();
    objc_opt_isKindOfClass();
    return -[NSKeyPathExpression initWithOperand:andKeyPath:]([NSKeyPathExpression alloc], "initWithOperand:andKeyPath:", a1, a2);
  }
  v4 = objc_msgSend(a2, "pathExpression");
  if ((objc_opt_isKindOfClass() & 1) != 0)
    a2 = (void *)v4;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = (void *)objc_msgSend(a1, "pathExpression");
    if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@.%@"), objc_msgSend(v5, "keyPath"), objc_msgSend(a2, "keyPath"));
      v7 = -[NSKeyPathSpecifierExpression initWithObject:]([NSKeyPathSpecifierExpression alloc], "initWithObject:", v6);
      objc_msgSend(a1, "operand");
      isKindOfClass = objc_opt_isKindOfClass();
      v9 = [NSKeyPathExpression alloc];
      v10 = (uint64_t)((isKindOfClass & 1) != 0
                    ? -[NSKeyPathExpression initWithKeyPath:](v9, "initWithKeyPath:", v7)
                    : -[NSKeyPathExpression initWithOperand:andKeyPath:](v9, "initWithOperand:andKeyPath:", objc_msgSend(a1, "operand"), v7));
      v12 = (NSKeyPathExpression *)v10;

      if (v12)
        return v12;
    }
    return -[NSKeyPathExpression initWithOperand:andKeyPath:]([NSKeyPathExpression alloc], "initWithOperand:andKeyPath:", a1, a2);
  }
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return -[NSKeyPathExpression initWithOperand:andKeyPath:]([NSKeyPathExpression alloc], "initWithOperand:andKeyPath:", a1, a2);
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return -[NSKeyPathExpression initWithOperand:andKeyPath:]([NSKeyPathExpression alloc], "initWithOperand:andKeyPath:", a1, a2);
  v12 = -[NSKeyPathExpression initWithKeyPath:]([NSKeyPathExpression alloc], "initWithKeyPath:", a2);
  if (!v12)
    return -[NSKeyPathExpression initWithOperand:andKeyPath:]([NSKeyPathExpression alloc], "initWithOperand:andKeyPath:", a1, a2);
  return v12;
}

NSString *__NSLocalizedFileSizeDescriptionFormatNumber(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v28;

  if ((a4 & 0x10000) != 0)
    v9 = 3;
  else
    v9 = 6;
  if ((a4 & 0x40000000) != 0)
  {
    v12 = 0;
    if ((a4 & 0x20000000) != 0)
      return (NSString *)v12;
  }
  else
  {
    if (a2)
    {
      if ((a4 & 0x400000) != 0)
      {
        objc_msgSend(a1, "doubleValue");
        v17 = fabs(v16);
        if (v17 >= 1.0e-20 && v17 < 100.0)
          v11 = 2 - vcvtmd_s64_f64(log10(v17));
        else
          v11 = 0;
      }
      else
      {
        v11 = numberOfFractionDigits[a2];
      }
      v15 = (a4 >> 24) & 1;
      v13 = v9;
      v14 = a5;
    }
    else
    {
      v11 = 0;
      v13 = v9;
      v14 = a5;
      LODWORD(v15) = 0;
    }
    v12 = -[NSNumberFormatter stringForObjectValue:](fileSizeFormatter(v11, v13, v14, v15), "stringForObjectValue:", a1);
    if ((a4 & 0x20000000) != 0)
      return (NSString *)v12;
  }
  objc_msgSend(a1, "doubleValue");
  if (fabs(v19) == 1.0)
  {
    v20 = objc_msgSend((id)objc_msgSend(&unk_1E0FCEB78, "objectAtIndex:", a2), "stringByAppendingString:", CFSTR(" Singular"));
    v21 = (void *)_NSFoundationBundle();
    v22 = v20;
  }
  else
  {
    v23 = _NSFoundationBundle();
    v22 = objc_msgSend(&unk_1E0FCEB78, "objectAtIndex:", a2);
    v21 = (void *)v23;
  }
  v24 = objc_msgSend(v21, "localizedStringForKey:value:table:", v22, &stru_1E0F56070, CFSTR("FileSizeFormatting"));
  v25 = v24;
  if ((a4 & 0x40000000) != 0)
    return (NSString *)v24;
  if (!a2 || (a4 & 0x4000000) == 0)
    return +[NSString stringWithFormat:](NSString, "stringWithFormat:", objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("%@ %@"), &stru_1E0F56070, CFSTR("FileSizeFormatting")), v12, v24, v28);
  v26 = -[NSNumberFormatter stringForObjectValue:](fileSizeFormatter(0, v9, 1, 0), "stringForObjectValue:", a3);
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("%@ %@ (%@ bytes)"), &stru_1E0F56070, CFSTR("FileSizeFormatting")), v12, v25, v26);
}

uint64_t _NSFoundationBundle()
{
  if (_MergedGlobals_114 != -1)
    dispatch_once(&_MergedGlobals_114, &__block_literal_global_38);
  return qword_1ECD0A008;
}

NSNumberFormatter *fileSizeFormatter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id v8;
  int v10;
  NSNumber *v11;
  NSNumberFormatter *result;
  NSNumberFormatter *v13;

  if (!fileSizeFormatter_numberFormatterCache)
  {
    v8 = objc_alloc_init(MEMORY[0x1E0C99D38]);
    while (!__ldaxr((unint64_t *)&fileSizeFormatter_numberFormatterCache))
    {
      if (!__stlxr((unint64_t)v8, (unint64_t *)&fileSizeFormatter_numberFormatterCache))
        goto LABEL_7;
    }
    __clrex();

  }
LABEL_7:
  if (a4)
    v10 = 1000000;
  else
    v10 = 0;
  v11 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a1 + 1000 * a2 + v10 + 100000000 * (int)a3 + 1);
  result = (NSNumberFormatter *)objc_msgSend((id)fileSizeFormatter_numberFormatterCache, "objectForKey:", v11);
  if (!result)
  {
    v13 = objc_alloc_init(NSNumberFormatter);
    -[NSNumberFormatter setFormatterBehavior:](v13, "setFormatterBehavior:", 1040);
    -[NSNumberFormatter setNumberStyle:](v13, "setNumberStyle:", 1);
    if (a3)
      -[NSNumberFormatter setFormattingContext:](v13, "setFormattingContext:", a3);
    if (a1 < 0)
    {
      -[NSNumberFormatter setMinimumSignificantDigits:](v13, "setMinimumSignificantDigits:", 3);
      -[NSNumberFormatter setUsesSignificantDigits:](v13, "setUsesSignificantDigits:", 1);
    }
    else
    {
      -[NSNumberFormatter setMaximumFractionDigits:](v13, "setMaximumFractionDigits:", a1);
      if (a4)
        -[NSNumberFormatter setMinimumFractionDigits:](v13, "setMinimumFractionDigits:", a1);
    }
    -[NSNumberFormatter setLocale:](v13, "setLocale:", objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale"));
    -[NSNumberFormatter setUsesGroupingSeparator:](v13, "setUsesGroupingSeparator:", 1);
    -[NSNumberFormatter setRoundingMode:](v13, "setRoundingMode:", a2);
    objc_msgSend((id)fileSizeFormatter_numberFormatterCache, "setObject:forKey:", v13, v11);
    return v13;
  }
  return result;
}

NSString *pathComponentFromPath(NSString *a1, uint64_t a2, int a3)
{
  NSString *result;
  unint64_t v5;
  void *v6;
  int v7;
  BOOL v8;
  NSArray *v9;
  NSString *v10;
  _QWORD v11[2];

  result = 0;
  v11[1] = *MEMORY[0x1E0C80C00];
  HIDWORD(v5) = a3;
  LODWORD(v5) = a3 - 100;
  switch((v5 >> 1))
  {
    case 0u:
    case 6u:
      result = -[NSString stringByDeletingLastPathComponent](a1, "stringByDeletingLastPathComponent");
      if (result)
      {
        a1 = result;
        result = -[NSString length](result, "length");
        if (result)
          goto LABEL_4;
      }
      break;
    case 1u:
LABEL_4:
      if (fileNameLocalizationDisabled)
        result = -[NSString lastPathComponent](a1, "lastPathComponent");
      else
        result = -[NSFileManager displayNameAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "displayNameAtPath:", a1);
      break;
    case 9u:
      if (fileNameLocalizationDisabled)
      {
        v6 = (void *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", a1);
        v11[0] = 0;
        if (!v6
          || ((v7 = objc_msgSend(v6, "getResourceValue:forKey:error:", v11, *MEMORY[0x1E0C99C40], 0),
               result = (NSString *)v11[0],
               v7)
            ? (v8 = v11[0] == 0)
            : (v8 = 1),
              v8))
        {
          result = 0;
        }
      }
      else
      {
        v9 = -[NSFileManager componentsToDisplayForPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "componentsToDisplayForPath:", a1);
        if (v9
          || (result = -[NSString stringByDeletingLastPathComponent](a1, "stringByDeletingLastPathComponent")) != 0
          && (v10 = result, (result = -[NSString length](result, "length")) != 0)
          && (result = -[NSFileManager componentsToDisplayForPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "componentsToDisplayForPath:", v10), (v9 = (NSArray *)result) != 0))
        {
          result = -[NSArray count](v9, "count");
          if (result)
            result = -[NSArray objectAtIndex:](v9, "objectAtIndex:", 0);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void *_NSPathComponents(_WORD *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (a2)
  {
    if (a2 >= 1 && *a1 == 47)
    {
      v5 = 1;
      objc_msgSend(v4, "addObject:", +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", a1, 1));
    }
    else
    {
      v5 = 0;
    }
    while (v5 < a2)
    {
      if (a1[v5] == 47)
      {
        ++v5;
      }
      else
      {
        if (v5 >= a2)
        {
LABEL_17:
          objc_msgSend(v4, "addObject:", +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:"));
          break;
        }
        v6 = 0;
        while (a1[v5 + v6] != 47)
        {
          ++v6;
          if (v5 + v6 >= a2)
            goto LABEL_17;
        }
        objc_msgSend(v4, "addObject:", +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:"));
        v5 += v6;
      }
    }
    if (a2 >= 2 && a1[a2 - 1] == 47)
      objc_msgSend(v4, "addObject:", +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", &a1[a2 - 1], 1));
  }
  return v4;
}

NSString *pathComponentFromURL(void *a1, uint64_t a2, int a3)
{
  int v3;
  NSString *result;
  NSString *v6;
  _QWORD *v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  NSString *v14;
  uint64_t v15;

  v3 = a3;
  result = 0;
  v15 = *MEMORY[0x1E0C80C00];
  if (a3 > 116)
  {
    if (a3 != 118)
    {
      if (a3 == 117)
      {
        result = (NSString *)objc_msgSend(a1, "scheme");
        if (result)
        {
          v6 = result;
          if (-[NSString length](result, "length"))
            return v6;
          else
            return 0;
        }
      }
      return result;
    }
    v14 = 0;
    if (fileNameLocalizationDisabled)
      v11 = (_QWORD *)MEMORY[0x1E0C99C40];
    else
      v11 = (_QWORD *)MEMORY[0x1E0C99C28];
    v12 = objc_msgSend(a1, "getResourceValue:forKey:error:", &v14, *v11, 0);
    result = v14;
    if (v12)
      v13 = v14 == 0;
    else
      v13 = 1;
    if (!v13)
      return result;
    if (!objc_msgSend(a1, "isFileURL"))
      return 0;
    result = (NSString *)objc_msgSend(a1, "path");
    if (!result)
      return result;
    return pathComponentFromPath(result, v10, v3);
  }
  if (a3 == 100)
  {
    a1 = (void *)objc_msgSend(a1, "URLByDeletingLastPathComponent");
    v3 = 102;
  }
  else if (a3 != 102)
  {
    return result;
  }
  v14 = 0;
  if (fileNameLocalizationDisabled)
    v7 = (_QWORD *)MEMORY[0x1E0C99A90];
  else
    v7 = (_QWORD *)MEMORY[0x1E0C99A70];
  v8 = objc_msgSend(a1, "getResourceValue:forKey:error:", &v14, *v7, 0);
  result = v14;
  if (v8)
    v9 = v14 == 0;
  else
    v9 = 1;
  if (v9)
  {
    if (!objc_msgSend(a1, "isFileURL") || (result = (NSString *)objc_msgSend(a1, "path")) == 0)
    {
      result = (NSString *)objc_msgSend((id)objc_msgSend(a1, "path", v14, v15), "lastPathComponent");
      v14 = result;
      if (result)
      {
        result = -[NSString length](result, "length");
        if (result)
        {
          if (-[NSString isEqual:](v14, "isEqual:", CFSTR("/")))
            return 0;
          else
            return v14;
        }
      }
      return result;
    }
    return pathComponentFromPath(result, v10, v3);
  }
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TimeZone(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 112))(a1, ObjectType, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeZone()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for _TimeZoneProtocol.hash(into:) in conformance _TimeZoneICU()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t Notification.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

void sub_18186F738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __NSFCShouldLog(int a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load(&_NSFCSubarbitrationCount);
  if (v1 < 1)
    return 1;
  v3 = atomic_load(_NSFCDisableLogSuppression);
  if ((v3 & 1) != 0)
    return 1;
  v4 = 0xFFFFFFFFLL;
  if (a1 == 2)
    v4 = 100;
  if (a1 == 1)
    v5 = 200;
  else
    v5 = v4;
  do
    v6 = __ldaxr(&_NSFCSubarbitratedClaimCount);
  while (__stlxr(v6 + 1, &_NSFCSubarbitratedClaimCount));
  if (v6 == 200)
  {
    if (qword_1ECD0A798 != -1)
      dispatch_once(&qword_1ECD0A798, &__block_literal_global_797);
    v7 = qword_1ECD0A700;
    if (!os_log_type_enabled((os_log_t)qword_1ECD0A700, OS_LOG_TYPE_DEFAULT))
      return v6 < v5;
    v10 = 0;
    v8 = "Further suppressing excessive logging";
    v9 = (uint8_t *)&v10;
  }
  else
  {
    if (v6 != 100)
      return v6 < v5;
    if (qword_1ECD0A798 != -1)
      dispatch_once(&qword_1ECD0A798, &__block_literal_global_797);
    v7 = qword_1ECD0A700;
    if (!os_log_type_enabled((os_log_t)qword_1ECD0A700, OS_LOG_TYPE_DEFAULT))
      return v6 < v5;
    v11 = 0;
    v8 = "Suppressing excessive logging";
    v9 = (uint8_t *)&v11;
  }
  _os_log_impl(&dword_1817D9000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
  return v6 < v5;
}

void sub_18186FC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

CFStringRef __CFCreateUUIDString()
{
  const __CFUUID *v0;
  CFStringRef v1;

  v0 = CFUUIDCreate(0);
  v1 = CFUUIDCreateString(0, v0);
  CFRelease(v0);
  return v1;
}

void sub_1818700A0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1818700C0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x181870070);
}

uint64_t NSFileCoordinatorGetTSD()
{
  uint64_t v0;

  v0 = _CFGetTSD();
  if (!v0)
  {
    v0 = (uint64_t)malloc_type_calloc(1uLL, 0x40uLL, 0x10E0040124FB198uLL);
    _CFSetTSD();
  }
  return v0;
}

NSFileAccessArbiterProxy *NSFileCoordinatorSharedAccessArbiter()
{
  NSFileAccessArbiterProxy *result;
  _QWORD v1[6];

  v1[5] = *MEMORY[0x1E0C80C00];
  result = (NSFileAccessArbiterProxy *)qword_1ECD0A780;
  if (!qword_1ECD0A780)
  {
    if (qword_1ECD0A768)
    {
      result = __NSFileCoordinatorSharedAccessArbiter_block_invoke();
      qword_1ECD0A780 = (uint64_t)result;
    }
    else
    {
      v1[0] = MEMORY[0x1E0C809B0];
      v1[1] = 3221225472;
      v1[2] = __NSFileCoordinatorSharedAccessArbiter_block_invoke_2;
      v1[3] = &unk_1E0F4E870;
      v1[4] = &__block_literal_global_806;
      if (qword_1ECD0A7A0 != -1)
        dispatch_once(&qword_1ECD0A7A0, v1);
      return (NSFileAccessArbiterProxy *)qword_1ECD0A7A8;
    }
  }
  return result;
}

uint64_t _NSSetThreadSpecificMaterializationState(int a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = getiopolicy_np(3, 1);
  if (v4 == -1)
  {
    if (qword_1ECD0A798 != -1)
      dispatch_once(&qword_1ECD0A798, &__block_literal_global_797);
    v11 = qword_1ECD0A6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ECD0A6F8, OS_LOG_TYPE_ERROR))
      return 0;
    v13 = *__error();
    v14 = 67109120;
    v15 = v13;
    v8 = "Failed to get thread materialization iopolicy value: %{darwin.errno}d";
    v9 = v11;
    v10 = 8;
    goto LABEL_14;
  }
  *a2 = v4;
  v5 = 1;
  if (v4 != a1 && setiopolicy_np(3, 1, a1))
  {
    if (qword_1ECD0A798 != -1)
      dispatch_once(&qword_1ECD0A798, &__block_literal_global_797);
    v6 = qword_1ECD0A6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ECD0A6F8, OS_LOG_TYPE_ERROR))
      return 0;
    v7 = *__error();
    v14 = 67109376;
    v15 = a1;
    v16 = 1024;
    v17 = v7;
    v8 = "Failed to set thread materialization iopolicy value (%d): %{darwin.errno}d";
    v9 = v6;
    v10 = 14;
LABEL_14:
    _os_log_error_impl(&dword_1817D9000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v14, v10);
    return 0;
  }
  return v5;
}

uint64_t _NSFCProviderLog()
{
  if (qword_1ECD0A798 != -1)
    dispatch_once(&qword_1ECD0A798, &__block_literal_global_797);
  return qword_1ECD0A710;
}

void sub_181872ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for os_unfair_lock_s);
}

uint64_t static Array._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  char isClassOrObjCExistentialType;
  unint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  type metadata accessor for _ContiguousArrayStorage();
  result = swift_dynamicCastClass();
  v7 = result;
  if (!result)
  {
    swift_unknownObjectRelease();
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    objc_msgSend(a1, sel_copy);
    if ((isClassOrObjCExistentialType & 1) != 0)
    {
      v7 = _bridgeCocoaArray<A>(_:)();
      result = swift_unknownObjectRelease();
    }
    else
    {
      v9 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      specialized _arrayForceCast<A, B>(_:)(v9, a3);
      v7 = v10;
      result = swift_bridgeObjectRelease();
    }
  }
  *a2 = v7;
  return result;
}

Swift::Void __swiftcall Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(Swift::Bool bufferIsUnique, Swift::Int minimumCapacity, Swift::Bool growForAppend)
{
  uint64_t v3;
  uint64_t *v4;

  *v4 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(bufferIsUnique, minimumCapacity, growForAppend, *v4, *(_QWORD *)(v3 + 16));
}

uint64_t JSONDecoderImpl.KeyedContainer.allKeys.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = a4;
  v9[3] = a5;
  swift_bridgeObjectRetain();
  v7 = _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5((void (*)(_QWORD *))partial apply for closure #1 in _PlistDictionaryKeyedDecodingContainer.allKeys.getter, (uint64_t)v9, a3, a4);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t getEnumTagSinglePayload for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.AttributeKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)(void *a1, uint64_t a2)
{
  uint64_t result;
  char isClassOrObjCExistentialType;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!a1)
    return MEMORY[0x1E0DEE9D8];
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  type metadata accessor for _ContiguousArrayStorage();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    objc_msgSend(a1, sel_copy);
    if ((isClassOrObjCExistentialType & 1) != 0)
    {
      v6 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v7 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      specialized _arrayForceCast<A, B>(_:)(v7, a2);
      v6 = v8;
      swift_bridgeObjectRelease();
    }
    return v6;
  }
  return result;
}

void specialized _arrayForceCast<A, B>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char isClassOrObjCExistentialType;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v21 - v8;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v11 = a1 >> 62;
  if ((isClassOrObjCExistentialType & 1) != 0)
  {
    if (v11)
    {
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      specialized _ContiguousArrayBuffer.storesOnlyElementsOfType<A>(_:)(a1 & 0xFFFFFFFFFFFFFF8, a2);
    }
    return;
  }
  if (!v11)
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_6;
LABEL_24:
    _swift_isClassOrObjCExistentialType();
    return;
  }
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_24;
LABEL_6:
  v23 = MEMORY[0x1E0DEE9D8];
  v21[1] = type metadata accessor for ContiguousArray();
  ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  if (v12 < 0)
  {
    __break(1u);
  }
  else if ((a1 & 0xC000000000000001) != 0)
  {
    v13 = 0;
    v14 = v23;
    do
    {
      v22 = MEMORY[0x186DA53A8](v13, a1);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v23;
      }
      v16 = *(_QWORD *)(v14 + 16);
      v15 = *(_QWORD *)(v14 + 24);
      if (v16 >= v15 >> 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v14 = v23;
      }
      ++v13;
      *(_QWORD *)(v14 + 16) = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v14+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v16, v9, a2);
    }
    while (v12 != v13);
  }
  else
  {
    v17 = (uint64_t *)(a1 + 32);
    v18 = v23;
    do
    {
      v22 = *v17;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v23;
      }
      v20 = *(_QWORD *)(v18 + 16);
      v19 = *(_QWORD *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v18 = v23;
      }
      *(_QWORD *)(v18 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v18+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v20, v6, a2);
      ++v17;
      --v12;
    }
    while (v12);
  }
}

__n128 __swift_memcpy16_1(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char isClassOrObjCExistentialType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  int64_t v20;
  uint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;

  v10 = _ArrayBuffer.capacity.getter();
  if ((a3 & 1) != 0)
  {
    v11 = v10;
    if (v10 < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_42;
      }
      if (2 * v10 <= a2)
        v11 = a2;
      else
        v11 = 2 * v10;
    }
  }
  else
  {
    v11 = a2;
  }
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (a4 < 0 || (a4 & 0x4000000000000000) != 0))
  {
    specialized _ArrayBuffer._nonNative.getter(a4);
    swift_unknownObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_unknownObjectRelease();
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    v13 = a4 & 0xFFFFFFFFFFFFF8;
    if ((isClassOrObjCExistentialType & 1) == 0)
      v13 = a4;
    v14 = *(_QWORD *)(v13 + 16);
  }
  if (v11 <= v14)
    v11 = v14;
  if (v11)
  {
    getContiguousArrayStorageType<A>(for:)(a5, a5);
    v15 = *(_QWORD *)(a5 - 8);
    v16 = *(_QWORD *)(v15 + 72);
    v17 = *(unsigned __int8 *)(v15 + 80);
    v18 = (_QWORD *)swift_allocObject();
    v19 = _swift_stdlib_malloc_size(v18);
    if (v16)
    {
      v20 = v19 - ((v17 + 32) & ~v17);
      if (v20 != 0x8000000000000000 || v16 != -1)
      {
        v22 = v20 / v16;
        swift_retain();
        v23 = _swift_isClassOrObjCExistentialType();
        v18[2] = v14;
        v18[3] = v23 & 1 | (unint64_t)(2 * v22);
        swift_release();
        if ((a1 & 1) != 0)
          goto LABEL_23;
        goto LABEL_32;
      }
    }
LABEL_42:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_43:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_44;
  }
  v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if ((a1 & 1) != 0)
  {
LABEL_23:
    v24 = _swift_isClassOrObjCExistentialType();
    if ((v14 & 0x8000000000000000) == 0)
    {
      if ((v24 & 1) != 0)
        v25 = a4 & 0xFFFFFFFFFFFFFF8;
      else
        v25 = a4;
      v26 = *(_QWORD *)(a5 - 8);
      if ((unint64_t)v18 < v25
        || (v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80),
            (unint64_t)v18 + v27 >= v25 + v27 + *(_QWORD *)(v26 + 72) * v14))
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v18 != (_QWORD *)v25)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
        v28 = a4 & 0xFFFFFFFFFFFFFF8;
      else
        v28 = a4;
      *(_QWORD *)(v28 + 16) = 0;
      swift_bridgeObjectRelease();
      return (uint64_t)v18;
    }
    goto LABEL_43;
  }
LABEL_32:
  if ((v14 & 0x8000000000000000) == 0)
  {
    _ArrayBuffer._copyContents(subRange:initializing:)();
    return (uint64_t)v18;
  }
LABEL_44:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL static Array._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_copy);
  v6 = _bridgeCocoaArray<A>(_:)();
  swift_unknownObjectRelease();
  v7 = specialized _arrayConditionalCast<A, B>(_:)(v6, a3);
  swift_bridgeObjectRelease();
  *a2 = v7;
  return v7 != 0;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v30 = (char *)&v24 - v7;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v31 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v29 = (char *)&v24 - v11;
  v12 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_22;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v33 = MEMORY[0x1E0DEE9D8];
    v26 = type metadata accessor for ContiguousArray();
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0);
    v14 = v33;
    if (v12)
      break;
    v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return v14;
LABEL_7:
    v24 = v5;
    v25 = v4;
    v28 = a1 & 0xC000000000000001;
    v5 = 4;
    v27 = MEMORY[0x1E0DEE9B0] + 8;
    while (1)
    {
      v16 = v28 ? MEMORY[0x186DA53A8](v5 - 4, a1) : swift_unknownObjectRetain();
      v4 = (uint64_t)v30;
      v12 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v32 = v16;
      v17 = swift_dynamicCast();
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      if (!v17)
      {
        v18(v4, 1, 1, a2);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v4, v25);
        return 0;
      }
      v18(v4, 0, 1, a2);
      v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
      v20 = v29;
      v19(v29, v4, a2);
      v19(v31, (uint64_t)v20, a2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v33;
      }
      v22 = *(_QWORD *)(v14 + 16);
      v21 = *(_QWORD *)(v14 + 24);
      if (v22 >= v21 >> 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        v14 = v33;
      }
      *(_QWORD *)(v14 + 16) = v22 + 1;
      v19((char *)(v14+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v22), (uint64_t)v31, a2);
      ++v5;
      if (v12 == v15)
        return v14;
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v15)
    goto LABEL_7;
  return v14;
}

Swift::Void __swiftcall ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(Swift::Bool bufferIsUnique, Swift::Int minimumCapacity, Swift::Bool growForAppend)
{
  uint64_t v3;
  uint64_t *v4;

  *v4 = _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(bufferIsUnique, minimumCapacity, growForAppend, (_QWORD *)*v4, *(_QWORD *)(v3 + 16));
}

uint64_t _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  int64_t v17;
  uint64_t v19;
  char isClassOrObjCExistentialType;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v8 = a4[3];
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = a4[2];
  if (v9 <= v10)
    v11 = a4[2];
  else
    v11 = v9;
  if (!v11)
  {
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  getContiguousArrayStorageType<A>(for:)(a5, a5);
  v12 = *(_QWORD *)(a5 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (_QWORD *)swift_allocObject();
  v16 = _swift_stdlib_malloc_size(v15);
  if (!v13)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v17 = v16 - ((v14 + 32) & ~v14);
  if (v17 == 0x8000000000000000 && v13 == -1)
    goto LABEL_34;
  v19 = v17 / v13;
  swift_retain();
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v15[2] = v10;
  v15[3] = isClassOrObjCExistentialType & 1 | (unint64_t)(2 * v19);
  swift_release();
LABEL_19:
  v21 = *(_QWORD *)(a5 - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v15 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v10])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v10;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType())
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  else
    return type metadata accessor for _ContiguousArrayStorage();
}

void *URL.resolvingSymlinksInPath()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  Swift::String v8;
  id v9;
  void *v10;
  id v11;
  void *result;
  __int128 v13;
  unsigned __int8 v14;
  id v15;
  char v16;
  Swift::String v17;
  Swift::Int countAndFlagsBits;
  unint64_t object;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  uint64_t v33;
  Swift::Int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  id v79;
  Swift::String v80;
  __int16 v81;
  uint64_t *v82;
  char v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[2];
  id v88;
  _QWORD *v89;
  id v90;
  __int128 v91;
  uint64_t v92;
  char v93;
  Swift::String v94;

  v3 = *(void **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    swift_retain();
    v6 = v3;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      v90 = v6;
      *(_QWORD *)&v91 = v4;
      *((_QWORD *)&v91 + 1) = v5;
      URL.scheme.getter();
      if (!v7)
      {
        swift_release();
        swift_release();

        goto LABEL_50;
      }
      v8 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v8._countAndFlagsBits == 1701603686 && v8._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
          goto LABEL_50;
      }
    }
    else
    {
      v14 = objc_msgSend(v6, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v14 & 1) == 0)
        goto LABEL_50;
    }
    v89 = a1;
    v90 = v6;
    *(_QWORD *)&v91 = v4;
    *((_QWORD *)&v91 + 1) = v5;
    v88 = v6;
    swift_retain();
    swift_retain();
    v17 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v17._countAndFlagsBits;
    v94 = v17;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      object = (unint64_t)v17._object;
    }
    else
    {
      object = (unint64_t)v17._object;
      if ((specialized BidirectionalCollection.last.getter(v17._countAndFlagsBits, (unint64_t)v17._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        countAndFlagsBits = v94._countAndFlagsBits;
        object = (unint64_t)v94._object;
      }
    }
    v90 = (id)Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v93, 0x2FuLL);
    v20 = (uint64_t)v90;
    v21 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if ((object & 0x2000000000000000) != 0)
      v22 = HIBYTE(object) & 0xF;
    else
      v22 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v22)
    {
      v87[1] = v87;
      swift_bridgeObjectRetain();
      if ((object & 0x1000000000000000) != 0)
      {
        v25 = 0;
        v26 = 1;
      }
      else
      {
        if ((object & 0x2000000000000000) != 0)
        {
          v90 = (id)countAndFlagsBits;
          *(_QWORD *)&v91 = object & 0xFFFFFFFFFFFFFFLL;
          v23 = &v90;
          v24 = HIBYTE(object) & 0xF;
        }
        else
        {
          if ((countAndFlagsBits & 0x1000000000000000) != 0)
          {
            v23 = (id *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v23 = (id *)_StringObject.sharedUTF8.getter();
            v21 = v85;
          }
          v24 = v21;
        }
        v25 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v23, v24, v20, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
        v26 = v28;
      }
      if (v26 == 1)
      {
        swift_bridgeObjectRetain();
        v25 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(countAndFlagsBits, object, v20);
        v26 = v29;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v27 = v88;
        if (v26)
          goto LABEL_32;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27 = v88;
        if (v26)
          goto LABEL_32;
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = 0;
      v26 = 0xE000000000000000;
LABEL_35:
      swift_bridgeObjectRelease();
      v30 = HIBYTE(v26) & 0xF;
      if ((v26 & 0x2000000000000000) == 0)
        v30 = v25 & 0xFFFFFFFFFFFFLL;
      a1 = v89;
      if (v30)
      {
        v90 = v27;
        *(_QWORD *)&v91 = v4;
        *((_QWORD *)&v91 + 1) = v5;
        v31 = v27;
        swift_retain();
        swift_retain();
        v32 = URL.path(percentEncoded:)(1);
        v94 = v32;
        swift_bridgeObjectRetain();
        if (String.count.getter() >= 2
          && (specialized BidirectionalCollection.last.getter(v32._countAndFlagsBits, (unint64_t)v32._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }
        v90 = (id)Set.init(minimumCapacity:)();
        specialized Set._Variant.insert(_:)(&v93, 0x2FuLL);
        v33 = (uint64_t)v90;
        v34 = v94._countAndFlagsBits;
        v35 = (unint64_t)v94._object;
        v36 = ((unint64_t)v94._object >> 56) & 0xF;
        v37 = v94._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if (((uint64_t)v94._object & 0x2000000000000000) != 0)
          v38 = ((unint64_t)v94._object >> 56) & 0xF;
        else
          v38 = v94._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if (v38)
        {
          v88 = v31;
          swift_bridgeObjectRetain();
          if ((v35 & 0x1000000000000000) != 0)
          {
            v42 = 0;
            v43 = 1;
          }
          else
          {
            if ((v35 & 0x2000000000000000) != 0)
            {
              v90 = (id)v34;
              *(_QWORD *)&v91 = v35 & 0xFFFFFFFFFFFFFFLL;
              v39 = &v90;
              v40 = v36;
            }
            else
            {
              if ((v34 & 0x1000000000000000) != 0)
              {
                v39 = (id *)((v35 & 0xFFFFFFFFFFFFFFFLL) + 32);
              }
              else
              {
                v39 = (id *)_StringObject.sharedUTF8.getter();
                v37 = v86;
              }
              v40 = v37;
            }
            v42 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v39, v40, v33, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
            v43 = v44;
          }
          if (v43 == 1)
          {
            swift_bridgeObjectRetain();
            v42 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v34, v35, v33);
            v43 = v45;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            v31 = v88;
            if (v43)
              goto LABEL_56;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v31 = v88;
            if (v43)
              goto LABEL_56;
          }
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v42 = 0;
          v43 = 0xE000000000000000;
LABEL_59:
          swift_bridgeObjectRetain();
          v46 = specialized Collection.first.getter(v42, v43);
          if (v47)
          {
            if (v46 == 126 && v47 == 0xE100000000000000)
            {
              swift_bridgeObjectRelease();
LABEL_64:
              v49 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v42, v43);
              if ((v50 & 1) != 0)
              {
                v53 = HIBYTE(v43) & 0xF;
                if ((v43 & 0x2000000000000000) == 0)
                  v53 = v42;
                v54 = v53 << 16;
                if ((v43 & 0x1000000000000000) == 0 || (v42 & 0x800000000000000) != 0)
                  v51 = v54 | 7;
                else
                  v51 = v54 | 0xB;
              }
              else
              {
                v51 = v49;
              }
              v55 = String.index(after:)();
              v88 = 0;
              if (v51 >> 14 == v55 >> 14)
              {
                v56 = v31;
                v57 = 0;
                v58 = 0;
              }
              else
              {
                if (v51 >> 14 < v55 >> 14)
                {
                  __break(1u);
                  JUMPOUT(0x1818744D8);
                }
                v56 = v31;
                v59 = String.subscript.getter();
                v57 = MEMORY[0x186DA4634](v59);
                v58 = v60;
                swift_bridgeObjectRelease();
              }
              v61 = static String.homeDirectoryPath(forUser:)(v57, v58);
              v63 = v62;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v64 = (void *)specialized Collection.suffix(from:)(v51, v42, v43);
              v66 = v65;
              v68 = v67;
              v70 = v69;
              swift_bridgeObjectRelease();
              v94._countAndFlagsBits = v61;
              v94._object = v63;
              v90 = v64;
              *(_QWORD *)&v91 = v66;
              *((_QWORD *)&v91 + 1) = v68;
              v92 = v70;
              lazy protocol witness table accessor for type Substring and conformance Substring();
              swift_bridgeObjectRetain();
              String.append<A>(contentsOf:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v42 = v94._countAndFlagsBits;
              v52 = (unint64_t)v94._object;
              v31 = v56;
LABEL_79:
              v71 = HIBYTE(v52) & 0xF;
              if ((v52 & 0x2000000000000000) == 0)
                v71 = v42 & 0xFFFFFFFFFFFFLL;
              if (v71)
              {
                swift_bridgeObjectRetain();
                v72 = specialized String.withFileSystemRepresentation<A>(_:)(v42, v52, v42, v52);
                if (v73)
                {
                  v74 = v72;
                  v75 = v73;
                  swift_bridgeObjectRelease();
                  v42 = v74;
                  v52 = v75;
                }
              }
              v76 = String._standardizingPath.getter(v42, v52);
              v78 = v77;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v79 = v31;
              swift_retain();
              swift_retain();
              if ((_foundation_swift_url_feature_enabled() & 1) != 0)
              {
                v90 = v79;
                *(_QWORD *)&v91 = v4;
                *((_QWORD *)&v91 + 1) = v5;
                v80 = URL.path(percentEncoded:)(1);
                v81 = specialized BidirectionalCollection.last.getter(v80._countAndFlagsBits, (unint64_t)v80._object);
                swift_release();
                swift_release();

                swift_bridgeObjectRelease();
                v82 = v89;
                if ((v81 & 0x1FF) == 0x2F)
                {
LABEL_86:
                  v83 = 0;
LABEL_89:
                  LOBYTE(v94._countAndFlagsBits) = v83;
                  v90 = 0;
                  v91 = 0uLL;
                  return URL.init(filePath:directoryHint:relativeTo:)(v76, v78, (unsigned __int8 *)&v94, (uint64_t)&v90, v82);
                }
              }
              else
              {
                v84 = objc_msgSend(v79, sel_hasDirectoryPath);
                swift_release();
                swift_release();

                v82 = v89;
                if ((v84 & 1) != 0)
                  goto LABEL_86;
              }
              v83 = 1;
              goto LABEL_89;
            }
            v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v48 & 1) != 0)
              goto LABEL_64;
          }
          v52 = v43;
          goto LABEL_79;
        }
        swift_bridgeObjectRelease();
        v42 = 0;
        v43 = 0xE000000000000000;
LABEL_56:
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_59;
      }
LABEL_50:
      *a1 = v6;
      a1[1] = v4;
      a1[2] = v5;
      v41 = v6;
      swift_retain();
      return (void *)swift_retain();
    }
    swift_bridgeObjectRelease();
    v25 = 0;
    v26 = 0xE000000000000000;
    v27 = v88;
LABEL_32:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  v9 = objc_msgSend(v3, sel_URLByResolvingSymlinksInPath);
  if (v9)
  {
    v10 = v9;
    URL.init(reference:)(v9, &v90);

    v11 = v90;
    URL.init(reference:)(v11, &v90);

    swift_release();
    result = (void *)swift_release();
    v13 = v91;
    *a1 = v90;
    *(_OWORD *)(a1 + 1) = v13;
  }
  else
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    swift_retain();
    v15 = v3;
    return (void *)swift_retain();
  }
  return result;
}

objc_method *closure #1 in variable initialization expression of static NSKeyValueObservation.Helper.swizzler()
{
  NSString *v0;
  Class v1;
  objc_class *ObjCClassFromMetadata;
  objc_method *result;
  objc_method *v4;
  void (*Implementation)(void);
  const char *TypeEncoding;

  v0 = (NSString *)String._bridgeToObjectiveCImpl()();
  v1 = NSClassFromString(v0);
  swift_unknownObjectRelease();
  if (v1)
  {
    swift_getObjCClassMetadata();
    if (swift_dynamicCastTypeToObjCProtocolConditional())
      objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__noteProcessHasUsedKVOSwiftOverlay);
  }
  type metadata accessor for NSKeyValueObservation.Helper();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  result = class_getInstanceMethod(ObjCClassFromMetadata, sel__swizzle_me_observeValueForKeyPath_of_change_context_);
  if (result)
  {
    v4 = result;
    Implementation = method_getImplementation(result);
    TypeEncoding = method_getTypeEncoding(v4);
    return (objc_method *)class_addMethod(ObjCClassFromMetadata, sel_observeValueForKeyPath_ofObject_change_context_, Implementation, TypeEncoding);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void NSObject.KeyValueObservingPublisher.receive<A>(subscriber:)()
{
  type metadata accessor for NSObject.KVOSubscription();
}

uint64_t sub_18187480C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v6;
  _QWORD *v7;
  _QWORD v9[16];

  swift_allocObject();
  v6 = v4;
  swift_retain();
  v7 = specialized NSObject.KVOSubscription.init(_:_:_:_:)(v6, v3, v1, v2);
  v9[3] = a1;
  v9[4] = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSObject.KVOSubscription<A, B, C>, a1);
  v9[0] = v7;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

void type metadata accessor for NSObject.KVOSubscription()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t _KeyValueCodingAndObserving.willChangeValue<A>(for:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, __n128))(v5 + 16))((char *)v10 - v6, v4);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  v7 = (void *)v10[1];
  _bridgeKeyPathToString(_:)();
  v8 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v7, *a3, v8);

  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t NSProcessInfoNotifyThermalState(int a1)
{
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v5[0] = 0;
  result = notify_get_state(a1, v5);
  if ((_DWORD)result)
  {
    do
      __ldaxr(&_NSProcessInfoGetThermalState_currentState);
    while (__stlxr(0xFFFFFFFFFFFFFFFFLL, &_NSProcessInfoGetThermalState_currentState));
  }
  else
  {
    if ((uint64_t)v5[0] <= 29)
    {
      v3 = 2;
      if (v5[0] != 20)
        v3 = 0;
      if (v5[0] == 10)
        v2 = 1;
      else
        v2 = v3;
    }
    else if (v5[0] == 30 || v5[0] == 40 || v5[0] == 50)
    {
      v2 = 3;
    }
    else
    {
      v2 = 0;
    }
    result = +[_NSSwiftProcessInfo updateThermalState:](_NSSwiftProcessInfo, "updateThermalState:");
    do
      v4 = __ldaxr(&_NSProcessInfoGetThermalState_currentState);
    while (__stlxr(v2, &_NSProcessInfoGetThermalState_currentState));
    if (v4 != v2)
      return -[NSNotificationCenter postNotificationName:object:](+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"), "postNotificationName:object:", CFSTR("NSProcessInfoThermalStateDidChangeNotification"), +[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  }
  return result;
}

uint64_t NSProcessInfoNotifyPowerState(int a1)
{
  uint64_t result;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v4[0] = 0;
  result = notify_get_state(a1, v4);
  if ((_DWORD)result)
  {
    do
      __ldaxr(&_NSProcessInfoGetPowerState_powerState);
    while (__stlxr(0xFFFFFFFFFFFFFFFFLL, &_NSProcessInfoGetPowerState_powerState));
  }
  else
  {
    v2 = v4[0] != 0;
    result = +[_NSSwiftProcessInfo updatePowerState:](_NSSwiftProcessInfo, "updatePowerState:");
    do
      v3 = __ldaxr(&_NSProcessInfoGetPowerState_powerState);
    while (__stlxr(v2, &_NSProcessInfoGetPowerState_powerState));
    if (v3 != v2)
      return -[NSNotificationCenter postNotificationName:object:](+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"), "postNotificationName:object:", CFSTR("NSProcessInfoPowerStateDidChangeNotification"), +[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  }
  return result;
}

id NSExpression.init<A, B>(forKeyPath:)()
{
  void *ObjCClassFromMetadata;
  uint64_t v1;
  id v2;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  _bridgeKeyPathToString(_:)();
  v1 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(ObjCClassFromMetadata, sel_expressionForKeyPath_, v1);
  swift_unknownObjectRelease();
  swift_release();
  return v2;
}

uint64_t _NSDefaultCStringEncoding()
{
  CFStringEncoding SystemEncoding;
  unint64_t v1;

  SystemEncoding = CFStringGetSystemEncoding();
  v1 = CFStringConvertEncodingToNSStringEncoding(SystemEncoding);
  _NSDefaultStringEncoding = v1;
  if (*MEMORY[0x1E0C9A940])
  {
    _NSCStringEncoding = v1;
    __NSSetCStringCharToUnichar(__NSCharToUnicharCFWrapper);
    __NSDefaultStringEncodingFullyInited = 1;
  }
  else
  {
    __NSDefaultStringEncodingFullyInited = CFStringGetSystemEncoding() != 0;
    _NSCStringEncoding = 1;
    __NSSetCStringCharToUnichar((uint64_t (*)(uint64_t))__NSASCIICharToUnichar);
  }
  return _NSDefaultStringEncoding;
}

void sub_1818752E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _NSInitializePlatform()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;

  if ((_NSInitializePlatform_inited & 1) == 0)
  {
    _NSInitializePlatform_inited = 1;
    __CFInitialize();
    v0 = getenv("NSDebugEnabled");
    if (v0 && (*v0 | 0x20) == 0x79)
      NSDebugEnabled = 1;
    v1 = getenv("NSZombieEnabled");
    if (v1 && (*v1 | 0x20) == 0x79)
      NSZombieEnabled = 1;
    v2 = getenv("NSDeallocateZombies");
    if (v2 && (*v2 | 0x20) == 0x79)
      NSDeallocateZombies = 1;
    v3 = getenv("NSDisableAutoreleasePoolCache");
    if (v3 && (*v3 | 0x20) == 0x79)
      _NSDoAPCache = 0;
    __NSSetCStringCharToUnichar(0);
    _NSToDoAtProcessStart();
    _os_log_set_nscf_formatter();
    v4 = getenv("NSUnbufferedIO");
    if (v4)
    {
      if ((*v4 | 0x20) == 0x79)
      {
        setvbuf((FILE *)*MEMORY[0x1E0C80C20], 0, 2, 0);
        setvbuf((FILE *)*MEMORY[0x1E0C80C10], 0, 2, 0);
      }
    }
    +[NSThread currentThread](NSThread, "currentThread");
    _NSSetupDispatchDataBridge();
    -[NSProcessInfo arguments](+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"), "arguments");
  }
}

uint64_t __NSFireDelayedPerform(void *a1, uint64_t *a2)
{
  void *v3;
  void *v4;
  const void *v5;
  uint64_t v6;
  const __CFArray *v7;
  CFIndex FirstIndexOfValue;
  int v9;
  __CFString *v10;
  const __CFString *v11;
  uint64_t i;
  __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  __CFRunLoop *Current;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  CFRange v24;

  v20 = a2[1];
  v22 = *a2;
  v3 = (void *)a2[3];
  v18 = a2[2];
  v5 = (const void *)a2[4];
  v4 = (void *)a2[5];
  v6 = a2[6];
  _CFAutoreleasePoolPush();
  if (v6)
    -[NSProcessInfo _reactivateActivity:](+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"), "_reactivateActivity:", v6);
  CFRetain(a1);
  objc_sync_enter(v4);
  v7 = (const __CFArray *)objc_msgSend(v4, "_dperf");
  v24.length = objc_msgSend((id)objc_msgSend(v4, "_dperf"), "count");
  v24.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v7, v24, v5);
  if (FirstIndexOfValue << 32 != 0xFFFFFFFF00000000)
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)objc_msgSend(v4, "_dperf"), (int)FirstIndexOfValue);
  v9 = objc_msgSend(v3, "count", v18, v20, v22);
  v10 = (__CFString *)*MEMORY[0x1E0C99860];
  v11 = (const __CFString *)*MEMORY[0x1E0C9B270];
  for (i = v9 - 1; i != -1; --i)
  {
    v13 = (__CFString *)objc_msgSend(v3, "objectAtIndex:", i);
    v14 = v13;
    v15 = v11;
    if (v13 != v10)
    {
      if (-[__CFString isEqual:](v13, "isEqual:", CFSTR("kCFRunLoopCommonModes")))
        v15 = v11;
      else
        v15 = v14;
    }
    Current = CFRunLoopGetCurrent();
    CFRunLoopRemoveTimer(Current, (CFRunLoopTimerRef)a1, v15);
  }
  objc_sync_exit(v4);
  objc_msgSend(v23, v21, v19);
  CFRelease(a1);
  if (v6)
    -[NSProcessInfo endActivity:](+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"), "endActivity:", v6);
  return _CFAutoreleasePoolPop();
}

void sub_181875608(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1818758DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181875B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void __NSSetCStringCharToUnichar(uint64_t (*a1)(uint64_t a1))
{
  BOOL v2;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  if (_NSCStringCharToUnicharTable)
    v2 = _NSCStringCharToUnichar == (_QWORD)a1;
  else
    v2 = 0;
  if (!v2)
  {
    if (_NSCStringCharToUnicharTable != MEMORY[0x1E0C9A968]
      && _NSCStringCharToUnicharTable != MEMORY[0x1E0C9A978]
      && _NSCStringCharToUnicharTable != 0)
    {
      free((void *)_NSCStringCharToUnicharTable);
    }
    v5 = (_OWORD *)MEMORY[0x1E0C9A968];
    if (a1 && (char *)a1 != (char *)__NSASCIICharToUnichar)
    {
      if (a1 == __NSCharToUnicharCFWrapper && _NSDefaultStringEncoding == 30)
      {
        v5 = (_OWORD *)MEMORY[0x1E0C9A978];
      }
      else
      {
        v6 = malloc_type_malloc(0x200uLL, 0x1000040BDFB0063uLL);
        v7 = v5[13];
        v6[12] = v5[12];
        v6[13] = v7;
        v8 = v5[15];
        v6[14] = v5[14];
        v6[15] = v8;
        v9 = v5[9];
        v6[8] = v5[8];
        v6[9] = v9;
        v10 = v5[11];
        v6[10] = v5[10];
        v6[11] = v10;
        v11 = v5[5];
        v6[4] = v5[4];
        v6[5] = v11;
        v12 = v5[7];
        v6[6] = v5[6];
        v6[7] = v12;
        v13 = v5[1];
        *v6 = *v5;
        v6[1] = v13;
        v14 = v5[2];
        v15 = v5[3];
        v16 = 128;
        v6[2] = v14;
        v6[3] = v15;
        do
        {
          *((_WORD *)v6 + v16) = a1(v16);
          ++v16;
        }
        while (v16 != 256);
        v5 = v6;
      }
    }
    _NSCStringCharToUnicharTable = (uint64_t)v5;
  }
  _NSCStringCharToUnichar = (uint64_t)a1;
}

void _NSToDoAtProcessStart()
{
  objc_class *v0;
  objc_class *v1;
  objc_class *v2;
  objc_class *v3;
  objc_class *v4;
  objc_class *v5;
  objc_class *v6;
  objc_class *v7;
  objc_class *v8;
  Class v9;
  objc_class *v10;
  objc_class *v11;
  objc_class *v12;
  objc_class *v13;
  objc_class *v14;
  objc_class *v15;
  objc_class *v16;

  __NSCFStringClass = (uint64_t)objc_lookUpClass("__NSCFString");
  __NSMutableStringClass = (uint64_t)objc_lookUpClass("NSMutableString");
  class_setSuperclass((Class)__NSCFStringClass, (Class)__NSMutableStringClass);
  v0 = objc_lookUpClass("__NSCFError");
  v1 = objc_lookUpClass("NSError");
  class_setSuperclass(v0, v1);
  v2 = objc_lookUpClass("__NSCFCharacterSet");
  v3 = objc_lookUpClass("NSMutableCharacterSet");
  class_setSuperclass(v2, v3);
  v4 = objc_lookUpClass("__NSCFAttributedString");
  v5 = objc_lookUpClass("NSMutableAttributedString");
  class_setSuperclass(v4, v5);
  v6 = objc_lookUpClass("NSNumber");
  v7 = objc_lookUpClass("__NSCFBoolean");
  class_setSuperclass(v7, v6);
  v8 = objc_lookUpClass("__NSCFNumber");
  class_setSuperclass(v8, v6);
  v9 = objc_lookUpClass("__CFNotification");
  if (v9)
  {
    v10 = v9;
    v11 = objc_lookUpClass("NSNotification");
    class_setSuperclass(v10, v11);
  }
  __NSStringClass = (uint64_t)objc_lookUpClass("NSString");
  __NSConcreteValueClass = (uint64_t)objc_lookUpClass("NSConcreteValue");
  __NSMutableStringClass = (uint64_t)objc_lookUpClass("NSMutableString");
  class_setVersion((Class)__NSStringClass, 1);
  class_setVersion((Class)__NSMutableStringClass, 1);
  v12 = objc_lookUpClass("NSTimeZone");
  class_setVersion(v12, 0);
  v13 = objc_lookUpClass("NSCountedSet");
  class_setVersion(v13, 1);
  v14 = objc_lookUpClass("NSNumberFormatter");
  class_setVersion(v14, 4);
  v15 = objc_lookUpClass("NSDateFormatter");
  class_setVersion(v15, 41);
  v16 = objc_lookUpClass("NSAffineTransform");
  class_setVersion(v16, 1);
}

void _NSSetupDispatchDataBridge()
{
  if (_NSSetupDispatchDataBridge_onceToken != -1)
    dispatch_once(&_NSSetupDispatchDataBridge_onceToken, &__block_literal_global_93);
}

_QWORD *specialized NSObject.KVOSubscription.init(_:_:_:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  void *v22;
  _QWORD *v23;
  objc_class *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  objc_super v35;
  void *v36;
  void *v37;

  v5 = v4;
  v7 = (_QWORD *)*v4;
  v4[2] = 0;
  v8 = v7[11];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))((char *)v4 + v7[17], 1, 1, v8);
  v9 = (char *)v4 + *(_QWORD *)(*v4 + 144);
  v10 = v7[12];
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v9, 1, 1, v10);
  swift_unknownObjectWeakInit();
  v13 = *(_QWORD *)(*v5 + 176);
  v14 = (_DWORD *)swift_slowAlloc();
  *v14 = 0;
  *(_QWORD *)((char *)v5 + v13) = v14;
  v15 = *(_QWORD *)(*v5 + 184);
  v16 = (_QWORD *)swift_slowAlloc();
  *v16 = 0;
  *(_QWORD *)((char *)v5 + v15) = v16;
  v5[3] = 0;
  *((_BYTE *)v5 + 32) = 0;
  swift_unknownObjectWeakAssign();
  v17 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v9, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a4, v10);
  v12(v9, 0, 1, v10);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 + 160)) = a3;
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 + 168)) = a2;
  v18 = swift_allocObject();
  swift_weakInit();
  v19 = (_QWORD *)swift_allocObject();
  v20 = v7[10];
  v19[2] = v20;
  v19[3] = v8;
  v19[4] = v10;
  v19[5] = v7[13];
  v19[6] = v18;
  v37 = a1;
  type metadata accessor for NSObject();
  swift_retain();
  v21 = a1;
  swift_dynamicCast();
  v22 = v36;
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v20;
  v23[3] = v8;
  v23[4] = &protocol witness table for NSObject;
  v23[5] = partial apply for closure #1 in NSObject.KVOSubscription.init(_:_:_:_:);
  v23[6] = v19;
  v24 = (objc_class *)type metadata accessor for NSKeyValueObservation();
  v25 = objc_allocWithZone(v24);
  swift_unknownObjectWeakInit();
  v35.receiver = v25;
  v35.super_class = v24;
  v26 = objc_msgSendSuper2(&v35, sel_init);
  v27 = (void *)MEMORY[0x186DA82AC]();
  objc_allocWithZone((Class)type metadata accessor for NSKeyValueObservation.Helper());
  swift_retain();
  v28 = v22;
  swift_retain();
  v29 = NSKeyValueObservation.Helper.init(object:keyPath:options:callback:)(v28, a2, a3, (uint64_t)partial apply for closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:), (uint64_t)v23);
  swift_unknownObjectWeakAssign();

  objc_autoreleasePoolPop(v27);
  swift_release();
  swift_release();

  v30 = (void *)v5[2];
  v5[2] = v26;

  return v5;
}

id _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  objc_class *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v26;
  objc_super v27;
  void *v28;

  v10 = *a1;
  v11 = (_QWORD *)MEMORY[0x1E0DEE2A8];
  v12 = *(_QWORD *)(*a1 + *MEMORY[0x1E0DEE2A8]);
  v13 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))((char *)&v26 - v15, v16, v12, v13);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  v17 = v28;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v12;
  v18[3] = *(_QWORD *)(*v11 + v10 + 8);
  v18[4] = a5;
  v18[5] = a3;
  v18[6] = a4;
  v19 = (objc_class *)type metadata accessor for NSKeyValueObservation();
  v20 = objc_allocWithZone(v19);
  swift_unknownObjectWeakInit();
  v27.receiver = v20;
  v27.super_class = v19;
  swift_retain();
  swift_retain();
  v21 = objc_msgSendSuper2(&v27, sel_init);
  v22 = (void *)MEMORY[0x186DA82AC]();
  objc_allocWithZone((Class)type metadata accessor for NSKeyValueObservation.Helper());
  swift_retain();
  v23 = v17;
  swift_retain();
  v24 = NSKeyValueObservation.Helper.init(object:keyPath:options:callback:)(v23, (uint64_t)a1, a2, (uint64_t)partial apply for closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:), (uint64_t)v18);
  swift_unknownObjectWeakAssign();

  objc_autoreleasePoolPop(v22);
  swift_release();
  swift_release();

  return v21;
}

uint64_t type metadata accessor for NSKeyValueObservation()
{
  return objc_opt_self();
}

id NSKeyValueObservation.Helper.init(object:keyPath:options:callback:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t *v22;
  char *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v30;
  objc_super v32;

  swift_unknownObjectWeakInit();
  v8 = OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject;
  *(_QWORD *)&v5[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject] = 0;
  v9 = OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock;
  v10 = v5;
  v11 = (_DWORD *)swift_slowAlloc();
  *v11 = 0;
  *(_QWORD *)&v5[v9] = v11;
  if (one-time initialization token for swizzler != -1)
    swift_once();
  v30 = a2;
  v12 = _bridgeKeyPathToString(_:)();
  v14 = v13;
  if (one-time initialization token for observationInfoGetter != -1)
    swift_once();
  v15 = static NSKeyValueObservation.Helper.observationInfoGetter;
  v16 = objc_msgSend(a1, sel_methodForSelector_, static NSKeyValueObservation.Helper.observationInfoGetter);
  v17 = (void *)objc_opt_self();
  v18 = objc_msgSend(v17, sel_instanceMethodForSelector_, v15);
  if (v16)
  {
    if (!v18 || v16 != v18)
      goto LABEL_17;
  }
  else if (v18)
  {
    goto LABEL_17;
  }
  if (one-time initialization token for observationInfoSetter != -1)
    swift_once();
  v19 = static NSKeyValueObservation.Helper.observationInfoSetter;
  v20 = objc_msgSend(a1, sel_methodForSelector_, static NSKeyValueObservation.Helper.observationInfoSetter);
  v21 = objc_msgSend(v17, sel_instanceMethodForSelector_, v19);
  if (v20)
  {
    if (v21 && v20 == v21)
      goto LABEL_15;
LABEL_17:
    *(_QWORD *)&v5[v8] = a1;
    goto LABEL_18;
  }
  if (v21)
    goto LABEL_17;
LABEL_15:
  swift_unknownObjectWeakAssign();
LABEL_18:
  v22 = (uint64_t *)&v10[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_path];
  *v22 = v12;
  v22[1] = v14;
  v23 = &v10[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_callback];
  *(_QWORD *)v23 = a4;
  *((_QWORD *)v23 + 1) = a5;
  swift_bridgeObjectRetain();
  swift_retain();

  v32.receiver = v10;
  v32.super_class = (Class)type metadata accessor for NSKeyValueObservation.Helper();
  v24 = objc_msgSendSuper2(&v32, sel_init);
  objc_setAssociatedObject(a1, v24, v24, (void *)0x301);
  swift_bridgeObjectRetain();
  v25 = v24;
  v26 = a1;
  specialized static __KVOKeyPathBridgeMachinery._withBridgeableKeyPath(from:to:block:)(v12, v14, v30, v26, (uint64_t)v25, v12, v14, a3);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease_n();
  return v25;
}

uint64_t type metadata accessor for NSKeyValueObservation.Helper()
{
  return objc_opt_self();
}

uint64_t _bridgeKeyPathToString(_:)()
{
  uint64_t result;
  uint64_t v1;
  Swift::String v2;

  result = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v1)
  {
    _StringGuts.grow(_:)(42);
    v2._object = (void *)0x80000001823050E0;
    v2._countAndFlagsBits = 0xD000000000000028;
    String.append(_:)(v2);
    type metadata accessor for AnyKeyPath();
    _print_unlocked<A, B>(_:_:)();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t __NSThreadPerformPerform(__CFRunLoopSource **a1)
{
  NSThread *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;

  v2 = +[NSThread currentThread](NSThread, "currentThread");
  objc_sync_enter(v2);
  v3 = objc_msgSend(*((id *)v2->_private + 7), "count");
  v4 = performQueueDequeue(v2, *((void **)v2->_private + 7), v3, *a1);
  result = objc_sync_exit(v2);
  if (v4)
  {
    v6 = v3 - 1;
    do
    {
      _CFAutoreleasePoolPush();
      objc_msgSend((id)v4[1], "performSelector:withObject:", v4[2], v4[3]);

      v4[1] = 0;
      v4[3] = 0;
      objc_msgSend(v4, "signal:", 2);

      _CFAutoreleasePoolPop();
      objc_sync_enter(v2);
      v4 = performQueueDequeue(v2, *((void **)v2->_private + 7), v6, *a1);
      result = objc_sync_exit(v2);
      --v6;
    }
    while (v4);
  }
  return result;
}

void sub_1818772BC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *performQueueDequeue(void *a1, void *a2, unint64_t a3, __CFRunLoopSource *a4)
{
  __CFRunLoop *Current;
  CFRunLoopMode v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  __CFRunLoopSource *source;
  uint64_t v22;
  id obj;
  _BYTE v24[128];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  Current = CFRunLoopGetCurrent();
  v9 = CFRunLoopCopyCurrentMode(Current);
  objc_sync_enter(a1);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  obj = a1;
  v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v25, v24, 16);
  if (v10)
  {
    source = a4;
    v11 = 0;
    v12 = *(_QWORD *)v26;
    v13 = *MEMORY[0x1E0C9B270];
    while (2)
    {
      v14 = 0;
      v22 = v10 + v11;
      do
      {
        if (*(_QWORD *)v26 != v12)
          objc_enumerationMutation(a2);
        v15 = *(_QWORD **)(*((_QWORD *)&v25 + 1) + 8 * v14);
        if (v15)
          v16 = (void *)v15[4];
        else
          v16 = 0;
        if ((objc_msgSend(v16, "containsObject:", v9) & 1) != 0
          || (!v15 ? (v17 = 0) : (v17 = (void *)v15[4]),
              objc_msgSend(v17, "containsObject:", v13) && _CFRunLoop01()))
        {
          v19 = v15;
          objc_msgSend(a2, "removeObjectAtIndex:", v11 + v14);
          if (v19 && objc_msgSend(a2, "count"))
            CFRunLoopSourceSignal(source);
          goto LABEL_22;
        }
        if (v11 + v14 + 1 >= a3)
          goto LABEL_21;
        ++v14;
      }
      while (v10 != v14);
      v18 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v25, v24, 16);
      v10 = v18;
      v19 = 0;
      v11 = v22;
      if (v18)
        continue;
      break;
    }
  }
  else
  {
LABEL_21:
    v19 = 0;
  }
LABEL_22:
  objc_sync_exit(obj);
  CFRelease(v9);
  return v19;
}

void sub_1818774CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t specialized static __KVOKeyPathBridgeMachinery._withBridgeableKeyPath(from:to:block:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  objc_class *v12;
  char *v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _OWORD v27[2];
  _BYTE v28[32];
  objc_super v29;

  v12 = (objc_class *)type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey();
  v13 = (char *)objc_allocWithZone(v12);
  v14 = &v13[OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  v29.receiver = v13;
  v29.super_class = v12;
  swift_bridgeObjectRetain();
  v15 = objc_msgSendSuper2(&v29, sel_init);
  v16 = (void *)objc_opt_self();
  v17 = objc_msgSend(v16, sel_currentThread);
  v18 = objc_msgSend(v17, sel_threadDictionary);

  v19 = v15;
  v20 = objc_msgSend(v18, sel_objectForKeyedSubscript_, v19);

  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v27, 0, sizeof(v27));
  }
  outlined init with take of Any?((uint64_t)v27, (uint64_t)v28);
  v21 = objc_msgSend(v16, sel_currentThread);
  v22 = objc_msgSend(v21, sel_threadDictionary);

  v23 = v19;
  objc_msgSend(v22, sel_setObject_forKeyedSubscript_, a3, v23);

  objc_msgSend(a4, sel_addObserver_forKeyPath_options_context_, a5, String._bridgeToObjectiveCImpl()(), a8, 0);
  swift_unknownObjectRelease();
  $defer #1 () in static __KVOKeyPathBridgeMachinery._withBridgeableKeyPath(from:to:block:)((uint64_t)v23, (uint64_t)v28);

  return outlined destroy of Any?((uint64_t)v28, &demangling cache variable for type metadata for Any?);
}

Swift::Int __KVOKeyPathBridgeMachinery.BridgeKey.hash.getter()
{
  Swift::UInt v0;

  Hasher.init()();
  v0 = type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey();
  Hasher._combine(_:)(v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher.finalize()();
}

uint64_t type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey()
{
  return objc_opt_self();
}

uint64_t $defer #1 () in static __KVOKeyPathBridgeMachinery._withBridgeableKeyPath(from:to:block:)(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;

  v4 = objc_msgSend((id)objc_opt_self(), sel_currentThread);
  v5 = objc_msgSend(v4, sel_threadDictionary);

  outlined init with copy of Any?(a2, (uint64_t)v14);
  v6 = v15;
  if (v15)
  {
    v7 = __swift_project_boxed_opaque_existential_1(v14, v15);
    v8 = *(_QWORD *)(v6 - 8);
    v9 = MEMORY[0x1E0C80A78](v7);
    v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v8 + 16))(v11, v9);
    v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    v12 = 0;
  }
  objc_msgSend(v5, sel_setObject_forKeyedSubscript_, v12, a1);

  return swift_unknownObjectRelease();
}

id static String._forceBridgeFromObjectiveC(_:result:)(void *a1, _QWORD *a2)
{
  id result;
  uint64_t v5;

  swift_bridgeObjectRelease();
  result = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance JSONDecoderImpl()
{
  return specialized JSONDecoderImpl.decode(_:)();
}

{
  char v0;

  specialized JSONDecoderImpl.decode(_:)();
  return v0 & 1;
}

{
  return specialized JSONDecoderImpl.decode(_:)();
}

uint64_t specialized JSONDecoderImpl.decode(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 24 * v2;
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
    v6 = *(_QWORD *)(v0 + 160);
    v7 = *(_BYTE *)(v3 + 24);
    swift_retain();
    specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v4, v5, v7, v6, 0, 0, 0, 255);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 24 * v2;
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
    v6 = *(_QWORD *)(v0 + 160);
    v7 = *(_BYTE *)(v3 + 24);
    swift_retain();
    specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v4, v5, v7, v6, 0, 0, 0, 255);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + a1);
}

double specialized BufferView.withUnsafePointer<A>(_:)(const char *a1)
{
  char *v2[2];

  v2[1] = *(char **)MEMORY[0x1E0C80C00];
  v2[0] = 0;
  return _stringshims_strtod_l(a1, v2, 0);
}

uint64_t specialized BufferView.dropFirst(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result >= a3)
      v3 = a3;
    else
      v3 = result;
    return a2 + v3;
  }
  return result;
}

BOOL specialized Collection.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void closure #1 in Double.init(prevalidatedBuffer:)(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  BOOL v7;
  char v8;
  double v9;
  char *v10[2];

  v10[1] = *(char **)MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v6 = _stringshims_strtod_l(a1, v10, 0);
  if (v10[0])
    v7 = &a1[a2] == v10[0];
  else
    v7 = 0;
  v8 = !v7;
  v9 = v6;
  if (!v7)
    v9 = 0.0;
  *(double *)a3 = v9;
  *(_BYTE *)(a3 + 8) = v8;
}

unsigned __int8 *specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)(unsigned __int8 *result, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!a2)
  {
    __break(1u);
    goto LABEL_33;
  }
  v11 = result;
  v12 = *result;
  if (v12 == 48)
  {
    if (a2 >= 1)
      v13 = 1;
    else
      v13 = a2;
    specialized static JSONScanner.validateLeadingZero(in:fullSource:)(&result[v13], a2 - v13, a4, a5);
    v6 = (unint64_t)v11;
    if (v5)
      return (unsigned __int8 *)v6;
    goto LABEL_15;
  }
  if ((v12 - 58) > 0xFFFFFFF6)
  {
    v6 = (unint64_t)result;
    goto LABEL_15;
  }
  if (v12 != 45)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (a2 < 2)
  {
    v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a4, a5);
    v20 = v19;
    v22 = v21;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v23 = 0xD000000000000010;
    *(_QWORD *)(v23 + 8) = 0x80000001823071F0;
    *(_QWORD *)(v23 + 16) = 45;
LABEL_28:
    *(_QWORD *)(v23 + 24) = v18;
    *(_QWORD *)(v23 + 32) = v20;
    *(_QWORD *)(v23 + 40) = v22;
    *(_BYTE *)(v23 + 48) = 1;
    swift_willThrow();
    return (unsigned __int8 *)v6;
  }
  v6 = (unint64_t)(result + 1);
  v14 = result[1];
  if ((_DWORD)v14 == 48)
  {
    specialized static JSONScanner.validateLeadingZero(in:fullSource:)(result + 2, a2 - 2, a4, a5);
    if (v5)
      return (unsigned __int8 *)v6;
  }
  else if ((v14 - 58) <= 0xFFFFFFF6)
  {
    v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)(result + 1), a4, a5);
    v20 = v30;
    v22 = v31;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v23 = 0xD000000000000013;
    *(_QWORD *)(v23 + 8) = 0x80000001823072E0;
    *(_QWORD *)(v23 + 16) = v14;
    goto LABEL_28;
  }
LABEL_15:
  if ((a3 & 1) == 0)
    goto LABEL_26;
  v15 = (unsigned __int8 *)(v6 + 1);
  if (v6 + 1 >= (unint64_t)&v11[a2])
    goto LABEL_26;
  v16 = 0;
  while (1)
  {
    v17 = v15[v16];
    if ((v17 | 0x20) == 0x65)
      break;
    if (&v11[a2 + ~v6] == (unsigned __int8 *)++v16)
      goto LABEL_26;
  }
  result = &v15[v16];
  if (*(unsigned __int8 *)(v6 + v16) - 58 > 0xFFFFFFF5)
  {
LABEL_26:
    v26 = &v11[a2 - 1];
    v27 = *v26;
    if ((v27 - 58) <= 0xFFFFFFF5)
    {
      v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v26, a4, a5);
      v20 = v28;
      v22 = v29;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_QWORD *)v23 = 0xD000000000000010;
      *(_QWORD *)(v23 + 8) = 0x80000001823071F0;
      *(_QWORD *)(v23 + 16) = v27;
      goto LABEL_28;
    }
    return (unsigned __int8 *)v6;
  }
  if (((v6 - (_QWORD)v11 + v16 + 1) & 0x8000000000000000) == 0 && (uint64_t)&v11[a2 + ~v6 - v16] >= 1)
  {
    v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a4, a5);
    v20 = v24;
    v22 = v25;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)v23 = xmmword_18206BE50;
    *(_QWORD *)(v23 + 16) = v17;
    goto LABEL_28;
  }
LABEL_34:
  __break(1u);
  return result;
}

unsigned __int8 *specialized static JSONScanner.validateLeadingZero(in:fullSource:)(unsigned __int8 *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a2)
  {
    v4 = *result;
    if ((v4 - 46) > 0x37 || ((1 << (v4 - 46)) & 0x80000000800001) == 0)
    {
      v6 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a3, a4);
      v8 = v7;
      v10 = v9;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      if ((v4 - 58) >= 0xFFFFFFF6)
      {
        *(_QWORD *)v11 = v6;
        *(_QWORD *)(v11 + 8) = v8;
        *(_QWORD *)(v11 + 16) = v10;
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 40) = 0;
        v12 = 10;
      }
      else
      {
        *(_OWORD *)v11 = xmmword_18206BE50;
        *(_QWORD *)(v11 + 16) = v4;
        *(_QWORD *)(v11 + 24) = v6;
        *(_QWORD *)(v11 + 32) = v8;
        *(_QWORD *)(v11 + 40) = v10;
        v12 = 1;
      }
      *(_BYTE *)(v11 + 48) = v12;
      return (unsigned __int8 *)swift_willThrow();
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JSONError and conformance JSONError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JSONError and conformance JSONError;
  if (!lazy protocol witness table cache variable for type JSONError and conformance JSONError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for JSONError, &type metadata for JSONError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONError and conformance JSONError);
  }
  return result;
}

ValueMetadata *type metadata accessor for CocoaError.Code()
{
  return &type metadata for CocoaError.Code;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64(a1, a2, a3, a4, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_);
}

void message_handler(uint64_t a1, id a2)
{
  xpc_object_t reply;
  uint64_t v5;

  if (object_getClass(a2) == (Class)MEMORY[0x1E0C81310])
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
      (*(void (**)(uint64_t, id))(v5 + 16))(v5, a2);
  }
  else if (object_getClass(a2) == (Class)MEMORY[0x1E0C812F8])
  {
    if (*(_QWORD *)(a1 + 24))
    {
      reply = xpc_dictionary_create_reply(a2);
      (*(void (**)(void))(*(_QWORD *)(a1 + 24) + 16))();
      if (reply)
        xpc_release(reply);
    }
  }
  else
  {
    __break(1u);
  }
}

void message_handler_0(unsigned __int8 *a1, id a2)
{
  Class Class;
  NSObject *v5;
  xpc_object_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a2);
  if (Class == (Class)MEMORY[0x1E0C812F8])
  {
    v6 = __NSXPCCONNECTION_IS_CREATING_REPLY__(a2);
    message_handler_message((uint64_t)a1, a2, (uint64_t)v6);
    if (v6)
      xpc_release(v6);
  }
  else if (Class == (Class)MEMORY[0x1E0C81310])
  {
    message_handler_error(a1, (uint64_t)a2);
  }
  else
  {
    v5 = _NSXPCLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      v7 = 138543362;
      v8 = a1;
      _os_log_fault_impl(&dword_1817D9000, v5, OS_LOG_TYPE_FAULT, "%{public}@: Unexpected data on XPC connection, invalidating the connection.", (uint8_t *)&v7, 0xCu);
    }
    objc_msgSend(a1, "invalidate");
  }
}

void message_handler_message(uint64_t a1, xpc_object_t xdict, uint64_t a3)
{
  uint64_t uint64;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  uint64 = xpc_dictionary_get_uint64(xdict, "f");
  v7 = uint64;
  if ((uint64 & 4) != 0)
  {
    if ((uint64 & 8) != 0)
    {
      v9 = xpc_dictionary_get_uint64(xdict, "proxynum");
      if (v9)
        -[_NSXPCConnectionExportedObjectTable receivedReleaseForProxyNumber:userQueue:](*(_QWORD *)(a1 + 56), v9, *(dispatch_queue_t *)(a1 + 24));
    }
    else if ((uint64 & 0x10) != 0)
    {
      objc_msgSend((id)a1, "_decodeProgressMessageWithData:flags:", xdict, uint64);
    }
  }
  else
  {
    v8 = (void *)MEMORY[0x186DA8F78]();
    objc_msgSend((id)a1, "_decodeAndInvokeMessageWithEvent:reply:flags:", xdict, a3, v7);
    objc_autoreleasePoolPop(v8);
  }
}

xpc_object_t __NSXPCCONNECTION_IS_CREATING_REPLY__(void *a1)
{
  return xpc_dictionary_create_reply(a1);
}

void sub_181879468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_181879498(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int buf, __int128 a20,uint64_t a21)
{
  uint64_t v21;
  id v22;
  NSObject *v23;
  const char *Name;
  uint64_t v25;

  if (a2)
  {
    if (a2 == 2)
    {
      v22 = objc_begin_catch(a1);
      v23 = _NSXPCLongMessageLog();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      {
        Name = sel_getName(*(SEL *)(v21 + 32));
        v25 = objc_msgSend(v22, "debugDescription");
        buf = 138543874;
        WORD2(a20) = 2082;
        *(_QWORD *)((char *)&a20 + 6) = Name;
        HIWORD(a20) = 2114;
        a21 = v25;
        _os_log_fault_impl(&dword_1817D9000, v23, OS_LOG_TYPE_FAULT, "%{public}@: Exception caught during invocation of reply block to message '%{public}s'.\n\nException: %{public}@", (uint8_t *)&buf, 0x20u);
      }
      if (dyld_program_sdk_at_least())
        objc_exception_throw(v22);
      objc_end_catch();
      JUMPOUT(0x181879384);
    }
    objc_begin_catch(a1);
    JUMPOUT(0x181879388);
  }
  _Unwind_Resume(a1);
}

void sub_18187955C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x181879570);
  }
  _Unwind_Resume(a1);
}

void sub_181879580(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, const __CFString *a17, uint64_t a18, __int128 buf, int a20,__int16 a21,__int16 a22,uint64_t a23)
{
  SEL *v23;
  void *v24;
  id v25;
  NSObject *v26;
  const char *v27;
  const char *v28;
  id Property;
  const char *Name;
  uint64_t v31;

  if (a2 == 2)
  {
    v25 = objc_begin_catch(a1);
    v26 = _NSXPCLongMessageLog();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
    {
      Name = sel_getName(v23[4]);
      v31 = objc_msgSend(v25, "debugDescription");
      LODWORD(buf) = 138543874;
      *(_QWORD *)((char *)&buf + 4) = v24;
      WORD6(buf) = 2082;
      *(_QWORD *)((char *)&buf + 14) = Name;
      a22 = 2114;
      a23 = v31;
      _os_log_fault_impl(&dword_1817D9000, v26, OS_LOG_TYPE_FAULT, "%{public}@: Exception caught during decoding of reply to message '%{public}s', dropping incoming message and calling failure block.\n\nIgnored Exception: %{public}@", (uint8_t *)&buf, 0x20u);
    }
    if (objc_getProperty(v23, v27, 16, 1))
    {
      Property = objc_getProperty(v23, v28, 16, 1);
      a17 = CFSTR("NSDebugDescription");
      a18 = objc_msgSend(v24, "_errorDescription");
      +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 4101, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a18, &a17, 1));
      __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__((uint64_t)Property);
    }
    -[_NSXPCConnectionExpectedReplyInfo cleanup]((uint64_t)v23);
    objc_end_catch();
    JUMPOUT(0x1818793A4);
  }
  _Unwind_Resume(a1);
}

void sub_1818796B4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18187A2B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *exc_buf, uint64_t a12, uint64_t a13, os_log_t oslog, int a15, int a16)
{
  void *v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  const char *v20;
  const char *Name;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    if (a2 == 2)
    {
      v18 = objc_begin_catch(a1);
      v19 = _NSXPCLongMessageLog();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      {
        v20 = *(const char **)(v17 - 200);
        if (v20)
          Name = sel_getName(v20);
        else
          Name = "(unknown selector)";
        v22 = objc_msgSend(v18, "debugDescription");
        *(_DWORD *)(v17 - 192) = 138544130;
        v23 = v17 - 192;
        *(_QWORD *)(v23 + 4) = v16;
        *(_WORD *)(v17 - 180) = 2082;
        *(_QWORD *)(v23 + 14) = Name;
        *(_WORD *)(v17 - 170) = 2114;
        *(_QWORD *)(v17 - 168) = v18;
        *(_WORD *)(v17 - 160) = 2114;
        *(_QWORD *)(v23 + 34) = v22;
        _os_log_fault_impl(&dword_1817D9000, v19, OS_LOG_TYPE_FAULT, "%{public}@: Warning: Exception caught during invocation of selector %{public}s, dropping incoming message and invalidating the connection.\nException: %{public}@\n%{public}@", (uint8_t *)(v17 - 192), 0x2Au);
      }
      objc_msgSend(v16, "invalidate");
      if (dyld_program_sdk_at_least())
        objc_exception_throw(v18);
      objc_end_catch();
      JUMPOUT(0x181879DC8);
    }
    objc_begin_catch(a1);
    JUMPOUT(0x181879DCCLL);
  }
  JUMPOUT(0x18187A584);
}

void sub_18187A3F4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18187A410);
  }
  JUMPOUT(0x18187A584);
}

void sub_18187A424()
{
  objc_end_catch();
  JUMPOUT(0x18187A578);
}

void sub_18187A450(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18187A45CLL);
  JUMPOUT(0x18187A584);
}

void sub_18187A530(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18187A548);
  }
  JUMPOUT(0x18187A584);
}

void sub_18187A55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object)
{
  uint64_t v11;

  _Block_object_dispose((const void *)(v11 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_18187A58C(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x18187A584);
}

void _NSXPCSerializationStartWrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  void *v6;

  *(_QWORD *)(a1 + 0x2000) = 0;
  if (a2 && (v4 = a3) != 0)
  {
    *(_QWORD *)(a1 + 8216) = a2;
    v5 = 1;
  }
  else
  {
    v4 = 8196;
    v6 = malloc_type_malloc(0x2004uLL, 0xA9F9A193uLL);
    *(_QWORD *)(a1 + 8216) = v6;
    if (!v6)
      objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Unable to allocate enough memory to encode data"), 0));
    v5 = 0;
  }
  *(_QWORD *)(a1 + 8208) = v4;
  *(_QWORD *)(a1 + 8200) = 0;
  *(_BYTE *)(a1 + 8248) = 0;
  *(_BYTE *)(a1 + 8249) = v5;
  _reserveSpace(a1, 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 8216) + *(_QWORD *)(a1 + 8200)) = 0x37317473696C7062;
  *(_QWORD *)(a1 + 8200) += 8;
}

uint64_t __NSXPCCONNECTION_IS_CALLING_OUT_TO_REPLY_BLOCK__(void *a1)
{
  return objc_msgSend(a1, "invoke");
}

void sub_18187AAAC(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18187AAC0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef _createTablesIfNeeded_locked(CFMutableDictionaryRef result)
{
  _QWORD *v1;

  v1 = result;
  if (!*((_QWORD *)result + 3))
  {
    result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 1, 0, MEMORY[0x1E0C9B3A0]);
    v1[3] = result;
  }
  if (!v1[4])
  {
    result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 1, 0, MEMORY[0x1E0C9B3A0]);
    v1[4] = result;
  }
  if (!v1[5])
  {
    result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 1, 0, 0);
    v1[5] = result;
  }
  return result;
}

id __NSXPCCONNECTION_IS_CALLING_OUT_TO_EXPORTED_OBJECT_S0__(void *a1, const char *a2)
{
  return objc_msgSend(a1, a2);
}

uint64_t _NSXPCLog()
{
  if (qword_1ECD09F90 != -1)
    dispatch_once(&qword_1ECD09F90, &__block_literal_global_35);
  return qword_1ECD09F88;
}

void sub_18187B460(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18187B434);
}

void sub_18187B46C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id _replacedWithDistantObject(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  NSString *v9;

  if (a2)
  {
    v8 = objc_msgSend(a3, "_interfaceForArgument:ofSelector:reply:", a5, a4, 1);
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (!v8)
      {
        v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("[NSXPCConnection sendInvocation]: A proxy object was passed as an argument to a reply block (argument %ld) but the interface does not specify a proxy object there."), a5);
        objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v9, 0));
      }
    }
    else if (v8)
    {
      return -[_NSXPCDistantObject _initWithConnection:exportedObject:interface:]([_NSXPCDistantObject alloc], "_initWithConnection:exportedObject:interface:", a1, a2, v8);
    }
  }
  return (id)a2;
}

void sub_18187BB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

ValueMetadata *type metadata accessor for CocoaError()
{
  return &type metadata for CocoaError;
}

void sub_18187C9C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

uint64_t __NSOPERATIONQUEUE_IS_WAITING_ON_AN_OPERATION__(void *a1)
{
  return objc_msgSend(a1, "waitUntilFinished");
}

NSMapTable *oq_begin_waiting(uint64_t a1, qos_class_t a2)
{
  os_unfair_lock_s *v4;
  NSMapTable *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  _opaque_pthread_t *v9;
  pthread_override_t started;

  v4 = (os_unfair_lock_s *)(a1 + 8);
  v5 = -[NSMapTable initWithKeyOptions:valueOptions:capacity:]([NSMapTable alloc], "initWithKeyOptions:valueOptions:capacity:", 258, 258, 0);
  os_unfair_lock_lock(v4);
  v6 = objc_msgSend(*(id *)(a1 + 152), "count");
  if (v6)
  {
    v7 = v6;
    for (i = 0; i != v7; ++i)
    {
      v9 = (_opaque_pthread_t *)objc_msgSend(*(id *)(a1 + 152), "pointerAtIndex:", i);
      started = pthread_override_qos_class_start_np(v9, a2, 0);
      NSMapInsertKnownAbsent(v5, v9, started);
    }
  }
  os_unfair_lock_unlock(v4);
  return v5;
}

void NSMapInsertKnownAbsent(NSMapTable *table, const void *key, const void *value)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "void NSMapInsertKnownAbsent(NSMapTable * _Nonnull, const void * _Nullable, const void * _Nullable)");
  -[NSMapTable setItem:forKnownAbsentKey:](table, "setItem:forKnownAbsentKey:", value, key);
}

void sub_18187DE50(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_18187E6A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_18187E7F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void *keysChangedForFractionCompletedValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 < 0)
  {
    v10 = 1;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = (v9 | v8) == 0;
    if (v9 < 0)
      v10 = 1;
  }
  v11 = *(_QWORD *)(a1 + 32);
  if ((a3 | a2) < 0)
  {
    if (v10)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (((a3 | a2) == 0) != v10)
LABEL_8:
    objc_msgSend(v6, "addObject:", CFSTR("indeterminate"));
LABEL_9:
  v24 = *(_OWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 24);
  if (v12 != a3 && v12 >= 1)
  {
    v22 = a3;
    v23 = 0;
    v21 = v12;
    _NSProgressFractionMultiplyByFraction((uint64_t *)&v24, &v21);
  }
  v21 = a2;
  v22 = a3;
  v23 = v11;
  _NSProgressFractionAddFraction((uint64_t)&v21, (uint64_t *)&v24);
  objc_msgSend((id)a1, "overallFraction", 0, 0, 0);
  if ((_NSProgressFractionIsFractionCompletedEqual(&v21, &v20) & 1) == 0)
    objc_msgSend(v7, "addObject:", CFSTR("fractionCompleted"));
  if (*(_QWORD *)(a1 + 24) != a3)
    objc_msgSend(v7, "addObject:", CFSTR("totalUnitCount"));
  v13 = a2;
  if (*(_QWORD *)(a1 + 16) != a2)
  {
    objc_msgSend(v7, "addObject:", CFSTR("completedUnitCount"));
    v13 = *(_QWORD *)(a1 + 16);
  }
  v14 = *(_QWORD *)(a1 + 24);
  if (v13 < 1 || v13 < v14 || v14 <= 0)
  {
    v15 = v13 > 0 && v14 == 0;
    if (a2 < 1 || a2 < a3 || a3 <= 0)
    {
      v19 = a2 > 0 && a3 == 0;
      if (v19 != v15)
        goto LABEL_37;
      return v7;
    }
  }
  else
  {
    LOBYTE(v15) = a2 >= a3;
    if (a3 <= 0)
      LOBYTE(v15) = 0;
    if (!a3)
      LOBYTE(v15) = 1;
    if (a2 < 1)
      goto LABEL_37;
  }
  if ((v15 & 1) == 0)
LABEL_37:
    objc_msgSend(v7, "addObject:", CFSTR("finished"));
  return v7;
}

uint64_t _NSProgressFractionAddFraction(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  double v31;
  double v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = a2[1];
  if (v2)
  {
    v3 = *(_QWORD *)(result + 8);
    if (v3)
    {
      v4 = a2[1];
      v5 = *(_QWORD *)(result + 8);
      do
      {
        v6 = v5;
        v5 = v4;
        v4 = v6 % v4;
      }
      while (v4);
      v7 = v3 / v5;
      v8 = v7 * v2;
      if ((unsigned __int128)(v7 * (__int128)v2) >> 64 == (v7 * v2) >> 63)
      {
        v13 = *(_QWORD *)result;
        v20 = v8 / v3 * *(_QWORD *)result;
        v14 = *a2;
        v21 = v8 / v2 * *a2;
        v22 = __OFADD__(v20, v21);
        v23 = v20 + v21;
      }
      else
      {
        v9 = *(_QWORD *)result;
        v10 = *(_QWORD *)(result + 8);
        v11 = *(_QWORD *)result;
        do
        {
          v12 = v11;
          v11 = v10;
          v10 = v12 % v10;
        }
        while (v10);
        v13 = v9 / v11;
        v3 /= v11;
        *(_QWORD *)result = v9 / v11;
        *(_QWORD *)(result + 8) = v3;
        v14 = *a2;
        v2 = a2[1];
        if (v2)
        {
          v15 = a2[1];
          v16 = *a2;
          do
          {
            v17 = v16;
            v16 = v15;
            v15 = v17 % v15;
          }
          while (v15);
          v18 = v14 / v16;
          v19 = v2 / v16;
        }
        else
        {
          v19 = 0;
          v18 = *a2;
        }
        v24 = v19;
        v25 = v3;
        do
        {
          v26 = v25;
          v25 = v24;
          v24 = v26 % v24;
        }
        while (v24);
        v27 = v3 / v25;
        v8 = v3 / v25 * v19;
        if ((unsigned __int128)(v27 * (__int128)v19) >> 64 != v8 >> 63)
          goto LABEL_22;
        v28 = v8 / v3 * v13;
        v29 = v8 / v19 * v18;
        v22 = __OFADD__(v28, v29);
        v23 = v28 + v29;
      }
      v30 = v22;
      if ((v30 & 1) == 0)
      {
        *(_QWORD *)result = v23;
LABEL_39:
        *(_QWORD *)(result + 8) = v8;
        return result;
      }
LABEL_22:
      *(_BYTE *)(result + 16) = 1;
      v31 = 0.0;
      v32 = 0.0;
      if ((v13 & 0x8000000000000000) == 0 && (v3 & 0x8000000000000000) == 0 && v13 | v3)
      {
        if (!v3)
        {
          v32 = 1.0;
          if ((v14 & 0x8000000000000000) == 0)
            goto LABEL_28;
          goto LABEL_36;
        }
        v32 = (double)v13 / (double)v3;
      }
      if ((v14 & 0x8000000000000000) == 0)
      {
LABEL_28:
        if ((v2 & 0x8000000000000000) == 0 && v14 | v2)
        {
          if (v2)
            v31 = (double)v14 / (double)v2;
          else
            v31 = 1.0;
        }
      }
LABEL_36:
      v33 = vcvtd_n_s64_f64(v32 + v31, 0x20uLL);
      v34 = 0x100000000;
      v35 = v33;
      do
      {
        v36 = v35;
        v35 = v34;
        v34 = v36 % v34;
      }
      while (v34);
      *(_QWORD *)result = v33 / v35;
      v8 = 0x100000000 / v35;
      goto LABEL_39;
    }
  }
  return result;
}

uint64_t _NSProgressFractionIsFractionCompletedEqual(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5;
  uint64_t v7;

  if ((_NSProgressFractionIsEqual(a1, a2) & 1) != 0)
    return 1;
  v5 = *a1;
  if (*a1)
    LODWORD(v5) = v5 >= 0 && a1[1] > 0;
  v7 = *a2;
  if (*a2)
    LODWORD(v7) = v7 >= 0 && a2[1] > 0;
  return (v5 | v7) ^ 1;
}

uint64_t _NSProgressFractionIsEqual(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = a2[1];
  if (!v3)
    return 0;
  v4 = *a1;
  v5 = *a2;
  result = *a1 == *a2;
  if (v2 == v3)
    return result;
  if (!(v5 | v4) || v4 == v2 && v5 == v3)
    return 1;
  if (v4)
  {
    if (v5)
      goto LABEL_10;
    return 0;
  }
  if (v5)
    return 0;
LABEL_10:
  if ((unsigned __int128)(v5 * (__int128)v2) >> 64 != (v5 * v2) >> 63)
  {
    v7 = a2[1];
    v8 = *a2;
    goto LABEL_15;
  }
  v7 = a2[1];
  v8 = *a2;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    do
    {
LABEL_15:
      v9 = v8;
      v8 = v7;
      v7 = v9 % v7;
    }
    while (v7);
    v10 = v2;
    v11 = v4;
    do
    {
      v12 = v11;
      v11 = v10;
      v10 = v12 % v10;
    }
    while (v10);
    v13 = v5 / v8 * (v2 / v11);
    if ((unsigned __int128)(v5 / v8 * (__int128)(v2 / v11)) >> 64 == v13 >> 63
      && (v14 = v3 / v8, v15 = v4 / v11,
                         v16 = v3 / v8 * v15,
                         (unsigned __int128)(v14 * (__int128)v15) >> 64 == v16 >> 63))
    {
      return v13 == v16;
    }
    else
    {
      v17 = 0.0;
      v18 = 0.0;
      if (((v4 | v2) & 0x8000000000000000) == 0)
        v18 = (double)v4 / (double)v2;
      if (((v5 | v3) & 0x8000000000000000) == 0)
        v17 = (double)v5 / (double)v3;
      return v18 == v17;
    }
  }
  return v5 * v2 == v3 * v4;
}

uint64_t *_NSProgressFractionMultiplyByFraction(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  BOOL v20;
  char v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *a2;
  v3 = *result;
  v4 = result[1];
  v5 = *result * *a2;
  if ((unsigned __int128)(*result * (__int128)*a2) >> 64 == v5 >> 63)
  {
    v6 = a2[1];
    v7 = v4 * v6;
    if ((unsigned __int128)(v4 * (__int128)v6) >> 64 == (v4 * v6) >> 63)
      goto LABEL_35;
  }
  if (v4)
  {
    v8 = result[1];
    v9 = *result;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    v3 /= v9;
    v11 = v4 / v9;
    *result = v3;
    result[1] = v4 / v9;
    v2 = *a2;
  }
  else
  {
    v11 = 0;
  }
  v12 = a2[1];
  if (v12)
  {
    v13 = a2[1];
    v14 = v2;
    do
    {
      v15 = v14;
      v14 = v13;
      v13 = v15 % v13;
    }
    while (v13);
    v16 = v2 / v14;
    v17 = v12 / v14;
  }
  else
  {
    v17 = 0;
    v16 = v2;
  }
  v5 = v3 * v16;
  if ((unsigned __int128)(v3 * (__int128)v16) >> 64 == (v3 * v16) >> 63)
  {
    v7 = v11 * v17;
    if ((unsigned __int128)(v11 * (__int128)v17) >> 64 == (v11 * v17) >> 63)
    {
LABEL_35:
      *result = v5;
      goto LABEL_36;
    }
  }
  *((_BYTE *)result + 16) = 1;
  v18 = 0.0;
  v19 = 0.0;
  if ((v3 & 0x8000000000000000) == 0 && (v11 & 0x8000000000000000) == 0 && v3 | v11)
  {
    if (!v11)
    {
      v19 = 1.0;
      if ((v2 & 0x8000000000000000) == 0)
        goto LABEL_21;
      goto LABEL_32;
    }
    v19 = (double)v3 / (double)v11;
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_21:
    v20 = v12 < 0 || (v12 | v2) == 0;
    v21 = v20;
    v18 = 1.0;
    if (v20)
      v18 = 0.0;
    if (v12 && (v21 & 1) == 0)
      v18 = (double)v2 / (double)v12;
  }
LABEL_32:
  v22 = vcvtd_n_s64_f64(v19 * v18, 0x20uLL);
  v23 = 0x100000000;
  v24 = v22;
  do
  {
    v25 = v24;
    v24 = v23;
    v23 = v25 % v23;
  }
  while (v23);
  *result = v22 / v24;
  v7 = 0x100000000 / v24;
LABEL_36:
  result[1] = v7;
  return result;
}

void sub_18187F814(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

uint64_t _NSProgressFractionSubtractFraction(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  double v31;
  double v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = a2[1];
  if (v2)
  {
    v3 = *(_QWORD *)(result + 8);
    if (v3)
    {
      v4 = a2[1];
      v5 = *(_QWORD *)(result + 8);
      do
      {
        v6 = v5;
        v5 = v4;
        v4 = v6 % v4;
      }
      while (v4);
      v7 = v3 / v5;
      v8 = v7 * v2;
      if ((unsigned __int128)(v7 * (__int128)v2) >> 64 == (v7 * v2) >> 63)
      {
        v13 = *(_QWORD *)result;
        v20 = v8 / v3 * *(_QWORD *)result;
        v14 = *a2;
        v21 = v8 / v2 * *a2;
        v22 = __OFSUB__(v20, v21);
        v23 = v20 - v21;
      }
      else
      {
        v9 = *(_QWORD *)result;
        v10 = *(_QWORD *)(result + 8);
        v11 = *(_QWORD *)result;
        do
        {
          v12 = v11;
          v11 = v10;
          v10 = v12 % v10;
        }
        while (v10);
        v13 = v9 / v11;
        v3 /= v11;
        *(_QWORD *)result = v9 / v11;
        *(_QWORD *)(result + 8) = v3;
        v14 = *a2;
        v2 = a2[1];
        if (v2)
        {
          v15 = a2[1];
          v16 = *a2;
          do
          {
            v17 = v16;
            v16 = v15;
            v15 = v17 % v15;
          }
          while (v15);
          v18 = v14 / v16;
          v19 = v2 / v16;
        }
        else
        {
          v19 = 0;
          v18 = *a2;
        }
        v24 = v19;
        v25 = v3;
        do
        {
          v26 = v25;
          v25 = v24;
          v24 = v26 % v24;
        }
        while (v24);
        v27 = v3 / v25;
        v8 = v3 / v25 * v19;
        if ((unsigned __int128)(v27 * (__int128)v19) >> 64 != v8 >> 63)
          goto LABEL_22;
        v28 = v8 / v3 * v13;
        v29 = v8 / v19 * v18;
        v22 = __OFSUB__(v28, v29);
        v23 = v28 - v29;
      }
      v30 = v22;
      if ((v30 & 1) == 0)
      {
        *(_QWORD *)result = v23;
LABEL_39:
        *(_QWORD *)(result + 8) = v8;
        return result;
      }
LABEL_22:
      *(_BYTE *)(result + 16) = 1;
      v31 = 0.0;
      v32 = 0.0;
      if ((v13 & 0x8000000000000000) == 0 && (v3 & 0x8000000000000000) == 0 && v13 | v3)
      {
        if (!v3)
        {
          v32 = 1.0;
          if ((v14 & 0x8000000000000000) == 0)
            goto LABEL_28;
          goto LABEL_36;
        }
        v32 = (double)v13 / (double)v3;
      }
      if ((v14 & 0x8000000000000000) == 0)
      {
LABEL_28:
        if ((v2 & 0x8000000000000000) == 0 && v14 | v2)
        {
          if (v2)
            v31 = (double)v14 / (double)v2;
          else
            v31 = 1.0;
        }
      }
LABEL_36:
      v33 = vcvtd_n_s64_f64(v32 - v31, 0x20uLL);
      v34 = 0x100000000;
      v35 = v33;
      do
      {
        v36 = v35;
        v35 = v34;
        v34 = v36 % v34;
      }
      while (v34);
      *(_QWORD *)result = v33 / v35;
      v8 = 0x100000000 / v35;
      goto LABEL_39;
    }
  }
  return result;
}

_NSBPlistMappedData *__NSCreateBPlistMappedDataFromURL(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  _NSBPlistMappedData *v7;
  uint64_t v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x186DA8F78]();
  v10[0] = 0;
  v7 = -[_NSBPlistMappedData initWithFileURL:error:]([_NSBPlistMappedData alloc], "initWithFileURL:error:", a1, v10);
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t, _NSBPlistMappedData *))(a2 + 16))(a2, v7);
    -[_NSBPlistMappedData setMappingIndex:](v7, "setMappingIndex:", v8, v10[0]);
  }
  else if (a3)
  {
    *a3 = v10[0];
  }
  objc_autoreleasePoolPop(v6);
  return v7;
}

uint64_t initializeWithCopy for DateComponents(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v5 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v5;
  v6 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v6;
  v7 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v7;
  v8 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v8;
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

double DateInterval.start.getter@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t URLQueryItem.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLQueryItem.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64(uint64_t a1, uint64_t a2, SEL *a3)
{
  _QWORD *v3;

  return objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, *v3);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Date(void *a1, uint64_t a2)
{
  uint64_t v3;

  objc_msgSend(a1, sel_timeIntervalSinceReferenceDate);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 0;
  return 1;
}

ValueMetadata *type metadata accessor for JSONEncoder.DateEncodingStrategy()
{
  return &type metadata for JSONEncoder.DateEncodingStrategy;
}

uint64_t _NSFCProcessMonitorLog()
{
  if (qword_1ECD0A798 != -1)
    dispatch_once(&qword_1ECD0A798, &__block_literal_global_797);
  return qword_1ECD0A718;
}

uint64_t _canonicalStringRepresentation(uint64_t a1)
{
  NSFileManager *v2;
  char __s[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  if (-[NSFileManager getFileSystemRepresentation:maxLength:withPath:](v2, "getFileSystemRepresentation:maxLength:withPath:", __s, 1024, a1))
  {
    return (uint64_t)-[NSFileManager stringWithFileSystemRepresentation:length:](v2, "stringWithFileSystemRepresentation:length:", __s, strlen(__s));
  }
  return a1;
}

void sub_181883434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181883758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

uint64_t _NSFCLog()
{
  if (qword_1ECD0A798 != -1)
    dispatch_once(&qword_1ECD0A798, &__block_literal_global_797);
  return qword_1ECD0A6F8;
}

ValueMetadata *type metadata accessor for AttributedString.Runs()
{
  return &type metadata for AttributedString.Runs;
}

ValueMetadata *type metadata accessor for AttributedString.CharacterView()
{
  return &type metadata for AttributedString.CharacterView;
}

uint64_t protocol witness for Decoder.userInfo.getter in conformance __PlistDictionaryDecoder()
{
  return swift_bridgeObjectRetain();
}

void sub_181884280(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void NSRunLoop.schedule(after:tolerance:options:_:)(double *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  double v8;
  double v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v16[6];

  v8 = *a1;
  v9 = *a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a4;
  *(_QWORD *)(v10 + 24) = a5;
  v11 = objc_allocWithZone(MEMORY[0x1E0C99E88]);
  v12 = objc_allocWithZone(MEMORY[0x1E0C99D68]);
  swift_retain();
  v13 = objc_msgSend(v12, sel_initWithTimeIntervalSinceReferenceDate_, v8);
  v16[4] = partial apply for closure #1 in NSRunLoop.schedule(after:tolerance:options:_:);
  v16[5] = v10;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1107296256;
  v16[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  v16[3] = &block_descriptor_6;
  v14 = _Block_copy(v16);
  v15 = objc_msgSend(v11, sel_initWithFireDate_interval_repeats_block_, v13, 0, v14, 0.0);
  _Block_release(v14);

  swift_release();
  objc_msgSend(v15, sel_setTolerance_, v9);
  objc_msgSend(v5, sel_addTimer_forMode_, v15, *MEMORY[0x1E0C99748]);

}

void sub_181884B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t __NSFirePerformWithOrder(void *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  const void *v6;
  void *v7;
  CFIndex FirstIndexOfValue;
  int v9;
  __CFString *v10;
  const __CFString *v11;
  uint64_t i;
  __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  __CFRunLoop *Current;
  uint64_t v18;
  const char *v19;
  void *v20;
  CFRange v21;

  v19 = *(const char **)(a3 + 8);
  v20 = *(void **)a3;
  v4 = *(void **)(a3 + 24);
  v18 = *(_QWORD *)(a3 + 16);
  v6 = *(const void **)(a3 + 32);
  v5 = *(void **)(a3 + 40);
  _CFAutoreleasePoolPush();
  CFRetain(a1);
  objc_sync_enter(v5);
  v7 = (void *)objc_msgSend(v5, "_perft");
  v21.length = objc_msgSend(v7, "count");
  v21.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)v7, v21, v6);
  if (FirstIndexOfValue << 32 != 0xFFFFFFFF00000000)
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)v7, (int)FirstIndexOfValue);
  v9 = objc_msgSend(v4, "count");
  v10 = (__CFString *)*MEMORY[0x1E0C99860];
  v11 = (const __CFString *)*MEMORY[0x1E0C9B270];
  for (i = v9 - 1; i != -1; --i)
  {
    v13 = (__CFString *)objc_msgSend(v4, "objectAtIndex:", i);
    v14 = v13;
    v15 = v11;
    if (v13 != v10)
    {
      if (-[__CFString isEqual:](v13, "isEqual:", CFSTR("kCFRunLoopCommonModes")))
        v15 = v11;
      else
        v15 = v14;
    }
    Current = CFRunLoopGetCurrent();
    CFRunLoopRemoveObserver(Current, (CFRunLoopObserverRef)a1, v15);
  }
  objc_sync_exit(v5);
  objc_msgSend(v20, v19, v18);
  CFRelease(a1);
  return _CFAutoreleasePoolPop();
}

void sub_181884D14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181884F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void protocol witness for Scheduler.schedule(after:interval:tolerance:options:_:) in conformance NSRunLoop(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  NSRunLoop.schedule(after:interval:tolerance:options:_:)(a1, a2, a3, a4, a5, a6);
}

void NSRunLoop.schedule(after:interval:tolerance:options:_:)(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  void *v6;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[6];

  v10 = *a1;
  v11 = *a2;
  v12 = *a3;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a4;
  *(_QWORD *)(v13 + 24) = a5;
  v14 = objc_allocWithZone(MEMORY[0x1E0C99E88]);
  v15 = objc_allocWithZone(MEMORY[0x1E0C99D68]);
  swift_retain();
  v16 = objc_msgSend(v15, sel_initWithTimeIntervalSinceReferenceDate_, v10);
  v23[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v23[5] = v13;
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 1107296256;
  v23[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  v23[3] = &block_descriptor_12;
  v17 = _Block_copy(v23);
  v18 = objc_msgSend(v14, sel_initWithFireDate_interval_repeats_block_, v16, 1, v17, v11);
  _Block_release(v17);

  swift_release();
  objc_msgSend(v18, sel_setTolerance_, v12);
  objc_msgSend(v6, sel_addTimer_forMode_, v18, *MEMORY[0x1E0C99748]);
  *(_QWORD *)(swift_allocObject() + 16) = v18;
  v19 = type metadata accessor for AnyCancellable();
  swift_allocObject();
  v20 = v18;
  v21 = AnyCancellable.init(_:)();
  v22 = MEMORY[0x1E0C95DF8];
  a6[3] = v19;
  a6[4] = v22;

  *a6 = v21;
}

ValueMetadata *type metadata accessor for AttributedString.Runs.Index()
{
  return &type metadata for AttributedString.Runs.Index;
}

ValueMetadata *type metadata accessor for AttributedString.Runs.Run()
{
  return &type metadata for AttributedString.Runs.Run;
}

ValueMetadata *type metadata accessor for AttributedSubstring()
{
  return &type metadata for AttributedSubstring;
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date()
{
  double *v0;
  id v1;
  id v2;
  id v3;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
  v2 = objc_msgSend(v1, sel_description);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

void protocol witness for CustomStringConvertible.description.getter in conformance Data()
{
  uint64_t *v0;

  Data.description.getter(*v0, v0[1]);
}

ValueMetadata *type metadata accessor for PersonNameComponents()
{
  return &type metadata for PersonNameComponents;
}

uint64_t type metadata accessor for LockedState._Buffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LockedState._Buffer);
}

CFMutableDictionaryRef _fillDictionary(int *a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  CFMutableDictionaryRef Mutable;
  NSNumber *v9;
  uint64_t v10;
  NSNumber *v11;
  NSNumber *v12;
  NSNumber *v13;
  NSNumber *v14;
  NSString *v15;
  NSString *v16;
  unsigned int v17;
  uint64_t v18;
  const __CFString *v19;
  NSNumber *v20;
  uint64_t v21;
  int v22;
  int v23;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a1 + 12));
  if (v9)
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v9, CFSTR("NSFileSize"));
  v10 = objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)*((uint64_t *)a1 + 6) - *MEMORY[0x1E0C9ADF8] + (double)*((uint64_t *)a1 + 7) * 0.000000001);
  if (v10)
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v10, CFSTR("NSFileModificationDate"));
  v11 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", a1[1] & 0xFFF);
  if (v11)
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v11, CFSTR("NSFilePosixPermissions"));
  v12 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *((unsigned __int16 *)a1 + 3));
  if (v12)
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v12, CFSTR("NSFileReferenceCount"));
  v13 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *a1);
  if (v13)
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v13, CFSTR("NSFileSystemNumber"));
  v14 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *((_QWORD *)a1 + 1));
  if (v14)
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v14, CFSTR("NSFileSystemFileNumber"));
  v15 = __NSUserAccountNumberToName(a1[4]);
  if (v15)
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v15, CFSTR("NSFileOwnerAccountName"));
  v16 = __NSGroupAccountNumberToName(a1[5]);
  if (v16)
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v16, CFSTR("NSFileGroupOwnerAccountName"));
  v17 = *((unsigned __int16 *)a1 + 2);
  if ((v17 & 0x1000) != 0 || (v18 = (v17 >> 13) - 1, v18 > 5))
    v19 = CFSTR("NSFileTypeUnknown");
  else
    v19 = off_1E0F4E290[v18];
  -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v19, CFSTR("NSFileType"));
  if ((a1[1] & 0xB000 | 0x4000) == 0x6000)
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", a1[6]), CFSTR("NSFileDeviceIdentifier"));
  if ((a2[16] & 1) != 0)
  {
    v20 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a2);
    if (v20)
      -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v20, CFSTR("NSFileExtensionHidden"));
  }
  if ((a2[16] & 2) != 0)
  {
    v21 = *((_QWORD *)a2 + 1);
    if (v21)
      -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v21, CFSTR("NSFileCreationDate"));
  }
  v22 = a1[29];
  if ((v22 & 0x20002) != 0)
  {
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 1), CFSTR("NSFileImmutable"));
    v22 = a1[29];
  }
  if ((v22 & 0x40004) != 0)
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 1), CFSTR("NSFileAppendOnly"));
  -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", a1[4]), CFSTR("NSFileOwnerAccountID"));
  -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", a1[5]), CFSTR("NSFileGroupOwnerAccountID"));
  if (a3)
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", a3, CFSTR("NSFileExtendedAttributes"));
  v23 = a4 - 1;
  if ((a4 - 1) <= 6 && ((0x4Fu >> v23) & 1) != 0)
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", off_1E0F4E220[v23], CFSTR("NSFileProtectionKey"));
  return Mutable;
}

NSString *__NSUserAccountNumberToName(uid_t a1)
{
  passwd *v1;

  v1 = getpwuid(a1);
  if (v1 && v1->pw_name)
    return +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  else
    return 0;
}

NSString *__NSGroupAccountNumberToName(gid_t a1)
{
  group *v1;

  v1 = getgrgid(a1);
  if (v1 && v1->gr_name)
    return +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  else
    return 0;
}

uint64_t _endDocument(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    v2 = (void *)objc_msgSend((id)result, "delegate");
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
      return objc_msgSend(v2, "parserDidEndDocument:", v1);
  }
  return result;
}

uint64_t _startDocument(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    v2 = (void *)objc_msgSend((id)result, "delegate");
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
      return objc_msgSend(v2, "parserDidStartDocument:", v1);
  }
  return result;
}

uint64_t _comment(uint64_t result, void *a2)
{
  uint64_t v3;
  void *v4;
  void *Value;

  v3 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    v4 = (void *)objc_msgSend((id)result, "delegate");
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      if (a2)
      {
        Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 64), a2);
        if (!Value)
          Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v3 + 64), (char *)a2);
      }
      else
      {
        Value = 0;
      }
      return objc_msgSend(v4, "parser:foundComment:", v3, Value);
    }
  }
  return result;
}

void service_connection_handler_make_connection(void *a1, _xpc_connection_s *a2)
{
  void *v4;
  void *v5;

  v4 = (void *)MEMORY[0x186DA8F78]();
  v5 = (void *)-[NSXPCConnection _initWithPeerConnection:name:options:]([NSXPCConnection alloc], a2, (__CFString *)objc_msgSend(a1, "serviceName"));
  objc_msgSend(a1, "delegate");
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (objc_msgSend((id)objc_msgSend(a1, "delegate"), "listener:shouldAcceptNewConnection:", a1, v5) & 1) == 0)
  {
    objc_msgSend(v5, "invalidate");
  }

  objc_autoreleasePoolPop(v4);
}

void message_handler_error(unsigned __int8 *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *global_queue;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  NSObject *v12;
  _QWORD v13[6];

  v13[5] = *MEMORY[0x1E0C80C00];
  if (a2 == MEMORY[0x1E0C81258])
  {
    ++*(_QWORD *)(*((_QWORD *)a1 + 9) + 8);
    v3 = (void *)MEMORY[0x186DA8F78](a1);
    v4 = objc_msgSend(a1, "interruptionHandler");
    if (v4)
      (*(void (**)(void))(v4 + 16))();
    objc_autoreleasePoolPop(v3);
  }
  else if (a2 != MEMORY[0x1E0C81288])
  {
    if (a2 == MEMORY[0x1E0C81260])
    {
      v5 = (void *)MEMORY[0x186DA8F78](a1);
      -[_NSXPCConnectionRequestedReplies invalidate](*((_QWORD *)a1 + 8));
      v6 = objc_msgSend(a1, "invalidationHandler");
      if (v6)
        (*(void (**)(void))(v6 + 16))();
      v7 = objc_msgSend(a1, "_additionalInvalidationHandler");
      if (v7)
      {
        v8 = (void *)v7;
        global_queue = dispatch_get_global_queue(21, 0);
        dispatch_async(global_queue, v8);
        objc_msgSend(a1, "set_additionalInvalidationHandler:", 0);
      }
      objc_msgSend(a1, "setInvalidationHandler:", 0);
      objc_msgSend(a1, "setInterruptionHandler:", 0);
      objc_msgSend(a1, "setExportedObject:", 0);
      -[_NSXPCConnectionExportedObjectTable invalidate](*((_QWORD *)a1 + 7));
      -[_NSXPCConnectionClassCache clear](*((_QWORD *)a1 + 15));
      -[_NSXPCConnectionClassCache clear](*((_QWORD *)a1 + 16));
      objc_autoreleasePoolPop(v5);
      v10 = a1 + 32;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 & 0xFB, v10));
      if ((v11 & 4) != 0)
      {
        v12 = *((_QWORD *)a1 + 3);
        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 3221225472;
        v13[2] = __message_handler_error_block_invoke;
        v13[3] = &unk_1E0F4D2D8;
        v13[4] = a1;
        dispatch_async(v12, v13);
      }
    }
    else if (a2 == MEMORY[0x1E0C81278])
    {
      objc_msgSend(a1, "invalidate");
    }
  }
}

uint64_t Calendar.firstWeekday.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 56))(ObjectType, v1);
}

uint64_t Calendar.timeZone.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1);
}

uint64_t Calendar.firstWeekday.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = v1[1];
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(ObjectType, v3);
  if (result != a1)
  {
    v10[0] = 0;
    v10[1] = 0;
    v9[0] = 0;
    v9[1] = 0;
    v6 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v3 + 112))(v10, v9, a1, 0, 0, 1, ObjectType, v3);
    v8 = v7;
    result = swift_unknownObjectRelease();
    *v1 = v6;
    v1[1] = v8;
  }
  return result;
}

uint64_t _NSSwiftCalendar.classForCoder.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  unint64_t *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  v6 = *(_OWORD *)(v1 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  v8 = v6;
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static CalendarCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v2, (uint64_t *)&v7);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  LOBYTE(v2) = specialized static Calendar.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v7);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v2 & 1) != 0)
    v4 = (unint64_t *)&lazy cache variable for type metadata for _NSAutoCalendar;
  else
    v4 = (unint64_t *)&lazy cache variable for type metadata for NSCalendar;
  return type metadata accessor for NSMorphologyPronoun(0, v4);
}

unint64_t _NSSwiftCalendar.init(coder:)(void *a1)
{
  void *v1;
  char **v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t inited;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  unint64_t result;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  unsigned int v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  __int128 v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  id v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  objc_class *v98;
  id v99;
  _QWORD v100[2];
  uint64_t v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  id v106;
  __int128 v107;
  objc_super v108;
  __int128 v109;
  _OWORD v110[2];

  v4 = one-time initialization token for cache;
  v5 = v1;
  if (v4 != -1)
    swift_once();
  v6 = static CalendarCache.cache + 16;
  v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.fixed(_:)(v6, 0, &v109);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  v107 = v109;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 16) = v107;
  v9 = OBJC_IVAR____NSSwiftCalendar__lock;
  *(_QWORD *)&v5[OBJC_IVAR____NSSwiftCalendar__lock] = v8;
  if (!objc_msgSend(a1, sel_allowsKeyedCoding))
  {

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 40) = v21;
    *(_QWORD *)(inited + 48) = 0xD000000000000026;
    *(_QWORD *)(inited + 56) = 0x80000001823084C0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v22 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)&v109, &demangling cache variable for type metadata for (String, Any));
    v23 = v109;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v23, *((uint64_t *)&v23 + 1));
    if ((v25 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v22[(result >> 6) + 8] |= 1 << result;
      *(_OWORD *)(v22[6] + 16 * result) = v23;
      result = (unint64_t)outlined init with take of Any(v110, (_OWORD *)(v22[7] + 32 * result));
      v26 = v22[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (!v27)
      {
        v22[2] = v28;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v29 = objc_allocWithZone((Class)NSError);
        v30 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v31 = objc_msgSend(v29, sel_initWithDomain_code_userInfo_, v30, 4864, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v32 = objc_msgSend(v31, sel_domain);
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        v35 = v34;

        if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v35 == v36)
          goto LABEL_26;
        v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) != 0)
          goto LABEL_27;
        __break(1u);
        goto LABEL_15;
      }
    }
    __break(1u);
    goto LABEL_57;
  }
  v10 = (void *)specialized NSCoder.decodeObject<A>(of:forKey:)(0x746E6564692E534ELL, 0xED00007265696669);
  if (!v10)
  {
LABEL_15:

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v38 = swift_initStackObject();
    *(_OWORD *)(v38 + 16) = xmmword_18205C850;
    *(_QWORD *)(v38 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(v38 + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v38 + 40) = v39;
    *(_QWORD *)(v38 + 48) = 0xD00000000000001DLL;
    *(_QWORD *)(v38 + 56) = 0x80000001823084F0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v40 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (Hashable & Sendable)?(v38 + 32, (uint64_t)&v109, &demangling cache variable for type metadata for (String, Any));
    v41 = v109;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v41, *((uint64_t *)&v41 + 1));
    if ((v42 & 1) != 0)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v40[(result >> 6) + 8] |= 1 << result;
    *(_OWORD *)(v40[6] + 16 * result) = v41;
    result = (unint64_t)outlined init with take of Any(v110, (_OWORD *)(v40[7] + 32 * result));
    v43 = v40[2];
    v27 = __OFADD__(v43, 1);
    v44 = v43 + 1;
    if (v27)
    {
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    v40[2] = v44;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v45 = objc_allocWithZone((Class)NSError);
    v46 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v16 = objc_msgSend(v45, sel_initWithDomain_code_userInfo_, v46, 4864, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v47 = objc_msgSend(v16, sel_domain);
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v50 = v49;

    if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v50 == v51)
      goto LABEL_26;
    v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v52 & 1) != 0)
      goto LABEL_27;
    __break(1u);
    goto LABEL_21;
  }
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v14 = v13;

  v15 = specialized NSCoder.decodeObject<A>(of:forKey:)(0x6C61636F6C2E534ELL, 0xE900000000000065);
  if (!v15)
    goto LABEL_22;
  v16 = (id)v15;
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSLocale);
  if (!objc_msgSend(v16, sel_isKindOfClass_, swift_getObjCClassFromMetadata()))
  {
LABEL_21:

LABEL_22:
    swift_bridgeObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v53 = swift_initStackObject();
    *(_OWORD *)(v53 + 16) = xmmword_18205C850;
    *(_QWORD *)(v53 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(v53 + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v53 + 40) = v54;
    *(_QWORD *)(v53 + 48) = 0xD00000000000001ALL;
    *(_QWORD *)(v53 + 56) = 0x8000000182308510;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v55 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (Hashable & Sendable)?(v53 + 32, (uint64_t)&v109, &demangling cache variable for type metadata for (String, Any));
    v56 = v109;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v56, *((uint64_t *)&v56 + 1));
    if ((v57 & 1) == 0)
    {
      v55[(result >> 6) + 8] |= 1 << result;
      *(_OWORD *)(v55[6] + 16 * result) = v56;
      result = (unint64_t)outlined init with take of Any(v110, (_OWORD *)(v55[7] + 32 * result));
      v58 = v55[2];
      v27 = __OFADD__(v58, 1);
      v59 = v58 + 1;
      if (!v27)
      {
        v55[2] = v59;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v60 = objc_allocWithZone((Class)NSError);
        v61 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v62 = objc_msgSend(v60, sel_initWithDomain_code_userInfo_, v61, 4864, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v63 = objc_msgSend(v62, sel_domain);
        v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
        v66 = v65;

        if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v66 == v67)
        {
LABEL_26:
          swift_bridgeObjectRelease_n();
          goto LABEL_27;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          __break(1u);
          goto LABEL_32;
        }
LABEL_27:
        objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
        swift_unknownObjectRelease();

LABEL_28:
        swift_release();
        type metadata accessor for _NSSwiftCalendar();
        swift_deallocPartialClassInstance();
        return 0;
      }
      goto LABEL_58;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v104 = v16;
  v105 = v14;
  v103 = v12;
  v17 = specialized NSCoder.decodeObject<A>(of:forKey:)(0x7A656D69742E534ELL, 0xEB00000000656E6FLL);
  v106 = (id)specialized NSCoder.decodeObject<A>(of:forKey:)(0x72617473672E534ELL, 0xED00006574616474);
  v18 = (uint64_t)&selRef__temporaryStorageLocationForIdentifier_;
  v19 = objc_msgSend(a1, sel_containsValueForKey_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  v2 = &selRef_createFileAtPath_contents_attributes_;
  LODWORD(v101) = v19;
  *(_QWORD *)&v107 = v17;
  if (v19)
  {
    v102 = objc_msgSend(a1, sel_decodeIntegerForKey_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    goto LABEL_33;
  }
LABEL_32:
  v102 = 0;
LABEL_33:
  v69 = objc_msgSend(a1, *(SEL *)(v18 + 3800), String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v69)
  {
    v70 = objc_msgSend(a1, (SEL)v2 + 1480, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
  }
  else
  {
    v70 = 0;
  }
  v71 = objc_msgSend(a1, sel_error);
  if (v71)
  {
    v72 = v71;
    swift_bridgeObjectRelease();

LABEL_49:
    goto LABEL_28;
  }
  v73 = (void *)String._bridgeToObjectiveCImpl()();
  static Calendar._fromNSCalendarIdentifier(_:)(v73, (char *)&v109);
  v74 = (id)swift_unknownObjectRelease();
  if (v109 != 16)
  {
    v90 = (void *)v107;
    v100[1] = v70;
    if ((_QWORD)v107)
    {
      LODWORD(v100[0]) = v69 ^ 1;
      LODWORD(v101) = v109;
      type metadata accessor for _NSSwiftTimeZone();
      v91 = swift_dynamicCastClass();
      if (v91)
      {
        v92 = *(_QWORD *)(v91 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
        v74 = (id)swift_unknownObjectRetain();
      }
      else
      {
        type metadata accessor for _TimeZoneBridged();
        v92 = swift_allocObject();
        *(_QWORD *)(v92 + 16) = v107;
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
        v74 = v90;
      }
      v94 = v92;
    }
    else
    {
      v94 = 0;
    }
    v101 = v94;
    v100[0] = v100;
    v95 = *(_QWORD *)&v5[v9];
    MEMORY[0x1E0C80A78](v74);
    v96 = v104;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v95 + 32));
    partial apply for closure #1 in _NSSwiftCalendar.init(coder:)((uint64_t *)(v95 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v95 + 32));
    swift_release();

    v97 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v98 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
    v108.receiver = v5;
    v108.super_class = v98;
    v99 = objc_msgSendSuper2(&v108, sel_initWithCheckedCalendarIdentifier_, v97);

    v68 = v99;
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    if (v68)

    return (unint64_t)v68;
  }
  swift_bridgeObjectRelease();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v75 = swift_initStackObject();
  *(_OWORD *)(v75 + 16) = xmmword_18205C850;
  *(_QWORD *)(v75 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(v75 + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v75 + 40) = v76;
  *(_QWORD *)(v75 + 48) = 0xD00000000000001BLL;
  *(_QWORD *)(v75 + 56) = 0x8000000182308530;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v77 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(v75 + 32, (uint64_t)&v109, &demangling cache variable for type metadata for (String, Any));
  v78 = v109;
  swift_retain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v78, *((uint64_t *)&v78 + 1));
  if ((v79 & 1) != 0)
    goto LABEL_61;
  v77[(result >> 6) + 8] |= 1 << result;
  *(_OWORD *)(v77[6] + 16 * result) = v78;
  result = (unint64_t)outlined init with take of Any(v110, (_OWORD *)(v77[7] + 32 * result));
  v80 = v77[2];
  v27 = __OFADD__(v80, 1);
  v81 = v80 + 1;
  if (v27)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v77[2] = v81;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v82 = objc_allocWithZone((Class)NSError);
  v83 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v84 = objc_msgSend(v82, sel_initWithDomain_code_userInfo_, v83, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v85 = objc_msgSend(v84, sel_domain);
  v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
  v88 = v87;

  if (v86 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v88 == v89)
  {
    swift_bridgeObjectRelease_n();
LABEL_48:
    objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());

    swift_unknownObjectRelease();
    goto LABEL_49;
  }
  v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v93 & 1) != 0)
    goto LABEL_48;
LABEL_63:
  __break(1u);
  return result;
}

uint64_t specialized NSCoder.decodeObject<A>(of:forKey:)(uint64_t a1, uint64_t a2)
{
  return specialized NSCoder.decodeObject<A>(of:forKey:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for NSString);
}

{
  return specialized NSCoder.decodeObject<A>(of:forKey:)(a1, a2, &lazy cache variable for type metadata for NSLocale);
}

{
  return specialized NSCoder.decodeObject<A>(of:forKey:)(a1, a2, &lazy cache variable for type metadata for NSDate);
}

{
  return specialized NSCoder.decodeObject<A>(of:forKey:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for NSTimeZone);
}

uint64_t partial apply for closure #1 in _NSSwiftCalendar.init(coder:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftCalendar.init(coder:)(a1, *(_BYTE *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72), *(void **)(v1 + 80));
}

uint64_t closure #1 in _NSSwiftCalendar.init(coder:)(uint64_t *a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, void *a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  __int128 v31;
  __int128 v32;
  char v33;

  v28 = a8;
  v26 = a5;
  v27 = a6;
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftLocale();
  v15 = swift_dynamicCastClass();
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + OBJC_IVAR____NSSwiftLocale_locale);
    v17 = *(_QWORD *)(v15 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    swift_unknownObjectRetain();
    if (a10)
    {
LABEL_3:
      objc_msgSend(a10, sel_timeIntervalSinceReferenceDate, v26, v27, v28);
      v19 = v18;
      goto LABEL_6;
    }
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a3;
    v17 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged, (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    v20 = a3;
    if (a10)
      goto LABEL_3;
  }
  v19 = 0;
LABEL_6:
  v21 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v21 != -1)
    swift_once();
  v33 = a2;
  *(_QWORD *)&v32 = v16;
  *((_QWORD *)&v32 + 1) = v17;
  *(_QWORD *)&v31 = a4;
  *((_QWORD *)&v31 + 1) = v26;
  v29 = v19;
  v30 = a10 == 0;
  swift_retain();
  v22 = CalendarCache.fixed(identifier:locale:timeZone:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(&v33, &v32, &v31, v27, a7 & 1, v28, a9 & 1, &v29);
  v24 = v23;
  swift_unknownObjectRelease();
  swift_release();
  result = swift_unknownObjectRelease();
  *a1 = v22;
  a1[1] = v24;
  return result;
}

uint64_t protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarICU(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  unsigned __int8 v19;

  v19 = *a1;
  v12 = *(_BYTE *)(a8 + 8);
  v13 = a5 & 1;
  v14 = a7 & 1;
  v17 = *(_QWORD *)a8;
  v18 = v12;
  v15 = swift_allocObject();
  _CalendarICU.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(&v19, a2, a3, a4, v13, a6, v14, &v17);
  return v15;
}

uint64_t Calendar.dateComponents(in:from:)@<X0>(__int128 *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  double v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *v3;
  v8 = v3[1];
  v15 = 327679;
  if (v6 > 1.59271755e13)
    v6 = 1.59271755e13;
  v9 = fmax(v6, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v14 = v9;
  v13 = *a1;
  (*(void (**)(uint64_t *, double *, __int128 *, uint64_t, uint64_t))(v8 + 184))(&v15, &v14, &v13, ObjectType, v8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *a3 = v7;
  a3[1] = v8;
  result = a3[2];
  if (result)
  {
    v12 = a3[3];
    *(_QWORD *)&v13 = a3[2];
    *((_QWORD *)&v13 + 1) = v12;
    swift_unknownObjectRetain();
    return Calendar.timeZone.setter((uint64_t *)&v13);
  }
  return result;
}

uint64_t _CalendarICU.dateComponents(_:from:in:)@<X0>(uint64_t *a1@<X0>, double *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t ObjectType;
  _QWORD v16[2];
  __int128 v17;

  v6 = *a1;
  v7 = *a2;
  v8 = *a3;
  v9 = a3[1];
  v17 = *(_OWORD *)(v4 + 40);
  v16[0] = v8;
  v16[1] = v9;
  v10 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v17, (uint64_t)v16);
  if ((v10 & 1) != 0)
  {
    v11 = *(os_unfair_lock_s **)(v4 + 16);
    swift_retain();
    os_unfair_lock_lock(v11 + 4);
    closure #1 in _CalendarICU.dateComponents(_:from:)((_QWORD *)v4, v6, a4, v7);
    os_unfair_lock_unlock(v11 + 4);
    return swift_release();
  }
  else
  {
    v13 = *(os_unfair_lock_s **)(v4 + 16);
    MEMORY[0x1E0C80A78](v10);
    swift_unknownObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v13 + 4);
    partial apply for closure #1 in _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)((uint64_t *)&v17);
    v14 = *((_QWORD *)&v17 + 1);
    os_unfair_lock_unlock(v13 + 4);
    swift_unknownObjectRelease();
    swift_release();
    ObjectType = swift_getObjectType();
    *(_QWORD *)&v17 = v6;
    *(double *)v16 = v7;
    (*(void (**)(__int128 *, _QWORD *, uint64_t, uint64_t))(v14 + 192))(&v17, v16, ObjectType, v14);
    return swift_unknownObjectRelease();
  }
}

uint64_t TimeZone.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);
}

uint64_t _NSSwiftTimeZone.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  Swift::String v10;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  ObjectType = swift_getObjectType();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32);
  swift_unknownObjectRetain();
  v4 = v3(ObjectType, v1);
  v6 = v5;
  swift_unknownObjectRelease();
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftTimeZone_lock);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  v10._countAndFlagsBits = v4;
  v10._object = v6;
  closure #1 in _NSSwiftTimeZone.data.getter(v10, (uint64_t *)(v7 + 16), &v9);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  return v9;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeZone(_QWORD *a1)
{
  return TimeZone.encode(to:)(a1);
}

uint64_t TimeZone.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(uint64_t, uint64_t);
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TimeZone.CodingKeys>);
  v15 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  ObjectType = swift_getObjectType();
  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 32);
  swift_unknownObjectRetain();
  v10(ObjectType, v8);
  swift_unknownObjectRelease();
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 104))(ObjectType, v8);
    v13 = v15;
    if ((v12 & 1) != 0)
    {
      v16 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v7, v5);
  }
}

unint64_t lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TimeZone.CodingKeys, &unk_1E0F31E38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TimeZone.CodingKeys, &unk_1E0F31E38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TimeZone.CodingKeys, &unk_1E0F31E38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TimeZone.CodingKeys, &unk_1E0F31E38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys);
  }
  return result;
}

uint64_t partial apply for closure #1 in _NSSwiftCalendar.firstWeekday.setter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftCalendar.firstWeekday.setter(a1, *(_QWORD *)(v1 + 16));
}

uint64_t closure #1 in _NSSwiftCalendar.firstWeekday.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v4 = a1[1];
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(ObjectType, v4);
  if (result != a2)
  {
    v11[0] = 0;
    v11[1] = 0;
    v10[0] = 0;
    v10[1] = 0;
    v7 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v4 + 112))(v11, v10, a2, 0, 0, 1, ObjectType, v4);
    v9 = v8;
    result = swift_unknownObjectRelease();
    *a1 = v7;
    a1[1] = v9;
  }
  return result;
}

uint64_t partial apply for closure #1 in _NSSwiftCalendar.minimumDaysInFirstWeek.setter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in _NSSwiftCalendar.minimumDaysInFirstWeek.setter(a1, *(_QWORD *)(v1 + 16));
}

uint64_t closure #1 in _NSSwiftCalendar.minimumDaysInFirstWeek.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v4 = a1[1];
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 72))(ObjectType, v4);
  if (result != a2)
  {
    v11[0] = 0;
    v11[1] = 0;
    v10[0] = 0;
    v10[1] = 0;
    v7 = (*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 112))(v11, v10, 0, 1, a2, 0, ObjectType, v4);
    v9 = v8;
    result = swift_unknownObjectRelease();
    *a1 = v7;
    a1[1] = v9;
  }
  return result;
}

_QWORD *Calendar.locale.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  _QWORD *result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = v1[1];
  ObjectType = swift_getObjectType();
  result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 32))(&v14, ObjectType, v4);
  if (v2)
  {
    v12 = v2;
    v13 = v3;
    if ((_QWORD)v14)
    {
      v11 = v14;
      swift_unknownObjectRetain_n();
      v7 = specialized static Locale.== infix(_:_:)((uint64_t)&v12, (uint64_t)&v11);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if ((v7 & 1) != 0)
        return (_QWORD *)swift_unknownObjectRelease();
      goto LABEL_9;
    }
    swift_unknownObjectRetain();
  }
  else if (!(_QWORD)v14)
  {
    return result;
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
LABEL_9:
  *(_QWORD *)&v14 = v2;
  *((_QWORD *)&v14 + 1) = v3;
  v12 = 0;
  v13 = 0;
  v8 = (*(uint64_t (**)(__int128 *, uint64_t *, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v4 + 112))(&v14, &v12, 0, 1, 0, 1, ObjectType, v4);
  v10 = v9;
  swift_unknownObjectRelease();
  result = (_QWORD *)swift_unknownObjectRelease();
  *v1 = v8;
  v1[1] = v10;
  return result;
}

void partial apply for closure #1 in _NSSwiftCalendar.timeZone.setter(uint64_t a1)
{
  uint64_t v1;

  closure #1 in _NSSwiftCalendar.timeZone.setter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void closure #1 in _NSSwiftCalendar.timeZone.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    v4 = a2;
LABEL_7:
    v7 = v4;
    v8 = a3;
    swift_unknownObjectRetain();
    Calendar.timeZone.setter(&v7);
    return;
  }
  if (one-time initialization token for cache != -1)
    swift_once();
  v5 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v6 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in TimeZoneCache.default.getter(v5, &v7);
  if (!v3)
  {
    os_unfair_lock_unlock(v6);
    swift_release_n();
    v4 = v7;
    a3 = v8;
    goto LABEL_7;
  }
  os_unfair_lock_unlock(v6);
  __break(1u);
}

uint64_t Calendar.timeZone.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a1[1];
  v13 = *a1;
  v14 = v3;
  v4 = v1[1];
  ObjectType = swift_getObjectType();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 48))(&v12, ObjectType, v4);
  v11 = v12;
  v6 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v13, (uint64_t)&v11);
  swift_unknownObjectRelease();
  if ((v6 & 1) != 0)
    return swift_unknownObjectRelease();
  v13 = 0;
  v14 = 0;
  *(_QWORD *)&v12 = v2;
  *((_QWORD *)&v12 + 1) = v3;
  v8 = (*(uint64_t (**)(uint64_t *, __int128 *, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v4 + 112))(&v13, &v12, 0, 1, 0, 1, ObjectType, v4);
  v10 = v9;
  swift_unknownObjectRelease();
  result = swift_unknownObjectRelease();
  *v1 = v8;
  v1[1] = v10;
  return result;
}

uint64_t protocol witness for _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:) in conformance _CalendarICU()
{
  return _CalendarICU.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)();
}

void updateDateTemplate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSDateFormatter *v6;
  void *v7;
  uint64_t v8;
  NSString *v9;
  NSDateFormatter *v10;

  v6 = objc_alloc_init(NSDateFormatter);
  v7 = *(void **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = v6;
  if (!v7)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v6 = v10;
  }
  -[NSDateFormatter setLocale:](v6, "setLocale:", v7);
  if (!v8)
    v8 = objc_msgSend(v7, "objectForKey:", *MEMORY[0x1E0C99790]);
  -[NSDateFormatter setCalendar:](v10, "setCalendar:", v8);
  -[NSDateFormatter setDateStyle:](v10, "setDateStyle:", a2);
  -[NSDateFormatter setTimeStyle:](v10, "setTimeStyle:", a3);
  v9 = -[NSDateFormatter dateFormat](v10, "dateFormat");

  *(_QWORD *)(a1 + 40) = v9;
}

uint64_t _NSSwiftCalendar.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v21, &demangling cache variable for type metadata for Any?);
  if (v22)
  {
    type metadata accessor for _NSSwiftCalendar();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v3 = (void *)v20;
      v4 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
      v17 = *(_OWORD *)(v4 + 16);
      swift_unknownObjectRetain();
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
      v21 = v17;
      v5 = *(_QWORD *)(v20 + OBJC_IVAR____NSSwiftCalendar__lock);
      os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
      v18 = *(_OWORD *)(v5 + 16);
      swift_unknownObjectRetain();
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
      v20 = v18;
      v6 = specialized static Calendar.== infix(_:_:)((uint64_t)&v21, (uint64_t)&v20);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      return v6 & 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v21);
  }
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v21, &demangling cache variable for type metadata for Any?);
  if (!v22)
  {
    outlined destroy of Any?((uint64_t)&v21);
    goto LABEL_10;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSCalendar);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    v6 = 0;
    return v6 & 1;
  }
  v7 = (void *)v20;
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 32));
  v19 = *(_OWORD *)(v8 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 32));
  v21 = v19;
  type metadata accessor for _NSSwiftCalendar();
  v9 = swift_dynamicCastClass();
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + OBJC_IVAR____NSSwiftCalendar__lock);
    v11 = (os_unfair_lock_s *)(v10 + 32);
    v12 = (id)v20;
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 32));
    v13 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock(v11);

  }
  else
  {
    type metadata accessor for _CalendarBridged();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v20;
    v14 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged, (uint64_t (*)(uint64_t))type metadata accessor for _CalendarBridged, (uint64_t)&protocol conformance descriptor for _CalendarBridged);
    v15 = v7;
  }
  *(_QWORD *)&v20 = v13;
  *((_QWORD *)&v20 + 1) = v14;
  v6 = specialized static Calendar.== infix(_:_:)((uint64_t)&v21, (uint64_t)&v20);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v6 & 1;
}

uint64_t Calendar.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(ObjectType, v1);
}

uint64_t specialized static Calendar.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  void (*v12)(__int128 *__return_ptr, uint64_t, uint64_t);
  void (*v13)(__int128 *__return_ptr, uint64_t, uint64_t);
  void (*v14)(__int128 *__return_ptr, uint64_t, uint64_t);
  void (*v15)(__int128 *__return_ptr, uint64_t, uint64_t);
  char v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  char v43;
  char v44;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  ObjectType = swift_getObjectType();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96);
  if ((v5(ObjectType, v2) & 1) != 0
    || (v6 = swift_getObjectType(),
        v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96),
        swift_unknownObjectRetain(),
        v8 = v7(v6, v3),
        swift_unknownObjectRelease(),
        (v8 & 1) != 0))
  {
    v9 = v5(ObjectType, v2);
    v10 = swift_getObjectType();
    v11 = v9 ^ (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 96))(v10, v3) ^ 1;
    return v11 & 1;
  }
  v12 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 24);
  swift_unknownObjectRetain();
  v12(&v49, ObjectType, v2);
  swift_unknownObjectRelease();
  LODWORD(v12) = v49;
  v13 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  v13(&v48, v6, v3);
  swift_unknownObjectRelease();
  if ((_DWORD)v12 != v48)
    goto LABEL_17;
  v14 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  v14(&v49, ObjectType, v2);
  swift_unknownObjectRelease();
  v48 = v49;
  v15 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  v15(&v47, v6, v3);
  swift_unknownObjectRelease();
  v46 = v47;
  v16 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v48, (uint64_t)&v46);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v16 & 1) == 0)
    goto LABEL_17;
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 56);
  swift_unknownObjectRetain();
  v18 = v17(ObjectType, v2);
  swift_unknownObjectRelease();
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  v20 = v19(v6, v3);
  swift_unknownObjectRelease();
  if (v18 != v20)
    goto LABEL_17;
  v21 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 72);
  swift_unknownObjectRetain();
  v22 = v21(ObjectType, v2);
  swift_unknownObjectRelease();
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 72);
  swift_unknownObjectRetain();
  v24 = v23(v6, v3);
  swift_unknownObjectRelease();
  if (v22 != v24)
    goto LABEL_17;
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
  v27 = v26;
  if (v25 == (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v6, v3) && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = 0;
    if ((v29 & 1) == 0)
      return v11 & 1;
  }
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  v32 = v31;
  v33 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 64);
  swift_unknownObjectRetain();
  v34 = v33(v6, v3);
  v36 = v35;
  swift_unknownObjectRelease();
  if ((v32 & 1) == 0)
  {
    v11 = 0;
    if ((v36 & 1) != 0 || v30 != v34)
      return v11 & 1;
    goto LABEL_19;
  }
  if ((v36 & 1) == 0)
  {
LABEL_17:
    v11 = 0;
    return v11 & 1;
  }
LABEL_19:
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 80))(ObjectType, v2);
  v40 = v39;
  v41 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 80);
  swift_unknownObjectRetain();
  v42 = v41(v6, v3);
  v44 = v43;
  swift_unknownObjectRelease();
  if ((v40 & 1) != 0)
    v11 = v44 & 1;
  else
    v11 = (v44 & 1) == 0 && v38 == v42;
  return v11 & 1;
}

uint64_t specialized _NSSwiftCalendar.calendarIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftCalendar__lock);
  v2 = (os_unfair_lock_s *)(v1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  v3 = *(_QWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v2);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 24))(&v6, ObjectType, v3);
  swift_unknownObjectRelease();
  return specialized static Calendar._toNSCalendarIdentifier(_:)((char *)&v6);
}

void protocol witness for _CalendarProtocol.identifier.getter in conformance _CalendarICU(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

uint64_t specialized static Calendar._toNSCalendarIdentifier(_:)(char *a1)
{
  return **((_QWORD **)&unk_1E0F43768 + *a1);
}

uint64_t specialized static TimeZone.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, _QWORD *);
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *);
  char v8;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD *);
  char v12;
  uint64_t (*v13)(uint64_t, _QWORD *);
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD *);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t (*v30)(uint64_t, _QWORD *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, _QWORD *);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a2 + 8);
  ObjectType = swift_getObjectType();
  v5 = (uint64_t (*)(uint64_t, _QWORD *))v2[13];
  if ((v5(ObjectType, v2) & 1) != 0)
  {
    v6 = swift_getObjectType();
    v7 = (uint64_t (*)(uint64_t, _QWORD *))v3[13];
    swift_unknownObjectRetain();
    v8 = v7(v6, v3);
    swift_unknownObjectRelease();
    if ((v8 & 1) != 0)
      return 1;
  }
  if ((v5(ObjectType, v2) & 1) != 0)
    return 0;
  v10 = swift_getObjectType();
  v11 = (uint64_t (*)(uint64_t, _QWORD *))v3[13];
  swift_unknownObjectRetain();
  v12 = v11(v10, v3);
  swift_unknownObjectRelease();
  if ((v12 & 1) != 0)
    return 0;
  v13 = (uint64_t (*)(uint64_t, _QWORD *))v2[12];
  swift_unknownObjectRetain();
  v14 = v13(ObjectType, v2);
  v16 = v15;
  swift_unknownObjectRelease();
  if (v16 >> 60 == 15)
    goto LABEL_10;
  v17 = (uint64_t (*)(uint64_t, _QWORD *))v3[12];
  swift_unknownObjectRetain();
  v18 = v17(v10, v3);
  v20 = v19;
  swift_unknownObjectRelease();
  if (v20 >> 60 == 15)
  {
    outlined consume of Data?(v14, v16);
LABEL_10:
    v21 = (uint64_t (*)(uint64_t, _QWORD *))v2[4];
    swift_unknownObjectRetain();
    v22 = v21(ObjectType, v2);
    v24 = v23;
    swift_unknownObjectRelease();
    v25 = (uint64_t (*)(uint64_t, _QWORD *))v3[4];
    swift_unknownObjectRetain();
    v26 = v25(v10, v3);
    v28 = v27;
    swift_unknownObjectRelease();
    if (v22 == v26 && v24 == v28)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v29 & 1;
  }
  v41 = v18;
  v42 = v14;
  v30 = (uint64_t (*)(uint64_t, _QWORD *))v2[4];
  swift_unknownObjectRetain();
  v31 = v30(ObjectType, v2);
  v33 = v32;
  swift_unknownObjectRelease();
  v34 = (uint64_t (*)(uint64_t, _QWORD *))v3[4];
  swift_unknownObjectRetain();
  v35 = v34(v10, v3);
  v37 = v36;
  swift_unknownObjectRelease();
  if (v31 == v35 && v33 == v37)
  {
    swift_bridgeObjectRelease_n();
    v38 = v42;
LABEL_18:
    specialized static Data.== infix(_:_:)(v38, v16);
    v29 = v40;
    outlined consume of Data?(v41, v20);
    outlined consume of Data?(v38, v16);
    return v29 & 1;
  }
  v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = v42;
  if ((v39 & 1) != 0)
    goto LABEL_18;
  outlined consume of Data?(v41, v20);
  outlined consume of Data?(v42, v16);
  return 0;
}

uint64_t getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
{
  return 0;
}

uint64_t protocol witness for _TimeZoneProtocol.identifier.getter in conformance _TimeZoneICU()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for _CalendarProtocol.timeZone.getter in conformance _CalendarICU@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 40);
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for _TimeZoneProtocol.data.getter in conformance _TimeZoneICU()
{
  return 0;
}

uint64_t protocol witness for _CalendarProtocol.minimumDaysInFirstWeek.getter in conformance _CalendarICU()
{
  return _CalendarICU.firstWeekday.getter((void (*)(uint64_t *__return_ptr))partial apply for closure #1 in _CalendarICU.minimumDaysInFirstWeek.getter);
}

uint64_t protocol witness for _CalendarProtocol.firstWeekday.getter in conformance _CalendarICU()
{
  return _CalendarICU.firstWeekday.getter((void (*)(uint64_t *__return_ptr))partial apply for closure #1 in _CalendarICU.firstWeekday.getter);
}

void partial apply for closure #1 in _CalendarICU.firstWeekday.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t Attribute;

  if (*(_BYTE *)(v1 + 64) == 1)
    Attribute = (int)ucal_getAttribute();
  else
    Attribute = *(_QWORD *)(v1 + 56);
  *a1 = Attribute;
}

void partial apply for closure #1 in _CalendarICU.minimumDaysInFirstWeek.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t Attribute;

  if (*(_BYTE *)(v1 + 80) == 1)
    Attribute = (int)ucal_getAttribute();
  else
    Attribute = *(_QWORD *)(v1 + 72);
  *a1 = Attribute;
}

uint64_t protocol witness for _CalendarProtocol.preferredFirstWeekday.getter in conformance _CalendarICU()
{
  return _CalendarICU.preferredFirstWeekday.getter();
}

uint64_t protocol witness for _CalendarProtocol.preferredMinimumDaysInFirstweek.getter in conformance _CalendarICU()
{
  return _CalendarICU.preferredMinimumDaysInFirstweek.getter();
}

uint64_t protocol witness for _CalendarProtocol.localeIdentifier.getter in conformance _CalendarICU()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  if (!*(_QWORD *)(v0 + 104))
    return 0;
  v1 = *(_QWORD *)(v0 + 112);
  ObjectType = swift_getObjectType();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  swift_unknownObjectRetain();
  v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t _CalendarICU.preferredMinimumDaysInFirstweek.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD v10[18];
  _BYTE v11[144];
  _BYTE v12[56];
  uint64_t v13;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 104);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 112);
    ObjectType = swift_getObjectType();
    v5 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v5(v10, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v10, (uint64_t)v11, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v12, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v12) == 1)
      return 0;
    v6 = v13;
    swift_bridgeObjectRetain();
    outlined release of LocalePreferences?((uint64_t)v11);
    if (!v6)
    {
      return 0;
    }
    else
    {
      if (*(_QWORD *)(v6 + 16)
        && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(v1 + 24)), (v8 & 1) != 0))
      {
        v2 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
      }
      else
      {
        v2 = 0;
      }
      swift_bridgeObjectRelease();
    }
  }
  return v2;
}

uint64_t _CalendarICU.preferredFirstWeekday.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD v10[18];
  _BYTE v11[144];
  _BYTE v12[48];
  uint64_t v13;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 104);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 112);
    ObjectType = swift_getObjectType();
    v5 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v5(v10, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v10, (uint64_t)v11, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v12, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v12) == 1)
      return 0;
    v6 = v13;
    swift_bridgeObjectRetain();
    outlined release of LocalePreferences?((uint64_t)v11);
    if (!v6)
    {
      return 0;
    }
    else
    {
      if (*(_QWORD *)(v6 + 16)
        && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(v1 + 24)), (v8 & 1) != 0))
      {
        v2 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
      }
      else
      {
        v2 = 0;
      }
      swift_bridgeObjectRelease();
    }
  }
  return v2;
}

uint64_t default argument 1 of _typeName(_:qualified:)()
{
  return 1;
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

void JSONEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;

  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 48);
  v6 = *(_QWORD *)(v3 + 64);
  v7 = *(_QWORD *)(v3 + 88);
  v23 = *(void **)(v3 + 24);
  v24 = *(_QWORD *)(v3 + 80);
  v8 = *(_QWORD *)(v3 + 96);
  v22 = *(_QWORD *)(v3 + 56);
  v25 = *(_QWORD *)(v3 + 104);
  v26 = *(_QWORD *)(v3 + 72);
  v9 = *(_QWORD *)(v3 + 112);
  v27 = *(_QWORD *)(v3 + 120);
  v28 = *(_QWORD *)(v3 + 16);
  v33 = *(_QWORD *)(v3 + 128);
  v10 = *(_BYTE *)(v3 + 40);
  type metadata accessor for __JSONEncoder();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 32) = v23;
  *(_QWORD *)(v11 + 40) = v4;
  *(_BYTE *)(v11 + 48) = v10;
  *(_QWORD *)(v11 + 56) = v5;
  *(_QWORD *)(v11 + 64) = v22;
  *(_QWORD *)(v11 + 72) = v6;
  *(_QWORD *)(v11 + 80) = v26;
  *(_QWORD *)(v11 + 88) = v24;
  *(_QWORD *)(v11 + 96) = v7;
  *(_QWORD *)(v11 + 104) = v8;
  *(_QWORD *)(v11 + 112) = v25;
  *(_QWORD *)(v11 + 120) = v9;
  *(_QWORD *)(v11 + 128) = v27;
  v12 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v11 + 136) = v33;
  *(_QWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 24) = v28;
  *(_OWORD *)(v11 + 144) = xmmword_182068780;
  outlined copy of JSONEncoder.DateEncodingStrategy(v23, v4, v10);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v5);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v6, v26);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v9);
  swift_bridgeObjectRetain();
  v13 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(a1, 0x8000000000000000, 0, 0, 0, 255, a2, a3);
  if (v30)
    goto LABEL_2;
  v14 = v13;
  if (!v13)
  {
    v16 = type metadata accessor for EncodingError();
    swift_allocError();
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v18[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v34 = 0x6576656C2D706F54;
    v35 = 0xEA0000000000206CLL;
    v20._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._object = (void *)0x80000001823065E0;
    v21._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v21);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0DEC4B0], v16);
    swift_willThrow();
LABEL_2:
    swift_release();
    return;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 96))(&v34);
  v15 = v34;
  v34 = 0;
  LOBYTE(v35) = v15 & 1;
  BYTE1(v35) = (v15 & 2) != 0;
  BYTE2(v35) = (v15 & 8) != 0;
  v36 = xmmword_18206AAC0;
  JSONWriter.serializeJSON(_:depth:)(v14);
  swift_release();
  swift_release();
}

uint64_t JSONEncoder.outputFormatting.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

_QWORD *protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(int64_t a1, uint64_t a2, double a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

_QWORD *_JSONKeyedEncodingContainer.encode(_:forKey:)(int64_t a1, uint64_t a2, double a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(char *, int64_t, uint64_t, __n128);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *, int64_t, uint64_t);
  unint64_t v22;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t *v64;
  int64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68[5];
  __int128 v69[3];

  v7 = *(_QWORD *)(a2 + 16);
  v66 = (_QWORD *)type metadata accessor for Optional();
  v8 = *(v66 - 1);
  v9 = MEMORY[0x1E0C80A78](v66);
  v11 = (uint64_t)&v63 - v10;
  v64 = v3;
  v65 = a1;
  v12 = *v3;
  v13 = *(_QWORD *)(*v3 + 144);
  v14 = *(_QWORD *)(v7 - 8);
  v15 = *(void (**)(char *, int64_t, uint64_t, __n128))(v14 + 16);
  v15((char *)&v63 - v10, a1, v7, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v7);
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((__int128 *)(v12 + 72), v69);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = v67;
  v18 = specialized static JSONReference.number<A, B>(from:with:for:_:)(v69, v13, v11, v7, v16, a3);
  if (v17)
  {
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
    (*(void (**)(uint64_t, _QWORD *))(v8 + 8))(v11, v66);
    return (_QWORD *)swift_release();
  }
  v67 = v18;
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  (*(void (**)(uint64_t, _QWORD *))(v8 + 8))(v11, v66);
  swift_release();
  v20 = *v64;
  v19 = v64[1];
  v21 = (void (*)(uint64_t *, int64_t, uint64_t))v15;
  v22 = v64[2];
  v68[3] = v7;
  v68[4] = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v68);
  v21(boxed_opaque_existential_1, v65, v7);
  v24 = _JSONKeyedEncodingContainer._converted(_:)(v68, v20, v19, v22);
  v26 = v25;
  result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  if (*(_BYTE *)(v19 + 32) != 4)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v28 = *(_QWORD *)(v19 + 16);
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  *(_BYTE *)(v19 + 32) = 7;
  swift_bridgeObjectRetain();
  v29 = v67;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v68[0] = v28;
  v31 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v26);
  v33 = *(_QWORD *)(v28 + 16);
  v34 = (v32 & 1) == 0;
  v35 = __OFADD__(v33, v34);
  v36 = v33 + v34;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v11) = v32;
    if (*(_QWORD *)(v28 + 24) < v36)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
      v37 = v68[0];
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v26);
      if ((v11 & 1) == (v38 & 1))
        goto LABEL_10;
      v31 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v37 = v28;
LABEL_10:
      if ((v11 & 1) != 0)
      {
LABEL_11:
        v39 = *(_QWORD *)(v37 + 56);
        v40 = 8 * v31;
        swift_release();
        *(_QWORD *)(v39 + v40) = v67;
LABEL_49:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v60 = *(_QWORD *)(v19 + 16);
        v61 = *(_QWORD *)(v19 + 24);
        *(_QWORD *)(v19 + 16) = v37;
        *(_QWORD *)(v19 + 24) = 0;
        v62 = *(_BYTE *)(v19 + 32);
        *(_BYTE *)(v19 + 32) = 4;
        outlined consume of JSONReference.Backing(v60, v61, v62);
        swift_bridgeObjectRelease();
        return (_QWORD *)swift_release();
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v31, v24, v26, v29, v37);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
  }
  v64 = (uint64_t *)v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v41 = static _DictionaryStorage.copy(original:)();
  v37 = v41;
  v42 = *(_QWORD *)(v28 + 16);
  if (!v42)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    v31 = (unint64_t)v64;
    if ((v11 & 1) != 0)
      goto LABEL_11;
    goto LABEL_48;
  }
  result = (_QWORD *)(v41 + 64);
  v43 = 1 << *(_BYTE *)(v37 + 32);
  v66 = (_QWORD *)(v28 + 64);
  v44 = (unint64_t)(v43 + 63) >> 6;
  if (v37 != v28 || result >= &v66[v44])
  {
    result = memmove(result, v66, 8 * v44);
    v42 = *(_QWORD *)(v28 + 16);
  }
  v45 = 0;
  *(_QWORD *)(v37 + 16) = v42;
  v46 = 1 << *(_BYTE *)(v28 + 32);
  v47 = -1;
  if (v46 < 64)
    v47 = ~(-1 << v46);
  v48 = v47 & *(_QWORD *)(v28 + 64);
  v65 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    if (v48)
    {
      v49 = __clz(__rbit64(v48));
      v48 &= v48 - 1;
      v50 = v49 | (v45 << 6);
      goto LABEL_21;
    }
    v57 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    v29 = v67;
    if (v57 >= v65)
      goto LABEL_47;
    v58 = v66[v57];
    ++v45;
    if (!v58)
    {
      v45 = v57 + 1;
      if (v57 + 1 >= v65)
        goto LABEL_47;
      v58 = v66[v45];
      if (!v58)
      {
        v45 = v57 + 2;
        if (v57 + 2 >= v65)
          goto LABEL_47;
        v58 = v66[v45];
        if (!v58)
        {
          v45 = v57 + 3;
          if (v57 + 3 >= v65)
            goto LABEL_47;
          v58 = v66[v45];
          if (!v58)
          {
            v45 = v57 + 4;
            if (v57 + 4 >= v65)
              goto LABEL_47;
            v58 = v66[v45];
            if (!v58)
            {
              v45 = v57 + 5;
              if (v57 + 5 >= v65)
                goto LABEL_47;
              v58 = v66[v45];
              if (!v58)
              {
                v45 = v57 + 6;
                if (v57 + 6 >= v65)
                  goto LABEL_47;
                v58 = v66[v45];
                if (!v58)
                {
                  v45 = v57 + 7;
                  if (v57 + 7 >= v65)
                    goto LABEL_47;
                  v58 = v66[v45];
                  if (!v58)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    v48 = (v58 - 1) & v58;
    v50 = __clz(__rbit64(v58)) + (v45 << 6);
LABEL_21:
    v51 = 16 * v50;
    v52 = (_QWORD *)(*(_QWORD *)(v28 + 48) + 16 * v50);
    v53 = v52[1];
    v54 = 8 * v50;
    v55 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + v54);
    v56 = (_QWORD *)(*(_QWORD *)(v37 + 48) + v51);
    *v56 = *v52;
    v56[1] = v53;
    *(_QWORD *)(*(_QWORD *)(v37 + 56) + v54) = v55;
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_retain();
  }
  v59 = v57 + 8;
  if (v59 >= v65)
    goto LABEL_47;
  v58 = v66[v59];
  if (v58)
  {
    v45 = v59;
    goto LABEL_46;
  }
  while (1)
  {
    v45 = v59 + 1;
    if (__OFADD__(v59, 1))
      break;
    v29 = v67;
    if (v45 >= v65)
      goto LABEL_47;
    v58 = v66[v45];
    ++v59;
    if (v58)
      goto LABEL_46;
  }
LABEL_53:
  __break(1u);
  return result;
}

_QWORD *outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

_OWORD *outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  char v4;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = v1[1];
      if ((v2 & 0x2000000000000000) != 0)
        v3 = HIBYTE(v2) & 0xF;
      else
        v3 = *v1 & 0xFFFFFFFFFFFFLL;
      result = String.index(_:offsetBy:limitedBy:)();
      if ((v4 & 1) != 0)
        goto LABEL_12;
      if (4 * v3 >= result >> 14)
        return String.removeSubrange(_:)();
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
      v3 = v2 >= result;
      result = v2 - result;
      if (v3)
        return (unint64_t)specialized Array.replaceSubrange<A>(_:with:)(result, v2);
    }
    __break(1u);
  }
  return result;
}

uint64_t _JSONUnkeyedEncodingContainer.encode<A>(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = v4;
  v6 = v3;
  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v3;
  result = (*(uint64_t (**)(char *, __n128))(v9 + 16))(v12, v10);
  v15 = *(_QWORD *)(v13 + 144);
  v16 = v6[1];
  v17 = *(_QWORD *)(v16 + 16);
  v18 = *(unsigned __int8 *)(v16 + 32);
  if (v18 == 4)
  {
    v19 = *(_QWORD *)(v17 + 16);
    goto LABEL_6;
  }
  if (v18 != 3)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  if (!((unint64_t)v17 >> 62))
  {
    v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  v27 = *(_QWORD *)(v16 + 24);
  if (v17 >= 0)
    v28 = v17 & 0xFFFFFFFFFFFFFF8;
  else
    v28 = *(_QWORD *)(v16 + 16);
  v31 = v27;
  v32 = v28;
  v30 = v17;
  swift_retain();
  outlined copy of JSONReference.Backing(v17, v27, 3);
  v19 = _CocoaArrayWrapper.endIndex.getter();
  outlined consume of JSONReference.Backing(v30, v31, 3);
LABEL_7:
  v20 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)((uint64_t)v12, v15, v19, 0, 0, 2, a2, a3);
  if (v5)
  {
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  }
  if (!v20)
  {
    type metadata accessor for JSONReference();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v21 + 24) = 0;
    *(_BYTE *)(v21 + 32) = 4;
  }
  swift_release();
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  v22 = v6[1];
  if (*(_BYTE *)(v22 + 32) != 3)
    goto LABEL_20;
  v33 = *(_QWORD *)(v22 + 16);
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_BYTE *)(v22 + 32) = 7;
  v23 = swift_retain();
  MEMORY[0x186DA4AFC](v23);
  if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v24 = *(_QWORD *)(v22 + 16);
  v25 = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v22 + 16) = v33;
  *(_QWORD *)(v22 + 24) = 0;
  v26 = *(_BYTE *)(v22 + 32);
  *(_BYTE *)(v22 + 32) = 3;
  outlined consume of JSONReference.Backing(v24, v25, v26);
  return swift_release();
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __JSONEncoder@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = type metadata accessor for __JSONEncoder();
  a1[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder, (uint64_t)&protocol conformance descriptor for __JSONEncoder);
  *a1 = v3;
  return swift_retain();
}

unint64_t specialized RangeReplaceableCollection<>.popLast()()
{
  _QWORD *v0;
  unint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!(*v0 >> 62))
  {
    if (*(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
    return 0;
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    return 0;
LABEL_3:
  result = specialized Array._customRemoveLast()();
  if (!result)
  {
    if (*v0 >> 62)
    {
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      result = v4 - 1;
      if (!__OFSUB__(v4, 1))
        return specialized Array.remove(at:)(result);
    }
    else
    {
      v2 = *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = v2 - 1;
      if (!__OFSUB__(v2, 1))
        return specialized Array.remove(at:)(result);
    }
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for __JSONEncoder()
{
  return objc_opt_self();
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t protocol witness for _JSONDirectArrayEncodable.nonPrettyJSONRepresentation(options:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Array<A>.nonPrettyJSONRepresentation(options:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t storeEnumTagSinglePayload for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void static MeasurementFormatUnitUsage<>.rainfall.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance URLComponents.CodingKeys()
{
  unsigned __int8 *v0;

  return *v0;
}

id static DateInterval._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v2 = result;
  result = objc_msgSend(result, sel_startDate);
  if (result)
  {
    v4 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    v6 = v5;

    result = objc_msgSend(v2, sel_duration);
    if (v7 >= 0.0)
    {
      *(_QWORD *)a2 = v6;
      *(double *)(a2 + 8) = v7;
      return result;
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance DateInterval(void *a1, uint64_t a2)
{
  id result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  result = objc_msgSend(a1, sel_startDate);
  if (result)
  {
    v5 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    v7 = v6;

    result = objc_msgSend(a1, sel_duration);
    if (v8 >= 0.0)
    {
      *(_QWORD *)a2 = v7;
      *(double *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = 0;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PropertyListDecoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

NSUInteger NSPageSize(void)
{
  return *MEMORY[0x1E0C85AD8];
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(_QWORD *, uint64_t);
  _QWORD v7[4];

  v5 = *(void (**)(_QWORD *, uint64_t))(a1 + 32);
  v7[3] = swift_getObjectType();
  v7[0] = a2;
  swift_unknownObjectRetain();
  v5(v7, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t partial apply for closure #1 in NSRunLoop.schedule(options:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(_QWORD **)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[32];

  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9);
  v11 = &v14[-v10];
  outlined init with copy of Any(v12, (uint64_t)v14);
  result = swift_dynamicCast();
  if (*(_QWORD *)(*a3 + 16) >= a3[1])
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v8, v11, a4);
    _NativeSet._unsafeInsertNew(_:)();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, a4);
  }
  return result;
}

uint64_t closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[32];

  v5 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v11[-v7];
  outlined init with copy of Any(v9, (uint64_t)v11);
  swift_dynamicCast();
  type metadata accessor for Set._Variant();
  Set._Variant.insert(_:)();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, a4);
}

uint64_t partial apply for closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t partial apply for specialized closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1)
{
  return specialized closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(a1);
}

uint64_t specialized closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  _BYTE v4[32];
  unint64_t v5;

  outlined init with copy of Any(a1, (uint64_t)v4);
  swift_dynamicCast();
  specialized Set._Variant.insert(_:)(&v5, v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (unint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  BOOL v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t *v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  void *v95;

  v5 = v4;
  v8 = result;
  v9 = *v4;
  v10 = *(_QWORD *)(*v4 + 16);
  v11 = *(_QWORD *)(*v4 + 24);
  if (v11 > v10 && (a4 & 1) != 0)
  {
    v12 = *v4;
    goto LABEL_116;
  }
  if ((a4 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
    if (v11 > v10)
    {
      v37 = static _SetStorage.copy(original:)();
      v12 = v37;
      if (!*(_QWORD *)(v9 + 16))
        goto LABEL_98;
      result = v37 + 56;
      v38 = v9 + 56;
      v39 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
      if (v12 != v9 || result >= v38 + 8 * v39)
        result = (unint64_t)memmove((void *)result, (const void *)(v9 + 56), 8 * v39);
      v40 = 0;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v9 + 16);
      v41 = 1 << *(_BYTE *)(v9 + 32);
      v42 = -1;
      if (v41 < 64)
        v42 = ~(-1 << v41);
      v43 = v42 & *(_QWORD *)(v9 + 56);
      v44 = (unint64_t)(v41 + 63) >> 6;
      while (1)
      {
        if (v43)
        {
          v45 = __clz(__rbit64(v43));
          v43 &= v43 - 1;
          v46 = v45 | (v40 << 6);
        }
        else
        {
          v51 = v40 + 1;
          if (__OFADD__(v40, 1))
            goto LABEL_121;
          if (v51 >= v44)
            goto LABEL_98;
          v52 = *(_QWORD *)(v38 + 8 * v51);
          ++v40;
          if (!v52)
          {
            v40 = v51 + 1;
            if (v51 + 1 >= v44)
              goto LABEL_98;
            v52 = *(_QWORD *)(v38 + 8 * v40);
            if (!v52)
            {
              v40 = v51 + 2;
              if (v51 + 2 >= v44)
                goto LABEL_98;
              v52 = *(_QWORD *)(v38 + 8 * v40);
              if (!v52)
              {
                v40 = v51 + 3;
                if (v51 + 3 >= v44)
                  goto LABEL_98;
                v52 = *(_QWORD *)(v38 + 8 * v40);
                if (!v52)
                {
                  v53 = v51 + 4;
                  if (v53 >= v44)
                    goto LABEL_98;
                  v52 = *(_QWORD *)(v38 + 8 * v53);
                  if (!v52)
                  {
                    while (1)
                    {
                      v40 = v53 + 1;
                      if (__OFADD__(v53, 1))
                        goto LABEL_126;
                      if (v40 >= v44)
                        break;
                      v52 = *(_QWORD *)(v38 + 8 * v40);
                      ++v53;
                      if (v52)
                        goto LABEL_63;
                    }
LABEL_98:
                    result = swift_release();
                    *v5 = v12;
LABEL_116:
                    *(_QWORD *)(v12 + 8 * (a3 >> 6) + 56) |= 1 << a3;
                    v86 = (unint64_t *)(*(_QWORD *)(v12 + 48) + 16 * a3);
                    *v86 = v8;
                    v86[1] = a2;
                    v87 = *(_QWORD *)(v12 + 16);
                    v88 = __OFADD__(v87, 1);
                    v89 = v87 + 1;
                    if (!v88)
                    {
                      *(_QWORD *)(v12 + 16) = v89;
                      return result;
                    }
LABEL_123:
                    __break(1u);
                    goto LABEL_124;
                  }
                  v40 = v53;
                }
              }
            }
          }
LABEL_63:
          v43 = (v52 - 1) & v52;
          v46 = __clz(__rbit64(v52)) + (v40 << 6);
        }
        v47 = 16 * v46;
        v48 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v47);
        v49 = v48[1];
        v50 = (_QWORD *)(*(_QWORD *)(v12 + 48) + v47);
        *v50 = *v48;
        v50[1] = v49;
        result = swift_bridgeObjectRetain();
      }
    }
    v55 = static _SetStorage.resize(original:capacity:move:)();
    v12 = v55;
    if (*(_QWORD *)(v9 + 16))
    {
      v91 = v8;
      v56 = 1 << *(_BYTE *)(v9 + 32);
      v57 = v9 + 56;
      if (v56 < 64)
        v58 = ~(-1 << v56);
      else
        v58 = -1;
      v59 = v58 & *(_QWORD *)(v9 + 56);
      v93 = a2;
      v95 = (void *)((unint64_t)(v56 + 63) >> 6);
      v60 = v55 + 56;
      result = swift_retain_n();
      v61 = 0;
      while (1)
      {
        if (v59)
        {
          v64 = __clz(__rbit64(v59));
          v59 &= v59 - 1;
          v65 = v64 | (v61 << 6);
        }
        else
        {
          v66 = v61 + 1;
          if (__OFADD__(v61, 1))
            goto LABEL_122;
          if (v66 >= (uint64_t)v95)
            goto LABEL_118;
          v67 = *(_QWORD *)(v57 + 8 * v66);
          ++v61;
          if (!v67)
          {
            v61 = v66 + 1;
            if (v66 + 1 >= (uint64_t)v95)
              goto LABEL_118;
            v67 = *(_QWORD *)(v57 + 8 * v61);
            if (!v67)
            {
              v61 = v66 + 2;
              if (v66 + 2 >= (uint64_t)v95)
                goto LABEL_118;
              v67 = *(_QWORD *)(v57 + 8 * v61);
              if (!v67)
              {
                v68 = v66 + 3;
                if (v68 >= (uint64_t)v95)
                  goto LABEL_118;
                v67 = *(_QWORD *)(v57 + 8 * v68);
                if (!v67)
                {
                  while (1)
                  {
                    v61 = v68 + 1;
                    if (__OFADD__(v68, 1))
                      goto LABEL_125;
                    if (v61 >= (uint64_t)v95)
                      break;
                    v67 = *(_QWORD *)(v57 + 8 * v61);
                    ++v68;
                    if (v67)
                      goto LABEL_88;
                  }
LABEL_118:
                  swift_release_n();
                  v8 = v91;
                  a2 = v93;
                  v5 = v4;
LABEL_102:
                  *v5 = v12;
                  Hasher.init(_seed:)();
                  String.hash(into:)();
                  result = Hasher._finalize()();
                  v79 = -1 << *(_BYTE *)(v12 + 32);
                  a3 = result & ~v79;
                  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
                  {
                    v80 = *(_QWORD *)(v12 + 48);
                    v81 = (_QWORD *)(v80 + 16 * a3);
                    v82 = *v81 == v8 && v81[1] == a2;
                    if (v82 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                    {
LABEL_115:
                      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }
                    else
                    {
                      v83 = ~v79;
                      while (1)
                      {
                        a3 = (a3 + 1) & v83;
                        if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
                          break;
                        v84 = (_QWORD *)(v80 + 16 * a3);
                        if (*v84 != v8 || v84[1] != a2)
                        {
                          result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) == 0)
                            continue;
                        }
                        goto LABEL_115;
                      }
                    }
                  }
                  goto LABEL_116;
                }
                v61 = v68;
              }
            }
          }
LABEL_88:
          v59 = (v67 - 1) & v67;
          v65 = __clz(__rbit64(v67)) + (v61 << 6);
        }
        v69 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v65);
        v70 = *v69;
        v71 = v69[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        result = Hasher._finalize()();
        v72 = -1 << *(_BYTE *)(v12 + 32);
        v73 = result & ~v72;
        v74 = v73 >> 6;
        if (((-1 << v73) & ~*(_QWORD *)(v60 + 8 * (v73 >> 6))) != 0)
        {
          v62 = __clz(__rbit64((-1 << v73) & ~*(_QWORD *)(v60 + 8 * (v73 >> 6)))) | v73 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_72;
        }
        v75 = 0;
        v76 = (unint64_t)(63 - v72) >> 6;
        do
        {
          if (++v74 == v76 && (v75 & 1) != 0)
          {
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
            goto LABEL_123;
          }
          v77 = v74 == v76;
          if (v74 == v76)
            v74 = 0;
          v75 |= v77;
          v78 = *(_QWORD *)(v60 + 8 * v74);
        }
        while (v78 == -1);
        v62 = __clz(__rbit64(~v78)) + (v74 << 6);
LABEL_72:
        *(_QWORD *)(v60 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v62;
        v63 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v62);
        *v63 = v70;
        v63[1] = v71;
        ++*(_QWORD *)(v12 + 16);
      }
    }
LABEL_101:
    swift_release();
    goto LABEL_102;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  v13 = static _SetStorage.resize(original:capacity:move:)();
  v12 = v13;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_101;
  v90 = v8;
  v14 = 1 << *(_BYTE *)(v9 + 32);
  v92 = a2;
  v94 = (_QWORD *)(v9 + 56);
  if (v14 < 64)
    v15 = ~(-1 << v14);
  else
    v15 = -1;
  v16 = v15 & *(_QWORD *)(v9 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  v18 = v13 + 56;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_28;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
      goto LABEL_120;
    if (v24 >= v17)
    {
LABEL_64:
      swift_release();
      v54 = 1 << *(_BYTE *)(v9 + 32);
      v8 = v90;
      a2 = v92;
      if (v54 > 63)
        bzero(v94, ((unint64_t)(v54 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v94 = -1 << v54;
      *(_QWORD *)(v9 + 16) = 0;
      goto LABEL_101;
    }
    v25 = v94[v24];
    ++v19;
    if (!v25)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v17)
        goto LABEL_64;
      v25 = v94[v19];
      if (!v25)
      {
        v19 = v24 + 2;
        if (v24 + 2 >= v17)
          goto LABEL_64;
        v25 = v94[v19];
        if (!v25)
          break;
      }
    }
LABEL_27:
    v16 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_28:
    v27 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v23);
    v28 = *v27;
    v29 = v27[1];
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v12 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v18 + 8 * (v31 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v18 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_119;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v18 + 8 * v32);
      }
      while (v36 == -1);
      v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v20);
    *v21 = v28;
    v21[1] = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  v26 = v24 + 3;
  if (v26 >= v17)
    goto LABEL_64;
  v25 = v94[v26];
  if (v25)
  {
    v19 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v19 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v19 >= v17)
      goto LABEL_64;
    v25 = v94[v19];
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: NSString, value: JSONReference)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: NSString, value: JSONReference));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : AttributedStringKey.Type]>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AttributedStringKey.Type]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(PredicateExpressions.VariableID, String)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PredicateExpressions.VariableID, String));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: Encodable)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 56 * v8)
      memmove(v10 + 4, a4 + 4, 56 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String.LocalizationValue.FormatArgument._AttributeFixup?>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 4;
  v13 = a4 + 4;
  v14 = 3 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v10 + 4, a4 + 4, v14 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument._AttributeFixup?);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 4;
  v14 = a4 + 4;
  v15 = v8 << 6;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= (_QWORD *)((char *)v14 + v15))
      memmove(v10 + 4, a4 + 4, v15);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= (_QWORD *)((char *)v13 + v15) || v13 >= (_QWORD *)((char *)v14 + v15))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: _XMLPlistEncodingFormat.Reference, value: _XMLPlistEncodingFormat.Reference)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 4;
  v13 = a4 + 4;
  v14 = 6 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v10 + 4, a4 + 4, v14 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: _XMLPlistEncodingFormat.Reference, value: _XMLPlistEncodingFormat.Reference));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: JSONReference)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: JSONReference));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String.LocalizationValue.FormatArgument.CodableStorage>);
  v10 = *(_QWORD *)(type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: Substring)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Substring));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (NSLocale)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 496))(ObjectType, v1);
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  Swift::Int v34;
  __int128 *v35;
  Swift::Int v36;
  Swift::Int v37;
  __int128 *v38;
  __int128 v39;
  Swift::Int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  Swift::Int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  Swift::Int v90;
  __int128 v91;
  Swift::Int v92;
  void *v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  void *v104;
  id v105;
  id v106;
  id v107;
  uint64_t v108;
  os_unfair_lock_s *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t ObjectType;
  void *v113;
  id v114;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Swift::Int v127;
  Swift::Int v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  void **__dst;
  char *__dsta;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  Swift::Int v137;
  Swift::Int v138;
  Swift::Int v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v3 = v1;
  v5 = a1[1];
  result = _minimumMergeRunLength(_:)(v5);
  v134 = (char *)v5;
  if (result >= v5)
  {
    if (v5 < 0)
      goto LABEL_159;
    v144 = v1;
    if ((unint64_t)v5 < 2)
      return result;
    v101 = -1;
    v102 = 1;
    v2 = *a1;
    v140 = *a1;
LABEL_113:
    v131 = v2;
    __dsta = (char *)v102;
    v103 = *(_OWORD *)(v140 + 16 * v102);
    v136 = v101;
    while (1)
    {
      v104 = *(void **)v2;
      v105 = (id)v103;
      swift_retain();
      v106 = v104;
      swift_retain();
      v107 = objc_msgSend(v105, sel_length);
      if (one-time initialization token for cache != -1)
        swift_once();
      v108 = static LocaleCache.cache + 16;
      v109 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
      swift_retain_n();
      os_unfair_lock_lock(v109);
      v110 = v144;
      closure #1 in LocaleCache.system.getter(v108, &v142);
      v144 = v110;
      result = (uint64_t)v109;
      if (v110)
        goto LABEL_168;
      os_unfair_lock_unlock(v109);
      swift_release_n();
      v111 = v143;
      ObjectType = swift_getObjectType();
      v113 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v111 + 496))(ObjectType, v111);
      v114 = objc_msgSend(v105, sel_compare_options_range_locale_, v106, 577, 0, v107, v113);
      swift_release();

      swift_release();
      result = swift_unknownObjectRelease();
      if (v114 != (id)-1)
        goto LABEL_112;
      if (!v140)
        break;
      v103 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v2 + 16) = *(_OWORD *)v2;
      *(_OWORD *)v2 = v103;
      v2 -= 16;
      if (__CFADD__(v101++, 1))
      {
LABEL_112:
        v102 = (uint64_t)(__dsta + 1);
        v2 = v131 + 16;
        v101 = v136 - 1;
        if (__dsta + 1 == v134)
          return result;
        goto LABEL_113;
      }
    }
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    os_unfair_lock_unlock((os_unfair_lock_t)result);
    __break(1u);
LABEL_169:
    os_unfair_lock_unlock((os_unfair_lock_t)v2);
    __break(1u);
LABEL_170:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_170;
  v125 = result;
  v121 = a1;
  if (v5 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (void **)(MEMORY[0x1E0DEE9D8] + 32);
    if (v5 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = MEMORY[0x1E0DEE9D8];
      goto LABEL_123;
    }
    v124 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v8 = v7 >> 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: NSString, value: JSONReference));
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = v8;
    v124 = result;
    __dst = (void **)(result + 32);
  }
  v10 = 0;
  v11 = *a1;
  v122 = *a1 - 16;
  v123 = *a1 + 40;
  v12 = MEMORY[0x1E0DEE9D8];
  v135 = *a1;
  do
  {
    v14 = v10 + 1;
    v128 = v10;
    if (v10 + 1 < v5)
    {
      v126 = v12;
      v15 = v3;
      v16 = *(void **)(v11 + 16 * v10);
      v17 = *(id *)(v11 + 16 * v14);
      swift_retain();
      v18 = v16;
      swift_retain();
      v19 = objc_msgSend(v17, sel_length);
      if (one-time initialization token for cache != -1)
        swift_once();
      v20 = static LocaleCache.cache + 16;
      v2 = static LocaleCache.cache + 124;
      swift_retain_n();
      os_unfair_lock_lock((os_unfair_lock_t)v2);
      closure #1 in LocaleCache.system.getter(v20, &v142);
      v144 = v15;
      if (v15)
        goto LABEL_169;
      os_unfair_lock_unlock((os_unfair_lock_t)v2);
      swift_release_n();
      v21 = v143;
      v22 = swift_getObjectType();
      v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 496))(v22, v21);
      v129 = objc_msgSend(v17, sel_compare_options_range_locale_, v18, 577, 0, v19, v23);
      swift_release();

      swift_release();
      result = swift_unknownObjectRelease();
      v10 = v128;
      v14 = v128 + 2;
      v5 = (Swift::Int)v134;
      if (v128 + 2 >= (uint64_t)v134)
      {
        v12 = v126;
      }
      else
      {
        v24 = v123 + 16 * v128;
        while (1)
        {
          v137 = v14;
          v25 = *(void **)(v24 - 24);
          v26 = *(id *)(v24 - 8);
          swift_retain();
          v27 = v25;
          swift_retain();
          v28 = objc_msgSend(v26, sel_length);
          v29 = static LocaleCache.cache + 16;
          v2 = static LocaleCache.cache + 124;
          swift_retain_n();
          os_unfair_lock_lock((os_unfair_lock_t)v2);
          v30 = v144;
          closure #1 in LocaleCache.system.getter(v29, &v142);
          v144 = v30;
          if (v30)
            goto LABEL_169;
          os_unfair_lock_unlock((os_unfair_lock_t)v2);
          swift_release_n();
          v31 = v143;
          v32 = swift_getObjectType();
          v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 496))(v32, v31);
          v33 = objc_msgSend(v26, sel_compare_options_range_locale_, v27, 577, 0, v28, v2);
          swift_release();

          swift_release();
          result = swift_unknownObjectRelease();
          if ((v129 == (id)-1) == (v33 != (id)-1))
            break;
          v14 = v137 + 1;
          v24 += 16;
          if (v134 == (char *)(v137 + 1))
          {
            v5 = (Swift::Int)v134;
            v14 = (Swift::Int)v134;
            v12 = v126;
            goto LABEL_28;
          }
        }
        v5 = (Swift::Int)v134;
        v12 = v126;
        v14 = v137;
LABEL_28:
        v10 = v128;
      }
      v3 = v144;
      v11 = v135;
      if (v129 == (id)-1)
      {
        if (v14 < v10)
          goto LABEL_163;
        if (v10 < v14)
        {
          v34 = v10;
          v35 = (__int128 *)(v122 + 16 * v14);
          v36 = v14;
          v37 = v34;
          v38 = (__int128 *)(v135 + 16 * v34);
          do
          {
            if (v37 != --v36)
            {
              if (!v135)
                goto LABEL_166;
              v39 = *v38;
              *v38 = *v35;
              *v35 = v39;
            }
            ++v37;
            --v35;
            ++v38;
          }
          while (v37 < v36);
          v10 = v128;
        }
      }
    }
    if (v14 >= v5)
      goto LABEL_50;
    if (__OFSUB__(v14, v10))
      goto LABEL_158;
    if (v14 - v10 >= v125)
    {
      v10 = v128;
LABEL_50:
      if (v14 < v10)
        goto LABEL_153;
      goto LABEL_51;
    }
    if (__OFADD__(v128, v125))
      goto LABEL_160;
    if (v128 + v125 >= v5)
      v40 = v5;
    else
      v40 = v128 + v125;
    if (v40 < v128)
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if (v14 == v40)
    {
      if (v14 < v128)
        goto LABEL_153;
    }
    else
    {
      v144 = v3;
      v89 = v122 + 16 * v14;
      v127 = v40;
      do
      {
        v91 = *(_OWORD *)(v11 + 16 * v14);
        v92 = v128;
        v130 = v89;
        v139 = v14;
        while (1)
        {
          v93 = *(void **)v89;
          v94 = (id)v91;
          swift_retain();
          v95 = v93;
          swift_retain();
          v141 = objc_msgSend(v94, sel_length);
          if (one-time initialization token for cache != -1)
            swift_once();
          v96 = static LocaleCache.cache + 16;
          v2 = static LocaleCache.cache + 124;
          swift_retain_n();
          os_unfair_lock_lock((os_unfair_lock_t)v2);
          v97 = v144;
          closure #1 in LocaleCache.system.getter(v96, &v142);
          v144 = v97;
          if (v97)
            goto LABEL_169;
          os_unfair_lock_unlock((os_unfair_lock_t)v2);
          swift_release_n();
          v98 = v143;
          v99 = swift_getObjectType();
          v100 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v98 + 496))(v99, v98);
          v2 = (uint64_t)objc_msgSend(v94, sel_compare_options_range_locale_, v95, 577, 0, v141, v100);
          swift_release();

          swift_release();
          result = swift_unknownObjectRelease();
          if (v2 != -1)
            break;
          v11 = v135;
          v90 = v139;
          if (!v135)
            goto LABEL_164;
          v91 = *(_OWORD *)(v89 + 16);
          *(_OWORD *)(v89 + 16) = *(_OWORD *)v89;
          *(_OWORD *)v89 = v91;
          v89 -= 16;
          if (v139 == ++v92)
            goto LABEL_100;
        }
        v11 = v135;
        v90 = v139;
LABEL_100:
        v14 = v90 + 1;
        v89 = v130 + 16;
      }
      while (v14 != v127);
      v14 = v127;
      v3 = v144;
      if (v127 < v128)
        goto LABEL_153;
    }
LABEL_51:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1, (char *)v12);
      v12 = result;
    }
    v42 = *(_QWORD *)(v12 + 16);
    v41 = *(_QWORD *)(v12 + 24);
    v13 = v42 + 1;
    v11 = v135;
    if (v42 >= v41 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, (char *)v12);
      v11 = v135;
      v12 = result;
    }
    *(_QWORD *)(v12 + 16) = v13;
    v43 = v12 + 32;
    v44 = (Swift::Int *)(v12 + 32 + 16 * v42);
    *v44 = v128;
    v44[1] = v14;
    v138 = v14;
    if (v42)
    {
      v5 = (Swift::Int)v134;
      while (1)
      {
        v45 = v13 - 1;
        if (v13 >= 4)
        {
          v50 = v43 + 16 * v13;
          v51 = *(_QWORD *)(v50 - 64);
          v52 = *(_QWORD *)(v50 - 56);
          v56 = __OFSUB__(v52, v51);
          v53 = v52 - v51;
          if (v56)
            goto LABEL_142;
          v55 = *(_QWORD *)(v50 - 48);
          v54 = *(_QWORD *)(v50 - 40);
          v56 = __OFSUB__(v54, v55);
          v48 = v54 - v55;
          v49 = v56;
          if (v56)
            goto LABEL_143;
          v57 = v13 - 2;
          v58 = (uint64_t *)(v43 + 16 * (v13 - 2));
          v60 = *v58;
          v59 = v58[1];
          v56 = __OFSUB__(v59, v60);
          v61 = v59 - v60;
          if (v56)
            goto LABEL_145;
          v56 = __OFADD__(v48, v61);
          v62 = v48 + v61;
          if (v56)
            goto LABEL_148;
          if (v62 >= v53)
          {
            v80 = (uint64_t *)(v43 + 16 * v45);
            v82 = *v80;
            v81 = v80[1];
            v56 = __OFSUB__(v81, v82);
            v83 = v81 - v82;
            if (v56)
              goto LABEL_152;
            v73 = v48 < v83;
            goto LABEL_88;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v74 = *(_QWORD *)(v12 + 32);
            v75 = *(_QWORD *)(v12 + 40);
            v56 = __OFSUB__(v75, v74);
            v67 = v75 - v74;
            v68 = v56;
            goto LABEL_82;
          }
          v47 = *(_QWORD *)(v12 + 32);
          v46 = *(_QWORD *)(v12 + 40);
          v56 = __OFSUB__(v46, v47);
          v48 = v46 - v47;
          v49 = v56;
        }
        if ((v49 & 1) != 0)
          goto LABEL_144;
        v57 = v13 - 2;
        v63 = (uint64_t *)(v43 + 16 * (v13 - 2));
        v65 = *v63;
        v64 = v63[1];
        v66 = __OFSUB__(v64, v65);
        v67 = v64 - v65;
        v68 = v66;
        if (v66)
          goto LABEL_147;
        v69 = (uint64_t *)(v43 + 16 * v45);
        v71 = *v69;
        v70 = v69[1];
        v56 = __OFSUB__(v70, v71);
        v72 = v70 - v71;
        if (v56)
          goto LABEL_150;
        if (__OFADD__(v67, v72))
          goto LABEL_151;
        if (v67 + v72 >= v48)
        {
          v73 = v48 < v72;
LABEL_88:
          if (v73)
            v45 = v57;
          goto LABEL_90;
        }
LABEL_82:
        if ((v68 & 1) != 0)
          goto LABEL_146;
        v76 = (uint64_t *)(v43 + 16 * v45);
        v78 = *v76;
        v77 = v76[1];
        v56 = __OFSUB__(v77, v78);
        v79 = v77 - v78;
        if (v56)
          goto LABEL_149;
        if (v79 < v67)
          goto LABEL_15;
LABEL_90:
        v84 = v45 - 1;
        if (v45 - 1 >= v13)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
          goto LABEL_161;
        }
        if (!v11)
          goto LABEL_165;
        v85 = (uint64_t *)(v43 + 16 * v84);
        v2 = *v85;
        v86 = (_QWORD *)(v43 + 16 * v45);
        v87 = v86[1];
        result = specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v11 + 16 * *v85), (id *)(v11 + 16 * *v86), v11 + 16 * v87, __dst);
        if (v3)
        {
LABEL_135:
          v144 = v3;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v124 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v87 < v2)
          goto LABEL_139;
        if (v45 > *(_QWORD *)(v12 + 16))
          goto LABEL_140;
        *v85 = v2;
        *(_QWORD *)(v43 + 16 * v84 + 8) = v87;
        v88 = *(_QWORD *)(v12 + 16);
        if (v45 >= v88)
          goto LABEL_141;
        v13 = v88 - 1;
        result = (uint64_t)memmove((void *)(v43 + 16 * v45), v86 + 2, 16 * (v88 - 1 - v45));
        *(_QWORD *)(v12 + 16) = v88 - 1;
        v73 = v88 > 2;
        v5 = (Swift::Int)v134;
        v11 = v135;
        if (!v73)
          goto LABEL_15;
      }
    }
    v13 = 1;
    v5 = (Swift::Int)v134;
LABEL_15:
    v10 = v138;
  }
  while (v138 < v5);
  v9 = v124;
LABEL_123:
  v124 = v9;
  if (v13 >= 2)
  {
    v116 = *v121;
    do
    {
      v117 = v13 - 2;
      if (v13 < 2)
        goto LABEL_154;
      if (!v116)
        goto LABEL_167;
      v118 = *(_QWORD *)(v12 + 32 + 16 * v117);
      v2 = *(_QWORD *)(v12 + 32 + 16 * (v13 - 1) + 8);
      result = specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v116 + 16 * v118), (id *)(v116 + 16 * *(_QWORD *)(v12 + 32 + 16 * (v13 - 1))), v116 + 16 * v2, __dst);
      if (v3)
        goto LABEL_135;
      if (v2 < v118)
        goto LABEL_155;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        v12 = result;
      }
      if (v117 >= *(_QWORD *)(v12 + 16))
        goto LABEL_156;
      v119 = (uint64_t *)(v12 + 32 + 16 * v117);
      *v119 = v118;
      v119[1] = v2;
      v120 = *(_QWORD *)(v12 + 16);
      if (v13 > v120)
        goto LABEL_157;
      result = (uint64_t)memmove((void *)(v12 + 32 + 16 * (v13 - 1)), (const void *)(v12 + 32 + 16 * v13), 16 * (v120 - v13));
      *(_QWORD *)(v12 + 16) = v120 - 1;
      v13 = v120 - 1;
    }
    while (v120 > 2);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v124 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Locale()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 496))(ObjectType, v1);
}

uint64_t protocol witness for _LocaleProtocol.bridgeToNSLocale() in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static LocaleCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  partial apply for closure #1 in LocaleCache.fixedNSLocale(_:)(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

uint64_t partial apply for closure #1 in LocaleCache.fixedNSLocale(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in LocaleCache.fixedNSLocale(_:)(a1, v2, a2);
}

uint64_t closure #1 in LocaleCache.system.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[144];
  _OWORD v9[9];

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = v4;
  }
  else
  {
    type metadata accessor for _LocaleICU();
    v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
    _s10Foundation17LocalePreferencesVSgWOi0_(v9);
    outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v8);
    swift_allocObject();
    v6 = _LocaleICU.init(identifier:prefs:)(0, 0xE000000000000000, (uint64_t)v8);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v5;
    swift_retain();
  }
  *a2 = v6;
  a2[1] = v5;
  return swift_unknownObjectRetain();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

void PropertyListEncoder.encode<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v7;
  void *v8;
  uint64_t inited;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *boxed_opaque_existential_1;
  id v52;
  uint64_t v53;
  unint64_t v54;
  _OWORD v55[2];
  uint64_t v56;

  v7 = *(_QWORD *)(v3 + 16);
  if (v7 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 40) = v10;
    *(_QWORD *)(inited + 48) = 0xD000000000000038;
    *(_QWORD *)(inited + 56) = 0x8000000182306560;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v11 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v53);
    v12 = v53;
    v13 = v54;
    swift_retain();
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
    if ((v15 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v11[(v14 >> 6) + 8] |= 1 << v14;
      v16 = (uint64_t *)(v11[6] + 16 * v14);
      *v16 = v12;
      v16[1] = v13;
      outlined init with take of Any(v55, (_OWORD *)(v11[7] + 32 * v14));
      v17 = v11[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (!v18)
      {
        v11[2] = v19;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v20 = objc_allocWithZone((Class)NSError);
        v21 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v22 = objc_msgSend(v20, sel_initWithDomain_code_userInfo_, v21, 3852, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v23 = objc_msgSend(v22, sel_domain);
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v26 = v25;

        if (v24 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v26 == v27)
          goto LABEL_18;
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v28 & 1) != 0)
        {
LABEL_20:
          swift_willThrow();
          goto LABEL_21;
        }
        __break(1u);
LABEL_12:
        PropertyListEncoder._encodeXML<A>(_:)(a1, a2, a3);
        v8 = v4;
        if (!v4)
          return;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  if (v7 == 100)
    goto LABEL_12;
  if (v7 != 200)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v29 = swift_initStackObject();
    *(_OWORD *)(v29 + 16) = xmmword_18205C850;
    *(_QWORD *)(v29 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
    *(_QWORD *)(v29 + 40) = v30;
    v53 = 0;
    v54 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v31._object = (void *)0x8000000182306500;
    v31._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v31);
    v56 = *(_QWORD *)(v3 + 16);
    type metadata accessor for NSPropertyListFormat(0);
    _print_unlocked<A, B>(_:_:)();
    *(_QWORD *)(v29 + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v29 + 48) = 0;
    *(_QWORD *)(v29 + 56) = 0xE000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v32 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(v29 + 32, (uint64_t)&v53);
    v33 = v53;
    v34 = v54;
    swift_retain();
    v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
    if ((v36 & 1) == 0)
    {
      v32[(v35 >> 6) + 8] |= 1 << v35;
      v37 = (uint64_t *)(v32[6] + 16 * v35);
      *v37 = v33;
      v37[1] = v34;
      outlined init with take of Any(v55, (_OWORD *)(v32[7] + 32 * v35));
      v38 = v32[2];
      v18 = __OFADD__(v38, 1);
      v39 = v38 + 1;
      if (!v18)
      {
        v32[2] = v39;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v40 = objc_allocWithZone((Class)NSError);
        v41 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v22 = objc_msgSend(v40, sel_initWithDomain_code_userInfo_, v41, 3852, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v42 = objc_msgSend(v22, sel_domain);
        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;

        if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v45 == v46)
        {
LABEL_18:
          swift_bridgeObjectRelease_n();
          goto LABEL_20;
        }
        v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v47 & 1) != 0)
          goto LABEL_20;
LABEL_27:
        __break(1u);
        return;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  PropertyListEncoder._encodeBPlist<A>(_:)(a1, a2, a3);
  v8 = v4;
  if (!v4)
    return;
LABEL_13:
  v22 = v8;
LABEL_21:
  v48 = type metadata accessor for EncodingError();
  swift_allocError();
  v50 = v49;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
  v50[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v50);
  (*(void (**)(uint64_t *, unint64_t, unint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  v52 = v22;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v50, *MEMORY[0x1E0DEC4B0], v48);
  swift_willThrow();

}

Swift::Void __swiftcall _NSLocalizedStringResourceSwiftWrapper.encode(with:)(NSCoder with)
{
  uint64_t v1;
  _QWORD *inited;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[7];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (-[objc_class allowsKeyedCoding](with.super.isa, sel_allowsKeyedCoding))
  {
    type metadata accessor for PropertyListEncoder();
    inited = (_QWORD *)swift_initStackObject();
    v3 = MEMORY[0x1E0DEE9E0];
    inited[2] = 200;
    inited[3] = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
    v4 = swift_allocObject();
    *(_DWORD *)(v4 + 16) = 0;
    inited[4] = v4;
    v5 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 64);
    v6 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 96);
    v11[5] = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 80);
    v11[6] = v6;
    v7 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 32);
    v11[3] = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 48);
    v11[4] = v5;
    v8 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 16);
    v11[0] = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped);
    v11[1] = v8;
    v11[2] = v7;
    outlined retain of LocalizedStringResource((uint64_t)v11);
    specialized PropertyListEncoder._encodeBPlist<A>(_:)(v11);
    v10 = v9;
    outlined release of LocalizedStringResource((uint64_t)v11);
    __asm { BR              X10 }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *specialized String.init(localized:options:)(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  _OWORD v13[3];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[32];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;
  __int128 v25;

  v2 = a1[5];
  *(_OWORD *)&v18[16] = a1[4];
  v19 = v2;
  v20 = a1[6];
  v3 = a1[1];
  v15 = *a1;
  v16 = v3;
  v4 = a1[3];
  v17 = a1[2];
  *(_OWORD *)v18 = v4;
  v5 = *a2;
  v6 = a2[1];
  *(_OWORD *)((char *)v22 + 9) = *(__int128 *)((char *)a2 + 25);
  v21 = v5;
  v22[0] = v6;
  outlined retain of String.LocalizationOptions((uint64_t)&v21);
  outlined retain of LocalizedStringResource((uint64_t)&v15);
  v7 = specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((uint64_t)&v15, (uint64_t)&v21, (uint64_t)&v15);
  v9 = v8;
  outlined release of LocalizedStringResource((uint64_t)&v15);
  outlined release of String.LocalizationOptions((uint64_t)&v21);
  if (v9)
  {
    outlined release of String.LocalizationOptions((uint64_t)&v21);
    outlined release of LocalizedStringResource((uint64_t)&v15);
  }
  else
  {
    v23 = v16;
    v24 = v17;
    v13[2] = v16;
    v14 = v17;
    v12 = v21;
    v13[0] = v22[0];
    *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)v22 + 9);
    v25 = *(_OWORD *)&v18[8];
    v11 = *(_OWORD *)&v18[8];
    outlined retain of String.LocalizationValue((uint64_t)&v23);
    outlined retain of Locale((uint64_t)&v25);
    v7 = String.LocalizationValue.resolve(key:options:table:bundle:locale:performLocalization:)(v7, 0, &v12, (uint64_t)v7, 0, 0, (uint64_t *)&v11, 0);
    outlined release of LocalizedStringResource((uint64_t)&v15);
    outlined release of Locale((uint64_t)&v25);
    outlined release of String.LocalizationValue((uint64_t)&v23);
    outlined release of String.LocalizationOptions((uint64_t)&v21);
  }
  return v7;
}

uint64_t outlined release of LocalizedStringResource(uint64_t a1)
{

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of String.LocalizationOptions(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of LocalizedStringResource(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v3 = v2;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return objc_opt_self();
}

uint64_t PropertyListEncoder.outputFormat.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + 32);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  v2 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

void String.LocalizationOptions.init(nsOptions:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  id v6;
  char v7;

  v4 = objc_msgSend(a1, sel_pluralizationNumber);
  v5 = v4;
  if (v4)
  {
    if (objc_msgSend(v4, sel_integerValue) == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v6 = 0;
      v7 = 1;
    }
    else
    {
      v6 = objc_msgSend(v5, sel_integerValue);
      v7 = 0;
    }

  }
  else
  {
    v6 = 0;
    v7 = 0;
  }

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 17) = v5 == 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 0;
}

uint64_t protocol witness for _LocaleProtocol.bridgeToNSLocale() in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static LocaleCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.autoupdatingCurrentNSLocale()(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

id @objc static NSLocale._autoupdatingCurrent.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  id v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static LocaleCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.autoupdatingCurrentNSLocale()(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

id closure #1 in LocaleCache.autoupdatingCurrentNSLocale()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;
  objc_super v14;

  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    v4 = *(id *)(a1 + 56);
  }
  else
  {
    if (*(_QWORD *)(a1 + 88))
    {
      v6 = *(_QWORD *)(a1 + 88);
    }
    else
    {
      type metadata accessor for _LocaleAutoupdating();
      v6 = swift_allocObject();
      *(_QWORD *)(a1 + 88) = v6;
      swift_retain();
    }
    v7 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
    v8 = (objc_class *)type metadata accessor for _NSSwiftLocale();
    v9 = (char *)objc_allocWithZone(v8);
    v10 = (uint64_t *)&v9[OBJC_IVAR____NSSwiftLocale_locale];
    *v10 = v6;
    v10[1] = v7;
    v11 = String._bridgeToObjectiveCImpl()();
    v14.receiver = v9;
    v14.super_class = v8;
    swift_retain();
    v12 = objc_msgSendSuper2(&v14, sel_initWithLocaleIdentifier_, v11);
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 56) = v12;
    v4 = v12;
    v3 = 0;
  }
  *a2 = v4;
  return v3;
}

id String.LocalizationOptions._nsOptions.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  id result;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 17);
  result = objc_msgSend(objc_allocWithZone((Class)_NSStringFormattingOptions), sel_init);
  if (result)
  {
    v5 = result;
    if ((v3 & 1) != 0)
    {
      objc_msgSend(result, sel_setPluralizationNumber_, 0);
    }
    else
    {
      v6 = objc_allocWithZone((Class)NSNumber);
      if ((v2 & 1) != 0)
        v7 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v7 = v1;
      v8 = objc_msgSend(v6, sel_initWithInteger_, v7);
      objc_msgSend(v5, sel_setPluralizationNumber_, v8);

    }
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance JSONDecoderImpl.UnkeyedContainer(ValueMetadata *a1, uint64_t a2)
{
  JSONDecoderImpl.UnkeyedContainer.decode<A>(_:)(a1, a2);
}

void JSONDecoderImpl.UnkeyedContainer.decode<A>(_:)(ValueMetadata *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  ValueMetadata *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  ValueMetadata **v18;
  ValueMetadata **v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  ValueMetadata *v23;
  unint64_t v24;
  ValueMetadata *v25;

  v5 = a1;
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(unsigned __int8 *)(v2 + 40);
  if (v7 < 0xFE)
  {
    v20 = *(_QWORD *)(v2 + 32);
  }
  else
  {
    v25 = a1;
    v8 = *(_QWORD *)(v2 + 8);
    v9 = JSONMap.loadValue(at:)(v8);
    if (v11 > 0xFDu)
    {
      if (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder) == a2)
        swift_bridgeObjectRelease();
      v12 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v2 + 72));
      v13 = *(_QWORD *)(v2 + 64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      v15 = v12[2];
      v14 = v12[3];
      if (v15 >= v14 >> 1)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
      v23 = &type metadata for _CodingKey;
      v24 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v16 = swift_allocObject();
      *(_QWORD *)&v22 = v16;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 16) = v13;
      *(_BYTE *)(v16 + 40) = 2;
      v12[2] = v15 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v22, (uint64_t)&v12[5 * v15 + 4]);
      v17 = type metadata accessor for DecodingError();
      swift_allocError();
      v19 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v19 = v25;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(ValueMetadata **, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC460], v17);
      swift_willThrow();
      return;
    }
    v6 = v9;
    v20 = v10;
    LOBYTE(v7) = v11;
    *(_QWORD *)(v2 + 8) = JSONMap.offset(after:)(v8);
    *(_QWORD *)(v2 + 24) = v6;
    *(_QWORD *)(v2 + 32) = v20;
    *(_BYTE *)(v2 + 40) = v7;
    v5 = v25;
  }
  v21 = *(_QWORD *)(v2 + 64);
  specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v6, v20, v7, v5, *(_QWORD *)(v2 + 72), v21, 0, 0, 2, a2);
  if (!v3)
  {
    if (__OFADD__(v21, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v2 + 64) = v21 + 1;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)(v2 + 32) = 0;
      *(_BYTE *)(v2 + 40) = -2;
    }
  }
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Publisher()
{
  return &type metadata for NSNotificationCenter.Publisher;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IndexPath(uint64_t a1, _QWORD *a2)
{
  return ((uint64_t (*)(_QWORD, _QWORD))((char *)sub_181890D58
                                                 + 4 * byte_182068FD0[*(unsigned __int8 *)(a1 + 16)]))(*(_QWORD *)a1, *a2);
}

BOOL sub_181890D58@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  return !a3 && a1 == a2;
}

uint64_t _NSXPCDistantObjectSimpleMessageSend4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id *v11;

  v11 = a1;
  objc_msgSend(v11[1], "_sendSelector:withProxy:arg1:arg2:arg3:arg4:", a2, v11, a3, a4, a5, a6);

  return 0;
}

void sub_181891194(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1818911B4(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x18189116CLL);
}

void sub_181891BF4(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_181891C3C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _NSXPCDistantObjectSimpleMessageSend0(void *a1, uint64_t a2)
{
  id *v3;

  v3 = a1;
  objc_msgSend(v3[1], "_sendSelector:withProxy:", a2, v3);

  return 0;
}

