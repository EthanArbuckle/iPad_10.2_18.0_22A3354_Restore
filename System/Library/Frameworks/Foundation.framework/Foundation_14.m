uint64_t TermOfAddress.extrapolatingEnglishPronouns()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  _OWORD *rawValue;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t i;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unint64_t v144;

  v3 = *v1;
  v2 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = v1[8];
  v11 = v1[9];
  v12 = v1[10];
  v13 = v1[11];
  v14 = v1[12];
  v109 = v5;
  v110 = v9;
  v113 = v7;
  v115 = v4;
  v116 = v6;
  v108 = v2;
  if (v14 >= 4)
  {
    v22 = v1[1];
    v98 = v12;
    outlined copy of TermOfAddress._TermOfAddress(v3, v2, v5, v4, v6, v7, v9, v8, v10, v11, v12, v13, v14);
    outlined consume of Locale.LanguageCode?(v3, v22);
    v15 = v8;
    outlined consume of Locale.LanguageCode?(v116, v7);
    v18 = v10;
    v17 = v11;
    v16 = v13;
    outlined consume of Locale.LanguageCode?(v10, v11);
    v19 = v14;
    v20 = v3;
    v21 = v98;
  }
  else
  {
    v15 = v1[7];
    v16 = v13;
    v17 = v11;
    v18 = v10;
    v19 = MEMORY[0x1E0DEE9D8];
    v20 = v3;
    v21 = v12;
  }
  v111 = v18;
  v112 = v15;
  v23 = *(_QWORD *)(v19 + 16);
  v107 = v20;
  v24 = v17;
  v25 = v16;
  if (v23)
  {
    v26 = v19 + 40;
    v27 = v113;
    while (*(_BYTE *)(v26 + 24))
    {
      v26 += 64;
      if (!--v23)
      {
        swift_bridgeObjectRelease();
        v119 = 0;
        v130 = 0;
        goto LABEL_11;
      }
    }
    v119 = *(_QWORD *)(v26 - 8);
    v28 = v21;
    v29 = *(_QWORD *)v26;
    swift_bridgeObjectRetain();
    v130 = v29;
    v21 = v28;
    swift_bridgeObjectRetain();
    v27 = v113;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v119 = 0;
    v130 = 0;
    v27 = v113;
  }
LABEL_11:
  v104 = v16;
  v105 = v24;
  if (v14 >= 4)
  {
    outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v27, v110, v15, v111, v24, v21, v16, v14);
    v31 = v27;
    v25 = v16;
    outlined consume of Locale.LanguageCode?(v107, v108);
    outlined consume of Locale.LanguageCode?(v116, v27);
    outlined consume of Locale.LanguageCode?(v111, v24);
    v30 = v14;
    v32 = *(_QWORD *)(v14 + 16);
    if (!v32)
      goto LABEL_18;
  }
  else
  {
    v30 = MEMORY[0x1E0DEE9D8];
    v31 = v27;
    v32 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v32)
    {
LABEL_18:
      swift_bridgeObjectRelease();
      v106 = 0;
      v121 = 0;
      if (v14 < 4)
        goto LABEL_19;
LABEL_22:
      outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v31, v110, v15, v111, v24, v21, v25, v14);
      v25 = v16;
      outlined consume of Locale.LanguageCode?(v107, v108);
      outlined consume of Locale.LanguageCode?(v116, v31);
      outlined consume of Locale.LanguageCode?(v111, v24);
      v34 = v14;
      v35 = *(_QWORD *)(v14 + 16);
      if (!v35)
        goto LABEL_33;
      goto LABEL_23;
    }
  }
  v33 = v30 + 40;
  while (*(_BYTE *)(v33 + 24) != 1)
  {
    v33 += 64;
    if (!--v32)
      goto LABEL_18;
  }
  v106 = *(_QWORD *)(v33 - 8);
  v36 = v21;
  v37 = *(_QWORD *)v33;
  swift_bridgeObjectRetain();
  v121 = v37;
  v21 = v36;
  swift_bridgeObjectRetain();
  v31 = v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 >= 4)
    goto LABEL_22;
LABEL_19:
  v34 = MEMORY[0x1E0DEE9D8];
  v35 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v35)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    v103 = 0;
    v120 = 0;
    if (v14 < 4)
      goto LABEL_34;
LABEL_37:
    outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v31, v110, v15, v111, v24, v21, v25, v14);
    v25 = v16;
    outlined consume of Locale.LanguageCode?(v107, v108);
    outlined consume of Locale.LanguageCode?(v116, v31);
    outlined consume of Locale.LanguageCode?(v111, v24);
    v42 = v14;
    v43 = *(_QWORD *)(v14 + 16);
    if (!v43)
      goto LABEL_47;
    goto LABEL_38;
  }
LABEL_23:
  v38 = v34 + 40;
  while (1)
  {
    v39 = *(unsigned __int8 *)(v38 + 27);
    v40 = *(_BYTE *)(v38 + 24) != 3 || v39 == 2;
    if (!v40 && (v39 & 1) != 0)
      break;
    v38 += 64;
    if (!--v35)
      goto LABEL_33;
  }
  v103 = *(_QWORD *)(v38 - 8);
  v44 = v21;
  v45 = *(_QWORD *)v38;
  swift_bridgeObjectRetain();
  v120 = v45;
  v21 = v44;
  swift_bridgeObjectRetain();
  v31 = v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 >= 4)
    goto LABEL_37;
LABEL_34:
  v42 = MEMORY[0x1E0DEE9D8];
  v43 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v43)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    v102 = 0;
    v118 = 0;
    if (v14 < 4)
      goto LABEL_48;
LABEL_51:
    outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v31, v110, v15, v111, v24, v21, v25, v14);
    v25 = v16;
    outlined consume of Locale.LanguageCode?(v107, v108);
    outlined consume of Locale.LanguageCode?(v116, v31);
    outlined consume of Locale.LanguageCode?(v111, v24);
    v50 = v14;
    v51 = *(_QWORD *)(v14 + 16);
    if (!v51)
      goto LABEL_55;
LABEL_52:
    v54 = v50 + 40;
    while (*(_BYTE *)(v54 + 26) != 1)
    {
      v54 += 64;
      if (!--v51)
        goto LABEL_55;
    }
    v56 = *(_QWORD *)v54;
    v114 = *(_QWORD *)(v54 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v55 = v56;
    v31 = v113;
    if (!v130)
      goto LABEL_63;
    goto LABEL_58;
  }
LABEL_38:
  v46 = v42 + 40;
  while (1)
  {
    v47 = *(unsigned __int8 *)(v46 + 27);
    v48 = *(_BYTE *)(v46 + 24) != 3 || v47 == 2;
    if (!v48 && (v47 & 1) == 0)
      break;
    v46 += 64;
    if (!--v43)
      goto LABEL_47;
  }
  v102 = *(_QWORD *)(v46 - 8);
  v52 = v21;
  v53 = *(_QWORD *)v46;
  swift_bridgeObjectRetain();
  v118 = v53;
  v21 = v52;
  swift_bridgeObjectRetain();
  v31 = v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 >= 4)
    goto LABEL_51;
LABEL_48:
  v50 = MEMORY[0x1E0DEE9D8];
  v51 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (v51)
    goto LABEL_52;
LABEL_55:
  swift_bridgeObjectRelease();
  v114 = 0;
  v55 = 0;
  if (v130)
  {
LABEL_58:
    if (v121 && v120 && v118 && v55)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a1 = v107;
      a1[1] = v108;
      a1[2] = v5;
      a1[3] = v115;
      a1[4] = v116;
      a1[5] = v31;
      a1[6] = v110;
      a1[7] = v15;
      a1[8] = v111;
      a1[9] = v24;
      a1[10] = v21;
      a1[11] = v25;
      a1[12] = v14;
      return outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v31, v110, v15, v111, v24, v21, v25, v14);
    }
  }
LABEL_63:
  v101 = v55;
  if (one-time initialization token for recognizedEnglishPronouns != -1)
    swift_once();
  rawValue = recognizedEnglishPronouns._rawValue;
  v59 = *((_QWORD *)recognizedEnglishPronouns._rawValue + 2);
  swift_bridgeObjectRetain();
  if (!v59)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v91 = v115;
    v92 = v107;
    v93 = v108;
    v94 = v109;
    v95 = v111;
    v96 = a1;
LABEL_98:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v96 = v92;
    v96[1] = v93;
    v96[2] = v94;
    v96[3] = v91;
    v96[4] = v116;
    v96[5] = v113;
    v96[6] = v110;
    v96[7] = v112;
    v96[8] = v95;
    v96[9] = v24;
    v96[10] = v21;
    v96[11] = v25;
    v96[12] = v14;
    return outlined copy of TermOfAddress._TermOfAddress(v92, v93, v94, v91, v116, v113, v110, v112, v95, v24, v21, v25, v14);
  }
  v99 = v21;
  swift_bridgeObjectRetain();
  v60 = rawValue[11];
  v141 = rawValue[10];
  v142 = v60;
  v143 = rawValue[12];
  v144 = *((_QWORD *)rawValue + 26);
  v61 = rawValue[7];
  v137 = rawValue[6];
  v138 = v61;
  v62 = rawValue[9];
  v139 = rawValue[8];
  v140 = v62;
  v63 = rawValue[3];
  v133 = rawValue[2];
  v134 = v63;
  v64 = rawValue[5];
  v117 = rawValue;
  v135 = rawValue[4];
  v136 = v64;
  v126 = 216;
  for (i = v59 - 1; ; --i)
  {
    v125 = v133;
    v65 = *((_QWORD *)&v134 + 1);
    v122 = v135;
    v123 = v134;
    v66 = v136;
    v124 = v137;
    v67 = v138;
    v131 = *((_QWORD *)&v135 + 1);
    v132 = *((_QWORD *)&v137 + 1);
    v68 = *((_QWORD *)&v138 + 1);
    v69 = v139;
    v129 = *((_QWORD *)&v133 + 1);
    v70 = *((_QWORD *)&v140 + 1);
    v128 = v140;
    v71 = v141;
    v72 = v142;
    v73 = v143;
    v74 = v144;
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?(v67, v68, v69, *((uint64_t *)&v69 + 1), v128, v70, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v130)
    {
      swift_bridgeObjectRelease();
      v76 = v117;
      goto LABEL_94;
    }
    if (v119 == v125 && v130 == v129)
    {
      swift_bridgeObjectRelease();
      v75 = v131;
      v76 = v117;
    }
    else
    {
      v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v75 = v131;
      v76 = v117;
      if ((v77 & 1) == 0)
        goto LABEL_94;
    }
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?(v67, v68, v69, *((uint64_t *)&v69 + 1), v128, v70, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v121 || v106 == v123 && v121 == v65)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v79 & 1) == 0)
        goto LABEL_94;
    }
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?(v67, v68, v69, *((uint64_t *)&v69 + 1), v128, v70, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v120 || v103 == v122 && v120 == v75)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v80 & 1) == 0)
        goto LABEL_94;
    }
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?(v67, v68, v69, *((uint64_t *)&v69 + 1), v128, v70, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v118 && __PAIR128__(v118, v102) != v66)
    {
      v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v81 & 1) == 0)
        goto LABEL_94;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    outlined consume of TermOfAddress?(v67, v68, v69, *((uint64_t *)&v69 + 1), v128, v70, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v101)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v114 = v124;
      goto LABEL_101;
    }
    if (v114 == v124 && v101 == v132)
      break;
    v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v78 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v114 = v124;
      goto LABEL_101;
    }
LABEL_94:
    outlined release of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    if (!i)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = v99;
      v96 = a1;
      v91 = v115;
      v93 = v108;
      v94 = v109;
      v92 = v107;
      v95 = v111;
      v25 = v104;
      v24 = v105;
      goto LABEL_98;
    }
    v82 = *(_OWORD *)((char *)v76 + v126);
    v83 = *(_OWORD *)((char *)v76 + v126 + 16);
    v84 = *(_OWORD *)((char *)v76 + v126 + 48);
    v135 = *(_OWORD *)((char *)v76 + v126 + 32);
    v136 = v84;
    v133 = v82;
    v134 = v83;
    v85 = *(_OWORD *)((char *)v76 + v126 + 64);
    v86 = *(_OWORD *)((char *)v76 + v126 + 80);
    v87 = *(_OWORD *)((char *)v76 + v126 + 112);
    v139 = *(_OWORD *)((char *)v76 + v126 + 96);
    v140 = v87;
    v137 = v85;
    v138 = v86;
    v88 = *(_OWORD *)((char *)v76 + v126 + 128);
    v89 = *(_OWORD *)((char *)v76 + v126 + 144);
    v90 = *(_OWORD *)((char *)v76 + v126 + 160);
    v144 = *(_QWORD *)((char *)v76 + v126 + 176);
    v142 = v89;
    v143 = v90;
    v141 = v88;
    v126 += 184;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_101:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v74 == 4)
  {
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    result = swift_bridgeObjectRelease();
    if (v14 < 4)
    {
      __break(1u);
    }
    else
    {
      outlined copy of TermOfAddress._TermOfAddress(v107, v108, v109, v115, v116, v113, v110, v15, v111, v105, v99, v104, v14);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Morphology.Pronoun>);
      result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_182065BB0;
      *(_QWORD *)(result + 32) = v125;
      *(_QWORD *)(result + 40) = v129;
      *(_WORD *)(result + 48) = 3587;
      *(_BYTE *)(result + 50) = 6;
      v97 = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(result + 56) = MEMORY[0x1E0DEE9E0];
      *(_DWORD *)(result + 64) = 33751808;
      *(_BYTE *)(result + 68) = 2;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 85) = 0;
      *(_QWORD *)(result + 96) = v123;
      *(_QWORD *)(result + 104) = v65;
      *(_WORD *)(result + 112) = 3587;
      *(_BYTE *)(result + 114) = 6;
      *(_QWORD *)(result + 120) = v97;
      *(_DWORD *)(result + 128) = 33751809;
      *(_BYTE *)(result + 132) = 2;
      *(_QWORD *)(result + 136) = 0;
      *(_QWORD *)(result + 144) = 0;
      *(_QWORD *)(result + 149) = 0;
      *(_QWORD *)(result + 160) = v122;
      *(_QWORD *)(result + 168) = v131;
      *(_WORD *)(result + 176) = 3587;
      *(_BYTE *)(result + 178) = 6;
      *(_QWORD *)(result + 184) = v97;
      *(_DWORD *)(result + 192) = 16974595;
      *(_BYTE *)(result + 196) = 2;
      *(_QWORD *)(result + 213) = 0;
      *(_QWORD *)(result + 200) = 0;
      *(_QWORD *)(result + 208) = 0;
      *(_OWORD *)(result + 224) = v66;
      *(_WORD *)(result + 240) = 3587;
      *(_BYTE *)(result + 242) = 6;
      *(_QWORD *)(result + 248) = v97;
      *(_DWORD *)(result + 256) = 197379;
      *(_BYTE *)(result + 260) = 2;
      *(_QWORD *)(result + 264) = 0;
      *(_QWORD *)(result + 272) = 0;
      *(_QWORD *)(result + 277) = 0;
      *(_QWORD *)(result + 288) = v114;
      *(_QWORD *)(result + 296) = v132;
      *(_WORD *)(result + 304) = 3587;
      *(_BYTE *)(result + 306) = 6;
      *(_QWORD *)(result + 312) = v97;
      *(_DWORD *)(result + 320) = 33620750;
      *(_BYTE *)(result + 324) = 2;
      *(_QWORD *)(result + 328) = 0;
      *(_QWORD *)(result + 336) = 0;
      *(_QWORD *)(result + 341) = 0;
      *a1 = v107;
      a1[1] = v108;
      a1[2] = v109;
      a1[3] = v115;
      a1[4] = v116;
      a1[5] = v113;
      a1[6] = v110;
      a1[7] = v15;
      a1[8] = v111;
      a1[9] = v105;
      a1[10] = v99;
      a1[11] = v104;
      a1[12] = result;
    }
  }
  else
  {
    result = outlined release of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)((uint64_t)&v133);
    *a1 = v67;
    a1[1] = v68;
    *((_OWORD *)a1 + 1) = v69;
    a1[4] = v128;
    a1[5] = v70;
    *((_OWORD *)a1 + 3) = v71;
    *((_OWORD *)a1 + 4) = v72;
    *((_OWORD *)a1 + 5) = v73;
    a1[12] = v74;
  }
  return result;
}

uint64_t TermOfAddress.extrapolatingFromNominativePronouns()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *rawValue;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t countAndFlagsBits;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *object;
  uint64_t v46;
  char v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  int Language;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t result;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[224];
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  unint64_t v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v96 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = v1[9];
  v13 = v1[10];
  v12 = (void *)v1[11];
  v14 = v1[12];
  v89 = v6;
  v99 = v10;
  v97 = v11;
  v98 = v12;
  v90 = v4;
  v87 = v3;
  v91 = v5;
  v94 = v7;
  v95 = v8;
  v93 = (void *)v9;
  if (v14 >= 4)
  {
    v19 = v3;
    outlined copy of TermOfAddress._TermOfAddress(v4, v3, v5, v6, v7, v96, v8, v9, v10, v11, v13, (uint64_t)v12, v14);
    outlined consume of Locale.LanguageCode?(v4, v19);
    v18 = v94;
    outlined consume of Locale.LanguageCode?(v94, v96);
    outlined consume of Locale.LanguageCode?(v10, v11);
    v15 = v14;
    v16 = v87;
    v17 = v91;
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9D8];
    v16 = v3;
    v17 = v5;
    v18 = v7;
  }
  v20 = *(_QWORD *)(v15 + 16);
  v92 = v14;
  v88 = v13;
  if (v20)
  {
    v21 = v15 + 40;
    while (*(_BYTE *)(v21 + 24))
    {
      v21 += 64;
      if (!--v20)
        goto LABEL_8;
    }
    v22 = *(_QWORD *)v21;
    v100 = *(_QWORD *)(v21 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v87;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    v100 = 0;
    v22 = 0;
  }
  if (one-time initialization token for recognizedNominativePronouns != -1)
    swift_once();
  rawValue = recognizedNominativePronouns._rawValue;
  v24 = *((_QWORD *)recognizedNominativePronouns._rawValue + 2);
  if (!v24)
  {
    swift_bridgeObjectRelease();
    v68 = v97;
    v67 = (uint64_t)v93;
LABEL_43:
    v69 = v90;
    *a1 = v90;
    a1[1] = v16;
    v70 = v89;
    a1[2] = v17;
    a1[3] = v70;
    v71 = v96;
    a1[4] = v18;
    a1[5] = v71;
    v72 = v95;
    a1[6] = v95;
    a1[7] = v67;
    v73 = v99;
    a1[8] = v99;
    a1[9] = v68;
    v74 = v88;
    v75 = (uint64_t)v98;
    a1[10] = v88;
    a1[11] = v75;
    v76 = v92;
    a1[12] = v92;
    return outlined copy of TermOfAddress._TermOfAddress(v69, v16, v17, v70, v18, v71, v72, v67, v73, v68, v74, v75, v76);
  }
  v103 = v22;
  v86 = a1;
  swift_bridgeObjectRetain_n();
  v25 = rawValue[9];
  v132 = rawValue[8];
  v26 = rawValue[10];
  v133 = v25;
  v134 = v26;
  v135 = *((_QWORD *)rawValue + 22);
  v27 = rawValue[5];
  v128 = rawValue[4];
  v129 = v27;
  v28 = rawValue[7];
  v130 = rawValue[6];
  v131 = v28;
  v29 = rawValue[3];
  v126 = rawValue[2];
  v127 = v29;
  v116 = v24 - 1;
  v115 = 184;
  v101 = rawValue;
  while (1)
  {
    v122 = *((_QWORD *)&v126 + 1);
    v102 = v126;
    v121 = (void *)*((_QWORD *)&v127 + 1);
    v104 = v127;
    v114 = v128;
    v30 = v129;
    v117 = *((_QWORD *)&v128 + 1);
    v118 = *((_QWORD *)&v129 + 1);
    v31 = *((_QWORD *)&v130 + 1);
    v119 = v130;
    v32 = *((_QWORD *)&v131 + 1);
    v120 = v131;
    v33 = v132;
    v34 = v133;
    v35 = v134;
    v36 = v135;
    outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
    outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
    v105 = v36;
    v106 = *((_QWORD *)&v35 + 1);
    v107 = v35;
    v108 = *((_QWORD *)&v34 + 1);
    v109 = v34;
    v110 = v30;
    v111 = v31;
    v112 = v32;
    v113 = v33;
    outlined consume of TermOfAddress._TermOfAddress(v30, v118, v119, v31, v120, v32, v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v103)
    {
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
    if (v100 == v114 && v103 == v117)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
        goto LABEL_39;
    }
    if (v92 < 4)
    {
      outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
LABEL_38:
      v59 = v122;
      outlined consume of TermOfAddress._TermOfAddress(v110, v118, v119, v111, v120, v112, v113, *((uint64_t *)&v113 + 1), v109, v108, v107, v106, v105);
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(0, 0);
      outlined consume of Locale.LanguageCode?(v102, v59);
      goto LABEL_39;
    }
    v38 = v90;
    v39 = v87;
    countAndFlagsBits = v91;
    v41 = v89;
    v42 = v96;
    v43 = v94;
    outlined copy of TermOfAddress._TermOfAddress(v90, v87, v91, v89, v94, v96, v95, (uint64_t)v93, v99, v97, v88, (uint64_t)v98, v92);
    outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
    v44 = swift_bridgeObjectRelease();
    if (v39)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of Locale.LanguageCode?(v38, v39);
      outlined consume of Locale.LanguageCode?(v43, v42);
      outlined consume of Locale.LanguageCode?(v99, v97);
      outlined consume of TermOfAddress._TermOfAddress(v110, v118, v119, v111, v120, v112, v113, *((uint64_t *)&v113 + 1), v109, v108, v107, v106, v105);
      object = (void *)v41;
      v46 = v38;
    }
    else
    {
      MEMORY[0x1E0C80A78](v44);
      v125 = 0;
      v123 = 0;
      v124 = 0xE000000000000000;
      outlined copy of Locale.LanguageCode?(v38, 0);
      if (v42)
      {
        v48 = v95;
        v49 = v93;
        outlined copy of Locale.LanguageCode?(v94, v96);
        v50 = v97;
        outlined copy of Locale.LanguageCode?(v99, v97);
        v51._countAndFlagsBits = 45;
        v51._object = (void *)0xE100000000000000;
        String.append(_:)(v51);
        v52._countAndFlagsBits = v48;
        v52._object = v49;
        String.append(_:)(v52);
      }
      else
      {
        outlined copy of Locale.LanguageCode?(v94, 0);
        v50 = v97;
        outlined copy of Locale.LanguageCode?(v99, v97);
      }
      if (v50)
      {
        v53._countAndFlagsBits = 95;
        v53._object = (void *)0xE100000000000000;
        String.append(_:)(v53);
        v54._countAndFlagsBits = v88;
        v54._object = v98;
        String.append(_:)(v54);
      }
      outlined consume of Locale.LanguageCode?(v90, 0);
      outlined consume of Locale.LanguageCode?(v94, v96);
      outlined consume of Locale.LanguageCode?(v99, v50);
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      Language = uloc_getLanguage();
      swift_release();
      if (v125 > 0 || Language <= 0 || (v85[Language] = 0, v56 = MEMORY[0x186DA4658](v85), !v57))
      {
        outlined consume of Locale.LanguageCode?(v90, 0);
        outlined consume of Locale.LanguageCode?(v94, v96);
        outlined consume of Locale.LanguageCode?(v99, v97);
        goto LABEL_38;
      }
      v46 = v56;
      v39 = v57;
      v58 = String.lowercased()();
      countAndFlagsBits = v58._countAndFlagsBits;
      object = v58._object;
      outlined consume of Locale.LanguageCode?(v90, 0);
      outlined consume of Locale.LanguageCode?(v94, v96);
      outlined consume of Locale.LanguageCode?(v99, v97);
      outlined consume of TermOfAddress._TermOfAddress(v110, v118, v119, v111, v120, v112, v113, *((uint64_t *)&v113 + 1), v109, v108, v107, v106, v105);
    }
    swift_bridgeObjectRelease();
    if (countAndFlagsBits == v104 && object == v121)
      break;
    v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v46, v39);
    if ((v47 & 1) != 0)
      goto LABEL_45;
LABEL_39:
    outlined release of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
    if (!v116)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      a1 = v86;
      v16 = v87;
      v17 = v91;
      v18 = v94;
      v67 = (uint64_t)v93;
      v68 = v97;
      goto LABEL_43;
    }
    v60 = *(_OWORD *)((char *)v101 + v115 + 16);
    v126 = *(_OWORD *)((char *)v101 + v115);
    v127 = v60;
    v61 = *(_OWORD *)((char *)v101 + v115 + 32);
    v62 = *(_OWORD *)((char *)v101 + v115 + 48);
    v63 = *(_OWORD *)((char *)v101 + v115 + 80);
    v130 = *(_OWORD *)((char *)v101 + v115 + 64);
    v131 = v63;
    v128 = v61;
    v129 = v62;
    v64 = *(_OWORD *)((char *)v101 + v115 + 96);
    v65 = *(_OWORD *)((char *)v101 + v115 + 112);
    v66 = *(_OWORD *)((char *)v101 + v115 + 128);
    v135 = *(_QWORD *)((char *)v101 + v115 + 144);
    v133 = v65;
    v134 = v66;
    v132 = v64;
    v115 += 152;
    --v116;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v46, v39);
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease_n();
  v78 = v86;
  v79 = v118;
  *v86 = v110;
  v78[1] = v79;
  v80 = v111;
  v78[2] = v119;
  v78[3] = v80;
  v81 = v112;
  v78[4] = v120;
  v78[5] = v81;
  v82 = *((_QWORD *)&v113 + 1);
  v78[6] = v113;
  v78[7] = v82;
  v83 = v108;
  v78[8] = v109;
  v78[9] = v83;
  v84 = v106;
  v78[10] = v107;
  v78[11] = v84;
  v78[12] = v105;
  return result;
}

uint64_t TermOfAddress.withExtrapolatedPronouns()@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  char v23;
  void *object;
  uint64_t countAndFlagsBits;
  unsigned __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[6];
  unint64_t v34;
  _OWORD v35[7];

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = *((_QWORD *)v1 + 12);
  v27 = v4;
  v28 = v3;
  v31 = v6;
  v32 = v5;
  v29 = v8;
  v30 = v7;
  if (v9 >= 4)
  {
    v35[0] = v3;
    v35[1] = v4;
    v35[2] = v5;
    v35[3] = v6;
    v35[4] = v7;
    v35[5] = v8;
    v18 = *((_QWORD *)&v3 + 1);
    v17 = v3;
    v19 = v4;
    outlined copy of Locale.LanguageCode?(v3, *((uint64_t *)&v3 + 1));
    outlined copy of Locale.LanguageCode?(v32, *((uint64_t *)&v32 + 1));
    outlined copy of Locale.LanguageCode?(v30, *((uint64_t *)&v30 + 1));
    v26 = __PAIR128__(v18, v17);
    object = (void *)*((_QWORD *)&v19 + 1);
    countAndFlagsBits = v19;
    if (!v18)
    {
      outlined copy of Locale.LanguageCode?(v17, 0);
      outlined copy of Locale.LanguageCode?(v32, *((uint64_t *)&v32 + 1));
      outlined copy of Locale.LanguageCode?(v30, *((uint64_t *)&v30 + 1));
      *(_QWORD *)&v26 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)v35);
      *((_QWORD *)&v26 + 1) = v20;
      outlined consume of Locale.LanguageCode?(v17, 0);
      outlined consume of Locale.LanguageCode?(v32, *((uint64_t *)&v32 + 1));
      outlined consume of Locale.LanguageCode?(v30, *((uint64_t *)&v30 + 1));
      if (*((_QWORD *)&v26 + 1))
      {
        v21 = String.lowercased()();
        object = v21._object;
        countAndFlagsBits = v21._countAndFlagsBits;
      }
      else
      {
        v26 = 0uLL;
        object = 0;
        countAndFlagsBits = 0;
      }
      v18 = 0;
    }
    outlined copy of Locale.LanguageCode?(v17, v18);
    outlined consume of Locale.LanguageCode?(v17, v18);
    outlined consume of Locale.LanguageCode?(v32, *((uint64_t *)&v32 + 1));
    outlined consume of Locale.LanguageCode?(v30, *((uint64_t *)&v30 + 1));
    v22 = String.lowercased()();
    if (*((_QWORD *)&v26 + 1))
    {
      if (v22._countAndFlagsBits == countAndFlagsBits && object == v22._object)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined consume of Locale.LanguageCode?(v26, *((uint64_t *)&v26 + 1));
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
LABEL_14:
        result = TermOfAddress.extrapolatingEnglishPronouns()((uint64_t *)v33);
LABEL_16:
        v15 = v33[0];
        v16 = v33[1];
        v13 = v33[2];
        v14 = v33[3];
        v11 = v33[4];
        v12 = v33[5];
        v9 = v34;
        goto LABEL_17;
      }
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of Locale.LanguageCode?(v26, *((uint64_t *)&v26 + 1));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      if ((v23 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      outlined consume of Locale.LanguageCode?(28261, 0xE200000000000000);
      outlined consume of Locale.LanguageCode?(v26, 0);
    }
    result = TermOfAddress.extrapolatingFromNominativePronouns()(v33);
    goto LABEL_16;
  }
  result = outlined copy of TermOfAddress._TermOfAddress(v3, *((uint64_t *)&v3 + 1), v4, *((uint64_t *)&v4 + 1), v5, *((uint64_t *)&v5 + 1), v6, *((uint64_t *)&v6 + 1), v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9);
  v12 = v29;
  v11 = v30;
  v14 = v31;
  v13 = v32;
  v16 = v27;
  v15 = v28;
LABEL_17:
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 32) = v13;
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 96) = v9;
  return result;
}

Swift::Bool __swiftcall NSTermOfAddress.containsPronoun(_:grammemes:)(Swift::String _, Swift::OpaquePointer grammemes)
{
  void *v2;
  int64_t object;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  BOOL v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  id v19;
  id v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  _OWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void *rawValue;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t countAndFlagsBits;
  _OWORD v79[2];

  object = (int64_t)_._object;
  countAndFlagsBits = _._countAndFlagsBits;
  v5 = objc_msgSend(v2, sel_pronouns);
  if (v5)
  {
    v6 = v5;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    v76 = swift_dynamicCastClass();
    if (v76)
    {

    }
    else
    {
      swift_unknownObjectRelease();
      objc_msgSend(v6, sel_copy);
      type metadata accessor for NSMorphologyPronoun();
      v7 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
      v76 = v7;
      if (v7 >> 62)
        goto LABEL_69;
    }
    v8 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v8)
    {
      v9 = 0;
      v74 = object;
      v75 = MEMORY[0x1E0DEE9B8] + 8;
      rawValue = grammemes._rawValue;
      v77 = v8;
      while (1)
      {
        if ((v76 & 0xC000000000000001) != 0)
          v10 = (id)MEMORY[0x186DA53A8](v9, v76);
        else
          v10 = *(id *)(v76 + 32 + 8 * v9);
        v11 = v10;
        v12 = __OFADD__(v9++, 1);
        if (v12)
        {
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        v13 = objc_msgSend(v10, sel_pronoun);
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v16 = v15;

        if (v14 == (id)countAndFlagsBits && v16 == object)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {

            goto LABEL_10;
          }
        }
        v19 = objc_msgSend(v11, sel__morphunConstraints);
        if (v75 == MEMORY[0x1E0DEA968])
          break;
        swift_unknownObjectRetain();
        if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)())
          goto LABEL_61;
        v22 = (char *)objc_msgSend(v19, sel_count);
        if (v22)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
          v23 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v23 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        }
        v47 = (char *)v23[6];
        v48 = v23[7];
        swift_retain();
        v49 = specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v47, v48, v19, (uint64_t)v22);
        if (((unint64_t)v49 & 0x8000000000000000) != 0 || (uint64_t)v22 < (uint64_t)v49)
          goto LABEL_68;
        v23[2] = v49;
        if (!v49)
          goto LABEL_60;
        object = (int64_t)(v49 - 1);
        grammemes._rawValue = v23 + 8;
        do
        {
          while (1)
          {
            if (((*(_QWORD *)((char *)grammemes._rawValue + (((unint64_t)object >> 3) & 0xFFFFFFFFFFFFF8)) >> object) & 1) != 0)
              goto LABEL_51;
            v51 = (uint64_t *)(v23[6] + 16 * object);
            v52 = *v51;
            v53 = v51[1];
            swift_bridgeObjectRetain();
            v54 = specialized __RawDictionaryStorage.find<A>(_:)(v52, v53);
            LOBYTE(v52) = v55;
            swift_bridgeObjectRelease();
            if ((v52 & 1) == 0)
              break;
            swift_arrayDestroy();
            swift_arrayDestroy();
            v56 = v23[2];
            v12 = __OFSUB__(v56, 1);
            v57 = v56 - 1;
            if (v12)
              goto LABEL_66;
            v23[2] = v57;
LABEL_51:
            if (--object < 0)
              goto LABEL_59;
          }
          *(_QWORD *)((char *)grammemes._rawValue + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v54;
          if (object < (uint64_t)v54)
          {
            v50 = 16 * v54;
            *(_OWORD *)(v23[6] + v50) = *(_OWORD *)(v23[6] + 16 * object);
            *(_OWORD *)(v23[7] + v50) = *(_OWORD *)(v23[7] + 16 * object);
            goto LABEL_51;
          }
          if (v54 == object)
            goto LABEL_51;
          v58 = v23[6];
          v59 = (uint64_t *)(v58 + 16 * v54);
          v60 = (uint64_t *)(v58 + 16 * object);
          v61 = *v59;
          v62 = v59[1];
          v63 = v60[1];
          *v59 = *v60;
          v59[1] = v63;
          *v60 = v61;
          v60[1] = v62;
          v64 = v23[7];
          v65 = (uint64_t *)(v64 + 16 * v54);
          v66 = (uint64_t *)(v64 + 16 * object);
          v67 = *v65;
          v68 = v65[1];
          v69 = v66[1];
          *v65 = *v66;
          v65[1] = v69;
          *v66 = v67;
          v66[1] = v68;
        }
        while ((object & 0x8000000000000000) == 0);
LABEL_59:
        grammemes._rawValue = rawValue;
LABEL_60:
        swift_release();
LABEL_61:

        MEMORY[0x1E0C80A78](v70);
        v71 = specialized Sequence.allSatisfy(_:)((uint64_t)grammemes._rawValue, partial apply for closure #1 in NSTermOfAddress.containsPronoun(_:grammemes:));
        swift_bridgeObjectRelease();

        if ((v71 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          LOBYTE(v5) = 1;
          return (char)v5;
        }
        object = v74;
LABEL_10:
        if (v9 == v77)
          goto LABEL_70;
      }
      swift_bridgeObjectRelease();
      swift_unknownObjectRetain();
      if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)())
        goto LABEL_61;
      v20 = objc_msgSend(v19, sel_count);
      if (v20)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v21 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v21 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
      v25 = (_QWORD *)v21[6];
      v24 = v21[7];
      swift_retain();
      v26 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v25, v24, v19, (uint64_t)v20);
      if ((v26 & 0x8000000000000000) == 0 && (uint64_t)v20 >= v26)
      {
        v21[2] = v26;
        if (!v26)
          goto LABEL_60;
        object = v26 - 1;
        grammemes._rawValue = v21 + 8;
        while (1)
        {
          if (((*(_QWORD *)((char *)grammemes._rawValue + (((unint64_t)object >> 3) & 0xFFFFFFFFFFFFF8)) >> object) & 1) != 0)
            goto LABEL_36;
          v31 = (uint64_t *)(v21[6] + 16 * object);
          v32 = *v31;
          v33 = v31[1];
          swift_bridgeObjectRetain();
          v34 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          LOBYTE(v32) = v35;
          swift_bridgeObjectRelease();
          if ((v32 & 1) != 0)
            break;
          *(_QWORD *)((char *)grammemes._rawValue + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
          if (object < (uint64_t)v34)
          {
            *(_OWORD *)(v21[6] + 16 * v34) = *(_OWORD *)(v21[6] + 16 * object);
            v27 = v21[7];
            v28 = (_OWORD *)(v27 + 32 * object);
            v29 = v28[1];
            v30 = (_OWORD *)(v27 + 32 * v34);
            *v30 = *v28;
            v30[1] = v29;
LABEL_36:
            if (--object < 0)
              goto LABEL_59;
            continue;
          }
          if (v34 == object)
            goto LABEL_36;
          v38 = v21[6];
          v39 = (uint64_t *)(v38 + 16 * v34);
          v40 = (uint64_t *)(v38 + 16 * object);
          v41 = *v39;
          v42 = v39[1];
          v43 = v40[1];
          *v39 = *v40;
          v39[1] = v43;
          *v40 = v41;
          v40[1] = v42;
          v44 = v21[7];
          v45 = (_OWORD *)(v44 + 32 * v34);
          v46 = (_OWORD *)(v44 + 32 * object);
          outlined init with take of Any(v45, v79);
          outlined init with take of Any(v46, v45);
          outlined init with take of Any(v79, v46);
          if (object < 0)
            goto LABEL_59;
        }
        swift_arrayDestroy();
        swift_arrayDestroy();
        v36 = v21[2];
        v12 = __OFSUB__(v36, 1);
        v37 = v36 - 1;
        if (v12)
          goto LABEL_65;
        v21[2] = v37;
        goto LABEL_36;
      }
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_70:
    swift_bridgeObjectRelease();
    LOBYTE(v5) = 0;
  }
  return (char)v5;
}

uint64_t closure #1 in NSTermOfAddress.containsPronoun(_:grammemes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  if (*(_QWORD *)(a5 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v11 & 1) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(a5 + 56) + 16 * v10);
      v13 = *v12;
      v14 = v12[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v13 == a3 && v14 == a4)
        v16 = 1;
      else
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    else
    {
      v16 = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 1;
  }
  return v16 & 1;
}

uint64_t outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *(_QWORD *)(a1 + 80);
  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 136);
  v8 = *(_OWORD *)(a1 + 160);
  v9 = *(_OWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of TermOfAddress?(v13, v2, v3, v4, v5, v12, v11, v10, v9, *((uint64_t *)&v9 + 1), v8, *((uint64_t *)&v8 + 1), v6);
  return a1;
}

uint64_t outlined release of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 136);
  v8 = *(_OWORD *)(a1 + 160);
  v9 = *(_OWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of TermOfAddress?(v13, v2, v3, v4, v5, v12, v11, v10, v9, *((uint64_t *)&v9 + 1), v8, *((uint64_t *)&v8 + 1), v6);
  return a1;
}

uint64_t outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 48);
  v10 = *(_OWORD *)(a1 + 128);
  v11 = *(_OWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of TermOfAddress._TermOfAddress(v13, v2, v3, v4, v5, v6, v7, v12, v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v8);
  return a1;
}

uint64_t outlined release of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 48);
  v10 = *(_OWORD *)(a1 + 128);
  v11 = *(_OWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 144);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of TermOfAddress._TermOfAddress(v13, v2, v3, v4, v5, v6, v7, v12, v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v8);
  return a1;
}

unint64_t type metadata accessor for NSMorphologyPronoun()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSMorphologyPronoun;
  if (!lazy cache variable for type metadata for NSMorphologyPronoun)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
  }
  return result;
}

uint64_t partial apply for closure #1 in NSTermOfAddress.containsPronoun(_:grammemes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in NSTermOfAddress.containsPronoun(_:grammemes:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v23 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v19 >= v23)
      goto LABEL_24;
    v20 = *(_QWORD *)(v4 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v23)
        goto LABEL_24;
      v20 = *(_QWORD *)(v4 + 8 * v9);
      if (!v20)
      {
        v9 = v19 + 2;
        if (v19 + 2 >= v23)
          goto LABEL_24;
        v20 = *(_QWORD *)(v4 + 8 * v9);
        if (!v20)
        {
          v9 = v19 + 3;
          if (v19 + 3 >= v23)
            goto LABEL_24;
          v20 = *(_QWORD *)(v4 + 8 * v9);
          if (!v20)
          {
            v21 = v19 + 4;
            if (v21 >= v23)
            {
LABEL_24:
              v22 = 1;
              goto LABEL_25;
            }
            v20 = *(_QWORD *)(v4 + 8 * v21);
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_27;
                if (v9 >= v23)
                  goto LABEL_24;
                v20 = *(_QWORD *)(v4 + 8 * v9);
                ++v21;
                if (v20)
                  goto LABEL_22;
              }
            }
            v9 = v21;
          }
        }
      }
    }
LABEL_22:
    v7 = (v20 - 1) & v20;
    v11 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_5:
    v12 = 16 * v11;
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v12);
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v17) = a2(v14, v15, v17, v18);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      v22 = 0;
LABEL_25:
      swift_release();
      return v22;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t specialized BidirectionalCollection<>._alignIndex(roundingUp:)(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  _QWORD v17[2];

  result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a4, a5);
  if (result >> 14 < a1 >> 14 && result >> 14 < a3 >> 14)
  {
    v11 = _StringGuts.validateScalarIndex(_:)(result, a4, a5);
    if ((a5 & 0x1000000000000000) != 0)
    {
      return String.UnicodeScalarView._foreignIndex(after:)();
    }
    else
    {
      v12 = v11 >> 16;
      if ((a5 & 0x2000000000000000) != 0)
      {
        v17[0] = a4;
        v17[1] = a5 & 0xFFFFFFFFFFFFFFLL;
        v14 = *((unsigned __int8 *)v17 + v12);
      }
      else
      {
        if ((a4 & 0x1000000000000000) != 0)
          v13 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        else
          v13 = _StringObject.sharedUTF8.getter();
        v14 = *(unsigned __int8 *)(v13 + v12);
      }
      v15 = (char)v14;
      v16 = __clz(v14 ^ 0xFF) - 24;
      if (v15 >= 0)
        LOBYTE(v16) = 1;
      return ((v12 + v16) << 16) | 5;
    }
  }
  return result;
}

unint64_t specialized BidirectionalCollection<>._alignIndex(roundingUp:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  _QWORD v14[2];

  result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a2, a3);
  if (result >> 14 < a1 >> 14)
  {
    v7 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v7 = a2 & 0xFFFFFFFFFFFFLL;
    if (result >> 14 < 4 * v7)
    {
      v8 = _StringGuts.validateScalarIndex(_:)(result, a2, a3);
      if ((a3 & 0x1000000000000000) != 0)
      {
        return String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        v9 = v8 >> 16;
        if ((a3 & 0x2000000000000000) != 0)
        {
          v14[0] = a2;
          v14[1] = a3 & 0xFFFFFFFFFFFFFFLL;
          v11 = *((unsigned __int8 *)v14 + v9);
        }
        else
        {
          if ((a2 & 0x1000000000000000) != 0)
            v10 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          else
            v10 = _StringObject.sharedUTF8.getter();
          v11 = *(unsigned __int8 *)(v10 + v9);
        }
        v12 = (char)v11;
        v13 = __clz(v11 ^ 0xFF) - 24;
        if (v12 >= 0)
          LOBYTE(v13) = 1;
        return ((v9 + v13) << 16) | 5;
      }
    }
  }
  return result;
}

uint64_t specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (uint64_t (*)(uint64_t))specialized _arrayForceCast<A, B>(_:));
}

{
  return specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>, (uint64_t (*)(uint64_t))specialized _arrayForceCast<A, B>(_:));
}

uint64_t specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(void *a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return MEMORY[0x1E0DEE9D8];
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();

  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    objc_msgSend(a1, sel_copy);
    v7 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = a3(v7);
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

unint64_t specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  _UNKNOWN **v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeMutableBufferPointer<UInt8>);
  v10 = &protocol witness table for <A> UnsafeMutableBufferPointer<A>;
  v8[0] = a1;
  v8[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v5 = *v4;
  if (*v4)
  {
    v6 = v4[1];
    if (v6)
    {
      if (v6 <= 14)
      {
        v5 = specialized Data.InlineData.init(_:)((_BYTE *)*v4, (_BYTE *)(v5 + v6));
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        __DataStorage.init(bytes:length:)(v5, v6);
        if ((unint64_t)v6 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          v5 = swift_allocObject();
          *(_QWORD *)(v5 + 16) = 0;
          *(_QWORD *)(v5 + 24) = v6;
        }
        else
        {
          v5 = v6 << 32;
        }
      }
    }
    else
    {
      v5 = 0;
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  __int128 v16[2];
  uint64_t v17;
  __int128 v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v18 = a1;
  *((_QWORD *)&v18 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (!swift_dynamicCast())
  {
    v17 = 0;
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for ContiguousBytes?);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v19[0] = a1;
      v19[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v6 = (char *)v19 + (HIBYTE(a2) & 0xF);
      v7 = v19;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4)
        v6 = (_BYTE *)(v4 + v5);
      else
        v6 = 0;
      v7 = (_BYTE *)v4;
    }
    v8 = specialized Data._Representation.init(_:)(v7, v6);
    v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v16[0] = v8;
      *((_QWORD *)&v16[0] + 1) = v10;
      return *(_QWORD *)&v16[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v11 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v11 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v11 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v16[0] = specialized Data._Representation.init(count:)(v11);
    *((_QWORD *)&v16[0] + 1) = v12;
    MEMORY[0x1E0C80A78](*(_QWORD *)&v16[0]);
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)();
    __asm { BR              X12 }
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(v16, (uint64_t)v19);
  v2 = v20;
  v3 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  (*(void (**)(__int128 *__return_ptr, _BYTE *(*)@<X0>(_BYTE *@<X0>, _BYTE *@<X1>, _QWORD *@<X8>), _QWORD, ValueMetadata *, uint64_t, uint64_t))(v3 + 8))(&v18, closure #1 in Data.init<A>(_:), 0, &type metadata for Data._Representation, v2, v3);
  swift_bridgeObjectRelease();
  v16[0] = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  return *(_QWORD *)&v16[0];
}

void specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_181EEBEE0
     + *((int *)qword_181EEC0B0
       + (__swift_project_boxed_opaque_existential_1(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X12 }
}

uint64_t sub_181EEBEF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v7 = v1;
  v8 = a1;
  v9 = BYTE2(a1);
  v10 = BYTE3(a1);
  v11 = BYTE4(a1);
  v12 = BYTE5(a1);
  v4 = (char *)&v7 + BYTE6(a1);
  outlined copy of Data._Representation(v3, v2);
  closure #1 in Data.init<A>(_:)(&v7, v4, &v13);
  outlined consume of Data._Representation(v3, v2);
  v5 = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  return v5;
}

unint64_t String.UnicodeScalarView.index(_:offsetBy:)(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a3, a4);
  if (a2 < 0)
  {
    v14 = 0;
    while (1)
    {
      if (result < 0x10000)
        goto LABEL_38;
      if ((a4 & 0x1000000000000000) == 0)
        break;
      result = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_20:
      if (--v14 <= a2)
        return result;
    }
    v15 = result >> 16;
    if ((a4 & 0x2000000000000000) != 0)
    {
      v21 = a3;
      v22 = a4 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v21 + v15 - 1) & 0xC0) == 0x80)
      {
        v17 = 0;
        do
          v19 = *((_BYTE *)&v21 + v15 + v17-- - 2) & 0xC0;
        while (v19 == 128);
        goto LABEL_33;
      }
    }
    else
    {
      v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a3 & 0x1000000000000000) == 0)
        v16 = _StringObject.sharedUTF8.getter();
      if ((*(_BYTE *)(v15 + v16 - 1) & 0xC0) == 0x80)
      {
        v17 = 0;
        do
          v18 = *(_BYTE *)(v16 + v15 - 2 + v17--) & 0xC0;
        while (v18 == 128);
LABEL_33:
        v20 = 1 - v17;
LABEL_35:
        result = ((v15 - v20) << 16) | 5;
        goto LABEL_20;
      }
    }
    v20 = 1;
    goto LABEL_35;
  }
  if (a2)
  {
    if ((a4 & 0x2000000000000000) != 0)
      v8 = HIBYTE(a4) & 0xF;
    else
      v8 = a3 & 0xFFFFFFFFFFFFLL;
    while (1)
    {
      v9 = result >> 16;
      if (result >> 16 >= v8)
        break;
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--a2)
          return result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v21 = a3;
          v22 = a4 & 0xFFFFFFFFFFFFFFLL;
          v11 = *((unsigned __int8 *)&v21 + v9);
        }
        else
        {
          v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            v10 = _StringObject.sharedUTF8.getter();
          v11 = *(unsigned __int8 *)(v10 + v9);
        }
        v12 = (char)v11;
        v13 = __clz(v11 ^ 0xFF) - 24;
        if (v12 >= 0)
          LOBYTE(v13) = 1;
        result = ((v9 + v13) << 16) | 5;
        if (!--a2)
          return result;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
  }
  return result;
}

unint64_t String.data(using:allowLossyConversion:)(uint64_t *a1, char a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t isStackAllocationSafe;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  _BYTE *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  unint64_t v55;
  char v56;
  unint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  ValueMetadata *v64;
  _UNKNOWN **v65;
  _BYTE *v66;
  unint64_t v67;
  uint64_t v68;

  v5 = a4;
  v6 = a3;
  v68 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  if (*a1 == 4)
  {
    swift_bridgeObjectRetain();
    return specialized Data.init<A>(_:)(v6, v5);
  }
  if (v7 == 7 || v7 == 1)
  {
    if ((a2 & 1) != 0)
    {
      if ((a4 & 0x1000000000000000) == 0)
      {
        if ((a4 & 0x2000000000000000) != 0)
          v12 = HIBYTE(a4) & 0xF;
        else
          v12 = a3 & 0xFFFFFFFFFFFFLL;
        goto LABEL_14;
      }
LABEL_123:
      v12 = String.UTF8View._foreignCount()();
LABEL_14:
      swift_bridgeObjectRetain();
      specialized Data.init(capacity:initializingWith:)(v12);
      v9 = v13;
      swift_bridgeObjectRelease();
      return v9;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      v54 = String.UTF8View._foreignCount()();
LABEL_130:
      v62 = specialized Data.init(count:)(v54);
      v63 = v55;
      swift_bridgeObjectRetain();
      specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)&v62);
      v9 = v62;
      if ((v56 & 1) != 0)
        return v9;
      outlined consume of Data._Representation(v62, v63);
      return 0;
    }
    if ((a4 & 0x2000000000000000) != 0)
    {
      v22 = HIBYTE(a4) & 0xF;
      v62 = a3;
      v63 = a4 & 0xFFFFFFFFFFFFFFLL;
      if (v22)
      {
        if (v22 >= 8)
        {
          if ((a3 & 0x8080808080808080) != 0)
            return 0;
          if (v22 <= 8)
            goto LABEL_127;
          v23 = 8;
          if ((a4 & 0x80) != 0)
            return 0;
        }
        else
        {
          v23 = 0;
          if ((a3 & 0x80) != 0)
            return 0;
        }
        v24 = v23 + 1;
        while (v24 < v22)
        {
          v25 = *((char *)&v62 + v24++);
          if (v25 < 0)
            return 0;
        }
      }
LABEL_127:
      if ((v5 & 0x2000000000000000) != 0)
        v54 = HIBYTE(v5) & 0xF;
      else
        v54 = v6 & 0xFFFFFFFFFFFFLL;
      goto LABEL_130;
    }
    if ((a3 & 0x1000000000000000) != 0)
    {
      v14 = (char *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v15 = a3 & 0xFFFFFFFFFFFFLL;
      if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_127;
      goto LABEL_19;
    }
LABEL_126:
    v14 = (char *)_StringObject.sharedUTF8.getter();
    if (!v15)
      goto LABEL_127;
LABEL_19:
    if ((v14 & 7) != 0)
    {
      if (v15 < 1)
        goto LABEL_127;
      if (*v14 < 0)
        return 0;
      v16 = 1;
      v17 = 9;
      if (v15 >= 2 && (((_BYTE)v14 + 1) & 7) != 0)
      {
        if (v14[1] < 0)
          return 0;
        v16 = 2;
        v17 = 10;
        if (v15 >= 3 && (((_BYTE)v14 + 2) & 7) != 0)
        {
          if (v14[2] < 0)
            return 0;
          v16 = 3;
          v17 = 11;
          if (v15 >= 4 && (((_BYTE)v14 + 3) & 7) != 0)
          {
            if (v14[3] < 0)
              return 0;
            v16 = 4;
            v17 = 12;
            if (v15 >= 5 && (((_BYTE)v14 + 4) & 7) != 0)
            {
              if (v14[4] < 0)
                return 0;
              v16 = 5;
              v17 = 13;
              if (v15 >= 6 && (((_BYTE)v14 + 5) & 7) != 0)
              {
                if (v14[5] < 0)
                  return 0;
                v16 = 6;
                v17 = 14;
                if (v15 >= 7 && (((_BYTE)v14 + 6) & 7) != 0)
                {
                  if (v14[6] < 0)
                    return 0;
                  v16 = 7;
                  v17 = 15;
                  if (v15 >= 8 && (((_BYTE)v14 - 1) & 7) != 0)
                  {
                    if (v14[7] < 0)
                      return 0;
                    v16 = 8;
                    v17 = 16;
                    if (v15 >= 9 && (v14 & 7) != 0)
                      return 0;
                  }
                }
              }
            }
          }
        }
      }
      if (v15 >= v17)
        goto LABEL_108;
LABEL_111:
      if (v16 >= v15)
        goto LABEL_127;
    }
    else
    {
      if (v15 > 7)
      {
        v16 = 0;
        v17 = 8;
LABEL_108:
        while ((*(_QWORD *)&v14[v16] & 0x8080808080808080) == 0)
        {
          v39 = v17 + 8;
          v16 = v17;
          v17 = v39;
          if (v15 < v39)
          {
            v16 = v39 - 8;
            goto LABEL_111;
          }
        }
        return 0;
      }
      if (v15 <= 0)
        goto LABEL_127;
      v16 = 0;
    }
    if (v14[v16] < 0)
      return 0;
    v40 = v16 + 1;
    while (v40 < v15)
    {
      v9 = 0;
      v41 = v14[v40++];
      if (v41 < 0)
        return v9;
    }
    goto LABEL_127;
  }
  if (v7 != 2415919360)
  {
    if (v7 <= 2483028223)
    {
      if (v7 == 10)
      {
        v19 = 0;
        v18 = 65279;
        goto LABEL_49;
      }
      if (v7 == 2348810496)
      {
        if ((a2 & 1) == 0)
        {
          v64 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]);
          v65 = &protocol witness table for <A> [A];
          v62 = (uint64_t)&outlined read-only object #0 of String.data(using:allowLossyConversion:);
          v42 = __swift_project_boxed_opaque_existential_1(&v62, (uint64_t)v64);
          v43 = specialized Data._Representation.init(_:)((_BYTE *)(*v42 + 32), (_BYTE *)(*v42 + 32 + *(_QWORD *)(*v42 + 16)));
          v45 = v44;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
          v62 = 2617245952;
          v46 = String.data(using:allowLossyConversion:)(&v62, 0, v6, v5);
          v9 = v46;
          v48 = v47;
          if (v47 >> 60 == 15)
          {
            outlined consume of Data._Representation((uint64_t)v43, v45);
          }
          else
          {
            v66 = v43;
            v67 = v45;
            v64 = &type metadata for Data;
            v65 = &protocol witness table for Data;
            v62 = v46;
            v63 = v47;
            v51 = __swift_project_boxed_opaque_existential_1(&v62, (uint64_t)&type metadata for Data);
            v52 = *v51;
            v53 = v51[1];
            outlined copy of Data._Representation((uint64_t)v43, v45);
            outlined copy of Data?(v9, v48);
            specialized Data._Representation.withUnsafeBytes<A>(_:)(v52, v53);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
            outlined consume of Data?(v9, v48);
            outlined consume of Data._Representation((uint64_t)v43, v45);
            return (unint64_t)v66;
          }
          return v9;
        }
        v62 = a3;
        v63 = a4;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        v29 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v30 = objc_msgSend(v29, sel_dataUsingEncoding_allowLossyConversion_, 2348810496, 1);
LABEL_105:
        swift_unknownObjectRelease();
        if (v30)
        {
          v38 = v30;
          v9 = (uint64_t)specialized Data.init(referencing:)(v38);

          return v9;
        }
        return 0;
      }
    }
    else
    {
      if (v7 == 2617245952 || v7 == 2550137088)
      {
        v31 = HIBYTE(a4) & 0xF;
        if ((a4 & 0x2000000000000000) == 0)
          v31 = a3;
        v32 = 7;
        if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
          v32 = 11;
        isStackAllocationSafe = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v32 | (v31 << 16), a3, a4);
        if ((isStackAllocationSafe - 0x2000000000000000) >> 62 != 3)
          goto LABEL_142;
        v34 = 4 * isStackAllocationSafe;
        if (((4 * isStackAllocationSafe) & 0x8000000000000000) != 0)
          goto LABEL_143;
        if (v34 <= 1024
          || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
        {
          MEMORY[0x1E0C80A78](isStackAllocationSafe);
          v36 = (char *)&v61 - v35;
          if ((v7 | 0x4000000) == 0x9C000100)
          {
            swift_bridgeObjectRetain();
            specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v62, (uint64_t)v36, v34, v6, v5, v7 != 2617245952);
            swift_bridgeObjectRelease();
            return specialized Data.init<A>(_:)((uint64_t)v36, v34);
          }
        }
        else
        {
          v49 = swift_slowAlloc();
          if ((v7 | 0x4000000) == 0x9C000100)
          {
            v50 = v49;
            swift_bridgeObjectRetain();
            specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v62, v50, v34, v6, v5, v7 != 2617245952);
            swift_bridgeObjectRelease();
            v9 = specialized Data.init<A>(_:)(v50, v34);
            MEMORY[0x186DA9E78](v50, -1, -1);
            return v9;
          }
        }
        goto LABEL_145;
      }
      if (v7 == 2483028224)
        goto LABEL_48;
    }
    v62 = a3;
    v63 = a4;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    v37 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = objc_msgSend(v37, sel_dataUsingEncoding_allowLossyConversion_, v7, a2 & 1);
    goto LABEL_105;
  }
LABEL_48:
  v18 = 0;
  v19 = 1;
LABEL_49:
  swift_bridgeObjectRetain();
  v20 = String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
  {
    v21 = calloc(v20, 2uLL);
    if (v21)
    {
      v19 = (unint64_t)v21;
      if ((v5 & 0x1000000000000000) == 0)
      {
        if ((v20 & 0x8000000000000000) == 0)
        {
          String._copyUTF16CodeUnits(into:range:)();
LABEL_54:
          v4 = v20;
LABEL_73:
          v5 = 2 * v4;
          if (v7 == 2415919360)
          {
            if (v4)
            {
              v26 = 0;
              v27 = 2 * v4;
              while (!__OFADD__(v26, 1))
              {
                *(_WORD *)(v19 + 2 * v26) = bswap32(*(unsigned __int16 *)(v19 + 2 * v26)) >> 16;
                ++v26;
                v27 -= 2;
                if (!v27)
                  goto LABEL_78;
              }
              __break(1u);
              goto LABEL_123;
            }
LABEL_81:
            free((void *)v19);
            return 0;
          }
LABEL_78:
          if (v4 + 0x4000000000000000 >= 0)
          {
            if (v5)
            {
              type metadata accessor for __DataStorage();
              swift_allocObject();
              v28 = (_QWORD *)__DataStorage.init(bytes:length:copy:deallocator:offset:)(v19, 2 * v4, 0, (void (*)(unint64_t, uint64_t))closure #2 in Data.Deallocator._deallocator.getter, 0, 0);
              return specialized Data._Representation.init(_:count:)(v28, 2 * v4);
            }
            goto LABEL_81;
          }
          __break(1u);
          goto LABEL_126;
        }
        goto LABEL_137;
      }
LABEL_135:
      swift_bridgeObjectRetain_n();
      specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v62, v19, v20, v6, v5);
      *(Swift::UInt16_optional *)&v58 = String.UTF16View.Iterator.next()();
      v6 = v58;
      v4 = v63;
      swift_bridgeObjectRelease();
      v21 = (_WORD *)swift_bridgeObjectRelease();
      if ((v6 & 0x10000) != 0)
        goto LABEL_54;
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
  }
  else
  {
    v4 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_135;
    }
    v21 = calloc(v20 + 1, 2uLL);
    if (v21)
    {
      v19 = (unint64_t)v21;
      *v21 = v18;
      v18 = v20;
      if (v4 >= 1)
      {
        ++v21;
        if ((v5 & 0x1000000000000000) == 0)
        {
          if ((v20 & 0x8000000000000000) == 0)
          {
            String._copyUTF16CodeUnits(into:range:)();
            goto LABEL_73;
          }
          goto LABEL_141;
        }
LABEL_139:
        v59 = (uint64_t)v21;
        swift_bridgeObjectRetain_n();
        specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v62, v59, v18, v6, v5);
        *(Swift::UInt16_optional *)&v60 = String.UTF16View.Iterator.next()();
        v6 = v60;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v6 & 0x10000) != 0)
          goto LABEL_73;
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
      }
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }
  }
  __break(1u);
LABEL_145:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t StringProtocol._lineBounds<A>(around:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return StringProtocol._lineBounds<A>(around:)(a1, a2, a3, a4, a5, 0xFuLL);
}

unint64_t StringProtocol._paragraphBounds<A>(around:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return StringProtocol._lineBounds<A>(around:)(a1, a2, a3, a4, a5, 7uLL);
}

unint64_t StringProtocol._lineBounds<A>(around:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t result;
  void (*v20)(char *, uint64_t);
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  void (*v26)(char *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD v58[3];
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t AssociatedTypeWitness;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD v75[2];
  _BYTE v76[16];
  _BYTE v77[16];
  _BYTE v78[16];
  _BYTE v79[16];
  char *v80;
  char v81;
  unint64_t v82;
  char v83;

  v65 = a5;
  v62 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v63 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v60 = (char *)v58 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v58 - v15;
  if (a2 == MEMORY[0x1E0DEA968])
  {
    v39 = a6;
    v40 = v6[1];
    v73 = *v6;
    v41 = v73;
    v74 = v40;
    lazy protocol witness table accessor for type String.UnicodeScalarView and conformance String.UnicodeScalarView();
    swift_bridgeObjectRetain();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    v42 = v67;
    v43 = _StringGuts.validateInclusiveScalarIndex(_:)(v66, v41, v40);
    result = specialized BidirectionalCollection<>._alignIndex(roundingUp:)(v42, v41, v40);
    if (result >> 14 < v43 >> 14)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v44 = result;
    v45 = String.subscript.getter();
    v47 = v46;
    v49 = v48;
    v51 = v50;
    swift_bridgeObjectRelease();
    specialized BidirectionalCollection<>._getBlock(for:in:)(v39, v43, v44, v45, v47, v49, v51, (uint64_t)&v73);
    v6 = (unint64_t *)&demangling cache variable for type metadata for String.Index?;
    outlined init with take of LocalePreferences?((uint64_t)&v73, (uint64_t)v79, &demangling cache variable for type metadata for String.Index?);
    result = outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)&v80, &demangling cache variable for type metadata for String.Index?);
    if ((v81 & 1) != 0)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v38 = (unint64_t)v80;
    outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v78, &demangling cache variable for type metadata for String.Index?);
    result = outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)&v82, &demangling cache variable for type metadata for String.Index?);
    if ((v83 & 1) != 0)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v77, &demangling cache variable for type metadata for String.Index?);
    outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)&v66, &demangling cache variable for type metadata for String.Index?);
    if ((v67 & 1) == 0)
    {
LABEL_18:
      swift_bridgeObjectRelease();
      return v38;
    }
    __break(1u);
  }
  else
  {
    v59 = a6;
    if (a2 != MEMORY[0x1E0DEBAF0])
    {
      MEMORY[0x186DA50A8](a2, a4, v14);
      swift_getAssociatedConformanceWitness();
      dispatch thunk of RangeExpression.relative<A>(to:)();
      v17 = v74;
      v66 = v73;
      dispatch thunk of BidirectionalCollection.index(_:offsetBy:)();
      v18 = v73;
      result = BidirectionalCollection<>._alignIndex(roundingUp:)(v17, v12);
      if (result >> 14 < v18 >> 14)
      {
        __break(1u);
      }
      else
      {
        v20 = *(void (**)(char *, uint64_t))(v13 + 8);
        v65 = result;
        v20(v16, v12);
        v21 = v18;
        v22 = v60;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        v23 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
        dispatch thunk of Collection.startIndex.getter();
        v66 = v73;
        v82 = v21;
        v24 = AssociatedTypeWitness;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v58[2] = dispatch thunk of Collection.distance(from:to:)();
        v26 = *(void (**)(char *, uint64_t))(v61 + 8);
        v26(v22, v24);
        v61 = a4;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        v73 = v21;
        v66 = v65;
        v58[1] = AssociatedConformanceWitness;
        dispatch thunk of Collection.distance(from:to:)();
        v58[0] = v26;
        v26(v22, v24);
        (*(void (**)(char *, unint64_t *, uint64_t))(v62 + 16))(v63, v6, a2);
        v65 = v23;
        v27 = Substring.init<A>(_:)();
        v29 = v28;
        v31 = v30;
        v33 = v32;
        v34 = Substring.UTF8View.index(_:offsetBy:)();
        swift_bridgeObjectRetain();
        v35 = Substring.UTF8View.index(_:offsetBy:)();
        result = swift_bridgeObjectRelease();
        if (v35 >> 14 >= v34 >> 14)
        {
          swift_bridgeObjectRetain();
          specialized BidirectionalCollection<>._getBlock(for:in:)(v59, v34, v35, v27, v29, v31, v33, (uint64_t)&v73);
          outlined init with take of LocalePreferences?((uint64_t)&v73, (uint64_t)v79, &demangling cache variable for type metadata for String.Index?);
          result = outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)&v80, &demangling cache variable for type metadata for String.Index?);
          if ((v81 & 1) == 0)
          {
            v63 = v80;
            outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v78, &demangling cache variable for type metadata for String.Index?);
            result = outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)&v82, &demangling cache variable for type metadata for String.Index?);
            if ((v83 & 1) == 0)
            {
              outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v77, &demangling cache variable for type metadata for String.Index?);
              result = outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)&v66, &demangling cache variable for type metadata for String.Index?);
              if ((v67 & 1) == 0)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v59 = Substring.UTF8View.distance(from:to:)();
                v62 = Substring.UTF8View.distance(from:to:)();
                swift_bridgeObjectRelease();
                v63 = (char *)Substring.UTF8View.distance(from:to:)();
                swift_bridgeObjectRelease();
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                dispatch thunk of Collection.startIndex.getter();
                v70 = v71;
                v36 = AssociatedTypeWitness;
                dispatch thunk of Collection.index(_:offsetBy:)();
                v37 = (void (*)(char *, uint64_t))v58[0];
                ((void (*)(char *, uint64_t))v58[0])(v22, v36);
                v59 = v72;
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                dispatch thunk of Collection.startIndex.getter();
                v69 = v70;
                dispatch thunk of Collection.index(_:offsetBy:)();
                v37(v22, v36);
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                v38 = v59;
                dispatch thunk of Collection.startIndex.getter();
                v68 = v69;
                dispatch thunk of Collection.index(_:offsetBy:)();
                v37(v22, v36);
                return v38;
              }
              goto LABEL_26;
            }
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
      }
      __break(1u);
      goto LABEL_22;
    }
  }
  v53 = v6[1];
  v55 = v6[2];
  v54 = v6[3];
  v73 = *v6;
  v52 = v73;
  v74 = v53;
  v75[0] = v55;
  v75[1] = v54;
  lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
  swift_bridgeObjectRetain();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v56 = v67;
  v57 = _StringGuts.validateInclusiveScalarIndex(_:)(v66, v55, v54);
  result = specialized BidirectionalCollection<>._alignIndex(roundingUp:)(v56, v52, v53, v55, v54);
  if (result >> 14 < v57 >> 14)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized BidirectionalCollection<>._getBlock(for:in:)(v59, v57, result, v52, v53, v55, v54, (uint64_t)&v73);
  outlined init with take of LocalePreferences?((uint64_t)&v73, (uint64_t)v79, &demangling cache variable for type metadata for String.Index?);
  result = outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)&v80, &demangling cache variable for type metadata for String.Index?);
  if ((v81 & 1) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v38 = (unint64_t)v80;
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v78, &demangling cache variable for type metadata for String.Index?);
  result = outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)&v82, &demangling cache variable for type metadata for String.Index?);
  if ((v83 & 1) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v77, &demangling cache variable for type metadata for String.Index?);
  result = outlined init with take of LocalePreferences?((uint64_t)v77, (uint64_t)&v66, &demangling cache variable for type metadata for String.Index?);
  if ((v67 & 1) == 0)
    goto LABEL_18;
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  int *v1;
  uint64_t v2;
  int *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v7 = *v1;
    v6 = v3[1];
    if ((int)v6 < (int)v7)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    v8 = *((_QWORD *)v3 + 1);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 40);
      v11 = __OFSUB__(v7, v10);
      v12 = v7 - v10;
      if (v11)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      v13 = v9 + v12;
    }
    else
    {
      v13 = 0;
    }
    v14 = v6 - v7;
    type metadata accessor for __DataStorage();
    swift_allocObject();
    *((_QWORD *)v3 + 1) = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v14, 1, 0, 0, v7);
    result = swift_release();
  }
  v15 = *v3;
  v16 = v3[1];
  if ((int)v16 < (int)v15)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v17 = (_QWORD *)*((_QWORD *)v3 + 1);
  v18 = v17[2];
  if (!v18)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  v19 = v17[5];
  v11 = __OFSUB__(v15, v19);
  v20 = v15 - v19;
  if (v11)
    goto LABEL_17;
  v21 = v16 - v15;
  if (v17[3] < v21)
    v21 = v17[3];
  result = (uint64_t)a1(&v22, v18 + v20, v18 + v20 + v21);
  if (!v2)
    return v22;
  return result;
}

uint64_t specialized Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v6 = v1[1];
    v8 = *(_QWORD *)(*v1 + 16);
    v7 = *(_QWORD *)(*v3 + 24);
    v9 = *(_QWORD *)(v6 + 16);
    if (v9)
    {
      v10 = *(_QWORD *)(v6 + 40);
      v11 = __OFSUB__(v8, v10);
      v12 = v8 - v10;
      if (v11)
      {
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        return result;
      }
      v13 = v9 + v12;
      v14 = v7 - v8;
      if (!__OFSUB__(v7, v8))
        goto LABEL_5;
    }
    else
    {
      v13 = 0;
      v14 = v7 - v8;
      if (!__OFSUB__(v7, v8))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        swift_allocObject();
        v3[1] = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v14, 1, 0, 0, v8);
        swift_release();
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_6:
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v15 = *(_QWORD *)(*v3 + 16);
    v16 = *(_QWORD *)(*v3 + 24);
    type metadata accessor for Data.RangeReference();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v15;
    *(_QWORD *)(v17 + 24) = v16;
    *v3 = v17;
    result = swift_release();
  }
  v18 = (_QWORD *)v3[1];
  v19 = v18[2];
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(*v3 + 16);
  v21 = v18[5];
  v11 = __OFSUB__(v20, v21);
  v22 = v20 - v21;
  if (v11)
    goto LABEL_19;
  v23 = *(_QWORD *)(*v3 + 24);
  v11 = __OFSUB__(v23, v20);
  v24 = v23 - v20;
  if (v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v25 = v18[3];
  if (v25 >= v24)
    v25 = v24;
  result = (uint64_t)a1(&v26, v19 + v22, v19 + v22 + v25);
  if (!v2)
    return v26;
  return result;
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)()
{
  __asm { BR              X14 }
}

_QWORD *sub_181EEDA10@<X0>(uint64_t a1@<X8>)
{
  _QWORD *(*v1)(uint64_t *__return_ptr, uint64_t *, char *);
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;

  v7 = v2;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  v9 = BYTE4(a1);
  v10 = BYTE5(a1);
  v11 = BYTE6(a1);
  result = v1(&v12, &v7, (char *)&v7 + BYTE6(a1));
  v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v3 = v7;
  v3[1] = v6;
  if (!v4)
    return (_QWORD *)v12;
  return result;
}

uint64_t closure #1 in String.data(using:allowLossyConversion:)(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a3) & 0xF;
  else
    v5 = a2 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return result;
  v9 = (_QWORD *)result;
  v19 = a3 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if ((a3 & 0x1000000000000000) != 0)
    {
      v12 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a3 & 0x2000000000000000) != 0)
      {
        v20 = a2;
        v21 = v19;
      }
      else if ((a2 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      v12 = _decodeScalar(_:startingAt:)();
    }
    v14 = v13;
    if (v12 > 0x7F)
      break;
    v16 = v9[2];
    v17 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v20, (_BYTE *)(*v9 + v16), v9[1] - v16, v12);
    v4 = v21;
    if (v20 <= 0x7F)
    {
      if (v21 != 1)
        goto LABEL_31;
    }
    else if (v20 >= 0x800)
    {
      if (WORD1(v20))
      {
        if (v21 != 4)
        {
          v18 = 4;
          goto LABEL_32;
        }
      }
      else if (v21 != 3)
      {
        v18 = 3;
        goto LABEL_32;
      }
    }
    else if (v21 != 2)
    {
      v18 = 2;
      goto LABEL_32;
    }
    v11 = v17 + v16;
LABEL_8:
    v9[2] = v11;
    v10 += v14;
    if (v10 >= v5)
      return swift_bridgeObjectRelease();
  }
  v15 = v9[2];
  if (v15 < v9[1])
  {
    *(_BYTE *)(*v9 + v15) = a4;
    v11 = v15 + 1;
    goto LABEL_8;
  }
  __break(1u);
LABEL_31:
  v18 = 1;
LABEL_32:
  result = Unicode.Scalar.UTF8View.subscript.getter();
  if (v4 < v18)
    __break(1u);
  __break(1u);
  return result;
}

unint64_t StringProtocol.lineRange<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return StringProtocol.lineRange<A>(for:)(a1, a2, a3, a4, a5, 0xFuLL);
}

unint64_t StringProtocol.paragraphRange<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return StringProtocol.lineRange<A>(for:)(a1, a2, a3, a4, a5, 7uLL);
}

unint64_t StringProtocol.lineRange<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t result;
  unint64_t v7;

  result = StringProtocol._lineBounds<A>(around:)(a1, a2, a3, a4, a5, a6);
  if (v7 >> 14 < result >> 14)
    __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  _QWORD aBlock[6];
  uint64_t v15;
  char v16;

  v4 = result;
  if (!a2)
  {
    v7 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v7 = 0;
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    if (objc_msgSend(v3, sel_length))
    {
      v13 = a3;
      v8 = a3 - 1;
      while (1)
      {
        v16 = 0;
        v15 = v7;
        v9 = (_QWORD *)swift_allocObject();
        v9[2] = &v15;
        v9[3] = v7;
        v9[4] = &v16;
        v10 = swift_allocObject();
        *(_QWORD *)(v10 + 16) = _sSo6NSDataC10FoundationEys5UInt8VSicigySV_So8_NSRangeVSpy10ObjectiveC8ObjCBoolVGtXEfU_TA_0;
        *(_QWORD *)(v10 + 24) = v9;
        aBlock[4] = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        aBlock[5] = v10;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        aBlock[3] = &block_descriptor_23;
        v11 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v3, sel_enumerateByteRangesUsingBlock_, v11);
        _Block_release(v11);
        LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
        result = (_QWORD *)swift_release();
        if ((v11 & 1) != 0)
          break;
        v12 = v16;
        swift_release();
        result = objc_msgSend(v3, sel_length);
        if (v7 >= (uint64_t)result)
          goto LABEL_16;
        *(_BYTE *)(a2 + v7) = v12;
        if (v8 == v7)
        {
          v7 = v13;
          goto LABEL_14;
        }
        if ((id)++v7 == objc_msgSend(v3, sel_length))
          goto LABEL_14;
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_14:
    *v4 = v3;
    v4[1] = v7;
    return (_QWORD *)v7;
  }
LABEL_17:
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  void *v3;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t isClassOrObjCExistentialType;
  uint64_t v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  _QWORD *v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[12];
  _OWORD v45[2];

  type metadata accessor for NSDictionary.Iterator();
  v7 = (_OWORD *)swift_allocObject();
  v8 = swift_unknownObjectRetain();
  NSFastEnumerationIterator.init(_:)(v8, (uint64_t)v44);
  v9 = v44[11];
  v7[11] = v44[10];
  v7[12] = v9;
  v7[13] = v45[0];
  *(_OWORD *)((char *)v7 + 217) = *(_OWORD *)((char *)v45 + 9);
  v10 = v44[7];
  v7[7] = v44[6];
  v7[8] = v10;
  v11 = v44[9];
  v7[9] = v44[8];
  v7[10] = v11;
  v12 = v44[3];
  v7[3] = v44[2];
  v7[4] = v12;
  v13 = v44[5];
  v7[5] = v44[4];
  v7[6] = v13;
  v14 = v44[1];
  v7[1] = v44[0];
  v7[2] = v14;

  if (!a2 || !a3)
    goto LABEL_17;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v30 = a1;
    NSFastEnumerationIterator.next()((uint64_t)&v32);
    if (v33)
    {
      v15 = 0;
      v31 = &v38;
      v29[3] = a3;
      v16 = a3 - 1;
      do
      {
        outlined init with take of Any(&v32, &v34);
        outlined init with copy of Any((uint64_t)&v34, (uint64_t)&v36);
        if (!*((_QWORD *)v7 + 2))
          goto LABEL_20;
        objc_opt_self();
        v17 = (void *)swift_dynamicCastObjCClassUnconditional();
        v18 = v35;
        v19 = __swift_project_boxed_opaque_existential_1(&v34, v35);
        swift_unknownObjectRetain();
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        if ((isClassOrObjCExistentialType & 1) != 0)
        {
          if (*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) != 8)
          {
            __break(1u);
            goto LABEL_19;
          }
          v21 = *v19;
          swift_unknownObjectRetain();
        }
        else
        {
          v29[2] = v29;
          v26 = MEMORY[0x1E0C80A78](isClassOrObjCExistentialType);
          v29[1] = (char *)v29 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(__n128))(v28 + 16))(v26);
          v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        }
        v22 = objc_msgSend(v17, sel_objectForKey_, v21);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (!v22)
          goto LABEL_21;
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v34);
        outlined init with take of Any(&v32, v31);
        v24 = v38;
        v23 = v39;
        v42 = v38;
        v43 = v39;
        v25 = v37;
        v40 = v36;
        v41 = v37;
        *a2 = v36;
        a2[1] = v25;
        a2[2] = v24;
        a2[3] = v23;
        if (v16 == v15)
          goto LABEL_16;
        a2 += 4;
        NSFastEnumerationIterator.next()((uint64_t)&v32);
        ++v15;
      }
      while (v33);
    }
    outlined destroy of Any?((uint64_t)&v32, &demangling cache variable for type metadata for Any?);
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    outlined destroy of Any?((uint64_t)&v36, &demangling cache variable for type metadata for (key: Any, value: Any)?);
LABEL_16:
    a1 = v30;
LABEL_17:
    *a1 = v7;
    return;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  if (!a2)
    goto LABEL_9;
  if (!a3)
  {
LABEL_10:
    v6 = a6;
LABEL_11:
    *result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = v6;
    return (_QWORD *)a3;
  }
  v6 = a6 + a5;
  v7 = __OFADD__(a6, a5);
  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((v7 & 1) == 0)
  {
    if (v6 == a6)
    {
LABEL_9:
      a3 = 0;
      goto LABEL_10;
    }
    if (v6 < a6)
    {
LABEL_18:
      __break(1u);
LABEL_19:
      v6 = a6 + v7 + 1;
      goto LABEL_11;
    }
    v7 = 0;
    while (a5 != v7)
    {
      *(_BYTE *)(a2 + v7) = *(_BYTE *)(a4 + v7);
      if (a3 - 1 == v7)
        goto LABEL_19;
      if (a5 - 1 == v7)
      {
        a3 = a5;
        goto LABEL_11;
      }
      ++v7;
      if (a6 + v7 < a6)
        goto LABEL_18;
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, unsigned __int8 a6)
{
  int v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (!a2)
    goto LABEL_6;
  if (!a3)
  {
    v8 = 0;
    goto LABEL_29;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  v7 = a4;
  if (a6 >= 2u)
  {
    if (a6 == 3)
    {
LABEL_6:
      v8 = 0;
      a3 = 0;
LABEL_29:
      *(_QWORD *)result = a4;
      *(_QWORD *)(result + 8) = a5;
      *(_BYTE *)(result + 16) = a6;
      *(_QWORD *)(result + 24) = v8;
      return a3;
    }
    v8 = a4[2];
    if (!v8)
    {
      a3 = 0;
      goto LABEL_29;
    }
    v7 = (_QWORD *)a4[4];
  }
  *a2 = v7;
  if (a3 == 1)
  {
    v8 = 1;
    goto LABEL_29;
  }
  if (!a6)
  {
    v8 = 1;
    a3 = 1;
    goto LABEL_29;
  }
  v9 = a5;
  if (a6 != 1)
  {
    v8 = a4[2];
    if (v8 == 1)
    {
LABEL_15:
      a3 = v8;
      goto LABEL_29;
    }
    if (!v8)
      goto LABEL_38;
    v9 = a4[5];
  }
  a2[1] = v9;
  if (a3 == 2)
  {
    v8 = 2;
    goto LABEL_29;
  }
  if (a6 != 2)
  {
    v8 = 2;
    goto LABEL_28;
  }
  v8 = a4[2];
  if (v8 == 2)
  {
LABEL_28:
    a3 = 2;
    goto LABEL_29;
  }
  if (v8 < 3)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  a2[2] = a4[6];
  if (a3 == 3)
  {
    v8 = 3;
    goto LABEL_29;
  }
  v10 = 0;
  while (1)
  {
    v6 = a6;
    if (a6 != 2)
      break;
    v6 = v10 + 3;
    v11 = a4[2];
    if (v10 + 3 == v11)
    {
      v8 = v10 + 3;
      goto LABEL_15;
    }
    if (v10 + 3 >= v11)
      goto LABEL_38;
    a2[v10 + 3] = a4[v10 + 7];
    if (a3 - 3 == ++v10)
    {
      v8 = a3;
      goto LABEL_29;
    }
  }
LABEL_39:
  if (!v6)
    __break(1u);
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24[6];

  v24[5] = a4;
  result = IndexSet.startIndex.getter(v24);
  v9 = v24[0];
  v10 = v24[1];
  v11 = v24[2];
  v12 = v24[3];
  v23 = v24[4];
  if (!a2)
  {
    v13 = 0;
    goto LABEL_36;
  }
  if (!a3)
  {
LABEL_33:
    v13 = a3;
LABEL_36:
    *a1 = a4;
    a1[1] = v9;
    a1[2] = v10;
    a1[3] = v11;
    a1[4] = v12;
    a1[5] = v23;
    return v13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v13 = 0;
    while (1)
    {
      v14 = v9;
      result = (uint64_t)objc_msgSend(*(id *)(a4 + 16), sel_rangeCount);
      if (result < 1)
      {
        if (!v14)
        {
          v9 = 0;
          goto LABEL_36;
        }
      }
      else
      {
        v15 = *(_BYTE *)(a4 + 24);
        result = (uint64_t)objc_msgSend(*(id *)(a4 + 16), sel_rangeAtIndex_, result - 1);
        v17 = result + v16;
        v18 = __OFADD__(result, v16);
        if ((v15 & 1) != 0)
        {
          if (v18)
            goto LABEL_39;
          if (v17 < result)
            goto LABEL_40;
        }
        else
        {
          if (v18)
            goto LABEL_41;
          if (v17 < result)
            goto LABEL_42;
        }
        if (v14 == v17)
        {
          v9 = v14;
          goto LABEL_36;
        }
      }
      v9 = v14 + 1;
      if (__OFADD__(v14, 1))
        break;
      if (v9 == v11)
      {
        v19 = v12 + 1;
        if (__OFADD__(v12, 1))
          goto LABEL_38;
        v9 = v11;
        if (v19 != v23)
        {
          v20 = *(_BYTE *)(a4 + 24);
          result = (uint64_t)objc_msgSend(*(id *)(a4 + 16), sel_rangeAtIndex_, v19);
          v10 = result;
          v11 = result + v21;
          v22 = __OFADD__(result, v21);
          if ((v20 & 1) != 0)
          {
            if (v22)
              goto LABEL_43;
            v12 = v19;
            v9 = result;
            if (v11 < result)
              goto LABEL_44;
          }
          else
          {
            if (v22)
              goto LABEL_45;
            v12 = v19;
            v9 = result;
            if (v11 < result)
            {
              __break(1u);
              goto LABEL_33;
            }
          }
        }
      }
      *(_QWORD *)(a2 + 8 * v13++) = v14;
      if (a3 == v13)
        goto LABEL_33;
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  uint64_t v19;

  v9 = result;
  if (!a2)
    goto LABEL_5;
  v10 = a3;
  if (!a3)
    goto LABEL_6;
  if (a3 < 0)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  if (a5 != a4)
  {
    v12 = a2;
    v19 = a5 - a4;
    v13 = 1;
    v14 = a4;
    while (1)
    {
      v15 = *(_BYTE *)(a6 + 24);
      result = objc_msgSend(*(id *)(a6 + 16), sel_rangeAtIndex_, v14);
      v17 = (char *)result + v16;
      v18 = __OFADD__(result, v16);
      if ((v15 & 1) != 0)
      {
        if (v18)
          goto LABEL_26;
        if ((uint64_t)v17 < (uint64_t)result)
          goto LABEL_27;
      }
      else
      {
        if (v18)
          goto LABEL_28;
        if ((uint64_t)v17 < (uint64_t)result)
          goto LABEL_29;
      }
      if ((uint64_t)v17 < (uint64_t)result)
        break;
      if (v14 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_25;
      *v12 = result;
      v12[1] = v17;
      if (v10 == v13)
      {
        v11 = v14 + 1;
        goto LABEL_7;
      }
      ++v14;
      ++v13;
      v12 += 2;
      if (a5 == v14)
      {
        v11 = a5;
        v10 = v19;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_5:
  v10 = 0;
LABEL_6:
  v11 = a4;
LABEL_7:
  *v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = v11;
  return (_QWORD *)v10;
}

void specialized Sequence._copySequenceContents(initializing:)(char *a1, double *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  __int128 v26;
  _BYTE v27[24];
  _OWORD v28[7];
  uint64_t v29;
  uint64_t v30;
  _OWORD __src[38];
  _BYTE v32[24];

  v7 = *v3;
  v8 = *(_OWORD *)(v3 + 11);
  v28[4] = *(_OWORD *)(v3 + 9);
  v28[5] = v8;
  v28[6] = *(_OWORD *)(v3 + 13);
  v29 = v3[15];
  v9 = *(_OWORD *)(v3 + 3);
  v28[0] = *(_OWORD *)(v3 + 1);
  v28[1] = v9;
  v10 = *(_OWORD *)(v3 + 7);
  v28[2] = *(_OWORD *)(v3 + 5);
  v28[3] = v10;
  outlined init with take of LocalePreferences?((uint64_t)(v3 + 16), (uint64_t)v32, &demangling cache variable for type metadata for Range<Date>?);
  v30 = v7;
  outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v27, &demangling cache variable for type metadata for Range<Date>?);
  Calendar.DatesByRecurring.Iterator.init(start:matching:range:)((uint64_t)&v30, (uint64_t)v28, (uint64_t)v27);
  if (a2 && a3)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      if ((__src[36] & 1) != 0)
      {
LABEL_5:
        v11 = BYTE8(__src[1]);
        v12 = BYTE9(__src[1]);
        v13 = BYTE10(__src[1]);
        v14 = __src[3];
        v15 = *((_QWORD *)&__src[7] + 1);
        v16 = *((_QWORD *)&__src[9] + 1);
        v17 = *((_QWORD *)&__src[10] + 1);
        v18 = *((_QWORD *)&__src[35] + 1);
        v26 = *(_OWORD *)((char *)&__src[36] + 8);
        v19 = *((_QWORD *)&__src[37] + 1);
        LOBYTE(v28[0]) = __src[9];
        v27[0] = __src[10];
        *(_QWORD *)a1 = *(_QWORD *)&__src[0];
        *(_OWORD *)(a1 + 8) = *(_OWORD *)((char *)__src + 8);
        a1[24] = v11;
        a1[25] = v12;
        a1[26] = v13;
        *((_OWORD *)a1 + 2) = __src[2];
        a1[48] = v14;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)((char *)&__src[3] + 8);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)((char *)&__src[4] + 8);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)((char *)&__src[5] + 8);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)((char *)&__src[6] + 8);
        *((_QWORD *)a1 + 15) = v15;
        *((_OWORD *)a1 + 8) = __src[8];
        a1[144] = v28[0];
        *((_QWORD *)a1 + 19) = v16;
        a1[160] = v27[0];
        *((_QWORD *)a1 + 21) = v17;
        *((_QWORD *)a1 + 22) = *(_QWORD *)&__src[11];
        memcpy(a1 + 184, (char *)&__src[11] + 8, 0x179uLL);
        *((_QWORD *)a1 + 71) = v18;
        a1[576] = 1;
        *(_OWORD *)(a1 + 584) = v26;
        *((_QWORD *)a1 + 75) = v19;
        return;
      }
      v20 = 1;
LABEL_8:
      if (LOBYTE(__src[3]) == 1 && *((uint64_t *)&__src[10] + 1) >= *((uint64_t *)&__src[2] + 1))
        goto LABEL_5;
      v21 = (_QWORD *)*((_QWORD *)&__src[37] + 1);
      while (1)
      {
        if (v21[2])
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v22 = v21[2];
            if (!v22)
              goto LABEL_33;
          }
          else
          {
            v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
            v22 = v21[2];
            if (!v22)
              goto LABEL_33;
          }
          v23 = v22 - 1;
          v24 = *(double *)&v21[v23 + 4];
          v21[2] = v23;
          *((_QWORD *)&__src[37] + 1) = v21;
          if (__OFADD__(*((_QWORD *)&__src[10] + 1), 1))
          {
            __break(1u);
LABEL_33:
            __break(1u);
            break;
          }
          ++*((_QWORD *)&__src[10] + 1);
          if (!LOBYTE(__src[3]) && *((double *)&__src[2] + 1) < v24)
            goto LABEL_5;
          if ((__src[9] & 1) != 0)
            goto LABEL_29;
          if (*((double *)&__src[8] + 1) < v24)
            goto LABEL_5;
          if (v24 >= *(double *)&__src[8])
          {
LABEL_29:
            *a2 = v24;
            if (v20 == a3)
              goto LABEL_6;
            ++a2;
            ++v20;
            goto LABEL_8;
          }
        }
        else
        {
          Calendar.DatesByRecurring.Iterator.nextGroup()();
          v21 = (_QWORD *)*((_QWORD *)&__src[37] + 1);
          if (*(_QWORD *)(*((_QWORD *)&__src[37] + 1) + 16))
          {
            *(_QWORD *)&__src[37] = 0;
          }
          else
          {
            v25 = *(_QWORD *)&__src[37] + 1;
            if (__OFADD__(*(_QWORD *)&__src[37], 1))
              goto LABEL_35;
            ++*(_QWORD *)&__src[37];
            if (*((uint64_t *)&__src[36] + 1) < v25)
              goto LABEL_5;
          }
        }
        if ((__src[36] & 1) != 0)
          goto LABEL_5;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
  }
  else
  {
LABEL_6:
    memcpy(a1, __src, 0x260uLL);
  }
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  const void *v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  double v27;
  double v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  double v36;
  double v37;
  BOOL v38;
  char v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  char v45;
  id v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  uint64_t ObjectType;
  uint64_t v51;
  void (*v52)(__int128 *__return_ptr, uint64_t, uint64_t);
  Swift::String v53;
  Swift::String v54;
  void (*v55)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  os_unfair_lock_s *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  Swift::String v64;
  Swift::String v65;
  uint64_t v66;
  void (*v67)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v68;
  Swift::String v69;
  Swift::String v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  Swift::String v73;
  Swift::String v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v95;
  uint64_t v96;
  _BOOL4 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  _QWORD *v107;
  double v108;
  double v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  _BYTE v116[32];
  Swift::String v117;
  __int128 v118;
  _OWORD v119[2];
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  _BYTE v125[282];
  char v126;
  char v127;
  _BYTE v128[282];
  unsigned __int8 v129;
  unsigned __int8 v130[8];
  _BYTE v131[320];

  v6 = v3;
  v106 = a3;
  v107 = a2;
  v8 = (char *)(v3 + 331);
  v9 = type metadata accessor for Mirror();
  v99 = *(_QWORD *)(v9 - 8);
  v100 = v9;
  MEMORY[0x1E0C80A78](v9);
  v98 = (uint64_t)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger();
  v101 = *(_QWORD *)(v11 - 8);
  v102 = v11;
  MEMORY[0x1E0C80A78](v11);
  v103 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)v3;
  v14 = *((_QWORD *)v3 + 1);
  v15 = *((_QWORD *)v3 + 2);
  v16 = *((double *)v3 + 4);
  v108 = *((double *)v3 + 3);
  v109 = v16;
  v17 = v3 + 48;
  v18 = v6[40];
  memcpy(v131, v17, 0x11AuLL);
  v114 = v6[330];
  v19 = v6[331];
  v20 = v8[1];
  memcpy(v128, v17, sizeof(v128));
  *(_QWORD *)v125 = v13;
  *(_QWORD *)&v125[8] = v14;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v131);
  v21 = DateComponents._validate(for:)((uint64_t *)v125);
  outlined release of Calendar.DatesByAdding((uint64_t)v6);
  v22 = 1;
  v131[296] = 1;
  v131[288] = v18;
  v23 = !v21;
  v129 = v18;
  memcpy(v128, v131, sizeof(v128));
  v24 = v20;
  v127 = v19;
  v126 = v20;
  if (!v107)
  {
    v35 = v20;
    *(_OWORD *)a1 = xmmword_1820E51B0;
    *(_BYTE *)(a1 + 16) = 1;
    *(_QWORD *)(a1 + 24) = v15;
    v36 = v109;
    *(double *)(a1 + 32) = v108;
    *(double *)(a1 + 40) = v36;
    *(_BYTE *)(a1 + 48) = v18;
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v14;
    memcpy((void *)(a1 + 80), v131, 0x11AuLL);
    v25 = 0;
    *(_BYTE *)(a1 + 362) = v114;
    *(_BYTE *)(a1 + 363) = v19;
    *(_BYTE *)(a1 + 364) = v35;
    *(_QWORD *)(a1 + 368) = 100;
    *(_BYTE *)(a1 + 376) = v23;
    return v25;
  }
  v97 = !v21;
  LODWORD(v105) = v18;
  v104 = a1;
  v113 = v14;
  v25 = v106;
  v112 = v24;
  if (!v106)
  {
    v23 = -1;
    v32 = 0;
    v4 = v15;
    v37 = v108;
    v18 = v13;
    v13 = v104;
LABEL_18:
    v38 = v97;
    v125[0] = v25 == 0;
    v39 = (char)v105;
    LOBYTE(v118) = (_BYTE)v105;
    *(_QWORD *)v13 = v23;
    *(_QWORD *)(v13 + 8) = v32;
    *(_BYTE *)(v13 + 16) = v25 == 0;
    *(_QWORD *)(v13 + 24) = v4;
    v40 = v109;
    *(double *)(v13 + 32) = v37;
    *(double *)(v13 + 40) = v40;
    *(_BYTE *)(v13 + 48) = v39;
    *(_QWORD *)(v13 + 56) = v15;
    v41 = v113;
    *(_QWORD *)(v13 + 64) = v18;
    *(_QWORD *)(v13 + 72) = v41;
    memcpy((void *)(v13 + 80), v131, 0x11AuLL);
    *(_BYTE *)(v13 + 362) = v114;
    *(_BYTE *)(v13 + 363) = v19;
    *(_BYTE *)(v13 + 364) = v112;
    *(_QWORD *)(v13 + 368) = 100;
    *(_BYTE *)(v13 + 376) = v38;
    return v25;
  }
  if (v106 < 0)
  {
    __break(1u);
LABEL_56:
    swift_once();
    goto LABEL_24;
  }
  v18 = v13;
  v26 = v19;
  if (!v21)
  {
    v25 = 0;
    v5 = 0;
    v23 = -1;
    v4 = v15;
    v42 = v113;
    v43 = v108;
    v44 = v109;
    v45 = v112;
    v13 = v104;
    v29 = 1;
    goto LABEL_49;
  }
  v110 = v19;
  v111 = v13;
  v22 = 0;
  v27 = v108;
  v28 = v109;
  v25 = -1;
  v95 = 1;
  v96 = 0;
  v5 = 0;
  v4 = v15;
  v18 = 1;
  v13 = v104;
  v29 = 1;
  v30 = v111;
LABEL_6:
  v31 = v25;
  do
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    *(_QWORD *)&v115 = v30;
    *((_QWORD *)&v115 + 1) = v113;
    v117._countAndFlagsBits = v15;
    memcpy(v125, v131, sizeof(v125));
    v130[0] = v114;
    v124 = v110;
    v123 = v112;
    v122 = v4;
    v120 = v5;
    LOBYTE(v121) = v18 & 1;
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)v131);
    Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v117._countAndFlagsBits, v125, v130, &v124, &v123, (double *)&v122, (uint64_t)&v120, (uint64_t)&v118);
    outlined release of DateComponents((uint64_t)v131);
    swift_unknownObjectRelease();
    v4 = *(_QWORD *)&v119[0];
    if (BYTE8(v118) != 2)
    {
      v32 = v118;
      v18 = v111;
      if ((v105 & 1) != 0)
      {
LABEL_14:
        v25 = v106;
        v33 = v107;
        *v107 = v118;
        v34 = v95;
        if (v95 != v25)
        {
          v29 = 0;
          v18 = 0;
          v107 = v33 + 1;
          ++v95;
          v96 = v34;
          v5 = v32;
          v25 = v23;
          goto LABEL_6;
        }
        v37 = v108;
        LOBYTE(v19) = v110;
        goto LABEL_18;
      }
      v25 = v96;
      if (*(double *)&v118 >= v27)
      {
        if (*(double *)&v118 >= v28)
        {
          v42 = v113;
          v43 = v108;
          v44 = v109;
          v26 = v110;
          v25 = v96;
          v45 = v112;
          goto LABEL_49;
        }
        goto LABEL_14;
      }
LABEL_53:
      v42 = v113;
      v43 = v108;
      v44 = v109;
      v26 = v110;
      v45 = v112;
      goto LABEL_49;
    }
    ++v25;
  }
  while (v23 < 100);
  if (v31 + 1 > 100)
    v23 = v31 + 1;
  else
    v23 = 100;
  v130[0] = v29;
  v18 = v111;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v131);
  if (one-time initialization token for log != -1)
    goto LABEL_56;
LABEL_24:
  v46 = (id)static Calendar.log;
  Logger.init(_:)();
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v131);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v131);
  v47 = Logger.logObject.getter();
  v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    v97 = v48;
    v49 = swift_slowAlloc();
    v95 = swift_slowAlloc();
    v122 = v95;
    *(_DWORD *)v49 = 134350338;
    *(_QWORD *)v125 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v106 = v49;
    *(_WORD *)(v49 + 12) = 2082;
    *(_QWORD *)v125 = 0;
    *(_QWORD *)&v125[8] = 0xE000000000000000;
    swift_unknownObjectRetain();
    _StringGuts.grow(_:)(72);
    ObjectType = swift_getObjectType();
    v51 = v113;
    v52 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v113 + 24);
    swift_unknownObjectRetain();
    v52(&v118, ObjectType, v51);
    swift_unknownObjectRelease();
    LOBYTE(v115) = v118;
    _print_unlocked<A, B>(_:_:)();
    v53._countAndFlagsBits = 10272;
    v53._object = (void *)0xE200000000000000;
    String.append(_:)(v53);
    *(_QWORD *)&v118 = v18;
    *((_QWORD *)&v118 + 1) = v51;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
    _print_unlocked<A, B>(_:_:)();
    v54._countAndFlagsBits = 0x656C61636F6C2029;
    v54._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v54);
    v55 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v51 + 32);
    swift_unknownObjectRetain();
    v55(&v118, ObjectType, v51);
    v105 = v47;
    if ((_QWORD)v118)
    {
      v56 = *((_QWORD *)&v118 + 1);
      swift_unknownObjectRelease();
    }
    else
    {
      if (one-time initialization token for cache != -1)
        swift_once();
      v57 = static LocaleCache.cache + 16;
      v58 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
      swift_retain_n();
      os_unfair_lock_lock(v58);
      closure #1 in LocaleCache.fixed(_:)(v57, 0, 0xE000000000000000, &v115);
      if (v22)
      {
        outlined release of DateComponents((uint64_t)v131);
        swift_unknownObjectRelease();
        os_unfair_lock_unlock(v58);
        __break(1u);
        JUMPOUT(0x181EEFA2CLL);
      }
      os_unfair_lock_unlock(v58);
      swift_unknownObjectRelease();
      swift_release_n();
      v56 = *((_QWORD *)&v115 + 1);
    }
    v59 = v106;
    v107 = (_QWORD *)(v106 + 14);
    v60 = swift_getObjectType();
    v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 64))(v60, v56);
    v63 = v62;
    swift_unknownObjectRelease();
    v64._countAndFlagsBits = v61;
    v64._object = v63;
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    v65._countAndFlagsBits = 0x6F7A20656D697420;
    v65._object = (void *)0xEC000000203A656ELL;
    String.append(_:)(v65);
    v66 = v113;
    v67 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v113 + 48);
    swift_unknownObjectRetain();
    v67(&v118, ObjectType, v66);
    swift_unknownObjectRelease();
    v68 = v118;
    swift_getObjectType();
    *(_QWORD *)&v115 = v68;
    v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v69);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v70._countAndFlagsBits = 0x6557747372696620;
    v70._object = (void *)0xEF203A7961646B65;
    String.append(_:)(v70);
    v71 = *(uint64_t (**)(uint64_t, uint64_t))(v66 + 56);
    swift_unknownObjectRetain();
    v72 = v71(ObjectType, v66);
    swift_unknownObjectRelease();
    *(_QWORD *)&v118 = v72;
    v73._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v73);
    swift_bridgeObjectRelease();
    v74._object = (void *)0x8000000182308A00;
    v74._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v74);
    v75 = *(uint64_t (**)(uint64_t, uint64_t))(v66 + 72);
    swift_unknownObjectRetain();
    v76 = v75(ObjectType, v66);
    swift_unknownObjectRelease();
    *(_QWORD *)&v118 = v76;
    v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v77);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)v125, *(unint64_t *)&v125[8], &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v59 + 22) = 2082;
    memcpy(v125, v131, sizeof(v125));
    outlined retain of DateComponents((uint64_t)v131);
    v78 = v98;
    DateComponents.customMirror.getter(v98);
    v79 = Mirror.children.getter();
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v78, v100);
    v80 = 0xE000000000000000;
    v120 = 0;
    v121 = 0xE000000000000000;
    swift_retain();
    v81 = dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (*(_QWORD *)&v125[40])
    {
      v100 = v79;
      v107 = (_QWORD *)(MEMORY[0x1E0DEE9B8] + 8);
      do
      {
        v118 = *(_OWORD *)v125;
        v119[0] = *(_OWORD *)&v125[16];
        v119[1] = *(_OWORD *)&v125[32];
        v117._countAndFlagsBits = 0;
        v117._object = (void *)0xE000000000000000;
        v82 = *(void **)&v125[8];
        v83 = *(_QWORD *)v125;
        v115 = *(_OWORD *)v125;
        outlined init with copy of Any((uint64_t)v119, (uint64_t)v116);
        if (!v82)
          v83 = 0;
        v84 = v81;
        if (v82)
          v85 = v82;
        else
          v85 = (void *)0xE000000000000000;
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
        v86._countAndFlagsBits = v83;
        v86._object = v85;
        String.append(_:)(v86);
        v81 = v84;
        swift_bridgeObjectRelease();
        v87._countAndFlagsBits = 8250;
        v87._object = (void *)0xE200000000000000;
        String.append(_:)(v87);
        _print_unlocked<A, B>(_:_:)();
        v88._countAndFlagsBits = 32;
        v88._object = (void *)0xE100000000000000;
        String.append(_:)(v88);
        String.append(_:)(v117);
        swift_bridgeObjectRelease();
        outlined destroy of Any?((uint64_t)&v118, &demangling cache variable for type metadata for (label: String?, value: Any));
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (*(_QWORD *)&v125[40]);
      v89 = v120;
      v80 = v121;
    }
    else
    {
      v89 = 0;
    }
    swift_release();
    swift_release();
    v90 = v106;
    outlined release of DateComponents((uint64_t)v131);
    *(_QWORD *)v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v80, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v131);
    outlined release of DateComponents((uint64_t)v131);
    *(_WORD *)(v90 + 32) = 2082;
    if (v112)
      v91 = 0x647261776B636162;
    else
      v91 = 0x64726177726F66;
    if (v112)
      v92 = 0xE800000000000000;
    else
      v92 = 0xE700000000000000;
    *(_QWORD *)v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v90 + 42) = 2082;
    __asm { BR              X9 }
  }
  swift_unknownObjectRelease_n();

  outlined release of DateComponents((uint64_t)v131);
  outlined release of DateComponents((uint64_t)v131);
  v44 = v109;
  v25 = v96;
  (*(void (**)(char *, uint64_t))(v101 + 8))(v103, v102);
  outlined release of DateComponents((uint64_t)v131);
  swift_unknownObjectRelease();
  v29 = v130[0];
  LODWORD(v105) = v129;
  v26 = v127;
  v45 = v126;
  v42 = v113;
  v43 = v108;
LABEL_49:
  v125[0] = v29 & 1;
  v93 = (char)v105;
  LOBYTE(v118) = (_BYTE)v105;
  *(_QWORD *)v13 = v23;
  *(_QWORD *)(v13 + 8) = v5;
  *(_BYTE *)(v13 + 16) = v29 & 1;
  *(_QWORD *)(v13 + 24) = v4;
  *(double *)(v13 + 32) = v43;
  *(double *)(v13 + 40) = v44;
  *(_BYTE *)(v13 + 48) = v93;
  *(_QWORD *)(v13 + 56) = v15;
  *(_QWORD *)(v13 + 64) = v18;
  *(_QWORD *)(v13 + 72) = v42;
  memcpy((void *)(v13 + 80), v128, 0x11AuLL);
  *(_BYTE *)(v13 + 362) = v114;
  *(_BYTE *)(v13 + 363) = v26;
  *(_BYTE *)(v13 + 364) = v45;
  *(_QWORD *)(v13 + 368) = 100;
  *(_BYTE *)(v13 + 376) = 1;
  return v25;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  double v14;
  char v15;
  uint64_t ObjectType;
  double v17;
  uint64_t v18;
  void (*v19)(double *__return_ptr, _BYTE *, double *, _QWORD, uint64_t, uint64_t);
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE __src[296];
  double v32;
  double v33[36];
  _BYTE v34[288];
  _BYTE __dst[288];
  _BYTE v36[289];
  char v37;

  v7 = *(_QWORD *)v3;
  v30 = *(_QWORD *)(v3 + 8);
  v8 = *(double *)(v3 + 16);
  v10 = *(double *)(v3 + 24);
  v9 = *(double *)(v3 + 32);
  v11 = *(_BYTE *)(v3 + 40);
  memcpy(__dst, (const void *)(v3 + 48), 0x11AuLL);
  v29 = *(unsigned __int8 *)(v3 + 330);
  v37 = v11;
  memcpy(&v36[7], (const void *)(v3 + 48), 0x11AuLL);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  result = outlined release of Calendar.DatesByAdding(v3);
  if (!a2)
  {
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v30;
    *(double *)(a1 + 16) = v8;
    *(double *)(a1 + 24) = v10;
    *(double *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = v37;
    memcpy((void *)(a1 + 41), v36, 0x121uLL);
    a3 = 0;
    *(_BYTE *)(a1 + 330) = v29;
    *(_BYTE *)(a1 + 331) = 0;
    *(_QWORD *)(a1 + 336) = 1;
    return a3;
  }
  v13 = a2;
  v14 = v10;
  v28 = v9;
  v15 = v29;
  if (!a3)
  {
    v25 = 1;
LABEL_21:
    v34[0] = v11;
    memcpy(&__src[7], __dst, 0x11AuLL);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v30;
    *(double *)(a1 + 16) = v8;
    *(double *)(a1 + 24) = v14;
    *(double *)(a1 + 32) = v28;
    *(_BYTE *)(a1 + 40) = v34[0];
    memcpy((void *)(a1 + 41), __src, 0x121uLL);
    *(_BYTE *)(a1 + 330) = v15;
    *(_BYTE *)(a1 + 331) = 0;
    *(_QWORD *)(a1 + 336) = v25;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    ObjectType = swift_getObjectType();
    v17 = v14;
    v18 = 0;
    v19 = *(void (**)(double *__return_ptr, _BYTE *, double *, _QWORD, uint64_t, uint64_t))(v30 + 200);
    v20 = 1.59271755e13;
    if (v8 <= 1.59271755e13)
      v20 = v8;
    v21 = fmax(v20, -2.11845067e11);
    v26 = a3;
    v27 = v17;
    v22 = v17;
    v23 = a3 - 1;
    while (1)
    {
      memcpy(v33, __dst, 0x11AuLL);
      DateComponents.scaled(by:)(v18 + 1, (uint64_t)__src);
      memcpy(v34, __src, 0x11AuLL);
      memcpy(__src, v34, 0x11AuLL);
      v32 = v21;
      swift_unknownObjectRetain();
      v19(v33, __src, &v32, v29, ObjectType, v30);
      swift_unknownObjectRelease();
      result = outlined release of DateComponents((uint64_t)v34);
      if ((LOBYTE(v33[1]) & 1) != 0 || (v11 & 1) == 0 && (v33[0] >= v22 ? (v24 = v33[0] < v28) : (v24 = 0), !v24))
      {
        LOBYTE(v33[0]) = v11;
        memcpy(&__src[7], __dst, 0x11AuLL);
        *(_QWORD *)a1 = v7;
        *(_QWORD *)(a1 + 8) = v30;
        *(double *)(a1 + 16) = v8;
        *(double *)(a1 + 24) = v27;
        *(double *)(a1 + 32) = v28;
        *(_BYTE *)(a1 + 40) = LOBYTE(v33[0]);
        memcpy((void *)(a1 + 41), __src, 0x121uLL);
        *(_BYTE *)(a1 + 330) = v29;
        *(_BYTE *)(a1 + 331) = 1;
        *(_QWORD *)(a1 + 336) = v18 + 1;
        return v18;
      }
      if (v18 == 0x7FFFFFFFFFFFFFFELL)
        break;
      *(double *)(v13 + 8 * v18) = v33[0];
      if (v23 == v18)
      {
        v25 = v18 + 2;
        v15 = v29;
        a3 = v26;
        v14 = v27;
        goto LABEL_21;
      }
      ++v18;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v6 = a3;
    if (a3)
    {
      if (a3 < 0)
        __break(1u);
      v7 = a2;
      v8 = 0;
      if (uenum_next())
      {
        v8 = 0;
        while (1)
        {
          *v7 = String.init(cString:)();
          v7[1] = v9;
          if (v6 - 1 == v8)
            break;
          v7 += 2;
          ++v8;
          if (!uenum_next())
            goto LABEL_8;
        }
      }
      else
      {
LABEL_8:
        v6 = v8;
      }
    }
  }
  else
  {
    v6 = 0;
  }
  *a1 = 0;
  a1[1] = a4;
  return v6;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(timespec *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unint64_t a5, char a6, uint64_t a7)
{
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t isStackAllocationSafe;
  uint64_t v19;
  const char *v20;
  char v21;
  char v22;
  DIR *v23;
  const char *v24;
  char v25;
  char v26;
  uint64_t v27;
  __darwin_ino64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  __darwin_ino64_t st_ino;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  Swift::String v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  Swift::Int32 v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  DIR *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  dirent *v58;
  dirent *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  __darwin_ino64_t v63;
  Swift::String v64;
  Swift::String v65;
  timespec *v66;
  uint64_t v67;
  Swift::String v68;
  Swift::String v69;
  uint64_t v70;
  int v71;
  int st_mode;
  int v73;
  __darwin_ino64_t v74;
  Swift::String v75;
  uint64_t v76;
  __darwin_ino64_t v77;
  __uint8_t d_type;
  uint64_t *v79;
  uint64_t v81;
  timespec *p_st_atimespec;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  stat v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;

  v84 = a2;
  v91 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v14 = String.UTF8View._foreignCount()();
  }
  else if ((a5 & 0x2000000000000000) != 0)
  {
    v14 = HIBYTE(a5) & 0xF;
  }
  else
  {
    v14 = a4 & 0xFFFFFFFFFFFFLL;
  }
  v15 = (unsigned __int128)(v14 * (__int128)3) >> 64;
  v16 = 3 * v14;
  if (v15 != (3 * v14) >> 63)
  {
    __break(1u);
    goto LABEL_78;
  }
  if (v16 < -1)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v17 = v16 + 1;
  swift_bridgeObjectRetain();
  isStackAllocationSafe = swift_bridgeObjectRetain();
  if (v16 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v20 = (char *)&v81 - v19;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v20, v17, 1, a4, a5);
    v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      goto LABEL_35;
    v23 = opendir(v20);
    if (!v23)
      goto LABEL_35;
LABEL_15:
    *(_QWORD *)(v13 + 24) = a4;
    *(_QWORD *)(v13 + 32) = a5;
    *(_QWORD *)(v13 + 16) = v23;
    *(_BYTE *)(v13 + 56) = a6 & 1;
    v27 = *(_QWORD *)(a7 + 16);
    if (v27)
    {
      v83 = a3;
      p_st_atimespec = a1;
      v81 = swift_bridgeObjectRetain();
      v28 = (__darwin_ino64_t *)(v81 + 40);
      v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        v31 = *(v28 - 1);
        st_ino = *v28;
        v33 = HIBYTE(*v28) & 0xF;
        if ((*v28 & 0x2000000000000000) == 0)
          v33 = v31 & 0xFFFFFFFFFFFFLL;
        if (v33)
        {
          swift_bridgeObjectRetain_n();
          String.index(before:)();
          v34 = String.subscript.getter();
          v36 = v35;
          swift_bridgeObjectRelease();
          if (v34 == 47 && v36 == 0xE100000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v38 & 1) == 0)
            {
              *(_QWORD *)&v88.st_dev = v31;
              v88.st_ino = st_ino;
              swift_bridgeObjectRetain();
              v39._countAndFlagsBits = 47;
              v39._object = (void *)0xE100000000000000;
              String.append(_:)(v39);
              swift_bridgeObjectRelease();
              v31 = *(_QWORD *)&v88.st_dev;
              st_ino = v88.st_ino;
            }
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
          v41 = v29[2];
          v40 = v29[3];
          if (v41 >= v40 >> 1)
            v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v29);
          v29[2] = v41 + 1;
          v30 = &v29[2 * v41];
          v30[4] = v31;
          v30[5] = st_ino;
        }
        v28 += 2;
        --v27;
      }
      while (v27);
      swift_bridgeObjectRelease();
      a1 = p_st_atimespec;
      a3 = v83;
    }
    else
    {
      v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v88.st_dev = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v51 = BidirectionalCollection<>.joined(separator:)();
    v53 = v52;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 40) = v51;
    *(_QWORD *)(v13 + 48) = v53;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  v24 = (const char *)swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v24, v17, 1, a4, a5);
  v26 = v25;
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
    MEMORY[0x186DA9E78](v24, -1, -1);
    goto LABEL_35;
  }
  v23 = opendir(v24);
  MEMORY[0x186DA9E78](v24, -1, -1);
  if (v23)
    goto LABEL_15;
LABEL_35:
  v42 = swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0xE000000000000000;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = 0xE000000000000000;
  *(_BYTE *)(v13 + 56) = 0;
  v43 = MEMORY[0x186DA4118](v42);
  v85 = MEMORY[0x1E0DEE9E0];
  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v46 = v45;
  v89 = a4;
  *(_QWORD *)&v90 = a5;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v44, v46);
  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v49 = v48;
  URL.init(_fileManagerFailableFileURLWithPath:)(a4, a5, (uint64_t)&v89);
  if (v89)
  {
    v86 = v89;
    v87 = v90;
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    memset(&v88, 0, 40);
  }
  specialized Dictionary.subscript.setter((uint64_t)&v88, (uint64_t)v47, v49);
  static CocoaError._errorWithErrno(_:reading:variant:userInfo:)(v43, 1, 0x7265646C6F46, 0xE600000000000000, v85, &v88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = *(void **)(v13 + 64);
  *(_QWORD *)(v13 + 64) = *(_QWORD *)&v88.st_dev;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_41:
  v15 = (uint64_t)v84;
  if (!v84 || !a3)
  {
LABEL_73:
    v57 = 0;
    goto LABEL_75;
  }
  if (((unint64_t)a3 & 0x8000000000000000) == 0)
  {
    v54 = *(DIR **)(v13 + 16);
    if (v54)
    {
      v83 = a3;
      v55 = 0;
      p_st_atimespec = &v88.st_atimespec;
      v56 = 1;
      while (1)
      {
        v57 = v56;
        v58 = readdir(v54);
        if (!v58)
        {
LABEL_74:
          closedir(v54);
          *(_QWORD *)(v13 + 16) = 0;
          v57 = v55;
          goto LABEL_75;
        }
        v59 = v58;
        while (1)
        {
          if (!v59->d_namlen || !v59->d_ino)
            goto LABEL_50;
          v61 = String.init(cString:)();
          v62 = v60;
          if ((v61 != 46 || v60 != (void *)0xE100000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v61 != 11822 || v62 != (void *)0xE200000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v61 != 24366 || v62 != (void *)0xE200000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            break;
          }
          swift_bridgeObjectRelease();
LABEL_50:
          v59 = readdir(v54);
          if (!v59)
            goto LABEL_74;
        }
        if (*(_BYTE *)(v13 + 56) != 1)
          goto LABEL_69;
        if (v59->d_type)
        {
          if (v59->d_type == 4)
            goto LABEL_66;
LABEL_69:
          v74 = *(_QWORD *)(v13 + 48);
          *(_QWORD *)&v88.st_dev = *(_QWORD *)(v13 + 40);
          v88.st_ino = v74;
          swift_bridgeObjectRetain();
          v75._countAndFlagsBits = v61;
          v75._object = v62;
          String.append(_:)(v75);
        }
        else
        {
          memset(&v88, 0, 28);
          v66 = p_st_atimespec;
          *p_st_atimespec = 0u;
          v66[1] = 0u;
          v66[2] = 0u;
          v66[3] = 0u;
          v66[4] = 0u;
          v66[5] = 0u;
          v66[6] = 0u;
          v67 = *(_QWORD *)(v13 + 32);
          v89 = *(_QWORD *)(v13 + 24);
          *(_QWORD *)&v90 = v67;
          swift_bridgeObjectRetain();
          v68._countAndFlagsBits = 47;
          v68._object = (void *)0xE100000000000000;
          String.append(_:)(v68);
          swift_bridgeObjectRetain();
          v69._countAndFlagsBits = v61;
          v69._object = v62;
          String.append(_:)(v69);
          swift_bridgeObjectRelease();
          v70 = String.utf8CString.getter();
          swift_bridgeObjectRelease();
          v71 = stat((const char *)(v70 + 32), &v88);
          swift_release();
          if (v71)
            goto LABEL_69;
          st_mode = v88.st_mode;
          v73 = S_IFMT.getter() & st_mode;
          if (v73 != (unsigned __int16)S_IFDIR.getter())
            goto LABEL_69;
LABEL_66:
          v63 = *(_QWORD *)(v13 + 48);
          *(_QWORD *)&v88.st_dev = *(_QWORD *)(v13 + 40);
          v88.st_ino = v63;
          swift_bridgeObjectRetain();
          v64._countAndFlagsBits = v61;
          v64._object = v62;
          String.append(_:)(v64);
          swift_bridgeObjectRetain();
          v65._countAndFlagsBits = 47;
          v65._object = (void *)0xE100000000000000;
          String.append(_:)(v65);
          swift_bridgeObjectRelease();
        }
        v76 = *(_QWORD *)&v88.st_dev;
        v77 = v88.st_ino;
        d_type = v59->d_type;
        v79 = v84;
        *v84 = v61;
        v79[1] = (uint64_t)v62;
        v79[2] = v76;
        v79[3] = v77;
        *((_BYTE *)v79 + 32) = d_type;
        v15 = (uint64_t)v83;
        if ((uint64_t *)v57 == v83)
          goto LABEL_80;
        v84 = v79 + 5;
        v56 = v57 + 1;
        v54 = *(DIR **)(v13 + 16);
        v55 = v57;
        if (!v54)
          goto LABEL_75;
      }
    }
    goto LABEL_73;
  }
LABEL_79:
  __break(1u);
LABEL_80:
  v57 = v15;
LABEL_75:
  a1->tv_sec = v13;
  return v57;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t started;
  uint64_t v12;
  uint64_t v13;
  uint64_t isStackAllocationSafe;
  __n128 v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  char v28[1040];
  uint64_t *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _DarwinSearchPathsSequence.Iterator();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a4;
  *(_QWORD *)(v10 + 24) = a5;
  started = sysdir_start_search_path_enumeration_private();
  v12 = 0;
  *(_DWORD *)(v10 + 32) = started;
  if (!a2 || !a3)
    goto LABEL_15;
  if (a3 < 0)
    __break(1u);
  v13 = started;
  v29 = a1;
  v12 = 0;
  while (1)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
    {
      v15 = MEMORY[0x1E0C80A78](isStackAllocationSafe);
      v16 = MEMORY[0x186DA9FF8](v13, v28, v15);
      *(_DWORD *)(v10 + 32) = v16;
      if (!(_DWORD)v16)
        goto LABEL_14;
      v13 = v16;
      v17 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v18 = objc_msgSend(v17, sel_stringWithFileSystemRepresentation_length_, v28, strlen(v28));

      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

      goto LABEL_5;
    }
    v22 = (const char *)swift_slowAlloc();
    v23 = MEMORY[0x186DA9FF8](v13, v22);
    *(_DWORD *)(v10 + 32) = v23;
    if (!(_DWORD)v23)
      break;
    v13 = v23;
    v24 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v25 = objc_msgSend(v24, sel_stringWithFileSystemRepresentation_length_, v22, strlen(v22));

    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v21 = v26;

    MEMORY[0x186DA9E78](v22, -1, -1);
LABEL_5:
    ++v12;
    *a2 = v19;
    a2[1] = v21;
    a2 += 2;
    if (a3 == v12)
    {
      v12 = a3;
      goto LABEL_14;
    }
  }
  MEMORY[0x186DA9E78](v22, -1, -1);
LABEL_14:
  a1 = v29;
LABEL_15:
  *a1 = v10;
  return v12;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  _DWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v23[0] = 0;
  v9 = a6 & 1;
  v24 = 0;
  v25 = a4;
  v26 = a5;
  v27 = 0;
  if ((a5 & 0x2000000000000000) != 0)
    v10 = HIBYTE(a5) & 0xF;
  else
    v10 = a4 & 0xFFFFFFFFFFFFLL;
  v28 = v10;
  v29 = a6 & 1;
  v30 = 0;
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0)
        __break(1u);
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v22 = a3;
      v16 = a3 - 1;
LABEL_12:
      if (v13 >= v10)
      {
LABEL_36:
        v20 = 1;
        a3 = v12;
        goto LABEL_33;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        v18 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a5 & 0x2000000000000000) == 0 && (a4 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
        v18 = _decodeScalar(_:startingAt:)();
      }
      v15 = bswap32(v18);
      if (!v9)
        v15 = v18;
      v23[0] = v15;
      v13 += v19;
      v27 = v13;
      v24 = 1;
      *(_BYTE *)(a2 + v12) = v15;
      if (v16 != v12)
      {
        v14 = 1;
        while (v16 != v12)
        {
          ++v12;
          if (v14 < 1)
            goto LABEL_12;
          if (__OFADD__(v14, 1))
            goto LABEL_35;
          v17 = *((_BYTE *)v23 + v14);
          v24 = v14 + 1;
          if (v14 == 3)
          {
            v14 = 0;
            v24 = 0;
            *(_BYTE *)(a2 + v12) = v17;
            if (v16 == v12)
            {
              v20 = 0;
              goto LABEL_32;
            }
          }
          else
          {
            *(_BYTE *)(a2 + v12) = v17;
            if (v16 == v12)
            {
              v20 = 0;
              ++v14;
              goto LABEL_32;
            }
            ++v14;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v20 = 0;
      v14 = 1;
LABEL_32:
      a3 = v22;
    }
    else
    {
      v15 = 0;
      v14 = 0;
      v13 = 0;
      v20 = 0;
    }
  }
  else
  {
    v15 = 0;
    v14 = 0;
    v13 = 0;
    v20 = 0;
    a3 = 0;
  }
LABEL_33:
  *(_DWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 49) = v20;
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64x2_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int64x2_t v56;
  int64x2_t v57;
  __int128 v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  int v118;
  char v119;
  char v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  __int128 v124;
  char *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  __int128 *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  char v180;
  char v181[48];
  char v182;
  char v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _OWORD v199[12];
  uint64_t v200;

  v4 = (_OWORD *)v3;
  v139 = result;
  v5 = *(_OWORD *)(v3 + 144);
  v6 = *(_OWORD *)(v3 + 176);
  v199[10] = *(_OWORD *)(v3 + 160);
  v199[11] = v6;
  v200 = *(_QWORD *)(v3 + 192);
  v7 = *(_OWORD *)(v3 + 80);
  v8 = *(_OWORD *)(v3 + 112);
  v9 = *(_OWORD *)(v3 + 128);
  v199[6] = *(_OWORD *)(v3 + 96);
  v199[7] = v8;
  v199[8] = v9;
  v199[9] = v5;
  v10 = *(_OWORD *)(v3 + 16);
  v11 = *(_OWORD *)(v3 + 48);
  v199[2] = *(_OWORD *)(v3 + 32);
  v199[3] = v11;
  v199[4] = *(_OWORD *)(v3 + 64);
  v199[5] = v7;
  v199[0] = *(_OWORD *)v3;
  v199[1] = v10;
  v12 = *(_QWORD *)(v3 + 8);
  v13 = *(_QWORD *)(v3 + 16);
  v14 = *(_QWORD *)(v3 + 24);
  v15 = *(_QWORD *)(v3 + 32);
  v17 = *(_QWORD *)(v3 + 40);
  v16 = *(_QWORD *)(v3 + 48);
  v18 = *(_QWORD *)(v3 + 56);
  v19 = *(_QWORD *)(v3 + 64);
  v171 = v18;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_196;
  }
  if (!a3)
  {
    v4 = v199;
    goto LABEL_196;
  }
  if (a3 < 0)
    goto LABEL_220;
  v20 = *((_QWORD *)v4 + 9);
  if (v20 == v12)
  {
    a3 = 0;
    v4 = v199;
    goto LABEL_196;
  }
  v137 = v20 - v12;
  if (v20 <= v12)
  {
LABEL_193:
    __break(1u);
LABEL_194:
    v4 = v199;
    v12 = v138;
LABEL_196:
    v130 = v4[11];
    *(_OWORD *)(v139 + 160) = v4[10];
    *(_OWORD *)(v139 + 176) = v130;
    v131 = *((_QWORD *)v4 + 24);
    v132 = v4[7];
    *(_OWORD *)(v139 + 96) = v4[6];
    *(_OWORD *)(v139 + 112) = v132;
    v133 = v4[9];
    *(_OWORD *)(v139 + 128) = v4[8];
    *(_OWORD *)(v139 + 144) = v133;
    v134 = v4[3];
    *(_OWORD *)(v139 + 32) = v4[2];
    *(_OWORD *)(v139 + 48) = v134;
    v135 = v4[5];
    *(_OWORD *)(v139 + 64) = v4[4];
    *(_OWORD *)(v139 + 80) = v135;
    v136 = v4[1];
    *(_OWORD *)v139 = *v4;
    *(_OWORD *)(v139 + 16) = v136;
    *(_QWORD *)(v139 + 192) = v131;
    *(_QWORD *)(v139 + 200) = v12;
    *(_QWORD *)(v139 + 208) = v13;
    *(_QWORD *)(v139 + 216) = v14;
    *(_QWORD *)(v139 + 224) = v15;
    *(_QWORD *)(v139 + 232) = v17;
    *(_QWORD *)(v139 + 240) = v16;
    *(_QWORD *)(v139 + 248) = v171;
    *(_QWORD *)(v139 + 256) = v19;
    return a3;
  }
  v21 = a2;
  v22 = *(_QWORD **)v4;
  v147 = *((_QWORD *)v4 + 18);
  v148 = *((_QWORD *)v4 + 17);
  v142 = a3;
  v143 = *((_QWORD *)v4 + 21) >> 11;
  v174 = (__int128 *)(*(_QWORD *)v4 + 16);
  v138 = v12 + a3;
  v145 = *((_QWORD *)v4 + 19);
  v146 = v148 >> 10;
  v144 = *((_QWORD *)v4 + 20);
  v23 = 1;
  v24 = v12;
  v140 = v12;
  v141 = *((_QWORD *)v4 + 9);
  v163 = *(_QWORD **)v4;
  while (1)
  {
    v164 = v13;
    v166 = v17;
    v169 = v19;
    v170 = v24;
    v150 = v14;
    v162 = v23;
    if (v15 == 1 || v13 != v22[11])
    {
      v30 = v22[8];
      v31 = v22[9];
      if (v30)
        v32 = v22[9];
      else
        v32 = 0;
      if (v24 < 0 || v32 < v24)
        goto LABEL_216;
      v167 = v22[11];
      if (!v30)
      {
        v160 = 0;
        v38 = 0;
        v46 = 0;
LABEL_71:
        v19 = v169;
        goto LABEL_72;
      }
      v33 = v22[10];
      v34 = *(unsigned __int8 *)(v30 + 18);
      if (v24 >= v31 || !*(_WORD *)(v30 + 16))
      {
        v47 = ((-15 << ((4 * v34 + 8) & 0x3C)) - 1) & v34 | ((unint64_t)*(unsigned __int16 *)(v30 + 16) << ((4 * v34 + 8) & 0x3C));
        swift_unknownObjectRetain();
        v38 = 0;
LABEL_70:
        swift_unknownObjectRetain();
        v160 = v47;
        v46 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v167, v47, v38, v30, v31, v33);
        swift_unknownObjectRelease_n();
        v17 = v166;
        goto LABEL_71;
      }
      if (*(_BYTE *)(v30 + 18))
      {
        result = swift_unknownObjectRetain_n();
        v35 = v24;
        v36 = v30;
        while (1)
        {
          v39 = *(unsigned __int16 *)(v36 + 16);
          if (!*(_WORD *)(v36 + 16))
            break;
          v40 = *(_QWORD *)(v36 + 32);
          v41 = __OFSUB__(v35, v40);
          v42 = v35 - v40;
          if (v41)
            goto LABEL_206;
          if (__OFADD__(v42, 1))
            goto LABEL_207;
          if (v42 + 1 < 1)
          {
            v39 = 0;
            goto LABEL_27;
          }
          if ((_DWORD)v39 == 1)
          {
            v35 = v42;
            break;
          }
          v43 = (uint64_t *)(v36 + 56);
          v44 = 1;
          while (1)
          {
            v45 = *v43;
            v43 += 3;
            v35 = v42 - v45;
            if (__OFSUB__(v42, v45))
            {
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
LABEL_200:
              __break(1u);
LABEL_201:
              __break(1u);
LABEL_202:
              __break(1u);
              goto LABEL_203;
            }
            if (__OFADD__(v35, 1))
              goto LABEL_198;
            if (v35 + 1 < 1)
              break;
            ++v44;
            v42 = v35;
            if (v39 == v44)
              goto LABEL_26;
          }
          v39 = v44;
          v35 = v42;
LABEL_27:
          v37 = (4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C;
          v34 = ((-15 << v37) - 1) & v34 | (v39 << v37);
          v38 = *(_QWORD *)(v36 + 24 + 24 * v39);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v36 = v38;
          if (!*(_BYTE *)(v38 + 18))
            goto LABEL_47;
        }
LABEL_26:
        if (!v35)
          goto LABEL_27;
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }
      result = swift_unknownObjectRetain_n();
      v34 = 0;
      v35 = v24;
      v38 = v30;
LABEL_47:
      v48 = *(unsigned __int16 *)(v38 + 16);
      v49.i64[0] = -1;
      v49.i64[1] = -1;
      if (*(_WORD *)(v38 + 16))
      {
        v50 = v35 - 1;
        if (__OFSUB__(v35, 1))
          goto LABEL_225;
        if (__OFADD__(v50, 1))
          goto LABEL_226;
        if (v35 < 1)
        {
          v48 = 0;
LABEL_69:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v47 = v34 & 0xFFFFFFFFFFFFF0FFLL | (v48 << 8);
          v22 = v163;
          goto LABEL_70;
        }
        if ((_DWORD)v48 != 1)
        {
          v51 = v48 - 2;
          if (v50 < v48 - 2)
            v51 = v35 - 1;
          if (v51 >= v35 + 0x7FFFFFFFFFFFFFFFLL)
            v51 = v35 + 0x7FFFFFFFFFFFFFFFLL;
          v52 = v51 + 1;
          if (v52 >= 5)
          {
            v54 = v52 & 3;
            if ((v52 & 3) == 0)
              v54 = 4;
            v55 = v52 - v54;
            v53 = v55 + 1;
            v56 = 0uLL;
            v57 = (int64x2_t)(unint64_t)(v35 - 1);
            do
            {
              v57 = vaddq_s64(v57, v49);
              v56 = vaddq_s64(v56, v49);
              v55 -= 4;
            }
            while (v55);
            v50 = vaddvq_s64(vaddq_s64(v56, v57));
          }
          else
          {
            v53 = 1;
          }
          while (1)
          {
            if (v35 + 0x8000000000000000 == v53)
              goto LABEL_219;
            if (v35 == v53)
              break;
            ++v53;
            --v50;
            if (v48 == v53)
              goto LABEL_68;
          }
          v48 = v35;
          goto LABEL_69;
        }
      }
      else
      {
        v50 = v35;
      }
LABEL_68:
      if (v50)
        goto LABEL_224;
      goto LABEL_69;
    }
    if (v19 == 2)
    {
      v25 = v14;
      v26 = v22[8];
      if (v26)
      {
        v27 = v22[9];
        v172 = v22[10];
        swift_unknownObjectRetain();
        v28 = v164;
        v29 = v25;
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v164, v25, v15, v26, v27, v172);
        swift_unknownObjectRelease();
      }
      else
      {
        v28 = v164;
        v29 = v25;
      }
      v151 = v17 >> 11;
      v173 = 1;
      v38 = v15;
      v160 = v29;
      v167 = v28;
      goto LABEL_75;
    }
    v46 = v17 >> 11;
    v167 = v13;
    v160 = v14;
    v38 = v15;
LABEL_72:
    v173 = v19 == 2;
    v151 = v17 >> 11;
    if (v19 != 2 && v17 >> 11 == v46)
    {
      v58 = v174[1];
      v193 = *v174;
      v194 = v58;
      v195 = v174[2];
      v59 = &v179;
      BigString.utf8.getter();
      v60 = BigString.UTF8View.index(roundingDown:)();
      v62 = v61;
      v64 = v63;
      v66 = v65;
      v173 = 0;
      goto LABEL_76;
    }
LABEL_75:
    v67 = v174[1];
    v196 = *v174;
    v197 = v67;
    v198 = v174[2];
    v59 = &v180;
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v60 = BigString.UTF8View.index(_:offsetBy:)();
    v62 = v68;
    v64 = v69;
    v66 = v70;
LABEL_76:
    result = outlined release of Locale((uint64_t)v59);
    if (v167 != v22[11])
      goto LABEL_208;
    if (v38)
    {
      v71 = (_QWORD *)(v38 + 24 * ((v160 >> ((4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C)) & 0xF));
      v72 = v71[3];
      v73 = v71[4];
      v74 = v71[5];
      outlined retain of AttributedString.Runs((uint64_t)v4);
      v168 = v73;
      swift_bridgeObjectRetain();
      v161 = v74;
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v75 = v22[8];
      outlined retain of AttributedString.Runs((uint64_t)v4);
      swift_unknownObjectRetain();
      v72 = specialized Rope._Node.subscript.getter(v160, v75);
      v168 = v76;
      v161 = v77;
      result = swift_unknownObjectRelease();
    }
    if (v146 >= v60 >> 10)
      v78 = v148;
    else
      v78 = v60;
    if (v146 >= v60 >> 10)
      v79 = v147;
    else
      v79 = v62;
    if (v146 >= v60 >> 10)
    {
      v64 = v145;
      v66 = v144;
    }
    if (__OFADD__(v72, v60 >> 11))
      goto LABEL_209;
    if (v143 >= (uint64_t)(v72 + (v60 >> 11)))
      v80 = v72 + (v60 >> 11);
    else
      v80 = v143;
    v81 = v174[1];
    v190 = *v174;
    v191 = v81;
    v192 = v174[2];
    result = BigString.utf8.getter();
    if (__OFSUB__(v80, v78 >> 11))
      goto LABEL_210;
    v82 = BigString.UTF8View.index(_:offsetBy:)();
    v159 = v83;
    v85 = v84;
    v87 = v86;
    result = outlined release of Locale((uint64_t)v181);
    v158 = v82;
    if (v82 >> 10 < v78 >> 10)
      goto LABEL_211;
    v154 = v87;
    v155 = v85;
    v88 = v164;
    v89 = v163[8];
    v90 = v163[11];
    v152 = v163[10];
    v153 = v163[9];
    v156 = v66;
    v157 = v79;
    if (v15 != 1 && v164 == v90)
    {
      if (v173)
      {
        v91 = v150;
        outlined retain of AttributedString.Runs((uint64_t)v4);
        if (v89)
        {
          swift_unknownObjectRetain();
          v92 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v164, v150, v15, v89, v153, v152);
        }
        else
        {
          v92 = 0;
        }
      }
      else
      {
        outlined retain of AttributedString.Runs((uint64_t)v4);
        swift_unknownObjectRetain();
        v91 = v150;
        v92 = v151;
      }
      goto LABEL_165;
    }
    v88 = v163[11];
    if (v89)
      v93 = v163[9];
    else
      v93 = 0;
    v94 = v170;
    if (v170 < 0 || v93 < v170)
      goto LABEL_217;
    if (!v89)
    {
      outlined retain of AttributedString.Runs((uint64_t)v4);
      v92 = 0;
      v15 = 0;
      v91 = 0;
      v90 = v88;
      goto LABEL_165;
    }
    v95 = *(unsigned __int8 *)(v89 + 18);
    if (v170 < v163[9])
    {
      if (*(_WORD *)(v89 + 16))
        break;
    }
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v4);
    v105 = *(unsigned __int16 *)(v89 + 16);
    v106 = *(_BYTE *)(v89 + 18);
    swift_unknownObjectRelease_n();
    v15 = 0;
    v91 = ((-15 << ((4 * v106 + 8) & 0x3C)) - 1) & v95 | (unint64_t)(v105 << ((4 * v106 + 8) & 0x3C));
LABEL_164:
    v90 = v88;
    swift_unknownObjectRetain();
    v92 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v88, v91, v15, v89, v153, v152);
    swift_unknownObjectRelease_n();
LABEL_165:
    v149 = v90;
    v165 = v64;
    v176 = v88;
    v177 = v91;
    v178 = v15;
    if (v15)
    {
      v112 = v91;
      v113 = *(_QWORD *)(v15 + 24 * ((v91 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v112 = v91;
      v113 = specialized Rope._Node.subscript.getter(v91, v89);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v41 = __OFADD__(v92, v113);
    v114 = v92 + v113;
    if (v41)
      goto LABEL_212;
    if (v89)
    {
      v115 = ((-15 << ((4 * *(_BYTE *)(v89 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v89 + 18) | ((unint64_t)*(unsigned __int16 *)(v89 + 16) << ((4 * *(_BYTE *)(v89 + 18) + 8) & 0x3C));
      result = swift_unknownObjectRetain();
    }
    else
    {
      v115 = 0;
    }
    if (v112 >= v115)
      goto LABEL_213;
    if (v15)
    {
      v116 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
      v117 = ((v112 >> v116) & 0xF) + 1;
      if (v117 < *(unsigned __int16 *)(v15 + 16))
      {
        v14 = (v117 << v116) | ((-15 << v116) - 1) & v112;
        swift_unknownObjectRelease_n();
        goto LABEL_185;
      }
    }
    v118 = *(unsigned __int8 *)(v89 + 18);
    v119 = (4 * v118 + 8) & 0x3C;
    v175 = (v112 >> v119) & 0xF;
    if (v118)
    {
      swift_unknownObjectRetain();
      v120 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v89 + 24, (uint64_t *)&v175, (uint64_t)&v176, v89, v118);
      swift_unknownObjectRelease();
      if ((v120 & 1) != 0)
      {
        swift_unknownObjectRelease_n();
        v14 = v177;
        goto LABEL_185;
      }
    }
    else
    {
      v121 = ((v112 >> v119) & 0xF) + 1;
      if (v121 < *(unsigned __int16 *)(v89 + 16))
      {
        v14 = (v121 << v119) | ((-15 << v119) - 1) & v112;
        v177 = v14;
        swift_unknownObjectRelease_n();
        v178 = v89;
        goto LABEL_185;
      }
    }
    if (v89)
    {
      v122 = *(unsigned __int8 *)(v89 + 18);
      v123 = *(unsigned __int16 *)(v89 + 16);
      swift_unknownObjectRelease_n();
      v14 = ((-15 << ((4 * v122 + 8) & 0x3C)) - 1) & v122 | (unint64_t)(v123 << ((4 * v122 + 8) & 0x3C));
    }
    else
    {
      v14 = 0;
    }
    v176 = v149;
    v177 = v14;
    v178 = 0;
LABEL_185:
    v13 = v176;
    v15 = v178;
    if (v173)
    {
      v124 = v174[1];
      v187 = *v174;
      v188 = v124;
      v189 = v174[2];
      v125 = &v183;
      BigString.utf8.getter();
      BigString.startIndex.getter();
    }
    else
    {
      v126 = v174[1];
      v184 = *v174;
      v185 = v126;
      v186 = v174[2];
      result = BigString.utf8.getter();
      if (__OFSUB__(v114, v151))
        goto LABEL_218;
      v125 = &v182;
    }
    v17 = BigString.UTF8View.index(_:offsetBy:)();
    v16 = v127;
    v171 = v128;
    v19 = v129;
    outlined release of Locale((uint64_t)v125);
    result = outlined release of AttributedString.Runs((uint64_t)v4);
    *v21 = v168;
    v21[1] = v161;
    v21[2] = v78;
    v21[3] = v157;
    v22 = v163;
    v21[4] = v165;
    v21[5] = v156;
    v21[6] = v158;
    v21[7] = v159;
    v21[8] = v155;
    v21[9] = v154;
    v21[10] = v163;
    a3 = v142;
    if (v162 == v142)
      goto LABEL_194;
    v24 = v170 + 1;
    v12 = v141;
    if (v170 + 1 == v141)
    {
      v4 = v199;
      a3 = v137;
      goto LABEL_196;
    }
    if (v140 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v23 = v162 + 1;
      v21 += 11;
      if (v24 < v141)
        continue;
    }
    goto LABEL_193;
  }
  if (*(_BYTE *)(v89 + 18))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v4);
    result = swift_unknownObjectRetain();
    v96 = v89;
    while (1)
    {
      v98 = *(unsigned __int16 *)(v96 + 16);
      if (!*(_WORD *)(v96 + 16))
        goto LABEL_110;
      v99 = *(_QWORD *)(v96 + 32);
      v100 = v94 - v99;
      if (__OFSUB__(v94, v99))
        goto LABEL_204;
      if (__OFADD__(v100, 1))
        goto LABEL_205;
      if (v100 + 1 <= 0)
      {
        v98 = 0;
      }
      else
      {
        if ((_DWORD)v98 == 1)
        {
          v94 -= v99;
LABEL_110:
          if (v94)
            goto LABEL_202;
          goto LABEL_111;
        }
        v101 = *(_QWORD *)(v96 + 56);
        v41 = __OFSUB__(v100, v101);
        v102 = v100 - v101;
        if (v41)
          goto LABEL_214;
        if (__OFADD__(v102, 1))
          goto LABEL_215;
        if (v102 + 1 >= 1)
        {
          if ((_DWORD)v98 != 2)
          {
            v103 = (_QWORD *)(v96 + 80);
            v104 = 2;
            while (v98 != v104)
            {
              v94 = v102 - *v103;
              if (__OFSUB__(v102, *v103))
                goto LABEL_200;
              if (__OFADD__(v94, 1))
                goto LABEL_201;
              if (v94 + 1 < 1)
              {
                v98 = v104;
                v94 = v102;
                goto LABEL_111;
              }
              ++v104;
              v103 += 3;
              v102 = v94;
              if (v98 == v104)
                goto LABEL_110;
            }
            goto LABEL_199;
          }
          v94 = v102;
          goto LABEL_110;
        }
        v98 = 1;
        v94 = v100;
      }
LABEL_111:
      v97 = (4 * *(_BYTE *)(v96 + 18) + 8) & 0x3C;
      v95 = ((-15 << v97) - 1) & v95 | (v98 << v97);
      v15 = *(_QWORD *)(v96 + 24 + 24 * v98);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v96 = v15;
      if (!*(_BYTE *)(v15 + 18))
        goto LABEL_137;
    }
  }
  swift_unknownObjectRetain_n();
  outlined retain of AttributedString.Runs((uint64_t)v4);
  result = swift_unknownObjectRetain();
  v95 = 0;
  v15 = v89;
LABEL_137:
  v107 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16))
  {
    v108 = v94;
LABEL_157:
    if (v108)
      goto LABEL_223;
    goto LABEL_163;
  }
  v108 = v94 - 1;
  if (__OFSUB__(v94, 1))
    goto LABEL_227;
  if (__OFADD__(v108, 1))
    goto LABEL_228;
  if (v94 <= 0)
  {
    v107 = 0;
LABEL_163:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v91 = v95 & 0xFFFFFFFFFFFFF0FFLL | (v107 << 8);
    goto LABEL_164;
  }
  if ((_DWORD)v107 == 1)
    goto LABEL_157;
  v41 = __OFSUB__(v108, 1);
  v108 = v94 - 2;
  if (v41)
    goto LABEL_229;
  if (__OFADD__(v108, 1))
    goto LABEL_230;
  if (v94 - 1 < 1)
  {
    v107 = 1;
    goto LABEL_163;
  }
  if ((_DWORD)v107 == 2)
    goto LABEL_157;
  v109 = 0;
  v110 = v107 - 2;
  if (v108 >= v107 - 3)
    v111 = v107 - 3;
  else
    v111 = v94 - 2;
  if (v111 >= v94 + 0x7FFFFFFFFFFFFFFELL)
    v111 = v94 + 0x7FFFFFFFFFFFFFFELL;
  while (v110 > v111)
  {
    if (v94 + 0x7FFFFFFFFFFFFFFELL == v109)
      goto LABEL_222;
    if (v108 == v109)
    {
      v107 = v94;
      goto LABEL_163;
    }
    if (v110 == ++v109)
    {
      v108 -= v109;
      goto LABEL_157;
    }
  }
LABEL_221:
  __break(1u);
LABEL_222:
  __break(1u);
LABEL_223:
  __break(1u);
LABEL_224:
  __break(1u);
LABEL_225:
  __break(1u);
LABEL_226:
  __break(1u);
LABEL_227:
  __break(1u);
LABEL_228:
  __break(1u);
LABEL_229:
  __break(1u);
LABEL_230:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;

  v6 = a4[8];
  if (v6)
    v7 = a4[10];
  else
    v7 = 0;
  if (a5 < 0 || v7 < a5)
    goto LABEL_266;
  v8 = a6;
  v10 = a4[9];
  v114 = a4[11];
  v103 = (_QWORD *)result;
  if (!v6 || (a4[10] > a5 ? (v11 = *(unsigned __int16 *)(v6 + 16) == 0) : (v11 = 1), v11))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    v12 = specialized Rope._endPath.getter(v6);
    swift_unknownObjectRelease();
    v13 = 0;
    v14 = 0;
    if (!v6)
      goto LABEL_61;
    goto LABEL_13;
  }
  v16 = *(unsigned __int8 *)(v6 + 18);
  if (*(_BYTE *)(v6 + 18))
  {
    swift_unknownObjectRetain_n();
    result = swift_retain();
    v14 = a5;
    v17 = v6;
    while (1)
    {
      v19 = *(unsigned __int16 *)(v17 + 16);
      if (!*(_WORD *)(v17 + 16))
        goto LABEL_17;
      v20 = *(_QWORD *)(v17 + 40);
      v21 = v14 - v20;
      if (__OFSUB__(v14, v20))
        goto LABEL_255;
      if (__OFADD__(v21, 1))
        goto LABEL_256;
      if (v21 + 1 <= 0)
      {
        v19 = 0;
        goto LABEL_18;
      }
      if ((_DWORD)v19 == 1)
        break;
      v22 = *(_QWORD *)(v17 + 64);
      v23 = __OFSUB__(v21, v22);
      v24 = v21 - v22;
      if (v23)
        goto LABEL_264;
      if (__OFADD__(v24, 1))
        goto LABEL_265;
      if (v24 + 1 < 1)
      {
        v19 = 1;
        v14 = v21;
        goto LABEL_18;
      }
      if ((_DWORD)v19 == 2)
      {
        v14 = v24;
        goto LABEL_17;
      }
      v25 = (_QWORD *)(v17 + 88);
      v26 = 2;
      while (1)
      {
        if (v19 == v26)
          goto LABEL_240;
        v14 = v24 - *v25;
        if (__OFSUB__(v24, *v25))
        {
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
LABEL_251:
          __break(1u);
LABEL_252:
          __break(1u);
LABEL_253:
          __break(1u);
          goto LABEL_254;
        }
        if (__OFADD__(v14, 1))
          goto LABEL_242;
        if (v14 + 1 < 1)
          break;
        ++v26;
        v25 += 3;
        v24 = v14;
        if (v19 == v26)
          goto LABEL_17;
      }
      v19 = v26;
      v14 = v24;
LABEL_18:
      v18 = (4 * *(_BYTE *)(v17 + 18) + 8) & 0x3C;
      v16 = ((-15 << v18) - 1) & v16 | (v19 << v18);
      v13 = *(_QWORD *)(v17 + 24 + 24 * v19);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v17 = v13;
      if (!*(_BYTE *)(v13 + 18))
        goto LABEL_40;
    }
    v14 -= v20;
LABEL_17:
    if (!v14)
      goto LABEL_18;
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
    goto LABEL_275;
  }
  swift_unknownObjectRetain_n();
  result = swift_retain();
  v14 = a5;
  v13 = v6;
LABEL_40:
  v27 = *(unsigned __int16 *)(v13 + 16);
  if (!*(_WORD *)(v13 + 16))
    goto LABEL_59;
  v28 = *(_QWORD *)(v13 + 24);
  v29 = v14 - v28;
  if (__OFSUB__(v14, v28))
  {
LABEL_285:
    __break(1u);
    goto LABEL_286;
  }
  if (__OFADD__(v29, 1))
  {
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
    goto LABEL_289;
  }
  if (v29 + 1 <= 0)
  {
    v27 = 0;
    goto LABEL_60;
  }
  if ((_DWORD)v27 == 1)
  {
    v14 -= v28;
    goto LABEL_59;
  }
  v30 = *(_QWORD *)(v13 + 48);
  v23 = __OFSUB__(v29, v30);
  v31 = v29 - v30;
  if (v23)
  {
LABEL_289:
    __break(1u);
    goto LABEL_290;
  }
  if (!__OFADD__(v31, 1))
  {
    if (v31 + 1 < 1)
    {
      v27 = 1;
      v14 = v29;
      goto LABEL_60;
    }
    if ((_DWORD)v27 != 2)
    {
      v32 = (_QWORD *)(v13 + 72);
      v33 = 2;
      while (1)
      {
        if (v27 == v33)
          goto LABEL_278;
        v14 = v31 - *v32;
        if (__OFSUB__(v31, *v32))
          break;
        if (__OFADD__(v14, 1))
          goto LABEL_280;
        if (v14 + 1 < 1)
          goto LABEL_233;
        ++v33;
        v32 += 3;
        v31 = v14;
        if (v27 == v33)
          goto LABEL_59;
      }
LABEL_279:
      __break(1u);
LABEL_280:
      __break(1u);
LABEL_281:
      __break(1u);
LABEL_282:
      __break(1u);
LABEL_283:
      __break(1u);
LABEL_284:
      __break(1u);
      goto LABEL_285;
    }
    v14 = v31;
LABEL_59:
    if (!v14)
    {
      while (1)
      {
LABEL_60:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v12 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
        v8 = a6;
        if (v6)
        {
LABEL_13:
          swift_unknownObjectRetain();
          v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v114, v12, v13, v6, v10);
          swift_release();
          swift_unknownObjectRelease_n();
        }
        else
        {
LABEL_61:
          swift_release();
          v15 = 0;
        }
        v10 = a5;
        v23 = __OFSUB__(a5, v14);
        v34 = a5 - v14;
        result = a3;
        if (v23)
          goto LABEL_267;
        if (!a2)
          goto LABEL_228;
        v35 = v114;
        if (!a3)
        {
LABEL_230:
          *v103 = a4;
          v103[1] = v10;
          v103[2] = v8;
          v103[3] = v35;
          v103[4] = v12;
          v103[5] = v13;
          v103[6] = v15;
          v103[7] = v34;
          return result;
        }
        if (a3 < 0)
          goto LABEL_274;
        v111 = 0;
        while (1)
        {
          v16 = a4[8];
          v114 = v35;
          if (v10 != v8)
          {
            if (v16)
              v41 = a4[10];
            else
              v41 = 0;
            goto LABEL_120;
          }
          if (!v16)
          {
            if (v10 > 0)
              goto LABEL_268;
            v40 = 0;
            goto LABEL_118;
          }
          v36 = a4[10];
          if (v36 < v10)
            goto LABEL_261;
          v37 = *(unsigned __int8 *)(v16 + 18);
          v38 = !*(_WORD *)(v16 + 16) || v36 <= v10;
          v108 = a4[9];
          v106 = a4[11];
          if (!v38)
            break;
          v39 = ((-15 << ((4 * v37 + 8) & 0x3C)) - 1) & v37 | ((unint64_t)*(unsigned __int16 *)(v16 + 16) << ((4 * v37 + 8) & 0x3C));
          swift_unknownObjectRetain();
          v40 = 0;
          v10 = 0;
LABEL_117:
          swift_unknownObjectRetain();
          specialized Rope._Node.distanceFromStart<A>(to:in:)(v106, v39, v10, v16, v108);
          result = swift_unknownObjectRelease_n();
          v8 = a6;
          v10 = a5;
LABEL_118:
          v41 = v10 - v40;
          if (__OFSUB__(v10, v40))
            goto LABEL_257;
          v35 = v114;
LABEL_120:
          if (v34 == v41)
          {
            result = v111;
            goto LABEL_230;
          }
          if (v35 != a4[11])
            goto LABEL_243;
          if (v13)
          {
            v53 = (_QWORD *)(v13 + 24 * ((v12 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF));
            v54 = v53[4];
            v55 = v53[5];
            v56 = v53[3];
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            v109 = v54;
            v110 = v55;
          }
          else
          {
            v57 = a4[8];
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v12, v57);
            v59 = v58;
            v61 = v60;
            result = swift_unknownObjectRelease();
            if (v114 != a4[11])
              goto LABEL_260;
            v109 = v59;
            v110 = v61;
            v62 = a4[8];
            swift_unknownObjectRetain();
            v56 = specialized Rope._Node.subscript.getter(v12, v62);
            v10 = a5;
            swift_unknownObjectRelease();
          }
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          v63 = v34 + v56;
          if (__OFADD__(v34, v56))
            goto LABEL_244;
          if (v34 >= v8)
            v64 = v8;
          else
            v64 = v34;
          if (v34 < v10)
            v64 = v10;
          if (v63 <= v10)
            v65 = v10;
          else
            v65 = v34 + v56;
          if (v63 <= v8)
            v66 = v65;
          else
            v66 = v8;
          if (v64 == v66)
            goto LABEL_245;
          v67 = v66 - v64;
          if (__OFSUB__(v66, v64))
            goto LABEL_246;
          v68 = a4[8];
          v69 = a4[11];
          v116 = v114;
          v117 = v12;
          v118 = v13;
          v23 = __OFADD__(v15++, 1);
          if (v23)
            goto LABEL_247;
          if (v114 != v69)
            goto LABEL_248;
          v107 = v67;
          if (v13)
          {
            v70 = *(_QWORD *)(v13 + 24 * ((v12 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            swift_retain();
            swift_unknownObjectRetain();
            v70 = specialized Rope._Node.subscript.getter(v12, v68);
          }
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          v23 = __OFADD__(v34, v70);
          v34 += v70;
          if (v23)
            goto LABEL_249;
          if (v68)
          {
            v71 = ((-15 << ((4 * *(_BYTE *)(v68 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v68 + 18) | ((unint64_t)*(unsigned __int16 *)(v68 + 16) << ((4 * *(_BYTE *)(v68 + 18) + 8) & 0x3C));
            result = swift_unknownObjectRetain();
          }
          else
          {
            v71 = 0;
          }
          v35 = v114;
          if (v12 >= v71)
            goto LABEL_250;
          if (v13)
          {
            v72 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
            v73 = ((v12 >> v72) & 0xF) + 1;
            if (v73 < *(unsigned __int16 *)(v13 + 16))
            {
              v12 = (v73 << v72) | ((-15 << v72) - 1) & v12;
              result = swift_unknownObjectRelease_n();
              goto LABEL_162;
            }
          }
          v74 = *(unsigned __int8 *)(v68 + 18);
          v75 = (4 * v74 + 8) & 0x3C;
          v76 = (v12 >> v75) & 0xF;
          v115 = v76;
          if (v74)
          {
            swift_unknownObjectRetain();
            v77 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v68 + 24, &v115, (uint64_t)&v116, v68, v74);
            result = swift_unknownObjectRelease();
            if ((v77 & 1) != 0)
            {
              result = swift_unknownObjectRelease_n();
              v35 = v116;
              v12 = v117;
              v13 = v118;
              goto LABEL_162;
            }
          }
          else
          {
            v78 = v76 + 1;
            if (v76 + 1 < (unint64_t)*(unsigned __int16 *)(v68 + 16))
            {
              result = swift_unknownObjectRelease_n();
              v12 = (v78 << v75) | ((-15 << v75) - 1) & v12;
              v13 = v68;
              goto LABEL_162;
            }
          }
          if (v68)
          {
            v79 = *(unsigned __int8 *)(v68 + 18);
            v80 = *(unsigned __int16 *)(v68 + 16);
            result = swift_unknownObjectRelease_n();
            v12 = ((-15 << ((4 * v79 + 8) & 0x3C)) - 1) & v79 | (unint64_t)(v80 << ((4 * v79 + 8) & 0x3C));
          }
          else
          {
            v12 = 0;
          }
          v13 = 0;
          v116 = v114;
LABEL_162:
          if (v34 < v8)
          {
            swift_release();
LABEL_68:
            v10 = a5;
            result = a3;
            goto LABEL_69;
          }
          v81 = a4[8];
          if (a5 != v8)
          {
            v35 = a4[11];
            if (v81)
            {
              v15 = a4[9];
              v34 = a4[10];
              v95 = *(unsigned __int8 *)(v81 + 18);
              v96 = *(unsigned __int16 *)(v81 + 16);
              swift_release();
              v13 = 0;
              v12 = ((-15 << ((4 * v95 + 8) & 0x3C)) - 1) & v95 | (unint64_t)(v96 << ((4 * v95 + 8) & 0x3C));
            }
            else
            {
              swift_release();
              v12 = 0;
              v13 = 0;
              v15 = 0;
              v34 = 0;
            }
            goto LABEL_68;
          }
          v35 = a4[11];
          if (v81)
          {
            v82 = a4[10];
            if (v82 < a5)
              goto LABEL_269;
            v83 = a4[9];
            v84 = *(unsigned __int8 *)(v81 + 18);
            if (*(_WORD *)(v81 + 16) && v82 > a5)
            {
              if (*(_BYTE *)(v81 + 18))
              {
                result = swift_unknownObjectRetain_n();
                v85 = a5;
                v86 = v81;
                while (1)
                {
                  v88 = *(unsigned __int16 *)(v86 + 16);
                  if (!*(_WORD *)(v86 + 16))
                    goto LABEL_171;
                  v89 = *(_QWORD *)(v86 + 40);
                  v90 = v85 - v89;
                  if (__OFSUB__(v85, v89))
                    goto LABEL_252;
                  if (__OFADD__(v90, 1))
                    goto LABEL_253;
                  if (v90 + 1 <= 0)
                  {
                    v88 = 0;
                  }
                  else
                  {
                    if ((_DWORD)v88 == 1)
                    {
                      v85 -= v89;
LABEL_171:
                      if (v85)
                        goto LABEL_251;
                      goto LABEL_172;
                    }
                    v91 = *(_QWORD *)(v86 + 64);
                    v23 = __OFSUB__(v90, v91);
                    v92 = v90 - v91;
                    if (v23)
                      goto LABEL_262;
                    if (__OFADD__(v92, 1))
                      goto LABEL_263;
                    if (v92 + 1 >= 1)
                    {
                      if ((_DWORD)v88 != 2)
                      {
                        v93 = (_QWORD *)(v86 + 88);
                        v94 = 2;
                        while (v88 != v94)
                        {
                          v85 = v92 - *v93;
                          if (__OFSUB__(v92, *v93))
                            goto LABEL_238;
                          if (__OFADD__(v85, 1))
                            goto LABEL_239;
                          if (v85 + 1 < 1)
                          {
                            v88 = v94;
                            v85 = v92;
                            goto LABEL_172;
                          }
                          ++v94;
                          v93 += 3;
                          v92 = v85;
                          if (v88 == v94)
                            goto LABEL_171;
                        }
LABEL_237:
                        __break(1u);
LABEL_238:
                        __break(1u);
LABEL_239:
                        __break(1u);
LABEL_240:
                        __break(1u);
                        goto LABEL_241;
                      }
                      v85 = v92;
                      goto LABEL_171;
                    }
                    v88 = 1;
                    v85 = v90;
                  }
LABEL_172:
                  v87 = (4 * *(_BYTE *)(v86 + 18) + 8) & 0x3C;
                  v84 = ((-15 << v87) - 1) & v84 | (v88 << v87);
                  v13 = *(_QWORD *)(v86 + 24 + 24 * v88);
                  swift_unknownObjectRetain();
                  result = swift_unknownObjectRelease();
                  v86 = v13;
                  if (!*(_BYTE *)(v13 + 18))
                    goto LABEL_200;
                }
              }
              result = swift_unknownObjectRetain_n();
              v84 = 0;
              v85 = a5;
              v13 = v81;
LABEL_200:
              v114 = v83;
              v97 = *(unsigned __int16 *)(v13 + 16);
              if (*(_WORD *)(v13 + 16))
              {
                v98 = *(_QWORD *)(v13 + 24);
                v23 = __OFSUB__(v85, v98);
                v99 = v85 - v98;
                if (v23)
                  goto LABEL_282;
                if (__OFADD__(v99, 1))
                  goto LABEL_283;
                if (v99 + 1 <= 0)
                {
                  v97 = 0;
                  goto LABEL_223;
                }
                if ((_DWORD)v97 != 1)
                {
                  v100 = *(_QWORD *)(v13 + 48);
                  v85 = v99 - v100;
                  if (__OFSUB__(v99, v100))
                    goto LABEL_287;
                  if (__OFADD__(v85, 1))
                    goto LABEL_288;
                  if (v85 + 1 >= 1)
                  {
                    if ((_DWORD)v97 != 2)
                    {
                      v101 = (_QWORD *)(v13 + 72);
                      v102 = 2;
                      while (v97 != v102)
                      {
                        v99 = v85 - *v101;
                        if (__OFSUB__(v85, *v101))
                          goto LABEL_276;
                        if (__OFADD__(v99, 1))
                          goto LABEL_277;
                        if (v99 + 1 < 1)
                        {
                          v97 = v102;
                          goto LABEL_223;
                        }
                        ++v102;
                        v101 += 3;
                        v85 = v99;
                        if (v97 == v102)
                          goto LABEL_210;
                      }
LABEL_275:
                      __break(1u);
LABEL_276:
                      __break(1u);
LABEL_277:
                      __break(1u);
LABEL_278:
                      __break(1u);
                      goto LABEL_279;
                    }
                    goto LABEL_209;
                  }
                  v97 = 1;
                  v85 = v99;
LABEL_223:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  v12 = v84 & 0xFFFFFFFFFFFFF0FFLL | (v97 << 8);
                  v83 = v114;
LABEL_224:
                  swift_unknownObjectRetain();
                  v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v12, v13, v81, v83);
                  swift_release();
                  swift_unknownObjectRelease_n();
                  v10 = a5;
                  goto LABEL_225;
                }
              }
              else
              {
LABEL_209:
                v99 = v85;
              }
LABEL_210:
              if (v99)
                goto LABEL_281;
              v85 = 0;
              goto LABEL_223;
            }
            v12 = ((-15 << ((4 * v84 + 8) & 0x3C)) - 1) & v84 | ((unint64_t)*(unsigned __int16 *)(v81 + 16) << ((4 * v84 + 8) & 0x3C));
            swift_unknownObjectRetain();
            v85 = 0;
            v13 = 0;
            goto LABEL_224;
          }
          v10 = a5;
          if (a5 > 0)
            goto LABEL_273;
          swift_release();
          v85 = 0;
          v13 = 0;
          v12 = 0;
          v15 = 0;
LABEL_225:
          v34 = v10 - v85;
          result = a3;
          if (__OFSUB__(v10, v85))
          {
            __break(1u);
LABEL_228:
            result = 0;
            v35 = v114;
            goto LABEL_230;
          }
LABEL_69:
          *a2 = v107;
          a2[1] = v109;
          a2[2] = v110;
          ++v111;
          a2 += 3;
          if (v111 == result)
            goto LABEL_230;
        }
        if (!*(_BYTE *)(v16 + 18))
          break;
        result = swift_unknownObjectRetain_n();
        v40 = v10;
        v6 = v16;
LABEL_89:
        v31 = *(unsigned __int16 *)(v6 + 16);
        if (!*(_WORD *)(v6 + 16))
          goto LABEL_87;
        v43 = *(_QWORD *)(v6 + 40);
        v23 = __OFSUB__(v40, v43);
        v33 = v40 - v43;
        if (v23)
          goto LABEL_235;
        if (__OFADD__(v33, 1))
          goto LABEL_236;
        if (v33 + 1 < 1)
        {
          v31 = 0;
          goto LABEL_88;
        }
        if ((_DWORD)v31 == 1)
        {
          v40 = v33;
LABEL_87:
          if (!v40)
            goto LABEL_88;
          __break(1u);
LABEL_235:
          __break(1u);
LABEL_236:
          __break(1u);
          goto LABEL_237;
        }
        v44 = (uint64_t *)(v6 + 64);
        v45 = 1;
        while (1)
        {
          v46 = *v44;
          v44 += 3;
          v40 = v33 - v46;
          if (__OFSUB__(v33, v46))
            break;
          if (__OFADD__(v40, 1))
            goto LABEL_232;
          if (v40 + 1 < 1)
          {
            v31 = v45;
            v40 = v33;
LABEL_88:
            v42 = (4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C;
            v37 = ((-15 << v42) - 1) & v37 | (v31 << v42);
            v10 = *(_QWORD *)(v6 + 24 + 24 * v31);
            swift_unknownObjectRetain();
            result = swift_unknownObjectRelease();
            v6 = v10;
            if (!*(_BYTE *)(v10 + 18))
              goto LABEL_103;
            goto LABEL_89;
          }
          ++v45;
          v33 = v40;
          if (v31 == v45)
            goto LABEL_87;
        }
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        v27 = v33;
        v14 = v31;
      }
      result = swift_unknownObjectRetain_n();
      v37 = 0;
      v40 = v10;
      v10 = v16;
LABEL_103:
      v47 = *(unsigned __int16 *)(v10 + 16);
      if (!*(_WORD *)(v10 + 16))
        goto LABEL_115;
      v48 = *(_QWORD *)(v10 + 24);
      v23 = __OFSUB__(v40, v48);
      v49 = v40 - v48;
      if (v23)
        goto LABEL_271;
      if (__OFADD__(v49, 1))
        goto LABEL_272;
      if (v49 + 1 < 1)
      {
        v47 = 0;
      }
      else
      {
        if ((_DWORD)v47 == 1)
        {
          v40 = v49;
LABEL_115:
          if (v40)
            goto LABEL_270;
          goto LABEL_116;
        }
        v50 = (uint64_t *)(v10 + 48);
        v51 = 1;
        while (1)
        {
          v52 = *v50;
          v50 += 3;
          v40 = v49 - v52;
          if (__OFSUB__(v49, v52))
            goto LABEL_258;
          if (__OFADD__(v40, 1))
            goto LABEL_259;
          if (v40 + 1 < 1)
            break;
          ++v51;
          v49 = v40;
          if (v47 == v51)
            goto LABEL_115;
        }
        v47 = v51;
        v40 = v49;
      }
LABEL_116:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v39 = v37 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
      goto LABEL_117;
    }
    goto LABEL_284;
  }
LABEL_290:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  char v36[48];
  char v37[48];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v8 = *(_QWORD *)v3;
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(_QWORD *)(v3 + 16);
  v11 = *(_QWORD *)(v3 + 24);
  v12 = *(_QWORD *)(v3 + 32);
  v13 = *(_QWORD *)(v3 + 72);
  v32 = *(_OWORD *)(v3 + 56);
  v33 = *(_OWORD *)(v3 + 40);
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 24);
    v7 = *(_QWORD *)(v3 + 32);
LABEL_7:
    *(_QWORD *)result = v8;
    *(_QWORD *)(result + 8) = v9;
    *(_QWORD *)(result + 16) = v10;
    *(_QWORD *)(result + 24) = v11;
    *(_QWORD *)(result + 32) = v12;
    *(_OWORD *)(result + 40) = v33;
    *(_OWORD *)(result + 56) = v32;
    *(_QWORD *)(result + 72) = v13;
    *(_QWORD *)(result + 80) = v4;
    *(_QWORD *)(result + 88) = v5;
    *(_QWORD *)(result + 96) = v6;
    *(_QWORD *)(result + 104) = v7;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v14 = (unint64_t)v33 >> 10;
    v34 = v9 >> 10;
    if (v9 >> 10 == (unint64_t)v33 >> 10)
    {
LABEL_5:
      a3 = 0;
      goto LABEL_6;
    }
    v24 = result;
    v25 = *(_QWORD *)(v3 + 72);
    v27 = *(_QWORD *)(v3 + 32);
    v28 = *(_QWORD *)(v3 + 24);
    v29 = *(_QWORD *)(v3 + 16);
    v30 = *(_QWORD *)(v3 + 8);
    v31 = *(_QWORD *)v3;
    v26 = a3;
    if (v9 >> 10 >= (unint64_t)v33 >> 10)
    {
LABEL_14:
      __break(1u);
LABEL_15:
      a3 = v26;
LABEL_17:
      v9 = v30;
      v8 = v31;
      v11 = v28;
      v10 = v29;
      v12 = v27;
      result = v24;
      v13 = v25;
      goto LABEL_7;
    }
    v15 = 0;
    v16 = (__int128 *)(v8 + 16);
    while (1)
    {
      v17 = *(_OWORD *)(v31 + 32);
      v41 = *v16;
      v42 = v17;
      v43 = *(_OWORD *)(v31 + 48);
      BigString.unicodeScalars.getter();
      v18 = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v36);
      v19 = *(_OWORD *)(v31 + 32);
      v38 = *v16;
      v39 = v19;
      v40 = *(_OWORD *)(v31 + 48);
      BigString.unicodeScalars.getter();
      outlined retain of AttributedString.Runs(v3);
      v4 = BigString.UnicodeScalarView.index(after:)();
      v5 = v20;
      v6 = v21;
      v7 = v22;
      outlined release of Locale((uint64_t)v37);
      result = outlined release of AttributedString.Runs(v3);
      v23 = v4 >> 10;
      if (v14 < v4 >> 10)
        break;
      *(_DWORD *)(a2 + 4 * v15) = v18;
      if (v26 - 1 == v15)
        goto LABEL_15;
      if (v23 == v14)
      {
        a3 = v15 + 1;
        goto LABEL_17;
      }
      ++v15;
      if (v23 < v34)
        goto LABEL_14;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;

  v4 = result;
  v5 = *v3;
  v6 = v3[1];
  v7 = v3[2];
  v8 = v3[3];
  v9 = v3[4];
  v10 = v3[5];
  v11 = v3[6];
  v12 = *((_QWORD *)v3 + 6);
  v13 = (v12 >> 11 << 16) | 4;
  if (!a2)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_15;
  }
  if (!a3)
  {
LABEL_15:
    *(_OWORD *)v4 = v5;
    *(_OWORD *)(v4 + 16) = v6;
    *(_OWORD *)(v4 + 32) = v7;
    *(_OWORD *)(v4 + 48) = v8;
    *(_OWORD *)(v4 + 64) = v9;
    *(_OWORD *)(v4 + 80) = v10;
    *(_OWORD *)(v4 + 96) = v11;
    *(_QWORD *)(v4 + 112) = v13;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v28 = ((unint64_t)v10 >> 9) & 0x3FFFFFFFFFFFCLL;
    if (v28 != ((32 * v12) & 0xFFFFFFFFFFFF0000) >> 14)
    {
      v14 = (uint64_t)v3;
      v20 = v3[6];
      v21 = v3[5];
      v22 = v3[4];
      v23 = v3[3];
      v24 = v3[2];
      v25 = v3[1];
      v26 = *v3;
      v27 = a3;
      v15 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
      if ((unint64_t)BigString.endIndex.getter() >> 10 < v15 >> 10)
      {
LABEL_11:
        __break(1u);
      }
      else
      {
        v16 = 0;
        while (1)
        {
          v17 = v13;
          outlined retain of Locale(v14);
          v18 = BigString.index(after:)();
          outlined release of Locale(v14);
          v13 = (v18 >> 11 << 16) | 4;
          *(_QWORD *)(a2 + 8 * v16) = v17;
          if (v27 - 1 == v16)
            break;
          if (v28 == ((32 * v18) & 0xFFFFFFFFFFFF0000) >> 14)
          {
            a3 = v16 + 1;
            goto LABEL_14;
          }
          v19 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
          ++v16;
          if ((unint64_t)BigString.endIndex.getter() >> 10 < v19 >> 10)
            goto LABEL_11;
        }
      }
      a3 = v27;
LABEL_14:
      v6 = v25;
      v5 = v26;
      v8 = v23;
      v7 = v24;
      v10 = v21;
      v9 = v22;
      v11 = v20;
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  int v26;
  char v27;
  char v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  int64x2_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64x2_t v50;
  __int128 v51;
  __int128 v52;

  v7 = a6;
  v8 = a4;
  v9 = a2;
  if (a4)
    v10 = *(unsigned __int8 *)(a4 + 18);
  else
    v10 = 0;
  v47 = a4;
  v48 = a5;
  v49 = a6;
  v50.i64[0] = a7;
  v50.i64[1] = a7;
  v51 = v10;
  v52 = 0uLL;
  if (!a2)
  {
    a3 = 0;
    *result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = a7;
    result[4] = a7;
    result[5] = v10;
    result[7] = 0;
    result[8] = 0;
    result[6] = 0;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v34 = vdupq_n_s64(a7);
    v35 = 0uLL;
    v36 = v10;
LABEL_35:
    *result = v8;
    result[1] = a5;
    result[2] = v7;
    *(int64x2_t *)(result + 3) = v34;
    *(_OWORD *)(result + 5) = v36;
    *(_OWORD *)(result + 7) = v35;
    return (_QWORD *)a3;
  }
  if (a3 < 0)
    goto LABEL_41;
  v38 = result;
  v39 = a5;
  v11 = 0;
  v12 = 0;
  v40 = a4 + 24;
  v43 = a3;
  v41 = a7;
  while (1)
  {
    v13 = v50.i64[1];
    v14 = v51;
    if (v8)
    {
      if (v12 == v7)
      {
        v37 = v7;
LABEL_37:
        *v38 = v8;
        v38[1] = v39;
        v38[2] = v7;
        v38[3] = a7;
        v38[4] = v13;
        *(_OWORD *)(v38 + 5) = v14;
        v38[7] = v11;
        a3 = v11;
        v38[8] = v37;
        return (_QWORD *)a3;
      }
    }
    else if (!v12)
    {
      v37 = 0;
      goto LABEL_37;
    }
    if (v50.i64[1] != a7)
      break;
    ++v11;
    if (*((_QWORD *)&v51 + 1))
    {
      v15 = (_QWORD *)(*((_QWORD *)&v51 + 1)
                     + 24
                     * (((unint64_t)v51 >> ((4 * *(_BYTE *)(*((_QWORD *)&v51 + 1) + 18) + 8) & 0x3C)) & 0xF));
      v17 = v15[3];
      v16 = v15[4];
      v18 = v15[5];
      *(_QWORD *)&v52 = v11;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v19 = v17;
      v44 = v18;
      v45 = v16;
    }
    else
    {
      swift_unknownObjectRetain();
      v19 = specialized Rope._Node.subscript.getter(v14, v8);
      v44 = v21;
      v45 = v20;
      swift_unknownObjectRelease();
      *(_QWORD *)&v52 = v11;
      swift_unknownObjectRetain();
      v17 = specialized Rope._Node.subscript.getter(v14, v8);
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v22 = __OFADD__(v12, v17);
    v12 += v17;
    if (v22)
      goto LABEL_40;
    *((_QWORD *)&v52 + 1) = v12;
    if (!v8)
      goto LABEL_42;
    v23 = ((-15 << ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v8 + 18) | ((unint64_t)*(unsigned __int16 *)(v8 + 16) << ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C));
    result = (_QWORD *)swift_unknownObjectRetain();
    if ((unint64_t)v14 >= v23)
      goto LABEL_42;
    if (*((_QWORD *)&v14 + 1))
    {
      v24 = (4 * *(_BYTE *)(*((_QWORD *)&v14 + 1) + 18) + 8) & 0x3C;
      v25 = (((unint64_t)v14 >> v24) & 0xF) + 1;
      if (v25 < *(unsigned __int16 *)(*((_QWORD *)&v14 + 1) + 16))
      {
        *(_QWORD *)&v51 = (v25 << v24) | ((-15 << v24) - 1) & v14;
LABEL_9:
        result = (_QWORD *)swift_unknownObjectRelease_n();
        goto LABEL_10;
      }
    }
    v26 = *(unsigned __int8 *)(v8 + 18);
    v27 = (4 * v26 + 8) & 0x3C;
    v46 = ((unint64_t)v14 >> v27) & 0xF;
    if (v26)
    {
      swift_unknownObjectRetain();
      v28 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v40, (uint64_t *)&v46, (uint64_t)&v50.i64[1], v8, v26);
      swift_unknownObjectRelease();
      if ((v28 & 1) == 0)
      {
        v29 = *(unsigned __int8 *)(v8 + 18);
LABEL_31:
        v31 = *(unsigned __int16 *)(v8 + 16);
        v32 = *(_BYTE *)(v8 + 18);
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v33 = ((-15 << ((4 * v32 + 8) & 0x3C)) - 1) & v29 | (unint64_t)(v31 << ((4 * v32 + 8) & 0x3C));
        a7 = v41;
        v7 = a6;
        v50.i64[1] = v41;
        v51 = v33;
        a3 = v43;
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    v30 = (((unint64_t)v14 >> v27) & 0xF) + 1;
    if (v30 >= *(unsigned __int16 *)(v8 + 16))
    {
      v29 = 0;
      goto LABEL_31;
    }
    *(_QWORD *)&v51 = (v30 << v27) | ((-15 << v27) - 1) & v14;
    result = (_QWORD *)swift_unknownObjectRelease_n();
    *((_QWORD *)&v51 + 1) = v8;
LABEL_10:
    v7 = a6;
    a3 = v43;
    a7 = v41;
LABEL_11:
    *v9 = v19;
    v9[1] = v45;
    v9[2] = v44;
    v9 += 3;
    if (a3 == v11)
    {
      v8 = v47;
      a5 = v48;
      v7 = v49;
      v34 = v50;
      v36 = v51;
      v35 = v52;
      result = v38;
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _OWORD v40[3];
  _OWORD v41[3];
  __int128 v42[3];
  _BYTE v43[48];

  v7 = *v4;
  v8 = v4[1];
  v9 = v4[2];
  v10 = v4[3];
  v11 = v4[4];
  v12 = v4[9];
  v34 = *(_OWORD *)(v4 + 7);
  v35 = *(_OWORD *)(v4 + 5);
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = v4[1];
    v4 = (uint64_t *)v4[2];
    v6 = v10;
    v3 = v11;
LABEL_7:
    *(_QWORD *)result = v7;
    *(_QWORD *)(result + 8) = v8;
    *(_QWORD *)(result + 16) = v9;
    *(_QWORD *)(result + 24) = v10;
    *(_QWORD *)(result + 32) = v11;
    *(_OWORD *)(result + 40) = v35;
    *(_OWORD *)(result + 56) = v34;
    *(_QWORD *)(result + 72) = v12;
    *(_QWORD *)(result + 80) = v5;
    *(_QWORD *)(result + 88) = v4;
    *(_QWORD *)(result + 96) = v6;
    *(_QWORD *)(result + 104) = v3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v37 = v8 >> 10;
    if (v8 >> 10 == (unint64_t)v35 >> 10)
    {
LABEL_5:
      a3 = 0;
      goto LABEL_6;
    }
    v27 = v4[9];
    v28 = result;
    v29 = v4[4];
    v30 = v4[3];
    v31 = v4[2];
    v32 = v4[1];
    v33 = *v4;
    if (v8 >> 10 >= (unint64_t)v35 >> 10)
    {
LABEL_14:
      __break(1u);
LABEL_15:
      a3 = v8;
LABEL_16:
      result = v28;
      v11 = v29;
      v8 = v32;
      v7 = v33;
      v10 = v30;
      v9 = v31;
      v12 = v27;
      goto LABEL_7;
    }
    v13 = a2;
    v14 = (__int128 *)(v7 + 16);
    v8 = 1;
    v36 = a3;
    while (1)
    {
      v39 = v8;
      v15 = *v14;
      v16 = *(_OWORD *)(v33 + 48);
      v41[1] = *(_OWORD *)(v33 + 32);
      v41[2] = v16;
      v41[0] = v15;
      v17 = *v14;
      v42[1] = *(_OWORD *)(v33 + 32);
      v42[2] = v16;
      v42[0] = v17;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v42, (uint64_t)v43);
      outlined retain of Locale((uint64_t)v43);
      v18 = BigString.subscript.getter();
      v20 = v19;
      outlined release of Locale((uint64_t)v41);
      v21 = *v14;
      v22 = *(_OWORD *)(v33 + 48);
      v40[1] = *(_OWORD *)(v33 + 32);
      v40[2] = v22;
      v40[0] = v21;
      outlined retain of AttributedString.Runs(v38);
      outlined retain of Locale((uint64_t)v40);
      v5 = BigString.index(after:)();
      v4 = v23;
      v6 = v24;
      v3 = v25;
      outlined release of Locale((uint64_t)v40);
      result = outlined release of AttributedString.Runs(v38);
      v26 = v5 >> 10;
      if ((unint64_t)v35 >> 10 < v5 >> 10)
        break;
      *v13 = v18;
      v13[1] = v20;
      a3 = v36;
      v8 = v39;
      if (v36 == v39)
        goto LABEL_16;
      if (v26 == (unint64_t)v35 >> 10)
        goto LABEL_15;
      v8 = v39 + 1;
      v13 += 2;
      if (v26 < v37)
        goto LABEL_14;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v33;

  result = BigString.Index.init(_utf8Offset:)();
  v11 = result;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v26 = a1;
  if (!a2)
  {
LABEL_5:
    v18 = 0;
LABEL_12:
    *v26 = a4;
    v26[1] = a5;
    v26[2] = a6;
    v26[3] = a7;
    v26[4] = v11;
    v26[5] = v13;
    v26[6] = v15;
    v26[7] = v17;
    return v18;
  }
  if (!a3)
  {
    v18 = 0;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v28 = (unint64_t)BigString.Index.init(_utf8Offset:)() >> 10;
    if (v28 != v11 >> 10)
    {
      v18 = 0;
      v25 = a3;
      v27 = a3 - 1;
      while (1)
      {
        v33 = v17;
        v19 = v15;
        v20 = v13;
        v21 = v11;
        swift_bridgeObjectRetain();
        Substring.index(after:)();
        v11 = BigString.Index.init(_utf8Offset:)();
        v13 = v22;
        v15 = v23;
        v17 = v24;
        swift_bridgeObjectRelease();
        *a2 = v21;
        a2[1] = v20;
        a2[2] = v19;
        a2[3] = v33;
        if (v27 == v18)
          break;
        ++v18;
        a2 += 4;
        if (v28 == v11 >> 10)
          goto LABEL_12;
      }
      v18 = v25;
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t *a1, uint64_t a2, uint64_t a3, const char *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  FTS *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  stat v23;
  char *v24[3];

  v24[2] = *(char **)MEMORY[0x1E0C80C00];
  type metadata accessor for _FTSSequence.Iterator();
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 56) = 0;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v10 + 64) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v10 + 72) = v11;
  *(_BYTE *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 48) = a4;
  memset(&v23, 0, 28);
  memset(&v23.st_atimespec, 0, 112);
  if (lstat(a4, &v23) || (v24[0] = (char *)a4, v24[1] = 0, (v16 = fts_open(v24, a5, 0)) == 0))
  {
    v12 = MEMORY[0x186DA4118]();
    v14 = String.init(cString:)();
    v15 = 1;
    v16 = (FTS *)v12;
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v15 = 0;
  }
  v17 = 0;
  *(_QWORD *)(v10 + 16) = v16;
  *(_QWORD *)(v10 + 24) = v14;
  *(_QWORD *)(v10 + 32) = v13;
  *(_BYTE *)(v10 + 40) = v15;
  if (a2 && a3)
  {
    if (a3 < 0)
      __break(1u);
    v18 = _FTSSequence.Iterator.next()();
    if (v21 == -1)
    {
      v17 = 0;
    }
    else
    {
      v17 = 0;
      while (1)
      {
        *(_QWORD *)a2 = v18;
        *(_QWORD *)(a2 + 8) = v19;
        *(_QWORD *)(a2 + 16) = v20;
        *(_BYTE *)(a2 + 24) = v21 & 1;
        if (a3 - 1 == v17)
          break;
        a2 += 32;
        v18 = _FTSSequence.Iterator.next()();
        ++v17;
        if (v21 == -1)
          goto LABEL_15;
      }
      v17 = a3;
    }
  }
LABEL_15:
  *a1 = v10;
  return v17;
}

unint64_t String.UnicodeScalarView.distance(from:to:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v7 = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a3, a4);
  result = _StringGuts.validateInclusiveScalarIndex(_:)(a2, a3, a4);
  v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(after:)();
        v7 = result;
      }
      else
      {
        v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = _StringObject.sharedUTF8.getter();
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14)
        return v11;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(before:)();
        v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = _StringObject.sharedUTF8.getter();
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14)
        return v11;
    }
    goto LABEL_36;
  }
  return 0;
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _BYTE *a2, uint64_t a3, unsigned int a4)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  if (!a2)
  {
    v11 = 0;
    v12 = 0;
LABEL_24:
    *(_DWORD *)result = a4;
    *(_QWORD *)(result + 8) = v11;
    return v12;
  }
  if (!a3)
  {
    v11 = 0;
LABEL_23:
    v12 = a3;
    goto LABEL_24;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = (a4 & 0x3F) << 8;
    v5 = (v4 | (a4 >> 6)) + 33217;
    v6 = (v4 | (a4 >> 6) & 0x3F) << 8;
    v7 = (v6 | (a4 >> 12)) + 8487393;
    v8 = (((v6 & 0xFFFFFFC0 | (a4 >> 12) & 0x3F) << 8) | (a4 >> 18)) - 2122219023;
    if (a4 < 0x80)
      v9 = a4 + 1;
    else
      v9 = v5;
    if (HIWORD(a4))
      v7 = v8;
    if (a4 >= 0x800)
      v10 = v7;
    else
      v10 = v9;
    *a2 = (v10 - 1) & ~(-1 << (32 - (__clz(v10) & 0x18)));
    v11 = 1;
    v12 = 1;
    if (a3 == 1 || a4 < 0x80)
      goto LABEL_24;
    v13 = a4 >= 0x800 ? v7 : v5;
    a2[1] = (unsigned __int16)((v13 - 257) & ~(unsigned __int16)(-1 << (32 - (__clz(v13) & 0x18)))) >> 8;
    v11 = 2;
    v12 = 2;
    if (a3 == 2 || a4 < 0x800)
      goto LABEL_24;
    v14 = ~(-1 << (32 - (__clz(v7) & 0x18)));
    a2[2] = ((v7 + 16711423) & v14) >> 16;
    if (a3 != 3)
    {
      if (a4 < 0x10000)
      {
        v11 = 3;
        v12 = 3;
      }
      else
      {
        a2[3] = ((v7 - 16843009) & v14) >> 24;
        v11 = 4;
        v12 = 4;
      }
      goto LABEL_24;
    }
    v11 = 3;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

_QWORD *specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  v19[3] = v8;
  v19[4] = &protocol witness table for <A> ArraySlice<A>;
  v9 = (_QWORD *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  result = __swift_project_boxed_opaque_existential_1(v19, v8);
  v11 = result[2];
  v12 = result[3] >> 1;
  v13 = __OFSUB__(v12, v11);
  v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    v15 = (_BYTE *)(result[1] + v11);
    v16 = &v15[v14];
    swift_unknownObjectRetain();
    closure #1 in Data.init<A>(_:)(v15, v16, &v18);
    v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (_QWORD *)v17;
  }
  return result;
}

uint64_t specialized static StringProtocol.== infix<A>(_:_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;

  if ((a6 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a6) & 0xF;
  else
    v6 = a5 & 0xFFFFFFFFFFFFLL;
  if (a3 == a5 && a4 == a6 && !(a1 >> 16) && a2 >> 16 == v6)
    return 1;
  else
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
}

uint64_t sub_181EF3B50()
{
  return swift_deallocObject();
}

uint64_t sub_181EF3B60()
{
  return swift_deallocObject();
}

uint64_t sub_181EF3B70()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

_QWORD *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

uint64_t specialized OptionSet<>.remove(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v2;
  if (*v2)
  {
    v4 = v3 & result;
    if ((v3 & result) != 0 && v4 != 0xFFFF)
    {
      v7 = v3 ^ result;
      if (v3 == result)
      {
        v8 = (unsigned __int16)*v2;
        if ((unsigned __int16)*v2)
          goto LABEL_15;
        goto LABEL_14;
      }
LABEL_13:
      v8 = v7 & v3;
      if (v8)
      {
LABEL_15:
        v6 = 0;
        *v2 = v8;
        goto LABEL_16;
      }
LABEL_14:
      v8 = 0xFFFFLL;
      goto LABEL_15;
    }
    v4 = 0;
    v6 = 1;
  }
  else
  {
    v4 = 0;
    v6 = 1;
    if ((_WORD)result && (unsigned __int16)result != 0xFFFF)
    {
      v4 = (unsigned __int16)result;
      v7 = result ^ 0xFFFF;
      if (result == 0xFFFF)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
LABEL_16:
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v6;
  return result;
}

uint64_t specialized OptionSet<>.update(with:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v3 = *v2;
  if (*v2)
  {
    v4 = v3 & result;
    if ((v3 & result) != 0)
    {
LABEL_3:
      v5 = v3 | result;
      if (!v5)
        v5 = 0xFFFFLL;
      *v2 = v5;
      v6 = v4 == 0xFFFF;
      if (v4 == 0xFFFF)
        v4 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v4 = (unsigned __int16)result;
    if ((_WORD)result)
      goto LABEL_3;
  }
  v4 = 0;
  v7 = v3 | result;
  if (!v7)
    v7 = 0xFFFFLL;
  *v2 = v7;
  v6 = 1;
LABEL_12:
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v6;
  return result;
}

uint64_t specialized SetAlgebra.subtracting(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  if (a2)
  {
    if (a2 != result)
    {
      v3 = (a2 ^ result) & a2;
      if (v3)
      {
LABEL_4:
        *a3 = v3;
        return result;
      }
    }
    else
    {
      v3 = (unsigned __int16)a2;
      if ((_WORD)a2)
        goto LABEL_4;
    }
  }
  else if (result != 0xFFFF)
  {
    v3 = (unsigned __int16)~(_WORD)result;
    if ((_WORD)result != 0xFFFF)
      goto LABEL_4;
  }
  *a3 = 0xFFFFLL;
  return result;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v5 = a1;
  v6 = v2;
  IndexSet.symmetricDifference(_:)(&v5, &v7);
  v4 = v7;
  v5 = v2;
  IndexSet.intersection(_:)(&v4, (uint64_t)&v6);
  swift_release();
  result = swift_release();
  *v1 = v6;
  return result;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  if (!*v1)
  {
    v3 = result ^ 0xFFFF;
    if (result == 0xFFFF)
      goto LABEL_7;
    goto LABEL_6;
  }
  v3 = v2 ^ result;
  if (v2 != result)
  {
LABEL_6:
    v4 = v3 & v2;
    if (v4)
      goto LABEL_4;
    goto LABEL_7;
  }
  v4 = (unsigned __int16)*v1;
  if ((unsigned __int16)*v1)
  {
LABEL_4:
    *v1 = v4;
    return result;
  }
LABEL_7:
  *v1 = 0xFFFFLL;
  return result;
}

uint64_t ByteCountFormatStyle.Attributed._format(_:doubleValue:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  __int128 *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  char v52;
  char isUniquelyReferenced_nonNull_native;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  const void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD *v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  uint64_t *v73;
  os_unfair_lock_s *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t ObjectType;
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  os_unfair_lock_s *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  _OWORD *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _OWORD *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _OWORD *v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  char *v156;
  unint64_t v157;
  unint64_t v158;
  _OWORD *v159;
  __int128 v160;
  _OWORD *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  unint64_t v165;
  uint64_t v166;
  int64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unint64_t v177;
  __int128 v178;
  unint64_t v179;
  __int128 v180;
  uint64_t result;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  _OWORD *v186;
  uint64_t v187;
  int v188;
  char v189;
  uint64_t v190;
  _BOOL8 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int64_t v212;
  unint64_t v213;
  int64_t v214;
  unint64_t v215;
  _BYTE v216[40];
  unint64_t v217;
  _OWORD *v218;
  uint64_t *v219;
  _OWORD *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  _BYTE *v224;
  _BYTE *v225;
  char *v226;
  _BYTE *v227;
  char *v228;
  _BYTE *v229;
  _OWORD *v230;
  _OWORD *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  unint64_t v237;
  int64_t v238;
  char *v239;
  unint64_t v240;
  unint64_t v241;
  int64_t v242;
  unint64_t v243;
  __int128 v244;
  _OWORD v245[2];
  _BYTE v246[24];
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  unint64_t v254;
  char *v255;
  _BYTE *v256;
  unint64_t v257;
  unint64_t v258;
  _OWORD *v259;
  unint64_t v260;
  int64_t v261;
  void *v262;
  uint64_t v263;
  unint64_t v264;
  char *v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  _QWORD v269[24];
  __int128 v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  char *v274;
  _BYTE *v275;
  unint64_t v276;
  unint64_t v277;
  _OWORD *v278;
  unint64_t v279;
  int64_t v280;
  char v281;
  const void *v282;
  int64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  _QWORD v290[17];
  unint64_t v291;
  char *v292;
  _BYTE *v293;
  unint64_t v294;
  unint64_t v295;
  _OWORD *v296;
  unint64_t v297;
  int64_t v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char *v311;
  __int128 v312[3];
  _OWORD v313[17];
  _OWORD v314[10];
  __int128 v315;
  unint64_t v316[6];
  __int128 v317[3];
  _OWORD v318[6];
  _QWORD v319[8];
  __int128 v320[3];
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  _OWORD v349[6];
  uint64_t v350;

  v5 = 0;
  v350 = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for Logger();
  v228 = *(char **)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v229 = &v216[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v223 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  v226 = *(char **)(v223 - 8);
  MEMORY[0x1E0C80A78](v223);
  v224 = &v216[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v222 = v8;
  MEMORY[0x1E0C80A78](v9);
  v11 = &v216[-v10];
  v12 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v12);
  v15 = &v216[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = v2[1];
  v244 = *v2;
  v245[0] = v16;
  *(_QWORD *)&v245[1] = *((_QWORD *)v2 + 4);
  if ((v16 & 1) == 0 || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v17 = (char *)&loc_181EF3FC8 + *((int *)qword_181EF6F10 + v244);
    v227 = (_BYTE *)v6;
    __asm { BR              X10 }
  }
  v229 = v13;
  v18 = (BYTE8(v244) >> 1) & 1;
  v19 = 0xD000000000000015;
  *(_QWORD *)v246 = 0;
  *(_QWORD *)&v246[8] = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  *(_QWORD *)v246 = 0xD000000000000015;
  *(_QWORD *)&v246[8] = 0x800000018230F6D0;
  if (one-time initialization token for unitNames != -1)
    swift_once();
  v20 = v226;
  if (*(_QWORD *)(static ByteCountFormatStyle.Unit.unitNames + 16) <= v18)
  {
    __break(1u);
LABEL_88:
    swift_once();
    goto LABEL_44;
  }
  v21 = static ByteCountFormatStyle.Unit.unitNames + 16 * v18;
  v22 = *(_QWORD *)(v21 + 32);
  v23 = *(void **)(v21 + 40);
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = v22;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  if ((_DWORD)v18)
    v25 = 0;
  else
    v25 = 0xD000000000000015;
  if ((_DWORD)v18)
    v26 = 0xE000000000000000;
  else
    v26 = 0x800000018230F6F0;
  v27 = v26;
  String.append(_:)(*(Swift::String *)&v25);
  swift_bridgeObjectRelease();
  v28 = *(void **)v246;
  v29 = *(_QWORD *)&v246[8];
  v315 = *(_OWORD *)((char *)v245 + 8);
  *(_OWORD *)v246 = *(_OWORD *)((char *)v245 + 8);
  outlined retain of Locale((uint64_t)&v315);
  v30 = specialized static ICUByteCountNumberFormatter.create(for:locale:)(v28, v29, (uint64_t)v246);
  swift_bridgeObjectRelease();
  outlined release of ByteCountFormatStyle.Attributed((uint64_t)&v244);
  if (!v30)
  {
    BigString.init(_:)();
    result = AttributedString.init(_:attributes:)((__int128 *)v246, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], v290);
    *a1 = v290[0];
    return result;
  }
  v236 = (char *)v18;
  swift_retain();
  ICUNumberFormatterBase.attributedFormatPositions(_:)(0, 0, 0);
  v219 = a1;
  if (v32)
  {
    v34 = v31;
    v35 = v32;
    v36 = v33;
    swift_bridgeObjectRetain();
    v233 = v34;
    v235 = v35;
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v317, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v246);
    v37 = *(_QWORD *)v246;
    v38 = *(_QWORD *)(v36 + 16);
    if (v38)
    {
      v227 = v11;
      v228 = v15;
      v221 = v30;
      v230 = &v246[8];
      v231 = v313;
      swift_bridgeObjectRetain();
      v232 = lazy protocol witness table accessor for type String and conformance String();
      v225 = (_BYTE *)v36;
      v39 = v36 + 48;
      while (2)
      {
        v40 = v5;
        v41 = *(unsigned int *)(v39 - 16);
        v242 = v39;
        v243 = v41;
        v42 = v233;
        v43 = v235;
        *(_QWORD *)v246 = v233;
        *(_QWORD *)&v246[8] = v235;
        swift_bridgeObjectRetain();
        v44 = String.Index.init<A>(utf16Offset:in:)();
        *(_QWORD *)v246 = v42;
        *(_QWORD *)&v246[8] = v43;
        swift_bridgeObjectRetain();
        v45 = String.Index.init<A>(utf16Offset:in:)();
        if (v45 >> 14 < v44 >> 14)
        {
          __break(1u);
LABEL_85:
          __break(1u);
          JUMPOUT(0x181EF69ECLL);
        }
        v46 = v45;
        swift_retain();
        specialized Range<>.init<A>(_range:in:)(v44, v46, (_OWORD *)v37, (unint64_t *)v246);
        v47 = v247;
        if ((_QWORD)v247 == 2)
          __break(1u);
        v239 = *(char **)v246;
        v237 = *(_QWORD *)&v246[16];
        v238 = *(_QWORD *)&v246[8];
        v48 = *((_QWORD *)&v247 + 1);
        v241 = *((_QWORD *)&v248 + 1);
        v49 = v248;
        v240 = v249;
        v290[0] = MEMORY[0x1E0DEE9E0];
        v290[1] = MEMORY[0x1E0DEE9E8];
        v50 = 0;
        v51 = 2;
        v52 = (char)v236;
        switch((int)v243)
        {
          case 0:
            goto LABEL_21;
          case 1:
            v50 = 1;
LABEL_21:
            specialized AttributeContainer.subscript.setter(v50);
            goto LABEL_27;
          case 2:
            goto LABEL_26;
          case 6:
            v51 = 0;
            goto LABEL_26;
          case 7:
            v51 = 3;
            goto LABEL_26;
          case 8:
            v51 = 4;
            goto LABEL_26;
          case 10:
            v51 = 1;
LABEL_26:
            specialized AttributeContainer.subscript.setter(v51);
LABEL_27:
            if (v243 > 0xA || ((0x447u >> v243) & 1) == 0)
              goto LABEL_31;
            v52 = 9;
LABEL_30:
            specialized AttributeContainer.subscript.setter(v52);
LABEL_31:
            v270 = *(_OWORD *)v290;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v234 = v40;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v54 = *(_OWORD *)(v37 + 32);
              v314[0] = *(_OWORD *)(v37 + 16);
              v314[1] = v54;
              v314[2] = *(_OWORD *)(v37 + 48);
              v55 = *(_QWORD *)(v37 + 64);
              v56 = *(_QWORD *)(v37 + 72);
              v243 = v49;
              v57 = v48;
              v59 = *(_QWORD *)(v37 + 80);
              v58 = *(_QWORD *)(v37 + 88);
              type metadata accessor for AttributedString.Guts();
              swift_allocObject();
              outlined retain of Locale((uint64_t)v314);
              swift_unknownObjectRetain();
              v60 = v59;
              v49 = v243;
              v61 = v58;
              v48 = v57;
              v62 = AttributedString.Guts.init(string:runs:)(v314, v55, v56, v60, v61);
              swift_release();
              v37 = v62;
            }
            v63 = v241;
            v64 = v240;
            v65 = v239;
            v66 = *(_OWORD *)(v37 + 32);
            v313[10] = *(_OWORD *)(v37 + 16);
            v313[11] = v66;
            v313[12] = *(_OWORD *)(v37 + 48);
            BigString.startIndex.getter();
            BigString.endIndex.getter();
            v282 = v65;
            v283 = v238;
            v284 = v237;
            v285 = v47;
            v286 = v48;
            v287 = v49;
            v288 = v63;
            v289 = v64;
            v67 = *(_OWORD *)(v37 + 16);
            v68 = *(_OWORD *)(v37 + 48);
            v349[4] = *(_OWORD *)(v37 + 32);
            v349[5] = v68;
            v349[3] = v67;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            swift_release();
            outlined release of Locale((uint64_t)v318);
            outlined release of Locale((uint64_t)v312);
            v70 = v230;
            v69 = v231;
            v71 = v231[1];
            *v230 = *v231;
            v70[1] = v71;
            v72 = v69[3];
            v70[2] = v69[2];
            v70[3] = v72;
            *(_QWORD *)v246 = v37;
            if (one-time initialization token for currentIdentity != -1)
              swift_once();
            v73 = (uint64_t *)(static AttributedString.currentIdentity + 16);
            v74 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
            swift_retain();
            os_unfair_lock_lock(v74);
            v75 = v234;
            closure #1 in static AttributedString._nextModifyIdentity.getter(v73, &v268);
            os_unfair_lock_unlock(v74);
            swift_release();
            v76 = v268;
            *(_QWORD *)&v250 = v268;
            BigString.init()();
            v268 = 0;
            MEMORY[0x186DA9E90](&v268, 8);
            v77 = v268;
            type metadata accessor for AttributedString.Guts();
            v78 = swift_allocObject();
            if ((BigString.isEmpty.getter() & 1) == 0)
              goto LABEL_85;
            v79 = v318[4];
            *(_OWORD *)(v78 + 16) = v318[3];
            *(_OWORD *)(v78 + 32) = v79;
            *(_OWORD *)(v78 + 48) = v318[5];
            *(_QWORD *)(v78 + 64) = 0;
            *(_QWORD *)(v78 + 72) = 0;
            *(_QWORD *)(v78 + 80) = 0;
            *(_QWORD *)(v78 + 88) = v77;
            swift_release();
            LOBYTE(v268) = 0;
            AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v270, (char *)&v268);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((_QWORD)v250 != v76)
              goto LABEL_131;
            v39 = v242 + 24;
            v37 = *(_QWORD *)v246;
            swift_release();
            --v38;
            v5 = v75;
            if (v38)
              continue;
            swift_bridgeObjectRelease();
            v30 = v221;
            v11 = v227;
            v15 = v228;
            v20 = v226;
            break;
          case 11:
            goto LABEL_30;
          default:
            goto LABEL_31;
        }
        break;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v219;
  }
  else
  {
    *(_QWORD *)v246 = 0;
    dispatch thunk of CustomStringConvertible.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v312, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v246);
    swift_release();
    v37 = *(_QWORD *)v246;
  }
  *(_OWORD *)v246 = v315;
  swift_retain();
  if ((ByteCountFormatStyle.Attributed.useSpelloutZero(forLocale:unit:)((uint64_t)v246, v236) & 1) == 0)
  {
    swift_release();
    result = swift_release();
    *a1 = v37;
    return result;
  }
  v220 = (_OWORD *)v37;
  v221 = v30;
  v19 = v5;
  *(_WORD *)v15 = 770;
  swift_storeEnumTagMultiPayload();
  v228 = v15;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v15, (uint64_t)v11, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  v80 = *((_QWORD *)&v315 + 1);
  ObjectType = swift_getObjectType();
  v82 = *(uint64_t (**)(_QWORD, _QWORD))(v80 + 64);
  outlined retain of ByteCountFormatStyle.Attributed((uint64_t)&v244);
  v83 = v82(ObjectType, v80);
  v84 = v223;
  v85 = (uint64_t *)&v11[*(int *)(v223 + 20)];
  *v85 = v83;
  v85[1] = v86;
  v11[*(int *)(v84 + 24)] = 0;
  if (one-time initialization token for cache != -1)
    goto LABEL_88;
LABEL_44:
  v87 = static ICULegacyNumberFormatter.cache;
  v88 = (char *)unk_1EDC3B320;
  v89 = (uint64_t)v224;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v11, (uint64_t)v224, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v90 = (v20[80] + 16) & ~(unint64_t)v20[80];
  v91 = swift_allocObject();
  outlined init with take of ICULegacyNumberFormatter.Signature(v89, v91 + v90);
  v92 = v88 + 16;
  v93 = (os_unfair_lock_s *)(v88 + 24);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)v88 + 6);
  v227 = v11;
  specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)(v88 + 16), (uint64_t)v11, (uint64_t *)v246);
  os_unfair_lock_unlock((os_unfair_lock_t)v88 + 6);
  swift_release();
  if (*(_QWORD *)v246)
  {
    v217 = v19;
    v222 = *(_QWORD *)v246;
    swift_release();
    v95 = (uint64_t)v227;
    v94 = (uint64_t)v228;
    goto LABEL_46;
  }
  implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  v183 = v182;
  v184 = (void *)v19;
  v185 = (uint64_t)v228;
  if (v184)
  {

    swift_release();
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v227, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_release();
    outlined release of ByteCountFormatStyle.Attributed((uint64_t)&v244);
    outlined destroy of ICUNumberFormatter.Signature(v185, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    v186 = v220;
    swift_release();
    result = swift_release();
    *v219 = (uint64_t)v186;
    return result;
  }
  v217 = 0;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)v88 + 6);
  v187 = *((_QWORD *)v88 + 2);
  if (v87 >= *(_QWORD *)(v187 + 16))
  {
    swift_bridgeObjectRetain();
    LOBYTE(v168) = v187;
  }
  else
  {
    LOBYTE(v168) = MEMORY[0x1E0DEE9E0];
    *v92 = MEMORY[0x1E0DEE9E0];
  }
  swift_retain();
  v188 = swift_isUniquelyReferenced_nonNull_native();
  v290[0] = *v92;
  v167 = v290[0];
  *v92 = 0x8000000000000000;
  v177 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v227);
  v190 = *(_QWORD *)(v167 + 16);
  v191 = (v189 & 1) == 0;
  v192 = v190 + v191;
  if (__OFADD__(v190, v191))
  {
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  LOBYTE(v168) = v189;
  v193 = *(_QWORD *)(v167 + 24);
  v222 = v183;
  if (v193 < v192)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v192, v188);
    v194 = v290[0];
    v95 = (uint64_t)v227;
    v195 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v227);
    if ((v168 & 1) != (v196 & 1))
      goto LABEL_133;
    v177 = v195;
    v94 = (uint64_t)v228;
    v197 = (uint64_t)v224;
    if ((v168 & 1) == 0)
      goto LABEL_127;
    goto LABEL_83;
  }
  if ((v188 & 1) == 0)
  {
LABEL_92:
    v237 = v177;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
    v200 = static _DictionaryStorage.copy(original:)();
    v194 = v200;
    if (*(_QWORD *)(v167 + 16))
    {
      v201 = (char *)(v200 + 64);
      v202 = 1 << *(_BYTE *)(v194 + 32);
      v239 = (char *)(v167 + 64);
      v203 = (unint64_t)(v202 + 63) >> 6;
      if (v194 != v167 || v201 >= &v239[8 * v203])
        memmove(v201, v239, 8 * v203);
      *(_QWORD *)(v194 + 16) = *(_QWORD *)(v167 + 16);
      v204 = 1 << *(_BYTE *)(v167 + 32);
      v205 = -1;
      if (v204 < 64)
        v205 = ~(-1 << v204);
      v206 = v205 & *(_QWORD *)(v167 + 64);
      v242 = 0;
      v243 = v206;
      v238 = (unint64_t)(v204 + 63) >> 6;
      v207 = (uint64_t)v224;
      while (1)
      {
        if (v243)
        {
          v208 = __clz(__rbit64(v243));
          v243 &= v243 - 1;
          v209 = v208 | (v242 << 6);
        }
        else
        {
          v212 = v242 + 1;
          if (__OFADD__(v242, 1))
          {
            __break(1u);
LABEL_131:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            goto LABEL_132;
          }
          if (v212 >= v238)
            break;
          v213 = *(_QWORD *)&v239[8 * v212];
          ++v242;
          if (!v213)
          {
            v242 = v212 + 1;
            if (v212 + 1 >= v238)
              break;
            v213 = *(_QWORD *)&v239[8 * v242];
            if (!v213)
            {
              v242 = v212 + 2;
              if (v212 + 2 >= v238)
                break;
              v213 = *(_QWORD *)&v239[8 * v242];
              if (!v213)
              {
                v242 = v212 + 3;
                if (v212 + 3 >= v238)
                  break;
                v213 = *(_QWORD *)&v239[8 * v242];
                if (!v213)
                {
                  v242 = v212 + 4;
                  if (v212 + 4 >= v238)
                    break;
                  v213 = *(_QWORD *)&v239[8 * v242];
                  if (!v213)
                  {
                    v242 = v212 + 5;
                    if (v212 + 5 >= v238)
                      break;
                    v213 = *(_QWORD *)&v239[8 * v242];
                    if (!v213)
                    {
                      v242 = v212 + 6;
                      if (v212 + 6 >= v238)
                        break;
                      v213 = *(_QWORD *)&v239[8 * v242];
                      if (!v213)
                      {
                        v242 = v212 + 7;
                        if (v212 + 7 >= v238)
                          break;
                        v213 = *(_QWORD *)&v239[8 * v242];
                        if (!v213)
                        {
                          v214 = v212 + 8;
                          if (v214 >= v238)
                            break;
                          v213 = *(_QWORD *)&v239[8 * v214];
                          if (!v213)
                          {
                            while (1)
                            {
                              v242 = v214 + 1;
                              if (__OFADD__(v214, 1))
                                break;
                              if (v242 >= v238)
                                goto LABEL_126;
                              v213 = *(_QWORD *)&v239[8 * v242];
                              ++v214;
                              if (v213)
                                goto LABEL_125;
                            }
LABEL_132:
                            __break(1u);
LABEL_133:
                            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                            __break(1u);
                            JUMPOUT(0x181EF6EE0);
                          }
                          v242 = v214;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_125:
          v243 = (v213 - 1) & v213;
          v209 = __clz(__rbit64(v213)) + (v242 << 6);
        }
        v210 = *(_QWORD *)(v167 + 48);
        v241 = *((_QWORD *)v226 + 9) * v209;
        outlined init with copy of ICUNumberFormatter.Signature(v210 + v241, v207, type metadata accessor for ICULegacyNumberFormatter.Signature);
        v211 = 8 * v209;
        v240 = *(_QWORD *)(*(_QWORD *)(v167 + 56) + v211);
        outlined init with take of ICULegacyNumberFormatter.Signature(v207, *(_QWORD *)(v194 + 48) + v241);
        *(_QWORD *)(*(_QWORD *)(v194 + 56) + v211) = v240;
        swift_retain();
      }
    }
LABEL_126:
    swift_bridgeObjectRelease();
    v95 = (uint64_t)v227;
    v94 = (uint64_t)v228;
    v197 = (uint64_t)v224;
    v177 = v237;
    if ((v168 & 1) == 0)
      goto LABEL_127;
    goto LABEL_83;
  }
  v194 = v167;
  v95 = (uint64_t)v227;
  v94 = (uint64_t)v228;
  v197 = (uint64_t)v224;
  if ((v189 & 1) == 0)
  {
LABEL_127:
    v215 = v177;
    outlined init with copy of ICUNumberFormatter.Signature(v95, v197, type metadata accessor for ICULegacyNumberFormatter.Signature);
    specialized _NativeDictionary._insert(at:key:value:)(v215, v197, v222, (_QWORD *)v194);
    goto LABEL_128;
  }
LABEL_83:
  v198 = *(_QWORD *)(v194 + 56);
  v199 = 8 * v177;
  swift_release();
  *(_QWORD *)(v198 + v199) = v222;
LABEL_128:
  *((_QWORD *)v88 + 2) = v194;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v93);
  swift_release_n();
  swift_bridgeObjectRelease();
LABEL_46:
  outlined destroy of ICUNumberFormatter.Signature(v95, type metadata accessor for ICULegacyNumberFormatter.Signature);
  swift_release();
  outlined release of ByteCountFormatStyle.Attributed((uint64_t)&v244);
  outlined destroy of ICUNumberFormatter.Signature(v94, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  swift_retain();
  specialized _withResizingUCharBuffer(initialSize:_:)(32);
  v97 = v96;
  swift_release();
  v98 = v219;
  v99 = v220;
  if (v97)
  {
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v320, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v246);
    v100 = *(_QWORD *)v246;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v101 = *(_OWORD *)(v100 + 32);
      v349[0] = *(_OWORD *)(v100 + 16);
      v349[1] = v101;
      v349[2] = *(_OWORD *)(v100 + 48);
      v102 = *(_QWORD *)(v100 + 64);
      v103 = *(_QWORD *)(v100 + 72);
      v104 = *(_QWORD *)(v100 + 80);
      v105 = *(_QWORD *)(v100 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v349);
      swift_unknownObjectRetain();
      v106 = AttributedString.Guts.init(string:runs:)(v349, v102, v103, v104, v105);
      swift_release();
      v100 = v106;
    }
    v107 = *(_OWORD *)(v100 + 32);
    v346 = *(_OWORD *)(v100 + 16);
    v347 = v107;
    v348 = *(_OWORD *)(v100 + 48);
    v108 = BigString.startIndex.getter();
    v110 = v109;
    v112 = v111;
    v114 = v113;
    v115 = BigString.endIndex.getter();
    v338 = v108;
    v339 = v110;
    v340 = v112;
    v341 = v114;
    v342 = v115;
    v343 = v116;
    v344 = v117;
    v345 = v118;
    v218 = (_OWORD *)v100;
    specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(10);
    v119 = v99[2];
    v335 = v99[1];
    v336 = v119;
    v337 = v99[3];
    v120 = BigString.startIndex.getter();
    v122 = v121;
    v124 = v123;
    v126 = v125;
    v127 = BigString.endIndex.getter();
    if (v127 >> 10 < v120 >> 10)
    {
      __break(1u);
      JUMPOUT(0x181EF6B18);
    }
    v321 = v120;
    v322 = v122;
    v323 = v124;
    v324 = v126;
    v325 = v127;
    v326 = v128;
    v327 = v129;
    v328 = v130;
    AttributedString.Runs.init(_:in:)((uint64_t)v99, v290);
    v303 = *(_OWORD *)&v290[9];
    v304 = *(_OWORD *)&v290[11];
    v305 = *(_OWORD *)&v290[13];
    v306 = *(_OWORD *)&v290[15];
    v299 = *(_OWORD *)&v290[1];
    v300 = *(_OWORD *)&v290[3];
    v131 = v294;
    v234 = v295;
    v226 = (char *)&v270 + 8;
    v227 = (_BYTE *)(v295 >> 10);
    v301 = *(_OWORD *)&v290[5];
    v302 = *(_OWORD *)&v290[7];
    v224 = v269;
    v225 = &v246[8];
    v132 = v291;
    v133 = v292;
    v223 = 0x8000000182303DF0;
    v230 = v296;
    v231 = (_OWORD *)v290[0];
    v232 = v291;
    v233 = v294;
    v228 = v292;
    v229 = v293;
    v242 = v298;
    v243 = v297;
    v134 = (unint64_t)v293;
    while (1)
    {
      v135 = v134;
      v136 = v133;
      v137 = v132;
      v138 = v132 >> 10;
      if ((_BYTE *)(v132 >> 10) == v227)
        break;
      v139 = v303;
      v140 = v304;
      v141 = v304;
      v142 = v224;
      *((_OWORD *)v224 + 4) = v303;
      v142[5] = v140;
      v143 = v305;
      v144 = v306;
      v145 = v306;
      v142[6] = v305;
      v142[7] = v144;
      v146 = v299;
      v147 = v300;
      v148 = v300;
      *v142 = v299;
      v142[1] = v147;
      v149 = v301;
      v150 = v302;
      v151 = v302;
      v142[2] = v301;
      v142[3] = v150;
      v152 = v226;
      *((_OWORD *)v226 + 4) = v139;
      v152[5] = v141;
      v152[6] = v143;
      v152[7] = v145;
      *v152 = v146;
      v152[1] = v148;
      v152[2] = v149;
      v152[3] = v151;
      v153 = (uint64_t)v231;
      v154 = v232;
      *(_QWORD *)&v270 = v231;
      v273 = v232;
      v156 = v228;
      v155 = v229;
      v274 = v228;
      v275 = v229;
      v158 = v233;
      v157 = v234;
      v276 = v233;
      v277 = v234;
      v159 = v230;
      v278 = v230;
      v279 = v243;
      v280 = v242;
      v316[0] = v137;
      v316[1] = (unint64_t)v136;
      v316[2] = v135;
      v316[3] = v131;
      v241 = v135;
      v239 = v136;
      v238 = v137;
      v240 = v138;
      AttributedString.Runs.subscript.getter(v316, &v307);
      v237 = v308;
      v235 = v307;
      v236 = v311;
      v160 = v304;
      v161 = v225;
      *((_OWORD *)v225 + 4) = v303;
      v161[5] = v160;
      v162 = v306;
      v161[6] = v305;
      v161[7] = v162;
      v163 = v300;
      *v161 = v299;
      v161[1] = v163;
      v164 = v302;
      v161[2] = v301;
      v161[3] = v164;
      *(_QWORD *)v246 = v153;
      v254 = v154;
      v255 = v156;
      v256 = v155;
      v257 = v158;
      v258 = v157;
      v259 = v159;
      v260 = v243;
      v261 = v242;
      v165 = v131;
      v262 = &outlined read-only object #0 of ByteCountFormatStyle.Attributed._format(_:doubleValue:);
      v166 = MEMORY[0x1E0DEE9D8];
      v263 = MEMORY[0x1E0DEE9D8];
      v268 = v153;
      v269[16] = v154;
      v269[17] = v156;
      v269[18] = v155;
      v269[19] = v158;
      v269[20] = v157;
      v269[21] = v159;
      v269[22] = v243;
      v269[23] = v242;
      v167 = v238;
      v307 = v238;
      v88 = v239;
      v308 = (unint64_t)v239;
      v309 = v241;
      v168 = v165;
      v310 = v165;
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v246);
      swift_retain();
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(&v307, (uint64_t)&outlined read-only object #0 of ByteCountFormatStyle.Attributed._format(_:doubleValue:), v166, (uint64_t *)&v270);
      swift_release();
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v246);
      v132 = v270;
      if (v240 > (unint64_t)v270 >> 10)
      {
        __break(1u);
        JUMPOUT(0x181EF6A4CLL);
      }
      v133 = (char *)*((_QWORD *)&v270 + 1);
      v134 = v271;
      v131 = v272;
      v169 = v235;
      if (*(_QWORD *)(v235 + 16)
        && (v170 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001DLL, v223), (v171 & 1) != 0))
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v169 + 56) + 72 * v170, (uint64_t)&v270);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v270, (uint64_t)&v268);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        swift_dynamicCast();
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v270);
      }
      else
      {
        v281 = 12;
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v168 == 2)
      {
        v135 = v134;
        break;
      }
      if (v281 == 9)
      {
        v237 = v131;
        v240 = v134;
        swift_retain();
        v172 = (uint64_t)v220;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v236 = v133;
          v173 = *(_OWORD *)(v172 + 32);
          v332 = *(_OWORD *)(v172 + 16);
          v333 = v173;
          v334 = *(_OWORD *)(v172 + 48);
          v93 = *(os_unfair_lock_s **)(v172 + 64);
          v174 = *(_QWORD *)(v172 + 72);
          v175 = *(_QWORD *)(v172 + 80);
          v235 = *(_QWORD *)(v172 + 88);
          type metadata accessor for AttributedString.Guts();
          v172 = swift_allocObject();
          v176 = BigString.isEmpty.getter();
          if (v93)
          {
            swift_unknownObjectRetain_n();
            outlined retain of Locale((uint64_t)&v332);
            swift_unknownObjectRelease_n();
            if ((((v175 == 0) ^ v176) & 1) != 0)
              goto LABEL_91;
          }
          else
          {
            outlined retain of Locale((uint64_t)&v332);
            if ((v176 & 1) == 0)
              goto LABEL_91;
          }
          v178 = v333;
          *(_OWORD *)(v172 + 16) = v332;
          *(_OWORD *)(v172 + 32) = v178;
          *(_OWORD *)(v172 + 48) = v334;
          *(_QWORD *)(v172 + 64) = v93;
          *(_QWORD *)(v172 + 72) = v174;
          v179 = v235;
          *(_QWORD *)(v172 + 80) = v175;
          *(_QWORD *)(v172 + 88) = v179;
          swift_release();
          v133 = v236;
        }
        v180 = *(_OWORD *)(v172 + 32);
        v329 = *(_OWORD *)(v172 + 16);
        v330 = v180;
        v331 = *(_OWORD *)(v172 + 48);
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        v319[0] = v167;
        v319[1] = v88;
        v319[2] = v241;
        v319[3] = v168;
        v319[4] = v132;
        v319[5] = v133;
        v319[6] = v240;
        v131 = v237;
        v319[7] = v237;
        v220 = (_OWORD *)v172;
        v134 = v240;
        specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(v319, v218);
        swift_release();
      }
    }
    swift_release();
    swift_release();
    v250 = v303;
    v251 = v304;
    v252 = v305;
    v253 = v306;
    *(_OWORD *)&v246[8] = v299;
    v247 = v300;
    v248 = v301;
    *(_QWORD *)v246 = v231;
    v249 = v302;
    v254 = v232;
    v255 = v228;
    v256 = v229;
    v257 = v233;
    v258 = v234;
    v259 = v230;
    v260 = v243;
    v261 = v242;
    v262 = &outlined read-only object #0 of ByteCountFormatStyle.Attributed._format(_:doubleValue:);
    v263 = MEMORY[0x1E0DEE9D8];
    v264 = v132;
    v265 = v133;
    v266 = v135;
    v267 = v131;
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v246);
    result = swift_release();
    *v219 = (uint64_t)v220;
  }
  else
  {
    swift_release();
    swift_release();
    result = swift_release();
    *v98 = (uint64_t)v99;
  }
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.init(unumberFormatField:unit:)@<X0>(uint64_t result@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  if (result > 0xB)
    goto LABEL_6;
  if (((1 << result) & 0x447) != 0)
  {
    *a3 = 9;
    return result;
  }
  if ((_DWORD)result == 11)
    *a3 = a2;
  else
LABEL_6:
    *a3 = 12;
  return result;
}

uint64_t (*ByteCountFormatStyle.style.modify(uint64_t a1))(uint64_t result)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1;
  return Measurement<>.AttributedStyle<>.ByteCount.style.modify;
}

_QWORD *(*ByteCountFormatStyle.allowedUnits.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v1;
  return Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.modify;
}

_BYTE *(*ByteCountFormatStyle.spellsOutZero.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 16);
  return Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.modify;
}

uint64_t ByteCountFormatStyle.includesActualByteCount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t ByteCountFormatStyle.includesActualByteCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

_BYTE *(*ByteCountFormatStyle.includesActualByteCount.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 17);
  return Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.modify;
}

uint64_t (*ByteCountFormatStyle.locale.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  return Measurement<>.AttributedStyle<>.ByteCount.locale.modify;
}

uint64_t ByteCountFormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 17);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 ByteCountFormatStyle.attributed.setter(char *a1)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  __n128 result;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  v5 = a1[16];
  v6 = a1[17];
  swift_unknownObjectRelease();
  *(_BYTE *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 16) = v5;
  *(_BYTE *)(v1 + 17) = v6;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v1 + 24) = result;
  return result;
}

uint64_t (*ByteCountFormatStyle.attributed.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void one-time initialization function for unitNames()
{
  static ByteCountFormatStyle.Unit.unitNames = (uint64_t)&outlined read-only object #0 of one-time initialization function for unitNames;
}

void one-time initialization function for decimalByteSizes()
{
  static ByteCountFormatStyle.Unit.decimalByteSizes = (uint64_t)&outlined read-only object #0 of one-time initialization function for decimalByteSizes;
}

void one-time initialization function for binaryByteSizes()
{
  static ByteCountFormatStyle.Unit.binaryByteSizes = (uint64_t)&outlined read-only object #0 of one-time initialization function for binaryByteSizes;
}

Swift::String __swiftcall ByteCountFormatStyle.format(_:)(Swift::Int64 a1)
{
  __int128 v1;
  uint64_t v2;
  void *v3;
  Swift::String result;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  ByteCountFormatStyle.Attributed._format(_:doubleValue:)((uint64_t *)&v5, (double)a1);
  v1 = v5[2];
  v6 = v5[1];
  v7 = v1;
  v8 = v5[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  v2 = String.init<A>(_:)();
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t ByteCountFormatStyle.Attributed.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return ByteCountFormatStyle.Attributed._format(_:doubleValue:)(a2, (double)a1);
}

uint64_t ByteCountFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_BYTE *)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 17);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

__n128 ByteCountFormatStyle.init(style:allowedUnits:spellsOutZero:includesActualByteCount:locale:)@<Q0>(_BYTE *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, __n128 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  __n128 result;

  v6 = *a2;
  *(_BYTE *)a6 = *a1;
  *(_QWORD *)(a6 + 8) = v6;
  *(_BYTE *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 17) = a4;
  result = *a5;
  *(__n128 *)(a6 + 24) = *a5;
  return result;
}

Foundation::ByteCountFormatStyle::Style_optional __swiftcall ByteCountFormatStyle.Style.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)rawValue < 4)
    v2 = rawValue;
  *v1 = v2;
  return (Foundation::ByteCountFormatStyle::Style_optional)rawValue;
}

uint64_t ByteCountFormatStyle.Style.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

Foundation::ByteCountFormatStyle::Style_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ByteCountFormatStyle.Style(Swift::Int *a1)
{
  return ByteCountFormatStyle.Style.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ByteCountFormatStyle.Style()
{
  lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ByteCountFormatStyle.Style()
{
  lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
  return RawRepresentable<>.encode(to:)();
}

uint64_t ByteCountFormatStyle.Units.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ByteCountFormatStyle.Units.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ByteCountFormatStyle.Units.rawValue.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::ByteCountFormatStyle::Units __swiftcall ByteCountFormatStyle.Units.init(rawValue:)(Foundation::ByteCountFormatStyle::Units rawValue)
{
  Swift::UInt *v1;
  Swift::UInt v2;

  v2 = 0xFFFFLL;
  if (rawValue.rawValue)
    v2 = rawValue.rawValue;
  *v1 = v2;
  return rawValue;
}

void static ByteCountFormatStyle.Units.bytes.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ByteCountFormatStyle.Units.kb.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ByteCountFormatStyle.Units.mb.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ByteCountFormatStyle.Units.gb.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static ByteCountFormatStyle.Units.tb.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static ByteCountFormatStyle.Units.pb.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static ByteCountFormatStyle.Units.eb.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static ByteCountFormatStyle.Units.zb.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static ByteCountFormatStyle.Units.ybOrHigher.getter(_QWORD *a1@<X8>)
{
  *a1 = 65280;
}

uint64_t *protocol witness for OptionSet.init(rawValue:) in conformance ByteCountFormatStyle.Units@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if (!*result)
    v2 = 0xFFFFLL;
  *a2 = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ByteCountFormatStyle.Units()
{
  lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ByteCountFormatStyle.Units()
{
  lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for SetAlgebra.init() in conformance ByteCountFormatStyle.Units(_QWORD *a1@<X8>)
{
  *a1 = 0xFFFFLL;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance ByteCountFormatStyle.Units@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  if (!*v2)
    v3 = 0xFFFFLL;
  *a2 = v3 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance ByteCountFormatStyle.Units@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  if (*v2)
  {
    v3 = *v2 & *result;
    if (v3)
    {
LABEL_3:
      *a2 = v3;
      return result;
    }
  }
  else
  {
    v3 = (unsigned __int16)*result;
    if ((unsigned __int16)*result)
      goto LABEL_3;
  }
  *a2 = 0xFFFFLL;
  return result;
}

uint64_t *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance ByteCountFormatStyle.Units@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if (*v2)
  {
    v4 = *v2 ^ v3;
    if (v4)
    {
LABEL_3:
      *a2 = v4;
      return result;
    }
  }
  else
  {
    v4 = v3 ^ 0xFFFF;
    if (v4)
      goto LABEL_3;
  }
  *a2 = 0xFFFFLL;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance ByteCountFormatStyle.Units(_QWORD *a1, uint64_t *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance ByteCountFormatStyle.Units@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized OptionSet<>.remove(_:)(*a1, a2);
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance ByteCountFormatStyle.Units@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized OptionSet<>.update(with:)(*a1, a2);
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance ByteCountFormatStyle.Units(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1 | *result;
  if (!v2)
    v2 = 0xFFFFLL;
  *v1 = v2;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance ByteCountFormatStyle.Units(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1 & *result;
  if (!v2)
    v2 = 0xFFFFLL;
  *v1 = v2;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance ByteCountFormatStyle.Units(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1 ^ *result;
  if (!v2)
    v2 = 0xFFFFLL;
  *v1 = v2;
  return result;
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance ByteCountFormatStyle.Units@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return specialized SetAlgebra.subtracting(_:)(*a1, *v2, a2);
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance ByteCountFormatStyle.Units(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  if (!*v1)
  {
    v3 = (unsigned __int16)*a1;
    if ((unsigned __int16)*a1)
      return v3 == v2;
    goto LABEL_3;
  }
  v3 = v2 & *a1;
  if (!v3)
LABEL_3:
    v3 = 0xFFFFLL;
  return v3 == v2;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance ByteCountFormatStyle.Units(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  if (!*v1)
  {
    v2 = (unsigned __int16)*a1;
    if ((unsigned __int16)*a1)
      return v2 == 0xFFFF;
    goto LABEL_3;
  }
  v2 = *v1 & *a1;
  if (!v2)
LABEL_3:
    v2 = 0xFFFFLL;
  return v2 == 0xFFFF;
}

BOOL protocol witness for SetAlgebra.contains(_:) in conformance ByteCountFormatStyle.Units(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (!*a1)
  {
    v3 = (unsigned __int16)*v1;
    if ((unsigned __int16)*v1)
      return v3 == v2;
    goto LABEL_3;
  }
  v3 = *v1 & v2;
  if (!v3)
LABEL_3:
    v3 = 0xFFFFLL;
  return v3 == v2;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance ByteCountFormatStyle.Units()
{
  _QWORD *v0;

  return *v0 == 0xFFFFLL;
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance ByteCountFormatStyle.Units(uint64_t *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance ByteCountFormatStyle.Units@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if (!*result)
    v2 = 0xFFFFLL;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void ByteCountFormatStyle.Attributed.style.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *ByteCountFormatStyle.Attributed.style.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*ByteCountFormatStyle.Attributed.style.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void ByteCountFormatStyle.Attributed.allowedUnits.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

_QWORD *ByteCountFormatStyle.Attributed.allowedUnits.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*ByteCountFormatStyle.Attributed.allowedUnits.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ByteCountFormatStyle.Attributed.spellsOutZero.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ByteCountFormatStyle.Attributed.spellsOutZero.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*ByteCountFormatStyle.Attributed.spellsOutZero.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t (*ByteCountFormatStyle.Attributed.includesActualByteCount.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ByteCountFormatStyle.Attributed.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 ByteCountFormatStyle.Attributed.locale.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*ByteCountFormatStyle.Attributed.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ByteCountFormatStyle.Attributed.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_BYTE *)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 17);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

void one-time initialization function for maxDecimalSizes()
{
  static ByteCountFormatStyle.Attributed.maxDecimalSizes = (uint64_t)&outlined read-only object #0 of one-time initialization function for maxDecimalSizes;
}

void one-time initialization function for maxBinarySizes()
{
  static ByteCountFormatStyle.Attributed.maxBinarySizes = (uint64_t)&outlined read-only object #0 of one-time initialization function for maxBinarySizes;
}

uint64_t ByteCountFormatStyle.Attributed.useSpelloutZero(forLocale:unit:)(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(_OWORD *__return_ptr, uint64_t, uint64_t);
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  char v11;
  _OWORD v13[6];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (a2 > 1u)
    goto LABEL_50;
  v3 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  v5 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v3 + 352);
  swift_unknownObjectRetain();
  v5(v13, ObjectType, v3);
  swift_unknownObjectRelease();
  v16 = v13[2];
  v17 = v13[3];
  v18 = v13[4];
  v19 = v13[5];
  v14 = v13[0];
  v15 = v13[1];
  if (*((_QWORD *)&v13[0] + 1))
  {
    object = (void *)*((_QWORD *)&v15 + 1);
    countAndFlagsBits = v15;
    outlined copy of Locale.LanguageCode?(v14, *((uint64_t *)&v13[0] + 1));
  }
  else
  {
    outlined retain of Locale.Language((uint64_t *)&v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v14);
    v9 = v8;
    outlined retain of Locale.Language((uint64_t *)&v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (!v9)
    {
      outlined retain of Locale.Language((uint64_t *)&v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
      goto LABEL_50;
    }
    v10 = String.lowercased()();
    countAndFlagsBits = v10._countAndFlagsBits;
    object = v10._object;
  }
  outlined retain of Locale.Language((uint64_t *)&v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  swift_bridgeObjectRelease();
  if ((countAndFlagsBits != 29281 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 24932 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 27749 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 28261 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29286 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 26984 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29288 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 25705 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29801 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29549 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29808 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 28530 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 26740 || object != (void *)0xE200000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (a2)
    {
      swift_bridgeObjectRelease();
LABEL_50:
      v11 = 0;
      return v11 & 1;
    }
    if ((countAndFlagsBits != 24931 || object != (void *)0xE200000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (countAndFlagsBits != 28526 || object != (void *)0xE200000000000000))
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return v11 & 1;
    }
  }
  swift_bridgeObjectRelease();
  v11 = 1;
  return v11 & 1;
}

uint64_t closure #1 in ByteCountFormatStyle.Attributed._format(_:doubleValue:)(uint64_t a1, uint64_t a2, double a3)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t i;

  v5 = *(_QWORD *)(a1 + 8);
  result = ByteCountFormatStyle.Units.smallestUnit.getter();
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    for (i = 0; v7 != i; ++i)
    {
      if (i < 0x40)
      {
        if (((v5 >> i) & 1) == 0)
          continue;
      }
      else if ((_WORD)v5 && (unsigned __int16)v5 != 0xFFFF)
      {
        continue;
      }
      if (i > 8)
      {
        __break(1u);
        return result;
      }
      result = i;
      if ((double)*(uint64_t *)(a2 + 32 + 8 * i) > a3)
        return result;
    }
  }
  return result;
}

uint64_t ByteCountFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  _QWORD v62[18];
  _BYTE v63[144];
  _BYTE v64[152];

  v3 = *((_QWORD *)v1 + 1);
  v4 = v1[16];
  v5 = v1[17];
  v6 = *((_QWORD *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    Hasher._combine(_:)(1u);
    return swift_unknownObjectRelease();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v62, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) != 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44);
    Hasher._combine(_:)(1u);
    if (v44[0] == 2)
    {
      v11 = 0;
    }
    else
    {
      v11 = v44[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v11);
    v12 = v45;
    if (v45)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v12 + 16));
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v14 = v12 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v14 += 16;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_13:
          Hasher._combine(_:)(0);
          if (!v47)
            goto LABEL_14;
          goto LABEL_21;
        }
LABEL_20:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v47)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          v15 = v48;
          if (!v48)
            goto LABEL_15;
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v15 = v48;
        if (!v48)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v16 = v49;
          if (!v49)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_24;
          }
LABEL_23:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v16);
          swift_bridgeObjectRelease();
LABEL_24:
          v19 = v50;
          v18 = v51;
          v21 = v52;
          v20 = v53;
          v22 = v54;
          if (v50)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v23 = v18;
            v24 = v21;
            v25 = v20;
            v26 = v22;
            v27 = v19;
            _CFObject.hash(into:)();
            if (v18)
              goto LABEL_26;
          }
          else
          {
            Hasher._combine(_:)(0);
            v32 = v22;
            v33 = v18;
            v34 = v21;
            v35 = v20;
            if (v18)
            {
LABEL_26:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v28 = v18;
              _CFObject.hash(into:)();

              if (v21)
                goto LABEL_27;
              goto LABEL_32;
            }
          }
          Hasher._combine(_:)(0);
          if (v21)
          {
LABEL_27:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v29 = v21;
            _CFObject.hash(into:)();

            if (v20)
              goto LABEL_28;
            goto LABEL_33;
          }
LABEL_32:
          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_28:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v30 = v20;
            _CFObject.hash(into:)();

            if (v22)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v31 = v22;
              _CFObject.hash(into:)();

              goto LABEL_35;
            }
LABEL_34:
            Hasher._combine(_:)(0);
            v31 = 0;
LABEL_35:

            v36 = v55;
            if (v36)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v36);
              swift_bridgeObjectRelease();
              v37 = v56;
              if (v56)
                goto LABEL_37;
            }
            else
            {
              Hasher._combine(_:)(0);
              v37 = v56;
              if (v56)
              {
LABEL_37:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v37);
                swift_bridgeObjectRelease();
                if (v57)
                {
LABEL_38:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_42:
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v38 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }
                  if (v59 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    v39 = v59 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v39);
                  }
                  if (v60 == 2)
                  {
                    v40 = 0;
                  }
                  else
                  {
                    v40 = v60 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v40);
                  if (v61 == 2)
                  {
                    v41 = 0;
                  }
                  else
                  {
                    v42 = v61 & 1;
                    Hasher._combine(_:)(1u);
                    v41 = v42;
                  }
                  Hasher._combine(_:)(v41);
                  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }
LABEL_41:
                Hasher._combine(_:)(0);
                goto LABEL_42;
              }
            }
            Hasher._combine(_:)(0);
            if (v57)
              goto LABEL_38;
            goto LABEL_41;
          }
LABEL_33:
          Hasher._combine(_:)(0);
          if (v22)
            goto LABEL_29;
          goto LABEL_34;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v15);
        swift_bridgeObjectRelease();
        v16 = v49;
        if (!v49)
          goto LABEL_16;
        goto LABEL_23;
      }
      outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43);
      v17 = v43;
    }
    else
    {
      Hasher._combine(_:)(0);
      v17 = v44;
    }
    outlined retain of LocalePreferences(v17);
    if (!v46)
      goto LABEL_13;
    goto LABEL_20;
  }
  Hasher._combine(_:)(0);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ByteCountFormatStyle.Attributed.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181EF84C4 + 4 * byte_18216FF00[*v0]))(0x656C797473, 0xE500000000000000);
}

uint64_t sub_181EF84C4()
{
  return 0x556465776F6C6C61;
}

uint64_t sub_181EF84E4()
{
  return 0x754F736C6C657073;
}

unint64_t sub_181EF8508()
{
  return 0xD000000000000017;
}

uint64_t sub_181EF8524()
{
  return 0x656C61636F6CLL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ByteCountFormatStyle.Attributed.CodingKeys()
{
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ByteCountFormatStyle.Attributed.CodingKeys()
{
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ByteCountFormatStyle.Attributed.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  __int128 v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  char v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ByteCountFormatStyle.Attributed.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v12 = *((_QWORD *)v1 + 1);
  v14 = v1[16];
  v11 = v1[17];
  v10 = *(_OWORD *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = v8;
  v15 = 0;
  lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(_QWORD *)&v13 = v12;
    v15 = 1;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v13 = v10;
    v15 = 4;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int ByteCountFormatStyle.Attributed.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  Swift::UInt8 v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  _QWORD v62[18];
  _BYTE v63[144];
  _BYTE v64[144];
  _BYTE v65[72];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = v0[16];
  v4 = v0[17];
  v5 = *((_QWORD *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v62, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44);
  Hasher._combine(_:)(1u);
  if (v44[0] == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = v44[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  v11 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
    v16 = v44;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43);
    v16 = v43;
LABEL_20:
    outlined retain of LocalePreferences(v16);
    if (!v46)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v47)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v14 = v48;
    if (!v48)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v14);
    swift_bridgeObjectRelease();
    v15 = v49;
    if (!v49)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = v48;
  if (v48)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v15 = v49;
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v15);
  swift_bridgeObjectRelease();
LABEL_25:
  v18 = v50;
  v17 = v51;
  v20 = v52;
  v19 = v53;
  v21 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v22 = v17;
    v23 = v20;
    v24 = v19;
    v25 = v21;
    v26 = v18;
    _CFObject.hash(into:)();
    if (v17)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v31 = v21;
    v32 = v17;
    v33 = v20;
    v34 = v19;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v27 = v17;
      _CFObject.hash(into:)();

      if (v20)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v28 = v20;
    _CFObject.hash(into:)();

    if (v19)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v21)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v19)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v30 = 0;
LABEL_36:

  v35 = v55;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v35);
    swift_bridgeObjectRelease();
    v36 = v56;
    if (v56)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v57)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v36 = v56;
  if (!v56)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
  swift_bridgeObjectRelease();
  if (!v57)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v60 == 2)
  {
    v39 = 0;
  }
  else
  {
    v39 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v39);
  if (v61 == 2)
  {
    v40 = 0;
  }
  else
  {
    v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    v40 = v41;
  }
  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t ByteCountFormatStyle.Attributed.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  char v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ByteCountFormatStyle.Attributed.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v18 = 0;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v16;
    v18 = 1;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v16;
    LOBYTE(v16) = 2;
    v17 = KeyedDecodingContainer.decode(_:forKey:)();
    v15 = v10;
    LOBYTE(v16) = 3;
    LOBYTE(v10) = KeyedDecodingContainer.decode(_:forKey:)();
    v18 = 4;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v17 & 1;
    v13 = v16;
    *(_BYTE *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v15;
    *(_BYTE *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 17) = v10 & 1;
    *(_OWORD *)(a2 + 24) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance ByteCountFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return ByteCountFormatStyle.Attributed._format(_:doubleValue:)(a2, (double)*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ByteCountFormatStyle.Attributed@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ByteCountFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ByteCountFormatStyle.Attributed(_QWORD *a1)
{
  return ByteCountFormatStyle.Attributed.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ByteCountFormatStyle.Attributed()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  Swift::UInt8 v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  _QWORD v60[18];
  _BYTE v61[144];
  _BYTE v62[144];
  _BYTE v63[72];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = v0[16];
  v4 = v0[17];
  v5 = *((_QWORD *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_55;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v60, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)&v42);
  Hasher._combine(_:)(1u);
  if (v42 == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = v42 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  v11 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v42);
    if (!v44)
      goto LABEL_14;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    goto LABEL_19;
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45)
      goto LABEL_15;
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v14 = v46;
    if (!v46)
      goto LABEL_16;
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v14);
    swift_bridgeObjectRelease();
    v15 = v47;
    if (!v47)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = v46;
  if (v46)
    goto LABEL_22;
LABEL_16:
  Hasher._combine(_:)(0);
  v15 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v15);
  swift_bridgeObjectRelease();
LABEL_24:
  v17 = v48;
  v16 = v49;
  v19 = v50;
  v18 = v51;
  v20 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v21 = v16;
    v22 = v19;
    v23 = v18;
    v24 = v20;
    v25 = v17;
    _CFObject.hash(into:)();
    if (v16)
      goto LABEL_26;
  }
  else
  {
    Hasher._combine(_:)(0);
    v30 = v20;
    v31 = v16;
    v32 = v19;
    v33 = v18;
    if (v16)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v26 = v16;
      _CFObject.hash(into:)();

      if (v19)
        goto LABEL_27;
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v27 = v19;
    _CFObject.hash(into:)();

    if (v18)
      goto LABEL_28;
LABEL_33:
    Hasher._combine(_:)(0);
    if (v20)
      goto LABEL_29;
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v18)
    goto LABEL_33;
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  v29 = 0;
LABEL_35:

  v34 = v53;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
    swift_bridgeObjectRelease();
    v35 = v54;
    if (v54)
      goto LABEL_37;
LABEL_40:
    Hasher._combine(_:)(0);
    if (v55)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  v35 = v54;
  if (!v54)
    goto LABEL_40;
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v35);
  swift_bridgeObjectRelease();
  if (!v55)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v58 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v58 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v59 == 2)
  {
    v39 = 0;
  }
  else
  {
    v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

uint64_t ByteCountFormatStyle.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  _BYTE v44[144];
  _BYTE v45[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  _QWORD v63[18];
  _BYTE v64[144];
  _BYTE v65[152];

  v3 = *((_QWORD *)v1 + 1);
  v4 = v1[16];
  v5 = v1[17];
  v6 = *((_QWORD *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain_n();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    return swift_unknownObjectRelease_n();
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v63, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v65);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v65) == 1)
  {
    v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v45);
  Hasher._combine(_:)(1u);
  if (v45[0] == 2)
  {
    v11 = 0;
  }
  else
  {
    v11 = v45[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  v12 = v46;
  if (!v46)
  {
    Hasher._combine(_:)(0);
    v17 = v45;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v12 + 16));
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v44);
    v17 = v44;
LABEL_20:
    outlined retain of LocalePreferences(v17);
    if (!v47)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v48)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v15 = v49;
    if (!v49)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v15);
    swift_bridgeObjectRelease();
    v16 = v50;
    if (!v50)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v15 = v49;
  if (v49)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v16 = v50;
  if (!v50)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v16);
  swift_bridgeObjectRelease();
LABEL_25:
  v19 = v51;
  v18 = v52;
  v21 = v53;
  v20 = v54;
  v22 = v55;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v23 = v18;
    v24 = v21;
    v25 = v20;
    v26 = v22;
    v27 = v19;
    _CFObject.hash(into:)();
    if (v18)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v32 = v22;
    v33 = v18;
    v34 = v21;
    v35 = v20;
    if (v18)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v28 = v18;
      _CFObject.hash(into:)();

      if (v21)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v21)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v29 = v21;
    _CFObject.hash(into:)();

    if (v20)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v22)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v20)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v30 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v31 = v22;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v31 = 0;
LABEL_36:

  v36 = v56;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v36);
    swift_bridgeObjectRelease();
    v37 = v57;
    if (v57)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v58)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v37 = v57;
  if (!v57)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v37);
  swift_bridgeObjectRelease();
  if (!v58)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v61 == 2)
  {
    v40 = 0;
  }
  else
  {
    v40 = v61 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v62 == 2)
  {
    v41 = 0;
  }
  else
  {
    v42 = v62 & 1;
    Hasher._combine(_:)(1u);
    v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease_n();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ByteCountFormatStyle.CodingKeys()
{
  return 0x7475626972747461;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ByteCountFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7475626972747461 && a2 == 0xEA00000000006465)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ByteCountFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ByteCountFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ByteCountFormatStyle.encode(to:)(_QWORD *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  __int128 v18;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ByteCountFormatStyle.CodingKeys>);
  v13 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  v8 = *((_QWORD *)v2 + 1);
  v9 = v2[16];
  v12 = v2[17];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = v12;
  v18 = *(_OWORD *)(v2 + 24);
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v6, v4);
}

Swift::Int ByteCountFormatStyle.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  Swift::UInt8 v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  _QWORD v62[18];
  _BYTE v63[144];
  _BYTE v64[144];
  _BYTE v65[72];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = v0[16];
  v4 = v0[17];
  v5 = *((_QWORD *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain_n();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v62, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44);
  Hasher._combine(_:)(1u);
  if (v44[0] == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = v44[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  v11 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
    v16 = v44;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43);
    v16 = v43;
LABEL_20:
    outlined retain of LocalePreferences(v16);
    if (!v46)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v47)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v14 = v48;
    if (!v48)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v14);
    swift_bridgeObjectRelease();
    v15 = v49;
    if (!v49)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = v48;
  if (v48)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v15 = v49;
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v15);
  swift_bridgeObjectRelease();
LABEL_25:
  v18 = v50;
  v17 = v51;
  v20 = v52;
  v19 = v53;
  v21 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v22 = v17;
    v23 = v20;
    v24 = v19;
    v25 = v21;
    v26 = v18;
    _CFObject.hash(into:)();
    if (v17)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v31 = v21;
    v32 = v17;
    v33 = v20;
    v34 = v19;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v27 = v17;
      _CFObject.hash(into:)();

      if (v20)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v28 = v20;
    _CFObject.hash(into:)();

    if (v19)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v21)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v19)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v29 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v30 = v21;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v30 = 0;
LABEL_36:

  v35 = v55;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v35);
    swift_bridgeObjectRelease();
    v36 = v56;
    if (v56)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v57)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v36 = v56;
  if (!v56)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
  swift_bridgeObjectRelease();
  if (!v57)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v60 == 2)
  {
    v39 = 0;
  }
  else
  {
    v39 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v39);
  if (v61 == 2)
  {
    v40 = 0;
  }
  else
  {
    v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    v40 = v41;
  }
  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t ByteCountFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char v10;
  char v11;
  __int128 v12;
  _BYTE v14[16];
  uint64_t v15;
  char v16;
  char v17;
  __int128 v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ByteCountFormatStyle.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v15;
    v10 = v16;
    v11 = v17;
    v12 = v18;
    *(_BYTE *)a2 = v14[8];
    *(_QWORD *)(a2 + 8) = v9;
    *(_BYTE *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 17) = v11;
    *(_OWORD *)(a2 + 24) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ByteCountFormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ByteCountFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ByteCountFormatStyle(_QWORD *a1)
{
  return ByteCountFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ByteCountFormatStyle()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  Swift::UInt8 v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  _QWORD v60[18];
  _BYTE v61[144];
  _BYTE v62[144];
  _BYTE v63[72];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = v0[16];
  v4 = v0[17];
  v5 = *((_QWORD *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain_n();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_55;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v60, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)&v42);
  Hasher._combine(_:)(1u);
  if (v42 == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = v42 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  v11 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v42);
    if (!v44)
      goto LABEL_14;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    goto LABEL_19;
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45)
      goto LABEL_15;
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v14 = v46;
    if (!v46)
      goto LABEL_16;
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v14);
    swift_bridgeObjectRelease();
    v15 = v47;
    if (!v47)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = v46;
  if (v46)
    goto LABEL_22;
LABEL_16:
  Hasher._combine(_:)(0);
  v15 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v15);
  swift_bridgeObjectRelease();
LABEL_24:
  v17 = v48;
  v16 = v49;
  v19 = v50;
  v18 = v51;
  v20 = v52;
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v21 = v16;
    v22 = v19;
    v23 = v18;
    v24 = v20;
    v25 = v17;
    _CFObject.hash(into:)();
    if (v16)
      goto LABEL_26;
  }
  else
  {
    Hasher._combine(_:)(0);
    v30 = v20;
    v31 = v16;
    v32 = v19;
    v33 = v18;
    if (v16)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v26 = v16;
      _CFObject.hash(into:)();

      if (v19)
        goto LABEL_27;
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v27 = v19;
    _CFObject.hash(into:)();

    if (v18)
      goto LABEL_28;
LABEL_33:
    Hasher._combine(_:)(0);
    if (v20)
      goto LABEL_29;
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v18)
    goto LABEL_33;
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  v29 = 0;
LABEL_35:

  v34 = v53;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v34);
    swift_bridgeObjectRelease();
    v35 = v54;
    if (v54)
      goto LABEL_37;
LABEL_40:
    Hasher._combine(_:)(0);
    if (v55)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  v35 = v54;
  if (!v54)
    goto LABEL_40;
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v63, v35);
  swift_bridgeObjectRelease();
  if (!v55)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v58 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v58 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v59 == 2)
  {
    v39 = 0;
  }
  else
  {
    v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease_n();
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Attributed.CodingKeys, &unk_1E0F21E48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Attributed.CodingKeys, &unk_1E0F21E48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Attributed.CodingKeys, &unk_1E0F21E48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.Attributed.CodingKeys, &unk_1E0F21E48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

BOOL specialized static ByteCountFormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2;
  __int128 v3;
  _BOOL8 result;
  __int128 v5;
  __int128 v6;

  v2 = *a1 == *a2 && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1);
  result = 0;
  if (v2 && ((a1[16] ^ a2[16]) & 1) == 0 && ((a1[17] ^ a2[17]) & 1) == 0)
  {
    v3 = *(_OWORD *)(a1 + 24);
    v5 = *(_OWORD *)(a2 + 24);
    v6 = v3;
    if ((specialized static Locale.== infix(_:_:)((uint64_t)&v6, (uint64_t)&v5) & 1) != 0)
      return 1;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.CodingKeys, &unk_1E0F22068);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.CodingKeys, &unk_1E0F22068);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.CodingKeys, &unk_1E0F22068);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle.CodingKeys, &unk_1E0F22068);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for ByteCountFormatStyle.Attributed(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
}

uint64_t instantiation function for generic protocol witness table for ByteCountFormatStyle(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle and conformance ByteCountFormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle and conformance ByteCountFormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle and conformance ByteCountFormatStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle, &type metadata for ByteCountFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle, &type metadata for ByteCountFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle, &type metadata for ByteCountFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ByteCountFormatStyle, &type metadata for ByteCountFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
  }
  return result;
}

_BYTE *sub_181EFB61C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_181EFB628(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_181EFB634@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_181EFB640(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *result;
  return result;
}

uint64_t sub_181EFB64C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 16);
  return result;
}

_BYTE *sub_181EFB658(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = *result;
  return result;
}

uint64_t sub_181EFB664@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 17);
  return result;
}

_BYTE *sub_181EFB670(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 17) = *result;
  return result;
}

uint64_t sub_181EFB67C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 24);
  return swift_unknownObjectRetain();
}

__n128 sub_181EFB68C(__n128 *a1, uint64_t a2)
{
  __n128 result;
  __n128 v4;

  v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v4;
  *(__n128 *)(a2 + 24) = v4;
  return result;
}

uint64_t storeEnumTagSinglePayload for ByteCountFormatStyle.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181EFB734 + 4 * byte_18216FF0A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181EFB768 + 4 * byte_18216FF05[v4]))();
}

uint64_t sub_181EFB768(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EFB770(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181EFB778);
  return result;
}

uint64_t sub_181EFB784(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181EFB78CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181EFB790(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EFB798(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ByteCountFormatStyle.Attributed()
{
  return &type metadata for ByteCountFormatStyle.Attributed;
}

uint64_t storeEnumTagSinglePayload for ByteCountFormatStyle.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181EFB7F4 + 4 * byte_18216FF0F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181EFB814 + 4 * byte_18216FF14[v4]))();
}

_BYTE *sub_181EFB7F4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181EFB814(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181EFB81C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181EFB824(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181EFB82C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181EFB834(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for ByteCountFormatStyle.CodingKeys()
{
  return &unk_1E0F22068;
}

uint64_t storeEnumTagSinglePayload for ByteCountFormatStyle.Attributed.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_181EFB89C + 4 * byte_18216FF1E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_181EFB8D0 + 4 * byte_18216FF19[v4]))();
}

uint64_t sub_181EFB8D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EFB8D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181EFB8E0);
  return result;
}

uint64_t sub_181EFB8EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181EFB8F4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_181EFB8F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181EFB900(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ByteCountFormatStyle.Attributed.CodingKeys()
{
  return &unk_1E0F21E48;
}

uint64_t outlined retain of ByteCountFormatStyle.Attributed(uint64_t a1)
{
  swift_unknownObjectRetain();
  return a1;
}

uint64_t partial apply for closure #1 in localizedParens(locale:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ulocdata_open();
  *a1 = result;
  return result;
}

uint64_t sub_181EFBB68()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ICULegacyNumberFormatter.Signature(0) - 8) + 80);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
      goto LABEL_7;
    v3 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  v4 = v0 + ((v1 + 16) & ~v1) + *(int *)(v3 + 36);
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
LABEL_7:
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of ICULegacyNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PredicateExpressions.SequenceContains.sequence.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.SequenceContains.element.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

void PredicateExpressions.SequenceContains.init(sequence:element:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for PredicateExpressions.SequenceContains();
}

uint64_t sub_181EFBD74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 68), v2, v1);
}

uint64_t PredicateExpressions.SequenceContains.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t, uint64_t, __n128);
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *p_AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v28;

  p_AssociatedTypeWitness = a1;
  v4 = a2[5];
  v24 = a2[3];
  v25 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v23 = (char *)&AssociatedTypeWitness - v6;
  v7 = a2[4];
  v8 = a2[2];
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&AssociatedTypeWitness - v12;
  v14 = v27;
  v15 = *p_AssociatedTypeWitness;
  v28 = *p_AssociatedTypeWitness;
  v16 = *(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v7 + 16);
  p_AssociatedTypeWitness = v2;
  v16(&v28, v8, v7, v11);
  if (!v14)
  {
    v27 = v10;
    v28 = v15;
    v18 = AssociatedTypeWitness;
    v17 = v23;
    (*(void (**)(uint64_t *, uint64_t))(v25 + 16))(&v28, v24);
    v20 = a2[6];
    v21 = dispatch thunk of Sequence._customContainsEquatableElement(_:)();
    if (v21 == 2)
    {
      p_AssociatedTypeWitness = &AssociatedTypeWitness;
      MEMORY[0x1E0C80A78](v21);
      *(&AssociatedTypeWitness - 4) = v9;
      *(&AssociatedTypeWitness - 3) = v20;
      *(&AssociatedTypeWitness - 2) = a2[7];
      *(&AssociatedTypeWitness - 1) = (uint64_t)v17;
      LOBYTE(v2) = Sequence.contains(where:)();
    }
    else
    {
      LOBYTE(v2) = v21 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v9);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceContains<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.SequenceContains.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

uint64_t PredicateExpressions.SequenceContainsWhere.init(_:builder:)@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return PredicateExpressions.SequenceContainsWhere.init(_:builder:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.SequenceContainsWhere);
}

uint64_t PredicateExpressions.SequenceContainsWhere.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  return PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, a2, (uint64_t)partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:), (uint64_t (*)(uint64_t, __n128))MEMORY[0x1E0DEAB48]) & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceContainsWhere<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

uint64_t PredicateExpressions.SequenceAllSatisfy.variable.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(v2 + *(int *)(result + 64));
  return result;
}

uint64_t PredicateExpressions.SequenceAllSatisfy.init(_:builder:)@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return PredicateExpressions.SequenceContainsWhere.init(_:builder:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.SequenceAllSatisfy);
}

uint64_t PredicateExpressions.SequenceContainsWhere.init(_:builder:)@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(_QWORD, _QWORD *))
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  void (*v25)(_QWORD *);
  _QWORD v26[5];

  v24[1] = a3;
  v25 = a2;
  v17 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v19 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for nextID != -1)
    swift_once();
  do
    v20 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v20 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  v26[0] = a4;
  v26[1] = a5;
  v26[2] = a6;
  v26[3] = a7;
  v26[4] = a8;
  v21 = a10(0, v26);
  *(_QWORD *)(a9 + *(int *)(v21 + 64)) = v20;
  v22 = *(_QWORD *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(a9, a1, a4);
  v26[0] = v20;
  v25(v26);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a9 + *(int *)(v21 + 60), v19, a5);
}

uint64_t PredicateExpressions.SequenceAllSatisfy.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  return PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, a2, (uint64_t)partial apply for closure #1 in PredicateExpressions.SequenceAllSatisfy.evaluate(_:), MEMORY[0x1E0DEAAA0]) & 1;
}

uint64_t PredicateExpressions.SequenceContainsWhere.evaluate(_:)(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, __n128);
  uint64_t v25;
  uint64_t v26;

  v23 = a3;
  v24 = a4;
  v8 = a2[4];
  v9 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&AssociatedTypeWitness - v11;
  v26 = *a1;
  v25 = v26;
  v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  v14 = v13(&v25, v9, v8);
  if (!v5)
  {
    v15 = v10;
    v16 = MEMORY[0x1E0C80A78](v14);
    v17 = a2[3];
    *(&AssociatedTypeWitness - 8) = v9;
    *(&AssociatedTypeWitness - 7) = v17;
    v19 = a2[5];
    v18 = a2[6];
    *(&AssociatedTypeWitness - 6) = v8;
    *(&AssociatedTypeWitness - 5) = v19;
    *(&AssociatedTypeWitness - 4) = v18;
    *(&AssociatedTypeWitness - 3) = (uint64_t)&v26;
    *(&AssociatedTypeWitness - 2) = v4;
    v20 = AssociatedTypeWitness;
    LOBYTE(v4) = v24(v23, v16);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v20);
  }
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(_QWORD, _QWORD, __n128))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t (*v27)(_QWORD, _QWORD, __n128);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[5];
  uint64_t v31;

  v28 = a1;
  v27 = a9;
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for Optional();
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v27 - v19;
  v30[0] = a4;
  v30[1] = a5;
  v21 = a5;
  v30[2] = a6;
  v30[3] = a7;
  v30[4] = a8;
  v22 = *(_QWORD *)(a3 + *(int *)(a9(0, v30, v18) + 64));
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v20, v28, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, AssociatedTypeWitness);
  v30[0] = v22;
  PredicateBindings.subscript.setter((uint64_t)v20, v30, AssociatedTypeWitness);
  v30[0] = *a2;
  v24 = v29;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(a7 + 16))(&v31, v30, v21, a7);
  if (!v24)
    v25 = v31;
  return v25 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceAllSatisfy<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.SequenceAllSatisfy.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

uint64_t PredicateExpressions.SequenceStartsWith.prefix.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 76));
}

void PredicateExpressions.SequenceStartsWith.init(base:prefix:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for PredicateExpressions.SequenceStartsWith();
}

uint64_t sub_181EFC5FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 76), v2, v1);
}

uint64_t PredicateExpressions.SequenceStartsWith.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  char v2;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = a2[5];
  v24 = a2[3];
  v25 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v23 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v26 = (char *)&v22 - v7;
  v8 = a2[4];
  v9 = a2[2];
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v22 - v13;
  v15 = *a1;
  v28 = v15;
  v16 = v27;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v8 + 16))(&v28, v9, v8, v12);
  if (!v16)
  {
    v27 = v11;
    v17 = v10;
    v19 = v22;
    v18 = v23;
    v28 = v15;
    v20 = v26;
    (*(void (**)(uint64_t *, uint64_t))(v25 + 16))(&v28, v24);
    v2 = Sequence<>.starts<A>(with:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v17);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceStartsWith<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.SequenceStartsWith.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

uint64_t sub_181EFC890(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v3 + *(int *)(a1 + 68), v2, v1);
}

uint64_t static PredicateExpressions.build_contains<A, B>(_:where:)@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static PredicateExpressions.build_contains<A, B>(_:where:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.SequenceContainsWhere);
}

uint64_t static PredicateExpressions.build_allSatisfy<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static PredicateExpressions.build_contains<A, B>(_:where:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.SequenceAllSatisfy);
}

uint64_t static PredicateExpressions.build_contains<A, B>(_:where:)@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(_QWORD, _QWORD *))
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, __n128);
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *);
  _QWORD v32[5];

  v28 = a7;
  v29 = a8;
  v30 = a3;
  v31 = a2;
  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(void (**)(char *, __n128))(v18 + 16);
  v23(v22, v20);
  if (one-time initialization token for nextID != -1)
    swift_once();
  do
    v24 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v24 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  v32[0] = a4;
  v32[1] = a5;
  v32[2] = a6;
  v32[3] = v28;
  v32[4] = v29;
  v25 = a10(0, v32);
  *(_QWORD *)(a9 + *(int *)(v25 + 64)) = v24;
  ((void (*)(uint64_t, char *, uint64_t))v23)(a9, v22, a4);
  v32[0] = v24;
  v31(v32);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v22, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a9 + *(int *)(v25 + 60), v16, a5);
}

void static PredicateExpressions.build_starts<A, B>(_:with:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
  type metadata accessor for PredicateExpressions.SequenceStartsWith();
}

uint64_t sub_181EFCB0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v3 + *(int *)(a1 + 76), v2, v1);
}

uint64_t PredicateExpressions.SequenceContains.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(43);
  v0._object = (void *)0x800000018230F710;
  v0._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x6E656D656C65202CLL;
  v1._object = (void *)0xEB00000000203A74;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.SequenceContainsWhere.description.getter(int a1)
{
  return PredicateExpressions.SequenceContainsWhere.description.getter(a1, 59, 0xD000000000000020, (void *)0x800000018230F730);
}

uint64_t PredicateExpressions.SequenceAllSatisfy.description.getter(int a1)
{
  return PredicateExpressions.SequenceContainsWhere.description.getter(a1, 56, 0xD00000000000001DLL, (void *)0x800000018230F760);
}

uint64_t PredicateExpressions.SequenceContainsWhere.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  _StringGuts.grow(_:)(a2);
  v6._countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._countAndFlagsBits = 0x626169726176202CLL;
  v7._object = (void *)0xEC000000203A656CLL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x656C626169726156;
  v10._object = (void *)0xE900000000000028;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x203A74736574202CLL;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  _print_unlocked<A, B>(_:_:)();
  v12._countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t PredicateExpressions.SequenceContains<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.SequenceContains<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v14[4] = a5;
  v14[5] = a4;
  v14[8] = a3;
  v14[3] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14[6] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v14[7] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[9] = v8;
  v14[10] = v8;
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v14[15] = v13;
  type metadata accessor for PredicateExpressions.SequenceContains();
}

uint64_t sub_181EFCFAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 208) = v6;
  *(_QWORD *)(v4 - 200) = a1;
  *(_QWORD *)(v4 - 72) = v3;
  *(_QWORD *)(v4 - 192) = v8;
  v10 = v2;
  v11 = *(_QWORD *)(v4 - 160);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(_QWORD *)(v4 - 104));
  v12 = *(_QWORD *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v13 = *(_QWORD *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 32))(v13, v12, *(_QWORD *)(v4 - 136));
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(_QWORD *)(v4 - 104));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v14 = *(_QWORD *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 184) + 32))(v13 + *(int *)(v14 + 68), v11, v10);
  __swift_destroy_boxed_opaque_existential_1(v4 - 128);
  v15 = *(_QWORD *)(v4 - 208);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v15 + 16))(*(_QWORD *)(v4 - 176), v13, v14);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceContains<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.SequenceContains<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceContains<A, B>(_QWORD *a1)
{
  return PredicateExpressions.SequenceContains<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.SequenceContainsWhere<>.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return PredicateExpressions.SequenceContainsWhere<>.encode(to:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v3)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    v12 = *(_QWORD *)(v2 + *(int *)(a2 + 64));
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    swift_getAssociatedTypeWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v8 = type metadata accessor for PredicateExpressions.Variable(0, AssociatedTypeWitness, v6, v7);
    MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v8);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t PredicateExpressions.SequenceContainsWhere<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  return PredicateExpressions.SequenceContainsWhere<>.init(from:)(a1, a2, a3, a4, a5, a6);
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD, _QWORD *, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t AssociatedTypeWitness;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v45 = a4;
  v40 = a5;
  v37 = a6;
  v42 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v44 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[0] = v14;
  v47[1] = v15;
  v38 = v16;
  v39 = v17;
  v47[2] = v16;
  v48 = v18;
  v49 = v17;
  v20 = v19(0, v47, v12);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v34 - v22;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v24 = (uint64_t)v46;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v24)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v35 = v21;
  v36 = v23;
  v46 = a1;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v47, v48);
  v25 = v44;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v26 = v36;
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v36, v25, a2);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v47, v48);
  v27 = v41;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v26[*(int *)(v20 + 60)], v27, a3);
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = type metadata accessor for PredicateExpressions.Variable(0, AssociatedTypeWitness, v29, v30);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v47, v48);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v31);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  *(_QWORD *)&v26[*(int *)(v20 + 64)] = v50;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  v32 = v35;
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v37, v26, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v26, v20);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceContainsWhere<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.SequenceContainsWhere<>.init(from:), a5, a6);
}

uint64_t PredicateExpressions.SequenceAllSatisfy<>.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return PredicateExpressions.SequenceContainsWhere<>.encode(to:)(a1, a2);
}

uint64_t PredicateExpressions.SequenceAllSatisfy<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  return PredicateExpressions.SequenceContainsWhere<>.init(from:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceAllSatisfy<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.SequenceAllSatisfy<>.init(from:), a5, a6);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceAllSatisfy<A, B>(_QWORD *a1, uint64_t a2)
{
  return PredicateExpressions.SequenceAllSatisfy<>.encode(to:)(a1, a2);
}

uint64_t PredicateExpressions.SequenceStartsWith<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.SequenceStartsWith<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[15];
  __n128 v15;
  uint64_t v16;

  v14[5] = a5;
  v14[6] = a4;
  v14[9] = a3;
  v14[4] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14[7] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v14[8] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[10] = v9;
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v15 = v7;
  v16 = v13;
  type metadata accessor for PredicateExpressions.SequenceStartsWith();
}

uint64_t sub_181EFD940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 216) = v6;
  *(_QWORD *)(v4 - 208) = a1;
  *(_QWORD *)(v4 - 72) = v3;
  *(_QWORD *)(v4 - 200) = v8;
  v10 = v2;
  v11 = *(_QWORD *)(v4 - 168);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(_QWORD *)(v4 - 112));
  v12 = *(_QWORD *)(v4 - 160);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v13 = *(_QWORD *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 32))(v13, v12, *(_QWORD *)(v4 - 144));
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(_QWORD *)(v4 - 112));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v14 = *(_QWORD *)(v4 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 192) + 32))(v13 + *(int *)(v14 + 76), v11, v10);
  __swift_destroy_boxed_opaque_existential_1(v4 - 136);
  v15 = *(_QWORD *)(v4 - 216);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v15 + 16))(*(_QWORD *)(v4 - 184), v13, v14);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceStartsWith<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.SequenceStartsWith<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceStartsWith<A, B>(_QWORD *a1)
{
  return PredicateExpressions.SequenceStartsWith<>.encode(to:)(a1);
}

uint64_t partial apply for closure #1 in Sequence<>.contains(_:)()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(uint64_t a1)
{
  return partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, (uint64_t (*)(_QWORD, _QWORD, __n128))type metadata accessor for PredicateExpressions.SequenceContainsWhere) & 1;
}

void type metadata accessor for PredicateExpressions.SequenceAllSatisfy()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t partial apply for closure #1 in PredicateExpressions.SequenceAllSatisfy.evaluate(_:)(uint64_t a1)
{
  return partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, (uint64_t (*)(_QWORD, _QWORD, __n128))type metadata accessor for PredicateExpressions.SequenceAllSatisfy) & 1;
}

uint64_t partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, __n128))
{
  uint64_t v2;

  return closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, *(uint64_t **)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), a2) & 1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.SequenceContainsWhere(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  if (v8 >= a2)
  {
    if (v8)
    {
      if (v5 >= v7)
        return (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 48))(a1, *(unsigned int *)(v4 + 84));
      else
        return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
    }
    return 0;
  }
  if (((((*(_QWORD *)(v6 + 64) + (v10 & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v11 = 2;
  else
    v11 = a2 - v8 + 1;
  if (v11 >= 0x10000)
    v12 = 4;
  else
    v12 = 2;
  if (v11 < 0x100)
    v12 = 1;
  if (v11 >= 2)
    v13 = v12;
  else
    v13 = 0;
  return ((uint64_t (*)(void))((char *)&loc_181EFDD50 + 4 * byte_182170660[v13]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.SequenceContainsWhere(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X16 }
  }
  if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + ((*(_QWORD *)(v5 + 64) + v8) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_181EFDEEC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_181EFDEF4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x181EFDEFCLL);
}

void sub_181EFDF38()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_181EFDF40()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_181EFDF48(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)(v9 + v10) = 0;
  if (!a2)
    JUMPOUT(0x181EFDF50);
  if (v4 >= a3)
    return (*(uint64_t (**)(uint64_t))(v7 + 56))(v9);
  else
    return (*(uint64_t (**)(uint64_t))(v6 + 56))((v8 + v9) & v5);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.SequenceContains(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181EFE044 + 4 * byte_18217066F[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.SequenceContains(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceContainsWhere<A, B>(_QWORD *a1, uint64_t a2)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceAllSatisfy<A, B>(a1, a2);
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare.root.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare.other.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

void PredicateExpressions.StringCaseInsensitiveCompare.init(root:other:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for PredicateExpressions.StringCaseInsensitiveCompare();
}

uint64_t sub_181EFE380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 68), v2, v1);
}

id PredicateExpressions.StringCaseInsensitiveCompare.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  id v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char *v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = a2[5];
  v28 = a2[3];
  v29 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v30 = (char *)&v24 - v7;
  v8 = a2[4];
  v9 = a2[2];
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v24 - v13;
  v15 = *a1;
  v32 = v15;
  v16 = v31;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v8 + 16))(&v32, v9, v8, v12);
  if (!v16)
  {
    v25 = v6;
    v26 = v14;
    v31 = v11;
    v17 = AssociatedTypeWitness;
    v32 = v15;
    (*(void (**)(uint64_t *, uint64_t))(v29 + 16))(&v32, v28);
    v19 = v10;
    v20 = v26;
    StringProtocol._ephemeralString.getter();
    v21 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v22 = v30;
    StringProtocol._ephemeralString.getter();
    v23 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v21, sel_caseInsensitiveCompare_, v23);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v17);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v19);
  }
  return v2;
}

id protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.StringCaseInsensitiveCompare<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id result;

  result = PredicateExpressions.StringCaseInsensitiveCompare.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

void static PredicateExpressions.build_caseInsensitiveCompare<A, B>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
  type metadata accessor for PredicateExpressions.StringCaseInsensitiveCompare();
}

uint64_t sub_181EFE660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v3 + *(int *)(a1 + 68), v2, v1);
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(49);
  v0._object = (void *)0x800000018230F780;
  v0._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3A726568746F202CLL;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.StringCaseInsensitiveCompare<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v14[4] = a5;
  v14[5] = a4;
  v14[8] = a3;
  v14[3] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14[6] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v14[7] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[9] = v8;
  v14[10] = v8;
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v14[15] = v13;
  type metadata accessor for PredicateExpressions.StringCaseInsensitiveCompare();
}

uint64_t sub_181EFE930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 208) = v6;
  *(_QWORD *)(v4 - 200) = a1;
  *(_QWORD *)(v4 - 72) = v3;
  *(_QWORD *)(v4 - 192) = v8;
  v10 = v2;
  v11 = *(_QWORD *)(v4 - 160);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(_QWORD *)(v4 - 104));
  v12 = *(_QWORD *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v13 = *(_QWORD *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 32))(v13, v12, *(_QWORD *)(v4 - 136));
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(_QWORD *)(v4 - 104));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v14 = *(_QWORD *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 184) + 32))(v13 + *(int *)(v14 + 68), v11, v10);
  __swift_destroy_boxed_opaque_existential_1(v4 - 128);
  v15 = *(_QWORD *)(v4 - 208);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v15 + 16))(*(_QWORD *)(v4 - 176), v13, v14);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.StringCaseInsensitiveCompare<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>(_QWORD *a1)
{
  return PredicateExpressions.StringCaseInsensitiveCompare<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.StringCaseInsensitiveCompare(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181EFEC98 + 4 * byte_182170BE0[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.StringCaseInsensitiveCompare(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t AttributedSubstring.description.getter()
{
  return AttributedString.Guts.description(in:)();
}

uint64_t AttributedSubstring.mergeAttributes(_:mergePolicy:)(uint64_t *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[48];
  _BYTE v24[48];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[4];

  v3 = v2;
  v4 = *a1;
  v22 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD **)v2;
    v6 = *(_OWORD *)(*(_QWORD *)v2 + 16);
    v7 = *(_OWORD *)(*(_QWORD *)v2 + 48);
    v31[1] = *(_OWORD *)(*(_QWORD *)v2 + 32);
    v31[2] = v7;
    v31[0] = v6;
    v8 = v5[8];
    v9 = v5[9];
    v10 = v5[10];
    v11 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v31);
    swift_unknownObjectRetain();
    *(_QWORD *)v3 = AttributedString.Guts.init(string:runs:)(v31, v8, v9, v10, v11);
    swift_release();
  }
  v12 = *(_OWORD **)v3;
  v13 = *(_OWORD *)(*(_QWORD *)v3 + 32);
  v28 = *(_OWORD *)(*(_QWORD *)v3 + 16);
  v29 = v13;
  v30 = v12[3];
  BigString.unicodeScalars.getter();
  v14 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v23);
  v15 = v12[2];
  v25 = v12[1];
  v26 = v15;
  v27 = v12[3];
  BigString.unicodeScalars.getter();
  v16 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v24);
  v17 = v16 >> 11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = (_QWORD *)swift_retain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v18, v14 >> 11, v16 >> 11, v4, v22);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v4);
  if ((result & 1) != 0)
  {
    v20 = swift_bridgeObjectRetain();
    v21 = specialized Sequence.compactMap<A>(_:)(v20);
    swift_bridgeObjectRelease();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v14 >> 11, v17, 0, v21);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t AttributedSubstring.runs.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_retain();
  return AttributedString.Runs.init(_:in:)(v2, a1);
}

uint64_t AttributedSubstring.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  _OWORD v16[4];

  v6 = *a1;
  v7 = *(_OWORD *)(v3 + 24);
  v16[0] = *(_OWORD *)(v3 + 8);
  v16[1] = v7;
  v8 = *(_OWORD *)(v3 + 56);
  v16[2] = *(_OWORD *)(v3 + 40);
  v16[3] = v8;
  v9 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v6 + 8);
  swift_retain();
  AttributedString.Guts.getUniformValue<A>(in:key:)(v16, v9, a2, (uint64_t)v14);
  if (v15)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v14, (uint64_t)&v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a3, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of AttributedString._AttributeValue?((uint64_t)v14);
    v11 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a3, 1, 1, v11);
  }
  return swift_release();
}

double AttributedSubstring.characters.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double result;
  __int128 v10;
  _OWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[3];

  v3 = *(_OWORD **)v1;
  v4 = *(_OWORD *)(v1 + 24);
  v14 = *(_OWORD *)(v1 + 8);
  v15 = v4;
  v5 = *(_OWORD *)(v1 + 56);
  v16 = *(_OWORD *)(v1 + 40);
  v17 = v5;
  v6 = v3[1];
  v7 = v3[3];
  v18[1] = v3[2];
  v18[2] = v7;
  v18[0] = v6;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v18);
  BigString.subscript.getter();
  swift_release();
  outlined release of Locale((uint64_t)v18);
  outlined release of Locale((uint64_t)v11);
  *(_QWORD *)a1 = v3;
  v8 = v11[4];
  *(_OWORD *)(a1 + 8) = v11[3];
  *(_OWORD *)(a1 + 24) = v8;
  result = *(double *)&v12;
  v10 = v13;
  *(_OWORD *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t AttributedSubstring.setAttributes(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v13[3];

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = (_QWORD *)*v1;
    v6 = *(_OWORD *)(*v1 + 16);
    v7 = *(_OWORD *)(*v1 + 48);
    v13[1] = *(_OWORD *)(*v1 + 32);
    v13[2] = v7;
    v13[0] = v6;
    v8 = v5[8];
    v9 = v5[9];
    v10 = v5[10];
    v11 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v13);
    swift_unknownObjectRetain();
    *v2 = AttributedString.Guts.init(string:runs:)(v13, v8, v9, v10, v11);
    swift_release();
  }
  return AttributedString.Guts.setAttributes(_:in:)(v3, v4);
}

double AttributedSubstring.unicodeScalars.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[48];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = *(_OWORD **)v1;
  v4 = *(_OWORD *)(v1 + 24);
  v16 = *(_OWORD *)(v1 + 8);
  v17 = v4;
  v5 = *(_OWORD *)(v1 + 56);
  v18 = *(_OWORD *)(v1 + 40);
  v19 = v5;
  v6 = v3[2];
  v20 = v3[1];
  v21 = v6;
  v22 = v3[3];
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  swift_release();
  outlined release of Locale((uint64_t)&v10);
  outlined release of Locale((uint64_t)v11);
  *(_QWORD *)a1 = v3;
  v7 = v13;
  *(_OWORD *)(a1 + 8) = v12;
  *(_OWORD *)(a1 + 24) = v7;
  result = *(double *)&v14;
  v9 = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t AttributedSubstring.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[48];
  _QWORD v22[6];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  BigString.init()();
  v22[0] = 0;
  MEMORY[0x186DA9E90](v22, 8);
  v2 = v22[0];
  type metadata accessor for AttributedString.Guts();
  v3 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    *(_OWORD *)(v3 + 16) = v18;
    *(_OWORD *)(v3 + 32) = v19;
    *(_OWORD *)(v3 + 48) = v20;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = v2;
    v5 = BigString.startIndex.getter();
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v12 = BigString.endIndex.getter();
    v27 = v5;
    v28 = v7;
    v29 = v9;
    v30 = v11;
    v31 = v12;
    v32 = v13;
    v33 = v14;
    v34 = v15;
    BigString.unicodeScalars.getter();
    swift_retain();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v21);
    outlined release of Locale((uint64_t)v22);
    result = swift_release();
    *(_QWORD *)a1 = v3;
    v16 = v24;
    *(_OWORD *)(a1 + 8) = v23;
    *(_OWORD *)(a1 + 24) = v16;
    v17 = v26;
    *(_OWORD *)(a1 + 40) = v25;
    *(_OWORD *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 72) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AttributedSubstring.base.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

__n128 AttributedSubstring.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 8);
  v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 AttributedSubstring.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 40);
  v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedSubstring.replaceAttributes(_:with:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD v25[6];
  char v26;
  uint64_t *v27;
  _QWORD v28[4];
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[3];

  v3 = v2;
  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) == 0
    || (result = specialized static Set.== infix(_:_:)(v5, v7), (result & 1) == 0))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = (_QWORD *)*v2;
      v10 = *(_OWORD *)(*v2 + 16);
      v11 = *(_OWORD *)(*v2 + 48);
      v31[1] = *(_OWORD *)(*v2 + 32);
      v31[2] = v11;
      v31[0] = v10;
      v12 = v9[8];
      v13 = v9[9];
      v14 = v9[10];
      v15 = v9[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v31);
      swift_unknownObjectRetain();
      *v3 = AttributedString.Guts.init(string:runs:)(v31, v12, v13, v14, v15);
      swift_release();
    }
    if ((specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v4) & 1) != 0)
      v16 = 1;
    else
      v16 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v6);
    v29 = (uint64_t)&v29;
    v30 = MEMORY[0x1E0DEE9D8];
    v17 = (_QWORD *)*v3;
    v18 = (unint64_t)v3[1] >> 11;
    v19 = (unint64_t)v3[5] >> 11;
    MEMORY[0x1E0C80A78](v16);
    v28[2] = v4;
    v28[3] = v5;
    MEMORY[0x1E0C80A78](v20);
    v25[2] = v4;
    v25[3] = v5;
    v25[4] = v6;
    v25[5] = v7;
    v26 = v21 & 1;
    v27 = &v30;
    swift_retain();
    AttributedString._InternalRunsSlice.updateEach(when:with:)((uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in AttributedString.replaceAttributes(_:with:), (uint64_t)v28, (void (*)(uint64_t *, uint64_t, uint64_t))partial apply for closure #2 in AttributedSubstring.replaceAttributes(_:with:), (uint64_t)v25, v17, v18, v19);
    swift_release();
    v22 = v30;
    v23 = *(_QWORD *)(v30 + 16);
    if (v23)
    {
      swift_bridgeObjectRetain();
      v24 = (uint64_t *)(v22 + 40);
      do
      {
        AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(*(v24 - 1), *v24, 0, 0);
        v24 += 2;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #2 in AttributedSubstring.replaceAttributes(_:with:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, _QWORD **a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t result;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _OWORD v33[4];
  uint64_t v34;

  v13 = a4 + 64;
  v14 = 1 << *(_BYTE *)(a4 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(a4 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain();
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_5;
    }
    v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v17)
      goto LABEL_23;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v18;
    if (!v25)
    {
      v18 = v24 + 1;
      if (v24 + 1 >= v17)
        goto LABEL_23;
      v25 = *(_QWORD *)(v13 + 8 * v18);
      if (!v25)
      {
        v18 = v24 + 2;
        if (v24 + 2 >= v17)
          goto LABEL_23;
        v25 = *(_QWORD *)(v13 + 8 * v18);
        if (!v25)
        {
          v18 = v24 + 3;
          if (v24 + 3 >= v17)
            goto LABEL_23;
          v25 = *(_QWORD *)(v13 + 8 * v18);
          if (!v25)
            break;
        }
      }
    }
LABEL_22:
    v16 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_5:
    v21 = (unint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v20);
    v22 = *v21;
    v23 = v21[1];
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v33, v22, v23);
    swift_bridgeObjectRelease();
  }
  v26 = v24 + 4;
  if (v26 < v17)
  {
    v25 = *(_QWORD *)(v13 + 8 * v26);
    if (!v25)
    {
      while (1)
      {
        v18 = v26 + 1;
        if (__OFADD__(v26, 1))
          break;
        if (v18 >= v17)
          goto LABEL_23;
        v25 = *(_QWORD *)(v13 + 8 * v18);
        ++v26;
        if (v25)
          goto LABEL_22;
      }
LABEL_30:
      __break(1u);
LABEL_31:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
      a1 = (_QWORD *)result;
      *(_QWORD *)v18 = result;
      goto LABEL_25;
    }
    v18 = v26;
    goto LABEL_22;
  }
LABEL_23:
  swift_release();
  LOBYTE(v33[0]) = 0;
  result = specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(a6, (char *)v33);
  if ((a8 & 1) == 0)
    return result;
  v18 = (int64_t)a9;
  a1 = *a9;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a9 = a1;
  if ((result & 1) == 0)
    goto LABEL_31;
LABEL_25:
  v29 = a1[2];
  v28 = a1[3];
  if (v29 >= v28 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, a1);
    a1 = (_QWORD *)result;
  }
  a1[2] = v29 + 1;
  v30 = &a1[2 * v29];
  v30[4] = a2;
  v30[5] = a3;
  *(_QWORD *)v18 = a1;
  return result;
}

double AttributedSubstring.subscript.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double result;
  __int128 v11;
  _OWORD v12[7];
  _BYTE v13[48];
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[40];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = *(_OWORD **)v1;
  v4 = *(_OWORD *)(v1 + 24);
  v23 = *(_OWORD *)(v1 + 8);
  v24 = v4;
  v5 = *(_OWORD *)(v1 + 56);
  v25 = *(_OWORD *)(v1 + 40);
  v26 = v5;
  v6 = v3[1];
  v7 = v3[3];
  v27[1] = v3[2];
  v27[2] = v7;
  v27[0] = v6;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v27);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v27);
  outlined release of Locale((uint64_t)v12);
  swift_release();
  v15 = v12[3];
  v16 = v12[4];
  *(_OWORD *)v17 = v12[5];
  *(_OWORD *)&v17[16] = v12[6];
  v14 = v3;
  *(_QWORD *)&v17[32] = 0;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  swift_release();
  v8 = v3[2];
  v20 = v3[1];
  v21 = v8;
  v22 = v3[3];
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v13);
  outlined release of Locale((uint64_t)&v14);
  *(_QWORD *)a1 = v3;
  v9 = *(_OWORD *)&v17[24];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v17[8];
  *(_OWORD *)(a1 + 24) = v9;
  result = *(double *)&v18;
  v11 = v19;
  *(_OWORD *)(a1 + 40) = v18;
  *(_OWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

Swift::Int AttributedSubstring.hashValue.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  _BYTE v4[72];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v1 = v0[3];
  v7 = v0[2];
  v8 = v1;
  v9 = v0[4];
  v2 = v0[1];
  v5 = *v0;
  v6 = v2;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

unint64_t protocol witness for AttributedStringProtocol.runs.getter in conformance AttributedSubstring@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_retain();
  return AttributedString.Runs.init(_:in:)(v2, a1);
}

double protocol witness for AttributedStringProtocol.characters.getter in conformance AttributedSubstring@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double result;
  __int128 v10;
  _OWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[3];

  v3 = *(_OWORD **)v1;
  v4 = *(_OWORD *)(v1 + 24);
  v14 = *(_OWORD *)(v1 + 8);
  v15 = v4;
  v5 = *(_OWORD *)(v1 + 56);
  v16 = *(_OWORD *)(v1 + 40);
  v17 = v5;
  v6 = v3[1];
  v7 = v3[3];
  v18[1] = v3[2];
  v18[2] = v7;
  v18[0] = v6;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v18);
  BigString.subscript.getter();
  swift_release();
  outlined release of Locale((uint64_t)v18);
  outlined release of Locale((uint64_t)v11);
  *(_QWORD *)a1 = v3;
  v8 = v11[4];
  *(_OWORD *)(a1 + 8) = v11[3];
  *(_OWORD *)(a1 + 24) = v8;
  result = *(double *)&v12;
  v10 = v13;
  *(_OWORD *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

double protocol witness for AttributedStringProtocol.unicodeScalars.getter in conformance AttributedSubstring@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[48];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = *(_OWORD **)v1;
  v4 = *(_OWORD *)(v1 + 24);
  v16 = *(_OWORD *)(v1 + 8);
  v17 = v4;
  v5 = *(_OWORD *)(v1 + 56);
  v18 = *(_OWORD *)(v1 + 40);
  v19 = v5;
  v6 = v3[2];
  v20 = v3[1];
  v21 = v6;
  v22 = v3[3];
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  swift_release();
  outlined release of Locale((uint64_t)&v10);
  outlined release of Locale((uint64_t)v11);
  *(_QWORD *)a1 = v3;
  v7 = v13;
  *(_OWORD *)(a1 + 8) = v12;
  *(_OWORD *)(a1 + 24) = v7;
  result = *(double *)&v14;
  v9 = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t AttributedSubstring.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  _OWORD v13[4];

  v5 = *(_OWORD *)(v3 + 24);
  v13[0] = *(_OWORD *)(v3 + 8);
  v13[1] = v5;
  v6 = *(_OWORD *)(v3 + 56);
  v13[2] = *(_OWORD *)(v3 + 40);
  v13[3] = v6;
  AttributedString.Guts.getUniformValue<A>(in:key:)(v13, a1, a2, (uint64_t)v11);
  if (v12)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v11, (uint64_t)&v10);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v11);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a3, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of AttributedString._AttributeValue?((uint64_t)v11);
    v9 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a3, 1, 1, v9);
  }
}

uint64_t (*protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedSubstring(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = AttributedSubstring.subscript.modify(v8, a2, a3, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

{
  _QWORD *v7;
  uint64_t v8;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AttributedSubstring.subscript.modify(v7, v8, a3, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

void (*AttributedSubstring.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;

  v9 = (char *)malloc(0xF0uLL);
  *a1 = v9;
  *((_QWORD *)v9 + 24) = a4;
  *((_QWORD *)v9 + 25) = v4;
  *((_QWORD *)v9 + 22) = a2;
  *((_QWORD *)v9 + 23) = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  *((_QWORD *)v9 + 26) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *((_QWORD *)v9 + 27) = v12;
  v13 = *(_QWORD *)(v12 + 64);
  *((_QWORD *)v9 + 28) = malloc(v13);
  v14 = malloc(v13);
  *((_QWORD *)v9 + 29) = v14;
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(v4 + 8);
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(v4 + 24);
  *(_OWORD *)(v9 + 104) = *(_OWORD *)(v4 + 40);
  *(_OWORD *)(v9 + 120) = *(_OWORD *)(v4 + 56);
  AttributedString.Guts.getUniformValue<A>(in:key:)((_QWORD *)v9 + 9, a3, a4, (uint64_t)v9);
  if (*((_QWORD *)v9 + 3))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v9, (uint64_t)(v9 + 136));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v9);
    v15 = 0;
  }
  else
  {
    outlined destroy of AttributedString._AttributeValue?((uint64_t)v9);
    v15 = 1;
  }
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v14, v15, 1, AssociatedTypeWitness);
  return AttributedSubstring.subscript.modify;
}

void AttributedSubstring.subscript.modify(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = (void *)(*a1)[28];
  v4 = (void *)(*a1)[29];
  if ((a2 & 1) != 0)
  {
    v5 = v2[26];
    v6 = v2[27];
    v7 = v2[24];
    v8 = v2[23];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[28], v4, v5);
    AttributedSubstring.subscript.setter((uint64_t)v3, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    AttributedSubstring.subscript.setter((*a1)[29], a2, v2[23], v2[24]);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t protocol witness for AttributedStringProtocol.subscript.getter in conformance AttributedSubstring@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AttributedSubstring.subscript.getter(a1, a2, a3);
}

uint64_t protocol witness for AttributedStringProtocol.subscript.setter in conformance AttributedSubstring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  specialized AttributedSubstring.subscript.setter(a1, a3, a4);
  swift_release();
  swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t (*protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedSubstring(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AttributedSubstring.subscript.modify(v7, a2, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

void (*AttributedSubstring.subscript.modify(_QWORD *a1, _QWORD *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  uint64_t v14;

  v7 = (char *)malloc(0xF0uLL);
  *a1 = v7;
  *((_QWORD *)v7 + 22) = a3;
  *((_QWORD *)v7 + 23) = v3;
  v8 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8);
  *((_QWORD *)v7 + 24) = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  *((_QWORD *)v7 + 25) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *((_QWORD *)v7 + 26) = v11;
  v12 = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v7 + 27) = malloc(v12);
  *((_QWORD *)v7 + 28) = malloc(v12);
  v13 = malloc(v12);
  *((_QWORD *)v7 + 29) = v13;
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v7 + 88) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(v7 + 120) = *(_OWORD *)(v3 + 56);
  swift_retain();
  AttributedString.Guts.getUniformValue<A>(in:key:)((_QWORD *)v7 + 9, v8, a3, (uint64_t)v7);
  if (*((_QWORD *)v7 + 3))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v7, (uint64_t)(v7 + 136));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v7);
    v14 = 0;
  }
  else
  {
    outlined destroy of AttributedString._AttributeValue?((uint64_t)v7);
    v14 = 1;
  }
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v13, v14, 1, AssociatedTypeWitness);
  swift_release();
  return AttributedSubstring.subscript.modify;
}

void AttributedSubstring.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void *, uint64_t);
  uint64_t v14;

  v3 = *a1;
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[26] + 16);
  v4((*a1)[28], v3[29], v3[25]);
  v6 = (void *)v3[28];
  v7 = (void *)v3[29];
  v8 = (void *)v3[27];
  v14 = v3[26];
  v10 = v3[24];
  v9 = v3[25];
  v11 = v3[22];
  if ((a2 & 1) != 0)
  {
    v4((uint64_t)v8, (uint64_t)v6, v3[25]);
    AttributedSubstring.subscript.setter((uint64_t)v8, v12, v10, v11);
    v13 = *(void (**)(void *, uint64_t))(v14 + 8);
    v13(v6, v9);
  }
  else
  {
    AttributedSubstring.subscript.setter((uint64_t)v6, v5, v3[24], v3[22]);
    v13 = *(void (**)(void *, uint64_t))(v14 + 8);
  }
  v13(v7, v9);
  free(v7);
  free(v6);
  free(v8);
  free(v3);
}

_QWORD *AttributedSubstring.subscript.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  _QWORD *result;
  uint64_t v6;
  _OWORD v7[4];

  v3 = *(_OWORD *)(v1 + 24);
  v7[0] = *(_OWORD *)(v1 + 8);
  v7[1] = v3;
  v4 = *(_OWORD *)(v1 + 56);
  v7[2] = *(_OWORD *)(v1 + 40);
  v7[3] = v4;
  result = AttributedString.Guts.getUniformValues(in:)(v7);
  *a1 = result;
  a1[1] = v6;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}

uint64_t protocol witness for AttributedStringProtocol.subscript.setter in conformance AttributedSubstring(uint64_t *a1)
{
  specialized AttributedSubstring.subscript.setter(a1);
  return swift_release();
}

uint64_t AttributedSubstring.subscript.setter(uint64_t *a1)
{
  specialized AttributedSubstring.subscript.setter(a1);
  return swift_release();
}

void (*AttributedSubstring.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = v4;
  v9 = malloc(0x68uLL);
  *a1 = v9;
  v9[11] = a4;
  v9[12] = v5;
  v9[10] = a3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD **)v5;
    v12 = *(_OWORD *)(*(_QWORD *)v5 + 32);
    v11 = *(_OWORD *)(*(_QWORD *)v5 + 48);
    *(_OWORD *)v9 = *(_OWORD *)(*(_QWORD *)v5 + 16);
    *((_OWORD *)v9 + 1) = v12;
    *((_OWORD *)v9 + 2) = v11;
    v13 = v10[8];
    v14 = v10[9];
    v15 = v10[10];
    v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v9);
    swift_unknownObjectRetain();
    *(_QWORD *)v5 = AttributedString.Guts.init(string:runs:)(v9, v13, v14, v15, v16);
    swift_release();
  }
  v9[6] = MEMORY[0x1E0DEE9E0];
  v17 = v9 + 6;
  v18 = MEMORY[0x1E0DEE9E8];
  v17[2] = 0;
  v17[3] = 0;
  v17[1] = v18;
  return AttributedSubstring.subscript.modify;
}

void AttributedSubstring.subscript.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  $defer #1 <A>() in AttributedSubstring.subscript.modify((uint64_t *)(*(_QWORD *)a1 + 48), *(uint64_t **)(*(_QWORD *)a1 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t $defer #1 <A>() in AttributedSubstring.subscript.modify(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  _OWORD *v3;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE v20[48];
  _BYTE v21[48];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v2 = a1[3];
  if (v2)
  {
    v19 = a1[2];
    v3 = (_OWORD *)*a2;
    v4 = *(_OWORD *)(*a2 + 32);
    v25 = *(_OWORD *)(*a2 + 16);
    v26 = v4;
    v27 = v3[3];
    BigString.unicodeScalars.getter();
    swift_bridgeObjectRetain();
    swift_retain();
    v5 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v20);
    v6 = v3[2];
    v22 = v3[1];
    v23 = v6;
    v24 = v3[3];
    BigString.unicodeScalars.getter();
    v7 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v21);
    AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v19, v2, v5 >> 11, v7 >> 11, 1);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v9 = *a2;
    v10 = *a1;
    v11 = *(_OWORD *)(*a2 + 32);
    v25 = *(_OWORD *)(*a2 + 16);
    v26 = v11;
    v27 = *(_OWORD *)(v9 + 48);
    BigString.unicodeScalars.getter();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v20);
    v13 = *(_OWORD *)(v9 + 32);
    v22 = *(_OWORD *)(v9 + 16);
    v23 = v13;
    v24 = *(_OWORD *)(v9 + 48);
    BigString.unicodeScalars.getter();
    v14 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v21);
    v15 = v12 >> 11;
    v16 = v14 >> 11;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)((_QWORD *)v9, v12 >> 11, v16, v10, 0);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v10) & 1) != 0)
    {
      v17 = swift_bridgeObjectRetain();
      v18 = specialized Sequence.compactMap<A>(_:)(v17);
      swift_bridgeObjectRelease();
      AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v15, v16, 0, v18);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedSubstring()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  _BYTE v4[72];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v1 = v0[3];
  v7 = v0[2];
  v8 = v1;
  v9 = v0[4];
  v2 = v0[1];
  v5 = *v0;
  v6 = v2;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

Swift::UInt protocol witness for Hashable.hash(into:) in conformance AttributedSubstring(uint64_t a1)
{
  return specialized AttributedStringProtocol.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedSubstring()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  _BYTE v4[72];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v1 = v0[3];
  v7 = v0[2];
  v8 = v1;
  v9 = v0[4];
  v2 = v0[1];
  v5 = *v0;
  v6 = v2;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedSubstring()
{
  return AttributedString.Guts.description(in:)();
}

uint64_t key path getter for AttributedSubstring.subscript<A>(dynamicMember:) : <A>AttributedSubstringA@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  v5 = *a1;
  swift_retain();
  AttributedSubstring.subscript.getter(v5, v4, a3);
  return swift_release();
}

double key path getter for AttributedSubstring.subscript<A>(dynamicMember:) : <A>AttributedSubstringA@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];

  swift_retain();
  AttributedSubstring.subscript.getter(v4);
  swift_release();
  result = *(double *)v4;
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t key path setter for AttributedSubstring.subscript<A>(dynamicMember:) : <A>AttributedSubstringA(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  _QWORD *v12;
  _QWORD v14[4];

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v8 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = AttributedSubstring.subscript.modify(v14, v10, v4, v5);
  *v12 = v6;
  v12[1] = v7;
  v12[2] = v9;
  v12[3] = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(_QWORD *, _QWORD))v11)(v14, 0);
}

uint64_t specialized static AttributedSubstring.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  __int128 v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  unint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  char v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  __int128 *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _BYTE __dst[264];
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _OWORD __src[17];
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  _BYTE v222[80];
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  char v231[48];
  char v232;
  char v233;
  char v234[48];
  char v235[48];
  _BYTE v236[112];
  _BYTE v237[112];
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _OWORD v246[3];
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  _OWORD v255[18];
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264[3];
  _BYTE v265[40];
  __int128 v266[3];
  _BYTE v267[56];

  v3 = *a1;
  v4 = *(_OWORD *)(a1 + 1);
  v5 = *(_OWORD *)(a1 + 3);
  v6 = *(_OWORD *)(a1 + 5);
  v263 = *(_OWORD *)(a1 + 7);
  v262 = v6;
  v261 = v5;
  v260 = v4;
  v7 = *a2;
  v8 = *(_OWORD *)(a2 + 1);
  v9 = *(_OWORD *)(a2 + 3);
  v10 = *(_OWORD *)(a2 + 5);
  v259 = *(_OWORD *)(a2 + 7);
  v258 = v10;
  v257 = v9;
  v256 = v8;
  if (v3 == v7
    && ((unint64_t)v256 ^ (unint64_t)v260) <= 0x3FF
    && ((unint64_t)v258 ^ (unint64_t)v262) < 0x400)
  {
    return 1;
  }
  v11 = swift_retain();
  AttributedString.Runs.init(_:in:)(v11, __src);
  v219 = __src[10];
  v220 = __src[11];
  v221 = *(_QWORD *)&__src[12];
  v215 = __src[6];
  v216 = __src[7];
  v218 = __src[9];
  v217 = __src[8];
  v211 = __src[2];
  v212 = __src[3];
  v214 = __src[5];
  v213 = __src[4];
  v210 = __src[1];
  v209 = __src[0];
  v12 = swift_retain();
  result = AttributedString.Runs.init(_:in:)(v12, __src);
  v228 = __src[10];
  v229 = __src[11];
  v230 = *(_QWORD *)&__src[12];
  v224 = __src[6];
  v225 = __src[7];
  v227 = __src[9];
  v226 = __src[8];
  *(_OWORD *)&v222[32] = __src[2];
  *(_OWORD *)&v222[48] = __src[3];
  v223 = __src[5];
  *(_OWORD *)&v222[64] = __src[4];
  *(_OWORD *)&v222[16] = __src[1];
  *(_OWORD *)v222 = __src[0];
  v14 = (_QWORD *)v209;
  v15 = *(_QWORD *)&__src[0];
  if ((_QWORD)v209 == *(_QWORD *)&__src[0]
    && (*((_QWORD *)&v226 + 1) ^ *((_QWORD *)&v217 + 1)) <= 1023
    && (*((_QWORD *)&v219 + 1) ^ *((_QWORD *)&v228 + 1)) <= 1023)
  {
LABEL_142:
    outlined release of AttributedString.Runs((uint64_t)v222);
    outlined release of AttributedString.Runs((uint64_t)&v209);
    return 1;
  }
  v16 = *((_QWORD *)&v213 + 1);
  v134 = *((_QWORD *)&v209 + 1);
  if (__OFSUB__(*((_QWORD *)&v213 + 1), *((_QWORD *)&v209 + 1)))
    goto LABEL_166;
  if (__OFSUB__(*(_QWORD *)&v222[72], *(_QWORD *)&v222[8]))
  {
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }
  if (*((_QWORD *)&v213 + 1) - *((_QWORD *)&v209 + 1) != *(_QWORD *)&v222[72] - *(_QWORD *)&v222[8])
    goto LABEL_148;
  v137 = *((_QWORD *)&v210 + 1);
  v140 = v210;
  v17 = *((_QWORD *)&v211 + 1);
  v141 = v211;
  v138 = *((_QWORD *)&v212 + 1);
  v139 = v212;
  v155 = v213;
  v18 = *((_QWORD *)&v217 + 1);
  v20 = *((_QWORD *)&v218 + 1);
  v19 = v218;
  v21 = *((_QWORD *)&v219 + 1);
  v22 = v219;
  v153 = *((_QWORD *)&v226 + 1);
  v159 = *((_QWORD *)&v227 + 1);
  v160 = v227;
  v158 = v228;
  __src[10] = v228;
  __src[11] = v229;
  *(_QWORD *)&__src[12] = v230;
  __src[6] = v224;
  __src[7] = v225;
  __src[9] = v227;
  __src[8] = v226;
  __src[3] = *(_OWORD *)&v222[48];
  __src[5] = v223;
  __src[4] = *(_OWORD *)&v222[64];
  __src[1] = *(_OWORD *)&v222[16];
  __src[2] = *(_OWORD *)&v222[32];
  __src[0] = *(_OWORD *)v222;
  *(_OWORD *)((char *)&__src[12] + 8) = *(_OWORD *)&v222[8];
  *(_OWORD *)((char *)&__src[13] + 8) = *(_OWORD *)&v222[24];
  *(_OWORD *)((char *)&__src[14] + 8) = *(_OWORD *)&v222[40];
  v154 = (__int128 *)(v209 + 16);
  v136 = (__int128 *)(v15 + 16);
  *(_OWORD *)((char *)&__src[15] + 8) = *(_OWORD *)&v222[56];
  outlined retain of AttributedString.Runs((uint64_t)&v209);
  result = outlined retain of AttributedString.Runs((uint64_t)v222);
  v128 = v21 >> 11;
  v129 = v18 >> 10;
  v132 = v19;
  v133 = v18;
  v23 = v18;
  v24 = v19;
  v25 = v14;
  v130 = v22;
  v131 = v20;
  v26 = v134;
  v135 = v16;
  v148 = v25;
  while (1)
  {
    v162 = v17;
    v151 = v20;
    v152 = v23;
    v149 = v24;
    v150 = v22;
    if (v26 == v16)
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v170 = 0;
      v30 = 0;
      v31 = 0;
      v172 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v147 = v16;
      goto LABEL_132;
    }
    v36 = v137;
    if (v26 < v134 || v26 >= v16)
      goto LABEL_155;
    *(_OWORD *)&__dst[160] = v219;
    *(_OWORD *)&__dst[176] = v220;
    *(_QWORD *)&__dst[192] = v221;
    *(_OWORD *)&__dst[96] = v215;
    *(_OWORD *)&__dst[112] = v216;
    *(_OWORD *)&__dst[128] = v217;
    *(_OWORD *)&__dst[144] = v218;
    *(_OWORD *)&__dst[32] = v211;
    *(_OWORD *)&__dst[48] = v212;
    *(_OWORD *)&__dst[64] = v213;
    *(_OWORD *)&__dst[80] = v214;
    *(_OWORD *)__dst = v209;
    *(_OWORD *)&__dst[16] = v210;
    v175 = v26;
    v176 = v140;
    v177 = v137;
    v178 = v141;
    v179 = v17;
    v180 = v139;
    v181 = v138;
    v182 = v155;
    result = (uint64_t)AttributedString.Runs._resolve(_:)(&v175, &v186);
    if (v186 != v25[11])
      goto LABEL_156;
    v37 = v187;
    v38 = v191;
    v39 = v192;
    v40 = v193;
    v41 = v194;
    if (v188)
    {
      v42 = (_QWORD *)(v188 + 24 * ((v187 >> ((4 * *(_BYTE *)(v188 + 18) + 8) & 0x3C)) & 0xF));
      v43 = v42[3];
      v44 = v42[4];
      v45 = v42[5];
      outlined retain of AttributedString.Runs((uint64_t)&v209);
      v157 = v44;
      swift_bridgeObjectRetain();
      v166 = v45;
      result = swift_bridgeObjectRetain();
    }
    else
    {
      v46 = v25[8];
      outlined retain of AttributedString.Runs((uint64_t)&v209);
      swift_unknownObjectRetain();
      v36 = v137;
      v25 = v148;
      v43 = specialized Rope._Node.subscript.getter(v37, v46);
      v157 = v47;
      v166 = v48;
      result = swift_unknownObjectRelease();
    }
    if (v129 >= v38 >> 10)
      v49 = v133;
    else
      v49 = v38;
    if (v129 >= v38 >> 10)
      v50 = v132;
    else
      v50 = v39;
    if (v129 >= v38 >> 10)
      v51 = v131;
    else
      v51 = v40;
    if (v129 >= v38 >> 10)
      v52 = v130;
    else
      v52 = v41;
    if (__OFADD__(v43, v38 >> 11))
      goto LABEL_157;
    v168 = v52;
    v169 = v51;
    v170 = v50;
    if (v128 >= (uint64_t)(v43 + (v38 >> 11)))
      v53 = v43 + (v38 >> 11);
    else
      v53 = v128;
    v54 = v154[1];
    v255[15] = *v154;
    v255[16] = v54;
    v255[17] = v154[2];
    v173 = v49;
    BigString.utf8.getter();
    result = v173;
    if (__OFSUB__(v53, v173 >> 11))
      goto LABEL_158;
    v55 = BigString.UTF8View.index(_:offsetBy:)();
    v164 = v57;
    v165 = v56;
    v163 = v58;
    result = outlined release of Locale((uint64_t)&v231);
    v172 = v55;
    if (v55 >> 10 < v173 >> 10)
      goto LABEL_159;
    v60 = v25[8];
    v59 = v25[9];
    v171 = v25[10];
    v62 = v140;
    v61 = v141;
    v167 = v25[11];
    if (v141 != 1 && v140 == v25[11])
    {
      v63 = v162;
      if (v155 == 2)
      {
        if (v60)
        {
          outlined retain of AttributedString.Runs((uint64_t)&v209);
          swift_unknownObjectRetain();
          v64 = v59;
          result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v140, v36, v141, v60, v59, v171);
          v65 = result;
        }
        else
        {
          v64 = v25[9];
          result = swift_retain();
          v65 = 0;
        }
      }
      else
      {
        v64 = v25[9];
        v65 = v162 >> 11;
        outlined retain of AttributedString.Runs((uint64_t)&v209);
        result = swift_unknownObjectRetain();
      }
      v82 = v157;
      goto LABEL_121;
    }
    if (v60)
      v66 = v25[9];
    else
      v66 = 0;
    v63 = v162;
    if (v26 < 0 || v66 < v26)
      goto LABEL_170;
    if (v60 && v26 < v59 && *(_WORD *)(v60 + 16))
    {
      v67 = v25[9];
      v68 = *(unsigned __int8 *)(v60 + 18);
      if (*(_BYTE *)(v60 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v209);
        result = swift_unknownObjectRetain();
        v69 = v26;
        v70 = v60;
        while (1)
        {
          v72 = *(unsigned __int16 *)(v70 + 16);
          if (*(_WORD *)(v70 + 16))
          {
            v73 = *(_QWORD *)(v70 + 32);
            v74 = __OFSUB__(v69, v73);
            v75 = v69 - v73;
            if (v74)
              goto LABEL_151;
            if (__OFADD__(v75, 1))
              goto LABEL_152;
            if (v75 + 1 <= 0)
            {
              v72 = 0;
              goto LABEL_54;
            }
            if ((_DWORD)v72 != 1)
            {
              v76 = *(_QWORD *)(v70 + 56);
              v69 = v75 - v76;
              if (__OFSUB__(v75, v76))
                goto LABEL_168;
              if (__OFADD__(v69, 1))
                goto LABEL_169;
              if (v69 + 1 < 1)
              {
                v72 = 1;
                v69 = v75;
                goto LABEL_54;
              }
              if ((_DWORD)v72 == 2)
                goto LABEL_53;
              v77 = *(_QWORD *)(v70 + 80);
              v74 = __OFSUB__(v69, v77);
              v75 = v69 - v77;
              if (v74)
                goto LABEL_172;
              if (__OFADD__(v75, 1))
                goto LABEL_173;
              if (v75 + 1 < 1)
              {
                v72 = 2;
                goto LABEL_54;
              }
              if ((_DWORD)v72 != 3)
              {
                v78 = 3;
                if (v72 > 3)
                  v78 = *(unsigned __int16 *)(v70 + 16);
                v79 = (_QWORD *)(v70 + 104);
                v80 = 3;
                while (v78 != v80)
                {
                  v69 = v75 - *v79;
                  if (__OFSUB__(v75, *v79))
                    goto LABEL_164;
                  if (__OFADD__(v69, 1))
                    goto LABEL_165;
                  if (v69 + 1 < 1)
                  {
                    v72 = v80;
                    v69 = v75;
                    goto LABEL_54;
                  }
                  ++v80;
                  v79 += 3;
                  v75 = v69;
                  if (v72 == v80)
                    goto LABEL_53;
                }
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
                goto LABEL_167;
              }
            }
            v69 = v75;
          }
LABEL_53:
          if (v69)
          {
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
            goto LABEL_153;
          }
LABEL_54:
          v71 = (4 * *(_BYTE *)(v70 + 18) + 8) & 0x3C;
          v68 = ((-15 << v71) - 1) & v68 | (v72 << v71);
          v61 = *(_QWORD *)(v70 + 24 + 24 * v72);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v70 = v61;
          if (!*(_BYTE *)(v61 + 18))
            goto LABEL_87;
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v209);
      result = swift_unknownObjectRetain();
      v69 = v26;
      v61 = v60;
LABEL_87:
      v83 = *(unsigned __int16 *)(v61 + 16);
      if (*(_WORD *)(v61 + 16))
      {
        v84 = v69 - 1;
        if (__OFSUB__(v69, 1))
          goto LABEL_175;
        if (__OFADD__(v84, 1))
          goto LABEL_176;
        if (v69 <= 0)
        {
          v83 = 0;
          goto LABEL_119;
        }
        if ((_DWORD)v83 != 1)
        {
          v74 = __OFSUB__(v84, 1);
          v84 = v69 - 2;
          if (v74)
            goto LABEL_179;
          if (__OFADD__(v84, 1))
            goto LABEL_180;
          if (v69 - 1 < 1)
          {
            v83 = 1;
            goto LABEL_119;
          }
          if ((_DWORD)v83 != 2)
          {
            v74 = __OFSUB__(v84, 1);
            v84 = v69 - 3;
            if (v74)
              goto LABEL_181;
            if (__OFADD__(v84, 1))
              goto LABEL_182;
            if (v69 - 2 >= 1)
            {
              if ((_DWORD)v83 != 3)
              {
                v85 = 0;
                v86 = 3;
                if (v83 > 3)
                  v86 = *(unsigned __int16 *)(v61 + 16);
                v87 = v86 - 3;
                if (v84 >= v83 - 4)
                  v88 = v83 - 4;
                else
                  v88 = v69 - 3;
                if (v88 >= v69 + 0x7FFFFFFFFFFFFFFDLL)
                  v88 = v69 + 0x7FFFFFFFFFFFFFFDLL;
                while (v87 > v88)
                {
                  if (v69 + 0x7FFFFFFFFFFFFFFDLL == v85)
                    goto LABEL_178;
                  if (v84 == v85)
                  {
                    v83 = v69;
                    goto LABEL_119;
                  }
                  if (v83 - 3 == ++v85)
                  {
                    v84 -= v85;
                    goto LABEL_113;
                  }
                }
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
LABEL_179:
                __break(1u);
LABEL_180:
                __break(1u);
LABEL_181:
                __break(1u);
LABEL_182:
                __break(1u);
                return result;
              }
              goto LABEL_113;
            }
            v83 = 2;
LABEL_119:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v36 = v68 & 0xFFFFFFFFFFFFF0FFLL | (v83 << 8);
            v82 = v157;
            v59 = v67;
            v62 = v167;
            goto LABEL_82;
          }
        }
      }
      else
      {
        v84 = v69;
      }
LABEL_113:
      if (v84)
        goto LABEL_174;
      goto LABEL_119;
    }
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)&v209);
    v81 = swift_unknownObjectRetain();
    v62 = v167;
    v36 = specialized Rope._endPath.getter(v81);
    result = swift_unknownObjectRelease();
    v61 = 0;
    v82 = v157;
    if (!v60)
    {
      v64 = v59;
      v65 = 0;
      goto LABEL_121;
    }
LABEL_82:
    swift_unknownObjectRetain();
    v64 = v59;
    v65 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v62, v36, v61, v60, v59, v171);
    result = swift_unknownObjectRelease_n();
LABEL_121:
    *(_QWORD *)__dst = v62;
    *(_QWORD *)&__dst[8] = v36;
    *(_QWORD *)&__dst[16] = v61;
    v74 = __OFADD__(v26, 1);
    v89 = v26 + 1;
    if (v74)
      goto LABEL_160;
    if (v62 != v167)
      goto LABEL_161;
    v147 = v89;
    if (v61)
    {
      v90 = *(_QWORD *)(v61 + 24 * ((v36 >> ((4 * *(_BYTE *)(v61 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v90 = specialized Rope._Node.subscript.getter(v36, v60);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v74 = __OFADD__(v65, v90);
    v91 = v65 + v90;
    if (v74)
      goto LABEL_162;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(__dst, v60, v64, v171, v167);
    swift_unknownObjectRelease_n();
    v137 = *(_QWORD *)&__dst[8];
    v140 = *(_QWORD *)__dst;
    v141 = *(_QWORD *)&__dst[16];
    if (v155 == 2)
    {
      v92 = v154[1];
      v255[12] = *v154;
      v255[13] = v92;
      v255[14] = v154[2];
      v93 = &v233;
      BigString.utf8.getter();
      BigString.startIndex.getter();
      v94 = BigString.UTF8View.index(_:offsetBy:)();
      v138 = v96;
      v139 = v95;
      v155 = v97;
      v98 = v148;
      v99 = v82;
    }
    else
    {
      v100 = v154[1];
      v255[9] = *v154;
      v255[10] = v100;
      v255[11] = v154[2];
      result = BigString.utf8.getter();
      if (__OFSUB__(v91, v63 >> 11))
        goto LABEL_171;
      v99 = v82;
      v93 = &v232;
      v94 = BigString.UTF8View.index(_:offsetBy:)();
      v138 = v102;
      v139 = v101;
      v155 = v103;
      v98 = v148;
    }
    v162 = v94;
    outlined release of Locale((uint64_t)v93);
    outlined release of AttributedString.Runs((uint64_t)&v209);
    v32 = v165;
    v28 = v166;
    v29 = v173;
    v31 = v168;
    v30 = v169;
    v34 = v163;
    v33 = v164;
    v27 = v99;
    v35 = v98;
LABEL_132:
    specialized IndexingIterator.next()((uint64_t)&v175);
    v186 = v27;
    v187 = v28;
    v188 = v29;
    v189 = v170;
    v190 = v30;
    v191 = v31;
    v192 = v172;
    v193 = v32;
    v194 = v33;
    v195 = v34;
    v196 = v35;
    v197 = v175;
    v161 = v176;
    v198 = v176;
    v199 = v177;
    v200 = v178;
    v201 = v179;
    v202 = v180;
    v203 = v181;
    v204 = v182;
    v205 = v183;
    v206 = v184;
    v207 = v185;
    if (!v27)
      break;
    if (!v175)
      goto LABEL_146;
    v104 = v27;
    v105 = v175;
    v106 = v104;
    outlined copy of AttributedString.Runs.Run?(v104);
    outlined copy of AttributedString.Runs.Run?(v105);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Dictionary<>.== infix(_:_:)(v106, v105) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_145:
      outlined consume of AttributedString.Runs.Run?(v106);
      outlined consume of AttributedString.Runs.Run?(v105);
      goto LABEL_146;
    }
    v107 = specialized static Set.== infix(_:_:)(v28, v161);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v107 & 1) == 0)
      goto LABEL_145;
    v145 = v105;
    v108 = v154[1];
    v255[6] = *v154;
    v255[7] = v108;
    v255[8] = v154[2];
    BigString.utf8.getter();
    v109 = BigString.UTF8View.index(_:offsetBy:)();
    v24 = v110;
    v146 = v111;
    v156 = v112;
    outlined release of Locale((uint64_t)&v234);
    v113 = v136[1];
    v255[3] = *v136;
    v255[4] = v113;
    v255[5] = v136[2];
    BigString.utf8.getter();
    v114 = BigString.UTF8View.index(_:offsetBy:)();
    v142 = v115;
    v143 = v116;
    v144 = v117;
    result = outlined release of Locale((uint64_t)&v235);
    v118 = *v154;
    v119 = v154[1];
    v255[2] = v154[2];
    v255[1] = v119;
    v255[0] = v118;
    if (v109 >> 10 < v152 >> 10)
    {
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
      goto LABEL_163;
    }
    v247 = v152;
    v248 = v149;
    v249 = v151;
    v250 = v150;
    v251 = v109;
    v252 = v24;
    v20 = v146;
    v253 = v146;
    v254 = v156;
    v120 = *v154;
    v121 = v154[1];
    v264[2] = v154[2];
    v264[1] = v121;
    v264[0] = v120;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v264, (uint64_t)v265);
    outlined retain of Locale((uint64_t)v265);
    v122 = v114;
    BigString.subscript.getter();
    result = outlined release of Locale((uint64_t)v255);
    v123 = *v136;
    v124 = v136[1];
    v246[2] = v136[2];
    v246[1] = v124;
    v246[0] = v123;
    if (v114 >> 10 < v153 >> 10)
      goto LABEL_154;
    v238 = v153;
    v239 = v160;
    v240 = v159;
    v241 = v158;
    v242 = v114;
    v243 = v142;
    v244 = v143;
    v245 = v144;
    v125 = *v136;
    v126 = v136[2];
    v266[1] = v136[1];
    v266[2] = v126;
    v266[0] = v125;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v266, (uint64_t)v267);
    outlined retain of Locale((uint64_t)v267);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v246);
    v127 = MEMORY[0x186DA3D88](v236, v237);
    outlined consume of AttributedString.Runs.Run?(v106);
    outlined consume of AttributedString.Runs.Run?(v145);
    outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v186);
    outlined release of Locale((uint64_t)v237);
    result = outlined release of Locale((uint64_t)v236);
    if ((v127 & 1) == 0)
      goto LABEL_147;
    v153 = v122;
    v159 = v143;
    v160 = v142;
    v158 = v144;
    v23 = v109;
    v22 = v156;
    v25 = v148;
    v16 = v135;
    v17 = v162;
    v26 = v147;
  }
  if (!v175)
  {
    outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v186);
    memcpy(__dst, __src, sizeof(__dst));
    outlined release of AttributedString.Runs((uint64_t)__dst);
    outlined release of AttributedString.Runs((uint64_t)&v209);
    goto LABEL_142;
  }
LABEL_146:
  outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v186);
LABEL_147:
  memcpy(__dst, __src, sizeof(__dst));
  outlined release of AttributedString.Runs((uint64_t)__dst);
  outlined release of AttributedString.Runs((uint64_t)&v209);
LABEL_148:
  outlined release of AttributedString.Runs((uint64_t)v222);
  outlined release of AttributedString.Runs((uint64_t)&v209);
  return 0;
}

uint64_t partial apply for closure #2 in AttributedSubstring.replaceAttributes(_:with:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #2 in AttributedSubstring.replaceAttributes(_:with:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_BYTE *)(v3 + 48), *(_QWORD ***)(v3 + 56));
}

uint64_t specialized AttributedSubstring.subscript.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15[4];
  _OWORD v16[3];

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v7 = (_QWORD *)*v1;
    v8 = *(_OWORD *)(*v1 + 16);
    v9 = *(_OWORD *)(*v1 + 48);
    v16[1] = *(_OWORD *)(*v1 + 32);
    v16[2] = v9;
    v16[0] = v8;
    v10 = v7[8];
    v14 = v7[9];
    v11 = v7[10];
    v12 = v7[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v16);
    swift_unknownObjectRetain();
    *v2 = AttributedString.Guts.init(string:runs:)(v16, v10, v14, v11, v12);
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15[0] = v3;
  v15[1] = v4;
  v15[2] = v6;
  v15[3] = v5;
  $defer #1 <A>() in AttributedSubstring.subscript.modify(v15, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181F02074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized AttributedSubstring.subscript.setter(a1, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
}

uint64_t sub_181F0209C()
{
  return 16;
}

__n128 sub_181F020A8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_181F020BC()
{
  return 16;
}

__n128 sub_181F020C8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <A> [A]@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t ArraySlice<A>.regions.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <A> ArraySlice<A>@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <A> ContiguousArray<A>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t Repeated<A>.regions.getter(uint64_t a1, char a2)
{
  char __src;
  _QWORD v6[3];
  uint64_t v7;
  _UNKNOWN **v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1 < 1)
      __break(1u);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
    v8 = &protocol witness table for <A> CollectionOfOne<A>;
    LOBYTE(v6[0]) = a2;
    __src = *(_BYTE *)__swift_project_boxed_opaque_existential_1(v6, v7);
    specialized Data.InlineData.init(_:)(&__src, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  return a1;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <A> Repeated<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = Repeated<A>.regions.getter(*(_QWORD *)v1, *(_BYTE *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> [A]()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<[UInt8]> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<[UInt8]>, MEMORY[0x1E0DEC640]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in <A> [A]()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance <A> ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<UInt8>, (uint64_t)&protocol conformance descriptor for <A> ArraySlice<A>);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in <A> [A]()
{
  return &protocol witness table for <A> [A];
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element : DataProtocol in <A> [A]()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], (uint64_t *)&demangling cache variable for type metadata for [UInt8], (uint64_t)&protocol conformance descriptor for <A> [A]);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element.Collection.SubSequence : ContiguousBytes in <A> [A]()
{
  return &protocol witness table for <A> ArraySlice<A>;
}

uint64_t instantiation function for generic protocol witness table for <A> [A](uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0DEAF48]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> ArraySlice<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<ArraySlice<UInt8>> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<ArraySlice<UInt8>>, MEMORY[0x1E0DEC640]);
}

uint64_t instantiation function for generic protocol witness table for <A> ArraySlice<A>(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<UInt8>, MEMORY[0x1E0DEBF80]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> ContiguousArray<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<ContiguousArray<UInt8>> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<ContiguousArray<UInt8>>, MEMORY[0x1E0DEC640]);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in <A> ContiguousArray<A>()
{
  return &protocol witness table for <A> ContiguousArray<A>;
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element : DataProtocol in <A> ContiguousArray<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance <A> ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>, (uint64_t)&protocol conformance descriptor for <A> ContiguousArray<A>);
}

uint64_t instantiation function for generic protocol witness table for <A> ContiguousArray<A>(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>, MEMORY[0x1E0DEC738]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> EmptyCollection<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<Data> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<Data>, MEMORY[0x1E0DEC768]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in <A> EmptyCollection<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance <A> EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<UInt8>, (uint64_t)&protocol conformance descriptor for <A> EmptyCollection<A>);
}

uint64_t instantiation function for generic protocol witness table for <A> EmptyCollection<A>(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<UInt8>, MEMORY[0x1E0DEC780]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> Repeated<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<Data> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<Data>, MEMORY[0x1E0DEE868]);
}

unint64_t lazy protocol witness table accessor for type Slice<Repeated<UInt8>> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Slice<Repeated<UInt8>> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Repeated<UInt8>> and conformance <> Slice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<Repeated<UInt8>>);
    v2 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<UInt8> and conformance <A> Repeated<A>, &demangling cache variable for type metadata for Repeated<UInt8>, (uint64_t)&protocol conformance descriptor for <A> Repeated<A>);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<Repeated<UInt8>> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> Repeated<A>(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>, &demangling cache variable for type metadata for Repeated<UInt8>, MEMORY[0x1E0DEE878]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> [A](_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], (uint64_t *)&demangling cache variable for type metadata for [UInt8], (uint64_t)&protocol conformance descriptor for <A> [A]);
  a1[2] = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0DEAF28]);
  result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [UInt8], MEMORY[0x1E0DEAF58]);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> ContiguousArray<A>(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance <A> ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>, (uint64_t)&protocol conformance descriptor for <A> ContiguousArray<A>);
  a1[2] = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>, MEMORY[0x1E0DEC728]);
  result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<UInt8>, MEMORY[0x1E0DEC748]);
  a1[3] = result;
  return result;
}

uint64_t static __PlistDictionaryEncoder.encodeToTopLevelContainer<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v19;
  Swift::String v20;

  type metadata accessor for __PlistDictionaryEncoder();
  v9 = swift_allocObject();
  v10 = MEMORY[0x1E0DEE9E0];
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v9 + 24) = 200;
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 40) = xmmword_182068780;
  v12 = specialized __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(a1, 0x8000000000000000, 0, 0, 0, 255, a2, a3);
  if (v4)
    return swift_release();
  v14 = v12;
  if (!v12)
  {
    v15 = type metadata accessor for EncodingError();
    swift_allocError();
    v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v17[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x80000001823065E0;
    v20._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v20);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC4B0], v15);
    swift_willThrow();
    return swift_release();
  }
  a4[3] = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  result = swift_release();
  *a4 = v14;
  return result;
}

uint64_t specialized __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a8;
  v15 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, a7);
    v18 = &lazy cache variable for type metadata for NSDate;
  }
  else
  {
    v27 = a1;
    v19 = v28;
    v22 = a2;
    v23 = a3;
    v24 = a4;
    v25 = a5;
    v26 = a6;
    if (!swift_dynamicCastMetatype())
    {
      MEMORY[0x1E0C80A78](0);
      *(&v21 - 4) = a7;
      *(&v21 - 3) = v19;
      *(&v21 - 2) = v27;
      return specialized __PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)((void (*)(_QWORD *))closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)specialized partial apply, (uint64_t)(&v21 - 6), v22, v23, v24, v25, v26);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v27, a7);
    v18 = (unint64_t *)&lazy cache variable for type metadata for NSData;
  }
  type metadata accessor for NSMorphologyPronoun(0, v18);
  swift_dynamicCast();
  return v29;
}

void __PlistDictionaryEncoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(*v3 + 208))() & 1) != 0)
  {
    objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_5:
    v9 = type metadata accessor for _PlistDictionaryKeyedEncodingContainer(0, a2, a3, v6);
    swift_retain();
    swift_retain();
    MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDictionaryKeyedEncodingContainer<A>, v9);
    KeyedEncodingContainer.init<A>(_:)();
    return;
  }
  v7 = specialized BidirectionalCollection.last.getter(v3[2]);
  if (v7)
  {
    v8 = v7;
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
      goto LABEL_5;

  }
  __break(1u);
}

void __PlistDictionaryEncoder.unkeyedContainer()(uint64_t **a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v2 = v1;
  if (((*(uint64_t (**)(void))(*v1 + 208))() & 1) != 0)
  {
    v4 = (uint64_t *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), sel_init);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_5:
    v7 = v2[5];
    a1[3] = (uint64_t *)&type metadata for _PlistDictionaryUnkeyedEncodingContainer;
    a1[4] = (uint64_t *)lazy protocol witness table accessor for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer();
    *a1 = v2;
    a1[1] = v4;
    a1[2] = (uint64_t *)v7;
    swift_retain();
    swift_retain();
    return;
  }
  v5 = specialized BidirectionalCollection.last.getter(v1[2]);
  if (v5)
  {
    v6 = v5;
    objc_opt_self();
    v4 = (uint64_t *)swift_dynamicCastObjCClass();
    if (v4)
      goto LABEL_5;

  }
  __break(1u);
}

uint64_t __PlistDictionaryEncoder.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistDictionaryEncoder()
{
  return objc_opt_self();
}

void protocol witness for Encoder.container<A>(keyedBy:) in conformance __PlistDictionaryEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __PlistDictionaryEncoder.container<A>(keyedBy:)(a1, a2, a3);
}

void protocol witness for Encoder.unkeyedContainer() in conformance __PlistDictionaryEncoder(uint64_t **a1@<X8>)
{
  __PlistDictionaryEncoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __PlistDictionaryEncoder@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  a1[3] = type metadata accessor for __PlistDictionaryEncoder();
  a1[4] = lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator(&lazy protocol witness table cache variable for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder, type metadata accessor for __PlistDictionaryEncoder, (uint64_t)&protocol conformance descriptor for __PlistDictionaryEncoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encodeNil(forKey:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;

  v1 = *(void **)(v0 + 8);
  v2 = dispatch thunk of CodingKey.stringValue.getter();
  v4 = v3;
  if (one-time initialization token for _plistNullNSString != -1)
    swift_once();
  isa = _plistNullNSString.super.isa;
  swift_bridgeObjectRetain();
  objc_msgSend(v1, sel___swift_setObject_forKeyedSubscript_, isa, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v2, v4);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(char a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *(void **)(v1 + 8);
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v6 = v5;
  v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, a1 & 1);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v7, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *(void **)(v1 + 8);
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v6 = v5;
  v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v7, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(__int16 a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *(void **)(v1 + 8);
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v6 = v5;
  v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v7, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(unsigned __int8 a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *(void **)(v1 + 8);
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v6 = v5;
  v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v7, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(unsigned __int16 a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *(void **)(v1 + 8);
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v6 = v5;
  v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v7, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v4;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v7 = *(void **)(v4 + 8);
  v8 = dispatch thunk of CodingKey.stringValue.getter();
  v10 = v9;
  v11 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, a1);
  swift_bridgeObjectRetain();
  objc_msgSend(v7, sel___swift_setObject_forKeyedSubscript_, v11, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v8, v10);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v1 = *(void **)(v0 + 8);
  v2 = dispatch thunk of CodingKey.stringValue.getter();
  v4 = v3;
  v5 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  objc_msgSend(v1, sel___swift_setObject_forKeyedSubscript_, v5, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v2, v4);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(float a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  double v8;
  id v9;

  v3 = *(void **)(v1 + 8);
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v6 = v5;
  v7 = objc_allocWithZone((Class)NSNumber);
  *(float *)&v8 = a1;
  v9 = objc_msgSend(v7, sel_initWithFloat_, v8);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v9, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(double a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *(void **)(v1 + 8);
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v6 = v5;
  v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel___swift_setObject_forKeyedSubscript_, v7, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v4, v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

void _PlistDictionaryKeyedEncodingContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30[5];
  uint64_t v31;

  v11 = *(_QWORD *)(a3 + 16);
  v31 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v14 = (char *)&v27 - v13;
  v28 = v5;
  v15 = *v5;
  v30[3] = a4;
  v30[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  v17 = *(_QWORD *)(v15 + 40);
  v18 = *(_QWORD *)(v11 - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v27 = a2;
  v19(v14, a2, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v11);
  v20 = *(_QWORD *)(a3 + 24);
  swift_retain();
  v21 = v29;
  v22 = __PlistDictionaryEncoder.box<A>(_:for:_:)(v30, v17, (uint64_t)v14, v11, v20);
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v31);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
  else
  {
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v31);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    v24 = (void *)v28[1];
    v30[0] = dispatch thunk of CodingKey.stringValue.getter();
    v30[1] = v25;
    v26 = v23;
    swift_bridgeObjectRetain();
    objc_msgSend(v24, sel___swift_setObject_forKeyedSubscript_, v26, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

  }
}

id specialized __PlistDictionaryEncoder.box<A>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  id result;
  _OWORD v23[2];
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;

  v25 = *(_OWORD *)(a1 + 24);
  v12 = __swift_project_boxed_opaque_existential_1((_QWORD *)a1, v25);
  v13 = swift_dynamicCastMetatype();
  if (v13)
  {
    v14 = MEMORY[0x1E0C80A78](v13);
    (*(void (**)(char *, _QWORD *, _QWORD, __n128))(v16 + 16))((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v25, v14);
    v17 = &lazy cache variable for type metadata for NSDate;
LABEL_5:
    type metadata accessor for NSMorphologyPronoun(0, v17);
    swift_dynamicCast();
    return (id)v26;
  }
  v18 = swift_dynamicCastMetatype();
  if (v18)
  {
    v19 = MEMORY[0x1E0C80A78](v18);
    (*(void (**)(char *, _QWORD *, _QWORD, __n128))(v21 + 16))((char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v25, v19);
    v17 = (unint64_t *)&lazy cache variable for type metadata for NSData;
    goto LABEL_5;
  }
  MEMORY[0x1E0C80A78](0);
  v23[1] = v25;
  v24 = v12;
  result = (id)specialized __PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)((void (*)(_QWORD *))partial apply for specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:), (uint64_t)v23, a2, a3, a4, a5, a6);
  if (!v6 && !result)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), sel_init);
  return result;
}

id __PlistDictionaryEncoder.box<A>(_:for:_:)(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  id result;
  _QWORD v23[8];
  _QWORD v24[4];

  v10 = a1[3];
  v11 = a1[4];
  v12 = __swift_project_boxed_opaque_existential_1(a1, v10);
  v13 = swift_dynamicCastMetatype();
  if (v13)
  {
    v14 = MEMORY[0x1E0C80A78](v13);
    (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v16 + 16))((char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v10, v14);
    v17 = &lazy cache variable for type metadata for NSDate;
LABEL_5:
    type metadata accessor for NSMorphologyPronoun(0, v17);
    swift_dynamicCast();
    return (id)v24[3];
  }
  v18 = swift_dynamicCastMetatype();
  if (v18)
  {
    v19 = MEMORY[0x1E0C80A78](v18);
    (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v21 + 16))((char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v10, v19);
    v17 = (unint64_t *)&lazy cache variable for type metadata for NSData;
    goto LABEL_5;
  }
  v24[1] = v24;
  MEMORY[0x1E0C80A78](0);
  v23[2] = v10;
  v23[3] = a4;
  v23[4] = v11;
  v23[5] = a5;
  v23[6] = v12;
  result = (id)__PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)((void (*)(_QWORD *))partial apply for closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:), (uint64_t)v23, a2, a3, a4, a5);
  if (!v5 && !result)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), sel_init);
  return result;
}

uint64_t _PlistDictionaryKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t result;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *boxed_opaque_existential_1;
  void (*v40)(char *, uint64_t);
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  _OWORD v55[2];
  __int128 v56;
  unint64_t v57;

  v7 = v6;
  v48 = a5;
  v49 = a6;
  v50 = a4;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](a1);
  v47 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  v52 = *(_QWORD *)(v13 - 8);
  v53 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v45 - v17;
  v19 = *(_QWORD *)(a3 + 24);
  v51 = a2;
  v46 = v19;
  v20 = dispatch thunk of CodingKey.stringValue.getter();
  v22 = v21;
  v23 = (void *)v7[1];
  *(_QWORD *)&v55[0] = v20;
  *((_QWORD *)&v55[0] + 1) = v21;
  swift_bridgeObjectRetain_n();
  v24 = objc_msgSend(v23, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    outlined init with take of Any(v55, &v56);
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)&v56, (uint64_t)v55);
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMutableDictionary);
    result = swift_dynamicCast();
    if (!(_DWORD)result)
      goto LABEL_16;

    outlined init with take of Any(&v56, v55);
    swift_dynamicCast();
    v26 = v54;
  }
  else
  {
    swift_bridgeObjectRelease();
    v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init);
    *(_QWORD *)&v56 = v20;
    *((_QWORD *)&v56 + 1) = v22;
    swift_bridgeObjectRetain();
    v26 = v27;
    objc_msgSend(v23, sel___swift_setObject_forKeyedSubscript_, v26, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  v28 = v52;
  v29 = v53;
  v30 = *v7;
  v31 = v7[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v18, v51, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v15, v18, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10) == 1)
  {
    v32 = *(void (**)(char *, uint64_t))(v28 + 8);
    swift_retain();
    v32(v18, v29);
    v32(v15, v29);
    swift_retain();
LABEL_13:
    *(_QWORD *)&v56 = v30;
    *((_QWORD *)&v56 + 1) = v26;
    v57 = v31;
    v44 = type metadata accessor for _PlistDictionaryKeyedEncodingContainer(0, v50, v48, v33);
    MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDictionaryKeyedEncodingContainer<A>, v44);
    return KeyedEncodingContainer.init<A>(_:)();
  }
  v34 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v35 = v47;
  v34(v47, v15, v10);
  v36 = v28;
  v37 = (uint64_t *)swift_allocObject();
  v38 = v46;
  v37[5] = v10;
  v37[6] = v38;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v37 + 2);
  v34((char *)boxed_opaque_existential_1, v35, v10);
  v40 = *(void (**)(char *, uint64_t))(v36 + 8);
  swift_retain();
  v40(v18, v29);
  v37[7] = v31;
  if (v31 >> 62)
  {
    if (v31 >> 62 != 1)
    {
      v43 = 1;
      goto LABEL_12;
    }
    v41 = (uint64_t *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v41 = (uint64_t *)(v31 + 64);
  }
  v42 = *v41;
  result = swift_retain();
  v43 = v42 + 1;
  if (!__OFADD__(v42, 1))
  {
LABEL_12:
    v37[8] = v43;
    v31 = (unint64_t)v37;
    goto LABEL_13;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

unint64_t _PlistDictionaryKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  unint64_t result;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  void (*v36)(char *, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  _OWORD v49[2];
  _OWORD v50[2];

  v4 = v3;
  v44 = a3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v43 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional();
  v46 = *(_QWORD *)(v10 - 8);
  v47 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v41 - v14;
  v16 = *(_QWORD *)(a2 + 24);
  v45 = a1;
  v42 = v16;
  v17 = dispatch thunk of CodingKey.stringValue.getter();
  v19 = v18;
  v20 = (void *)v4[1];
  *(_QWORD *)&v49[0] = v17;
  *((_QWORD *)&v49[0] + 1) = v18;
  swift_bridgeObjectRetain_n();
  v21 = objc_msgSend(v20, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    outlined init with take of Any(v49, v50);
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)v50, (uint64_t)v49);
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSMutableArray);
    result = swift_dynamicCast();
    if (!(_DWORD)result)
      goto LABEL_16;

    outlined init with take of Any(v50, v49);
    swift_dynamicCast();
    v23 = v48;
  }
  else
  {
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), sel_init);
    *(_QWORD *)&v50[0] = v17;
    *((_QWORD *)&v50[0] + 1) = v19;
    swift_bridgeObjectRetain();
    v23 = v24;
    objc_msgSend(v20, sel___swift_setObject_forKeyedSubscript_, v23, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  v25 = v46;
  v26 = *v4;
  v27 = v4[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v15, v45, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
  v28 = v47;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v12, v15, v47);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7) == 1)
  {
    v29 = *(void (**)(char *, uint64_t))(v25 + 8);
    swift_retain();
    v29(v15, v28);
    v29(v12, v28);
    swift_retain();
LABEL_13:
    v40 = v44;
    v44[3] = &type metadata for _PlistDictionaryUnkeyedEncodingContainer;
    result = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer();
    v40[4] = result;
    *v40 = v26;
    v40[1] = v23;
    v40[2] = v27;
    return result;
  }
  v30 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v31 = v43;
  v30(v43, v12, v7);
  v32 = v25;
  v33 = (uint64_t *)swift_allocObject();
  v34 = v42;
  v33[5] = v7;
  v33[6] = v34;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33 + 2);
  v30((char *)boxed_opaque_existential_1, v31, v7);
  v36 = *(void (**)(char *, uint64_t))(v32 + 8);
  swift_retain();
  v36(v15, v28);
  v33[7] = v27;
  if (v27 >> 62)
  {
    if (v27 >> 62 != 1)
    {
      v39 = 1;
      goto LABEL_12;
    }
    v37 = (uint64_t *)((v27 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v37 = (uint64_t *)(v27 + 64);
  }
  v38 = *v37;
  result = swift_retain();
  v39 = v38 + 1;
  if (!__OFADD__(v38, 1))
  {
LABEL_12:
    v33[8] = v39;
    v27 = (unint64_t)v33;
    goto LABEL_13;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t _PlistDictionaryKeyedEncodingContainer.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = (void *)v1[1];
  v4 = *(_QWORD *)(*v1 + 40);
  v5 = type metadata accessor for __PlistDictionaryReferencingEncoder();
  v6 = swift_allocObject();
  swift_retain();
  v7 = v3;
  v8 = swift_retain();
  v9 = specialized __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(v8, 0x7265707573, 0xE500000000000000, 0, 0, v4, v7, v6);
  a1[3] = v5;
  result = lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator(&lazy protocol witness table cache variable for type __PlistDictionaryReferencingEncoder and conformance __PlistDictionaryEncoder, type metadata accessor for __PlistDictionaryReferencingEncoder, (uint64_t)&protocol conformance descriptor for __PlistDictionaryEncoder);
  a1[4] = result;
  *a1 = v9;
  return result;
}

uint64_t _PlistDictionaryKeyedEncodingContainer.superEncoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  id v19;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  v19 = (id)v3[1];
  v12 = *(_QWORD *)(v11 + 40);
  v13 = type metadata accessor for __PlistDictionaryReferencingEncoder();
  v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v15 = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  v16 = specialized __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(v11, (uint64_t)v10, v12, v19, v14, v7, v15);
  a3[3] = v13;
  result = lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator(&lazy protocol witness table cache variable for type __PlistDictionaryReferencingEncoder and conformance __PlistDictionaryEncoder, type metadata accessor for __PlistDictionaryReferencingEncoder, (uint64_t)&protocol conformance descriptor for __PlistDictionaryEncoder);
  a3[4] = result;
  *a3 = v16;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>()
{
  return _PlistDictionaryKeyedEncodingContainer.encodeNil(forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(char a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>()
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(double a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(float a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithInteger_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithInt_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithLongLong_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedLongLong_);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(__int16 a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(unsigned __int8 a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(unsigned __int16 a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

void protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _PlistDictionaryKeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _PlistDictionaryKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

void _PlistDictionaryUnkeyedEncodingContainer.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16[5];

  v16[4] = a3;
  v5 = v4;
  v6 = v3;
  v9 = *v3;
  v16[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  v11 = *(_QWORD *)(v9 + 40);
  v12 = (void *)v6[1];
  swift_retain();
  v13 = objc_msgSend(v12, sel_count);
  v14 = v5;
  v15 = specialized __PlistDictionaryEncoder.box<A>(_:for:_:)((uint64_t)v16, v11, (uint64_t)v13, 0, 0, 2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if (!v14)
  {
    objc_msgSend((id)v6[1], sel_addObject_, v15);

  }
}

uint64_t _PlistDictionaryUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  id v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v6 = *(void **)(v3 + 8);
  v7 = objc_msgSend(v6, sel_count);
  objc_msgSend(v6, sel_addObject_, objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init));
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (_QWORD *)swift_allocObject();
  v9[5] = &type metadata for _CodingKey;
  v9[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  result = swift_allocObject();
  v9[2] = result;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = v7;
  *(_BYTE *)(result + 40) = 2;
  v9[7] = v8;
  if (v8 >> 62)
  {
    v12 = 0;
    if (v8 >> 62 != 1)
      goto LABEL_6;
    v13 = (uint64_t *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v13 = (uint64_t *)(v8 + 64);
  }
  v12 = *v13;
  result = swift_retain();
LABEL_6:
  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    v9[8] = v12 + 1;
    v14 = type metadata accessor for _PlistDictionaryKeyedEncodingContainer(0, a2, a3, v11);
    swift_retain();
    MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDictionaryKeyedEncodingContainer<A>, v14);
    return KeyedEncodingContainer.init<A>(_:)();
  }
  return result;
}

uint64_t _PlistDictionaryUnkeyedEncodingContainer.nestedUnkeyedContainer()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;

  v3 = (void *)v1[1];
  v4 = objc_msgSend(v3, sel_count);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DE8]), sel_init);
  objc_msgSend(v3, sel_addObject_, v5);
  v6 = *v1;
  v7 = v1[2];
  v8 = (_QWORD *)swift_allocObject();
  v8[5] = &type metadata for _CodingKey;
  v8[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  result = swift_allocObject();
  v8[2] = result;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = v4;
  *(_BYTE *)(result + 40) = 2;
  v8[7] = v7;
  if (v7 >> 62)
  {
    v10 = 0;
    if (v7 >> 62 != 1)
      goto LABEL_6;
    v11 = (uint64_t *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (uint64_t *)(v7 + 64);
  }
  v10 = *v11;
  result = swift_retain();
LABEL_6:
  if (__OFADD__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    v8[8] = v10 + 1;
    a1[3] = &type metadata for _PlistDictionaryUnkeyedEncodingContainer;
    a1[4] = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer();
    *a1 = v6;
    a1[1] = v5;
    a1[2] = v8;
    return swift_retain();
  }
  return result;
}

id protocol witness for UnkeyedEncodingContainer.count.getter in conformance _PlistDictionaryUnkeyedEncodingContainer()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 8), sel_count);
}

id protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _PlistDictionaryUnkeyedEncodingContainer()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 8);
  if (one-time initialization token for _plistNullNSString != -1)
    swift_once();
  return objc_msgSend(v1, sel_addObject_, _plistNullNSString.super.isa);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(char a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 8);
  v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, a1 & 1);
  objc_msgSend(v2, sel_addObject_, v3);

}

{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 8);
  v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, a1);
  objc_msgSend(v2, sel_addObject_, v3);

}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  objc_msgSend(v1, sel_addObject_, v2);

}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(double a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 8);
  v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, a1);
  objc_msgSend(v2, sel_addObject_, v3);

}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(float a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  double v5;
  id v6;

  v3 = *(void **)(v1 + 8);
  v4 = objc_allocWithZone((Class)NSNumber);
  *(float *)&v5 = a1;
  v6 = objc_msgSend(v4, sel_initWithFloat_, v5);
  objc_msgSend(v3, sel_addObject_, v6);

}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithInteger_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithInt_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithLongLong_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithUnsignedLongLong_);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(__int16 a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 8);
  v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, a1);
  objc_msgSend(v2, sel_addObject_, v3);

}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(unsigned __int8 a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 8);
  v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, a1);
  objc_msgSend(v2, sel_addObject_, v3);

}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(unsigned __int16 a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 8);
  v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, a1);
  objc_msgSend(v2, sel_addObject_, v3);

}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v4;
  void *v5;
  id v6;

  v5 = *(void **)(v4 + 8);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, a1);
  objc_msgSend(v5, sel_addObject_, v6);

}

void protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _PlistDictionaryUnkeyedEncodingContainer.encode<A>(_:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.superEncoder() in conformance _PlistDictionaryUnkeyedEncodingContainer@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *v1;
  v3 = (void *)v1[1];
  swift_retain();
  v5 = objc_msgSend(v3, sel_count);
  v6 = *(_QWORD *)(v4 + 40);
  v7 = type metadata accessor for __PlistDictionaryReferencingEncoder();
  v8 = swift_allocObject();
  swift_retain();
  __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(v4, (uint64_t)v5, v6, (uint64_t)v3);
  a1[3] = v7;
  result = lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator(&lazy protocol witness table cache variable for type __PlistDictionaryReferencingEncoder and conformance __PlistDictionaryEncoder, type metadata accessor for __PlistDictionaryReferencingEncoder, (uint64_t)&protocol conformance descriptor for __PlistDictionaryEncoder);
  a1[4] = result;
  *a1 = v8;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistDictionaryEncoder.encode(_:)(Swift::String a1)
{
  uint64_t v1;
  id v2;
  id v3;

  if (((*(uint64_t (**)(void))(*(_QWORD *)v1 + 208))() & 1) != 0)
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    v3 = v2;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();

  }
  else
  {
    __break(1u);
  }
}

void __PlistDictionaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v10;
  id v11;
  id v12;
  uint64_t v13[5];

  v5 = v4;
  if (((*(uint64_t (**)(void))(*v3 + 208))() & 1) != 0)
  {
    v13[3] = a2;
    v13[4] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    v10 = v3[5];
    swift_retain();
    v11 = specialized __PlistDictionaryEncoder.box<A>(_:for:_:)((uint64_t)v13, v10, 0, 0, 0, 255);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    if (!v5)
    {
      v12 = v11;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();

    }
  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __PlistDictionaryEncoder()
{
  uint64_t v0;
  objc_class *v1;

  if (((*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (one-time initialization token for _plistNullNSString != -1)
LABEL_5:
    swift_once();
  v1 = _plistNullNSString.super.isa;
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();

}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(char a1)
{
  uint64_t v1;
  id v3;

  if (((*(uint64_t (**)(void))(**(_QWORD **)v1 + 208))() & 1) != 0)
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, a1 & 1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();

  }
  else
  {
    __break(1u);
  }
}

{
  uint64_t v1;
  id v3;

  if (((*(uint64_t (**)(void))(**(_QWORD **)v1 + 208))() & 1) != 0)
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();

  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(uint64_t a1, uint64_t a2)
{
  __PlistDictionaryEncoder.encode(_:)(*(Swift::String *)&a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(double a1)
{
  uint64_t v1;
  id v3;

  if (((*(uint64_t (**)(void))(**(_QWORD **)v1 + 208))() & 1) != 0)
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();

  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(float a1)
{
  uint64_t v1;
  id v3;
  double v4;
  id v5;

  if (((*(uint64_t (**)(void))(**(_QWORD **)v1 + 208))() & 1) != 0)
  {
    v3 = objc_allocWithZone((Class)NSNumber);
    *(float *)&v4 = a1;
    v5 = objc_msgSend(v3, sel_initWithFloat_, v4);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();

  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(a1, a2, a3, (SEL *)&selRef_initWithInteger_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(a1, a2, a3, (SEL *)&selRef_initWithInt_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(a1, a2, a3, (SEL *)&selRef_initWithLongLong_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(a1, a2, a3, (SEL *)&selRef_initWithUnsignedLongLong_);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(__int16 a1)
{
  uint64_t v1;
  id v3;

  if (((*(uint64_t (**)(void))(**(_QWORD **)v1 + 208))() & 1) != 0)
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();

  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(unsigned __int8 a1)
{
  uint64_t v1;
  id v3;

  if (((*(uint64_t (**)(void))(**(_QWORD **)v1 + 208))() & 1) != 0)
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();

  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(unsigned __int16 a1)
{
  uint64_t v1;
  id v3;

  if (((*(uint64_t (**)(void))(**(_QWORD **)v1 + 208))() & 1) != 0)
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();

  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v4;
  id v7;

  if (((*(uint64_t (**)(void))(**(_QWORD **)v4 + 208))() & 1) != 0)
  {
    v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();

  }
  else
  {
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __PlistDictionaryEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __PlistDictionaryEncoder.encode<A>(_:)(a1, a2, a3);
}

uint64_t specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  _QWORD v3[5];

  v3[3] = type metadata accessor for __PlistDictionaryEncoder();
  v3[4] = lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator(&lazy protocol witness table cache variable for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder, type metadata accessor for __PlistDictionaryEncoder, (uint64_t)&protocol conformance descriptor for __PlistDictionaryEncoder);
  v3[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  _QWORD v3[5];

  v3[3] = type metadata accessor for __PlistDictionaryEncoder();
  v3[4] = lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator(&lazy protocol witness table cache variable for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder, type metadata accessor for __PlistDictionaryEncoder, (uint64_t)&protocol conformance descriptor for __PlistDictionaryEncoder);
  v3[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t specialized __PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)(void (*a1)(_QWORD *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v15)(_QWORD *);
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *);
  unint64_t v31;

  v9 = v7;
  v15 = a1;
  v16 = v9 + 2;
  v31 = *(_QWORD *)(v9[2] + 16);
  if (a7 != -1)
  {
    v30 = a1;
    v29 = v8;
    v17 = (_QWORD *)swift_allocObject();
    v17[5] = &type metadata for _CodingKey;
    v17[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v18 = swift_allocObject();
    v17[2] = v18;
    *(_QWORD *)(v18 + 16) = a4;
    *(_QWORD *)(v18 + 24) = a5;
    *(_QWORD *)(v18 + 32) = a6;
    *(_BYTE *)(v18 + 40) = a7;
    v17[7] = a3;
    v28 = a4;
    v19 = a5;
    if (a3 >> 62)
    {
      if (a3 >> 62 != 1)
      {
        v24 = a6;
        v23 = 1;
LABEL_10:
        v17[8] = v23;
        v21 = v9[5];
        v22 = v9[6];
        v9[5] = v17;
        v16 = v9 + 2;
LABEL_11:
        outlined copy of _CodingKey?(v28, v19, v24, a7);
        v8 = v29;
        goto LABEL_12;
      }
      v20 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v20 = (uint64_t *)(a3 + 64);
    }
    v24 = a6;
    v25 = *v20;
    swift_retain();
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      return 0;
    }
    goto LABEL_10;
  }
  v21 = v9[5];
  v22 = v9[6];
  v9[5] = a3;
  if (!(a3 >> 62))
  {
    v28 = a4;
    v29 = v8;
    v19 = a5;
    v24 = a6;
    v30 = a1;
    v23 = *(_QWORD *)(a3 + 64);
    swift_retain();
    goto LABEL_11;
  }
  if (a3 >> 62 == 1)
  {
    v30 = a1;
    v23 = *(_QWORD *)(a3 + 32);
    swift_retain();
LABEL_12:
    swift_retain();
    v15 = v30;
    goto LABEL_13;
  }
  v23 = 0;
LABEL_13:
  v9[6] = v23;
  v15(v9);
  if (v8)
  {
    v9[5] = v21;
    swift_retain();
    swift_release();
    v9[6] = v22;
    swift_release();
    swift_release();
    if (v31 < *(_QWORD *)(v9[2] + 16))
    {
      v26 = (void *)specialized ContiguousArray._customRemoveLast()();
      if (!v26)
        v26 = (void *)specialized ContiguousArray.remove(at:)(*(_QWORD *)(*v16 + 16) - 1);

    }
    return swift_willThrow();
  }
  v9[5] = v21;
  swift_retain();
  swift_release();
  v9[6] = v22;
  swift_release();
  swift_release();
  if (v31 >= *(_QWORD *)(v9[2] + 16))
    return 0;
  result = specialized ContiguousArray._customRemoveLast()();
  if (!result)
    return specialized ContiguousArray.remove(at:)(*(_QWORD *)(*v16 + 16) - 1);
  return result;
}

uint64_t __PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)(void (*a1)(_QWORD *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD *);
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;

  v48 = a1;
  v7 = v6;
  v46 = a6;
  v47 = a2;
  v51 = a3;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v45 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v43 - v18;
  v20 = v7[2];
  v44 = v7 + 2;
  v50 = *(_QWORD *)(v20 + 16);
  v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
  v21((char *)&v43 - v18, a4, v12, v17);
  ((void (*)(char *, char *, uint64_t))v21)(v15, v19, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, a5) != 1)
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v29 = v45;
    v28(v45, v15, a5);
    v30 = (uint64_t *)swift_allocObject();
    v31 = v46;
    v30[5] = a5;
    v30[6] = v31;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30 + 2);
    v28((char *)boxed_opaque_existential_1, v29, a5);
    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    v34 = v51;
    v30[7] = v51;
    v35 = v34 >> 62;
    if (v34 >> 62)
    {
      if ((_DWORD)v35 != 1)
      {
        v27 = 1;
        if (!__OFSUB__((_DWORD)v35, 1))
          goto LABEL_12;
        goto LABEL_27;
      }
      v36 = (uint64_t *)((v34 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v36 = (uint64_t *)(v34 + 64);
    }
    v37 = *v36;
    result = swift_retain();
    v38 = __OFADD__(v37, 1);
    v27 = v37 + 1;
    if (!v38)
    {
LABEL_12:
      v30[8] = v27;
      v24 = v7[5];
      v23 = v7[6];
      v7[5] = v30;
      goto LABEL_13;
    }
LABEL_27:
    __break(1u);
    return result;
  }
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v19, v12);
  v22(v15, v12);
  v24 = v7[5];
  v23 = v7[6];
  v25 = v51;
  v26 = v51 >> 62;
  v7[5] = v51;
  if (v25 >> 62)
  {
    if ((_DWORD)v26 != 1)
    {
      v27 = 0;
      goto LABEL_14;
    }
    v27 = *(_QWORD *)(v25 + 32);
    swift_retain();
  }
  else
  {
    v27 = *(_QWORD *)(v25 + 64);
    swift_retain();
  }
LABEL_13:
  swift_retain();
LABEL_14:
  v7[6] = v27;
  v39 = v49;
  v48(v7);
  if (v39)
  {
    v7[5] = v24;
    swift_retain();
    swift_release();
    v7[6] = v23;
    swift_release();
    swift_release();
    if (v50 < *(_QWORD *)(v7[2] + 16))
    {
      v40 = v44;
      v41 = (void *)specialized ContiguousArray._customRemoveLast()();
      if (!v41)
        v41 = (void *)specialized ContiguousArray.remove(at:)(*(_QWORD *)(*v40 + 16) - 1);

    }
    return swift_willThrow();
  }
  else
  {
    v7[5] = v24;
    swift_retain();
    swift_release();
    v7[6] = v23;
    swift_release();
    swift_release();
    if (v50 >= *(_QWORD *)(v7[2] + 16))
    {
      return 0;
    }
    else
    {
      v42 = v44;
      result = specialized ContiguousArray._customRemoveLast()();
      if (!result)
        return specialized ContiguousArray.remove(at:)(*(_QWORD *)(*v42 + 16) - 1);
    }
  }
  return result;
}

uint64_t __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *(_QWORD *)(v4 + 56) = a1;
  *(_QWORD *)(v4 + 64) = a4;
  *(_QWORD *)(v4 + 72) = a2;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = 0;
  v8 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v9 = (_QWORD *)swift_allocObject();
  v9[5] = &type metadata for _CodingKey;
  v9[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  result = swift_allocObject();
  v9[2] = result;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 40) = 2;
  v11 = a3 >> 62;
  v9[7] = a3;
  if (a3 >> 62)
  {
    v12 = 0;
    if ((_DWORD)v11 != 1)
      goto LABEL_6;
    v13 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v13 = (uint64_t *)(a3 + 64);
  }
  v12 = *v13;
  result = swift_retain();
LABEL_6:
  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    v9[8] = v12 + 1;
    if ((_DWORD)v11)
    {
      if ((_DWORD)v11 == 1)
      {
        v14 = *(_QWORD *)(a3 + 32);
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRetain();
        v14 = 0;
      }
    }
    else
    {
      v14 = *(_QWORD *)(a3 + 64);
      swift_bridgeObjectRetain();
      swift_release();
    }
    *(_QWORD *)(v4 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v4 + 24) = v8;
    *(_QWORD *)(v4 + 32) = v7;
    *(_QWORD *)(v4 + 40) = v9;
    *(_QWORD *)(v4 + 48) = v14;
    return v4;
  }
  return result;
}

BOOL __PlistDictionaryReferencingEncoder.canEncodeNewValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0[2] + 16);
  v2 = v0[5];
  swift_retain();
  v3 = _CodingPathNode.path.getter(v2);
  swift_release();
  v4 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v0[7] + 40);
  swift_retain();
  v6 = _CodingPathNode.path.getter(v5);
  swift_release();
  v7 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRelease();
  return v1 == v4 + ~v7;
}

void __PlistDictionaryReferencingEncoder.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  outlined consume of __PlistDictionaryReferencingEncoder.Reference(*(void **)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
}

uint64_t __PlistDictionaryReferencingEncoder.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t result;
  _QWORD v17[4];

  v1 = v0;
  v3 = *(_QWORD *)(v0 + 16);
  v2 = v0 + 16;
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 == 1)
  {
    v5 = specialized ContiguousArray._customRemoveLast()();
    if (!v5)
      v5 = specialized ContiguousArray.remove(at:)(*(_QWORD *)(*(_QWORD *)v2 + 16) - 1);
    v6 = (id)v5;
    v7 = (unint64_t *)&lazy cache variable for type metadata for NSObject;
  }
  else
  {
    if (v4)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), sel_init);
    v7 = &lazy cache variable for type metadata for NSDictionary;
  }
  v8 = type metadata accessor for NSMorphologyPronoun(0, v7);
  v17[3] = v8;
  v17[0] = v6;
  v9 = *(void **)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v11 = *(_QWORD *)(v1 + 80);
  if ((*(_BYTE *)(v1 + 88) & 1) != 0)
  {
    v12 = objc_allocWithZone((Class)NSString);
    v13 = String._bridgeToObjectiveCImpl()();
    v14 = v9;
    v15 = objc_msgSend(v12, sel_initWithString_, v13);
    swift_unknownObjectRelease();
    __swift_project_boxed_opaque_existential_1(v17, v8);
    objc_msgSend(v14, sel_setObject_forKeyedSubscript_, _bridgeAnythingToObjectiveC<A>(_:)(), v15);

    swift_unknownObjectRelease();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v17, v8);
    objc_msgSend(v9, sel_insertObject_atIndex_, _bridgeAnythingToObjectiveC<A>(_:)(), v10);
    swift_unknownObjectRelease();
    outlined consume of __PlistDictionaryReferencingEncoder.Reference(v9, v10, v11, 0);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of __PlistDictionaryReferencingEncoder.Reference(*(void **)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_BYTE *)(v1 + 88));
  return v1;
}

uint64_t __PlistDictionaryReferencingEncoder.__deallocating_deinit()
{
  __PlistDictionaryReferencingEncoder.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistDictionaryReferencingEncoder()
{
  return objc_opt_self();
}

id outlined copy of __PlistDictionaryReferencingEncoder.Reference(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v4;

  if ((a4 & 1) == 0)
    return a1;
  v4 = a1;
  return (id)swift_bridgeObjectRetain();
}

void destroy for __PlistDictionaryReferencingEncoder.Reference(uint64_t a1)
{
  outlined consume of __PlistDictionaryReferencingEncoder.Reference(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

void outlined consume of __PlistDictionaryReferencingEncoder.Reference(void *a1, uint64_t a2, uint64_t a3, char a4)
{

  if ((a4 & 1) != 0)
    swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __PlistDictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of __PlistDictionaryReferencingEncoder.Reference(*(void **)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for __PlistDictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of __PlistDictionaryReferencingEncoder.Reference(*(void **)a2, v4, v5, v6);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of __PlistDictionaryReferencingEncoder.Reference(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for __PlistDictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of __PlistDictionaryReferencingEncoder.Reference(v5, v7, v6, v8);
  return a1;
}

void *type metadata accessor for __PlistDictionaryReferencingEncoder.Reference()
{
  return &unk_1E0F28FF8;
}

void *type metadata accessor for _PlistDictionaryEncodingStorage()
{
  return &unk_1E0F28848;
}

uint64_t partial apply for specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(a1);
}

uint64_t one-time initialization function for _plistNullNSString()
{
  objc_class *v0;
  uint64_t result;

  v0 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, String._bridgeToObjectiveCImpl()());
  result = swift_unknownObjectRelease();
  _plistNullNSString.super.isa = v0;
  return result;
}

uint64_t sub_181F06630()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_181F06660()
{
  uint64_t v0;

  outlined consume of _CodingKey(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer;
  if (!lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistDictionaryUnkeyedEncodingContainer, &type metadata for _PlistDictionaryUnkeyedEncodingContainer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer);
  }
  return result;
}

uint64_t type metadata accessor for _PlistDictionaryKeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PlistDictionaryKeyedEncodingContainer);
}

uint64_t destroy for _PlistDictionaryKeyedEncodingContainer(uint64_t a1)
{
  swift_release();

  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for _PlistDictionaryKeyedEncodingContainer(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  v4 = v3;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _PlistDictionaryKeyedEncodingContainer(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _PlistDictionaryKeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for _PlistDictionaryUnkeyedEncodingContainer()
{
  return &type metadata for _PlistDictionaryUnkeyedEncodingContainer;
}

uint64_t specialized __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *boxed_opaque_existential_1;
  void (*v38)(char *, uint64_t);
  id v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _QWORD v51[5];

  v49 = a6;
  v51[3] = &type metadata for _CodingKey;
  v46 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v51[4] = v46;
  v15 = swift_allocObject();
  v51[0] = v15;
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)(v15 + 32) = a4;
  *(_BYTE *)(v15 + 40) = a5;
  *(_QWORD *)(a8 + 56) = a1;
  swift_retain();
  swift_retain();
  v16 = a7;
  _CodingKey.stringValue.getter(a2, a3, a4, a5);
  v50 = v16;
  *(_QWORD *)(a8 + 64) = v16;
  *(_QWORD *)(a8 + 72) = v17;
  *(_QWORD *)(a8 + 80) = v18;
  *(_BYTE *)(a8 + 88) = 1;
  swift_release();
  v19 = *(_QWORD *)(a1 + 32);
  v47 = *(_QWORD *)(a1 + 24);
  v48 = v19;
  v20 = __swift_project_boxed_opaque_existential_1(v51, (uint64_t)&type metadata for _CodingKey);
  v21 = type metadata accessor for Optional();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  initializeWithCopy for _CodingKey((uint64_t)v24, (uint64_t)v20);
  v25 = storeEnumTagSinglePayload for _CodingKey((uint64_t)v24, 0, 1u);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v28);
  (*(void (**)(char *, char *, uint64_t, __n128))(v22 + 16))(v24, v24, v21, v29);
  if (getEnumTagSinglePayload for _CodingKey((uint64_t)v24, 1u) == 1)
  {
    v30 = *(void (**)(char *, uint64_t))(v22 + 8);
    v31 = v48;
    swift_bridgeObjectRetain();
    v30(v24, v21);
    v30(v24, v21);
    v32 = v49;
    swift_retain();
    swift_release();

    v33 = v32 >> 62;
    v34 = (uint64_t *)v32;
    if (v32 >> 62)
    {
LABEL_3:
      if ((_DWORD)v33 != 1)
      {
        v41 = 0;
LABEL_14:
        v45 = v47;
        *(_QWORD *)(a8 + 16) = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(a8 + 24) = v45;
        *(_QWORD *)(a8 + 32) = v31;
        *(_QWORD *)(a8 + 40) = v34;
        *(_QWORD *)(a8 + 48) = v41;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
        return a8;
      }
      v35 = (uint64_t *)((v32 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      v41 = *v35;
      swift_release();
      goto LABEL_14;
    }
LABEL_12:
    v35 = (uint64_t *)(v32 + 64);
    goto LABEL_13;
  }
  __swift_memcpy25_8((uint64_t)v27, (uint64_t)v24);
  v34 = (uint64_t *)swift_allocObject();
  v36 = v46;
  v34[5] = (uint64_t)&type metadata for _CodingKey;
  v34[6] = v36;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34 + 2);
  __swift_memcpy25_8((uint64_t)boxed_opaque_existential_1, (uint64_t)v27);
  v38 = *(void (**)(char *, uint64_t))(v22 + 8);
  v31 = v48;
  swift_bridgeObjectRetain();
  v38(v24, v21);
  v32 = v49;
  v34[7] = v49;
  v33 = v32 >> 62;
  if (v32 >> 62)
  {
    v39 = v50;
    if ((_DWORD)v33 != 1)
    {
      v44 = 1;
LABEL_11:
      v34[8] = v44;
      swift_release();

      if ((_DWORD)v33)
        goto LABEL_3;
      goto LABEL_12;
    }
    v40 = (uint64_t *)((v32 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v40 = (uint64_t *)(v32 + 64);
    v39 = v50;
  }
  v42 = *v40;
  result = swift_retain();
  v44 = v42 + 1;
  if (!__OFADD__(v42, 1))
    goto LABEL_11;
  __break(1u);
  return result;
}

uint64_t specialized __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t *v38;
  void (*v39)(char *, uint64_t);
  id v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52[3];
  __int128 v53;

  v49 = a3;
  *(_QWORD *)&v53 = a6;
  *((_QWORD *)&v53 + 1) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a2, a6);
  *(_QWORD *)(a5 + 56) = a1;
  swift_retain();
  swift_retain();
  v13 = a4;
  v14 = dispatch thunk of CodingKey.stringValue.getter();
  v50 = v13;
  *(_QWORD *)(a5 + 64) = v13;
  *(_QWORD *)(a5 + 72) = v14;
  *(_QWORD *)(a5 + 80) = v15;
  *(_BYTE *)(a5 + 88) = 1;
  swift_release();
  v16 = *(_QWORD *)(a1 + 24);
  v51 = a1;
  v17 = *(_QWORD *)(a1 + 32);
  v47 = v16;
  v48 = v17;
  v46 = v53;
  v18 = v53;
  v19 = __swift_project_boxed_opaque_existential_1(v52, v53);
  v20 = type metadata accessor for Optional();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v23 = MEMORY[0x1E0C80A78](v20);
  v24 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  v25 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v25 + 16))((char *)&v46 - v24, v19, v18, v23);
  v26 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))((char *)&v46 - v24, 0, 1, v18);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v29);
  (*(void (**)(char *, char *, uint64_t, __n128))(v21 + 16))((char *)&v46 - v24, (char *)&v46 - v24, v20, v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))((char *)&v46 - v24, 1, v18) == 1)
  {
    v31 = *(void (**)(char *, uint64_t))(v21 + 8);
    v32 = v48;
    swift_bridgeObjectRetain();
    v31((char *)&v46 - v24, v20);
    v31((char *)&v46 - v24, v20);
    v33 = v49;
    swift_retain();
    swift_release();

    v34 = v33 >> 62;
    v35 = v33;
    if (v33 >> 62)
    {
LABEL_3:
      if ((_DWORD)v34 != 1)
      {
        v42 = 0;
LABEL_16:
        v45 = v47;
        *(_QWORD *)(a5 + 16) = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(a5 + 24) = v45;
        *(_QWORD *)(a5 + 32) = v32;
        *(_QWORD *)(a5 + 40) = v35;
        *(_QWORD *)(a5 + 48) = v42;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
        return a5;
      }
      v36 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_15:
      v42 = *v36;
      swift_release();
      goto LABEL_16;
    }
LABEL_14:
    v36 = (uint64_t *)(v33 + 64);
    goto LABEL_15;
  }
  v37 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  v37(v28, (char *)&v46 - v24, v18);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 40) = v46;
  v38 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v35 + 16));
  v37((char *)v38, v28, v18);
  v39 = *(void (**)(char *, uint64_t))(v21 + 8);
  v32 = v48;
  swift_bridgeObjectRetain();
  v39((char *)&v46 - v24, v20);
  v33 = v49;
  *(_QWORD *)(v35 + 56) = v49;
  v34 = v33 >> 62;
  if (!(v33 >> 62))
  {
    v41 = (uint64_t *)(v33 + 64);
    v40 = v50;
    goto LABEL_10;
  }
  v40 = v50;
  if ((_DWORD)v34 == 1)
  {
    v41 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_10:
    v43 = *v41;
    swift_retain();
    goto LABEL_12;
  }
  v43 = 0;
LABEL_12:
  result = v51;
  if (!__OFADD__(v43, 1))
  {
    *(_QWORD *)(v35 + 64) = v43 + 1;
    swift_release();

    if ((_DWORD)v34)
      goto LABEL_3;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(a1);
}

uint64_t closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)specialized partial apply(uint64_t a1)
{
  return partial apply for specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(a1);
}

id Int8.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_charValue);
}

uint64_t Int8.init(exactly:)(void *a1)
{
  id v1;
  id v2;
  char v3;
  int v4;

  v1 = objc_msgSend(a1, sel_charValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v1);
  v3 = static NSObject.== infix(_:_:)();

  if ((v3 & 1) != 0)
    v4 = v1;
  else
    v4 = 0;
  return v4 & 0xFFFFFEFF | (((v3 & 1) == 0) << 8);
}

NSNumber __swiftcall Int8._bridgeToObjectiveC()()
{
  char v0;

  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v0);
}

uint64_t static Int8._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, _BYTE *a2)
{
  id v3;
  id v4;
  char v5;

  v3 = objc_msgSend(a1, sel_charValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }
  return v5 & 1;
}

void *static Int8._unconditionallyBridgeFromObjectiveC(_:)(void *result)
{
  id v1;
  id v2;
  id v3;
  char v4;

  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(v1, sel_charValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v2);
    v4 = static NSObject.== infix(_:_:)();

    if ((v4 & 1) != 0)
      return (void *)v2;
    else
      return 0;
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int8()
{
  char *v0;

  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, *v0);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int8(void *a1@<X0>, _BYTE *a2@<X8>)
{
  id v3;
  id v4;
  id v5;
  char v6;
  char v7;

  if (a1)
  {
    v3 = a1;
    v4 = objc_msgSend(v3, sel_charValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v4);
    v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0)
      v7 = (char)v4;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
}

id UInt8.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedCharValue);
}

uint64_t UInt8.init(exactly:)(void *a1)
{
  id v1;
  id v2;
  char v3;
  int v4;

  v1 = objc_msgSend(a1, sel_unsignedCharValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v1);
  v3 = static NSObject.== infix(_:_:)();

  if ((v3 & 1) != 0)
    v4 = (int)v1;
  else
    v4 = 0;
  return v4 & 0xFFFFFEFF | (((v3 & 1) == 0) << 8);
}

NSNumber __swiftcall UInt8._bridgeToObjectiveC()()
{
  unsigned __int8 v0;

  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v0);
}

uint64_t static UInt8._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, _BYTE *a2)
{
  id v3;
  id v4;
  char v5;

  v3 = objc_msgSend(a1, sel_unsignedCharValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }
  return v5 & 1;
}

void *static UInt8._unconditionallyBridgeFromObjectiveC(_:)(void *result)
{
  id v1;
  id v2;
  id v3;
  char v4;

  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(v1, sel_unsignedCharValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v2);
    v4 = static NSObject.== infix(_:_:)();

    if ((v4 & 1) != 0)
      return (void *)v2;
    else
      return 0;
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt8(void *a1@<X0>, _BYTE *a2@<X8>)
{
  id v3;
  id v4;
  id v5;
  char v6;
  char v7;

  if (a1)
  {
    v3 = a1;
    v4 = objc_msgSend(v3, sel_unsignedCharValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v4);
    v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0)
      v7 = (char)v4;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
}

id Int16.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_shortValue);
}

uint64_t Int16.init(exactly:)(void *a1)
{
  id v1;
  id v2;
  char v3;
  int v4;

  v1 = objc_msgSend(a1, sel_shortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v1);
  v3 = static NSObject.== infix(_:_:)();

  if ((v3 & 1) != 0)
    v4 = (unsigned __int16)v1;
  else
    v4 = 0;
  return v4 & 0xFFFEFFFF | (((v3 & 1) == 0) << 16);
}

uint64_t static Int16._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;

  v3 = objc_msgSend(a1, sel_shortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(_BYTE *)(a2 + 2) = 0;
  }
  return v5 & 1;
}

void *static Int16._unconditionallyBridgeFromObjectiveC(_:)(void *result)
{
  id v1;
  id v2;
  id v3;
  char v4;

  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(v1, sel_shortValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v2);
    v4 = static NSObject.== infix(_:_:)();

    if ((v4 & 1) != 0)
      return (void *)v2;
    else
      return 0;
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int16(void *a1@<X0>, _WORD *a2@<X8>)
{
  id v3;
  id v4;
  id v5;
  char v6;
  __int16 v7;

  if (a1)
  {
    v3 = a1;
    v4 = objc_msgSend(v3, sel_shortValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v4);
    v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0)
      v7 = (__int16)v4;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
}

id UInt16.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedShortValue);
}

uint64_t UInt16.init(exactly:)(void *a1)
{
  id v1;
  id v2;
  char v3;
  int v4;

  v1 = objc_msgSend(a1, sel_unsignedShortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v1);
  v3 = static NSObject.== infix(_:_:)();

  if ((v3 & 1) != 0)
    v4 = (int)v1;
  else
    v4 = 0;
  return v4 & 0xFFFEFFFF | (((v3 & 1) == 0) << 16);
}

NSNumber __swiftcall UInt16._bridgeToObjectiveC()()
{
  unsigned __int16 v0;

  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v0);
}

uint64_t static UInt16._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;

  v3 = objc_msgSend(a1, sel_unsignedShortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(_BYTE *)(a2 + 2) = 0;
  }
  return v5 & 1;
}

void *static UInt16._unconditionallyBridgeFromObjectiveC(_:)(void *result)
{
  id v1;
  id v2;
  id v3;
  char v4;

  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(v1, sel_unsignedShortValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v2);
    v4 = static NSObject.== infix(_:_:)();

    if ((v4 & 1) != 0)
      return (void *)v2;
    else
      return 0;
  }
  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt16()
{
  unsigned __int16 *v0;

  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, *v0);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt16(void *a1@<X0>, _WORD *a2@<X8>)
{
  id v3;
  id v4;
  id v5;
  char v6;
  __int16 v7;

  if (a1)
  {
    v3 = a1;
    v4 = objc_msgSend(v3, sel_unsignedShortValue);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v4);
    v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0)
      v7 = (__int16)v4;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
}

id Int32.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_intValue);
}

unint64_t Int32.init(exactly:)(void *a1)
{
  return Int32.init(exactly:)(a1, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_);
}

NSNumber __swiftcall Int32._bridgeToObjectiveC()()
{
  uint64_t v0;

  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInt_, v0);
}

uint64_t static Int32._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int32._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_);
}

void *static Int32._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int32._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int32(void *a1@<X0>, _DWORD *a2@<X8>)
{
  protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int32(a1, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_, a2);
}

unint64_t UInt32.init(exactly:)(void *a1)
{
  return Int32.init(exactly:)(a1, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_);
}

unint64_t Int32.init(exactly:)(void *a1, SEL *a2, SEL *a3)
{
  id v4;
  id v5;
  char v6;
  uint64_t v7;

  v4 = objc_msgSend(a1, *a2);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v4);
  v6 = static NSObject.== infix(_:_:)();

  v7 = v4;
  if ((v6 & 1) == 0)
    v7 = 0;
  return v7 | ((unint64_t)((v6 & 1) == 0) << 32);
}

uint64_t static UInt32._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int32._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_);
}

uint64_t static Int32._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, SEL *a3, SEL *a4)
{
  id v6;
  id v7;
  char v8;

  v6 = objc_msgSend(a1, *a3);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, v6);
  v8 = static NSObject.== infix(_:_:)();

  if ((v8 & 1) != 0)
  {
    *(_DWORD *)a2 = (_DWORD)v6;
    *(_BYTE *)(a2 + 4) = 0;
  }
  return v8 & 1;
}

void *static UInt32._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int32._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_);
}

void *static Int32._unconditionallyBridgeFromObjectiveC(_:)(void *result, SEL *a2, SEL *a3)
{
  id v5;
  id v6;
  id v7;

  if (result)
  {
    v5 = result;
    v6 = objc_msgSend(v5, *a2);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v6);
    LOBYTE(a2) = static NSObject.== infix(_:_:)();

    if ((a2 & 1) != 0)
      return (void *)v6;
    else
      return 0;
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt32(void *a1@<X0>, _DWORD *a2@<X8>)
{
  protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int32(a1, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_, a2);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int32(void *a1@<X0>, SEL *a2@<X3>, SEL *a3@<X4>, _DWORD *a4@<X8>)
{
  id v7;
  id v8;
  id v9;
  int v10;

  if (a1)
  {
    v7 = a1;
    v8 = objc_msgSend(v7, *a2);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v8);
    LOBYTE(a3) = static NSObject.== infix(_:_:)();

    if ((a3 & 1) != 0)
      v10 = (int)v8;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  *a4 = v10;
}

id Int64.init(exactly:)(void *a1)
{
  return Int64.init(exactly:)(a1, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_);
}

uint64_t static Int64._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int64._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_);
}

id static Int64._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int64._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int64(void *a1@<X0>, _QWORD *a2@<X8>)
{
  protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int64(a1, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_, a2);
}

id UInt64.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedLongLongValue);
}

id UInt64.init(exactly:)(void *a1)
{
  return Int64.init(exactly:)(a1, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_);
}

id Int64.init(exactly:)(void *a1, SEL *a2, SEL *a3)
{
  id v4;
  id v5;
  char v6;

  v4 = objc_msgSend(a1, *a2);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v4);
  v6 = static NSObject.== infix(_:_:)();

  if ((v6 & 1) != 0)
    return v4;
  else
    return 0;
}

id static UInt64._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int64._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_);
}

id static Int64._unconditionallyBridgeFromObjectiveC(_:)(id result, SEL *a2, SEL *a3)
{
  id v5;
  id v6;
  id v7;

  if (result)
  {
    v5 = result;
    v6 = objc_msgSend(v5, *a2);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v6);
    LOBYTE(a2) = static NSObject.== infix(_:_:)();

    if ((a2 & 1) != 0)
      return v6;
    else
      return 0;
  }
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt64(void *a1@<X0>, _QWORD *a2@<X8>)
{
  protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int64(a1, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_, a2);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int64(void *a1@<X0>, SEL *a2@<X3>, SEL *a3@<X4>, _QWORD *a4@<X8>)
{
  id v7;
  id v8;
  id v9;
  id v10;

  if (a1)
  {
    v7 = a1;
    v8 = objc_msgSend(v7, *a2);
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v8);
    LOBYTE(a3) = static NSObject.== infix(_:_:)();

    if ((a3 & 1) != 0)
      v10 = v8;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  *a4 = v10;
}

id Int.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_integerValue);
}

id Int.init(exactly:)(void *a1)
{
  return Int64.init(exactly:)(a1, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_);
}

uint64_t static Int._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int64._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_);
}

id static Int._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int64._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int(void *a1@<X0>, _QWORD *a2@<X8>)
{
  protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int64(a1, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_, a2);
}

id UInt.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedIntegerValue);
}

id UInt.init(exactly:)(void *a1)
{
  return Int64.init(exactly:)(a1, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_);
}

uint64_t static UInt._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int64._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_);
}

id static UInt._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int64._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt(void *a1@<X0>, _QWORD *a2@<X8>)
{
  protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int64(a1, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_, a2);
}

id Float.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_floatValue);
}

uint64_t Float.init(exactly:)(void *a1)
{
  unint64_t v1;

  v1 = specialized Float.init(exactly:)(a1);
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Float(void *a1@<X0>, _DWORD *a2@<X8>)
{
  int v3;

  specialized static Float._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = v3;
}

uint64_t Double.init(exactly:)(void *a1)
{
  return specialized Double.init(exactly:)(a1);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Double(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  specialized static Double._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = v3;
}

id Bool.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_BOOLValue);
}

void Bool.init(exactly:)(uint64_t a1)
{
  id v2;
  char v3;
  id v4;

  if (!*MEMORY[0x1E0C9AE50])
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*MEMORY[0x1E0C9AE50] != a1)
  {
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 1);
    v3 = static NSObject.== infix(_:_:)();

    if ((v3 & 1) == 0)
    {
      if (*MEMORY[0x1E0C9AE40])
      {
        if (*MEMORY[0x1E0C9AE40] != a1)
        {
          v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0);
          static NSObject.== infix(_:_:)();

        }
        return;
      }
LABEL_11:
      __break(1u);
    }
  }
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Bool(void *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;

  specialized static Bool._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = v3 & 1;
}

double CGFloat.init(exactly:)(void *a1)
{
  uint64_t v2;
  double result;

  objc_msgSend(a1, sel_doubleValue);
  if ((~v2 & 0x7FF0000000000000) != 0 || (v2 & 0xFFFFFFFFFFFFFLL) == 0)
    specialized Double.init(exactly:)(a1);
  else
    objc_msgSend(a1, sel_doubleValue);
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGFloat(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  specialized static CGFloat._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *a2 = v3;
}

id protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance NSNumber@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithDouble_, *a1);
  *a2 = result;
  return result;
}

id protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance NSNumber@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithInteger_, *a1);
  *a2 = result;
  return result;
}

id protocol witness for ExpressibleByBooleanLiteral.init(BOOLeanLiteral:) in conformance NSNumber@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithBool_, *a1);
  *a2 = result;
  return result;
}

void specialized static Int8._forceBridgeFromObjectiveC(_:result:)(void *a1, _BYTE *a2)
{
  id v3;
  id v4;
  char v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v3 = objc_msgSend(a1, sel_charValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 544175136;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 947154505;
    v8._object = (void *)0xE400000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static UInt8._forceBridgeFromObjectiveC(_:result:)(void *a1, _BYTE *a2)
{
  id v3;
  id v4;
  char v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v3 = objc_msgSend(a1, sel_unsignedCharValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 544175136;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0x38746E4955;
    v8._object = (void *)0xE500000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static Int16._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v3 = objc_msgSend(a1, sel_shortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(_BYTE *)(a2 + 2) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 544175136;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0x3631746E49;
    v8._object = (void *)0xE500000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static UInt16._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v3 = objc_msgSend(a1, sel_unsignedShortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(_BYTE *)(a2 + 2) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 544175136;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0x3631746E4955;
    v8._object = (void *)0xE600000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static Int32._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v3 = objc_msgSend(a1, sel_intValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInt_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_DWORD *)a2 = (_DWORD)v3;
    *(_BYTE *)(a2 + 4) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 544175136;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0x3233746E49;
    v8._object = (void *)0xE500000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static UInt32._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v3 = objc_msgSend(a1, sel_unsignedIntValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInt_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_DWORD *)a2 = (_DWORD)v3;
    *(_BYTE *)(a2 + 4) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 544175136;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0x3233746E4955;
    v8._object = (void *)0xE600000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void specialized static UInt64._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v3 = objc_msgSend(a1, sel_unsignedLongLongValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedLongLong_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_QWORD *)a2 = v3;
    *(_BYTE *)(a2 + 8) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 544175136;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0x3436746E4955;
    v8._object = (void *)0xE600000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

unint64_t specialized static Float._forceBridgeFromObjectiveC(_:result:)(unint64_t *a1, _BYTE *object)
{
  unint64_t *v3;
  int v4;
  unint64_t result;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v3 = a1;
  objc_msgSend(a1, sel_floatValue);
  if ((~v4 & 0x7F800000) != 0 || (v4 & 0x7FFFFF) == 0)
  {
    result = specialized Float.init(exactly:)(v3);
    *(_DWORD *)object = result;
    object[4] = BYTE4(result) & 1;
    if ((result & 0x100000000) == 0)
      return result;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v13 = 0xD000000000000011;
    v14 = 0x8000000182308760;
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v7._countAndFlagsBits = _typeName(_:qualified:)();
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 544175136;
    v8._object = (void *)0xE400000000000000;
    String.append(_:)(v8);
    v3 = &v13;
    v9._countAndFlagsBits = 0x74616F6C46;
    v9._object = (void *)0xE500000000000000;
    String.append(_:)(v9);
    LODWORD(v12) = 0;
    v11 = 478;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = (unint64_t)objc_msgSend(v3, sel_floatValue, v11, v12, v13, v14);
  *(_DWORD *)object = v10;
  object[4] = 0;
  return result;
}

void specialized static Float._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  id v1;
  int v2;

  if (a1)
  {
    v1 = a1;
    objc_msgSend(v1, sel_floatValue);
    if ((~v2 & 0x7F800000) != 0 || (v2 & 0x7FFFFF) == 0)
      specialized Float.init(exactly:)(v1);
    else
      objc_msgSend(v1, sel_floatValue);

  }
}

id specialized static Double._forceBridgeFromObjectiveC(_:result:)(unint64_t *a1, _BYTE *object)
{
  unint64_t *v3;
  uint64_t v4;
  id result;
  char v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = a1;
  objc_msgSend(a1, sel_doubleValue);
  if ((~v4 & 0x7FF0000000000000) != 0 || (v4 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    result = (id)specialized Double.init(exactly:)(v3);
    *(_QWORD *)object = result;
    object[8] = v7 & 1;
    if ((v7 & 1) == 0)
      return result;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v14 = 0xD000000000000011;
    v15 = 0x8000000182308760;
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v8._countAndFlagsBits = _typeName(_:qualified:)();
    object = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 544175136;
    v9._object = (void *)0xE400000000000000;
    String.append(_:)(v9);
    v3 = &v14;
    v10._countAndFlagsBits = 0x656C62756F44;
    v10._object = (void *)0xE600000000000000;
    String.append(_:)(v10);
    LODWORD(v13) = 0;
    v12 = 534;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = objc_msgSend(v3, sel_doubleValue, v12, v13, v14, v15);
  *(_QWORD *)object = v11;
  object[8] = 0;
  return result;
}

void specialized static Double._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  id v1;
  uint64_t v2;

  if (a1)
  {
    v1 = a1;
    objc_msgSend(v1, sel_doubleValue);
    if ((~v2 & 0x7FF0000000000000) != 0 || (v2 & 0xFFFFFFFFFFFFFLL) == 0)
      specialized Double.init(exactly:)(v1);
    else
      objc_msgSend(v1, sel_doubleValue);

  }
}

void specialized static Bool._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, char *a2)
{
  char v4;
  id v5;
  char v6;
  id v7;
  char v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  if (!*MEMORY[0x1E0C9AE50])
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*MEMORY[0x1E0C9AE50] == a1)
  {
    v4 = 1;
    goto LABEL_9;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = 1;
  v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 1);
  v6 = static NSObject.== infix(_:_:)();

  if ((v6 & 1) != 0)
  {
LABEL_9:
    *a2 = v4;
    return;
  }
  if (!*MEMORY[0x1E0C9AE40])
    goto LABEL_11;
  if (*MEMORY[0x1E0C9AE40] == a1
    || (v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0),
        v8 = static NSObject.== infix(_:_:)(),
        v7,
        (v8 & 1) != 0))
  {
    v4 = 0;
    goto LABEL_9;
  }
LABEL_12:
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v9._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 544175136;
  v10._object = (void *)0xE400000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 1819242306;
  v11._object = (void *)0xE400000000000000;
  String.append(_:)(v11);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized static Bool._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  id v2;
  id v3;
  id v4;
  char v5;
  id v6;

  if (a1)
  {
    if (!*MEMORY[0x1E0C9AE50])
    {
      __break(1u);
LABEL_12:
      __break(1u);
      return;
    }
    if (a1 != (void *)*MEMORY[0x1E0C9AE50])
    {
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      v2 = objc_allocWithZone((Class)NSNumber);
      v3 = a1;
      v4 = objc_msgSend(v2, sel_initWithInteger_, 1);
      v5 = static NSObject.== infix(_:_:)();

      if ((v5 & 1) != 0)
      {
LABEL_10:

        return;
      }
      if (*MEMORY[0x1E0C9AE40])
      {
        if (v3 != (id)*MEMORY[0x1E0C9AE40])
        {
          v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0);
          static NSObject.== infix(_:_:)();

          v3 = v6;
        }
        goto LABEL_10;
      }
      goto LABEL_12;
    }
  }
}

uint64_t specialized static CGFloat._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  result = specialized static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v3._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 544175136;
    v4._object = (void *)0xE400000000000000;
    String.append(_:)(v4);
    v5._countAndFlagsBits = 0x74616F6C464743;
    v5._object = (void *)0xE700000000000000;
    String.append(_:)(v5);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized static CGFloat._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  id v1;
  uint64_t v2;

  if (a1)
  {
    v1 = a1;
    objc_msgSend(v1, sel_doubleValue);
    if ((~v2 & 0x7FF0000000000000) != 0 || (v2 & 0xFFFFFFFFFFFFFLL) == 0)
      specialized Double.init(exactly:)(v1);
    else
      objc_msgSend(v1, sel_doubleValue);

  }
}

unint64_t lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal;
  if (!lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal)
  {
    type metadata accessor for NSDecimal(255);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDecimal, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByBooleanLiteral.BooleanLiteralType : _ExpressibleByBuiltinBooleanLiteral in NSNumber()
{
  return MEMORY[0x1E0DEAFD0];
}

uint64_t SortDescriptor.AllowedComparison.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SortDescriptor.AllowedComparison.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t SortDescriptor.AllowedComparison.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000010;
  else
    return 0x65756C6156776172;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison.CodingKeys, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison.CodingKeys, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison.CodingKeys);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison.CodingKeys);
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = SortDescriptor.AllowedComparison.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = SortDescriptor.AllowedComparison.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  char *v0;

  return SortDescriptor.AllowedComparison.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = SortDescriptor.AllowedComparison.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _DarwinSearchPathsSequence();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

void SortDescriptor.AllowedComparison.selector.getter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v2[104];

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v2, v1, a1);
  __asm { BR              X11 }
}

uint64_t sub_181F09B0C()
{
  _QWORD *v0;
  int v1;
  unint64_t v2;
  char v3;
  uint64_t result;
  Swift::UInt v5;
  unsigned __int8 v6;
  char v7;

  if (one-time initialization token for validAlgorithms != -1)
    swift_once();
  v0 = static String.StandardComparator.validAlgorithms;
  if (*((_QWORD *)static String.StandardComparator.validAlgorithms + 2))
  {
    v1 = v7 ? 256 : 0;
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v1 | v6);
    if ((v3 & 1) != 0)
      return *(_QWORD *)(v0[7] + 8 * v2);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SortDescriptor.AllowedComparison.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  char v31;
  _OWORD v32[6];
  char v33;
  char v34;

  v27 = a5;
  v7 = type metadata accessor for SortDescriptor.AllowedComparison.CodingKeys(255, a2, a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison.CodingKeys, v7);
  v8 = type metadata accessor for KeyedDecodingContainer();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v27 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v12)
  {
    v13 = a1;
    v14 = v27;
    v15 = v9;
    LOBYTE(v29) = 0;
    v16 = KeyedDecodingContainer.decode(_:forKey:)();
    v17 = v8;
    if (v16 == 1)
    {
      v34 = 1;
      lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v28 = v11;
      v24 = v29;
      v25 = v30;
      v26 = v31;
      if (v29 || (v30 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v28, v17);
        *(_QWORD *)&v32[0] = v24;
        BYTE8(v32[0]) = v25;
        BYTE9(v32[0]) = v26;
        v33 = 3;
        v20 = v14;
        goto LABEL_9;
      }
      LOBYTE(v29) = 0;
      type metadata accessor for DecodingError();
      swift_allocError();
      MEMORY[0x186DA9D64](MEMORY[0x1E0DED060], v17);
      v11 = v28;
    }
    else
    {
      if (!v16)
      {
        v20 = v14;
        (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v8);
        memset(v32, 0, sizeof(v32));
        v33 = 4;
LABEL_9:
        v23 = type metadata accessor for SortDescriptor.AllowedComparison(0, a2, v21, v22);
        (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v32, v23);
        v18 = (uint64_t)v13;
        return __swift_destroy_boxed_opaque_existential_1(v18);
      }
      LOBYTE(v29) = 0;
      type metadata accessor for DecodingError();
      swift_allocError();
      MEMORY[0x186DA9D64](MEMORY[0x1E0DED060], v8);
    }
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v17);
    a1 = v13;
  }
  v18 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1(v18);
}

double SortDescriptor.AllowedComparison.init(fromSelector:)@<D0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSString *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  double result;
  char v15;
  _OWORD v16[6];
  char v17;

  v5 = NSStringFromSelector(a1);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = v6 == (id)0x3A657261706D6F63 && v8 == 0xE800000000000000;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    memset(v16, 0, sizeof(v16));
    v12 = 4;
  }
  else
  {
    if (v6 == (id)0xD000000000000019 && v8 == 0x800000018230FAD0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v16[0] = 833;
    }
    else
    {
      if (v6 == (id)0xD000000000000011 && v8 == 0x800000018230FAF0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0)
        {
          result = 0.0;
          *(_OWORD *)(a3 + 64) = 0u;
          *(_OWORD *)(a3 + 80) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)(a3 + 48) = 0u;
          *(_OWORD *)a3 = 0u;
          *(_OWORD *)(a3 + 16) = 0u;
          *(_BYTE *)(a3 + 96) = -1;
          return result;
        }
      }
      *(_QWORD *)&v16[0] = 0;
    }
    WORD4(v16[0]) = 1;
    v12 = 3;
  }
  v17 = v12;
  v13 = type metadata accessor for SortDescriptor.AllowedComparison(0, a2, v10, v11);
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a3, v16, v13);
  return result;
}

void SortDescriptor.AllowedComparison.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[104];

  v5 = v4;
  v8 = type metadata accessor for SortDescriptor.AllowedComparison.CodingKeys(255, *(_QWORD *)(a2 + 16), a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison.CodingKeys, v8);
  v9 = type metadata accessor for KeyedEncodingContainer();
  MEMORY[0x1E0C80A78](v9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v10, v5, a2);
  __asm { BR              X10 }
}

uint64_t sub_181F0A1F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  swift_release();
  v6 = type metadata accessor for EncodingError();
  swift_allocError();
  v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Any, EncodingError.Context));
  v8[3] = v2;
  v9 = swift_allocObject();
  *v8 = v9;
  v4(v9 + 16, v3, v2);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, *MEMORY[0x1E0DEC4B0], v6);
  swift_willThrow();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 208) + 8))(v1, v0);
}

void SortDescriptor.AllowedComparison.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[104];

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v3, v2, a2);
  __asm { BR              X10 }
}

uint64_t sub_181F0A3F4()
{
  Swift::UInt v1;
  Swift::UInt8 v2;
  unsigned __int8 v3;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  type metadata accessor for KeyPath();
  dispatch thunk of Hashable.hash(into:)();
  return swift_release();
}

void static SortDescriptor.AllowedComparison.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(uint64_t *, uint64_t, uint64_t);
  _BYTE v8[104];
  uint64_t v9;

  v6 = type metadata accessor for SortDescriptor.AllowedComparison(0, a3, a3, a4);
  v7 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7((uint64_t *)v8, a1, v6);
  v7(&v9, a2, v6);
  __asm { BR              X10 }
}

uint64_t sub_181F0A628()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t *, _QWORD *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  _QWORD v12[14];
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;

  v2(&v8, v12, v0);
  v3 = v11;
  if (v16)
  {
    swift_release();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 8))(v12, TupleTypeMetadata2);
LABEL_7:
    v5 = 0;
    return v5 & 1;
  }
  v4 = v15;
  if (v8 != v12[13] || ((v9 ^ v13) & 1) != 0 || ((v10 ^ v14) & 1) != 0)
  {
    swift_release();
    swift_release();
    (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v12, v0);
    goto LABEL_7;
  }
  type metadata accessor for AnyKeyPath();
  swift_retain();
  swift_retain();
  v5 = MEMORY[0x186DA51E0](v3, v4);
  swift_release_n();
  swift_release_n();
  (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v12, v0);
  return v5 & 1;
}

Swift::Int SortDescriptor.AllowedComparison.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  SortDescriptor.AllowedComparison.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SortDescriptor<A>.AllowedComparison(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  SortDescriptor.AllowedComparison.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SortDescriptor<A>.AllowedComparison@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return SortDescriptor.AllowedComparison.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5);
}

void protocol witness for Encodable.encode(to:) in conformance SortDescriptor<A>.AllowedComparison(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  SortDescriptor.AllowedComparison.encode(to:)(a1, a2, a3, a4);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SortDescriptor<A>.AllowedComparison(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static SortDescriptor.AllowedComparison.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

void SortDescriptor.keyPath.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[104];

  v5 = type metadata accessor for SortDescriptor.AllowedComparison(0, *(_QWORD *)(a1 + 16), a3, a4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v4 + 24, v5);
  __asm { BR              X10 }
}

uint64_t sub_181F0AA20()
{
  uint64_t v1;

  return v1;
}

uint64_t type metadata accessor for SortDescriptor.AllowedComparison(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SortDescriptor.AllowedComparison);
}

uint64_t outlined destroy of AnySortComparator(uint64_t a1)
{
  destroy for AnySortComparator(a1);
  return a1;
}

uint64_t SortDescriptor.stringComparator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;

  v6 = v4 + 24;
  v7 = type metadata accessor for SortDescriptor.AllowedComparison(0, *(_QWORD *)(a1 + 16), a2, a3);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(&v16, v6, v7);
  if (v19 == 3)
  {
    v10 = v16;
    if (v18)
      v15 = 256;
    else
      v15 = 0;
    v14 = v15 | v17;
  }
  else if (v19 > 1u)
  {
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(&v16, v7);
    v10 = 0;
    v14 = 2;
  }
  else
  {
    v10 = v16;
    v11 = v17;
    v12 = v18;
    result = swift_release();
    if (v12)
      v13 = 256;
    else
      v13 = 0;
    v14 = v13 | v11;
  }
  if (v14 != 2)
    v14 = v14;
  *(_QWORD *)a4 = v10;
  *(_WORD *)(a4 + 8) = v14;
  return result;
}

uint64_t SortDescriptor.order.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SortDescriptor.order.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result & 1;
  return result;
}

uint64_t (*SortDescriptor.order.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t SortDescriptor.init<A>(_:order:)@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v6 = a2 & 1;
  v7 = *a1;
  *(_BYTE *)a5 = a2 & 1;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v8 = type metadata accessor for ComparableComparator(0, *(_QWORD *)(v7 + *MEMORY[0x1E0DEE2A8] + 8), a3, a4);
  v15 = MEMORY[0x186DA9D64](&protocol conformance descriptor for ComparableComparator<A>, v8);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  v10 = MEMORY[0x186DA9D64](&protocol conformance descriptor for ComparableComparator<A>, v8);
  *(_QWORD *)(v9 + 24) = v10;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #2 in AnySortComparator.init<A>(_:);
  *(_QWORD *)(v12 + 24) = v11;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v8;
  *(_QWORD *)(v13 + 24) = v10;
  *(_BYTE *)(a5 + 24) = v6;
  *(_QWORD *)(a5 + 48) = v8;
  *(_QWORD *)(a5 + 56) = v15;
  *(_QWORD *)(a5 + 64) = partial apply for closure #1 in AnySortComparator.init<A>(_:);
  *(_QWORD *)(a5 + 72) = v9;
  *(_QWORD *)(a5 + 80) = _sSH_s8Sendablep10Foundation9SortOrderOs11AnyHashableVIeghlyr_SH_sAApADSH_sAApIeghlyr_TRTA_0;
  *(_QWORD *)(a5 + 88) = v12;
  *(_QWORD *)(a5 + 96) = partial apply for closure #3 in AnySortComparator.init<A>(_:);
  *(_QWORD *)(a5 + 104) = v13;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  result = swift_release();
  *(_QWORD *)(a5 + 112) = v16;
  *(_BYTE *)(a5 + 120) = 2;
  return result;
}

{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v6 = a2 & 1;
  v7 = *a1;
  *(_BYTE *)a5 = a2 & 1;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v8 = type metadata accessor for ComparableComparator(255, *(_QWORD *)(*(_QWORD *)(v7 + *MEMORY[0x1E0DEE2A8] + 8) + 16), a3, a4);
  v9 = MEMORY[0x186DA9D64](&protocol conformance descriptor for ComparableComparator<A>, v8);
  v11 = type metadata accessor for OptionalComparator(0, v8, v9, v10);
  v12 = MEMORY[0x186DA9D64](&protocol conformance descriptor for OptionalComparator<A>, v11);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  v14 = MEMORY[0x186DA9D64](&protocol conformance descriptor for OptionalComparator<A>, v11);
  *(_QWORD *)(v13 + 24) = v14;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v11;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)(v16 + 24) = v15;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v11;
  *(_QWORD *)(v17 + 24) = v14;
  *(_BYTE *)(a5 + 24) = v6;
  *(_QWORD *)(a5 + 48) = v11;
  *(_QWORD *)(a5 + 56) = v12;
  *(_QWORD *)(a5 + 64) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)(a5 + 72) = v13;
  *(_QWORD *)(a5 + 80) = thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)partial apply;
  *(_QWORD *)(a5 + 88) = v16;
  *(_QWORD *)(a5 + 96) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(_QWORD *)(a5 + 104) = v17;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  result = swift_release();
  *(_QWORD *)(a5 + 112) = v19;
  *(_BYTE *)(a5 + 120) = 2;
  return result;
}

uint64_t sub_181F0AD2C()
{
  return swift_deallocObject();
}

uint64_t sub_181F0AD3C()
{
  return swift_deallocObject();
}

uint64_t sub_181F0AD4C()
{
  return swift_deallocObject();
}

uint64_t sub_181F0AF1C()
{
  return swift_deallocObject();
}

uint64_t sub_181F0AF2C()
{
  return swift_deallocObject();
}

uint64_t sub_181F0AF3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_181F0AF60()
{
  return swift_deallocObject();
}

uint64_t SortDescriptor.init(_:comparator:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)a1 + 9);
  *(_BYTE *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  result = swift_release();
  *(_QWORD *)(a2 + 24) = v3;
  *(_BYTE *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 33) = v5;
  *(_QWORD *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 120) = 0;
  return result;
}

{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)a1 + 9);
  *(_BYTE *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  result = swift_release();
  *(_QWORD *)(a2 + 24) = v3;
  *(_BYTE *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 33) = v5;
  *(_QWORD *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 120) = 1;
  return result;
}

uint64_t SortDescriptor.init(_:comparator:order:)@<X0>(uint64_t *a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;

  v4 = a2 & 1;
  v5 = *a1;
  v6 = *((_BYTE *)a1 + 8);
  *(_BYTE *)a3 = a2 & 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  result = swift_release();
  *(_QWORD *)(a3 + 24) = v5;
  *(_BYTE *)(a3 + 32) = v6;
  *(_BYTE *)(a3 + 33) = v4;
  *(_QWORD *)(a3 + 40) = v8;
  *(_BYTE *)(a3 + 120) = 0;
  return result;
}

{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;

  v4 = a2 & 1;
  v5 = *a1;
  v6 = *((_BYTE *)a1 + 8);
  *(_BYTE *)a3 = a2 & 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  result = swift_release();
  *(_QWORD *)(a3 + 24) = v5;
  *(_BYTE *)(a3 + 32) = v6;
  *(_BYTE *)(a3 + 33) = v4;
  *(_QWORD *)(a3 + 40) = v8;
  *(_BYTE *)(a3 + 120) = 1;
  return result;
}

uint64_t SortDescriptor.init<A>(_:order:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  Swift::String v9;
  Swift::String v10;

  v4 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    result = swift_release();
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)a2 = a1 & 1;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_BYTE *)(a2 + 120) = 4;
  }
  else
  {
    _StringGuts.grow(_:)(111);
    swift_getMetatypeMetadata();
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._object = (void *)0x800000018230F890;
    v10._countAndFlagsBits = 0xD00000000000006DLL;
    String.append(_:)(v10);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t SortDescriptor.init<A>(_:comparator:)(uint64_t a1, uint64_t *a2)
{
  return SortDescriptor.init<A>(_:comparator:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t *))SortDescriptor.init<A>(_:comparator:order:));
}

{
  return SortDescriptor.init<A>(_:comparator:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t *))SortDescriptor.init<A>(_:comparator:order:));
}

uint64_t SortDescriptor.init<A>(_:comparator:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  char v4;
  char v5;
  uint64_t v7;
  char v8;
  char v9;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *((_BYTE *)a2 + 9);
  v7 = *a2;
  v8 = v4;
  v9 = v5;
  return a3(a1, &v7);
}

uint64_t SortDescriptor.init<A>(_:comparator:order:)@<X0>(uint64_t *a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  return SortDescriptor.init<A>(_:comparator:order:)(a1, a2, a3);
}

{
  return SortDescriptor.init<A>(_:comparator:order:)(a1, a2, a3);
}

{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  char v13;
  Swift::String v14;
  Swift::String v15;

  v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 8);
  v7 = *((unsigned __int8 *)a1 + 9);
  swift_retain();
  v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  v10 = v9;
  swift_release();
  if (v10)
  {
    result = swift_release();
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v10;
    *(_BYTE *)a3 = a2 & 1;
    if (v5)
      v12 = 1;
    else
      v12 = v6;
    if (((v12 | v7) & 1) != 0)
    {
      *(_BYTE *)(a3 + 32) = v6;
      *(_BYTE *)(a3 + 33) = 0;
      v13 = 3;
    }
    else
    {
      v5 = 0;
      *(_QWORD *)(a3 + 112) = 0;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      v13 = 4;
    }
    *(_QWORD *)(a3 + 24) = v5;
    *(_BYTE *)(a3 + 120) = v13;
  }
  else
  {
    _StringGuts.grow(_:)(111);
    swift_getMetatypeMetadata();
    v14._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._object = (void *)0x800000018230F890;
    v15._countAndFlagsBits = 0xD00000000000006DLL;
    String.append(_:)(v15);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

double SortDescriptor.init<A>(_:comparing:)@<D0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _BYTE *, uint64_t);
  unsigned __int8 v16;
  __int128 v17;
  __int128 v18;
  double result;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[104];
  _BYTE v25[104];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];

  v6 = objc_msgSend(a1, "key");
  if (!v6)
    goto LABEL_6;
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v10 = v9;

  v11 = (const char *)objc_msgSend(a1, sel_selector);
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_6:

    goto LABEL_8;
  }
  SortDescriptor.AllowedComparison.init(fromSelector:)(v11, a2, (uint64_t)v24);
  if (v24[96] != 255)
  {
    v14 = type metadata accessor for SortDescriptor.AllowedComparison(0, a2, v12, v13);
    v15 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
    v15(v25, v24, v14);
    *((_QWORD *)&v26 + 1) = v8;
    *(_QWORD *)&v27 = v10;
    v16 = objc_msgSend(a1, sel_ascending);

    LOBYTE(v26) = v16 ^ 1;
    v15((_BYTE *)&v27 + 8, v25, v14);
    v17 = v31;
    *(_OWORD *)(a3 + 64) = v30;
    *(_OWORD *)(a3 + 80) = v17;
    *(_OWORD *)(a3 + 96) = v32[0];
    *(_OWORD *)(a3 + 105) = *(_OWORD *)((char *)v32 + 9);
    v18 = v27;
    *(_OWORD *)a3 = v26;
    *(_OWORD *)(a3 + 16) = v18;
    result = *(double *)&v28;
    v20 = v29;
    *(_OWORD *)(a3 + 32) = v28;
    *(_OWORD *)(a3 + 48) = v20;
    return result;
  }
  swift_bridgeObjectRelease();

  type metadata accessor for SortDescriptor.AllowedComparison(255, a2, v21, v22);
  v23 = type metadata accessor for Optional();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v24, v23);
LABEL_8:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 1;
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_BYTE *)(a3 + 120) = 0;
  return result;
}

void SortDescriptor.compare(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[136];

  v5 = type metadata accessor for SortDescriptor.AllowedComparison(0, *(_QWORD *)(a3 + 16), a3, a4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v4 + 24, v5);
  __asm { BR              X10 }
}

id sub_181F0B7F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  id v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  void (*v11)(_BYTE *, uint64_t);
  uint64_t v12;
  id v13;
  _BYTE v15[16];
  uint64_t v16;

  v4 = *(_QWORD *)(v1 - 8);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v5(v3 - 216, v0, v1);
  v5((uint64_t)v15, v3 - 216, v1);
  if (!v16)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181F0CAE0);
  }
  v6 = objc_allocWithZone((Class)NSSortDescriptor);
  v7 = String._bridgeToObjectiveCImpl()();
  v8 = v15[0];
  SortDescriptor.AllowedComparison.selector.getter(v2);
  v10 = objc_msgSend(v6, sel_initWithKey_ascending_selector_, v7, (v8 & 1) == 0, v9);
  swift_unknownObjectRelease();
  v11 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v11(v15, v1);
  v11((_BYTE *)(v3 - 216), v1);
  v12 = _bridgeAnythingToObjectiveC<A>(_:)();
  v13 = objc_msgSend(v10, sel_compareObject_toObject_, v12, _bridgeAnythingToObjectiveC<A>(_:)());

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v13;
}

void SortDescriptor.hash(into:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[104];

  if (*((_QWORD *)v2 + 2))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*v2);
  v6 = type metadata accessor for SortDescriptor.AllowedComparison(0, *(_QWORD *)(a2 + 16), v4, v5);
  (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v7, v2 + 24, v6);
  __asm { BR              X10 }
}

uint64_t sub_181F0CBB8()
{
  Swift::UInt v1;
  Swift::UInt8 v2;
  unsigned __int8 v3;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  type metadata accessor for KeyPath();
  dispatch thunk of Hashable.hash(into:)();
  return swift_release();
}

void static SortDescriptor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  if (*a1 != *a2)
    return;
  v6 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a2 + 2);
  if (!v6)
  {
    if (v7)
      return;
LABEL_12:
    static SortDescriptor.AllowedComparison.== infix(_:_:)((uint64_t)(a1 + 24), (uint64_t)(a2 + 24), a3, v7);
    return;
  }
  if (v7)
  {
    v8 = *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && v6 == v7;
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_12;
  }
}

uint64_t SortDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726564726FLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6972745379656BLL && a2 == 0xE900000000000067
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73697261706D6F63 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t SortDescriptor.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x726564726FLL;
  if (a1 == 1)
    return 0x6E6972745379656BLL;
  return 0x73697261706D6F63;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SortDescriptor<A>.CodingKeys()
{
  char *v0;

  return SortDescriptor.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SortDescriptor<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SortDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SortDescriptor<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SortDescriptor<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SortDescriptor<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t SortDescriptor.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[2];
  char v19;
  char v20;
  char v21;
  char v22;

  v5 = v4;
  v18[0] = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for SortDescriptor.CodingKeys(255, v18[0], a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.CodingKeys, v7);
  v8 = type metadata accessor for KeyedEncodingContainer();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v18 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v22 = *v5;
  v21 = 0;
  lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  v12 = v18[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    v13 = v18[0];
    v20 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v19 = 2;
    v16 = type metadata accessor for SortDescriptor.AllowedComparison(0, v13, v14, v15);
    MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison, v16);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int SortDescriptor.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  SortDescriptor.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t SortDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char v26[104];
  char v27[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v24 = a5;
  v8 = type metadata accessor for SortDescriptor.CodingKeys(255, a2, a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.CodingKeys, v8);
  v25 = type metadata accessor for KeyedDecodingContainer();
  v9 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v11 = (char *)&v24 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v5)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12 = v9;
  v13 = v24;
  v31 = 0;
  lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  v14 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v27[0] = v26[0];
  v26[0] = 1;
  v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v29 = v15;
  v18 = type metadata accessor for SortDescriptor.AllowedComparison(0, a2, v16, v17);
  v31 = 2;
  MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison, v18);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v14);
  (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(&v30, v26, v18);
  v21 = type metadata accessor for SortDescriptor(0, a2, v19, v20);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(v13, v27, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v27, v21);
}

uint64_t protocol witness for SortComparator.order.setter in conformance SortDescriptor<A>(char a1)
{
  return SortDescriptor.order.setter(a1 & 1);
}

void (*protocol witness for SortComparator.order.modify in conformance SortDescriptor<A>(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SortDescriptor.order.modify();
  return protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SortDescriptor<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return SortDescriptor.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SortDescriptor<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SortDescriptor.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SortDescriptor<A>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  SortDescriptor.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SortDescriptor<A>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  static SortDescriptor.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t NSSortDescriptor.init<A>(_:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  id v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void (*v17)(_BYTE *, uint64_t);
  uint64_t result;
  _BYTE v19[8];
  uint64_t v20;
  _BYTE v21[128];

  v6 = type metadata accessor for SortDescriptor(0, a2, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16);
  v8(v21, a1, v6);
  v8(v19, v21, v6);
  if (v20)
  {
    v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    v10 = String._bridgeToObjectiveCImpl()();
    v11 = v19[0];
    v14 = type metadata accessor for SortDescriptor.AllowedComparison(0, a2, v12, v13);
    SortDescriptor.AllowedComparison.selector.getter(v14);
    v16 = objc_msgSend(v9, sel_initWithKey_ascending_selector_, v10, (v11 & 1) == 0, v15);
    swift_unknownObjectRelease();
    v17 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
    v17(v19, v6);
    v17(v21, v6);
    v17(a1, v6);
    return (uint64_t)v16;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t NSSortDescriptor.init<A>(_:)(char *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  if (*((_QWORD *)a1 + 2))
  {
    v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    v5 = String._bridgeToObjectiveCImpl()();
    v6 = *a1;
    v9 = type metadata accessor for SortDescriptor.AllowedComparison(0, a2, v7, v8);
    SortDescriptor.AllowedComparison.selector.getter(v9);
    v11 = objc_msgSend(v4, sel_initWithKey_ascending_selector_, v5, (v6 & 1) == 0, v10);
    swift_unknownObjectRelease();
    v14 = type metadata accessor for SortDescriptor(0, a2, v12, v13);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
    return (uint64_t)v11;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for SortDescriptor.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SortDescriptor.CodingKeys);
}

uint64_t type metadata accessor for SortDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SortDescriptor);
}

uint64_t instantiation function for generic protocol witness table for SortDescriptor<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for SortDescriptor<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in SortDescriptor<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t destroy for SortDescriptor(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;

  result = swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(a1 + 120);
  if (v3 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    swift_release();
    swift_release();
    swift_release();
  }
  else if (v3 > 1)
  {
    return result;
  }
  return swift_release();
}

uint64_t initializeWithCopy for SortDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = (_QWORD *)(a1 + 24);
  v6 = a2 + 24;
  v7 = *(unsigned __int8 *)(a2 + 120);
  swift_bridgeObjectRetain();
  if (v7 == 2)
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 24, v6);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    v10 = *(_QWORD *)(a2 + 104);
    v9 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = v9;
    *(_BYTE *)(a1 + 120) = 2;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else if (v7 == 1)
  {
    *v5 = *(_QWORD *)v6;
    *(_WORD *)(a1 + 32) = *(_WORD *)(v6 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 120) = 1;
    swift_retain();
  }
  else if (v7)
  {
    v11 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a1 + 104) = v11;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(v6 + 96);
    v12 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v5 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 40) = v12;
    v13 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a1 + 72) = v13;
  }
  else
  {
    *v5 = *(_QWORD *)v6;
    *(_WORD *)(a1 + 32) = *(_WORD *)(v6 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 120) = 0;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for SortDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = (_QWORD *)(a1 + 24);
    v9 = (uint64_t *)(a2 + 24);
    v10 = type metadata accessor for SortDescriptor.AllowedComparison(0, *(_QWORD *)(a3 + 16), v6, v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1 + 24, v10);
    v11 = *(unsigned __int8 *)(a2 + 120);
    if (v11 == 2)
    {
      v13 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 24, a2 + 24);
      v14 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v14;
      v15 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v15;
      v16 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v16;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = 2;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else if (v11 == 1)
    {
      v17 = *v9;
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
      *v8 = v17;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 120) = 1;
      swift_retain();
    }
    else if (*(_BYTE *)(a2 + 120))
    {
      v18 = *(_OWORD *)v9;
      v19 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = v19;
      *(_OWORD *)v8 = v18;
      v20 = *(_OWORD *)(a2 + 72);
      v21 = *(_OWORD *)(a2 + 88);
      v22 = *(_OWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_OWORD *)(a1 + 88) = v21;
      *(_OWORD *)(a1 + 104) = v22;
      *(_OWORD *)(a1 + 72) = v20;
    }
    else
    {
      v12 = *v9;
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
      *v8 = v12;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 120) = 0;
      swift_retain();
    }
  }
  return a1;
}

__n128 __swift_memcpy121_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SortDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v9 = type metadata accessor for SortDescriptor.AllowedComparison(0, *(_QWORD *)(a3 + 16), v7, v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1 + 24, v9);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SortDescriptor(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 121))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SortDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 121) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SortDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181F0DDD4 + 4 * byte_182171963[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181F0DE08 + 4 * byte_18217195E[v4]))();
}

uint64_t sub_181F0DE08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181F0DE10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181F0DE18);
  return result;
}

uint64_t sub_181F0DE24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181F0DE2CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181F0DE30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181F0DE38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t destroy for SortDescriptor.AllowedComparison(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 96);
  if (v1 >= 4)
    v1 = *(_DWORD *)result + 4;
  if (v1 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(result);
    swift_release();
    swift_release();
    swift_release();
  }
  else if (v1 > 1)
  {
    return result;
  }
  return swift_release();
}

uint64_t initializeWithCopy for SortDescriptor.AllowedComparison(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(unsigned __int8 *)(a2 + 96);
  if (v4 >= 4)
    v4 = *(_DWORD *)a2 + 4;
  switch(v4)
  {
    case 0u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 96) = 0;
      swift_retain();
      break;
    case 1u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 96) = 1;
      swift_retain();
      break;
    case 2u:
      v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      v9 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v9;
      v11 = *(_QWORD *)(a2 + 80);
      v10 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v11;
      *(_QWORD *)(a1 + 88) = v10;
      *(_BYTE *)(a1 + 96) = 2;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      break;
    case 3u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(_BYTE *)(a1 + 96) = 3;
      break;
    default:
      v5 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v5;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v7;
      break;
  }
  return a1;
}

uint64_t assignWithCopy for SortDescriptor.AllowedComparison(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((uint64_t *)a1 == a2)
    return a1;
  v4 = *(unsigned __int8 *)(a1 + 96);
  if (v4 >= 4)
    v4 = *(_DWORD *)a1 + 4;
  if (v4 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_release();
    swift_release();
LABEL_8:
    swift_release();
    goto LABEL_9;
  }
  if (v4 <= 1)
    goto LABEL_8;
LABEL_9:
  v5 = *((unsigned __int8 *)a2 + 96);
  if (v5 >= 4)
    v5 = *(_DWORD *)a2 + 4;
  switch(v5)
  {
    case 0u:
      v6 = *a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_BYTE *)(a1 + 96) = 0;
      swift_retain();
      break;
    case 1u:
      v12 = *a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_BYTE *)(a1 + 96) = 1;
      swift_retain();
      break;
    case 2u:
      v13 = a2[3];
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v13 - 8))(a1, a2);
      v14 = a2[6];
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_QWORD *)(a1 + 48) = v14;
      v15 = a2[8];
      *(_QWORD *)(a1 + 56) = a2[7];
      *(_QWORD *)(a1 + 64) = v15;
      v16 = a2[10];
      *(_QWORD *)(a1 + 72) = a2[9];
      *(_QWORD *)(a1 + 80) = v16;
      *(_QWORD *)(a1 + 88) = a2[11];
      *(_BYTE *)(a1 + 96) = 2;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      break;
    case 3u:
      v17 = *a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
      *(_QWORD *)a1 = v17;
      *(_BYTE *)(a1 + 96) = 3;
      break;
    default:
      v7 = *(_OWORD *)a2;
      v8 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v7;
      v9 = *((_OWORD *)a2 + 3);
      v10 = *((_OWORD *)a2 + 4);
      v11 = *((_OWORD *)a2 + 5);
      *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
      *(_OWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 48) = v9;
      break;
  }
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SortDescriptor.AllowedComparison(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a1 == a2)
    return a1;
  v4 = *(unsigned __int8 *)(a1 + 96);
  if (v4 >= 4)
    v4 = *(_DWORD *)a1 + 4;
  if (v4 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_release();
    swift_release();
LABEL_8:
    swift_release();
    goto LABEL_9;
  }
  if (v4 <= 1)
    goto LABEL_8;
LABEL_9:
  v5 = *(unsigned __int8 *)(a2 + 96);
  if (v5 >= 4)
    v5 = *(_DWORD *)a2 + 4;
  switch(v5)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 96) = 0;
      return a1;
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v9 = 1;
      goto LABEL_17;
    case 2u:
      v10 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v10;
      v11 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v11;
      v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      v9 = 2;
      goto LABEL_17;
    case 3u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      v9 = 3;
LABEL_17:
      *(_BYTE *)(a1 + 96) = v9;
      break;
    default:
      v6 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v6;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
      break;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SortDescriptor.AllowedComparison(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 >= 5)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SortDescriptor.AllowedComparison(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_BYTE *)(result + 96) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for SortDescriptor.AllowedComparison(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 96);
  if (result >= 4)
    return (*(_DWORD *)a1 + 4);
  return result;
}

uint64_t destructiveInjectEnumTag for SortDescriptor.AllowedComparison(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 > 3)
  {
    v2 = a2 - 4;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    LOBYTE(a2) = 4;
    *(_DWORD *)result = v2;
  }
  *(_BYTE *)(result + 96) = a2;
  return result;
}

void base witness table accessor for Equatable in SortDescriptor<A>.AllowedComparison()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in SortDescriptor<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in SortDescriptor<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in SortDescriptor<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t type metadata accessor for SortDescriptor.AllowedComparison.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SortDescriptor.AllowedComparison.CodingKeys);
}

uint64_t sub_181F0E484()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 112);
  if (v1 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_release();
    swift_release();
    swift_release();
LABEL_5:
    swift_release();
    return swift_deallocObject();
  }
  if (v1 <= 1)
    goto LABEL_5;
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for SortDescriptor.AllowedComparison.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181F0E5C0 + 4 * byte_182171979[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181F0E5F4 + 4 * byte_182171974[v4]))();
}

uint64_t sub_181F0E5F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181F0E5FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181F0E604);
  return result;
}

uint64_t sub_181F0E610(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181F0E618);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181F0E61C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181F0E624(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  char *v4;
  char v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v9;
    v4 = (char *)(a1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_BYTE *)(result + v8 + 32) = 0x60504030A0201uLL >> (8 * v5);
      --v2;
    }
    while (v2);
  }
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ComponentsFormatStyle.Field.Option@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Date.ComponentsFormatStyle.Field.Option.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle.Field.Option()
{
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle.Field.Option()
{
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Date.ComponentsFormatStyle.Field.Option(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Date.ComponentsFormatStyle.Field.Option.allCases.getter;
}

void static Date.ComponentsFormatStyle.Field.minute.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static Date.ComponentsFormatStyle.Field.second.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ComponentsFormatStyle.Field.CodingKeys()
{
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ComponentsFormatStyle.Field.CodingKeys()
{
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.ComponentsFormatStyle.Field.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ComponentsFormatStyle.Field.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Field.CodingKeys, &unk_1E0F2E930);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Field.CodingKeys, &unk_1E0F2E930);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Field.CodingKeys, &unk_1E0F2E930);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Field.CodingKeys, &unk_1E0F2E930);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Field.Option, &type metadata for Date.ComponentsFormatStyle.Field.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Field.Option, &type metadata for Date.ComponentsFormatStyle.Field.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Field.Option, &type metadata for Date.ComponentsFormatStyle.Field.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Field.Option, &type metadata for Date.ComponentsFormatStyle.Field.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option);
  }
  return result;
}

uint64_t Date.ComponentsFormatStyle.Field.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ComponentsFormatStyle.Field.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle.Field@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return Date.ComponentsFormatStyle.Field.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle.Field(_QWORD *a1)
{
  return Date.ComponentsFormatStyle.Field.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle.Style.Option()
{
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle.Style.Option()
{
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option();
  return RawRepresentable<>.encode(to:)();
}

void static Date.ComponentsFormatStyle.Style.wide.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Date.ComponentsFormatStyle.Style.abbreviated.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static Date.ComponentsFormatStyle.Style.narrow.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Date.ComponentsFormatStyle.Style.spellOut.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void Date.ComponentsFormatStyle.Style.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Date.ComponentsFormatStyle.Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ComponentsFormatStyle.Style.CodingKeys()
{
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ComponentsFormatStyle.Style.CodingKeys()
{
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.ComponentsFormatStyle.Style.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ComponentsFormatStyle.Style.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Style.CodingKeys, &unk_1E0F2E700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Style.CodingKeys, &unk_1E0F2E700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Style.CodingKeys, &unk_1E0F2E700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Style.CodingKeys, &unk_1E0F2E700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Style.Option, &unk_1E0F2E790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Style.Option, &unk_1E0F2E790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Style.Option, &unk_1E0F2E790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Style.Option, &unk_1E0F2E790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option);
  }
  return result;
}

uint64_t Date.ComponentsFormatStyle.Style.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ComponentsFormatStyle.Style.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle.Style@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return Date.ComponentsFormatStyle.Style.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle.Style(_QWORD *a1)
{
  return Date.ComponentsFormatStyle.Style.encode(to:)(a1);
}

void Date.ComponentsFormatStyle.style.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Date.ComponentsFormatStyle.style.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.style.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ComponentsFormatStyle.fields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Date.ComponentsFormatStyle.fields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.fields.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ComponentsFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

__n128 Date.ComponentsFormatStyle.calendar.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.calendar.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ComponentsFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

__n128 Date.ComponentsFormatStyle.locale.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ComponentsFormatStyle.isPositive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t Date.ComponentsFormatStyle.isPositive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.isPositive.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 Date.ComponentsFormatStyle.init(style:locale:calendar:fields:)@<Q0>(_BYTE *a1@<X0>, __int128 *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __n128 result;
  __int128 v6;

  *(_BYTE *)a5 = *a1;
  *(_QWORD *)(a5 + 8) = a4;
  result = *a3;
  v6 = *a2;
  *(__n128 *)(a5 + 16) = *a3;
  *(_OWORD *)(a5 + 32) = v6;
  *(_BYTE *)(a5 + 48) = 1;
  return result;
}

uint64_t Date.ComponentsFormatStyle.format(_:)(double *a1)
{
  uint64_t *v1;
  double v2;
  double v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  os_unfair_lock_s *v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t ObjectType;
  void *v19;
  uint64_t v20;
  int64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  void *v96;
  unint64_t v97;
  __int128 v98;
  id v99;
  int64_t v100;
  unint64_t v101;
  int64_t v102;
  int64_t v103;
  double v104;
  int64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  int v110;
  int v111;
  char v112;
  char v113;
  char v114;
  unint64_t v115;
  unint64_t v116;
  int64_t v117;
  uint64_t v118;
  char v119;
  id v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  unsigned __int8 *v125;
  unsigned int v126;
  Class isa;
  id v128;
  uint64_t result;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  int64_t v137;
  int __src;
  char *__srca;
  uint64_t v140;
  os_unfair_lock_s *lock;
  uint64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  __int128 v148;
  char *v149;
  uint64_t v150;
  double v151[36];
  double __dst[36];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156[37];
  unsigned __int8 v157;
  _BYTE v158[7];
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;

  v2 = *a1;
  v3 = a1[1];
  v142 = *(char *)v1;
  LODWORD(v4) = *(unsigned __int8 *)v1;
  v6 = v1[1];
  v5 = v1[2];
  v7 = v1[4];
  v147 = v1[3];
  v8 = v1[5];
  LODWORD(v1) = *((unsigned __int8 *)v1 + 48);
  if (one-time initialization token for cache != -1)
    goto LABEL_88;
  while (1)
  {
    v9 = unk_1EDC47C80;
    v144 = static Date.ComponentsFormatStyle.cache;
    v10 = (uint64_t *)(unk_1EDC47C80 + 16);
    v11 = (os_unfair_lock_s *)(unk_1EDC47C80 + 24);
    swift_retain_n();
    os_unfair_lock_lock(v11);
    LOBYTE(v156[0]) = (_BYTE)v4;
    v156[1] = v6;
    v156[2] = v5;
    v156[3] = v147;
    v156[4] = v7;
    v156[5] = v8;
    v146 = (int)v1;
    LOBYTE(v156[6]) = (_BYTE)v1;
    v12 = (int)v4;
    v13 = (char *)specialized closure #1 in FormatterCache.formatter(for:creator:)(v10, (unsigned __int8 *)v156);
    os_unfair_lock_unlock(v11);
    swift_release();
    v150 = v6;
    if (v13)
    {
      swift_release();
      v14 = v13;
      v15 = v5;
      v16 = v146;
      v17 = v147;
      goto LABEL_125;
    }
    lock = v11;
    v136 = v10;
    __src = v12;
    v4 = (char *)objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), sel_init);
    *(_QWORD *)&__dst[0] = v5;
    *(_QWORD *)&__dst[1] = v147;
    v156[0] = v7;
    v156[1] = v8;
    v145 = v5;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    Calendar.locale.setter(v156);
    ObjectType = swift_getObjectType();
    v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v147 + 216))(ObjectType, v147);
    objc_msgSend(v4, sel_setCalendar_, v19);

    objc_msgSend(v4, sel_setUnitsStyle_, qword_182172670[v142]);
    v140 = v9;
    if (!v6)
      break;
    v20 = v6;
    v6 = *(_QWORD *)(v6 + 16);
    v1 = (uint64_t *)MEMORY[0x1E0DEE9D8];
    if (!v6)
    {
      v30 = v144;
      v31 = v147;
      v46 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v46)
        goto LABEL_33;
LABEL_27:
      v6 = 0;
      v47 = v1 + 4;
      do
      {
        v49 = *v47++;
        v48 = v49;
        if ((v49 & ~v6) == 0)
          v48 = 0;
        v6 |= v48;
        --v46;
      }
      while (v46);
LABEL_34:
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
    v130 = v5;
    v131 = v4;
    v133 = v8;
    v142 = v7;
    v156[0] = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v1 = (uint64_t *)v156[0];
    v21 = specialized Set.startIndex.getter(v20);
    LODWORD(v4) = v22;
    v5 = v23 & 1;
    v7 = v20 + 56;
    v24 = v20;
    while ((v21 & 0x8000000000000000) == 0 && v21 < 1 << *(_BYTE *)(v24 + 32))
    {
      if (((*(_QWORD *)(v7 + (((unint64_t)v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
        goto LABEL_80;
      if (*(_DWORD *)(v24 + 36) != (_DWORD)v4)
        goto LABEL_81;
      v8 = qword_1821726A0[*(char *)(*(_QWORD *)(v24 + 48) + v21)];
      v156[0] = (uint64_t)v1;
      v26 = v1[2];
      v25 = v1[3];
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v24 = v150;
        v1 = (uint64_t *)v156[0];
      }
      v1[2] = v26 + 1;
      v1[v26 + 4] = v8;
      v27 = specialized _NativeSet.index(after:)(v21, (int)v4, v5 & 1, v24);
      v24 = v150;
      v21 = v27;
      LODWORD(v4) = v28;
      v5 = v29 & 1;
      if (!--v6)
      {
        outlined consume of Set<Calendar.Component>.Index._Variant(v27, v28, v29 & 1);
        v5 = v145;
        v31 = v147;
        v7 = v142;
        v30 = v144;
        v4 = v131;
        v8 = v133;
        v46 = v1[2];
        if (v46)
          goto LABEL_27;
LABEL_33:
        v6 = 0;
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    swift_once();
  }
  v30 = v144;
  v31 = v147;
  v32 = lock;
  if (__src != 5)
    goto LABEL_68;
  v130 = v5;
  v132 = v4;
  v134 = v8;
  v142 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v33 = static _SetStorage.allocate(capacity:)();
  v4 = 0;
  v34 = v33 + 56;
  v5 = (uint64_t)outlined read-only object #1 of Date.ComponentsFormatStyle.format(_:);
  v7 = -1;
  do
  {
    v6 = outlined read-only object #1 of Date.ComponentsFormatStyle.format(_:)[(_QWORD)v4 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    v1 = v156;
    v35 = Hasher._finalize()();
    v36 = -1 << *(_BYTE *)(v33 + 32);
    v37 = v35 & ~v36;
    v38 = v37 >> 6;
    v39 = *(_QWORD *)(v34 + 8 * (v37 >> 6));
    v40 = 1 << v37;
    v41 = *(_QWORD *)(v33 + 48);
    if (((1 << v37) & v39) != 0)
    {
      if (*(unsigned __int8 *)(v41 + v37) == (_DWORD)v6)
        goto LABEL_17;
      v42 = ~v36;
      while (1)
      {
        v37 = (v37 + 1) & v42;
        v38 = v37 >> 6;
        v39 = *(_QWORD *)(v34 + 8 * (v37 >> 6));
        v40 = 1 << v37;
        if ((v39 & (1 << v37)) == 0)
          break;
        if (*(unsigned __int8 *)(v41 + v37) == (_DWORD)v6)
          goto LABEL_17;
      }
    }
    *(_QWORD *)(v34 + 8 * v38) = v40 | v39;
    *(_BYTE *)(v41 + v37) = v6;
    v43 = *(_QWORD *)(v33 + 16);
    v44 = __OFADD__(v43, 1);
    v45 = v43 + 1;
    if (v44)
      goto LABEL_85;
    *(_QWORD *)(v33 + 16) = v45;
LABEL_17:
    ++v4;
  }
  while (v4 != (char *)3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  v1 = (uint64_t *)static _DictionaryStorage.allocate(capacity:)();
  v50 = 0;
  v5 = (uint64_t)(v1 + 8);
  v7 = (uint64_t)outlined read-only object #0 of Date.ComponentsFormatStyle.format(_:);
  do
  {
    LODWORD(v4) = outlined read-only object #0 of Date.ComponentsFormatStyle.format(_:)[v50 + 32];
    if ((_DWORD)v4 == 18)
      break;
    v8 = *(_QWORD *)&outlined read-only object #0 of Date.ComponentsFormatStyle.format(_:)[v50 + 40];
    v51 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of Date.ComponentsFormatStyle.format(_:)[v50 + 32]);
    if ((v52 & 1) != 0)
      goto LABEL_86;
    *(_QWORD *)(v5 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v51;
    *(_BYTE *)(v1[6] + v51) = (_BYTE)v4;
    *(_QWORD *)(v1[7] + 8 * v51) = v8;
    v53 = v1[2];
    v44 = __OFADD__(v53, 1);
    v54 = v53 + 1;
    if (v44)
      goto LABEL_87;
    v1[2] = v54;
    v50 += 16;
  }
  while (v50 != 256);
  v5 = 0;
  v6 = 0;
  v55 = 1 << *(_BYTE *)(v33 + 32);
  v56 = *(_QWORD *)(v33 + 56);
  v57 = -1;
  if (v55 < 64)
    v57 = ~(-1 << v55);
  v58 = v57 & v56;
  v4 = (char *)((unint64_t)(v55 + 63) >> 6);
  if ((v57 & v56) != 0)
  {
LABEL_43:
    v59 = __clz(__rbit64(v58));
    v58 &= v58 - 1;
    v60 = v59 | (v5 << 6);
    if (!v1[2])
      goto LABEL_82;
    goto LABEL_61;
  }
  while (1)
  {
    v61 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_84;
    if (v61 >= (uint64_t)v4)
      goto LABEL_66;
    v62 = *(_QWORD *)(v34 + 8 * v61);
    ++v5;
    if (!v62)
    {
      v5 = v61 + 1;
      if (v61 + 1 >= (uint64_t)v4)
        goto LABEL_66;
      v62 = *(_QWORD *)(v34 + 8 * v5);
      if (!v62)
      {
        v5 = v61 + 2;
        if (v61 + 2 >= (uint64_t)v4)
          goto LABEL_66;
        v62 = *(_QWORD *)(v34 + 8 * v5);
        if (!v62)
        {
          v5 = v61 + 3;
          if (v61 + 3 >= (uint64_t)v4)
            goto LABEL_66;
          v62 = *(_QWORD *)(v34 + 8 * v5);
          if (!v62)
            break;
        }
      }
    }
LABEL_60:
    v58 = (v62 - 1) & v62;
    v60 = __clz(__rbit64(v62)) + (v5 << 6);
    if (!v1[2])
      goto LABEL_82;
LABEL_61:
    v64 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v33 + 48) + v60));
    if ((v65 & 1) == 0)
      goto LABEL_83;
    v66 = *(_QWORD *)(v1[7] + 8 * v64);
    if ((v66 & ~v6) == 0)
      v66 = 0;
    v6 |= v66;
    if (v58)
      goto LABEL_43;
  }
  v63 = v61 + 4;
  if (v63 < (uint64_t)v4)
  {
    v62 = *(_QWORD *)(v34 + 8 * v63);
    if (!v62)
    {
      while (1)
      {
        v5 = v63 + 1;
        if (__OFADD__(v63, 1))
          break;
        if (v5 >= (uint64_t)v4)
          goto LABEL_66;
        v62 = *(_QWORD *)(v34 + 8 * v5);
        ++v63;
        if (v62)
          goto LABEL_60;
      }
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    v5 = v63;
    goto LABEL_60;
  }
LABEL_66:
  swift_release();
  swift_release();
  v31 = v147;
  v7 = v142;
  v30 = v144;
  v4 = v132;
  v8 = v134;
  v5 = v145;
LABEL_67:
  objc_msgSend(v4, sel_setAllowedUnits_, v6, v130);
  v9 = v140;
  v32 = lock;
LABEL_68:
  swift_unknownObjectRelease();
  swift_retain();
  os_unfair_lock_lock(v32);
  if (v30 >= *(_QWORD *)(*(_QWORD *)(v9 + 16) + 16))
  {
    swift_bridgeObjectRetain();
    v68 = v150;
    v67 = v136;
  }
  else
  {
    v67 = v136;
    *v136 = MEMORY[0x1E0DEE9E0];
    v68 = v150;
  }
  v157 = __src;
  *(_DWORD *)v158 = LODWORD(__dst[0]);
  *(_DWORD *)&v158[3] = *(_DWORD *)((char *)__dst + 3);
  v159 = v68;
  v160 = v5;
  v69 = v31;
  v161 = v31;
  v162 = v7;
  v163 = v8;
  v16 = v146;
  v164 = v146;
  v70 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v156[0] = *v67;
  v72 = v156[0];
  *v67 = 0x8000000000000000;
  v74 = specialized __RawDictionaryStorage.find<A>(_:)(&v157);
  v75 = *(_QWORD *)(v72 + 16);
  v76 = (v73 & 1) == 0;
  v77 = v75 + v76;
  if (__OFADD__(v75, v76))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v7) = v73;
    if (*(_QWORD *)(v72 + 24) < v77)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v77, isUniquelyReferenced_nonNull_native);
      v78 = v156[0];
      v79 = specialized __RawDictionaryStorage.find<A>(_:)(&v157);
      if ((v7 & 1) != (v80 & 1))
        goto LABEL_158;
      v74 = v79;
      v17 = v69;
      if ((v7 & 1) == 0)
      {
LABEL_123:
        v14 = v70;
        specialized _NativeDictionary._insert(at:key:value:)(v74, (uint64_t)&v157, (uint64_t)v70, (_QWORD *)v78);
        outlined retain of Date.ComponentsFormatStyle((uint64_t)&v157);
LABEL_124:
        *(_QWORD *)(v140 + 16) = v78;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(lock);
        swift_release_n();
        swift_bridgeObjectRelease();
        v15 = v145;
LABEL_125:
        if (v16)
          v104 = v2;
        else
          v104 = v3;
        if (v16)
          v2 = v3;
        if (v150)
        {
          v154 = v15;
          v155 = v17;
          v105 = *(_QWORD *)(v150 + 16);
          if (v105)
          {
            v149 = v14;
            v156[0] = MEMORY[0x1E0DEE9D8];
            swift_unknownObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v105, 0);
            v106 = v156[0];
            v107 = specialized Set.startIndex.getter(v150);
            v108 = v150;
            v109 = v107;
            v111 = v110;
            v113 = v112 & 1;
            while ((v109 & 0x8000000000000000) == 0 && v109 < 1 << *(_BYTE *)(v108 + 32))
            {
              if (((*(_QWORD *)(v150 + 56 + (((unint64_t)v109 >> 3) & 0xFFFFFFFFFFFFF8)) >> v109) & 1) == 0)
                goto LABEL_151;
              if (*(_DWORD *)(v108 + 36) != v111)
                goto LABEL_152;
              v114 = *(_BYTE *)(*(_QWORD *)(v108 + 48) + v109);
              v156[0] = v106;
              v116 = *(_QWORD *)(v106 + 16);
              v115 = *(_QWORD *)(v106 + 24);
              if (v116 >= v115 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v115 > 1, v116 + 1, 1);
                v108 = v150;
                v106 = v156[0];
              }
              *(_QWORD *)(v106 + 16) = v116 + 1;
              *(_BYTE *)(v106 + v116 + 32) = 0x60504030A0201uLL >> (8 * v114);
              v117 = specialized _NativeSet.index(after:)(v109, v111, v113 & 1, v108);
              v108 = v150;
              v109 = v117;
              v111 = v118;
              v113 = v119 & 1;
              if (!--v105)
              {
                outlined consume of Set<Calendar.Component>.Index._Variant(v117, v118, v119 & 1);
                v14 = v149;
                goto LABEL_144;
              }
            }
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
            goto LABEL_153;
          }
          swift_unknownObjectRetain();
          v106 = MEMORY[0x1E0DEE9D8];
LABEL_144:
          lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
          v153 = Set.init(minimumCapacity:)();
          v124 = *(_QWORD *)(v106 + 16);
          if (v124)
          {
            v125 = (unsigned __int8 *)(v106 + 32);
            do
            {
              v126 = *v125++;
              specialized Set._Variant.insert(_:)(v156, v126);
              --v124;
            }
            while (v124);
          }
          swift_bridgeObjectRelease();
          __dst[0] = v104;
          v151[0] = v2;
          Calendar.dateComponents(_:from:to:)(v153, __dst, v151, v156);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          memcpy(__dst, v156, 0x11AuLL);
          memcpy(v151, v156, 0x11AuLL);
          isa = DateComponents._bridgeToObjectiveC()().super.isa;
          v128 = objc_msgSend(v14, sel_stringFromDateComponents_, isa);

          if (v128)
          {
            v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);

            outlined release of DateComponents((uint64_t)__dst);
            return (uint64_t)v123;
          }
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
        }
        else
        {
          v120 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v104);
          v121 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v2);
          v122 = objc_msgSend(v14, sel_stringFromDate_toDate_, v120, v121);

          if (v122)
          {
            v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);

            return (uint64_t)v123;
          }
        }
        __break(1u);
        goto LABEL_157;
      }
LABEL_78:
      v81 = *(_QWORD *)(v78 + 56);

      v14 = v70;
      *(_QWORD *)(v81 + 8 * v74) = v70;
      goto LABEL_124;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v78 = v72;
      v17 = v69;
      if ((v73 & 1) == 0)
        goto LABEL_123;
      goto LABEL_78;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Date.ComponentsFormatStyle, NSDateComponentsFormatter>);
  v82 = static _DictionaryStorage.copy(original:)();
  v78 = v82;
  if (!*(_QWORD *)(v72 + 16))
  {
LABEL_122:
    swift_bridgeObjectRelease();
    v17 = v69;
    if ((v7 & 1) == 0)
      goto LABEL_123;
    goto LABEL_78;
  }
  v83 = (char *)(v82 + 64);
  __srca = (char *)(v72 + 64);
  v84 = (unint64_t)((1 << *(_BYTE *)(v78 + 32)) + 63) >> 6;
  v135 = v78;
  if (v78 != v72 || v83 >= &__srca[8 * v84])
    memmove(v83, __srca, 8 * v84);
  v143 = 0;
  *(_QWORD *)(v78 + 16) = *(_QWORD *)(v72 + 16);
  v85 = 1 << *(_BYTE *)(v72 + 32);
  v86 = -1;
  if (v85 < 64)
    v86 = ~(-1 << v85);
  v87 = v86 & *(_QWORD *)(v72 + 64);
  v137 = (unint64_t)(v85 + 63) >> 6;
  while (2)
  {
    if (v87)
    {
      v88 = __clz(__rbit64(v87));
      v87 &= v87 - 1;
      v89 = v88 | (v143 << 6);
LABEL_98:
      v90 = v89 << 6;
      v91 = 8 * v89;
      v92 = v90 - v91;
      v93 = *(_QWORD *)(v72 + 48) + v92;
      v94 = *(_QWORD *)(v93 + 8);
      v95 = *(_BYTE *)(v93 + 48);
      v96 = *(void **)(*(_QWORD *)(v72 + 56) + v91);
      v97 = *(_QWORD *)(v78 + 48) + v92;
      v98 = *(_OWORD *)(v93 + 16);
      v148 = *(_OWORD *)(v93 + 32);
      *(_BYTE *)v97 = *(_BYTE *)v93;
      *(_QWORD *)(v97 + 8) = v94;
      *(_OWORD *)(v97 + 16) = v98;
      *(_OWORD *)(v97 + 32) = v148;
      *(_BYTE *)(v97 + 48) = v95;
      *(_QWORD *)(*(_QWORD *)(v78 + 56) + v91) = v96;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      v99 = v96;
      continue;
    }
    break;
  }
  v100 = v143 + 1;
  if (__OFADD__(v143, 1))
    goto LABEL_155;
  if (v100 >= v137)
    goto LABEL_122;
  v101 = *(_QWORD *)&__srca[8 * v100];
  v102 = v143 + 1;
  if (v101)
    goto LABEL_121;
  v102 = v143 + 2;
  if (v143 + 2 >= v137)
    goto LABEL_122;
  v101 = *(_QWORD *)&__srca[8 * v102];
  if (v101)
    goto LABEL_121;
  v102 = v143 + 3;
  if (v143 + 3 >= v137)
    goto LABEL_122;
  v101 = *(_QWORD *)&__srca[8 * v102];
  if (v101)
    goto LABEL_121;
  v102 = v143 + 4;
  if (v143 + 4 >= v137)
    goto LABEL_122;
  v101 = *(_QWORD *)&__srca[8 * v102];
  if (v101)
    goto LABEL_121;
  v102 = v143 + 5;
  if (v143 + 5 >= v137)
    goto LABEL_122;
  v101 = *(_QWORD *)&__srca[8 * v102];
  if (v101)
    goto LABEL_121;
  v102 = v143 + 6;
  if (v143 + 6 >= v137)
    goto LABEL_122;
  v101 = *(_QWORD *)&__srca[8 * v102];
  if (v101)
    goto LABEL_121;
  v102 = v143 + 7;
  if (v143 + 7 >= v137)
    goto LABEL_122;
  v101 = *(_QWORD *)&__srca[8 * v102];
  if (v101)
  {
LABEL_121:
    v87 = (v101 - 1) & v101;
    v143 = v102;
    v89 = __clz(__rbit64(v101)) + (v102 << 6);
    goto LABEL_98;
  }
  v103 = v143 + 8;
  if (v143 + 8 >= v137)
    goto LABEL_122;
  v101 = *(_QWORD *)&__srca[8 * v103];
  if (v101)
  {
    v102 = v143 + 8;
    v78 = v135;
    goto LABEL_121;
  }
  while (1)
  {
    v102 = v103 + 1;
    if (__OFADD__(v103, 1))
      break;
    v78 = v135;
    if (v102 >= v137)
      goto LABEL_122;
    v101 = *(_QWORD *)&__srca[8 * v102];
    ++v103;
    if (v101)
      goto LABEL_121;
  }
LABEL_157:
  __break(1u);
LABEL_158:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Date.ComponentsFormatStyle.calendar(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char v5;
  char v6;
  uint64_t v7;
  __int128 v8;

  v5 = *v2;
  v6 = v2[48];
  v7 = swift_bridgeObjectRetain();
  *(_BYTE *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  v8 = *((_OWORD *)v2 + 2);
  *(_OWORD *)(a2 + 16) = *a1;
  *(_OWORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 48) = v6;
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ComponentsFormatStyle.locale(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v10;

  v5 = *v2;
  v6 = *((_QWORD *)v2 + 1);
  v7 = v2[48];
  swift_bridgeObjectRetain();
  v10 = *((_OWORD *)v2 + 1);
  swift_unknownObjectRetain();
  *(_BYTE *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  v8 = *a1;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 48) = v7;
  return swift_unknownObjectRetain();
}

void Date.ComponentsFormatStyle.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt8 v6;
  uint64_t ObjectType;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  Swift::UInt8 v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt v40;
  Swift::UInt v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  _BYTE v46[144];
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  _QWORD v65[18];
  _BYTE v66[144];
  _BYTE v67[152];

  v3 = *((_QWORD *)v1 + 1);
  v4 = *((_QWORD *)v1 + 3);
  v5 = *((_QWORD *)v1 + 5);
  v6 = v1[48];
  Hasher._combine(_:)(*v1);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  ObjectType = swift_getObjectType();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 120);
  swift_unknownObjectRetain();
  v8(a1, ObjectType, v4);
  swift_unknownObjectRelease();
  v9 = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v10(v9, v5) & 1) != 0)
  {
    v11 = 1;
LABEL_8:
    Hasher._combine(_:)(v11);
    goto LABEL_61;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(v9, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v12(v65, v9, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v67) == 1)
  {
    v11 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v47, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v47[0] == 2)
  {
    v13 = 0;
  }
  else
  {
    v13 = v47[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  v14 = v48;
  if (!v48)
  {
    Hasher._combine(_:)(0);
    v18 = v47;
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v14 + 16));
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v46, &demangling cache variable for type metadata for LocalePreferences?);
    v18 = v46;
LABEL_22:
    outlined retain of LocalePreferences(v18);
    if (!v49)
      goto LABEL_17;
    goto LABEL_23;
  }
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v50)
      goto LABEL_18;
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 = v51;
    if (!v51)
      goto LABEL_19;
    goto LABEL_25;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v50)
    goto LABEL_24;
LABEL_18:
  Hasher._combine(_:)(0);
  v17 = v51;
  if (!v51)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v17);
  swift_bridgeObjectRelease();
LABEL_26:
  v19 = v52;
  v45 = v6;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v21 = v53;
  v20 = v54;
  v23 = v55;
  v22 = v56;
  v24 = v57;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v25 = v20;
    v26 = v23;
    v27 = v22;
    v28 = v24;
    v29 = v21;
    _CFObject.hash(into:)();
    if (v20)
      goto LABEL_31;
  }
  else
  {
    Hasher._combine(_:)(0);
    v34 = v24;
    v35 = v20;
    v36 = v23;
    v37 = v22;
    if (v20)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v30 = v20;
      _CFObject.hash(into:)();

      if (v23)
        goto LABEL_32;
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (v23)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v31 = v23;
    _CFObject.hash(into:)();

    if (v22)
      goto LABEL_33;
LABEL_38:
    Hasher._combine(_:)(0);
    if (v24)
      goto LABEL_34;
    goto LABEL_39;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  if (!v22)
    goto LABEL_38;
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v32 = v22;
  _CFObject.hash(into:)();

  if (v24)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v33 = v24;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
  v33 = 0;
LABEL_40:

  v38 = v58;
  if (v38)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v38);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v6 = v45;
  v39 = v59;
  if (!v59)
  {
    Hasher._combine(_:)(0);
    if (v60)
      goto LABEL_45;
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v39);
  swift_bridgeObjectRelease();
  if (!v60)
    goto LABEL_47;
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v40 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v41 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v63 == 2)
  {
    v42 = 0;
  }
  else
  {
    v42 = v63 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v42);
  if (v64 == 2)
  {
    v43 = 0;
  }
  else
  {
    v44 = v64 & 1;
    Hasher._combine(_:)(1u);
    v43 = v44;
  }
  Hasher._combine(_:)(v43);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_61:
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.ComponentsFormatStyle.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181F108AC + 4 * byte_182171E10[*v0]))(0x656C797473, 0xE500000000000000);
}

uint64_t sub_181F108AC()
{
  return 0x73646C656966;
}

uint64_t sub_181F108C0()
{
  return 0x7261646E656C6163;
}

uint64_t sub_181F108D8()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_181F108EC()
{
  return 0x697469736F507369;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.ComponentsFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Date.ComponentsFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ComponentsFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ComponentsFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.ComponentsFormatStyle.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  char v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ComponentsFormatStyle.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v13 = *((_QWORD *)v1 + 1);
  v9 = *((_OWORD *)v1 + 1);
  v11 = *((_OWORD *)v1 + 2);
  v12 = v9;
  v15 = v1[48];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = v8;
  v16 = 0;
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(_QWORD *)&v14 = v13;
    v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x1E0DEB3B8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v14 = v12;
    v16 = 2;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v14 = v11;
    v16 = 3;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Date.ComponentsFormatStyle.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt8 v5;
  uint64_t ObjectType;
  void (*v7)(_BYTE *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  Swift::UInt8 v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  _BYTE v45[144];
  _BYTE v46[8];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  char v63;
  _QWORD v64[18];
  _BYTE v65[144];
  _BYTE v66[144];
  _BYTE v67[80];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 3);
  v4 = *((_QWORD *)v0 + 5);
  v5 = v0[48];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v67, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  ObjectType = swift_getObjectType();
  v7 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 120);
  swift_unknownObjectRetain();
  v7(v67, ObjectType, v3);
  swift_unknownObjectRelease();
  v8 = swift_getObjectType();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v9(v8, v4) & 1) != 0)
  {
    v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v8, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v11(v64, v8, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v65, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v66) == 1)
  {
    v10 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v46, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v46[0] == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v46[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  v13 = v47;
  if (!v47)
  {
    Hasher._combine(_:)(0);
    v18 = v46;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v13 + 16));
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v45, &demangling cache variable for type metadata for LocalePreferences?);
    v18 = v45;
LABEL_23:
    outlined retain of LocalePreferences(v18);
    if (!v48)
      goto LABEL_17;
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v49)
      goto LABEL_18;
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v16 = v50;
    if (!v50)
      goto LABEL_19;
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v67, v16);
    swift_bridgeObjectRelease();
    v17 = v51;
    if (!v51)
      goto LABEL_20;
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v16 = v50;
  if (v50)
    goto LABEL_26;
LABEL_19:
  Hasher._combine(_:)(0);
  v17 = v51;
  if (!v51)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v67, v17);
  swift_bridgeObjectRelease();
LABEL_28:
  v20 = v52;
  v19 = v53;
  v22 = v54;
  v21 = v55;
  v23 = v56;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v24 = v19;
    v25 = v22;
    v26 = v21;
    v27 = v23;
    v28 = v20;
    _CFObject.hash(into:)();
    if (v19)
      goto LABEL_30;
  }
  else
  {
    Hasher._combine(_:)(0);
    v33 = v23;
    v34 = v19;
    v35 = v22;
    v36 = v21;
    if (v19)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v29 = v19;
      _CFObject.hash(into:)();

      if (v22)
        goto LABEL_31;
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v22)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v30 = v22;
    _CFObject.hash(into:)();

    if (v21)
      goto LABEL_32;
LABEL_37:
    Hasher._combine(_:)(0);
    if (v23)
      goto LABEL_33;
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v21)
    goto LABEL_37;
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v31 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v32 = v23;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  v32 = 0;
LABEL_39:

  v37 = v57;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v67, v37);
    swift_bridgeObjectRelease();
    v38 = v58;
    if (v58)
      goto LABEL_41;
LABEL_44:
    Hasher._combine(_:)(0);
    if (v59)
      goto LABEL_42;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(0);
  v38 = v58;
  if (!v58)
    goto LABEL_44;
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v67, v38);
  swift_bridgeObjectRelease();
  if (!v59)
    goto LABEL_45;
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v40 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v62 == 2)
  {
    v41 = 0;
  }
  else
  {
    v41 = v62 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v41);
  if (v63 == 2)
  {
    v42 = 0;
  }
  else
  {
    v43 = v63 & 1;
    Hasher._combine(_:)(1u);
    v42 = v43;
  }
  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?((uint64_t)v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t Date.ComponentsFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ComponentsFormatStyle.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v20 = 0;
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
    v20 = 1;
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x1E0DEB3D8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v10 = v18;
    v20 = 2;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v17 = v18;
    v20 = 3;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    v16 = v17;
    swift_unknownObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v19 = v9;
    v11 = v18;
    LOBYTE(v18) = 4;
    v15 = v11;
    swift_unknownObjectRetain();
    v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v19;
    *(_QWORD *)(a2 + 8) = v10;
    v13 = v15;
    *(_OWORD *)(a2 + 16) = v17;
    *(_OWORD *)(a2 + 32) = v13;
    *(_BYTE *)(a2 + 48) = v12 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.ComponentsFormatStyle@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = Date.ComponentsFormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.ComponentsFormatStyle@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v10;

  v5 = *v2;
  v6 = *((_QWORD *)v2 + 1);
  v7 = v2[48];
  swift_bridgeObjectRetain();
  v10 = *((_OWORD *)v2 + 1);
  swift_unknownObjectRetain();
  *(_BYTE *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  v8 = *a1;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 48) = v7;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.ComponentsFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle(_QWORD *a1)
{
  return Date.ComponentsFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ComponentsFormatStyle()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt8 v5;
  uint64_t ObjectType;
  void (*v7)(_BYTE *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  Swift::UInt8 v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  _QWORD v62[18];
  _BYTE v63[144];
  _BYTE v64[144];
  _BYTE v65[80];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 3);
  v4 = *((_QWORD *)v0 + 5);
  v5 = v0[48];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v65, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  ObjectType = swift_getObjectType();
  v7 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 120);
  swift_unknownObjectRetain();
  v7(v65, ObjectType, v3);
  swift_unknownObjectRelease();
  v8 = swift_getObjectType();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v9(v8, v4) & 1) != 0)
  {
    v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v8, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v11(v62, v8, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    v10 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)&v44, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v44 == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v44 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  v13 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v44);
    if (!v46)
      goto LABEL_17;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v13 + 16));
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    goto LABEL_22;
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v47)
      goto LABEL_18;
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v16 = v48;
    if (!v48)
      goto LABEL_19;
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v16);
    swift_bridgeObjectRelease();
    v17 = v49;
    if (!v49)
      goto LABEL_20;
    goto LABEL_26;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v16 = v48;
  if (v48)
    goto LABEL_25;
LABEL_19:
  Hasher._combine(_:)(0);
  v17 = v49;
  if (!v49)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v17);
  swift_bridgeObjectRelease();
LABEL_27:
  v19 = v50;
  v18 = v51;
  v21 = v52;
  v20 = v53;
  v22 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v23 = v18;
    v24 = v21;
    v25 = v20;
    v26 = v22;
    v27 = v19;
    _CFObject.hash(into:)();
    if (v18)
      goto LABEL_29;
  }
  else
  {
    Hasher._combine(_:)(0);
    v32 = v22;
    v33 = v18;
    v34 = v21;
    v35 = v20;
    if (v18)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v28 = v18;
      _CFObject.hash(into:)();

      if (v21)
        goto LABEL_30;
      goto LABEL_35;
    }
  }
  Hasher._combine(_:)(0);
  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v29 = v21;
    _CFObject.hash(into:)();

    if (v20)
      goto LABEL_31;
LABEL_36:
    Hasher._combine(_:)(0);
    if (v22)
      goto LABEL_32;
    goto LABEL_37;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  if (!v20)
    goto LABEL_36;
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v30 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v31 = v22;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v31 = 0;
LABEL_38:

  v36 = v55;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v36);
    swift_bridgeObjectRelease();
    v37 = v56;
    if (v56)
      goto LABEL_40;
LABEL_43:
    Hasher._combine(_:)(0);
    if (v57)
      goto LABEL_41;
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(0);
  v37 = v56;
  if (!v56)
    goto LABEL_43;
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v37);
  swift_bridgeObjectRelease();
  if (!v57)
    goto LABEL_44;
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v60 == 2)
  {
    v40 = 0;
  }
  else
  {
    v40 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v61 == 2)
  {
    v41 = 0;
  }
  else
  {
    v42 = v61 & 1;
    Hasher._combine(_:)(1u);
    v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

__n128 static FormatStyle<>.components(style:fields:)@<Q0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  __n128 result;
  _OWORD v14[2];

  v5 = *a1;
  v6 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v7 = static LocaleCache.cache + 16;
  v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v7, (uint64_t *)v14);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  v9 = *(_QWORD *)&v14[0];
  v10 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1)
    swift_once();
  v11 = static CalendarCache.cache + 16;
  v12 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v12);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v11, (uint64_t *)v14);
  os_unfair_lock_unlock(v12);
  swift_release_n();
  result = (__n128)v14[0];
  a3->n128_u8[0] = v5;
  a3->n128_u64[1] = a2;
  a3[1] = result;
  a3[2].n128_u64[0] = v9;
  a3[2].n128_u64[1] = v10;
  a3[3].n128_u8[0] = 1;
  return result;
}

__n128 static FormatStyle<>.timeDuration.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  __n128 result;
  _OWORD v9[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static LocaleCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, (uint64_t *)v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = *(_QWORD *)&v9[0];
  v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = static CalendarCache.cache + 16;
  v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v6, (uint64_t *)v9);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  result = (__n128)v9[0];
  a1->n128_u8[0] = 5;
  a1->n128_u64[1] = 0;
  a1[1] = result;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u64[1] = v5;
  a1[3].n128_u8[0] = 1;
  return result;
}

void Date.ComponentsFormatStyle.discreteInput(before:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  double v4;
  double v5;
  __int128 v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t ObjectType;
  void (*v42)(double *__return_ptr, double *, double *, _QWORD, uint64_t, uint64_t);
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  char v46;
  double v47;
  double v48[36];
  double v49;
  char v50;
  _OWORD __dst[18];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  _OWORD v56[2];
  Swift::Int_optional v57;

  v4 = *a1;
  v5 = a1[1];
  v6 = v2[1];
  v52 = *v2;
  v53 = v6;
  v54 = v2[2];
  v55 = *((_BYTE *)v2 + 48);
  v46 = v55;
  if ((v55 & 1) != 0)
    v7 = v4;
  else
    v7 = v5;
  if ((v55 & 1) != 0)
    v8 = v5;
  else
    v8 = v4;
  outlined retain of Date.ComponentsFormatStyle((uint64_t)&v52);
  v9 = specialized _ArrayProtocol.filter(_:)((uint64_t)&outlined read-only object #0 of static Date.ComponentsFormatStyle.Field.Option.allCases.getter, &v52);
  outlined release of Date.ComponentsFormatStyle((uint64_t)&v52);
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  v45 = a2;
  v11 = *(unsigned __int8 *)(v10 + v9 + 31);
  v12 = 7;
  v13 = MEMORY[0x1E0DEE9D8];
  v14 = &byte_1E0F2E9D0;
  do
  {
    v18 = *v14++;
    v17 = v18;
    if (v11 < v18)
    {
      *(_QWORD *)&__dst[0] = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v13 = *(_QWORD *)&__dst[0];
      }
      v16 = *(_QWORD *)(v13 + 16);
      v15 = *(_QWORD *)(v13 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v13 = *(_QWORD *)&__dst[0];
      }
      *(_QWORD *)(v13 + 16) = v16 + 1;
      *(_BYTE *)(v13 + v16 + 32) = v17;
    }
    --v12;
  }
  while (v12);
  v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(v13);
  swift_release();
  swift_bridgeObjectRetain();
  v20 = (char *)v19;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (char *)v19);
  v22 = *((_QWORD *)v20 + 2);
  v21 = *((_QWORD *)v20 + 3);
  if (v22 >= v21 >> 1)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v20);
  *((_QWORD *)v20 + 2) = v22 + 1;
  v23 = v20 + 32;
  v20[v22 + 32] = 13;
  swift_bridgeObjectRelease();
  v56[0] = v53;
  __dst[0] = v53;
  outlined retain of Locale((uint64_t)v56);
  v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(v9);
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  v25 = Set.init(minimumCapacity:)();
  *(_QWORD *)&v48[0] = v25;
  v26 = *(_QWORD *)(v24 + 16);
  if (v26)
  {
    for (i = 0; i != v26; ++i)
    {
      v28 = v24 + i;
      specialized Set._Variant.insert(_:)(&v49, *(unsigned __int8 *)(v28 + 32));
    }
    swift_bridgeObjectRelease();
    v29 = *(_QWORD *)&v48[0];
  }
  else
  {
    v29 = v25;
    swift_bridgeObjectRelease();
  }
  v30 = (void *)(swift_allocObject() + 16);
  v31 = swift_bridgeObjectRetain();
  v32 = specialized Set.union<A>(_:)(v31, v29);
  swift_bridgeObjectRelease();
  v48[0] = v7;
  v49 = v8;
  Calendar.dateComponents(_:from:to:)(v32, v48, &v49, v30);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v33 = *((_QWORD *)v20 + 2);
  if ((v46 & 1) != 0)
  {
    if (v33)
      __asm { BR              X26 }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v37 = v8;
  }
  else
  {
    for (; v33; --v33)
    {
      v34 = *v23++;
      LOBYTE(__dst[0]) = v34;
      v57.value = 0;
      v57.is_nil = 0;
      DateComponents.setValue(_:for:)(v57, (Foundation::Calendar::Component)__dst);
    }
    swift_bridgeObjectRelease();
    v35 = swift_allocObject();
    v36 = v35;
    *(_BYTE *)(v35 + 16) = 2;
    if ((v46 & 1) == 0
      || (getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(v35, v9) & 1) != 0)
    {
      __asm { BR              X11 }
    }
    memcpy(__dst, v30, 0x11AuLL);
    memcpy(v48, v30, 0x11AuLL);
    v38 = 1.59271755e13;
    if (v7 <= 1.59271755e13)
      v38 = v7;
    v39 = fmax(v38, -2.11845067e11);
    v40 = *((_QWORD *)&v56[0] + 1);
    ObjectType = swift_getObjectType();
    v47 = v39;
    v42 = *(void (**)(double *__return_ptr, double *, double *, _QWORD, uint64_t, uint64_t))(v40 + 200);
    outlined retain of Locale((uint64_t)v56);
    outlined retain of DateComponents((uint64_t)__dst);
    v42(&v49, v48, &v47, 0, ObjectType, v40);
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of Locale((uint64_t)v56);
    if ((v50 & 1) == 0)
    {
      v37 = v49;
      a2 = v45;
      if ((v46 & 1) != 0)
      {
        v44 = getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(v36, v9);
        swift_release();
        swift_bridgeObjectRelease();
        v43 = v44 ^ 1;
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
        v43 = 0;
      }
      swift_release();
      if ((v43 & (v37 == v8)) == 0 && v37 >= v8)
        goto LABEL_54;
      if ((v43 & 1) == 0)
        goto LABEL_41;
      goto LABEL_40;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v37 = -6.31140768e10;
  }
  a2 = v45;
LABEL_40:
  v48[0] = v37;
  Date.nextUdateDown.getter((double *)__dst);
  v37 = *(double *)__dst;
LABEL_41:
  if ((v46 & 1) == 0)
  {
    if (v5 < v37)
    {
      __break(1u);
      JUMPOUT(0x181F1299CLL);
    }
    *(double *)a2 = v37;
    *(double *)(a2 + 8) = v5;
    goto LABEL_46;
  }
  if (v37 >= v4)
  {
    *(double *)a2 = v4;
    *(double *)(a2 + 8) = v37;
LABEL_46:
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
LABEL_54:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
}

void Date.nextUdateDown.getter(double *a1@<X8>)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v2 = (*v1 + 978307200.0) * -1000.0 + 0.0;
  if (v2 < INFINITY)
    *(_QWORD *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  v3 = -v2;
  v4 = v2 / -1000.0;
  if (v4 * 1000.0 > v3)
  {
    v5 = 0.0 - v4;
    if (v5 < INFINITY)
      *(_QWORD *)&v5 += (*(uint64_t *)&v5 >> 63) | 1;
    v4 = -v5;
  }
  v6 = v4 + -978307200.0;
  if (v4 < v4 + -978307200.0 + 978307200.0)
  {
    v7 = 0.0 - v6;
    if (0.0 - v6 < INFINITY)
      *(_QWORD *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
    v6 = -v7;
  }
  *a1 = v6;
}

void Date.ComponentsFormatStyle.discreteInput(after:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  double v4;
  double v5;
  __int128 v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t ObjectType;
  void (*v42)(double *__return_ptr, double *, double *, _QWORD, uint64_t, uint64_t);
  char v43;
  unsigned __int8 v44;
  uint64_t v45;
  char v46;
  double v47;
  double v48[36];
  double v49;
  char v50;
  _OWORD __dst[18];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  _OWORD v56[2];
  Swift::Int_optional v57;

  v4 = *a1;
  v5 = a1[1];
  v6 = v2[1];
  v52 = *v2;
  v53 = v6;
  v54 = v2[2];
  v55 = *((_BYTE *)v2 + 48);
  v46 = v55;
  if ((v55 & 1) != 0)
    v7 = v4;
  else
    v7 = v5;
  if ((v55 & 1) != 0)
    v8 = v5;
  else
    v8 = v4;
  outlined retain of Date.ComponentsFormatStyle((uint64_t)&v52);
  v9 = specialized _ArrayProtocol.filter(_:)((uint64_t)&outlined read-only object #0 of static Date.ComponentsFormatStyle.Field.Option.allCases.getter, &v52);
  outlined release of Date.ComponentsFormatStyle((uint64_t)&v52);
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  v45 = a2;
  v11 = *(unsigned __int8 *)(v10 + v9 + 31);
  v12 = 7;
  v13 = MEMORY[0x1E0DEE9D8];
  v14 = &byte_1E0F2E9D0;
  do
  {
    v18 = *v14++;
    v17 = v18;
    if (v11 < v18)
    {
      *(_QWORD *)&__dst[0] = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v13 = *(_QWORD *)&__dst[0];
      }
      v16 = *(_QWORD *)(v13 + 16);
      v15 = *(_QWORD *)(v13 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v13 = *(_QWORD *)&__dst[0];
      }
      *(_QWORD *)(v13 + 16) = v16 + 1;
      *(_BYTE *)(v13 + v16 + 32) = v17;
    }
    --v12;
  }
  while (v12);
  v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(v13);
  swift_release();
  swift_bridgeObjectRetain();
  v20 = (char *)v19;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, (char *)v19);
  v22 = *((_QWORD *)v20 + 2);
  v21 = *((_QWORD *)v20 + 3);
  if (v22 >= v21 >> 1)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v20);
  *((_QWORD *)v20 + 2) = v22 + 1;
  v23 = v20 + 32;
  v20[v22 + 32] = 13;
  swift_bridgeObjectRelease();
  v56[0] = v53;
  __dst[0] = v53;
  outlined retain of Locale((uint64_t)v56);
  v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(v9);
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  v25 = Set.init(minimumCapacity:)();
  *(_QWORD *)&v48[0] = v25;
  v26 = *(_QWORD *)(v24 + 16);
  if (v26)
  {
    for (i = 0; i != v26; ++i)
    {
      v28 = v24 + i;
      specialized Set._Variant.insert(_:)(&v49, *(unsigned __int8 *)(v28 + 32));
    }
    swift_bridgeObjectRelease();
    v29 = *(_QWORD *)&v48[0];
  }
  else
  {
    v29 = v25;
    swift_bridgeObjectRelease();
  }
  v30 = (void *)(swift_allocObject() + 16);
  v31 = swift_bridgeObjectRetain();
  v32 = specialized Set.union<A>(_:)(v31, v29);
  swift_bridgeObjectRelease();
  v48[0] = v7;
  v49 = v8;
  Calendar.dateComponents(_:from:to:)(v32, v48, &v49, v30);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v33 = *((_QWORD *)v20 + 2);
  if ((v46 & 1) != 0)
  {
    for (; v33; --v33)
    {
      v34 = *v23++;
      LOBYTE(__dst[0]) = v34;
      v57.value = 0;
      v57.is_nil = 0;
      DateComponents.setValue(_:for:)(v57, (Foundation::Calendar::Component)__dst);
    }
    swift_bridgeObjectRelease();
    v35 = swift_allocObject();
    v36 = v35;
    *(_BYTE *)(v35 + 16) = 2;
    if ((v46 & 1) != 0
      || (getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(v35, v9) & 1) != 0)
    {
      __asm { BR              X11 }
    }
    memcpy(__dst, v30, 0x11AuLL);
    memcpy(v48, v30, 0x11AuLL);
    v38 = 1.59271755e13;
    if (v7 <= 1.59271755e13)
      v38 = v7;
    v39 = fmax(v38, -2.11845067e11);
    v40 = *((_QWORD *)&v56[0] + 1);
    ObjectType = swift_getObjectType();
    v47 = v39;
    v42 = *(void (**)(double *__return_ptr, double *, double *, _QWORD, uint64_t, uint64_t))(v40 + 200);
    outlined retain of Locale((uint64_t)v56);
    outlined retain of DateComponents((uint64_t)__dst);
    v42(&v49, v48, &v47, 0, ObjectType, v40);
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of Locale((uint64_t)v56);
    if ((v50 & 1) != 0)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v37 = 6.3113904e10;
      a2 = v45;
    }
    else
    {
      v37 = v49;
      a2 = v45;
      if ((v46 & 1) != 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        v44 = 0;
      }
      else
      {
        v43 = getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(v36, v9);
        swift_release();
        swift_bridgeObjectRelease();
        v44 = v43 ^ 1;
      }
      swift_release();
      if ((v44 & (v37 == v8)) == 0 && v8 >= v37)
        goto LABEL_52;
      if ((v44 & 1) == 0)
        goto LABEL_46;
    }
  }
  else
  {
    if (v33)
      __asm { BR              X26 }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v37 = v8;
    a2 = v45;
  }
  v48[0] = v37;
  Date.nextUdateUp.getter((double *)__dst);
  v37 = *(double *)__dst;
LABEL_46:
  if ((v46 & 1) != 0)
  {
    if (v37 < v4)
    {
      __break(1u);
      JUMPOUT(0x181F132D4);
    }
    *(double *)a2 = v4;
    *(double *)(a2 + 8) = v37;
    goto LABEL_51;
  }
  if (v5 >= v37)
  {
    *(double *)a2 = v37;
    *(double *)(a2 + 8) = v5;
LABEL_51:
    *(_BYTE *)(a2 + 16) = 0;
    return;
  }
LABEL_52:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
}

void Date.nextUdateUp.getter(double *a1@<X8>)
{
  double *v1;
  double v2;
  double v3;
  double v4;

  v2 = (*v1 + 978307200.0) * 1000.0 + 0.0;
  if (v2 < INFINITY)
    *(_QWORD *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  v3 = v2 / 1000.0;
  if (v2 / 1000.0 * 1000.0 < v2)
  {
    v3 = v3 + 0.0;
    if (v3 < INFINITY)
      *(_QWORD *)&v3 += (*(uint64_t *)&v3 >> 63) | 1;
  }
  v4 = v3 + -978307200.0;
  if (v3 + -978307200.0 < INFINITY && v3 + -978307200.0 + 978307200.0 < v3)
    *(_QWORD *)a1 = ((*(uint64_t *)&v4 >> 63) | 1) + *(_QWORD *)&v4;
  else
    *a1 = v4;
}

double *Date.ComponentsFormatStyle.input(before:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v3 = *result;
  v4 = result[1];
  v5 = 0.0 - *result;
  if (v5 < INFINITY)
    *(_QWORD *)&v5 = ((COERCE__INT64(0.0 - *result) >> 63) | 1) + COERCE__INT64(0.0 - *result);
  v6 = fabs(v3 + v5);
  v7 = (v3 + 978307200.0) * -1000.0 + 0.0;
  if (v7 < INFINITY)
    *(_QWORD *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
  v8 = vabdd_f64(v3, v7 / -1000.0 + -978307200.0);
  v9 = 0.0 - v4;
  if (0.0 - v4 < INFINITY)
    *(_QWORD *)&v9 = ((COERCE__INT64(0.0 - v4) >> 63) | 1) + COERCE__INT64(0.0 - v4);
  v10 = fabs(v4 + v9);
  v11 = (v4 + 978307200.0) * -1000.0 + 0.0;
  if (v11 < INFINITY)
    *(_QWORD *)&v11 += (*(uint64_t *)&v11 >> 63) | 1;
  v12 = (v6 + v8 + v10 + vabdd_f64(v4, v11 / -1000.0 + -978307200.0)) * 4.0;
  if (*(_BYTE *)(v2 + 48))
  {
    v4 = v4 - v12;
    if (v4 < v3)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
      return result;
    }
    goto LABEL_13;
  }
  v3 = v3 - v12;
  if (v4 >= v3)
  {
LABEL_13:
    *(double *)a2 = v3;
    *(double *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  __break(1u);
  return result;
}

double *Date.ComponentsFormatStyle.input(after:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v3 = *result;
  v4 = result[1];
  v5 = 0.0 - *result;
  if (v5 < INFINITY)
    *(_QWORD *)&v5 = ((COERCE__INT64(0.0 - *result) >> 63) | 1) + COERCE__INT64(0.0 - *result);
  v6 = fabs(v3 + v5);
  v7 = (v3 + 978307200.0) * -1000.0 + 0.0;
  if (v7 < INFINITY)
    *(_QWORD *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
  v8 = vabdd_f64(v3, v7 / -1000.0 + -978307200.0);
  v9 = 0.0 - v4;
  if (0.0 - v4 < INFINITY)
    *(_QWORD *)&v9 = ((COERCE__INT64(0.0 - v4) >> 63) | 1) + COERCE__INT64(0.0 - v4);
  v10 = fabs(v4 + v9);
  v11 = (v4 + 978307200.0) * -1000.0 + 0.0;
  if (v11 < INFINITY)
    *(_QWORD *)&v11 += (*(uint64_t *)&v11 >> 63) | 1;
  v12 = (v6 + v8 + v10 + vabdd_f64(v4, v11 / -1000.0 + -978307200.0)) * 4.0;
  if (*(_BYTE *)(v2 + 48))
  {
    v4 = v4 + v12;
    if (v4 >= v3)
      goto LABEL_14;
    __break(1u);
  }
  v3 = v3 + v12;
  if (v4 < v3)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    return result;
  }
LABEL_14:
  *(double *)a2 = v3;
  *(double *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 != 2)
    return v2 & 1;
  if (*(_QWORD *)(a2 + 16))
    __asm { BR              X21 }
  v3 = 1;
  *(_BYTE *)(a1 + 16) = 1;
  return v3;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t outlined retain of Date.ComponentsFormatStyle(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t specialized static Date.ComponentsFormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  char v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (*a1 != *a2)
    return 0;
  v3 = *((_QWORD *)a1 + 1);
  v5 = *((_OWORD *)a1 + 1);
  v4 = *((_OWORD *)a1 + 2);
  v6 = a1[48];
  v7 = *((_QWORD *)a2 + 1);
  v8 = *((_OWORD *)a2 + 1);
  v9 = a2[48];
  if (v3)
  {
    if (!v7)
      return 0;
    v14 = *((_OWORD *)a2 + 2);
    v15 = v4;
    v12 = *((_OWORD *)a2 + 1);
    v13 = v5;
    v10 = specialized static Set.== infix(_:_:)(v3, v7);
    v8 = v12;
    v5 = v13;
    if ((v10 & 1) == 0)
      return 0;
  }
  else
  {
    v14 = *((_OWORD *)a2 + 2);
    v15 = v4;
    if (v7)
      return 0;
  }
  v16 = v8;
  v17 = v5;
  if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v17, (uint64_t)&v16) & 1) == 0)
    return 0;
  v16 = v14;
  v17 = v15;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v17, (uint64_t)&v16) & 1) != 0)
    return v6 ^ v9 ^ 1u;
  else
    return 0;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.CodingKeys, &unk_1E0F2E8A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.CodingKeys, &unk_1E0F2E8A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.CodingKeys, &unk_1E0F2E8A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.CodingKeys, &unk_1E0F2E8A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Style, &type metadata for Date.ComponentsFormatStyle.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Style, &type metadata for Date.ComponentsFormatStyle.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle.Style, &type metadata for Date.ComponentsFormatStyle.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style);
  }
  return result;
}

uint64_t specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned int v4;
  char v6;
  uint64_t v7;

  v7 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v4 = *v3++;
      specialized Set._Variant.insert(_:)(&v6, v4);
      --v2;
    }
    while (v2);
    return v7;
  }
  return a2;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, _BYTE *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE v17[8];
  uint64_t v18;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = 0;
    v4 = result + 32;
    v5 = (uint64_t)(a2 + 8);
    v6 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if (v3 <= v2)
        v7 = v2;
      else
        v7 = v3;
      while (1)
      {
        if (v3 == v7)
        {
          __break(1u);
          return result;
        }
        v8 = *(unsigned __int8 *)(v4 + v3++);
        outlined init with take of LocalePreferences?(v5, (uint64_t)v17, &demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>?);
        result = outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)&v18, &demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>?);
        v9 = v18;
        if (!v18)
          break;
        if (*(_QWORD *)(v18 + 16))
        {
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v8);
          result = Hasher._finalize()();
          v10 = -1 << *(_BYTE *)(v9 + 32);
          v11 = result & ~v10;
          if (((*(_QWORD *)(v9 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          {
            v12 = *(_QWORD *)(v9 + 48);
            if (*(unsigned __int8 *)(v12 + v11) == (_DWORD)v8)
              goto LABEL_18;
            v13 = ~v10;
            while (1)
            {
              v11 = (v11 + 1) & v13;
              if (((*(_QWORD *)(v9 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
                break;
              if (*(unsigned __int8 *)(v12 + v11) == (_DWORD)v8)
                goto LABEL_18;
            }
          }
        }
LABEL_6:
        if (v3 == v2)
          return v6;
      }
      if (*a2 == 5 && (v8 - 4) > 2)
        goto LABEL_6;
LABEL_18:
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v15 = *(_QWORD *)(v6 + 16);
      v14 = *(_QWORD *)(v6 + 24);
      if (v15 >= v14 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      *(_QWORD *)(v6 + 16) = v15 + 1;
      *(_BYTE *)(v6 + v15 + 32) = v8;
      if (v3 == v2)
        return v6;
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t outlined release of Date.ComponentsFormatStyle(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_181F13E04()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_181F13E30()
{
  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for Date.ComponentsFormatStyle(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle();
  result = lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle, &type metadata for Date.ComponentsFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle, &type metadata for Date.ComponentsFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle, &type metadata for Date.ComponentsFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle, &type metadata for Date.ComponentsFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ComponentsFormatStyle, &type metadata for Date.ComponentsFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.ComponentsFormatStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for Date.ComponentsFormatStyle()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Date.ComponentsFormatStyle(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.ComponentsFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for Date.ComponentsFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.ComponentsFormatStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.ComponentsFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.ComponentsFormatStyle()
{
  return &type metadata for Date.ComponentsFormatStyle;
}

ValueMetadata *type metadata accessor for Date.ComponentsFormatStyle.Field()
{
  return &type metadata for Date.ComponentsFormatStyle.Field;
}

ValueMetadata *type metadata accessor for Date.ComponentsFormatStyle.Style()
{
  return &type metadata for Date.ComponentsFormatStyle.Style;
}

uint64_t storeEnumTagSinglePayload for Date.ComponentsFormatStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_181F14330 + 4 * byte_182171E21[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_181F14364 + 4 * byte_182171E1C[v4]))();
}

uint64_t sub_181F14364(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181F1436C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181F14374);
  return result;
}

uint64_t sub_181F14380(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181F14388);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_181F1438C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181F14394(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.ComponentsFormatStyle.CodingKeys()
{
  return &unk_1E0F2E8A0;
}

uint64_t storeEnumTagSinglePayload for Date.ComponentsFormatStyle.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_181F143FC + 4 * byte_182171E2B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181F14430 + 4 * byte_182171E26[v4]))();
}

uint64_t sub_181F14430(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181F14438(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181F14440);
  return result;
}

uint64_t sub_181F1444C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181F14454);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_181F14458(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181F14460(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.ComponentsFormatStyle.Style.Option()
{
  return &unk_1E0F2E790;
}

void *type metadata accessor for Date.ComponentsFormatStyle.Style.CodingKeys()
{
  return &unk_1E0F2E700;
}

uint64_t storeEnumTagSinglePayload for Date.ComponentsFormatStyle.Field(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_181F144DC + 4 * byte_182171E35[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_181F14510 + 4 * byte_182171E30[v4]))();
}

uint64_t sub_181F14510(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181F14518(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181F14520);
  return result;
}

uint64_t sub_181F1452C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181F14534);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_181F14538(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181F14540(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.ComponentsFormatStyle.Field.Option()
{
  return &type metadata for Date.ComponentsFormatStyle.Field.Option;
}

uint64_t storeEnumTagSinglePayload for Date.ComponentsFormatStyle.Style.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181F1459C + 4 * byte_182171E3A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181F145BC + 4 * byte_182171E3F[v4]))();
}

_BYTE *sub_181F1459C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181F145BC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181F145C4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181F145CC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181F145D4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181F145DC(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Date.ComponentsFormatStyle.Field.CodingKeys()
{
  return &unk_1E0F2E930;
}

unint64_t lazy protocol witness table accessor for type [Date.ComponentsFormatStyle.Field.Option] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field.Option] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field.Option] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Date.ComponentsFormatStyle.Field.Option]);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field.Option] and conformance [A]);
  }
  return result;
}

unint64_t specialized Date.ComponentsFormatStyle.Field.Option.init(rawValue:)(unint64_t result)
{
  if (result >= 7)
    return 7;
  return result;
}

uint64_t specialized Date.ComponentsFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C797473 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73646C656966 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x697469736F507369 && a2 == 0xEA00000000006576)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t amfi_launch_constraint_set_spawnattr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && (unint64_t)(a3 - 1) <= 0x3FFE)
    return posix_spawnattr_setmacpolicyinfo_np();
  else
    return 22;
}

char *retainCString(int a1, char *__s1)
{
  return strdup(__s1);
}

void releaseCString(int a1, void *a2)
{
  free(a2);
}

BOOL equalCString(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unsigned __int8 *v3;
  int v4;

  v2 = *a1;
  if (!*a1)
    return *a2 == 0;
  v3 = a1 + 1;
  while (v2 == *a2)
  {
    ++a2;
    v4 = *v3++;
    v2 = v4;
    if (!v4)
      return *a2 == 0;
  }
  return 0;
}

uint64_t hashCString_old(const char *a1)
{
  strlen(a1);
  return CFStringHashISOLatin1CString();
}

uint64_t _encodeCString(void *a1, char *__s)
{
  int v4;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (__s)
  {
    v4 = strlen(__s);
    _encodeInt(a1, v4);
    return objc_msgSend(a1, "appendBytes:length:", __s, v4);
  }
  else
  {
    v6 = -123;
    return objc_msgSend(a1, "appendBytes:length:", &v6, 1);
  }
}

uint64_t _encodeInt(void *a1, int a2)
{
  void *v2;
  __int16 *v3;
  uint64_t v4;
  __int16 v6;
  int v7;
  char v8;
  uint64_t v9;

  v2 = a1;
  v9 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if ((a2 + 110) > 0xED)
  {
    if ((a2 + 0x7FFF) > 0xFFFE)
    {
      LOBYTE(v6) = -126;
      objc_msgSend(a1, "appendBytes:length:", &v6, 1);
      v3 = (__int16 *)&v7;
      a1 = v2;
      v4 = 4;
    }
    else
    {
      v6 = a2;
      v8 = -127;
      objc_msgSend(a1, "appendBytes:length:", &v8, 1);
      v3 = &v6;
      a1 = v2;
      v4 = 2;
    }
  }
  else
  {
    LOBYTE(v6) = a2;
    v3 = &v6;
    v4 = 1;
  }
  return objc_msgSend(a1, "appendBytes:length:", v3, v4);
}

void _encodeOrReuseCString(void *a1, char *a2, CFDictionaryRef theDict)
{
  void *value;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  value = 0;
  if (a2)
  {
    if (CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value))
    {
      _encodeInt(a1, (int)value);
    }
    else
    {
      value = (void *)(CFDictionaryGetCount(theDict) - 110);
      v7 = -124;
      objc_msgSend(a1, "appendBytes:length:", &v7, 1);
      _encodeCString(a1, a2);
      CFDictionarySetValue(theDict, a2, value);
    }
  }
  else
  {
    v7 = -123;
    objc_msgSend(a1, "appendBytes:length:", &v7, 1);
  }
}

char *_encodeValueOfObjCType(uint64_t a1, char *a2, SEL *a3)
{
  int v6;
  const char *v7;
  char *Name;
  void *v9;
  NSUInteger *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  SEL v22;
  __int16 v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  char v30;
  float v31;
  double v32;
  void *v34;
  char *v35;
  NSUInteger v36;
  void *v37;
  SEL v38;
  const __CFDictionary *v39;
  int v40;
  int v42;
  const char *v43;
  NSUInteger v44;
  char v45;
  NSUInteger sizep[2];

  sizep[1] = *MEMORY[0x1E0C80C00];
  v7 = a2 + 1;
  v6 = *a2;
  if (v6 <= 80)
  {
    if (v6 > 57)
    {
      switch(*a2)
      {
        case ':':
          if (*a3)
            Name = (char *)sel_getName(*a3);
          else
            Name = 0;
          v34 = *(void **)(a1 + 8);
          if (v34)
            goto LABEL_77;
          return (char *)v7;
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
          goto LABEL_87;
        case '@':
          _encodeObject_old(a1, (void *)*a3);
          return (char *)v7;
        case 'B':
        case 'C':
          goto LABEL_8;
        default:
          if (v6 == 73 || v6 == 76)
            goto LABEL_24;
          goto LABEL_87;
      }
    }
    switch(*a2)
    {
      case '!':
        return (char *)v7;
      case '#':
        _encodeClass_old(a1, (objc_class *)*a3);
        return (char *)v7;
      case '%':
        v34 = *(void **)(a1 + 8);
        if (!v34)
          return (char *)v7;
        Name = (char *)*a3;
LABEL_77:
        v39 = *(const __CFDictionary **)(a1 + 24);
        break;
      case '(':
        sizep[0] = 0;
        v35 = skipAggregateName(a2 + 1);
        v7 = NSGetSizeAndAlignment(v35 - 1, sizep, 0);
        if (sizep[0])
        {
          v36 = 0;
          do
            _encodeValueOfObjCType(a1, "C", (char *)a3 + v36++);
          while (v36 < sizep[0]);
        }
        return (char *)v7;
      case '*':
        v37 = *(void **)(a1 + 8);
        if (!v37)
          return (char *)v7;
        v38 = *a3;
        if (!_encodePointerIfNew(v37, *a3, *(CFDictionaryRef *)(a1 + 16)))
          return (char *)v7;
        v34 = *(void **)(a1 + 8);
        v39 = *(const __CFDictionary **)(a1 + 24);
        Name = (char *)v38;
        break;
      default:
        goto LABEL_87;
    }
    _encodeOrReuseCString(v34, Name, v39);
    return (char *)v7;
  }
  if (v6 > 98)
  {
    switch(*a2)
    {
      case 'c':
LABEL_8:
        v9 = *(void **)(a1 + 8);
        if (!v9)
          return (char *)v7;
        LOBYTE(sizep[0]) = *(_BYTE *)a3;
        v10 = sizep;
        goto LABEL_33;
      case 'd':
        v21 = *(void **)(a1 + 8);
        if (!v21)
          return (char *)v7;
        v28 = *(double *)a3;
        if (*(double *)a3 >= -2147483650.0 && v28 < 2147483650.0)
          v20 = (int)v28;
        else
          v20 = 0;
        if (v28 == (double)v20)
          goto LABEL_57;
        sizep[0] = (NSUInteger)*a3;
        v30 = -125;
        goto LABEL_84;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_87;
      case 'f':
        v21 = *(void **)(a1 + 8);
        if (!v21)
          return (char *)v7;
        v31 = *(float *)a3;
        v32 = *(float *)a3;
        if (v32 >= -2147483650.0 && v32 < 2147483650.0)
          v20 = (int)v31;
        else
          v20 = 0;
        if (v31 != (float)v20)
        {
          LODWORD(sizep[0]) = *(_DWORD *)a3;
          LOBYTE(v44) = -125;
          objc_msgSend(v21, "appendBytes:length:", &v44, 1);
          v10 = sizep;
          goto LABEL_82;
        }
LABEL_57:
        v19 = v21;
LABEL_58:
        _encodeInt(v19, v20);
        break;
      case 'i':
      case 'l':
LABEL_24:
        v19 = *(void **)(a1 + 8);
        if (!v19)
          return (char *)v7;
        v20 = *(_DWORD *)a3;
        goto LABEL_58;
      case 'q':
        goto LABEL_26;
      case 's':
        goto LABEL_29;
      default:
        if (v6 != 123)
          goto LABEL_87;
        v25 = skipAggregateName(a2 + 1);
        if (*v25 != 125)
        {
          v26 = 0;
          do
          {
            sizep[0] = 0;
            v44 = 0;
            NSGetSizeAndAlignment(v25, sizep, &v44);
            v27 = roundUp(v26, v44);
            v25 = (char *)_encodeValueOfObjCType(a1, v25, (char *)a3 + v27);
            v26 = sizep[0] + v27;
          }
          while (*v25 != 125);
        }
        return v25 + 1;
    }
    return (char *)v7;
  }
  if (v6 == 81)
  {
LABEL_26:
    v21 = *(void **)(a1 + 8);
    if (!v21)
      return (char *)v7;
    v22 = *a3;
    sizep[0] = (NSUInteger)v22;
    if ((unint64_t)(v22 + 110) <= 0xED)
    {
      LOBYTE(v44) = (_BYTE)v22;
      goto LABEL_32;
    }
    if ((unint64_t)(v22 + 0x7FFF) > 0xFFFE)
    {
      if ((unint64_t)(v22 + 0x7FFFFFFF) > 0xFFFFFFFE)
      {
        v30 = -121;
LABEL_84:
        LOBYTE(v44) = v30;
        objc_msgSend(v21, "appendBytes:length:", &v44, 1);
        v10 = sizep;
        v9 = v21;
        v24 = 8;
      }
      else
      {
        v45 = -126;
        objc_msgSend(v21, "appendBytes:length:", &v45, 1, v22);
        v10 = &v44;
LABEL_82:
        v9 = v21;
        v24 = 4;
      }
      goto LABEL_85;
    }
    LOWORD(v44) = (_WORD)v22;
    v45 = -127;
    objc_msgSend(v21, "appendBytes:length:", &v45, 1, v44);
    v10 = &v44;
LABEL_71:
    v9 = v21;
    v24 = 2;
LABEL_85:
    objc_msgSend(v9, "appendBytes:length:", v10, v24, v44);
    return (char *)v7;
  }
  if (v6 != 83)
  {
    if (v6 == 91)
    {
      sizep[0] = 0;
      v11 = *(unsigned __int8 *)v7;
      if ((v11 - 48) > 9)
      {
        v16 = NSGetSizeAndAlignment(v7, sizep, 0);
      }
      else
      {
        v12 = 0;
        do
        {
          v13 = v12;
          v14 = (v11 - 48);
          v15 = *(unsigned __int8 *)++v7;
          v11 = v15;
          v12 = v14 + 10 * v12;
        }
        while ((v15 - 48) < 0xA);
        v16 = NSGetSizeAndAlignment(v7, sizep, 0);
        if (v12)
        {
          v17 = 0;
          v18 = v14 + 10 * v13;
          do
            _encodeValueOfObjCType(a1, v7, (char *)a3 + sizep[0] * v17++);
          while (v18 != v17);
        }
      }
      v40 = *(unsigned __int8 *)v16;
      if (v40 == 93)
        return (char *)(v16 + 1);
      v42 = (char)v40;
      v43 = "missing ']' in type descriptor";
    }
    else
    {
LABEL_87:
      v42 = (char)v6;
      v43 = "unknown type descriptor";
    }
    typeDescriptorError(v42, (uint64_t)a2, (uint64_t)v43);
  }
LABEL_29:
  v21 = *(void **)(a1 + 8);
  if (v21)
  {
    v23 = *(_WORD *)a3;
    LOWORD(sizep[0]) = v23;
    if ((unsigned __int16)(v23 + 110) <= 0xEDu)
    {
      LOBYTE(v44) = v23;
LABEL_32:
      v10 = &v44;
      v9 = v21;
LABEL_33:
      v24 = 1;
      goto LABEL_85;
    }
    LOBYTE(v44) = -127;
    objc_msgSend(v21, "appendBytes:length:", &v44, 1);
    v10 = sizep;
    goto LABEL_71;
  }
  return (char *)v7;
}

void typeDescriptorError(int a1, uint64_t a2, uint64_t a3)
{
  NSString *v3;

  v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** type descriptor error for '%c' in '%s': %s"), a1, a2, a3);
  objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSArchiverArchiveInconsistency"), v3, 0));
}

uint64_t _encodeObject_old(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t result;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = *(void **)(a1 + 8);
  if (v5)
  {
    result = _encodePointerIfNew(v5, a2, *(CFDictionaryRef *)(a1 + 16));
    if ((_DWORD)result)
    {
      v7 = (void *)_replacementObjectForObject(a1, a2);
      _encodeClass_old(a1, (objc_class *)objc_msgSend(v7, "classForArchiver"));
      objc_msgSend(v7, "encodeWithCoder:", a1);
      v8 = *(void **)(a1 + 8);
      v10 = -122;
      return objc_msgSend(v8, "appendBytes:length:", &v10, 1);
    }
  }
  else
  {
    result = (uint64_t)_replacementObjectForObject(a1, a2);
    if (result)
    {
      v9 = (void *)result;
      result = CFSetContainsValue(*(CFSetRef *)(a1 + 32), (const void *)result);
      if (!(_DWORD)result)
      {
        CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v9);
        return objc_msgSend(v9, "encodeWithCoder:", a1);
      }
    }
  }
  return result;
}

const void *_replacementObjectForObject(uint64_t a1, void *key)
{
  const __CFDictionary *v4;
  const void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v4 = *(const __CFDictionary **)(a1 + 48);
  if (!v4)
    goto LABEL_4;
  if (!CFDictionaryGetValueIfPresent(v4, key, &v6))
  {
    if (*(_QWORD *)(a1 + 48))
    {
LABEL_5:
      v6 = (const void *)objc_msgSend(key, "replacementObjectForArchiver:", a1, v6, v7);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), key, v6);
      return v6;
    }
LABEL_4:
    *(_QWORD *)(a1 + 48) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, 0, 0);
    goto LABEL_5;
  }
  return v6;
}

uint64_t _encodePointerIfNew(void *a1, const void *a2, CFDictionaryRef theDict)
{
  uint64_t v6;
  void *value;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  value = 0;
  if (a2)
  {
    if (!CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value))
    {
      value = (void *)(CFDictionaryGetCount(theDict) - 110);
      v9 = -124;
      v6 = 1;
      objc_msgSend(a1, "appendBytes:length:", &v9, 1);
      CFDictionarySetValue(theDict, a2, value);
      return v6;
    }
    _encodeInt(a1, (int)value);
  }
  else
  {
    v9 = -123;
    objc_msgSend(a1, "appendBytes:length:", &v9, 1);
  }
  return 0;
}

uint64_t _encodeClass_old(uint64_t a1, objc_class *a2)
{
  uint64_t result;
  objc_class *v4;
  NSString *v5;
  const __CFDictionary *v6;
  NSString *Value;
  NSString *v8;
  Class v9;
  const char *CStringPtr;
  void *v11;
  const char *v12;
  char *Name;
  void *v14;
  int Version;
  objc_class *Superclass;
  char buffer[512];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v4 = a2;
    result = _encodePointerIfNew((void *)result, a2, *(CFDictionaryRef *)(a1 + 16));
    if ((_DWORD)result)
    {
      do
      {
        v5 = NSStringFromClass(v4);
        if (-[NSString hasPrefix:](v5, "hasPrefix:", CFSTR("%")))
          v5 = -[NSString substringFromIndex:](v5, "substringFromIndex:", 1);
        v6 = *(const __CFDictionary **)(a1 + 40);
        if (!v6 || (Value = (NSString *)CFDictionaryGetValue(v6, v5)) == 0)
        {
          Value = (NSString *)encodingMap;
          if (encodingMap)
            Value = (NSString *)CFDictionaryGetValue((CFDictionaryRef)encodingMap, v5);
        }
        if (Value)
          v8 = Value;
        else
          v8 = v5;
        if (v8 != v5)
        {
          v9 = NSClassFromString(v8);
          if (v9)
            _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v9, 1);
        }
        CStringPtr = CFStringGetCStringPtr((CFStringRef)v8, 0x600u);
        if (!CStringPtr)
        {
          CStringPtr = buffer;
          CFStringGetCString((CFStringRef)v8, buffer, 512, 0x600u);
        }
        v11 = *(void **)(a1 + 8);
        v12 = sel_registerName(CStringPtr);
        Name = (char *)sel_getName(v12);
        _encodeOrReuseCString(v11, Name, *(CFDictionaryRef *)(a1 + 24));
        v14 = *(void **)(a1 + 8);
        Version = class_getVersion(v4);
        _encodeInt(v14, Version);
        do
        {
          Superclass = class_getSuperclass(v4);
          v4 = Superclass;
        }
        while (Superclass && *class_getName(Superclass) == 37);
        result = _encodePointerIfNew(*(void **)(a1 + 8), v4, *(CFDictionaryRef *)(a1 + 16));
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

char *skipAggregateName(char *result)
{
  char *v1;
  int v2;
  int v3;

  v1 = result;
  do
  {
    while (1)
    {
      v3 = *result++;
      v2 = v3;
      if (v3 > 60)
        break;
      if ((v2 - 40) < 2 || v2 == 0)
        return v1;
    }
    if (v2 == 61)
      return result;
  }
  while (v2 != 125 && v2 != 123);
  return v1;
}

unint64_t roundUp(unint64_t a1, unint64_t a2)
{
  NSString *v3;

  if ((a2 ^ 0x7FFFFFFFFFFFFFFFLL) < a1)
  {
    v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** value %lu too large (may have wrapped)"), a2 + a1);
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], v3, 0));
  }
  if (a2)
    return (a2 + a1 - 1) / a2 * a2;
  else
    return 0;
}

void ___addStringToStringTable_block_invoke()
{
  objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("Unable to allocate enough memory to encode data"), 0));
}

id _NSUseParamAsSortSelector(void *a1, uint64_t a2, SEL a3)
{
  return objc_msgSend(a1, a3, a2);
}

uint64_t sub_181F1ACA8()
{
  return 0;
}

uint64_t sub_181F1ACE8()
{
  return 0;
}

uint64_t _NSGrammaticalGenderGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  if (a1)
  {
    if ((objc_msgSend(a1, "isEqual:", CFSTR("feminine")) & 1) != 0)
    {
      v4 = 1;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("masculine")) & 1) != 0)
    {
      v4 = 2;
    }
    else
    {
      result = objc_msgSend(a1, "isEqual:", CFSTR("neuter"));
      if (!(_DWORD)result)
        return result;
      v4 = 3;
    }
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return 1;
}

uint64_t _NSGrammaticalNumberGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  if (a1)
  {
    if ((objc_msgSend(a1, "isEqual:", CFSTR("one")) & 1) != 0)
    {
      v4 = 1;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("zero")) & 1) != 0)
    {
      v4 = 2;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("other")) & 1) != 0)
    {
      v4 = 3;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("two")) & 1) != 0)
    {
      v4 = 4;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("few")) & 1) != 0)
    {
      v4 = 5;
    }
    else
    {
      result = objc_msgSend(a1, "isEqual:", CFSTR("many"));
      if (!(_DWORD)result)
        return result;
      v4 = 6;
    }
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return 1;
}

uint64_t _NSGrammaticalPartOfSpeechGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  if (a1)
  {
    if ((objc_msgSend(a1, "isEqual:", CFSTR("determiner")) & 1) != 0)
    {
      v4 = 1;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("pronoun")) & 1) != 0)
    {
      v4 = 2;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("letter")) & 1) != 0)
    {
      v4 = 3;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("adverb")) & 1) != 0)
    {
      v4 = 4;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("particle")) & 1) != 0)
    {
      v4 = 5;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("adjective")) & 1) != 0)
    {
      v4 = 6;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("adposition")) & 1) != 0)
    {
      v4 = 7;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("verb")) & 1) != 0)
    {
      v4 = 8;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("noun")) & 1) != 0)
    {
      v4 = 9;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("conjunction")) & 1) != 0)
    {
      v4 = 10;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("numeral")) & 1) != 0)
    {
      v4 = 11;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("interjection")) & 1) != 0)
    {
      v4 = 12;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("preposition")) & 1) != 0)
    {
      v4 = 13;
    }
    else
    {
      result = objc_msgSend(a1, "isEqual:", CFSTR("abbreviation"));
      if (!(_DWORD)result)
        return result;
      v4 = 14;
    }
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return 1;
}

uint64_t _NSGrammaticalCaseGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  if (a1)
  {
    if ((objc_msgSend(a1, "isEqual:", CFSTR("nominative")) & 1) != 0)
    {
      v4 = 1;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("accusative")) & 1) != 0)
    {
      v4 = 2;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("dative")) & 1) != 0)
    {
      v4 = 3;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("genitive")) & 1) != 0)
    {
      v4 = 4;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("prepositional")) & 1) != 0)
    {
      v4 = 5;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("ablative")) & 1) != 0)
    {
      v4 = 6;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("adessive")) & 1) != 0)
    {
      v4 = 7;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("allative")) & 1) != 0)
    {
      v4 = 8;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("elative")) & 1) != 0)
    {
      v4 = 9;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("illative")) & 1) != 0)
    {
      v4 = 10;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("essive")) & 1) != 0)
    {
      v4 = 11;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("inessive")) & 1) != 0)
    {
      v4 = 12;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("locative")) & 1) != 0)
    {
      v4 = 13;
    }
    else
    {
      result = objc_msgSend(a1, "isEqual:", CFSTR("translative"));
      if (!(_DWORD)result)
        return result;
      v4 = 14;
    }
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return 1;
}

uint64_t _NSGrammaticalPronounTypeGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  if (a1)
  {
    if ((objc_msgSend(a1, "isEqual:", CFSTR("personal")) & 1) != 0)
    {
      v4 = 1;
    }
    else if ((objc_msgSend(a1, "isEqual:", CFSTR("reflexive")) & 1) != 0)
    {
      v4 = 2;
    }
    else
    {
      result = objc_msgSend(a1, "isEqual:", CFSTR("possessive"));
      if (!(_DWORD)result)
        return result;
      v4 = 3;
    }
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return 1;
}

BOOL __NSMorphologyCustomPronounValidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[NSMorphologyCustomPronoun _validateCustomPronounWithAccessor:forLanguage:error:](NSMorphologyCustomPronoun, "_validateCustomPronounWithAccessor:forLanguage:error:", a1, a2, a3);
}

uint64_t _NSAutoreleasePoolGetRubyToken()
{
  return _CFGetTSD();
}

uint64_t _NSAutoreleasePoolSetRubyToken(uint64_t result)
{
  if (result)
    return _CFSetTSD();
  return result;
}

uint64_t NSAutoreleaseObject()
{
  return _CFAutoreleasePoolAddObject();
}

uint64_t NSAutoreleasePoolCount()
{
  return 0;
}

BOOL _NSIsLocalizedString(void *a1)
{
  return object_getClass(a1) == (Class)NSDebugString;
}

void NSBundleDisableCodeLoading()
{
  _MergedGlobals_92 = 1;
}

void mutateError2(SEL sel, uint64_t a2, objc_class *a3)
{
  NSString *v4;
  NSString *v5;
  void *v6;
  _QWORD *v7;
  const __CFString *v8;
  void *Name;
  Class Class;

  switch(a2)
  {
    case 3:
      v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: Range or index out of bounds"), _NSMethodExceptionProem(a3, sel));
      v6 = (void *)MEMORY[0x1E0C99DA0];
      v7 = (_QWORD *)MEMORY[0x1E0C99858];
      goto LABEL_10;
    case 2:
      Name = _NSMethodExceptionProem(a3, sel);
      v8 = CFSTR("%@: nil argument");
      break;
    case 1:
      v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Attempt to mutate immutable object with %s"), sel_getName(sel), Class);
LABEL_9:
      v5 = v4;
      v6 = (void *)MEMORY[0x1E0C99DA0];
      v7 = (_QWORD *)MEMORY[0x1E0C99778];
LABEL_10:
      objc_exception_throw((id)objc_msgSend(v6, "exceptionWithName:reason:userInfo:", *v7, v5, 0));
    default:
      Name = (void *)sel_getName(sel);
      Class = object_getClass(a3);
      v8 = CFSTR("Can't call %s in %@");
      break;
  }
  v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v8, Name, Class);
  goto LABEL_9;
}

uint64_t __NSDateComponentsSetWeek(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setWeek:", a2);
}

uint64_t sub_181F22F18()
{
  return 0;
}

uint64_t sub_181F22F50()
{
  return 0;
}

uint64_t sub_181F22F88()
{
  return 0;
}

__CFDictionary *buildTokenMapWithDictionary(void *a1)
{
  __CFDictionary *Mutable;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  const void *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, MEMORY[0x1E0C9B390], 0);
  v3 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSPriorDayDesignations"));
  if (!v3)
    v3 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("yesterday"), 0);
  v4 = objc_msgSend(v3, "count");
  if (v4)
  {
    v5 = v4 - 1;
    do
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v3, "objectAtIndex:", v5--), "lowercaseString"), (const void *)0x4F);
    while (v5 != -1);
  }
  v6 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSNextDayDesignations"));
  if (!v6)
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("tomorrow"), 0);
  v7 = objc_msgSend(v6, "count");
  if (v7)
  {
    v8 = v7 - 1;
    do
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v6, "objectAtIndex:", v8--), "lowercaseString"), (const void *)0x50);
    while (v8 != -1);
  }
  v9 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSNextNextDayDesignations"));
  if (!v9)
    v9 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("nextday"), 0);
  v10 = objc_msgSend(v9, "count");
  if (v10)
  {
    v11 = v10 - 1;
    do
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v9, "objectAtIndex:", v11--), "lowercaseString"), (const void *)0x51);
    while (v11 != -1);
  }
  v12 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSThisDayDesignations"));
  if (!v12)
    v12 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("today"), CFSTR("now"), 0);
  v13 = objc_msgSend(v12, "count");
  if (v13)
  {
    v14 = v13 - 1;
    do
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v12, "objectAtIndex:", v14--), "lowercaseString"), (const void *)0x4E);
    while (v14 != -1);
  }
  v15 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSEarlierTimeDesignations"));
  if (!v15)
    v15 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("prior"), CFSTR("last"), CFSTR("past"), CFSTR("ago"), 0);
  v16 = objc_msgSend(v15, "count");
  if (v16)
  {
    v17 = v16 - 1;
    do
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v15, "objectAtIndex:", v17--), "lowercaseString"), (const void *)0x5A);
    while (v17 != -1);
  }
  v18 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSLaterTimeDesignations"));
  if (!v18)
    v18 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("next"), 0);
  v19 = objc_msgSend(v18, "count");
  if (v19)
  {
    v20 = v19 - 1;
    do
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v18, "objectAtIndex:", v20--), "lowercaseString"), (const void *)0x59);
    while (v20 != -1);
  }
  v21 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSYearMonthWeekDesignations"));
  if (!v21)
    v21 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("year"), CFSTR("month"), CFSTR("week"), 0);
  v22 = objc_msgSend(v21, "count");
  if (v22)
  {
    v23 = v22 - 1;
    do
    {
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v21, "objectAtIndex:", v23), "lowercaseString"), (const void *)(v23 + 91));
      --v23;
    }
    while (v23 != -1);
  }
  v24 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSHourNameDesignations"));
  if (!v24)
    v24 = (void *)objc_msgSend(CFSTR("((0, midnight), (10, morning), (12, noon, lunch), (14, afternoon), (19, dinner))"), "propertyList");
  v25 = objc_msgSend(v24, "count");
  if (v25)
  {
    v26 = v25;
    do
    {
      v27 = (void *)objc_msgSend(v24, "objectAtIndex:", --v26);
      v28 = objc_msgSend((id)objc_msgSend(v27, "objectAtIndex:", 0), "intValue");
      v29 = objc_msgSend(v27, "count");
      if (v29 >= 1)
      {
        v30 = (const void *)(v28 + 94);
        v31 = v29 + 1;
        do
        {
          CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v27, "objectAtIndex:", v31 - 2), "lowercaseString"), v30);
          --v31;
        }
        while (v31 > 1);
      }
    }
    while (v26);
  }
  v32 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSMonthNameArray"));
  if (!v32)
    v32 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("January"), CFSTR("February"), CFSTR("March"), CFSTR("April"), CFSTR("May"), CFSTR("June"), CFSTR("July"), CFSTR("August"), CFSTR("September"), CFSTR("October"), CFSTR("November"), CFSTR("December"), 0);
  v33 = objc_msgSend(v32, "count");
  if (v33)
  {
    v34 = v33 - 1;
    do
    {
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v32, "objectAtIndex:", v34), "lowercaseString"), (const void *)(v34 + 66));
      --v34;
    }
    while (v34 != -1);
  }
  v35 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSShortMonthNameArray"));
  if (!v35)
    v35 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("Jan"), CFSTR("Feb"), CFSTR("Mar"), CFSTR("Apr"), CFSTR("May"), CFSTR("Jun"), CFSTR("Jul"), CFSTR("Aug"), CFSTR("Sep"), CFSTR("Oct"), CFSTR("Nov"), CFSTR("Dec"), 0);
  v36 = objc_msgSend(v35, "count");
  if (v36)
  {
    v37 = v36 - 1;
    do
    {
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v35, "objectAtIndex:", v37), "lowercaseString"), (const void *)(v37 + 66));
      --v37;
    }
    while (v37 != -1);
  }
  v38 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSWeekDayNameArray"));
  if (!v38)
    v38 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("Sunday"), CFSTR("Monday"), CFSTR("Tuesday"), CFSTR("Wednesday"), CFSTR("Thursday"), CFSTR("Friday"), CFSTR("Saturday"), 0);
  v39 = objc_msgSend(v38, "count");
  if (v39)
  {
    v40 = v39 - 1;
    do
    {
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v38, "objectAtIndex:", v40), "lowercaseString"), (const void *)(v40 + 82));
      --v40;
    }
    while (v40 != -1);
  }
  v41 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSShortWeekDayNameArray"));
  if (!v41)
    v41 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("Sun"), CFSTR("Mon"), CFSTR("Tue"), CFSTR("Wed"), CFSTR("Thu"), CFSTR("Fri"), CFSTR("Sat"), 0);
  v42 = objc_msgSend(v41, "count");
  if (v42)
  {
    v43 = v42 - 1;
    do
    {
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v41, "objectAtIndex:", v43), "lowercaseString"), (const void *)(v43 + 82));
      --v43;
    }
    while (v43 != -1);
  }
  v44 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("NSAMPMDesignation"));
  if (!v44)
    v44 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("AM"), CFSTR("PM"), 0);
  v45 = objc_msgSend(v44, "count");
  if (v45)
  {
    v46 = v45 - 1;
    do
    {
      CFDictionarySetValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v44, "objectAtIndex:", v46), "lowercaseString"), (const void *)(v46 + 118));
      --v46;
    }
    while (v46 != -1);
  }
  return Mutable;
}

uint64_t appendNumber(void *a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = objc_msgSend(a1, "length");
  if (*a3)
    v9 = a3;
  else
    v9 = a4;
  v10 = fmtcheck(v9, "%ld");
  snprintf(__str, 0x410uLL, v10, a2);
  return objc_msgSend(a1, "replaceCharactersInRange:withCString:length:", v8, 0, __str, strlen(__str));
}

uint64_t skipWhitespace(void *a1)
{
  void *v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  char v6;

  v2 = (void *)objc_msgSend(a1, "string");
  v3 = objc_msgSend(a1, "scanLocation");
  v4 = objc_msgSend(v2, "length");
  v5 = (void *)objc_msgSend(a1, "charactersToBeSkipped");
  if (v4 <= v3)
    v4 = v3;
  while (v4 != v3)
  {
    v6 = objc_msgSend(v5, "characterIsMember:", objc_msgSend(v2, "characterAtIndex:", v3++));
    if ((v6 & 1) == 0)
    {
      v4 = v3 - 1;
      return objc_msgSend(a1, "setScanLocation:", v4);
    }
  }
  return objc_msgSend(a1, "setScanLocation:", v4);
}

uint64_t absolute_from_gregorian(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (uint64_t)a1 >> 16;
  if (a1 < 2uLL)
  {
    v3 = 0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v4 = SHIWORD(a1) % 400;
    do
    {
      if ((*(_QWORD *)&a1 & 0x30000) != 0 || v2 != 1 || v4 == 100 || v4 == 300 || v4 == 200)
        v5 = days_per_month[v2];
      else
        v5 = 29;
      v3 += v5;
      ++v2;
    }
    while (a1 - 1 != v2);
  }
  v6 = v1 - 1;
  v7 = 365 * ((int)v1 - 1);
  v8 = v1 + 2;
  if (v1 >= 1)
    v8 = v1 - 1;
  v9 = ((unsigned __int128)(v6 * (__int128)0x5C28F5C28F5C28F5) >> 64) - v1 + 1;
  return v7 + BYTE1(a1) + (v8 >> 2) + v6 / 400 + (v9 >> 6) + ((unint64_t)v9 >> 63) + v3;
}

uint64_t sub_181F29338()
{
  return 0;
}

uint64_t sub_181F29378()
{
  return 0;
}

uint64_t sub_181F299BC()
{
  return 0;
}

uint64_t sub_181F29BC4()
{
  return 0;
}

uint64_t sub_181F29C04()
{
  return 0;
}

uint64_t sub_181F29C44()
{
  return 0;
}

uint64_t sub_181F29C84()
{
  return 0;
}

uint64_t sub_181F29CC4()
{
  return 0;
}

float sub_181F29D08()
{
  return 0.0;
}

double sub_181F29D48()
{
  return 0.0;
}

uint64_t sub_181F29D88()
{
  return 0;
}

void __NSCoderInvalidState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSString *v9;
  uint64_t *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v10 = &a9;
    v9 = -[NSString initWithFormat:arguments:]([NSString alloc], "initWithFormat:arguments:", a1, &a9);
  }
  else
  {
    v9 = (NSString *)&stru_1E0F56070;
  }
  objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v9, 0, v10, v11));
}

uint64_t __NSCoderDecodeObject(void *a1, const char *a2)
{
  if (a2)
    return objc_msgSend(a1, "decodeTopLevelObjectAndReturnError:", a2);
  else
    return objc_msgSend(a1, "decodeObject");
}

uint64_t __NSCoderDecodeObjectForKey(void *a1, const char *a2, uint64_t a3)
{
  if (a3)
    return objc_msgSend(a1, "decodeTopLevelObjectForKey:error:", a2, a3);
  else
    return objc_msgSend(a1, "decodeObjectForKey:", a2);
}

void *_bestReadOnlySandboxExtensionTypeForURL(void *result)
{
  void *v1;

  if (result)
  {
    v1 = result;
    getpid();
    objc_msgSend((id)objc_msgSend(v1, "path"), "fileSystemRepresentation");
    if (sandbox_check())
      return 0;
    else
      return (void *)*MEMORY[0x1E0C80000];
  }
  return result;
}

void *_bestReadWriteSandboxExtensionTypeForURL(void *result)
{
  void *v1;

  if (result)
  {
    v1 = result;
    getpid();
    objc_msgSend((id)objc_msgSend(v1, "path"), "fileSystemRepresentation");
    if (sandbox_check())
      return _bestReadOnlySandboxExtensionTypeForURL(v1);
    else
      return (void *)*MEMORY[0x1E0C80008];
  }
  return result;
}

uint64_t _issueSandboxExtension(void *a1, uint64_t a2, NSError **a3)
{
  const char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  NSError *v12;
  const __CFString *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    objc_msgSend((id)objc_msgSend(a1, "path"), "fileSystemRepresentation");
    v6 = (const char *)sandbox_extension_issue_file();
    if (v6)
      return objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v6, strlen(v6) + 1, 1);
    v8 = *__error();
    v13 = CFSTR("NSLocalizedDescription");
    v9 = objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("Could not create sandbox extension of type %s for URL %@. Error: %s"), &stru_1E0F56070, CFSTR("Extension"));
    v10 = objc_msgSend(a1, "path");
    v11 = __error();
    v14[0] = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v9, a2, v10, strerror(*v11), CFSTR("NSLocalizedDescription"));
    v12 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSPOSIXErrorDomain"), v8, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1));
    if (a3)
    {
      if (v12)
        *a3 = v12;
    }
  }
  return 0;
}

char **_platform_shims_get_environ()
{
  return *_NSGetEnviron();
}

uint64_t _platform_shims_kOSThermalNotificationPressureLevelName()
{
  return *MEMORY[0x1E0C83A00];
}

uint64_t _platform_shims_vm_size()
{
  return *MEMORY[0x1E0C85AD8];
}

uint64_t _platform_mach_task_self()
{
  return *MEMORY[0x1E0C83DA0];
}

void NSDataDeallocatorVM_block_invoke_2(int a1, void *ptr, NSUInteger bytes)
{
  if (ptr)
    NSDeallocateMemoryPages(ptr, bytes);
}

void sub_181F2C65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_181F2C958()
{
  uint64_t v0;

  return v0;
}

uint64_t pathifiedNSURL(void *a1, NSError **a2)
{
  uint64_t result;
  NSError *v5;

  if (!_NSIsNSURL() || (objc_msgSend(a1, "isFileURL") & 1) == 0 && objc_msgSend(a1, "scheme"))
    return (uint64_t)a1;
  result = objc_msgSend(a1, "path");
  if (!result)
  {
    if (a2)
    {
      v5 = _NSErrorWithFilePath(258, (uint64_t)a1);
      result = 0;
      *a2 = v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void _NSDataReinitializationBreak()
{
  if (_NSDataReinitializationBreak_onceToken != -1)
    dispatch_once(&_NSDataReinitializationBreak_onceToken, &__block_literal_global_206);
}

uint64_t sub_181F2DEEC()
{
  return 0;
}

void sub_181F2E670(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181F2E6F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181F2ECA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void sub_181F2EE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void _NSDateFormatterNoInit()
{
  NSLog((NSString *)CFSTR("NSDateFormatter is working around a failure to call -init after +alloc. Break on _NSDateFormatterNoInit to debug. This workaround *will* be removed, and your app will crash."));
}

CFStringRef _NSNewStringFromCString(const char *a1)
{
  size_t v2;

  v2 = strlen(a1);
  return CFStringCreateWithBytes(0, (const UInt8 *)a1, v2, 0x8000100u, 0);
}

uint64_t NSIsFreedObject(uint64_t result)
{
  void *v1;
  Class Class;
  objc_class *v3;
  const char *Name;

  if (result)
  {
    v1 = (void *)result;
    if (!NSIsFreedObject_freedClass)
      NSIsFreedObject_freedClass = _objc_getFreedObjectClass();
    Class = object_getClass(v1);
    if (Class == (Class)NSIsFreedObject_freedClass)
      return 1;
    v3 = Class;
    result = (uint64_t)object_getClass(Class);
    if (!result)
      return result;
    Name = class_getName(v3);
    return Name && !strncmp(Name, "_NSZombie_", 0xAuLL);
  }
  return result;
}

uint64_t NSFrameAddress()
{
  return 0;
}

uint64_t NSReturnAddress()
{
  return 0;
}

uint64_t NSCountFrames()
{
  return 0;
}

const char *_NSPrintForDebugger(void *a1)
{
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;

  if (!a1)
    return "<nil>";
  if ((objc_opt_respondsToSelector() & 1) == 0 && (objc_opt_respondsToSelector() & 1) == 0)
    return "<not an object or object does not respond to description method>";
  _CFAutoreleasePoolPush();
  if (_NSPrintForDebugger_result)
  {
    free((void *)_NSPrintForDebugger_result);
    _NSPrintForDebugger_result = 0;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v2 = (void *)objc_msgSend(a1, "debugDescription");
  else
    v2 = (void *)objc_msgSend(a1, "description");
  v4 = v2;
  if (v2 && !objc_msgSend(v2, "isEqual:", &stru_1E0F56070))
  {
    v5 = (void *)objc_msgSend(v4, "dataUsingEncoding:allowLossyConversion:", 4, 1);
    _NSPrintForDebugger_result = (uint64_t)malloc_type_malloc(objc_msgSend(v5, "length") + 1, 0x6E4CA608uLL);
    memmove((void *)_NSPrintForDebugger_result, (const void *)objc_msgSend(v5, "bytes"), objc_msgSend(v5, "length"));
    v6 = _NSPrintForDebugger_result;
    *(_BYTE *)(v6 + objc_msgSend(v5, "length")) = 0;
    _CFAutoreleasePoolPop();
    return (const char *)_NSPrintForDebugger_result;
  }
  else
  {
    _CFAutoreleasePoolPop();
    return "<object returned empty description>";
  }
}

uint64_t NSRecordAllocationEvent(uint64_t result)
{
  switch((int)result)
  {
    case 3:
      result = 3;
      goto LABEL_7;
    case 4:
    case 6:
      result = 12;
      goto LABEL_7;
    case 5:
    case 7:
      result = 13;
      goto LABEL_7;
    default:
      if ((_DWORD)result != 22)
        return result;
LABEL_7:
      if (*MEMORY[0x1E0C9A980])
        return __CFRecordAllocationEvent();
      return result;
  }
}

uint64_t equalBoundPath(id *a1, id *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 == a2)
    return 1;
  v4 = objc_opt_class();
  if (v4 == objc_opt_class() && (v5 = objc_msgSend(a1, "rootObject"), v5 == objc_msgSend(a2, "rootObject")))
    return objc_msgSend(a1[2], "isEqualToString:", a2[2]);
  else
    return 0;
}

uint64_t hashBoundPath(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 16), "hash");
}

void _NSKVO1AdaptorSlowDeliver(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = objc_msgSend(a6, "objectForKey:", CFSTR("new"));
  if (a3)
  {
    v13 = objc_msgSend(a6, "objectForKey:", CFSTR("old"));
    v14 = (void *)objc_msgSend(a6, "objectForKey:", CFSTR("indexes"));
    v15 = objc_msgSend((id)objc_msgSend(a6, "objectForKey:", CFSTR("kind")), "unsignedIntegerValue");
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v15 = 1;
  }
  if (v12 == *MEMORY[0x1E0C9B0D0])
    v16 = 0;
  else
    v16 = v12;
  if (v13 == *MEMORY[0x1E0C9B0D0])
    v17 = 0;
  else
    v17 = v13;
  _NSKVO1AdaptorDeliver(a1, a2, a3, v16, v17, v14, v15, a4, a5);
}

void _NSKVO1AdaptorDeliver(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSArrayChanges *v16;
  uint64_t v17;
  uint64_t v18;
  Class v19;
  _DWORD *v20;
  NSSetChanges *v21;
  uint64_t StackObservedValueClassAndBoxSize;
  uint64_t v23;
  Class v24;
  _DWORD *v25;
  NSSetChanges *v26;
  NSSetChanges *v27;
  NSSetChanges *v28;
  _QWORD v29[8];
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if ((_NSIsNSArray() & 1) != 0
      || (_NSIsNSOrderedSet() & 1) != 0
      || (_NSIsNSArray() & 1) != 0
      || _NSIsNSOrderedSet())
    {
      if (_NSIsNSArray())
        v16 = -[NSArrayChanges initWithArray:]([NSArrayChanges alloc], "initWithArray:", a5);
      else
        v16 = -[NSOrderedSetChanges initWithOrderedSet:]([NSOrderedSetChanges alloc], "initWithOrderedSet:", a5);
      v21 = (NSSetChanges *)v16;
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 3221225472;
      v29[2] = ___NSKVO1AdaptorDeliver_block_invoke;
      v29[3] = &unk_1E0F4D7A8;
      v29[4] = a9;
      v29[5] = a8;
      v29[6] = v16;
      v29[7] = a7;
      objc_msgSend(a6, "enumerateIndexesUsingBlock:", v29);
    }
    else if ((_NSIsNSSet() & 1) != 0 || _NSIsNSSet())
    {
      switch(a7)
      {
        case 1:
        case 4:
          v26 = [NSSetChanges alloc];
          if (!a5)
            a5 = objc_msgSend(MEMORY[0x1E0C99E60], "set");
          v21 = -[NSSetChanges initWithSet:](v26, "initWithSet:", a5);
          -[NSSetChanges setSet:](v21, "setSet:", a4);
          break;
        case 2:
          v27 = [NSSetChanges alloc];
          if (!a5)
            a5 = objc_msgSend(MEMORY[0x1E0C99E60], "set");
          v21 = -[NSSetChanges initWithSet:](v27, "initWithSet:", a5);
          -[NSSetChanges unionSet:](v21, "unionSet:", a4);
          break;
        case 3:
          v28 = [NSSetChanges alloc];
          if (!a4)
            a4 = objc_msgSend(MEMORY[0x1E0C99E60], "set");
          v21 = -[NSSetChanges initWithSet:](v28, "initWithSet:", a4);
          -[NSSetChanges minusSet:](v21, "minusSet:", a5);
          break;
        default:
          goto LABEL_19;
      }
    }
    else
    {
LABEL_19:
      v21 = 0;
    }
    v30[0] = 0;
    StackObservedValueClassAndBoxSize = getStackObservedValueClassAndBoxSize(v30);
    MEMORY[0x1E0C80A78](StackObservedValueClassAndBoxSize);
    v25 = objc_constructInstance(v24, (char *)v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    v25[6] = 1;
    *((_QWORD *)v25 + 1) = v21;
    *((_QWORD *)v25 + 2) = a1;
    objc_msgSend(a2, "_receiveBox:", v25);

  }
  else
  {
    v30[0] = 0;
    v17 = getStackObservedValueClassAndBoxSize(v30);
    MEMORY[0x1E0C80A78](v17);
    v20 = objc_constructInstance(v19, (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    v20[6] = 1;
    *((_QWORD *)v20 + 1) = a4;
    *((_QWORD *)v20 + 2) = a1;
    objc_msgSend(a2, "_receiveBox:", v20);
  }
}

void *_variantPermutations(void *a1)
{
  void *v1;
  unint64_t v2;
  unint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[128];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v1 = a1;
  v19 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(a1, "count");
  if (v2 >= 2)
  {
    v3 = v2;
    if (v2 < 5)
    {
      v5 = (void *)objc_msgSend(v1, "firstObject");
      v6 = (void *)_variantPermutations(objc_msgSend(v1, "subarrayWithRange:", 1, v3 - 1));
      v1 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (2 * objc_msgSend(v6, "count")) | 1);
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      v16 = 0u;
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v12, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v14;
        do
        {
          v10 = 0;
          do
          {
            if (*(_QWORD *)v14 != v9)
              objc_enumerationMutation(v6);
            objc_msgSend(v1, "addObject:", objc_msgSend(v5, "stringByAppendingString:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v10++)));
          }
          while (v8 != v10);
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v12, 16);
        }
        while (v8);
      }
      objc_msgSend(v1, "addObject:", v5);
      objc_msgSend(v1, "addObjectsFromArray:", v6);
    }
    else
    {
      v4 = _NSOSLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v18 = v1;
        _os_log_impl(&dword_1817D9000, v4, OS_LOG_TYPE_DEFAULT, "Too many variant permutations to compute: %@", buf, 0xCu);
      }
      return (void *)MEMORY[0x1E0C9AA60];
    }
  }
  return v1;
}

void WebNSErrorExtrasInit()
{
  if (!descriptions)
  {
    _CFAutoreleasePoolPush();
    descriptions = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
    _CFAutoreleasePoolPop();
  }
}

NSError *_NSErrorWithFilePathAndEncoding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char isKindOfClass;
  const NSErrorUserInfoKey *v7;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v7 = &NSURLErrorKey;
  if ((isKindOfClass & 1) == 0)
    v7 = &NSFilePathErrorKey;
  return +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), a1, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", a2, *v7, +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3), CFSTR("NSStringEncoding"), 0));
}

NSError *_NSErrorWithFilePathErrnoAndVariant(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(a1, a2, a3, a4, 0);
}

NSError *_NSErrorWithFilePathAndErrno(uint64_t a1, uint64_t a2, int a3)
{
  return _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(a1, a2, a3, 0, 0);
}

NSString *encodingName(void *a1)
{
  NSString *result;
  NSString *v2;

  result = +[NSString localizedNameOfStringEncoding:](NSString, "localizedNameOfStringEncoding:", objc_msgSend(a1, "unsignedIntegerValue"));
  if (result)
  {
    v2 = result;
    if (-[NSString length](result, "length"))
      return v2;
    else
      return 0;
  }
  return result;
}

NSString *validationValue(uint64_t a1)
{
  if (_NSIsNSNumber())
    return +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", CFSTR("%@"), a1);
  else
    return +[NSString stringWithFormat:](NSString, "stringWithFormat:", objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("\\U201c%@\\U201d"), &stru_1E0F56070, CFSTR("FoundationErrors")), a1);
}

NSError *_NSErrorWithCloudSharingError(void *a1, void *a2)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  if (!a1 || (objc_msgSend((id)objc_msgSend(a1, "domain"), "isEqualToString:", CFSTR("NSCocoaErrorDomain")) & 1) != 0)
    return (NSError *)a1;
  if (objc_msgSend((id)objc_msgSend(a1, "domain"), "isEqualToString:", _MergedGlobals_83()))
  {
    v5 = a1;
LABEL_6:
    v6 = _cocoaDomainCodeFromCloudKitError(v5);
    goto LABEL_17;
  }
  v7 = (void *)objc_msgSend(a1, "domain");
  if (!objc_msgSend(v7, "isEqualToString:", off_1ECD04CA0()))
  {
LABEL_16:
    v6 = 5375;
    goto LABEL_17;
  }
  v8 = objc_msgSend(a1, "code");
  v6 = 4;
  if (v8 <= 22)
  {
    if (v8 == 5)
      goto LABEL_17;
    if (v8 == 17)
    {
      v5 = (void *)objc_msgSend((id)objc_msgSend(a1, "userInfo"), "objectForKeyedSubscript:", CFSTR("NSUnderlyingError"));
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  if (v8 == 23)
  {
    v6 = 3072;
    goto LABEL_17;
  }
  if (v8 != 24)
  {
    if (v8 == 34)
    {
      v6 = 640;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_17:
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithObject:forKey:", a1, CFSTR("NSUnderlyingError"));
  v10 = (void *)objc_msgSend(a2, "_variantSubstrings");
  if (objc_msgSend(v10, "count"))
    objc_msgSend(v9, "setObject:forKey:", objc_msgSend(v10, "componentsJoinedByString:", CFSTR(",")), CFSTR("NSUserStringVariant"));
  return +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), v6, v9);
}

uint64_t _cocoaDomainCodeFromCloudKitError(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(a1, "code");
  v3 = 5120;
  switch(v2)
  {
    case 2:
      v7 = 0;
      v8 = &v7;
      v9 = 0x2020000000;
      v10 = 5375;
      v4 = (void *)objc_msgSend((id)objc_msgSend(a1, "userInfo"), "objectForKeyedSubscript:", getCKPartialErrorsByItemIDKey[0]());
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = ___cocoaDomainCodeFromCloudKitError_block_invoke;
      v6[3] = &unk_1E0F4D968;
      v6[4] = &v7;
      objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v6);
      v3 = v8[3];
      _Block_object_dispose(&v7, 8);
      return v3;
    case 3:
    case 4:
    case 6:
    case 7:
    case 23:
      return v3;
    case 5:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 24:
      return 5375;
    case 10:
      return 5124;
    case 14:
      return 5123;
    case 20:
      return 3072;
    case 25:
      return 5121;
    default:
      if (v2 == 29)
        return 5122;
      if (v2 == 32)
        return 5124;
      return 5375;
  }
}

void sub_181F38AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t initUTTypeConformsTo(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t (*v5)();

  v4 = (void *)MobileCoreServicesLibrary_frameworkLibrary_0;
  if (!MobileCoreServicesLibrary_frameworkLibrary_0)
  {
    v4 = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_0 = (uint64_t)v4;
    if (!v4)
      __assert_rtn("MobileCoreServicesLibrary", "NSError_Private.m", 32, "frameworkLibrary");
  }
  v5 = (uint64_t (*)())dlsym(v4, "UTTypeConformsTo");
  softLinkUTTypeConformsTo[0] = v5;
  if (!v5)
    __assert_rtn("initUTTypeConformsTo", "NSError_Private.m", 33, "softLinkUTTypeConformsTo");
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initCKErrorDomain()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = CloudKitLibrary();
  v1 = (uint64_t *)dlsym(v0, "CKErrorDomain");
  if (!v1)
    __assert_rtn("initCKErrorDomain", "NSError_Private.m", 45, "constant");
  result = *v1;
  constantCKErrorDomain = result;
  _MergedGlobals_83 = CKErrorDomainFunction;
  return result;
}

void *CloudKitLibrary()
{
  void *result;

  result = (void *)CloudKitLibrary_frameworkLibrary;
  if (!CloudKitLibrary_frameworkLibrary)
  {
    result = dlopen("/System/Library/Frameworks/CloudKit.framework/CloudKit", 2);
    CloudKitLibrary_frameworkLibrary = (uint64_t)result;
    if (!result)
      __assert_rtn("CloudKitLibrary", "NSError_Private.m", 43, "frameworkLibrary");
  }
  return result;
}

uint64_t CKErrorDomainFunction()
{
  return constantCKErrorDomain;
}

uint64_t ___cocoaDomainCodeFromCloudKitError_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = _cocoaDomainCodeFromCloudKitError(a3);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 5375)
    *a4 = 1;
  return result;
}

uint64_t initCKPartialErrorsByItemIDKey()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = CloudKitLibrary();
  v1 = (uint64_t *)dlsym(v0, "CKPartialErrorsByItemIDKey");
  if (!v1)
    __assert_rtn("initCKPartialErrorsByItemIDKey", "NSError_Private.m", 44, "constant");
  result = *v1;
  constantCKPartialErrorsByItemIDKey = result;
  getCKPartialErrorsByItemIDKey[0] = CKPartialErrorsByItemIDKeyFunction;
  return result;
}

uint64_t CKPartialErrorsByItemIDKeyFunction()
{
  return constantCKPartialErrorsByItemIDKey;
}

uint64_t initBRCloudDocsErrorDomain()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = (void *)qword_1ECD099B0;
  if (!qword_1ECD099B0)
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs", 2);
    qword_1ECD099B0 = (uint64_t)v0;
    if (!v0)
      __assert_rtn("CloudDocsLibrary", "NSError_Private.m", 46, "frameworkLibrary");
  }
  v1 = (uint64_t *)dlsym(v0, "BRCloudDocsErrorDomain");
  if (!v1)
    __assert_rtn("initBRCloudDocsErrorDomain", "NSError_Private.m", 47, "constant");
  result = *v1;
  qword_1ECD099A8 = result;
  off_1ECD04CA0 = BRCloudDocsErrorDomainFunction;
  return result;
}

uint64_t BRCloudDocsErrorDomainFunction()
{
  return qword_1ECD099A8;
}

uint64_t _NSRaiseError()
{
  return _CFDoExceptionOperation();
}

uint64_t _NSExceptionRaiser()
{
  return _CFDoExceptionOperation();
}

uint64_t _NSSetExceptionRaiser()
{
  return _CFDoExceptionOperation();
}

void *_userInfoForFileAndLine(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  if (!a1 && !a2)
    return 0;
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v4 = v5;
  if (a1)
    objc_msgSend(v5, "setObject:forKey:", a1, CFSTR("NSAssertFile"));
  if (a2)
    objc_msgSend(v4, "setObject:forKey:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2), CFSTR("NSAssertLine"));
  return v4;
}

uint64_t sub_181F398F8()
{
  return 0;
}

uint64_t sub_181F39938()
{
  return 0;
}

uint64_t sub_181F39978()
{
  return 0;
}

uint64_t sub_181F399C0()
{
  return 0;
}

uint64_t sub_181F39A00()
{
  return 0;
}

uint64_t sub_181F39A40()
{
  return 0;
}

uint64_t sub_181F39A80()
{
  return 0;
}

uint64_t sub_181F39AC0()
{
  return 0;
}

uint64_t sub_181F39B00()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181F39B40()
{
  return 0;
}

uint64_t sub_181F39B80()
{
  return 0;
}

uint64_t sub_181F39BC0()
{
  return 0;
}

uint64_t sub_181F39C00()
{
  return 0;
}

uint64_t sub_181F39C40()
{
  return 0;
}

uint64_t sub_181F39C80()
{
  return 0;
}

uint64_t sub_181F39CC0()
{
  return 0;
}

uint64_t sub_181F39D00()
{
  return 0;
}

uint64_t sub_181F39D40()
{
  return 0;
}

uint64_t sub_181F3A154()
{
  return 0;
}

uint64_t sub_181F3A194()
{
  return 0;
}

uint64_t sub_181F3A1D4()
{
  return 0;
}

uint64_t sub_181F3A284()
{
  return 0;
}

uint64_t sub_181F3A390()
{
  return 0;
}

uint64_t sub_181F3A3D0()
{
  return 0;
}

void sub_181F3A46C()
{
  _QWORD *v0;

  if (v0)
    *v0 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0);
  JUMPOUT(0x181F3A43CLL);
}

void sub_181F3A554()
{
  objc_end_catch();
  JUMPOUT(0x181F3A560);
}

uint64_t sub_181F3A598()
{
  return 0;
}

void sub_181F3A63C()
{
  _QWORD *v0;

  if (v0)
    *v0 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0);
  JUMPOUT(0x181F3A60CLL);
}

void sub_181F3A724()
{
  objc_end_catch();
  JUMPOUT(0x181F3A730);
}

void sub_181F3A808()
{
  _QWORD *v0;

  if (v0)
    *v0 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0);
  JUMPOUT(0x181F3A7D8);
}

void sub_181F3A8F0()
{
  objc_end_catch();
  JUMPOUT(0x181F3A8FCLL);
}

uint64_t sub_181F3A934()
{
  return 0;
}

void sub_181F3A9E0()
{
  _QWORD *v0;

  if (v0)
    *v0 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0);
  JUMPOUT(0x181F3A9B0);
}

void sub_181F3AAC8()
{
  objc_end_catch();
  JUMPOUT(0x181F3AAD4);
}

uint64_t sub_181F3AB0C()
{
  return 0;
}

void sub_181F3ABB8()
{
  _QWORD *v0;

  if (v0)
    *v0 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0);
  JUMPOUT(0x181F3AB88);
}

void sub_181F3ACA0()
{
  objc_end_catch();
  JUMPOUT(0x181F3ACACLL);
}

void sub_181F3AD84()
{
  _QWORD *v0;

  if (v0)
    *v0 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0);
  JUMPOUT(0x181F3AD54);
}

void sub_181F3AE6C()
{
  objc_end_catch();
  JUMPOUT(0x181F3AE78);
}

void sub_181F3AF50()
{
  _QWORD *v0;

  if (v0)
    *v0 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0);
  JUMPOUT(0x181F3AF20);
}

void sub_181F3B038()
{
  objc_end_catch();
  JUMPOUT(0x181F3B044);
}

void sub_181F3B114()
{
  _QWORD *v0;

  if (v0)
    *v0 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0);
  JUMPOUT(0x181F3B0E4);
}

void sub_181F3B1FC()
{
  objc_end_catch();
  JUMPOUT(0x181F3B208);
}

void sub_181F3B2D8()
{
  _QWORD *v0;

  if (v0)
    *v0 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0);
  JUMPOUT(0x181F3B2A8);
}

void sub_181F3B3C0()
{
  objc_end_catch();
  JUMPOUT(0x181F3B3CCLL);
}

uint64_t sub_181F3B404()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_181F3B444()
{
  return 0;
}

uint64_t sub_181F3B4BC()
{
  return 0;
}

uint64_t unsetFlag(uint64_t result, __int16 a2)
{
  unsigned __int16 *v2;
  unsigned __int16 v3;

  v2 = (unsigned __int16 *)(result + 100);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 & ~a2, v2));
  return result;
}

void _NSFileHandleRaiseOperationExceptionWhileReading(objc_class *a1, const char *a2, int a3)
{
  const char *v6;
  int *v7;
  NSError *v8;
  void *v9;
  const __CFString *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  if (*__error() < 1 || *__error() >= *MEMORY[0x1E0C85778])
    v6 = "unknown error";
  else
    v6 = *(const char **)(MEMORY[0x1E0C85768] + 8 * *__error());
  v7 = __error();
  v8 = _NSErrorWithFilePathAndErrno(*v7, 0, a3);
  v10 = CFSTR("NSFileHandleOperationExceptionUnderlyingError");
  v11[0] = v8;
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSFileHandleOperationException"), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: %s"), _NSMethodExceptionProem(a1, a2), v6), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1));
  objc_exception_throw(v9);
}

uint64_t sub_181F3C2A4()
{
  return 0;
}

uint64_t sub_181F3C2E4()
{
  return 0;
}

uint64_t _NSFrameworkHandleForLibrarianSymbols()
{
  if (qword_1ECD09788 != -1)
    dispatch_once(&qword_1ECD09788, &__block_literal_global_10);
  return qword_1ECD09780;
}

uint64_t sub_181F3C974()
{
  return 0;
}

uint64_t sub_181F3C9B4()
{
  return 0;
}

uint64_t sub_181F3C9F4()
{
  return 0;
}

uint64_t sub_181F3CA34()
{
  return 0;
}

void sub_181F3DD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSError *_cocoaDomainErrorForLibrarianError(uint64_t a1, void *a2, int a3)
{
  void *v6;
  uint64_t v8;
  uint64_t v9;

  v6 = (void *)objc_msgSend(a2, "domain");
  if (objc_msgSend(v6, "isEqualToString:", CFSTR("NSCocoaErrorDomain")))
    return (NSError *)a2;
  if (objc_msgSend(v6, "isEqualToString:", CFSTR("NSPOSIXErrorDomain")))
  {
    v8 = objc_msgSend(a2, "code");
    return _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(v8, a1, a3, 0, (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", a2, CFSTR("NSUnderlyingError")));
  }
  else
  {
    if (a3)
      v9 = 256;
    else
      v9 = 512;
    return +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), v9, objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithObjectsAndKeys:", a2, CFSTR("NSUnderlyingError"), a1, CFSTR("NSURL"), 0));
  }
}

NSError *_librarianMissingError(int a1)
{
  uint64_t v1;

  if (a1)
    v1 = 256;
  else
    v1 = 512;
  return +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), v1, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("This feature is not enabled on this machine."), &stru_1E0F56070, CFSTR("Document")), CFSTR("NSLocalizedDescription")));
}

void sub_181F3E190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181F3E340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181F3E7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181F3EA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 136), 8);
  _Unwind_Resume(a1);
}

void _postUbqiuityAccountChangeNotification()
{
  __CFRunLoop *Main;
  __CFRunLoop *v1;

  if (off_1ECD09830)
  {
    if (off_1ECD09830())
    {
      Main = CFRunLoopGetMain();
      CFRunLoopPerformBlock(Main, (CFTypeRef)*MEMORY[0x1E0C9B270], &__block_literal_global_566);
      v1 = CFRunLoopGetMain();
      CFRunLoopWakeUp(v1);
    }
  }
}

void sub_181F3F54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__301(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose__302(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void sub_181F3F8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_181F3FF88(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_181F407F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void ___postUbqiuityAccountChangeNotification_block_invoke()
{
  void *v0;

  v0 = (void *)MEMORY[0x186DA8F78]();
  -[NSNotificationCenter postNotificationName:object:](+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"), "postNotificationName:object:", CFSTR("NSUbiquityIdentityDidChangeNotification"), 0);
  objc_autoreleasePoolPop(v0);
}

uint64_t int_sort(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t sub_181F4187C()
{
  return 0;
}

uint64_t sub_181F418C8()
{
  return 0;
}

void sub_181F42A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_181F42CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t NSExtensionIsPredicateSafeToExecuteWithObject()
{
  return 0;
}

uint64_t NSExtensionIsSafeKeyPathForObject()
{
  return 0;
}

uint64_t initNSDocumentTypeDocumentAttribute()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = UIFoundationLibrary();
  v1 = (uint64_t *)dlsym(v0, "NSDocumentTypeDocumentAttribute");
  if (!v1)
    __assert_rtn("initNSDocumentTypeDocumentAttribute", "NSExtensionItem.m", 33, "constant");
  result = *v1;
  constantNSDocumentTypeDocumentAttribute = result;
  _MergedGlobals_84 = NSDocumentTypeDocumentAttributeFunction;
  return result;
}

uint64_t NSDocumentTypeDocumentAttributeFunction()
{
  return constantNSDocumentTypeDocumentAttribute;
}

uint64_t initNSRTFTextDocumentType()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = UIFoundationLibrary();
  v1 = (uint64_t *)dlsym(v0, "NSRTFTextDocumentType");
  if (!v1)
    __assert_rtn("initNSRTFTextDocumentType", "NSExtensionItem.m", 34, "constant");
  result = *v1;
  constantNSRTFTextDocumentType = result;
  off_1ECD04CB0 = NSRTFTextDocumentTypeFunction;
  return result;
}

uint64_t NSRTFTextDocumentTypeFunction()
{
  return constantNSRTFTextDocumentType;
}

void *UIFoundationLibrary()
{
  void *result;

  result = (void *)UIFoundationLibrary_frameworkLibrary;
  if (!UIFoundationLibrary_frameworkLibrary)
  {
    result = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    UIFoundationLibrary_frameworkLibrary = (uint64_t)result;
    if (!result)
      __assert_rtn("UIFoundationLibrary", "NSExtensionItem.m", 32, "frameworkLibrary");
  }
  return result;
}

uint64_t initkUTTypeFileURL()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = CoreServicesLibrary();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeFileURL");
  if (!v1)
    __assert_rtn("initkUTTypeFileURL", "NSExtensionItem.m", 39, "constant");
  result = *v1;
  constantkUTTypeFileURL = result;
  off_1ECD04CB8 = kUTTypeFileURLFunction;
  return result;
}

void *CoreServicesLibrary()
{
  void *result;

  result = (void *)CoreServicesLibrary_frameworkLibrary;
  if (!CoreServicesLibrary_frameworkLibrary)
  {
    result = dlopen("/System/Library/Frameworks/CoreServices.framework/CoreServices", 2);
    CoreServicesLibrary_frameworkLibrary = (uint64_t)result;
    if (!result)
      __assert_rtn("CoreServicesLibrary", "NSExtensionItem.m", 36, "frameworkLibrary");
  }
  return result;
}

uint64_t kUTTypeFileURLFunction()
{
  return constantkUTTypeFileURL;
}

uint64_t initkUTTypeURL()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = CoreServicesLibrary();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeURL");
  if (!v1)
    __assert_rtn("initkUTTypeURL", "NSExtensionItem.m", 37, "constant");
  result = *v1;
  constantkUTTypeURL = result;
  off_1ECD04CC0 = kUTTypeURLFunction;
  return result;
}

uint64_t kUTTypeURLFunction()
{
  return constantkUTTypeURL;
}

uint64_t initFPCopyExtensionMatchingDictionaryForItem(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t (*v5)();

  v4 = (void *)FileProviderLibrary_frameworkLibrary;
  if (!FileProviderLibrary_frameworkLibrary)
  {
    v4 = dlopen("/System/Library/Frameworks/FileProvider.framework/FileProvider", 2);
    FileProviderLibrary_frameworkLibrary = (uint64_t)v4;
    if (!v4)
      __assert_rtn("FileProviderLibrary", "NSExtensionItem.m", 50, "frameworkLibrary");
  }
  v5 = (uint64_t (*)())dlsym(v4, "FPCopyExtensionMatchingDictionaryForItem");
  off_1ECD04CD0 = v5;
  if (!v5)
    __assert_rtn("initFPCopyExtensionMatchingDictionaryForItem", "NSExtensionItem.m", 52, "softLinkFPCopyExtensionMatchingDictionaryForItem");
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initkUTTypeData()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = CoreServicesLibrary();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeData");
  if (!v1)
    __assert_rtn("initkUTTypeData", "NSExtensionItem.m", 38, "constant");
  result = *v1;
  constantkUTTypeData = result;
  off_1ECD04CC8 = kUTTypeDataFunction;
  return result;
}

uint64_t kUTTypeDataFunction()
{
  return constantkUTTypeData;
}

BOOL NSEqualPoints(NSPoint aPoint, NSPoint bPoint)
{
  return aPoint.y == bPoint.y && aPoint.x == bPoint.x;
}

NSRect NSOffsetRect(NSRect aRect, CGFloat dX, CGFloat dY)
{
  double v3;
  double v4;

  v3 = aRect.origin.x + dX;
  v4 = aRect.origin.y + dY;
  aRect.origin.y = v4;
  aRect.origin.x = v3;
  return aRect;
}

NSRect NSInsetRect(NSRect aRect, CGFloat dX, CGFloat dY)
{
  double v3;
  double v4;
  double v5;
  double v6;
  NSRect result;

  v3 = aRect.origin.x + dX;
  v4 = aRect.origin.y + dY;
  v5 = aRect.size.width - dX - dX;
  v6 = aRect.size.height - dY - dY;
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

NSRect NSIntegralRect(NSRect aRect)
{
  double height;
  double v2;
  double width;
  double y;
  double x;
  double v6;
  double v7;
  double v8;
  NSRect result;

  height = aRect.size.height;
  v2 = 0.0;
  if (aRect.size.width <= 0.0)
  {
    v6 = 0.0;
    v7 = 0.0;
    v8 = 0.0;
  }
  else
  {
    width = aRect.size.width;
    y = aRect.origin.y;
    x = aRect.origin.x;
    v6 = 0.0;
    v7 = 0.0;
    v8 = 0.0;
    if (height > 0.0)
    {
      v8 = floor(x);
      v7 = floor(y);
      v6 = ceil(x + width) - v8;
      v2 = ceil(y + height) - v7;
    }
  }
  result.size.height = v2;
  result.size.width = v6;
  result.origin.y = v7;
  result.origin.x = v8;
  return result;
}

unint64_t NSIntegralRectFlipOptions(unint64_t a1)
{
  return (a1 >> 2) & 0x20202 | a1 & 0xFFFFFFFFFFF5F5F5 | (4 * (int)a1) & 0x80808;
}

double roundTowardsPlusInfinity(double a1)
{
  return floor(a1 + 0.5);
}

double roundTowardsMinusInfinity(double a1)
{
  return ceil(a1 + -0.5);
}

void NSDivideRect(NSRect inRect, NSRect *slice, NSRect *rem, CGFloat amount, NSRectEdge edge)
{
  double width;
  double x;
  double height;

  *slice = inRect;
  *rem = inRect;
  if ((edge | 2) == 2)
  {
    if (inRect.size.width >= amount)
      width = amount;
    else
      width = inRect.size.width;
    slice->size.width = width;
    x = rem->size.width - width;
    rem->size.width = x;
    if (edge)
    {
      inRect.origin.y = slice->origin.x;
      rem = slice;
    }
    else
    {
      inRect.origin.y = slice->size.width;
      x = inRect.origin.x;
    }
  }
  else
  {
    if (inRect.size.height >= amount)
      height = amount;
    else
      height = inRect.size.height;
    slice->size.height = height;
    x = rem->size.height - height;
    rem->size.height = x;
    if (edge == NSRectEdgeMinY)
    {
      x = slice->size.height;
      rem = (NSRect *)((char *)rem + 8);
    }
    else
    {
      inRect.origin.y = slice->origin.y;
      rem = (NSRect *)&slice->origin.y;
    }
  }
  rem->origin.x = inRect.origin.y + x;
}

BOOL NSPointInRect(NSPoint aPoint, NSRect aRect)
{
  double v2;

  v2 = aRect.origin.x + aRect.size.width;
  return aPoint.x >= aRect.origin.x
      && aPoint.x < v2
      && aPoint.y >= aRect.origin.y
      && aPoint.y < aRect.origin.y + aRect.size.height;
}

BOOL NSMouseInRect(NSPoint aPoint, NSRect aRect, BOOL flipped)
{
  double v3;
  double v6;

  v3 = aRect.origin.x + aRect.size.width;
  if (aPoint.x < aRect.origin.x || aPoint.x >= v3)
    return 0;
  v6 = aRect.origin.y + aRect.size.height;
  if (flipped)
    return aPoint.y < v6 && aPoint.y >= aRect.origin.y;
  else
    return aPoint.y <= v6 && aPoint.y > aRect.origin.y;
}

BOOL NSContainsRect(NSRect aRect, NSRect bRect)
{
  BOOL result;

  result = 0;
  if (aRect.size.width > 0.0
    && aRect.size.height > 0.0
    && bRect.size.width > 0.0
    && bRect.size.height > 0.0
    && aRect.origin.x <= bRect.origin.x
    && aRect.origin.y <= bRect.origin.y)
  {
    return aRect.origin.x + aRect.size.width >= bRect.origin.x + bRect.size.width
        && aRect.origin.y + aRect.size.height >= bRect.origin.y + bRect.size.height;
  }
  return result;
}

BOOL NSEdgeInsetsEqual(NSEdgeInsets aInsets, NSEdgeInsets bInsets)
{
  return aInsets.top == bInsets.top
      && aInsets.left == bInsets.left
      && aInsets.bottom == bInsets.bottom
      && aInsets.right == bInsets.right;
}

NSPoint NSPointFromString(NSString *aString)
{
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  NSPoint result;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 0.0;
  v4 = 0.0;
  parseFloats(aString, 2, (uint64_t)&v3);
  v1 = v3;
  v2 = v4;
  result.y = v2;
  result.x = v1;
  return result;
}

uint64_t _foundation_swift_url_feature_enabled()
{
  if (qword_1ECD09BB0 != -1)
    dispatch_once(&qword_1ECD09BB0, &__block_literal_global_11);
  return _MergedGlobals_95;
}

uint64_t ___foundation_swift_url_feature_enabled_block_invoke()
{
  uint64_t result;
  BOOL v1;

  result = _os_feature_enabled_impl();
  if ((result & 1) != 0)
  {
    v1 = 1;
  }
  else
  {
    result = (uint64_t)getenv("NSSwiftURL");
    v1 = result != 0;
  }
  _MergedGlobals_95 = v1;
  return result;
}

void sub_181F44720(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181F44740(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x181F446BCLL);
}

void sub_181F44A54(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181F44A74(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x181F44A30);
}

void sub_181F44DB0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_181F4555C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void raiseError(uint64_t a1, const char *a2)
{
  id v3;
  const char *Name;
  void *v5;

  v3 = objc_alloc(MEMORY[0x1E0C99DA0]);
  Name = sel_getName(a2);
  v5 = (void *)objc_msgSend(v3, "initWithName:reason:userInfo:", CFSTR("NSHashTableAbstractImplementationError"), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("abstract method %s called directly on class %@"), Name, objc_opt_class()), 0);
  objc_exception_throw(v5);
}

void sub_181F45C6C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_181F46E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_181F46F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NSFreeHashTable(NSHashTable *table)
{
  if (table)
  {

  }
  else
  {
    NSLog((NSString *)CFSTR("%s: hash table argument is NULL"), "void NSFreeHashTable(NSHashTable * _Nonnull)");

  }
}

void NSResetHashTable(NSHashTable *table)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: hash table argument is NULL"), "void NSResetHashTable(NSHashTable * _Nonnull)");
  -[NSHashTable removeAllItems](table, "removeAllItems");
}

BOOL NSCompareHashTables(NSHashTable *table1, NSHashTable *table2)
{
  if (!table1)
  {
    NSLog((NSString *)CFSTR("%s: first hash table argument is NULL"), "BOOL NSCompareHashTables(NSHashTable * _Nonnull, NSHashTable * _Nonnull)");
    if (table2)
      return -[NSHashTable isEqual:](table1, "isEqual:", table2);
LABEL_5:
    NSLog((NSString *)CFSTR("%s: second hash table argument is NULL"), "BOOL NSCompareHashTables(NSHashTable * _Nonnull, NSHashTable * _Nonnull)");
    return -[NSHashTable isEqual:](table1, "isEqual:", table2);
  }
  if (!table2)
    goto LABEL_5;
  return -[NSHashTable isEqual:](table1, "isEqual:", table2);
}

NSHashTable *__cdecl NSCopyHashTableWithZone(NSHashTable *table, NSZone *zone)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: hash table argument is NULL"), zone, "NSHashTable * _Nonnull NSCopyHashTableWithZone(NSHashTable * _Nonnull, NSZone * _Nullable)");
  return (NSHashTable *)-[NSHashTable copy](table, "copy");
}

void NSHashInsertKnownAbsent(NSHashTable *table, const void *pointer)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: hash table argument is NULL"), "void NSHashInsertKnownAbsent(NSHashTable * _Nonnull, const void * _Nullable)");
  -[NSHashTable insertKnownAbsentItem:](table, "insertKnownAbsentItem:", pointer);
}

void NSHashRemove(NSHashTable *table, const void *pointer)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: hash table argument is NULL"), "void NSHashRemove(NSHashTable * _Nonnull, const void * _Nullable)");
  -[NSHashTable removeItem:](table, "removeItem:", pointer);
}

NSHashEnumerator *__cdecl NSEnumerateHashTable(NSHashEnumerator *__return_ptr retstr, NSHashTable *table)
{
  NSUInteger v4;
  void *v5;
  NSHashEnumerator *result;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  if (!table)
    NSLog((NSString *)CFSTR("%s: hash table argument is NULL"), "NSHashEnumerator NSEnumerateHashTable(NSHashTable * _Nonnull)");
  retstr->_pi = 0;
  retstr->_si = 0;
  retstr->_bs = 0;
  v4 = -[NSHashTable count](table, "count");
  retstr->_pi = v4;
  retstr->_si = 0;
  v5 = malloc_type_calloc(v4, 8uLL, 0x80040B8603338uLL);
  retstr->_bs = v5;
  v7[0] = 0;
  result = (NSHashEnumerator *)-[NSHashTable getKeys:count:](table, "getKeys:count:", v5, v7);
  retstr->_pi = v7[0];
  return result;
}

void *__cdecl NSNextHashEnumeratorItem(NSHashEnumerator *enumerator)
{
  NSUInteger si;
  void *result;

  if (!enumerator)
    NSLog((NSString *)CFSTR("%s: state argument is NULL"), "void * _Nullable NSNextHashEnumeratorItem(NSHashEnumerator * _Nonnull)");
  si = enumerator->_si;
  result = enumerator->_bs;
  if (enumerator->_pi <= si)
  {
    if (result)
    {
      free(result);
      result = 0;
      enumerator->_bs = 0;
    }
  }
  else
  {
    result = (void *)*((_QWORD *)result + si);
    enumerator->_si = si + 1;
  }
  return result;
}

void NSEndHashTableEnumeration(NSHashEnumerator *enumerator)
{
  if (!enumerator)
    NSLog((NSString *)CFSTR("%s: state argument is NULL"), "void NSEndHashTableEnumeration(NSHashEnumerator * _Nonnull)");
  enumerator->_si = enumerator->_pi;
  free(enumerator->_bs);
  enumerator->_bs = 0;
}

NSString *__cdecl NSStringFromHashTable(NSHashTable *table)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: hash table argument is NULL"), "NSString * _Nonnull NSStringFromHashTable(NSHashTable * _Nonnull)");
  return (NSString *)-[NSHashTable description](table, "description");
}

NSArray *__cdecl NSAllHashTableObjects(NSHashTable *table)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: hash table argument is NULL"), "NSArray * _Nonnull NSAllHashTableObjects(NSHashTable * _Nonnull)");
  return -[NSHashTable allObjects](table, "allObjects");
}

void freePointerHT(int a1, void *a2)
{
  free(a2);
}

uint64_t hashPointerStructHT(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

BOOL isEqualPointerStructHT(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t hashObjectHT(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "hash");
}

uint64_t isEqualObjectHT(uint64_t a1, void *a2, void *a3)
{
  if (a2 == a3)
    return 1;
  else
    return objc_msgSend(a2, "isEqual:");
}

uint64_t describeObjectHT(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "description");
}

void _NSLexiconIterateFormsOfWord(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, void *);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t);
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  uint64_t v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  (*(void (**)(uint64_t, void *, void *, char *))(a3 + 16))(a3, a1, &__block_literal_global_4, &v38);
  if (!v38)
  {
    v32 = 0;
    v33 = &v32;
    v34 = 0x3052000000;
    v35 = __Block_byref_object_copy__5;
    v36 = __Block_byref_object_dispose__5;
    v37 = 0;
    v26 = 0;
    v27 = &v26;
    v28 = 0x3052000000;
    v29 = __Block_byref_object_copy__5;
    v30 = __Block_byref_object_dispose__5;
    v31 = 0;
    v25[0] = 0;
    v25[1] = v25;
    v25[2] = 0x3052000000;
    v25[3] = __Block_byref_object_copy__5;
    v25[4] = __Block_byref_object_dispose__5;
    v25[5] = 0;
    v6 = MEMORY[0x1E0C809B0];
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v20 = ___NSLexiconIterateFormsOfWord_block_invoke_3;
    v21 = &unk_1E0F4E640;
    v23 = a2;
    v24 = v25;
    v22 = a1;
    v7 = objc_msgSend(a1, "lowercaseStringWithLocale:", a2);
    v33[5] = v7;
    if (objc_msgSend(a1, "isEqual:", v7))
    {
      v18 = v6;
      v8 = ___NSLexiconIterateFormsOfWord_block_invoke_4;
      v9 = &v18;
    }
    else
    {
      v10 = v27[5];
      if (!v10)
      {
        v10 = objc_msgSend(a1, "uppercaseStringWithLocale:", a2);
        v27[5] = v10;
      }
      if (objc_msgSend(a1, "isEqual:", v10))
      {
        v17 = v6;
        v8 = ___NSLexiconIterateFormsOfWord_block_invoke_5;
        v9 = &v17;
      }
      else
      {
        if (!objc_msgSend(a1, "isEqual:", v20((uint64_t)v19)))
        {
LABEL_24:
          _Block_object_dispose(v25, 8);
          _Block_object_dispose(&v26, 8);
          _Block_object_dispose(&v32, 8);
          return;
        }
        v16 = v6;
        v8 = ___NSLexiconIterateFormsOfWord_block_invoke_6;
        v9 = &v16;
      }
    }
    v9[1] = 3221225472;
    v9[2] = (uint64_t)v8;
    v9[3] = (uint64_t)&unk_1E0F4E668;
    v9[4] = a2;
    v11 = v33[5];
    if (!v11)
    {
      v11 = objc_msgSend(a1, "lowercaseStringWithLocale:", a2);
      v33[5] = v11;
    }
    if ((objc_msgSend(a1, "isEqual:", v11, v16) & 1) != 0)
      goto LABEL_27;
    if (!v33[5])
    {
      v12 = objc_msgSend(a1, "lowercaseStringWithLocale:", a2);
      v33[5] = v12;
    }
    (*(void (**)(uint64_t))(a3 + 16))(a3);
    if (!v38)
    {
LABEL_27:
      if ((objc_msgSend(a1, "isEqual:", v20((uint64_t)v19)) & 1) != 0
        || (v13 = v20((uint64_t)v19),
            (*(void (**)(uint64_t, uint64_t, uint64_t *, char *))(a3 + 16))(a3, v13, v9, &v38),
            !v38))
      {
        v14 = v27[5];
        if (!v14)
        {
          v14 = objc_msgSend(a1, "uppercaseStringWithLocale:", a2);
          v27[5] = v14;
        }
        if ((objc_msgSend(a1, "isEqual:", v14) & 1) == 0)
        {
          if (!v27[5])
          {
            v15 = objc_msgSend(a1, "uppercaseStringWithLocale:", a2);
            v27[5] = v15;
          }
          (*(void (**)(uint64_t))(a3 + 16))(a3);
        }
      }
    }
    goto LABEL_24;
  }
}

void sub_181F47734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Unwind_Resume(exception_object);
}

void sub_181F47E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181F47FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _NSGroupIndexesIntoSimpleRanges(uint64_t *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (a2)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v8 = *a1++;
      v7 = v8;
      if (v6 + v5 == v8)
      {
        ++v6;
      }
      else
      {
        if (v6)
          objc_msgSend(v4, "addObject:", +[NSValue valueWithRange:](NSValue, "valueWithRange:"));
        v6 = 1;
        v5 = v7;
      }
      --a2;
    }
    while (a2);
    if (v6)
      objc_msgSend(v4, "addObject:", +[NSValue valueWithRange:](NSValue, "valueWithRange:", v5));
  }
  return v4;
}

uint64_t _bitfieldSetRangesCount(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (result)
  {
    v1 = result;
    v2 = ~result;
    result = 1;
    v3 = v1;
    while (1)
    {
      v4 = (-1 << __clz(__rbit64(v3))) & v2;
      if (!v4)
        break;
      ++result;
      v3 = (-1 << __clz(__rbit64(v4))) & v1;
      if (!v3)
        return --result;
    }
  }
  return result;
}

void sub_181F4BD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __NSIndexSetChunkIterate(void *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8)
{
  unint64_t v13;
  unint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  double v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  _QWORD v40[3];
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;

  v13 = a3;
  v44 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x2000000000000000) != 0)
  {
    v16 = atomic_load(a8);
    if (v16 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v17 = v16 >= a3;
      v18 = v16 <= a4;
      if ((a2 & 2) == 0)
        v18 = v17;
      if (!v18)
        return 0;
    }
  }
  if ((a2 & 0x4000000000000000) != 0)
  {
    _CFAutoreleasePoolPush();
    v43 = 0;
    if (a4 >= v13)
    {
      v29 = a5 + a6;
      do
      {
        v30 = objc_msgSend(a1, "rangeAtIndex:", v13);
        if (v30 + v31 >= v29)
          v32 = a5 + a6;
        else
          v32 = v30 + v31;
        if (a5 > v30 || v30 >= v29)
        {
          v33 = v32 - a5;
          if (a5 >= v30 + v31)
            v33 = 0;
          if (v30 <= a5)
            v34 = v33;
          else
            v34 = 0;
          if (!v34)
            goto LABEL_43;
        }
        else if (v32 == v30)
        {
          goto LABEL_43;
        }
        __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a7);
LABEL_43:
        ++v13;
      }
      while (v13 <= a4);
    }
    return 0;
  }
  *(_QWORD *)&v19 = MEMORY[0x1E0C80A78](a1).n128_u64[0];
  v21 = (char *)v40 - v20;
  if (!objc_msgSend(a1, "__getContainmentVector:inRange:", (char *)v40 - v20, v13, a4 - v13 + 1, v19))
    return 0;
  v40[2] = v40;
  v41 = a7;
  v40[1] = _CFAutoreleasePoolPush();
  if (a4 - v13 == -1)
    return 0;
  v22 = 0;
  v23 = a4;
  while (1)
  {
    v24 = v23 - v13;
    if ((a2 & 2) == 0)
      v24 = v22;
    if (!v21[v24])
      goto LABEL_25;
    if ((a2 & 2) != 0)
      v25 = v23;
    else
      v25 = v13 + v22;
    v42 = 0;
    if ((a2 & 0x2000000000000000) == 0)
    {
      __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(v41);
      if (v42)
        goto LABEL_46;
      goto LABEL_25;
    }
    if (__NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(v41))
      break;
    if (v42)
    {
LABEL_46:
      v35 = 1;
      goto LABEL_56;
    }
    v26 = atomic_load(a8);
    if (v26 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v27 = v26 >= v13;
      v28 = v26 <= a4;
      if ((a2 & 2) == 0)
        v28 = v27;
      if (!v28)
      {
        v35 = 0;
        goto LABEL_56;
      }
    }
LABEL_25:
    ++v22;
    if (v13 - 1 == --v23)
      return 0;
  }
  while (1)
  {
    v36 = atomic_load(a8);
    if (v36 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v37 = v36 < v25;
      if ((a2 & 2) == 0)
        v37 = v25 < v36;
      if (!v37)
        break;
    }
    while (1)
    {
      v38 = __ldxr(a8);
      if (v38 != v36)
        break;
      if (!__stxr(v25, a8))
        goto LABEL_55;
    }
    __clrex();
  }
LABEL_55:
  v35 = 0;
LABEL_56:
  _CFAutoreleasePoolPop();
  return v35;
}

void sub_181F4D0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181F4D244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _NSPerformInflectionsWithObserverAndInflectionRule(void *a1, NSInflectionRule *a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  _NSAttributedStringGrammarInflection *v7;
  _QWORD v9[6];

  v9[5] = *MEMORY[0x1E0C80C00];
  v5 = _NSInflectionObserver;
  v6 = a1;
  _NSInflectionObserver = (uint64_t)a1;
  if (!a2 || +[NSInflectionRule automaticRule](NSInflectionRule, "automaticRule") == a2)
  {
    (*(void (**)(uint64_t))(a3 + 16))(a3);
  }
  else
  {
    v7 = -[_NSAttributedStringGrammarInflection initWithInflectionRule:]([_NSAttributedStringGrammarInflection alloc], "initWithInflectionRule:", a2);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___NSPerformInflectionsWithObserverAndInflectionRule_block_invoke;
    v9[3] = &unk_1E0F4E870;
    v9[4] = a3;
    -[_NSAttributedStringGrammarInflection _useInsteadOfUserInflectionInBlock:](v7, "_useInsteadOfUserInflectionInBlock:", v9);

  }
  _NSInflectionObserver = v5;

}

void sub_181F4F640(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x260], 8);
  _Unwind_Resume(a1);
}

NSString *_NSInflectionLanguageWithLensAndRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString *v3;
  char v4;

  v3 = (NSString *)(*(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(a1 + 16))(a1, CFSTR("NSLanguage"), a2, a3);
  v4 = _NSIsNSString();
  if (!v3 || (v4 & 1) == 0)
  {
    v3 = -[NSArray firstObject](-[NSBundle preferredLocalizations](+[NSBundle mainBundle](NSBundle, "mainBundle"), "preferredLocalizations"), "firstObject");
    if (!v3)
    {
      v3 = -[NSBundle developmentLocalization](+[NSBundle mainBundle](NSBundle, "mainBundle"), "developmentLocalization");
      if (!v3)
        __assert_rtn("_NSInflectionLanguageWithLensAndRange", "NSAttributedString_Inflection.m", 135, "language");
    }
  }
  return v3;
}

uint64_t _NSInflectionGrammarWithLensAndRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(a1 + 16))(a1, CFSTR("NSMorphology"), a2, a3);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v7 = (*(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(a1 + 16))(a1, CFSTR("NSGrammar"), a2, a3);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return v7;
    else
      return 0;
  }
  return v6;
}

void sub_181F51094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_181F51720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

uint64_t ___virtualizeURLKeysForAccessingFault_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result;
  void *v7;
  BOOL v8;
  void *v9;

  result = objc_msgSend(a2, "isEqualToString:", *MEMORY[0x1E0C999F0]);
  v7 = (void *)*MEMORY[0x1E0C9AC38];
  if ((_DWORD)result)
    v8 = v7 == a2;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (!v9)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
      v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
    return objc_msgSend(v9, "replaceObjectAtIndex:withObject:", a3, v7);
  }
  return result;
}

uint64_t _NSGetVoidValueWithMethod(uint64_t a1, int a2, Method m)
{
  IMP Implementation;
  SEL Name;

  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  ((void (*)(uint64_t, SEL))Implementation)(a1, Name);
  return 0;
}

id _NSGetCharValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithChar:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));
}

id _NSGetLongValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithLong:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));
}

id _NSGetUnsignedLongValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithUnsignedLong:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));
}

id _NSGetShortValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithShort:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));
}

id _NSGetUnsignedShortValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5;
  IMP Implementation;
  SEL Name;

  v5 = objc_allocWithZone((Class)NSNumber);
  Implementation = method_getImplementation(a3);
  Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithUnsignedShort:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));
}

NSValue *_NSGetRangeValueWithMethod(uint64_t a1, int a2, Method m)
{
  IMP Implementation;
  SEL Name;
  uint64_t v7;
  uint64_t v8;

  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  v7 = ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name);
  return +[NSValue valueWithRange:](NSValue, "valueWithRange:", v7, v8);
}

id _NSGetObjectGetWeakValueInIvar(uint64_t a1, int a2, Ivar v)
{
  id *v3;

  v3 = (id *)(a1 + ivar_getOffset(v));
  return objc_loadWeak(v3);
}

id _NSGetObjectGetIvarValueInIvar(void *a1, int a2, Ivar a3)
{
  return object_getIvar(a1, a3);
}

id _NSGetCharValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithChar:", *(char *)(a1 + ivar_getOffset(a3)));
}

id _NSGetUnsignedCharValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedChar:", *(unsigned __int8 *)(a1 + ivar_getOffset(a3)));
}

id _NSGetDoubleValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", *(double *)(a1 + ivar_getOffset(a3)));
}

id _NSGetFloatValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  id v5;
  double v6;

  v5 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v6) = *(_DWORD *)(a1 + ivar_getOffset(a3));
  return (id)objc_msgSend(v5, "initWithFloat:", v6);
}

id _NSGetIntValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInt:", *(unsigned int *)(a1 + ivar_getOffset(a3)));
}

id _NSGetUnsignedIntValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", *(unsigned int *)(a1 + ivar_getOffset(a3)));
}

id _NSGetLongValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithLong:", *(_QWORD *)(a1 + ivar_getOffset(a3)));
}

id _NSGetUnsignedLongValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLong:", *(_QWORD *)(a1 + ivar_getOffset(a3)));
}

id _NSGetLongLongValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithLongLong:", *(_QWORD *)(a1 + ivar_getOffset(a3)));
}

id _NSGetShortValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithShort:", *(__int16 *)(a1 + ivar_getOffset(a3)));
}

id _NSGetUnsignedShortValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedShort:", *(unsigned __int16 *)(a1 + ivar_getOffset(a3)));
}

NSValue *_NSGetPointValueInIvar(uint64_t a1, int a2, Ivar v)
{
  ptrdiff_t Offset;

  Offset = ivar_getOffset(v);
  return +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", *(double *)(a1 + Offset), *(double *)(a1 + Offset + 8));
}

NSValue *_NSGetRangeValueInIvar(uint64_t a1, int a2, Ivar v)
{
  ptrdiff_t Offset;

  Offset = ivar_getOffset(v);
  return +[NSValue valueWithRange:](NSValue, "valueWithRange:", *(_QWORD *)(a1 + Offset), *(_QWORD *)(a1 + Offset + 8));
}

NSValue *_NSGetRectValueInIvar(uint64_t a1, int a2, Ivar v)
{
  ptrdiff_t Offset;

  Offset = ivar_getOffset(v);
  return +[NSValue valueWithRect:](NSValue, "valueWithRect:", *(double *)(a1 + Offset), *(double *)(a1 + Offset + 8), *(double *)(a1 + Offset + 16), *(double *)(a1 + Offset + 24));
}

NSValue *_NSGetSizeValueInIvar(uint64_t a1, int a2, Ivar v)
{
  ptrdiff_t Offset;

  Offset = ivar_getOffset(v);
  return +[NSValue valueWithSize:](NSValue, "valueWithSize:", *(double *)(a1 + Offset), *(double *)(a1 + Offset + 8));
}

NSValue *_NSGetValueInIvar(uint64_t a1, int a2, Ivar v)
{
  const char *TypeEncoding;
  size_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  char v11;
  int v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  TypeEncoding = ivar_getTypeEncoding(v);
  v6 = strlen(TypeEncoding);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v12 = *(unsigned __int8 *)TypeEncoding++;
      v11 = v12;
      if (v12 == 34)
      {
        v9 ^= 1u;
      }
      else if ((v9 & 1) != 0)
      {
        v9 = 1;
      }
      else
      {
        v9 = 0;
        v8[v10++] = v11;
      }
      --v7;
    }
    while (v7);
  }
  else
  {
    v10 = 0;
  }
  v8[v10] = 0;
  return +[NSValue valueWithBytes:objCType:](NSValue, "valueWithBytes:objCType:", a1 + ivar_getOffset(v), v8);
}

uint64_t _NSSetCharValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, objc_msgSend(a3, "charValue"));
}

uint64_t _NSSetUnsignedCharValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, objc_msgSend(a3, "unsignedCharValue"));
}

uint64_t _NSSetUnsignedIntValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, objc_msgSend(a3, "unsignedIntValue"));
}

uint64_t _NSSetLongValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, objc_msgSend(a3, "longValue"));
}

uint64_t _NSSetUnsignedLongValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, objc_msgSend(a3, "unsignedLongValue"));
}

uint64_t _NSSetShortValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, objc_msgSend(a3, "shortValue"));
}

uint64_t _NSSetUnsignedShortValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, objc_msgSend(a3, "unsignedShortValue"));
}

uint64_t _NSSetPointValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  objc_msgSend(a3, "pointValue");
  return ((uint64_t (*)(void *, SEL))Implementation)(a1, Name);
}

uint64_t _NSSetRangeValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  uint64_t v9;
  uint64_t v10;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  v9 = objc_msgSend(a3, "rangeValue");
  return ((uint64_t (*)(void *, SEL, uint64_t, uint64_t))Implementation)(a1, Name, v9, v10);
}

uint64_t _NSSetRectValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  objc_msgSend(a3, "rectValue");
  return ((uint64_t (*)(void *, SEL))Implementation)(a1, Name);
}

uint64_t _NSSetSizeValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  objc_msgSend(a3, "sizeValue");
  return ((uint64_t (*)(void *, SEL))Implementation)(a1, Name);
}

id _NSSetObjectSetManualValueForKeyInIvar(uint64_t a1, int a2, void *a3, int a4, Ivar v)
{
  ptrdiff_t Offset;
  id v8;
  id result;

  Offset = ivar_getOffset(v);
  v8 = *(id *)(a1 + Offset);
  result = a3;
  *(_QWORD *)(a1 + Offset) = result;
  return result;
}

ptrdiff_t _NSSetObjectSetAssignValueForKeyInIvar(uint64_t a1, int a2, uint64_t a3, int a4, Ivar v)
{
  ptrdiff_t result;

  result = ivar_getOffset(v);
  *(_QWORD *)(a1 + result) = a3;
  return result;
}

void _NSSetObjectSetIvarValueForKeyInIvar(void *a1, int a2, void *a3, int a4, Ivar ivar)
{
  object_setIvar(a1, ivar, a3);
}

ptrdiff_t _NSSetCharValueForKeyInIvar(void *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  char v7;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v7 = objc_msgSend(a3, "charValue");
  result = ivar_getOffset(a5);
  *((_BYTE *)a1 + result) = v7;
  return result;
}

ptrdiff_t _NSSetUnsignedCharValueForKeyInIvar(void *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  char v7;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v7 = objc_msgSend(a3, "unsignedCharValue");
  result = ivar_getOffset(a5);
  *((_BYTE *)a1 + result) = v7;
  return result;
}

ptrdiff_t _NSSetDoubleValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  uint64_t v7;
  uint64_t v8;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  objc_msgSend(a3, "doubleValue");
  v8 = v7;
  result = ivar_getOffset(a5);
  *(_QWORD *)&a1[result] = v8;
  return result;
}

ptrdiff_t _NSSetFloatValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  int v7;
  int v8;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  objc_msgSend(a3, "floatValue");
  v8 = v7;
  result = ivar_getOffset(a5);
  *(_DWORD *)&a1[result] = v8;
  return result;
}

ptrdiff_t _NSSetIntValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  int v7;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v7 = objc_msgSend(a3, "intValue");
  result = ivar_getOffset(a5);
  *(_DWORD *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetUnsignedIntValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  int v7;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v7 = objc_msgSend(a3, "unsignedIntValue");
  result = ivar_getOffset(a5);
  *(_DWORD *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetLongValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  uint64_t v7;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v7 = objc_msgSend(a3, "longValue");
  result = ivar_getOffset(a5);
  *(_QWORD *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetUnsignedLongValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  uint64_t v7;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v7 = objc_msgSend(a3, "unsignedLongValue");
  result = ivar_getOffset(a5);
  *(_QWORD *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetShortValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  __int16 v7;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v7 = objc_msgSend(a3, "shortValue");
  result = ivar_getOffset(a5);
  *(_WORD *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetUnsignedShortValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  __int16 v7;
  ptrdiff_t result;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v7 = objc_msgSend(a3, "unsignedShortValue");
  result = ivar_getOffset(a5);
  *(_WORD *)&a1[result] = v7;
  return result;
}

uint64_t _NSSetPointValueForKeyInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v6 = &a1[ivar_getOffset(v)];
  result = objc_msgSend(a3, "pointValue");
  *(_QWORD *)v6 = v8;
  *((_QWORD *)v6 + 1) = v9;
  return result;
}

uint64_t _NSSetRangeValueForKeyInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  char *v6;
  uint64_t result;
  uint64_t v8;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v6 = &a1[ivar_getOffset(v)];
  result = objc_msgSend(a3, "rangeValue");
  *(_QWORD *)v6 = result;
  *((_QWORD *)v6 + 1) = v8;
  return result;
}

uint64_t _NSSetRectValueForKeyInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v6 = &a1[ivar_getOffset(v)];
  result = objc_msgSend(a3, "rectValue");
  *(_QWORD *)v6 = v8;
  *((_QWORD *)v6 + 1) = v9;
  *((_QWORD *)v6 + 2) = v10;
  *((_QWORD *)v6 + 3) = v11;
  return result;
}

uint64_t _NSSetSizeValueForKeyInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  v6 = &a1[ivar_getOffset(v)];
  result = objc_msgSend(a3, "sizeValue");
  *(_QWORD *)v6 = v8;
  *((_QWORD *)v6 + 1) = v9;
  return result;
}

uint64_t _NSSetValueInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  if (a3)
    return objc_msgSend(a3, "getValue:", &a1[ivar_getOffset(v)]);
  else
    return objc_msgSend(a1, "setNilValueForKey:", a4);
}

void sub_181F53A5C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_181F53BE0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_181F53D64(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id _NSKeyValuePrimitiveGetterForClassAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2, void *a3)
{
  const __CFSet *v6;
  __int128 v7;
  CFHashCode v8;
  id Value;
  CFSetCallBacks v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  v6 = (const __CFSet *)qword_1ECD09BF0;
  if (!qword_1ECD09BF0)
  {
    v7 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
    *(_OWORD *)&v11.version = *MEMORY[0x1E0C9B3B0];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    v6 = CFSetCreateMutable(0, 0, &v11);
    qword_1ECD09BF0 = (uint64_t)v6;
  }
  v11.version = 0;
  v11.retain = a1;
  *(_OWORD *)&v11.release = (unint64_t)a2;
  if (a2)
  {
    v8 = CFHash(a2);
    v6 = (const __CFSet *)qword_1ECD09BF0;
  }
  else
  {
    v8 = 0;
  }
  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    Value = objc_msgSend(a3, sel__createValuePrimitiveGetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v11.version, v11.release);
    CFSetAddValue((CFMutableSetRef)qword_1ECD09BF0, Value);

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_181F558E0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id _NSKeyValuePrimitiveSetterForClassAndKey(const void *(__cdecl *a1)(CFAllocatorRef, const void *), const void *a2, void *a3)
{
  const __CFSet *v6;
  __int128 v7;
  CFHashCode v8;
  id Value;
  CFSetCallBacks v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  v6 = (const __CFSet *)qword_1ECD09BF8;
  if (!qword_1ECD09BF8)
  {
    v7 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
    *(_OWORD *)&v11.version = *MEMORY[0x1E0C9B3B0];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    v6 = CFSetCreateMutable(0, 0, &v11);
    qword_1ECD09BF8 = (uint64_t)v6;
  }
  v11.version = 0;
  v11.retain = a1;
  *(_OWORD *)&v11.release = (unint64_t)a2;
  if (a2)
  {
    v8 = CFHash(a2);
    v6 = (const __CFSet *)qword_1ECD09BF8;
  }
  else
  {
    v8 = 0;
  }
  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    Value = objc_msgSend(a3, sel__createValuePrimitiveSetterWithContainerClassID_key_, a1, a2, *(_OWORD *)&v11.version, v11.release);
    CFSetAddValue((CFMutableSetRef)qword_1ECD09BF8, Value);

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_181F55A54(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void _NSKeyValueInvalidateAllCachesForContainerAndKey(uint64_t a1, const void *a2)
{
  CFHashCode v4;
  uint64_t v5;
  __CFSet *v6;
  _QWORD v7[4];
  _QWORD v8[8];

  v8[7] = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  v7[0] = 0;
  v7[1] = a1;
  v7[2] = a2;
  if (a2)
    v4 = CFHash(a2);
  else
    v4 = 0;
  v5 = 0;
  v7[3] = v4 ^ a1;
  v8[0] = _MergedGlobals_98;
  v8[1] = NSKeyValueCachedSetters;
  v8[2] = NSKeyValueCachedMutableArrayGetters;
  v8[3] = NSKeyValueCachedMutableOrderedSetGetters;
  v8[4] = NSKeyValueCachedMutableSetGetters;
  v8[5] = qword_1ECD09BF0;
  v8[6] = qword_1ECD09BF8;
  do
  {
    v6 = (__CFSet *)v8[v5];
    if (v6)
      CFSetRemoveValue(v6, v7);
    ++v5;
  }
  while (v5 != 7);
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
}

uint64_t _NSSetValueAndNotifyForUndefinedKey(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t, uint64_t, uint64_t))
{
  objc_msgSend(a1, "willChangeValueForKey:", a4);
  a5(a1, a2, a3, a4);
  return objc_msgSend(a1, "didChangeValueForKey:", a4);
}

void NSKVODeallocateBreak(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (!a1)
    NSLog((NSString *)CFSTR(" "), v1, v2);
}

uint64_t NSKVOIsAutonotifying()
{
  return 1;
}

void NSKVOInsertObjectAtIndexAndNotify(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  Class Class;
  Class *IndexedIvars;
  NSIndexSet *v9;
  id v10;

  Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  v10 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  v9 = -[NSIndexSet initWithIndex:]([NSIndexSet alloc], "initWithIndex:", a4);
  objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 2, v9, v10);
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 2, v9, v10);

}

void NSKVOInsertObjectsAtIndexesAndNotify(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  Class Class;
  Class *IndexedIvars;
  IMP MethodImplementation;
  id v11;

  Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  v11 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 2, a4, v11);
  MethodImplementation = class_getMethodImplementation(*IndexedIvars, (SEL)a2);
  ((void (*)(void *, const void *, uint64_t, uint64_t))MethodImplementation)(a1, a2, a3, a4);
  objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 2, a4, v11);

}

void NSKVORemoveObjectAtIndexAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class;
  Class *IndexedIvars;
  NSIndexSet *v8;
  id v9;

  Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  v9 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  v8 = -[NSIndexSet initWithIndex:]([NSIndexSet alloc], "initWithIndex:", a3);
  objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 3, v8, v9);
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 3, v8, v9);

}

void NSKVORemoveObjectsAtIndexesAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class;
  Class *IndexedIvars;
  IMP MethodImplementation;
  id v9;

  Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  v9 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 3, a3, v9);
  MethodImplementation = class_getMethodImplementation(*IndexedIvars, (SEL)a2);
  ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
  objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 3, a3, v9);

}

void NSKVOReplaceObjectAtIndexAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class;
  Class *IndexedIvars;
  NSIndexSet *v8;
  id v9;

  Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  v9 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  v8 = -[NSIndexSet initWithIndex:]([NSIndexSet alloc], "initWithIndex:", a3);
  objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 4, v8, v9);
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 4, v8, v9);

}

void NSKVOReplaceObjectsAtIndexesAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class;
  Class *IndexedIvars;
  id v8;

  Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  v8 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  objc_msgSend(a1, "willChange:valuesAtIndexes:forKey:", 4, a3, v8);
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  objc_msgSend(a1, "didChange:valuesAtIndexes:forKey:", 4, a3, v8);

}

void NSKVOAddObjectAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class;
  Class *IndexedIvars;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  v7 = (void *)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0, v9, v10);
  os_unfair_recursive_lock_unlock();
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:count:", &v9, 1);
  objc_msgSend(a1, "willChangeValueForKey:withSetMutation:usingObjects:", v7, 1, v8);
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  objc_msgSend(a1, "didChangeValueForKey:withSetMutation:usingObjects:", v7, 1, v8);

}

void NSKVOIntersectSetAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class;
  Class *IndexedIvars;
  id v8;

  Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  v8 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  objc_msgSend(a1, "willChangeValueForKey:withSetMutation:usingObjects:", v8, 3, a3);
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  objc_msgSend(a1, "didChangeValueForKey:withSetMutation:usingObjects:", v8, 3, a3);

}

void NSKVOMinusSetAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class;
  Class *IndexedIvars;
  id v8;

  Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  v8 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  objc_msgSend(a1, "willChangeValueForKey:withSetMutation:usingObjects:", v8, 2, a3);
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  objc_msgSend(a1, "didChangeValueForKey:withSetMutation:usingObjects:", v8, 2, a3);

}

void NSKVORemoveObjectAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class;
  Class *IndexedIvars;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  v7 = (void *)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0, v9, v10);
  os_unfair_recursive_lock_unlock();
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:count:", &v9, 1);
  objc_msgSend(a1, "willChangeValueForKey:withSetMutation:usingObjects:", v7, 2, v8);
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  objc_msgSend(a1, "didChangeValueForKey:withSetMutation:usingObjects:", v7, 2, v8);

}

void NSKVOUnionSetAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class;
  Class *IndexedIvars;
  id v8;

  Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  v8 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  objc_msgSend(a1, "willChangeValueForKey:withSetMutation:usingObjects:", v8, 1, a3);
  class_getInstanceMethod(*IndexedIvars, (SEL)a2);
  method_invoke();
  objc_msgSend(a1, "didChangeValueForKey:withSetMutation:usingObjects:", v8, 1, a3);

}

void _NSSetCharValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[7];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetCharValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4EE70;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      v12 = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetUnsignedCharValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[7];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetUnsignedCharValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4EE70;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      v12 = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetIntValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[7];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetIntValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4DB90;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      v12 = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetUnsignedIntValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[7];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetUnsignedIntValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4DB90;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      v12 = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetLongValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetLongValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4EE98;
      v11[4] = a1;
      v11[5] = v8;
      v11[6] = a2;
      v11[7] = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetUnsignedLongValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetUnsignedLongValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4EE98;
      v11[4] = a1;
      v11[5] = v8;
      v11[6] = a2;
      v11[7] = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetShortValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[7];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetShortValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4EEC0;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      v12 = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetUnsignedShortValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v8;
  void *v9;
  IMP MethodImplementation;
  _QWORD v11[7];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v9);
      MethodImplementation = class_getMethodImplementation(*v8, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t))MethodImplementation)(a1, a2, a3);
      objc_msgSend(a1, "didChangeValueForKey:", v9);
    }
    else
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___NSSetUnsignedShortValueAndNotify_block_invoke;
      v11[3] = &unk_1E0F4EEC0;
      v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      v12 = a3;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v9, 0, 0, v11);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }
}

void _NSSetRangeValueAndNotify(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  objc_class *Class;
  CFDictionaryRef *IndexedIvars;
  CFDictionaryRef *v10;
  void *v11;
  IMP MethodImplementation;
  _QWORD v13[10];

  v13[9] = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0)
  {
    v10 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    v11 = (void *)objc_msgSend((id)CFDictionaryGetValue(v10[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v10 + 40))
    {
      objc_msgSend(a1, "willChangeValueForKey:", v11);
      MethodImplementation = class_getMethodImplementation(*v10, (SEL)a2);
      ((void (*)(void *, const void *, uint64_t, uint64_t))MethodImplementation)(a1, a2, a3, a4);
      objc_msgSend(a1, "didChangeValueForKey:", v11);
    }
    else
    {
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = ___NSSetRangeValueAndNotify_block_invoke;
      v13[3] = &unk_1E0F4EEE8;
      v13[4] = a1;
      v13[5] = v10;
      v13[6] = a2;
      v13[7] = a3;
      v13[8] = a4;
      objc_msgSend(a1, "_changeValueForKey:key:key:usingBlock:", v11, 0, 0, v13);
    }

  }
  else
  {
    objc_msgSend(a1, (SEL)a2, a3, a4);
  }
}

uint64_t getStackObservedValueClassAndBoxSize(_QWORD *a1)
{
  if (qword_1ECD09CA0 != -1)
    dispatch_once(&qword_1ECD09CA0, &__block_literal_global_19);
  *a1 = _MergedGlobals_102;
  return qword_1ECD09C98;
}

size_t __getStackObservedValueClassAndBoxSize_block_invoke()
{
  size_t result;

  qword_1ECD09C98 = objc_opt_class();
  result = class_getInstanceSize((Class)qword_1ECD09C98);
  _MergedGlobals_102 = result;
  return result;
}

void sub_181F5DAAC(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
}

void sub_181F5DAD0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef _NSKeyValueCreatePendingChangeNotificationArray()
{
  return CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, &NSKVOPendingNotificationStackIdentifierCallbacks, MEMORY[0x1E0C9B3A0]);
}

uint64_t _NSKVOIsObservableBeingDeallocated(const void *a1)
{
  uint64_t result;
  const __CFArray *v3;
  CFRange v4;

  result = _CFGetTSD();
  if (result)
  {
    v3 = *(const __CFArray **)(result + 80);
    if (v3)
    {
      v4.length = CFArrayGetCount(*(CFArrayRef *)(result + 80));
      v4.location = 0;
      return CFArrayContainsValue(v3, v4, a1) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_181F5E960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t ___isInternal_block_invoke()
{
  uint64_t result;

  result = os_variant_has_internal_diagnostics();
  _MergedGlobals_104 = result;
  return result;
}

uint64_t BKSProcessAssertionFunction()
{
  return classBKSProcessAssertion;
}

void sub_181F60598(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181F605B8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x181F60490);
}

void sub_181F608E8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181F60908(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x181F608C0);
}

void sub_181F60CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _decodeObjectXML(uint64_t a1, const void *a2, _QWORD *a3)
{
  CFIndex Count;
  const __CFArray *ValueAtIndex;
  void *v8;
  id v9;
  id v10;
  CFTypeID v11;
  uint64_t result;
  unsigned int v13;
  const __CFString *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  char v18;
  const void *v19;
  CFTypeID v20;
  unsigned int v21;
  unsigned int v22;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  NSString *v25;
  NSString *v26;
  objc_class *v27;
  objc_class *v28;
  NSString *v29;
  NSString *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  int v35;
  CFTypeID v36;
  unint64_t v37;
  void *v38;
  CFIndex v39;
  const void *v40;
  const void *v41;
  CFTypeID v42;
  unint64_t v43;
  const __CFDictionary *v44;
  id v45;
  id v46;
  void *v47;
  NSString *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id obj;
  const void *v54;
  void *value[16];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    v8 = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    v9 = v8;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0);
    if (!v8)
      goto LABEL_11;
  }
  else
  {
    v8 = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
    v10 = v8;
    if (!v8)
      goto LABEL_11;
  }
  v11 = CFGetTypeID(v8);
  if (v11 != _CFKeyedArchiverUIDGetTypeID())
  {
    v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
    v14 = CFSTR("%@: value is not a reference as expected");
    goto LABEL_10;
  }
  result = _CFKeyedArchiverUIDGetValue();
  if (!(_DWORD)result)
  {
LABEL_12:
    *a3 = 0;
    return result;
  }
  v13 = result;
  if (_decodeObjectReference(a1, 100, (uint64_t)a2, result, a3))
    return *a3 != 0;
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 88)) <= v13)
  {
LABEL_50:
    v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
    v14 = CFSTR("%@: invalid object reference");
    goto LABEL_10;
  }
  v15 = v13;
  v16 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v13);
  if (!v16)
  {
    v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
    v14 = CFSTR("%@: wrong object format");
    goto LABEL_10;
  }
  v17 = v16;
  if (CFGetTypeID(v16) == 7 && CFEqual(CFSTR("$null"), v17))
  {
    *a3 = 0;
    return 1;
  }
  if (CFGetTypeID(v17) != 7 && CFGetTypeID(v17) != 21 && CFGetTypeID(v17) != 22 && CFGetTypeID(v17) != 20)
  {
    if (CFGetTypeID(v17) != 18)
    {
      v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
      v14 = CFSTR("%@: wrong object format format");
      goto LABEL_10;
    }
    v19 = CFDictionaryGetValue((CFDictionaryRef)v17, CFSTR("$class"));
    if (!v19 || (v20 = CFGetTypeID(v19), v20 != _CFKeyedArchiverUIDGetTypeID()))
    {
      v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
      v14 = CFSTR("%@: missing class information for object or wrong format");
      goto LABEL_10;
    }
    v21 = _CFKeyedArchiverUIDGetValue();
    if (!v21)
    {
      v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
      v14 = CFSTR("%@: null class for object");
      goto LABEL_10;
    }
    v22 = v21;
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 88)) > v21)
    {
      v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v22);
      if (v23 && (v24 = v23, CFGetTypeID(v23) == 18))
      {
        v25 = (NSString *)CFDictionaryGetValue(v24, CFSTR("$classname"));
        if (v25)
        {
          v26 = v25;
          if ((_NSIsNSString() & 1) == 0)
          {
            objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSInvalidUnarchiveOperationException"), 4864, CFSTR("%@: cannot decode object of class (%@) for key (%@); the archive appears to be corrupt (non-string class name)"),
              _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),
              v26,
              a2);
            goto LABEL_11;
          }
          obj = (id)CFDictionaryGetValue(v24, CFSTR("$classhints"));
          v54 = CFDictionaryGetValue(v24, CFSTR("$classes"));
          if ((!obj || _NSIsNSArray()) && (!v54 || (_NSIsNSArray() & 1) != 0))
          {
            v27 = (objc_class *)objc_msgSend((id)a1, "classForClassName:", v26);
            if (!v27)
            {
              v27 = (objc_class *)objc_msgSend((id)objc_opt_class(), "classForClassName:", v26);
              if (!v27)
              {
                v27 = NSClassFromString(v26);
                if (!v27)
                {
                  v58 = 0u;
                  v59 = 0u;
                  v56 = 0u;
                  v57 = 0u;
                  v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, value, 16);
                  if (!v52)
                  {
LABEL_69:
                    if (*(_QWORD *)(a1 + 8) && (objc_opt_respondsToSelector() & 1) != 0)
                    {
                      v27 = (objc_class *)objc_msgSend(*(id *)(a1 + 8), "unarchiver:cannotDecodeObjectOfClassName:originalClasses:", a1, v26, v54);
                      if (v27)
                      {
LABEL_44:
                        if (!_coderValidateClassValidToMessageForUnarchiving(v27))
                        {
                          v30 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
                          objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", *MEMORY[0x1E0C99778], 4864, CFSTR("%@: unexpected non-objectlike class (%@)"), v30, NSStringFromClass(v27));
                          goto LABEL_60;
                        }
                      }
                    }
                    else
                    {
                      v27 = 0;
                    }
                    v28 = (objc_class *)-[objc_class classForKeyedUnarchiver](v27, "classForKeyedUnarchiver");
                    if (v28)
                    {
                      if (objc_msgSend((id)a1, "requiresSecureCoding"))
                      {
                        if (a2)
                        {
                          if ((objc_msgSend((id)a1, "validateAllowedClass:forKey:", v28, a2) & 1) == 0)
                            goto LABEL_11;
                        }
                        else
                        {
                          objc_msgSend((id)a1, "validateClassSupportsSecureCoding:", v28);
                        }
                      }
                      _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v28, 0);
                      v32 = *(_QWORD *)(a1 + 120);
                      if (-[NSCoder _isPossibleNestedCollectionClass:](a1, v28) && *(_BYTE *)(v32 + 40))
                      {
                        if (*(_BYTE *)(v32 + 41))
                        {
                          *(_WORD *)(v32 + 40) = 0;
                          objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSInvalidUnarchiveOperationException"), 4864, CFSTR("%1$@: value for key (%2$@) contains too many nested (%3$@)s"), _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_), a2, v26);
                          goto LABEL_11;
                        }
                        *(_BYTE *)(v32 + 41) = 1;
                      }
                      LOBYTE(v56) = 1;
                      v33 = coderAllocateClassForUnarchival((void *)a1, v28, &v56);
                      if ((_BYTE)v56)
                      {
                        v34 = v33;
                        v35 = *(_DWORD *)(a1 + 64);
                        *(_DWORD *)(a1 + 64) = 0;
                        CFRetain(v17);
                        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 80), v17);
                        v36 = CFGetTypeID(v17);
                        v37 = atomic_load((unint64_t *)(a1 + 16));
                        atomic_store(v37 & 0xFFFFFFFFFFFFFFFELL | (v36 == 19), (unint64_t *)(a1 + 16));
                        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)v13, v34);
                        v38 = (void *)objc_msgSend((id)objc_msgSend(v34, "initWithCoder:", a1), "awakeAfterUsingCoder:", a1);
                        *(_DWORD *)(*(_QWORD *)(a1 + 120) + 16) = v13;
                        v39 = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
                        v40 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v39 - 1);
                        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 80), v39 - 1);
                        CFRelease(v40);
                        if (v39 >= 2)
                        {
                          v41 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v39 - 2);
                          v42 = CFGetTypeID(v41);
                          v43 = atomic_load((unint64_t *)(a1 + 16));
                          atomic_store(v43 & 0xFFFFFFFFFFFFFFFELL | (v42 == 19), (unint64_t *)(a1 + 16));
                        }
                        *(_DWORD *)(a1 + 64) = v35;
                        if (v38)
                        {
                          value[0] = v38;
                          v44 = *(const __CFDictionary **)(a1 + 32);
                          if (v44 && CFDictionaryGetValueIfPresent(v44, v38, (const void **)value))
                          {
                            if (value[0] != v38)
                            {

                              v45 = value[0];
                            }
                          }
                          else
                          {
                            v46 = v38;
                            if (*(_QWORD *)(a1 + 8) && (objc_opt_respondsToSelector() & 1) != 0)
                            {
                              v47 = (void *)objc_msgSend(*(id *)(a1 + 8), "unarchiver:didDecodeObject:", a1, v38);
                              value[0] = v47;
                            }
                            else
                            {
                              v47 = value[0];
                            }
                            if (v47)
                              objc_msgSend((id)a1, "_replaceObject:withObject:", v38);
                            else
                              value[0] = v38;

                          }
                          v38 = value[0];
                          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), value[0], (const void *)v15);
                          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), (const void *)v15, v38);
                        }
                        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)v15);
                        *a3 = v38;
                        return 1;
                      }
LABEL_11:
                      result = 0;
                      goto LABEL_12;
                    }
LABEL_60:
                    objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSInvalidUnarchiveOperationException"), 4864, CFSTR("%1$@: cannot decode object of class (%2$@) for key (%3$@) because no class named \"%2$@\" was found; the class needs to be defined in source code or linked in from a library (ensure the class is part of the correct target). If the class was renamed, use setClassName:forClass: to add a class translation mapping to NSKeyedUnarchiver"),
                      _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),
                      v26,
                      a2);
                    goto LABEL_11;
                  }
                  v51 = *(_QWORD *)v57;
LABEL_63:
                  v31 = 0;
                  while (1)
                  {
                    if (*(_QWORD *)v57 != v51)
                      objc_enumerationMutation(obj);
                    v27 = NSClassFromString(*(NSString **)(*((_QWORD *)&v56 + 1) + 8 * v31));
                    if (v27)
                      break;
                    if (v52 == ++v31)
                    {
                      v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, value, 16);
                      if (v52)
                        goto LABEL_63;
                      goto LABEL_69;
                    }
                  }
                }
              }
            }
            if ((objc_msgSend(*(id *)(a1 + 120), "classNameAllowed:", v27) & 1) == 0)
            {
              v29 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
              objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", *MEMORY[0x1E0C99778], 4864, CFSTR("%@: data to unarchive contains class (%@) which has not been allowed"), v29, NSStringFromClass(v27));
              goto LABEL_60;
            }
            goto LABEL_44;
          }
          v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
          v14 = CFSTR("%@: wrong class format");
        }
        else
        {
          v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
          v14 = CFSTR("%@: missing class name for class");
        }
      }
      else
      {
        v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
        v14 = CFSTR("%@: wrong class container format");
      }
LABEL_10:
      objc_msgSend((id)a1, "__failWithExceptionName:errorCode:format:", CFSTR("NSArchiverArchiveInconsistency"), 4864, v14, v48, v49, v50);
      goto LABEL_11;
    }
    goto LABEL_50;
  }
  v18 = atomic_load((unint64_t *)(a1 + 16));
  if ((v18 & 4) != 0
    && (-[NSKeyedUnarchiver _validatePropertyListClass:forKey:](a1, (void *)objc_msgSend(v17, "classForCoder"), (uint64_t)a2) & 1) == 0)
  {
    goto LABEL_11;
  }
  *a3 = v17;
  return 1;
}

void sub_181F61AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  const void *v18;

  if (a2)
  {
    objc_begin_catch(exception_object);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v17 + 48), v18);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

NSArray *__NSKeyedUnarchiverSecureUnarchivedArrayOfObjectsOfClasses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[NSKeyedUnarchiver unarchivedArrayOfObjectsOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedArrayOfObjectsOfClasses:fromData:error:", objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", a1), a2, a3);
}

NSDictionary *__NSKeyedUnarchiverSecureUnarchivedDictionaryOfKeysOfClassesObjectsOfClasses(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", a1);
  return +[NSKeyedUnarchiver unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:", v7, objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", a2), a3, a4);
}

void YOU_HAVE_A_CYCLE_IN_YOUR_OBJECT_GRAPH__THIS_ISNT_A_FOUNDATION_BUG__SEE_ERROR_MESSAGE_()
{
  NSObject *v0;
  uint8_t v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v0 = _NSOSLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_1817D9000, v0, OS_LOG_TYPE_FAULT, "Decoder with secure coding enabled is decoding a cycle. See rdar://105473537 for help\n", v1, 2u);
  }
}

uint64_t sub_181F62EC0()
{
  return 0;
}

void _SetPreferredLanguages(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  const void *v11;
  char v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint8_t buf[4];
  void *v18;
  _BYTE v19[128];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v20, v19, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v21;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v21 != v5)
          objc_enumerationMutation(a1);
        v7 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v6);
        if ((_NSIsNSString() & 1) == 0)
          -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void _SetPreferredLanguages(NSArray *)"), CFSTR("NSLocale.m"), 246, CFSTR("Unexpected language identifier object type: %@"), v7);
        v8 = _NormalizedLanguageIDFromString((uint64_t)v7);
        objc_msgSend(v2, "addObject:", v8);
        if ((objc_msgSend(v7, "isEqualToString:", v8) & 1) == 0)
        {
          v9 = _NSOSLog();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v18 = v7;
            _os_log_error_impl(&dword_1817D9000, v9, OS_LOG_TYPE_ERROR, "Warning: Language identifier is not in canonical form: %@", buf, 0xCu);
          }
        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v20, v19, 16);
    }
    while (v4);
  }
  v10 = (void *)_CFLocaleCopyPreferredLanguagesForCurrentUser();
  if (!v10 || (v11 = v10, v12 = objc_msgSend(v10, "isEqualToArray:", v2), CFRelease(v11), (v12 & 1) == 0))
  {
    v13 = (const __CFString *)*MEMORY[0x1E0C9B228];
    v14 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v15 = (const __CFString *)*MEMORY[0x1E0C9B230];
    CFPreferencesSetValue(CFSTR("AppleLanguages"), v2, (CFStringRef)*MEMORY[0x1E0C9B228], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
    CFPreferencesSynchronize(v13, v14, v15);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("AppleLanguagePreferencesChangedNotification"), 0, 0, 1u);
  }
}

uint64_t _NormalizedLanguageIDFromString(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if (qword_1ECD09D80 != -1)
    dispatch_once(&qword_1ECD09D80, &__block_literal_global_23);
  result = objc_msgSend((id)_MergedGlobals_106, "objectForKey:", a1);
  if (!result)
  {
    v3 = objc_msgSend(MEMORY[0x1E0C99DC8], "canonicalLanguageIdentifierFromString:", a1);
    result = a1;
    if (v3)
    {
      result = objc_msgSend((id)qword_1ECD09D78, "objectForKey:", v3);
      if (!result)
        return v3;
    }
  }
  return result;
}

void raiseError_0(uint64_t a1, const char *a2)
{
  id v3;
  const char *Name;
  void *v5;

  v3 = objc_alloc(MEMORY[0x1E0C99DA0]);
  Name = sel_getName(a2);
  v5 = (void *)objc_msgSend(v3, "initWithName:reason:userInfo:", CFSTR("NSMapTableAbstractImplementationError"), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("abstract method %s called directly on class %@"), Name, objc_opt_class()), 0);
  objc_exception_throw(v5);
}

void sub_181F65F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_181F6613C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_181F6627C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 56), 8);
  _Unwind_Resume(a1);
}

BOOL NSCompareMapTables(NSMapTable *table1, NSMapTable *table2)
{
  if (!table1)
  {
    NSLog((NSString *)CFSTR("%s: first map table argument is NULL"), "BOOL NSCompareMapTables(NSMapTable * _Nonnull, NSMapTable * _Nonnull)");
    if (table2)
      return -[NSMapTable isEqual:](table1, "isEqual:", table2);
LABEL_5:
    NSLog((NSString *)CFSTR("%s: second map table argument is NULL"), "BOOL NSCompareMapTables(NSMapTable * _Nonnull, NSMapTable * _Nonnull)");
    return -[NSMapTable isEqual:](table1, "isEqual:", table2);
  }
  if (!table2)
    goto LABEL_5;
  return -[NSMapTable isEqual:](table1, "isEqual:", table2);
}

void NSResetMapTable(NSMapTable *table)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "void NSResetMapTable(NSMapTable * _Nonnull)");
  -[NSMapTable removeAllItems](table, "removeAllItems");
}

NSMapTable *__cdecl NSCopyMapTableWithZone(NSMapTable *table, NSZone *zone)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), zone, "NSMapTable * _Nonnull NSCopyMapTableWithZone(NSMapTable * _Nonnull, NSZone * _Nullable)");
  return (NSMapTable *)-[NSMapTable copy](table, "copy");
}

void *__cdecl NSMapInsertIfAbsent(NSMapTable *table, const void *key, const void *value)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "void * _Nullable NSMapInsertIfAbsent(NSMapTable * _Nonnull, const void * _Nullable, const void * _Nullable)");
  return -[NSMapTable existingItemForSetItem:forAbsentKey:](table, "existingItemForSetItem:forAbsentKey:", value, key);
}

NSUInteger NSCountMapTable(NSMapTable *table)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "NSUInteger NSCountMapTable(NSMapTable * _Nonnull)");
  return -[NSMapTable count](table, "count");
}

NSString *__cdecl NSStringFromMapTable(NSMapTable *table)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: map table argument is NULL"), "NSString * _Nonnull NSStringFromMapTable(NSMapTable * _Nonnull)");
  return (NSString *)-[NSMapTable description](table, "description");
}

void freePointerMT(int a1, void *a2)
{
  free(a2);
}

uint64_t describeObjectMT(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "description");
}

void sub_181F67B78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

CFTypeRef __NSMDVretain(int a1, CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  else
    return 0;
}

void __NSMDVrelease(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CFTypeRef __NSMDVcopyDesc(void *a1)
{
  if (a1)
    return CFRetain((CFTypeRef)objc_msgSend(a1, "description"));
  else
    return CFRetain(CFSTR("<NULL>"));
}

uint64_t __NSMDVequal(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1)
  {
    if (a2)
      return objc_msgSend(a1, "isEqual:", a2, v2, v3);
  }
  return result;
}

CFTypeRef __NSMetadataCreateResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = -[NSMetadataItem _init:]([NSMetadataItem alloc], "_init:", a2);
  if ((*(_BYTE *)(a3 + 8) & 0x20) != 0)
    v4 = (id)objc_msgSend(*(id *)(a3 + 88), "metadataQuery:replacementObjectForResultObject:", a3, v4);
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(v4, "_setQuery:", a3);
  if (v4)
    return CFRetain(v4);
  else
    return 0;
}

CFTypeRef __NSMetadataCreateValue(int a1, uint64_t a2, CFTypeRef cf, uint64_t a4)
{
  CFTypeRef v4;

  v4 = cf;
  if ((*(_BYTE *)(a4 + 8) & 0x40) != 0)
    v4 = (CFTypeRef)objc_msgSend(*(id *)(a4 + 88), "metadataQuery:replacementValueForAttribute:value:", a4, a2, cf);
  if (v4)
    return CFRetain(v4);
  else
    return 0;
}

uint64_t __NSMetadataSortCompare(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[128];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a3[9])
    a3[9] = objc_opt_new();
  if (!a3[10])
    a3[10] = objc_opt_new();
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v6 = (void *)a3[4];
  result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v13, 16);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)v15;
    while (2)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v14 + 1) + v10);
        *(_QWORD *)(a3[9] + 8) = *(_QWORD *)(a1 + v10);
        *(_QWORD *)(a3[10] + 8) = *(_QWORD *)(a2 + v10);
        v12 = objc_msgSend(v11, "compareObject:toObject:", a3[9], a3[10]);
        if (v12)
        {
          if (v12 == -1)
            return -1;
          else
            return 1;
        }
        v10 += 8;
        --v8;
      }
      while (v8);
      result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v13, 16);
      v8 = result;
      a2 += v10;
      a1 += v10;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

void sub_181F6838C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181F68674(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181F68F44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class ___loadQueryFramework_block_invoke()
{
  Class result;

  _NSFrameworkHandleForLibrarianSymbols();
  result = objc_lookUpClass("BRQuery");
  _MergedGlobals_7_0 = result != 0;
  return result;
}

uint64_t sub_181F6A9C0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181F6B358()
{
  return 0;
}

uint64_t sub_181F6B39C()
{
  return 0;
}

uint64_t sub_181F6B418()
{
  return 0;
}

uint64_t sub_181F6B458()
{
  return 0;
}

uint64_t sub_181F6B498()
{
  return 0;
}

uint64_t sub_181F6B75C()
{
  return 0;
}

uint64_t sub_181F6C418()
{
  return 0;
}

NSString *NSCopyStringFromSelector(const char *a1)
{
  const char *Name;

  if (a1 && (Name = sel_getName(a1)) != 0)
    return -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]([NSString alloc], "initWithBytesNoCopy:length:encoding:freeWhenDone:", Name, strlen(Name), 4, 0);
  else
    return 0;
}

BOOL _NSRequiresMorphunInflectionForLanguageIdentifier(void *a1)
{
  return _NSLanguageIdentifierBeginsWithLanguageCode(a1, CFSTR("en"))
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, CFSTR("es"))
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, CFSTR("it"))
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, CFSTR("fr"))
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, CFSTR("pt"))
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, CFSTR("de"))
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, CFSTR("ko"))
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, CFSTR("hi"));
}

BOOL _NSLanguageIdentifierBeginsWithLanguageCode(void *a1, void *a2)
{
  unint64_t v4;
  uint64_t v6;

  v4 = objc_msgSend(a1, "length");
  if (v4 < objc_msgSend(a2, "length")
    || objc_msgSend(a1, "compare:options:range:", a2, 1, 0, objc_msgSend(a2, "length")))
  {
    return 0;
  }
  v6 = objc_msgSend(a1, "length");
  return v6 == objc_msgSend(a2, "length")
      || objc_msgSend(a1, "characterAtIndex:", objc_msgSend(a2, "length")) == 45
      || objc_msgSend(a1, "characterAtIndex:", objc_msgSend(a2, "length")) == 95;
}

uint64_t _NSLexiconInflectedStringUsingMorphun(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v13;
  uint64_t v14;
  NSCharacterSet *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  CFTypeRef v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  char v44;
  NSObject *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  NSObject *v49;
  void *v50;
  NSObject *v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  CFTypeRef cf;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  CFTypeRef v60;
  _BYTE v61[128];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD09EF8 != -1)
    dispatch_once(&qword_1ECD09EF8, &__block_literal_global_30);
  if (!off_1ECD09DC8)
    return 0;
  v13 = objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", a4);
  if (!v13)
    return 0;
  v14 = v13;
  if (!objc_msgSend(a7, "count"))
  {
    v54 = a5;
    v55 = v14;
    v53 = a6;
LABEL_29:
    v22 = 0;
    goto LABEL_30;
  }
  v15 = -[NSCharacterSet invertedSet](+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"), "invertedSet");
  v16 = objc_msgSend(a1, "rangeOfCharacterFromSet:", v15);
  if (v16 == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  v19 = v16;
  v54 = a5;
  v55 = v14;
  v53 = a6;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v20 = objc_msgSend(a7, "countByEnumeratingWithState:objects:count:", &v62, v61, 16);
  if (!v20)
    goto LABEL_29;
  v21 = v20;
  v22 = 0;
  v23 = v19 + a2;
  v24 = *(_QWORD *)v63;
  do
  {
    for (i = 0; i != v21; ++i)
    {
      if (*(_QWORD *)v63 != v24)
        objc_enumerationMutation(a7);
      v26 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * i);
      if (objc_msgSend(v26, "replacementKind") != 1)
      {
        objc_msgSend(v26, "argument");
        if (!_NSIsNSNumber())
          continue;
      }
      if (objc_msgSend(v26, "replacementRangeInResult") == v23)
      {
        v28 = v27;
        if (v27 >= objc_msgSend(a1, "length"))
          return 0;
        v29 = objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:", v15, 0, v28 + v19, objc_msgSend(a1, "length") - (v28 + v19));
        if (v29 <= v28 + v19 || v29 == 0x7FFFFFFFFFFFFFFFLL)
          v31 = v28 + v19;
        else
          v31 = v29;
        v22 = (void *)objc_msgSend(a1, "substringWithRange:", 0, v31);
        a1 = (void *)objc_msgSend(a1, "substringFromIndex:", v31);
      }
    }
    v21 = objc_msgSend(a7, "countByEnumeratingWithState:objects:count:", &v62, v61, 16);
  }
  while (v21);
LABEL_30:
  cf = 0;
  v32 = off_1ECD09DC8(&cf);
  if (cf)
  {
    if (_NSInflectionLog_onceToken != -1)
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    v33 = _NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v58 = "mlccfp_getDefaultCommonConceptFactoryProvider(&error)";
      v59 = 2112;
      v60 = cf;
      _os_log_error_impl(&dword_1817D9000, v33, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
    }
    v34 = cf;
  }
  else
  {
    v34 = 0;
  }
  v17 = 0;
  if (!v32 || v34)
    goto LABEL_123;
  cf = 0;
  v35 = off_1ECD09DD0(v32, v55, &cf);
  if (cf)
  {
    if (_NSInflectionLog_onceToken != -1)
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    v36 = _NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v58 = "mlccfp_getCommonConceptFactory(provider, (CFLocaleRef)locale, &error)";
      v59 = 2112;
      v60 = cf;
      _os_log_error_impl(&dword_1817D9000, v36, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
    }
    v34 = cf;
  }
  else
  {
    v34 = 0;
  }
  v17 = 0;
  if (!v35 || v34)
    goto LABEL_123;
  cf = 0;
  v37 = off_1ECD09DD8(v35, &cf);
  if (cf)
  {
    if (_NSInflectionLog_onceToken != -1)
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    v38 = _NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v58 = "mccf_getSemanticFeatureModel(factory, &error)";
      v59 = 2112;
      v60 = cf;
      _os_log_error_impl(&dword_1817D9000, v38, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
    }
    v34 = cf;
  }
  else
  {
    v34 = 0;
  }
  v17 = 0;
  if (!v37 || v34)
    goto LABEL_123;
  cf = 0;
  v39 = off_1ECD09DE0(a1, &cf);
  if (cf)
  {
    if (_NSInflectionLog_onceToken != -1)
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    v40 = _NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v58 = "mss_create((CFStringRef)stringToInflect, &error)";
      v59 = 2112;
      v60 = cf;
      _os_log_error_impl(&dword_1817D9000, v40, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
    }
    v34 = cf;
  }
  else
  {
    v34 = 0;
  }
  if (v39 && !v34)
  {
    cf = 0;
    v41 = off_1ECD09DE8(v37, v39, &cf);
    if (cf)
    {
      if (_NSInflectionLog_onceToken != -1)
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      v42 = _NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v58 = "minf_create(model, speakableSource, &error)";
        v59 = 2112;
        v60 = cf;
        _os_log_error_impl(&dword_1817D9000, v42, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
      }
      v34 = cf;
    }
    else
    {
      v34 = 0;
    }
    if (!v41 || v34)
    {
      v43 = 0;
      if (!v41)
        goto LABEL_122;
      goto LABEL_121;
    }
    if (objc_msgSend(v54, "addConstraintsTo:", v41))
    {
      cf = 0;
      v44 = off_1ECD09DF0(v41, &cf);
      if (cf)
      {
        if (_NSInflectionLog_onceToken != -1)
          dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
        v45 = _NSInflectionLog_log;
        if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v58 = "minf_isExists(inflectable, &error)";
          v59 = 2112;
          v60 = cf;
          _os_log_error_impl(&dword_1817D9000, v45, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
        }
        v34 = cf;
      }
      else
      {
        v34 = 0;
      }
      if (v34)
        v47 = 0;
      else
        v47 = v44;
      if ((v47 & 1) == 0)
      {
        v43 = 0;
        goto LABEL_121;
      }
      v46 = v53;
      if (!v53)
      {
        cf = 0;
        v48 = off_1ECD09E00(v41, &cf);
        if (cf)
        {
          if (_NSInflectionLog_onceToken != -1)
            dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
          v49 = _NSInflectionLog_log;
          if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
            goto LABEL_98;
          *(_DWORD *)buf = 136315394;
          v58 = "minf_toSpeakableString(inflectable, &error)";
          v59 = 2112;
          v60 = cf;
          goto LABEL_126;
        }
LABEL_105:
        v34 = 0;
LABEL_106:
        if (!v48 || v34)
        {
          v43 = 0;
          if (!v48)
            goto LABEL_121;
        }
        else
        {
          cf = 0;
          v50 = (void *)off_1ECD09E08(v48, &cf);
          if (cf)
          {
            if (_NSInflectionLog_onceToken != -1)
              dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
            v51 = _NSInflectionLog_log;
            if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v58 = "mss_createPrintCopy(speakableResult, &error)";
              v59 = 2112;
              v60 = cf;
              _os_log_error_impl(&dword_1817D9000, v51, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
            }
            v34 = cf;
          }
          else
          {
            v34 = 0;
          }
          v52 = v50;
          v43 = (uint64_t)v52;
          if (v22 && v52)
            v43 = objc_msgSend(v22, "stringByAppendingString:", v52);
        }
        off_1ECD09E10(v48);
LABEL_121:
        off_1ECD09E18(v41);
        goto LABEL_122;
      }
    }
    else
    {
      v46 = v53;
      if (!v53)
      {
        v43 = 0;
        v34 = 0;
        goto LABEL_121;
      }
    }
    cf = 0;
    v48 = off_1ECD09DF8(v41, v46, &cf);
    if (cf)
    {
      if (_NSInflectionLog_onceToken != -1)
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      v49 = _NSInflectionLog_log;
      if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
        goto LABEL_98;
      *(_DWORD *)buf = 136315394;
      v58 = "minf_getFeatureValueByNameCopy(inflectable,(CFStringRef)featureName, &error)";
      v59 = 2112;
      v60 = cf;
LABEL_126:
      _os_log_error_impl(&dword_1817D9000, v49, OS_LOG_TYPE_ERROR, "Inflection engine reported an error for '%s' while attempting to inflect: %@", buf, 0x16u);
LABEL_98:
      v34 = cf;
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  v43 = 0;
  v17 = 0;
  if (v39)
  {
LABEL_122:
    off_1ECD09E10(v39);
    v17 = v43;
  }
LABEL_123:
  if (v34)
    CFRelease(v34);
  return v17;
}

void sub_181F72618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _DisplayValueRelease(uint64_t a1, uint64_t a2)
{
  return off_1ECD09E90(a2);
}

void _NSObjectRaiseNullSelectorException(objc_class *a1, const char *a2)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: null selector"), _NSMethodExceptionProem(a1, a2)), 0);
  objc_exception_throw(v2);
}

id NSCopyObject(id object, NSUInteger extraBytes, NSZone *zone)
{
  id v3;
  objc_class *v4;

  if (!object)
    return 0;
  v3 = object_copy(object, extraBytes);
  v4 = (objc_class *)objc_opt_class();
  object_setClass(v3, v4);
  if (*MEMORY[0x1E0C9A980])
  {
    object_getClassName(v3);
    __CFSetLastAllocationEventName();
  }
  return v3;
}

void NSIncrementExtraRefCount(id object)
{
  if (object)
  {
    _objc_rootRetain();
    if (*MEMORY[0x1E0C9A980])
      __CFRecordAllocationEvent();
  }
}

BOOL NSDecrementExtraRefCountWasZero(id object)
{
  if (object)
  {
    if (*MEMORY[0x1E0C9A980])
      __CFRecordAllocationEvent();
    LOBYTE(object) = _objc_rootReleaseWasZero();
  }
  return (char)object;
}

NSUInteger NSExtraRefCount(NSUInteger object)
{
  uint64_t v1;

  if (object)
  {
    v1 = _objc_rootRetainCount();
    if (v1)
      return v1 - 1;
    else
      return 0;
  }
  return object;
}

void iop_unlock(os_unfair_lock_s *a1)
{
  os_unfair_lock_unlock(a1 + 56);
}

uint64_t __iop_cancel_block_invoke(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(result + 32) + 232));
  return result;
}

void __iop_cancel_block_invoke_2(uint64_t a1)
{
  uint64_t v2;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 224));
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 48) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 224));
}

void __iop_removeDependency_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 48) + 224));
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(void **)(v2 + 32);
  if (!v3)
    goto LABEL_4;
  if (objc_msgSend(v3, "indexOfObjectIdenticalTo:", *(_QWORD *)(a1 + 32)) == 0x7FFFFFFFFFFFFFFFLL)
  {
    v2 = *(_QWORD *)(a1 + 48);
LABEL_4:
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 224));
    return;
  }
  v11 = *(id *)(a1 + 32);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 48) + 224));
  if (v11)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v11 + 58);
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 48) + 224));
    v4 = *(void **)(*(_QWORD *)(a1 + 48) + 32);
    if (v4)
    {
      v5 = objc_msgSend(v4, "indexOfObjectIdenticalTo:", *(_QWORD *)(a1 + 32));
      if (v5 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v6 = v5;
        v7 = atomic_load((unsigned __int8 *)v11 + 237);
        if (v7 != 244)
        {
          v8 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 232));
          if ((v8 & 1) == 0)
          {
            v9 = *(_QWORD *)(a1 + 48);
            v10 = *(_QWORD *)(v9 + 48);
            *(_QWORD *)(v9 + 48) = v10 - 1;
            if (v10 <= 0)
              __assert_rtn("iop_removeDependency_block_invoke", "NSOperation.m", 847, "iop->__unfinished_deps >= 0");
          }
        }
        objc_msgSend(*((id *)v11 + 6), "removeObject:", *(_QWORD *)(a1 + 40));
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 32), "removeObjectAtIndex:", v6);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 48) + 224));
    os_unfair_lock_unlock((os_unfair_lock_t)v11 + 58);

  }
}

uint64_t __iop_start_block_invoke(uint64_t result)
{
  atomic_store(0xE0u, (unsigned __int8 *)(*(_QWORD *)(result + 32) + 229));
  return result;
}

uint64_t __iop_start_block_invoke_2(uint64_t result)
{
  atomic_store(0xF0u, (unsigned __int8 *)(*(_QWORD *)(result + 32) + 229));
  return result;
}

uint64_t __iop_start_block_invoke_3(uint64_t result)
{
  atomic_store(0xF0u, (unsigned __int8 *)(*(_QWORD *)(result + 32) + 229));
  return result;
}

uint64_t _NSStandardizePathRewriteAutomountIsPathExcluded(_WORD *a1, uint64_t a2)
{
  char **v2;
  const char *v3;
  char v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  _WORD *v8;
  const char *v9;

  v2 = _NSStandardizePathRewriteAutomountIsPathExcluded_exclusionList;
  v3 = "/Applications";
  while (1)
  {
    v4 = *v3;
    if (!*v3)
      break;
    v5 = 0;
    v6 = (unsigned __int8 *)(v3 + 1);
    while (a2 > (v5 * 2) >> 1 && (unsigned __int16)a1[v5] == (unsigned __int16)v4)
    {
      v7 = *v6++;
      v4 = v7;
      ++v5;
      if (!v7)
      {
        v8 = &a1[v5];
        goto LABEL_9;
      }
    }
LABEL_11:
    v9 = v2[1];
    ++v2;
    v3 = v9;
    if (!v9)
      return 0;
  }
  v8 = a1;
LABEL_9:
  if (a2 > v8 - a1 && *v8 != 47)
    goto LABEL_11;
  return 1;
}

void _NSAbbreviatePathWithTilde(unsigned __int16 *a1, uint64_t *a2)
{
  NSString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int16 *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  if (*a2 >= 1 && (*a2 != 1 || *a1 != 47))
  {
    v4 = NSHomeDirectoryForUser(0);
    v5 = -[NSString length](v4, "length");
    if (*a2 >= v5)
    {
      v6 = v5;
      MEMORY[0x1E0C80A78](v5);
      v9 = (unsigned __int16 *)((char *)v19 - v8);
      if (v10 > 0x100)
        v9 = (unsigned __int16 *)malloc_type_malloc(2 * v7, 0x1000040BDFB0063uLL);
      else
        bzero((char *)v19 - v8, 2 * v7);
      -[NSString getCharacters:range:](v4, "getCharacters:range:", v9, 0, v6);
      if (v6 < 1)
      {
        v15 = 0;
        v16 = 0;
      }
      else if (*a1 == *v9)
      {
        v11 = 1;
        while (1)
        {
          v12 = v11;
          if (v6 == v11)
            break;
          v13 = a1[v11];
          v14 = v9[v11++];
          if (v13 != v14)
          {
            v15 = v12;
            goto LABEL_17;
          }
        }
        v15 = v6;
LABEL_17:
        v16 = v12 < v6;
      }
      else
      {
        v15 = 0;
        v16 = 1;
      }
      if ((unint64_t)v6 >= 0x101)
        free(v9);
      if (!v16)
      {
        if (*a2 == v15)
        {
          *a1 = 126;
          v17 = 1;
        }
        else
        {
          v18 = &a1[v15];
          if (*v18 != 47)
            return;
          memmove(a1 + 1, v18, 2 * (*a2 - v15));
          *a1 = 126;
          v17 = *a2 - v15 + 1;
        }
        *a2 = v17;
      }
    }
  }
}

const __CFString *_NSFindCommonPrefixInStringArray(void *a1, int a2)
{
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  const __CFString *v8;
  id *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  id *v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  _BYTE v19[2048];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a1, "count");
  if (!v4)
    return &stru_1E0F56070;
  v5 = v4;
  v6 = v4 - 1;
  if (v4 == 1)
    return (const __CFString *)objc_msgSend(a1, "objectAtIndex:", 0);
  if (v4 >= 257)
    v9 = (id *)NSAllocateObjectArray(v4);
  else
    v9 = (id *)v19;
  objc_msgSend(a1, "getObjects:range:", v9, 0, v5);
  v10 = *v9;
  v17 = objc_msgSend(*v9, "length");
  if (v17 < 1)
  {
    v8 = &stru_1E0F56070;
  }
  else
  {
    v11 = 0;
    if (a2)
      v12 = 8;
    else
      v12 = 9;
    v8 = &stru_1E0F56070;
    while (1)
    {
      v18 = v8;
      objc_msgSend(v10, "rangeOfComposedCharacterSequenceAtIndex:", v11);
      v11 += v13;
      v8 = (const __CFString *)objc_msgSend(v10, "substringWithRange:", 0, v11);
      v14 = v6;
      v15 = v9 + 1;
      if (v5 >= 2)
        break;
LABEL_16:
      v6 = v14;
      if (v11 >= v17)
        goto LABEL_20;
    }
    while (1)
    {
      objc_msgSend(*v15, "rangeOfString:options:range:", v8, v12, 0, objc_msgSend(*v15, "length"));
      if (!v16)
        break;
      ++v15;
      if (!--v6)
        goto LABEL_16;
    }
    v8 = v18;
  }
LABEL_20:
  if (v9 != (id *)v19)
    free(v9);
  return v8;
}

NSString *NSFullUserName(void)
{
  uid_t v0;
  NSString *result;

  if (geteuid())
    v0 = geteuid();
  else
    v0 = getuid();
  result = (NSString *)getpwuid(v0);
  if (result)
  {
    if (result[5].super.isa)
      result = (NSString *)(id)objc_msgSend(objc_allocWithZone((Class)NSString), "initWithBytes:length:encoding:", result[5].super.isa, strlen((const char *)result[5].super.isa), 4);
    else
      result = 0;
  }
  if (!result)
    return (NSString *)&stru_1E0F56070;
  return result;
}

NSString *NSOpenStepRootDirectory(void)
{
  char *v1;

  if (!issetugid() && (v1 = getenv("NEXT_ROOT")) != 0 && *v1)
    return -[NSString stringByStandardizingPath](-[NSFileManager stringWithFileSystemRepresentation:length:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "stringWithFileSystemRepresentation:length:", v1, strlen(v1)), "stringByStandardizingPath");
  else
    return (NSString *)CFSTR("/");
}

uint64_t _NSErrnoMessage()
{
  return *(_QWORD *)(MEMORY[0x1E0C85768] + 8 * *__error());
}

uint64_t _NSPreferredChunkSizeForFileDescriptor(int a1)
{
  blksize_t st_blksize;
  NSObject *v4;
  int v5;
  int *v6;
  char *v7;
  _DWORD v8[2];
  __int16 v9;
  char *v10;
  stat v11;
  statfs v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(&v12, 0, 512);
  memset(&v11, 0, sizeof(v11));
  if (fstatfs(a1, &v12) == -1)
  {
    if (fstat(a1, &v11) == -1)
    {
      if (qword_1ECD09F80 != -1)
        dispatch_once(&qword_1ECD09F80, &__block_literal_global_34);
      v4 = _MergedGlobals_111;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_111, OS_LOG_TYPE_ERROR))
      {
        v5 = *__error();
        v6 = __error();
        v7 = strerror(*v6);
        v8[0] = 67109378;
        v8[1] = v5;
        v9 = 2080;
        v10 = v7;
        _os_log_error_impl(&dword_1817D9000, v4, OS_LOG_TYPE_ERROR, "Encountered fstat failure %d %s", (uint8_t *)v8, 0x12u);
      }
      return -1;
    }
    st_blksize = v11.st_blksize;
  }
  else
  {
    st_blksize = v12.f_iosize;
  }
  if (st_blksize > 0)
    return st_blksize;
  return -1;
}

uint64_t _NSCreateTemporaryFile(void *a1, NSString **a2, int *a3, void **a4, NSError **a5)
{
  NSFileManager *v10;
  id v11;
  NSString *v12;
  int v13;
  int v14;
  void *v15;
  int v16;
  int v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  NSError *v27;
  int *v28;
  char *v29;
  int v30;
  char __str[6];
  char __s[1056];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  getpid();
  if (!sandbox_check())
  {
    *a4 = 0;
    v15 = (void *)objc_msgSend(a1, "stringByDeletingLastPathComponent");
    if (objc_msgSend(v15, "isEqual:", &stru_1E0F56070))
    {
      __s[0] = 0;
    }
    else if ((objc_msgSend(v15, "getFileSystemRepresentation:maxLength:", __s, 1024) & 1) == 0)
    {
      if (a5)
      {
        v27 = _NSErrorWithFilePath(514, (uint64_t)a1);
        goto LABEL_33;
      }
      return 0;
    }
    v16 = strlen(__s);
    v17 = v16;
    if (v16 >= 1 && __s[v16 - 1] != 47)
    {
      if (v16 == 1048)
        goto LABEL_18;
      v17 = v16 + 1;
      __s[v16] = 47;
    }
    v18 = getpid();
    snprintf(__str, 6uLL, "%04x", v18);
    if ((unint64_t)(v17 - 1027) >= 0xFFFFFFFFFFFFFBE7)
    {
      v29 = &__s[v17];
      do
      {
        *v29 = 0;
        _NSFastMultiCStringConcat((uint64_t)v29, v19, v20, v21, v22, v23, v24, v25, ".dat.nosync", (uint64_t)__str);
        if (!mktemp(__s))
          break;
        v30 = _NSOpenFileDescriptor_Protected(__s, 2562, 0, 438);
        if ((v30 & 0x80000000) == 0)
        {
          v14 = v30;
          v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __s);
          if (a2)
            goto LABEL_5;
          goto LABEL_6;
        }
      }
      while (*__error() == 17);
LABEL_19:
      if (a5)
      {
        v26 = __error();
        v27 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(*v26, (uint64_t)a1, 0, 0, 0);
LABEL_33:
        *a5 = v27;
        return 0;
      }
      return 0;
    }
LABEL_18:
    *__error() = 63;
    goto LABEL_19;
  }
  v10 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  *(_QWORD *)__s = 0;
  v11 = -[NSURL path](-[NSFileManager URLForDirectory:inDomain:appropriateForURL:create:error:](v10, "URLForDirectory:inDomain:appropriateForURL:create:error:", 99, 1, objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", a1, 0), 1, __s), "path");
  *a4 = v11;
  if (!v11)
  {
    if (a5)
      *a5 = *(NSError **)__s;
    return 0;
  }
  v12 = (NSString *)objc_msgSend(v11, "stringByAppendingPathComponent:", objc_msgSend(a1, "lastPathComponent"));
  v13 = _NSOpenFileDescriptor_Protected((char *)-[NSString fileSystemRepresentation](v12, "fileSystemRepresentation"), 2562, 0, 438);
  if (v13 < 0)
  {
    if (a5)
    {
      v28 = __error();
      *a5 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(*v28, (uint64_t)a1, 0, 0, 0);
    }
    _NSCleanupTemporaryDirectory(*a4);
    *a4 = 0;
    return 0;
  }
  v14 = v13;
  if (a2)
LABEL_5:
    *a2 = v12;
LABEL_6:
  if (a3)
    *a3 = v14;
  else
    close(v14);
  return 1;
}

void *_NSLogCStringFunction()
{
  return __NSLogCString;
}

void *_NSSetLogCStringFunction(void *result)
{
  __NSLogCString = result;
  return result;
}

uint64_t _NSRuntimeIssuesLog()
{
  if (qword_1ECD09FA0 != -1)
    dispatch_once(&qword_1ECD09FA0, &__block_literal_global_37_1);
  return qword_1ECD09F98;
}

uint64_t _NSXPCLongMessageLog()
{
  if (qword_1ECD09FB0 != -1)
    dispatch_once(&qword_1ECD09FB0, &__block_literal_global_40_0);
  return qword_1ECD09FA8;
}

void *NSReallocateScannedUncollectable(void *a1, size_t a2)
{
  malloc_zone_t *v4;
  malloc_zone_t *v6;

  if (a1)
  {
    v4 = malloc_zone_from_ptr(a1);
    return malloc_type_zone_realloc(v4, a1, a2, 0xF8D18AE6uLL);
  }
  else
  {
    v6 = malloc_default_zone();
    return malloc_type_zone_calloc(v6, 1uLL, a2, 0xC2E5A2B2uLL);
  }
}

uint64_t NSScannedZone(uint64_t a1)
{
  NSLog((NSString *)CFSTR("*** GC: oldInterceptWarning - %s still in use\n"), "NSScannedZone");
  return a1;
}

uint64_t NSUnscannedZone(uint64_t a1)
{
  NSLog((NSString *)CFSTR("*** GC: oldInterceptWarning - %s still in use\n"), "NSUnscannedZone");
  return a1;
}

uint64_t NSCollectedScannedZone(uint64_t a1)
{
  NSLog((NSString *)CFSTR("*** GC: oldInterceptWarning - %s still in use\n"), "NSCollectedScannedZone");
  return a1;
}

uint64_t NSCollectedUnscannedZone(uint64_t a1)
{
  NSLog((NSString *)CFSTR("*** GC: oldInterceptWarning - %s still in use\n"), "NSCollectedUnscannedZone");
  return a1;
}

NSZone *__cdecl NSCreateZone(NSUInteger startSize, NSUInteger granularity, BOOL canFree)
{
  return (NSZone *)malloc_create_zone(startSize, 0);
}

void NSSetZoneName(NSZone *zone, NSString *name)
{
  malloc_zone_t *v3;

  v3 = (malloc_zone_t *)zone;
  if (!zone)
    v3 = malloc_default_zone();
  malloc_set_zone_name(v3, -[NSString UTF8String](name, "UTF8String"));
}

NSString *__cdecl NSZoneName(NSZone *zone)
{
  const char *zone_name;
  const char *v2;

  if (!zone)
    zone = (NSZone *)malloc_default_zone();
  zone_name = malloc_get_zone_name((malloc_zone_t *)zone);
  if (zone_name)
    v2 = zone_name;
  else
    v2 = "";
  return +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
}

void *__cdecl NSZoneRealloc(NSZone *zone, void *ptr, NSUInteger size)
{
  if (ptr)
  {
    if (zone)
      return malloc_type_zone_realloc((malloc_zone_t *)zone, ptr, size, 0x3C595B05uLL);
    else
      return malloc_type_realloc(ptr, size, 0xCA9ECF3FuLL);
  }
  else
  {
    if (!zone)
      zone = (NSZone *)malloc_default_zone();
    return malloc_type_zone_malloc((malloc_zone_t *)zone, size, 0x4A6F13AEuLL);
  }
}

void NSZoneReallyFree(malloc_zone_t *a1, void *a2)
{
  if (a1)
    malloc_zone_free(a1, a2);
  else
    free(a2);
}

NSUInteger NSLogPageSize(void)
{
  int v0;

  v0 = flsl(*MEMORY[0x1E0C85AD8]) - 1;
  if (v0 > 0x40)
    return 0;
  return v0;
}

void NSDeallocateMemoryPages(void *ptr, NSUInteger bytes)
{
  NSString *v4;

  if (mach_vm_deallocate(*MEMORY[0x1E0C83DA0], (mach_vm_address_t)ptr, bytes))
  {
    v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** NSDeallocateMemoryPages(%p, %lu) failed"), ptr, bytes);
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v4, 0));
  }
}

NSUInteger NSRealMemoryAvailable(void)
{
  NSUInteger result;
  size_t v1;
  NSUInteger v2;
  int v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = _NSRealMemory;
  if (!_NSRealMemory)
  {
    v2 = 0;
    *(_QWORD *)v3 = 0x500000006;
    v1 = 8;
    if (sysctl(v3, 2u, &v2, &v1, 0, 0) == -1)
    {
      return _NSRealMemory;
    }
    else
    {
      result = v2;
      _NSRealMemory = v2;
    }
  }
  return result;
}

BOOL _NSDefaultMallocZoneClaimedAddress()
{
  malloc_default_zone();
  return malloc_zone_claimed_address() != 0;
}

void *_NSFaultInObjectWithCleanup(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *result;

  result = (void *)*a1;
  if (!result)
  {
    result = (void *)(*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    while (!__ldaxr(a1))
    {
      if (!__stlxr((unint64_t)result, a1))
        return result;
    }
    __clrex();
    objc_msgSend(result, "performSelector:", a3);
    return (void *)*a1;
  }
  return result;
}

uint64_t __NSLogAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return __NSLogCString(a2, a3, a4 != 0);
}

uint64_t sub_181F79B2C()
{
  return 0;
}

uint64_t sub_181F79B6C()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_181F79BAC()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_181F79BEC()
{
  return 0;
}

uint64_t sub_181F7A554()
{
  return 0;
}

void raiseError_1(uint64_t a1, const char *a2)
{
  id v3;
  const char *Name;
  void *v5;

  v3 = objc_alloc(MEMORY[0x1E0C99DA0]);
  Name = sel_getName(a2);
  v5 = (void *)objc_msgSend(v3, "initWithName:reason:userInfo:", CFSTR("NSPointerFunctionsAbstractImplementationError"), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("abstract method %s called directly on class %@"), Name, objc_opt_class()), 0);
  objc_exception_throw(v5);
}

void _NSXPCConnectionInitRemoteXPC()
{
  if (_MergedGlobals_112 != -1)
    dispatch_once(&_MergedGlobals_112, &__block_literal_global_36);
}

uint64_t __NSXPCCONNECTION_IS_WAITING_FOR_A_SYNCHRONOUS_REMOTE_REPLY__()
{
  return off_1ECD09FE8();
}

vm_address_t machAcquire(vm_address_t a1, uint64_t (*a2)(vm_address_t), int a3)
{
  vm_address_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  mach_vm_size_t v7;
  vm_map_t *v8;
  kern_return_t v9;
  uint64_t v10;
  vm_address_t dest_address[2];

  v3 = a1;
  dest_address[1] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    dest_address[0] = 0;
    v4 = a2(a1);
    v5 = v4 % *MEMORY[0x1E0C85AD8];
    v6 = *MEMORY[0x1E0C85AD8] - v5;
    if (!v5)
      v6 = 0;
    v7 = v6 + v4;
    v8 = (vm_map_t *)MEMORY[0x1E0C83DA0];
    v9 = vm_allocate(*MEMORY[0x1E0C83DA0], dest_address, v6 + v4, 1);
    v10 = 0;
    if (!v9)
    {
      if (vm_copy(*v8, v3, v7, dest_address[0]))
      {
        mach_vm_deallocate(*v8, dest_address[0], v7);
        return 0;
      }
      else
      {
        return dest_address[0];
      }
    }
    return v10;
  }
  return v3;
}

uint64_t machRelinquish(mach_vm_address_t a1, uint64_t (*a2)(void))
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = a2();
  v4 = v3 % *MEMORY[0x1E0C85AD8];
  v5 = *MEMORY[0x1E0C85AD8] - v4;
  if (!v4)
    v5 = 0;
  return mach_vm_deallocate(*MEMORY[0x1E0C83DA0], a1, v5 + v3);
}

NSString *pointerDescription(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%p"), a1);
}

NSString *cStringDescription(uint64_t a1)
{
  return +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1);
}

uint64_t valueHash(char *a1, uint64_t (*a2)(void))
{
  uint64_t result;
  char *v4;
  uint64_t v5;

  result = a2();
  if (result >= 1)
  {
    v4 = &a1[result];
    do
    {
      v5 = *a1++;
      result += 17 * v5;
    }
    while (a1 < v4);
  }
  return result;
}

NSString *integerDescription(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%ld"), a1);
}

uint64_t _NSPointerFunctionCoding_isValidOptions(__int16 a1)
{
  unint64_t v1;
  _BOOL4 v3;
  _BOOL4 v4;
  unint64_t v5;
  int64x2_t v6;
  int32x4_t v7;
  uint8x8_t v8;
  __int32 v9;
  unint64_t v10;
  _BOOL4 v11;

  v1 = a1 & 7;
  v3 = v1 == 5 || v1 == 0;
  v4 = v1 <= 5 && v3;
  v5 = a1 & 0x700;
  if (v5 > 0x500)
    goto LABEL_19;
  v6 = vdupq_n_s64(v5);
  v7 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v6, (int64x2_t)xmmword_18228CF40), (int32x4_t)vceqq_s64(v6, (int64x2_t)xmmword_18228CF30)), (int8x16_t)xmmword_18228CF50);
  v7.i32[0] = vaddvq_s32(v7);
  v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v7.i8);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.i32[0];
  if (v5 == 1024)
    v9 = v8.i32[0] + 1;
  if (v5 == 1280)
    ++v9;
  if (v9 == 1)
  {
    v10 = v5 - 256;
    v11 = v10 > 0x4FF || (v10 & 0x1F00) == 256;
  }
  else
  {
LABEL_19:
    v11 = 0;
  }
  return v4 & v11;
}

void *_NSPointerFunctionCoding_bufferForCount(unint64_t a1)
{
  void *result;

  if (a1 >> 61)
    return 0;
  result = malloc_type_malloc(8 * a1, 0x47288157uLL);
  if (result)
  {
    if (__CFADD__(result, a1))
    {
      free(result);
      return 0;
    }
  }
  return result;
}

id startReadARCWeakAutoreleasingWithSentinelAt(id *a1, BOOL *a2)
{
  id v2;

  v2 = *a1;
  if (a2)
    *a2 = v2 == (id)1;
  if ((unint64_t)v2 >= 2)
    return objc_loadWeak(a1);
  else
    return 0;
}

id startReadARCWeakWithSentinelAt(id *a1, BOOL *a2)
{
  id v2;

  v2 = *a1;
  if (a2)
    *a2 = v2 == (id)1;
  if ((unint64_t)v2 >= 2)
    return objc_loadWeakRetained(a1);
  else
    return 0;
}

void finishReadARCWeakAt(id a1)
{
  if (a1)

}

id continueReadARCWeakAt(id result)
{
  if (result)
    return result;
  return result;
}

id startReadARCWeakAutoreleasingAt(id *a1, BOOL *a2)
{
  id result;

  if (*a1)
  {
    result = objc_loadWeak(a1);
    if (!a2)
      return result;
  }
  else
  {
    result = 0;
    if (!a2)
      return result;
  }
  *a2 = result == 0;
  return result;
}

id startReadARCWeakAt(id *a1, BOOL *a2)
{
  id result;

  if (*a1)
  {
    result = objc_loadWeakRetained(a1);
    if (!a2)
      return result;
  }
  else
  {
    result = 0;
    if (!a2)
      return result;
  }
  *a2 = result == 0;
  return result;
}

uint64_t startReadPointerAt(uint64_t *a1, BOOL *a2)
{
  uint64_t result;

  result = *a1;
  if (a2)
    *a2 = result == 0;
  return result;
}

uint64_t sub_181F7C9FC()
{
  return 0;
}

uint64_t sub_181F7CA7C()
{
  return 0;
}

uint64_t sub_181F7CBAC()
{
  return 0;
}

uint64_t __NSFireMachPort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;

  v5 = *(void **)(a4 + 8);
  _CFAutoreleasePoolPush();
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v5, "handleMachMessage:", a2);
  return _CFAutoreleasePoolPop();
}

uint64_t __NSDescribeNSMachPortCallout(uint64_t a1, uint64_t a2, char *a3, size_t a4, char *a5, size_t a6)
{
  const char *ClassName;
  Class Class;
  const char *v13;
  uint64_t result;
  const char *dli_fname;
  Dl_info v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  ClassName = object_getClassName(*(id *)(a2 + 8));
  Class = object_getClass(*(id *)(a2 + 8));
  v13 = "<unknown name>";
  if (ClassName)
    v13 = ClassName;
  snprintf(a5, a6, "(NSMachPort) %s", v13);
  memset(&v16, 0, sizeof(v16));
  result = dladdr(Class, &v16);
  if ((_DWORD)result)
  {
    dli_fname = v16.dli_fname;
    if (!v16.dli_fname)
      dli_fname = "<unknown library>";
    return snprintf(a3, a4, "%s", dli_fname);
  }
  return result;
}

void __destroyPortContext(_QWORD *ptr)
{
  __int128 v2;

  if (ptr[3] == ~ptr[4])
  {
    ptr[1] = 0;
    _cfmp_record_nsmachport_deallocation();
    *(_QWORD *)&v2 = 0xFAFAFAFAFAFAFAFALL;
    *((_QWORD *)&v2 + 1) = 0xFAFAFAFAFAFAFAFALL;
    *((_OWORD *)ptr + 1) = v2;
    *((_OWORD *)ptr + 2) = v2;
    *(_OWORD *)ptr = v2;
    free(ptr);
  }
  else if (malloc_size(ptr))
  {
    NSLog((NSString *)CFSTR("*** __destroyPortContext() called with invalid context %p:{%p, %p, %p, %p, %p, %p}}:\n%@"), ptr, *ptr, ptr[1], ptr[2], ptr[3], ptr[4], ptr[5], +[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  }
  else
  {
    NSLog((NSString *)CFSTR("*** __destroyPortContext() called with invalid context %p:\n%@"), ptr, +[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  }
}

uint64_t _NSPortDeathNotify(uint64_t a1)
{
  _CFAutoreleasePoolPush();
  -[NSNotificationCenter postNotificationName:object:userInfo:](+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CFSTR("NSPortDidBecomeInvalidNotification"), a1, 0);
  return _CFAutoreleasePoolPop();
}

uint64_t __NSFireMessagePort(uint64_t a1, unsigned int a2, const __CFData *a3, uint64_t a4)
{
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const void *Value;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v7 = (const __CFDictionary *)CFPropertyListCreateWithData(0, a3, 0, 0, 0);
    if (v7)
    {
      v8 = v7;
      Value = CFDictionaryGetValue(v7, CFSTR("NSMessagePortReplyName"));
      if (Value)
        v10 = (void *)objc_msgSend(objc_allocWithZone((Class)NSMessagePort), "initWithRemoteName:", Value);
      else
        v10 = 0;
      v11 = (void *)CFDictionaryGetValue(v8, CFSTR("NSMessagePortComponents"));
      _CFAutoreleasePoolPush();
      v12 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v13 = objc_msgSend(v11, "count");
      if (v13)
      {
        v14 = v13;
        for (i = 0; i != v14; ++i)
        {
          v16 = objc_msgSend(v11, "objectAtIndex:", i);
          if (_NSIsNSString())
          {
            v17 = objc_msgSend(objc_allocWithZone((Class)NSMessagePort), "initWithRemoteName:", v16);
            if (v17)
            {
              v18 = (void *)v17;
              objc_msgSend(v12, "addObject:", v17);

            }
            else
            {
              NSLog((NSString *)CFSTR("-[NSMessagePort parseMessage:]: could not create port component; this is very bad"));
            }
          }
          else
          {
            objc_msgSend(v12, "addObject:", v16);
          }
        }
      }
      v19 = (void *)objc_msgSend(objc_allocWithZone((Class)NSPortMessage), "initWithSendPort:receivePort:components:", v10, a4, v12);

      CFRelease(v8);
      objc_msgSend(v19, "setMsgid:", a2);
      objc_msgSend(*(id *)(a4 + 32), "handlePortMessage:", v19);

      _CFAutoreleasePoolPop();
    }
  }
  return 0;
}

NSString *_NSProgressFractionDescription(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = 0.0;
  if ((*a1 & 0x8000000000000000) == 0 && (v1 & 0x8000000000000000) == 0 && v1 | v2)
  {
    if (v1)
      v3 = (double)v2 / (double)v1;
    else
      v3 = 1.0;
  }
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lld / %lld (%0.6f)"), v2, v1, *(_QWORD *)&v3);
}

uint64_t sub_181F7E450()
{
  return 0;
}

uint64_t sub_181F7E490()
{
  return 0;
}

uint64_t sub_181F7E4D0()
{
  return 0;
}

uint64_t sub_181F7E510()
{
  return 0;
}

uint64_t sub_181F7E994()
{
  return 0;
}

uint64_t sub_181F7E9D4()
{
  return 0;
}

uint64_t sub_181F7EA4C()
{
  return 0;
}

void sub_181F7EF24(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_181F7EFCC()
{
  return 0;
}

uint64_t sub_181F7F088()
{
  return 0;
}

__CFString *_NSIndentSpace(uint64_t a1)
{
  uint64_t v1;
  __CFString *result;

  if (!a1)
    return &stru_1E0F56070;
  v1 = a1;
  result = &stru_1E0F56070;
  do
  {
    result = (__CFString *)-[__CFString stringByAppendingString:](result, "stringByAppendingString:", CFSTR("    "));
    --v1;
  }
  while (v1);
  return result;
}

uint64_t _NSFastMultiCStringConcat(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, uint64_t a10)
{
  _BYTE *v10;
  unsigned __int8 *i;
  int v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;

  v10 = (_BYTE *)(result - 1);
  while (*++v10)
    ;
  v17 = (unsigned __int8 **)&a10;
  for (i = a9; i; i = *v16)
  {
    v13 = *i;
    *v10 = v13;
    if (v13)
    {
      v14 = i + 1;
      do
      {
        v15 = *v14++;
        *++v10 = v15;
      }
      while (v15);
    }
    v16 = v17++;
  }
  return result;
}

const char *_NSNameOfClass(objc_class *a1)
{
  if (a1)
    return class_getName(a1);
  else
    return "nil";
}

uint64_t _NSCStringToUnsignedLong(char *a1, char **a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char *i;
  unsigned int v14;
  unint64_t v15;
  int v16;
  char v17;
  char v18;
  uint64_t result;

  v4 = MEMORY[0x1E0C80978];
  do
  {
    while (1)
    {
      v6 = *a1++;
      v5 = v6;
      if ((v6 & 0x80000000) != 0)
        break;
      if ((*(_DWORD *)(v4 + 4 * v5 + 60) & 0x4000) == 0)
        goto LABEL_6;
    }
  }
  while (__maskrune(v5, 0x4000uLL));
LABEL_6:
  if (v5 == 43 || v5 == 45)
  {
    v8 = *a1++;
    v7 = v8;
  }
  else
  {
    v7 = v5;
  }
  if (v7 == 48)
  {
    if ((*a1 | 0x20) == 0x78)
    {
      v7 = a1[1];
      a1 += 2;
      v9 = 16;
    }
    else
    {
      v7 = 48;
      v9 = 8;
    }
  }
  else
  {
    v9 = 10;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0xFFFFFFFFFFFFFFFFLL / v9;
  for (i = a1 - 1; ; ++i)
  {
    v14 = v7;
    LODWORD(v15) = v7 - 48;
    if (v15 > 9)
    {
      if ((v14 & 0x80000000) != 0)
      {
        if (!__maskrune(v14, 0x100uLL))
          break;
        v16 = __maskrune(v14, 0x8000uLL);
      }
      else
      {
        if ((*(_DWORD *)(v4 + 4 * v14 + 60) & 0x100) == 0)
          break;
        v16 = *(_DWORD *)(v4 + 4 * v14 + 60) & 0x8000;
      }
      if (v16)
        v17 = -55;
      else
        v17 = -87;
      LOBYTE(v15) = v17 + v14;
    }
    if (v9 <= (char)v15)
      break;
    if (v11 & 1 | (v10 > v12))
    {
      v11 = 1;
    }
    else
    {
      v15 = (char)v15;
      if (v10 == v12 && v15 > ~(0xFFFFFFFFFFFFFFFFLL / v9 * v9))
      {
        v11 = 1;
        v10 = 0xFFFFFFFFFFFFFFFFLL / v9;
      }
      else
      {
        v11 = 0;
        v10 = v15 + v10 * v9;
      }
    }
    v18 = i[1];
    v7 = v18;
  }
  if ((v11 & 1) != 0)
  {
    *__error() = 34;
    result = -1;
  }
  else if (v5 == 45)
  {
    result = -(uint64_t)v10;
  }
  else
  {
    result = v10;
  }
  if (a2)
    *a2 = i;
  return result;
}

const __CFString *_NSFoundationResourceDirectory()
{
  return CFSTR("/");
}

uint64_t _getCurrentNSHostName()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C92C20], "currentHost"), "name");
}

uint64_t ___foundation_swift_process_info_enabled_block_invoke()
{
  uint64_t result;
  BOOL v1;

  result = _os_feature_enabled_impl();
  if ((result & 1) != 0)
  {
    v1 = 1;
  }
  else
  {
    result = (uint64_t)getenv("NSSwiftProcessInfo");
    v1 = result != 0;
  }
  byte_1ECD0A011 = v1;
  return result;
}

uint64_t _ASCII_recognize(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v13;
  uint64_t result;

  a1[4] += a3;
  v8 = objc_msgSend(a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v10 = 0;
    do
    {
      while (1)
      {
        v11 = *(_BYTE *)(a2 + v10);
        if ((v11 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v10) > 0xDu || ((1 << v11) & 0x3700) == 0))
        {
          break;
        }
        ++a1[17];
        objc_msgSend(a4, "appendByte:", v11);
        if (++v10 == a3)
          goto LABEL_15;
      }
      objc_msgSend(a4, "appendPlaceholder");
      v13 = a1[8] + 1;
      a1[8] = v13;
      ++v10;
    }
    while (v13 <= v9 && v10 != a3);
  }
LABEL_15:
  a1[12] = a1[8];
  result = a1[17];
  a1[5] = result;
  return result;
}

uint64_t _BigE_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned int v14;
  unsigned int v15;
  const __CFString *v16;
  unint64_t v17;
  uint64_t result;
  const __CFString *cf;
  unsigned int v20;
  void *v21;
  int v22;
  const __CFAllocator *contentsDeallocator;
  int v24;
  UniChar CharacterAtIndex;
  _WORD v26[2];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v24 = 0;
    v10 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      v11 = v10;
      while (1)
      {
        v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        if (v11 >= a3)
          goto LABEL_36;
      }
      v10 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_34;
      v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      v15 = (v12 + 95);
      if ((v15 > 0x5D || v14 < 0x40 || v14 >= 0x7F)
        && (v15 > 0x5D || v14 < 0xA1 || v14 == 255)
        && ((v12 + 114) > 0x12u || v14 < 0x40 || v14 == 255)
        && ((v12 + 127) > 5u || v14 < 0x40 || v14 >= 0xE0))
      {
        goto LABEL_34;
      }
      v20 = *(unsigned __int8 *)(a2 + v11 + 1);
      v21 = (void *)qword_1ECD0A050;
      v16 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v16)
        break;
      cf = v16;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v16, 0);
      if (objc_msgSend(v21, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(cf);
      v22 = CharacterAtIndex;
      if (!CharacterAtIndex)
        break;
      if (v24)
      {
        v26[0] = v24;
        v26[1] = CharacterAtIndex;
        if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", v26, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      v10 = v11 + 2;
      ++*(_QWORD *)(a1 + 48);
      objc_msgSend(a4, "appendByte1:byte2:", v12, v20);
      v24 = v22;
LABEL_35:
      if (v10 >= a3)
        goto LABEL_36;
    }
    v24 = 0;
LABEL_34:
    objc_msgSend(a4, "appendPlaceholder");
    ++*(_QWORD *)(a1 + 96);
    v17 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v17;
    if (v17 > v9)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_36:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _Big5HKSCS_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  int v14;
  const __CFString *v15;
  unint64_t v16;
  uint64_t result;
  const __CFString *cf;
  unsigned int v19;
  void *v20;
  int v21;
  const __CFAllocator *contentsDeallocator;
  int v23;
  UniChar CharacterAtIndex;
  _WORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v23 = 0;
    v10 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      v11 = v10;
      while (1)
      {
        v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        if (v11 >= a3)
          goto LABEL_26;
      }
      v10 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_24;
      if ((v12 + 121) > 0x77u)
        goto LABEL_24;
      v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if ((v14 - 40) >= 0x57 && (v14 + 95) > 0x5Du)
        goto LABEL_24;
      v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      v20 = (void *)qword_1ECD0A050;
      v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15)
        break;
      cf = v15;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v15, 0);
      if (objc_msgSend(v20, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(cf);
      v21 = CharacterAtIndex;
      if (!CharacterAtIndex)
        break;
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", v25, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      v10 = v11 + 2;
      ++*(_QWORD *)(a1 + 48);
      objc_msgSend(a4, "appendByte1:byte2:", v12, v19);
      v23 = v21;
LABEL_25:
      if (v10 >= a3)
        goto LABEL_26;
    }
    v23 = 0;
LABEL_24:
    objc_msgSend(a4, "appendPlaceholder");
    ++*(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v16;
    if (v16 > v9)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_26:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _Big5_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  int v14;
  const __CFString *v15;
  unint64_t v16;
  uint64_t result;
  const __CFString *cf;
  unsigned int v19;
  void *v20;
  int v21;
  const __CFAllocator *contentsDeallocator;
  int v23;
  UniChar CharacterAtIndex;
  _WORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v23 = 0;
    v10 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      v11 = v10;
      while (1)
      {
        v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        if (v11 >= a3)
          goto LABEL_26;
      }
      v10 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_24;
      if ((v12 + 95) > 0x5Du)
        goto LABEL_24;
      v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if ((v14 - 64) >= 0x3F && (v14 + 95) > 0x5Du)
        goto LABEL_24;
      v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      v20 = (void *)qword_1ECD0A050;
      v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15)
        break;
      cf = v15;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v15, 0);
      if (objc_msgSend(v20, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(cf);
      v21 = CharacterAtIndex;
      if (!CharacterAtIndex)
        break;
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", v25, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      v10 = v11 + 2;
      ++*(_QWORD *)(a1 + 48);
      objc_msgSend(a4, "appendByte1:byte2:", v12, v19);
      v23 = v21;
LABEL_25:
      if (v10 >= a3)
        goto LABEL_26;
    }
    v23 = 0;
LABEL_24:
    objc_msgSend(a4, "appendPlaceholder");
    ++*(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v16;
    if (v16 > v9)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_26:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _WINDOWS936_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned int v14;
  const __CFString *v15;
  unint64_t v16;
  uint64_t result;
  const __CFString *cf;
  unsigned int v19;
  void *v20;
  int v21;
  const __CFAllocator *contentsDeallocator;
  int v23;
  UniChar CharacterAtIndex;
  _WORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v23 = 0;
    v10 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      v11 = v10;
      while (1)
      {
        v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x61u
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        if (v11 >= a3)
          goto LABEL_26;
      }
      v10 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_24;
      if ((v12 + 127) > 0x7Du)
        goto LABEL_24;
      v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0x40 || v14 == 255)
        goto LABEL_24;
      v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      v20 = (void *)qword_1ECD0A050;
      v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15)
        break;
      cf = v15;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v15, 0);
      if (objc_msgSend(v20, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(cf);
      v21 = CharacterAtIndex;
      if (!CharacterAtIndex)
        break;
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", v25, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      v10 = v11 + 2;
      ++*(_QWORD *)(a1 + 48);
      objc_msgSend(a4, "appendByte1:byte2:", v12, v19);
      v23 = v21;
LABEL_25:
      if (v10 >= a3)
        goto LABEL_26;
    }
    v23 = 0;
LABEL_24:
    objc_msgSend(a4, "appendPlaceholder");
    ++*(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v16;
    if (v16 > v9)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_26:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _WINDOWS950_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned int v14;
  const __CFString *v15;
  unint64_t v16;
  uint64_t result;
  const __CFString *cf;
  unsigned int v19;
  void *v20;
  int v21;
  const __CFAllocator *contentsDeallocator;
  int v23;
  UniChar CharacterAtIndex;
  _WORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v23 = 0;
    v10 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      v11 = v10;
      while (1)
      {
        v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        if (v11 >= a3)
          goto LABEL_27;
      }
      v10 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_25;
      if ((v12 + 55) > 0xFDu)
        goto LABEL_25;
      if ((v12 + 95) > 0x58u)
        goto LABEL_25;
      v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0x40 || v14 == 255)
        goto LABEL_25;
      v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      v20 = (void *)qword_1ECD0A050;
      v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15)
        break;
      cf = v15;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v15, 0);
      if (objc_msgSend(v20, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(cf);
      v21 = CharacterAtIndex;
      if (!CharacterAtIndex)
        break;
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", v25, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      v10 = v11 + 2;
      ++*(_QWORD *)(a1 + 48);
      objc_msgSend(a4, "appendByte1:byte2:", v12, v19);
      v23 = v21;
LABEL_26:
      if (v10 >= a3)
        goto LABEL_27;
    }
    v23 = 0;
LABEL_25:
    objc_msgSend(a4, "appendPlaceholder");
    ++*(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v16;
    if (v16 > v9)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_27:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _WINDOWS932_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  int v14;
  const __CFString *v15;
  unint64_t v16;
  uint64_t result;
  const __CFString *cf;
  unsigned __int8 v19;
  void *v20;
  int v21;
  const __CFAllocator *contentsDeallocator;
  int v23;
  UInt8 bytes[2];
  _WORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v23 = 0;
    v10 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      v11 = v10;
      while (1)
      {
        v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (v12 + 95) >= 0x3Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        if (v11 >= a3)
          goto LABEL_29;
      }
      v10 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_27;
      v14 = *(char *)(a2 + v11 + 1);
      if ((v12 + 6) >= 3u && (v12 + 127) >= 0x1Fu && (v12 & 0xF0) != 0xE0)
        goto LABEL_27;
      if (v14 >= -3 && (v14 - 64) > 0x3Eu)
        goto LABEL_27;
      bytes[0] = *(_BYTE *)(a2 + v11);
      v19 = v14;
      bytes[1] = v14;
      v20 = (void *)qword_1ECD0A060;
      v15 = CFStringCreateWithBytesNoCopy(0, bytes, 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15)
        break;
      cf = v15;
      v25[0] = CFStringGetCharacterAtIndex(v15, 0);
      if (objc_msgSend(v20, "indexForKey:length:", v25, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(cf);
      v21 = v25[0];
      if (!v25[0])
        break;
      if (v23)
      {
        v25[0] = v23;
        v25[1] = v21;
        if (objc_msgSend((id)qword_1ECD0A068, "indexForKey:length:", v25, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      v10 = v11 + 2;
      ++*(_QWORD *)(a1 + 48);
      objc_msgSend(a4, "appendByte1:byte2:", v12, v19);
      v23 = v21;
LABEL_28:
      if (v10 >= a3)
        goto LABEL_29;
    }
    v23 = 0;
LABEL_27:
    objc_msgSend(a4, "appendPlaceholder");
    ++*(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v16;
    if (v16 > v9)
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_29:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _WINDOWS949_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned int v14;
  const __CFString *v15;
  unint64_t v16;
  uint64_t result;
  const __CFString *cf;
  unsigned int v19;
  void *v20;
  int v21;
  const __CFAllocator *contentsDeallocator;
  int v23;
  UniChar CharacterAtIndex;
  _WORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v23 = 0;
    v10 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      v11 = v10;
      while (1)
      {
        v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        if (v11 >= a3)
          goto LABEL_26;
      }
      v10 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_24;
      if ((v12 + 127) > 0x7Du)
        goto LABEL_24;
      v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0x41 || v14 == 255)
        goto LABEL_24;
      v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      v20 = (void *)qword_1ECD0A070;
      v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15)
        break;
      cf = v15;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v15, 0);
      if (objc_msgSend(v20, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(cf);
      v21 = CharacterAtIndex;
      if (!CharacterAtIndex)
        break;
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if (objc_msgSend((id)qword_1ECD0A078, "indexForKey:length:", v25, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      v10 = v11 + 2;
      ++*(_QWORD *)(a1 + 48);
      objc_msgSend(a4, "appendByte1:byte2:", v12, v19);
      v23 = v21;
LABEL_25:
      if (v10 >= a3)
        goto LABEL_26;
    }
    v23 = 0;
LABEL_24:
    objc_msgSend(a4, "appendPlaceholder");
    ++*(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v16;
    if (v16 > v9)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_26:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _WINDOWS874_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  _BYTE v18[3];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v17 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        if (((iso8859_11Frqchars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
          ++a1[10];
      }
      else if (v12 > 0x1F)
      {
        if (v12 < 0x7F)
        {
LABEL_13:
          ++a1[17];
          if (v8 > 0x7Eu || v9 >= 0x7Fu)
            goto LABEL_21;
        }
        else
        {
LABEL_20:
          ++a1[18];
LABEL_21:
          v18[0] = v9;
          v18[1] = v8;
          v18[2] = v12;
          if (objc_msgSend((id)qword_1ECD0A080, "indexForBytes:length:", v18, 3) != 0x7FFFFFFFFFFFFFFFLL)
            ++a1[16];
        }
        objc_msgSend(a4, "appendByte:", v12);
        goto LABEL_24;
      }
      if (v12 <= 0xD && ((1 << v12) & 0x3700) != 0)
        goto LABEL_13;
      if ((v12 + 96) < 0x3Bu || (v12 + 33) < 0x1Du)
        goto LABEL_20;
      objc_msgSend(a4, "appendPlaceholder");
      v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17)
        break;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_24:
      v9 = v8;
      v8 = v12;
      --v5;
    }
    while (v5);
  }
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _EUCGB2312_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned int v14;
  const __CFString *v15;
  unint64_t v16;
  uint64_t result;
  const __CFString *cf;
  unsigned int v19;
  void *v20;
  int v21;
  const __CFAllocator *contentsDeallocator;
  int v23;
  UniChar CharacterAtIndex;
  _WORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v23 = 0;
    v10 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      v11 = v10;
      while (1)
      {
        v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        if (v11 >= a3)
          goto LABEL_26;
      }
      v10 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_24;
      if ((v12 + 95) > 0x5Du)
        goto LABEL_24;
      v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0xA1 || v14 == 255)
        goto LABEL_24;
      v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      v20 = (void *)qword_1ECD0A050;
      v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15)
        break;
      cf = v15;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v15, 0);
      if (objc_msgSend(v20, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(cf);
      v21 = CharacterAtIndex;
      if (!CharacterAtIndex)
        break;
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", v25, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      v10 = v11 + 2;
      ++*(_QWORD *)(a1 + 48);
      objc_msgSend(a4, "appendByte1:byte2:", v12, v19);
      v23 = v21;
LABEL_25:
      if (v10 >= a3)
        goto LABEL_26;
    }
    v23 = 0;
LABEL_24:
    objc_msgSend(a4, "appendPlaceholder");
    ++*(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v16;
    if (v16 > v9)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_26:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _EUCJP_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned int v14;
  const __CFString *v15;
  uint64_t v16;
  const __CFString *v17;
  const __CFString *v18;
  unsigned int v20;
  const __CFString *v21;
  const __CFString *v22;
  unint64_t v23;
  uint64_t result;
  const __CFString *cf;
  unsigned int cfa;
  void *v27;
  unsigned int v28;
  void *v29;
  void *v30;
  const __CFAllocator *contentsDeallocator;
  unsigned int v32;
  unint64_t v33;
  UInt8 bytes;
  char v35;
  char v36;
  UniChar CharacterAtIndex;
  __int16 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v33 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v8 = 0;
    v9 = 0;
    LOBYTE(v32) = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    v10 = a2 + 1;
    do
    {
      v11 = v8;
      while (1)
      {
        v12 = *(_BYTE *)(v10 + v11 - 1);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(v10 + v11 - 1) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        if (v11 >= a3)
          goto LABEL_52;
      }
      v8 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_34;
      v14 = *(unsigned __int8 *)(v10 + v11);
      v32 = v14;
      if ((v12 + 95) <= 0x5Du && v14 >= 0xA1 && v14 != 255)
      {
        bytes = *(_BYTE *)(v10 + v11 - 1);
        v35 = v14;
        v27 = (void *)qword_1ECD0A060;
        v15 = CFStringCreateWithBytesNoCopy(0, &bytes, 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
        if (!v15)
          goto LABEL_49;
        cf = v15;
        CharacterAtIndex = CFStringGetCharacterAtIndex(v15, 0);
        if (objc_msgSend(v27, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 80);
        CFRelease(cf);
        v28 = CharacterAtIndex;
        if (!CharacterAtIndex)
          goto LABEL_49;
        if ((_DWORD)v9)
        {
          CharacterAtIndex = v9;
          v38 = v28;
          if (objc_msgSend((id)qword_1ECD0A068, "indexForKey:length:", &CharacterAtIndex, 2) != 0x7FFFFFFFFFFFFFFFLL)
            ++*(_QWORD *)(a1 + 88);
        }
        ++*(_QWORD *)(a1 + 48);
        v8 = v11 + 2;
        objc_msgSend(a4, "appendByte1:byte2:", v12, v32);
        v16 = v28;
        goto LABEL_51;
      }
      if (*(unsigned __int8 *)(v10 + v11 - 1) == 142 && v14 >= 0xA1 && v14 <= 0xDF)
      {
        bytes = -114;
        v35 = v14;
        v29 = (void *)qword_1ECD0A060;
        v17 = CFStringCreateWithBytesNoCopy(0, &bytes, 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
        if (!v17)
          goto LABEL_49;
        v18 = v17;
        CharacterAtIndex = CFStringGetCharacterAtIndex(v17, 0);
        if (objc_msgSend(v29, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 80);
        CFRelease(v18);
        v16 = CharacterAtIndex;
        if (!CharacterAtIndex)
          goto LABEL_49;
        if ((_DWORD)v9)
        {
          CharacterAtIndex = v9;
          v38 = v16;
          if (objc_msgSend((id)qword_1ECD0A068, "indexForKey:length:", &CharacterAtIndex, 2) != 0x7FFFFFFFFFFFFFFFLL)
            ++*(_QWORD *)(a1 + 88);
        }
        ++*(_QWORD *)(a1 + 48);
        v8 = v11 + 2;
        objc_msgSend(a4, "appendByte1:byte2:", 142, v32);
      }
      else
      {
LABEL_34:
        if (*(unsigned __int8 *)(v10 + v11 - 1) != 143 || v11 + 2 >= a3)
          goto LABEL_50;
        if ((v32 + 95) > 0x5Du)
          goto LABEL_50;
        v20 = *(unsigned __int8 *)(v10 + v11 + 1);
        if (v20 < 0xA1 || v20 == 255)
          goto LABEL_50;
        bytes = -113;
        v35 = v32;
        cfa = v20;
        v36 = v20;
        v30 = (void *)qword_1ECD0A060;
        v21 = CFStringCreateWithBytesNoCopy(0, &bytes, 3, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
        if (!v21)
          goto LABEL_49;
        v22 = v21;
        CharacterAtIndex = CFStringGetCharacterAtIndex(v21, 0);
        if (objc_msgSend(v30, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 80);
        CFRelease(v22);
        v16 = CharacterAtIndex;
        if (!CharacterAtIndex)
        {
LABEL_49:
          v9 = 0;
LABEL_50:
          objc_msgSend(a4, "appendPlaceholder");
          ++*(_QWORD *)(a1 + 96);
          v23 = *(_QWORD *)(a1 + 64) + 1;
          *(_QWORD *)(a1 + 64) = v23;
          v16 = v9;
          if (v23 > v33)
            break;
          goto LABEL_51;
        }
        if ((_DWORD)v9)
        {
          CharacterAtIndex = v9;
          v38 = v16;
          if (objc_msgSend((id)qword_1ECD0A068, "indexForKey:length:", &CharacterAtIndex, 2) != 0x7FFFFFFFFFFFFFFFLL)
            ++*(_QWORD *)(a1 + 88);
        }
        ++*(_QWORD *)(a1 + 48);
        v8 = v11 + 3;
        objc_msgSend(a4, "appendByte1:byte2:byte3:", 143, v32, cfa);
      }
LABEL_51:
      v9 = v16;
    }
    while (v8 < a3);
  }
LABEL_52:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _EUCKR_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned int v14;
  const __CFString *v15;
  unint64_t v16;
  uint64_t result;
  const __CFString *cf;
  unsigned int v19;
  void *v20;
  int v21;
  const __CFAllocator *contentsDeallocator;
  int v23;
  UniChar CharacterAtIndex;
  _WORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v23 = 0;
    v10 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      v11 = v10;
      while (1)
      {
        v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        if (v11 >= a3)
          goto LABEL_26;
      }
      v10 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_24;
      if ((v12 + 95) > 0x5Du)
        goto LABEL_24;
      v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0xA1 || v14 == 255)
        goto LABEL_24;
      v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      v20 = (void *)qword_1ECD0A070;
      v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15)
        break;
      cf = v15;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v15, 0);
      if (objc_msgSend(v20, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(cf);
      v21 = CharacterAtIndex;
      if (!CharacterAtIndex)
        break;
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if (objc_msgSend((id)qword_1ECD0A078, "indexForKey:length:", v25, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      v10 = v11 + 2;
      objc_msgSend(a4, "appendByte1:byte2:", v12, v19);
      ++*(_QWORD *)(a1 + 48);
      v23 = v21;
LABEL_25:
      if (v10 >= a3)
        goto LABEL_26;
    }
    v23 = 0;
LABEL_24:
    objc_msgSend(a4, "appendPlaceholder");
    ++*(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v16;
    if (v16 > v9)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_26:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _EUCTW_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v14;
  const UInt8 *v15;
  unsigned int v16;
  const __CFString *v17;
  UniChar v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  const __CFString *v23;
  UniChar v24;
  unint64_t v25;
  uint64_t result;
  const __CFString *cf;
  unsigned int v28;
  unsigned int v29;
  unsigned int bytes;
  void *v31;
  void *v32;
  int v33;
  const __CFAllocator *contentsDeallocator;
  UniChar CharacterAtIndex;
  UniChar v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v10 = 0;
    v11 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    do
    {
      v11 += 4;
      while (1)
      {
        v12 = *(_BYTE *)(a2 + v11 - 4);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11 - 4) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        v14 = v11 - 3;
        ++v11;
        if (v14 >= a3)
          goto LABEL_44;
      }
      v15 = (const UInt8 *)(a2 + v11 - 4);
      if (v11 - 3 < a3 && (v12 + 95) <= 0x5Du)
      {
        v16 = *(unsigned __int8 *)(a2 + v11 - 3);
        if (v16 >= 0xA1 && v16 != 255)
        {
          v28 = *(unsigned __int8 *)(a2 + v11 - 3);
          v31 = (void *)qword_1ECD0A050;
          v17 = CFStringCreateWithBytesNoCopy(0, v15, 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
          if (v17)
          {
            cf = v17;
            CharacterAtIndex = CFStringGetCharacterAtIndex(v17, 0);
            if (objc_msgSend(v31, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
              ++*(_QWORD *)(a1 + 80);
            CFRelease(cf);
            v18 = CharacterAtIndex;
            if (CharacterAtIndex)
            {
              v33 = CharacterAtIndex;
              if (v10)
              {
                CharacterAtIndex = v10;
                v36 = v18;
                if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", &CharacterAtIndex, 2) != 0x7FFFFFFFFFFFFFFFLL)
                  ++*(_QWORD *)(a1 + 88);
              }
              v11 -= 2;
              ++*(_QWORD *)(a1 + 48);
              objc_msgSend(a4, "appendByte1:byte2:", v12, v28, cf);
              goto LABEL_40;
            }
          }
          v10 = 0;
          v15 = (const UInt8 *)(a2 + v11 - 4);
        }
      }
      if (v11 - 1 >= a3)
        goto LABEL_42;
      if (v12 != 142)
        goto LABEL_42;
      v19 = a2 + v11;
      v20 = *(unsigned __int8 *)(a2 + v11 - 3);
      if (v20 < 0xA1)
        goto LABEL_42;
      if (v20 > 0xF0)
        goto LABEL_42;
      v21 = *(unsigned __int8 *)(v19 - 2);
      if (v21 < 0xA1)
        goto LABEL_42;
      if (v21 == 255)
        goto LABEL_42;
      v22 = *(unsigned __int8 *)(v19 - 1);
      if (v22 < 0xA1 || v22 == 255)
        goto LABEL_42;
      v29 = v22;
      bytes = v21;
      v32 = (void *)qword_1ECD0A050;
      v23 = CFStringCreateWithBytesNoCopy(0, v15, 4, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v23)
        goto LABEL_41;
      cf = v23;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v23, 0);
      if (objc_msgSend(v32, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(cf);
      v24 = CharacterAtIndex;
      if (!CharacterAtIndex)
      {
LABEL_41:
        v10 = 0;
LABEL_42:
        objc_msgSend(a4, "appendPlaceholder", cf);
        ++*(_QWORD *)(a1 + 96);
        v25 = *(_QWORD *)(a1 + 64) + 1;
        *(_QWORD *)(a1 + 64) = v25;
        v11 -= 3;
        if (v25 > v9)
          break;
        continue;
      }
      v33 = CharacterAtIndex;
      if (v10)
      {
        CharacterAtIndex = v10;
        v36 = v24;
        if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", &CharacterAtIndex, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      ++*(_QWORD *)(a1 + 48);
      objc_msgSend(a4, "appendByte1:byte2:byte3:byte4:", 142, v20, bytes, v29, cf);
LABEL_40:
      v10 = v33;
    }
    while (v11 < a3);
  }
LABEL_44:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _GB18030_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v14;
  const UInt8 *v15;
  int v16;
  const __CFString *v17;
  UniChar v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  const __CFString *v23;
  UniChar v24;
  unint64_t v25;
  uint64_t result;
  const __CFString *v27;
  const __CFString *cf;
  unsigned int cfa;
  unsigned __int8 v30;
  unsigned int v31;
  unsigned int bytes;
  void *v33;
  void *v34;
  int v35;
  const __CFAllocator *contentsDeallocator;
  UniChar CharacterAtIndex;
  UniChar v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v10 = 0;
    v11 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    do
    {
      v11 += 4;
      while (1)
      {
        v12 = *(char *)(a2 + v11 - 4);
        if (v12 <= 31 && (v12 > 0xD || ((1 << v12) & 0x3700) == 0))
          break;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        v14 = v11 - 3;
        ++v11;
        if (v14 >= a3)
          goto LABEL_44;
      }
      v15 = (const UInt8 *)(a2 + v11 - 4);
      if (v11 - 3 < a3 && (v12 + 127) <= 0x7D)
      {
        v16 = *(char *)(a2 + v11 - 3);
        if (v16 < -1 || (v16 - 64) <= 0x3Eu)
        {
          v30 = *(_BYTE *)(a2 + v11 - 3);
          v33 = (void *)qword_1ECD0A050;
          v17 = CFStringCreateWithBytesNoCopy(0, v15, 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
          if (v17)
          {
            cf = v17;
            CharacterAtIndex = CFStringGetCharacterAtIndex(v17, 0);
            if (objc_msgSend(v33, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
              ++*(_QWORD *)(a1 + 80);
            CFRelease(cf);
            v18 = CharacterAtIndex;
            if (CharacterAtIndex)
            {
              v35 = CharacterAtIndex;
              if (v10)
              {
                CharacterAtIndex = v10;
                v38 = v18;
                if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", &CharacterAtIndex, 2) != 0x7FFFFFFFFFFFFFFFLL)
                  ++*(_QWORD *)(a1 + 88);
              }
              v11 -= 2;
              ++*(_QWORD *)(a1 + 48);
              objc_msgSend(a4, "appendByte1:byte2:", v12, v30);
              goto LABEL_40;
            }
          }
          v10 = 0;
          v15 = (const UInt8 *)(a2 + v11 - 4);
        }
      }
      if (v11 - 1 >= a3)
        goto LABEL_42;
      if ((v12 + 127) > 0x7D)
        goto LABEL_42;
      v19 = a2 + v11;
      v20 = *(unsigned __int8 *)(a2 + v11 - 3);
      if (v20 < 0x30)
        goto LABEL_42;
      if (v20 > 0x39)
        goto LABEL_42;
      v21 = *(unsigned __int8 *)(v19 - 2);
      if (v21 < 0x81)
        goto LABEL_42;
      if (v21 == 255)
        goto LABEL_42;
      v22 = *(unsigned __int8 *)(v19 - 1);
      if (v22 < 0x30 || v22 > 0x39)
        goto LABEL_42;
      cfa = v22;
      v31 = v21;
      bytes = *(unsigned __int8 *)(a2 + v11 - 3);
      v34 = (void *)qword_1ECD0A050;
      v23 = CFStringCreateWithBytesNoCopy(0, v15, 4, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v23)
        goto LABEL_41;
      v27 = v23;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v23, 0);
      if (objc_msgSend(v34, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(v27);
      v24 = CharacterAtIndex;
      if (!CharacterAtIndex)
      {
LABEL_41:
        v10 = 0;
LABEL_42:
        objc_msgSend(a4, "appendPlaceholder");
        ++*(_QWORD *)(a1 + 96);
        v25 = *(_QWORD *)(a1 + 64) + 1;
        *(_QWORD *)(a1 + 64) = v25;
        v11 -= 3;
        if (v25 > v9)
          break;
        continue;
      }
      v35 = CharacterAtIndex;
      if (v10)
      {
        CharacterAtIndex = v10;
        v38 = v24;
        if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", &CharacterAtIndex, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      ++*(_QWORD *)(a1 + 48);
      objc_msgSend(a4, "appendByte1:byte2:byte3:byte4:", v12, bytes, v31, cfa);
LABEL_40:
      v10 = v35;
    }
    while (v11 < a3);
  }
LABEL_44:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _GBK_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v14;
  const __CFString *v15;
  unint64_t v16;
  uint64_t result;
  const __CFString *cf;
  unsigned int v19;
  void *v20;
  int v21;
  const __CFAllocator *contentsDeallocator;
  int v23;
  UniChar CharacterAtIndex;
  _WORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v23 = 0;
    v10 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      v11 = v10;
      while (1)
      {
        v12 = *(char *)(a2 + v11);
        if (v12 <= 31 && (v12 > 0xD || ((1 << v12) & 0x3700) == 0))
          break;
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        if (v11 >= a3)
          goto LABEL_51;
      }
      v10 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_49;
      v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (((v12 + 95) > 8 || v14 < 0xA1 || v14 == 255)
        && ((v12 + 80) > 0x47 || v14 < 0xA1 || v14 == 255)
        && ((v12 + 127) > 0x1Fu || v14 < 0x40 || v14 == 255 || v14 == 127)
        && ((v12 + 86) > 0x54 || v14 < 0x40 || v14 > 0xA0 || v14 == 127)
        && ((v12 & 0xFFFFFFFE) != 0xFFFFFFA8 || v14 < 0x40 || v14 > 0xA0 || v14 == 127)
        && ((v12 + 86) > 5u || v14 < 0xA1 || v14 == 255)
        && ((v12 + 8) > 6 || v14 < 0xA1 || v14 == 255)
        && ((v12 + 95) > 6u || v14 < 0x40 || v14 > 0xA0 || v14 == 127))
      {
        goto LABEL_49;
      }
      v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      v20 = (void *)qword_1ECD0A050;
      v15 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(a2 + v11), 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15)
        break;
      cf = v15;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v15, 0);
      if (objc_msgSend(v20, "indexForKey:length:", &CharacterAtIndex, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(cf);
      v21 = CharacterAtIndex;
      if (!CharacterAtIndex)
        break;
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", v25, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      ++*(_QWORD *)(a1 + 48);
      v10 = v11 + 2;
      objc_msgSend(a4, "appendByte1:byte2:", v12, v19);
      v23 = v21;
LABEL_50:
      if (v10 >= a3)
        goto LABEL_51;
    }
    v23 = 0;
LABEL_49:
    objc_msgSend(a4, "appendPlaceholder");
    ++*(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v16;
    if (v16 > v9)
      goto LABEL_51;
    goto LABEL_50;
  }
LABEL_51:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _HZGB2312_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unint64_t v8;
  unint64_t v9;
  char v10;
  unsigned __int8 v11;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  const __CFString *v16;
  const __CFString *v17;
  int v18;
  BOOL v19;
  unint64_t v20;
  uint64_t result;
  void *v22;
  unint64_t v23;
  const __CFAllocator *contentsDeallocator;
  int v25;
  UInt8 bytes[2];
  char v27;
  char v28;
  __int16 v29;
  _WORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  *(_WORD *)bytes = 31614;
  v29 = 32126;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  v9 = 0;
  v10 = 0;
  v25 = 0;
  contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  while (v9 < a3)
  {
    v11 = *(_BYTE *)(a2 + v9);
    if (v11 != 126 || v9 + 1 >= a3)
      goto LABEL_15;
    v13 = *(unsigned __int8 *)(a2 + v9 + 1);
    if (v13 > 0x7C)
    {
      if (v13 == 126)
      {
LABEL_12:
        ++*(_QWORD *)(a1 + 48);
        v9 += 2;
        objc_msgSend(a4, "appendByte1:byte2:", 126);
      }
      else
      {
        if (v13 != 125)
          goto LABEL_15;
        v9 += 2;
        ++*(_QWORD *)(a1 + 120);
        objc_msgSend(a4, "appendByte1:byte2:", 126);
        v10 = 0;
      }
    }
    else
    {
      if (v13 == 10)
        goto LABEL_12;
      if (v13 == 123)
      {
        v9 += 2;
        ++*(_QWORD *)(a1 + 120);
        objc_msgSend(a4, "appendByte1:byte2:", 126);
        v10 = 1;
      }
      else
      {
LABEL_15:
        if ((v10 & 1) != 0)
        {
          v14 = v9 + 1;
          if (v9 + 1 >= a3)
            goto LABEL_33;
          if ((v11 - 33) > 0x56u)
            goto LABEL_33;
          v15 = *(unsigned __int8 *)(a2 + v9 + 1);
          if (v15 < 0x21 || v15 > 0x7E)
            goto LABEL_33;
          v27 = *(_BYTE *)(a2 + v9);
          v28 = v15;
          v22 = (void *)qword_1ECD0A050;
          v23 = v8;
          v16 = CFStringCreateWithBytesNoCopy(0, bytes, 6, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
          if (!v16)
            goto LABEL_24;
          v17 = v16;
          v30[0] = CFStringGetCharacterAtIndex(v16, 0);
          if (objc_msgSend(v22, "indexForKey:length:", v30, 1) != 0x7FFFFFFFFFFFFFFFLL)
            ++*(_QWORD *)(a1 + 80);
          CFRelease(v17);
          v18 = v30[0];
          if (!v30[0])
          {
LABEL_24:
            v25 = 0;
            v8 = v23;
            goto LABEL_33;
          }
          if (v25)
          {
            v30[0] = v25;
            v30[1] = v18;
            if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", v30, 2) != 0x7FFFFFFFFFFFFFFFLL)
              ++*(_QWORD *)(a1 + 88);
          }
          ++*(_QWORD *)(a1 + 48);
          v9 += 2;
          objc_msgSend(a4, "appendByte1:byte2:", v11, v15, v22);
          v10 = 1;
          v25 = v18;
          v8 = v23;
        }
        else if ((v11 - 32) >= 0x5Fu
               && (*(unsigned __int8 *)(a2 + v9) <= 0xDu ? (v19 = ((1 << v11) & 0x3700) == 0) : (v19 = 1), v19))
        {
          v14 = v9 + 1;
LABEL_33:
          objc_msgSend(a4, "appendPlaceholder", v22);
          ++*(_QWORD *)(a1 + 96);
          v20 = *(_QWORD *)(a1 + 64) + 1;
          *(_QWORD *)(a1 + 64) = v20;
          v9 = v14;
          if (v20 > v8)
            break;
        }
        else
        {
          ++v9;
          ++*(_QWORD *)(a1 + 56);
          objc_msgSend(a4, "appendByte:", v11);
          v10 = 0;
        }
      }
    }
  }
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _ISO2022CN_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  const __CFString *v16;
  const __CFString *v17;
  int v18;
  void *v20;
  uint64_t v21;
  char v22;
  int v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  void *v27;
  const __CFAllocator *contentsDeallocator;
  int v29;
  _WORD v30[2];
  UInt8 bytes[2];
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v34 = 14;
  v37 = 15;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v29 = 0;
    v10 = 0;
    v11 = 0;
    v27 = a4;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    v26 = v8;
    while (1)
    {
      v12 = *(unsigned __int8 *)(a2 + v11);
      if ((_DWORD)v12 == 15)
        break;
      if ((_DWORD)v12 == 14)
      {
        ++v11;
        ++*(_QWORD *)(a1 + 120);
        objc_msgSend(a4, "appendByte:", 14);
        v10 = 1;
        goto LABEL_42;
      }
      if ((v10 & 1) == 0)
      {
        if ((v12 - 32) >= 0xDFu && (v12 > 0xD || ((1 << v12) & 0x3700) == 0))
        {
          v13 = v11 + 1;
          goto LABEL_28;
        }
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        v20 = a4;
        v21 = v12;
        goto LABEL_40;
      }
      v13 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_28;
      v14 = *(unsigned __int8 *)(a2 + v13);
      if ((v12 - 33) > 0xDDu || v14 < 0x21 || (_DWORD)v14 == 255)
      {
        if ((_DWORD)v12 != 27 || (v14 & 0xFE) != 0x4E)
          goto LABEL_28;
        v11 += 2;
        ++*(_QWORD *)(a1 + 120);
        objc_msgSend(a4, "appendByte1:byte2:", 27, v14);
        v10 = 1;
LABEL_42:
        if (v11 >= a3)
          goto LABEL_49;
      }
      else
      {
        v35 = *(_BYTE *)(a2 + v11);
        v36 = v14;
        v15 = (void *)qword_1ECD0A050;
        v16 = CFStringCreateWithBytesNoCopy(0, bytes, 8, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
        if (!v16)
        {
          v29 = 0;
          a4 = v27;
          goto LABEL_27;
        }
        v17 = v16;
        v30[0] = CFStringGetCharacterAtIndex(v16, 0);
        if (objc_msgSend(v15, "indexForKey:length:", v30, 1) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 80);
        CFRelease(v17);
        v18 = v30[0];
        a4 = v27;
        if (v30[0])
        {
          if (v29)
          {
            v30[0] = v29;
            v30[1] = v18;
            if (objc_msgSend((id)qword_1ECD0A058, "indexForKey:length:", v30, 2) != 0x7FFFFFFFFFFFFFFFLL)
              ++*(_QWORD *)(a1 + 88);
          }
          v11 += 2;
          ++*(_QWORD *)(a1 + 48);
          objc_msgSend(v27, "appendByte1:byte2:", v12, v14, v26);
          v10 = 1;
          v29 = v18;
          v9 = v26;
          goto LABEL_42;
        }
        v29 = 0;
LABEL_27:
        v9 = v26;
LABEL_28:
        if (v11 + 3 < a3
          && (_DWORD)v12 == 27
          && *(_BYTE *)(a2 + v13) == 36
          && (v22 = *(_BYTE *)(v11 + a2 + 2), (v22 - 41) <= 2u)
          && ((v23 = *(unsigned __int8 *)(a2 + v11 + 3), (v23 - 71) < 7) || v23 == 69 || v23 == 65))
        {
          *(_WORD *)bytes = 9243;
          v32 = v22;
          v33 = v23;
          v13 = v11 + 4;
          ++*(_QWORD *)(a1 + 120);
          objc_msgSend(a4, "appendByte1:byte2:byte3:byte4:", 27, 36, v26);
        }
        else
        {
          objc_msgSend(a4, "appendPlaceholder", v26);
          ++*(_QWORD *)(a1 + 96);
          v24 = *(_QWORD *)(a1 + 64) + 1;
          *(_QWORD *)(a1 + 64) = v24;
          if (v24 > v9)
            goto LABEL_49;
        }
        v11 = v13;
        if (v13 >= a3)
          goto LABEL_49;
      }
    }
    ++v11;
    ++*(_QWORD *)(a1 + 120);
    v20 = a4;
    v21 = 15;
LABEL_40:
    objc_msgSend(v20, "appendByte:", v21, v26);
    v10 = 0;
    goto LABEL_42;
  }
LABEL_49:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _ISO2022JP1_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  *(_QWORD *)(a1 + 32) += a3;
  return recognizeISO2022JP(a2, a3, (_QWORD *)(a1 + 40), (_QWORD *)(a1 + 48), (_QWORD *)(a1 + 56), (_QWORD *)(a1 + 120), (unint64_t *)(a1 + 64), (uint64_t)&iso2022jpEscape, 8uLL, 3uLL, (char *)&iso2022jp1Escape, 1, *(_DWORD *)(a1 + 24), (_QWORD *)(a1 + 80), (_QWORD *)(a1 + 88), (_QWORD *)(a1 + 96), a4, objc_msgSend((id)a1, "maxSkipBytes"));
}

uint64_t _ISO2022JP2_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  *(_QWORD *)(a1 + 32) += a3;
  return recognizeISO2022JP(a2, a3, (_QWORD *)(a1 + 40), (_QWORD *)(a1 + 48), (_QWORD *)(a1 + 56), (_QWORD *)(a1 + 120), (unint64_t *)(a1 + 64), (uint64_t)&iso2022jp2_3Escape, 0xEuLL, 9uLL, "DC", 2, *(_DWORD *)(a1 + 24), (_QWORD *)(a1 + 80), (_QWORD *)(a1 + 88), (_QWORD *)(a1 + 96), a4, objc_msgSend((id)a1, "maxSkipBytes"));
}

uint64_t _ISO2022JP_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  *(_QWORD *)(a1 + 32) += a3;
  return recognizeISO2022JP(a2, a3, (_QWORD *)(a1 + 40), (_QWORD *)(a1 + 48), (_QWORD *)(a1 + 56), (_QWORD *)(a1 + 120), (unint64_t *)(a1 + 64), (uint64_t)&iso2022jpEscape, 8uLL, 3uLL, 0, 0, *(_DWORD *)(a1 + 24), (_QWORD *)(a1 + 80), (_QWORD *)(a1 + 88), (_QWORD *)(a1 + 96), a4, objc_msgSend((id)a1, "maxSkipBytes"));
}

uint64_t _ISO2022KR_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  const __CFString *v16;
  int v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  void *v23;
  unint64_t v24;
  const __CFAllocator *contentsDeallocator;
  int v26;
  UInt8 bytes[4];
  char v28;
  char v29;
  char v30;
  _WORD v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  *(_DWORD *)bytes = 1126769691;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  v9 = 0;
  v10 = 0;
  v26 = 0;
  contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  while (1)
  {
    v11 = v9;
LABEL_3:
    if (v11 >= a3)
      goto LABEL_42;
    v9 = v11 + 2;
    while (1)
    {
      v12 = *(unsigned __int8 *)(a2 + v9 - 2);
      if ((_DWORD)v12 != 27)
        break;
      if (v9 + 1 >= a3 || *(_BYTE *)(a2 + v9 - 1) != 36 || *(_BYTE *)(a2 + v9) != 41 || *(_BYTE *)(a2 + v9 + 1) != 67)
        goto LABEL_14;
      ++*(_QWORD *)(a1 + 120);
      v13 = v9 + 2;
      objc_msgSend(a4, "appendBytes:count:", v9 + 2 + a2, 4);
      v9 += 4;
      if (v13 >= a3)
        goto LABEL_42;
    }
    if ((_DWORD)v12 == 14)
    {
      --v9;
      ++*(_QWORD *)(a1 + 120);
      v28 = 14;
      objc_msgSend(a4, "appendByte:", 14);
      v10 = 1;
      continue;
    }
    if ((_DWORD)v12 == 15)
    {
      --v9;
      ++*(_QWORD *)(a1 + 120);
      v28 = 15;
      v20 = a4;
      v21 = 15;
      goto LABEL_37;
    }
LABEL_14:
    if ((v10 & 1) == 0)
    {
      if ((v12 - 32) >= 0x5F && (v12 > 0xD || ((1 << v12) & 0x3700) == 0))
      {
        v11 = v9 - 1;
        goto LABEL_32;
      }
      --v9;
      ++*(_QWORD *)(a1 + 56);
      v20 = a4;
      v21 = v12;
LABEL_37:
      objc_msgSend(v20, "appendByte:", v21);
      v10 = 0;
      continue;
    }
    v11 = v9 - 1;
    if (v9 - 1 >= a3)
      goto LABEL_32;
    if ((v12 - 33) > 0x5D)
      goto LABEL_32;
    v14 = *(unsigned __int8 *)(a2 + v9 - 1);
    if (v14 < 0x21 || v14 > 0x7E)
      goto LABEL_32;
    v29 = *(_BYTE *)(a2 + v9 - 2);
    v30 = v14;
    v23 = (void *)qword_1ECD0A070;
    v24 = v8;
    v15 = CFStringCreateWithBytesNoCopy(0, bytes, 7, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
    if (!v15)
      break;
    v16 = v15;
    v31[0] = CFStringGetCharacterAtIndex(v15, 0);
    if (objc_msgSend(v23, "indexForKey:length:", v31, 1) != 0x7FFFFFFFFFFFFFFFLL)
      ++*(_QWORD *)(a1 + 80);
    CFRelease(v16);
    v17 = v31[0];
    if (!v31[0])
      break;
    if (v26)
    {
      v31[0] = v26;
      v31[1] = v17;
      if (objc_msgSend((id)qword_1ECD0A078, "indexForKey:length:", v31, 2) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 88);
    }
    ++*(_QWORD *)(a1 + 48);
    objc_msgSend(a4, "appendByte1:byte2:", v12, v14, v23);
    v10 = 1;
    v26 = v17;
    v8 = v24;
  }
  v26 = 0;
  v8 = v24;
LABEL_32:
  objc_msgSend(a4, "appendPlaceholder", v23);
  ++*(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 64) + 1;
  *(_QWORD *)(a1 + 64) = v19;
  if (v19 <= v8)
    goto LABEL_3;
LABEL_42:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _ISOLATIN1_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  _BYTE v18[3];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v17 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin1FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          v13 = 0;
          ++a1[10];
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = (_DWORD)v12 != 127;
        if ((v12 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0)
        break;
      objc_msgSend(a4, "appendPlaceholder");
      v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17)
        goto LABEL_26;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_26;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        objc_msgSend(a4, "appendByte:", v12);
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if (objc_msgSend((id)qword_1ECD0A088, "indexForBytes:length:", v18, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN10_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  _BYTE v18[3];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v17 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin10FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          v13 = 0;
          ++a1[10];
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = (_DWORD)v12 != 127;
        if ((v12 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0)
        break;
      objc_msgSend(a4, "appendPlaceholder");
      v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17)
        goto LABEL_26;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_26;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        objc_msgSend(a4, "appendByte:", v12);
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if (objc_msgSend((id)qword_1ECD0A090, "indexForBytes:length:", v18, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN2_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  _BYTE v17[3];
  uint64_t v18;

  v5 = a3;
  v18 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v8 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v9 = v8;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v13 = *a2++;
      v12 = v13;
      v14 = v13;
      if (v13 < 0 && ((isolatin2FrqChars[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)) & 1) != 0)
        ++a1[10];
      if ((vmaxv_u16((uint16x4_t)vceq_s16(vdup_n_s16(v14), (int16x4_t)0x9000C000A000DLL)) & 1) == 0
        && v11 != 8
        && v14 <= 0x9F
        && (v14 - 32) > 0x5Eu)
      {
        objc_msgSend(a4, "appendPlaceholder");
        v15 = a1[8] + 1;
        a1[8] = v15;
        if (v15 > v9)
          goto LABEL_21;
        v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_20;
      }
      if (v14 >= 0x7F)
        break;
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu)
        goto LABEL_17;
LABEL_19:
      objc_msgSend(a4, "appendByte:", v14);
LABEL_20:
      v11 = v10;
      v10 = v14;
      if (!--v5)
        goto LABEL_21;
    }
    ++a1[18];
LABEL_17:
    v17[0] = v11;
    v17[1] = v10;
    v17[2] = v14;
    if (objc_msgSend((id)qword_1ECD0A098, "indexForBytes:length:", v17, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_19;
  }
LABEL_21:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN3_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  unint64_t v18;
  uint64_t result;
  _BYTE v20[3];
  uint64_t v21;

  v5 = a3;
  v21 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v8 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v9 = v8;
    v10 = 0;
    v11 = 0;
    do
    {
      v13 = *a2++;
      v12 = v13;
      v14 = v13;
      if (v13 < 0)
      {
        if (((isolatin3FrqChars[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)) & 1) != 0)
        {
          v15 = 0;
          ++a1[10];
        }
        else
        {
          v15 = 0;
        }
      }
      else
      {
        v15 = (_DWORD)v14 != 127;
        if ((v14 - 32) < 0x5F)
          goto LABEL_13;
      }
      v16 = v14 > 0xD || ((1 << v14) & 0x3700) == 0;
      if (v16 && (v14 < 0xA0 || (_DWORD)v14 == 165))
      {
LABEL_18:
        objc_msgSend(a4, "appendPlaceholder");
        v18 = a1[8] + 1;
        a1[8] = v18;
        if (v18 > v9)
          break;
        v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_20;
      }
LABEL_13:
      if ((v14 & 0xFFFFFFEF) == 0xAE)
        goto LABEL_18;
      if ((v14 - 195) <= 0x2D && ((1 << (v14 + 61)) & 0x200100002001) != 0)
        goto LABEL_18;
      if (!v15)
      {
        ++a1[18];
LABEL_30:
        v20[0] = v11;
        v20[1] = v10;
        v20[2] = v14;
        if (objc_msgSend((id)qword_1ECD0A0A0, "indexForBytes:length:", v20, 3) != 0x7FFFFFFFFFFFFFFFLL)
          ++a1[16];
        goto LABEL_32;
      }
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu)
        goto LABEL_30;
LABEL_32:
      objc_msgSend(a4, "appendByte:", v14);
LABEL_20:
      v11 = v10;
      v10 = v14;
      --v5;
    }
    while (v5);
  }
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN4_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  _BYTE v18[3];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v17 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin4FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          v13 = 0;
          ++a1[10];
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = (_DWORD)v12 != 127;
        if ((v12 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0)
        break;
      objc_msgSend(a4, "appendPlaceholder");
      v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17)
        goto LABEL_26;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_26;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        objc_msgSend(a4, "appendByte:", v12);
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if (objc_msgSend((id)qword_1ECD0A0A8, "indexForBytes:length:", v18, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN5_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  _BYTE v18[3];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v17 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin5FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          v13 = 0;
          ++a1[10];
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = (_DWORD)v12 != 127;
        if ((v12 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0)
        break;
      objc_msgSend(a4, "appendPlaceholder");
      v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17)
        goto LABEL_26;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_26;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        objc_msgSend(a4, "appendByte:", v12);
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if (objc_msgSend((id)qword_1ECD0A0B0, "indexForBytes:length:", v18, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN6_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  _BYTE v18[3];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v17 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin6FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          v13 = 0;
          ++a1[10];
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = (_DWORD)v12 != 127;
        if ((v12 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0)
        break;
      objc_msgSend(a4, "appendPlaceholder");
      v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17)
        goto LABEL_26;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_26;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        objc_msgSend(a4, "appendByte:", v12);
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if (objc_msgSend((id)qword_1ECD0A0B8, "indexForBytes:length:", v18, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN7_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  _BYTE v18[3];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v17 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin7FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          v13 = 0;
          ++a1[10];
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = (_DWORD)v12 != 127;
        if ((v12 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0)
        break;
      objc_msgSend(a4, "appendPlaceholder");
      v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17)
        goto LABEL_26;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_26;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        objc_msgSend(a4, "appendByte:", v12);
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if (objc_msgSend((id)qword_1ECD0A0C0, "indexForBytes:length:", v18, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN8_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  _BYTE v18[3];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v17 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin8FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          v13 = 0;
          ++a1[10];
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = (_DWORD)v12 != 127;
        if ((v12 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0)
        break;
      objc_msgSend(a4, "appendPlaceholder");
      v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17)
        goto LABEL_26;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_26;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        objc_msgSend(a4, "appendByte:", v12);
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if (objc_msgSend((id)qword_1ECD0A0C8, "indexForBytes:length:", v18, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISOLATIN9_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  _BYTE v18[3];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v17 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin9FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          v13 = 0;
          ++a1[10];
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = (_DWORD)v12 != 127;
        if ((v12 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0)
        break;
      objc_msgSend(a4, "appendPlaceholder");
      v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17)
        goto LABEL_26;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_26;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        objc_msgSend(a4, "appendByte:", v12);
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if (objc_msgSend((id)qword_1ECD0A0D0, "indexForBytes:length:", v18, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISO88596_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  unsigned int v17;
  unint64_t v18;
  uint64_t result;
  unint64_t v20;
  _BYTE v21[3];
  uint64_t v22;

  v5 = a3;
  v22 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v20 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        v13 = 0;
        if (((iso8859_6FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
          ++a1[10];
      }
      else
      {
        v13 = v10 != 127;
        if ((v10 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      v15 = v14 && (v10 + 63) >= 0x1A;
      if (!v15 || (v10 + 32) < 0x13u)
        break;
      v17 = v12 - 160;
      if (v17 <= 0x1F && ((1 << v17) & 0x88003011) != 0)
        break;
      objc_msgSend(a4, "appendPlaceholder");
      v18 = a1[8] + 1;
      a1[8] = v18;
      if (v18 > v20)
        goto LABEL_32;
      v8 = 0;
      LOBYTE(v10) = 0;
LABEL_26:
      v9 = v8;
      v8 = v10;
      if (!--v5)
        goto LABEL_32;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_25:
        objc_msgSend(a4, "appendByte:", v10);
        goto LABEL_26;
      }
    }
    else
    {
      ++a1[18];
    }
    v21[0] = v9;
    v21[1] = v8;
    v21[2] = v10;
    if (objc_msgSend((id)qword_1ECD0A0D8, "indexForBytes:length:", v21, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_25;
  }
LABEL_32:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISO88595_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  _BYTE v18[3];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v17 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        if (((iso8859_5FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          v13 = 0;
          ++a1[10];
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = (_DWORD)v12 != 127;
        if ((v12 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || v12 >= 0xA0)
        break;
      objc_msgSend(a4, "appendPlaceholder");
      v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17)
        goto LABEL_26;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_26;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        objc_msgSend(a4, "appendByte:", v12);
        goto LABEL_21;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v12;
    if (objc_msgSend((id)qword_1ECD0A0E0, "indexForBytes:length:", v18, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_20;
  }
LABEL_26:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISO88597_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  _BYTE v18[3];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v17 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        v13 = 0;
        if (((windows1253[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
          ++a1[10];
      }
      else
      {
        v13 = v10 != 127;
        if ((v10 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      if (!v14 || (v10 + 1) >= 0xA1u && v12 != 174 && v12 != 210)
        break;
      objc_msgSend(a4, "appendPlaceholder");
      v15 = a1[8] + 1;
      a1[8] = v15;
      if (v15 > v17)
        goto LABEL_27;
      v8 = 0;
      LOBYTE(v10) = 0;
LABEL_20:
      v9 = v8;
      v8 = v10;
      if (!--v5)
        goto LABEL_27;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_19:
        objc_msgSend(a4, "appendByte:", v10);
        goto LABEL_20;
      }
    }
    else
    {
      ++a1[18];
    }
    v18[0] = v9;
    v18[1] = v8;
    v18[2] = v10;
    if (objc_msgSend((id)qword_1ECD0A0E8, "indexForBytes:length:", v18, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_19;
  }
LABEL_27:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISO88598_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t result;
  unint64_t v19;
  _BYTE v20[3];
  uint64_t v21;

  v5 = a3;
  v21 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v19 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        v13 = 0;
        if (((iso8859_8FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
          ++a1[10];
      }
      else
      {
        v13 = v10 != 127;
        if ((v10 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD;
      v15 = (1 << v12) & 0x3700;
      if (!v14 && v15 != 0)
        break;
      if ((v10 + 96) >= 0x1F)
      {
        if ((v10 + 33) <= 0x1Fu && (v10 + 3) < 0xFEu)
          break;
      }
      else if (v10 != -95)
      {
        break;
      }
      objc_msgSend(a4, "appendPlaceholder");
      v17 = a1[8] + 1;
      a1[8] = v17;
      if (v17 > v19)
        goto LABEL_29;
      v8 = 0;
      LOBYTE(v10) = 0;
LABEL_20:
      v9 = v8;
      v8 = v10;
      if (!--v5)
        goto LABEL_29;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_19:
        objc_msgSend(a4, "appendByte:", v10);
        goto LABEL_20;
      }
    }
    else
    {
      ++a1[18];
    }
    v20[0] = v9;
    v20[1] = v8;
    v20[2] = v10;
    if (objc_msgSend((id)qword_1ECD0A0F0, "indexForBytes:length:", v20, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_19;
  }
LABEL_29:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _ISO885911_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  uint64_t result;
  unint64_t v19;
  _BYTE v20[3];
  uint64_t v21;

  v5 = a3;
  v21 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v19 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
      {
        v13 = 0;
        if (((iso8859_11Frqchars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
          ++a1[10];
      }
      else
      {
        v13 = v10 != 127;
        if ((v10 - 32) < 0x5F)
          break;
      }
      v14 = v12 > 0xD;
      v15 = (1 << v12) & 0x3700;
      v16 = v14 || v15 == 0;
      if (!v16 || (v10 + 96) < 0x3B || (v10 + 33) <= 0x1Cu)
        break;
      objc_msgSend(a4, "appendPlaceholder");
      v17 = a1[8] + 1;
      a1[8] = v17;
      if (v17 > v19)
        goto LABEL_26;
      v8 = 0;
      LOBYTE(v10) = 0;
LABEL_20:
      v9 = v8;
      v8 = v10;
      if (!--v5)
        goto LABEL_26;
    }
    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_19:
        objc_msgSend(a4, "appendByte:", v10);
        goto LABEL_20;
      }
    }
    else
    {
      ++a1[18];
    }
    v20[0] = v9;
    v20[1] = v8;
    v20[2] = v10;
    if (objc_msgSend((id)qword_1ECD0A0F8, "indexForBytes:length:", v20, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_19;
  }
LABEL_26:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _SHIFTJISX0213_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  int v14;
  const __CFString *v15;
  unint64_t v16;
  uint64_t result;
  const __CFString *cf;
  unsigned __int8 v19;
  void *v20;
  int v21;
  const __CFAllocator *contentsDeallocator;
  int v23;
  UInt8 bytes[2];
  _WORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v23 = 0;
    v10 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      v11 = v10;
      while (1)
      {
        v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (v12 + 95) >= 0x3Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }
        ++v11;
        ++*(_QWORD *)(a1 + 56);
        objc_msgSend(a4, "appendByte:", v12);
        if (v11 >= a3)
          goto LABEL_28;
      }
      v10 = v11 + 1;
      if (v11 + 1 >= a3)
        goto LABEL_26;
      v14 = *(char *)(a2 + v11 + 1);
      if ((v12 + 127) >= 0x1Fu && (v12 & 0xF0) != 0xE0)
        goto LABEL_26;
      if (v14 >= -3 && (v14 - 64) > 0x3Eu)
        goto LABEL_26;
      bytes[0] = *(_BYTE *)(a2 + v11);
      v19 = v14;
      bytes[1] = v14;
      v20 = (void *)qword_1ECD0A060;
      v15 = CFStringCreateWithBytesNoCopy(0, bytes, 2, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15)
        break;
      cf = v15;
      v25[0] = CFStringGetCharacterAtIndex(v15, 0);
      if (objc_msgSend(v20, "indexForKey:length:", v25, 1) != 0x7FFFFFFFFFFFFFFFLL)
        ++*(_QWORD *)(a1 + 80);
      CFRelease(cf);
      v21 = v25[0];
      if (!v25[0])
        break;
      if (v23)
      {
        v25[0] = v23;
        v25[1] = v21;
        if (objc_msgSend((id)qword_1ECD0A068, "indexForKey:length:", v25, 2) != 0x7FFFFFFFFFFFFFFFLL)
          ++*(_QWORD *)(a1 + 88);
      }
      ++*(_QWORD *)(a1 + 48);
      v10 = v11 + 2;
      objc_msgSend(a4, "appendByte1:byte2:", v12, v19);
      v23 = v21;
LABEL_27:
      if (v10 >= a3)
        goto LABEL_28;
    }
    v23 = 0;
LABEL_26:
    objc_msgSend(a4, "appendPlaceholder");
    ++*(_QWORD *)(a1 + 96);
    v16 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v16;
    if (v16 > v9)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_28:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

unint64_t _UTF16_recognize(uint64_t a1, unsigned __int16 *a2, unint64_t a3, void *a4)
{
  _BOOL4 v5;

  *(_QWORD *)(a1 + 32) += a3;
  if (a3 < 2)
    return 0;
  if ((__int16)*a2 == -2)
  {
    v5 = 1;
    *(_BYTE *)(a1 + 161) = 1;
  }
  else
  {
    v5 = *(_BYTE *)(a1 + 161) != 0;
  }
  return recognizeUTF16(a2, a3, v5, (_QWORD *)(a1 + 40), (_QWORD *)(a1 + 48), (_QWORD *)(a1 + 64), (_QWORD *)(a1 + 96), (_BYTE *)(a1 + 162), a4, (_QWORD *)(a1 + 72));
}

unint64_t _UTF16BE_recognize(uint64_t a1, unsigned __int16 *a2, unint64_t a3, void *a4)
{
  *(_QWORD *)(a1 + 32) += a3;
  if (a3 < 2)
    return 0;
  *(_BYTE *)(a1 + 161) = 1;
  return recognizeUTF16(a2, a3, 1, (_QWORD *)(a1 + 40), (_QWORD *)(a1 + 48), (_QWORD *)(a1 + 64), (_QWORD *)(a1 + 96), (_BYTE *)(a1 + 162), a4, (_QWORD *)(a1 + 72));
}

unint64_t _UTF16LE_recognize(uint64_t a1, unsigned __int16 *a2, unint64_t a3, void *a4)
{
  *(_QWORD *)(a1 + 32) += a3;
  if (a3 < 2)
    return 0;
  *(_BYTE *)(a1 + 161) = 0;
  return recognizeUTF16(a2, a3, 0, (_QWORD *)(a1 + 40), (_QWORD *)(a1 + 48), (_QWORD *)(a1 + 64), (_QWORD *)(a1 + 96), (_BYTE *)(a1 + 162), a4, (_QWORD *)(a1 + 72));
}

unint64_t _UTF32_recognize(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  *(_QWORD *)(a1 + 32) += a3;
  if (a3 < 4)
    return 0;
  *(_BYTE *)(a1 + 161) = *a2 == 65534;
  objc_msgSend(a4, "appendUTF32Char:", 65279);
  return recognizeUTF32(a2, a3, *(unsigned __int8 *)(a1 + 161), (_QWORD *)(a1 + 40), (_QWORD *)(a1 + 64), (_QWORD *)(a1 + 96), (_BYTE *)(a1 + 162), a4);
}

unint64_t _UTF32BE_recognize(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  *(_QWORD *)(a1 + 32) += a3;
  if (a3 < 4)
    return 0;
  *(_BYTE *)(a1 + 161) = 1;
  return recognizeUTF32(a2, a3, 1, (_QWORD *)(a1 + 40), (_QWORD *)(a1 + 64), (_QWORD *)(a1 + 96), (_BYTE *)(a1 + 162), a4);
}

unint64_t _UTF32LE_recognize(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  *(_QWORD *)(a1 + 32) += a3;
  if (a3 < 4)
    return 0;
  *(_BYTE *)(a1 + 161) = 0;
  return recognizeUTF32(a2, a3, 0, (_QWORD *)(a1 + 40), (_QWORD *)(a1 + 64), (_QWORD *)(a1 + 96), (_BYTE *)(a1 + 162), a4);
}

uint64_t _UTF7_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  int v18;
  BOOL v19;
  _BOOL4 v22;
  unint64_t v23;
  uint64_t result;

  *(_QWORD *)(a1 + 32) += a3;
  v8 = objc_msgSend((id)a1, "maxSkipBytes");
  if (a3)
  {
    v9 = v8;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *(unsigned __int8 *)(a2 + v11);
      v13 = v11 + 1;
      if ((_DWORD)v12 == 43 && v13 < a3)
      {
        v18 = *(unsigned __int8 *)(a2 + v13);
        if (v18 == 45)
          goto LABEL_34;
        v19 = (v18 - 48) >= 0xA && (v18 & 0xFFFFFFDF) - 65 >= 0x1A;
        if (!v19 || (v18 | 4) == 0x2F)
          break;
      }
      if ((v10 & 1) != 0)
      {
        if (((v12 & 0xDF) - 65) < 0x1Au
          || ((_DWORD)v12 != 43 ? (v15 = (v12 - 47) > 0xAu) : (v15 = 0), !v15))
        {
          v13 = v11 + 1;
          ++*(_QWORD *)(a1 + 112);
          v10 = 1;
          goto LABEL_47;
        }
        v22 = (v12 - 32) < 0x5E || (v12 - 9) < 2 || (_DWORD)v12 == 13;
        if ((_DWORD)v12 != 45 && v22)
          goto LABEL_46;
        if ((_DWORD)v12 == 45)
        {
          v13 = v11 + 1;
          if (v11 + 1 < a3)
          {
            if (*(_BYTE *)(a2 + v13) == 45)
            {
              v13 = v11 + 2;
              *(_QWORD *)(a1 + 112) += 2;
              objc_msgSend(a4, "appendByte:", 45);
              v10 = 0;
              v12 = *(unsigned __int8 *)(v11 + a2 + 3);
            }
            else
            {
LABEL_55:
              ++*(_QWORD *)(a1 + 112);
              v10 = 1;
              v12 = 45;
            }
LABEL_47:
            objc_msgSend(a4, "appendByte:", v12);
            goto LABEL_48;
          }
          if (v11 + 1 == a3)
            goto LABEL_55;
        }
      }
      else
      {
        v16 = (v12 - 32) >= 0x5Eu || (_DWORD)v12 == 92;
        if (!v16 || (v12 <= 0xD ? (v17 = ((1 << v12) & 0x2600) == 0) : (v17 = 1), !v17))
        {
LABEL_46:
          v10 = 0;
          v13 = v11 + 1;
          ++*(_QWORD *)(a1 + 104);
          goto LABEL_47;
        }
      }
      objc_msgSend(a4, "appendPlaceholder");
      v23 = *(_QWORD *)(a1 + 64) + 1;
      *(_QWORD *)(a1 + 64) = v23;
      if (v23 > v9)
        goto LABEL_58;
      v13 = v11 + 1;
LABEL_48:
      v11 = v13;
      if (v13 >= a3)
        goto LABEL_58;
    }
    v10 = 1;
    *(_BYTE *)(a1 + 160) = 1;
LABEL_34:
    v12 = 43;
    goto LABEL_47;
  }
LABEL_58:
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 64);
  result = *(_QWORD *)(a1 + 112) + *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _UTF8_recognize(uint64_t a1, unsigned __int8 *a2, unint64_t a3, void *a4)
{
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t result;

  *(_QWORD *)(a1 + 32) += a3;
  if (a3 < 3)
  {
    *(_BYTE *)(a1 + 162) = 0;
    v8 = objc_msgSend((id)a1, "maxSkipBytes");
    if (!a3)
      goto LABEL_54;
  }
  else
  {
    v7 = *a2 == 239 && a2[1] == 187 && a2[2] == 191;
    *(_BYTE *)(a1 + 162) = v7;
    v8 = objc_msgSend((id)a1, "maxSkipBytes");
  }
  v9 = v8;
  v10 = 0;
  v11 = 0;
  LOBYTE(v12) = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = *(_QWORD *)(a1 + 64);
  while (v16 <= v9)
  {
    v17 = v13;
    v13 = v12;
    v12 = (char)a2[v15];
    v18 = v11 - 1;
    if ((unint64_t)(v11 - 1) >= 4)
    {
      if (v11 == 5)
      {
        v11 = 0;
        if (v12 < 0 && (v12 + 64) >= 0x37u)
        {
          if (v15 + 1 < a3)
          {
            v22 = (char)a2[v15 + 1];
            if ((v22 & 0x80000000) == 0 || (v22 + 64) <= 0x36u)
            {
              v11 = 0;
              *(_QWORD *)(a1 + 64) = v16 + 1;
              goto LABEL_45;
            }
          }
LABEL_41:
          *(_QWORD *)(a1 + 64) = v16 + 1;
          v11 = 5;
          goto LABEL_45;
        }
      }
      else
      {
        if (v11)
          goto LABEL_45;
        if (v16 != v14)
        {
          objc_msgSend(a4, "appendPlaceholder");
          ++*(_QWORD *)(a1 + 96);
          v16 = *(_QWORD *)(a1 + 64);
        }
        if ((v12 & 0x80000000) == 0)
        {
          ++*(_QWORD *)(a1 + 56);
          objc_msgSend(a4, "appendByte:", v12);
          v10 = 0;
          v11 = 0;
          goto LABEL_44;
        }
        if ((v12 + 64) <= 0x36)
        {
          v10 = expectMap[v12 >> 4];
          v11 = 1;
LABEL_44:
          v14 = v16;
LABEL_45:
          v16 = *(_QWORD *)(a1 + 64);
          if (v16 - v14 == 4)
            v11 = 0;
          ++v15;
          goto LABEL_48;
        }
        v14 = v16;
        v11 = 5;
        v10 = 5;
      }
    }
    else
    {
      if (v12 <= -65)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v11 = 2;
        switch(v18)
        {
          case 0:
            break;
          case 1:
            v20 = 0;
            v21 = 0;
            v19 = 1;
            v11 = 3;
            break;
          case 2:
            v19 = 0;
            v20 = 0;
            v21 = 0;
            v11 = 4;
            break;
          case 3:
            v19 = 0;
            v21 = 0;
            v11 = 0;
            v20 = 1;
            break;
          default:
            v19 = 0;
            v20 = 0;
            v21 = 1;
            v11 = 5;
            break;
        }
        if (v10 == 3 && v19 && v17 == 237 && v13 >= 0xA0u && v13 <= 0xBFu)
        {
          v11 = 0;
          *(_QWORD *)(a1 + 64) = v16 + 3;
          v10 = 3;
          goto LABEL_45;
        }
        if (((v10 != v11) & ~v20) == 0)
        {
          ++*(_QWORD *)(a1 + 48);
          objc_msgSend(a4, "appendBytes:count:", &a2[v15 - v11 + 1]);
          v11 = 0;
          goto LABEL_45;
        }
        if (!v21)
          goto LABEL_45;
        goto LABEL_41;
      }
      v16 += v11;
      *(_QWORD *)(a1 + 64) = v16;
      v11 = 5;
    }
LABEL_48:
    if (v15 >= a3)
      break;
  }
  if (v11)
  {
    *(_QWORD *)(a1 + 64) = v16 + v11;
    if (v16 + v11 != v14)
    {
      objc_msgSend(a4, "appendPlaceholder");
      ++*(_QWORD *)(a1 + 96);
    }
  }
LABEL_54:
  result = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t _WINDOWS1256_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  _BYTE v17[3];
  uint64_t v18;

  v5 = a3;
  v18 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v16 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0)
        break;
      if (v12 > 0x1F)
      {
        if (v12 < 0x7F)
        {
LABEL_16:
          ++a1[17];
          if (v8 <= 0x7Eu && v9 < 0x7Fu)
          {
LABEL_18:
            objc_msgSend(a4, "appendByte:", v12);
            goto LABEL_19;
          }
LABEL_10:
          v17[0] = v9;
          v17[1] = v8;
          v17[2] = v12;
          if (objc_msgSend((id)qword_1ECD0A100, "indexForBytes:length:", v17, 3) != 0x7FFFFFFFFFFFFFFFLL)
            ++a1[16];
          goto LABEL_18;
        }
LABEL_9:
        ++a1[18];
        goto LABEL_10;
      }
      if (v12 <= 0xD && ((1 << v12) & 0x3700) != 0)
        goto LABEL_16;
      objc_msgSend(a4, "appendPlaceholder");
      v14 = a1[8] + 1;
      a1[8] = v14;
      if (v14 > v16)
        goto LABEL_23;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_19:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_23;
    }
    if (((windows1256[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
      ++a1[10];
    goto LABEL_9;
  }
LABEL_23:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1257_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  _QWORD *v21;
  unint64_t v22;
  uint64_t result;
  unint64_t v24;
  _BYTE v25[3];
  uint64_t v26;

  v5 = a3;
  v26 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v24 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0 && ((windows1257[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        ++a1[10];
      v13 = (v12 & 0xFFFFFFFD) == 0x81 || (v12 & 0xFFFFFFFD) == 136;
      v14 = v13 || (_DWORD)v12 == 140;
      v15 = v14 || (v12 & 0xFFFFFFF7) == 144;
      v16 = v15 || (_DWORD)v12 == 154;
      v17 = v16 || (_DWORD)v12 == 156;
      v18 = v17 || (_DWORD)v12 == 159;
      v19 = v18 || (v12 & 0xFFFFFFFB) == 161;
      if (!v19 && v12 > 0x1F)
        break;
      if (v12 <= 0xD && ((1 << v12) & 0x3700) != 0)
        goto LABEL_36;
      objc_msgSend(a4, "appendPlaceholder", v24);
      v22 = a1[8] + 1;
      a1[8] = v22;
      if (v22 > v24)
        goto LABEL_47;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_43:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_47;
    }
    v21 = a1 + 17;
    if ((v12 - 32) >= 0x5F)
LABEL_36:
      v21 = a1 + 18;
    ++*v21;
    if (v8 > 0x7Eu || v9 > 0x7Eu || v12 >= 0x7F)
    {
      v25[0] = v9;
      v25[1] = v8;
      v25[2] = v12;
      if (objc_msgSend((id)qword_1ECD0A108, "indexForBytes:length:", v25, 3, v24) != 0x7FFFFFFFFFFFFFFFLL)
        ++a1[16];
    }
    objc_msgSend(a4, "appendByte:", v12, v24);
    goto LABEL_43;
  }
LABEL_47:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1251_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  _BYTE v17[3];
  uint64_t v18;

  v5 = a3;
  v18 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v16 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0 && ((windows1251[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        ++a1[10];
      if (v12 >= 0x20 && (_DWORD)v12 != 152)
        break;
      if (v12 <= 0xD && ((1 << v12) & 0x3700) != 0)
        goto LABEL_14;
      objc_msgSend(a4, "appendPlaceholder");
      v14 = a1[8] + 1;
      a1[8] = v14;
      if (v14 > v16)
        goto LABEL_23;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_19:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_23;
    }
    if (v12 < 0x7F)
    {
LABEL_14:
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_18:
        objc_msgSend(a4, "appendByte:", v12);
        goto LABEL_19;
      }
    }
    else
    {
      ++a1[18];
    }
    v17[0] = v9;
    v17[1] = v8;
    v17[2] = v12;
    if (objc_msgSend((id)qword_1ECD0A110, "indexForBytes:length:", v17, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_18;
  }
LABEL_23:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1253_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  BOOL v18;
  BOOL v19;
  unint64_t v20;
  uint64_t result;
  _BYTE v22[3];
  uint64_t v23;

  v5 = a3;
  v23 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v8 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v9 = v8;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v13 = *a2++;
      v12 = v13;
      v14 = v13;
      if (v13 < 0 && ((windows1253[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)) & 1) != 0)
        ++a1[10];
      v18 = (v14 - 32) < 0xDFu
         || (_DWORD)v14 == 13
         || (_DWORD)v14 == 10
         || (v14 & 0xFFFFFFFB) == 8
         || (_DWORD)v14 == 9;
      if (!v18
        || ((v14 - 129) <= 0x19 ? (v19 = ((1 << (v14 + 127)) & 0x280FA81) == 0) : (v19 = 1),
            !v19 || (v14 & 0xFC) == 0x9C || (_DWORD)v14 == 170 || (_DWORD)v14 == 210))
      {
        objc_msgSend(a4, "appendPlaceholder");
        v20 = a1[8] + 1;
        a1[8] = v20;
        if (v20 > v9)
          goto LABEL_39;
        v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_26;
      }
      if (v14 >= 0x7F)
        break;
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu)
        goto LABEL_36;
LABEL_38:
      objc_msgSend(a4, "appendByte:", v14);
LABEL_26:
      v11 = v10;
      v10 = v14;
      if (!--v5)
        goto LABEL_39;
    }
    ++a1[18];
LABEL_36:
    v22[0] = v11;
    v22[1] = v10;
    v22[2] = v14;
    if (objc_msgSend((id)qword_1ECD0A118, "indexForBytes:length:", v22, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_38;
  }
LABEL_39:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1255_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  BOOL v18;
  BOOL v19;
  unint64_t v20;
  uint64_t result;
  _BYTE v22[3];
  uint64_t v23;

  v5 = a3;
  v23 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v8 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v9 = v8;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v13 = *a2++;
      v12 = v13;
      v14 = v13;
      if (v13 < 0 && ((windows1255[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)) & 1) != 0)
        ++a1[10];
      v18 = (v14 - 32) < 0xDFu
         || (_DWORD)v14 == 13
         || (_DWORD)v14 == 10
         || (v14 & 0xFFFFFFFB) == 8
         || (_DWORD)v14 == 9;
      if (!v18
        || ((v14 - 129) <= 0x19 ? (v19 = ((1 << (v14 + 127)) & 0x200FA81) == 0) : (v19 = 1),
            !v19
         || (_DWORD)v14 == 202
         || (v14 & 0xFC) == 0x9C
         || (v14 - 217) < 7
         || (v14 - 251) < 2))
      {
        objc_msgSend(a4, "appendPlaceholder");
        v20 = a1[8] + 1;
        a1[8] = v20;
        if (v20 > v9)
          goto LABEL_40;
        v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_26;
      }
      if (v14 >= 0x7F)
        break;
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu)
        goto LABEL_37;
LABEL_39:
      objc_msgSend(a4, "appendByte:", v14);
LABEL_26:
      v11 = v10;
      v10 = v14;
      if (!--v5)
        goto LABEL_40;
    }
    ++a1[18];
LABEL_37:
    v22[0] = v11;
    v22[1] = v10;
    v22[2] = v14;
    if (objc_msgSend((id)qword_1ECD0A120, "indexForBytes:length:", v22, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_39;
  }
LABEL_40:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1252_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unint64_t v17;
  uint64_t result;
  _BYTE v19[3];
  uint64_t v20;

  v5 = a3;
  v20 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v8 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v9 = v8;
    v10 = 0;
    v11 = 0;
    do
    {
      v13 = *a2++;
      v12 = v13;
      v14 = v13;
      if (v13 < 0)
      {
        if (((windows1252[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)) & 1) != 0)
          ++a1[10];
      }
      else if (v14 <= 0x1F)
      {
        if (v14 > 0xD || ((1 << v14) & 0x3700) == 0)
          goto LABEL_18;
        goto LABEL_9;
      }
      if ((v14 - 129) <= 0x1C && ((1 << (v14 + 127)) & 0x1000D001) != 0)
      {
LABEL_18:
        objc_msgSend(a4, "appendPlaceholder");
        v17 = a1[8] + 1;
        a1[8] = v17;
        if (v17 > v9)
          break;
        v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_25;
      }
      if (v14 >= 0x7F)
      {
        ++a1[18];
LABEL_22:
        v19[0] = v11;
        v19[1] = v10;
        v19[2] = v14;
        if (objc_msgSend((id)qword_1ECD0A128, "indexForBytes:length:", v19, 3) != 0x7FFFFFFFFFFFFFFFLL)
          ++a1[16];
        goto LABEL_24;
      }
LABEL_9:
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu)
        goto LABEL_22;
LABEL_24:
      objc_msgSend(a4, "appendByte:", v14);
LABEL_25:
      v11 = v10;
      v10 = v14;
      --v5;
    }
    while (v5);
  }
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1250_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unint64_t v17;
  uint64_t result;
  _BYTE v19[3];
  uint64_t v20;

  v5 = a3;
  v20 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v8 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v9 = v8;
    v10 = 0;
    v11 = 0;
    do
    {
      v13 = *a2++;
      v12 = v13;
      v14 = v13;
      if (v13 < 0)
      {
        if (((windows1250[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)) & 1) != 0)
          ++a1[10];
      }
      else if (v14 <= 0x1F)
      {
        if (v14 > 0xD || ((1 << v14) & 0x3700) == 0)
          goto LABEL_18;
        goto LABEL_9;
      }
      if ((v14 - 129) <= 0x17 && ((1 << (v14 + 127)) & 0x808085) != 0)
      {
LABEL_18:
        objc_msgSend(a4, "appendPlaceholder");
        v17 = a1[8] + 1;
        a1[8] = v17;
        if (v17 > v9)
          break;
        v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_25;
      }
      if (v14 >= 0x7F)
      {
        ++a1[18];
LABEL_22:
        v19[0] = v11;
        v19[1] = v10;
        v19[2] = v14;
        if (objc_msgSend((id)qword_1ECD0A130, "indexForBytes:length:", v19, 3) != 0x7FFFFFFFFFFFFFFFLL)
          ++a1[16];
        goto LABEL_24;
      }
LABEL_9:
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu)
        goto LABEL_22;
LABEL_24:
      objc_msgSend(a4, "appendByte:", v14);
LABEL_25:
      v11 = v10;
      v10 = v14;
      --v5;
    }
    while (v5);
  }
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1254_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  _BOOL4 v19;
  BOOL v20;
  BOOL v21;
  unint64_t v22;
  uint64_t result;
  _BYTE v24[3];
  uint64_t v25;

  v5 = a3;
  v25 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v8 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v9 = v8;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v13 = *a2++;
      v12 = v13;
      v14 = v13;
      if (v13 < 0 && ((windows1254[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)) & 1) != 0)
        ++a1[10];
      v19 = (_DWORD)v14 == 13
         || (v14 - 32) < 0xDFu
         || (_DWORD)v14 == 10
         || (v14 & 0xFFFFFFFB) == 8
         || (_DWORD)v14 == 9;
      v20 = (_DWORD)v14 == 129 || !v19;
      if (v20 || ((v14 - 141) <= 0x11 ? (v21 = ((1 << (v14 + 115)) & 0x3000F) == 0) : (v21 = 1), !v21))
      {
        objc_msgSend(a4, "appendPlaceholder");
        v22 = a1[8] + 1;
        a1[8] = v22;
        if (v22 > v9)
          goto LABEL_41;
        v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_31;
      }
      if (v14 >= 0x7F)
        break;
      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu)
        goto LABEL_38;
LABEL_40:
      objc_msgSend(a4, "appendByte:", v14);
LABEL_31:
      v11 = v10;
      v10 = v14;
      if (!--v5)
        goto LABEL_41;
    }
    ++a1[18];
LABEL_38:
    v24[0] = v11;
    v24[1] = v10;
    v24[2] = v14;
    if (objc_msgSend((id)qword_1ECD0A138, "indexForBytes:length:", v24, 3) != 0x7FFFFFFFFFFFFFFFLL)
      ++a1[16];
    goto LABEL_40;
  }
LABEL_41:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _WINDOWS1258_recognize(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  _QWORD *v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  _BYTE v22[3];
  uint64_t v23;

  v5 = a3;
  v23 = *MEMORY[0x1E0C80C00];
  a1[4] += a3;
  v21 = objc_msgSend(a1, "maxSkipBytes");
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = v11;
      if (v11 < 0 && ((windows1258[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        ++a1[10];
      v13 = (v12 + 111) >= 0xFCu || (_DWORD)v12 == 138;
      v14 = v13 || (_DWORD)v12 == 129;
      v15 = v14 || (_DWORD)v12 == 154;
      v16 = v15 || (v12 + 97) >= 0xFEu;
      if (!v16 && v12 > 0x1F)
        break;
      if (v12 <= 0xD && ((1 << v12) & 0x3700) != 0)
        goto LABEL_27;
      objc_msgSend(a4, "appendPlaceholder");
      v19 = a1[8] + 1;
      a1[8] = v19;
      if (v19 > v21)
        goto LABEL_38;
      v8 = 0;
      LOBYTE(v12) = 0;
LABEL_34:
      v9 = v8;
      v8 = v12;
      if (!--v5)
        goto LABEL_38;
    }
    v18 = a1 + 17;
    if ((v12 - 32) >= 0x5F)
LABEL_27:
      v18 = a1 + 18;
    ++*v18;
    if (v8 > 0x7Eu || v9 > 0x7Eu || v12 >= 0x7F)
    {
      v22[0] = v9;
      v22[1] = v8;
      v22[2] = v12;
      if (objc_msgSend((id)qword_1ECD0A140, "indexForBytes:length:", v22, 3) != 0x7FFFFFFFFFFFFFFFLL)
        ++a1[16];
    }
    objc_msgSend(a4, "appendByte:", v12);
    goto LABEL_34;
  }
LABEL_38:
  a1[12] = a1[8];
  result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t generateStringWithEncoding(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, BOOL *a7)
{
  NSString *v13;
  BOOL v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSEncodingDetectionBuffer *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  NSEncodingDetectionBuffer *v25;
  uint64_t v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    v13 = 0;
    if (!a7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v13 = -[NSString initWithBytes:length:encoding:]([NSString alloc], "initWithBytes:length:encoding:", a2, a3, objc_msgSend(a1, "nsEncoding"));
  if (a7)
LABEL_5:
    *a7 = 0;
LABEL_6:
  if (a6)
    v14 = v13 == 0;
  else
    v14 = 0;
  if (v14)
    v15 = 0;
  else
    v15 = (uint64_t)v13;
  if (v14 && a5)
  {
    v16 = +[NSEncodingDetectionPlaceholder placeholderForDetector:](NSEncodingDetectionPlaceholder, "placeholderForDetector:", a1);
    v17 = a1[8];
    v18 = objc_msgSend(v16, "bytesLength");
    v28[0] = v28;
    v19 = a3 + (v18 + 7) * v17;
    MEMORY[0x1E0C80A78](v18);
    v20 = [NSEncodingDetectionBuffer alloc];
    v21 = objc_msgSend(a1, "nsEncoding");
    v22 = objc_msgSend(a1, "cfEncoding");
    if (v19 < 0x101)
    {
      v23 = &v27;
      v24 = 256;
    }
    else
    {
      v23 = 0;
      v24 = v19;
    }
    v25 = -[NSEncodingDetectionBuffer initWithNSStringEncoding:CFStringEncoding:stackBuffer:bufferLength:placeholder:](v20, "initWithNSStringEncoding:CFStringEncoding:stackBuffer:bufferLength:placeholder:", v21, v22, v23, v24, v16);
    objc_msgSend(a1, "softReset");
    objc_msgSend(a1, "recognizeString:withDataLength:intoBuffer:", a2, a3, v25);
    v15 = -[NSEncodingDetectionBuffer stringWithLossySubsitutionString:](v25, "stringWithLossySubsitutionString:", a6);

    if (a7)
      *a7 = a1[12] != 0;
  }
  return v15;
}

uint64_t checkSuggestedEncodings(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7 = &v6;
  v8 = 0x3052000000;
  v9 = __Block_byref_object_copy__12;
  v10 = __Block_byref_object_dispose__12;
  v11 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __checkSuggestedEncodings_block_invoke;
  v5[3] = &unk_1E0F50120;
  v5[5] = a1;
  v5[6] = a2;
  v5[4] = &v6;
  objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v5);
  v3 = v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_181F8975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getAllDetectors(uint64_t a1, _QWORD *a2, unsigned int *a3, uint64_t a4, void *a5, void *a6, char a7)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  NSNumber *v15;
  uint64_t result;
  id v17;
  _QWORD *v18;

  v18 = a2;
  v12 = 0;
  do
  {
    v14 = *a3++;
    v13 = v14;
    v15 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v14, v18);
    result = objc_msgSend(a6, "objectForKey:", v15);
    if (!result)
    {
      result = objc_msgSend(a5, "objectForKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v13));
      v17 = (id)result;
      if (!result && (a7 & 1) == 0)
      {
        v17 = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:](NSEncodingDetector, "detectorForCFStringEncoding:allowBackupDetectors:", v13, 0);
        result = objc_msgSend(a5, "setObject:forKey:", v17, v15);
      }
      if (v17)
        *(_QWORD *)(a1 + 8 * v12++) = v17;
    }
    --a4;
  }
  while (a4);
  *v18 = v12;
  return result;
}

uint64_t increaseWeightsOfEncodings(uint64_t result, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a3 >= 1)
  {
    v15 = v10;
    v16 = v9;
    v17 = v6;
    v18 = v5;
    v19 = v4;
    v20 = v3;
    v21 = v7;
    v22 = v8;
    v11 = a3;
    v13 = (void *)result;
    do
    {
      v14 = *a2++;
      result = objc_msgSend(v13, "objectForKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v14, v15, v16, v17, v18, v19, v20, v21, v22));
      if (result)
        *(double *)(result + 152) = *(double *)(result + 152) * 5.0;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t compareTwoDetectors(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *(_DWORD *)(*(_QWORD *)a1 + 164);
  v3 = *(_DWORD *)(*(_QWORD *)a2 + 164);
  v4 = v2 > v3;
  v5 = v2 < v3;
  if (v4)
    return 0xFFFFFFFFLL;
  else
    return v5;
}

uint64_t recognizeISO2022JP(uint64_t a1, unint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, unint64_t *a7, uint64_t a8, unint64_t a9, unint64_t a10, char *a11, uint64_t a12, CFStringEncoding a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, void *a17, unint64_t a18)
{
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  UInt8 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL4 v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  const __CFString *v35;
  const __CFString *v36;
  int v37;
  uint64_t result;
  _QWORD *v39;
  void *v40;
  const __CFAllocator *contentsDeallocator;
  int v42;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  CFIndex v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  int v60;
  UInt8 bytes;
  __int16 v62;
  char v63;
  _WORD v64[2];
  uint64_t v65;

  v19 = 0;
  v57 = 0;
  v20 = 0;
  v48 = 0;
  v51 = 0;
  v54 = 0;
  v21 = 0;
  v42 = 0;
  v56 = 0;
  v39 = a15;
  v65 = *MEMORY[0x1E0C80C00];
  bytes = 27;
  v60 = 0;
  contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
LABEL_2:
  v22 = 0;
LABEL_3:
  v55 = v21;
  v52 = v21 + 2;
  v53 = v21 + 1;
  v49 = v20;
LABEL_4:
  if (v19 <= a2)
    v23 = a2;
  else
    v23 = v19;
  v50 = v19;
  while (v19 != v23)
  {
    v24 = *(_BYTE *)(a1 + v19);
    if (v24 == 27)
    {
      if (a8 && v19 + 2 < a2)
      {
        v25 = 0;
        v26 = *(unsigned __int8 *)(v19 + a1 + 1);
        v27 = *(unsigned __int8 *)(a1 + v19 + 2);
        while (__PAIR64__(v27, v26) != __PAIR64__(*(char *)(a8 + v25 + 1), *(char *)(a8 + v25)))
        {
          v28 = v25 + 3;
          v25 += 2;
          if (v28 >= a9)
            goto LABEL_16;
        }
        v22 = v25 > a10;
        LOBYTE(v62) = *(_BYTE *)(v19 + a1 + 1);
        HIBYTE(v62) = v27;
        v19 += 3;
        objc_msgSend(a17, "appendByte1:byte2:byte3:", 27, v26, v27);
        LOBYTE(v60) = 27;
        BYTE1(v60) = v26;
        v21 = 3;
        BYTE2(v60) = v27;
        goto LABEL_49;
      }
LABEL_16:
      if (a11 && v19 + 3 < a2 && a12)
      {
        v29 = *(unsigned __int8 *)(a1 + v19 + 3);
        v31 = *(_BYTE *)(v19 + a1 + 1) == 36 && *(_BYTE *)(v19 + a1 + 2) == 40;
        v32 = a11;
        v33 = a12;
        while (!v31 || (_DWORD)v29 != *v32)
        {
          ++v32;
          if (!--v33)
            goto LABEL_29;
        }
        v62 = 10276;
        v63 = v29;
        v19 += 4;
        objc_msgSend(a17, "appendByte1:byte2:byte3:byte4:", 27, 36, 40, v29);
        LOWORD(v60) = 9243;
        BYTE2(v60) = 40;
        v22 = 1;
        v21 = 4;
        HIBYTE(v60) = v29;
LABEL_49:
        ++v54;
        v57 = 1;
        v56 = v21;
        goto LABEL_3;
      }
    }
LABEL_29:
    if (!v22
      && ((v24 - 32) < 0x5Fu || *(unsigned __int8 *)(a1 + v19) <= 0xDu && ((1 << v24) & 0x3700) != 0))
    {
      ++v19;
      ++v51;
      objc_msgSend(a17, "appendByte:", v24, v39);
      v21 = v55;
      goto LABEL_2;
    }
    if ((v57 & 1) != 0 && (v24 - 33) <= 0x5Du && v22 && v19 + 1 < a2)
    {
      v34 = *(unsigned __int8 *)(a1 + v19 + 1);
      if ((v34 - 33) <= 0x5D)
      {
        *(&bytes + v55) = v24;
        *(&bytes + v53) = v34;
        v40 = (void *)qword_1ECD0A060;
        v35 = CFStringCreateWithBytesNoCopy(0, &bytes, v52, a13, 0, contentsDeallocator);
        if (v35)
        {
          v36 = v35;
          v64[0] = CFStringGetCharacterAtIndex(v35, 0);
          if (objc_msgSend(v40, "indexForKey:length:", v64, 1) != 0x7FFFFFFFFFFFFFFFLL)
            ++*a14;
          CFRelease(v36);
          v37 = v64[0];
          if (v64[0])
          {
            if (v42)
            {
              v64[0] = v42;
              v64[1] = v37;
              if (objc_msgSend((id)qword_1ECD0A068, "indexForKey:length:", v64, 2) != 0x7FFFFFFFFFFFFFFFLL)
                ++*v39;
            }
            v19 += 2;
            ++v48;
            objc_msgSend(a17, "appendByte1:byte2:", v24, v34, v39);
            v57 = 1;
            v49 = v20;
            v42 = v37;
            goto LABEL_4;
          }
        }
        v42 = 0;
      }
    }
    objc_msgSend(a17, "appendPlaceholder", v39);
    objc_msgSend(a17, "appendBytes:count:", &v60, v56);
    ++*a16;
    ++v20;
    ++v19;
    if (v20 > a18)
      goto LABEL_52;
  }
  v20 = v49 + v23 - v50;
LABEL_52:
  result = v48 + v51;
  *a3 += v48 + v51;
  *a7 = v20;
  *a4 = v48;
  *a5 = v51;
  *a6 = v54;
  return result;
}

unint64_t recognizeUTF16(unsigned __int16 *a1, unint64_t a2, int a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _BYTE *a8, void *a9, _QWORD *a10)
{
  int v16;
  BOOL v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int16 v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v34;

  v16 = *a1;
  v17 = v16 == 65534 || v16 == 65279;
  if (v17)
  {
    objc_msgSend(a9, "appendUTF16Char:");
    v19 = 1;
    *a8 = 1;
  }
  else
  {
    v19 = 0;
  }
  if (v19 < a2 >> 1)
  {
    v32 = a5;
    v34 = 0;
    v20 = a2 >> 1;
    v21 = v19;
    while (1)
    {
      v22 = __rev16(a1[v21]);
      if (!a3)
        v22 = a1[v21];
      if (v22 <= 0xFFFD)
      {
        v23 = v22 & 0xFC00;
        if ((unsigned __int16)(v22 + 560) >= 0x20u && v23 != 56320)
        {
          if (v23 == 55296)
          {
            v25 = v21 + 1;
            if (v21 + 1 >= v20)
              goto LABEL_18;
            v26 = bswap32(a1[v25]) >> 16;
            if (!a3)
              LOWORD(v26) = a1[v25];
            if ((unsigned __int16)v26 >> 10 == 55)
            {
              v27 = 0;
              v28 = v26 & 0xFFFE;
              while (v28 != 57342 || v22 != (unsigned __int16)invalidUTF16Chars[v27])
              {
                if (++v27 == 16)
                {
                  ++v19;
                  ++*v32;
                  v29 = v21 + 2;
                  objc_msgSend(a9, "appendUTF16Char:", a1[v29]);
                  objc_msgSend(a9, "appendUTF16Char:", a1[v25]);
                  v25 = v29;
                  goto LABEL_18;
                }
              }
            }
          }
          else if ((unsigned __int16)((unsigned __int16)(v22 + 0x2000) >> 11) <= 0x1Eu)
          {
            v17 = v22 == 0;
            v30 = v34;
            if (v17)
              v30 = v34 + 1;
            v34 = v30;
            ++v19;
            objc_msgSend(a9, "appendUTF16Char:", v32);
            v25 = v21 + 1;
            goto LABEL_18;
          }
        }
      }
      objc_msgSend(a9, "appendPlaceholder", v32);
      ++*a7;
      *a6 += 2;
      v25 = v21 + 2;
LABEL_18:
      v21 = v25;
      if (v25 >= v20)
        goto LABEL_35;
    }
  }
  v34 = 0;
  v19 = 1;
LABEL_35:
  *a4 += v19;
  *a10 = v34;
  return v19;
}

unint64_t recognizeUTF32(_DWORD *a1, unint64_t a2, int a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _BYTE *a7, void *a8)
{
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  if (*a1 == 65534 || *a1 == 65279)
  {
    objc_msgSend(a8, "appendUTF32Char:");
    v17 = 1;
    *a7 = 1;
  }
  else
  {
    v17 = 0;
  }
  v18 = a2 >> 2;
  v19 = 0;
  v20 = v18 - v17;
  if (v18 <= v17)
  {
    v17 = 1;
  }
  else
  {
    v21 = &a1[v17];
    do
    {
      v23 = *v21++;
      v22 = v23;
      v24 = bswap32(v23);
      if (!a3)
        v24 = v22;
      if (v24 >> 11 < 0x1B || (v24 - 57344) >> 13 <= 0x80)
      {
        ++v17;
        objc_msgSend(a8, "appendUTF32Char:");
      }
      else
      {
        objc_msgSend(a8, "appendPlaceholder");
        ++*a6;
        v19 += 4;
      }
      --v20;
    }
    while (v20);
  }
  *a4 += v17;
  *a5 = v19;
  return v17;
}

id __initializeResources_block_invoke()
{
  id result;

  result = (id)objc_msgSend(MEMORY[0x1E0C99D80], "sharedKeySetForKeys:", &unk_1E0FCCB08);
  _MergedGlobals_117 = (uint64_t)result;
  return result;
}

void *__initializeDics_block_invoke()
{
  void *result;

  qword_1ECD0A050 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&_NSMostCommonChineseCharsKeySetConfig);
  qword_1ECD0A060 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&_NSMostCommonJapaneseCharsKeySetConfig);
  qword_1ECD0A070 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&_NSMostCommonKoreanCharsKeySetConfig);
  qword_1ECD0A058 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&_NSChineseBigramKeySetConfig);
  qword_1ECD0A068 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&_NSJapaneseBigramKeySetConfig);
  qword_1ECD0A078 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&_NSKoreanBigramKeySetConfig);
  qword_1ECD0A088 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin1TrigramKeySetConfig);
  qword_1ECD0A098 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin2TrigramKeySetConfig);
  qword_1ECD0A0A0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin3TrigramKeySetConfig);
  qword_1ECD0A0A8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin4TrigramKeySetConfig);
  qword_1ECD0A0B0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin5TrigramKeySetConfig);
  qword_1ECD0A0B8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin6TrigramKeySetConfig);
  qword_1ECD0A0C0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin7TrigramKeySetConfig);
  qword_1ECD0A0C8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin8TrigramKeySetConfig);
  qword_1ECD0A0D0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin9TrigramKeySetConfig);
  qword_1ECD0A090 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISOLatin10TrigramKeySetConfig);
  qword_1ECD0A0E0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISO88595TrigramKeySetConfig);
  qword_1ECD0A0D8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISO88596TrigramKeySetConfig);
  qword_1ECD0A0E8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISO88597TrigramKeySetConfig);
  qword_1ECD0A0F0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISO88598TrigramKeySetConfig);
  qword_1ECD0A0F8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSISO885911TrigramKeySetConfig);
  qword_1ECD0A080 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows874TrigramKeySetConfig);
  qword_1ECD0A110 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1251TrigramKeySetConfig);
  qword_1ECD0A128 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1252TrigramKeySetConfig);
  qword_1ECD0A130 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1250TrigramKeySetConfig);
  qword_1ECD0A118 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1253TrigramKeySetConfig);
  qword_1ECD0A138 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1254TrigramKeySetConfig);
  qword_1ECD0A120 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1255TrigramKeySetConfig);
  qword_1ECD0A100 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1256TrigramKeySetConfig);
  qword_1ECD0A108 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1257TrigramKeySetConfig);
  result = -[_NSSharedKeySetS initWithConfiguration:]([_NSSharedKeySetS alloc], (uint64_t)&__NSWindows1258TrigramKeySetConfig);
  qword_1ECD0A140 = (uint64_t)result;
  return result;
}

uint64_t __checkSuggestedEncodings_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;

  if (*(double *)(a3 + 152) > 1.0)
  {
    v6 = result;
    if (objc_msgSend((id)a3, "recognizeString:withDataLength:intoBuffer:", *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), 0))
    {
      if (!*(_QWORD *)(a3 + 64))
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 40) = a3;
        *a4 = 1;
      }
    }
    return objc_msgSend((id)a3, "softReset");
  }
  return result;
}

void sub_181F8AB00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181F8AB78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181F8B2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_181F8B6AC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 152));
  _Unwind_Resume(a1);
}

void sub_181F8B80C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8B930(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8BAA0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8BDA4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 152));
  _Unwind_Resume(a1);
}

void sub_181F8C060(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8C188(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8C304(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8C474(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8C80C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 168));
  _Unwind_Resume(a1);
}

void sub_181F8CAA0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8CBE0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t _bestMatchConformingToTypes(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _BYTE v20[128];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v31, v30, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v32;
LABEL_3:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v32 != v6)
        objc_enumerationMutation(a1);
      v8 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * v7);
      if ((objc_msgSend(a2, "containsObject:", v8) & 1) != 0)
        break;
      if (v5 == ++v7)
      {
        v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v31, v30, 16);
        if (v5)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v9 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v26, v25, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v27;
      v19 = *(_QWORD *)v27;
      while (2)
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v27 != v11)
            objc_enumerationMutation(a1);
          v13 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
          v21 = 0u;
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v14 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v21, v20, 16);
          if (v14)
          {
            v15 = v14;
            v16 = *(_QWORD *)v22;
LABEL_16:
            v17 = 0;
            while (1)
            {
              if (*(_QWORD *)v22 != v16)
                objc_enumerationMutation(a2);
              v8 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v17);
              if (((uint64_t (*)(uint64_t, uint64_t))off_1ECD04CF0)(v8, v13))
                return v8;
              if (v15 == ++v17)
              {
                v15 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v21, v20, 16);
                if (v15)
                  goto LABEL_16;
                break;
              }
            }
          }
          v11 = v19;
        }
        v10 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v26, v25, 16);
        v8 = 0;
        if (v10)
          continue;
        break;
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

void sub_181F8DEE8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 168));
  _Unwind_Resume(a1);
}

void sub_181F8E164(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8E278(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8E510(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8E63C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8E7B0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_181F8E910(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void _asyncDispatchBlockWithOptions(void *a1, void *a2)
{
  NSObject *global_queue;

  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("NSItemProviderOptionsDispatchMode")), "isEqualToString:", CFSTR("NSItemProviderOptionsDispatchModeAsynchronous")))global_queue = dispatch_get_global_queue(0, 0);
  else
    global_queue = MEMORY[0x1E0C80D38];
  dispatch_async(global_queue, a2);
}

void sub_181F8F60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id location)
{
  id *v34;
  id *v35;

  objc_destroyWeak(v34);
  objc_destroyWeak(v35);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_181F8FCE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_181F8FEE0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t initUTTypeConformsTo_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t (*v5)(_QWORD);

  v4 = MobileCoreServicesLibrary();
  v5 = (uint64_t (*)(_QWORD))dlsym(v4, "UTTypeConformsTo");
  off_1ECD04CF0 = v5;
  if (!v5)
    __assert_rtn("initUTTypeConformsTo", "NSItemProvider.m", 25, "softLinkUTTypeConformsTo");
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

void *MobileCoreServicesLibrary()
{
  void *result;

  result = (void *)MobileCoreServicesLibrary_frameworkLibrary_1;
  if (!MobileCoreServicesLibrary_frameworkLibrary_1)
  {
    result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_1 = (uint64_t)result;
    if (!result)
      __assert_rtn("MobileCoreServicesLibrary", "NSItemProvider.m", 24, "frameworkLibrary");
  }
  return result;
}

uint64_t initFPIsFileProviderBookmark(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t (*v5)();

  v4 = (void *)FileProviderLibrary_frameworkLibrary_0;
  if (!FileProviderLibrary_frameworkLibrary_0)
  {
    v4 = dlopen("/System/Library/PrivateFrameworks/FileProvider.framework/FileProvider", 2);
    FileProviderLibrary_frameworkLibrary_0 = (uint64_t)v4;
    if (!v4)
      __assert_rtn("FileProviderLibrary", "NSItemProvider.m", 48, "frameworkLibrary");
  }
  v5 = (uint64_t (*)())dlsym(v4, "FPIsFileProviderBookmark");
  softLinkFPIsFileProviderBookmark = v5;
  if (!v5)
    __assert_rtn("initFPIsFileProviderBookmark", "NSItemProvider.m", 49, "softLinkFPIsFileProviderBookmark");
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initUTTypeCreatePreferredIdentifierForTag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t (*v7)();

  v6 = MobileCoreServicesLibrary();
  v7 = (uint64_t (*)())dlsym(v6, "UTTypeCreatePreferredIdentifierForTag");
  off_1ECD04CF8 = v7;
  if (!v7)
    __assert_rtn("initUTTypeCreatePreferredIdentifierForTag", "NSItemProvider.m", 26, "softLinkUTTypeCreatePreferredIdentifierForTag");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, a3);
}

uint64_t initkUTTagClassFilenameExtension()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary();
  v1 = (uint64_t *)dlsym(v0, "kUTTagClassFilenameExtension");
  if (!v1)
    __assert_rtn("initkUTTagClassFilenameExtension", "NSItemProvider.m", 27, "constant");
  result = *v1;
  constantkUTTagClassFilenameExtension = result;
  _MergedGlobals_85 = kUTTagClassFilenameExtensionFunction;
  return result;
}

uint64_t kUTTagClassFilenameExtensionFunction()
{
  return constantkUTTagClassFilenameExtension;
}

uint64_t initkUTTypeData_0()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeData");
  if (!v1)
    __assert_rtn("initkUTTypeData", "NSItemProvider.m", 28, "constant");
  result = *v1;
  constantkUTTypeData_0 = result;
  off_1ECD04CE0 = kUTTypeDataFunction_0;
  return result;
}

uint64_t kUTTypeDataFunction_0()
{
  return constantkUTTypeData_0;
}

uint64_t initkUTTypeURL_0()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeURL");
  if (!v1)
    __assert_rtn("initkUTTypeURL", "NSItemProvider.m", 30, "constant");
  result = *v1;
  constantkUTTypeURL_0 = result;
  off_1ECD04CE8 = kUTTypeURLFunction_0;
  return result;
}

uint64_t kUTTypeURLFunction_0()
{
  return constantkUTTypeURL_0;
}

BOOL ___bestMatchConformingToType_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return off_1ECD04CF0(a3) != 0;
}

BOOL ___bestMatchToConformingType_block_invoke(uint64_t a1, uint64_t a2)
{
  return off_1ECD04CF0(a2) != 0;
}

id ___synchronousCoordinatedRead_block_invoke(_QWORD *a1)
{
  id result;

  result = (id)(*(uint64_t (**)(void))(a1[4] + 16))();
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = result;
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  return result;
}

uint64_t sub_181F910B0()
{
  return 0;
}

uint64_t sub_181F910F0()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_181F91130()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_181F91170()
{
  return 0;
}

uint64_t sub_181F919A0()
{
  return 0;
}

uint64_t sub_181F92004()
{
  return 0;
}

uint64_t sub_181F92044()
{
  return 0;
}

uint64_t sub_181F922AC()
{
  uint64_t v0;

  return v0;
}

SEL __methodDescriptionForSelector(Class cls, SEL name)
{
  objc_class *Superclass;
  Protocol **v5;
  Protocol **v6;
  uint64_t v7;
  Protocol *v8;
  BOOL isMetaClass;
  SEL v10;
  Protocol *v11;
  BOOL v12;
  objc_method *InstanceMethod;
  objc_method *v14;
  SEL v15;
  unsigned int outCount;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (cls)
  {
    Superclass = cls;
    while (1)
    {
      outCount = 0;
      v5 = class_copyProtocolList(Superclass, &outCount);
      v6 = v5;
      if (outCount)
        break;
      if (v5)
LABEL_10:
        free(v6);
      Superclass = class_getSuperclass(Superclass);
      if (!Superclass)
        goto LABEL_12;
    }
    v7 = 0;
    while (1)
    {
      v8 = v6[v7];
      isMetaClass = class_isMetaClass(Superclass);
      v10 = protocol_getMethodDescription(v8, name, 1, !isMetaClass).name;
      if (v10)
        break;
      v11 = v6[v7];
      v12 = class_isMetaClass(Superclass);
      v10 = protocol_getMethodDescription(v11, name, 0, !v12).name;
      if (v10)
        break;
      if (++v7 >= (unint64_t)outCount)
        goto LABEL_10;
    }
    v15 = v10;
    free(v6);
  }
  else
  {
LABEL_12:
    InstanceMethod = class_getInstanceMethod(cls, name);
    if (InstanceMethod)
    {
      v14 = InstanceMethod;
      v15 = method_getName(InstanceMethod);
      method_getTypeEncoding(v14);
    }
    else
    {
      return 0;
    }
  }
  return v15;
}

BOOL _NSIPGetExpectedClassFromCompletionBlock(void *a1, _QWORD *a2, NSError **a3)
{
  _BOOL8 has_signature;
  void *v7;
  uint64_t v8;

  has_signature = _Block_has_signature(a1);
  if (has_signature)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DD8], "signatureWithObjCTypes:", _Block_signature(a1));
    if (a2)
      *a2 = objc_msgSend(v7, "_classForObjectAtArgumentIndex:", 1);
  }
  else if (a3)
  {
    v8 = objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("Unable to get block signature."), &stru_1E0F56070, CFSTR("Extension"));
    *a3 = _makeError(-1, v8, 0);
  }
  return has_signature;
}

void _NSIPDispatchAsyncCallback(dispatch_block_t block)
{
  if (qword_1ECD05678 != -1)
    dispatch_once(&qword_1ECD05678, &__block_literal_global_61);
  dispatch_async((dispatch_queue_t)qword_1ECD05670, block);
}

uint64_t _NSIPItemQueue()
{
  if (qword_1ECD05668 != -1)
    dispatch_once(&qword_1ECD05668, &__block_literal_global_43);
  return _MergedGlobals_1;
}

NSProgress *_NSIPCoordinatedRead(uint64_t a1, uint64_t a2)
{
  return _coordinatedFileAccess((uint64_t)+[NSFileAccessIntent readingIntentWithURL:options:](NSFileAccessIntent, "readingIntentWithURL:options:", a1, 1), a1, a2);
}

NSProgress *_coordinatedFileAccess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSProgress *v6;
  _QWORD v8[9];

  v8[8] = *MEMORY[0x1E0C80C00];
  v6 = +[NSProgress discreteProgressWithTotalUnitCount:](NSProgress, "discreteProgressWithTotalUnitCount:", 100);
  if (qword_1ECD05688 != -1)
    dispatch_once(&qword_1ECD05688, &__block_literal_global_67);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___coordinatedFileAccess_block_invoke;
  v8[3] = &unk_1E0F509A0;
  v8[4] = a2;
  v8[5] = a1;
  v8[6] = v6;
  v8[7] = a3;
  objc_msgSend((id)qword_1ECD05680, "addOperationWithBlock:", v8);
  return v6;
}

NSProgress *_NSIPCoordinatedReadForUploading(uint64_t a1, uint64_t a2)
{
  return _coordinatedFileAccess((uint64_t)+[NSFileAccessIntent readingIntentWithURL:options:](NSFileAccessIntent, "readingIntentWithURL:options:", a1, 8), a1, a2);
}

NSProgress *_NSIPCoordinatedDelete(uint64_t a1, uint64_t a2)
{
  return _coordinatedFileAccess((uint64_t)+[NSFileAccessIntent writingIntentWithURL:options:](NSFileAccessIntent, "writingIntentWithURL:options:", a1, 1), a1, a2);
}

uint64_t _NSIPTemporaryFileName(const __CFString *a1, NSError **a2)
{
  const __CFString *v3;
  uint64_t v4;
  int v5;
  int v6;
  const __CFString *v7;
  NSString *v8;
  uint64_t v9;
  int *v10;
  NSString *v11;
  NSError *TemporaryFileError;
  char v14[1025];
  uint64_t v15;

  v3 = a1;
  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = _MergedGlobals_86();
    v3 = (const __CFString *)(id)((uint64_t (*)(uint64_t, uint64_t))off_1ECD04D08)((uint64_t)v3, v4);
  }
  -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](NSTemporaryDirectory(), "stringByAppendingPathComponent:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(".%@.XXXXXX"), CFSTR("com.apple.Foundation.NSItemProvider"))), "UTF8String");
  __strlcpy_chk();
  v5 = mkstemp(v14);
  if (v5 == -1)
  {
    v10 = __error();
    v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), strerror(*v10));
    TemporaryFileError = _NSIPCannotCreateTemporaryFileError((uint64_t)v11, 0);
    v9 = 0;
    if (a2 && TemporaryFileError)
    {
      v9 = 0;
      *a2 = TemporaryFileError;
    }
  }
  else
  {
    v6 = v5;
    if (v3)
      v7 = v3;
    else
      v7 = CFSTR("tmp");
    v8 = -[NSString stringByAppendingPathExtension:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14), "stringByAppendingPathExtension:", v7);
    v9 = objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:relativeToURL:", v8, 0, 0);
    unlink(v14);
    close(v6);
  }
  return v9;
}

NSError *_NSIPCannotCreateTemporaryFileError(uint64_t a1, uint64_t a2)
{
  NSString *v3;

  if (a1)
    v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("Cannot create a temporary file. Error: %@"), &stru_1E0F56070, CFSTR("Extension")), a1);
  else
    v3 = (NSString *)objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("Cannot create a temporary file."), &stru_1E0F56070, CFSTR("Extension"));
  return _makeError(-1, (uint64_t)v3, a2);
}

uint64_t _NSIPCloneToTemporaryDir(void *a1, const __CFString *a2, NSError **a3)
{
  uint64_t v5;
  NSError *v6;
  int *v7;
  NSString *v8;
  uint64_t v9;
  NSError *v11[2];

  v11[1] = *(NSError **)MEMORY[0x1E0C80C00];
  v11[0] = 0;
  v5 = _NSIPTemporaryFileName(a2, v11);
  v6 = v11[0];
  if (!v5 || v11[0])
  {
    if (v5 | (uint64_t)v11[0])
      goto LABEL_8;
    v9 = (uint64_t)a1;
    v8 = 0;
LABEL_7:
    v6 = _NSIPCannotCopyFileError(v9, (uint64_t)v8, 0);
LABEL_8:
    v5 = 0;
    if (!a3)
      return v5;
    goto LABEL_9;
  }
  if (copyfile((const char *)objc_msgSend((id)objc_msgSend(a1, "path"), "fileSystemRepresentation"), (const char *)objc_msgSend((id)objc_msgSend((id)v5, "path"), "fileSystemRepresentation"), 0, 0x10C800Fu))
  {
    v7 = __error();
    v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), strerror(*v7));
    v9 = (uint64_t)a1;
    goto LABEL_7;
  }
  v6 = v11[0];
  if (!a3)
    return v5;
LABEL_9:
  if (v6)
    *a3 = v6;
  return v5;
}

NSError *_NSIPCannotCopyFileError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  NSString *v8;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v6 = (void *)_NSFoundationBundle();
    if (a1)
    {
      v7 = objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("Cannot copy file at URL %@. Error: %@"), &stru_1E0F56070, CFSTR("Extension"));
      v10 = a1;
      v11 = a2;
    }
    else
    {
      v7 = objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("Cannot copy file. Error: %@"), &stru_1E0F56070, CFSTR("Extension"));
      v10 = a2;
    }
    v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v7, v10, v11);
  }
  else if (a1)
  {
    v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("Cannot copy file at URL %@."), &stru_1E0F56070, CFSTR("Extension")), a1, v11);
  }
  else
  {
    v8 = (NSString *)objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("Cannot copy file."), &stru_1E0F56070, CFSTR("Extension"));
  }
  return _makeError(-1, (uint64_t)v8, a3);
}

char *_NSIPCreateTemporaryFolder()
{
  char *result;
  char v1[1025];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  -[NSString getFileSystemRepresentation:maxLength:](-[NSString stringByAppendingPathComponent:](NSTemporaryDirectory(), "stringByAppendingPathComponent:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(".%@.XXXXXX"), CFSTR("com.apple.Foundation.NSItemProvider"))), "getFileSystemRepresentation:maxLength:", v1, 1024);
  -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", NSTemporaryDirectory(), 1, 0, 0);
  result = mkdtemp(v1);
  if (result)
    return (char *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v1, 1, 0);
  return result;
}

id _NSIPFilenameWithProperExtension(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;

  v3 = (id)objc_msgSend(a1, "copy");
  if (!objc_msgSend(v3, "length"))
    v3 = (id)((uint64_t (*)(uint64_t))softLinkUTTypeCopyDescription[0])(a2);
  if (!objc_msgSend(v3, "length"))
  {
    v4 = getkUTTypeItem[0]();
    v3 = (id)((uint64_t (*)(uint64_t))softLinkUTTypeCopyDescription[0])(v4);
  }
  return (id)softLink_UTTypeCreateSuggestedFilename((uint64_t)v3, a2);
}

NSString *_NSIPSanitizedFilename(void *a1)
{
  NSString *result;
  void *v3;
  char __s1[256];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  result = (NSString *)objc_msgSend(a1, "length");
  if (result)
  {
    if ((objc_msgSend(a1, "isEqualToString:", CFSTR(".")) & 1) != 0
      || (objc_msgSend(a1, "isEqualToString:", CFSTR("..")) & 1) != 0)
    {
      return 0;
    }
    v3 = (void *)objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("/"), CFSTR(":"));
    if ((objc_msgSend(v3, "hasPrefix:", CFSTR(".")) & 1) != 0
      || objc_msgSend(v3, "hasPrefix:", CFSTR("~")))
    {
      v3 = (void *)objc_msgSend(v3, "stringByReplacingCharactersInRange:withString:", 0, 1, CFSTR("_"));
    }
    if (!objc_msgSend(v3, "getFileSystemRepresentation:maxLength:", __s1, 256))
      return 0;
    else
      return -[NSFileManager stringWithFileSystemRepresentation:length:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "stringWithFileSystemRepresentation:length:", __s1, strnlen(__s1, 0xFFuLL));
  }
  return result;
}

void *_NSIPCloneURLToTemporaryFolder(void *a1, uint64_t a2, void *a3, char **a4, NSError **a5)
{
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  int *v14;
  NSString *v15;
  NSError *TemporaryFileError;

  v10 = _NSIPCreateTemporaryFolder();
  if (!v10)
    __assert_rtn("_NSIPCloneURLToTemporaryFolder", "_NSItemProviderUtilities_Internal.m", 297, "tempFolderURL");
  v11 = v10;
  if (a3)
    v12 = a3;
  else
    v12 = (void *)objc_msgSend(a1, "lastPathComponent");
  v13 = (void *)objc_msgSend(v11, "URLByAppendingPathComponent:", _NSIPFilenameWithProperExtension(v12, a2));
  if (copyfile((const char *)objc_msgSend((id)objc_msgSend(a1, "path"), "fileSystemRepresentation"), (const char *)objc_msgSend((id)objc_msgSend(v13, "path"), "fileSystemRepresentation"), 0, 0x10C800Fu))
  {
    -[NSFileManager removeItemAtURL:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtURL:error:", v11, 0);
    v14 = __error();
    v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), strerror(*v14));
    TemporaryFileError = _NSIPCannotCreateTemporaryFileError((uint64_t)v15, 0);
    v13 = 0;
    if (a5 && TemporaryFileError)
    {
      v13 = 0;
      *a5 = TemporaryFileError;
    }
  }
  else if (a4)
  {
    *a4 = v11;
  }
  return v13;
}

NSError *_NSIPCannotLoadRepresentationError(uint64_t a1, uint64_t a2)
{
  NSString *v3;

  v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("Cannot load representation of type %@"), &stru_1E0F56070, CFSTR("Extension")), a1);
  return _makeError(-1000, (uint64_t)v3, a2);
}

NSError *_makeError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;

  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v7 = v6;
  if (a2)
    objc_msgSend(v6, "setObject:forKeyedSubscript:", a2, CFSTR("NSLocalizedDescription"));
  if (a3)
    objc_msgSend(v7, "setObject:forKeyedSubscript:", a3, CFSTR("NSUnderlyingError"));
  return +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSItemProviderErrorDomain"), a1, v7);
}

NSError *_NSIPDataTransferCancelledError(uint64_t a1)
{
  uint64_t v2;

  v2 = objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("Data transfer has been cancelled."), &stru_1E0F56070, CFSTR("Extension"));
  return _makeError(-1000, v2, a1);
}

NSError *_NSIPNoLoaderAvailableError(uint64_t a1, uint64_t a2)
{
  NSString *v3;

  v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("No loader block available for type %@."), &stru_1E0F56070, CFSTR("Extension")), a1);
  return _makeError(-1000, (uint64_t)v3, a2);
}

NSError *_NSIPCannotLoadPreviewError(uint64_t a1)
{
  uint64_t v2;

  v2 = objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("Cannot load preview."), &stru_1E0F56070, CFSTR("Extension"));
  return _makeError(-1000, v2, a1);
}

NSError *_NSIPUnexpectedValueClassError(uint64_t a1, uint64_t a2)
{
  NSString *v3;

  v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR("Cannot load an object of class %@"), &stru_1E0F56070, CFSTR("Extension")), a1);
  return _makeError(-1100, (uint64_t)v3, a2);
}

NSError *_NSIPUnavailableCoercionError(objc_class *a1, objc_class *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  NSString *v8;
  NSString *v9;
  uint64_t v11;

  v6 = (void *)_NSFoundationBundle();
  if (a1)
  {
    v7 = objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("Could not coerce an item from class %@ to class %@"), &stru_1E0F56070, CFSTR("Extension"));
    v8 = NSStringFromClass(a1);
    v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v7, v8, NSStringFromClass(a2));
  }
  else
  {
    v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("Could not coerce an item to class %@"), &stru_1E0F56070, CFSTR("Extension")), NSStringFromClass(a2), v11);
  }
  return _makeError(-1200, (uint64_t)v9, a3);
}

NSError *_NSIPCocoaErrorWithCode(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12;
  void *v13;
  NSString *v14;
  void *v15;
  uint64_t *v17;

  if (a3)
    v12 = (id)objc_msgSend(a3, "mutableCopy");
  else
    v12 = (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v13 = v12;
  if (a4)
  {
    v17 = &a9;
    v14 = -[NSString initWithFormat:arguments:]([NSString alloc], "initWithFormat:arguments:", a4, &a9);
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v14, CFSTR("NSDebugDescription"));

  }
  if (a2)
    objc_msgSend(v13, "setObject:forKeyedSubscript:", a2, CFSTR("NSUnderlyingError"));
  if (objc_msgSend(v13, "count", v17))
    v15 = v13;
  else
    v15 = 0;
  return +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), a1, v15);
}

dispatch_queue_t __callbackQueue_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.Foundation.NSItemProvider-callback-queue", 0);
  qword_1ECD05670 = (uint64_t)result;
  return result;
}

void ___coordinatedFileAccess_block_invoke(uint64_t a1)
{
  char v2;
  NSFileCoordinator *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "startAccessingSecurityScopedResource");
  v3 = -[NSFileCoordinator initWithFilePresenter:]([NSFileCoordinator alloc], "initWithFilePresenter:", 0);
  v11[0] = *(_QWORD *)(a1 + 40);
  v4 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
  if (qword_1ECD05688 != -1)
    dispatch_once(&qword_1ECD05688, &__block_literal_global_67);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___coordinatedFileAccess_block_invoke_2;
  v6[3] = &unk_1E0F50978;
  v5 = *(_QWORD *)(a1 + 56);
  v7 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
  v10 = v2;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  -[NSFileCoordinator coordinateAccessWithIntents:queue:byAccessor:](v3, "coordinateAccessWithIntents:queue:byAccessor:", v4, qword_1ECD05680, v6);

}

uint64_t ___coordinatedFileAccess_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 32), "totalUnitCount"));
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), objc_msgSend(*(id *)(a1 + 40), "URL"), a2);
  if (*(_BYTE *)(a1 + 64))
    return objc_msgSend(*(id *)(a1 + 48), "stopAccessingSecurityScopedResource");
  return result;
}

NSOperationQueue *___coordinationQueue_block_invoke()
{
  NSOperationQueue *result;

  result = objc_alloc_init(NSOperationQueue);
  qword_1ECD05680 = (uint64_t)result;
  return result;
}

uint64_t initUTTypeCopyPreferredTagWithClass(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t (*v5)();

  v4 = MobileCoreServicesLibrary_0();
  v5 = (uint64_t (*)())dlsym(v4, "UTTypeCopyPreferredTagWithClass");
  off_1ECD04D08 = v5;
  if (!v5)
    __assert_rtn("initUTTypeCopyPreferredTagWithClass", "_NSItemProviderUtilities_Internal.m", 35, "softLinkUTTypeCopyPreferredTagWithClass");
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

void *MobileCoreServicesLibrary_0()
{
  void *result;

  result = (void *)MobileCoreServicesLibrary_frameworkLibrary;
  if (!MobileCoreServicesLibrary_frameworkLibrary)
  {
    result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary = (uint64_t)result;
    if (!result)
      __assert_rtn("MobileCoreServicesLibrary", "_NSItemProviderUtilities_Internal.m", 32, "frameworkLibrary");
  }
  return result;
}

uint64_t initkUTTagClassFilenameExtension_0()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary_0();
  v1 = (uint64_t *)dlsym(v0, "kUTTagClassFilenameExtension");
  if (!v1)
    __assert_rtn("initkUTTagClassFilenameExtension", "_NSItemProviderUtilities_Internal.m", 38, "constant");
  result = *v1;
  constantkUTTagClassFilenameExtension_0 = result;
  _MergedGlobals_86 = kUTTagClassFilenameExtensionFunction_0;
  return result;
}

uint64_t kUTTagClassFilenameExtensionFunction_0()
{
  return constantkUTTagClassFilenameExtension_0;
}

uint64_t initUTTypeCopyDescription(uint64_t a1)
{
  void *v2;
  uint64_t (*v3)();

  v2 = MobileCoreServicesLibrary_0();
  v3 = (uint64_t (*)())dlsym(v2, "UTTypeCopyDescription");
  softLinkUTTypeCopyDescription[0] = v3;
  if (!v3)
    __assert_rtn("initUTTypeCopyDescription", "_NSItemProviderUtilities_Internal.m", 36, "softLinkUTTypeCopyDescription");
  return ((uint64_t (*)(uint64_t))v3)(a1);
}

uint64_t initkUTTypeItem()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary_0();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeItem");
  if (!v1)
    __assert_rtn("initkUTTypeItem", "_NSItemProviderUtilities_Internal.m", 42, "constant");
  result = *v1;
  constantkUTTypeItem = result;
  getkUTTypeItem[0] = kUTTypeItemFunction;
  return result;
}

uint64_t kUTTypeItemFunction()
{
  return constantkUTTypeItem;
}

uint64_t init_UTTypeCreateSuggestedFilename(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t (*v5)();

  v4 = MobileCoreServicesLibrary_0();
  v5 = (uint64_t (*)())dlsym(v4, "_UTTypeCreateSuggestedFilename");
  softLink_UTTypeCreateSuggestedFilename = v5;
  if (!v5)
    __assert_rtn("init_UTTypeCreateSuggestedFilename", "_NSItemProviderUtilities_Internal.m", 37, "softLink_UTTypeCreateSuggestedFilename");
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

NSString *__NSURLGetTopLevelDomain(void *a1)
{
  NSString *result;

  objc_msgSend(a1, "cStringUsingEncoding:", 4);
  objc_msgSend(a1, "length");
  result = (NSString *)_CFHostGetTopLevelDomain();
  if (result)
    return -[NSString initWithCString:encoding:]([NSString alloc], "initWithCString:encoding:", result, 4);
  return result;
}

BOOL NSIntersectsRange(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return a1 < a3 + a4 && a3 < a1 + a2;
}

unint64_t NSSubtractRange(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;

  v6 = result + a2;
  v7 = a3 + a4;
  v8 = a3 + a4 > result && v6 > a3;
  if (v8)
  {
    if (a3 <= result)
    {
      v10 = v6 >= v7;
      v11 = v6 - v7;
      if (!v10)
        v11 = 0;
      *a5 = v7;
      a5[1] = v11;
    }
    else
    {
      *a5 = result;
      a5[1] = a3 - result;
      v8 = v6 > v7;
      v9 = v6 - v7;
      if (v8)
      {
        *a6 = v7;
        a6[1] = v9;
        return result;
      }
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  *a6 = 0;
  a6[1] = 0;
  return result;
}

NSRange NSRangeFromString(NSString *aString)
{
  void *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  NSUInteger v6;
  char *v7;
  int v8;
  char *v9;
  NSUInteger v10;
  char *v11;
  _BYTE v12[100];
  uint64_t v13;
  NSRange result;

  v1 = aString;
  v13 = *MEMORY[0x1E0C80C00];
  if (aString)
  {
    v11 = 0;
    v2 = (uint64_t)v12;
    if (!-[NSString getCString:maxLength:encoding:](aString, "getCString:maxLength:encoding:", v12, 100, 4))
      v2 = objc_msgSend(v1, "UTF8String");
    v3 = *(unsigned __int8 *)v2;
    if (*(_BYTE *)v2)
    {
      v4 = 0;
      while (v3 != 43 && (v3 - 48) >= 0xA)
      {
        v5 = v4 + 1;
        v3 = *(unsigned __int8 *)(v2 + 1 + v4++);
        if (!v3)
          goto LABEL_13;
      }
      v5 = v4;
    }
    else
    {
      v5 = 0;
    }
LABEL_13:
    v1 = (void *)_NSCStringToUnsignedLong((char *)(v2 + v5), &v11);
    v7 = &v11[-v2];
    v8 = *v11;
    if (*v11)
    {
      while (v8 != 43 && (v8 - 48) >= 0xA)
      {
        v9 = v7 + 1;
        v8 = (v7++)[v2 + 1];
        if (!v8)
          goto LABEL_19;
      }
    }
    v9 = v7;
LABEL_19:
    v6 = _NSCStringToUnsignedLong(&v9[v2], &v11);
  }
  else
  {
    v6 = 0;
  }
  v10 = (NSUInteger)v1;
  result.length = v6;
  result.location = v10;
  return result;
}

SEL _selectorForCoercion(uint64_t a1, void *a2)
{
  NSString *v2;
  void *v3;
  NSString *v4;

  v2 = _coercionClassStringFromClass(a2);
  v3 = (void *)objc_opt_class();
  v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("_NSItemProviderTypeCoercion_coerced%@ValueFrom%@Value:error:"), v2, _coercionClassStringFromClass(v3));
  return NSSelectorFromString(v4);
}

NSString *_coercionClassStringFromClass(void *a1)
{
  void *v2;
  NSString *result;
  NSString *v4;
  uint64_t v5;
  NSString *v6;
  objc_class *v7;
  _BYTE v8[128];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD0A160 != -1)
    dispatch_once(&qword_1ECD0A160, &__block_literal_global_44);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = (void *)_MergedGlobals_118;
  result = (NSString *)objc_msgSend((id)_MergedGlobals_118, "countByEnumeratingWithState:objects:count:", &v9, v8, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v10;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(objc_class **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6);
        if ((objc_msgSend(a1, "isSubclassOfClass:", v7) & 1) != 0)
          return NSStringFromClass(v7);
        v6 = (NSString *)((char *)v6 + 1);
      }
      while (v4 != v6);
      result = (NSString *)objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v8, 16);
      v4 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

id ___coercionClassStringFromClass_block_invoke()
{
  Class Class;
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Class = objc_getClass("UIImage");
  v1 = objc_opt_class();
  if (Class)
  {
    v9 = v1;
    v10 = objc_opt_class();
    v11 = objc_opt_class();
    v12 = Class;
    v2 = (void *)MEMORY[0x1E0C99D20];
    v3 = &v9;
    v4 = 4;
  }
  else
  {
    v6 = v1;
    v7 = objc_opt_class();
    v8 = objc_opt_class();
    v2 = (void *)MEMORY[0x1E0C99D20];
    v3 = &v6;
    v4 = 3;
  }
  _MergedGlobals_118 = objc_msgSend(v2, "arrayWithObjects:count:", v3, v4, v6, v7, v8, v9, v10, v11, v12, v13);
  return (id)_MergedGlobals_118;
}

void sub_181F94DC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_181F94F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;

  objc_sync_exit(v16);
  _Block_object_dispose(&a16, 8);
  _Unwind_Resume(a1);
}

void sub_181F95124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 88), 8);
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_181F95DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t __NSDescribeDelayedPerformCallout(uint64_t a1, uint64_t a2, char *a3, size_t a4, char *a5, size_t a6, uint64_t *a7)
{
  id v12;
  const char *v13;
  const char *ClassName;
  const char *Name;
  const char *v16;
  const char *v17;
  Class Class;
  uint64_t result;
  const char *dli_fname;
  Dl_info v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v12 = *(id *)a2;
  v13 = *(const char **)(a2 + 8);
  ClassName = object_getClassName(*(id *)a2);
  Name = sel_getName(v13);
  if (a7)
    *a7 = object_getMethodImplementation();
  v16 = "<unknown name>";
  if (ClassName)
    v16 = ClassName;
  v17 = "<unknown selector>";
  if (Name)
    v17 = Name;
  snprintf(a5, a6, "(Delayed Perform) %s %s", v16, v17);
  Class = object_getClass(v12);
  memset(&v21, 0, sizeof(v21));
  result = dladdr(Class, &v21);
  if ((_DWORD)result)
  {
    dli_fname = v21.dli_fname;
    if (!v21.dli_fname)
      dli_fname = "<unknown library>";
    return snprintf(a3, a4, "%s", dli_fname);
  }
  return result;
}

uint64_t _NSScanHexDoubleFromString(void *a1, void *a2, _QWORD *a3, unint64_t *a4, void *a5)
{
  void *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  uint64_t result;
  unsigned int v31;
  uint64_t v32;
  int v34;
  uint64_t v35;
  unsigned __int16 v36;
  char v37;
  unsigned __int8 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[4];
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = (void *)objc_msgSend(a5, "objectForKey:", *MEMORY[0x1E0C997C8]);
  if (!v9)
  {
    v9 = (void *)objc_msgSend(a5, "objectForKey:", CFSTR("NSDecimalSeparator"));
    if (!v9)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v9 = 0;
        goto LABEL_9;
      }
      v9 = (void *)objc_msgSend(a5, "decimalSeparator");
      if (!v9)
        goto LABEL_9;
    }
  }
  if (!objc_msgSend(v9, "length"))
  {
LABEL_9:
    v10 = 46;
    goto LABEL_10;
  }
  v10 = objc_msgSend(v9, "characterAtIndex:", 0);
LABEL_10:
  v42 = 0u;
  v40 = 0u;
  memset(v41, 0, sizeof(v41));
  v39 = 0u;
  v11 = *a4;
  v12 = objc_msgSend(a1, "length");
  *((_QWORD *)&v40 + 1) = v12;
  *(_QWORD *)&v41[0] = v11;
  *(_QWORD *)&v40 = a1;
  if (v12 <= v11)
  {
    *(_QWORD *)&v39 = 0;
    v14 = 0xFFFF;
  }
  else
  {
    if (v12 - v11 >= 0x20)
      v13 = 32;
    else
      v13 = v12 - v11;
    *(_QWORD *)&v39 = v13;
    objc_msgSend(a1, sel_getUid("getCharacters:range:"), (char *)v41 + 8, v11, v13);
    v14 = WORD4(v41[0]);
  }
  WORD4(v42) = v14;
  v15 = 1;
  *((_QWORD *)&v39 + 1) = 1;
  if (a2)
  {
    if (objc_msgSend(a2, "characterIsMember:"))
    {
      do
      {
        v16 = *((_QWORD *)&v39 + 1);
        if (*((_QWORD *)&v39 + 1) - 1 >= (unint64_t)v39)
          break;
        if (*((_QWORD *)&v39 + 1) >= (unint64_t)v39)
        {
          v18 = *(_QWORD *)&v41[0] + v39;
          if (*((_QWORD *)&v40 + 1) > *(_QWORD *)&v41[0] + (_QWORD)v39)
          {
            if (*((_QWORD *)&v40 + 1) - (*(_QWORD *)&v41[0] + (_QWORD)v39) >= 0x20uLL)
              v19 = 32;
            else
              v19 = *((_QWORD *)&v40 + 1) - (*(_QWORD *)&v41[0] + v39);
            *(_QWORD *)&v41[0] += v39;
            *(_QWORD *)&v39 = v19;
            objc_msgSend((id)v40, sel_getUid("getCharacters:range:"), (char *)v41 + 8, v18, v19);
            WORD4(v42) = WORD4(v41[0]);
            *((_QWORD *)&v39 + 1) = 1;
            continue;
          }
          *((_QWORD *)&v39 + 1) = v39 + 1;
          v17 = -1;
        }
        else
        {
          ++*((_QWORD *)&v39 + 1);
          v17 = *((_WORD *)v41 + v16 + 4);
        }
        WORD4(v42) = v17;
      }
      while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
    }
    v14 = WORD4(v42);
    v15 = *((_QWORD *)&v39 + 1);
  }
  v20 = *a4;
  v36 = v14;
  if (v14 <= 0x7F && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v14 + 60) & 0x4000) != 0)
    return 0;
  v21 = 0;
  v32 = v15 + *(_QWORD *)&v41[0] + ~v20;
  while (_NSCheckDecimalSeparator((uint64_t *)&v39, &v36, v10, v9))
  {
    if (v21 >= 0x3F)
      goto LABEL_48;
    v22 = 46;
LABEL_38:
    *(&v37 + v21) = v22;
    v23 = *((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1) < (unint64_t)v39)
    {
      ++*((_QWORD *)&v39 + 1);
      v24 = *((_WORD *)v41 + v23 + 4);
LABEL_46:
      WORD4(v42) = v24;
      goto LABEL_47;
    }
    v25 = *(_QWORD *)&v41[0] + v39;
    if (*((_QWORD *)&v40 + 1) <= *(_QWORD *)&v41[0] + (_QWORD)v39)
    {
      *((_QWORD *)&v39 + 1) = v39 + 1;
      v24 = -1;
      goto LABEL_46;
    }
    if (*((_QWORD *)&v40 + 1) - (*(_QWORD *)&v41[0] + (_QWORD)v39) >= 0x20uLL)
      v26 = 32;
    else
      v26 = *((_QWORD *)&v40 + 1) - (*(_QWORD *)&v41[0] + v39);
    *(_QWORD *)&v41[0] += v39;
    *(_QWORD *)&v39 = v26;
    objc_msgSend((id)v40, sel_getUid("getCharacters:range:"), (char *)v41 + 8, v25, v26);
    v24 = WORD4(v41[0]);
    WORD4(v42) = WORD4(v41[0]);
    *((_QWORD *)&v39 + 1) = 1;
LABEL_47:
    v36 = v24;
    ++v21;
  }
  v22 = v36;
  if (v36 <= 0x7Fu && v21 <= 0x3E)
    goto LABEL_38;
LABEL_48:
  v27 = &v37;
  *(&v37 + v21) = 0;
  v35 = 0;
  v34 = 0;
  v28 = v37;
  if (v37 == 45 || v37 == 43)
  {
    v27 = (char *)&v38;
    v28 = v38;
  }
  if (v28 != 48 || (v27[1] | 0x20) != 0x78)
    return 0;
  v29 = v27[2];
  if ((v29 - 48) >= 0xA)
  {
    result = 0;
    v31 = (unsigned __int16)v29 - 65;
    if (v31 > 0x25 || ((1 << v31) & 0x3F0000003FLL) == 0)
      return result;
  }
  if (sscanf_l(&v37, 0, "%la%n", &v35, &v34) < 1)
    return 0;
  *a4 += v32 + v34;
  if (a3)
    *a3 = v35;
  return 1;
}

uint64_t sub_181F967B0()
{
  return 0;
}

uint64_t sub_181F96828()
{
  return 0;
}

NSCharacterSet *__defaultInvertedSkipSet_block_invoke()
{
  NSCharacterSet *result;

  result = -[NSCharacterSet invertedSet](+[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet"), "invertedSet");
  qword_1ECD09520 = (uint64_t)result;
  return result;
}

uint64_t _NSExtensionClass()
{
  if (qword_1ECD0A170 != -1)
    dispatch_once(&qword_1ECD0A170, &__block_literal_global_46);
  return _MergedGlobals_119;
}

uint64_t sub_181F96DA0()
{
  return 0;
}

uint64_t sub_181F96DE8()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, _QWORD, NSError *))(v0 + 16))(v0, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0));
}

uint64_t sub_181F96E60()
{
  _QWORD *v0;

  if (v0)
    *v0 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0);
  return 0;
}

uint64_t sub_181F96ED4()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, _QWORD, NSError *))(v0 + 16))(v0, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0));
}

uint64_t sub_181F96F4C()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, _QWORD, NSError *))(v0 + 16))(v0, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0));
}

uint64_t sub_181F96FC4()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, _QWORD, NSError *))(v0 + 16))(v0, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0));
}

uint64_t sub_181F97034()
{
  return 0;
}

uint64_t sub_181F970B4()
{
  _QWORD *v0;

  if (v0)
    *v0 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0);
  return 0;
}

uint64_t sub_181F97128()
{
  _QWORD *v0;

  if (v0)
    *v0 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0);
  return 0;
}

uint64_t sub_181F971CC()
{
  return 0;
}

uint64_t sub_181F9720C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_181F97254()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, NSError *))(v0 + 16))(v0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0));
}

uint64_t sub_181F972C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, NSError *))(v0 + 16))(v0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3072, 0));
}

uint64_t sub_181F97334()
{
  return 0;
}

uint64_t preferredTermOfAddressForLanguageFromList(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BYTE v9[128];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v9, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v11;
LABEL_3:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v11 != v6)
        objc_enumerationMutation(a2);
      v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v7);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (objc_msgSend(v8, "_isSupportedInLanguage:", a1))
        {
          result = objc_msgSend(v8, "_withExtrapolatedPronouns");
          if (result)
            break;
        }
      }
      if (v5 == ++v7)
      {
        result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v9, 16);
        v5 = result;
        if (result)
          goto LABEL_3;
        return result;
      }
    }
  }
  return result;
}

NSXPCInterface *_NSBundleResourceRequestServerInterface()
{
  NSXPCInterface *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;

  v0 = +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &unk_1EDCFFAF0);
  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v1, "setWithObjects:", v2, v3, objc_opt_class(), 0), sel_tagStateInBundle_completionHandler_, 0, 1);
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0), sel_beginODRSessionWithBundleURL_completionHandler_, 0, 1);
  v6 = (void *)MEMORY[0x1E0C99E60];
  v7 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v6, "setWithObjects:", v7, objc_opt_class(), 0), sel_beginWithBundleURL_completionHandler_, 0, 1);
  v8 = (void *)MEMORY[0x1E0C99E60];
  v9 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v8, "setWithObjects:", v9, objc_opt_class(), 0), sel_pinTags_inBundle_priority_completionHandler_, 0, 0);
  v10 = (void *)MEMORY[0x1E0C99E60];
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v10, "setWithObjects:", v11, v12, objc_opt_class(), 0), sel_pinTags_inBundle_priority_completionHandler_, 0, 1);
  v13 = (void *)MEMORY[0x1E0C99E60];
  v14 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v13, "setWithObjects:", v14, objc_opt_class(), 0), sel_conditionallyPinTags_inBundle_completionHandler_, 0, 0);
  v15 = (void *)MEMORY[0x1E0C99E60];
  v16 = objc_opt_class();
  v17 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v15, "setWithObjects:", v16, v17, objc_opt_class(), 0), sel_conditionallyPinTags_inBundle_completionHandler_, 1, 1);
  v18 = (void *)MEMORY[0x1E0C99E60];
  v19 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v18, "setWithObjects:", v19, objc_opt_class(), 0), sel_setLoadingPriority_forTags_inBundle_, 1, 0);
  v20 = (void *)MEMORY[0x1E0C99E60];
  v21 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v20, "setWithObjects:", v21, objc_opt_class(), 0), sel_unpinTags_inBundle_completionHandler_, 0, 0);
  v22 = (void *)MEMORY[0x1E0C99E60];
  v23 = objc_opt_class();
  v24 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v22, "setWithObjects:", v23, v24, objc_opt_class(), 0), sel_unpinTags_inBundle_completionHandler_, 0, 1);
  v25 = (void *)MEMORY[0x1E0C99E60];
  v26 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v25, "setWithObjects:", v26, objc_opt_class(), 0), sel_okToPurgeAssetPacks_, 0, 0);
  v27 = (void *)MEMORY[0x1E0C99E60];
  v28 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v27, "setWithObjects:", v28, objc_opt_class(), 0), sel_setPreservationPriority_forTags_inBundle_, 1, 0);
  v29 = (void *)MEMORY[0x1E0C99E60];
  v30 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v29, "setWithObjects:", v30, objc_opt_class(), 0), sel_setAlwaysPreserved_forTags_inBundle_, 1, 0);
  return v0;
}

NSXPCInterface *_NSBundleResourceRequestClientInterface()
{
  return +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &unk_1EDCE2D50);
}

void sub_181F98E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_181F99260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 88), 8);
  _Unwind_Resume(a1);
}

void _setupConnection(void *a1)
{
  NSObject *v2;
  _QWORD v3[5];
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint8_t buf[8];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "setRemoteObjectInterface:", _NSBundleResourceRequestServerInterface());
  objc_msgSend(a1, "setExportedInterface:", +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &unk_1EDCE2D50));
  objc_msgSend(a1, "setExportedObject:", (id)objc_opt_new());
  objc_msgSend(a1, "resume");
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___setupConnection_block_invoke;
  v4[3] = &unk_1E0F4E100;
  v4[4] = &v5;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___setupConnection_block_invoke_2;
  v3[3] = &unk_1E0F50E58;
  v3[4] = &v5;
  objc_msgSend((id)objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:", v4), "hello:", v3);
  if (!*((_BYTE *)v6 + 24))
  {
    if (qword_1ECD056F0 != -1)
      dispatch_once(&qword_1ECD056F0, &__block_literal_global_300);
    v2 = qword_1ECD056E8;
    if (os_log_type_enabled((os_log_t)qword_1ECD056E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1817D9000, v2, OS_LOG_TYPE_ERROR, "NSBundleResourceRequest could not connect to its helper daemon", buf, 2u);
    }
  }
  _Block_object_dispose(&v5, 8);
}

void sub_181F9A7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSXPCInterface *_appExtensionInterface()
{
  NSXPCInterface *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v0 = +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &unk_1EDCE2EA8);
  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v1, "setWithObjects:", v2, v3, objc_opt_class(), 0), sel_hostApplicationAssetPacksBecameAvailable_, 0, 0);
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:](v0, "setClasses:forSelector:argumentIndex:ofReply:", objc_msgSend(v4, "setWithObjects:", v5, v6, objc_opt_class(), 0), sel_hostApplicationAssetPacksBecameUnavailable_, 0, 0);
  return v0;
}

uint64_t ___setupConnection_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
  return result;
}

uint64_t ___setupConnection_block_invoke_2(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void ___endAccessingResources_block_invoke(uint64_t a1)
{

}

void ___endAccessingResources_block_invoke_2(id *a1, void *a2)
{
  objc_msgSend(a1[4], "assetPacksBecameUnavailable:error:", a2, 0);
  objc_msgSend((id)objc_msgSend(a1[5], "remoteObjectProxy"), "okToPurgeAssetPacks:", objc_msgSend(a2, "allKeys"));

}

uint64_t isEqualCStringToString(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  _BOOL8 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  id v19;
  __int128 v20;
  _OWORD v21[4];
  uint64_t v22;
  uint64_t v23;

  v4 = a2;
  v23 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a3, "length") != a2)
    return 0;
  v18 = 0;
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v19 = a3;
  v20 = v4;
  if (v4)
  {
    if (v4 >= 0x20)
      v6 = 32;
    else
      v6 = v4;
    v17 = v6;
    objc_msgSend(a3, sel_getUid("getCharacters:range:"), v21, 0, v6);
    v7 = LOWORD(v21[0]);
    v18 = 1;
    LOWORD(v22) = v21[0];
    v8 = _NSCStringCharToUnicharTable;
    v9 = 1;
    while (1)
    {
      v10 = *a1++;
      v11 = *(unsigned __int16 *)(v8 + 2 * v10);
      v12 = v11 == v7;
      if (v11 != v7)
        return v12;
      if (v9 >= v17)
      {
        v14 = *((_QWORD *)&v20 + 1) + v17;
        if ((unint64_t)v20 > *((_QWORD *)&v20 + 1) + v17)
        {
          if ((unint64_t)v20 - (*((_QWORD *)&v20 + 1) + v17) >= 0x20)
            v15 = 32;
          else
            v15 = v20 - (*((_QWORD *)&v20 + 1) + v17);
          *((_QWORD *)&v20 + 1) += v17;
          v17 = v15;
          objc_msgSend(v19, sel_getUid("getCharacters:range:"), v21, v14, v15);
          v7 = LOWORD(v21[0]);
          LOWORD(v22) = v21[0];
          v18 = 1;
          v8 = _NSCStringCharToUnicharTable;
          v9 = 1;
          goto LABEL_17;
        }
        v9 = v17 + 1;
        v18 = v17 + 1;
        v7 = 0xFFFF;
      }
      else
      {
        v13 = (char *)&v17 + 2 * v9++;
        v18 = v9;
        v7 = *((unsigned __int16 *)v13 + 20);
      }
      LOWORD(v22) = v7;
LABEL_17:
      if (!--v4)
        return v12;
    }
  }
  return 1;
}

void sub_181F9E354()
{
  objc_end_catch();
  JUMPOUT(0x181F9E35CLL);
}

void sub_181F9E5C0()
{
  objc_end_catch();
  JUMPOUT(0x181F9E570);
}

uint64_t initkUTTypeUTF8PlainText()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary_1();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeUTF8PlainText");
  if (!v1)
    __assert_rtn("initkUTTypeUTF8PlainText", "NSString+NSItemProvider.m", 19, "constant");
  result = *v1;
  constantkUTTypeUTF8PlainText = result;
  _MergedGlobals_87 = kUTTypeUTF8PlainTextFunction;
  return result;
}

void *MobileCoreServicesLibrary_1()
{
  void *result;

  result = (void *)MobileCoreServicesLibrary_frameworkLibrary_2;
  if (!MobileCoreServicesLibrary_frameworkLibrary_2)
  {
    result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_2 = (uint64_t)result;
    if (!result)
      __assert_rtn("MobileCoreServicesLibrary", "NSString+NSItemProvider.m", 16, "frameworkLibrary");
  }
  return result;
}

uint64_t kUTTypeUTF8PlainTextFunction()
{
  return constantkUTTypeUTF8PlainText;
}

uint64_t initkUTTypeUTF16ExternalPlainText()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary_1();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeUTF16ExternalPlainText");
  if (!v1)
    __assert_rtn("initkUTTypeUTF16ExternalPlainText", "NSString+NSItemProvider.m", 21, "constant");
  result = *v1;
  constantkUTTypeUTF16ExternalPlainText = result;
  off_1ECD04D18 = kUTTypeUTF16ExternalPlainTextFunction;
  return result;
}

uint64_t kUTTypeUTF16ExternalPlainTextFunction()
{
  return constantkUTTypeUTF16ExternalPlainText;
}

uint64_t initkUTTypeUTF16PlainText()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary_1();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeUTF16PlainText");
  if (!v1)
    __assert_rtn("initkUTTypeUTF16PlainText", "NSString+NSItemProvider.m", 20, "constant");
  result = *v1;
  constantkUTTypeUTF16PlainText = result;
  off_1ECD04D20 = kUTTypeUTF16PlainTextFunction;
  return result;
}

uint64_t kUTTypeUTF16PlainTextFunction()
{
  return constantkUTTypeUTF16PlainText;
}

uint64_t initkUTTypePlainText()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary_1();
  v1 = (uint64_t *)dlsym(v0, "kUTTypePlainText");
  if (!v1)
    __assert_rtn("initkUTTypePlainText", "NSString+NSItemProvider.m", 22, "constant");
  result = *v1;
  constantkUTTypePlainText = result;
  off_1ECD04D28 = kUTTypePlainTextFunction;
  return result;
}

uint64_t kUTTypePlainTextFunction()
{
  return constantkUTTypePlainText;
}

uint64_t initkUTTypeURL_1()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary_1();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeURL");
  if (!v1)
    __assert_rtn("initkUTTypeURL", "NSString+NSItemProvider.m", 17, "constant");
  result = *v1;
  constantkUTTypeURL_1 = result;
  off_1ECD04D30 = kUTTypeURLFunction_1;
  return result;
}

uint64_t kUTTypeURLFunction_1()
{
  return constantkUTTypeURL_1;
}

uint64_t initUTTypeConformsTo_1(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t (*v5)();

  v4 = MobileCoreServicesLibrary_1();
  v5 = (uint64_t (*)())dlsym(v4, "UTTypeConformsTo");
  off_1ECD04D40 = v5;
  if (!v5)
    __assert_rtn("initUTTypeConformsTo", "NSString+NSItemProvider.m", 23, "softLinkUTTypeConformsTo");
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initkUTTypeFileURL_0()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary_1();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeFileURL");
  if (!v1)
    __assert_rtn("initkUTTypeFileURL", "NSString+NSItemProvider.m", 18, "constant");
  result = *v1;
  constantkUTTypeFileURL_0 = result;
  off_1ECD04D38 = kUTTypeFileURLFunction_0;
  return result;
}

uint64_t kUTTypeFileURLFunction_0()
{
  return constantkUTTypeFileURL_0;
}

uint64_t _NSNullCompare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return -1;
  else
    return 0;
}

void sub_181F9EFA8(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_181F9F158()
{
  return 0;
}

uint64_t sub_181F9F1D0()
{
  return 0;
}

uint64_t sub_181F9F210()
{
  return 0;
}

uint64_t sub_181F9F2C0()
{
  return 7;
}

uint64_t sub_181F9F300()
{
  return 0;
}

void _inputStreamCallbackFunc(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = (id)objc_msgSend(a3, "retainedDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v5, "stream:handleEvent:", a1, a2);

}

void _outputStreamCallbackFunc(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = (id)objc_msgSend(a3, "retainedDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v5, "stream:handleEvent:", a1, a2);

}

uint64_t sub_181F9FC6C()
{
  return -1;
}

uint64_t sub_181F9FCAC()
{
  return 0;
}

uint64_t sub_181F9FCEC()
{
  return 0;
}

uint64_t sub_181F9FD30()
{
  return -1;
}

uint64_t sub_181F9FD70()
{
  return 0;
}

void _NSAllocatorAllocateHALTIfUsed()
{
  abort();
}

uint64_t sub_181FA03A8()
{
  return 0;
}

uint64_t sub_181FA03C8()
{
  return 0;
}

void sub_181FA0BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 88), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_181FA184C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FA1870()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FA1894()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FA18B8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FA18DC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FA1900()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FA19E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FA1A0C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FA1A30()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FA1D4C()
{
  return 0;
}

uint64_t sub_181FA1D90()
{
  return 0;
}

CFStringRef _NSNewInlineCString(const UInt8 *a1, CFIndex a2)
{
  const __CFAllocator *v4;
  CFStringEncoding SystemEncoding;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  SystemEncoding = CFStringGetSystemEncoding();
  return CFStringCreateWithBytes(v4, a1, a2, SystemEncoding, 0);
}

uint64_t NSCompareCharacters@<X0>(unsigned __int16 *a1@<X0>, unsigned __int16 *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if (a3 >= a4)
    v6 = a4;
  else
    v6 = a3;
  if (v6)
  {
    while (1)
    {
      v8 = *a1++;
      v7 = v8;
      v10 = *a2++;
      v9 = v10;
      if ((a5 & 1) != 0)
      {
        if ((v7 - 97) < 0x1A)
          LOWORD(v7) = v7 - 32;
        if ((v9 - 97) < 0x1A)
          LOWORD(v9) = v9 - 32;
      }
      if ((unsigned __int16)v7 > (unsigned __int16)v9)
        a6 = 1;
      if ((unsigned __int16)v7 < (unsigned __int16)v9)
        a6 = -1;
      if ((unsigned __int16)v7 != (unsigned __int16)v9)
        break;
      if (!--v6)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    a6 = a3 > a4;
    if (a3 < a4)
      return -1;
  }
  return a6;
}

uint64_t NSCompareCString(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, char a5)
{
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;

  if (a3 >= a4)
    v5 = a4;
  else
    v5 = a3;
  if (v5)
  {
    v6 = (uint64_t)&_MergedGlobals_114;
    while (1)
    {
      v7 = *a1++;
      v8 = *(unsigned __int16 *)(_NSCStringCharToUnicharTable + 2 * v7);
      v9 = *a2++;
      v10 = *(unsigned __int16 *)(_NSCStringCharToUnicharTable + 2 * v9);
      if ((a5 & 1) != 0)
      {
        if ((v8 - 97) < 0x1A)
          LOWORD(v8) = v8 - 32;
        if ((v10 - 97) < 0x1A)
          LOWORD(v10) = v10 - 32;
      }
      if ((unsigned __int16)v8 > (unsigned __int16)v10)
        v6 = 1;
      if ((unsigned __int16)v8 < (unsigned __int16)v10)
        v6 = -1;
      if ((unsigned __int16)v8 != (unsigned __int16)v10)
        break;
      if (!--v5)
        goto LABEL_17;
    }
  }
  else
  {
LABEL_17:
    v6 = a3 > a4;
    if (a3 < a4)
      return -1;
  }
  return v6;
}

uint64_t __NSCharToUnicharCFWrapper(uint64_t a1)
{
  int v1;
  unsigned __int16 v2;
  unsigned __int16 v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v1 = ((uint64_t (*)(_QWORD, uint64_t, unsigned __int16 *))*MEMORY[0x1E0C9A940])(0, a1, &v4);
  v2 = v4;
  if (!v1)
    return (unsigned __int16)-3;
  return v2;
}

uint64_t _NSConvertToASCIIorUnicode(unsigned __int16 *a1, size_t a2, unint64_t a3, _QWORD *a4, _QWORD *a5, _BYTE *a6, malloc_zone_t *zone)
{
  malloc_zone_t *v7;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  const void **v17;
  __int128 v19;
  _OWORD v20[64];
  uint64_t v21;

  v7 = zone;
  v21 = *MEMORY[0x1E0C80C00];
  v19 = 0u;
  memset(v20, 0, 496);
  v11 = _NSConvertToASCIIorUnicode2(a1, a2, a3, 0, (uint64_t)&v19, zone);
  if ((_DWORD)v11)
  {
    v12 = v19;
    v13 = (uint64_t *)&v19 + 1;
    if (!(_BYTE)v19)
      v13 = (uint64_t *)v20;
    v14 = *v13;
    if (BYTE1(v19))
    {
      *a4 = v14;
    }
    else if (v14)
    {
      v15 = *((_QWORD *)&v20[0] + 1) << (v19 == 0);
      if (!v7)
        v7 = malloc_default_zone();
      v16 = malloc_type_zone_malloc(v7, v15, 0x4A6F13AEuLL);
      *a4 = v16;
      v17 = (const void **)v20;
      if ((_BYTE)v19)
        v17 = (const void **)&v19 + 1;
      memmove(v16, *v17, *((_QWORD *)&v20[0] + 1) << ((_BYTE)v19 == 0));
      v12 = v19;
    }
    else
    {
      *a4 = 0;
    }
    *a5 = *((_QWORD *)&v20[0] + 1);
    *a6 = v12;
  }
  return v11;
}

uint64_t sub_181FA5308()
{
  return 0;
}

uint64_t sub_181FA5380()
{
  return 0;
}

uint64_t sub_181FA53C0()
{
  return 0;
}

uint64_t sub_181FA5400()
{
  return 0;
}

uint64_t sub_181FA5478()
{
  return 0;
}

uint64_t sub_181FA57C8()
{
  return 0;
}

uint64_t sub_181FA5808()
{
  return 0;
}

uint64_t sub_181FA5848()
{
  return 0;
}

uint64_t sub_181FA5888()
{
  return 0;
}

uint64_t sub_181FA58C8()
{
  return 0;
}

uint64_t sub_181FA5908()
{
  return 0;
}

uint64_t sub_181FA5948()
{
  return 0;
}

uint64_t sub_181FA5988()
{
  return 0;
}

uint64_t sub_181FA5A78()
{
  return 0;
}

uint64_t sub_181FA5AB8()
{
  return 0;
}

uint64_t sub_181FA5AF8()
{
  return 0;
}

void sub_181FA6114(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_181FA6244(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_181FA75F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 88));
  _Unwind_Resume(a1);
}

void sub_181FA7880(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_181FA7B90(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void COPY_SETTER_IMPL(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  os_unfair_lock_s *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSString *v13;

  v4 = atomic_load((unint64_t *)(a1 + 56));
  if ((v4 & 0x100000000) != 0)
  {
    v11 = (void *)MEMORY[0x1E0C99DA0];
    v12 = *MEMORY[0x1E0C99778];
    v13 = (NSString *)CFSTR("task already launched");
    goto LABEL_8;
  }
  if (!a2)
  {
    v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), a4);
    v11 = (void *)MEMORY[0x1E0C99DA0];
    v12 = *MEMORY[0x1E0C99778];
LABEL_8:
    objc_exception_throw((id)objc_msgSend(v11, "exceptionWithName:reason:userInfo:", v12, v13, 0));
  }
  v8 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v9 = *(id *)(a1 + 16);
  if (!v9)
  {
    v9 = +[NSTask currentTaskDictionary](NSTask, "currentTaskDictionary");
    *(_QWORD *)(a1 + 16) = v9;
  }
  v10 = (void *)objc_msgSend(a2, "copyWithZone:", 0);
  objc_msgSend(v9, "setObject:forKey:", v10, a3);

  os_unfair_lock_unlock(v8);
}

void sub_181FA7CD8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id COPY_GETTER_IMPL(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = &v9;
  v11 = 0x3052000000;
  v12 = __Block_byref_object_copy__15;
  v13 = __Block_byref_object_dispose__15;
  v14 = 0;
  v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v5 = *(id *)(a1 + 16);
  if (!v5)
  {
    v5 = +[NSTask currentTaskDictionary](NSTask, "currentTaskDictionary");
    *(_QWORD *)(a1 + 16) = v5;
  }
  v6 = objc_msgSend((id)objc_msgSend(v5, "objectForKey:", a2), "copyWithZone:", 0);
  v10[5] = v6;
  os_unfair_lock_unlock(v4);
  v7 = (id)v10[5];
  _Block_object_dispose(&v9, 8);
  return v7;
}

void sub_181FA7EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id GETTER_IMPL(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = &v9;
  v11 = 0x3052000000;
  v12 = __Block_byref_object_copy__15;
  v13 = __Block_byref_object_dispose__15;
  v14 = 0;
  v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v5 = *(id *)(a1 + 16);
  if (!v5)
  {
    v5 = +[NSTask currentTaskDictionary](NSTask, "currentTaskDictionary");
    *(_QWORD *)(a1 + 16) = v5;
  }
  v6 = (id)objc_msgSend(v5, "objectForKey:", a2);
  v10[5] = (uint64_t)v6;
  os_unfair_lock_unlock(v4);
  v7 = (id)v10[5];
  _Block_object_dispose(&v9, 8);
  return v7;
}

void sub_181FA8018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NOCOPY_SETTER_IMPL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  os_unfair_lock_s *v7;
  id v8;

  v3 = atomic_load((unint64_t *)(a1 + 56));
  if ((v3 & 0x100000000) != 0)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("task already launched"), 0));
  v7 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v8 = *(id *)(a1 + 16);
  if (!v8)
  {
    v8 = +[NSTask currentTaskDictionary](NSTask, "currentTaskDictionary");
    *(_QWORD *)(a1 + 16) = v8;
    if (a2)
      goto LABEL_4;
LABEL_6:
    objc_msgSend(v8, "removeObjectForKey:", a3);
    goto LABEL_7;
  }
  if (!a2)
    goto LABEL_6;
LABEL_4:
  objc_msgSend(v8, "setObject:forKey:", a2, a3);
LABEL_7:
  os_unfair_lock_unlock(v7);
}

void sub_181FA81AC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_181FA8368(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_181FA844C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t *_signalRunningTask(unint64_t *result, const char *a2)
{
  unint64_t v2;
  void *v3;

  v2 = atomic_load(result + 7);
  if ((v2 & 0x100000000) == 0)
  {
    v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: task not launched"), _NSMethodExceptionProem((objc_class *)result, a2)), 0);
    objc_exception_throw(v3);
  }
  return result;
}

void __PTHREAD_SPAWN_EAGAIN_OVERLIMIT__()
{
  NSObject *v0;
  uint8_t v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v0 = _NSOSLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_1817D9000, v0, OS_LOG_TYPE_FAULT, "NSTask: Failed to spawn task due to receieving EAGAIN many times despite retrying; this means the system could not"
      " spawn a new process.",
      v1,
      2u);
  }
}

uint64_t sub_181FA8B98()
{
  return 0;
}

uint64_t sub_181FA8BD8()
{
  return 0;
}

uint64_t sub_181FA9C3C()
{
  return 0;
}

uint64_t __NSThread__block_start__(void *a1)
{
  uint64_t v2;
  void *v3;

  if (qword_1ECD09A08 != -1)
    dispatch_once(&qword_1ECD09A08, &__block_literal_global_219);
  v2 = pthread_setspecific(qword_1ECD09A00, a1);
  v3 = (void *)MEMORY[0x186DA8F78](v2);
  (*((void (**)(void *))a1 + 2))(a1);
  objc_autoreleasePoolPop(v3);
  return 0;
}

uint64_t sub_181FAA6C8()
{
  return 0;
}

uint64_t sub_181FAA73C()
{
  return 0;
}

double sub_181FAA77C()
{
  return 0.0;
}

double sub_181FAA7BC()
{
  return 0.0;
}

uint64_t sub_181FAA86C()
{
  return 0;
}

void __NSDescribeTimerCallout(uint64_t a1, uint64_t a2, char *a3, size_t a4, char *a5, size_t a6, uint64_t *a7)
{
  void *v12;
  const char *v13;
  const char *ClassName;
  const char *Name;
  const char *v16;
  const char *v17;
  Class Class;
  const char *dli_fname;
  Dl_info v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v12 = *(void **)(a2 + 8);
    v13 = *(const char **)(a2 + 16);
    ClassName = object_getClassName(v12);
    Name = sel_getName(v13);
    *a7 = object_getMethodImplementation();
    v16 = "<unknown class name>";
    if (ClassName)
      v16 = ClassName;
    v17 = "<unknown selector>";
    if (Name)
      v17 = Name;
    snprintf(a5, a6, "(NSTimer) [%s %s]", v16, v17);
    Class = object_getClass(v12);
    memset(&v20, 0, sizeof(v20));
    if (dladdr(Class, &v20))
    {
      dli_fname = v20.dli_fname;
      if (!v20.dli_fname)
        dli_fname = "<unknown library>";
      snprintf(a3, a4, "%s", dli_fname);
    }
  }
}

uint64_t sub_181FAC700()
{
  return 0;
}

uint64_t sub_181FAC7C0()
{
  return 0;
}

uint64_t sub_181FAC880()
{
  return 0;
}

uint64_t sub_181FAC940()
{
  return 0;
}

uint64_t sub_181FACA00()
{
  return 0;
}

uint64_t sub_181FACAC0()
{
  return 0;
}

uint64_t sub_181FACB80()
{
  return 0;
}

uint64_t sub_181FACC40()
{
  return 0;
}

uint64_t sub_181FACD00()
{
  return 0;
}

uint64_t sub_181FACDC0()
{
  return 0;
}

uint64_t sub_181FACDFC()
{
  return 0;
}

uint64_t sub_181FACE38()
{
  return 0;
}

uint64_t sub_181FACE74()
{
  return 0;
}

uint64_t sub_181FACEB0()
{
  return 0;
}

uint64_t sub_181FACEEC()
{
  return 0;
}

uint64_t sub_181FACF28()
{
  return 0;
}

const __CFString *sub_181FACF64()
{
  return &stru_1E0F56070;
}

uint64_t sub_181FACFA4()
{
  return 0;
}

uint64_t sub_181FACFE0()
{
  return 0;
}

uint64_t sub_181FAD01C()
{
  return 0;
}

id sub_181FAD238(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  objc_super v17;

  v17.receiver = v15;
  v17.super_class = (Class)NSURLComponents;
  return objc_msgSendSuper2(&v17, sel_init);
}

id sub_181FAD2C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  objc_super v17;

  v17.receiver = v15;
  v17.super_class = (Class)NSURLComponents;
  return objc_msgSendSuper2(&v17, sel_init);
}

id sub_181FAD350(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  objc_super v17;

  v17.receiver = v15;
  v17.super_class = (Class)NSURLComponents;
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t sub_181FAD3C8()
{
  return 0;
}

uint64_t sub_181FAD408()
{
  return 0;
}

uint64_t sub_181FAD448()
{
  return 0;
}

uint64_t sub_181FAD488()
{
  return 0;
}

uint64_t sub_181FAD500()
{
  return 0;
}

uint64_t sub_181FAD578()
{
  return 0;
}

uint64_t sub_181FAD5F0()
{
  return 0;
}

uint64_t sub_181FAD668()
{
  return 0;
}

uint64_t sub_181FAD6E0()
{
  return 0;
}

uint64_t sub_181FAD758()
{
  return 0;
}

uint64_t sub_181FAD7D0()
{
  return 0;
}

uint64_t sub_181FAD848()
{
  return 0;
}

uint64_t sub_181FAD8C0()
{
  return 0;
}

uint64_t sub_181FAD938()
{
  return 0;
}

uint64_t sub_181FAD9B0()
{
  return 0;
}

uint64_t sub_181FADA28()
{
  return 0;
}

uint64_t sub_181FADAA0()
{
  return 0;
}

uint64_t sub_181FADB18()
{
  return 0;
}

uint64_t sub_181FADB90()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_181FADBD4()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_181FADC18()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_181FADC5C()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_181FADCA0()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_181FADCE4()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_181FADD28()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_181FADD6C()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_181FADDB0()
{
  return 0;
}

uint64_t sub_181FADE28()
{
  return 0;
}

uint64_t NSURLReportAssertionFailure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  FILE *v4;

  v4 = (FILE *)*MEMORY[0x1E0C80C10];
  if (a4)
    return fprintf(v4, "=================\nASSERTION FAILED: %s (%s:%ld %s)\n=================\n");
  else
    return fprintf(v4, "=================\nSHOULD NEVER BE REACHED (%s:%ld %s)\n=================\n");
}

uint64_t NSURLReportAssertionFailureWithMessage(const char *a1, uint64_t a2, const char *a3, const char *a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  FILE **v14;

  v14 = (FILE **)MEMORY[0x1E0C80C10];
  fwrite("=================\nASSERTION FAILED: ", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  vfprintf_l(*v14, 0, a5, &a9);
  return fprintf(*v14, "\n%s (%s:%ld %s)\n=================\n", a4, a1, a2, a3);
}

uint64_t NSURLReportArgumentAssertionFailure(const char *a1, uint64_t a2, const char *a3, const char *a4, const char *a5)
{
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "=================\nARGUMENT BAD: %s, %s (%s:%ld %s)\n=================\n", a4, a5, a1, a2, a3);
}

uint64_t NSURLReportFatalError(const char *a1, uint64_t a2, const char *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  FILE **v13;

  v13 = (FILE **)MEMORY[0x1E0C80C10];
  fwrite("=================\nFATAL ERROR: ", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  vfprintf_l(*v13, 0, a4, &a9);
  return fprintf(*v13, "\n(%s:%ld %s)\n=================\n", a1, a2, a3);
}

uint64_t NSURLReportError(const char *a1, uint64_t a2, const char *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  FILE **v13;

  v13 = (FILE **)MEMORY[0x1E0C80C10];
  fwrite("=================\nERROR: ", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  vfprintf_l(*v13, 0, a4, &a9);
  return fprintf(*v13, "\n(%s:%ld %s)\n=================\n", a1, a2, a3);
}

void NSURLLog(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v13;
  uint64_t v15;
  uint64_t v16;
  FILE **v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v13 = *(_DWORD *)(a4 + 16);
  if (!v13)
  {
    *(_DWORD *)(a4 + 16) = 1;
    v15 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a4 + 8)));
    if (v15)
    {
      v16 = v15;
      LODWORD(v18[0]) = 0;
      if (!-[NSScanner scanHexInt:](+[NSScanner scannerWithString:](NSScanner, "scannerWithString:", v15), "scanHexInt:", v18))NSLog((NSString *)CFSTR("unable to parse hex value for %s (%@), logging is off"), *(_QWORD *)(a4 + 8), v16);
      if ((*(_QWORD *)a4 & ~(unint64_t)LODWORD(v18[0])) == 0)
        *(_DWORD *)(a4 + 16) = 2;
    }
    v13 = *(_DWORD *)(a4 + 16);
  }
  if (v13 == 2)
  {
    v17 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "- %s:%ld %s - ", a1, a2, a3);
    v18[0] = &a9;
    vfprintf_l(*v17, 0, a5, &a9);
    if (a5[strlen(a5) - 1] != 10)
      putc(10, *v17);
  }
}

NSLock *NSURLHostNameAddressInfoInit()
{
  NSLock *result;

  qword_1ECD0A238 = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  result = objc_alloc_init(NSLock);
  _MergedGlobals_125 = (uint64_t)result;
  return result;
}

uint64_t resolveHostName(void *a1)
{
  void *v2;
  NSString *v3;
  char *v4;
  hostent *v5;
  __int16 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  pthread_setname_np("com.apple.NSURLHostNameAddressInfo.resolving");
  _CFAutoreleasePoolPush();
  v2 = (void *)objc_msgSend(a1, "host");
  v7 = 0;
  v3 = +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", &v7, 1);
  if (v2 && objc_msgSend(v2, "rangeOfString:options:", v3, 2) == 0x7FFFFFFFFFFFFFFFLL)
  {
    v4 = (char *)objc_msgSend(v2, "UTF8String");
    v5 = doResolveHostName((uint64_t)v2, v4, 2);
    if (!v5)
      v5 = doResolveHostName((uint64_t)v2, v4, 30);
  }
  else
  {
    v5 = 0;
  }
  objc_msgSend(a1, "hostNameResolved:", v5);

  _CFAutoreleasePoolPop();
  return 0;
}

hostent *doResolveHostName(uint64_t a1, char *a2, int a3)
{
  hostent *v4;
  hostent *v5;
  int h_addrtype;
  BOOL v7;
  addrinfo *v8;
  uint64_t v9;
  char v10;
  addrinfo *v11;
  addrinfo *v12;
  addrinfo *v13;
  uint64_t v14;
  addrinfo *v15;
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  hostent *v20;
  hostent *v21;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v4 = getipnodebyname(a2, a3, 0, &v23);
  v5 = v4;
  if (!v4)
    return v5;
  h_addrtype = v4->h_addrtype;
  v7 = h_addrtype == 30 || h_addrtype == 2;
  if (!v7 || !*v4->h_addr_list)
  {
LABEL_26:
    freehostent(v5);
    return 0;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
LABEL_9:
  v12 = v11;
  v13 = v8;
  v14 = v9;
  do
  {
    v15 = (addrinfo *)malloc_type_calloc(1uLL, 0x30uLL, 0x1030040D19128EAuLL);
    v11 = v15;
    v8 = v15;
    if (v13)
    {
      v12->ai_next = v15;
      v8 = v13;
    }
    v16 = v5->h_addrtype;
    v15->ai_family = v16;
    *(_QWORD *)&v15->ai_socktype = 0x600000001;
    if (v16 != 2)
    {
      v15->ai_addrlen = 28;
      v19 = (char *)malloc_type_calloc(1uLL, 0x1CuLL, 0x1234816FuLL);
      *v19 = v11->ai_addrlen;
      v19[1] = 30;
      *(_OWORD *)(v19 + 8) = *(_OWORD *)v5->h_addr_list[v14];
      goto LABEL_18;
    }
    v17 = *(_DWORD *)v5->h_addr_list[v14];
    if (v17 != -1)
    {
      v15->ai_addrlen = 16;
      v19 = (char *)malloc_type_calloc(1uLL, 0x10uLL, 0xFBAA4E9BuLL);
      *v19 = v11->ai_addrlen;
      v19[1] = 2;
      *((_DWORD *)v19 + 1) = v17;
LABEL_18:
      v11->ai_addr = (sockaddr *)v19;
      v11->ai_canonname = strdup(v5->h_name);
      v9 = v14 + 1;
      v10 = 1;
      if (v5->h_addr_list[v14 + 1])
        goto LABEL_9;
      goto LABEL_21;
    }
    free(v15);
    v18 = (uint64_t)&v5->h_addr_list[v14++];
    v13 = v8;
  }
  while (*(_QWORD *)(v18 + 8));
  if ((v10 & 1) == 0)
  {
    if (v8)
      freeaddrinfo(v8);
    goto LABEL_26;
  }
LABEL_21:
  freehostent(v5);
  if (!v8)
    return 0;
  v20 = -[NSURLHostNameAddressInfo _initWithAddressInfo:]([NSURLHostNameAddressInfo alloc], "_initWithAddressInfo:", v8);
  v5 = v20;
  if (v20)
  {
    v21 = v20;
    objc_msgSend((id)_MergedGlobals_125, "lock");
    objc_msgSend((id)qword_1ECD0A238, "removeObjectForKey:", a1);
    objc_msgSend((id)qword_1ECD0A238, "setObject:forKey:", v5, a1);
    objc_msgSend((id)_MergedGlobals_125, "unlock");
  }
  return v5;
}

uint64_t _hash_compare(_QWORD *a1, _QWORD *a2)
{
  unsigned int v2;

  if (*a1 >= *a2)
    v2 = 0;
  else
    v2 = -1;
  if (*a1 > *a2)
    return 1;
  else
    return v2;
}

uint64_t NSURLLocalizedString(const char *a1)
{
  void *v2;
  CFStringRef v3;
  uint64_t v4;

  v2 = (void *)_NSFoundationBundle();
  v3 = CFStringCreateWithCStringNoCopy(0, a1, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v4 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, 0, CFSTR("URL"));
  CFRelease(v3);
  return v4;
}

unint64_t escapeChars(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;

  v3 = (unint64_t)&a1[a2];
  if (a2 >= 1)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if ((v5 - 127) > 0xFFFFFFA1)
      {
        ++v4;
      }
      else
      {
        memmove(v4 + 3, v4 + 1, v3 - (_QWORD)v4);
        *v4 = 37;
        v4[1] = a0123456789abcd[v5 >> 4];
        v4[2] = a0123456789abcd[v5 & 0xF];
        v3 += 2;
        v4 += 3;
      }
    }
    while ((unint64_t)v4 < v3);
  }
  return v3 - (_QWORD)a1;
}

void _NSUserDefaults_Log_Nonsensical_Suites(uint64_t a1)
{
  _QWORD v1[6];

  v1[5] = *MEMORY[0x1E0C80C00];
  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = ___NSUserDefaults_Log_Nonsensical_Suites_block_invoke;
  v1[3] = &unk_1E0F4D2D8;
  v1[4] = a1;
  if (_NSUserDefaults_Log_Nonsensical_Suites_onceToken != -1)
    dispatch_once(&_NSUserDefaults_Log_Nonsensical_Suites_onceToken, v1);
}

uint64_t NSOpenStepDirectoryForUser()
{
  return 0;
}

uint64_t findUnit(uint64_t *a1, double a2)
{
  char *v4;
  uint64_t i;
  double v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v4 = (char *)malloc_type_malloc(0x40uLL, 0x1000040451B5BE8uLL);
  for (i = 0; i != 64; i += 16)
  {
    v6 = convertUnitFromMeters(*a1, a2);
    v7 = &v4[i];
    *(double *)v7 = v6;
    v8 = *a1++;
    *((_QWORD *)v7 + 1) = v8;
  }
  qsort(v4, 4uLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))compare);
  v9 = 0;
  do
  {
    v10 = v9 + 16;
    if (*(double *)&v4[v9] > 1.0)
      break;
    v11 = v9 == 48;
    v9 += 16;
  }
  while (!v11);
  v12 = *(_QWORD *)&v4[v10 - 8];
  free(v4);
  return v12;
}

double convertUnitFromMeters(uint64_t a1, double a2)
{
  double v2;
  double v3;
  double v4;

  v2 = 0.0;
  switch(a1)
  {
    case 8:
      v4 = 0.001;
      goto LABEL_9;
    case 9:
      v4 = 0.01;
      goto LABEL_9;
    case 10:
    case 12:
    case 13:
      return v2;
    case 11:
      return a2;
    case 14:
      v4 = 1000.0;
LABEL_9:
      v2 = a2 / v4;
      break;
    default:
      switch(a1)
      {
        case 1281:
          v3 = 39.3701;
          goto LABEL_13;
        case 1282:
          v3 = 3.28084;
          goto LABEL_13;
        case 1283:
          v3 = 1.0936;
          goto LABEL_13;
        case 1284:
          v3 = 0.00062137;
LABEL_13:
          v2 = a2 * v3;
          break;
        default:
          return v2;
      }
      break;
  }
  return v2;
}

uint64_t compare(double *a1, double *a2)
{
  unsigned int v2;

  if (*a1 >= *a2)
    v2 = 0;
  else
    v2 = -1;
  if (*a1 > *a2)
    return 1;
  else
    return v2;
}

NSString *_stringFromEdgeInsets(void *a1)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 0u;
  v3 = 0u;
  objc_msgSend(a1, "getValue:", &v2);
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("{%.*g, %.*g, %.*g, %.*g}"), 17, (_QWORD)v2, 17, *((_QWORD *)&v2 + 1), 17, (_QWORD)v3, 17, *((_QWORD *)&v3 + 1));
}

uint64_t sub_181FB5854()
{
  return 0;
}

void sub_181FB59E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x181FB59B0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_181FB5CAC()
{
  uint64_t v0;

  return v0;
}

void sub_181FB76E0()
{
  __break(1u);
}

void sub_181FB7738(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181FB7744(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x181FB7750);
}

void sub_181FB7888(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x181FB77FCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_181FB78B4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB78D8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB78FC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB7920()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB7944()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB7968()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB798C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB79B0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB79D4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB79F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB7A1C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB7A40()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB7A64()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB7A88()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB7AAC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FB7B6C()
{
  return 0;
}

uint64_t mungeUnionsAndStructures(unsigned __int8 **a1)
{
  unsigned __int8 *i;
  unsigned int v2;
  unsigned __int8 *v3;
  char v4;
  char v5;

  for (i = *a1; ; i = v3 + 1)
  {
    v2 = *i;
    if (v2 > 0x7A)
      break;
    v3 = i;
    if (v2 == 40)
    {
      while ((_BYTE)v2)
      {
        if (v2 == 61)
          goto LABEL_18;
        v4 = *++v3;
        LOBYTE(v2) = v4;
        if (v4 == 41)
          goto LABEL_17;
      }
      return 0;
    }
    if (v2 != 41)
      goto LABEL_20;
LABEL_17:
    v3 = i;
LABEL_18:
    ;
  }
  if (v2 == 123)
  {
    v3 = i;
    while ((_BYTE)v2)
    {
      if (v2 == 61)
        goto LABEL_18;
      v5 = *++v3;
      LOBYTE(v2) = v5;
      if (v5 == 125)
        goto LABEL_17;
    }
    return 0;
  }
  if (v2 == 125)
    goto LABEL_17;
LABEL_20:
  *a1 = i;
  return 1;
}

uint64_t updateOffsetsForPosition(uint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int64x2_t v22;

  if (a3 < 1 || a4 <= 0)
    goto LABEL_47;
  v6 = *a5;
  v5 = a5[1];
  v7 = a5[2];
  v8 = (uint64_t)a5[3];
  v9 = (uint64_t)a5[4];
  v10 = (uint64_t)a5[5];
  if (*a5 == (unsigned __int8 *)0x7FFFFFFFFFFFFFFFLL
    || v5 == (unsigned __int8 *)0x7FFFFFFFFFFFFFFFLL
    || v7 == (unsigned __int8 *)0x7FFFFFFFFFFFFFFFLL
    || v8 == 0x7FFFFFFFFFFFFFFFLL
    || v9 < 1
    || v10 <= 0)
  {
    v5 = 0;
    v7 = 0;
    v8 = 0;
    v6 = 0;
    *(_OWORD *)a5 = 0u;
    *((_OWORD *)a5 + 1) = 0u;
    v9 = 1;
    *((int64x2_t *)a5 + 2) = vdupq_n_s64(1uLL);
    v10 = 1;
  }
  if ((uint64_t)v6 >= (uint64_t)a2)
  {
LABEL_47:
    v22 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(int64x2_t *)a5 = v22;
    *((int64x2_t *)a5 + 1) = v22;
    a5[4] = (unsigned __int8 *)a3;
    a5[5] = (unsigned __int8 *)a4;
    return result;
  }
  v16 = (char *)&v6[result];
  while (1)
  {
    v17 = (unsigned __int8 *)&v16[-result];
    if (&v16[-result] == (char *)v7)
    {
      v18 = *v16;
      v19 = trailingBytesForUTF8[v18];
      v5 += v8;
      v8 = v18 < 0xF0 ? 1 : 2;
      v7 += v19 + 1;
      if (v19 == -1)
        v8 = 0;
    }
    if (v9 != a3)
    {
      v20 = a2 - v17;
      if (v20)
      {
        v21 = *v16;
        if (v21 == 10)
        {
          v20 = 1;
        }
        else if (v21 == 13)
        {
          if (v20 != 1)
          {
            if (v16[1] == 10)
              v20 = 2;
            else
              v20 = 1;
          }
        }
        else
        {
          v20 = 0;
        }
      }
      if (v20)
      {
        ++v9;
        v10 = 1;
      }
      else
      {
        ++v10;
      }
      if (!v20)
        v20 = 1;
      goto LABEL_46;
    }
    if (v10 == a4)
      break;
    ++v10;
    v20 = 1;
    v9 = a3;
LABEL_46:
    v16 += v20;
    if (v16 >= (char *)&a2[result])
      goto LABEL_47;
  }
  a5[4] = (unsigned __int8 *)a3;
  a5[5] = (unsigned __int8 *)a4;
  *a5 = v17;
  a5[1] = v5;
  a5[2] = v7;
  a5[3] = (unsigned __int8 *)v8;
  return result;
}

uint64_t __attributesFromKnownAttributeKeys_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v6 = +[_NSAttributeDescriptor descriptorForAttributeKey:](_NSAttributeDescriptor, "descriptorForAttributeKey:", a2);
  if (v6)
  {
    v7 = v6;
    result = objc_msgSend(v6, "attributeValueFromValue:", a3);
    if (!result)
      return result;
    v9 = result;
    v10 = *(void **)(a1 + 32);
    v11 = objc_msgSend(v7, "name");
    v12 = v10;
    v13 = v9;
  }
  else
  {
    v12 = *(void **)(a1 + 32);
    v13 = a3;
    v11 = a2;
  }
  return objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, v11);
}

uint64_t compare_0(double *a1, double *a2)
{
  unsigned int v2;

  if (*a1 >= *a2)
    v2 = 0;
  else
    v2 = -1;
  if (*a1 > *a2)
    return 1;
  else
    return v2;
}

uint64_t sub_181FBA6DC()
{
  return 0;
}

uint64_t sub_181FBA71C()
{
  return 0;
}

uint64_t sub_181FBA75C()
{
  return 0;
}

uint64_t sub_181FBA79C()
{
  return 0;
}

double sub_181FBA7DC()
{
  return 0.0;
}

void sub_181FBB0B8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t initkUTTypeURL_2()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary_2();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeURL");
  if (!v1)
    __assert_rtn("initkUTTypeURL", "NSURL+NSItemProvider.m", 18, "constant");
  result = *v1;
  constantkUTTypeURL_2 = result;
  _MergedGlobals_88 = kUTTypeURLFunction_2;
  return result;
}

void *MobileCoreServicesLibrary_2()
{
  void *result;

  result = (void *)MobileCoreServicesLibrary_frameworkLibrary_3;
  if (!MobileCoreServicesLibrary_frameworkLibrary_3)
  {
    result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_3 = (uint64_t)result;
    if (!result)
      __assert_rtn("MobileCoreServicesLibrary", "NSURL+NSItemProvider.m", 17, "frameworkLibrary");
  }
  return result;
}

uint64_t kUTTypeURLFunction_2()
{
  return constantkUTTypeURL_2;
}

uint64_t initUTTypeConformsTo_2(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t (*v5)();

  v4 = MobileCoreServicesLibrary_2();
  v5 = (uint64_t (*)())dlsym(v4, "UTTypeConformsTo");
  off_1ECD04D58 = v5;
  if (!v5)
    __assert_rtn("initUTTypeConformsTo", "NSURL+NSItemProvider.m", 20, "softLinkUTTypeConformsTo");
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initkUTTypeFileURL_1()
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  v0 = MobileCoreServicesLibrary_2();
  v1 = (uint64_t *)dlsym(v0, "kUTTypeFileURL");
  if (!v1)
    __assert_rtn("initkUTTypeFileURL", "NSURL+NSItemProvider.m", 19, "constant");
  result = *v1;
  constantkUTTypeFileURL_1 = result;
  off_1ECD04D50 = kUTTypeFileURLFunction_1;
  return result;
}

uint64_t kUTTypeFileURLFunction_1()
{
  return constantkUTTypeFileURL_1;
}

void _NSSetupLibXML()
{
  if (_NSSetupLibXML_xmlInitGuard != -1)
    dispatch_once(&_NSSetupLibXML_xmlInitGuard, &__block_literal_global_56);
}

uint64_t _xmlExternalEntityLoader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;

  v6 = +[NSXMLParser currentParser](NSXMLParser, "currentParser");
  if (!v6)
    return __originalLoader(a1, a2, a3);
  if (v6[120])
    return 0;
  return objc_msgSend(v6, "_xmlExternalEntityWithURL:identifier:context:originalLoaderFunction:", a1, a2, a3, __originalLoader);
}

NSError *_NSErrorFromXMLError(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSString *v5;
  NSString *v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 72))
  {
    v4 = 0;
  }
  else
  {
    v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    if (!*(_BYTE *)(a2 + 72))
    {
      objc_msgSend(v4, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)), CFSTR("NSXMLParserErrorLineNumber"));
      objc_msgSend(v4, "setObject:forKey:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68)), CFSTR("NSXMLParserErrorColumn"));
      if (*(_QWORD *)(a1 + 8))
      {
        v5 = -[NSString initWithUTF8String:]([NSString alloc], "initWithUTF8String:", *(_QWORD *)(a1 + 8));
        if (v5)
        {
          v6 = v5;
          objc_msgSend(v4, "setObject:forKey:", v5, CFSTR("NSXMLParserErrorMessage"));

        }
      }
    }
  }
  if (*(_BYTE *)(a2 + 72))
    v7 = 512;
  else
    v7 = *(int *)(a1 + 4);
  return +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSXMLParserErrorDomain"), v7, v4);
}

void _structuredErrorFunc(uint64_t a1, uint64_t a2)
{
  _reportError(a2, a1, 1);
}

void _internalSubset2(uint64_t a1, const xmlChar *a2, const xmlChar *a3, const xmlChar *a4)
{
  xmlSAX2InternalSubset(*(void **)(a1 + 32), a2, a3, a4);
}

BOOL _isStandalone(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 76) == 1;
}

BOOL _hasInternalSubset2(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 80) != 0;
}

BOOL _hasExternalSubset2(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 88) != 0;
}

xmlEntityPtr _getEntity(uint64_t a1, xmlChar *a2)
{
  xmlEntityPtr result;
  uint64_t v5;
  void *v6;
  void *Value;
  NSString *v8;
  const char *v9;
  const UInt8 *v10;
  int v11;

  if (a1 && *(_BYTE *)(a1 + 120))
    return 0;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_msgSend((id)a1, "delegate");
  result = xmlGetPredefinedEntity(a2);
  if (!result)
  {
    result = xmlSAX2GetEntity((void *)v5, a2);
    if (result)
    {
      if (*(_DWORD *)(v5 + 272) == 7)
        *(_QWORD *)(v5 + 424) = 1;
    }
    else
    {
      if ((objc_opt_respondsToSelector() & 1) == 0)
        return 0;
      if (a2)
      {
        Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
        if (!Value)
          Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a2);
      }
      else
      {
        Value = 0;
      }
      result = (xmlEntityPtr)objc_msgSend(v6, "parser:resolveExternalEntityName:systemID:", a1, Value, 0);
      if (result)
      {
        if (*(_QWORD *)(v5 + 16))
        {
          v8 = -[NSString initWithData:encoding:]([NSString alloc], "initWithData:encoding:", result, 4);
          v9 = -[NSString UTF8String](v8, "UTF8String");
          if (v9)
          {
            v10 = (const UInt8 *)v9;
            v11 = strlen(v9);
            _characters(a1, v10, v11);
          }

        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t _entityDecl(uint64_t result, xmlChar *a2, int a3, xmlChar *a4, xmlChar *a5, xmlChar *a6)
{
  uint64_t v11;
  void *v12;
  void *Value;
  void *v14;
  void *v15;
  void *v16;

  v11 = result;
  if (result && *(_BYTE *)(result + 120))
    return result;
  v12 = (void *)objc_msgSend((id)result, "delegate");
  xmlSAX2EntityDecl(*(void **)(v11 + 32), a2, a3, a4, a5, a6);
  if (a6)
  {
    Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 64), a6);
    if (!Value)
      Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v11 + 64), (char *)a6);
    if (a2)
      goto LABEL_8;
  }
  else
  {
    Value = 0;
    if (a2)
    {
LABEL_8:
      v14 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 64), a2);
      if (!v14)
        v14 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v11 + 64), (char *)a2);
      goto LABEL_12;
    }
  }
  v14 = 0;
LABEL_12:
  if (objc_msgSend(Value, "length"))
  {
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
      return objc_msgSend(v12, "parser:foundInternalEntityDeclarationWithName:value:", v11, v14, Value);
  }
  else
  {
    result = objc_msgSend((id)v11, "shouldResolveExternalEntities");
    if ((_DWORD)result)
    {
      result = objc_opt_respondsToSelector();
      if ((result & 1) != 0)
      {
        if (a4)
        {
          v15 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 64), a4);
          if (!v15)
            v15 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v11 + 64), (char *)a4);
        }
        else
        {
          v15 = 0;
        }
        if (a5)
        {
          v16 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 64), a5);
          if (!v16)
            v16 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v11 + 64), (char *)a5);
        }
        else
        {
          v16 = 0;
        }
        return objc_msgSend(v12, "parser:foundExternalEntityDeclarationWithName:publicID:systemID:", v11, v14, v15, v16);
      }
    }
  }
  return result;
}

uint64_t _notationDecl(uint64_t result, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void *v8;
  void *Value;
  void *v10;
  void *v11;

  v7 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    v8 = (void *)objc_msgSend((id)result, "delegate");
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      if (a2)
      {
        Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), a2);
        if (!Value)
          Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)a2);
        if (a3)
        {
LABEL_8:
          v10 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), a3);
          if (!v10)
            v10 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)a3);
          if (a4)
            goto LABEL_11;
          goto LABEL_16;
        }
      }
      else
      {
        Value = 0;
        if (a3)
          goto LABEL_8;
      }
      v10 = 0;
      if (a4)
      {
LABEL_11:
        v11 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), a4);
        if (!v11)
          v11 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)a4);
        return objc_msgSend(v8, "parser:foundNotationDeclarationWithName:publicID:systemID:", v7, Value, v10, v11);
      }
LABEL_16:
      v11 = 0;
      return objc_msgSend(v8, "parser:foundNotationDeclarationWithName:publicID:systemID:", v7, Value, v10, v11);
    }
  }
  return result;
}

void _attributeDecl(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, xmlEnumeration *a7)
{
  void *v12;
  void *Value;
  void *v14;
  void *v15;

  if (!a1 || !*(_BYTE *)(a1 + 120))
  {
    v12 = (void *)objc_msgSend((id)a1, "delegate");
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
LABEL_17:
      xmlFreeEnumeration(a7);
      return;
    }
    if (a2)
    {
      Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
      if (!Value)
        Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a2);
      if (a3)
      {
LABEL_8:
        v14 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a3);
        if (!v14)
          v14 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a3);
        if (a6)
          goto LABEL_11;
        goto LABEL_15;
      }
    }
    else
    {
      Value = 0;
      if (a3)
        goto LABEL_8;
    }
    v14 = 0;
    if (a6)
    {
LABEL_11:
      v15 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a6);
      if (!v15)
        v15 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a6);
      goto LABEL_16;
    }
LABEL_15:
    v15 = 0;
LABEL_16:
    objc_msgSend(v12, "parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:", a1, v14, Value, &stru_1E0F56070, v15);
    goto LABEL_17;
  }
}

uint64_t _elementDecl(uint64_t result, void *a2)
{
  uint64_t v3;
  void *v4;
  void *Value;

  v3 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    v4 = (void *)objc_msgSend((id)result, "delegate");
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      if (a2)
      {
        Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 64), a2);
        if (!Value)
          Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v3 + 64), (char *)a2);
      }
      else
      {
        Value = 0;
      }
      return objc_msgSend(v4, "parser:foundElementDeclarationWithName:model:", v3, Value, &stru_1E0F56070);
    }
  }
  return result;
}

uint64_t _unparsedEntityDecl(uint64_t result, xmlChar *a2, xmlChar *a3, xmlChar *a4, xmlChar *a5)
{
  uint64_t v9;
  void *v10;
  void *Value;
  void *v12;
  void *v13;
  void *v14;

  v9 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    v10 = (void *)objc_msgSend((id)result, "delegate");
    xmlSAX2UnparsedEntityDecl(*(void **)(v9 + 32), a2, a3, a4, a5);
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      if (a2)
      {
        Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a2);
        if (!Value)
          Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v9 + 64), (char *)a2);
        if (a3)
        {
LABEL_8:
          v12 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a3);
          if (!v12)
            v12 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v9 + 64), (char *)a3);
          if (a4)
          {
LABEL_11:
            v13 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a4);
            if (!v13)
              v13 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v9 + 64), (char *)a4);
            if (a5)
              goto LABEL_14;
            goto LABEL_20;
          }
LABEL_19:
          v13 = 0;
          if (a5)
          {
LABEL_14:
            v14 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a5);
            if (!v14)
              v14 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v9 + 64), (char *)a5);
            return objc_msgSend(v10, "parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:", v9, Value, v12, v13, v14);
          }
LABEL_20:
          v14 = 0;
          return objc_msgSend(v10, "parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:", v9, Value, v12, v13, v14);
        }
      }
      else
      {
        Value = 0;
        if (a3)
          goto LABEL_8;
      }
      v12 = 0;
      if (a4)
        goto LABEL_11;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t _processingInstruction(uint64_t result, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  void *Value;
  void *v8;

  v5 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    v6 = (void *)objc_msgSend((id)result, "delegate");
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      if (a2)
      {
        Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 64), a2);
        if (!Value)
          Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v5 + 64), (char *)a2);
        if (a3)
          goto LABEL_8;
      }
      else
      {
        Value = 0;
        if (a3)
        {
LABEL_8:
          v8 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 64), a3);
          if (!v8)
            v8 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v5 + 64), (char *)a3);
          return objc_msgSend(v6, "parser:foundProcessingInstructionWithTarget:data:", v5, Value, v8);
        }
      }
      v8 = 0;
      return objc_msgSend(v6, "parser:foundProcessingInstructionWithTarget:data:", v5, Value, v8);
    }
  }
  return result;
}

void _errorCallback(uint64_t a1)
{
  xmlErrorPtr LastError;

  LastError = xmlCtxtGetLastError(*(void **)(a1 + 32));
  _reportError((uint64_t)LastError, a1, 0);
}

void _cdataBlock(_BYTE *a1, const UInt8 *a2, int a3)
{
  void *v6;
  id v7;

  if (!a1 || !a1[120])
  {
    v6 = (void *)objc_msgSend(a1, "delegate");
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v7 = (id)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a2, a3);
      objc_msgSend(v6, "parser:foundCDATA:", a1, v7);

    }
    else
    {
      _characters((uint64_t)a1, a2, a3);
    }
  }
}

void _externalSubset2(uint64_t a1, const xmlChar *a2, const xmlChar *a3, const xmlChar *a4)
{
  xmlSAX2ExternalSubset(*(void **)(a1 + 32), a2, a3, a4);
}

void *_cachedColonSeparatedStringFromPrefixAndSuffix(const void *a1, size_t a2, const void *a3, size_t a4, uint64_t a5)
{
  size_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *Value;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v10 = a2 + a4 + 2;
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v16 - v11;
  if (v10 >= 0x101)
    v12 = (char *)malloc_type_malloc(v10, 0x100004077774924uLL);
  memmove(v12, a1, a2);
  v13 = &v12[a2];
  *v13++ = 58;
  memmove(v13, a3, a4);
  v13[a4] = 0;
  Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a5 + 64), v12);
  if (!Value)
    Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a5 + 64), v12);
  if (v10 >= 0x101)
    free(v12);
  return Value;
}

void _reportError(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  void *v7;
  NSError *v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 3)
    {
      v6 = objc_msgSend((id)a2, "delegate");
      if (!*(_BYTE *)(a2 + 120))
      {
        v7 = (void *)v6;
        v8 = _NSErrorFromXMLError(a1, a2);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v7, "parser:parseErrorOccurred:", a2, v8);
        objc_msgSend((id)a2, "_setExpandedParserError:", v8);
        if ((objc_msgSend((id)a2, "shouldContinueAfterFatalError") & 1) == 0
          && *(_DWORD *)(a1 + 16) == 3
          && !*(_BYTE *)(a2 + 72))
        {
          if (a3 && dyld_program_sdk_at_least())
            *(_BYTE *)(a2 + 120) = 1;
          else
            xmlStopParser(*(xmlParserCtxtPtr *)(a2 + 32));
        }
      }
    }
  }
}

void sub_181FBCDAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _localeDidChange()
{
  const void *v0;
  unint64_t v1;

  v0 = (const void *)qword_1ECD0A2B8;
  do
  {
    v1 = __ldaxr((unint64_t *)&qword_1ECD0A2B8);
    if ((const void *)v1 != v0)
    {
      __clrex();
      return;
    }
  }
  while (__stlxr(0, (unint64_t *)&qword_1ECD0A2B8));
  CFRelease(+[_NSPredicateOperatorUtilities retainedLocale](_NSPredicateOperatorUtilities, "retainedLocale"));
  if (v0)
  {
    if (v0 != (const void *)qword_1ECD0A2B8)
      CFRelease(v0);
  }
}

void sub_181FBD084(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  int v3;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    if (v3)
      free(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_181FBE280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      NSLog((NSString *)CFSTR("THIS SHOULD NOT HAVE HAPPENED: %@"));
      objc_exception_rethrow();
    }
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v9);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_181FBE8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  if (a2)
  {
    if (a2 == 1)
    {
      objc_begin_catch(exception_object);
      NSLog((NSString *)CFSTR("THIS SHOULD NOT HAVE HAPPENED: %@"));
      objc_exception_rethrow();
    }
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v9);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_181FBEAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181FBF290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _Unwind_Resume(exception_object);
}

void sub_181FBF88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSConstantValueExpression *HandleUnaryMinus(void *a1)
{
  void *v2;
  int v3;
  NSNumber *v4;
  uint64_t v5;
  NSNumber *v6;
  float v7;
  double v8;
  uint64_t v9;
  void *v10;
  NSConstantValueExpression *v11;
  NSNumber *v13;
  NSConstantValueExpression *v14;
  void *v15;
  NSFunctionExpression *FunctionExpression;
  NSNumber *v17;
  double v18;

  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_20;
  v2 = (void *)objc_msgSend(a1, "constantValue");
  if (!_NSIsNSNumber())
    goto LABEL_20;
  v3 = *(char *)objc_msgSend(v2, "objCType");
  if (v3 <= 80)
  {
    if (v3 == 67 || v3 == 73 || v3 == 76)
      goto LABEL_16;
    goto LABEL_22;
  }
  if ((v3 - 99) > 0x10)
  {
LABEL_14:
    if (v3 == 81 || v3 == 83)
    {
LABEL_16:
      v4 = [NSNumber alloc];
      v5 = objc_msgSend(v2, "unsignedLongLongValue");
      goto LABEL_17;
    }
LABEL_22:
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("Unrecognized numeric type while processing unary minus syntax."), 0));
  }
  if (((1 << (v3 - 99)) & 0x14241) != 0)
  {
    v4 = [NSNumber alloc];
    v5 = objc_msgSend(v2, "longLongValue");
LABEL_17:
    v9 = -[NSNumber initWithLongLong:](v4, "initWithLongLong:", -v5);
    goto LABEL_18;
  }
  if (v3 != 100)
  {
    if (v3 == 102)
    {
      v6 = [NSNumber alloc];
      objc_msgSend(v2, "floatValue");
      *(float *)&v8 = 0.0 - v7;
      v9 = -[NSNumber initWithFloat:](v6, "initWithFloat:", v8);
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  v17 = [NSNumber alloc];
  objc_msgSend(v2, "doubleValue");
  v9 = -[NSNumber initWithDouble:](v17, "initWithDouble:", 0.0 - v18);
LABEL_18:
  v10 = (void *)v9;
  if (v9)
  {
    v11 = -[NSConstantValueExpression initWithObject:]([NSConstantValueExpression alloc], "initWithObject:", v9);

    return v11;
  }
LABEL_20:
  v13 = -[NSNumber initWithLongLong:]([NSNumber alloc], "initWithLongLong:", 0);
  v14 = -[NSConstantValueExpression initWithObject:]([NSConstantValueExpression alloc], "initWithObject:", v13);
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v14, a1, 0);
  FunctionExpression = CreateFunctionExpression((NSString *)CFSTR("from:subtract:"), v15);

  return (NSConstantValueExpression *)FunctionExpression;
}

NSFunctionExpression *HandleCastingOperation(void *a1)
{
  void *v2;
  void *v3;

  if ((unint64_t)objc_msgSend(a1, "count") <= 1)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("CAST() requires two args."), 0));
  v2 = (void *)objc_msgSend(a1, "objectAtIndex:", 0);
  v3 = (void *)objc_msgSend(a1, "objectAtIndex:", 1);
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_opt_isKindOfClass() & 1) != 0
    && (objc_msgSend((id)objc_msgSend(v3, "constantValue"), "isEqual:", CFSTR("Class")) & 1) == 0)
  {
    return (NSFunctionExpression *)-[NSConstantValueExpression initWithObject:]([NSConstantValueExpression alloc], "initWithObject:", +[_NSPredicateUtilities castObject:toType:](_NSPredicateUtilities, "castObject:toType:", objc_msgSend(v2, "constantValue"), objc_msgSend((id)objc_msgSend(v3, "constantValue"), "description")));
  }
  else
  {
    return CreateFunctionExpression((NSString *)CFSTR("castObject:toType:"), a1);
  }
}

NSFunctionExpression *CreateUserFunctionExpression(void *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSString *v6;
  SEL v7;
  void *v9;
  uint64_t v10;
  NSString *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSString *v16;

  v2 = objc_msgSend(a1, "count");
  if (v2 <= 1)
  {
    v9 = (void *)MEMORY[0x1E0C99DA0];
    v10 = *MEMORY[0x1E0C99778];
    v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("User-defined function expressions must have at least a target and a selector; got (%@)"),
            a1);
    v12 = v9;
    v13 = v10;
    goto LABEL_11;
  }
  v3 = v2;
  v4 = objc_msgSend(a1, "objectAtIndex:", 0);
  v5 = objc_msgSend(a1, "objectAtIndex:", 1);
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v14 = (void *)MEMORY[0x1E0C99DA0];
    v15 = *MEMORY[0x1E0C99778];
    v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("User-defined function expressions must have a predefinedSelector; got (%@)"),
            v5);
LABEL_9:
    v11 = v16;
    v12 = v14;
    v13 = v15;
    goto LABEL_11;
  }
  v6 = (NSString *)objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", 1), "expressionValueWithObject:context:", 0, 0);
  if ((_NSIsNSString() & 1) == 0)
  {
    v14 = (void *)MEMORY[0x1E0C99DA0];
    v15 = *MEMORY[0x1E0C99778];
    v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Can't get selector from non-string (%@)"), v6);
    goto LABEL_9;
  }
  v7 = NSSelectorFromString(v6);
  if (!v7)
  {
    v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unable to parse function name '%@' into supported selector"), v6);
    v12 = (void *)MEMORY[0x1E0C99DA0];
    v13 = *MEMORY[0x1E0C99778];
LABEL_11:
    objc_exception_throw((id)objc_msgSend(v12, "exceptionWithName:reason:userInfo:", v13, v11, 0));
  }
  return -[NSFunctionExpression initWithExpressionType:operand:selector:argumentArray:]([NSFunctionExpression alloc], "initWithExpressionType:operand:selector:argumentArray:", 4, v4, v7, objc_msgSend(a1, "subarrayWithRange:", 2, v3 - 2));
}

NSComparisonPredicate *HandleBetweenPredicate(uint64_t a1, uint64_t a2)
{
  id v4;
  NSComparisonPredicate *v5;

  v4 = +[NSPredicateOperator _newOperatorWithType:modifier:options:](NSPredicateOperator, "_newOperatorWithType:modifier:options:", 100, 0, 0);
  v5 = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]([NSComparisonPredicate alloc], "initWithPredicateOperator:leftExpression:rightExpression:", v4, a1, a2);

  return v5;
}

NSConstantValueExpression *expressionByReplacingArray(void *a1)
{
  uint64_t v2;
  NSConstantValueExpression *v3;

  if (objc_msgSend(a1, "expressionType"))
    return (NSConstantValueExpression *)a1;
  v2 = objc_msgSend(a1, "constantValue");
  if (!_NSIsNSArray())
    return (NSConstantValueExpression *)a1;
  v3 = -[NSConstantValueExpression initWithObject:]([NSConstantValueExpression alloc], "initWithObject:", v2);

  return v3;
}

NSSetExpression *CreateSetExpression(void *a1, uint64_t a2, void *a3)
{
  NSConstantValueExpression *v5;
  NSConstantValueExpression *v6;
  NSSetExpression *v7;

  v5 = expressionByReplacingArray(a1);
  v6 = expressionByReplacingArray(a3);
  if ((unint64_t)(a2 - 5) > 2)
    v7 = 0;
  else
    v7 = -[NSSetExpression initWithType:leftExpression:rightExpression:]([NSSetExpression alloc], "initWithType:leftExpression:rightExpression:", a2, v5, v6);

  if (!v7)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown expression type %ld"), a2), 0));
  return v7;
}

uint64_t CreateFetchExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v6;

  v6 = objc_lookUpClass("NSFetchRequestExpression");
  if (!v6)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("Can't find class for NSFetchRequestExpression"), 0));
  return objc_msgSend([v6 alloc], "initForFetch:context:countOnly:", a1, a2, a3 != 0);
}

__objc2_class **_popFront(uint64_t a1)
{
  id v2;
  int updated;

  if (!*(_DWORD *)(a1 + 64))
    return &_emptyValue;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  v2 = (id)objc_msgSend(*(id *)(a1 + 136), "objectAtIndex:", 0);
  objc_msgSend(*(id *)(a1 + 136), "removeObjectAtIndex:", 0);
  updated = updateState(a1);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 72));
  if (updated != 2)
  {
    if (updated != 1 || !objc_msgSend((id)a1, "bufferFullHandler"))
      return (__objc2_class **)v2;
    goto LABEL_8;
  }
  if (objc_msgSend((id)a1, "bufferFullHandler"))
LABEL_8:
    (*(void (**)(void))(objc_msgSend((id)a1, "bufferFullHandler") + 16))();
  return (__objc2_class **)v2;
}

uint64_t updateState(uint64_t a1)
{
  int v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 2)
  {
    v5 = objc_msgSend(*(id *)(a1 + 136), "count");
    if (v5)
    {
      v6 = v5;
      if (_pressureSensitiveMaxCount_onceToken != -1)
        dispatch_once(&_pressureSensitiveMaxCount_onceToken, &__block_literal_global_58);
      objc_msgSend((id)a1, "isMemoryPressureSensitive");
      if (v6 >= *(_QWORD *)(a1 + 144))
        goto LABEL_26;
      *(_DWORD *)(a1 + 64) = 1;
      dispatch_resume(*(dispatch_object_t *)(a1 + 40));
      if (objc_msgSend((id)a1, "automaticallyEmitsObjects"))
        objc_msgSend((id)a1, "emitObject");
    }
    else
    {
      *(_DWORD *)(a1 + 64) = 0;
      dispatch_resume(*(dispatch_object_t *)(a1 + 40));
    }
    return 2;
  }
  if (v2 != 1)
  {
    if (v2)
      return 0;
    result = objc_msgSend(*(id *)(a1 + 136), "count");
    if (!result)
      return result;
    v4 = result;
    if (_pressureSensitiveMaxCount_onceToken != -1)
      dispatch_once(&_pressureSensitiveMaxCount_onceToken, &__block_literal_global_58);
    objc_msgSend((id)a1, "isMemoryPressureSensitive");
    if (v4 >= *(_QWORD *)(a1 + 144))
    {
      *(_DWORD *)(a1 + 64) = 2;
      dispatch_suspend(*(dispatch_object_t *)(a1 + 40));
    }
    else
    {
      *(_DWORD *)(a1 + 64) = 1;
    }
LABEL_26:
    result = objc_msgSend((id)a1, "automaticallyEmitsObjects");
    if (!(_DWORD)result)
      return result;
    objc_msgSend((id)a1, "emitObject");
    return 0;
  }
  result = objc_msgSend(*(id *)(a1 + 136), "count");
  if (!result)
  {
    *(_DWORD *)(a1 + 64) = 0;
    return result;
  }
  v7 = result;
  if (_pressureSensitiveMaxCount_onceToken != -1)
    dispatch_once(&_pressureSensitiveMaxCount_onceToken, &__block_literal_global_58);
  objc_msgSend((id)a1, "isMemoryPressureSensitive");
  if (v7 < *(_QWORD *)(a1 + 144))
    goto LABEL_26;
  *(_DWORD *)(a1 + 64) = 2;
  dispatch_suspend(*(dispatch_object_t *)(a1 + 40));
  if (objc_msgSend((id)a1, "automaticallyEmitsObjects"))
    objc_msgSend((id)a1, "emitObject");
  return 1;
}

uint64_t sub_181FC1304()
{
  return 0;
}

uint64_t sub_181FC137C()
{
  return 0;
}

uint64_t sub_181FC13F4()
{
  return 0;
}

void ___pressureSensitiveMaxCount_block_invoke()
{
  pressureSource = (uint64_t)dispatch_source_create(MEMORY[0x1E0C80DA8], 0, 2uLL, 0);
  dispatch_source_set_event_handler((dispatch_source_t)pressureSource, &__block_literal_global_63);
  dispatch_resume((dispatch_object_t)pressureSource);
}

void __setupPressureTracking_block_invoke()
{
  uintptr_t mask;

  mask = dispatch_source_get_mask((dispatch_source_t)pressureSource);
  if ((mask & 1) == 0)
    NSLog((NSString *)CFSTR("Unknown memory pressure status %lu"), mask);
}

uint64_t sub_181FC4F90()
{
  return 0;
}

uint64_t sub_181FC4FF8()
{
  void *v0;

  return 0;
}

uint64_t sub_181FC5034()
{
  return 0;
}

uint64_t sub_181FC506C()
{
  return 0;
}

void sub_181FC5388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FormatterCacheKeyCopy(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "copy");
}

uint64_t FormatterCacheKeyEqual(void *a1, void *a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "isEqual:", a2);
  if ((_DWORD)result)
  {
    result = objc_msgSend((id)objc_msgSend(a1, "decimalSeparator"), "isEqual:", objc_msgSend(a2, "decimalSeparator"));
    if ((_DWORD)result)
      return objc_msgSend((id)objc_msgSend(a1, "groupingSeparator"), "isEqual:", objc_msgSend(a2, "groupingSeparator"));
  }
  return result;
}

uint64_t FormatterCacheKeyHash(void *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "hash");
  v3 = objc_msgSend((id)objc_msgSend(a1, "decimalSeparator"), "hash") ^ v2;
  return v3 ^ objc_msgSend((id)objc_msgSend(a1, "groupingSeparator"), "hash");
}

void yy_fatal_error(const char *a1)
{
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s\n", a1);
  exit(2);
}

int *_qfqp2_init_buffer(uint64_t a1, FILE *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  _BOOL4 v9;
  int *result;

  v4 = *__error();
  v5 = yy_buffer_stack;
  if (a1)
  {
    *(_QWORD *)(a1 + 32) = 0;
    **(_BYTE **)(a1 + 8) = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 8) + 1) = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 48) = 1;
    *(_DWORD *)(a1 + 64) = 0;
    v6 = v5 ? *(_QWORD *)v5 : 0;
    if (v6 == a1)
    {
      v7 = *(uint64_t **)v5;
      yy_n_chars = *(_QWORD *)(*(_QWORD *)v5 + 32);
      yy_c_buf_p = v7[2];
      _qfqp2text = yy_c_buf_p;
      _qfqp2in = *v7;
      yy_hold_char = *(_BYTE *)yy_c_buf_p;
      *(_QWORD *)a1 = a2;
      *(_DWORD *)(a1 + 60) = 1;
      goto LABEL_9;
    }
  }
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 1;
  if (v5)
LABEL_9:
    v5 = *(_QWORD *)v5;
  if (v5 != a1)
    *(_QWORD *)(a1 + 52) = 1;
  if (a2)
  {
    v8 = fileno(a2);
    v9 = isatty(v8) > 0;
  }
  else
  {
    v9 = 0;
  }
  *(_DWORD *)(a1 + 44) = v9;
  result = __error();
  *result = v4;
  return result;
}

unint64_t NSOrthographyFlagsForScriptAndOrthographyIndexes(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;

  if ((unint64_t)(a1 - 32) < 0xFFFFFFFFFFFFFFE1)
    return 0;
  v6 = 0;
  if (a6 <= 0x1F && a6 - 11 >= 2 && a6 != 8 && a6 != a1 && a6 != 6)
  {
    if (a1 == 6 && !a2 || a1 == 8 && !a3 || a1 == 11 && !a4 || a1 == 12 && !a5)
      return 0;
    if (a2 >= 2)
    {
      if (a2 - 128 < 0xFFFFFFFFFFFFFF86)
        return 0;
      LODWORD(a2) = a2 - 4;
    }
    if (a3 >= 2)
    {
      if (a3 - 148 < 0xFFFFFFFFFFFFFFECLL)
        return 0;
      LOBYTE(a3) = a3 - 126;
    }
    if (a4 >= 2)
    {
      if (a4 - 188 < 0xFFFFFFFFFFFFFFE4)
        return 0;
      LOBYTE(a4) = a4 + 98;
    }
    if (a5 < 2)
      return ((_DWORD)a1 << 27) | ((a6 & 0x1F) << 22) | a2 | ((a3 & 0x1F) << 8) | ((a4 & 0x1F) << 13) | ((a5 & 0xF) << 18);
    if (a5 - 206 >= 0xFFFFFFFFFFFFFFF2)
    {
      LOBYTE(a5) = a5 + 66;
      return ((_DWORD)a1 << 27) | ((a6 & 0x1F) << 22) | a2 | ((a3 & 0x1F) << 8) | ((a4 & 0x1F) << 13) | ((a5 & 0xF) << 18);
    }
    return 0;
  }
  return v6;
}

unint64_t NSOrthographyGetScriptAndOrthographyIndexesForFlags(unint64_t result, _QWORD *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (a2)
    *a2 = result >> 27;
  if (a7)
    *a7 = (result >> 22) & 0x1F;
  if (a3)
  {
    v7 = result;
    if (result > 0x7BuLL)
      v7 = 1;
    if (v7 > 1)
      v7 += 4;
    *a3 = v7;
  }
  if (a4)
  {
    v8 = (result >> 8) & 0x1F;
    if (v8 > 0x15)
      v8 = 1;
    if (v8 > 1)
      v8 += 126;
    *a4 = v8;
  }
  if (a5)
  {
    v9 = (result >> 13) & 0x1F;
    if (v9 > 0x1D)
      v9 = 1;
    if (v9 > 1)
      v9 += 158;
    *a5 = v9;
  }
  if (a6)
  {
    v10 = (result >> 18) & 0xF;
    if (((result >> 18) & 0xE) != 0)
      v10 += 190;
    *a6 = v10;
  }
  return result;
}

uint64_t NSOrthographyFlagsForDominantScriptAndLanguageMap(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  uint64_t result;
  void *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  void *v31;
  _BYTE v32[128];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(a2, "objectForKey:", a1);
  v5 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("Latn"));
  v6 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("Cyrl"));
  v7 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("Arab"));
  v8 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("Deva"));
  v9 = objc_msgSend(&unk_1E0FCE860, "indexOfObject:", a1);
  if ((unint64_t)(v9 - 32) < 0xFFFFFFFFFFFFFFE1)
    return 0;
  v10 = v9;
  if (v4)
  {
    if (objc_msgSend(v4, "count") != 1)
      return 0;
  }
  if (v5 && objc_msgSend(v5, "count") != 1
    || v6 && objc_msgSend(v6, "count") != 1
    || v7 && objc_msgSend(v7, "count") != 1
    || v8 && objc_msgSend(v8, "count") != 1)
  {
    return 0;
  }
  v11 = (void *)objc_msgSend(v4, "objectAtIndex:", 0);
  if (!v11
    || v10 <= 0xC && ((1 << v10) & 0x1940) != 0
    || (result = objc_msgSend(v11, "isEqualToString:", NSOrthographyDefaultLanguageForScriptIndex(v10)), (_DWORD)result))
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v12 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v33, v32, 16);
    if (v12)
    {
      v13 = v12;
      v31 = v5;
      v28 = v7;
      v29 = v8;
      v30 = v10;
      v14 = 0;
      v15 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v34 != v15)
            objc_enumerationMutation(a2);
          v17 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
          if ((objc_msgSend(v17, "isEqualToString:", a1) & 1) == 0
            && (objc_msgSend(v17, "isEqualToString:", CFSTR("Latn")) & 1) == 0
            && (objc_msgSend(v17, "isEqualToString:", CFSTR("Cyrl")) & 1) == 0
            && (objc_msgSend(v17, "isEqualToString:", CFSTR("Arab")) & 1) == 0
            && (objc_msgSend(v17, "isEqualToString:", CFSTR("Deva")) & 1) == 0)
          {
            if (v14)
            {
              result = objc_msgSend(v17, "isEqualToString:", v14);
              if (!(_DWORD)result)
                return result;
            }
            else
            {
              v14 = v17;
            }
          }
        }
        v13 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v33, v32, 16);
      }
      while (v13);
      if (v14)
      {
        v19 = (void *)objc_msgSend(a2, "objectForKey:", v14);
        v20 = v19;
        v5 = v31;
        if (v19 && objc_msgSend(v19, "count") != 1)
          return 0;
        v21 = objc_msgSend(&unk_1E0FCE878, "indexOfObject:", v14);
        if ((unint64_t)(v21 - 32) < 0xFFFFFFFFFFFFFFE1)
          return 0;
        v22 = v21;
        v27 = (void *)objc_msgSend(v20, "objectAtIndex:", 0);
        if (v27)
        {
          result = objc_msgSend(v27, "isEqualToString:", NSOrthographyDefaultLanguageForScriptIndex(v22));
          v8 = v29;
          v10 = v30;
          v7 = v28;
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          v8 = v29;
          v10 = v30;
          v7 = v28;
        }
      }
      else
      {
        v22 = 0;
        v8 = v29;
        v10 = v30;
        v7 = v28;
        v5 = v31;
      }
    }
    else
    {
      v22 = 0;
    }
    if (v5)
    {
      v23 = objc_msgSend(&unk_1E0FCE890, "indexOfObject:", objc_msgSend(v5, "objectAtIndex:", 0));
      if (v6)
        goto LABEL_41;
    }
    else
    {
      v23 = v10 == 6;
      if (v6)
      {
LABEL_41:
        v24 = objc_msgSend(&unk_1E0FCE8A8, "indexOfObject:", objc_msgSend(v6, "objectAtIndex:", 0));
        if (v7)
          goto LABEL_42;
        goto LABEL_46;
      }
    }
    v24 = v10 == 8;
    if (v7)
    {
LABEL_42:
      v25 = objc_msgSend(&unk_1E0FCE8C0, "indexOfObject:", objc_msgSend(v7, "objectAtIndex:", 0));
      if (v8)
      {
LABEL_43:
        v26 = objc_msgSend(&unk_1E0FCE8D8, "indexOfObject:", objc_msgSend(v8, "objectAtIndex:", 0));
        return NSOrthographyFlagsForScriptAndOrthographyIndexes(v10, v23, v24, v25, v26, v22);
      }
LABEL_47:
      v26 = v10 == 12;
      return NSOrthographyFlagsForScriptAndOrthographyIndexes(v10, v23, v24, v25, v26, v22);
    }
LABEL_46:
    v25 = v10 == 11;
    if (v8)
      goto LABEL_43;
    goto LABEL_47;
  }
  return result;
}

const __CFString *NSOrthographyDefaultLanguageForScriptIndex(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1;
  if ((unint64_t)(a1 - 2) <= 4)
  {
    v2 = &unk_1E0FCEA10;
    return (const __CFString *)objc_msgSend(v2, "objectAtIndex:", v1);
  }
  if (a1 == 29)
  {
    v2 = &unk_1E0FCEA28;
    v1 = 208;
    return (const __CFString *)objc_msgSend(v2, "objectAtIndex:", v1);
  }
  if ((unint64_t)(a1 - 7) <= 0x18)
  {
    v1 = a1 + 217;
    v2 = &unk_1E0FCEA40;
    return (const __CFString *)objc_msgSend(v2, "objectAtIndex:", v1);
  }
  return CFSTR("und");
}

const __CFString *NSOrthographyDominantScriptForFlags(unsigned int a1)
{
  uint64_t v1;

  v1 = a1 >> 27;
  if (!(_DWORD)v1)
    return 0;
  if (v1 == 1)
    return CFSTR("Zyyy");
  return (const __CFString *)objc_msgSend(&unk_1E0FCEA58, "objectAtIndex:");
}

const __CFString *NSOrthographyDominantLanguageForFlagsAndScript(unsigned int a1, uint64_t a2)
{
  return NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, objc_msgSend(&unk_1E0FCE8F0, "indexOfObject:", a2));
}

const __CFString *NSOrthographyDominantLanguageForFlagsAndScriptIndex(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(a2)
  {
    case 6:
      if (a1 > 0x7Bu)
        v2 = 1;
      else
        v2 = a1;
      if (v2 <= 1)
        v3 = v2;
      else
        v3 = v2 + 4;
      if (!v3)
        return 0;
      v4 = &unk_1E0FCEA70;
      return (const __CFString *)objc_msgSend(v4, "objectAtIndex:");
    case 7:
    case 9:
    case 10:
      goto LABEL_12;
    case 8:
      LODWORD(v5) = (a1 >> 8) & 0x1F;
      if (v5 > 0x15)
        v5 = 1;
      else
        v5 = v5;
      if (v5 <= 1)
        v6 = v5;
      else
        v6 = v5 + 126;
      if (!v6)
        return 0;
      v4 = &unk_1E0FCEA88;
      return (const __CFString *)objc_msgSend(v4, "objectAtIndex:");
    case 11:
      LODWORD(v8) = (a1 >> 13) & 0x1F;
      if (v8 > 0x1D)
        v8 = 1;
      else
        v8 = v8;
      if (v8 <= 1)
        v9 = v8;
      else
        v9 = v8 + 158;
      if (!v9)
        return 0;
      v4 = &unk_1E0FCEAA0;
      return (const __CFString *)objc_msgSend(v4, "objectAtIndex:");
    case 12:
      if (((a1 >> 18) & 0xE) != 0)
        v10 = ((a1 >> 18) & 0xF) + 190;
      else
        v10 = (a1 >> 18) & 0xF;
      if (!v10)
        return 0;
      v4 = &unk_1E0FCEAB8;
      return (const __CFString *)objc_msgSend(v4, "objectAtIndex:");
    default:
      if (!a2)
        return 0;
LABEL_12:
      if (a1 >> 27 == a2 || ((a1 >> 22) & 0x1F) == a2)
        return NSOrthographyDefaultLanguageForScriptIndex(a2);
      else
        return 0;
  }
}

const __CFString *NSOrthographyDominantLanguageForFlags(unsigned int a1)
{
  return NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, a1 >> 27);
}

void *NSOrthographyAllScriptsForFlags(unsigned int a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  const __CFString *v5;
  const __CFString *v7;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = a1 >> 27;
  if ((_DWORD)v3 == 1)
  {
    v4 = (a1 >> 22) & 0x1F;
    v5 = CFSTR("Zyyy");
LABEL_6:
    objc_msgSend(v2, "addObject:", v5);
    goto LABEL_7;
  }
  if (!(a1 >> 27))
  {
    v4 = (a1 >> 22) & 0x1F;
    goto LABEL_8;
  }
  v5 = (const __CFString *)objc_msgSend(&unk_1E0FCEA58, "objectAtIndex:", a1 >> 27);
  v4 = (a1 >> 22) & 0x1F;
  if (v5)
    goto LABEL_6;
LABEL_7:
  if ((_DWORD)v3 != 6)
  {
LABEL_8:
    if ((_BYTE)a1)
      objc_msgSend(v2, "addObject:", objc_msgSend(&unk_1E0FCE908, "objectAtIndex:", 6));
    if ((_DWORD)v3 == 8)
      goto LABEL_14;
  }
  if ((a1 & 0x1F00) != 0)
    objc_msgSend(v2, "addObject:", objc_msgSend(&unk_1E0FCE920, "objectAtIndex:", 8));
  if ((_DWORD)v3 == 11)
    goto LABEL_17;
LABEL_14:
  if ((a1 & 0x3E000) != 0)
    objc_msgSend(v2, "addObject:", objc_msgSend(&unk_1E0FCE938, "objectAtIndex:", 11));
  if ((_DWORD)v3 != 12)
  {
LABEL_17:
    if ((a1 & 0x3C0000) != 0)
      objc_msgSend(v2, "addObject:", objc_msgSend(&unk_1E0FCE950, "objectAtIndex:", 12));
  }
  if (v4 && v4 != v3)
  {
    if (v4 > 0xC)
      goto LABEL_26;
    if (((1 << v4) & 0x1940) != 0)
      return v2;
    if (v4 == 1)
    {
      v7 = CFSTR("Zyyy");
    }
    else
    {
LABEL_26:
      v7 = (const __CFString *)objc_msgSend(&unk_1E0FCEA58, "objectAtIndex:", v4);
      if (!v7)
        return v2;
    }
    if ((objc_msgSend(v2, "containsObject:", v7) & 1) == 0)
      objc_msgSend(v2, "addObject:", v7);
  }
  return v2;
}

void *NSOrthographyAllLanguagesForFlags(unsigned int a1)
{
  void *v2;
  unsigned int v3;
  const __CFString *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFString *v22;
  const __CFString *v23;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = a1 >> 27;
  v4 = NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, a1 >> 27);
  v5 = (a1 >> 22) & 0x1F;
  if (v4)
    objc_msgSend(v2, "addObject:", v4);
  if (v3 == 6)
    goto LABEL_25;
  if (a1 > 0x7Bu)
    v6 = 1;
  else
    v6 = a1;
  if (v6 <= 1)
    v7 = v6;
  else
    v7 = v6 + 4;
  if (v7)
  {
    v8 = objc_msgSend(&unk_1E0FCEA70, "objectAtIndex:");
    if (v8)
    {
      v9 = v8;
      if ((objc_msgSend(v2, "containsObject:", v8) & 1) == 0)
        objc_msgSend(v2, "addObject:", v9);
    }
  }
  if (v3 != 8)
  {
LABEL_25:
    LODWORD(v10) = (a1 >> 8) & 0x1F;
    if (v10 > 0x15)
      v10 = 1;
    else
      v10 = v10;
    if (v10 <= 1)
      v11 = v10;
    else
      v11 = v10 + 126;
    if (v11)
    {
      v12 = objc_msgSend(&unk_1E0FCEA88, "objectAtIndex:");
      if (v12)
      {
        v13 = v12;
        if ((objc_msgSend(v2, "containsObject:", v12) & 1) == 0)
          objc_msgSend(v2, "addObject:", v13);
      }
    }
    if (v3 == 11)
      goto LABEL_37;
  }
  LODWORD(v14) = (a1 >> 13) & 0x1F;
  if (v14 > 0x1D)
    v14 = 1;
  else
    v14 = v14;
  if (v14 <= 1)
    v15 = v14;
  else
    v15 = v14 + 158;
  if (v15)
  {
    v16 = objc_msgSend(&unk_1E0FCEAA0, "objectAtIndex:");
    if (v16)
    {
      v17 = v16;
      if ((objc_msgSend(v2, "containsObject:", v16) & 1) == 0)
        objc_msgSend(v2, "addObject:", v17);
    }
  }
  if (v3 != 12)
  {
LABEL_37:
    if (((a1 >> 18) & 0xE) != 0)
      v18 = ((a1 >> 18) & 0xF) + 190;
    else
      v18 = (a1 >> 18) & 0xF;
    if (v18)
    {
      v19 = objc_msgSend(&unk_1E0FCEAB8, "objectAtIndex:");
      if (v19)
      {
        v20 = v19;
        if ((objc_msgSend(v2, "containsObject:", v19) & 1) == 0)
          objc_msgSend(v2, "addObject:", v20);
      }
    }
  }
  if ((_DWORD)v5 && (_DWORD)v5 != v3 && (v5 > 0xC || ((1 << ((a1 >> 22) & 0x1F)) & 0x1940) == 0))
  {
    v22 = NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, (a1 >> 22) & 0x1F);
    if (v22)
    {
      v23 = v22;
      if ((objc_msgSend(v2, "containsObject:", v22) & 1) == 0)
        objc_msgSend(v2, "addObject:", v23);
    }
  }
  return v2;
}

void *NSOrthographyLanguageMapForFlags(unsigned int a1)
{
  void *v2;
  uint64_t v3;
  const __CFString *v4;
  const __CFString *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  const __CFString *v19;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v3 = a1 >> 27;
  if ((_DWORD)v3)
  {
    if (v3 == 1)
      v4 = CFSTR("Zyyy");
    else
      v4 = (const __CFString *)objc_msgSend(&unk_1E0FCEA58, "objectAtIndex:", a1 >> 27);
  }
  else
  {
    v4 = 0;
  }
  v5 = NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, a1 >> 27);
  v6 = (a1 >> 22) & 0x1F;
  if (v4 && v5)
    objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v5), v4);
  if ((_DWORD)v3 == 6)
    goto LABEL_29;
  if (a1 > 0x7Bu)
    v7 = 1;
  else
    v7 = a1;
  if (v7 <= 1)
    v8 = v7;
  else
    v8 = v7 + 4;
  if (v8)
  {
    v9 = objc_msgSend(&unk_1E0FCEA70, "objectAtIndex:");
    if (v9)
      objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v9), objc_msgSend(&unk_1E0FCE968, "objectAtIndex:", 6));
  }
  if ((_DWORD)v3 != 8)
  {
LABEL_29:
    LODWORD(v10) = (a1 >> 8) & 0x1F;
    if (v10 > 0x15)
      v10 = 1;
    else
      v10 = v10;
    if (v10 <= 1)
      v11 = v10;
    else
      v11 = v10 + 126;
    if (v11)
    {
      v12 = objc_msgSend(&unk_1E0FCEA88, "objectAtIndex:");
      if (v12)
        objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v12), objc_msgSend(&unk_1E0FCE980, "objectAtIndex:", 8));
    }
    if ((_DWORD)v3 == 11)
      goto LABEL_40;
  }
  LODWORD(v13) = (a1 >> 13) & 0x1F;
  if (v13 > 0x1D)
    v13 = 1;
  else
    v13 = v13;
  if (v13 <= 1)
    v14 = v13;
  else
    v14 = v13 + 158;
  if (v14)
  {
    v15 = objc_msgSend(&unk_1E0FCEAA0, "objectAtIndex:");
    if (v15)
      objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v15), objc_msgSend(&unk_1E0FCE998, "objectAtIndex:", 11));
  }
  if ((_DWORD)v3 != 12)
  {
LABEL_40:
    if (((a1 >> 18) & 0xE) != 0)
      v16 = ((a1 >> 18) & 0xF) + 190;
    else
      v16 = (a1 >> 18) & 0xF;
    if (v16)
    {
      v17 = objc_msgSend(&unk_1E0FCEAB8, "objectAtIndex:");
      if (v17)
        objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v17), objc_msgSend(&unk_1E0FCE9B0, "objectAtIndex:", 12));
    }
  }
  if ((_DWORD)v6 && (_DWORD)v6 != (_DWORD)v3)
  {
    if (v6 > 0xC)
      goto LABEL_52;
    if (((1 << ((a1 >> 22) & 0x1F)) & 0x1940) != 0)
      return v2;
    if (v6 == 1)
    {
      v18 = CFSTR("Zyyy");
    }
    else
    {
LABEL_52:
      v18 = (const __CFString *)objc_msgSend(&unk_1E0FCEA58, "objectAtIndex:", (a1 >> 22) & 0x1F);
      if (!v18)
        return v2;
    }
    v19 = NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, (a1 >> 22) & 0x1F);
    if (v19)
      objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v19), v18);
  }
  return v2;
}

uint64_t sub_181FC6DDC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_181FC7570()
{
  return 0;
}

uint64_t sub_181FC75B0()
{
  return 0;
}

void *orthoIndexesForLanguageCodes()
{
  void *result;
  int v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  result = (void *)orthoIndexesForLanguageCodes_result;
  if (!orthoIndexesForLanguageCodes_result)
  {
    v1 = numberOfLanguageCodes_numCodes;
    if (numberOfLanguageCodes_numCodes < 0)
    {
      v1 = langid_numlanguages();
      numberOfLanguageCodes_numCodes = v1;
    }
    if (v1 > 0)
    {
      v2 = v1;
      result = malloc_type_calloc(v1, 1uLL, 0x100004077774924uLL);
      orthoIndexesForLanguageCodes_result = (uint64_t)result;
      if (!result)
        return result;
      for (i = 0; i != v2; ++i)
      {
        v4 = langid_languagecode();
        if (v4)
        {
          v5 = (const char *)v4;
          v6 = 0;
          v7 = orthoIndexesForLanguageCodes_result;
          do
          {
            if (!strcmp(v5, langidLanguageCodes[v6]))
              *(_BYTE *)(v7 + i) = langidOrthoIndexes[v6];
            ++v6;
          }
          while (v6 != 33);
        }
      }
    }
    return (void *)orthoIndexesForLanguageCodes_result;
  }
  return result;
}

unint64_t scoreOrthographyForCharacters(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  int v17;
  unint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  const char *v36;
  int v37;
  uint64_t v38;
  char v39;
  int v40;
  unsigned __int8 *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  double v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  _BYTE v77[64];
  uint64_t v78;

  v7 = (unsigned __int16 *)result;
  v78 = *MEMORY[0x1E0C80C00];
  if (a3 == 8)
  {
    if ((byte_1ECD0A389 & 1) == 0)
    {
      result = _NSLinguisticDataPath();
      if (result)
      {
        v21 = (void *)result;
        qword_1ECD0A3A0 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithContentsOfFile:options:error:", objc_msgSend((id)result, "stringByAppendingPathComponent:", CFSTR("Cyrl/Dict1.dat")), 1, 0);
        result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithContentsOfFile:options:error:", objc_msgSend(v21, "stringByAppendingPathComponent:", CFSTR("Cyrl/Dict2.dat")), 1, 0);
        qword_1ECD0A3A8 = result;
      }
      byte_1ECD0A389 = 1;
    }
    v10 = (void *)qword_1ECD0A3A0;
    v9 = (void *)qword_1ECD0A3A8;
  }
  else
  {
    if (a3 != 6)
      return result;
    if ((_MergedGlobals_137 & 1) == 0)
    {
      result = _NSLinguisticDataPath();
      if (result)
      {
        v8 = (void *)result;
        qword_1ECD0A390 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithContentsOfFile:options:error:", objc_msgSend((id)result, "stringByAppendingPathComponent:", CFSTR("Latn/Dict1.dat")), 1, 0);
        result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithContentsOfFile:options:error:", objc_msgSend(v8, "stringByAppendingPathComponent:", CFSTR("Latn/Dict2.dat")), 1, 0);
        qword_1ECD0A398 = result;
      }
      _MergedGlobals_137 = 1;
    }
    if (a2 < 2)
      return result;
    v10 = (void *)qword_1ECD0A390;
    v9 = (void *)qword_1ECD0A398;
    v11 = *v7;
    v12 = v11 - 65;
    v13 = v11 - 192;
    v14 = v11 - 216;
    v15 = v12 >= 0x1A && v13 >= 0x17;
    if (!v15 || v14 <= 6)
    {
      v17 = v7[1];
      if ((v17 - 216) >= 7 && (v17 - 192) >= 0x17 && (v17 - 65) >= 0x1A)
        v20 = 225;
      else
        v20 = 450;
      goto LABEL_30;
    }
  }
  v20 = 450;
LABEL_30:
  if (a2 < 2)
    return result;
  if (!v10 || v9 == 0)
    return result;
  v23 = objc_msgSend(v10, "bytes");
  v24 = objc_msgSend(v9, "bytes");
  v25 = objc_msgSend(v10, "length") / 5uLL;
  result = objc_msgSend(v9, "length");
  if (a3 != 6)
  {
    v26 = 0;
    v27 = 0;
    while (1)
    {
      v28 = v7[v27];
      if ((v28 - 65) <= 0x19)
        break;
      if ((v28 - 97) <= 0x19)
        goto LABEL_47;
      if ((v28 - 1040) <= 0x1F)
      {
        v29 = v28 - 64;
        v30 = (_DWORD)v28 == 1049;
LABEL_44:
        if (v30)
          LOBYTE(v28) = -40;
        else
          LOBYTE(v28) = v29;
LABEL_47:
        v77[v26++] = v28;
        goto LABEL_48;
      }
      if ((v28 - 1072) <= 0x1F)
      {
        v29 = v28 - 96;
        v30 = (_DWORD)v28 == 1081;
        goto LABEL_44;
      }
      if ((v28 & 0xFFF0) == 0x450 || (v28 & 0xFFF0) == 0x400)
      {
        if (v28 <= 0x410)
          v31 = -1024;
        else
          v31 = -1104;
        v28 += v31;
        if (((0xF1FBuLL >> v28) & 1) == 0)
          goto LABEL_48;
        LOBYTE(v28) = cyrl1[v28];
        goto LABEL_47;
      }
      LODWORD(v28) = v28 - 1162;
      if (v28 <= 0xF)
      {
        LOBYTE(v28) = cyrl2[v28];
        goto LABEL_47;
      }
LABEL_48:
      if (++v27 >= a2 || v26 >= 0x40)
        goto LABEL_89;
    }
    LOBYTE(v28) = v28 + 32;
    goto LABEL_47;
  }
  v32 = 0;
  v33 = 0;
  do
  {
    v34 = v7[v33];
    if ((v34 - 65) <= 0x19)
    {
      LOBYTE(v35) = v34 + 32;
LABEL_65:
      v26 = v32 + 1;
      v77[v32] = v35;
      goto LABEL_66;
    }
    if ((v34 - 97) <= 0x19)
    {
      LOBYTE(v35) = v7[v33];
      goto LABEL_65;
    }
    if ((v34 - 192) > 0x23F || (v35 = latin1[v34 - 192], v35 == 32))
    {
LABEL_81:
      v26 = v32;
      goto LABEL_66;
    }
    if (v35 != 42)
      goto LABEL_65;
    if ((v34 & 0xFFFFFFDF) == 0xC6)
    {
      v36 = "ae";
    }
    else if ((v34 & 0xFFFFFFDF) == 0xDE)
    {
      v36 = "th";
    }
    else
    {
      v36 = "ss";
      if (v34 != 223)
      {
        v37 = v34 & 0xFFFE;
        switch(v37)
        {
          case 306:
            v36 = "ij";
            break;
          case 330:
            v36 = "ng";
            break;
          case 338:
            v36 = "oe";
            break;
          default:
            goto LABEL_81;
        }
      }
    }
    v38 = 0;
    v39 = 1;
    do
    {
      v26 = v32 + 1;
      v77[v32] = v36[v38];
      if ((v39 & 1) == 0)
        break;
      v39 = 0;
      v38 = 1;
      v15 = v32++ >= 0x3F;
    }
    while (!v15);
LABEL_66:
    if (++v33 >= a2)
      break;
    v32 = v26;
  }
  while (v26 < 0x40);
LABEL_89:
  if (v26 - 1 > 0x3E)
  {
    v53 = 0;
    if ((_DWORD)v25)
      goto LABEL_110;
  }
  else
  {
    v40 = -1640531527;
    v41 = v77;
    if (v26 < 0xC)
    {
      v44 = -1640531527;
      v43 = -1640531527;
      v42 = v26;
    }
    else
    {
      v42 = v26;
      v43 = -1640531527;
      v44 = -1640531527;
      do
      {
        v45 = *((_DWORD *)v41 + 1) + v44;
        v46 = *((_DWORD *)v41 + 2) + v43;
        v47 = (*(_DWORD *)v41 + v40 - (v45 + v46)) ^ (v46 >> 13);
        v48 = (v45 - v46 - v47) ^ (v47 << 8);
        v49 = (v46 - v47 - v48) ^ (v48 >> 13);
        v50 = (v47 - v48 - v49) ^ (v49 >> 12);
        v51 = (v48 - v49 - v50) ^ (v50 << 16);
        v52 = (v49 - v50 - v51) ^ (v51 >> 5);
        v40 = (v50 - v51 - v52) ^ (v52 >> 3);
        v44 = (v51 - v52 - v40) ^ (v40 << 10);
        v43 = (v52 - v40 - v44) ^ (v44 >> 15);
        v41 += 12;
        v42 -= 12;
      }
      while (v42 > 0xB);
    }
    v54 = v43 + v26;
    switch(v42)
    {
      case 1u:
        goto LABEL_108;
      case 2u:
        goto LABEL_107;
      case 3u:
        goto LABEL_106;
      case 4u:
        goto LABEL_105;
      case 5u:
        goto LABEL_104;
      case 6u:
        goto LABEL_103;
      case 7u:
        goto LABEL_102;
      case 8u:
        goto LABEL_101;
      case 9u:
        goto LABEL_100;
      case 0xAu:
        goto LABEL_99;
      case 0xBu:
        v54 += v41[10] << 24;
LABEL_99:
        v54 += v41[9] << 16;
LABEL_100:
        v54 += v41[8] << 8;
LABEL_101:
        v44 += v41[7] << 24;
LABEL_102:
        v44 += v41[6] << 16;
LABEL_103:
        v44 += v41[5] << 8;
LABEL_104:
        v44 += v41[4];
LABEL_105:
        v40 += v41[3] << 24;
LABEL_106:
        v40 += v41[2] << 16;
LABEL_107:
        v40 += v41[1] << 8;
LABEL_108:
        v40 += *v41;
        break;
      default:
        break;
    }
    v55 = (v40 - v44 - v54) ^ (v54 >> 13);
    v56 = (v44 - v54 - v55) ^ (v55 << 8);
    v57 = (v54 - v55 - v56) ^ (v56 >> 13);
    v58 = (v55 - v56 - v57) ^ (v57 >> 12);
    v59 = (v56 - v57 - v58) ^ (v58 << 16);
    v60 = (v57 - v58 - v59) ^ (v59 >> 5);
    v61 = (v58 - v59 - v60) ^ (v60 >> 3);
    v53 = (v60 - v61 - ((v59 - v60 - v61) ^ (v61 << 10))) ^ (((v59 - v60 - v61) ^ (v61 << 10)) >> 15);
    if ((_DWORD)v25)
    {
LABEL_110:
      v62 = result >> 3;
      if ((result >> 3))
      {
        v63 = (double)(v53 - 1) / 4294967300.0;
        v64 = (v63 * (double)v25);
        if (bswap32(*(_DWORD *)(v23 + 4 * v64)) <= v53)
        {
          do
          {
            v67 = v64 + 1;
            if (v64 >= (v25 - 1))
              break;
            v68 = bswap32(*(_DWORD *)(v23 + 4 * v64++));
          }
          while (v68 < v53);
          v65 = (v67 - 1);
          v66 = bswap32(*(_DWORD *)(v23 + 4 * v65));
        }
        else
        {
          do
          {
            v65 = v64;
            v66 = bswap32(*(_DWORD *)(v23 + 4 * v64));
            v15 = (_DWORD)v64 != 0;
            LODWORD(v64) = v64 - 1;
          }
          while (v15 && v66 > v53);
        }
        if (v66 == v53)
        {
          v69 = *(unsigned __int8 *)(v23 + 4 * v25 + v65);
          if (*(_BYTE *)(v23 + 4 * v25 + v65))
            goto LABEL_144;
        }
        v70 = (v63 * (double)v62);
        if (bswap32(*(_DWORD *)(v24 + 4 * v70)) <= v53)
        {
          do
          {
            v73 = v70 + 1;
            if (v70 >= (v62 - 1))
              break;
            v74 = bswap32(*(_DWORD *)(v24 + 4 * v70++));
          }
          while (v74 < v53);
          v71 = (v73 - 1);
          v72 = bswap32(*(_DWORD *)(v24 + 4 * v71));
        }
        else
        {
          do
          {
            v71 = v70;
            v72 = bswap32(*(_DWORD *)(v24 + 4 * v70));
            v15 = (_DWORD)v70 != 0;
            LODWORD(v70) = v70 - 1;
          }
          while (v15 && v72 > v53);
        }
        if (v72 == v53)
          v75 = *(_DWORD *)(v24 + 4 * v62 + 4 * v71);
        else
          v75 = 0;
        v69 = HIBYTE(v75);
        v76 = (unint64_t)((double)v20 * 0.75);
        if (!BYTE2(v75))
          v76 = v20;
        if ((_DWORD)v69)
          v20 = (unint64_t)((double)v20 * 0.5);
        else
          v20 = v76;
        if ((_BYTE)v75)
          *(_QWORD *)(a4 + 8 * v75) += v20;
        if (BYTE1(v75))
          *(_QWORD *)(a4 + 8 * BYTE1(v75)) += v20;
        if (BYTE2(v75))
          *(_QWORD *)(a4 + 8 * BYTE2(v75)) += v20;
        if ((_DWORD)v69)
LABEL_144:
          *(_QWORD *)(a4 + 8 * v69) += v20;
      }
    }
  }
  return result;
}

unint64_t orthographyFlagsForScores(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v4 = 0;
  v5 = 0;
  v6 = a1[2];
  v7 = a1[6];
  v8 = a1[8];
  v9 = 2;
  v11 = a1[11];
  v10 = a1[12];
  do
  {
    if (a1[v9] > v4)
    {
      v5 = v9;
      v4 = a1[v9];
    }
    ++v9;
  }
  while (v9 != 32);
  if (!v5)
    return 0x8000000;
  v12 = 0;
  for (i = 2; i != 32; ++i)
  {
    if (a1[i])
      v14 = v5 == i;
    else
      v14 = 1;
    if (!v14 && (i > 0xC || ((1 << i) & 0x1940) == 0))
      v12 = i;
  }
  if (v6)
  {
    if (v6 < 5)
    {
      v17 = 1;
    }
    else
    {
      v15 = 0;
      v16 = 2;
      v17 = 1;
      do
      {
        if (*(_QWORD *)(a3 + 8 * v16) > v15)
        {
          v17 = v16;
          v15 = *(_QWORD *)(a3 + 8 * v16);
        }
        ++v16;
      }
      while (v16 != 6);
    }
    if (v5 == 2)
      v5 = v17;
    if (v12 == 2)
      v12 = v17;
  }
  if (!v7)
  {
    v21 = 0;
    goto LABEL_36;
  }
  if (*(_QWORD *)(a2 + 48) >= 2uLL)
  {
    v19 = 0;
    v20 = 6;
    v21 = 1;
    do
    {
      if (*(_QWORD *)(a3 + 8 * v20) > v19)
      {
        v21 = v20;
        v19 = *(_QWORD *)(a3 + 8 * v20);
      }
      ++v20;
    }
    while (v20 != 128);
LABEL_36:
    if (!v8)
      goto LABEL_46;
LABEL_39:
    if (*(_QWORD *)(a2 + 64))
    {
      v22 = 0;
      v23 = 128;
      v8 = 1;
      do
      {
        if (*(_QWORD *)(a3 + 8 * v23) > v22)
        {
          v8 = v23;
          v22 = *(_QWORD *)(a3 + 8 * v23);
        }
        ++v23;
      }
      while (v23 != 148);
    }
    else
    {
      v8 = 1;
    }
    goto LABEL_46;
  }
  v21 = 1;
  if (v8)
    goto LABEL_39;
LABEL_46:
  if (v11)
    v24 = 160;
  else
    v24 = 0;
  if (v10)
    v25 = 192;
  else
    v25 = 0;
  return NSOrthographyFlagsForScriptAndOrthographyIndexes(v5, v21, v8, v24, v25, v12);
}

uint64_t sub_181FC8FB4()
{
  return 0;
}

uint64_t sub_181FC8FF4()
{
  return 0;
}

uint64_t sub_181FC9038()
{
  return 0;
}

uint64_t sub_181FCC6A0()
{
  return 0;
}

uint64_t sub_181FCC6E0()
{
  return 0;
}

void sub_181FCF88C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_181FD15B4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x181FD153CLL);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t sub_181FD20D4()
{
  return 0;
}

uint64_t sub_181FD213C()
{
  void *v0;

  return 0;
}

uint64_t sub_181FD2178()
{
  return 0;
}

uint64_t __NSMeasurementConvertedForFileSizeDescription(void *a1, int a2, int a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v17;
  unint64_t v19;

  if ((_WORD)a2)
    v9 = (unsigned __int16)a2;
  else
    v9 = 65472;
  v10 = objc_msgSend(&unk_1E0FCEB78, "count");
  v11 = __clz(__rbit64(v9));
  v19 = v10;
  if (v10 <= v11)
    v12 = v11;
  else
    v12 = v10;
  v13 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    if (v12 == v11)
      break;
    if ((v9 & (1 << v11)) != 0)
      v13 = v11;
    objc_msgSend((id)objc_msgSend(a1, "measurementByConvertingToUnit:", informationStorageUnitFromAllowedUnit(v9 & (1 << v11), a3)), "doubleValue");
    v15 = roundedSize(v11++, (*(_QWORD *)&a2 & 0x400000) == 0, v14);
  }
  while (fabs(v15) >= (double)a4 || v13 == 0x7FFFFFFFFFFFFFFFLL);
  v17 = v19 - 1;
  if (v13 != 0x7FFFFFFFFFFFFFFFLL)
    v17 = v13;
  if (a5)
    *a5 = v17;
  return objc_msgSend(a1, "measurementByConvertingToUnit:", informationStorageUnitFromAllowedUnit(1 << v17, a3));
}

NSUnitInformationStorage *informationStorageUnitFromAllowedUnit(uint64_t a1, int a2)
{
  NSUnitInformationStorage *result;

  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64)
      {
        if (a2)
          return +[NSUnitInformationStorage exabytes](NSUnitInformationStorage, "exabytes");
        else
          return +[NSUnitInformationStorage exbibytes](NSUnitInformationStorage, "exbibytes");
      }
      if (a1 == 128)
      {
        if (a2)
          return +[NSUnitInformationStorage zettabytes](NSUnitInformationStorage, "zettabytes");
        else
          return +[NSUnitInformationStorage zebibytes](NSUnitInformationStorage, "zebibytes");
      }
    }
    else
    {
      if (a1 == 16)
      {
        if (a2)
          return +[NSUnitInformationStorage terabytes](NSUnitInformationStorage, "terabytes");
        else
          return +[NSUnitInformationStorage tebibytes](NSUnitInformationStorage, "tebibytes");
      }
      if (a1 == 32)
      {
        if (a2)
          return +[NSUnitInformationStorage petabytes](NSUnitInformationStorage, "petabytes");
        else
          return +[NSUnitInformationStorage pebibytes](NSUnitInformationStorage, "pebibytes");
      }
    }
LABEL_23:
    if (a2)
      return +[NSUnitInformationStorage yottabytes](NSUnitInformationStorage, "yottabytes");
    else
      return +[NSUnitInformationStorage yobibytes](NSUnitInformationStorage, "yobibytes");
  }
  switch(a1)
  {
    case 1:
      result = +[NSUnitInformationStorage bytes](NSUnitInformationStorage, "bytes");
      break;
    case 2:
      if (a2)
        result = +[NSUnitInformationStorage kilobytes](NSUnitInformationStorage, "kilobytes");
      else
        result = +[NSUnitInformationStorage kibibytes](NSUnitInformationStorage, "kibibytes");
      break;
    case 4:
      if (a2)
        result = +[NSUnitInformationStorage megabytes](NSUnitInformationStorage, "megabytes");
      else
        result = +[NSUnitInformationStorage mebibytes](NSUnitInformationStorage, "mebibytes");
      break;
    case 8:
      if (a2)
        result = +[NSUnitInformationStorage gigabytes](NSUnitInformationStorage, "gigabytes");
      else
        result = +[NSUnitInformationStorage gibibytes](NSUnitInformationStorage, "gibibytes");
      break;
    default:
      goto LABEL_23;
  }
  return result;
}

NSString *__NSLocalizedFileSizeDescriptionWithMeasurement(void *a1, unint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  char v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  uint64_t v14;
  uint64_t v15;
  NSNumber *v16;
  uint64_t v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x180000) != 0)
    v6 = (a2 >> 18) & 1;
  else
    v6 = 1;
  if (v6)
    v7 = 1000;
  else
    v7 = 1024;
  v8 = objc_msgSend((id)objc_msgSend(a1, "unit"), "isEqual:", +[NSUnitInformationStorage bytes](NSUnitInformationStorage, "bytes"));
  v9 = a1;
  if ((v8 & 1) == 0)
    v9 = (void *)objc_msgSend(a1, "measurementByConvertingToUnit:", +[NSUnitInformationStorage bytes](NSUnitInformationStorage, "bytes"));
  objc_msgSend(v9, "doubleValue");
  v11 = v10;
  v12 = fabs(v10);
  if (v12 >= INFINITY && v12 <= INFINITY)
    return __NSLocalizedFileSizeDescriptionFormatNumber(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11), 0, (uint64_t)+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11), a2, a3);
  if (v11 < -9.22337204e18 || v11 > 9.22337204e18)
  {
    v17[0] = 0;
    objc_msgSend((id)__NSMeasurementConvertedForFileSizeDescription(a1, a2, v6, v7, v17), "doubleValue");
    v16 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    return __NSLocalizedFileSizeDescriptionFormatNumber(v16, v17[0], (uint64_t)+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11), a2, a3);
  }
  else
  {
    v14 = 0x7FFFFFFFFFFFFFFFLL;
    if (v11 != 9.22337204e18)
      v14 = (uint64_t)v11;
    if (v11 == -9.22337204e18)
      v15 = 0x8000000000000000;
    else
      v15 = v14;
    return __NSLocalizedFileSizeDescription(v15, v7, a2, a3);
  }
}

NSString *NSLocalizedFileSizeDescription(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    return __NSLocalizedFileSizeDescription(a1, a2, a3, 0);
  if ((NSLocalizedFileSizeDescription_warned & 1) == 0)
  {
    NSLocalizedFileSizeDescription_warned = 1;
    NSLog((NSString *)CFSTR("Warning: NSLocalizedFileSizeDescription() cannot accept size argument greater than INT64_MAX"));
  }
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%llu"), a1);
}

NSString *_NSLocalizedFileSizeDescription(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return __NSLocalizedFileSizeDescription(a1, a2, a3, 0);
}

void sub_181FD377C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a69;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a69, 8);
  _Unwind_Resume(a1);
}

uint64_t ___diffStr_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("%lu"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 1);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != v2)
    objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR(",%lu"), v2 + 1);
  objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("c"));
  objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("%lu"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) + 1);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) != v3)
    objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR(",%lu"), v3 + 1);
  objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("\n"));
  result = objc_msgSend(*(id *)(a1 + 32), "appendString:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40) = 0;
  return result;
}

uint64_t ___diffStr_block_invoke_2(_QWORD *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v4 = objc_msgSend(a2, "changeType");
  v5 = objc_msgSend(a2, "index");
  v6 = v5;
  if (v4 == 1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 1;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24))
      v8 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) != 1;
    else
      v8 = 1;
    v7 = v8 + *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 40);
  if (v9)
    v10 = v5 == v7;
  else
    v10 = 1;
  if (!v10)
  {
    (*(void (**)(void))(a1[4] + 16))();
    v9 = *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 40);
  }
  if (!v9)
  {
    *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 40) = (id)objc_opt_new();
    if (v4 == 1)
    {
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v6;
      *(_QWORD *)(*(_QWORD *)(a1[10] + 8) + 24) = v6;
      v11 = v6 - *(_QWORD *)(*(_QWORD *)(a1[12] + 8) + 24) + *(_QWORD *)(*(_QWORD *)(a1[13] + 8) + 24);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)(a1[12] + 8) + 24) + v6 - *(_QWORD *)(*(_QWORD *)(a1[13] + 8) + 24);
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v13;
      *(_QWORD *)(*(_QWORD *)(a1[10] + 8) + 24) = v13;
      v11 = v6;
    }
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = v11;
    *(_QWORD *)(*(_QWORD *)(a1[11] + 8) + 24) = v11;
    *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = v12;
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
  }
  if (v4 == 1)
  {
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1[9] + 8) + 40), "appendFormat:", CFSTR("< %@\n"), objc_msgSend(a2, "object"));
    ++*(_QWORD *)(*(_QWORD *)(a1[12] + 8) + 24);
    v15 = a1[5];
  }
  else
  {
    v16 = *(_QWORD *)(a1[8] + 8);
    if (*(_QWORD *)(v16 + 24) != v4)
    {
      *(_QWORD *)(v16 + 24) = v4;
      objc_msgSend(*(id *)(*(_QWORD *)(a1[9] + 8) + 40), "appendString:", CFSTR("---\n"));
    }
    ++*(_QWORD *)(*(_QWORD *)(a1[13] + 8) + 24);
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1[9] + 8) + 40), "appendFormat:", CFSTR("> %@\n"), objc_msgSend(a2, "object"));
    v15 = a1[6];
  }
  *(_QWORD *)(*(_QWORD *)(v15 + 8) + 24) = v6;
  return result;
}

void sub_181FD416C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void *___loadCrashReporterSupport_block_invoke()
{
  void *result;

  result = dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 256);
  if (result)
  {
    result = dlsym(result, "SimulateCrash");
    off_1ECD0A3D0 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  }
  return result;
}

Class ___loadAssertionServices_block_invoke()
{
  Class result;

  dlopen("/System/Library/PrivateFrameworks/AssertionServices.framework/AssertionServices", 256);
  result = objc_lookUpClass("BKSProcessAssertion");
  _MergedGlobals_138 = result != 0;
  return result;
}

CFStringRef __CFBasicHashNullCallback(uint64_t a1, int a2, const __CFString *a3, const __CFString *a4)
{
  CFStringRef result;

  result = (CFStringRef)&CFBasicHashNullCallbacks;
  switch(a2)
  {
    case 8:
      return result;
    case 10:
    case 11:
    case 12:
    case 13:
    case 22:
    case 23:
      result = a3;
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      result = (CFStringRef)(a3 == a4);
      break;
    case 24:
    case 25:
    case 26:
    case 27:
      result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0, CFSTR("<%p>"), a3);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

_QWORD *CFBasicHashGetBucket@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = result[2];
  v4 = result[3];
  *a3 = a2;
  v5 = *(_QWORD *)(result[5] + 8 * a2);
  a3[3] = v5;
  if ((v3 & 4) != 0)
    v6 = *(_QWORD *)(result[6] + 8 * a2);
  else
    v6 = 0;
  a3[4] = v6;
  if ((v3 & 0x18) != 0)
  {
    v7 = (v3 >> 3) & 3;
    if (!v7)
      goto LABEL_25;
    v5 = *(_QWORD *)(result[v7 + 5] + 8 * a2);
  }
  a3[1] = v5;
  if ((v3 & 0x60) != 0)
  {
    v8 = (v3 >> 5) & 3;
    if (!v8)
      goto LABEL_25;
    v9 = *(_QWORD *)(result[v8 + 5] + 8 * a2);
  }
  else
  {
    v9 = 0;
  }
  a3[2] = v9;
  if ((v3 & 0x380) != 0)
  {
    v10 = (v3 >> 7) & 7;
    if (!v10)
      goto LABEL_25;
    v11 = *(_QWORD *)(result[v10 + 5] + 8 * a2);
  }
  else
  {
    *((_QWORD *)&v12 + 1) = v4;
    *(_QWORD *)&v12 = v3;
    v13 = (v12 >> 32) & 0xFFFFFF0000000000;
    v11 = v5 != v13 && v5 != ~v13;
  }
  a3[5] = v11;
  if ((v3 & 0x1C00) == 0)
  {
    v16 = 0;
    goto LABEL_24;
  }
  v15 = (v3 >> 10) & 7;
  if (v15)
  {
    v16 = *(_QWORD *)(result[v15 + 5] + 8 * a2);
LABEL_24:
    a3[6] = v16;
    return result;
  }
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *CFBasicHashApply(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _OWORD *);
  BOOL v11;
  BOOL v12;
  _OWORD v13[3];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = result[2];
  v3 = (v2 >> 16) & 0x3F;
  v4 = v2 < 0x400000 || v3 == 0;
  if (!v4 && v3 != 63)
  {
    v6 = result;
    v7 = __CFBasicHashTableSizes[v3];
    v8 = v2 >> 22;
    v9 = 1;
    do
    {
      v18 = 0;
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      result = CFBasicHashGetBucket(v6, v9 - 1, &v15);
      if (*((_QWORD *)&v17 + 1))
      {
        v10 = *(uint64_t (**)(uint64_t, _OWORD *))(a2 + 16);
        v13[0] = v15;
        v13[1] = v16;
        v13[2] = v17;
        v14 = v18;
        result = (_QWORD *)v10(a2, v13);
        if (!(_DWORD)result)
          return result;
        v8 -= (_DWORD)result != 0;
      }
      if (v8 >= 1)
      {
        v12 = __OFSUB__(v9, v7);
        v11 = v9 - v7 < 0;
      }
      else
      {
        v12 = 0;
        v11 = 0;
      }
      ++v9;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t CFBasicHashesAreEqual(_QWORD *a1, _QWORD *a2)
{
  unint64_t Count;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  Count = CFBasicHashGetCount(a1);
  if (Count != CFBasicHashGetCount(a2))
    return 0;
  v5 = 1;
  if (Count)
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x2020000000;
    v11 = 1;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __CFBasicHashesAreEqual_block_invoke;
    v7[3] = &unk_1E0F51B20;
    v7[4] = &v8;
    v7[5] = a2;
    v7[6] = a1;
    CFBasicHashApply(a1, (uint64_t)v7);
    v5 = *((unsigned __int8 *)v9 + 24);
    _Block_object_dispose(&v8, 8);
  }
  return v5;
}

void sub_181FD48FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CFBasicHashReplaceValue(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  ++*(_WORD *)(a1 + 30);
  v6 = (**(uint64_t (***)(void))(a1 + 32))();
  v9 = v6;
  v10 = *(_QWORD *)(a1 + 16);
  if ((v10 & 0x18) != 0)
  {
    v11 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 32))(a1, 12, a3, 0);
    v10 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 24);
    if ((v10 & 4) == 0)
    {
LABEL_3:
      v13 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 24);
    v11 = v6;
    if ((v10 & 4) == 0)
      goto LABEL_3;
  }
  v13 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32))(a1, 11, 0, 0);
  v10 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
LABEL_6:
  if ((v10 & 0x60) != 0)
  {
    v14 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32))(a1, 13, 0, 0);
    v15 = *(_QWORD *)(a1 + 20);
  }
  else
  {
    v14 = 0;
    *((_QWORD *)&v16 + 1) = v12;
    *(_QWORD *)&v16 = v10;
    v15 = v16 >> 32;
  }
  v17 = v15 & 0xFFFFFF0000000000;
  if (v11 == v17 || v11 == ~v17)
    __CFBasicHashFindNewMarker(a1, v11, v7, v8);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(v19 + 8 * *a2);
  *(_QWORD *)(v19 + 8 * *a2) = v9;
  result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 32))(a1, 14, v20, 0);
  v22 = *(_QWORD *)(a1 + 16);
  if ((v22 & 4) != 0)
  {
    v23 = *(_QWORD *)(a1 + 48);
    v24 = *(_QWORD *)(v23 + 8 * *a2);
    *(_QWORD *)(v23 + 8 * *a2) = v13;
    result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 32))(a1, 15, v24, 0);
    v22 = *(_QWORD *)(a1 + 16);
  }
  if ((v22 & 0x18) != 0)
  {
    v25 = (v22 >> 3) & 3;
    if (!v25)
    {
LABEL_24:
      __break(1u);
      return result;
    }
    v26 = *(_QWORD *)(a1 + 8 * v25 + 40);
    v27 = *(_QWORD *)(v26 + 8 * *a2);
    *(_QWORD *)(v26 + 8 * *a2) = v11;
    result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 32))(a1, 16, v27, 0);
    v22 = *(_QWORD *)(a1 + 16);
  }
  if ((v22 & 0x60) != 0)
  {
    v28 = (v22 >> 5) & 3;
    if (v28)
    {
      v29 = *(_QWORD *)(a1 + 8 * v28 + 40);
      v30 = *(_QWORD *)(v29 + 8 * *a2);
      *(_QWORD *)(v29 + 8 * *a2) = v14;
      return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 32))(a1, 17, v30, 0);
    }
    goto LABEL_24;
  }
  return result;
}

void __CFBasicHashDrain(uint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  _QWORD *ptr;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (v4 >> 16) & 0x3F;
  v7 = __CFBasicHashTableSizes[v6];
  v8 = CFGetAllocator((CFTypeRef)a1);
  v39 = 0;
  ptr = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(_QWORD *)(a1 + 16);
  if ((v9 & 4) != 0)
  {
    v39 = *(_QWORD **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v10 = *(_QWORD *)(a1 + 24);
  if ((v9 & 0x18) != 0)
  {
    v11 = (v9 >> 3) & 3;
    if (!v11)
      goto LABEL_47;
    v12 = a1 + 8 * v11;
    v40 = *(_QWORD **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = 0;
  }
  else
  {
    v40 = 0;
  }
  if ((v9 & 0x60) != 0)
  {
    v13 = (v9 >> 5) & 3;
    if (!v13)
      goto LABEL_47;
    v14 = a1 + 8 * v13;
    v38 = *(_QWORD **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = 0;
  }
  else
  {
    v38 = 0;
  }
  if ((v9 & 0x380) != 0)
  {
    v15 = (v9 >> 7) & 7;
    if (!v15)
      goto LABEL_47;
    v16 = a1 + 8 * v15;
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = 0;
  }
  else
  {
    v17 = 0;
  }
  if ((v9 & 0x1C00) != 0)
  {
    v18 = (v9 >> 10) & 7;
    if (!v18)
      goto LABEL_47;
    v19 = a1 + 8 * v18;
    v20 = *(void **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = 0;
  }
  else
  {
    v20 = 0;
  }
  v36 = a2;
  v34 = v20;
  v35 = v17;
  if ((v9 & 0xE000) != 0)
  {
    if ((unsigned __int16)v9 >> 13)
    {
      v21 = a1 + 8 * ((unsigned __int16)v9 >> 13);
      v33 = *(void **)(v21 + 40);
      *(_QWORD *)(v21 + 40) = 0;
      goto LABEL_23;
    }
LABEL_47:
    __break(1u);
    return;
  }
  v33 = 0;
LABEL_23:
  *(_QWORD *)(a1 + 16) = (unsigned __int16)v9;
  *(_QWORD *)(a1 + 24) = v10 | ((unint64_t)(HIWORD(v10) + 1) << 48);
  if (*(uint64_t (***)())(a1 + 32) != &CFBasicHashNullCallbacks)
  {
    v22 = v40 ? v40 : ptr;
    if (v6 && v6 != 63)
    {
      *((_QWORD *)&v23 + 1) = v5;
      *(_QWORD *)&v23 = v4;
      v24 = (v23 >> 32) & 0xFFFFFF0000000000;
      if (v7 <= 1)
        v25 = 1;
      else
        v25 = v7;
      v26 = ptr;
      v27 = v38;
      v28 = v39;
      v29 = v40;
      do
      {
        v31 = *v22++;
        v30 = v31;
        if (v31 != v24 && v30 != ~v24)
        {
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32))(a1, 14, *v26, 0);
          if (v39)
            (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32))(a1, 15, *v28, 0);
          if (v40)
            (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32))(a1, 16, *v29, 0);
          if (v38)
            (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32))(a1, 17, *v27, 0);
        }
        ++v27;
        ++v29;
        ++v28;
        ++v26;
        --v25;
      }
      while (v25);
    }
  }
  if (v36)
    (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32))(a1, 9, 0, 0);
  CFAllocatorDeallocate(v8, ptr);
  CFAllocatorDeallocate(v8, v39);
  CFAllocatorDeallocate(v8, v40);
  CFAllocatorDeallocate(v8, v38);
  CFAllocatorDeallocate(v8, v35);
  CFAllocatorDeallocate(v8, v34);
  CFAllocatorDeallocate(v8, v33);
}

CFStringRef __CFBasicHashCopyDescription(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  uint64_t v4;
  const char *v5;
  const char *v6;
  unint64_t Count;
  CFAllocatorRef v8;
  CFStringRef v9;
  _QWORD v11[7];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0);
  v4 = a1[2];
  if ((v4 & 0x380) != 0)
    v5 = "multi";
  else
    v5 = "";
  if ((v4 & 0x18) != 0)
    v6 = "dict";
  else
    v6 = "set";
  Count = CFBasicHashGetCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("%@{type = %s %s%s, count = %ld,\n"), &stru_1E0F56070, "mutable", v5, v6, Count);
  CFStringAppendFormat(Mutable, 0, CFSTR("%@entries =>\n"), &stru_1E0F56070);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __CFBasicHashCopyDescription_block_invoke;
  v11[3] = &__block_descriptor_57_e18_C64__0___qQQQQQQ_8l;
  v12 = 1;
  v11[4] = a1;
  v11[5] = Mutable;
  v11[6] = CFSTR("\t");
  CFBasicHashApply(a1, (uint64_t)v11);
  CFStringAppendFormat(Mutable, 0, CFSTR("%@}\n"), &stru_1E0F56070);
  v8 = CFGetAllocator(a1);
  v9 = CFStringCreateWithFormat(v2, 0, CFSTR("<CFBasicHash %p [%p]>%@"), a1, v8, Mutable);
  CFRelease(Mutable);
  return v9;
}

void __CFBasicHashDeallocate(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if ((v1 & 4) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 24) = v1 | 4;
    __CFBasicHashDrain(a1, 1);
  }
}

unint64_t ___CFBasicHashFindBucket2@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  result = (**(uint64_t (***)(void))(a1 + 32))();
  v8 = *(_QWORD *)(a1 + 16);
  if ((v8 & 0x18) != 0)
  {
    v9 = (v8 >> 3) & 3;
    if (!v9)
      goto LABEL_55;
    v10 = (uint64_t *)(a1 + 8 * v9 + 40);
  }
  else
  {
    v10 = (uint64_t *)(a1 + 40);
  }
  v11 = *v10;
  if ((v8 & 0xE000) == 0)
  {
    v12 = 0;
    goto LABEL_9;
  }
  if (!((unsigned __int16)v8 >> 13))
  {
LABEL_55:
    __break(1u);
    return result;
  }
  v12 = *(_QWORD *)(a1 + 8 * ((unsigned __int16)v8 >> 13) + 40);
LABEL_9:
  v13 = (*(__int128 *)(a1 + 16) >> 32) & 0xFFFFFF0000000000;
  v14 = ~v13;
  v15 = (v8 >> 16) & 0x3F;
  v16 = __CFBasicHashTableSizes[v15];
  *a4 = -1;
  a4[1] = ~v13;
  a4[2] = 0;
  a4[3] = ~v13;
  a4[5] = 0;
  a4[6] = 0;
  if (result / v16 % v16)
    v17 = result / v16 % v16;
  else
    v17 = v16 - 1;
  a4[4] = 0;
  if (!v15 || v15 == 63)
    return result;
  v18 = result % v16;
  if (v16 <= 1)
    v19 = 1;
  else
    v19 = v16;
  v20 = -1;
  while (1)
  {
    v21 = *(_QWORD *)(v11 + 8 * v18);
    if (v21 == v13)
    {
      if (v20 == -1)
      {
        a4[3] = v13;
        *a4 = v18;
        a4[1] = v13;
      }
      return result;
    }
    if (a3)
      goto LABEL_20;
    if (v21 == v14)
    {
      if (v20 == -1)
      {
        *a4 = v18;
        v20 = v18;
      }
      goto LABEL_20;
    }
    if (v21 == a2)
      break;
    if (!v12 || *(_QWORD *)(v12 + 8 * v18) == result)
    {
      v36 = v12;
      v37 = result;
      v34 = v20;
      v35 = v14;
      v23 = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t, uint64_t))(a1 + 32))(a1, 20, v21, a2);
      v20 = v34;
      v14 = v35;
      v24 = v23 == 0;
      v12 = v36;
      result = v37;
      if (!v24)
        goto LABEL_37;
    }
LABEL_20:
    if (v16 <= v18 + v17)
      v22 = v16;
    else
      v22 = 0;
    v18 = v18 + v17 - v22;
    if (!--v19)
      return result;
  }
  v21 = a2;
LABEL_37:
  *a4 = v18;
  v25 = *(_QWORD *)(a1 + 16);
  v26 = v21;
  if ((v25 & 0x18) != 0)
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v18);
  a4[3] = v26;
  if ((v25 & 4) != 0)
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v18);
  else
    v27 = 0;
  a4[4] = v27;
  a4[1] = v21;
  if ((v25 & 0x60) != 0)
  {
    v28 = (v25 >> 5) & 3;
    if (!v28)
      goto LABEL_55;
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * v28 + 40) + 8 * v18);
  }
  else
  {
    v29 = 0;
  }
  a4[2] = v29;
  if ((v25 & 0x380) != 0)
  {
    v30 = (v25 >> 7) & 7;
    if (!v30)
      goto LABEL_55;
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * v30 + 40) + 8 * v18);
  }
  else
  {
    v31 = 1;
  }
  a4[5] = v31;
  if ((v25 & 0x1C00) != 0)
  {
    v32 = (v25 >> 10) & 7;
    if (!v32)
      goto LABEL_55;
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * v32 + 40) + 8 * v18);
  }
  else
  {
    v33 = 1;
  }
  a4[6] = v33;
  return result;
}

unint64_t ___CFBasicHashFindBucket3@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v43;

  result = (**(uint64_t (***)(void))(a1 + 32))();
  v7 = a1;
  v8 = *(_QWORD *)(a1 + 16);
  if ((v8 & 0x18) != 0)
  {
    v9 = (v8 >> 3) & 3;
    if (!v9)
      goto LABEL_56;
    v10 = (uint64_t *)(a1 + 8 * v9 + 40);
  }
  else
  {
    v10 = (uint64_t *)(a1 + 40);
  }
  v11 = *v10;
  if ((v8 & 0xE000) == 0)
  {
    v12 = 0;
    goto LABEL_9;
  }
  if (!((unsigned __int16)v8 >> 13))
  {
LABEL_56:
    __break(1u);
    return result;
  }
  v12 = *(_QWORD *)(a1 + 8 * ((unsigned __int16)v8 >> 13) + 40);
LABEL_9:
  v13 = (*(__int128 *)(a1 + 16) >> 32) & 0xFFFFFF0000000000;
  v14 = ~v13;
  v15 = (v8 >> 16) & 0x3F;
  v16 = __CFBasicHashTableSizes[v15];
  *a4 = -1;
  a4[1] = ~v13;
  a4[2] = 0;
  a4[3] = ~v13;
  a4[5] = 0;
  a4[6] = 0;
  if (result / v16 % v16)
    v17 = result / v16 % v16;
  else
    v17 = v16 - 1;
  a4[4] = 0;
  v43 = a4;
  v18 = a3;
  if (!v15 || v15 == 63)
    return result;
  v19 = __CFBasicHashPrimitiveRoots[v15];
  v20 = result % v16;
  if (v16 <= 1)
    v21 = 1;
  else
    v21 = v16;
  v22 = -1;
  v23 = __CFBasicHashPrimitiveRoots[v15];
  v24 = result % v16;
  while (1)
  {
    v25 = *(_QWORD *)(v11 + 8 * v24);
    if (v25 == v13)
    {
      if (v22 == -1)
      {
        v43[3] = v13;
        *v43 = v24;
        v43[1] = v13;
      }
      return result;
    }
    if (v18)
      goto LABEL_20;
    if (v25 == v14)
    {
      if (v22 == -1)
      {
        *v43 = v24;
        v22 = v24;
      }
      goto LABEL_20;
    }
    if (v25 == a2)
      break;
    if (!v12 || *(_QWORD *)(v12 + 8 * v24) == result)
    {
      v40 = result;
      v41 = v7;
      v38 = v14;
      v39 = v12;
      v37 = v22;
      v26 = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t, uint64_t))(v7 + 32))(v7, 20, v25, a2);
      v22 = v37;
      v14 = v38;
      v18 = a3;
      v27 = v26 == 0;
      v12 = v39;
      result = v40;
      v7 = v41;
      if (!v27)
        goto LABEL_38;
    }
LABEL_20:
    v24 = v20 + v23 * v17;
    if (v16 <= v24)
      v24 %= v16;
    v23 *= v19;
    if (v16 <= v23)
      v23 %= v16;
    if (!--v21)
      return result;
  }
  v25 = a2;
LABEL_38:
  *v43 = v24;
  v28 = *(_QWORD *)(v7 + 16);
  v29 = v25;
  if ((v28 & 0x18) != 0)
    v29 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * v24);
  v43[3] = v29;
  if ((v28 & 4) != 0)
    v30 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v24);
  else
    v30 = 0;
  v43[4] = v30;
  v43[1] = v25;
  if ((v28 & 0x60) != 0)
  {
    v31 = (v28 >> 5) & 3;
    if (!v31)
      goto LABEL_56;
    v32 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * v31 + 40) + 8 * v24);
  }
  else
  {
    v32 = 0;
  }
  v43[2] = v32;
  if ((v28 & 0x380) != 0)
  {
    v33 = (v28 >> 7) & 7;
    if (!v33)
      goto LABEL_56;
    v34 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * v33 + 40) + 8 * v24);
  }
  else
  {
    v34 = 1;
  }
  v43[5] = v34;
  if ((v28 & 0x1C00) != 0)
  {
    v35 = (v28 >> 10) & 7;
    if (!v35)
      goto LABEL_56;
    v36 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * v35 + 40) + 8 * v24);
  }
  else
  {
    v36 = 1;
  }
  v43[6] = v36;
  return result;
}

uint64_t __CFBasicHashFindNewMarker(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v21;

  v12 = *(_QWORD *)(result + 16);
  v11 = *(_QWORD *)(result + 24);
  if ((v12 & 0x18) != 0)
  {
    v13 = (v12 >> 3) & 3;
    if (!v13)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v14 = (uint64_t **)(result + 8 * v13 + 40);
    v15 = 70;
  }
  else
  {
    v14 = (uint64_t **)(result + 40);
    v15 = 68;
  }
  v4 = v11 >> 8 << 40;
  v5 = ~v4;
  v6 = *v14;
  a4 = (v12 >> 16) & 0x3F;
  v16 = __CFBasicHashTableSizes[a4];
  v13 = 4097;
  if (v11 >> 8)
    v13 = (v11 >> 8) + 1;
  v7 = (1 << v15) & v11;
  v8 = 0;
  if (v16 <= 1)
    v9 = 1;
  else
    v9 = __CFBasicHashTableSizes[a4];
  while (1)
  {
    v10 = v13 << 40;
    if (v13 << 40 != a2)
    {
      a3 = ~(v13 << 40);
      if (a3 != a2)
      {
        if (!a4 || a4 == 63)
          goto LABEL_34;
        v17 = 0;
        v18 = 1;
        v19 = v6;
        while (*v19 != v10 && *v19 != a3)
        {
          v18 = ++v17 < v16;
          ++v19;
          if (v9 == v17)
            goto LABEL_24;
        }
        if (!v18)
          break;
      }
    }
    if (++v13 == 0x4000000)
      goto LABEL_23;
  }
LABEL_24:
  if (a4 && a4 != 63)
  {
    while (1)
    {
      if (v8 | v7)
      {
        v21 = *v6;
        if (v4 != *v6)
          goto LABEL_30;
      }
      else
      {
        v21 = *v6;
        if (*v6 != v4)
        {
LABEL_30:
          if (v21 == v5)
            *v6 = a3;
          goto LABEL_32;
        }
      }
      *v6 = v10;
LABEL_32:
      ++v6;
      if (!--v9)
      {
        v12 = *(_QWORD *)(result + 16);
        v11 = *(_QWORD *)(result + 24);
        break;
      }
    }
  }
LABEL_34:
  *(_QWORD *)(result + 16) = v12;
  *(_QWORD *)(result + 24) = v11 & 0xFFFFFFFF000000FFLL | ((v13 & 0xFFFFFF) << 8);
  return result;
}

void *initUAContinuityErrorDomain()
{
  void *result;

  result = (void *)qword_1ECD0A430;
  if (qword_1ECD0A430
    || (result = dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2),
        (qword_1ECD0A430 = (uint64_t)result) != 0))
  {
    result = *(void **)dlsym(result, "UAContinuityErrorDomain");
    qword_1ECD0A440 = (uint64_t)result;
    getUAContinuityErrorDomain = UAContinuityErrorDomainFunction;
  }
  return result;
}

uint64_t UAContinuityErrorDomainFunction()
{
  return qword_1ECD0A440;
}

uint64_t skipJSON5Comment(uint64_t *a1, char a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  NSString *v15;
  NSNumber *v16;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  v4 = a1[2];
  v5 = a1[3];
  if ((a2 & 1) != 0)
  {
    if (v4 > v5)
    {
      v6 = *a1;
      while (1)
      {
        v7 = *(unsigned __int8 *)(v6 + v5);
        if (v7 == 13)
          break;
        if (v7 == 10)
        {
          a1[3] = v5 + 1;
          ++a1[5];
          a1[6] = v5 + 1;
          return 1;
        }
        a1[3] = ++v5;
        if (v4 == v5)
          goto LABEL_20;
      }
      v18 = v5 + 1;
      a1[3] = v5 + 1;
      if (v4 > v5 + 1 && *(_BYTE *)(v6 + v5 + 1) == 10)
      {
        v18 = v5 + 2;
        a1[3] = v5 + 2;
      }
      ++a1[5];
      a1[6] = v18;
      return 1;
    }
LABEL_20:
    a1[3] = v4;
    return 1;
  }
  v9 = v5 + 1;
  if (v4 > v9)
  {
    v10 = *a1;
    while (*(_BYTE *)(v10 + v9 - 1) != 42 || *(_BYTE *)(v10 + v9) != 47)
    {
      a1[3] = v9++;
      if (v4 == v9)
        goto LABEL_13;
    }
    v4 = v9 + 1;
    goto LABEL_20;
  }
LABEL_13:
  a1[3] = v4;
  if (a3)
  {
    v11 = a1[6];
    v12 = v4 >= v11;
    v13 = v4 - v11;
    if (v12)
      v14 = v13;
    else
      v14 = 0;
    v15 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unterminated block comment"), a1[5], v14);
    v16 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
    v19[0] = CFSTR("NSDebugDescription");
    v19[1] = CFSTR("NSJSONSerializationErrorIndex");
    v20[0] = v15;
    v20[1] = v16;
    *a3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 2));

  }
  return 0;
}

uint64_t __newJSONString_block_invoke()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  objc_msgSend(CFSTR("[[:Lu:][:Ll:][:Lt:][:Lm:][:Lo:][:Nl:]]"), "getCharacters:", (char *)&v1- ((2 * objc_msgSend(CFSTR("[[:Lu:][:Ll:][:Lt:][:Lm:][:Lo:][:Nl:]]"), "length") + 17) & 0xFFFFFFFFFFFFFFF0));
  HIDWORD(v1) = 0;
  objc_msgSend(CFSTR("[[:Lu:][:Ll:][:Lt:][:Lm:][:Lo:][:Nl:]]"), "length");
  result = uset_openPattern();
  qword_1ECD0A450 = result;
  if (SHIDWORD(v1) >= 1)
  {
    qword_1EDC47C18 = (uint64_t)"Unable to open unicode pattern";
    __break(1u);
  }
  return result;
}

void __newJSONString_block_invoke_2(uint64_t a1, void *a2, _BYTE *a3)
{
  free(a2);
  *a3 = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
}

NSString *newJSON5HexNumber(NSString *result, _QWORD *a2)
{
  NSString *v3;
  unint64_t isa;
  Class v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  objc_class *v9;
  objc_class *v10;
  unint64_t v11;
  objc_class *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  objc_class *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  int v25;
  unsigned __int8 v26;
  _BOOL4 v27;
  unint64_t v28;
  int v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  Class v34;
  BOOL v35;
  int64_t v36;
  int64_t v37;
  NSString *v38;
  Class v39;
  int64_t v40;
  int64_t v41;
  Class v42;
  unint64_t v43;
  unint64_t v44;
  Class v45;
  int64_t v46;
  int64_t v47;
  NSString *v48;
  NSNumber *v49;
  Class v50;
  Class v51;
  int64_t v52;
  uint64_t v53;
  NSString *v54;
  Class v55;
  int64_t v56;
  int64_t v57;
  NSString *v58;
  NSNumber *v59;
  uint64_t v60;
  Class v61;
  int64_t v62;
  int64_t v63;
  NSString *v64;
  NSNumber *v65;
  Class v66;
  Class v67;
  int64_t v68;
  uint64_t v69;
  NSNumber *v70;
  Class v71;
  int64_t v72;
  int64_t v73;
  Class v74;
  int64_t v75;
  int64_t v76;
  const __CFString *v77;
  const __CFString *v78;
  NSString *v79;
  NSNumber *v80;
  uint64_t v81;

  v3 = result;
  v81 = *MEMORY[0x1E0C80C00];
  isa = (unint64_t)result[3].super.isa;
  v5 = result->super.isa;
  v6 = (unsigned __int8 *)result->super.isa + isa;
  v7 = *v6;
  v8 = v7;
  v9 = (objc_class *)isa;
  if (v7 == 45)
  {
    v9 = (objc_class *)(isa + 1);
    if (result[2].super.isa <= (Class)(isa + 1))
    {
      if (a2)
      {
        v42 = result[6].super.isa;
        v35 = isa >= (unint64_t)v42;
        v43 = isa - (_QWORD)v42;
        if (v35)
          v44 = v43;
        else
          v44 = 0;
        v38 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Number with minus sign but no digits"), result[5].super.isa, v44);
        goto LABEL_77;
      }
      return 0;
    }
    result[3].super.isa = v9;
    v8 = *((unsigned __int8 *)v9 + (_QWORD)v5);
  }
  if (v8 != 48)
  {
    if (a2)
    {
      v39 = result[6].super.isa;
      v35 = v9 >= v39;
      v40 = v9 - v39;
      if (v35)
        v41 = v40;
      else
        v41 = 0;
      v38 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Hex number without leading zero"), result[5].super.isa, v41);
      goto LABEL_77;
    }
    return 0;
  }
  v10 = (objc_class *)((char *)v9 + 1);
  v11 = (unint64_t)result[2].super.isa;
  if (v11 <= (unint64_t)v9 + 1)
  {
    if (!a2)
      return 0;
    v45 = result[6].super.isa;
    v35 = v9 >= v45;
    v46 = v9 - v45;
    if (v35)
      v47 = v46;
    else
      v47 = 0;
    v48 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unexpected end of file during JSON parse."), result[5].super.isa, v47);
    v49 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", v3[3].super.isa);
    v77 = CFSTR("NSDebugDescription");
    v78 = CFSTR("NSJSONSerializationErrorIndex");
    v79 = v48;
    v80 = v49;
    *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v79, &v77, 2));

    v50 = v3[3].super.isa;
    v51 = v3[6].super.isa;
    v35 = v50 >= v51;
    v52 = v50 - v51;
    if (v35)
      v53 = v52;
    else
      v53 = 0;
    v54 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Hex number without next 'x'"), v3[5].super.isa, v53);
    goto LABEL_86;
  }
  result[3].super.isa = v10;
  if ((*((unsigned __int8 *)v10 + (_QWORD)v5) | 0x20) != 0x78)
  {
    if (a2)
    {
      v55 = result[6].super.isa;
      v35 = v10 >= v55;
      v56 = v10 - v55;
      if (v35)
        v57 = v56;
      else
        v57 = 0;
      v38 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Hex number without 'x'"), result[5].super.isa, v57);
      goto LABEL_77;
    }
    return 0;
  }
  v12 = (objc_class *)((char *)v9 + 2);
  if (v11 <= (unint64_t)v9 + 2)
  {
    if (!a2)
      return 0;
    v61 = result[6].super.isa;
    v35 = v10 >= v61;
    v62 = v10 - v61;
    if (v35)
      v63 = v62;
    else
      v63 = 0;
    v64 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Unexpected end of file during JSON parse."), result[5].super.isa, v63);
    v65 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", v3[3].super.isa);
    v77 = CFSTR("NSDebugDescription");
    v78 = CFSTR("NSJSONSerializationErrorIndex");
    v79 = v64;
    v80 = v65;
    *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v79, &v77, 2));

    v66 = v3[3].super.isa;
    v67 = v3[6].super.isa;
    v35 = v66 >= v67;
    v68 = v66 - v67;
    if (v35)
      v69 = v68;
    else
      v69 = 0;
    v54 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Hex number without next digit (EoF)"), v3[5].super.isa, v69);
LABEL_86:
    v58 = v54;
    v59 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", v3[3].super.isa);
    v77 = CFSTR("NSDebugDescription");
    v78 = CFSTR("NSJSONSerializationErrorIndex");
    v79 = v58;
    v80 = v59;
    v60 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v79, &v77, 2);
    goto LABEL_87;
  }
  result[3].super.isa = v12;
  if ((*((_BYTE *)v12 + (_QWORD)v5) - 48) >= 0xAu
    && ((v13 = *((unsigned __int8 *)v12 + (_QWORD)v5) - 65, v14 = v13 > 0x25, v15 = (1 << v13) & 0x3F0000003FLL, !v14)
      ? (v16 = v15 == 0)
      : (v16 = 1),
        v16))
  {
    if (a2)
    {
      v74 = result[6].super.isa;
      v35 = v12 >= v74;
      v75 = v12 - v74;
      if (v35)
        v76 = v75;
      else
        v76 = 0;
      v38 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Hex number without next digit"), result[5].super.isa, v76);
      goto LABEL_77;
    }
  }
  else
  {
    v17 = (objc_class *)((char *)v9 + 3);
    if (v11 <= (unint64_t)v17)
    {
LABEL_21:
      result[3].super.isa = v17;
    }
    else
    {
      while (1)
      {
        result[3].super.isa = v17;
        if ((*((_BYTE *)v17 + (_QWORD)v5) - 48) > 9u)
        {
          v18 = *((unsigned __int8 *)v17 + (_QWORD)v5) - 65;
          v14 = v18 > 0x25;
          v19 = (1 << v18) & 0x3F0000003FLL;
          if (v14 || v19 == 0)
            break;
        }
        v17 = (objc_class *)((char *)v17 + 1);
        if ((objc_class *)v11 == v17)
        {
          v17 = (objc_class *)v11;
          goto LABEL_21;
        }
      }
    }
    v21 = 0;
    v22 = (unsigned __int8 *)v17 + (_QWORD)v5 - 1;
    if (v7 == 45)
      ++v6;
    v23 = v6 + 2;
    v24 = 1;
    do
    {
      if (v22 < v23)
      {
        if (v7 == 45)
        {
          if (v21 > 0x8000000000000000)
          {
            if (a2)
            {
              v71 = result[6].super.isa;
              v35 = v17 >= v71;
              v72 = v17 - v71;
              if (v35)
                v73 = v72;
              else
                v73 = 0;
              v38 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Hex number with underflow"), result[5].super.isa, v73);
              goto LABEL_77;
            }
            return 0;
          }
          v70 = -[NSNumber initWithLongLong:]([NSNumber alloc], "initWithLongLong:", -(uint64_t)v21);
        }
        else
        {
          v70 = -[NSNumber initWithUnsignedLongLong:]([NSNumber alloc], "initWithUnsignedLongLong:", v21);
        }
        return newJSONNumberCreateRoundTripping((uint64_t)v3, isa, v70);
      }
      v25 = *v22;
      v26 = v25 - 48;
      if ((v25 - 48) >= 0xA)
      {
        if ((v25 - 65) > 5)
        {
          if ((v25 - 97) > 5)
          {
            __break(1u);
            return result;
          }
          v26 = v25 - 87;
        }
        else
        {
          v26 = v25 - 55;
        }
      }
      v27 = 0;
      v28 = 0;
      if (v24 && v26)
      {
        v28 = v24 * v26;
        v27 = __CFADD__(v21, v28) || (v26 * (unsigned __int128)v24) >> 64 != 0;
      }
      --v22;
      if (v24 >> 60)
        v30 = 1;
      else
        v30 = v27;
      v31 = 16 * v24;
      if (v22 >= v23)
      {
        v32 = v24 == 0;
      }
      else
      {
        v31 = v24;
        v32 = 1;
      }
      v21 += v28;
      if (v32)
        v33 = v27;
      else
        v33 = v30;
      v24 = v31;
    }
    while (!v33);
    if (!a2)
      return 0;
    v34 = result[6].super.isa;
    v35 = v17 >= v34;
    v36 = v17 - v34;
    if (v35)
      v37 = v36;
    else
      v37 = 0;
    v38 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Hex number with underflow or overflow"), result[5].super.isa, v37);
LABEL_77:
    v58 = v38;
    v59 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", v3[3].super.isa);
    v77 = CFSTR("NSDebugDescription");
    v78 = CFSTR("NSJSONSerializationErrorIndex");
    v79 = v58;
    v80 = v59;
    v60 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v79, &v77, 2);
LABEL_87:
    *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, v60);

  }
  return 0;
}

NSNumber *newJSON5InfinityOrNaN(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  NSString *v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSString *v30;
  NSNumber *v31;
  double v33;
  unint64_t v34;
  _QWORD v35[2];
  _QWORD v36[3];

  v36[2] = *MEMORY[0x1E0C80C00];
  v4 = a1[3];
  v5 = *a1;
  v6 = *(unsigned __int8 *)(*a1 + v4);
  if (v6 == 45 || v6 == 43)
  {
    v7 = v4 + 1;
    if (a1[2] <= v4 + 1)
    {
      if (a2)
      {
        v9 = a1[6];
        v10 = v4 >= v9;
        v11 = v4 - v9;
        if (v10)
          v12 = v11;
        else
          v12 = 0;
        v13 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Partial negative infinity or NaN around character %lu (EoF)."), a1[5], v12);
        goto LABEL_42;
      }
      return 0;
    }
    a1[3] = v7;
    v8 = *(unsigned __int8 *)(v5 + v7);
  }
  else
  {
    v8 = *(unsigned __int8 *)(*a1 + v4);
    v7 = a1[3];
  }
  v14 = (const char *)(v5 + v7);
  if (v8 == 78)
  {
    if (a1[2] <= v7 + 2)
    {
      a1[3] = v7;
      if (a2)
      {
        v27 = a1[6];
        v10 = v7 >= v27;
        v28 = v7 - v27;
        if (v10)
          v29 = v28;
        else
          v29 = 0;
        v13 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Partial NaN around character %lu (EoF)."), a1[5], v29);
        goto LABEL_42;
      }
      return 0;
    }
    a1[3] = v7 + 2;
    if (strncmp(v14, "NaN", 3uLL))
    {
      a1[3] = v7;
      if (a2)
      {
        v18 = a1[6];
        v10 = v7 >= v18;
        v19 = v7 - v18;
        if (v10)
          v20 = v19;
        else
          v20 = 0;
        v13 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Invalid NaN around character %lu (EoF)."), a1[5], v20);
        goto LABEL_42;
      }
      return 0;
    }
    if (v6 == 45)
      v33 = NAN;
    else
      v33 = NAN;
    v34 = v7 + 3;
  }
  else
  {
    if (v8 != 73)
    {
      a1[3] = v7;
      if (a2)
      {
        v21 = a1[6];
        v10 = v7 >= v21;
        v22 = v7 - v21;
        if (v10)
          v23 = v22;
        else
          v23 = 0;
        v13 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Invalid Infinity or NaN"), a1[5], v23);
        goto LABEL_42;
      }
      return 0;
    }
    if (a1[2] <= v7 + 7)
    {
      a1[3] = v7;
      if (a2)
      {
        v24 = a1[6];
        v10 = v7 >= v24;
        v25 = v7 - v24;
        if (v10)
          v26 = v25;
        else
          v26 = 0;
        v13 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Partial infinity around character %lu (EoF)."), a1[5], v26);
        goto LABEL_42;
      }
      return 0;
    }
    a1[3] = v7 + 7;
    if (strncmp(v14, "Infinity", 8uLL))
    {
      a1[3] = v7;
      if (a2)
      {
        v15 = a1[6];
        v10 = v7 >= v15;
        v16 = v7 - v15;
        if (v10)
          v17 = v16;
        else
          v17 = 0;
        v13 = -[NSString initWithFormat:]([NSString alloc], "initWithFormat:", CFSTR("%@ around line %lu, column %lu."), CFSTR("Invalid infinity around character %lu (EoF)."), a1[5], v17);
LABEL_42:
        v30 = v13;
        v31 = -[NSNumber initWithUnsignedInteger:]([NSNumber alloc], "initWithUnsignedInteger:", a1[3]);
        v35[0] = CFSTR("NSDebugDescription");
        v35[1] = CFSTR("NSJSONSerializationErrorIndex");
        v36[0] = v30;
        v36[1] = v31;
        *a2 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 3840, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, v35, 2));

        return 0;
      }
      return 0;
    }
    if (v6 == 45)
      v33 = -INFINITY;
    else
      v33 = INFINITY;
    v34 = v7 + 8;
  }
  a1[3] = v34;
  return -[NSNumber initWithDouble:]([NSNumber alloc], "initWithDouble:", v33);
}

uint64_t _NSLinguisticDataPath()
{
  uint64_t result;
  const __CFString *v1;
  NSArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  NSString *v8;
  NSString *v9;
  NSString *v10;
  _BYTE v11[128];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = _NSLinguisticDataPath_dataPath;
  if (!_NSLinguisticDataPath_dataPath)
  {
    v1 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", CFSTR("NSLinguisticDataPath"));
    if (!v1 || (_NSIsNSString() & 1) == 0)
    {
      v2 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 8uLL, 1);
      v12 = 0u;
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      v3 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v12, v11, 16);
      if (v3)
      {
        v4 = v3;
        v5 = *(_QWORD *)v13;
        while (2)
        {
          for (i = 0; i != v4; ++i)
          {
            if (*(_QWORD *)v13 != v5)
              objc_enumerationMutation(v2);
            v7 = objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "stringByAppendingPathComponent:", CFSTR("LinguisticData"));
            if (-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", v7))
            {
              v1 = (const __CFString *)v7;
              goto LABEL_14;
            }
          }
          v4 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v12, v11, 16);
          if (v4)
            continue;
          break;
        }
      }
LABEL_14:
      if (!v1)
        v1 = CFSTR("/System/Library/LinguisticData");
    }
    if (getenv("IPHONE_SIMULATOR_ROOT")
      && (v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:")) != 0)
    {
      v9 = -[NSString stringByAppendingPathComponent:](v8, "stringByAppendingPathComponent:", v1);
    }
    else
    {
      v9 = +[NSString stringWithString:](NSString, "stringWithString:", v1);
    }
    _NSLinguisticDataPath_dataPath = (uint64_t)v9;
    v10 = v9;
    return _NSLinguisticDataPath_dataPath;
  }
  return result;
}

uint64_t joinTokensInRange(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 *v5;
  _BYTE *v6;
  _OWORD *v7;
  __int128 v8;

  if (result)
  {
    if (a3 >= 2)
    {
      v3 = a2 + a3;
      v4 = qword_1ECD0A560;
      if (a2 + a3 <= qword_1ECD0A560)
      {
        v5 = (__int128 *)(result + 16 * v3);
        v6 = (_BYTE *)(result + 16 * a2);
        v6[2] = *((_BYTE *)v5 - 14) + *((_BYTE *)v5 - 16) - *v6;
        if (v3 < v4)
        {
          v7 = v6 + 16;
          do
          {
            v8 = *v5++;
            *v7++ = v8;
            ++v3;
          }
          while (v3 < v4);
        }
        qword_1ECD0A560 = v4 - a3 + 1;
      }
    }
  }
  return result;
}

uint64_t sentenceRangeAtIndexInTokens(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned int v35;
  unint64_t v36;

  result = 0x7FFFFFFFFFFFFFFFLL;
  if (!a5)
  {
    v19 = 0;
    v9 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_68;
  }
  v8 = 0;
  v9 = 0x7FFFFFFFFFFFFFFFLL;
  v10 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v11 = v9;
    v12 = 0x7FFFFFFFFFFFFFFFLL;
    v9 = v8;
    v13 = (unsigned __int16 *)(a4 + 16 * v8);
    while (1)
    {
      if (v9)
        v14 = *v13;
      else
        v14 = 0;
      v15 = v9 + 1;
      v16 = a3;
      if (v9 + 1 < a5)
        v16 = v13[8];
      v17 = v14 + a2;
      if (v16 + a2 > a1 && v17 <= a1)
        v12 = v9;
      if (*((_BYTE *)v13 + 3) == 2)
        break;
      v13 += 8;
      ++v9;
      if (a5 == v15)
      {
        v9 = 0x7FFFFFFFFFFFFFFFLL;
        if (v12 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v19 = 0;
LABEL_22:
          result = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_68;
        }
        goto LABEL_24;
      }
    }
    if (v12 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v8 = v9 + 1;
      v10 = v11;
      if (a5 - 1 != v9)
        continue;
      v19 = 0;
      v9 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_22;
    }
    break;
  }
LABEL_24:
  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    if (a5 <= v11 + 1)
      v21 = v11 + 1;
    else
      v21 = a5;
    v22 = v21 - 1;
    v23 = (unsigned __int16 *)(a4 + 16 * v11 + 16);
    while (1)
    {
      v24 = v11++;
      if (v11 >= a5)
        break;
      v16 = *v23;
      if (*((unsigned __int8 *)v23 - 14) + *(v23 - 8) == (_DWORD)v16)
      {
        v25 = *((unsigned __int8 *)v23 + 3) - 14;
        v23 += 8;
        if (v25 > 0xFFFFFFF4)
          continue;
      }
      goto LABEL_35;
    }
    v24 = v22;
    v16 = a3;
LABEL_35:
    if (v16 > a1)
    {
      v20 = 0x7FFFFFFFFFFFFFFFLL;
      if (v10 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (a5 <= v10 + 1)
          v26 = v10 + 1;
        else
          v26 = a5;
        v27 = v26 - 1;
        v28 = (unsigned __int16 *)(a4 + 16 * v10 + 16);
        while (1)
        {
          v20 = v10++;
          if (v10 >= a5)
            break;
          v16 = *v28;
          if (*((unsigned __int8 *)v28 - 14) + *(v28 - 8) == (_DWORD)v16)
          {
            v29 = *((unsigned __int8 *)v28 + 3) - 14;
            v28 += 8;
            if (v29 > 0xFFFFFFF4)
              continue;
          }
          goto LABEL_47;
        }
        v16 = a3;
        v20 = v27;
      }
      goto LABEL_47;
    }
    v20 = v24;
  }
  v24 = v9;
LABEL_47:
  if (v20 == 0x7FFFFFFFFFFFFFFFLL)
    v9 = 0;
  else
    v9 = v20 + 1;
  if (v20 == 0x7FFFFFFFFFFFFFFFLL)
    v30 = 0;
  else
    v30 = v16;
  result = v30 + a2;
  if (v24 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v31 = a5;
  }
  else
  {
    v32 = v24 + 1;
    if (a5 <= v24 + 1)
      v33 = v24 + 1;
    else
      v33 = a5;
    v34 = (unsigned __int16 *)(a4 + 16 * v24 + 16);
    while (v32 < a5)
    {
      v31 = v32;
      if (*((unsigned __int8 *)v34 - 14) + *(v34 - 8) == *v34)
      {
        v35 = *((unsigned __int8 *)v34 + 3) - 14;
        v34 += 8;
        ++v32;
        if (v35 > 0xFFFFFFF4)
          continue;
      }
      goto LABEL_64;
    }
    v31 = v33;
  }
LABEL_64:
  v19 = v31 - v9;
  if (v19 >= 0x101)
  {
    if (v12 < v9 + 256
      || (v36 = (v12 - v9) & 0xFFFFFFFFFFFFFF00,
          v9 += v36,
          v19 -= v36,
          result = a2 + *(unsigned __int16 *)(a4 + 16 * v9),
          v19 >= 0x101))
    {
      v19 = 256;
    }
  }
LABEL_68:
  if (a6)
  {
    *a6 = v9;
    a6[1] = v19;
  }
  return result;
}

id tagForNLTag(void *a1)
{
  id result;

  if (qword_1ECD0A5A8 == -1)
  {
    if (a1)
      goto LABEL_3;
    return 0;
  }
  dispatch_once(&qword_1ECD0A5A8, &__block_literal_global_441);
  if (!a1)
    return 0;
LABEL_3:
  result = (id)objc_msgSend((id)qword_1ECD0A5A0, "objectForKey:", a1);
  if (!result)
    return a1;
  return result;
}

void sub_181FDD5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181FE0398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __loadNLTagger_block_invoke()
{
  const char *v0;
  void *v1;
  void *v2;
  BOOL v3;
  uint64_t (*v11)(_QWORD, _QWORD, _QWORD);

  v0 = (const char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)_NSLinguisticDataPath(), "stringByDeletingLastPathComponent"), "stringByAppendingPathComponent:", CFSTR("PrivateFrameworks/CoreNLP.framework/CoreNLP")), "fileSystemRepresentation");
  v1 = dlopen(v0, 256);
  if (v1)
  {
    v2 = v1;
    off_1ECD0A478 = (uint64_t (*)(_QWORD, _QWORD))dlsym(v1, "NLTaggerCreate");
    off_1ECD0A510 = (uint64_t (*)(_QWORD, _QWORD))dlsym(v2, "NLTaggerSetString");
    off_1ECD0A520 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))dlsym(v2, "NLTaggerSetLocaleForRange");
    off_1ECD0A518 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))dlsym(v2, "NLTaggerSetStringEditedInRange");
    off_1ECD0A540 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v2, "NLTaggerEnumerateTokens");
    off_1ECD0A548 = (uint64_t (*)(_QWORD, _QWORD))dlsym(v2, "NLTaggerCopyTagForCurrentToken");
    off_1ECD0A538 = (_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))dlsym(v2, "NLTaggerGetTokenAtIndex");
    off_1ECD0A528 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))dlsym(v2, "NLTaggerCopyTagAtIndex");
    off_1ECD0A460 = (uint64_t (*)(_QWORD, _QWORD))dlsym(v2, "NLTaggerCopyAvailableTagSchemes");
    off_1ECD0A530 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))dlsym(v2, "NLTaggerCopyLanguageMapAtIndex");
  }
  if (off_1ECD0A478)
    v3 = off_1ECD0A510 == 0;
  else
    v3 = 1;
  if (v3
    || off_1ECD0A520 == 0
    || off_1ECD0A518 == 0
    || off_1ECD0A540 == 0
    || off_1ECD0A548 == 0
    || off_1ECD0A538 == 0
    || off_1ECD0A528 == 0
    || off_1ECD0A460 == 0)
  {
    _MergedGlobals_142 = 0;
    v11 = off_1ECD0A530;
  }
  else
  {
    _MergedGlobals_142 = off_1ECD0A530 != 0;
    if (off_1ECD0A530)
      return;
    v11 = 0;
  }
  NSLog((NSString *)CFSTR("NSLinguisticTagger failed to load NLTagger, results %p %p %p %p %p %p %p %p %p %p"), off_1ECD0A478, off_1ECD0A510, off_1ECD0A520, off_1ECD0A518, off_1ECD0A540, off_1ECD0A548, off_1ECD0A538, off_1ECD0A528, off_1ECD0A460, v11);
}

id __tagForNLTag_block_invoke()
{
  id result;
  _QWORD v1[31];
  _QWORD v2[32];

  v2[31] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("Word");
  v1[1] = CFSTR("Punctuation");
  v2[0] = CFSTR("Word");
  v2[1] = CFSTR("Punctuation");
  v1[2] = CFSTR("Whitespace");
  v1[3] = CFSTR("Other");
  v2[2] = CFSTR("Whitespace");
  v2[3] = CFSTR("Other");
  v1[4] = CFSTR("Noun");
  v1[5] = CFSTR("Verb");
  v2[4] = CFSTR("Noun");
  v2[5] = CFSTR("Verb");
  v1[6] = CFSTR("Adjective");
  v1[7] = CFSTR("Adverb");
  v2[6] = CFSTR("Adjective");
  v2[7] = CFSTR("Adverb");
  v1[8] = CFSTR("Pronoun");
  v1[9] = CFSTR("Determiner");
  v2[8] = CFSTR("Pronoun");
  v2[9] = CFSTR("Determiner");
  v1[10] = CFSTR("Particle");
  v1[11] = CFSTR("Preposition");
  v2[10] = CFSTR("Particle");
  v2[11] = CFSTR("Preposition");
  v1[12] = CFSTR("Number");
  v1[13] = CFSTR("Conjunction");
  v2[12] = CFSTR("Number");
  v2[13] = CFSTR("Conjunction");
  v1[14] = CFSTR("Interjection");
  v1[15] = CFSTR("Classifier");
  v2[14] = CFSTR("Interjection");
  v2[15] = CFSTR("Classifier");
  v1[16] = CFSTR("Idiom");
  v1[17] = CFSTR("OtherWord");
  v2[16] = CFSTR("Idiom");
  v2[17] = CFSTR("OtherWord");
  v1[18] = CFSTR("SentenceTerminator");
  v1[19] = CFSTR("OpenQuote");
  v2[18] = CFSTR("SentenceTerminator");
  v2[19] = CFSTR("OpenQuote");
  v1[20] = CFSTR("CloseQuote");
  v1[21] = CFSTR("OpenParenthesis");
  v2[20] = CFSTR("CloseQuote");
  v2[21] = CFSTR("OpenParenthesis");
  v1[22] = CFSTR("CloseParenthesis");
  v1[23] = CFSTR("WordJoiner");
  v2[22] = CFSTR("CloseParenthesis");
  v2[23] = CFSTR("WordJoiner");
  v1[24] = CFSTR("Dash");
  v1[25] = CFSTR("Punctuation");
  v2[24] = CFSTR("Dash");
  v2[25] = CFSTR("Punctuation");
  v1[26] = CFSTR("ParagraphBreak");
  v1[27] = CFSTR("Whitespace");
  v2[26] = CFSTR("ParagraphBreak");
  v2[27] = CFSTR("Whitespace");
  v1[28] = CFSTR("PersonalName");
  v1[29] = CFSTR("PlaceName");
  v2[28] = CFSTR("PersonalName");
  v2[29] = CFSTR("PlaceName");
  v1[30] = CFSTR("OrganizationName");
  v2[30] = CFSTR("OrganizationName");
  result = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 31);
  qword_1ECD0A5A0 = (uint64_t)result;
  return result;
}

const void *getLXLemmatizer(__CFString *a1)
{
  __CFString *v1;
  const void *Value;
  const __CFDictionary *Mutable;
  __CFString *v4;
  const void *v5;
  CFTypeID v6;

  if (!a1)
    return 0;
  v1 = a1;
  if (-[__CFString isEqualToString:](a1, "isEqualToString:", CFSTR("en")))
    v1 = CFSTR("en_US");
  if (-[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("es")))
    v1 = CFSTR("es_ES");
  if (-[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("pt")))
    v1 = CFSTR("pt_BR");
  if (qword_1ECD0A5B8 != -1)
    dispatch_once(&qword_1ECD0A5B8, &__block_literal_global_606);
  Value = 0;
  if (off_1ECD0A5C0 && off_1ECD0A5C8)
  {
    objc_msgSend((id)qword_1ECD0A5D0, "lock");
    Mutable = (const __CFDictionary *)qword_1ECD0A5B0;
    if (!qword_1ECD0A5B0)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
      qword_1ECD0A5B0 = (uint64_t)Mutable;
    }
    Value = CFDictionaryGetValue(Mutable, v1);
    if (!Value)
    {
      Value = (const void *)off_1ECD0A5C0(v1, 0);
      if (Value)
      {
        v4 = v1;
        v5 = Value;
      }
      else
      {
        v5 = (const void *)*MEMORY[0x1E0C9B0D0];
        v4 = v1;
      }
      CFDictionaryAddValue((CFMutableDictionaryRef)qword_1ECD0A5B0, v4, v5);
    }
    v6 = CFGetTypeID(Value);
    if (v6 == CFNullGetTypeID())
      Value = 0;
    objc_msgSend((id)qword_1ECD0A5D0, "unlock");
  }
  return Value;
}

NSString *lemmatizerLemmaForStringWithCategory(uint64_t a1, void *a2, int a3)
{
  char v6;
  NSString *v7;
  const void *v8;
  const void *v9;
  _QWORD v11[7];
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  objc_msgSend((id)qword_1ECD0A5D0, "lock");
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  if ((a3 - 16) > 0x45)
    v6 = 12;
  else
    v6 = byte_1822DA728[(char)(a3 - 16)];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __lemmatizerLemmaForStringWithCategory_block_invoke;
  v11[3] = &unk_1E0F52168;
  v11[5] = &v17;
  v11[6] = a1;
  v12 = v6;
  v11[4] = &v13;
  enumerateNormalizedStrings(a2, (uint64_t)v11);
  if (v18[3] || v14[3])
  {
    v7 = +[NSString stringWithString:](NSString, "stringWithString:");
    v8 = (const void *)v18[3];
    if (v8)
      CFRelease(v8);
  }
  else
  {
    v7 = 0;
  }
  v9 = (const void *)v14[3];
  if (v9)
    CFRelease(v9);
  objc_msgSend((id)qword_1ECD0A5D0, "unlock");
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v7;
}

void sub_181FE0B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

uint64_t lemmatizerAddTagsForString(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD v7[7];

  v7[6] = *MEMORY[0x1E0C80C00];
  objc_msgSend((id)qword_1ECD0A5D0, "lock");
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __lemmatizerAddTagsForString_block_invoke;
  v7[3] = &unk_1E0F521E0;
  v7[4] = a3;
  v7[5] = a1;
  enumerateNormalizedStrings(a2, (uint64_t)v7);
  return objc_msgSend((id)qword_1ECD0A5D0, "unlock");
}

uint64_t __tagForWordToken_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v7;

  v5 = objc_msgSend(a2, "integerValue");
  if (v5 == objc_msgSend(a3, "integerValue"))
    return 0;
  v7 = objc_msgSend(a2, "integerValue");
  if (v7 > objc_msgSend(a3, "integerValue"))
    return -1;
  else
    return 1;
}

NSLock *__getLXLemmatizer_block_invoke()
{
  const char *v0;
  void *v1;
  void *v2;
  NSLock *result;

  v0 = (const char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)_NSLinguisticDataPath(), "stringByDeletingLastPathComponent"), "stringByAppendingPathComponent:", CFSTR("PrivateFrameworks/Lexicon.framework/Lexicon")), "fileSystemRepresentation");
  v1 = dlopen(v0, 256);
  if (v1)
  {
    v2 = v1;
    off_1ECD0A5C0 = (uint64_t (*)(_QWORD, _QWORD))dlsym(v1, "LXLemmatizerCreate");
    off_1ECD0A5C8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))dlsym(v2, "LXLemmatizerEnumerateLemmasforString");
  }
  result = objc_alloc_init(NSLock);
  qword_1ECD0A5D0 = (uint64_t)result;
  return result;
}

uint64_t enumerateNormalizedStrings(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((byte_1ECD0A459 & 1) == 0)
  {
    v12 = 0x20182019201C201DLL;
    qword_1ECD0A5D8 = -[NSString initWithCharacters:length:]([NSString alloc], "initWithCharacters:length:", (char *)&v12 + 6, 1);
    qword_1ECD0A5E0 = -[NSString initWithCharacters:length:]([NSString alloc], "initWithCharacters:length:", (char *)&v12 + 4, 1);
    qword_1ECD0A5E8 = -[NSString initWithCharacters:length:]([NSString alloc], "initWithCharacters:length:", (char *)&v12 + 2, 1);
    qword_1ECD0A5F0 = -[NSString initWithCharacters:length:]([NSString alloc], "initWithCharacters:length:", &v12, 1);
    v4 = objc_alloc(MEMORY[0x1E0C99D80]);
    qword_1ECD0A5F8 = objc_msgSend(v4, "initWithObjectsAndKeys:", CFSTR("not"), CFSTR("n't"), CFSTR("have"), CFSTR("'ve"), CFSTR("will"), CFSTR("'ll"), CFSTR("am"), CFSTR("'m"), CFSTR("are"), CFSTR("'re"), CFSTR("had"), CFSTR("'d"), 0, v12, v13);
    byte_1ECD0A459 = 1;
  }
  objc_msgSend(a1, "rangeOfString:", qword_1ECD0A5D8);
  if (v5)
    a1 = (void *)objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", qword_1ECD0A5D8, CFSTR("'"));
  objc_msgSend(a1, "rangeOfString:", qword_1ECD0A5E0);
  if (v6)
    a1 = (void *)objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", qword_1ECD0A5E0, CFSTR("'"));
  objc_msgSend(a1, "rangeOfString:", qword_1ECD0A5E8);
  if (v7)
    a1 = (void *)objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", qword_1ECD0A5E8, CFSTR("\""));
  objc_msgSend(a1, "rangeOfString:", qword_1ECD0A5F0);
  if (v8)
    a1 = (void *)objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", qword_1ECD0A5F0, CFSTR("\""));
  BYTE6(v12) = 0;
  result = (*(uint64_t (**)(uint64_t, void *, char *))(a2 + 16))(a2, a1, (char *)&v12 + 6);
  if (!BYTE6(v12))
  {
    v10 = (void *)objc_msgSend(a1, "lowercaseString");
    if ((objc_msgSend(v10, "isEqualToString:", a1) & 1) != 0
      || (result = (*(uint64_t (**)(uint64_t, void *, char *))(a2 + 16))(a2, v10, (char *)&v12 + 6), !BYTE6(v12)))
    {
      v11 = (void *)objc_msgSend(v10, "capitalizedString");
      if ((objc_msgSend(v11, "isEqualToString:", a1) & 1) != 0
        || (result = (*(uint64_t (**)(uint64_t, void *, char *))(a2 + 16))(a2, v11, (char *)&v12 + 6),
            !BYTE6(v12)))
      {
        result = objc_msgSend((id)qword_1ECD0A5F8, "objectForKey:", v10);
        if (result)
          return (*(uint64_t (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, result, (char *)&v12 + 6);
      }
    }
  }
  return result;
}

uint64_t __lemmatizerLemmaForStringWithCategory_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  _QWORD v8[4];
  __int128 v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 48);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __lemmatizerLemmaForStringWithCategory_block_invoke_2;
  v8[3] = &unk_1E0F52140;
  v10 = *(_BYTE *)(a1 + 56);
  v9 = *(_OWORD *)(a1 + 32);
  result = off_1ECD0A5C8(v5, a2, v8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    v7 = 1;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
  *a3 = v7;
  return result;
}

_QWORD *__lemmatizerLemmaForStringWithCategory_block_invoke_2(_QWORD *result, CFTypeRef cf, int a3, _BYTE *a4)
{
  _QWORD *v7;

  v7 = result;
  if (!*(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24))
  {
    result = CFRetain(cf);
    *(_QWORD *)(*(_QWORD *)(v7[4] + 8) + 24) = result;
  }
  if (*((unsigned __int8 *)v7 + 48) == a3)
  {
    result = CFRetain(cf);
    *(_QWORD *)(*(_QWORD *)(v7[5] + 8) + 24) = result;
    *a4 = 1;
  }
  return result;
}

void __lemmatizerAddTagsForString_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[7];
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2020000000;
  v15[3] = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v6 = MEMORY[0x1E0C809B0];
  v7 = *(_QWORD *)(a1 + 40);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __lemmatizerAddTagsForString_block_invoke_2;
  v10[3] = &unk_1E0F52190;
  v10[4] = &v11;
  off_1ECD0A5C8(v7, a2, v10);
  v9[0] = v6;
  v9[1] = 3221225472;
  v9[2] = __lemmatizerAddTagsForString_block_invoke_3;
  v9[3] = &unk_1E0F521B8;
  v8 = *(_QWORD *)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v9[5] = &v11;
  v9[6] = v15;
  off_1ECD0A5C8(v8, a2, v9);
  *a3 = v12[3] > 0;
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(v15, 8);
}

void sub_181FE12B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t __lemmatizerAddTagsForString_block_invoke_2(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t __lemmatizerAddTagsForString_block_invoke_3(uint64_t a1, uint64_t a2, int a3)
{
  const __CFString *v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  if ((a3 - 1) > 0xA)
    v4 = CFSTR("OtherWord");
  else
    v4 = off_1E0F52440[(char)(a3 - 1)];
  v5 = (void *)objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v4);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)
     - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v5)
    v6 += objc_msgSend(v5, "integerValue");
  result = objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v6), v4);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  return result;
}

uint64_t _validateFilename(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = (void *)objc_msgSend(a1, "pathComponents");
  v2 = objc_msgSend(v1, "count");
  if ((unint64_t)(v2 - 3) < 0xFFFFFFFFFFFFFFFELL)
    return 0;
  v3 = v2;
  v4 = (void *)objc_msgSend(v1, "firstObject");
  if ((objc_msgSend(v4, "isEqualToString:", CFSTR("/")) & 1) != 0
    || (objc_msgSend(v4, "isEqualToString:", CFSTR("..")) & 1) != 0
    || (objc_msgSend(v4, "isEqualToString:", CFSTR(".")) & 1) != 0)
  {
    return 0;
  }
  if (v3 == 1)
    return 1;
  return objc_msgSend((id)objc_msgSend(v1, "objectAtIndexedSubscript:", 1), "isEqualToString:", CFSTR("/"));
}

uint64_t _NSDescribeFileContentsInstance(void *a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  void *v11;
  NSString *v12;
  size_t v13;
  NSString *v14;
  size_t v15;
  void *v16;
  void *v17;
  uint64_t result;
  uint64_t v19;
  size_t v20;
  int v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE __b[1001];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v10 = (void *)objc_msgSend(a2, "preferredFilename");
  v11 = v10;
  if (!a3 || (objc_msgSend(v10, "isEqualToString:", a3) & 1) != 0)
  {
    v12 = (NSString *)&stru_1E0F56070;
    if ((_DWORD)a5)
      goto LABEL_4;
LABEL_12:
    v14 = 0;
    goto LABEL_16;
  }
  v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(" (%@)"), a3);
  if (!(_DWORD)a5)
    goto LABEL_12;
LABEL_4:
  if ((unint64_t)(4 * a4 + 4) >= 0x3E8)
    v13 = 1000;
  else
    v13 = 4 * a4 + 4;
  if (a2[1])
  {
    bzero(__b, 0x3E9uLL);
    if (v13)
      memset(__b, 32, v13);
    __b[v13] = 0;
    v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Type: %@, mode:0%ho, mod time: %@"), objc_msgSend(a2[1], "fileType"), (unsigned __int16)objc_msgSend(a2[1], "filePosixPermissions"), objc_msgSend(a2[1], "fileModificationDate")));
  }
  else
  {
    bzero(__b, 0x3E9uLL);
    if (v13)
      memset(__b, 32, v13);
    __b[v13] = 0;
    v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@(No file attribute information.)"), +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4));
  }
LABEL_16:
  if (objc_msgSend(a2, "isDirectory"))
  {
    bzero(__b, 0x3E9uLL);
    if ((unint64_t)(4 * a4) >= 0x3E8)
      v15 = 1000;
    else
      v15 = 4 * a4;
    if (v15)
      memset(__b, 32, v15);
    __b[v15] = 0;
    objc_msgSend(a1, "appendFormat:", CFSTR("%@Directory %@%@ <%p>: %@ children.  %@ icon.\n"), +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), v11, v12, a2, +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lu"), objc_msgSend((id)objc_msgSend(a2, "fileWrappers"), "count")), CFSTR("No"));
    if (v14)
      objc_msgSend(a1, "appendFormat:", CFSTR("%@\n"), v14);
    v16 = (void *)objc_msgSend(a2, "fileWrappers");
    v17 = (void *)objc_msgSend(v16, "keyEnumerator");
    result = objc_msgSend(v17, "nextObject");
    if (result)
    {
      v19 = result;
      do
      {
        _NSDescribeFileContentsInstance(a1, objc_msgSend(v16, "objectForKey:", v19), v19, a4 + 1, a5);
        result = objc_msgSend(v17, "nextObject");
        v19 = result;
      }
      while (result);
    }
    return result;
  }
  if (objc_msgSend(a2, "isSymbolicLink"))
  {
    bzero(__b, 0x3E9uLL);
    if ((unint64_t)(4 * a4) >= 0x3E8)
      v20 = 1000;
    else
      v20 = 4 * a4;
    if (v20)
      memset(__b, 32, v20);
    __b[v20] = 0;
    result = objc_msgSend(a1, "appendFormat:", CFSTR("%@Symbolic link %@%@ <%p>: destination '%@'.  %@ icon.\n"), +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), v11, v12, a2, objc_msgSend(a2, "symbolicLinkDestinationURL"), CFSTR("No"));
LABEL_42:
    if (v14)
      return objc_msgSend(a1, "appendFormat:", CFSTR("%@"), v14, v23, v24, v25);
    return result;
  }
  v21 = objc_msgSend(a2, "isRegularFile");
  if ((unint64_t)(4 * a4) >= 0x3E8)
    v22 = 1000;
  else
    v22 = 4 * a4;
  if (v21)
  {
    bzero(__b, 0x3E9uLL);
    if (v22)
      memset(__b, 32, v22);
    __b[v22] = 0;
    result = objc_msgSend(a1, "appendFormat:", CFSTR("%@Regular file %@%@ <%p>: length %lu.  %@ icon.\n"), +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), v11, v12, a2, objc_msgSend((id)objc_msgSend(a2, "regularFileContents"), "length"), CFSTR("No"));
    goto LABEL_42;
  }
  bzero(__b, 0x3E9uLL);
  if (v22)
    memset(__b, 32, v22);
  __b[v22] = 0;
  return objc_msgSend(a1, "appendFormat:", CFSTR("%@!!! %@%@ <%p> is not a directory, symlink, or file! So what the hell is it?\n"), +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), v11, v12, a2);
}

NSString *_NXCurrentWorkingDir()
{
  return -[NSFileManager currentDirectoryPath](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "currentDirectoryPath");
}

uint64_t _NXRenameFile(uint64_t a1, uint64_t a2)
{
  return -[NSFileManager moveItemAtPath:toPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "moveItemAtPath:toPath:error:", a1, a2, 0)- 1;
}

uint64_t _NXAccessFile(uint64_t a1, uint64_t a2)
{
  NSFileManager *v4;
  NSFileManager *v5;
  unsigned int v6;

  v4 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  v5 = v4;
  if (!a2)
  {
    v6 = -[NSFileManager fileExistsAtPath:](v4, "fileExistsAtPath:", a1);
    return v6 - 1;
  }
  if ((a2 & 4) == 0)
  {
    v6 = 1;
    if ((a2 & 2) == 0)
      goto LABEL_9;
LABEL_7:
    if (v6)
      v6 = -[NSFileManager isWritableFileAtPath:](v5, "isWritableFileAtPath:", a1);
    goto LABEL_9;
  }
  v6 = -[NSFileManager isReadableFileAtPath:](v4, "isReadableFileAtPath:", a1);
  if ((a2 & 2) != 0)
    goto LABEL_7;
LABEL_9:
  if ((a2 & 1) != 0 && v6)
    v6 = -[NSFileManager isExecutableFileAtPath:](v5, "isExecutableFileAtPath:", a1);
  return v6 - 1;
}

uint64_t _NXChmodFile(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInt:", a2);
  v4 = (void *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", v3, CFSTR("NSFilePosixPermissions"), 0);
  LODWORD(a1) = -[NSFileManager changeFileAttributes:atPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "changeFileAttributes:atPath:", v4, a1);

  return a1 - 1;
}

uint64_t _NXStatFile(uint64_t a1, stat *a2)
{
  return stat(-[NSFileManager fileSystemRepresentationWithPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileSystemRepresentationWithPath:", a1), a2);
}

uint64_t _NXMakeDirs(void *a1, uint64_t a2)
{
  void *v5;
  void *v6;
  _BOOL4 v7;

  if ((objc_msgSend(a1, "isEqualToString:", &stru_1E0F56070) & 1) != 0
    || -[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", a1))
  {
    return 0;
  }
  if (_NXMakeDirs(objc_msgSend(a1, "stringByDeletingLastPathComponent"), a2))
    return -1;
  v5 = (void *)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInt:", a2);
  v6 = (void *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", v5, CFSTR("NSFilePosixPermissions"), 0);
  v7 = -[NSFileManager createDirectoryAtPath:attributes:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "createDirectoryAtPath:attributes:", a1, v6);

  return v7 - 1;
}

uint64_t _NXRemoveDocument(uint64_t a1)
{
  if (-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", a1))
  {
    return -[NSFileManager removeItemAtPath:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "removeItemAtPath:error:", a1, 0)- 1;
  }
  else
  {
    return 0;
  }
}

NSDocInfo *_NSDocInfoFromFileAttributes(NSDocInfo *result, int a2)
{
  NSDocInfo *v3;
  NSDocInfo *v4;
  void *v5;
  uint64_t v6;
  double v7;
  void *v8;
  void *v9;
  __int16 v10;

  if (result)
  {
    v3 = result;
    v4 = objc_alloc_init(NSDocInfo);
    v5 = (void *)-[NSDocInfo fileModificationDate](v3, "fileModificationDate");
    v6 = 0;
    if (a2 && v5)
    {
      objc_msgSend(v5, "timeIntervalSince1970");
      v6 = (uint64_t)v7;
    }
    v4->time = v6;
    v4->mode = -[NSDocInfo filePosixPermissions](v3, "filePosixPermissions");
    v8 = (void *)-[NSDocInfo fileType](v3, "fileType");
    if (v8)
    {
      v9 = v8;
      *(&v4->mode + 1) = *(&v4->mode + 1) & 0xFFFE | objc_msgSend(v8, "isEqualToString:", CFSTR("NSFileTypeDirectory"));
      if (objc_msgSend(v9, "isEqualToString:", CFSTR("NSFileTypeSymbolicLink")))
        v10 = 4;
      else
        v10 = 0;
      *(&v4->mode + 1) = *(&v4->mode + 1) & 0xFFF9 | v10;
    }
    return v4;
  }
  return result;
}

uint64_t unallocate(mach_vm_address_t address, mach_vm_size_t size)
{
  uint64_t result;

  result = mach_vm_deallocate(*MEMORY[0x1E0C83DA0], address, size);
  if ((_DWORD)result)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSOtherSerializationException"), CFSTR("can't deallocate"), 0));
  return result;
}

vm_address_t extendStreamFor(vm_address_t result, uint64_t a2)
{
  mach_vm_size_t v2;
  mach_vm_size_t v3;
  vm_address_t v4;
  uint64_t v5;
  vm_size_t v6;
  _QWORD *v7;
  uint64_t v8;
  vm_size_t v9;
  mach_vm_address_t v10;
  void *v11;
  const void *v12;
  size_t v13;
  int v14;
  NSUInteger v15;

  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)(result + 16) + a2;
  if (v3 <= v2)
    return result;
  v4 = result;
  if (v2)
    v5 = *(_QWORD *)(result + 24);
  else
    v5 = 4;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v3);
  v7 = (_QWORD *)MEMORY[0x1E0C85AD8];
  v8 = v6 + *MEMORY[0x1E0C85AD8] - 1;
  if (((unint64_t)v8 & -*MEMORY[0x1E0C85AD8]) <= v6)
    v9 = v6;
  else
    v9 = v8 & -*MEMORY[0x1E0C85AD8];
  v10 = *(_QWORD *)(result + 8);
  result = allocate(v9);
  v11 = (void *)result;
  if (v10)
  {
    v12 = (const void *)v10;
    v13 = v2;
    if (v2 >= 0x80000)
    {
      v13 = v2;
      v12 = (const void *)v10;
      if (((*v7 - 1) & (result | v10)) != 0)
        goto LABEL_15;
      malloc_default_zone();
      v14 = malloc_zone_claimed_address();
      result = (vm_address_t)v11;
      v13 = v2;
      v12 = (const void *)v10;
      if (v14)
        goto LABEL_15;
      v15 = v2 & -*v7;
      NSCopyMemoryPages((const void *)v10, v11, v15);
      v12 = (const void *)(v10 + v15);
      result = (vm_address_t)v11 + v15;
      v13 = v2 - v15;
    }
    if (!v13)
    {
LABEL_16:
      result = unallocate(v10, v2);
      goto LABEL_17;
    }
LABEL_15:
    memmove((void *)result, v12, v13);
    goto LABEL_16;
  }
LABEL_17:
  *(_QWORD *)(v4 + 8) = v11;
  if (!v11)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSOtherSerializationException"), CFSTR("can't allocate"), 0));
  *(_QWORD *)(v4 + 24) = v9;
  return result;
}

vm_address_t allocate(vm_size_t size)
{
  vm_address_t v2[2];

  v2[1] = *MEMORY[0x1E0C80C00];
  v2[0] = 0;
  if (vm_allocate(*MEMORY[0x1E0C83DA0], v2, size, 1))
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("NSOtherSerializationException"), CFSTR("can't allocate"), 0));
  return v2[0];
}

void sub_181FE6BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_181FE7310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v11;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(exception_object);
    objc_opt_class();
    objc_msgSend(v11, "name");
    objc_msgSend(v11, "reason");
    NSLog((NSString *)CFSTR("*** %@: Deserialization error %@: %@\n"));
    objc_msgSend(v11, "raise");
    objc_end_catch();
    JUMPOUT(0x181FE729CLL);
  }
  _Unwind_Resume(exception_object);
}

NSPageData *newLeafDocument(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 4) != 0)
    return -[NSPageData initWithData:](+[NSData allocWithZone:](NSPageData, "allocWithZone:", a3), "initWithData:", -[NSString dataUsingEncoding:allowLossyConversion:](-[NSFileManager pathContentOfSymbolicLinkAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "pathContentOfSymbolicLinkAtPath:", a1), "dataUsingEncoding:allowLossyConversion:", 4, 1));
  else
    return -[NSPageData initWithContentsOfMappedFile:](+[NSData allocWithZone:](NSPageData, "allocWithZone:", a3), "initWithContentsOfMappedFile:", a1);
}

void *convertInvocationToMethodSignature(void *a1, void *a2, int a3)
{
  void *v5;
  int v6;
  void *v7;
  unint64_t v8;
  const char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  char *v14;
  size_t v15;
  int v16;
  size_t v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  size_t v21;
  void *v22;
  void *v24;
  uint64_t v26;
  NSUInteger sizep[2];

  sizep[1] = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend(a1, "methodSignature");
  v6 = *(__int16 *)(objc_msgSend(v5, "_argInfo:", 0) + 34);
  v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", a2);
  objc_msgSend(v7, "setTarget:", objc_msgSend(a1, "target"));
  if (v6 < 0)
  {
    v8 = 1;
  }
  else
  {
    objc_msgSend(v7, "setSelector:", objc_msgSend(a1, "selector"));
    v8 = 2;
  }
  if (a3)
  {
    v9 = (const char *)objc_msgSend(v5, "methodReturnType");
    v10 = (char *)objc_msgSend(a2, "methodReturnType");
    if ((*v10 | 0x20) != 0x76)
      performInvocationTypeConversion(a1, v7, v9, v10, -1);
  }
  v24 = a1;
  v11 = objc_msgSend(v5, "numberOfArguments");
  if (v8 < v11)
  {
    v12 = v11;
    while (1)
    {
      v13 = (const char *)objc_msgSend(v5, "getArgumentTypeAtIndex:", v8);
      v14 = (char *)objc_msgSend(a2, "getArgumentTypeAtIndex:", v8);
      v15 = strspn(v14, "norNOR");
      v16 = v14[v15];
      if (v16 == 94)
      {
        v17 = v15;
        if (memchr(v14, 78, v15))
        {
          v18 = 1;
          v19 = 1;
        }
        else
        {
          v19 = memchr(v14, 110, v17) != 0;
          v18 = memchr(v14, 111, v17) != 0;
        }
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      v20 = !v19;
      if (a3)
        break;
      if ((v18 & v20 & 1) == 0)
        goto LABEL_20;
      v21 = strspn(v14, "^norNOR");
      sizep[0] = 0;
      NSGetSizeAndAlignment(&v14[v21], sizep, 0);
      v22 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", sizep[0] + 32);
      v26 = objc_msgSend(v22, "mutableBytes");
      objc_msgSend(v7, "setArgument:atIndex:", &v26, v8);
      objc_msgSend(v7, "_addAttachedObject:", v22);
LABEL_21:
      if (v12 == ++v8)
        return v7;
    }
    if (v16 != 94 || ((v20 | v18) & 1) == 0)
      goto LABEL_21;
LABEL_20:
    performInvocationTypeConversion(v24, v7, v13, v14, v8);
    goto LABEL_21;
  }
  return v7;
}

void performInvocationTypeConversion(void *a1, void *a2, const char *a3, char *__s, uint64_t a5)
{
  const char *v10;
  const char *v11;
  NSUInteger v12;
  void *v13;
  _QWORD *v14;
  NSUInteger v15;
  size_t v16;
  void *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  NSUInteger v22;
  NSUInteger sizep;
  NSUInteger v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  if (__s[strspn(__s, "norNOR")] == 94)
  {
    v24[0] = 0;
    objc_msgSend(a1, "getArgument:atIndex:", v24, a5);
    if (v24[0])
    {
      v10 = &a3[strspn(a3, "^norNOR")];
      v11 = &__s[strspn(__s, "^norNOR")];
      sizep = 0;
      NSGetSizeAndAlignment(v10, &sizep, 0);
      v22 = 0;
      NSGetSizeAndAlignment(v11, &v22, 0);
      v12 = sizep;
      if (sizep <= v22)
        v12 = v22;
      v13 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", v12 + 32);
      v14 = (_QWORD *)objc_msgSend(v13, "mutableBytes");
      memmove(v14, (const void *)v24[0], sizep);
      convertDataByTypeEncodings((uint64_t)v10, (uint64_t)v11, (double *)v24[0], v14);
      v21 = v14;
      objc_msgSend(a2, "setArgument:atIndex:", &v21, a5);
      objc_msgSend(a2, "_addAttachedObject:", v13);
    }
    else
    {
      objc_msgSend(a2, "setArgument:atIndex:", v24, a5);
    }
  }
  else
  {
    v24[0] = 0;
    NSGetSizeAndAlignment(a3, v24, 0);
    sizep = 0;
    NSGetSizeAndAlignment(__s, &sizep, 0);
    v15 = v24[0];
    if (v24[0] <= sizep)
      v15 = sizep;
    v16 = v15 + 32;
    v17 = malloc_type_calloc(v15 + 32, 1uLL, 0x3D29B037uLL);
    v18 = malloc_type_calloc(v16, 1uLL, 0xF6327142uLL);
    if (v17)
      v19 = v18 == 0;
    else
      v19 = 1;
    if (v19)
      objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("Unable to allocate bytes"), 0));
    v20 = v18;
    objc_msgSend(a1, "getArgument:atIndex:", v17, a5);
    memmove(v20, v17, v16);
    convertDataByTypeEncodings((uint64_t)a3, (uint64_t)__s, (double *)v17, v20);
    objc_msgSend(a2, "setArgument:atIndex:", v20, a5);
    free(v17);
    free(v20);
  }
}

void appendArgumentInfoToDescription(void *a1, uint64_t a2, uint64_t *a3, int a4, void *a5)
{
  uint64_t *v7;
  unsigned int v10;
  __int16 i;
  const __CFString *v12;
  const char *v13;
  char *v14;
  int v15;
  const char *v16;
  uint64_t v17;
  _QWORD v18[2];

  v7 = a3;
  v18[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a5, "appendFormat:", CFSTR("{%s} "), (char *)a3 + 37);
  v10 = *((_DWORD *)v7 + 4);
  if (!v10)
  {
LABEL_11:
    objc_msgSend(a5, "appendFormat:", CFSTR("void\n"));
    return;
  }
  for (i = *((_WORD *)v7 + 17); (i & 0x80) != 0; i = *((_WORD *)v7 + 17))
  {
    v7 = (uint64_t *)*v7;
    objc_msgSend(a5, "appendFormat:", CFSTR("{%s} "), (char *)v7 + 37);
    v10 = *((_DWORD *)v7 + 4);
    if (!v10)
      goto LABEL_11;
  }
  if ((i & 0x2000) != 0)
  {
    v18[0] = 0;
    if (a4)
      objc_msgSend(a1, "getReturnValue:", v18);
    else
      objc_msgSend(a1, "getArgument:atIndex:", v18, a2);
    objc_msgSend(a5, "appendFormat:", CFSTR("%p"), v18[0]);
    if (*((__int16 *)v7 + 17) < 0)
      objc_msgSend(a5, "appendFormat:", CFSTR(" (block)"));
    v12 = CFSTR("\n");
    goto LABEL_26;
  }
  if ((i & 0x1000) != 0)
  {
    v18[0] = 0;
    if (a4)
      objc_msgSend(a1, "getReturnValue:", v18);
    else
      objc_msgSend(a1, "getArgument:atIndex:", v18, a2);
    objc_msgSend(a5, "appendFormat:", CFSTR("%p\n"), v18[0]);
  }
  else
  {
    if ((i & 0x4000) != 0 || *((_BYTE *)v7 + 36) == 58)
    {
      v18[0] = 0;
      if (a4)
        objc_msgSend(a1, "getReturnValue:", v18);
      else
        objc_msgSend(a1, "getArgument:atIndex:", v18, a2);
      v13 = (const char *)v18[0];
      if (!v18[0])
        v13 = "null";
      v16 = v13;
      v12 = CFSTR("%s\n");
LABEL_26:
      objc_msgSend(a5, "appendFormat:", v12, v16);
      return;
    }
    v14 = (char *)malloc_type_malloc(v10, 0x100004077774924uLL);
    bzero(v14, *((unsigned int *)v7 + 4));
    if (a4)
      objc_msgSend(a1, "getReturnValue:", v14);
    else
      objc_msgSend(a1, "getArgument:atIndex:", v14, a2);
    v15 = *((char *)v7 + 36);
    if (v15 <= 80)
    {
      if ((v15 - 66) < 2)
      {
LABEL_38:
        objc_msgSend(a5, "appendFormat:", CFSTR("%d '%c'"), *v14, *v14);
      }
      else if (v15 == 73)
      {
        objc_msgSend(a5, "appendFormat:", CFSTR("%u"), *v14, v17);
      }
      else if (v15 == 76)
      {
        objc_msgSend(a5, "appendFormat:", CFSTR("%lu"), *v14, v17);
      }
      else
      {
LABEL_43:
        objc_msgSend(a5, "appendString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v14, *((unsigned int *)v7 + 4)), "debugDescription"));
      }
    }
    else
    {
      switch(*((_BYTE *)v7 + 36))
      {
        case 'c':
          goto LABEL_38;
        case 'd':
        case 'f':
          objc_msgSend(a5, "appendFormat:", CFSTR("%f"), (double)*v14, v17);
          break;
        case 'e':
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'r':
          goto LABEL_43;
        case 'i':
          objc_msgSend(a5, "appendFormat:", CFSTR("%d"), *v14, v17);
          break;
        case 'l':
          objc_msgSend(a5, "appendFormat:", CFSTR("%ld"), *v14, v17);
          break;
        case 'q':
          objc_msgSend(a5, "appendFormat:", CFSTR("%lld"), *v14, v17);
          break;
        case 's':
          objc_msgSend(a5, "appendFormat:", CFSTR("%hd"), *v14, v17);
          break;
        default:
          if (v15 == 81)
          {
            objc_msgSend(a5, "appendFormat:", CFSTR("%llu"), *v14, v17);
          }
          else
          {
            if (v15 != 83)
              goto LABEL_43;
            objc_msgSend(a5, "appendFormat:", CFSTR("%hu"), (unsigned __int16)*v14, v17);
          }
          break;
      }
    }
    objc_msgSend(a5, "appendString:", CFSTR("\n"));
    free(v14);
  }
}

void convertDataByTypeEncodings(uint64_t a1, uint64_t a2, double *a3, _QWORD *a4)
{
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  NSUInteger v12;
  NSUInteger v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  NSUInteger v18;
  NSUInteger v19;
  size_t v20;
  void *v21;
  double v22;
  double v23;
  unsigned int v24;
  double v25;
  float v26;
  int v27;
  NSString *v28;
  NSUInteger v29;
  NSUInteger v30;
  NSUInteger alignp;
  NSUInteger sizep[2];

  v7 = 0;
  sizep[1] = *MEMORY[0x1E0C80C00];
  while (2)
  {
    v8 = *(char *)(a1 + v7);
    switch(*(_BYTE *)(a1 + v7))
    {
      case 'I':
      case 'L':
      case 'i':
      case 'l':
        if (!memchr("lLqQ", *(char *)(a2 + v7), 5uLL))
          goto LABEL_37;
        v21 = memchr("ilq", v8, 4uLL);
        *(_QWORD *)&v22 = *(int *)a3;
        if (!v21)
          *(_QWORD *)&v22 = *(unsigned int *)a3;
        goto LABEL_34;
      case 'J':
      case 'K':
      case 'M':
      case 'P':
      case 'S':
      case 'T':
      case 'U':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '[':
      case '\\':
      case ']':
      case '_':
      case 'a':
      case 'b':
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'p':
        return;
      case 'N':
      case 'O':
      case 'R':
      case 'V':
      case 'n':
      case 'o':
      case 'r':
        goto LABEL_3;
      case 'Q':
      case 'q':
        if (!memchr("iIlL", *(char *)(a2 + v7), 5uLL))
          goto LABEL_33;
        *a4 = 0;
        v23 = *a3;
        if (v8 == 113)
        {
          v24 = 0x7FFFFFFF;
          if (*(uint64_t *)&v23 > 0x7FFFFFFF)
          {
LABEL_24:
            *(_DWORD *)a4 = v24;
            NSLog((NSString *)CFSTR("Warning - conversion from 64 bit to 32 bit integral value requested within NSPortCoder, but the 64 bit value %lld cannot be represented by a 32 bit value"), *(_QWORD *)&v23);
            return;
          }
          if (*(uint64_t *)&v23 < (uint64_t)0xFFFFFFFF80000000)
          {
            v24 = 0x80000000;
            goto LABEL_24;
          }
        }
        else if (HIDWORD(*(_QWORD *)&v23))
        {
          *(_DWORD *)a4 = -1;
          NSLog((NSString *)CFSTR("Warning - conversion from 64 bit to 32 bit integral value requested within NSPortCoder, but the 64 bit value %llu cannot be represented by a 32 bit value"), *(_QWORD *)&v23);
          return;
        }
        *(_DWORD *)a4 = LODWORD(v23);
        return;
      case '^':
        if (strcmp((const char *)(a1 + v7), (const char *)(a2 + v7)))
          NSLog((NSString *)CFSTR("Pointer conversions not handled yet"));
        return;
      case 'c':
        if (*(_BYTE *)(a2 + v7) == 66)
          *(_BYTE *)a4 = *(_BYTE *)a3 != 0;
        return;
      case 'd':
        if (*(_BYTE *)(a2 + v7) == 102)
        {
          v25 = *a3;
          v26 = *a3;
          if (fabs(*a3) == INFINITY)
          {
            *a4 = 0;
            *(float *)a4 = v26;
            return;
          }
          if (v25 >= -3.40282347e38)
          {
            if (v25 <= 3.40282347e38)
            {
              if (v25 <= 0.0 || v26 != 0.0)
              {
                *a4 = 0;
                *(float *)a4 = v26;
                if (v25 >= 0.0 || v26 != 0.0)
                  return;
LABEL_46:
                NSLog((NSString *)CFSTR("Warning - conversion from double to float value requested within NSPortCoder, but the double value %g is outside the range of a float."), *(_QWORD *)&v25);
                return;
              }
LABEL_45:
              *a4 = 0;
              *(float *)a4 = v26;
              goto LABEL_46;
            }
            *(float *)&v27 = 3.4028e38;
          }
          else
          {
            *(float *)&v27 = -3.4028e38;
          }
          v26 = *(float *)&v27;
          goto LABEL_45;
        }
LABEL_33:
        v22 = *a3;
LABEL_34:
        *(double *)a4 = v22;
        return;
      case 'f':
        if (*(_BYTE *)(a2 + v7) == 100)
          *(double *)a4 = *(float *)a3;
        else
LABEL_37:
          *(_DWORD *)a4 = *(_DWORD *)a3;
        return;
      default:
        if (v8 != 43)
        {
          if (v8 == 123)
          {
            v9 = (char *)(a2 + v7);
            v10 = strchr((char *)(a1 + v7), 61);
            v11 = strchr(v9, 61);
            if (!v10 || !v11)
            {
              v28 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unable to parse structs within encoding: %s"), a1);
              objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v28, 0));
            }
            v12 = 0;
            v13 = 0;
            v14 = v10 + 1;
            v15 = v11 + 1;
            while (*v14 && *v14 != 125)
            {
              alignp = 0;
              sizep[0] = 0;
              v29 = 0;
              v30 = 0;
              v16 = NSGetSizeAndAlignment(v14, sizep, &alignp);
              v17 = NSGetSizeAndAlignment(v15, &v30, &v29);
              v18 = (alignp + ((unint64_t)a3 + v12) / alignp * alignp - ((_QWORD)a3 + v12)) % alignp + v12;
              v19 = (v29 + ((unint64_t)a4 + v13) / v29 * v29 - ((_QWORD)a4 + v13)) % v29 + v13;
              if (v30 <= sizep[0])
                v20 = sizep[0];
              else
                v20 = v30;
              memmove((char *)a4 + v19, (char *)a3 + v18, v20);
              convertDataByTypeEncodings(v14, v15, (char *)a3 + v18, (char *)a4 + v19);
              v12 = sizep[0] + v18;
              v13 = v30 + v19;
              v15 = v17;
              v14 = v16;
            }
          }
          return;
        }
LABEL_3:
        v7 += 2;
        continue;
    }
  }
}

uint64_t encodingsAreCompatible(const char *a1, const char *a2)
{
  const char *v2;
  const char *v3;
  size_t v4;
  size_t v5;
  uint64_t result;
  uint64_t v7;
  size_t v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  const char *v13;

  v2 = a2;
  v3 = a1;
  if (!strcmp(a1, a2))
    return 1;
  v4 = strlen(v3);
  v5 = strlen(v2);
  result = 1;
  if (v4 && v5)
  {
    v7 = 0;
    v8 = 0;
    v12 = v2;
    v13 = v3;
    while (1)
    {
      v9 = v3[v8];
      v10 = v2[v7];
      if (v9 == 123 && v10 == 123)
      {
        v8 += strcspn(&v3[v8], "=");
        v7 += strcspn(&v2[v7], "=");
        if ((v8 == v4) == (v7 != v5))
          return 0;
      }
      else
      {
        v11 = (char)v10;
        if (v9 == (char)v10)
          goto LABEL_20;
        if (memchr("ilq", v9, 4uLL) && memchr("ilq", v11, 4uLL))
          goto LABEL_17;
        if (memchr("ILQ", v9, 4uLL) && memchr("ILQ", v11, 4uLL) || memchr("fd", v9, 3uLL) && memchr("fd", v11, 3uLL))
        {
          v2 = v12;
LABEL_17:
          v3 = v13;
          goto LABEL_20;
        }
        result = (uint64_t)memchr("Bc", v9, 3uLL);
        if (!result)
          return result;
        result = (uint64_t)memchr("Bc", v11, 3uLL);
        v2 = v12;
        v3 = v13;
        if (!result)
          return result;
      }
LABEL_20:
      ++v8;
      result = 1;
      if (v8 < v4 && ++v7 < v5)
        continue;
      return result;
    }
  }
  return result;
}

NSMutableString *escapedString(NSMutableString *a1, uint64_t a2)
{
  NSCharacterSet *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = +[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", a2);
  v4 = -[NSString rangeOfCharacterFromSet:](a1, "rangeOfCharacterFromSet:", v3);
  if (a1)
  {
    v6 = v5;
    if (v5)
    {
      v7 = v4;
      a1 = +[NSString stringWithString:](NSMutableString, "stringWithString:", a1);
      do
      {
        -[NSMutableString insertString:atIndex:](a1, "insertString:atIndex:", CFSTR("\\"), v7);
        if (v7 + v6 + 1 >= -[NSString length](a1, "length"))
          break;
        v7 = -[NSString rangeOfCharacterFromSet:options:range:](a1, "rangeOfCharacterFromSet:options:range:", v3, 0);
        v6 = v8;
      }
      while (v8);
    }
  }
  return a1;
}

void sub_181FED71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t regexMatchCallback(_BYTE *a1)
{
  if (a1)
  {
    (*(void (**)(void))(*(_QWORD *)a1 + 16))();
    a1[16] = 0;
  }
  return 1;
}

uint64_t regexFindProgressCallback(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  char v6;
  char v7;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  if (!a1)
    return 1;
  v3 = a1[1];
  if (v3 == 0x7FFFFFFFFFFFFFFFLL || v3 >= a2)
  {
    v5 = *a1;
    if (*a1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t, char *))(v5 + 16))(v5, 0, 1, &v9);
      v6 = v9;
      *((_BYTE *)a1 + 16) = v9;
      return (v6 ^ 1);
    }
    return 1;
  }
  v7 = 0;
  *((_BYTE *)a1 + 17) = 1;
  return v7;
}

NSLock *___loadDataDetectorsCore_block_invoke()
{
  return objc_alloc_init(NSLock);
}

CFIndex addAddressResultsToComponents(uint64_t a1, void *a2)
{
  CFIndex result;
  const __CFArray *v4;
  CFIndex v5;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  CFTypeID TypeID;

  result = off_1ECD0A6A8();
  v4 = (const __CFArray *)result;
  if (qword_1ECD0A6E0)
  {
    if (!result)
      return result;
  }
  else
  {
    result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", CFSTR("Contact"), CFSTR("Name"), CFSTR("ContactName"), CFSTR("Name"), CFSTR("AddressBookContactName"), CFSTR("JobTitle"), CFSTR("JobTitle"), CFSTR("Organization"), CFSTR("CompanyName"), CFSTR("Street"), CFSTR("Street"), CFSTR("City"), CFSTR("City"), CFSTR("State"), CFSTR("State"), CFSTR("ZIP"), CFSTR("ZipCode"),
               CFSTR("Country"),
               CFSTR("Country"),
               CFSTR("Airline"),
               CFSTR("AirlineName"),
               CFSTR("Flight"),
               CFSTR("FlightNumber"),
               0);
    qword_1ECD0A6E0 = result;
    if (!v4)
      return result;
  }
  result = CFArrayGetCount(v4);
  if (result >= 1)
  {
    v5 = result;
    for (i = 0; i != v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
      v8 = objc_msgSend((id)qword_1ECD0A6E0, "objectForKey:", off_1ECD0A698());
      if (v8)
      {
        v9 = v8;
        v10 = off_1ECD0A6B0(ValueAtIndex);
        if (v10)
        {
          v11 = (const void *)v10;
          TypeID = CFStringGetTypeID();
          if (TypeID == CFGetTypeID(v11))
            objc_msgSend(a2, "setObject:forKey:", v11, v9);
        }
      }
      result = addAddressResultsToComponents(ValueAtIndex, a2);
    }
  }
  return result;
}

void NSFileCoordinationDestroyTSD(uint64_t a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *(const void **)(a1 + 32);
    if (v2)
      CFRelease(v2);

    free((void *)a1);
  }
}

void sub_181FEE144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_181FEF158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_181FF28B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181FF29DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _NSFCShouldLog(int a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  uint64_t v4;
  int64_t v5;

  v1 = atomic_load(&_NSFCSubarbitrationCount);
  if (v1 < 1)
    return 1;
  v3 = atomic_load(_NSFCDisableLogSuppression);
  if ((v3 & 1) != 0)
    return 1;
  v4 = 0xFFFFFFFFLL;
  if (a1 == 2)
    v4 = 100;
  if (a1 == 1)
    v4 = 200;
  v5 = atomic_load(&_NSFCSubarbitratedClaimCount);
  return v5 < v4;
}

uint64_t _NSGetFSIDAndFileID(void *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(a1, "fileSystemRepresentation");
  if (result)
  {
    *(_QWORD *)&v7[16] = 0;
    *(_OWORD *)v7 = __const__NSGetFSIDAndFileID_request;
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    if (!getattrlist((const char *)result, v7, v8, 0x28uLL, 1u)
      && *(_OWORD *)&v7[4] == *(_OWORD *)((char *)v8 + 4)
      && *(_DWORD *)&v7[20] == DWORD1(v8[1]))
    {
      v6 = v9;
      *a2 = *((_QWORD *)&v8[1] + 1);
      *a3 = v6;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_181FF4CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181FF4F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_181FF5DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 88), 8);
  _Unwind_Resume(a1);
}

uint64_t initUTTypeCopyDescription_0(uint64_t a1)
{
  void *v2;
  uint64_t (*v3)();

  v2 = (void *)MobileCoreServicesLibrary_frameworkLibrary_4;
  if (!MobileCoreServicesLibrary_frameworkLibrary_4)
  {
    v2 = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_4 = (uint64_t)v2;
    if (!v2)
      __assert_rtn("MobileCoreServicesLibrary", "NSItemProviderRepresentation.m", 19, "frameworkLibrary");
  }
  v3 = (uint64_t (*)())dlsym(v2, "UTTypeCopyDescription");
  softLinkUTTypeCopyDescription_0[0] = v3;
  if (!v3)
    __assert_rtn("initUTTypeCopyDescription", "NSItemProviderRepresentation.m", 20, "softLinkUTTypeCopyDescription");
  return ((uint64_t (*)(uint64_t))v3)(a1);
}

uint64_t NSByteCountFormatterAssertValidMeasurement(void *a1)
{
  uint64_t result;
  void *v3;

  objc_msgSend(a1, "unit");
  result = objc_opt_isKindOfClass();
  if ((result & 1) == 0)
  {
    objc_msgSend(a1, "unit");
    v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NSByteCountFormatter only supports measurements of dimension NSUnitInformationStorage -- got invalid unit '%@'"), objc_opt_class()), 0);
    objc_exception_throw(v3);
  }
  return result;
}

void sub_181FF8B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181FF9674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_181FFB790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__140(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__141(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void *pairsForURLs(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSURLPromisePair *v7;
  _BYTE v9[128];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(a1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v9, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(a1);
        v7 = *(NSURLPromisePair **)(*((_QWORD *)&v10 + 1) + 8 * v6);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v7 = +[NSURLPromisePair pairWithURL:](NSURLPromisePair, "pairWithURL:", v7);
        objc_msgSend(v2, "addObject:", v7);
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v9, 16);
    }
    while (v4);
  }
  return v2;
}

void sub_1820000C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 56), 8);
  _Unwind_Resume(a1);
}

void sub_1820002A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1820010F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1820014DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

void sub_1820020BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_1820032D8(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2A8], 8);
  _Block_object_dispose(&STACK[0x300], 8);
  _Unwind_Resume(a1);
}

uint64_t _NSFCGetFileProviderUIDFOrURL(void *a1, uid_t *a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v8;
  _BYTE fileSec[24];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD09460 != -1)
    dispatch_once(&qword_1ECD09460, &__block_literal_global_762);
  if (off_1ECD09458 && !off_1ECD09458(a1, a2, a3))
  {
    v6 = _NSFCLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = *a3;
      *(_DWORD *)fileSec = 138412290;
      *(_QWORD *)&fileSec[4] = v8;
      _os_log_error_impl(&dword_1817D9000, v6, OS_LOG_TYPE_ERROR, "Failure to acquire UID from fault xattrs: %@", fileSec, 0xCu);
    }
  }
  if (*a2)
    return 1;
  *(_QWORD *)fileSec = 0;
  if (objc_msgSend(a1, "getResourceValue:forKey:error:", fileSec, *MEMORY[0x1E0C99990], a3))
  {
    if (CFFileSecurityGetOwner(*(CFFileSecurityRef *)fileSec, a2))
      return 1;
    *a3 = (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("NSCocoaErrorDomain"), 256, 0);
  }
  return 0;
}

void sub_182006374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1820065B8(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == 1)
  {
    v4 = objc_begin_catch(exception_object);
    v5 = _NSOSLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = objc_msgSend(v4, "callStackSymbols");
      v7 = v3 - 144;
      *(_DWORD *)(v3 - 144) = 138412546;
      *(_QWORD *)(v7 + 4) = v4;
      *(_WORD *)(v3 - 132) = 2112;
      *(_QWORD *)(v7 + 14) = v6;
      _os_log_error_impl(&dword_1817D9000, v5, OS_LOG_TYPE_ERROR, "An exception occurred while attempting to gather debug information: %@\n%@", (uint8_t *)(v3 - 144), 0x16u);
    }
    (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, 0);
    objc_end_catch();
    JUMPOUT(0x182006578);
  }
  _Unwind_Resume(exception_object);
}

void sub_1820070E0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int buf, __int128 a12, uint64_t a13)
{
  id v13;
  NSObject *v14;
  uint64_t v15;

  if (a2 == 1)
  {
    v13 = objc_begin_catch(a1);
    v14 = _NSOSLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = objc_msgSend(v13, "callStackSymbols");
      buf = 138412802;
      WORD2(a12) = 2112;
      *(_QWORD *)((char *)&a12 + 6) = v13;
      HIWORD(a12) = 2112;
      a13 = v15;
      _os_log_error_impl(&dword_1817D9000, v14, OS_LOG_TYPE_ERROR, "Failed to write filecoordinationd dump file to %@. Received exception: %@\n%@", (uint8_t *)&buf, 0x20u);
    }
    objc_end_catch();
    JUMPOUT(0x18200704CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18200722C()
{
  objc_end_catch();
  JUMPOUT(0x18200719CLL);
}

void sub_1820088EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

NSError *_secureCodingScreenedError(NSError *a1)
{
  objc_class *v2;
  objc_class *v3;
  objc_method *InstanceMethod;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  uint64_t v28;
  _QWORD v29[2];
  BOOL (*v30)(uint64_t, const char *);
  void *v31;
  objc_class *v32;
  objc_class *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = (objc_class *)objc_opt_class();
  v3 = (objc_class *)objc_opt_class();
  v28 = 0;
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v30 = ___secureCodingScreenedError_block_invoke;
  v31 = &unk_1E0F54708;
  v32 = v2;
  v33 = v3;
  v23 = 0;
  v24 = &v23;
  v25 = 0x3052000000;
  v26 = __Block_byref_object_copy__27;
  v27 = __Block_byref_object_dispose__27;
  v18 = MEMORY[0x1E0C809B0];
  v19 = 3221225472;
  v20 = ___secureCodingScreenedError_block_invoke_2;
  v21 = &unk_1E0F54730;
  v22 = &v23;
  InstanceMethod = class_getInstanceMethod(v2, sel_localizedDescription);
  if (InstanceMethod == class_getInstanceMethod(v3, sel_localizedDescription))
    v5 = -[NSDictionary objectForKey:](-[NSError userInfo](a1, "userInfo", v18, v19), "objectForKey:", CFSTR("NSLocalizedDescription"));
  else
    v5 = -[NSError localizedDescription](a1, "localizedDescription", v18, v19);
  v6 = v5;
  if (v5)
    v20((uint64_t)&v18, (uint64_t)CFSTR("NSLocalizedDescription"), v5);
  if (((unsigned int (*)(_QWORD *, char *, uint64_t))v30)(v29, sel_localizedFailureReason, v6))
    v7 = -[NSError localizedFailureReason](a1, "localizedFailureReason");
  else
    v7 = -[NSDictionary objectForKey:](-[NSError userInfo](a1, "userInfo"), "objectForKey:", CFSTR("NSLocalizedFailureReason"));
  v8 = v7;
  if (v7)
    v20((uint64_t)&v18, (uint64_t)CFSTR("NSLocalizedFailureReason"), v7);
  if (!-[NSError localizedRecoveryOptions](a1, "localizedRecoveryOptions", v8)
    && !-[NSError recoveryAttempter](a1, "recoveryAttempter"))
  {
    if (((unsigned int (*)(_QWORD *, char *))v30)(v29, sel_localizedRecoverySuggestion))
    {
      v9 = -[NSError localizedRecoverySuggestion](a1, "localizedRecoverySuggestion");
      if (v9)
        v20((uint64_t)&v18, (uint64_t)CFSTR("NSLocalizedRecoverySuggestion"), v9);
    }
  }
  if (-[NSDictionary objectForKey:](-[NSError userInfo](a1, "userInfo", v9), "objectForKey:", CFSTR("NSUnderlyingError")))
  {
    v10 = _secureCodingScreenedError();
    if (v10)
      v20((uint64_t)&v18, (uint64_t)CFSTR("NSUnderlyingError"), v10);
  }
  v11 = -[NSDictionary objectForKey:](-[NSError userInfo](a1, "userInfo", v10), "objectForKey:", CFSTR("NSHelpAnchor"));
  if (v11)
    v20((uint64_t)&v18, (uint64_t)CFSTR("NSHelpAnchor"), v11);
  v12 = -[NSDictionary objectForKey:](-[NSError userInfo](a1, "userInfo", v11), "objectForKey:", CFSTR("NSURL"));
  if (v12)
    v20((uint64_t)&v18, (uint64_t)CFSTR("NSURL"), v12);
  v13 = -[NSDictionary objectForKey:](-[NSError userInfo](a1, "userInfo", v12), "objectForKey:", CFSTR("NSFilePath"));
  if (v13)
    v20((uint64_t)&v18, (uint64_t)CFSTR("NSFilePath"), v13);
  if (-[NSDictionary objectForKey:](-[NSError userInfo](a1, "userInfo", v13), "objectForKey:", CFSTR("NSRecoveryAttempter")))
  {
    v20((uint64_t)&v18, (uint64_t)CFSTR("NSRecoveryAttempter"), 0);
  }
  if (-[NSDictionary objectForKey:](-[NSError userInfo](a1, "userInfo"), "objectForKey:", CFSTR("NSLocalizedRecoveryOptions")))
  {
    v20((uint64_t)&v18, (uint64_t)CFSTR("NSLocalizedRecoveryOptions"), 0);
  }
  v14 = (void *)v24[5];
  if (v14 && (objc_msgSend(v14, "isEqualToDictionary:", -[NSError userInfo](a1, "userInfo")) & 1) == 0)
  {
    v15 = -[NSError domain](a1, "domain");
    v16 = -[NSError code](a1, "code");
    a1 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v15, v16, v24[5]);
  }

  _Block_object_dispose(&v23, 8);
  return a1;
}

void sub_182009CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18200AA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSUUID *_uniqueFileProviderID(void *a1)
{
  NSUUID *AssociatedObject;

  AssociatedObject = (NSUUID *)objc_getAssociatedObject(a1, "_fileProviderID");
  if (!AssociatedObject)
  {
    AssociatedObject = +[NSUUID UUID](NSUUID, "UUID");
    objc_setAssociatedObject(a1, "_fileProviderID", AssociatedObject, (void *)0x301);
  }
  return AssociatedObject;
}

void sub_18200B10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182010C50(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18201123C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Unwind_Resume(a1);
}

BOOL ___secureCodingScreenedError_block_invoke(uint64_t a1, const char *a2)
{
  Method InstanceMethod;

  InstanceMethod = class_getInstanceMethod(*(Class *)(a1 + 32), a2);
  return InstanceMethod != class_getInstanceMethod(*(Class *)(a1 + 40), a2);
}

uint64_t ___secureCodingScreenedError_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40))
  {
    if (!a3)
      return result;
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 40), "setObject:forKey:", a3, a2);
  }
  result = objc_opt_new();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 40) = result;
  if (a3)
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 8) + 40), "setObject:forKey:", a3, a2);
  return result;
}

void sub_1820183C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t ___nearestPresenterInterestedInSubitemPresenters_block_invoke(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 112) >> 31)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a2;
  return result;
}

id ___messageToResponsesTable_block_invoke()
{
  uint64_t v0;
  void *v1;
  id result;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v0 = objc_msgSend(MEMORY[0x1E0C99D80], "sharedKeySetForKeys:", unk_1EDD09550(&unk_1E0FCF170, "allKeys"));
  v1 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithSharedKeySet:", v0);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___messageToResponsesTable_block_invoke_346;
  v3[3] = &unk_1E0F4D940;
  v3[4] = v1;
  unk_1EDD09558(&unk_1E0FCF170, "enumerateKeysAndObjectsUsingBlock:", v3);
  result = v1;
  _MergedGlobals_3_0 = (uint64_t)result;
  return result;
}

uint64_t ___messageToResponsesTable_block_invoke_346(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", a3, a2);
}

void sub_18201D8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

void sub_18201E708(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18201F280(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_182021AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_1820231F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_182023AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__initializeFileProvider_block_invoke()
{
  const char *v0;
  void *result;

  v0 = (const char *)objc_msgSend((id)objc_msgSend((id)pathToSystemFramework((uint64_t)CFSTR("FileProvider.framework")), "stringByAppendingString:", CFSTR("/FileProvider")), "fileSystemRepresentation");
  result = dlopen(v0, 256);
  qword_1ECD0A810 = (uint64_t)result;
  return result;
}

void __Block_byref_object_copy__66(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__67(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t eventStreamCallback(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[8];

  v7[7] = *MEMORY[0x1E0C80C00];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __eventStreamCallback_block_invoke;
  v7[3] = &unk_1E0F55330;
  v7[5] = a5;
  v7[6] = a6;
  v7[4] = a2;
  return objc_msgSend(a4, "enumerateObjectsUsingBlock:", v7);
}

void sub_182025998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__initializeFSEvents_block_invoke()
{
  void *result;
  void *v1;

  result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 256);
  if (result)
  {
    v1 = result;
    off_1ECD0A870 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))dlsym(result, "FSEventStreamCreate");
    off_1ECD0A868 = (uint64_t (*)(_QWORD))dlsym(v1, "FSEventStreamInvalidate");
    off_1ECD0A858 = (uint64_t (*)(_QWORD))dlsym(v1, "FSEventStreamRelease");
    off_1ECD0A878 = (uint64_t (*)(_QWORD, _QWORD))dlsym(v1, "FSEventStreamSetDispatchQueue");
    off_1ECD0A880 = (uint64_t (*)(_QWORD))dlsym(v1, "FSEventStreamStart");
    result = dlsym(v1, "FSEventStreamStop");
    off_1ECD0A860 = (uint64_t (*)(void))result;
  }
  return result;
}

uint64_t __eventStreamCallback_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleFSEventPath:flags:id:", a2, *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * a3), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * a3));
}

void clearAllObservers(uint64_t a1)
{
  unsigned int *v1;
  os_unfair_lock_s *v4;
  unsigned int v5;
  id Weak;

  v1 = (unsigned int *)(a1 + 24);
  if (atomic_load((unsigned int *)(a1 + 24)))
  {
    v4 = (os_unfair_lock_s *)(a1 + 28);
    os_unfair_lock_lock_with_options();
    v5 = atomic_load(v1);
    if (v5 < 2)
      Weak = 0;
    else
      Weak = objc_loadWeak((id *)(a1 + 16));
    atomic_store(0, (unsigned int *)(a1 + 24));
    objc_storeWeak((id *)(a1 + 16), 0);
    os_unfair_lock_unlock(v4);

  }
}

void addObserver(uint64_t a1, void *a2)
{
  os_unfair_lock_s *v4;
  unsigned int *v5;
  unsigned int v6;
  id *v7;
  id *v8;
  id Weak;
  NSHashTable *v10;

  v4 = (os_unfair_lock_s *)(a1 + 28);
  os_unfair_lock_lock_with_options();
  v5 = (unsigned int *)(a1 + 24);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (v6 == 1)
  {
    v8 = (id *)(a1 + 16);
    Weak = objc_loadWeak((id *)(a1 + 16));
    v10 = -[NSHashTable initWithOptions:capacity:]([NSHashTable alloc], "initWithOptions:capacity:", 517, 0);
    objc_storeWeak(v8, v10);
    -[NSHashTable addObject:](v10, "addObject:", Weak);
LABEL_8:
    -[NSHashTable addObject:](v10, "addObject:", a2);
    goto LABEL_9;
  }
  v7 = (id *)(a1 + 16);
  if (v6)
  {
    v10 = (NSHashTable *)objc_loadWeak(v7);
    goto LABEL_8;
  }
  objc_storeWeak(v7, a2);
LABEL_9:
  os_unfair_lock_unlock(v4);
}

void removeObservation(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  os_unfair_lock_s *v6;
  unsigned int v7;
  unsigned int v8;
  id *v9;
  id Weak;
  void *v11;

  v2 = (unsigned int *)(a1 + 24);
  if (atomic_load((unsigned int *)(a1 + 24)))
  {
    v6 = (os_unfair_lock_s *)(a1 + 28);
    os_unfair_lock_lock_with_options();
    do
    {
      v7 = __ldaxr(v2);
      v8 = v7 - 1;
    }
    while (__stlxr(v7 - 1, v2));
    v9 = (id *)(a1 + 16);
    if (v7 == 1)
    {
      v11 = 0;
      Weak = 0;
    }
    else
    {
      Weak = objc_loadWeak((id *)(a1 + 16));
      objc_msgSend(Weak, "removeObject:", a2);
      if (v8 != 1)
      {
        Weak = 0;
        goto LABEL_11;
      }
      v11 = (void *)objc_msgSend(Weak, "anyObject");
    }
    objc_storeWeak(v9, v11);
LABEL_11:
    os_unfair_lock_unlock(v6);

  }
}

void withUnlockedObservers(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id Weak;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  void *v18;
  os_unfair_lock_t v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[128];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x186DA8F78]();
  v5 = (void *)v4;
  if (atomic_load((unsigned int *)(a1 + 24)))
  {
    v18 = (void *)v4;
    v19 = (os_unfair_lock_t)(a1 + 28);
    os_unfair_lock_lock_with_options();
    v17[1] = v17;
    v7 = atomic_load((unsigned int *)(a1 + 24));
    if ((_DWORD)v7)
      v8 = v7;
    else
      v8 = 1;
    MEMORY[0x1E0C80A78](v8);
    v10 = (_QWORD *)((char *)v17 - v9);
    v21 = 0;
    if (v7 >= 0x101)
    {
      v10 = (_QWORD *)_CFCreateArrayStorage();
      v20 = v10;
    }
    else
    {
      v20 = 0;
      if (!(_DWORD)v7)
      {
LABEL_22:
        os_unfair_lock_unlock(v19);
        (*(void (**)(uint64_t, _QWORD *, unint64_t))(a2 + 16))(a2, v10, v7);
        free(v20);
        v5 = v18;
        goto LABEL_23;
      }
    }
    if ((_DWORD)v7 == 1)
    {
      *v10 = objc_loadWeak((id *)(a1 + 16));
    }
    else
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      Weak = objc_loadWeak((id *)(a1 + 16));
      v12 = objc_msgSend(Weak, "countByEnumeratingWithState:objects:count:", &v23, v22, 16);
      if (v12)
      {
        v13 = 0;
        v14 = *(_QWORD *)v24;
        do
        {
          v15 = 0;
          if (v7 >= v13)
            v16 = v7 - v13;
          else
            v16 = 0;
          do
          {
            if (*(_QWORD *)v24 != v14)
              objc_enumerationMutation(Weak);
            if (v16 == v15)
              __assert_rtn("withUnlockedObservers", "_NSObserverList.m", 41, "idx < count");
            v10[v13 + v15] = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v15);
            ++v15;
          }
          while (v12 != v15);
          v12 = objc_msgSend(Weak, "countByEnumeratingWithState:objects:count:", &v23, v22, 16);
          v13 += v15;
        }
        while (v12);
      }
    }
    goto LABEL_22;
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD))(a2 + 16))(a2, 0, 0);
LABEL_23:
  objc_autoreleasePoolPop(v5);
}

void sub_182026DE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  free(*(void **)(v1 - 320));
  _Unwind_Resume(a1);
}

void sub_1820270FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18202822C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1820296B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_1820298DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_182029A98(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_182029B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 56), 8);
  _Unwind_Resume(a1);
}

uint64_t _NSPNCSettings(void *a1)
{
  uint64_t result;

  result = objc_msgSend(a1, "copy");
  _overriddenSettings = result;
  return result;
}

void sub_18202A464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_18202A688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *initNPNameParser()
{
  void *result;

  if (qword_1ECD09AC0
    || (result = dlopen("/System/Library/PrivateFrameworks/CoreNameParser.framework/CoreNameParser", 1),
        (qword_1ECD09AC0 = (uint64_t)result) != 0))
  {
    result = objc_getClass("NPNameParser");
    qword_1ECD09AB8 = (uint64_t)result;
    getNPNameParserClass = NPNameParserFunction;
  }
  return result;
}

uint64_t NPNameParserFunction()
{
  return qword_1ECD09AB8;
}

void sub_18202AA38(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t compare_1(double *a1, double *a2)
{
  unsigned int v2;

  if (*a1 >= *a2)
    v2 = 0;
  else
    v2 = -1;
  if (*a1 > *a2)
    return 1;
  else
    return v2;
}

void service_connection_handler_make_remote_connection(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = (void *)MEMORY[0x186DA8F78]();
  v5 = (void *)-[NSXPCConnection _initWithRemotePeerConnection:name:options:]([NSXPCConnection alloc], a2, (__CFString *)objc_msgSend(a1, "serviceName"));
  objc_msgSend(a1, "delegate");
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (objc_msgSend((id)objc_msgSend(a1, "delegate"), "listener:shouldAcceptNewConnection:", a1, v5) & 1) == 0)
  {
    objc_msgSend(v5, "invalidate");
  }

  objc_autoreleasePoolPop(v4);
}

void additional_service_handler(_xpc_connection_s *a1)
{
  void *v2;

  v2 = (void *)atomic_load(&_additionalListener);
  service_connection_handler_make_connection(v2, a1);
}

void ___setupRemoteListenerConnection_block_invoke(uint64_t a1, id a2)
{
  Class Class;
  void *v5;
  NSObject *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a2);
  if (Class == (Class)_XPC_TYPE_REMOTE_CONNECTION)
  {
    service_connection_handler_make_remote_connection(*(void **)(a1 + 32), (uint64_t)a2);
  }
  else if (Class != (Class)MEMORY[0x1E0C81310])
  {
    v5 = (void *)MEMORY[0x186DAAD0C](a2);
    v6 = _NSXPCLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      v7 = 136446210;
      v8 = v5;
      _os_log_fault_impl(&dword_1817D9000, v6, OS_LOG_TYPE_FAULT, "NSXPCListener: received error or other non-connection type in handler for remote listener: %{public}s", (uint8_t *)&v7, 0xCu);
    }
    free(v5);
  }
}

const char *_NSXPCInterfaceDebugDescriptionHelper(const char *result, uint64_t a2, void *a3)
{
  const char *Name;
  uint64_t v6;
  const __CFString *v7;
  __CFString *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  if (a2)
  {
    Name = sel_getName(result);
    v6 = objc_msgSend(*(id *)(a2 + 16), "count");
    v7 = CFSTR(">=1");
    v8 = *(_BYTE *)(a2 + 44) ? CFSTR(">=1") : CFSTR("0");
    objc_msgSend(a3, "appendFormat:", CFSTR("SEL: %s (%ld arguments, %@ proxies)\n Classes: %@\n"), Name, v6, v8, descriptionForClassArray(*(void **)(a2 + 16)));
    v9 = *(unsigned int *)(a2 + 40);
    result = (const char *)objc_msgSend(*(id *)a2, "_typeString");
    v10 = result;
    if ((_DWORD)v9 || result)
    {
      v11 = objc_msgSend(*(id *)(a2 + 8), "count");
      if (!*(_BYTE *)(a2 + 45))
        v7 = CFSTR("0");
      return (const char *)objc_msgSend(a3, "appendFormat:", CFSTR(" Reply block: (arg #%d, (%ld arguments, %@ proxies), signature '%@') %@\n"), v9, v11, v7, v10, descriptionForClassArray(*(void **)(a2 + 8)));
    }
  }
  return result;
}

void sub_18202C758(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18202C778(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18202C8C4(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18202C8D8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18202CA30(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18202CA44(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void _maxVersionFinder(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;

  if (a2)
    v3 = *(_QWORD *)(a2 + 24);
  else
    v3 = 1;
  if (v3 > *a3)
    *a3 = v3;
}

void sub_18202CBCC(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18202CBE0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

const __CFString *descriptionForClassArray(void *a1)
{
  NSMutableString *v2;
  unint64_t v3;

  if (!objc_msgSend(a1, "count"))
    return CFSTR("[]");
  v2 = +[NSString stringWithString:](NSMutableString, "stringWithString:", CFSTR("["));
  -[NSMutableString appendString:](v2, "appendString:", descriptionForArgumentEntry((_QWORD *)objc_msgSend(a1, "objectAtIndex:", 0)));
  if ((unint64_t)objc_msgSend(a1, "count") >= 2 && (unint64_t)objc_msgSend(a1, "count") >= 2)
  {
    v3 = 1;
    do
      -[NSMutableString appendFormat:](v2, "appendFormat:", CFSTR(", %@"), descriptionForArgumentEntry((_QWORD *)objc_msgSend(a1, "objectAtIndex:", v3++)));
    while (v3 < objc_msgSend(a1, "count"));
  }
  -[NSMutableString appendFormat:](v2, "appendFormat:", CFSTR("]"));
  return (const __CFString *)v2;
}

NSString *descriptionForArgumentEntry(_QWORD *a1)
{
  NSMutableString *v2;
  void *v3;
  unint64_t v4;
  Protocol *v5;
  const char *Name;
  uint64_t v8;
  uint64_t v9;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (!objc_msgSend(a1, "count"))
      return (NSString *)CFSTR("{}");
    v2 = +[NSString stringWithString:](NSMutableString, "stringWithString:", CFSTR("{"));
    v3 = (void *)objc_msgSend(a1, "allObjects");
    -[NSMutableString appendFormat:](v2, "appendFormat:", CFSTR("%s"), class_getName((Class)objc_msgSend(v3, "objectAtIndex:", 0)));
    if ((unint64_t)objc_msgSend(v3, "count") >= 2 && (unint64_t)objc_msgSend(v3, "count") >= 2)
    {
      v4 = 1;
      do
        -[NSMutableString appendFormat:](v2, "appendFormat:", CFSTR(", %s"), class_getName((Class)objc_msgSend(v3, "objectAtIndex:", v4++)));
      while (v4 < objc_msgSend(v3, "count"));
    }
    -[NSMutableString appendFormat:](v2, "appendFormat:", CFSTR("}"));
    return (NSString *)v2;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = (Protocol *)objc_msgSend(a1, "protocol");
    if (v5)
      Name = protocol_getName(v5);
    else
      Name = "(none set)";
    return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NSXPCInterface (%p) / %s"), a1, Name);
  }
  else
  {
    if ((objc_msgSend(a1, "isEqual:", objc_msgSend(MEMORY[0x1E0C99E38], "null")) & 1) != 0)
      return (NSString *)CFSTR("{None}");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (a1)
        v8 = a1[1];
      else
        v8 = 0;
      return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("XPC Type: %@"), v8, v9);
    }
    else
    {
      return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), objc_opt_class(), v9);
    }
  }
}

CFStringRef _selKeyCallbackCopyDescription(const char *a1)
{
  const __CFAllocator *v1;
  const char *Name;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
  Name = sel_getName(a1);
  return CFStringCreateWithCString(v1, Name, 0x8000100u);
}

void NSProgressTSDDestroy(uint64_t a1)
{
  if (a1)
  {
    if (*(_QWORD *)(a1 + 8))
      NSProgressTSDDestroy();

    free((void *)a1);
  }
}

uint64_t ___lockedLocalizedDescriptionForNotFile_block_invoke()
{
  qword_1ECD098B0 = objc_alloc_init(NSNumberFormatter);
  objc_msgSend((id)qword_1ECD098B0, "setFormatterBehavior:", 1040);
  objc_msgSend((id)qword_1ECD098B0, "setNumberStyle:", 3);
  objc_msgSend((id)qword_1ECD098B0, "setMaximumFractionDigits:", 0);
  objc_msgSend((id)qword_1ECD098B0, "setMinimumFractionDigits:", 0);
  objc_msgSend((id)qword_1ECD098B0, "setLocale:", objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale"));
  return objc_msgSend((id)qword_1ECD098B0, "setRoundingMode:", 1);
}

uint64_t _lockedLocalizedTimeRemaining(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = objc_msgSend(*(id *)(a1 + 8), "objectForKey:", CFSTR("NSProgressEstimatedTimeRemainingKey"));
  if (!v2)
    return 0;
  v3 = (void *)v2;
  if (!_NSIsNSNumber())
    return 0;
  v4 = objc_msgSend(*(id *)(a1 + 8), "objectForKey:", CFSTR("NSProgressLocalizedDescriptionTimeRemainingFormatterKey"));
  if (!v4 || (v5 = (void *)v4, (objc_opt_isKindOfClass() & 1) == 0))
  {
    if (qword_1ECD098C0 != -1)
      dispatch_once(&qword_1ECD098C0, &__block_literal_global_687);
    v5 = (void *)qword_1ECD098B8;
  }
  objc_msgSend(v3, "doubleValue");
  return objc_msgSend(v5, "stringFromTimeInterval:");
}

NSString *_localizedAppendedTimeRemaining(NSString *result)
{
  if (result)
    return +[NSString stringWithFormat:](NSString, "stringWithFormat:", objc_msgSend((id)_NSFoundationBundle(), "localizedStringForKey:value:table:", CFSTR(" — %@"), &stru_1E0F56070, CFSTR("Progress")), result);
  return result;
}

uint64_t ___lockedLocalizedTimeRemaining_block_invoke()
{
  qword_1ECD098B8 = objc_alloc_init(NSDateComponentsFormatter);
  objc_msgSend((id)qword_1ECD098B8, "setUnitsStyle:", 3);
  objc_msgSend((id)qword_1ECD098B8, "setIncludesTimeRemainingPhrase:", 1);
  return objc_msgSend((id)qword_1ECD098B8, "setIncludesApproximationPhrase:", 1);
}

uint64_t ___lockedLocalizedAdditionalDescriptionForNotFile_block_invoke()
{
  qword_1ECD098D0 = objc_alloc_init(NSNumberFormatter);
  objc_msgSend((id)qword_1ECD098D0, "setFormatterBehavior:", 1040);
  objc_msgSend((id)qword_1ECD098D0, "setNumberStyle:", 1);
  objc_msgSend((id)qword_1ECD098D0, "setUsesGroupingSeparator:", 1);
  return objc_msgSend((id)qword_1ECD098D0, "setLocale:", objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale"));
}

void sub_1820314A0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  id v9;
  NSObject *v10;
  uint64_t v11;

  if (a2)
  {
    if (a2 == 2)
    {
      v9 = objc_begin_catch(exc_buf);
      v10 = _NSOSLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = objc_msgSend(v9, "description");
        LODWORD(a9) = 138412290;
        *(_QWORD *)((char *)&a9 + 4) = v11;
        _os_log_error_impl(&dword_1817D9000, v10, OS_LOG_TYPE_ERROR, "NSProgress Exception caught: %@", (uint8_t *)&a9, 0xCu);
      }
      objc_end_catch();
      JUMPOUT(0x182031450);
    }
    objc_begin_catch(exc_buf);
    JUMPOUT(0x182031454);
  }
  _Unwind_Resume(exc_buf);
}

double _NSOrderedChangesInit(uint64_t a1, Class a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = objc_msgSend([a2 alloc], "initWithObjects:count:", a3, a4);
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 16) = 0;
  result = NAN;
  *(_OWORD *)(a1 + 24) = xmmword_1822B5320;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

void _NSOrderedChangesRelease(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void *v4;

  for (i = *(_QWORD *)(a1 + 40); i != 0x7FFFFFFFFFFFFFFFLL; i = *(_QWORD *)(v3 + 32))
  {
    v3 = *(_QWORD *)(a1 + 16) + 40 * i;

  }
  v4 = *(void **)(a1 + 16);
  if (v4)
    free(v4);

}

uint64_t _NSOrderedChangesCopy(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  id (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, void *);
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(*(id *)a1, "copy");
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  *(int64x2_t *)(a2 + 40) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 24) = xmmword_1822B5320;
  *(_QWORD *)(a2 + 56) = 0;
  v12 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v9 = ___NSOrderedChangesCopy_block_invoke;
  v10 = &__block_descriptor_40_e21_v48__0Q8Q16Q24_32_B40l;
  v11 = a2;
  if (*(_QWORD *)(a1 + 56))
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v6 = 0;
      do
      {
        if (v6 > *(_QWORD *)(a1 + 56))
          -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void __NSOrderedChangeListEnumerate(NSOrderedChangeList *, BOOL *, _NSOrderedChangeEnumerator)"), CFSTR("NSOrderedChanges.m"), 257, CFSTR("overstepped bounds of enumeration"));
        v7 = *(_QWORD *)(a1 + 16);
        result = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, char *))v9)(v8, *(_QWORD *)(v7 + 40 * v5), *(_QWORD *)(v7 + 40 * v5 + 8), *(_QWORD *)(v7 + 40 * v5 + 16), *(_QWORD *)(v7 + 40 * v5 + 24), &v12);
        if (v12)
          break;
        ++v6;
        v5 = *(_QWORD *)(v7 + 40 * v5 + 32);
      }
      while (v5 != 0x7FFFFFFFFFFFFFFFLL);
    }
  }
  return result;
}

uint64_t _NSOrderedChangesEnumerateChanges(uint64_t result, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t (*v10)(uint64_t, uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v10 = ___NSOrderedChangesEnumerateChanges_block_invoke;
  v11 = &unk_1E0F55E30;
  v12 = a4;
  v13 = a2;
  if (*(_QWORD *)(result + 56))
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    if (v5 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v7 = 0;
      do
      {
        if (v7 > *(_QWORD *)(v4 + 56))
          -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void __NSOrderedChangeListEnumerate(NSOrderedChangeList *, BOOL *, _NSOrderedChangeEnumerator)"), CFSTR("NSOrderedChanges.m"), 257, CFSTR("overstepped bounds of enumeration"));
        v8 = *(_QWORD *)(v4 + 16);
        result = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _BYTE *))v10)(v9, *(_QWORD *)(v8 + 40 * v5), *(_QWORD *)(v8 + 40 * v5 + 8), *(_QWORD *)(v8 + 40 * v5 + 16), *(_QWORD *)(v8 + 40 * v5 + 24), a3);
        if (*a3)
          break;
        ++v7;
        v5 = *(_QWORD *)(v8 + 40 * v5 + 32);
      }
      while (v5 != 0x7FFFFFFFFFFFFFFFLL);
    }
  }
  return result;
}

id _NSOrderedChangesAddChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  id result;
  uint64_t v21;
  uint64_t v22;

  if (!*(_BYTE *)(a1 + 8))
  {
    v10 = objc_msgSend(*(id *)a1, "mutableCopy");

    *(_QWORD *)a1 = v10;
    *(_BYTE *)(a1 + 8) = 1;
  }
  switch(a2)
  {
    case 2:
      objc_msgSend(*(id *)a1, "insertObject:atIndex:", a5, a4);
      break;
    case 3:
      objc_msgSend(*(id *)a1, "removeObjectAtIndex:", a4);
      break;
    case 4:
      objc_msgSend(*(id *)a1, "replaceObjectAtIndex:withObject:", a4, a5);
      break;
    case 5:
      objc_msgSend(*(id *)a1, "moveObjectsAtIndexes:toIndex:", +[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", a3), a4);
      if (a3 == 0x7FFFFFFFFFFFFFFFLL)
        -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void __NSOrderedChangeListAppend(NSOrderedChanges *, NSKeyValueChange, NSUInteger, NSUInteger, id)"), CFSTR("NSOrderedChanges.m"), 187, CFSTR("move sources not found"));
      break;
    default:
      break;
  }
  v11 = *(_QWORD *)(a1 + 24);
  if (v11 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v14 = *(char **)(a1 + 16);
    goto LABEL_21;
  }
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    v13 = malloc_good_size(40 * v12 + 40) / 0x28;
    if (v13 <= *(_QWORD *)(a1 + 32))
      -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void __NSOrderedChangeListGrowIfNeeded(NSOrderedChangeList *)"), CFSTR("NSOrderedChanges.m"), 154, CFSTR("capacity should be larger than previously requested"));
  }
  else
  {
    v13 = 32;
  }
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
  {
    v14 = (char *)malloc_type_malloc(40 * v13, 0x1080040A84C04D1uLL);
    if (v14)
      goto LABEL_17;
LABEL_27:
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("Unable to allocate underlying buffer for change list"), 0));
  }
  v14 = (char *)MEMORY[0x186DA80E4](v15, 40 * v13, 0x1080040A84C04D1, 0);
  if (!v14)
    goto LABEL_27;
LABEL_17:
  v16 = *(_QWORD *)(a1 + 32);
  if (v16 < v13)
  {
    v17 = (uint64_t *)&v14[40 * v16 + 32];
    v18 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      *(v17 - 1) = 0;
      *v17 = v18;
      v18 = v16++;
      v17 += 5;
    }
    while (v13 != v16);
  }
  v11 = v13 - 1;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v13 - 1;
  *(_QWORD *)(a1 + 32) = v13;
LABEL_21:
  v19 = &v14[40 * v11];
  *((_QWORD *)v19 + 1) = a3;
  *((_QWORD *)v19 + 2) = a4;
  result = a5;
  *(_QWORD *)v19 = a2;
  *((_QWORD *)v19 + 3) = result;
  *((_QWORD *)v19 + 4) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  if (*(_QWORD *)(a1 + 40) == 0x7FFFFFFFFFFFFFFFLL)
    *(_QWORD *)(a1 + 40) = v11;
  v21 = *(_QWORD *)(a1 + 48);
  if (v21 != 0x7FFFFFFFFFFFFFFFLL)
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v21 + 32) = v11;
  v22 = *(_QWORD *)(a1 + 56) + 1;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v22;
  return result;
}

void _NSOrderedChangesSort(id *a1, uint64_t a2, unint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v16[2048];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a3 >= 2)
  {
    v6 = v16;
    bzero(v16, 0x800uLL);
    if (2 * a3 >= 0x101)
      v6 = malloc_type_malloc(16 * a3, 0x100004000313F17uLL);
    CFSortIndexes();
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)&v6[8 * v7];
      if (v8 == v7)
      {
        v9 = v7 + 1;
      }
      else
      {
        v10 = v8 + a2;
        v11 = v7 + a2;
        _NSOrderedChangesAddChange((uint64_t)a1, 5, v8 + a2, v7 + a2, (void *)objc_msgSend(*a1, "objectAtIndex:", v8 + a2));
        v9 = v7 + 1;
        if (v7 + 1 < a3)
        {
          v12 = a3 - 1 - v7;
          v13 = (unint64_t *)&v6[8 * v7 + 8];
          do
          {
            v14 = *v13 - (*v13 >= v10);
            if (*v13 >= v10 || v14 >= v11)
            {
              if (v14 >= v11)
                ++v14;
              *v13 = v14;
            }
            ++v13;
            --v12;
          }
          while (v12);
        }
      }
      v7 = v9;
    }
    while (v9 != a3);
    if (v6 != v16)
      free(v6);
  }
}

uint64_t _NSXPCSerializationDebugInfoForReadData(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSString *v4;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_182303BA0;
  v2 = *a1;
  v3 = a1[1];
  DWORD2(v6) = *(_BYTE *)(*a1 + 8) & 0xF0;
  v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%.8s %llu bytes (-%llu bytes)\n"), v2, v3, _NSXPCSerializationDebugSizeForObject(a1, (uint64_t)&v6) - a1[1] + 8);
  return (uint64_t)-[NSString stringByAppendingString:](v4, "stringByAppendingString:", _NSXPCSerializationDebugInfoForObject(a1, (char **)&v6, 2, 2));
}

uint64_t _NSXPCSerializationDebugSizeForObject(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= a1[1])
    return 0;
  v5 = *(_DWORD *)(a2 + 8);
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14[0] = 0;
  switch(v5)
  {
    case 208:
      v14[0] = 9;
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = ___NSXPCSerializationDebugSizeForObject_block_invoke_2;
      v9[3] = &unk_1E0F55F48;
      v9[4] = &v11;
      v9[5] = a1;
      _iterateDictionaryKeysAndValues(a1, (_QWORD *)a2, (uint64_t)v9);
      break;
    case 160:
      v14[0] = 9;
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = ___NSXPCSerializationDebugSizeForObject_block_invoke;
      v10[3] = &unk_1E0F55F20;
      v10[4] = &v11;
      v10[5] = a1;
      _NSXPCSerializationIterateArrayObject(a1, (_QWORD *)a2, (uint64_t)v10);
      break;
    case 128:
      if (_getReferenceAtMarker(a1, (_QWORD *)a2, v2, v14))
      {
        *(_DWORD *)(a2 + 8) = *(_BYTE *)(*a1 + *(_QWORD *)a2) & 0xF0;
        v6 = _NSXPCSerializationDebugSizeForObject(a1);
        v12[3] = v6;
      }
      break;
    default:
      if (_getLastByteOfValueIncludingMarker(a1, v2, v14))
        v12[3] = v12[3] - *(_QWORD *)a2 + 1;
      break;
  }
  v7 = v12[3];
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1820327BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 56), 8);
  _Unwind_Resume(a1);
}

NSString *_NSXPCSerializationDebugInfoForObject(uint64_t *a1, char **a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  unint64_t v7;
  void *v10;
  unint64_t v11;
  NSString *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[8];
  _QWORD v19[9];
  const __CFString *v20[4];
  uint64_t v21;
  unint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((unint64_t)*a2 < a1[1])
  {
    HIDWORD(v7) = *((_DWORD *)a2 + 2);
    LODWORD(v7) = HIDWORD(v7) - 16;
    switch((v7 >> 4))
    {
      case 0u:
      case 1u:
      case 0xEu:
        v10 = _NSXPCSerializationNumberForObject(a1, (unint64_t *)a2);
        v11 = (unint64_t)*a2;
        if (v10)
          return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(@%lld) %@"), v11, objc_msgSend(v10, "debugDescription"));
        return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<bad number @%lld>"), v11, v17);
      case 3u:
        v10 = _NSXPCSerializationDataForObject(a1, (unint64_t *)a2);
        v11 = (unint64_t)*a2;
        if (v10)
          return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(@%lld) %@"), v11, objc_msgSend(v10, "debugDescription"));
        else
          return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<bad data @%lld>"), v11, v17);
      case 5u:
        v20[0] = 0;
        if (_getStringAtMarker(a1, v20, v5, v22) && v20[0])
          return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(@%lld) %@"), *a2, v20[0]);
        else
          return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<bad string @%lld>"), *a2);
      case 6u:
        v20[0] = 0;
        if (_getASCIIStringAtMarker(a1, v20, (unint64_t)v5, &v21, v22))
          return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(@%lld) %s"), *a2, v20[0]);
        else
          return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<bad ASCII string @%lld>"), *a2, v17);
      case 7u:
        v20[0] = 0;
        if (_getReferenceAtMarker(a1, v20, (unint64_t)v5, v22) && v20[0])
          return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(@%lld) ref #%lld"), *a2, v20[0]);
        else
          return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<bad reference @%lld>"), *a2, v17);
      case 9u:
        v13 = +[NSString string](NSMutableString, "string");
        -[NSString appendFormat:](v13, "appendFormat:", CFSTR("(@%lld) [\n"), *a2);
        v20[0] = 0;
        v20[1] = (const __CFString *)v20;
        v20[2] = (const __CFString *)0x2020000000;
        v20[3] = 0;
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 3221225472;
        v19[2] = ___NSXPCSerializationDebugInfoForObject_block_invoke;
        v19[3] = &unk_1E0F55F70;
        v19[4] = v13;
        v19[5] = v20;
        v19[6] = a3;
        v19[7] = a1;
        v19[8] = a4;
        _NSXPCSerializationIterateArrayObject(a1, a2, (uint64_t)v19);
        v16 = a3 - a4;
        if (a3 != a4)
        {
          do
          {
            -[NSString appendString:](v13, "appendString:", CFSTR(" "));
            --v16;
          }
          while (v16);
        }
        -[NSString appendString:](v13, "appendString:", CFSTR("]"));
        _Block_object_dispose(v20, 8);
        return v13;
      case 0xAu:
        return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(@%lld) YES"), *a2, v17);
      case 0xBu:
        return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(@%lld) NO"), *a2, v17);
      case 0xCu:
        v13 = +[NSString string](NSMutableString, "string");
        -[NSString appendFormat:](v13, "appendFormat:", CFSTR("(@%lld) {\n"), *a2);
        v18[0] = MEMORY[0x1E0C809B0];
        v18[1] = 3221225472;
        v18[2] = ___NSXPCSerializationDebugInfoForObject_block_invoke_2;
        v18[3] = &unk_1E0F55F98;
        v18[4] = v13;
        v18[5] = a3;
        v18[6] = a1;
        v18[7] = a4;
        _iterateDictionaryKeysAndValues(a1, a2, (uint64_t)v18);
        v15 = a3 - a4;
        if (a3 != a4)
        {
          do
          {
            -[NSString appendString:](v13, "appendString:", CFSTR(" "));
            --v15;
          }
          while (v15);
        }
        -[NSString appendString:](v13, "appendString:", CFSTR("}"));
        return v13;
      case 0xDu:
        return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(@%lld) <null>"), *a2, v17);
      default:
        return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<invalid object @%lld>"), *a2, v17);
    }
  }
  return (NSString *)&stru_1E0F56070;
}

void sub_182032BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void ___reserveSpace_block_invoke()
{
  objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("Unable to allocate enough memory to encode data"), 0));
}

void sub_182033000(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 72), 8);
  _Unwind_Resume(a1);
}

void NSUnimplemented_(uint64_t a1)
{
  qword_1EDC47C18 = a1;
  __break(1u);
}

void NSRequestConcreteImplementation(uint64_t a1, const char *a2, objc_class *a3)
{
  uint64_t v5;
  const char *Name;
  NSString *v7;
  objc_class *v8;
  const char *v9;
  uint64_t v10;

  v5 = objc_opt_class();
  Name = sel_getName(a2);
  if ((objc_class *)v5 == a3)
  {
    v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** -%s cannot be sent to an abstract object of class %s: Create a concrete instance!"), Name, class_getName(a3), v10);
  }
  else
  {
    v8 = (objc_class *)objc_opt_class();
    v9 = _NSNameOfClass(v8);
    v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** -%s only defined for abstract class.  Define -[%s %s]!"), Name, v9, sel_getName(a2));
  }
  objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], v7, 0));
}

void _NSRequestConcreteObject(int a1, SEL sel)
{
  const char *Name;
  objc_class *v3;
  void *v4;

  Name = sel_getName(sel);
  v3 = (objc_class *)objc_opt_class();
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("*** initialization method -%s cannot be sent to an abstract object of class %s: Create a concrete instance!"), Name, _NSNameOfClass(v3)), 0);
  objc_exception_throw(v4);
}

uint64_t Selector.init(_:)()
{
  return MEMORY[0x1E0DEFCD0]();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return MEMORY[0x1E0DEF0A0]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x1E0DEF0A8]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x1E0DEF0B0]();
}

uint64_t TypeMetadata.descriptor.getter()
{
  return MEMORY[0x1E0D87E80]();
}

uint64_t TypeMetadata._resolve(_:)()
{
  return MEMORY[0x1E0D87E88]();
}

uint64_t TupleMetadata.Elements.Element.metadata.getter()
{
  return MEMORY[0x1E0D87E90]();
}

uint64_t TupleMetadata.Elements.endIndex.getter()
{
  return MEMORY[0x1E0D87E98]();
}

uint64_t TupleMetadata.Elements.subscript.getter()
{
  return MEMORY[0x1E0D87EA0]();
}

uint64_t TupleMetadata.init(_:)()
{
  return MEMORY[0x1E0D87EA8]();
}

uint64_t FieldDescriptor.subscript.getter()
{
  return MEMORY[0x1E0D87EC8]();
}

uint64_t MangledTypeReference.standardSubstitution.getter()
{
  return MEMORY[0x1E0D87EE8]();
}

uint64_t static Metadata.Kind.tuple.getter()
{
  return MEMORY[0x1E0D87F08]();
}

uint64_t type metadata accessor for AnyRegexOutput()
{
  return MEMORY[0x1E0DF1E50]();
}

uint64_t dispatch thunk of RegexComponent.regex.getter()
{
  return MEMORY[0x1E0DF1E68]();
}

uint64_t static RegexWordBoundaryKind.simple.getter()
{
  return MEMORY[0x1E0DF1E88]();
}

uint64_t type metadata accessor for RegexWordBoundaryKind()
{
  return MEMORY[0x1E0DF1E90]();
}

uint64_t CustomConsumingRegexComponent.regex.getter()
{
  return MEMORY[0x1E0DF1EB0]();
}

uint64_t Regex.ignoresCase(_:)()
{
  return MEMORY[0x1E0DF1ED8]();
}

uint64_t Regex._literalPattern.getter()
{
  return MEMORY[0x1E0DF1EF0]();
}

uint64_t Regex.wordBoundaryKind(_:)()
{
  return MEMORY[0x1E0DF1EF8]();
}

uint64_t Regex.Match.range.getter()
{
  return MEMORY[0x1E0DF1F20]();
}

uint64_t Regex<A>.init<A>(_:)()
{
  return MEMORY[0x1E0DF1F40]();
}

uint64_t Regex<A>.init(_:)()
{
  return MEMORY[0x1E0DF1F48]();
}

uint64_t type metadata accessor for Regex()
{
  return MEMORY[0x1E0DF1F50]();
}

uint64_t PartialType.create2(with:)()
{
  return MEMORY[0x1E0D84260]();
}

uint64_t GenericArguments2.subscript.getter()
{
  return MEMORY[0x1E0D84288]();
}

uint64_t Type.genericArguments.getter()
{
  return MEMORY[0x1E0D84290]();
}

uint64_t Type.genericArguments2.getter()
{
  return MEMORY[0x1E0D84298]();
}

uint64_t _HashTable.UnsafeHandle._startIterator(bucket:)()
{
  return MEMORY[0x1E0D12E30]();
}

uint64_t _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)()
{
  return MEMORY[0x1E0D12E38]();
}

uint64_t _HashTable.UnsafeHandle.subscript.setter()
{
  return MEMORY[0x1E0D12E40]();
}

uint64_t _HashTable.BucketIterator.currentValue.getter()
{
  return MEMORY[0x1E0D12E48]();
}

uint64_t _HashTable.BucketIterator.currentValue.setter()
{
  return MEMORY[0x1E0D12E50]();
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance()()
{
  MEMORY[0x1E0D12E58]();
}

uint64_t static _HashTable.maximumCapacity(forScale:)()
{
  return MEMORY[0x1E0D12E60]();
}

uint64_t static _HashTable.minimumCapacity(forScale:)()
{
  return MEMORY[0x1E0D12E68]();
}

uint64_t _HashTable.copy()()
{
  return MEMORY[0x1E0D12E70]();
}

uint64_t static _HashTable.scale(forCapacity:)()
{
  return MEMORY[0x1E0D12E78]();
}

uint64_t _HashTable.init(scale:reservedScale:)()
{
  return MEMORY[0x1E0D12E80]();
}

uint64_t BigSubstring.isIdentical(to:)()
{
  return MEMORY[0x1E0D12E90]();
}

uint64_t BigSubstring.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1E0D12E98]();
}

uint64_t BigSubstring.UnicodeScalarView.isIdentical(to:)()
{
  return MEMORY[0x1E0D12EA0]();
}

uint64_t BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1E0D12EA8]();
}

uint64_t BigSubstring.UnicodeScalarView.base.getter()
{
  return MEMORY[0x1E0D12EB0]();
}

uint64_t BigSubstring.UnicodeScalarView.index(after:)()
{
  return MEMORY[0x1E0D12EB8]();
}

uint64_t BigSubstring.UnicodeScalarView.index(before:)()
{
  return MEMORY[0x1E0D12EC0]();
}

uint64_t BigSubstring.UnicodeScalarView.distance(from:to:)()
{
  return MEMORY[0x1E0D12EC8]();
}

uint64_t BigSubstring.UnicodeScalarView.subscript.getter()
{
  return MEMORY[0x1E0D12EE0]();
}

{
  return MEMORY[0x1E0D12EE8]();
}

uint64_t static BigSubstring.== infix(_:_:)()
{
  return MEMORY[0x1E0D12EF0]();
}

uint64_t BigSubstring.base.getter()
{
  return MEMORY[0x1E0D12EF8]();
}

uint64_t BigSubstring.hash(into:)()
{
  return MEMORY[0x1E0D12F00]();
}

uint64_t BigSubstring.UTF8View.index(after:)()
{
  return MEMORY[0x1E0D12F08]();
}

uint64_t BigSubstring.UTF8View.index(before:)()
{
  return MEMORY[0x1E0D12F10]();
}

uint64_t BigSubstring.UTF8View.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0D12F18]();
}

uint64_t BigSubstring.UTF8View.subscript.getter()
{
  return MEMORY[0x1E0D12F20]();
}

uint64_t BigSubstring.distance(from:to:)()
{
  return MEMORY[0x1E0D12F28]();
}

uint64_t BigSubstring.subscript.getter()
{
  return MEMORY[0x1E0D12F40]();
}

uint64_t BigString.startIndex.getter()
{
  return MEMORY[0x1E0D13010]();
}

uint64_t BigString.init(stringLiteral:)()
{
  return MEMORY[0x1E0D13018]();
}

uint64_t BigString.unicodeScalars.modify()
{
  return MEMORY[0x1E0D13020]();
}

uint64_t BigString.unicodeScalars.getter()
{
  return MEMORY[0x1E0D13028]();
}

uint64_t BigString.UnicodeScalarView.replaceSubrange(_:with:)()
{
  return MEMORY[0x1E0D13030]();
}

uint64_t BigString.UnicodeScalarView.index(roundingUp:)()
{
  return MEMORY[0x1E0D13038]();
}

uint64_t BigString.UnicodeScalarView.index(roundingDown:)()
{
  return MEMORY[0x1E0D13040]();
}

uint64_t BigString.UnicodeScalarView.index(after:)()
{
  return MEMORY[0x1E0D13048]();
}

uint64_t BigString.UnicodeScalarView.index(before:)()
{
  return MEMORY[0x1E0D13050]();
}

uint64_t BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0D13058]();
}

uint64_t BigString.UnicodeScalarView.index(_:offsetBy:)()
{
  return MEMORY[0x1E0D13060]();
}

uint64_t BigString.UnicodeScalarView.distance(from:to:)()
{
  return MEMORY[0x1E0D13068]();
}

uint64_t BigString.UnicodeScalarView.subscript.getter()
{
  return MEMORY[0x1E0D13070]();
}

{
  return MEMORY[0x1E0D13078]();
}

uint64_t BigString.utf8.getter()
{
  return MEMORY[0x1E0D13080]();
}

uint64_t BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)()
{
  return MEMORY[0x1E0D13088]();
}

uint64_t BigString.Index.init(_utf8Offset:)()
{
  return MEMORY[0x1E0D13090]();
}

uint64_t BigString.index(roundingDown:)()
{
  return MEMORY[0x1E0D130A0]();
}

uint64_t BigString.index(after:)()
{
  return MEMORY[0x1E0D130A8]();
}

uint64_t BigString.index(before:)()
{
  return MEMORY[0x1E0D130B0]();
}

uint64_t BigString.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0D130B8]();
}

uint64_t BigString.index(_:offsetBy:)()
{
  return MEMORY[0x1E0D130C0]();
}

uint64_t BigString.utf16.getter()
{
  return MEMORY[0x1E0D130C8]();
}

uint64_t BigString.append(contentsOf:)()
{
  return MEMORY[0x1E0D130D0]();
}

uint64_t BigString.isEmpty.getter()
{
  return MEMORY[0x1E0D130D8]();
}

uint64_t BigString.UTF8View.startIndex.getter()
{
  return MEMORY[0x1E0D130E0]();
}

uint64_t BigString.UTF8View.count.getter()
{
  return MEMORY[0x1E0D130E8]();
}

uint64_t BigString.UTF8View.index(roundingDown:)()
{
  return MEMORY[0x1E0D130F0]();
}

uint64_t BigString.UTF8View.index(after:)()
{
  return MEMORY[0x1E0D130F8]();
}

uint64_t BigString.UTF8View.index(before:)()
{
  return MEMORY[0x1E0D13100]();
}

uint64_t BigString.UTF8View.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0D13108]();
}

uint64_t BigString.UTF8View.index(_:offsetBy:)()
{
  return MEMORY[0x1E0D13110]();
}

uint64_t BigString.UTF8View.endIndex.getter()
{
  return MEMORY[0x1E0D13118]();
}

uint64_t BigString.UTF8View.subscript.getter()
{
  return MEMORY[0x1E0D13120]();
}

{
  return MEMORY[0x1E0D13128]();
}

uint64_t BigString.endIndex.getter()
{
  return MEMORY[0x1E0D13130]();
}

uint64_t BigString.UTF16View.startIndex.getter()
{
  return MEMORY[0x1E0D13138]();
}

uint64_t BigString.UTF16View.count.getter()
{
  return MEMORY[0x1E0D13140]();
}

uint64_t BigString.UTF16View.index(before:)()
{
  return MEMORY[0x1E0D13148]();
}

uint64_t BigString.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1E0D13150]();
}

uint64_t BigString.UTF16View.distance(from:to:)()
{
  return MEMORY[0x1E0D13158]();
}

uint64_t BigString.UTF16View.endIndex.getter()
{
  return MEMORY[0x1E0D13160]();
}

uint64_t BigString.UTF16View.subscript.getter()
{
  return MEMORY[0x1E0D13168]();
}

uint64_t BigString.init()()
{
  return MEMORY[0x1E0D13170]();
}

uint64_t BigString.subscript.getter()
{
  return MEMORY[0x1E0D13180]();
}

{
  return MEMORY[0x1E0D131B0]();
}

uint64_t BigString.init(_:)()
{
  return MEMORY[0x1E0D13188]();
}

{
  return MEMORY[0x1E0D13190]();
}

{
  return MEMORY[0x1E0D131A0]();
}

{
  return MEMORY[0x1E0D131A8]();
}

uint64_t BigString.init<A>(_:)()
{
  return MEMORY[0x1E0D13198]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t Logger.init()()
{
  return MEMORY[0x1E0DF2250]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x1E0DF2268]();
}

uint64_t XPC_TYPE_DATA.getter()
{
  return MEMORY[0x1E0DF03B0]();
}

uint64_t XPCCodableObject.copyUnderlyingXPCObject()()
{
  return MEMORY[0x1E0DF0528]();
}

uint64_t XPCCodableObject.type.getter()
{
  return MEMORY[0x1E0DF0530]();
}

uint64_t XPCCodableObject.init(copying:)()
{
  return MEMORY[0x1E0DF0538]();
}

uint64_t type metadata accessor for XPCCodableObject()
{
  return MEMORY[0x1E0DF0540]();
}

uint64_t MAP_FAILED.getter()
{
  return MEMORY[0x1E0DEF358]();
}

uint64_t static POSIXErrorCode.EWOULDBLOCK.getter()
{
  return MEMORY[0x1E0DF2008]();
}

uint64_t POSIXErrorCode.init(rawValue:)()
{
  return MEMORY[0x1E0DF2010]();
}

uint64_t POSIXErrorCode.rawValue.getter()
{
  return MEMORY[0x1E0DF2018]();
}

uint64_t open(_:_:_:)()
{
  return MEMORY[0x1E0DEF390]();
}

uint64_t open(_:_:)()
{
  return MEMORY[0x1E0DEF398]();
}

uint64_t errno.getter()
{
  return MEMORY[0x1E0DF2040]();
}

uint64_t errno.setter()
{
  return MEMORY[0x1E0DF2048]();
}

Swift::Int32 __swiftcall fcntl(_:_:_:)(Swift::Int32 a1, Swift::Int32 a2, Swift::Int32 a3)
{
  return MEMORY[0x1E0DEF3A0](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

uint64_t fcntl(_:_:_:)()
{
  return MEMORY[0x1E0DEF3A8]();
}

Swift::Int32 __swiftcall fcntl(_:_:)(Swift::Int32 a1, Swift::Int32 a2)
{
  return MEMORY[0x1E0DEF3B0](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

uint64_t S_IFMT.getter()
{
  return MEMORY[0x1E0DEF3C0]();
}

uint64_t S_IFBLK.getter()
{
  return MEMORY[0x1E0DEF3C8]();
}

uint64_t S_IFCHR.getter()
{
  return MEMORY[0x1E0DEF3D0]();
}

uint64_t S_IFDIR.getter()
{
  return MEMORY[0x1E0DEF3D8]();
}

uint64_t S_IFLNK.getter()
{
  return MEMORY[0x1E0DEF3E0]();
}

uint64_t S_IFREG.getter()
{
  return MEMORY[0x1E0DEF3E8]();
}

uint64_t S_IRWXG.getter()
{
  return MEMORY[0x1E0DEF400]();
}

uint64_t S_IRWXO.getter()
{
  return MEMORY[0x1E0DEF408]();
}

uint64_t S_IRWXU.getter()
{
  return MEMORY[0x1E0DEF410]();
}

uint64_t S_ISVTX.getter()
{
  return MEMORY[0x1E0DEF418]();
}

uint64_t S_IWUSR.getter()
{
  return MEMORY[0x1E0DEF428]();
}

uint64_t S_IFSOCK.getter()
{
  return MEMORY[0x1E0DEF438]();
}

uint64_t type metadata accessor for FilePath()
{
  return MEMORY[0x1E0DF0138]();
}

uint64_t FilePath.init(_:)()
{
  return MEMORY[0x1E0DF0150]();
}

uint64_t CustomCombineIdentifierConvertible<>.combineIdentifier.getter()
{
  return MEMORY[0x1E0C95640]();
}

uint64_t type metadata accessor for CombineIdentifier()
{
  return MEMORY[0x1E0C95660]();
}

uint64_t dispatch thunk of Subscriber.receive(completion:)()
{
  return MEMORY[0x1E0C95CD8]();
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)()
{
  return MEMORY[0x1E0C95CE0]();
}

uint64_t dispatch thunk of Subscriber.receive(_:)()
{
  return MEMORY[0x1E0C95CE8]();
}

uint64_t static Subscribers.Demand.== infix(_:_:)()
{
  return MEMORY[0x1E0C95D40]();
}

uint64_t static Subscribers.Demand.none.getter()
{
  return MEMORY[0x1E0C95D48]();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return MEMORY[0x1E0C95D50]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x1E0C95E00]();
}

uint64_t AnyCancellable.init<A>(_:)()
{
  return MEMORY[0x1E0C95E30]();
}

uint64_t AnyCancellable.init(_:)()
{
  return MEMORY[0x1E0C95E48]();
}

uint64_t Publisher.map<A>(_:)()
{
  return MEMORY[0x1E0C96248]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t DispatchData.enumerateBytes(_:)()
{
  return MEMORY[0x1E0DEF5F0]();
}

uint64_t type metadata accessor for DispatchData()
{
  return MEMORY[0x1E0DEF648]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x1E0DEF758]();
}

uint64_t dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter()
{
  return MEMORY[0x1E0DE9DA8]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.significandWidth.getter()
{
  return MEMORY[0x1E0DE9DB0]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter()
{
  return MEMORY[0x1E0DE9DB8]();
}

uint64_t dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter()
{
  return MEMORY[0x1E0DE9DC0]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter()
{
  return MEMORY[0x1E0DE9DC8]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)()
{
  return MEMORY[0x1E0DE9DD0]();
}

uint64_t static BinaryFloatingPoint._convert<A>(from:)()
{
  return MEMORY[0x1E0DE9DE8]();
}

uint64_t static BinaryFloatingPoint<>._convert<A>(from:)()
{
  return MEMORY[0x1E0DE9E10]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init(_:)()
{
  return MEMORY[0x1E0DE9E18]();
}

{
  return MEMORY[0x1E0DE9E20]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x1E0DE9E28]();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return MEMORY[0x1E0DE9E58]();
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DE9E60](a1);
}

uint64_t static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()
{
  return MEMORY[0x1E0DE9E88]();
}

uint64_t Dictionary.count.getter()
{
  return MEMORY[0x1E0DE9F38]();
}

uint64_t Dictionary.isEmpty.getter()
{
  return MEMORY[0x1E0DE9FC8]();
}

uint64_t Dictionary._Variant.setValue(_:forKey:)()
{
  return MEMORY[0x1E0DE9FF0]();
}

uint64_t type metadata accessor for Dictionary._Variant()
{
  return MEMORY[0x1E0DEA000]();
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x1E0DEA048]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x1E0DEA0A0]();
}

uint64_t dispatch thunk of Encodable.encode(to:)()
{
  return MEMORY[0x1E0DEA0F0]();
}

uint64_t dispatch thunk of static FloatingPoint.nan.getter()
{
  return MEMORY[0x1E0DEA120]();
}

uint64_t dispatch thunk of FloatingPoint.sign.getter()
{
  return MEMORY[0x1E0DEA130]();
}

uint64_t dispatch thunk of FloatingPoint.isNaN.getter()
{
  return MEMORY[0x1E0DEA138]();
}

uint64_t dispatch thunk of FloatingPoint.isZero.getter()
{
  return MEMORY[0x1E0DEA140]();
}

uint64_t dispatch thunk of FloatingPoint.nextUp.getter()
{
  return MEMORY[0x1E0DEA148]();
}

uint64_t dispatch thunk of FloatingPoint.exponent.getter()
{
  return MEMORY[0x1E0DEA168]();
}

uint64_t dispatch thunk of static FloatingPoint.infinity.getter()
{
  return MEMORY[0x1E0DEA170]();
}

uint64_t dispatch thunk of FloatingPoint.isFinite.getter()
{
  return MEMORY[0x1E0DEA178]();
}

uint64_t dispatch thunk of FloatingPoint.nextDown.getter()
{
  return MEMORY[0x1E0DEA180]();
}

uint64_t dispatch thunk of FloatingPoint.init<A>(_:)()
{
  return MEMORY[0x1E0DEA1A0]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t Character.asciiValue.getter()
{
  return MEMORY[0x1E0DEA230]();
}

Swift::String __swiftcall Character.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x1E0DEA238]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t Character.isWhitespace.getter()
{
  return MEMORY[0x1E0DEA258]();
}

uint64_t Character._isSingleScalar.getter()
{
  return MEMORY[0x1E0DEA280]();
}

uint64_t Character.wholeNumberValue.getter()
{
  return MEMORY[0x1E0DEA288]();
}

uint64_t Character.hash(into:)()
{
  return MEMORY[0x1E0DEA2A0]();
}

uint64_t Character.write<A>(to:)()
{
  return MEMORY[0x1E0DEA2A8]();
}

uint64_t Character.isNumber.getter()
{
  return MEMORY[0x1E0DEA2B8]();
}

uint64_t BidirectionalCollection<>.firstMatch<A, B>(of:)()
{
  return MEMORY[0x1E0DF1F70]();
}

uint64_t BidirectionalCollection<>.prefixMatch<A>(of:)()
{
  return MEMORY[0x1E0DF1F88]();
}

uint64_t BidirectionalCollection<>.contains<A>(_:)()
{
  return MEMORY[0x1E0DF1FB0]();
}

uint64_t dispatch thunk of BidirectionalCollection.index(before:)()
{
  return MEMORY[0x1E0DEA318]();
}

uint64_t dispatch thunk of BidirectionalCollection.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEA320]();
}

uint64_t dispatch thunk of BidirectionalCollection.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA328]();
}

uint64_t dispatch thunk of BidirectionalCollection.formIndex(before:)()
{
  return MEMORY[0x1E0DEA340]();
}

uint64_t BidirectionalCollection.last.getter()
{
  return MEMORY[0x1E0DEA360]();
}

uint64_t BidirectionalCollection.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEA368]();
}

uint64_t BidirectionalCollection.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA370]();
}

uint64_t BidirectionalCollection.distance(from:to:)()
{
  return MEMORY[0x1E0DEA380]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t dispatch thunk of static Comparable.> infix(_:_:)()
{
  return MEMORY[0x1E0DEA3B8]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x1E0DEA3C8]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t static Comparable.> infix(_:_:)()
{
  return MEMORY[0x1E0DEA3E0]();
}

uint64_t static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x1E0DEA3E8]();
}

uint64_t static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x1E0DEA3F0]();
}

uint64_t MutableCollection<>.sort(by:)()
{
  return MEMORY[0x1E0DEA468]();
}

uint64_t type metadata accessor for ClosedRange()
{
  return MEMORY[0x1E0DEA4B0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1E0DEA5F8]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x1E0DEA610]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x1E0DEA618]();
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x1E0DEA628]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t String.init(_cocoaString:)()
{
  return MEMORY[0x1E0DEA638]();
}

uint64_t static String._tryFromUTF8(_:)()
{
  return MEMORY[0x1E0DEA640]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t String.init(_nativeStorage:)()
{
  return MEMORY[0x1E0DEA660]();
}

uint64_t String.removeSubrange(_:)()
{
  return MEMORY[0x1E0DEA668]();
}

uint64_t String.init(validatingUTF8:)()
{
  return MEMORY[0x1E0DEA678]();
}

uint64_t String.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1E0DEA680]();
}

Swift::Void __swiftcall String.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEA688](a1);
}

uint64_t String._slowWithCString<A, B>(encodedAs:_:)()
{
  return MEMORY[0x1E0DEA690]();
}

uint64_t String.UnicodeScalarView._foreignIndex(after:)()
{
  return MEMORY[0x1E0DEA6A0]();
}

uint64_t String.UnicodeScalarView._foreignIndex(before:)()
{
  return MEMORY[0x1E0DEA6A8]();
}

uint64_t String.UnicodeScalarView.append<A>(contentsOf:)()
{
  return MEMORY[0x1E0DEA6B8]();
}

uint64_t String.UnicodeScalarView.append(_:)()
{
  return MEMORY[0x1E0DEA6C0]();
}

uint64_t String.UnicodeScalarView.subscript.getter()
{
  return MEMORY[0x1E0DEA6E8]();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return MEMORY[0x1E0DEA6F0]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t String.init(_:)()
{
  return MEMORY[0x1E0D131B8]();
}

{
  return MEMORY[0x1E0D131C0]();
}

{
  return MEMORY[0x1E0D131C8]();
}

{
  return MEMORY[0x1E0DEAA20]();
}

{
  return MEMORY[0x1E0DEAA28]();
}

{
  return MEMORY[0x1E0DEAA30]();
}

uint64_t String._copyUTF16CodeUnits(into:range:)()
{
  return MEMORY[0x1E0DEA700]();
}

uint64_t String.init(stringInterpolation:)()
{
  return MEMORY[0x1E0DEA708]();
}

Swift::String __swiftcall String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(Builtin::RawPointer _builtinStringLiteral, Builtin::Word utf8CodeUnitCount, Builtin::Int1 isASCII)
{
  uint64_t v3;
  void *v4;
  Swift::String result;

  v3 = MEMORY[0x1E0DEA718](_builtinStringLiteral, utf8CodeUnitCount, isASCII);
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

uint64_t String._bridgeToObjectiveCImpl()()
{
  return MEMORY[0x1E0DEA720]();
}

uint64_t String.init(unsafeUninitializedCapacity:initializingUTF8With:)()
{
  return MEMORY[0x1E0DEA728]();
}

uint64_t String._nfd.getter()
{
  return MEMORY[0x1E0DEA748]();
}

uint64_t String.init(from:)()
{
  return MEMORY[0x1E0DEA750]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t String.Index.init<A>(utf16Offset:in:)()
{
  return MEMORY[0x1E0DEA768]();
}

uint64_t String.Index.utf16Offset<A>(in:)()
{
  return MEMORY[0x1E0DEA770]();
}

uint64_t String.Index.samePosition(in:)()
{
  return MEMORY[0x1E0DEA780]();
}

uint64_t String.Index.init<A>(_:within:)()
{
  return MEMORY[0x1E0DEA7B0]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x1E0DEA7C0]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x1E0DEA7C8]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEA7D0]();
}

uint64_t String.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA7D8]();
}

uint64_t String.init(validating:)()
{
  return MEMORY[0x1E0DF0158]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x1E0DEA7F0]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x1E0DEA800](a1._countAndFlagsBits, a1._object);
}

uint64_t String.encode(to:)()
{
  return MEMORY[0x1E0DEA808]();
}

uint64_t String.remove(at:)()
{
  return MEMORY[0x1E0DEA820]();
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x1E0DEA828]();
}

{
  return MEMORY[0x1E0DEA830]();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = MEMORY[0x1E0DEA840]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t String.UTF8View._foreignIndex(before:)()
{
  return MEMORY[0x1E0DEA860]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEA868]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x1E0DEA880]();
}

Swift::Int __swiftcall String.UTF16View._foreignCount()()
{
  return MEMORY[0x1E0DEA8D0]();
}

uint64_t String.UTF16View._foreignIndex(after:)()
{
  return MEMORY[0x1E0DEA8D8]();
}

uint64_t String.UTF16View._foreignIndex(before:)()
{
  return MEMORY[0x1E0DEA8E0]();
}

uint64_t String.UTF16View._nativeGetOffset(for:)()
{
  return MEMORY[0x1E0DEA8E8]();
}

uint64_t String.UTF16View._foreignSubscript(position:)()
{
  return MEMORY[0x1E0DEA8F0]();
}

uint64_t String.UTF16View.count.getter()
{
  return MEMORY[0x1E0DEA8F8]();
}

uint64_t String.UTF16View.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEA900]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA908]();
}

Swift::UInt16_optional __swiftcall String.UTF16View.Iterator.next()()
{
  return (Swift::UInt16_optional)MEMORY[0x1E0DEA910]();
}

uint64_t String.UTF16View.distance(from:to:)()
{
  return MEMORY[0x1E0DEA920]();
}

uint64_t String.UTF16View.subscript.getter()
{
  return MEMORY[0x1E0DEA938]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x1E0DEA940](a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x1E0DEA948](a1._countAndFlagsBits, a1._object);
}

uint64_t String.hashValue.getter()
{
  return MEMORY[0x1E0DEA950]();
}

Swift::String __swiftcall String.init(repeating:count:)(Swift::String repeating, Swift::Int count)
{
  uint64_t v2;
  void *v3;
  Swift::String result;

  v2 = MEMORY[0x1E0DEA958](repeating._countAndFlagsBits, repeating._object, count);
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return MEMORY[0x1E0DEA9C0]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1E0DEAA08]();
}

{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x1E0DEAA38]();
}

{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t dispatch thunk of Sequence._copyContents(initializing:)()
{
  return MEMORY[0x1E0DEAA60]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x1E0DEAA68]();
}

uint64_t dispatch thunk of Sequence._copyToContiguousArray()()
{
  return MEMORY[0x1E0DEAA70]();
}

uint64_t dispatch thunk of Sequence._customContainsEquatableElement(_:)()
{
  return MEMORY[0x1E0DEAA78]();
}

uint64_t dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1E0DEAA80]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x1E0DEAAA8]();
}

uint64_t Sequence._copyContents(initializing:)()
{
  return MEMORY[0x1E0DEAAB8]();
}

uint64_t Sequence._copyToContiguousArray()()
{
  return MEMORY[0x1E0DEAAD0]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1E0DEAAD8]();
}

uint64_t Sequence.filter(_:)()
{
  return MEMORY[0x1E0DEAB08]();
}

uint64_t Sequence.contains(where:)()
{
  return MEMORY[0x1E0DEAB48]();
}

uint64_t Sequence<>.starts<A>(with:)()
{
  return MEMORY[0x1E0DEAB98]();
}

uint64_t Sequence<>.joined(separator:)()
{
  return MEMORY[0x1E0DEABB0]();
}

uint64_t UnsafeRawBufferPointer.baseAddress.getter()
{
  return MEMORY[0x1E0DEABD8]();
}

uint64_t UnsafeRawBufferPointer.count.getter()
{
  return MEMORY[0x1E0DEABF0]();
}

uint64_t dispatch thunk of RangeExpression.contains(_:)()
{
  return MEMORY[0x1E0DEAC60]();
}

uint64_t dispatch thunk of RangeExpression.relative<A>(to:)()
{
  return MEMORY[0x1E0DEAC68]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t dispatch thunk of RawRepresentable.init(rawValue:)()
{
  return MEMORY[0x1E0DEAC90]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1E0DEACA0]();
}

{
  return MEMORY[0x1E0DEACB8]();
}

{
  return MEMORY[0x1E0DEACC0]();
}

uint64_t RawRepresentable<>.hashValue.getter()
{
  return MEMORY[0x1E0DEAD00]();
}

uint64_t RawRepresentable<>._rawHashValue(seed:)()
{
  return MEMORY[0x1E0DEAD08]();
}

uint64_t RawRepresentable<>.hash(into:)()
{
  return MEMORY[0x1E0DEAD10]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1E0DEAD18]();
}

{
  return MEMORY[0x1E0DEAD30]();
}

{
  return MEMORY[0x1E0DEAD38]();
}

Swift::Void __swiftcall Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  MEMORY[0x1E0DEAD98]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1E0DEAE28]();
}

Swift::Void __swiftcall Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(Swift::Int oldCount)
{
  MEMORY[0x1E0DEAE48](oldCount);
}

uint64_t Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1E0DEAE50]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x1E0DEAE60]();
}

Swift::Int __swiftcall Array._getCount()()
{
  return MEMORY[0x1E0DEAEA0]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t Bool.encode(to:)()
{
  return MEMORY[0x1E0DEAF88]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x1E0DF05C8]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x1E0DF05D8]();
}

uint64_t dispatch thunk of AsyncIteratorProtocol.next()()
{
  return MEMORY[0x1E0DF0688]();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF()
{
  return MEMORY[0x1E0DF06B8]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x1E0DF08C8]();
}

uint64_t type metadata accessor for UnsafeContinuation()
{
  return MEMORY[0x1E0DF0918]();
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return MEMORY[0x1E0DF09D0]();
}

uint64_t Double.description.getter()
{
  return MEMORY[0x1E0DEAFE8]();
}

uint64_t Double._roundSlowPath(_:)()
{
  return MEMORY[0x1E0DEAFF8]();
}

uint64_t Double.significandWidth.getter()
{
  return MEMORY[0x1E0DEB008]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x1E0DEB030]();
}

uint64_t Double.exponent.getter()
{
  return MEMORY[0x1E0DEB048]();
}

uint64_t dispatch thunk of Decodable.init(from:)()
{
  return MEMORY[0x1E0DEB120]();
}

uint64_t Float.description.getter()
{
  return MEMORY[0x1E0DEB130]();
}

uint64_t Float.significandWidth.getter()
{
  return MEMORY[0x1E0DEB148]();
}

uint64_t Float.write<A>(to:)()
{
  return MEMORY[0x1E0DEB160]();
}

uint64_t Float.exponent.getter()
{
  return MEMORY[0x1E0DEB170]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x1E0DEB220]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()
{
  return MEMORY[0x1E0DEB290]();
}

uint64_t Set.count.getter()
{
  return MEMORY[0x1E0DEB2C8]();
}

uint64_t Set.isEmpty.getter()
{
  return MEMORY[0x1E0DEB300]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t Set._Variant.insert(_:)()
{
  return MEMORY[0x1E0DEB330]();
}

uint64_t type metadata accessor for Set._Variant()
{
  return MEMORY[0x1E0DEB338]();
}

uint64_t Int.init(from:)()
{
  return MEMORY[0x1E0DEB3F8]();
}

uint64_t Int.encode(to:)()
{
  return MEMORY[0x1E0DEB400]();
}

uint64_t dispatch thunk of static Numeric.* infix(_:_:)()
{
  return MEMORY[0x1E0DEB498]();
}

uint64_t dispatch thunk of Numeric.init<A>(exactly:)()
{
  return MEMORY[0x1E0DEB4A0]();
}

uint64_t dispatch thunk of Numeric.magnitude.getter()
{
  return MEMORY[0x1E0DEB4B8]();
}

uint64_t dispatch thunk of RandomAccessCollection.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEB4D8]();
}

uint64_t dispatch thunk of RandomAccessCollection.distance(from:to:)()
{
  return MEMORY[0x1E0DEB4E8]();
}

uint64_t RandomAccessCollection.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEB4F8]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t Collection<>.trimmingPrefix<A>(_:)()
{
  return MEMORY[0x1E0DF1FB8]();
}

uint64_t Collection<>.contains<A>(_:)()
{
  return MEMORY[0x1E0DF1FD0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t dispatch thunk of Collection.index(after:)()
{
  return MEMORY[0x1E0DEB570]();
}

uint64_t dispatch thunk of Collection.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEB580]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x1E0DEB5A0]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x1E0DEB5A8]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x1E0DEB5B0]();
}

uint64_t Collection<>.popFirst()()
{
  return MEMORY[0x1E0DEB5C8]();
}

uint64_t Collection.underestimatedCount.getter()
{
  return MEMORY[0x1E0DEB5E8]();
}

uint64_t Collection._copyToContiguousArray()()
{
  return MEMORY[0x1E0DEB608]();
}

uint64_t Collection.count.getter()
{
  return MEMORY[0x1E0DEB618]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x1E0DEB620]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t Collection<>.indices.getter()
{
  return MEMORY[0x1E0DEB6A0]();
}

uint64_t Collection<>.subscript.getter()
{
  return MEMORY[0x1E0DEB6C0]();
}

uint64_t dispatch thunk of Collection.subscript.getter()
{
  return MEMORY[0x1E0DEB6C8]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1E0DEB6E0]();
}

uint64_t RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)()
{
  return MEMORY[0x1E0DF1FE0]();
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)()
{
  return MEMORY[0x1E0DF1FE8]();
}

Swift::Void __swiftcall RangeReplaceableCollection.removeFirst(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEB740](a1);
}

uint64_t RangeReplaceableCollection<>.removeLast()()
{
  return MEMORY[0x1E0DEB7F8]();
}

uint64_t Range.init(uncheckedBounds:)()
{
  return MEMORY[0x1E0DEB828]();
}

uint64_t type metadata accessor for Range()
{
  return MEMORY[0x1E0DEB848]();
}

uint64_t Range<>.encode(to:)()
{
  return MEMORY[0x1E0DEB858]();
}

uint64_t Range<>.init(from:)()
{
  return MEMORY[0x1E0DEB868]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x1E0DEF840]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x1E0DEF910]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1E0DEFCD8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x1E0DEFCE8]();
}

uint64_t NSObject.hashValue.getter()
{
  return MEMORY[0x1E0DEFCF0]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x1E0DF22E0]();
}

uint64_t Optional._bridgeToObjectiveC()()
{
  return MEMORY[0x1E0DEB938]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1E0DEB940]();
}

Swift::String __swiftcall Substring.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x1E0DEBA00]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall Substring.uppercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x1E0DEBA10]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t Substring.UnicodeScalarView.index(after:)()
{
  return MEMORY[0x1E0DEBA18]();
}

uint64_t Substring.UnicodeScalarView.index(before:)()
{
  return MEMORY[0x1E0DEBA20]();
}

uint64_t Substring.UnicodeScalarView.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEBA28]();
}

uint64_t Substring.UnicodeScalarView.formIndex(after:)()
{
  return MEMORY[0x1E0DEBA30]();
}

uint64_t Substring.UnicodeScalarView.formIndex(before:)()
{
  return MEMORY[0x1E0DEBA38]();
}

uint64_t Substring.UnicodeScalarView.subscript.getter()
{
  return MEMORY[0x1E0DEBA68]();
}

uint64_t Substring.index(after:)()
{
  return MEMORY[0x1E0DEBA70]();
}

uint64_t Substring.index(before:)()
{
  return MEMORY[0x1E0DEBA78]();
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEBA80]();
}

uint64_t Substring.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEBA88]();
}

uint64_t Substring.UTF8View.index(after:)()
{
  return MEMORY[0x1E0DEBA90]();
}

uint64_t Substring.UTF8View.index(before:)()
{
  return MEMORY[0x1E0DEBA98]();
}

uint64_t Substring.UTF8View.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEBAA8]();
}

uint64_t Substring.UTF8View.distance(from:to:)()
{
  return MEMORY[0x1E0DEBAB0]();
}

uint64_t Substring.UTF8View.subscript.getter()
{
  return MEMORY[0x1E0DEBAD0]();
}

uint64_t Substring.distance(from:to:)()
{
  return MEMORY[0x1E0DEBAD8]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x1E0DEBB48]();
}

{
  return MEMORY[0x1E0DEBB58]();
}

uint64_t Substring.init(_:)()
{
  return MEMORY[0x1E0DEBB50]();
}

uint64_t Substring.init<A>(_:)()
{
  return MEMORY[0x1E0DEBB60]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t UInt.hashValue.getter()
{
  return MEMORY[0x1E0DEBB88]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t dispatch thunk of Strideable.distance(to:)()
{
  return MEMORY[0x1E0DEBCB8]();
}

uint64_t static Strideable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEBCC8]();
}

uint64_t static Strideable._step(after:from:by:)()
{
  return MEMORY[0x1E0DEBCD0]();
}

uint64_t dispatch thunk of StringProtocol.unicodeScalars.getter()
{
  return MEMORY[0x1E0DEBCE8]();
}

uint64_t dispatch thunk of StringProtocol.utf8.getter()
{
  return MEMORY[0x1E0DEBCF8]();
}

uint64_t dispatch thunk of StringProtocol.utf16.getter()
{
  return MEMORY[0x1E0DEBD00]();
}

uint64_t dispatch thunk of StringProtocol.hasSuffix(_:)()
{
  return MEMORY[0x1E0DEBD20]();
}

uint64_t StringProtocol._toUTF16Index(_:)()
{
  return MEMORY[0x1E0DEBD30]();
}

uint64_t StringProtocol._toUTF16Offset(_:)()
{
  return MEMORY[0x1E0DEBD38]();
}

uint64_t StringProtocol._toUTF16Indices(_:)()
{
  return MEMORY[0x1E0DEBD40]();
}

uint64_t StringProtocol._toUTF16Offsets(_:)()
{
  return MEMORY[0x1E0DEBD48]();
}

uint64_t StringProtocol._ephemeralString.getter()
{
  return MEMORY[0x1E0DEBD50]();
}

uint64_t dispatch thunk of BinaryInteger.isMultiple(of:)()
{
  return MEMORY[0x1E0DEBD68]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return MEMORY[0x1E0DEBD70]();
}

uint64_t dispatch thunk of static BinaryInteger./= infix(_:_:)()
{
  return MEMORY[0x1E0DEBDB8]();
}

uint64_t dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)()
{
  return MEMORY[0x1E0DEBDC0]();
}

uint64_t dispatch thunk of BinaryInteger.words.getter()
{
  return MEMORY[0x1E0DEBDE8]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(exactly:)()
{
  return MEMORY[0x1E0DEBDF0]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x1E0DEBDF8]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x1E0DEBE00]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(clamping:)()
{
  return MEMORY[0x1E0DEBE08]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x1E0DEBE10]();
}

uint64_t BinaryInteger.description.getter()
{
  return MEMORY[0x1E0DEBE30]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(_:)()
{
  return MEMORY[0x1E0DEBE48]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t dispatch thunk of AnyKeyPath._kvcKeyPathString.getter()
{
  return MEMORY[0x1E0DEBE60]();
}

uint64_t AnyKeyPath.debugDescription.getter()
{
  return MEMORY[0x1E0DEBE68]();
}

uint64_t dispatch thunk of static AnyKeyPath._rootAndValueType.getter()
{
  return MEMORY[0x1E0DEBE70]();
}

uint64_t dispatch thunk of AnyKeyPath._storedInlineOffset.getter()
{
  return MEMORY[0x1E0DEBE78]();
}

uint64_t static AnyKeyPath.== infix(_:_:)()
{
  return MEMORY[0x1E0DEBE80]();
}

uint64_t type metadata accessor for AnyKeyPath()
{
  return MEMORY[0x1E0DEBE88]();
}

uint64_t type metadata accessor for ArraySlice()
{
  return MEMORY[0x1E0DEBF30]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t _NativeSet._unsafeInsertNew(_:)()
{
  return MEMORY[0x1E0DEC080]();
}

uint64_t _NativeSet.bridged()()
{
  return MEMORY[0x1E0DEC088]();
}

uint64_t type metadata accessor for _NativeSet()
{
  return MEMORY[0x1E0DEC098]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x1E0DEC0F8]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t debugPrint<A>(_:separator:terminator:to:)()
{
  return MEMORY[0x1E0DEC148]();
}

uint64_t withVaList<A>(_:_:)()
{
  return MEMORY[0x1E0DEC158]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1E0DEC168](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEC178]();
}

uint64_t AnyHashable.base.getter()
{
  return MEMORY[0x1E0DEC180]();
}

uint64_t AnyHashable.hash(into:)()
{
  return MEMORY[0x1E0DEC188]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x1E0DEC1B0]();
}

uint64_t static CommandLine.arguments.getter()
{
  return MEMORY[0x1E0DEC228]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x1E0DEC258]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t type metadata accessor for _SetStorage()
{
  return MEMORY[0x1E0DEC268]();
}

uint64_t _StringGuts.fastUTF8Scalar(startingAt:)()
{
  return MEMORY[0x1E0DEC278]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x1E0DEC280]();
}

uint64_t _StringGuts._isContiguousASCII.getter()
{
  return MEMORY[0x1E0DEC288]();
}

uint64_t _StringGuts.foreignScalarAlign(_:)()
{
  return MEMORY[0x1E0DEC290]();
}

Swift::Int __swiftcall _StringGuts.fastUTF8ScalarLength(endingAt:)(Swift::Int endingAt)
{
  return MEMORY[0x1E0DEC298](endingAt);
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x1E0DEC2A0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEC2A8](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t StaticString.description.getter()
{
  return MEMORY[0x1E0DEC338]();
}

uint64_t _ArrayBuffer.requestNativeBuffer()()
{
  return MEMORY[0x1E0DEC3B8]();
}

uint64_t _ArrayBuffer._copyContents(subRange:initializing:)()
{
  return MEMORY[0x1E0DEC3C8]();
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1E0DEC3D8]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t _ArrayBuffer.capacity.getter()
{
  return MEMORY[0x1E0DEC3F0]();
}

uint64_t static DecodingError.dataCorruptedError(in:debugDescription:)()
{
  return MEMORY[0x1E0DEC430]();
}

{
  return MEMORY[0x1E0DEC438]();
}

uint64_t static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)()
{
  return MEMORY[0x1E0DEC440]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t EncodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1E0DEC4B8]();
}

uint64_t type metadata accessor for EncodingError()
{
  return MEMORY[0x1E0DEC4E0]();
}

uint64_t type metadata accessor for ManagedBuffer()
{
  return MEMORY[0x1E0DEC518]();
}

uint64_t dispatch thunk of static SignedNumeric.- prefix(_:)()
{
  return MEMORY[0x1E0DEC560]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x1E0DEC590]();
}

uint64_t type metadata accessor for PartialKeyPath()
{
  return MEMORY[0x1E0DEC5A8]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DEC698]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x1E0DEC708]();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return MEMORY[0x1E0DEC888]();
}

uint64_t __VaListBuilder.deallocStorage(wordCount:storage:)()
{
  return MEMORY[0x1E0DEC8C0]();
}

uint64_t __VaListBuilder.va_list()()
{
  return MEMORY[0x1E0DEC8C8]();
}

uint64_t type metadata accessor for __VaListBuilder()
{
  return MEMORY[0x1E0DEC8D0]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t type metadata accessor for PartialRangeFrom()
{
  return MEMORY[0x1E0DEC910]();
}

uint64_t type metadata accessor for PartialRangeUpTo()
{
  return MEMORY[0x1E0DEC930]();
}

uint64_t CodingUserInfoKey.init(rawValue:)()
{
  return MEMORY[0x1E0DEC980]();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return MEMORY[0x1E0DEC990]();
}

uint64_t dispatch thunk of FixedWidthInteger.addingReportingOverflow(_:)()
{
  return MEMORY[0x1E0DECA10]();
}

uint64_t dispatch thunk of FixedWidthInteger.multipliedReportingOverflow(by:)()
{
  return MEMORY[0x1E0DECA18]();
}

uint64_t dispatch thunk of FixedWidthInteger.subtractingReportingOverflow(_:)()
{
  return MEMORY[0x1E0DECA20]();
}

uint64_t dispatch thunk of static FixedWidthInteger.max.getter()
{
  return MEMORY[0x1E0DECA28]();
}

uint64_t FixedWidthInteger.init<A>(exactly:)()
{
  return MEMORY[0x1E0DECA78]();
}

uint64_t _NativeDictionary._unsafeInsertNew(key:value:)()
{
  return MEMORY[0x1E0DECAF0]();
}

uint64_t _NativeDictionary.bridged()()
{
  return MEMORY[0x1E0DECB10]();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return MEMORY[0x1E0DECB40]();
}

uint64_t __CocoaDictionary.count.getter()
{
  return MEMORY[0x1E0DECB80]();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return MEMORY[0x1E0DECBB8]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECBE0]();
}

{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x1E0DECBF8]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)()
{
  return MEMORY[0x1E0DECC10]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.- infix(_:_:)()
{
  return MEMORY[0x1E0DECC18]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t type metadata accessor for _DictionaryStorage()
{
  return MEMORY[0x1E0DECD58]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t type metadata accessor for PartialRangeThrough()
{
  return MEMORY[0x1E0DECD78]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x1E0DECD90]();
}

uint64_t type metadata accessor for CollectionDifference.Change()
{
  return MEMORY[0x1E0DECDC8]();
}

uint64_t type metadata accessor for CollectionDifference()
{
  return MEMORY[0x1E0DECDE0]();
}

uint64_t CollectionDifference.init<A>(_:)()
{
  return MEMORY[0x1E0DECE00]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t dispatch thunk of _ObjectiveCBridgeable._bridgeToObjectiveC()()
{
  return MEMORY[0x1E0DECF08]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1E0DECF28](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)()
{
  return MEMORY[0x1E0DECF30]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t KeyedDecodingContainer.superDecoder(forKey:)()
{
  return MEMORY[0x1E0DECF48]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1E0DECF58]();
}

{
  return MEMORY[0x1E0DECF60]();
}

{
  return MEMORY[0x1E0DECF68]();
}

{
  return MEMORY[0x1E0DECF78]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1E0DECFC0]();
}

{
  return MEMORY[0x1E0DECFC8]();
}

{
  return MEMORY[0x1E0DECFD0]();
}

{
  return MEMORY[0x1E0DECFD8]();
}

{
  return MEMORY[0x1E0DECFE0]();
}

{
  return MEMORY[0x1E0DECFE8]();
}

{
  return MEMORY[0x1E0DED008]();
}

{
  return MEMORY[0x1E0DED010]();
}

{
  return MEMORY[0x1E0DED028]();
}

{
  return MEMORY[0x1E0DED030]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t KeyedDecodingContainer.contains(_:)()
{
  return MEMORY[0x1E0DED040]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x1E0DED048]();
}

uint64_t KeyedDecodingContainer.init<A>(_:)()
{
  return MEMORY[0x1E0DED058]();
}

uint64_t KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)()
{
  return MEMORY[0x1E0DED068]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t KeyedEncodingContainer.codingPath.getter()
{
  return MEMORY[0x1E0DED078]();
}

uint64_t KeyedEncodingContainer.superEncoder(forKey:)()
{
  return MEMORY[0x1E0DED080]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1E0DED090]();
}

{
  return MEMORY[0x1E0DED098]();
}

{
  return MEMORY[0x1E0DED0A0]();
}

{
  return MEMORY[0x1E0DED0B0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1E0DED0F0]();
}

{
  return MEMORY[0x1E0DED0F8]();
}

{
  return MEMORY[0x1E0DED100]();
}

{
  return MEMORY[0x1E0DED108]();
}

{
  return MEMORY[0x1E0DED110]();
}

{
  return MEMORY[0x1E0DED118]();
}

{
  return MEMORY[0x1E0DED138]();
}

{
  return MEMORY[0x1E0DED140]();
}

{
  return MEMORY[0x1E0DED158]();
}

{
  return MEMORY[0x1E0DED160]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x1E0DED170]();
}

uint64_t KeyedEncodingContainer.init<A>(_:)()
{
  return MEMORY[0x1E0DED180]();
}

uint64_t _ContiguousArrayBuffer._asCocoaArray()()
{
  return MEMORY[0x1E0DED190]();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DED1A0]();
}

uint64_t type metadata accessor for __SwiftDeferredNSArray()
{
  return MEMORY[0x1E0DED1A8]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x1E0DED1B0](a1);
}

uint64_t _stringCompareInternal(_:_:_:_:expecting:)()
{
  return MEMORY[0x1E0DED1B8]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t type metadata accessor for _ContiguousArrayStorage()
{
  return MEMORY[0x1E0DED1E8]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)()
{
  return MEMORY[0x1E0DED220]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.superDecoder()()
{
  return MEMORY[0x1E0DED240]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)()
{
  return MEMORY[0x1E0DED248]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.count.getter()
{
  return MEMORY[0x1E0DED258]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode(_:)()
{
  return MEMORY[0x1E0DED260]();
}

{
  return MEMORY[0x1E0DED280]();
}

{
  return MEMORY[0x1E0DED2A0]();
}

{
  return MEMORY[0x1E0DED2A8]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x1E0DED290]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter()
{
  return MEMORY[0x1E0DED2B8]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decodeNil()()
{
  return MEMORY[0x1E0DED2C0]();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent(_:)()
{
  return MEMORY[0x1E0DED2C8]();
}

{
  return MEMORY[0x1E0DED2D0]();
}

{
  return MEMORY[0x1E0DED2D8]();
}

{
  return MEMORY[0x1E0DED2E8]();
}

{
  return MEMORY[0x1E0DED2F0]();
}

{
  return MEMORY[0x1E0DED318]();
}

{
  return MEMORY[0x1E0DED340]();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A>(_:)()
{
  return MEMORY[0x1E0DED2F8]();
}

uint64_t UnkeyedDecodingContainer.decode(_:)()
{
  return MEMORY[0x1E0DED350]();
}

{
  return MEMORY[0x1E0DED358]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)()
{
  return MEMORY[0x1E0DED368]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.superEncoder()()
{
  return MEMORY[0x1E0DED380]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(contentsOf:)()
{
  return MEMORY[0x1E0DED390]();
}

{
  return MEMORY[0x1E0DED398]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode(_:)()
{
  return MEMORY[0x1E0DED3A0]();
}

{
  return MEMORY[0x1E0DED3C0]();
}

{
  return MEMORY[0x1E0DED3E8]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x1E0DED3D0]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encodeNil()()
{
  return MEMORY[0x1E0DED3F8]();
}

uint64_t UnkeyedEncodingContainer.encodeConditional<A>(_:)()
{
  return MEMORY[0x1E0DED400]();
}

uint64_t UnkeyedEncodingContainer.encode<A>(contentsOf:)()
{
  return MEMORY[0x1E0DED408]();
}

{
  return MEMORY[0x1E0DED410]();
}

{
  return MEMORY[0x1E0DED418]();
}

{
  return MEMORY[0x1E0DED420]();
}

{
  return MEMORY[0x1E0DED428]();
}

{
  return MEMORY[0x1E0DED430]();
}

{
  return MEMORY[0x1E0DED438]();
}

{
  return MEMORY[0x1E0DED440]();
}

{
  return MEMORY[0x1E0DED448]();
}

{
  return MEMORY[0x1E0DED450]();
}

{
  return MEMORY[0x1E0DED458]();
}

{
  return MEMORY[0x1E0DED460]();
}

{
  return MEMORY[0x1E0DED468]();
}

{
  return MEMORY[0x1E0DED470]();
}

{
  return MEMORY[0x1E0DED478]();
}

{
  return MEMORY[0x1E0DED480]();
}

{
  return MEMORY[0x1E0DED488]();
}

uint64_t UnkeyedEncodingContainer.encode(_:)()
{
  return MEMORY[0x1E0DED490]();
}

{
  return MEMORY[0x1E0DED498]();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return MEMORY[0x1E0DED4A0]();
}

uint64_t dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)()
{
  return MEMORY[0x1E0DED4C0]();
}

uint64_t static FloatingPointRoundingRule.== infix(_:_:)()
{
  return MEMORY[0x1E0DED4F8]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x1E0DED510]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x1E0DED558]();
}

Swift::Void __swiftcall DefaultStringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  MEMORY[0x1E0DED560](a1._countAndFlagsBits, a1._object);
}

uint64_t DefaultStringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return MEMORY[0x1E0DED568]();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return MEMORY[0x1E0DED5C0]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  return MEMORY[0x1E0DF0E78]();
}

uint64_t dispatch thunk of CustomDebugStringConvertible.debugDescription.getter()
{
  return MEMORY[0x1E0DED610]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x1E0DED628]();
}

{
  return MEMORY[0x1E0DED630]();
}

{
  return MEMORY[0x1E0DED638]();
}

{
  return MEMORY[0x1E0DED648]();
}

{
  return MEMORY[0x1E0DED650]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x1E0DED658]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decodeNil()()
{
  return MEMORY[0x1E0DED690]();
}

uint64_t SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x1E0DED698]();
}

{
  return MEMORY[0x1E0DED6A0]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode(_:)()
{
  return MEMORY[0x1E0DED6C8]();
}

{
  return MEMORY[0x1E0DED6D0]();
}

{
  return MEMORY[0x1E0DED6D8]();
}

{
  return MEMORY[0x1E0DED6E8]();
}

{
  return MEMORY[0x1E0DED6F0]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x1E0DED6F8]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encodeNil()()
{
  return MEMORY[0x1E0DED740]();
}

uint64_t SingleValueEncodingContainer.encode(_:)()
{
  return MEMORY[0x1E0DED748]();
}

{
  return MEMORY[0x1E0DED750]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x1E0DED768]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x1E0DED770]();
}

uint64_t == infix<A>(_:_:)()
{
  return MEMORY[0x1E0DED788]();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1E0DED7D0]();
}

{
  return MEMORY[0x1E0DED7D8]();
}

{
  return MEMORY[0x1E0DED7E0]();
}

{
  return MEMORY[0x1E0DED7F0]();
}

{
  return MEMORY[0x1E0DED7F8]();
}

{
  return MEMORY[0x1E0DED820]();
}

{
  return MEMORY[0x1E0DED848]();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED800]();
}

uint64_t KeyedDecodingContainerProtocol.decode(_:forKey:)()
{
  return MEMORY[0x1E0DED858]();
}

{
  return MEMORY[0x1E0DED860]();
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1E0DED8D0]();
}

{
  return MEMORY[0x1E0DED8D8]();
}

{
  return MEMORY[0x1E0DED8E0]();
}

{
  return MEMORY[0x1E0DED8F0]();
}

{
  return MEMORY[0x1E0DED8F8]();
}

{
  return MEMORY[0x1E0DED920]();
}

{
  return MEMORY[0x1E0DED930]();
}

{
  return MEMORY[0x1E0DED948]();
}

{
  return MEMORY[0x1E0DED950]();
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED900]();
}

uint64_t KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED958]();
}

uint64_t KeyedEncodingContainerProtocol.encode(_:forKey:)()
{
  return MEMORY[0x1E0DED960]();
}

{
  return MEMORY[0x1E0DED968]();
}

uint64_t _copySequenceToContiguousArray<A>(_:)()
{
  return MEMORY[0x1E0DED980]();
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x1E0DF0EC0]();
}

uint64_t _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)()
{
  return MEMORY[0x1E0DED9B8]();
}

uint64_t _copyCollectionToContiguousArray<A>(_:)()
{
  return MEMORY[0x1E0DED9C0]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x1E0DED9C8]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinFloatLiteral.init(_builtinFloatLiteral:)()
{
  return MEMORY[0x1E0DED9D0]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return MEMORY[0x1E0DED9E8]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x1E0DED9F8]();
}

uint64_t _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)()
{
  return MEMORY[0x1E0DEDA48]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t dispatch thunk of Error._code.getter()
{
  return MEMORY[0x1E0DEDAF8]();
}

uint64_t dispatch thunk of Error._domain.getter()
{
  return MEMORY[0x1E0DEDB00]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t type metadata accessor for Slice()
{
  return MEMORY[0x1E0DEDE10]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x1E0DEDEE0]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t Hasher.combine(bytes:)()
{
  return MEMORY[0x1E0DEDF00]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x1E0DEDF10](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x1E0DEDF18](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
  MEMORY[0x1E0DEDF28](*(_QWORD *)&a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x1E0DEDF30](a1);
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return MEMORY[0x1E0DEDF38]();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t Hasher.init()()
{
  return MEMORY[0x1E0DEDF48]();
}

uint64_t Mirror.init(reflecting:)()
{
  return MEMORY[0x1E0DEDF80]();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return MEMORY[0x1E0DEDFC8]();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return MEMORY[0x1E0DEDFF0]();
}

uint64_t Mirror.children.getter()
{
  return MEMORY[0x1E0DEDFF8]();
}

uint64_t type metadata accessor for Mirror()
{
  return MEMORY[0x1E0DEE000]();
}

uint64_t Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x1E0DEE010]();
}

uint64_t Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x1E0DEE018]();
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x1E0DEE020]();
}

uint64_t dispatch thunk of CVarArg._cVarArgEncoding.getter()
{
  return MEMORY[0x1E0DEE210]();
}

uint64_t dispatch thunk of Decoder.codingPath.getter()
{
  return MEMORY[0x1E0DEE220]();
}

uint64_t dispatch thunk of Decoder.unkeyedContainer()()
{
  return MEMORY[0x1E0DEE228]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x1E0DEE230]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t dispatch thunk of Encoder.unkeyedContainer()()
{
  return MEMORY[0x1E0DEE258]();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return MEMORY[0x1E0DEE260]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t type metadata accessor for KeyPath()
{
  return MEMORY[0x1E0DEE298]();
}

uint64_t type metadata accessor for Unicode.GeneralCategory()
{
  return MEMORY[0x1E0DEE400]();
}

uint64_t static Unicode.CanonicalCombiningClass.notReordered.getter()
{
  return MEMORY[0x1E0DEE418]();
}

uint64_t static Unicode.CanonicalCombiningClass.== infix(_:_:)()
{
  return MEMORY[0x1E0DEE420]();
}

uint64_t Unicode.CanonicalCombiningClass.rawValue.getter()
{
  return MEMORY[0x1E0DEE430]();
}

uint64_t type metadata accessor for Unicode.CanonicalCombiningClass()
{
  return MEMORY[0x1E0DEE438]();
}

Swift::UInt8 __swiftcall Unicode.UTF8.ForwardParser._invalidLength()()
{
  return MEMORY[0x1E0DEE450]();
}

uint64_t type metadata accessor for Unicode._NFD.Iterator()
{
  return MEMORY[0x1E0DEE4A8]();
}

uint64_t type metadata accessor for Unicode._NFD()
{
  return MEMORY[0x1E0DEE4B8]();
}

uint64_t Unicode.Scalar.Properties._caseFolded.getter()
{
  return MEMORY[0x1E0DEE520]();
}

uint64_t Unicode.Scalar.Properties.isWhitespace.getter()
{
  return MEMORY[0x1E0DEE568]();
}

uint64_t Unicode.Scalar.Properties.numericValue.getter()
{
  return MEMORY[0x1E0DEE570]();
}

uint64_t Unicode.Scalar.Properties.generalCategory.getter()
{
  return MEMORY[0x1E0DEE5A8]();
}

uint64_t Unicode.Scalar.Properties.lowercaseMapping.getter()
{
  return MEMORY[0x1E0DEE5E0]();
}

uint64_t Unicode.Scalar.Properties.titlecaseMapping.getter()
{
  return MEMORY[0x1E0DEE5E8]();
}

uint64_t Unicode.Scalar.Properties.canonicalCombiningClass.getter()
{
  return MEMORY[0x1E0DEE668]();
}

uint64_t type metadata accessor for Unicode.Scalar.Properties()
{
  return MEMORY[0x1E0DEE6E0]();
}

uint64_t Unicode.Scalar.properties.getter()
{
  return MEMORY[0x1E0DEE6F0]();
}

uint64_t Unicode.Scalar.UTF8View.subscript.getter()
{
  return MEMORY[0x1E0DEE708]();
}

uint64_t Unicode.Scalar.UTF16View.subscript.getter()
{
  return MEMORY[0x1E0DEE710]();
}

uint64_t Duration.components.getter()
{
  return MEMORY[0x1E0DEE750]();
}

uint64_t Duration.init(secondsComponent:attosecondsComponent:)()
{
  return MEMORY[0x1E0DEE768]();
}

uint64_t static Duration./ infix<A>(_:_:)()
{
  return MEMORY[0x1E0DEE770]();
}

uint64_t static Duration./ infix(_:_:)()
{
  return MEMORY[0x1E0DEE778]();
}

uint64_t static Duration.< infix(_:_:)()
{
  return MEMORY[0x1E0DEE780]();
}

uint64_t static Duration.* infix(_:_:)()
{
  return MEMORY[0x1E0DEE788]();
}

uint64_t static Duration.* infix<A>(_:_:)()
{
  return MEMORY[0x1E0DEE790]();
}

uint64_t static Duration.+ infix(_:_:)()
{
  return MEMORY[0x1E0DEE798]();
}

uint64_t static Duration.- infix(_:_:)()
{
  return MEMORY[0x1E0DEE7A0]();
}

uint64_t static Duration.== infix(_:_:)()
{
  return MEMORY[0x1E0DEE7A8]();
}

uint64_t static Duration.-= infix(_:_:)()
{
  return MEMORY[0x1E0DEE7B0]();
}

uint64_t static Duration.zero.getter()
{
  return MEMORY[0x1E0DEE7C0]();
}

uint64_t static Duration.seconds(_:)()
{
  return MEMORY[0x1E0DEE7C8]();
}

uint64_t RangeSet.ranges.getter()
{
  return MEMORY[0x1E0DEE830]();
}

uint64_t RangeSet.init<A>(_:)()
{
  return MEMORY[0x1E0DEE848]();
}

uint64_t _Pointer.debugDescription.getter()
{
  return MEMORY[0x1E0DEE8A0]();
}

uint64_t dispatch thunk of CodingKey.stringValue.getter()
{
  return MEMORY[0x1E0DEE8B8]();
}

uint64_t dispatch thunk of CodingKey.init(stringValue:)()
{
  return MEMORY[0x1E0DEE8C8]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1E0DEE978]();
}

uint64_t getVaList(_:)()
{
  return MEMORY[0x1E0DEE980]();
}

CFAbsoluteTime CFAbsoluteTimeAddGregorianUnits(CFAbsoluteTime at, CFTimeZoneRef tz, CFGregorianUnits *units)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C50](tz, units, at);
  return result;
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

SInt32 CFAbsoluteTimeGetDayOfWeek(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  return MEMORY[0x1E0C97C68](tz, at);
}

SInt32 CFAbsoluteTimeGetDayOfYear(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  return MEMORY[0x1E0C97C70](tz, at);
}

CFGregorianUnits *__cdecl CFAbsoluteTimeGetDifferenceAsGregorianUnits(CFGregorianUnits *__return_ptr retstr, CFAbsoluteTime at1, CFAbsoluteTime at2, CFTimeZoneRef tz, CFOptionFlags unitFlags)
{
  return (CFGregorianUnits *)MEMORY[0x1E0C97C78](retstr, tz, unitFlags, at1, at2);
}

CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  uint64_t v2;
  double v3;
  CFGregorianDate result;

  v2 = MEMORY[0x1E0C97C88](tz, at);
  result.second = v3;
  result.year = v2;
  result.month = BYTE4(v2);
  result.day = BYTE5(v2);
  result.hour = BYTE6(v2);
  result.minute = HIBYTE(v2);
  return result;
}

uint64_t CFAllocatorAllocateTyped()
{
  return MEMORY[0x1E0C97CA0]();
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CA8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
  MEMORY[0x1E0C97DA8](theArray, range.location, range.length, values);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
  MEMORY[0x1E0C97DC8](theArray, range.location, range.length, newValues, newCount);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD0](theArray, idx, value);
}

CFAttributedStringRef CFAttributedStringCreateCopy(CFAllocatorRef alloc, CFAttributedStringRef aStr)
{
  return (CFAttributedStringRef)MEMORY[0x1E0C97DF8](alloc, aStr);
}

CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFAttributedStringRef aStr)
{
  return (CFMutableAttributedStringRef)MEMORY[0x1E0C97E08](alloc, maxLength, aStr);
}

CFAttributedStringRef CFAttributedStringCreateWithSubstring(CFAllocatorRef alloc, CFAttributedStringRef aStr, CFRange range)
{
  return (CFAttributedStringRef)MEMORY[0x1E0C97E10](alloc, aStr, range.location, range.length);
}

CFTypeRef CFAttributedStringGetAttribute(CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange *effectiveRange)
{
  return (CFTypeRef)MEMORY[0x1E0C97E20](aStr, loc, attrName, effectiveRange);
}

CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange(CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange inRange, CFRange *longestEffectiveRange)
{
  return (CFTypeRef)MEMORY[0x1E0C97E28](aStr, loc, attrName, inRange.location, inRange.length, longestEffectiveRange);
}

CFDictionaryRef CFAttributedStringGetAttributes(CFAttributedStringRef aStr, CFIndex loc, CFRange *effectiveRange)
{
  return (CFDictionaryRef)MEMORY[0x1E0C97E30](aStr, loc, effectiveRange);
}

CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange(CFAttributedStringRef aStr, CFIndex loc, CFRange inRange, CFRange *longestEffectiveRange)
{
  return (CFDictionaryRef)MEMORY[0x1E0C97E38](aStr, loc, inRange.location, inRange.length, longestEffectiveRange);
}

CFStringRef CFAttributedStringGetString(CFAttributedStringRef aStr)
{
  return (CFStringRef)MEMORY[0x1E0C97E50](aStr);
}

CFTypeID CFAttributedStringGetTypeID(void)
{
  return MEMORY[0x1E0C97E58]();
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

void CFBagAddValue(CFMutableBagRef theBag, const void *value)
{
  MEMORY[0x1E0C97E98](theBag, value);
}

CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks)
{
  return (CFMutableBagRef)MEMORY[0x1E0C97EB8](allocator, capacity, callBacks);
}

CFIndex CFBagGetCountOfValue(CFBagRef theBag, const void *value)
{
  return MEMORY[0x1E0C97ED0](theBag, value);
}

CFTypeID CFBagGetTypeID(void)
{
  return MEMORY[0x1E0C97ED8]();
}

const void *__cdecl CFBagGetValue(CFBagRef theBag, const void *value)
{
  return (const void *)MEMORY[0x1E0C97EE0](theBag, value);
}

void CFBagRemoveAllValues(CFMutableBagRef theBag)
{
  MEMORY[0x1E0C97EF0](theBag);
}

void CFBagRemoveValue(CFMutableBagRef theBag, const void *value)
{
  MEMORY[0x1E0C97EF8](theBag, value);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFURLRef CFBundleCopyAuxiliaryExecutableURL(CFBundleRef bundle, CFStringRef executableName)
{
  return (CFURLRef)MEMORY[0x1E0C97FE8](bundle, executableName);
}

CFURLRef CFBundleCopyBuiltInPlugInsURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C97FF0](bundle);
}

CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle)
{
  return (CFArrayRef)MEMORY[0x1E0C97FF8](bundle);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C98000](bundle);
}

CFArrayRef CFBundleCopyExecutableArchitectures(CFBundleRef bundle)
{
  return (CFArrayRef)MEMORY[0x1E0C98010](bundle);
}

CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C98020](bundle);
}

uint64_t CFBundleCopyLocalizationForLocalizationInfo()
{
  return MEMORY[0x1E0C98038]();
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1E0C98040](locArray, prefArray);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1E0C98050](bundle, key, value, tableName);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return MEMORY[0x1E0C98060]();
}

uint64_t CFBundleCopyLocalizedStringTableForLocalization()
{
  return MEMORY[0x1E0C98068]();
}

CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(CFArrayRef locArray)
{
  return (CFArrayRef)MEMORY[0x1E0C98070](locArray);
}

CFURLRef CFBundleCopyPrivateFrameworksURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C98078](bundle);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1E0C98080](bundle, resourceName, resourceType, subDirName);
}

CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFURLRef)MEMORY[0x1E0C98088](bundle, resourceName, resourceType, subDirName, localizationName);
}

CFURLRef CFBundleCopyResourceURLInDirectory(CFURLRef bundleURL, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1E0C98090](bundleURL, resourceName, resourceType, subDirName);
}

CFArrayRef CFBundleCopyResourceURLsOfType(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFArrayRef)MEMORY[0x1E0C98098](bundle, resourceType, subDirName);
}

CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFArrayRef)MEMORY[0x1E0C980A0](bundle, resourceType, subDirName, localizationName);
}

CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(CFURLRef bundleURL, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFArrayRef)MEMORY[0x1E0C980A8](bundleURL, resourceType, subDirName);
}

CFURLRef CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C980B0](bundle);
}

CFURLRef CFBundleCopySharedFrameworksURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C980B8](bundle);
}

CFURLRef CFBundleCopySharedSupportURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C980C0](bundle);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1E0C980D0](allocator, bundleURL);
}

CFStringRef CFBundleGetDevelopmentRegion(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1E0C98100](bundle);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1E0C98120](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98130](bundle);
}

CFDictionaryRef CFBundleGetLocalInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98138](bundle);
}

uint64_t CFBundleGetLocalizationInfoForLocalization()
{
  return MEMORY[0x1E0C98140]();
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1E0C98150]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0C98180](bundle, key);
}

UInt32 CFBundleGetVersionNumber(CFBundleRef bundle)
{
  return MEMORY[0x1E0C98188](bundle);
}

Boolean CFBundleIsExecutableLoaded(CFBundleRef bundle)
{
  return MEMORY[0x1E0C98190](bundle);
}

Boolean CFBundlePreflightExecutable(CFBundleRef bundle, CFErrorRef *error)
{
  return MEMORY[0x1E0C981B8](bundle, error);
}

void CFBundleUnloadExecutable(CFBundleRef bundle)
{
  MEMORY[0x1E0C981C0](bundle);
}

void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
  MEMORY[0x1E0C982A0](theSet, theRange.location, theRange.length);
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
  MEMORY[0x1E0C982A8](theSet, theString);
}

CFDataRef CFCharacterSetCreateBitmapRepresentation(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFDataRef)MEMORY[0x1E0C982B0](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982B8](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982C0](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1E0C982C8](alloc);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1E0C982D0](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(CFAllocatorRef alloc, CFDataRef theData)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982D8](alloc, theData);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(CFAllocatorRef alloc, CFRange theRange)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982E0](alloc, theRange.location, theRange.length);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982E8](alloc, theString);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982F0](theSetIdentifier);
}

CFTypeID CFCharacterSetGetTypeID(void)
{
  return MEMORY[0x1E0C982F8]();
}

Boolean CFCharacterSetHasMemberInPlane(CFCharacterSetRef theSet, CFIndex thePlane)
{
  return MEMORY[0x1E0C98300](theSet, thePlane);
}

void CFCharacterSetIntersect(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
  MEMORY[0x1E0C98310](theSet, theOtherSet);
}

void CFCharacterSetInvert(CFMutableCharacterSetRef theSet)
{
  MEMORY[0x1E0C98318](theSet);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1E0C98320](theSet, theChar);
}

Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar)
{
  return MEMORY[0x1E0C98328](theSet, *(_QWORD *)&theChar);
}

Boolean CFCharacterSetIsSupersetOfSet(CFCharacterSetRef theSet, CFCharacterSetRef theOtherset)
{
  return MEMORY[0x1E0C98330](theSet, theOtherset);
}

void CFCharacterSetRemoveCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
  MEMORY[0x1E0C98338](theSet, theRange.location, theRange.length);
}

void CFCharacterSetRemoveCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
  MEMORY[0x1E0C98340](theSet, theString);
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
  MEMORY[0x1E0C98348](theSet, theOtherSet);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

uint64_t CFCopyHomeDirectoryURLForUser()
{
  return MEMORY[0x1E0C98368]();
}

uint64_t CFCopySystemVersionString()
{
  return MEMORY[0x1E0C98378]();
}

uint64_t CFCopyUserName()
{
  return MEMORY[0x1E0C98388]();
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

CFTypeRef CFDateFormatterCopyProperty(CFDateFormatterRef formatter, CFDateFormatterKey key)
{
  return (CFTypeRef)MEMORY[0x1E0C98458](formatter, key);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1E0C98460](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateDateFormatFromTemplate(CFAllocatorRef allocator, CFStringRef tmplate, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringRef)MEMORY[0x1E0C98468](allocator, tmplate, options, locale);
}

CFDateRef CFDateFormatterCreateDateFromString(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep)
{
  return (CFDateRef)MEMORY[0x1E0C98478](allocator, formatter, string, rangep);
}

CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(CFAllocatorRef allocator, CFISO8601DateFormatOptions formatOptions)
{
  return (CFDateFormatterRef)MEMORY[0x1E0C98480](allocator, formatOptions);
}

CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at)
{
  return (CFStringRef)MEMORY[0x1E0C98488](allocator, formatter, at);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x1E0C98490](allocator, formatter, date);
}

Boolean CFDateFormatterGetAbsoluteTimeFromString(CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep, CFAbsoluteTime *atp)
{
  return MEMORY[0x1E0C98498](formatter, string, rangep, atp);
}

CFDateFormatterStyle CFDateFormatterGetDateStyle(CFDateFormatterRef formatter)
{
  return MEMORY[0x1E0C984A0](formatter);
}

CFStringRef CFDateFormatterGetFormat(CFDateFormatterRef formatter)
{
  return (CFStringRef)MEMORY[0x1E0C984A8](formatter);
}

CFLocaleRef CFDateFormatterGetLocale(CFDateFormatterRef formatter)
{
  return (CFLocaleRef)MEMORY[0x1E0C984B0](formatter);
}

CFDateFormatterStyle CFDateFormatterGetTimeStyle(CFDateFormatterRef formatter)
{
  return MEMORY[0x1E0C984B8](formatter);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
  MEMORY[0x1E0C984C0](formatter, formatString);
}

void CFDateFormatterSetProperty(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value)
{
  MEMORY[0x1E0C984C8](formatter, key, value);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C984D8](theDate);
  return result;
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

uint64_t CFDictionaryGetKeyIfPresent()
{
  return MEMORY[0x1E0C98590]();
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

uint64_t CFErrorCopyCallBackBlockForDomain()
{
  return MEMORY[0x1E0C98628]();
}

CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98648](err);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1E0C98670](err);
}

CFTypeID CFErrorGetTypeID(void)
{
  return MEMORY[0x1E0C98678]();
}

uint64_t CFErrorSetCallBackBlockForDomain()
{
  return MEMORY[0x1E0C98680]();
}

Boolean CFFileSecurityGetOwner(CFFileSecurityRef fileSec, uid_t *owner)
{
  return MEMORY[0x1E0C986F0](fileSec, owner);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1E0C98720](cf);
}

uint64_t CFGetSystemUptime()
{
  return MEMORY[0x1E0C98728]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFAbsoluteTime CFGregorianDateGetAbsoluteTime(CFGregorianDate gdate, CFTimeZoneRef tz)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C98748](*(_QWORD *)&gdate.year, *(_QWORD *)&gdate.second, tz);
  return result;
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1E0C98758](cf);
}

uint64_t CFHashBytes()
{
  return MEMORY[0x1E0C98760]();
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C98770]();
}

CFStringRef CFLocaleCopyDisplayNameForPropertyValue(CFLocaleRef displayLocale, CFLocaleKey key, CFStringRef value)
{
  return (CFStringRef)MEMORY[0x1E0C98778](displayLocale, key, value);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1E0C98798](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987A0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987B0](allocator, localeIdentifier);
}

CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef allocator, CFLocaleIdentifier localeID)
{
  return (CFDictionaryRef)MEMORY[0x1E0C987B8](allocator, localeID);
}

CFLocaleRef CFLocaleGetSystem(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C987F0]();
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C98818](allocator, port, order);
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x1E0C98820](allocator, *(_QWORD *)&portNum, callout, context, shouldFreeInfo);
}

void CFMachPortGetContext(CFMachPortRef port, CFMachPortContext *context)
{
  MEMORY[0x1E0C98828](port, context);
}

mach_port_t CFMachPortGetPort(CFMachPortRef port)
{
  return MEMORY[0x1E0C98830](port);
}

CFTypeID CFMachPortGetTypeID(void)
{
  return MEMORY[0x1E0C98838]();
}

void CFMachPortInvalidate(CFMachPortRef port)
{
  MEMORY[0x1E0C98840](port);
}

Boolean CFMachPortIsValid(CFMachPortRef port)
{
  return MEMORY[0x1E0C98848](port);
}

void CFMachPortSetInvalidationCallBack(CFMachPortRef port, CFMachPortInvalidationCallBack callout)
{
  MEMORY[0x1E0C98850](port, callout);
}

uint64_t CFMergeSortArray()
{
  return MEMORY[0x1E0C98860]();
}

CFMessagePortRef CFMessagePortCreateLocal(CFAllocatorRef allocator, CFStringRef name, CFMessagePortCallBack callout, CFMessagePortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMessagePortRef)MEMORY[0x1E0C98868](allocator, name, callout, context, shouldFreeInfo);
}

CFMessagePortRef CFMessagePortCreateRemote(CFAllocatorRef allocator, CFStringRef name)
{
  return (CFMessagePortRef)MEMORY[0x1E0C98870](allocator, name);
}

CFRunLoopSourceRef CFMessagePortCreateRunLoopSource(CFAllocatorRef allocator, CFMessagePortRef local, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C98878](allocator, local, order);
}

CFStringRef CFMessagePortGetName(CFMessagePortRef ms)
{
  return (CFStringRef)MEMORY[0x1E0C98880](ms);
}

void CFMessagePortInvalidate(CFMessagePortRef ms)
{
  MEMORY[0x1E0C98888](ms);
}

Boolean CFMessagePortIsValid(CFMessagePortRef ms)
{
  return MEMORY[0x1E0C98890](ms);
}

SInt32 CFMessagePortSendRequest(CFMessagePortRef remote, SInt32 msgid, CFDataRef data, CFTimeInterval sendTimeout, CFTimeInterval rcvTimeout, CFStringRef replyMode, CFDataRef *returnData)
{
  return MEMORY[0x1E0C98898](remote, *(_QWORD *)&msgid, data, replyMode, returnData, sendTimeout, rcvTimeout);
}

Boolean CFMessagePortSetName(CFMessagePortRef ms, CFStringRef newName)
{
  return MEMORY[0x1E0C988A8](ms, newName);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1E0C98908]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeRef CFNumberFormatterCopyProperty(CFNumberFormatterRef formatter, CFNumberFormatterKey key)
{
  return (CFTypeRef)MEMORY[0x1E0C98930](formatter, key);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x1E0C98938](allocator, locale, style);
}

CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options)
{
  return (CFNumberRef)MEMORY[0x1E0C98940](allocator, formatter, string, rangep, options);
}

CFStringRef CFNumberFormatterCreateStringWithNumber(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberRef number)
{
  return (CFStringRef)MEMORY[0x1E0C98948](allocator, formatter, number);
}

CFStringRef CFNumberFormatterGetFormat(CFNumberFormatterRef formatter)
{
  return (CFStringRef)MEMORY[0x1E0C98960](formatter);
}

CFLocaleRef CFNumberFormatterGetLocale(CFNumberFormatterRef formatter)
{
  return (CFLocaleRef)MEMORY[0x1E0C98968](formatter);
}

CFNumberFormatterStyle CFNumberFormatterGetStyle(CFNumberFormatterRef formatter)
{
  return MEMORY[0x1E0C98970](formatter);
}

void CFNumberFormatterSetFormat(CFNumberFormatterRef formatter, CFStringRef formatString)
{
  MEMORY[0x1E0C98980](formatter, formatString);
}

void CFNumberFormatterSetProperty(CFNumberFormatterRef formatter, CFNumberFormatterKey key, CFTypeRef value)
{
  MEMORY[0x1E0C98988](formatter, key, value);
}

CFIndex CFNumberGetByteSize(CFNumberRef number)
{
  return MEMORY[0x1E0C98990](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1E0C989D0](number);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A38](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFArrayRef CFPreferencesCopyApplicationList(CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1E0C98A48](userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

Boolean CFPropertyListIsValid(CFPropertyListRef plist, CFPropertyListFormat format)
{
  return MEMORY[0x1E0C98AF0](plist, format);
}

CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return MEMORY[0x1E0C98AF8](propertyList, stream, format, options, error);
}

CFIndex CFPropertyListWriteToStream(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFStringRef *errorString)
{
  return MEMORY[0x1E0C98B00](propertyList, stream, format, errorString);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFErrorRef CFReadStreamCopyError(CFReadStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x1E0C98B20](stream);
}

CFTypeRef CFReadStreamCopyProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1E0C98B28](stream, propertyName);
}

uint64_t CFReadStreamCreateWithData()
{
  return MEMORY[0x1E0C98B40]();
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

const UInt8 *__cdecl CFReadStreamGetBuffer(CFReadStreamRef stream, CFIndex maxBytesToRead, CFIndex *numBytesRead)
{
  return (const UInt8 *)MEMORY[0x1E0C98B50](stream, maxBytesToRead, numBytesRead);
}

CFStreamError CFReadStreamGetError(CFReadStreamRef stream)
{
  CFIndex v1;
  uint64_t v2;
  CFStreamError result;

  v1 = MEMORY[0x1E0C98B58](stream);
  result.error = v2;
  result.domain = v1;
  return result;
}

CFStreamStatus CFReadStreamGetStatus(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B68](stream);
}

CFTypeID CFReadStreamGetTypeID(void)
{
  return MEMORY[0x1E0C98B70]();
}

Boolean CFReadStreamHasBytesAvailable(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B78](stream);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1E0C98B88](stream, buffer, bufferLength);
}

void CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
  MEMORY[0x1E0C98B90](stream, runLoop, runLoopMode);
}

Boolean CFReadStreamSetClient(CFReadStreamRef stream, CFOptionFlags streamEvents, CFReadStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x1E0C98B98](stream, streamEvents, clientCB, clientContext);
}

Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1E0C98BA8](stream, propertyName, propertyValue);
}

void CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
  MEMORY[0x1E0C98BB8](stream, runLoop, runLoopMode);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BE8](rl, observer, mode);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C00](rl, timer, mode);
}

Boolean CFRunLoopContainsTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
  return MEMORY[0x1E0C98C18](rl, timer, mode);
}

CFArrayRef CFRunLoopCopyAllModes(CFRunLoopRef rl)
{
  return (CFArrayRef)MEMORY[0x1E0C98C20](rl);
}

CFRunLoopMode CFRunLoopCopyCurrentMode(CFRunLoopRef rl)
{
  return (CFRunLoopMode)MEMORY[0x1E0C98C28](rl);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

CFAbsoluteTime CFRunLoopGetNextTimerFireDate(CFRunLoopRef rl, CFRunLoopMode mode)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C98C50](rl, mode);
  return result;
}

CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context)
{
  return (CFRunLoopObserverRef)MEMORY[0x1E0C98C60](allocator, activities, repeats, order, callout, context);
}

void CFRunLoopObserverGetContext(CFRunLoopObserverRef observer, CFRunLoopObserverContext *context)
{
  MEMORY[0x1E0C98C70](observer, context);
}

void CFRunLoopObserverInvalidate(CFRunLoopObserverRef observer)
{
  MEMORY[0x1E0C98C78](observer);
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
  MEMORY[0x1E0C98C80](rl, mode, block);
}

void CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C88](rl, observer, mode);
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C90](rl, source, mode);
}

void CFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98CA0](rl, timer, mode);
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1E0C98CB0](mode, returnAfterSourceHandled, seconds);
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C98CC8](allocator, order, context);
}

void CFRunLoopSourceGetContext(CFRunLoopSourceRef source, CFRunLoopSourceContext *context)
{
  MEMORY[0x1E0C98CD0](source, context);
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
  MEMORY[0x1E0C98CE0](source);
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
  MEMORY[0x1E0C98CF0](source);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D00](rl);
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x1E0C98D08](allocator, flags, order, callout, context, fireDate, interval);
}

void CFRunLoopTimerGetContext(CFRunLoopTimerRef timer, CFRunLoopTimerContext *context)
{
  MEMORY[0x1E0C98D20](timer, context);
}

CFTimeInterval CFRunLoopTimerGetInterval(CFRunLoopTimerRef timer)
{
  CFTimeInterval result;

  MEMORY[0x1E0C98D28](timer);
  return result;
}

CFAbsoluteTime CFRunLoopTimerGetNextFireDate(CFRunLoopTimerRef timer)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C98D30](timer);
  return result;
}

CFTimeInterval CFRunLoopTimerGetTolerance(CFRunLoopTimerRef timer)
{
  CFTimeInterval result;

  MEMORY[0x1E0C98D38](timer);
  return result;
}

CFTypeID CFRunLoopTimerGetTypeID(void)
{
  return MEMORY[0x1E0C98D40]();
}

void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer)
{
  MEMORY[0x1E0C98D48](timer);
}

Boolean CFRunLoopTimerIsValid(CFRunLoopTimerRef timer)
{
  return MEMORY[0x1E0C98D50](timer);
}

void CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer, CFAbsoluteTime fireDate)
{
  MEMORY[0x1E0C98D58](timer, fireDate);
}

void CFRunLoopTimerSetTolerance(CFRunLoopTimerRef timer, CFTimeInterval tolerance)
{
  MEMORY[0x1E0C98D60](timer, tolerance);
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D68](rl);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1E0C98DC0](theSet, value);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
  MEMORY[0x1E0C98DD0](theSet, values);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DF0](theSet, value);
}

uint64_t CFSortIndexes()
{
  return MEMORY[0x1E0C98E70]();
}

uint64_t CFStorageCreate()
{
  return MEMORY[0x1E0C98E78]();
}

uint64_t CFStorageCreateWithSubrange()
{
  return MEMORY[0x1E0C98E80]();
}

uint64_t CFStorageDeleteValues()
{
  return MEMORY[0x1E0C98E88]();
}

uint64_t CFStorageGetConstValueAtIndex()
{
  return MEMORY[0x1E0C98E90]();
}

uint64_t CFStorageGetCount()
{
  return MEMORY[0x1E0C98E98]();
}

uint64_t CFStorageGetValueAtIndex()
{
  return MEMORY[0x1E0C98EA0]();
}

uint64_t CFStorageGetValues()
{
  return MEMORY[0x1E0C98EA8]();
}

uint64_t CFStorageInsertValues()
{
  return MEMORY[0x1E0C98EB0]();
}

void CFStreamCreateBoundPair(CFAllocatorRef alloc, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream, CFIndex transferBufferSize)
{
  MEMORY[0x1E0C98EC0](alloc, readStream, writeStream, transferBufferSize);
}

void CFStreamCreatePairWithSocketToHost(CFAllocatorRef alloc, CFStringRef host, UInt32 port, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream)
{
  MEMORY[0x1E0C98ED0](alloc, host, *(_QWORD *)&port, readStream, writeStream);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
  MEMORY[0x1E0C98EE8](theString, chars, numChars);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

void CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C98F00](theString, locale);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F18](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFComparisonResult CFStringCompareWithOptionsAndLocale(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions, CFLocaleRef locale)
{
  return MEMORY[0x1E0C98F20](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions, locale);
}

CFStringRef CFStringConvertEncodingToIANACharSetName(CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98F28](*(_QWORD *)&encoding);
}

unint64_t CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding)
{
  return MEMORY[0x1E0C98F30](*(_QWORD *)&encoding);
}

CFStringEncoding CFStringConvertIANACharSetNameToEncoding(CFStringRef theString)
{
  return MEMORY[0x1E0C98F40](theString);
}

CFStringEncoding CFStringConvertNSStringEncodingToEncoding(unint64_t encoding)
{
  return MEMORY[0x1E0C98F48](encoding);
}

CFArrayRef CFStringCreateArrayWithFindResults(CFAllocatorRef alloc, CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return (CFArrayRef)MEMORY[0x1E0C98F60](alloc, theString, stringToFind, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1E0C98F68](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98F88](alloc, data, *(_QWORD *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98FA0](alloc, chars, numChars, capacity, externalCharactersAllocator);
}

CFStringRef CFStringCreateStringWithValidatedFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef validFormatSpecifiers, CFStringRef format, va_list arguments, CFErrorRef *errorPtr)
{
  return (CFStringRef)MEMORY[0x1E0C98FB0](alloc, formatOptions, validFormatSpecifiers, format, arguments, errorPtr);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FC8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FE0](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1E0C98FE8](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FF8](alloc, chars, numChars, contentsDeallocator);
}

CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer)
{
  return (CFStringRef)MEMORY[0x1E0C99008](alloc, buffer);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C99028](alloc, pStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99060](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99068](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptionsAndLocale(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFLocaleRef locale, CFRange *result)
{
  return MEMORY[0x1E0C99070](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, locale, result);
}

void CFStringFold(CFMutableStringRef theString, CFStringCompareFlags theFlags, CFLocaleRef theLocale)
{
  MEMORY[0x1E0C99078](theString, theFlags, theLocale);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

const CFStringEncoding *CFStringGetListOfAvailableEncodings(void)
{
  return (const CFStringEncoding *)MEMORY[0x1E0C99110]();
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1E0C99128](string);
}

CFStringRef CFStringGetNameOfEncoding(CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C99138](*(_QWORD *)&encoding);
}

uint64_t CFStringGetRangeOfCharacterClusterAtIndex()
{
  return MEMORY[0x1E0C99158]();
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1E0C99168]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

uint64_t CFStringHashCString()
{
  return MEMORY[0x1E0C99198]();
}

uint64_t CFStringHashCharacters()
{
  return MEMORY[0x1E0C991A0]();
}

uint64_t CFStringHashISOLatin1CString()
{
  return MEMORY[0x1E0C991A8]();
}

uint64_t CFStringHashNSString()
{
  return MEMORY[0x1E0C991B0]();
}

void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr)
{
  MEMORY[0x1E0C991B8](str, idx, insertedStr);
}

Boolean CFStringIsEncodingAvailable(CFStringEncoding encoding)
{
  return MEMORY[0x1E0C991C0](*(_QWORD *)&encoding);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C991D0](theString, locale);
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
  MEMORY[0x1E0C991D8](theString, theForm);
}

uint64_t CFStringOpenUText()
{
  return MEMORY[0x1E0C991E0]();
}

void CFStringPad(CFMutableStringRef theString, CFStringRef padString, CFIndex length, CFIndex indexIntoPad)
{
  MEMORY[0x1E0C991E8](theString, padString, length, indexIntoPad);
}

void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement)
{
  MEMORY[0x1E0C991F8](theString, replacement);
}

void CFStringSetExternalCharactersNoCopy(CFMutableStringRef theString, UniChar *chars, CFIndex length, CFIndex capacity)
{
  MEMORY[0x1E0C99200](theString, chars, length, capacity);
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1E0C99208](tokenizer);
}

CFStringRef CFStringTokenizerCopyBestStringLanguage(CFStringRef string, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99210](string, range.location, range.length);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1E0C99220](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x1E0C99230](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer, CFIndex index)
{
  return MEMORY[0x1E0C99238](tokenizer, index);
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
  MEMORY[0x1E0C99240](tokenizer, string, range.location, range.length);
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x1E0C99248](string, range, transform, reverse);
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C99260](theString, locale);
}

CFTimeZoneRef CFTimeZoneCopyDefault(void)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99270]();
}

Boolean CFURLCanBeDecomposed(CFURLRef anURL)
{
  return MEMORY[0x1E0C992B0](anURL);
}

void CFURLClearResourcePropertyCache(CFURLRef url)
{
  MEMORY[0x1E0C992B8](url);
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1E0C992C8](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1E0C992D8](anURL, pathStyle);
}

CFStringRef CFURLCopyFragment(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1E0C992E8](anURL, charactersToLeaveEscaped);
}

CFStringRef CFURLCopyHostName(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C992F0](anURL);
}

CFStringRef CFURLCopyNetLocation(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99300](anURL);
}

CFStringRef CFURLCopyParameterString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1E0C99308](anURL, charactersToLeaveEscaped);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99318](anURL);
}

CFStringRef CFURLCopyQueryString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1E0C99328](anURL, charactersToLeaveEscaped);
}

Boolean CFURLCopyResourcePropertyForKey(CFURLRef url, CFStringRef key, void *propertyValueTypeRefPtr, CFErrorRef *error)
{
  return MEMORY[0x1E0C99338](url, key, propertyValueTypeRefPtr, error);
}

CFStringRef CFURLCopyResourceSpecifier(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99340](anURL);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99348](anURL);
}

CFStringRef CFURLCopyUserName(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99358](anURL);
}

CFURLRef CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc, const UInt8 *relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode)
{
  return (CFURLRef)MEMORY[0x1E0C99360](alloc, relativeURLBytes, length, *(_QWORD *)&encoding, baseURL, useCompatibilityMode);
}

CFURLRef CFURLCreateByResolvingBookmarkData(CFAllocatorRef allocator, CFDataRef bookmark, CFURLBookmarkResolutionOptions options, CFURLRef relativeToURL, CFArrayRef resourcePropertiesToInclude, Boolean *isStale, CFErrorRef *error)
{
  return (CFURLRef)MEMORY[0x1E0C99378](allocator, bookmark, options, relativeToURL, resourcePropertiesToInclude, isStale, error);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99380](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateCopyAppendingPathExtension(CFAllocatorRef allocator, CFURLRef url, CFStringRef extension)
{
  return (CFURLRef)MEMORY[0x1E0C99388](allocator, url, extension);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1E0C99390](allocator, url);
}

CFURLRef CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1E0C99398](allocator, url);
}

CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C993D8](allocator, buffer, bufLen, isDirectory, baseURL);
}

CFStringRef CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveUnescaped, CFStringRef legalURLCharactersToBeEscaped, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C993F8](allocator, originalString, charactersToLeaveUnescaped, legalURLCharactersToBeEscaped, *(_QWORD *)&encoding);
}

CFStringRef CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1E0C99400](allocator, originalString, charactersToLeaveEscaped);
}

CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding(CFAllocatorRef allocator, CFStringRef origString, CFStringRef charsToLeaveEscaped, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C99408](allocator, origString, charsToLeaveEscaped, *(_QWORD *)&encoding);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99418](allocator, URLBytes, length, *(_QWORD *)&encoding, baseURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99438](allocator, filePath, pathStyle, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99448](allocator, URLString, baseURL);
}

CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL(CFAllocatorRef alloc, CFURLRef directoryURL, CFURLEnumeratorOptions option, CFArrayRef propertyKeys)
{
  return (CFURLEnumeratorRef)MEMORY[0x1E0C99450](alloc, directoryURL, option, propertyKeys);
}

CFIndex CFURLEnumeratorGetDescendentLevel(CFURLEnumeratorRef enumerator)
{
  return MEMORY[0x1E0C99460](enumerator);
}

CFURLEnumeratorResult CFURLEnumeratorGetNextURL(CFURLEnumeratorRef enumerator, CFURLRef *url, CFErrorRef *error)
{
  return MEMORY[0x1E0C99468](enumerator, url, error);
}

void CFURLEnumeratorSkipDescendents(CFURLEnumeratorRef enumerator)
{
  MEMORY[0x1E0C99470](enumerator);
}

CFURLRef CFURLGetBaseURL(CFURLRef anURL)
{
  return (CFURLRef)MEMORY[0x1E0C99478](anURL);
}

CFRange CFURLGetByteRangeForComponent(CFURLRef url, CFURLComponentType component, CFRange *rangeIncludingSeparators)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99480](url, component, rangeIncludingSeparators);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1E0C99488](url, buffer, bufferLength);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

SInt32 CFURLGetPortNumber(CFURLRef anURL)
{
  return MEMORY[0x1E0C99498](anURL);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C994A0](anURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1E0C994B8]();
}

Boolean CFURLHasDirectoryPath(CFURLRef anURL)
{
  return MEMORY[0x1E0C994C0](anURL);
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x1E0C994D0](url, error);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

uint64_t CFUniCharCompatibilityDecompose()
{
  return MEMORY[0x1E0C99578]();
}

uint64_t CFUniCharDecomposeCharacter()
{
  return MEMORY[0x1E0C99580]();
}

Boolean CFWriteStreamCanAcceptBytes(CFWriteStreamRef stream)
{
  return MEMORY[0x1E0C995F8](stream);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
  MEMORY[0x1E0C99600](stream);
}

CFErrorRef CFWriteStreamCopyError(CFWriteStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x1E0C99608](stream);
}

CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1E0C99610](stream, propertyName);
}

CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator)
{
  return (CFWriteStreamRef)MEMORY[0x1E0C99620](alloc, bufferAllocator);
}

CFWriteStreamRef CFWriteStreamCreateWithBuffer(CFAllocatorRef alloc, UInt8 *buffer, CFIndex bufferCapacity)
{
  return (CFWriteStreamRef)MEMORY[0x1E0C99628](alloc, buffer, bufferCapacity);
}

CFWriteStreamRef CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFWriteStreamRef)MEMORY[0x1E0C99630](alloc, fileURL);
}

CFStreamError CFWriteStreamGetError(CFWriteStreamRef stream)
{
  CFIndex v1;
  uint64_t v2;
  CFStreamError result;

  v1 = MEMORY[0x1E0C99638](stream);
  result.error = v2;
  result.domain = v1;
  return result;
}

CFStreamStatus CFWriteStreamGetStatus(CFWriteStreamRef stream)
{
  return MEMORY[0x1E0C99640](stream);
}

CFTypeID CFWriteStreamGetTypeID(void)
{
  return MEMORY[0x1E0C99648]();
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1E0C99650](stream);
}

void CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
  MEMORY[0x1E0C99658](stream, runLoop, runLoopMode);
}

Boolean CFWriteStreamSetClient(CFWriteStreamRef stream, CFOptionFlags streamEvents, CFWriteStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x1E0C99660](stream, streamEvents, clientCB, clientContext);
}

Boolean CFWriteStreamSetProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1E0C99670](stream, propertyName, propertyValue);
}

void CFWriteStreamUnscheduleFromRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
  MEMORY[0x1E0C99680](stream, runLoop, runLoopMode);
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1E0C99688](stream, buffer, bufferLength);
}

IOReturn IOPMAssertionCreateWithName(CFStringRef AssertionType, IOPMAssertionLevel AssertionLevel, CFStringRef AssertionName, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1E0CBB708](AssertionType, *(_QWORD *)&AssertionLevel, AssertionName, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1E0CBB738](*(_QWORD *)&AssertionID);
}

const char *__cdecl NSGetSizeAndAlignment(const char *typePtr, NSUInteger *sizep, NSUInteger *alignp)
{
  return (const char *)MEMORY[0x1E0C99758](typePtr, sizep, alignp);
}

void OSSpinLockLock(OSSpinLock *__lock)
{
  MEMORY[0x1E0C80678](__lock);
}

void OSSpinLockUnlock(OSSpinLock *__lock)
{
  MEMORY[0x1E0C80680](__lock);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

BOOL _Block_has_signature(void *aBlock)
{
  return MEMORY[0x1E0C80930](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

const char *__cdecl _Block_signature(void *aBlock)
{
  return (const char *)MEMORY[0x1E0C80960](aBlock);
}

uint64_t _CFAppVersionCheck()
{
  return MEMORY[0x1E0C99ED8]();
}

uint64_t _CFAppVersionCheckLessThan()
{
  return MEMORY[0x1E0C99EE0]();
}

uint64_t _CFArraySetCapacity()
{
  return MEMORY[0x1E0C99EE8]();
}

uint64_t _CFAttributedStringCheckAndReplace()
{
  return MEMORY[0x1E0C99EF0]();
}

uint64_t _CFAttributedStringCheckAndReplaceAttributed()
{
  return MEMORY[0x1E0C99EF8]();
}

uint64_t _CFAttributedStringCheckAndSetAttribute()
{
  return MEMORY[0x1E0C99F00]();
}

uint64_t _CFAttributedStringCheckAndSetAttributes()
{
  return MEMORY[0x1E0C99F08]();
}

uint64_t _CFAttributedStringGetLength()
{
  return MEMORY[0x1E0C99F18]();
}

uint64_t _CFAutoreleasePoolAddObject()
{
  return MEMORY[0x1E0C99F30]();
}

uint64_t _CFAutoreleasePoolPop()
{
  return MEMORY[0x1E0C99F38]();
}

uint64_t _CFAutoreleasePoolPrintPools()
{
  return MEMORY[0x1E0C99F40]();
}

uint64_t _CFAutoreleasePoolPush()
{
  return MEMORY[0x1E0C99F48]();
}

uint64_t _CFBagFastEnumeration()
{
  return MEMORY[0x1E0C99F50]();
}

uint64_t _CFBagGetUniqueCount()
{
  return MEMORY[0x1E0C99F58]();
}

uint64_t _CFBundleAddResourceURL()
{
  return MEMORY[0x1E0C99F60]();
}

uint64_t _CFBundleCopyFilteredLocalizedStringsForAllLocalizations()
{
  return MEMORY[0x1E0C99F88]();
}

uint64_t _CFBundleCopyFilteredLocalizedStringsForAllLocalizationsForURL()
{
  return MEMORY[0x1E0C99F90]();
}

uint64_t _CFBundleCopyFindResources()
{
  return MEMORY[0x1E0C99F98]();
}

uint64_t _CFBundleCopyLocalizedStringForLocalizationAndTableURL()
{
  return MEMORY[0x1E0C99FB0]();
}

uint64_t _CFBundleCopyLocalizedStringForLocalizationTableURLAndMarkdownOption()
{
  return MEMORY[0x1E0C99FB8]();
}

uint64_t _CFBundleCopyLocalizedStringForLocalizations()
{
  return MEMORY[0x1E0C99FC0]();
}

uint64_t _CFBundleCopyWrappedBundleURL()
{
  return MEMORY[0x1E0C99FC8]();
}

uint64_t _CFBundleCopyWrapperContainerURL()
{
  return MEMORY[0x1E0C99FD0]();
}

uint64_t _CFBundleCreateError()
{
  return MEMORY[0x1E0C99FD8]();
}

uint64_t _CFBundleCreateUnique()
{
  return MEMORY[0x1E0C99FF0]();
}

uint64_t _CFBundleFlushBundleCaches()
{
  return MEMORY[0x1E0C9A008]();
}

uint64_t _CFBundleGetBundleWithIdentifierAndLibraryName()
{
  return MEMORY[0x1E0C9A010]();
}

uint64_t _CFBundleGetBundleWithIdentifierWithHint()
{
  return MEMORY[0x1E0C9A018]();
}

uint64_t _CFBundleGetMappedStringsFile()
{
  return MEMORY[0x1E0C9A030]();
}

uint64_t _CFBundleLoadExecutableAndReturnError()
{
  return MEMORY[0x1E0C9A038]();
}

uint64_t _CFBundleRemoveResourceURL()
{
  return MEMORY[0x1E0C9A040]();
}

uint64_t _CFBundleSearchForLocalizedString()
{
  return MEMORY[0x1E0C9A048]();
}

uint64_t _CFBundleSetupXPCBootstrap()
{
  return MEMORY[0x1E0C9A050]();
}

uint64_t _CFBundleSetupXPCBootstrapWithLanguages()
{
  return MEMORY[0x1E0C9A058]();
}

uint64_t _CFCalendarGetMidnightNoteCount()
{
  return MEMORY[0x1E0C9A060]();
}

uint64_t _CFCalendarGetUnitsFromDateFormat()
{
  return MEMORY[0x1E0C9A068]();
}

uint64_t _CFCharacterSetCompact()
{
  return MEMORY[0x1E0C9A070]();
}

uint64_t _CFCharacterSetCreateKeyedCodingString()
{
  return MEMORY[0x1E0C9A078]();
}

uint64_t _CFCharacterSetFast()
{
  return MEMORY[0x1E0C9A080]();
}

uint64_t _CFCharacterSetGetKeyedCodingBuiltinType()
{
  return MEMORY[0x1E0C9A088]();
}

uint64_t _CFCharacterSetGetKeyedCodingRange()
{
  return MEMORY[0x1E0C9A090]();
}

uint64_t _CFCharacterSetGetKeyedCodingType()
{
  return MEMORY[0x1E0C9A098]();
}

uint64_t _CFCharacterSetIsInverted()
{
  return MEMORY[0x1E0C9A0A0]();
}

uint64_t _CFCharacterSetIsMutable()
{
  return MEMORY[0x1E0C9A0A8]();
}

uint64_t _CFCharacterSetIsValidRange()
{
  return MEMORY[0x1E0C9A0B0]();
}

uint64_t _CFCharacterSetSetIsInverted()
{
  return MEMORY[0x1E0C9A0B8]();
}

uint64_t _CFCopySystemVersionDictionaryValue()
{
  return MEMORY[0x1E0C9A0D8]();
}

uint64_t _CFCreateArrayStorage()
{
  return MEMORY[0x1E0C9A0E8]();
}

uint64_t _CFCreateCharacterSetFromUSet()
{
  return MEMORY[0x1E0C9A0F0]();
}

uint64_t _CFDataFindBytes()
{
  return MEMORY[0x1E0C9A0F8]();
}

uint64_t _CFDateFormatterCreateAttributedStringAndFieldsWithAbsoluteTime()
{
  return MEMORY[0x1E0C9A100]();
}

uint64_t _CFDateFormatterCreateSkeletonFromTemplate()
{
  return MEMORY[0x1E0C9A108]();
}

uint64_t _CFDictionarySetCapacity()
{
  return MEMORY[0x1E0C9A118]();
}

uint64_t _CFDiscorporateMemoryAllocate()
{
  return MEMORY[0x1E0C9A120]();
}

uint64_t _CFDiscorporateMemoryDeallocate()
{
  return MEMORY[0x1E0C9A128]();
}

uint64_t _CFDiscorporateMemoryDematerialize()
{
  return MEMORY[0x1E0C9A130]();
}

uint64_t _CFDiscorporateMemoryMaterialize()
{
  return MEMORY[0x1E0C9A138]();
}

uint64_t _CFDoExceptionOperation()
{
  return MEMORY[0x1E0C9A140]();
}

uint64_t _CFErrorCreateCallStackReturnAddresses()
{
  return MEMORY[0x1E0C9A148]();
}

uint64_t _CFErrorCreateDebugDescription()
{
  return MEMORY[0x1E0C9A150]();
}

uint64_t _CFErrorCreateLocalizedDescription()
{
  return MEMORY[0x1E0C9A158]();
}

uint64_t _CFErrorCreateLocalizedFailureReason()
{
  return MEMORY[0x1E0C9A160]();
}

uint64_t _CFErrorCreateLocalizedRecoverySuggestion()
{
  return MEMORY[0x1E0C9A168]();
}

uint64_t _CFErrorCreateRedactedDescription()
{
  return MEMORY[0x1E0C9A170]();
}

uint64_t _CFExecutableLinkedOnOrAfter()
{
  return MEMORY[0x1E0C9A178]();
}

uint64_t _CFExtensionUniCharsIsValidToAppend()
{
  return MEMORY[0x1E0C9A188]();
}

uint64_t _CFGetPathExtensionRangesFromPathComponentUniChars()
{
  return MEMORY[0x1E0C9A1B0]();
}

uint64_t _CFGetProgname()
{
  return MEMORY[0x1E0C9A1C0]();
}

uint64_t _CFGetTSD()
{
  return MEMORY[0x1E0C9A1C8]();
}

uint64_t _CFHostGetTopLevelDomain()
{
  return MEMORY[0x1E0C92EA0]();
}

uint64_t _CFIsDeallocating()
{
  return MEMORY[0x1E0C9A1D8]();
}

uint64_t _CFKeyedArchiverUIDCreate()
{
  return MEMORY[0x1E0C9A1E0]();
}

uint64_t _CFKeyedArchiverUIDGetTypeID()
{
  return MEMORY[0x1E0C9A1E8]();
}

uint64_t _CFKeyedArchiverUIDGetValue()
{
  return MEMORY[0x1E0C9A1F0]();
}

uint64_t _CFListFormatterCreate()
{
  return MEMORY[0x1E0C9A1F8]();
}

uint64_t _CFListFormatterCreateStringByJoiningStrings()
{
  return MEMORY[0x1E0C9A200]();
}

uint64_t _CFLocaleCopyPreferred()
{
  return MEMORY[0x1E0C9A210]();
}

uint64_t _CFLocaleCopyPreferredLanguagesForCurrentUser()
{
  return MEMORY[0x1E0C9A218]();
}

uint64_t _CFLocaleCopyPreferredMeasurementSystem()
{
  return MEMORY[0x1E0C9A220]();
}

uint64_t _CFLocaleCopyPreferredTemperatureUnit()
{
  return MEMORY[0x1E0C9A228]();
}

uint64_t _CFLocaleGetCalendarDirection()
{
  return MEMORY[0x1E0C9A238]();
}

uint64_t _CFLocaleGetNoteCount()
{
  return MEMORY[0x1E0C9A240]();
}

uint64_t _CFLocaleSetPreferredMeasurementSystem()
{
  return MEMORY[0x1E0C9A248]();
}

uint64_t _CFLocaleSetPreferredTemperatureUnit()
{
  return MEMORY[0x1E0C9A250]();
}

uint64_t _CFLogvEx3()
{
  return MEMORY[0x1E0C9A258]();
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x1E0C9A260]();
}

uint64_t _CFNetworkErrorCopyLocalizedDescriptionWithHostname()
{
  return MEMORY[0x1E0C92EE0]();
}

uint64_t _CFNetworkErrorGetLocalizedFailureReason()
{
  return MEMORY[0x1E0C92EE8]();
}

uint64_t _CFNetworkErrorGetLocalizedRecoverySuggestion()
{
  return MEMORY[0x1E0C92EF0]();
}

uint64_t _CFNonObjCEqual()
{
  return MEMORY[0x1E0C9A270]();
}

uint64_t _CFNonObjCHash()
{
  return MEMORY[0x1E0C9A278]();
}

uint64_t _CFNonObjCRelease()
{
  return MEMORY[0x1E0C9A280]();
}

uint64_t _CFNonObjCRetain()
{
  return MEMORY[0x1E0C9A288]();
}

uint64_t _CFNonObjCStringGetBytes()
{
  return MEMORY[0x1E0C9A290]();
}

uint64_t _CFNotificationCenterInitializeDependentNotificationIfNecessary()
{
  return MEMORY[0x1E0C9A298]();
}

uint64_t _CFNotificationCenterRegisterDependentNotificationList()
{
  return MEMORY[0x1E0C9A2A0]();
}

uint64_t _CFNumberFormatterGetFormatter()
{
  return MEMORY[0x1E0C9A2A8]();
}

uint64_t _CFNumberGetType2()
{
  return MEMORY[0x1E0C9A2B0]();
}

uint64_t _CFOperatingSystemVersionGetCurrent()
{
  return MEMORY[0x1E0C9A2B8]();
}

uint64_t _CFOperatingSystemVersionIsAtLeastVersion()
{
  return MEMORY[0x1E0C9A2C0]();
}

uint64_t _CFPredicatePolicyData()
{
  return MEMORY[0x1E0C9A2C8]();
}

uint64_t _CFPredicatePolicyData_getFlags()
{
  return MEMORY[0x1E0C9A2D0]();
}

uint64_t _CFPredicatePolicyData_setFlags()
{
  return MEMORY[0x1E0C9A2D8]();
}

uint64_t _CFPredicatePolicyRestrictedClasses()
{
  return MEMORY[0x1E0C9A2E0]();
}

uint64_t _CFPredicatePolicyRestrictedSelectors()
{
  return MEMORY[0x1E0C9A2E8]();
}

uint64_t _CFPreferencesAddSuitePreferencesToAppWithContainer()
{
  return MEMORY[0x1E0C9A2F0]();
}

uint64_t _CFPreferencesAppSynchronizeWithContainer()
{
  return MEMORY[0x1E0C9A300]();
}

uint64_t _CFPreferencesCopyAppValueWithContainer()
{
  return MEMORY[0x1E0C9A308]();
}

uint64_t _CFPreferencesGetAppBooleanValueWithContainer()
{
  return MEMORY[0x1E0C9A330]();
}

uint64_t _CFPreferencesGetAppIntegerValueWithContainer()
{
  return MEMORY[0x1E0C9A338]();
}

uint64_t _CFPreferencesRegisterStandardUserDefaultsExists()
{
  return MEMORY[0x1E0C9A360]();
}

uint64_t _CFPreferencesRemoveSuitePreferencesFromAppWithContainer()
{
  return MEMORY[0x1E0C9A368]();
}

uint64_t _CFPreferencesSetAppValueWithContainer()
{
  return MEMORY[0x1E0C9A378]();
}

uint64_t _CFPreferencesSetFileProtectionClass()
{
  return MEMORY[0x1E0C9A390]();
}

uint64_t _CFPreferencesSynchronizeWithContainer()
{
  return MEMORY[0x1E0C9A3A0]();
}

uint64_t _CFPrefsCopyAppDictionaryWithContainer()
{
  return MEMORY[0x1E0C9A3B8]();
}

uint64_t _CFPrefsRegisterUserDefaultsInstance()
{
  return MEMORY[0x1E0C9A3C0]();
}

uint64_t _CFPrefsSynchronizeForProcessTermination()
{
  return MEMORY[0x1E0C9A3D8]();
}

uint64_t _CFPrefsUnregisterUserDefaultsInstance()
{
  return MEMORY[0x1E0C9A3E0]();
}

uint64_t _CFProcessPath()
{
  return MEMORY[0x1E0C9A3E8]();
}

uint64_t _CFPropertyListCreateFiltered()
{
  return MEMORY[0x1E0C9A3F8]();
}

uint64_t _CFPropertyListCreateFromXMLData()
{
  return MEMORY[0x1E0C9A400]();
}

uint64_t _CFPropertyListCreateFromXMLString()
{
  return MEMORY[0x1E0C9A408]();
}

uint64_t _CFPropertyListCreateXMLDataWithExtras()
{
  return MEMORY[0x1E0C9A418]();
}

uint64_t _CFReadStreamDeallocate()
{
  return MEMORY[0x1E0C9A420]();
}

uint64_t _CFReadStreamGetClient()
{
  return MEMORY[0x1E0C9A428]();
}

uint64_t _CFReadStreamInitialize()
{
  return MEMORY[0x1E0C9A430]();
}

uint64_t _CFRelativeDateTimeFormatterCreate()
{
  return MEMORY[0x1E0C9A440]();
}

uint64_t _CFRelativeDateTimeFormatterCreateStringWithCalendarUnit()
{
  return MEMORY[0x1E0C9A448]();
}

uint64_t _CFRunLoop01()
{
  return MEMORY[0x1E0C9A450]();
}

uint64_t _CFRunLoopFinished()
{
  return MEMORY[0x1E0C9A460]();
}

uint64_t _CFRunLoopGet0()
{
  return MEMORY[0x1E0C9A468]();
}

uint64_t _CFRunLoopGet2()
{
  return MEMORY[0x1E0C9A470]();
}

uint64_t _CFRunLoopIsCurrent()
{
  return MEMORY[0x1E0C9A478]();
}

uint64_t _CFRunLoopModeContainsMode()
{
  return MEMORY[0x1E0C9A480]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

uint64_t _CFSetSetCapacity()
{
  return MEMORY[0x1E0C9A4C0]();
}

uint64_t _CFSetTSD()
{
  return MEMORY[0x1E0C9A4C8]();
}

uint64_t _CFStringAppendFormatAndArgumentsAux2()
{
  return MEMORY[0x1E0C9A4D0]();
}

uint64_t _CFStringAppendValidatedFormatAndArguments()
{
  return MEMORY[0x1E0C9A4D8]();
}

uint64_t _CFStringCreateByAddingPercentEncodingWithAllowedCharacters()
{
  return MEMORY[0x1E0C9A4E8]();
}

uint64_t _CFStringCreateByRemovingPercentEncoding()
{
  return MEMORY[0x1E0C9A4F0]();
}

uint64_t _CFStringCreateStringWithValidatedFormatAux()
{
  return MEMORY[0x1E0C9A4F8]();
}

uint64_t _CFStringCreateTaggedPointerString()
{
  return MEMORY[0x1E0C9A500]();
}

uint64_t _CFStringCreateWithFormatAndArgumentsAux2()
{
  return MEMORY[0x1E0C9A510]();
}

uint64_t _CFStringCreateWithFormatAndArgumentsReturningMetadata()
{
  return MEMORY[0x1E0C9A518]();
}

uint64_t _CFStringGetFormatSpecifierConfiguration()
{
  return MEMORY[0x1E0C9A528]();
}

uint64_t _CFStringValidateFormat()
{
  return MEMORY[0x1E0C9A570]();
}

uint64_t _CFSuddenTerminationDisable()
{
  return MEMORY[0x1E0C9A578]();
}

uint64_t _CFSuddenTerminationDisablingCount()
{
  return MEMORY[0x1E0C9A580]();
}

uint64_t _CFSuddenTerminationEnable()
{
  return MEMORY[0x1E0C9A588]();
}

uint64_t _CFSuddenTerminationExitIfTerminationEnabled()
{
  return MEMORY[0x1E0C9A590]();
}

uint64_t _CFSuddenTerminationExitWhenTerminationEnabled()
{
  return MEMORY[0x1E0C9A598]();
}

uint64_t _CFTimeZoneGetNoteCount()
{
  return MEMORY[0x1E0C9A5A0]();
}

uint64_t _CFTryRetain()
{
  return MEMORY[0x1E0C9A5A8]();
}

uint64_t _CFURLAttachSecurityScopeToFileURL()
{
  return MEMORY[0x1E0C9A5B0]();
}

uint64_t _CFURLComponentsGetURLFragmentAllowedCharacterSet()
{
  return MEMORY[0x1E0C9A5D0]();
}

uint64_t _CFURLComponentsGetURLHostAllowedCharacterSet()
{
  return MEMORY[0x1E0C9A5D8]();
}

uint64_t _CFURLComponentsGetURLPasswordAllowedCharacterSet()
{
  return MEMORY[0x1E0C9A5E0]();
}

uint64_t _CFURLComponentsGetURLPathAllowedCharacterSet()
{
  return MEMORY[0x1E0C9A5E8]();
}

uint64_t _CFURLComponentsGetURLQueryAllowedCharacterSet()
{
  return MEMORY[0x1E0C9A5F0]();
}

uint64_t _CFURLComponentsGetURLUserAllowedCharacterSet()
{
  return MEMORY[0x1E0C9A5F8]();
}

uint64_t _CFURLCopyComponents()
{
  return MEMORY[0x1E0C9A600]();
}

uint64_t _CFURLCopyFragment()
{
  return MEMORY[0x1E0C9A610]();
}

uint64_t _CFURLCopyHostName()
{
  return MEMORY[0x1E0C9A618]();
}

uint64_t _CFURLCopyLogicalURLOfPromiseAtURL()
{
  return MEMORY[0x1E0C9A628]();
}

uint64_t _CFURLCopyPassword()
{
  return MEMORY[0x1E0C9A630]();
}

uint64_t _CFURLCopyPath()
{
  return MEMORY[0x1E0C9A638]();
}

uint64_t _CFURLCopyPropertiesOfPromiseAtURL()
{
  return MEMORY[0x1E0C9A648]();
}

uint64_t _CFURLCopyQueryString()
{
  return MEMORY[0x1E0C9A658]();
}

uint64_t _CFURLCopySecurityScopeFromFileURL()
{
  return MEMORY[0x1E0C9A678]();
}

uint64_t _CFURLCopyUserName()
{
  return MEMORY[0x1E0C9A680]();
}

uint64_t _CFURLCreateByResolvingAliasFile()
{
  return MEMORY[0x1E0C9A688]();
}

uint64_t _CFURLCreateCopyAppendingPathComponent()
{
  return MEMORY[0x1E0C9A690]();
}

uint64_t _CFURLCreateDisplayPathComponentsArray()
{
  return MEMORY[0x1E0C9A698]();
}

uint64_t _CFURLCreateFromComponents()
{
  return MEMORY[0x1E0C9A6A0]();
}

uint64_t _CFURLCreateWithFileSystemPathCachingResourcePropertiesForKeys()
{
  return MEMORY[0x1E0C9A6B8]();
}

uint64_t _CFURLCreateWithRangesAndFlags()
{
  return MEMORY[0x1E0C9A6C0]();
}

uint64_t _CFURLGetEncoding()
{
  return MEMORY[0x1E0C9A6F8]();
}

uint64_t _CFURLIsFileURL()
{
  return MEMORY[0x1E0C9A710]();
}

uint64_t _CFURLIsItemPromiseAtURL()
{
  return MEMORY[0x1E0C9A718]();
}

uint64_t _CFURLNoteSecurityScopedResourceMoved()
{
  return MEMORY[0x1E0C9A728]();
}

uint64_t _CFURLPromiseCopyPhysicalURL()
{
  return MEMORY[0x1E0C9A730]();
}

uint64_t _CFURLPromiseSetPhysicalURL()
{
  return MEMORY[0x1E0C9A748]();
}

uint64_t _CFURLReplaceObject()
{
  return MEMORY[0x1E0C9A768]();
}

uint64_t _CFWriteStreamDeallocate()
{
  return MEMORY[0x1E0C9A780]();
}

uint64_t _CFWriteStreamGetClient()
{
  return MEMORY[0x1E0C9A788]();
}

uint64_t _CFWriteStreamInitialize()
{
  return MEMORY[0x1E0C9A790]();
}

uint64_t _CFXNotificationCancelToken()
{
  return MEMORY[0x1E0C9A7A0]();
}

uint64_t _CFXNotificationCenterCopyDebugInfo()
{
  return MEMORY[0x1E0C9A7A8]();
}

uint64_t _CFXNotificationCenterCreate()
{
  return MEMORY[0x1E0C9A7B0]();
}

uint64_t _CFXNotificationCenterIsEmpty()
{
  return MEMORY[0x1E0C9A7B8]();
}

uint64_t _CFXNotificationGetSuspended()
{
  return MEMORY[0x1E0C9A7C0]();
}

uint64_t _CFXNotificationGetTaskCenter()
{
  return MEMORY[0x1E0C9A7C8]();
}

uint64_t _CFXNotificationPost()
{
  return MEMORY[0x1E0C9A7D0]();
}

uint64_t _CFXNotificationRegisterObserver()
{
  return MEMORY[0x1E0C9A7D8]();
}

uint64_t _CFXNotificationRemoveObservers()
{
  return MEMORY[0x1E0C9A7E0]();
}

uint64_t _CFXNotificationSetSuspended()
{
  return MEMORY[0x1E0C9A7E8]();
}

uint64_t _CFXPreferencesCopyDictionaryForNamedVolatileSource()
{
  return MEMORY[0x1E0C9A820]();
}

uint64_t _CFXPreferencesCopyDictionaryForSourceWithBundleID()
{
  return MEMORY[0x1E0C9A828]();
}

uint64_t _CFXPreferencesCopyVolatileSourceNames()
{
  return MEMORY[0x1E0C9A830]();
}

uint64_t _CFXPreferencesRegisterDefaultValues()
{
  return MEMORY[0x1E0C9A838]();
}

uint64_t _CFXPreferencesRemoveNamedVolatileSource()
{
  return MEMORY[0x1E0C9A840]();
}

uint64_t _CFXPreferencesReplaceValuesInNamedVolatileSource()
{
  return MEMORY[0x1E0C9A848]();
}

uint64_t _CFXPreferencesReplaceValuesInSourceWithBundleIDWithContainer()
{
  return MEMORY[0x1E0C9A850]();
}

int *_NSGetArgc(void)
{
  return (int *)MEMORY[0x1E0C809C0]();
}

char ***_NSGetArgv(void)
{
  return (char ***)MEMORY[0x1E0C809C8]();
}

char ***_NSGetEnviron(void)
{
  return (char ***)MEMORY[0x1E0C809D0]();
}

uint64_t _NSIsNSArray()
{
  return MEMORY[0x1E0C9A860]();
}

uint64_t _NSIsNSAttributedString()
{
  return MEMORY[0x1E0C9A868]();
}

uint64_t _NSIsNSCFConstantString()
{
  return MEMORY[0x1E0C9A870]();
}

uint64_t _NSIsNSData()
{
  return MEMORY[0x1E0C9A878]();
}

uint64_t _NSIsNSDate()
{
  return MEMORY[0x1E0C9A880]();
}

uint64_t _NSIsNSDictionary()
{
  return MEMORY[0x1E0C9A888]();
}

uint64_t _NSIsNSNumber()
{
  return MEMORY[0x1E0C9A890]();
}

uint64_t _NSIsNSObject()
{
  return MEMORY[0x1E0C9A898]();
}

uint64_t _NSIsNSOrderedSet()
{
  return MEMORY[0x1E0C9A8A0]();
}

uint64_t _NSIsNSSet()
{
  return MEMORY[0x1E0C9A8A8]();
}

uint64_t _NSIsNSString()
{
  return MEMORY[0x1E0C9A8B0]();
}

uint64_t _NSIsNSURL()
{
  return MEMORY[0x1E0C9A8B8]();
}

uint64_t _NSIsNSValue()
{
  return MEMORY[0x1E0C9A8C0]();
}

uint64_t _NSMessageBuilder()
{
  return MEMORY[0x1E0C9A8C8]();
}

uint64_t _NSObjectLoadWeak()
{
  return MEMORY[0x1E0C9A8D0]();
}

uint64_t _NSObjectLoadWeakRetained()
{
  return MEMORY[0x1E0C9A8D8]();
}

uint64_t _NSObjectStoreWeak()
{
  return MEMORY[0x1E0C9A8E0]();
}

uint64_t _NSTaggedPointerStringGetBytes()
{
  return MEMORY[0x1E0C9A8E8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t __CFAllocatorRespectsHintZeroWhenAllocating()
{
  return MEMORY[0x1E0C9A8F8]();
}

uint64_t __CFAttributedStringMtbl()
{
  return MEMORY[0x1E0C9A900]();
}

uint64_t __CFBinaryPlistCreateObject()
{
  return MEMORY[0x1E0C9A908]();
}

uint64_t __CFBinaryPlistGetOffsetForValueFromArray2()
{
  return MEMORY[0x1E0C9A910]();
}

uint64_t __CFBinaryPlistGetOffsetForValueFromDictionary3()
{
  return MEMORY[0x1E0C9A918]();
}

uint64_t __CFBinaryPlistGetTopLevelInfo()
{
  return MEMORY[0x1E0C9A920]();
}

uint64_t __CFBinaryPlistParseASCIIString()
{
  return MEMORY[0x1E0C9A928]();
}

uint64_t __CFBinaryPlistParseUnicode16String()
{
  return MEMORY[0x1E0C9A930]();
}

uint64_t __CFBinaryPlistWriteToStreamWithOptions()
{
  return MEMORY[0x1E0C9A938]();
}

uint64_t __CFGetNextSearchPathEnumeration()
{
  return MEMORY[0x1E0C9A960]();
}

uint64_t __CFInitialize()
{
  return MEMORY[0x1E0C9A970]();
}

uint64_t __CFRecordAllocationEvent()
{
  return MEMORY[0x1E0C9A988]();
}

uint64_t __CFSafelyReallocateTyped()
{
  return MEMORY[0x1E0C9A990]();
}

uint64_t __CFSafelyReallocateWithAllocatorTyped()
{
  return MEMORY[0x1E0C9A998]();
}

uint64_t __CFSetLastAllocationEventName()
{
  return MEMORY[0x1E0C9A9A0]();
}

uint64_t __CFStartSearchPathEnumeration()
{
  return MEMORY[0x1E0C9A9B8]();
}

uint64_t __CFStrConvertBytesToUnicode()
{
  return MEMORY[0x1E0C9A9D0]();
}

uint64_t __CFStringComputeEightBitStringEncoding()
{
  return MEMORY[0x1E0C9A9D8]();
}

uint64_t __CFStringDecodeByteStream3()
{
  return MEMORY[0x1E0C9A9E0]();
}

uint64_t __CFStringEncodeByteStream()
{
  return MEMORY[0x1E0C9A9E8]();
}

uint64_t __CFStringIsCF()
{
  return MEMORY[0x1E0C9A9F0]();
}

uint64_t __CFURLReservedPtr()
{
  return MEMORY[0x1E0C9AA30]();
}

uint64_t __CFURLSetReservedPtr()
{
  return MEMORY[0x1E0C9AA40]();
}

uint64_t __CFXPreferencesCopyCurrentApplicationStateWithDeadlockAvoidance()
{
  return MEMORY[0x1E0C9AA50]();
}

uint64_t __NSMakeSpecialForwardingCaptureBlock()
{
  return MEMORY[0x1E0C9AA78]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

int __fpclassifyd(double a1)
{
  return MEMORY[0x1E0C80B00](a1);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

uint64_t __memmove_chk()
{
  return MEMORY[0x1E0C80B70]();
}

uint64_t __pthread_chdir()
{
  return MEMORY[0x1E0C80BB0]();
}

uint64_t __pthread_fchdir()
{
  return MEMORY[0x1E0C80BB8]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1E0C80C40]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

uint64_t __udivti3()
{
  return MEMORY[0x1E0C80C80]();
}

uint64_t _amkrtemp()
{
  return MEMORY[0x1E0C80CB8]();
}

uint64_t _cfmp_record_nsmachport_deallocation()
{
  return MEMORY[0x1E0C9AAB8]();
}

uint64_t _cfmp_record_nsmachport_is_interested()
{
  return MEMORY[0x1E0C9AAC0]();
}

uint64_t _class_getIvarMemoryManagement()
{
  return MEMORY[0x1E0DE7930]();
}

uint64_t _class_isSwift()
{
  return MEMORY[0x1E0DE7938]();
}

uint64_t _dirhelper_relative()
{
  return MEMORY[0x1E0C80CD0]();
}

uint32_t _dyld_image_count(void)
{
  return MEMORY[0x1E0C80EB8]();
}

uint64_t _dyld_register_for_bulk_image_loads()
{
  return MEMORY[0x1E0C80F50]();
}

uint64_t _mkpath_np()
{
  return MEMORY[0x1E0C80FB8]();
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x1E0DE7960]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x1E0DE7970]();
}

uint64_t _objc_getFreedObjectClass()
{
  return MEMORY[0x1E0DE79A8]();
}

uint64_t _objc_registerTaggedPointerClass()
{
  return MEMORY[0x1E0DE79C8]();
}

uint64_t _objc_rootAlloc()
{
  return MEMORY[0x1E0DE79D0]();
}

uint64_t _objc_rootAllocWithZone()
{
  return MEMORY[0x1E0DE79D8]();
}

uint64_t _objc_rootDealloc()
{
  return MEMORY[0x1E0DE79E8]();
}

uint64_t _objc_rootFinalize()
{
  return MEMORY[0x1E0DE79F0]();
}

uint64_t _objc_rootHash()
{
  return MEMORY[0x1E0DE79F8]();
}

uint64_t _objc_rootIsDeallocating()
{
  return MEMORY[0x1E0DE7A00]();
}

uint64_t _objc_rootRelease()
{
  return MEMORY[0x1E0DE7A08]();
}

uint64_t _objc_rootReleaseWasZero()
{
  return MEMORY[0x1E0DE7A10]();
}

uint64_t _objc_rootRetain()
{
  return MEMORY[0x1E0DE7A18]();
}

uint64_t _objc_rootRetainCount()
{
  return MEMORY[0x1E0DE7A20]();
}

uint64_t _objc_rootTryRetain()
{
  return MEMORY[0x1E0DE7A28]();
}

uint64_t _objc_rootZone()
{
  return MEMORY[0x1E0DE7A30]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_log_set_nscf_formatter()
{
  return MEMORY[0x1E0C81070]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _protocol_getMethodTypeEncoding()
{
  return MEMORY[0x1E0DE7A40]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x1E0DEE9F8]();
}

uint64_t _swift_isObjCTypeNameSerializable()
{
  return MEMORY[0x1E0DEEA00]();
}

uint64_t _swift_reportToDebugger()
{
  return MEMORY[0x1E0DEEA18]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_getDefaultErrorCode()
{
  return MEMORY[0x1E0DEEA30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1E0C813C8](*(_QWORD *)&a1, a2, a3);
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

uint64_t archive_entry_free()
{
  return MEMORY[0x1E0DE3DC8]();
}

uint64_t archive_entry_new()
{
  return MEMORY[0x1E0DE3DD0]();
}

uint64_t archive_entry_set_pathname()
{
  return MEMORY[0x1E0DE3E18]();
}

uint64_t archive_errno()
{
  return MEMORY[0x1E0DE3E58]();
}

uint64_t archive_read_disk_entry_from_file()
{
  return MEMORY[0x1E0DE3EB0]();
}

uint64_t archive_read_disk_new()
{
  return MEMORY[0x1E0DE3EB8]();
}

uint64_t archive_read_disk_set_standard_lookup()
{
  return MEMORY[0x1E0DE3ED0]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1E0DE3EF8]();
}

uint64_t archive_write_data()
{
  return MEMORY[0x1E0DE3FC8]();
}

uint64_t archive_write_free()
{
  return MEMORY[0x1E0DE4000]();
}

uint64_t archive_write_header()
{
  return MEMORY[0x1E0DE4008]();
}

uint64_t archive_write_new()
{
  return MEMORY[0x1E0DE4010]();
}

uint64_t archive_write_open_filename()
{
  return MEMORY[0x1E0DE4028]();
}

uint64_t archive_write_set_format_zip()
{
  return MEMORY[0x1E0DE4068]();
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x1E0C816C8](a1, *(_QWORD *)&a2);
}

kern_return_t bootstrap_check_in(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1E0C816F8](*(_QWORD *)&bp, service_name, sp);
}

uint64_t bootstrap_look_up2()
{
  return MEMORY[0x1E0C81710]();
}

uint64_t bootstrap_register2()
{
  return MEMORY[0x1E0C81728]();
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1E0C81740](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1E0C81828](__count, __size);
}

int chdir(const char *a1)
{
  return MEMORY[0x1E0C82628](a1);
}

int chflags(const char *a1, __uint32_t a2)
{
  return MEMORY[0x1E0C82630](a1, *(_QWORD *)&a2);
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C82638](a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1E0C82640](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1E0DE7A50](cls, name, imp, types);
}

uint64_t class_addMethodsBulk()
{
  return MEMORY[0x1E0DE7A58]();
}

BOOL class_conformsToProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x1E0DE7A68](cls, protocol);
}

Protocol **__cdecl class_copyProtocolList(Class cls, unsigned int *outCount)
{
  return (Protocol **)MEMORY[0x1E0DE7A88](cls, outCount);
}

id class_createInstance(Class cls, size_t extraBytes)
{
  return (id)MEMORY[0x1E0DE7A90](cls, extraBytes);
}

Method class_getClassMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1E0DE7A98](cls, name);
}

const char *__cdecl class_getImageName(Class cls)
{
  return (const char *)MEMORY[0x1E0DE7AA0](cls);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1E0DE7AA8](cls, name);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x1E0DE7AB0](cls);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return (Ivar)MEMORY[0x1E0DE7AB8](cls, name);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1E0DE7AC0](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1E0DE7AC8](cls);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1E0DE7AD8](cls);
}

int class_getVersion(Class cls)
{
  return MEMORY[0x1E0DE7AE0](cls);
}

BOOL class_isMetaClass(Class cls)
{
  return MEMORY[0x1E0DE7AE8](cls);
}

BOOL class_respondsToSelector(Class cls, SEL sel)
{
  return MEMORY[0x1E0DE7AF8](cls, sel);
}

Class class_setSuperclass(Class cls, Class newSuper)
{
  return (Class)MEMORY[0x1E0DE7B00](cls, newSuper);
}

void class_setVersion(Class cls, int version)
{
  MEMORY[0x1E0DE7B08](cls, *(_QWORD *)&version);
}

void clearerr(FILE *a1)
{
  MEMORY[0x1E0C82648](a1);
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1E0C82668](*(_QWORD *)&__clock_id, __tp);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1E0C82698](a1);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x1E0DE5290](stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE52A0](stream, *(_QWORD *)&operation, *(_QWORD *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x1E0DE52B0](stream, *(_QWORD *)&flags);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x1E0C826D0](*(_QWORD *)&a1, a2, a3);
}

uint64_t container_create_or_lookup_app_group_path_by_app_group_identifier()
{
  return MEMORY[0x1E0C827F8]();
}

uint64_t container_create_or_lookup_path_for_current_user()
{
  return MEMORY[0x1E0C82818]();
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1E0C82B18](from, to, state, *(_QWORD *)&flags);
}

int dirfd(DIR *dirp)
{
  return MEMORY[0x1E0C82BA0](dirp);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  MEMORY[0x1E0C82BD8](iterations, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BF8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C28](queue, block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return MEMORY[0x1E0C82CA0](data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CB0](buffer, size, queue, destructor);
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CC0](data1, data2);
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CD8](data, offset, length);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1E0C82CE8](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags)
{
  MEMORY[0x1E0C82D58](channel, flags);
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  return (dispatch_io_t)MEMORY[0x1E0C82D60](type, *(_QWORD *)&fd, queue, cleanup_handler);
}

void dispatch_io_read(dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
  MEMORY[0x1E0C82D80](channel, offset, length, queue, io_handler);
}

void dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water)
{
  MEMORY[0x1E0C82D98](channel, low_water);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

uint64_t dispatch_queue_attr_make_with_overcommit()
{
  return MEMORY[0x1E0C82E30]();
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1E0C82E58](queue);
}

uint64_t dispatch_queue_set_label_nocopy()
{
  return MEMORY[0x1E0C82E78]();
}

void dispatch_read(dispatch_fd_t fd, size_t length, dispatch_queue_t queue, void *handler)
{
  MEMORY[0x1E0C82E90](*(_QWORD *)&fd, length, queue, handler);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F28](source);
}

uintptr_t dispatch_source_get_mask(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F38](source);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_registration_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F70](source, handler);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1E0C83028](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x1E0C83078](*(_QWORD *)&a1);
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1E0C830B8]();
}

uint64_t dyld_image_path_containing_address()
{
  return MEMORY[0x1E0C83100]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

void endpwent(void)
{
  MEMORY[0x1E0C831C8]();
}

uint64_t environ_lock_np()
{
  return MEMORY[0x1E0C831D8]();
}

uint64_t environ_unlock_np()
{
  return MEMORY[0x1E0C831E0]();
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1E0C832D0](*(_QWORD *)&a1, a2);
}

int fchown(int a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1E0C832E0](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1E0C83348](a1);
}

int fgetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1E0C83380](*(_QWORD *)&a1, a2, a3, a4, *(_QWORD *)&a5);
}

ssize_t fgetxattr(int fd, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C833A8](*(_QWORD *)&fd, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1E0C833B0](a1);
}

int flsl(uint64_t a1)
{
  return MEMORY[0x1E0C83420](a1);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

const char *__cdecl fmtcheck(const char *a1, const char *a2)
{
  return (const char *)MEMORY[0x1E0C83450](a1, a2);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void freeaddrinfo(addrinfo *a1)
{
  MEMORY[0x1E0C834C0](a1);
}

void freehostent(hostent *a1)
{
  MEMORY[0x1E0C834C8](a1);
}

int fsetxattr(int fd, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C83548](*(_QWORD *)&fd, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1E0C83570](*(_QWORD *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x1E0C83578](*(_QWORD *)&a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1E0C83590](*(_QWORD *)&a1, a2);
}

int fts_close(FTS *a1)
{
  return MEMORY[0x1E0C835A0](a1);
}

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  return (FTS *)MEMORY[0x1E0C835A8](a1, *(_QWORD *)&a2, a3);
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  return (FTSENT *)MEMORY[0x1E0C835B0](a1);
}

int fts_set(FTS *a1, FTSENT *a2, int a3)
{
  return MEMORY[0x1E0C835B8](a1, a2, *(_QWORD *)&a3);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1E0C83610](a1, a2, a3, a4, *(_QWORD *)&a5);
}

int getc(FILE *a1)
{
  return MEMORY[0x1E0C83638](a1);
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x1E0C83648](a1, a2);
}

gid_t getegid(void)
{
  return MEMORY[0x1E0C83658]();
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1E0C83668]();
}

group *__cdecl getgrgid(gid_t a1)
{
  return (group *)MEMORY[0x1E0C83680](*(_QWORD *)&a1);
}

int getiopolicy_np(int a1, int a2)
{
  return MEMORY[0x1E0C836D0](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

hostent *__cdecl getipnodebyname(const char *a1, int a2, int a3, int *a4)
{
  return (hostent *)MEMORY[0x1E0C836D8](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

passwd *getpwent(void)
{
  return (passwd *)MEMORY[0x1E0C83788]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x1E0C83790](a1);
}

passwd *__cdecl getpwuid(uid_t a1)
{
  return (passwd *)MEMORY[0x1E0C837A0](*(_QWORD *)&a1);
}

int getrlimit(int a1, rlimit *a2)
{
  return MEMORY[0x1E0C837B8](*(_QWORD *)&a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x1E0C83828]();
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C83840](path, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1E0C83970](*(_QWORD *)&a1, a2, a3);
}

int isatty(int a1)
{
  return MEMORY[0x1E0C839A8](*(_QWORD *)&a1);
}

int issetugid(void)
{
  return MEMORY[0x1E0C839B8]();
}

int isspace(int _c)
{
  return MEMORY[0x1E0C839C0](*(_QWORD *)&_c);
}

int isxdigit(int _c)
{
  return MEMORY[0x1E0C839C8](*(_QWORD *)&_c);
}

ptrdiff_t ivar_getOffset(Ivar v)
{
  return MEMORY[0x1E0DE7B30](v);
}

const char *__cdecl ivar_getTypeEncoding(Ivar v)
{
  return (const char *)MEMORY[0x1E0DE7B38](v);
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x1E0C83A48](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

uint64_t langid_consume_string()
{
  return MEMORY[0x1E0DE6AE8]();
}

uint64_t langid_create()
{
  return MEMORY[0x1E0DE6AF0]();
}

uint64_t langid_dispose()
{
  return MEMORY[0x1E0DE6AF8]();
}

uint64_t langid_languagecode()
{
  return MEMORY[0x1E0DE6B08]();
}

uint64_t langid_numlanguages()
{
  return MEMORY[0x1E0DE6B10]();
}

int link(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C83B70](a1, a2);
}

ssize_t listxattr(const char *path, char *namebuff, size_t size, int options)
{
  return MEMORY[0x1E0C83B88](path, namebuff, size, *(_QWORD *)&options);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1E0C83C38](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C83C40](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1E0C83C80](*(_QWORD *)&error_value);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1E0C83CB0](msg, *(_QWORD *)&option, *(_QWORD *)&send_size, *(_QWORD *)&rcv_size, *(_QWORD *)&rcv_name, *(_QWORD *)&timeout, *(_QWORD *)&notify);
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1E0C83CE0](*(_QWORD *)&task, *(_QWORD *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1E0C83D48](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&poly, *(_QWORD *)&polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1E0C83D58](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&right, *(_QWORD *)&delta);
}

kern_return_t mach_port_type(ipc_space_t task, mach_port_name_t name, mach_port_type_t *ptype)
{
  return MEMORY[0x1E0C83D88](*(_QWORD *)&task, *(_QWORD *)&name, ptype);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

kern_return_t mach_vm_allocate(vm_map_t target, mach_vm_address_t *address, mach_vm_size_t size, int flags)
{
  return MEMORY[0x1E0C83DC0](*(_QWORD *)&target, address, size, *(_QWORD *)&flags);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x1E0C83DD0](*(_QWORD *)&target, address, size);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E78](start_size, *(_QWORD *)&flags);
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E88]();
}

const char *__cdecl malloc_get_zone_name(malloc_zone_t *zone)
{
  return (const char *)MEMORY[0x1E0C83EA8](zone);
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1E0C83EB0](size);
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
  MEMORY[0x1E0C83ED8](zone, name);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F20](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F28](zone, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F40](zone, ptr, size, type_id);
}

uint64_t malloc_zone_claimed_address()
{
  return MEMORY[0x1E0C83F68]();
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
  MEMORY[0x1E0C83F70](zone, ptr);
}

malloc_zone_t *__cdecl malloc_zone_from_ptr(const void *ptr)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83F78](ptr);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1E0C840D0](__s, __smax, *(_QWORD *)&__c, __n);
}

int mergesort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return MEMORY[0x1E0C840D8](__base, __nel, __width, __compar);
}

char *__cdecl method_copyArgumentType(Method m, unsigned int index)
{
  return (char *)MEMORY[0x1E0DE7B40](m, *(_QWORD *)&index);
}

char *__cdecl method_copyReturnType(Method m)
{
  return (char *)MEMORY[0x1E0DE7B48](m);
}

void method_getArgumentType(Method m, unsigned int index, char *dst, size_t dst_len)
{
  MEMORY[0x1E0DE7B58](m, *(_QWORD *)&index, dst, dst_len);
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1E0DE7B68](m);
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x1E0DE7B70](m);
}

unsigned int method_getNumberOfArguments(Method m)
{
  return MEMORY[0x1E0DE7B78](m);
}

void method_getReturnType(Method m, char *dst, size_t dst_len)
{
  MEMORY[0x1E0DE7B80](m, dst, dst_len);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1E0DE7B88](m);
}

void method_invoke(void)
{
  MEMORY[0x1E0DE7B90]();
}

IMP method_setImplementation(Method m, IMP imp)
{
  return (IMP)MEMORY[0x1E0DE7B98](m, imp);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x1E0C84170](a1);
}

int mkstemp(char *a1)
{
  return MEMORY[0x1E0C841A0](a1);
}

char *__cdecl mktemp(char *a1)
{
  return (char *)MEMORY[0x1E0C841C0](a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  long double result;

  MEMORY[0x1E0C841E0](__y, __x);
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x1E0C84238](__rqtp, __rmtp);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x1E0DE7BC0](superclass, name, extraBytes);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

id objc_constructInstance(Class cls, void *bytes)
{
  return (id)MEMORY[0x1E0DE7C00](cls, bytes);
}

uint64_t objc_copyClassNamesForImageHeader()
{
  return MEMORY[0x1E0DE7C18]();
}

const char **__cdecl objc_copyImageNames(unsigned int *outCount)
{
  return (const char **)MEMORY[0x1E0DE7C28](outCount);
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void *__cdecl objc_destructInstance(id obj)
{
  return (void *)MEMORY[0x1E0DE7C68](obj);
}

Class objc_duplicateClass(Class original, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x1E0DE7C78](original, name, extraBytes);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

Protocol *__cdecl objc_getProtocol(const char *name)
{
  return (Protocol *)MEMORY[0x1E0DE7CD8](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_initWeakOrNil(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE8](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1E0DE7D00](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

Class objc_lookUpClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7D10](name);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D28](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_registerClassPair(Class cls)
{
  MEMORY[0x1E0DE7D68](cls);
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

void objc_removeAssociatedObjects(id object)
{
  MEMORY[0x1E0DE7E48](object);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id object_copy(id a1, size_t a2)
{
  return (id)MEMORY[0x1E0DE7FE8](a1, a2);
}

id object_dispose(id a1)
{
  return (id)MEMORY[0x1E0DE7FF0](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1E0DE7FF8](a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1E0DE8000](a1);
}

void *__cdecl object_getIndexedIvars(id a1)
{
  return (void *)MEMORY[0x1E0DE8008](a1);
}

id object_getIvar(id a1, Ivar a2)
{
  return (id)MEMORY[0x1E0DE8018](a1, a2);
}

uint64_t object_getMethodImplementation()
{
  return MEMORY[0x1E0DE8020]();
}

BOOL object_isClass(id obj)
{
  return MEMORY[0x1E0DE8028](obj);
}

Class object_setClass(id a1, Class a2)
{
  return (Class)MEMORY[0x1E0DE8030](a1, a2);
}

void object_setIvar(id obj, Ivar ivar, id value)
{
  MEMORY[0x1E0DE8048](obj, ivar, value);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1E0C84488](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1E0C844C0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84988](lock);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

uint64_t os_unfair_lock_lock_with_options()
{
  return MEMORY[0x1E0C849A0]();
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1E0C849B8]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1E0C849D0]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

int pipe(int a1[2])
{
  return MEMORY[0x1E0C84B10](a1);
}

int posix_spawn(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return MEMORY[0x1E0C84B38](a1, a2, a3, a4, __argv, __envp);
}

int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *a1, int a2, int a3)
{
  return MEMORY[0x1E0C84B48](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1E0C84B60](a1);
}

int posix_spawn_file_actions_init(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1E0C84B68](a1);
}

int posix_spawnattr_destroy(posix_spawnattr_t *a1)
{
  return MEMORY[0x1E0C84B70](a1);
}

int posix_spawnattr_init(posix_spawnattr_t *a1)
{
  return MEMORY[0x1E0C84B78](a1);
}

int posix_spawnattr_set_qos_class_np(posix_spawnattr_t *__attr, qos_class_t __qos_class)
{
  return MEMORY[0x1E0C84B80](__attr, *(_QWORD *)&__qos_class);
}

int posix_spawnattr_setbinpref_np(posix_spawnattr_t *a1, size_t a2, cpu_type_t *a3, size_t *a4)
{
  return MEMORY[0x1E0C84B88](a1, a2, a3, a4);
}

int posix_spawnattr_setflags(posix_spawnattr_t *a1, __int16 a2)
{
  return MEMORY[0x1E0C84B90](a1, a2);
}

uint64_t posix_spawnattr_setmacpolicyinfo_np()
{
  return MEMORY[0x1E0C84B98]();
}

int posix_spawnattr_setsigdefault(posix_spawnattr_t *a1, const sigset_t *a2)
{
  return MEMORY[0x1E0C84BA0](a1, a2);
}

int posix_spawnattr_setsigmask(posix_spawnattr_t *a1, const sigset_t *a2)
{
  return MEMORY[0x1E0C84BA8](a1, a2);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C20](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1E0C84C40](*(_QWORD *)&pid, *(_QWORD *)&flavor, arg, buffer, *(_QWORD *)&buffersize);
}

BOOL protocol_conformsToProtocol(Protocol *proto, Protocol *other)
{
  return MEMORY[0x1E0DE8080](proto, other);
}

objc_method_description *__cdecl protocol_copyMethodDescriptionList(Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int *outCount)
{
  return (objc_method_description *)MEMORY[0x1E0DE8088](p, isRequiredMethod, isInstanceMethod, outCount);
}

Protocol **__cdecl protocol_copyProtocolList(Protocol *proto, unsigned int *outCount)
{
  return (Protocol **)MEMORY[0x1E0DE80A0](proto, outCount);
}

objc_method_description protocol_getMethodDescription(Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod)
{
  const char *v4;
  char *v5;
  objc_method_description result;

  v4 = (const char *)MEMORY[0x1E0DE80A8](p, aSel, isRequiredMethod, isInstanceMethod);
  result.types = v5;
  result.name = v4;
  return result;
}

const char *__cdecl protocol_getName(Protocol *p)
{
  return (const char *)MEMORY[0x1E0DE80B0](p);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CB0](a1);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return MEMORY[0x1E0C84CB8](a1, a2);
}

int pthread_attr_getstacksize(const pthread_attr_t *a1, size_t *a2)
{
  return MEMORY[0x1E0C84CC0](a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_attr_set_qos_class_np(pthread_attr_t *__attr, qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1E0C84CD0](__attr, *(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CD8](a1, *(_QWORD *)&a2);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x1E0C84CE8](a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CF0](a1, *(_QWORD *)&a2);
}

int pthread_attr_setscope(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CF8](a1, *(_QWORD *)&a2);
}

int pthread_attr_setstacksize(pthread_attr_t *a1, size_t a2)
{
  return MEMORY[0x1E0C84D00](a1, a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D18](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1E0C84D40](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x1E0C84D80](a1, a2);
}

void pthread_exit(void *a1)
{
  MEMORY[0x1E0C84D88](a1);
}

int pthread_get_qos_class_np(pthread_t __pthread, qos_class_t *__qos_class, int *__relative_priority)
{
  return MEMORY[0x1E0C84D98](__pthread, __qos_class, __relative_priority);
}

int pthread_getname_np(pthread_t a1, char *a2, size_t a3)
{
  return MEMORY[0x1E0C84DB0](a1, a2, a3);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_getugid_np(uid_t *a1, gid_t *a2)
{
  return MEMORY[0x1E0C84DC8](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x1E0C84E00](a1);
}

int pthread_main_np(void)
{
  return MEMORY[0x1E0C84E08]();
}

uint64_t pthread_main_thread_np()
{
  return MEMORY[0x1E0C84E10]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E30](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

int pthread_override_qos_class_end_np(pthread_override_t __override)
{
  return MEMORY[0x1E0C84E70](__override);
}

pthread_override_t pthread_override_qos_class_start_np(pthread_t __pthread, qos_class_t __qos_class, int __relative_priority)
{
  return (pthread_override_t)MEMORY[0x1E0C84E78](__pthread, *(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84E90](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1E0C84E98](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EA0](a1);
}

int pthread_rwlock_tryrdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EA8](a1);
}

int pthread_rwlock_trywrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EB0](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EB8](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EC0](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1E0C84EF0](*(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

void pthread_yield_np(void)
{
  MEMORY[0x1E0C84F40]();
}

int putc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C84F48](*(_QWORD *)&a1, a2);
}

qos_class_t qos_class_main(void)
{
  return MEMORY[0x1E0C84F78]();
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

int quotactl(const char *a1, int a2, int a3, caddr_t a4)
{
  return MEMORY[0x1E0C84FA0](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4);
}

uint64_t random(void)
{
  return MEMORY[0x1E0C84FC0]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1E0C85008](a1);
}

int readdir_r(DIR *a1, dirent *a2, dirent **a3)
{
  return MEMORY[0x1E0C85010](a1, a2, a3);
}

ssize_t readlink(const char *a1, char *a2, size_t a3)
{
  return MEMORY[0x1E0C85018](a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1E0C85030](__ptr, __size);
}

long double remainder(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C850A8](__x, __y);
  return result;
}

int removefile(const char *path, removefile_state_t state, removefile_flags_t flags)
{
  return MEMORY[0x1E0C850C0](path, state, *(_QWORD *)&flags);
}

removefile_state_t removefile_state_alloc(void)
{
  return (removefile_state_t)MEMORY[0x1E0C850C8]();
}

int removefile_state_free(removefile_state_t a1)
{
  return MEMORY[0x1E0C850D0](a1);
}

int removefile_state_get(removefile_state_t state, uint32_t key, void *dst)
{
  return MEMORY[0x1E0C850D8](state, *(_QWORD *)&key, dst);
}

int removefile_state_set(removefile_state_t state, uint32_t key, const void *value)
{
  return MEMORY[0x1E0C850E0](state, *(_QWORD *)&key, value);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

int rmdir(const char *a1)
{
  return MEMORY[0x1E0C85138](a1);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1E0C85178]();
}

uint64_t sandbox_check_by_audit_token()
{
  return MEMORY[0x1E0C85180]();
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1E0C851A0]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1E0C851A8]();
}

uint64_t sandbox_extension_issue_file_to_process()
{
  return MEMORY[0x1E0C851B0]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x1E0C851F8]();
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1E0DE80C8](sel);
}

SEL sel_getUid(const char *str)
{
  return (SEL)MEMORY[0x1E0DE80D0](str);
}

uint64_t sel_lookUpByName()
{
  return MEMORY[0x1E0DE80E0]();
}

SEL sel_registerName(const char *str)
{
  return (SEL)MEMORY[0x1E0DE80E8](str);
}

int setiopolicy_np(int a1, int a2, int a3)
{
  return MEMORY[0x1E0C85340](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

void setpwent(void)
{
  MEMORY[0x1E0C85368]();
}

int setrlimit(int a1, const rlimit *a2)
{
  return MEMORY[0x1E0C85380](*(_QWORD *)&a1, a2);
}

int setvbuf(FILE *a1, char *a2, int a3, size_t a4)
{
  return MEMORY[0x1E0C85398](a1, a2, *(_QWORD *)&a3, a4);
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C853A0](path, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return (void (__cdecl *)(int))MEMORY[0x1E0C853F0](*(_QWORD *)&a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x1E0C85448](a1, a2, a3, a4);
}

void srandomdev(void)
{
  MEMORY[0x1E0C85490]();
}

int sscanf_l(const char *a1, locale_t a2, const char *a3, ...)
{
  return MEMORY[0x1E0C854A0](a1, a2, a3);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1E0C854E0](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strcspn(const char *__s, const char *__charset)
{
  return MEMORY[0x1E0C85538](__s, __charset);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85568](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncasecmp_l(const char *a1, const char *a2, size_t a3, locale_t a4)
{
  return MEMORY[0x1E0C85598](a1, a2, a3, a4);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

size_t strspn(const char *__s, const char *__charset)
{
  return MEMORY[0x1E0C85608](__s, __charset);
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  double result;

  MEMORY[0x1E0C85620](a1, a2, a3);
  return result;
}

float strtof_l(const char *a1, char **a2, locale_t a3)
{
  float result;

  MEMORY[0x1E0C85630](a1, a2, a3);
  return result;
}

uint64_t strtoll_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1E0C85680](a1, a2, *(_QWORD *)&a3, a4);
}

unint64_t strtoul_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1E0C856A0](a1, a2, *(_QWORD *)&a3, a4);
}

unint64_t strtoull_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1E0C856B0](a1, a2, *(_QWORD *)&a3, a4);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1E0DEEB40]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1E0DF0F98]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x1E0DF0FB0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1E0DF0FB8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1E0DF0FC0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x1E0DEEB90]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1E0DEEB98]();
}

uint64_t swift_dynamicCastMetatypeUnconditional()
{
  return MEMORY[0x1E0DEEBA0]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1E0DEEBB0]();
}

uint64_t swift_dynamicCastTypeToObjCProtocolConditional()
{
  return MEMORY[0x1E0DEEBC8]();
}

uint64_t swift_dynamicCastUnknownClass()
{
  return MEMORY[0x1E0DEEBD0]();
}

uint64_t swift_dynamicCastUnknownClassUnconditional()
{
  return MEMORY[0x1E0DEEBD8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getAtPartialKeyPath()
{
  return MEMORY[0x1E0DEEC20]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1E0DEEC38]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getExtendedExistentialTypeMetadata()
{
  return MEMORY[0x1E0DEEC68]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1E0DEECC0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassFromObject()
{
  return MEMORY[0x1E0DEECD0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1E0DEED08]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x1E0DEED18]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x1E0DEED28]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1E0DEED70]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x1E0DEED80]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1E0DEED90]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return MEMORY[0x1E0DEEDB8]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x1E0DEEDC0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x1E0DEEE68]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1E0DEEF20]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1E0DEEF28]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1E0DEEF30]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1E0DEEF50]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1E0DEEF58]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1E0DEEF80]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

int symlink(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85718](a1, a2);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

sysdir_search_path_enumeration_state sysdir_get_next_search_path_enumeration(sysdir_search_path_enumeration_state state, char *path)
{
  return MEMORY[0x1E0C857B8](*(_QWORD *)&state, path);
}

uint64_t sysdir_start_search_path_enumeration_private()
{
  return MEMORY[0x1E0C857C8]();
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

kern_return_t task_get_special_port(task_inspect_t task, int which_port, mach_port_t *special_port)
{
  return MEMORY[0x1E0C85828](*(_QWORD *)&task, *(_QWORD *)&which_port, special_port);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1E0C85838](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t thread_policy_get(thread_inspect_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t *policy_infoCnt, BOOLean_t *get_default)
{
  return MEMORY[0x1E0C85900](*(_QWORD *)&thread, *(_QWORD *)&flavor, policy_info, policy_infoCnt, get_default);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x1E0C85908](*(_QWORD *)&thread, *(_QWORD *)&flavor, policy_info, *(_QWORD *)&policy_infoCnt);
}

uint64_t thread_stack_async_pcs()
{
  return MEMORY[0x1E0C85930]();
}

int32_t u_charDigitValue(UChar32 c)
{
  return MEMORY[0x1E0DE5958](*(_QWORD *)&c);
}

void u_charsToUChars(const char *cs, UChar *us, int32_t length)
{
  MEMORY[0x1E0DE5980](cs, us, *(_QWORD *)&length);
}

const char *__cdecl u_errorName(UErrorCode code)
{
  return (const char *)MEMORY[0x1E0DE5988](*(_QWORD *)&code);
}

int32_t u_getPropertyValueEnum(UProperty property, const char *alias)
{
  return MEMORY[0x1E0DE59D0](*(_QWORD *)&property, alias);
}

UBool u_hasBinaryProperty(UChar32 c, UProperty which)
{
  return MEMORY[0x1E0DE59E0](*(_QWORD *)&c, *(_QWORD *)&which);
}

UBool u_isUWhiteSpace(UChar32 c)
{
  return MEMORY[0x1E0DE5A08](*(_QWORD *)&c);
}

UBool u_isprint(UChar32 c)
{
  return MEMORY[0x1E0DE5A40](*(_QWORD *)&c);
}

int32_t u_strlen(const UChar *s)
{
  return MEMORY[0x1E0DE5AF8](s);
}

uint64_t u_vformatMessage()
{
  return MEMORY[0x1E0DE5B40]();
}

uint64_t uameasfmt_close()
{
  return MEMORY[0x1E0DE5B80]();
}

uint64_t uameasfmt_format()
{
  return MEMORY[0x1E0DE5B88]();
}

uint64_t uameasfmt_formatMultiple()
{
  return MEMORY[0x1E0DE5B90]();
}

uint64_t uameasfmt_getUnitName()
{
  return MEMORY[0x1E0DE5B98]();
}

uint64_t uameasfmt_getUnitsForUsage()
{
  return MEMORY[0x1E0DE5BA0]();
}

uint64_t uameasfmt_open()
{
  return MEMORY[0x1E0DE5BA8]();
}

uint64_t uatmufmt_close()
{
  return MEMORY[0x1E0DE5BB0]();
}

uint64_t uatmufmt_format()
{
  return MEMORY[0x1E0DE5BB8]();
}

uint64_t uatmufmt_getListPattern()
{
  return MEMORY[0x1E0DE5BC0]();
}

uint64_t uatmufmt_getTimePattern()
{
  return MEMORY[0x1E0DE5BC8]();
}

uint64_t uatmufmt_openWithNumberFormat()
{
  return MEMORY[0x1E0DE5BD0]();
}

UBlockCode ublock_getCode(UChar32 c)
{
  return MEMORY[0x1E0DE5C88](*(_QWORD *)&c);
}

uint64_t ucal_add()
{
  return MEMORY[0x1E0DE5D18]();
}

uint64_t ucal_clear()
{
  return MEMORY[0x1E0DE5D20]();
}

uint64_t ucal_clone()
{
  return MEMORY[0x1E0DE5D28]();
}

uint64_t ucal_close()
{
  return MEMORY[0x1E0DE5D30]();
}

uint64_t ucal_get()
{
  return MEMORY[0x1E0DE5D38]();
}

uint64_t ucal_getAttribute()
{
  return MEMORY[0x1E0DE5D40]();
}

uint64_t ucal_getCanonicalTimeZoneID()
{
  return MEMORY[0x1E0DE5D48]();
}

uint64_t ucal_getDayOfWeekType()
{
  return MEMORY[0x1E0DE5D58]();
}

uint64_t ucal_getFieldDifference()
{
  return MEMORY[0x1E0DE5D60]();
}

uint64_t ucal_getGregorianChange()
{
  return MEMORY[0x1E0DE5D68]();
}

uint64_t ucal_getKeywordValuesForLocale()
{
  return MEMORY[0x1E0DE5D78]();
}

uint64_t ucal_getLimit()
{
  return MEMORY[0x1E0DE5D80]();
}

uint64_t ucal_getMillis()
{
  return MEMORY[0x1E0DE5D88]();
}

uint64_t ucal_getNow()
{
  return MEMORY[0x1E0DE5D90]();
}

uint64_t ucal_getTZDataVersion()
{
  return MEMORY[0x1E0DE5D98]();
}

uint64_t ucal_getTimeZoneDisplayName()
{
  return MEMORY[0x1E0DE5DA0]();
}

uint64_t ucal_getTimeZoneOffsetFromLocal()
{
  return MEMORY[0x1E0DE5DA8]();
}

uint64_t ucal_getTimeZoneTransitionDate()
{
  return MEMORY[0x1E0DE5DB0]();
}

uint64_t ucal_getWeekendTransition()
{
  return MEMORY[0x1E0DE5DC0]();
}

uint64_t ucal_isWeekend()
{
  return MEMORY[0x1E0DE5DD0]();
}

uint64_t ucal_open()
{
  return MEMORY[0x1E0DE5DD8]();
}

uint64_t ucal_openTimeZones()
{
  return MEMORY[0x1E0DE5DE8]();
}

uint64_t ucal_roll()
{
  return MEMORY[0x1E0DE5DF0]();
}

uint64_t ucal_set()
{
  return MEMORY[0x1E0DE5DF8]();
}

uint64_t ucal_setAttribute()
{
  return MEMORY[0x1E0DE5E00]();
}

uint64_t ucal_setDateTime()
{
  return MEMORY[0x1E0DE5E10]();
}

uint64_t ucal_setGregorianChange()
{
  return MEMORY[0x1E0DE5E18]();
}

uint64_t ucal_setMillis()
{
  return MEMORY[0x1E0DE5E20]();
}

uint64_t ucasemap_close()
{
  return MEMORY[0x1E0DE5E30]();
}

uint64_t ucasemap_open()
{
  return MEMORY[0x1E0DE5E38]();
}

uint64_t ucasemap_utf8ToTitle()
{
  return MEMORY[0x1E0DE5E48]();
}

uint64_t ucol_getKeywordValues()
{
  return MEMORY[0x1E0DE5FA0]();
}

uint64_t ucol_getKeywordValuesForLocale()
{
  return MEMORY[0x1E0DE5FA8]();
}

uint64_t ucurr_forLocale()
{
  return MEMORY[0x1E0DE60A0]();
}

uint64_t ucurr_getName()
{
  return MEMORY[0x1E0DE60B0]();
}

uint64_t ucurr_getNumericCode()
{
  return MEMORY[0x1E0DE60B8]();
}

uint64_t ucurr_openISOCurrencies()
{
  return MEMORY[0x1E0DE60D8]();
}

uint64_t udat_applyPattern()
{
  return MEMORY[0x1E0DE60E0]();
}

uint64_t udat_close()
{
  return MEMORY[0x1E0DE60F8]();
}

uint64_t udat_countSymbols()
{
  return MEMORY[0x1E0DE6100]();
}

uint64_t udat_format()
{
  return MEMORY[0x1E0DE6108]();
}

uint64_t udat_formatForFields()
{
  return MEMORY[0x1E0DE6110]();
}

uint64_t udat_getCalendar()
{
  return MEMORY[0x1E0DE6120]();
}

uint64_t udat_getSymbols()
{
  return MEMORY[0x1E0DE6130]();
}

uint64_t udat_open()
{
  return MEMORY[0x1E0DE6140]();
}

uint64_t udat_parseCalendar()
{
  return MEMORY[0x1E0DE6148]();
}

uint64_t udat_patternCharToDateFormatField()
{
  return MEMORY[0x1E0DE6150]();
}

uint64_t udat_set2DigitYearStart()
{
  return MEMORY[0x1E0DE6158]();
}

uint64_t udat_setBooleanAttribute()
{
  return MEMORY[0x1E0DE6160]();
}

uint64_t udat_setCalendar()
{
  return MEMORY[0x1E0DE6168]();
}

uint64_t udat_setContext()
{
  return MEMORY[0x1E0DE6170]();
}

uint64_t udat_setLenient()
{
  return MEMORY[0x1E0DE6178]();
}

uint64_t udat_toCalendarDateField()
{
  return MEMORY[0x1E0DE6188]();
}

uint64_t udatpg_clone()
{
  return MEMORY[0x1E0DE61A8]();
}

uint64_t udatpg_close()
{
  return MEMORY[0x1E0DE61B0]();
}

uint64_t udatpg_getBestPatternWithOptions()
{
  return MEMORY[0x1E0DE61C8]();
}

uint64_t udatpg_getDefaultHourCycle()
{
  return MEMORY[0x1E0DE61D0]();
}

uint64_t udatpg_open()
{
  return MEMORY[0x1E0DE61E8]();
}

uint64_t udtitvfmt_close()
{
  return MEMORY[0x1E0DE61F0]();
}

uint64_t udtitvfmt_format()
{
  return MEMORY[0x1E0DE6200]();
}

uint64_t udtitvfmt_open()
{
  return MEMORY[0x1E0DE6218]();
}

uint64_t udtitvfmt_setAttribute()
{
  return MEMORY[0x1E0DE6230]();
}

uint64_t uenum_close()
{
  return MEMORY[0x1E0DE6240]();
}

uint64_t uenum_next()
{
  return MEMORY[0x1E0DE6250]();
}

uint64_t uenum_unext()
{
  return MEMORY[0x1E0DE6258]();
}

uint64_t ufieldpositer_close()
{
  return MEMORY[0x1E0DE6260]();
}

uint64_t ufieldpositer_next()
{
  return MEMORY[0x1E0DE6268]();
}

uint64_t ufieldpositer_open()
{
  return MEMORY[0x1E0DE6270]();
}

uint64_t ufmt_close()
{
  return MEMORY[0x1E0DE6278]();
}

uint64_t ufmt_getDecNumChars()
{
  return MEMORY[0x1E0DE6280]();
}

uint64_t ufmt_open()
{
  return MEMORY[0x1E0DE6288]();
}

int32_t uidna_nameToASCII(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  return MEMORY[0x1E0DE62C0](idna, name, *(_QWORD *)&length, dest, *(_QWORD *)&capacity, pInfo, pErrorCode);
}

int32_t uidna_nameToASCII_UTF8(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  return MEMORY[0x1E0DE62C8](idna, name, *(_QWORD *)&length, dest, *(_QWORD *)&capacity, pInfo, pErrorCode);
}

int32_t uidna_nameToUnicode(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  return MEMORY[0x1E0DE62D0](idna, name, *(_QWORD *)&length, dest, *(_QWORD *)&capacity, pInfo, pErrorCode);
}

int32_t uidna_nameToUnicodeUTF8(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  return MEMORY[0x1E0DE62D8](idna, name, *(_QWORD *)&length, dest, *(_QWORD *)&capacity, pInfo, pErrorCode);
}

UIDNA *__cdecl uidna_openUTS46(uint32_t options, UErrorCode *pErrorCode)
{
  return (UIDNA *)MEMORY[0x1E0DE62E0](*(_QWORD *)&options, pErrorCode);
}

uint64_t ulistfmt_close()
{
  return MEMORY[0x1E0DE6348]();
}

uint64_t ulistfmt_format()
{
  return MEMORY[0x1E0DE6358]();
}

uint64_t ulistfmt_openForType()
{
  return MEMORY[0x1E0DE6370]();
}

uint64_t uloc_addLikelySubtags()
{
  return MEMORY[0x1E0DE6388]();
}

uint64_t uloc_countAvailable()
{
  return MEMORY[0x1E0DE6398]();
}

uint64_t uloc_getAvailable()
{
  return MEMORY[0x1E0DE63A8]();
}

uint64_t uloc_getCountry()
{
  return MEMORY[0x1E0DE63C0]();
}

uint64_t uloc_getDisplayCountry()
{
  return MEMORY[0x1E0DE63D0]();
}

uint64_t uloc_getDisplayKeywordValue()
{
  return MEMORY[0x1E0DE63D8]();
}

uint64_t uloc_getDisplayScript()
{
  return MEMORY[0x1E0DE63F0]();
}

uint64_t uloc_getDisplayVariant()
{
  return MEMORY[0x1E0DE63F8]();
}

uint64_t uloc_getISO3Language()
{
  return MEMORY[0x1E0DE6408]();
}

uint64_t uloc_getKeywordValue()
{
  return MEMORY[0x1E0DE6420]();
}

uint64_t uloc_getLCID()
{
  return MEMORY[0x1E0DE6428]();
}

uint64_t uloc_getLanguage()
{
  return MEMORY[0x1E0DE6430]();
}

uint64_t uloc_getLocaleForLCID()
{
  return MEMORY[0x1E0DE6440]();
}

uint64_t uloc_getScript()
{
  return MEMORY[0x1E0DE6448]();
}

uint64_t uloc_getVariant()
{
  return MEMORY[0x1E0DE6450]();
}

uint64_t uloc_openKeywords()
{
  return MEMORY[0x1E0DE6460]();
}

uint64_t uloc_setKeywordValue()
{
  return MEMORY[0x1E0DE6468]();
}

uint64_t uloc_toLanguageTag()
{
  return MEMORY[0x1E0DE6470]();
}

uint64_t uloc_toLegacyKey()
{
  return MEMORY[0x1E0DE6478]();
}

uint64_t ulocdata_close()
{
  return MEMORY[0x1E0DE6488]();
}

uint64_t ulocdata_getDelimiter()
{
  return MEMORY[0x1E0DE6498]();
}

uint64_t ulocdata_getExemplarSet()
{
  return MEMORY[0x1E0DE64A0]();
}

uint64_t ulocdata_getMeasurementSystem()
{
  return MEMORY[0x1E0DE64A8]();
}

uint64_t ulocdata_open()
{
  return MEMORY[0x1E0DE64B0]();
}

mode_t umask(mode_t a1)
{
  return MEMORY[0x1E0C85998](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

uint64_t unum_clone()
{
  return MEMORY[0x1E0DE6528]();
}

uint64_t unum_close()
{
  return MEMORY[0x1E0DE6530]();
}

uint64_t unum_formatInt64()
{
  return MEMORY[0x1E0DE6560]();
}

uint64_t unum_getAttribute()
{
  return MEMORY[0x1E0DE6568]();
}

uint64_t unum_getSymbol()
{
  return MEMORY[0x1E0DE6588]();
}

uint64_t unum_getTextAttribute()
{
  return MEMORY[0x1E0DE6590]();
}

uint64_t unum_open()
{
  return MEMORY[0x1E0DE6598]();
}

uint64_t unum_parseDouble()
{
  return MEMORY[0x1E0DE65B0]();
}

uint64_t unum_parseInt64()
{
  return MEMORY[0x1E0DE65B8]();
}

uint64_t unum_parseToUFormattable()
{
  return MEMORY[0x1E0DE65C0]();
}

uint64_t unum_setAttribute()
{
  return MEMORY[0x1E0DE65C8]();
}

uint64_t unum_setContext()
{
  return MEMORY[0x1E0DE65D0]();
}

uint64_t unum_setDoubleAttribute()
{
  return MEMORY[0x1E0DE65D8]();
}

uint64_t unum_setSymbol()
{
  return MEMORY[0x1E0DE65E0]();
}

uint64_t unum_setTextAttribute()
{
  return MEMORY[0x1E0DE65E8]();
}

uint64_t unumf_close()
{
  return MEMORY[0x1E0DE65F8]();
}

uint64_t unumf_closeResult()
{
  return MEMORY[0x1E0DE6600]();
}

uint64_t unumf_formatDecimal()
{
  return MEMORY[0x1E0DE6608]();
}

uint64_t unumf_formatDouble()
{
  return MEMORY[0x1E0DE6610]();
}

uint64_t unumf_formatInt()
{
  return MEMORY[0x1E0DE6618]();
}

uint64_t unumf_openForSkeletonAndLocale()
{
  return MEMORY[0x1E0DE6620]();
}

uint64_t unumf_openResult()
{
  return MEMORY[0x1E0DE6628]();
}

uint64_t unumf_resultGetAllFieldPositions()
{
  return MEMORY[0x1E0DE6630]();
}

uint64_t unumf_resultToString()
{
  return MEMORY[0x1E0DE6638]();
}

uint64_t unumsys_close()
{
  return MEMORY[0x1E0DE6678]();
}

uint64_t unumsys_getName()
{
  return MEMORY[0x1E0DE6688]();
}

uint64_t unumsys_getRadix()
{
  return MEMORY[0x1E0DE6690]();
}

uint64_t unumsys_isAlgorithmic()
{
  return MEMORY[0x1E0DE6698]();
}

uint64_t unumsys_open()
{
  return MEMORY[0x1E0DE66A0]();
}

uint64_t unumsys_openAvailableNames()
{
  return MEMORY[0x1E0DE66A8]();
}

uint64_t uplrules_close()
{
  return MEMORY[0x1E0DE66B8]();
}

uint64_t uplrules_open()
{
  return MEMORY[0x1E0DE66C8]();
}

uint64_t uplrules_select()
{
  return MEMORY[0x1E0DE66D8]();
}

URegularExpression *__cdecl uregex_clone(const URegularExpression *regexp, UErrorCode *status)
{
  return (URegularExpression *)MEMORY[0x1E0DE6708](regexp, status);
}

void uregex_close(URegularExpression *regexp)
{
  MEMORY[0x1E0DE6710](regexp);
}

int64_t uregex_end64(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  return MEMORY[0x1E0DE6720](regexp, *(_QWORD *)&groupNum, status);
}

UBool uregex_findNext(URegularExpression *regexp, UErrorCode *status)
{
  return MEMORY[0x1E0DE6730](regexp, status);
}

int32_t uregex_groupCount(URegularExpression *regexp, UErrorCode *status)
{
  return MEMORY[0x1E0DE6740](regexp, status);
}

int32_t uregex_groupNumberFromName(URegularExpression *regexp, const UChar *groupName, int32_t nameLength, UErrorCode *status)
{
  return MEMORY[0x1E0DE6748](regexp, groupName, *(_QWORD *)&nameLength, status);
}

UBool uregex_hitEnd(const URegularExpression *regexp, UErrorCode *status)
{
  return MEMORY[0x1E0DE6750](regexp, status);
}

UBool uregex_matches(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return MEMORY[0x1E0DE6760](regexp, *(_QWORD *)&startIndex, status);
}

URegularExpression *__cdecl uregex_open(const UChar *pattern, int32_t patternLength, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  return (URegularExpression *)MEMORY[0x1E0DE6768](pattern, *(_QWORD *)&patternLength, *(_QWORD *)&flags, pe, status);
}

UBool uregex_requireEnd(const URegularExpression *regexp, UErrorCode *status)
{
  return MEMORY[0x1E0DE6780](regexp, status);
}

void uregex_setFindProgressCallback(URegularExpression *regexp, URegexFindProgressCallback *callback, const void *context, UErrorCode *status)
{
  MEMORY[0x1E0DE6790](regexp, callback, context, status);
}

void uregex_setMatchCallback(URegularExpression *regexp, URegexMatchCallback *callback, const void *context, UErrorCode *status)
{
  MEMORY[0x1E0DE6798](regexp, callback, context, status);
}

void uregex_setRegion64(URegularExpression *regexp, int64_t regionStart, int64_t regionLimit, UErrorCode *status)
{
  MEMORY[0x1E0DE67A8](regexp, regionStart, regionLimit, status);
}

void uregex_setText(URegularExpression *regexp, const UChar *text, int32_t textLength, UErrorCode *status)
{
  MEMORY[0x1E0DE67B0](regexp, text, *(_QWORD *)&textLength, status);
}

void uregex_setUText(URegularExpression *regexp, UText *text, UErrorCode *status)
{
  MEMORY[0x1E0DE67B8](regexp, text, status);
}

int64_t uregex_start64(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  return MEMORY[0x1E0DE67D0](regexp, *(_QWORD *)&groupNum, status);
}

void uregex_useAnchoringBounds(URegularExpression *regexp, UBool b, UErrorCode *status)
{
  MEMORY[0x1E0DE67D8](regexp, b, status);
}

void uregex_useTransparentBounds(URegularExpression *regexp, UBool b, UErrorCode *status)
{
  MEMORY[0x1E0DE67E0](regexp, b, status);
}

uint64_t uregion_getAvailable()
{
  return MEMORY[0x1E0DE67E8]();
}

uint64_t uregion_getContainedRegions()
{
  return MEMORY[0x1E0DE67F0]();
}

uint64_t uregion_getContainingRegion()
{
  return MEMORY[0x1E0DE67F8]();
}

uint64_t uregion_getContainingRegionOfType()
{
  return MEMORY[0x1E0DE6800]();
}

uint64_t uregion_getRegionCode()
{
  return MEMORY[0x1E0DE6808]();
}

uint64_t uregion_getRegionFromCode()
{
  return MEMORY[0x1E0DE6810]();
}

uint64_t ureldatefmt_close()
{
  return MEMORY[0x1E0DE6818]();
}

uint64_t ureldatefmt_open()
{
  return MEMORY[0x1E0DE6830]();
}

uint64_t uscript_getCode()
{
  return MEMORY[0x1E0DE6880]();
}

uint64_t uscript_getScript()
{
  return MEMORY[0x1E0DE6898]();
}

uint64_t uset_clear()
{
  return MEMORY[0x1E0DE6970]();
}

uint64_t uset_close()
{
  return MEMORY[0x1E0DE6988]();
}

uint64_t uset_contains()
{
  return MEMORY[0x1E0DE6998]();
}

uint64_t uset_containsAllCodePoints()
{
  return MEMORY[0x1E0DE69A0]();
}

uint64_t uset_getItem()
{
  return MEMORY[0x1E0DE69B0]();
}

uint64_t uset_getItemCount()
{
  return MEMORY[0x1E0DE69B8]();
}

uint64_t uset_openPattern()
{
  return MEMORY[0x1E0DE69E0]();
}

UText *__cdecl utext_close(UText *ut)
{
  return (UText *)MEMORY[0x1E0DE6A50](ut);
}

int32_t utf8_back1SafeBody(const uint8_t *s, int32_t start, int32_t i)
{
  return MEMORY[0x1E0DE6AB8](s, *(_QWORD *)&start, *(_QWORD *)&i);
}

int utimes(const char *a1, const timeval *a2)
{
  return MEMORY[0x1E0C859F8](a1, a2);
}

void uuid_generate_random(uuid_t out)
{
  MEMORY[0x1E0C85A20](out);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1E0C85A38](in, uu);
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A50](uu, out);
}

int vfprintf_l(FILE *a1, locale_t a2, const char *a3, va_list a4)
{
  return MEMORY[0x1E0C85A70](a1, a2, a3, a4);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1E0C85A80](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_copy(vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address)
{
  return MEMORY[0x1E0C85A90](*(_QWORD *)&target_task, source_address, size, dest_address);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x1E0C85B10]();
}

uint64_t voucher_copy()
{
  return MEMORY[0x1E0C85B18]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  return MEMORY[0x1E0C85BD0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

ssize_t writev(int a1, const iovec *a2, int a3)
{
  return MEMORY[0x1E0C85D48](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

xmlParserCtxtPtr xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data, const char *chunk, int size, const char *filename)
{
  return (xmlParserCtxtPtr)MEMORY[0x1E0DE8CC0](sax, user_data, chunk, *(_QWORD *)&size, filename);
}

xmlErrorPtr xmlCtxtGetLastError(void *ctx)
{
  return (xmlErrorPtr)MEMORY[0x1E0DE8CC8](ctx);
}

int xmlCtxtUseOptions(xmlParserCtxtPtr ctxt, int options)
{
  return MEMORY[0x1E0DE8CE0](ctxt, *(_QWORD *)&options);
}

void xmlFreeDoc(xmlDocPtr cur)
{
  MEMORY[0x1E0DE8D38](cur);
}

void xmlFreeEnumeration(xmlEnumerationPtr cur)
{
  MEMORY[0x1E0DE8D40](cur);
}

void xmlFreeParserCtxt(xmlParserCtxtPtr ctxt)
{
  MEMORY[0x1E0DE8D50](ctxt);
}

xmlExternalEntityLoader xmlGetExternalEntityLoader(void)
{
  return (xmlExternalEntityLoader)MEMORY[0x1E0DE8D78]();
}

xmlEntityPtr xmlGetPredefinedEntity(const xmlChar *name)
{
  return (xmlEntityPtr)MEMORY[0x1E0DE8D98](name);
}

void xmlInitParser(void)
{
  MEMORY[0x1E0DE8DC0]();
}

xmlParserInputPtr xmlNoNetExternalEntityLoader(const char *URL, const char *ID, xmlParserCtxtPtr ctxt)
{
  return (xmlParserInputPtr)MEMORY[0x1E0DE8E58](URL, ID, ctxt);
}

int xmlParseChunk(xmlParserCtxtPtr ctxt, const char *chunk, int size, int terminate)
{
  return MEMORY[0x1E0DE8EA0](ctxt, chunk, *(_QWORD *)&size, *(_QWORD *)&terminate);
}

void xmlSAX2EntityDecl(void *ctx, const xmlChar *name, int type, const xmlChar *publicId, const xmlChar *systemId, xmlChar *content)
{
  MEMORY[0x1E0DE8F28](ctx, name, *(_QWORD *)&type, publicId, systemId, content);
}

void xmlSAX2ExternalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
{
  MEMORY[0x1E0DE8F30](ctx, name, ExternalID, SystemID);
}

int xmlSAX2GetColumnNumber(void *ctx)
{
  return MEMORY[0x1E0DE8F38](ctx);
}

xmlEntityPtr xmlSAX2GetEntity(void *ctx, const xmlChar *name)
{
  return (xmlEntityPtr)MEMORY[0x1E0DE8F40](ctx, name);
}

int xmlSAX2GetLineNumber(void *ctx)
{
  return MEMORY[0x1E0DE8F48](ctx);
}

void xmlSAX2InternalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
{
  MEMORY[0x1E0DE8F50](ctx, name, ExternalID, SystemID);
}

void xmlSAX2UnparsedEntityDecl(void *ctx, const xmlChar *name, const xmlChar *publicId, const xmlChar *systemId, const xmlChar *notationName)
{
  MEMORY[0x1E0DE8F60](ctx, name, publicId, systemId, notationName);
}

void xmlSetExternalEntityLoader(xmlExternalEntityLoader f)
{
  MEMORY[0x1E0DE8FC0](f);
}

void xmlSetStructuredErrorFunc(void *ctx, xmlStructuredErrorFunc handler)
{
  MEMORY[0x1E0DE8FE0](ctx, handler);
}

void xmlStopParser(xmlParserCtxtPtr ctxt)
{
  MEMORY[0x1E0DE8FF0](ctxt);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return (xpc_object_t)MEMORY[0x1E0C85D80](activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85D90](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
  MEMORY[0x1E0C85D98](identifier, criteria, handler);
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
  MEMORY[0x1E0C85DB0](activity, criteria);
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1E0C85DB8](activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85DC8](activity);
}

void xpc_activity_unregister(const char *identifier)
{
  MEMORY[0x1E0C85DD0](identifier);
}

uint64_t xpc_add_bundle()
{
  return MEMORY[0x1E0C85DD8]();
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE0](xarray, value);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return (const char *)MEMORY[0x1E0C85E70](xarray, index);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1E0C85E90](xarray, index);
}

void xpc_connection_activate(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F50](connection);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

uint64_t xpc_connection_copy_bundle_id()
{
  return MEMORY[0x1E0C85F70]();
}

uint64_t xpc_connection_copy_invalidation_reason()
{
  return MEMORY[0x1E0C85F80]();
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1E0C85F90](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FA0](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

au_asid_t xpc_connection_get_asid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C85FC8](connection);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1E0C85FD0]();
}

gid_t xpc_connection_get_egid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C85FE8](connection);
}

uid_t xpc_connection_get_euid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C85FF0](connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C86008](connection);
}

uint64_t xpc_connection_kill()
{
  return MEMORY[0x1E0C86010]();
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_barrier(xpc_connection_t connection, dispatch_block_t barrier)
{
  MEMORY[0x1E0C86020](connection, barrier);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x1E0C86038](connection, message, replyq, handler);
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1E0C86048](connection, message);
}

uint64_t xpc_connection_send_notification()
{
  return MEMORY[0x1E0C86058]();
}

uint64_t xpc_connection_set_bootstrap()
{
  return MEMORY[0x1E0C86060]();
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

uint64_t xpc_connection_set_instance()
{
  return MEMORY[0x1E0C86090]();
}

uint64_t xpc_connection_set_legacy()
{
  return MEMORY[0x1E0C86098]();
}

uint64_t xpc_connection_set_privileged()
{
  return MEMORY[0x1E0C860B0]();
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
  MEMORY[0x1E0C860C8](connection, targetq);
}

uint64_t xpc_connection_set_target_uid()
{
  return MEMORY[0x1E0C860D0]();
}

void xpc_connection_suspend(xpc_connection_t connection)
{
  MEMORY[0x1E0C860E0](connection);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

uint64_t xpc_copy_entitlement_for_token()
{
  return MEMORY[0x1E0C86120]();
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86178](bytes, length);
}

xpc_object_t xpc_data_create_with_dispatch_data(dispatch_data_t ddata)
{
  return (xpc_object_t)MEMORY[0x1E0C86188](ddata);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1E0C86198](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1E0C861A8](xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1E0C861F0](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1E0C86228](original);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86260](xdict, key);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1E0C86278](xdict, key, length);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862D0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

uint64_t xpc_dictionary_handoff_reply()
{
  return MEMORY[0x1E0C862F0]();
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x1E0C86398](xdict, key, value);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1E0C863F0](connection);
}

xpc_object_t xpc_fd_create(int fd)
{
  return (xpc_object_t)MEMORY[0x1E0C864A0](*(_QWORD *)&fd);
}

int xpc_fd_dup(xpc_object_t xfd)
{
  return MEMORY[0x1E0C864B0](xfd);
}

uint64_t xpc_get_class4NSXPC()
{
  return MEMORY[0x1E0C86508]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

uint64_t xpc_handle_service()
{
  return MEMORY[0x1E0C86530]();
}

void xpc_main(xpc_connection_handler_t handler)
{
  MEMORY[0x1E0C86608](handler);
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C86660](object);
}

uint64_t xpc_track_activity()
{
  return MEMORY[0x1E0C86760]();
}

void xpc_transaction_begin(void)
{
  MEMORY[0x1E0C86768]();
}

void xpc_transaction_end(void)
{
  MEMORY[0x1E0C86770]();
}

