uint64_t _LocaleICU.init(name:prefs:disableBundleMatching:)(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFAllocator **v25;
  const __CFAllocator *v26;
  const __CFString *v27;
  __CFString *CanonicalLocaleIdentifierFromString;
  const __CFAllocator **v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  id v34;
  id v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  const __CFString *v71;
  __CFString *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  id v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  const __CFAllocator *v85;
  const __CFString *v86;
  __CFString *v87;
  id v88;
  unint64_t v89;
  unint64_t v90;
  id v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  id v95;
  NSObject *v96;
  os_log_type_t v97;
  _BOOL4 v98;
  uint8_t *v99;
  void *v100;
  uint64_t v101;
  id v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint8_t *v110;
  id v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  const __CFString *v115;
  __CFString *v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  _QWORD *v124;
  const __CFAllocator *v125;
  const __CFString *v126;
  __CFString *v127;
  unint64_t v128;
  Swift::String v129;
  Swift::String v130;
  const __CFString *v131;
  __CFString *v132;
  unint64_t v133;
  uint64_t v134;
  const __CFAllocator *v135;
  const __CFString *v136;
  __CFString *v137;
  id v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  Swift::String v154;
  Swift::String v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  Swift::String v163;
  Swift::String v164;
  char v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  void *v171;
  id v172;
  char *v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  unint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  unint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  int v197;
  __int16 v198;
  char v199;
  int v200;
  __int16 v201;
  char v202;
  __int128 v203;
  uint64_t v204;
  _OWORD v205[2];
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;

  v7 = (_QWORD *)type metadata accessor for Logger();
  v174 = *(v7 - 1);
  v175 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v167 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v173 = (char *)&v167 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v167 - v15;
  MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v167 - v18;
  v20 = *((_OWORD *)a3 + 5);
  v208 = *((_OWORD *)a3 + 4);
  v209 = v20;
  v210 = *((_OWORD *)a3 + 6);
  v21 = *((_OWORD *)a3 + 3);
  v206 = *((_OWORD *)a3 + 2);
  v176 = *a3;
  v183 = a3[1];
  v22 = a3[3];
  v23 = a3[14];
  v24 = a3[15];
  v179 = a3[2];
  v180 = v24;
  v211 = v23;
  v207 = v21;
  v181 = (void *)a3[16];
  v25 = (const __CFAllocator **)MEMORY[0x1E0C9AE30];
  v177 = *((_DWORD *)a3 + 34);
  v182 = v22;
  if (a2)
  {
    v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    v27 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v26, v27);
    swift_unknownObjectRelease();
    v29 = v25;
    if (CanonicalLocaleIdentifierFromString)
    {
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);
      v32 = v31;
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_bridgeObjectRelease();
      v30 = 0;
      v32 = 0xE000000000000000;
    }
    v40 = v182;
    if (one-time initialization token for log != -1)
      swift_once();
    v41 = static _LocaleICU.log;
    v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      swift_bridgeObjectRetain_n();
      Locale.Components.init(identifier:)((uint64_t)v30, v32, &v185);
      if (*((_QWORD *)&v190 + 1))
      {
        swift_bridgeObjectRelease();
        outlined release of Locale.Components((uint64_t *)&v185);
      }
      else
      {
        v65 = v41;
        Logger.init(_:)();
        swift_bridgeObjectRetain();
        v66 = Logger.logObject.getter();
        v67 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v66, v67))
        {
          v68 = (uint8_t *)swift_slowAlloc();
          v69 = swift_slowAlloc();
          *(_QWORD *)&v205[0] = v69;
          *(_DWORD *)v68 = 136446210;
          v173 = (char *)(v68 + 4);
          swift_bridgeObjectRetain();
          *(_QWORD *)&v203 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v30, v32, (uint64_t *)v205);
          v29 = (const __CFAllocator **)MEMORY[0x1E0C9AE30];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1817D9000, v66, v67, "Current locale fetched with overriding locale identifier '%{public}s' which does not have a country code", v68, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x186DA9E78](v69, -1, -1);
          MEMORY[0x186DA9E78](v68, -1, -1);

          outlined release of Locale.Components((uint64_t *)&v185);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          outlined release of Locale.Components((uint64_t *)&v185);

        }
        (*(void (**)(char *, id))(v174 + 8))(v19, v175);
        v40 = v182;
      }
    }
    v71 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    v72 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v26, v71);
    swift_unknownObjectRelease();
    if (v72)
    {
      v73 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
      v75 = v74;
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_bridgeObjectRelease();
      v73 = 0;
      v75 = 0xE000000000000000;
    }
    v76 = v179;
    v37 = v180;
    goto LABEL_94;
  }
  v172 = v17;
  v33 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v34 = objc_msgSend(v33, sel_mainBundle);
  v35 = objc_msgSend(v34, sel__objectForUnlocalizedInfoDictionaryKey_, String._bridgeToObjectiveCImpl()());

  swift_unknownObjectRelease();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any?((uint64_t)&v185, (uint64_t)&v203);
  if (v204)
  {
    outlined init with take of Any(&v203, v205);
    outlined init with copy of Any((uint64_t)v205, (uint64_t)&v203);
    v36 = swift_dynamicCast();
    v37 = v180;
    v38 = v183;
    if ((v36 & 1) != 0)
    {
      v39 = v184;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
      v40 = v182;
    }
    else
    {
      outlined init with copy of Any((uint64_t)v205, (uint64_t)&v203);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v168 = v184;
        v203 = v184;
        v170 = *((_QWORD *)&v184 + 1);
        v171 = v33;
        swift_bridgeObjectRetain();
        v169 = Substring.init<A>(_:)();
        v44 = v43;
        v46 = v45;
        v48 = v47;
        *(_QWORD *)&v203 = 1702195828;
        *((_QWORD *)&v203 + 1) = 0xE400000000000000;
        v49 = Substring.init<A>(_:)();
        v53 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v49, v50, v51, v52, 0, 0, 1, 0, 0, v169, v44, v46, v48);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v53)
        {
          *(_QWORD *)&v203 = v168;
          *((_QWORD *)&v203 + 1) = v170;
          swift_bridgeObjectRetain();
          v169 = Substring.init<A>(_:)();
          v55 = v54;
          v57 = v56;
          v59 = v58;
          *(_QWORD *)&v203 = 5457241;
          *((_QWORD *)&v203 + 1) = 0xE300000000000000;
          v60 = Substring.init<A>(_:)();
          v64 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v60, v61, v62, v63, 0, 0, 1, 0, 0, v169, v55, v57, v59);
          v38 = v183;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v39 = v64 == 0;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
          swift_bridgeObjectRelease();
          v39 = 1;
        }
        v40 = v182;
        v33 = v171;
        v37 = v180;
      }
      else
      {
        outlined init with copy of Any((uint64_t)v205, (uint64_t)&v203);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v70 = v184;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
          v39 = v70 != 0;
          v40 = v182;
        }
        else
        {
          outlined init with take of Any(v205, &v203);
          v77 = swift_dynamicCast();
          v40 = v182;
          if (v77)
            v39 = *(double *)&v184 != 0.0;
          else
            v39 = 0;
        }
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v203, &demangling cache variable for type metadata for Any?);
    v39 = 0;
    v37 = v180;
    v40 = v182;
    v38 = v183;
  }
  outlined destroy of Any?((uint64_t)&v185, &demangling cache variable for type metadata for Any?);
  if (v38)
  {
    if (v40)
    {
      if (((a4 | v39) & 1) == 0)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v175 = objc_msgSend(v33, sel_mainBundle);
        v78 = objc_msgSend(v175, sel_localizations);
        v76 = v179;
        if (v78)
        {
          v79 = v78;
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();

          }
          v80 = v33;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          v81 = swift_dynamicCastClass();
          if (v81)
          {
            v82 = v81;

          }
          else
          {
            swift_unknownObjectRelease();
            objc_msgSend(v79, sel_copy);
            v118 = _bridgeCocoaArray<A>(_:)();
            swift_unknownObjectRelease();
            v82 = specialized _arrayForceCast<A, B>(_:)(v118);

            swift_bridgeObjectRelease();
          }
        }
        else
        {
          v80 = v33;
          v82 = MEMORY[0x1E0DEE9D8];
        }
        v119 = specialized static Locale.canonicalizeLocalizations(_:)(v82);
        swift_bridgeObjectRelease();
        if (!v119[2] || !*(_QWORD *)(v38 + 16))
          goto LABEL_81;
        v120 = HIBYTE(v40) & 0xF;
        if ((v40 & 0x2000000000000000) == 0)
          v120 = v76 & 0xFFFFFFFFFFFFLL;
        if (v120)
        {
          swift_bridgeObjectRetain();
          specialized static Locale.canonicalizeLocalizations(_:)(v38);
          swift_bridgeObjectRetain();
          v121 = _ContiguousArrayBuffer._asCocoaArray()();
          v122 = objc_msgSend(v80, sel_preferredLocalizationsFromArray_forPreferences_, v121, _ContiguousArrayBuffer._asCocoaArray()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if (v122)
          {
            type metadata accessor for __SwiftDeferredNSArray();
            swift_unknownObjectRetain();
            if (swift_dynamicCastClass())
            {
              swift_retain();

            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
            v123 = swift_dynamicCastClass();
            if (v123)
            {
              v124 = (_QWORD *)v123;

            }
            else
            {
              swift_unknownObjectRelease();
              objc_msgSend(v122, sel_copy);
              v147 = _bridgeCocoaArray<A>(_:)();
              swift_unknownObjectRelease();
              v124 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v147);

              swift_bridgeObjectRelease();
            }
          }
          else
          {
            v124 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          }
          if (v124[2])
          {
            v148 = v124[5];
            v174 = v124[4];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v40 = v182;
            swift_bridgeObjectRetain();
            v149 = specialized _withFixedCharBuffer(size:_:)(257, v76, v40);
            v151 = v150;
            swift_bridgeObjectRelease();
            if (v151)
            {
              Locale.Components.init(identifier:)(v149, v151, &v185);
              if (*((_QWORD *)&v185 + 1))
              {
                v152 = (void *)*((_QWORD *)&v188 + 1);
                if (*((_QWORD *)&v188 + 1))
                {
                  v153 = v188;
                  v205[0] = v185;
                  outlined copy of Locale.LanguageCode?(v188, *((uint64_t *)&v188 + 1));
                  swift_bridgeObjectRetain();
                  v154._countAndFlagsBits = 45;
                  v154._object = (void *)0xE100000000000000;
                  String.append(_:)(v154);
                  swift_bridgeObjectRetain();
                  v76 = v179;
                  v40 = v182;
                  outlined consume of Locale.LanguageCode?(v153, (uint64_t)v152);
                  v155._countAndFlagsBits = v153;
                  v155._object = v152;
                  String.append(_:)(v155);
                  swift_bridgeObjectRelease();
                  outlined release of Locale.Components((uint64_t *)&v185);
                  v156 = *((_QWORD *)&v205[0] + 1);
                  v149 = *(_QWORD *)&v205[0];
                  goto LABEL_112;
                }
              }
              outlined release of Locale.Components((uint64_t *)&v185);
              v149 = 0;
            }
            v156 = 0;
LABEL_112:
            swift_bridgeObjectRetain();
            v158 = specialized _withFixedCharBuffer(size:_:)(257, v174, v148);
            v160 = v159;
            swift_bridgeObjectRelease();
            if (v160)
            {
              Locale.Components.init(identifier:)(v158, v160, &v185);
              if (*((_QWORD *)&v185 + 1) && (v161 = (void *)*((_QWORD *)&v188 + 1)) != 0)
              {
                v162 = v188;
                v205[0] = v185;
                outlined copy of Locale.LanguageCode?(v188, *((uint64_t *)&v188 + 1));
                swift_bridgeObjectRetain();
                v163._countAndFlagsBits = 45;
                v163._object = (void *)0xE100000000000000;
                String.append(_:)(v163);
                swift_bridgeObjectRetain();
                v40 = v182;
                outlined consume of Locale.LanguageCode?(v162, (uint64_t)v161);
                v164._countAndFlagsBits = v162;
                v76 = v179;
                v164._object = v161;
                String.append(_:)(v164);
                swift_bridgeObjectRelease();
                outlined release of Locale.Components((uint64_t *)&v185);
                v160 = *((_QWORD *)&v205[0] + 1);
                v158 = *(_QWORD *)&v205[0];
              }
              else
              {
                outlined release of Locale.Components((uint64_t *)&v185);
                v158 = 0;
                v160 = 0;
              }
            }
            if (v156 && v160)
            {
              if (v149 == v158 && v156 == v160)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_125:
                swift_bridgeObjectRelease();
                v37 = v180;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                v73 = v76;
                v75 = v40;
LABEL_93:
                v29 = (const __CFAllocator **)MEMORY[0x1E0C9AE30];
LABEL_94:
                v134 = HIBYTE(v75) & 0xF;
                if ((v75 & 0x2000000000000000) == 0)
                  v134 = v73 & 0xFFFFFFFFFFFFLL;
                if (!v134)
                  swift_bridgeObjectRelease();
                goto LABEL_98;
              }
              v165 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v165 & 1) != 0)
              {

                goto LABEL_125;
              }
              v73 = specialized static Locale.localeIdentifierByReplacingLanguageCodeAndScriptCode(localeIDWithDesiredLangCode:localeIDWithDesiredComponents:)(v174, v148, v76, v40);
              v75 = v166;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              v37 = v180;
              if (v75)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_93;
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v37 = v180;
            }
            goto LABEL_82;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v157 = v182;
          swift_bridgeObjectRelease();

          v40 = v157;
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_81:
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();

        }
LABEL_82:
        v29 = (const __CFAllocator **)MEMORY[0x1E0C9AE30];
LABEL_83:
        v125 = *v29;
        v126 = (const __CFString *)String._bridgeToObjectiveCImpl()();
        v127 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v125, v126);
        swift_unknownObjectRelease();
        if (v127)
        {
          v73 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
          v75 = v128;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v73 = 0;
          v75 = 0xE000000000000000;
        }
        goto LABEL_94;
      }
LABEL_41:
      v76 = v179;
      goto LABEL_82;
    }
    v83 = swift_bridgeObjectRetain();
    v84 = specialized static Locale.canonicalizeLocalizations(_:)(v83);
    swift_bridgeObjectRelease();
    if (v84[2])
    {
      v85 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
      v86 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      v87 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v85, v86);
      swift_unknownObjectRelease();
      if (v87)
      {
        v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
        v90 = v89;
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
        v88 = 0;
        v90 = 0xE000000000000000;
      }
      v100 = v181;
      v40 = v182;
      if (v181)
      {
        v101 = one-time initialization token for log;
        swift_bridgeObjectRetain();
        if (v101 != -1)
          swift_once();
        v102 = (id)static _LocaleICU.log;
        Logger.init(_:)();
        swift_bridgeObjectRetain_n();
        v103 = Logger.logObject.getter();
        v104 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v103, v104))
        {
          v105 = (uint8_t *)swift_slowAlloc();
          v106 = swift_slowAlloc();
          v172 = v88;
          v107 = v90;
          v108 = v106;
          *(_QWORD *)&v185 = v106;
          *(_DWORD *)v105 = 136446210;
          swift_bridgeObjectRetain();
          *(_QWORD *)&v205[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180, (unint64_t)v181, (uint64_t *)&v185);
          v37 = v180;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1817D9000, v103, v104, "Locale.current constructing a locale identifier from preferred languages by combining with set country code '%{public}s'", v105, 0xCu);
          swift_arrayDestroy();
          v109 = v108;
          v90 = v107;
          v88 = v172;
          MEMORY[0x186DA9E78](v109, -1, -1);
          v110 = v105;
          v100 = v181;
          MEMORY[0x186DA9E78](v110, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, id))(v174 + 8))(v173, v175);
        v29 = (const __CFAllocator **)MEMORY[0x1E0C9AE30];
        *(_QWORD *)&v185 = v88;
        *((_QWORD *)&v185 + 1) = v90;
        v129._countAndFlagsBits = 95;
        v129._object = (void *)0xE100000000000000;
        String.append(_:)(v129);
        v130._countAndFlagsBits = v37;
        v130._object = v100;
        String.append(_:)(v130);
        swift_bridgeObjectRelease();
        v131 = (const __CFString *)String._bridgeToObjectiveCImpl()();
        v132 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v85, v131);
        swift_unknownObjectRelease();
        if (v132)
        {
          v73 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
          v75 = v133;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v73 = 0;
          v75 = 0xE000000000000000;
        }
        v40 = v182;
        v76 = v179;
        goto LABEL_94;
      }
      if (one-time initialization token for log != -1)
        swift_once();
      v111 = (id)static _LocaleICU.log;
      Logger.init(_:)();
      v112 = Logger.logObject.getter();
      v113 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v112, v113))
      {
        v114 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v114 = 0;
        _os_log_impl(&dword_1817D9000, v112, v113, "Locale.current constructing a locale identifier from preferred languages without a set country code", v114, 2u);
        MEMORY[0x186DA9E78](v114, -1, -1);
      }

      (*(void (**)(id, id))(v174 + 8))(v172, v175);
      v115 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      v116 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v85, v115);
      swift_unknownObjectRelease();
      if (v116)
      {
        v73 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
        v75 = v117;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v73 = 0;
        v75 = 0xE000000000000000;
      }
      v76 = v179;
      goto LABEL_93;
    }
    if (one-time initialization token for log != -1)
      swift_once();
    v95 = (id)static _LocaleICU.log;
    Logger.init(_:)();
    v96 = Logger.logObject.getter();
    v97 = static os_log_type_t.debug.getter();
    v98 = os_log_type_enabled(v96, v97);
    v29 = (const __CFAllocator **)MEMORY[0x1E0C9AE30];
    if (v98)
    {
      v99 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v99 = 0;
      _os_log_impl(&dword_1817D9000, v96, v97, "Value for 'AppleLanguages' found in preferences contains no valid entries; falling back to default locale identifier as current",
        v99,
        2u);
      MEMORY[0x186DA9E78](v99, -1, -1);
    }

    (*(void (**)(char *, id))(v174 + 8))(v10, v175);
    swift_bridgeObjectRelease();
    v76 = v179;
  }
  else
  {
    if (((v40 != 0) & (a4 | v39)) != 0)
      goto LABEL_41;
    v76 = v179;
    v29 = (const __CFAllocator **)MEMORY[0x1E0C9AE30];
    if (one-time initialization token for log != -1)
      swift_once();
    v91 = (id)static _LocaleICU.log;
    Logger.init(_:)();
    v92 = Logger.logObject.getter();
    v93 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v92, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v94 = 0;
      _os_log_impl(&dword_1817D9000, v92, v93, "Lookup of 'AppleLanguages' from current preferences failed lookup (app preferences do not contain the key); like"
        "ly falling back to default locale identifier as current",
        v94,
        2u);
      MEMORY[0x186DA9E78](v94, -1, -1);
    }

    (*(void (**)(char *, id))(v174 + 8))(v16, v175);
    if (v40)
      goto LABEL_83;
  }
LABEL_98:
  v135 = *v29;
  v136 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  v137 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v135, v136);
  swift_unknownObjectRelease();
  if (v137)
  {
    v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
    v140 = v139;
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    v138 = 0;
    v140 = 0xE000000000000000;
  }
  v141 = v178;
  *(_QWORD *)(v178 + 16) = v138;
  *(_QWORD *)(v141 + 24) = v140;
  swift_bridgeObjectRetain();
  v142 = specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v141 + 32) = v142 & 1;
  *(_QWORD *)&v185 = v176;
  *((_QWORD *)&v185 + 1) = v183;
  v186 = v76;
  v187 = v40;
  v190 = v208;
  v191 = v209;
  v192 = v210;
  v188 = v206;
  v189 = v207;
  v193 = v211;
  v194 = v37;
  v195 = (unint64_t)v181;
  v196 = v177;
  destructiveProjectEnumData for PredicateCodableError(&v185, v143);
  outlined init with take of LocalePreferences?((uint64_t)&v185, v141 + 40);
  v202 = 1;
  v199 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_LocaleICU.State>._Buffer);
  v144 = swift_allocObject();
  *(_DWORD *)(v144 + 560) = 0;
  *(_OWORD *)(v144 + 32) = 0u;
  *(_OWORD *)(v144 + 48) = 0u;
  *(_OWORD *)(v144 + 64) = 0u;
  *(_OWORD *)(v144 + 80) = 0u;
  *(_OWORD *)(v144 + 96) = 0u;
  *(_BYTE *)(v144 + 112) = 16;
  *(_DWORD *)(v144 + 113) = v205[0];
  *(_DWORD *)(v144 + 116) = *(_DWORD *)((char *)v205 + 3);
  *(_OWORD *)(v144 + 120) = 0u;
  *(_OWORD *)(v144 + 136) = 0u;
  *(_QWORD *)(v144 + 152) = 0;
  *(_QWORD *)(v144 + 160) = 1;
  *(_QWORD *)(v144 + 216) = 0;
  *(_OWORD *)(v144 + 200) = 0u;
  *(_OWORD *)(v144 + 184) = 0u;
  *(_OWORD *)(v144 + 168) = 0u;
  *(_BYTE *)(v144 + 224) = 7;
  *(_DWORD *)(v144 + 225) = v203;
  *(_DWORD *)(v144 + 228) = *(_DWORD *)((char *)&v203 + 3);
  *(_OWORD *)(v144 + 232) = 0u;
  *(_OWORD *)(v144 + 248) = 0u;
  *(_BYTE *)(v144 + 280) = 0;
  *(_BYTE *)(v144 + 281) = v202;
  *(_WORD *)(v144 + 286) = v201;
  *(_QWORD *)(v144 + 288) = 0;
  *(_BYTE *)(v144 + 296) = v199;
  *(_BYTE *)(v144 + 297) = 4;
  *(_WORD *)(v144 + 302) = v198;
  *(_OWORD *)(v144 + 304) = 0u;
  *(_OWORD *)(v144 + 320) = 0u;
  *(_BYTE *)(v144 + 336) = 2;
  *(_DWORD *)(v144 + 340) = *(_DWORD *)((char *)&v184 + 3);
  *(_QWORD *)(v144 + 344) = 0;
  *(_QWORD *)(v144 + 352) = 1;
  *(_QWORD *)(v144 + 360) = 0;
  *(_QWORD *)(v144 + 368) = 0;
  *(_QWORD *)(v144 + 376) = 0;
  *(_QWORD *)(v144 + 384) = 1;
  *(_QWORD *)(v144 + 392) = 0;
  *(_QWORD *)(v144 + 400) = 0;
  v145 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v144 + 472) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v144 + 480) = v145;
  *(_QWORD *)(v144 + 488) = v145;
  *(_QWORD *)(v144 + 496) = v145;
  *(_QWORD *)(v144 + 504) = v145;
  *(_QWORD *)(v144 + 512) = v145;
  *(_QWORD *)(v144 + 520) = v145;
  *(_QWORD *)(v144 + 528) = v145;
  *(_QWORD *)(v144 + 536) = v145;
  *(_QWORD *)(v144 + 544) = v145;
  *(_QWORD *)(v144 + 552) = v145;
  *(_QWORD *)(v144 + 424) = 0;
  *(_QWORD *)(v144 + 432) = 1;
  *(_QWORD *)(v144 + 408) = 1;
  *(_QWORD *)(v144 + 416) = 0;
  *(_QWORD *)(v141 + 184) = v144;
  *(_OWORD *)(v144 + 16) = xmmword_18205FD60;
  *(_OWORD *)(v144 + 264) = 0u;
  *(_DWORD *)(v144 + 282) = v200;
  *(_DWORD *)(v144 + 298) = v197;
  *(_DWORD *)(v144 + 337) = v184;
  *(_OWORD *)(v144 + 440) = 0u;
  *(_OWORD *)(v144 + 456) = 0u;
  return v141;
}

_QWORD *specialized static Locale.canonicalizeLocalizations(_:)(uint64_t a1)
{
  uint64_t v1;
  const __CFAllocator *v2;
  uint64_t v3;
  _QWORD *v4;
  const __CFString *v5;
  __CFString *CanonicalLanguageIdentifierFromString;
  id v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
  v3 = swift_bridgeObjectRetain() + 40;
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v5 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v2, v5);
    swift_unknownObjectRelease();
    if (CanonicalLanguageIdentifierFromString)
    {
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
      v9 = v8;
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_bridgeObjectRelease();
      v7 = 0;
      v9 = 0xE000000000000000;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v11 = v4[2];
    v10 = v4[3];
    if (v11 >= v10 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v4);
    v3 += 16;
    v4[2] = v11 + 1;
    v12 = &v4[2 * v11];
    v12[4] = v7;
    v12[5] = v9;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t instantiation function for generic protocol witness table for _LocaleICU(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type _LocaleICU and conformance _LocaleICU(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t _LocaleICU.copy(newCalendarIdentifier:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[144];
  _BYTE __dst[352];
  _QWORD v14[25];
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD __src[22];

  v2 = v1;
  v3 = *a1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(v4, v5, v14);
  __src[0] = *(_OWORD *)v14;
  __src[1] = *(_OWORD *)&v14[2];
  __src[2] = *(_OWORD *)&v14[4];
  __src[3] = *(_OWORD *)&v14[6];
  __src[4] = *(_OWORD *)&v14[8];
  __src[5] = *(_OWORD *)&v14[10];
  LOBYTE(__src[6]) = v3;
  *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)&v14[13];
  *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)&v14[15];
  *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)&v14[17];
  *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)&v14[19];
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)&v14[21];
  *(_OWORD *)((char *)&__src[11] + 8) = *(_OWORD *)&v14[23];
  WORD4(__src[12]) = v15;
  __src[13] = v16;
  __src[14] = v17;
  __src[15] = v18;
  __src[16] = v19;
  __src[17] = v20;
  __src[18] = v21;
  __src[19] = v22;
  __src[20] = v23;
  __src[21] = v24;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  v7 = v6;
  v9 = v8;
  outlined init with take of LocalePreferences?(v2 + 40, (uint64_t)__dst);
  outlined init with take of LocalePreferences?((uint64_t)__dst, (uint64_t)v12);
  v10 = swift_allocObject();
  outlined retain of LocalePreferences?((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  _LocaleICU.init(identifier:prefs:)(v7, v9, (uint64_t)v12);
  outlined release of Locale.Components((uint64_t *)__src);
  lazy protocol witness table accessor for type _LocaleICU and conformance _LocaleICU(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
  return v10;
}

uint64_t lazy protocol witness table accessor for type _LocaleICU and conformance _LocaleICU(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for _LocaleICU();
    result = MEMORY[0x186DA9D64](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of LocalePreferences?(uint64_t a1)
{
  outlined copy of LocalePreferences?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(void **)(a1 + 64), *(void **)(a1 + 72), *(void **)(a1 + 80), *(void **)(a1 + 88), *(void **)(a1 + 96));
  return a1;
}

uint64_t type metadata accessor for _LocaleICU()
{
  return objc_opt_self();
}

id @objc static NSLocale._localeIdentifierByAddingLikelySubtags(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v5 = v4;
  swift_bridgeObjectRetain();
  specialized _withFixedCharBuffer(size:_:)(257, (uint64_t)v3, v5);
  v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
    swift_bridgeObjectRelease();
  v8 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, char *, uint64_t, char *))
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = isStackAllocationSafe + 1;
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v4 < 0)
    goto LABEL_15;
  v6 = isStackAllocationSafe;
  if (v4 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v8 = (char *)&v16 - v7;
    HIDWORD(v16) = 0;
    v9 = String.utf8CString.getter();
    v10 = a4(v9 + 32, v8, v6, (char *)&v16 + 4);
    swift_release();
    v11 = 0;
    if (SHIDWORD(v16) <= 0 && v10 > 0)
    {
      v8[v10] = 0;
      return MEMORY[0x186DA4658](v8);
    }
  }
  else
  {
    v12 = swift_slowAlloc();
    HIDWORD(v16) = 0;
    v13 = String.utf8CString.getter();
    v14 = a4(v13 + 32, (char *)v12, v6, (char *)&v16 + 4);
    swift_release();
    v11 = 0;
    if (SHIDWORD(v16) <= 0 && v14 > 0)
    {
      *(_BYTE *)(v12 + v14) = 0;
      v11 = MEMORY[0x186DA4658](v12);
    }
    MEMORY[0x186DA9E78](v12, -1, -1);
  }
  return v11;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized _withFixedCharBuffer(size:_:)(a1, a2, a3, (uint64_t (*)(uint64_t, char *, uint64_t, char *))MEMORY[0x1E0DE6388]);
}

{
  return specialized _withFixedCharBuffer(size:_:)(a1, a2, a3, MEMORY[0x1E0DE6458]);
}

{
  return specialized _withFixedCharBuffer(size:_:)(a1, a2, a3, MEMORY[0x1E0DE5B58]);
}

unint64_t instantiation function for generic protocol witness table for _LocaleAutoupdating(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating;
  if (!lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating)
  {
    v1 = type metadata accessor for _LocaleAutoupdating();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _LocaleAutoupdating, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating;
  if (!lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating)
  {
    v1 = type metadata accessor for _LocaleAutoupdating();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _LocaleAutoupdating, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating);
  }
  return result;
}

uint64_t type metadata accessor for _LocaleAutoupdating()
{
  return objc_opt_self();
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

void URLComponents.queryItems.modify(Swift::OpaquePointer_optional a1)
{
  void *v1;
  Swift::OpaquePointer_optional v2;

  v1 = *(void **)a1.value._rawValue;
  a1.value._rawValue = *(void **)(*(_QWORD *)a1.value._rawValue + 160);
  if (a1.is_nil)
  {
    v2.value._rawValue = (void *)swift_bridgeObjectRetain();
    URLComponents._URLComponents.setQueryItems(_:)(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    URLComponents._URLComponents.setQueryItems(_:)(a1);
  }
  swift_bridgeObjectRelease();
  free(v1);
}

__n128 Measurement<>.FormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __n128 result;
  __n128 v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v7;
  *(__n128 *)(a3 + 8) = v7;
  return result;
}

uint64_t Measurement<>.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v5 = v4[1];
  v7[0] = *v4;
  v7[1] = v5;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a4 + 48))(v7, a3, a4);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Measurement<A><>.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = Measurement<>.FormatStyle.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t Measurement<>.FormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[2];
  void *v43;
  uint64_t v44;

  v3 = v2;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 8);
  v43 = *(void **)v9;
  v8 = v43;
  v44 = v10;
  type metadata accessor for Measurement(0, *(_QWORD *)(v11 + 16), v12, v13);
  v14 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  if (!swift_dynamicCast())
  {
    v21 = NSDimension.skeleton.getter();
    if (!v22)
      goto LABEL_21;
    LOBYTE(v43) = *v2;
    v23 = *(int *)(a2 + 32);
    LOBYTE(v42[0]) = v2[*(int *)(a2 + 36)];
    v24 = (void *)static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)((uint64_t)v21, v22, (unsigned __int8 *)&v43, (unsigned __int8 *)v42, (uint64_t)&v2[v23]);
    v26 = v25;
    swift_bridgeObjectRelease();
    v18 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v24, v26);
    v28 = v27;
    swift_bridgeObjectRelease();
    if (!v28)
    {
LABEL_21:
      if ((Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(a2) & 1) == 0)
        goto LABEL_12;
      v43 = v14;
      v44 = v10;
      v29 = Measurement<>.FormatStyle.skeletonForUsage(_:)((uint64_t)&v43, a2);
      if (!v30)
        goto LABEL_12;
      v31 = (void *)v29;
      v32 = v30;
      swift_bridgeObjectRelease();
      v18 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v31, v32);
      v34 = v33;
      swift_bridgeObjectRelease();
      if (!v34)
        goto LABEL_12;
    }
    goto LABEL_10;
  }
  v15 = (void *)v42[0];
  v43 = (void *)v42[0];
  v44 = v42[1];
  v16 = (void *)Measurement<>.FormatStyle.skeletonForUsage(_:)((uint64_t)&v43, a2);
  if (!v17)
  {

    goto LABEL_12;
  }
  v18 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v16, v17);
  v20 = v19;
  swift_bridgeObjectRelease();

  if (v20)
  {
LABEL_10:
    (*(void (**)(char *, _BYTE *, uint64_t))(v5 + 16))(v7, v3, a2);
    goto LABEL_18;
  }
LABEL_12:
  if ((Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(a2) & 1) == 0
    || (v43 = v14, v44 = v10, v35 = Measurement<>.FormatStyle.skeletonForBaseUnit(_:)((uint64_t)&v43, a2), !v36))
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v5 + 16))(v7, v3, a2);
LABEL_17:
    v43 = v14;
    v44 = v10;
    v18 = Measurement<>.FormatStyle.formatAsDescription(_:)(&v43, a2);
    goto LABEL_18;
  }
  v37 = (void *)v35;
  v38 = v36;
  swift_bridgeObjectRelease();
  v18 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v37, v38);
  v40 = v39;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, _BYTE *, uint64_t))(v5 + 16))(v7, v3, a2);
  if (!v40)
    goto LABEL_17;
LABEL_18:
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  return v18;
}

uint64_t type metadata accessor for Measurement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Measurement);
}

uint64_t initializeWithCopy for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *__dst;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[8];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  swift_unknownObjectRetain();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v31 = v10;
    v32 = v7;
    *v7 = *v8;
    v12 = *(int *)(v9 + 36);
    v13 = (char *)v7 + v12;
    v14 = (char *)v8 + v12;
    v13[8] = v14[8];
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
    v15 = *((_OWORD *)v14 + 3);
    v16 = *((_OWORD *)v14 + 1);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v15;
    *((_OWORD *)v13 + 1) = v16;
    v13[73] = v14[73];
    v13[76] = v14[76];
    *((_WORD *)v13 + 37) = *((_WORD *)v14 + 37);
    v13[77] = v14[77];
    v17 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v18 = *(int *)(v17 + 36);
    __dst = &v13[v18];
    v30 = v17;
    v19 = &v14[v18];
    v20 = type metadata accessor for FloatingPointRoundingRule();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    swift_unknownObjectRetain();
    if (v22(v19, 1, v20))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    v24 = *(int *)(v30 + 40);
    v25 = &v13[v24];
    v26 = &v14[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    v13[*(int *)(v30 + 44)] = v14[*(int *)(v30 + 44)];
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v32, 0, 1, v9);
  }
  v27 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v27) = *(_BYTE *)(a2 + v27);
  return a1;
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t destroy for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_unknownObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    swift_unknownObjectRelease();
    v7 = *(int *)(v5 + 36);
    v8 = v4 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0) + 36) + v7;
    v9 = type metadata accessor for FloatingPointRoundingRule();
    v10 = *(_QWORD *)(v9 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  return result;
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 40) >> 1;
    v5 = -2 - v4;
    if (-2 - (int)v4 < 0)
      v5 = -1;
    if (v4 > 0x80000000)
      return (v5 + 1);
    else
      return 0;
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v9);
  }
}

uint64_t __swift_get_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v7 = a4(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a2, v7);
  v10 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t __swift_get_extra_inhabitant_indexTm_2(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t __swift_get_extra_inhabitant_indexTm_3(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t getEnumTagSinglePayload for FloatingPointFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t Measurement<>.FormatStyle._format(_:withSkeleton:)(void *a1, unint64_t a2)
{
  uint64_t v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v10 = *(_OWORD *)(v2 + 8);
  swift_unknownObjectRetain();
  v5 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(a1, a2, (uint64_t)v10);
  swift_unknownObjectRelease();
  if (!v5)
    return 0;
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  v6 = swift_retain_n();
  MEMORY[0x1E0C80A78](v6);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v9, v10);
  v7 = v10[0];
  swift_release();
  swift_release_n();
  return v7;
}

char *specialized static ICUMeasurementNumberFormatter.create(for:locale:)(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  _QWORD *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  uint64_t v24;
  _BOOL8 v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *result;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  os_unfair_lock_s *v59;
  void (*v60)(uint64_t, uint64_t);
  int64_t v61;
  void *__src;
  char *__srca;
  uint64_t v64;
  _OWORD v65[9];
  _BYTE v66[28];
  _BYTE v67[144];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  _BYTE v78[45];
  __int128 v79;
  __int128 v80;
  _OWORD v81[7];
  _OWORD v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[2];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 8);
  ObjectType = swift_getObjectType();
  v7 = *(void (**)(uint64_t, uint64_t))(v5 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v60 = v7;
  v8 = ((uint64_t (*)(uint64_t, uint64_t))v7)(ObjectType, v5);
  v10 = v9;
  v11 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  v11(&v83, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)&v83, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  __src = a1;
  *(_QWORD *)&v79 = a1;
  *((_QWORD *)&v79 + 1) = a2;
  *(_QWORD *)&v80 = v8;
  *((_QWORD *)&v80 + 1) = v10;
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1)
    swift_once();
  v12 = *(_QWORD *)algn_1EDC3D1D8;
  v56 = static ICUMeasurementNumberFormatter.cache;
  v76 = v81[6];
  v77[0] = v82[0];
  *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)((char *)v82 + 12);
  v72 = v81[2];
  v73 = v81[3];
  v74 = v81[4];
  v75 = v81[5];
  v68 = v79;
  v69 = v80;
  v13 = *(_QWORD *)algn_1EDC3D1D8 + 16;
  v14 = (os_unfair_lock_s *)(*(_QWORD *)algn_1EDC3D1D8 + 24);
  v70 = v81[0];
  v71 = v81[1];
  swift_retain_n();
  os_unfair_lock_lock(v14);
  v91 = v76;
  v92[0] = v77[0];
  *(_OWORD *)((char *)v92 + 12) = *(_OWORD *)((char *)v77 + 12);
  v87 = v72;
  v88 = v73;
  v89 = v74;
  v90 = v75;
  v83 = v68;
  v84 = v69;
  v85 = v70;
  v86 = v71;
  v57 = (uint64_t *)v13;
  v15 = (_QWORD *)specialized closure #1 in FormatterCache.formatter(for:creator:)(v13, (uint64_t)&v83);
  v59 = v14;
  v16 = v14;
  v17 = v12;
  os_unfair_lock_unlock(v16);
  swift_release();
  if (v15 != (_QWORD *)1)
    goto LABEL_56;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v60(ObjectType, v5);
  v11(&v83, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)&v83, (uint64_t)v67, &demangling cache variable for type metadata for LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  type metadata accessor for ICUMeasurementNumberFormatter();
  v15 = (_QWORD *)swift_allocObject();
  v15[3] = __src;
  v15[4] = a2;
  swift_bridgeObjectRetain();
  v18 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)__src, a2);
  v19 = swift_bridgeObjectRelease();
  LODWORD(v65[0]) = 0;
  if (v18[2] >> 31)
  {
    __break(1u);
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v20 = unumf_openForSkeletonAndLocale();
    swift_release();
    swift_release();
    LOBYTE(v11) = (_BYTE)v57;
    v21 = v59;
    if (v20)
    {
      v15[2] = v20;
    }
    else
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ICUNumberFormatterBase();
      swift_deallocPartialClassInstance();
      v15 = 0;
    }
    swift_retain();
    os_unfair_lock_lock(v59);
    if (v56 >= *(_QWORD *)(*(_QWORD *)(v12 + 16) + 16))
      swift_bridgeObjectRetain();
    else
      *v57 = MEMORY[0x1E0DEE9E0];
    v91 = v76;
    v92[0] = v77[0];
    *(_OWORD *)((char *)v92 + 12) = *(_OWORD *)((char *)v77 + 12);
    v87 = v72;
    v88 = v73;
    v89 = v74;
    v90 = v75;
    v83 = v68;
    v84 = v69;
    v85 = v70;
    v86 = v71;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v64 = *v57;
    v12 = *v57;
    *v57 = 0x8000000000000000;
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(&v83);
    v24 = *(_QWORD *)(v12 + 16);
    v25 = (v23 & 1) == 0;
    v26 = __OFADD__(v24, v25);
    v27 = v24 + v25;
    if (!v26)
    {
      LOBYTE(v11) = v23;
      if (*(_QWORD *)(v12 + 24) < v27)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
        v28 = v64;
        v19 = specialized __RawDictionaryStorage.find<A>(_:)(&v83);
        if ((v11 & 1) == (v29 & 1))
          goto LABEL_17;
        v19 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v28 = v12;
LABEL_17:
        if ((v11 & 1) != 0)
        {
LABEL_18:
          v30 = *(_QWORD *)(v28 + 56);
          v31 = 8 * v19;
          swift_release();
          *(_QWORD *)(v30 + v31) = v15;
LABEL_55:
          *(_QWORD *)(v17 + 16) = v28;
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock(v21);
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of ICUDateIntervalFormatter??(1);
LABEL_56:
          swift_release();
          outlined release of ICUByteCountNumberFormatter.Signature((uint64_t)&v79);
          return (char *)v15;
        }
LABEL_54:
        specialized _NativeDictionary._insert(at:key:value:)(v19, &v83, v15, v28);
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v83);
        goto LABEL_55;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  v58 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUMeasurementNumberFormatter.Signature, ICUMeasurementNumberFormatter?>);
  v32 = static _DictionaryStorage.copy(original:)();
  v28 = v32;
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_53:
    swift_bridgeObjectRelease();
    v19 = v58;
    v21 = v59;
    if ((v11 & 1) != 0)
      goto LABEL_18;
    goto LABEL_54;
  }
  result = (char *)(v32 + 64);
  __srca = (char *)(v12 + 64);
  v34 = (unint64_t)((1 << *(_BYTE *)(v28 + 32)) + 63) >> 6;
  if (v28 != v12 || result >= &__srca[8 * v34])
    result = (char *)memmove(result, __srca, 8 * v34);
  v35 = 0;
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(v12 + 16);
  v36 = 1 << *(_BYTE *)(v12 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & *(_QWORD *)(v12 + 64);
  v61 = (unint64_t)(v36 + 63) >> 6;
  while (1)
  {
    if (v38)
    {
      v39 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v40 = v39 | (v35 << 6);
      goto LABEL_29;
    }
    v52 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v52 >= v61)
      goto LABEL_53;
    v53 = *(_QWORD *)&__srca[8 * v52];
    ++v35;
    if (!v53)
    {
      v35 = v52 + 1;
      if (v52 + 1 >= v61)
        goto LABEL_53;
      v53 = *(_QWORD *)&__srca[8 * v35];
      if (!v53)
      {
        v35 = v52 + 2;
        if (v52 + 2 >= v61)
          goto LABEL_53;
        v53 = *(_QWORD *)&__srca[8 * v35];
        if (!v53)
        {
          v35 = v52 + 3;
          if (v52 + 3 >= v61)
            goto LABEL_53;
          v53 = *(_QWORD *)&__srca[8 * v35];
          if (!v53)
          {
            v35 = v52 + 4;
            if (v52 + 4 >= v61)
              goto LABEL_53;
            v53 = *(_QWORD *)&__srca[8 * v35];
            if (!v53)
            {
              v35 = v52 + 5;
              if (v52 + 5 >= v61)
                goto LABEL_53;
              v53 = *(_QWORD *)&__srca[8 * v35];
              if (!v53)
              {
                v35 = v52 + 6;
                if (v52 + 6 >= v61)
                  goto LABEL_53;
                v53 = *(_QWORD *)&__srca[8 * v35];
                if (!v53)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_52:
    v38 = (v53 - 1) & v53;
    v40 = __clz(__rbit64(v53)) + (v35 << 6);
LABEL_29:
    v41 = (_OWORD *)(*(_QWORD *)(v12 + 48) + 176 * v40);
    v42 = v41[3];
    v43 = v41[4];
    v44 = v41[6];
    v65[5] = v41[5];
    v65[6] = v44;
    v65[3] = v42;
    v65[4] = v43;
    v45 = v41[7];
    v46 = v41[8];
    v47 = v41[9];
    *(_OWORD *)&v66[12] = *(_OWORD *)((char *)v41 + 156);
    v65[8] = v46;
    *(_OWORD *)v66 = v47;
    v65[7] = v45;
    v49 = v41[1];
    v48 = v41[2];
    v65[0] = *v41;
    v65[1] = v49;
    v65[2] = v48;
    v50 = 8 * v40;
    v51 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v40);
    memmove((void *)(*(_QWORD *)(v28 + 48) + 176 * v40), v41, 0xACuLL);
    *(_QWORD *)(*(_QWORD *)(v28 + 56) + v50) = v51;
    outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)v65);
    result = (char *)swift_retain();
  }
  v54 = v52 + 7;
  if (v54 >= v61)
    goto LABEL_53;
  v55 = v17;
  v53 = *(_QWORD *)&__srca[8 * v54];
  if (v53)
  {
    v35 = v54;
    goto LABEL_52;
  }
  while (1)
  {
    v35 = v54 + 1;
    if (__OFADD__(v54, 1))
      break;
    v17 = v55;
    if (v35 >= v61)
      goto LABEL_53;
    v53 = *(_QWORD *)&__srca[8 * v35];
    ++v54;
    if (v53)
      goto LABEL_52;
  }
LABEL_58:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ICUMeasurementNumberFormatter()
{
  return objc_opt_self();
}

uint64_t outlined consume of ICUDateIntervalFormatter??(uint64_t result)
{
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t outlined retain of ICUByteCountNumberFormatter.Signature(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v10 = *(_OWORD *)(a1 + 112);
  v11 = *(_OWORD *)(a1 + 96);
  v9 = *(_OWORD *)(a1 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of LocalePreferences?(v13, v12, v2, v3, v4, v5, v6, v7, (void *)v11, *((void **)&v11 + 1), (void *)v10, *((void **)&v10 + 1), (void *)v9);
  return a1;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  Swift::UInt8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  Swift::UInt v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  Swift::UInt v61;
  Swift::UInt v62;
  int64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  Swift::UInt v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  Swift::UInt v77;
  Swift::UInt v78;
  int64_t v79;
  unint64_t v80;
  int64_t v81;
  __int128 v82;
  __int128 v83;
  void *v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  Swift::UInt v100;
  Swift::UInt v101;
  Swift::UInt8 v102;
  Swift::UInt8 v103;
  Swift::UInt8 v104;
  Swift::Int v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  _QWORD *v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  _BYTE v145[144];
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _OWORD v155[2];
  _BYTE v156[160];

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_135;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v114 = v3;
  v115 = (_QWORD *)(v6 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v119 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  v117 = v8;
  v118 = v6;
  v116 = a2;
LABEL_8:
  if (v11)
  {
    v124 = (v11 - 1) & v11;
    v25 = __clz(__rbit64(v11)) | (v13 << 6);
  }
  else
  {
    v26 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_140;
    if (v26 >= v119)
      goto LABEL_130;
    v27 = v115[v26];
    ++v13;
    if (!v27)
    {
      v13 = v26 + 1;
      if (v26 + 1 >= v119)
        goto LABEL_130;
      v27 = v115[v13];
      if (!v27)
      {
        v28 = v26 + 2;
        if (v28 >= v119)
          goto LABEL_130;
        v27 = v115[v28];
        if (!v27)
        {
          while (1)
          {
            v13 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_141;
            if (v13 >= v119)
              break;
            v27 = v115[v13];
            ++v28;
            if (v27)
              goto LABEL_21;
          }
LABEL_130:
          swift_release();
          v4 = v114;
          if ((a2 & 1) != 0)
          {
            v113 = 1 << *(_BYTE *)(v6 + 32);
            if (v113 >= 64)
              bzero(v115, ((unint64_t)(v113 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v115 = -1 << v113;
            *(_QWORD *)(v6 + 16) = 0;
          }
LABEL_135:
          swift_release();
          *v4 = v8;
          return;
        }
        v13 = v28;
      }
    }
LABEL_21:
    v124 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v13 << 6);
  }
  v125 = v13;
  v29 = *(_QWORD *)(v6 + 48) + 176 * v25;
  if ((a2 & 1) != 0)
  {
    v31 = *(_QWORD *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    v32 = *(_QWORD *)(v29 + 16);
    v33 = *(_QWORD *)(v29 + 24);
    outlined init with take of LocalePreferences?(v29 + 32, (uint64_t)&v146, &demangling cache variable for type metadata for LocalePreferences?);
    v123 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v25);
    v34 = &v146;
  }
  else
  {
    v35 = *(_OWORD *)(v29 + 48);
    v36 = *(_OWORD *)(v29 + 64);
    v37 = *(_OWORD *)(v29 + 96);
    v151 = *(_OWORD *)(v29 + 80);
    v152 = v37;
    v149 = v35;
    v150 = v36;
    v38 = *(_OWORD *)(v29 + 112);
    v39 = *(_OWORD *)(v29 + 128);
    v40 = *(_OWORD *)(v29 + 144);
    *(_OWORD *)((char *)v155 + 12) = *(_OWORD *)(v29 + 156);
    v154 = v39;
    v155[0] = v40;
    v153 = v38;
    v42 = *(_OWORD *)(v29 + 16);
    v41 = *(_OWORD *)(v29 + 32);
    v146 = *(_OWORD *)v29;
    v147 = v42;
    v148 = v41;
    v43 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v25);
    v33 = *((_QWORD *)&v42 + 1);
    v32 = v42;
    v30 = *((_QWORD *)&v146 + 1);
    v31 = v146;
    outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v146);
    v123 = v43;
    swift_retain();
    v34 = &v148;
  }
  outlined init with take of LocalePreferences?((uint64_t)v34, (uint64_t)v156, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  v122 = v31;
  String.hash(into:)();
  v121 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v156, (uint64_t)v145, &demangling cache variable for type metadata for LocalePreferences?);
  v44 = v33;
  v126 = v32;
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v145) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_121;
  }
  outlined init with take of LocalePreferences?((uint64_t)v156, (uint64_t)&v146, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v146 == 2)
  {
    v45 = 0;
  }
  else
  {
    v45 = v146 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v45);
  v46 = *((_QWORD *)&v146 + 1);
  if (!*((_QWORD *)&v146 + 1))
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v146);
    v49 = &v146;
    goto LABEL_39;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v46 + 16));
  v47 = *(_QWORD *)(v46 + 16);
  if (!v47)
  {
    outlined init with take of LocalePreferences?((uint64_t)v156, (uint64_t)&v135, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v156, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v49 = &v135;
LABEL_39:
    outlined retain of LocalePreferences(v49);
    if (!*((_QWORD *)&v147 + 1))
      goto LABEL_35;
LABEL_40:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v148 + 1))
      goto LABEL_36;
LABEL_41:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  outlined retain of LocalePreferences?((uint64_t)v156, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v156, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v48 = v46 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v48 += 16;
    --v47;
  }
  while (v47);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v147 + 1))
    goto LABEL_40;
LABEL_35:
  Hasher._combine(_:)(0);
  if (*((_QWORD *)&v148 + 1))
    goto LABEL_41;
LABEL_36:
  Hasher._combine(_:)(0);
LABEL_42:
  v50 = v149;
  v120 = v33;
  if ((_QWORD)v149)
  {
    Hasher._combine(_:)(1u);
    v51 = 0;
    v52 = 0;
    v53 = v50 + 64;
    v54 = 1 << *(_BYTE *)(v50 + 32);
    if (v54 < 64)
      v55 = ~(-1 << v54);
    else
      v55 = -1;
    v56 = v55 & *(_QWORD *)(v50 + 64);
    v57 = (unint64_t)(v54 + 63) >> 6;
    v131 = v141;
    v133 = v140;
    v127 = v143;
    v129 = v142;
    v58 = v144;
    while (1)
    {
      if (v56)
      {
        v59 = __clz(__rbit64(v56));
        v56 &= v56 - 1;
        v60 = v59 | (v52 << 6);
      }
      else
      {
        v63 = v52 + 1;
        if (__OFADD__(v52, 1))
        {
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          goto LABEL_138;
        }
        if (v63 >= v57)
          goto LABEL_64;
        v64 = *(_QWORD *)(v53 + 8 * v63);
        ++v52;
        if (!v64)
        {
          v52 = v63 + 1;
          if (v63 + 1 >= v57)
            goto LABEL_64;
          v64 = *(_QWORD *)(v53 + 8 * v52);
          if (!v64)
          {
            v52 = v63 + 2;
            if (v63 + 2 >= v57)
              goto LABEL_64;
            v64 = *(_QWORD *)(v53 + 8 * v52);
            if (!v64)
            {
              v65 = v63 + 3;
              if (v65 >= v57)
              {
LABEL_64:
                swift_bridgeObjectRetain();
                Hasher._combine(_:)(v51);
                swift_bridgeObjectRelease();
                v66 = *((_QWORD *)&v149 + 1);
                if (*((_QWORD *)&v149 + 1))
                  goto LABEL_65;
LABEL_88:
                Hasher._combine(_:)(0);
LABEL_89:
                v82 = v150;
                v83 = v151;
                v84 = (void *)v152;
                if ((_QWORD)v150)
                {
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
                  v85 = *((id *)&v82 + 1);
                  v86 = (id)v83;
                  v87 = *((id *)&v83 + 1);
                  v88 = v84;
                  v89 = (id)v82;
                  _CFObject.hash(into:)();
                  if (*((_QWORD *)&v82 + 1))
                    goto LABEL_91;
LABEL_96:
                  Hasher._combine(_:)(0);
                  if (!(_QWORD)v83)
                    goto LABEL_97;
LABEL_92:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
                  v91 = (id)v83;
                  _CFObject.hash(into:)();

                  if (*((_QWORD *)&v83 + 1))
                    goto LABEL_93;
LABEL_98:
                  Hasher._combine(_:)(0);
                  if (!v84)
                    goto LABEL_99;
LABEL_94:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
                  v93 = v84;
                  _CFObject.hash(into:)();

                }
                else
                {
                  Hasher._combine(_:)(0);
                  v94 = v84;
                  v95 = *((id *)&v82 + 1);
                  v96 = (id)v83;
                  v97 = *((id *)&v83 + 1);
                  if (!*((_QWORD *)&v82 + 1))
                    goto LABEL_96;
LABEL_91:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
                  v90 = *((id *)&v82 + 1);
                  _CFObject.hash(into:)();

                  if ((_QWORD)v83)
                    goto LABEL_92;
LABEL_97:
                  Hasher._combine(_:)(0);
                  if (!*((_QWORD *)&v83 + 1))
                    goto LABEL_98;
LABEL_93:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
                  v92 = *((id *)&v83 + 1);
                  _CFObject.hash(into:)();

                  if (v84)
                    goto LABEL_94;
LABEL_99:
                  Hasher._combine(_:)(0);
                  v93 = 0;
                }
                v44 = v120;

                v98 = *((_QWORD *)&v152 + 1);
                if (v98)
                {
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  specialized Dictionary<>.hash(into:)((uint64_t)&v140, v98);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  Hasher._combine(_:)(0);
                }
                v99 = v153;
                if ((_QWORD)v153)
                {
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  specialized Dictionary<>.hash(into:)((uint64_t)&v140, v99);
                  swift_bridgeObjectRelease();
                  if ((_QWORD)v154)
                    goto LABEL_105;
LABEL_107:
                  Hasher._combine(_:)(0);
                }
                else
                {
                  Hasher._combine(_:)(0);
                  if (!(_QWORD)v154)
                    goto LABEL_107;
LABEL_105:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
                }
                if (BYTE8(v154) == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  v100 = BYTE8(v154) & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v100);
                }
                if (BYTE9(v154) == 2)
                {
                  Hasher._combine(_:)(0);
                }
                else
                {
                  v101 = BYTE9(v154) & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v101);
                }
                if (BYTE10(v154) == 2)
                {
                  v102 = 0;
                }
                else
                {
                  v102 = BYTE10(v154) & 1;
                  Hasher._combine(_:)(1u);
                }
                Hasher._combine(_:)(v102);
                if (BYTE11(v154) == 2)
                {
                  v103 = 0;
                }
                else
                {
                  v104 = BYTE11(v154) & 1;
                  Hasher._combine(_:)(1u);
                  v103 = v104;
                }
                Hasher._combine(_:)(v103);
                outlined retain of LocalePreferences?((uint64_t)v156, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?((uint64_t)v156, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
                v8 = v117;
                v6 = v118;
                a2 = v116;
LABEL_121:
                v105 = Hasher._finalize()();
                v106 = -1 << *(_BYTE *)(v8 + 32);
                v107 = v105 & ~v106;
                v108 = v107 >> 6;
                if (((-1 << v107) & ~*(_QWORD *)(v12 + 8 * (v107 >> 6))) != 0)
                {
                  v14 = __clz(__rbit64((-1 << v107) & ~*(_QWORD *)(v12 + 8 * (v107 >> 6)))) | v107 & 0x7FFFFFFFFFFFFFC0;
                  v15 = v126;
                }
                else
                {
                  v109 = 0;
                  v110 = (unint64_t)(63 - v106) >> 6;
                  v15 = v126;
                  do
                  {
                    if (++v108 == v110 && (v109 & 1) != 0)
                    {
                      __break(1u);
                      goto LABEL_136;
                    }
                    v111 = v108 == v110;
                    if (v108 == v110)
                      v108 = 0;
                    v109 |= v111;
                    v112 = *(_QWORD *)(v12 + 8 * v108);
                  }
                  while (v112 == -1);
                  v14 = __clz(__rbit64(~v112)) + (v108 << 6);
                }
                *(_QWORD *)&v146 = v122;
                *((_QWORD *)&v146 + 1) = v121;
                *(_QWORD *)&v147 = v15;
                *((_QWORD *)&v147 + 1) = v44;
                outlined init with take of LocalePreferences?((uint64_t)v156, (uint64_t)&v148, &demangling cache variable for type metadata for LocalePreferences?);
                *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
                v16 = (_OWORD *)(*(_QWORD *)(v8 + 48) + 176 * v14);
                v18 = v147;
                v17 = v148;
                *v16 = v146;
                v16[1] = v18;
                v16[2] = v17;
                v19 = v152;
                v21 = v149;
                v20 = v150;
                v16[5] = v151;
                v16[6] = v19;
                v16[3] = v21;
                v16[4] = v20;
                v22 = v153;
                v23 = v154;
                v24 = v155[0];
                *(_OWORD *)((char *)v16 + 156) = *(_OWORD *)((char *)v155 + 12);
                v16[8] = v23;
                v16[9] = v24;
                v16[7] = v22;
                *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14) = v123;
                ++*(_QWORD *)(v8 + 16);
                v11 = v124;
                v13 = v125;
                goto LABEL_8;
              }
              v64 = *(_QWORD *)(v53 + 8 * v65);
              if (!v64)
              {
                while (1)
                {
                  v52 = v65 + 1;
                  if (__OFADD__(v65, 1))
                    break;
                  if (v52 >= v57)
                    goto LABEL_64;
                  v64 = *(_QWORD *)(v53 + 8 * v52);
                  ++v65;
                  if (v64)
                    goto LABEL_63;
                }
LABEL_138:
                __break(1u);
                goto LABEL_139;
              }
              v52 = v65;
            }
          }
        }
LABEL_63:
        v56 = (v64 - 1) & v64;
        v60 = __clz(__rbit64(v64)) + (v52 << 6);
      }
      v61 = *(unsigned __int8 *)(*(_QWORD *)(v50 + 48) + v60);
      v62 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * v60);
      v135 = v133;
      v136 = v131;
      v137 = v129;
      v138 = v127;
      v139 = v58;
      Hasher._combine(_:)(v61);
      Hasher._combine(_:)(v62);
      v51 ^= Hasher._finalize()();
    }
  }
  Hasher._combine(_:)(0);
  v66 = *((_QWORD *)&v149 + 1);
  if (!*((_QWORD *)&v149 + 1))
    goto LABEL_88;
LABEL_65:
  Hasher._combine(_:)(1u);
  v67 = 0;
  v68 = 0;
  v69 = v66 + 64;
  v70 = 1 << *(_BYTE *)(v66 + 32);
  if (v70 < 64)
    v71 = ~(-1 << v70);
  else
    v71 = -1;
  v72 = v71 & *(_QWORD *)(v66 + 64);
  v73 = (unint64_t)(v70 + 63) >> 6;
  v132 = v141;
  v134 = v140;
  v128 = v143;
  v130 = v142;
  v74 = v144;
  while (1)
  {
    if (v72)
    {
      v75 = __clz(__rbit64(v72));
      v72 &= v72 - 1;
      v76 = v75 | (v68 << 6);
      goto LABEL_70;
    }
    v79 = v68 + 1;
    if (__OFADD__(v68, 1))
      goto LABEL_137;
    if (v79 >= v73)
    {
LABEL_86:
      swift_bridgeObjectRetain();
      Hasher._combine(_:)(v67);
      swift_bridgeObjectRelease();
      goto LABEL_89;
    }
    v80 = *(_QWORD *)(v69 + 8 * v79);
    ++v68;
    if (!v80)
    {
      v68 = v79 + 1;
      if (v79 + 1 >= v73)
        goto LABEL_86;
      v80 = *(_QWORD *)(v69 + 8 * v68);
      if (!v80)
      {
        v68 = v79 + 2;
        if (v79 + 2 >= v73)
          goto LABEL_86;
        v80 = *(_QWORD *)(v69 + 8 * v68);
        if (!v80)
          break;
      }
    }
LABEL_85:
    v72 = (v80 - 1) & v80;
    v76 = __clz(__rbit64(v80)) + (v68 << 6);
LABEL_70:
    v77 = *(unsigned __int8 *)(*(_QWORD *)(v66 + 48) + v76);
    v78 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v76);
    v135 = v134;
    v136 = v132;
    v137 = v130;
    v138 = v128;
    v139 = v74;
    Hasher._combine(_:)(v77);
    Hasher._combine(_:)(v78);
    v67 ^= Hasher._finalize()();
  }
  v81 = v79 + 3;
  if (v81 >= v73)
    goto LABEL_86;
  v80 = *(_QWORD *)(v69 + 8 * v81);
  if (v80)
  {
    v68 = v81;
    goto LABEL_85;
  }
  while (1)
  {
    v68 = v81 + 1;
    if (__OFADD__(v81, 1))
      break;
    if (v68 >= v73)
      goto LABEL_86;
    v80 = *(_QWORD *)(v69 + 8 * v68);
    ++v81;
    if (v80)
      goto LABEL_85;
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
}

uint64_t NSNotificationCenter.Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD v12[5];

  v6 = *(void **)v4;
  v7 = *(void **)(v4 + 8);
  v8 = *(_QWORD *)(v4 + 16);
  v9 = type metadata accessor for Notification.Subscription(0, a2, a3, a4);
  swift_allocObject();
  swift_unknownObjectRetain();
  v10 = specialized Notification.Subscription.init(_:_:_:_:)(v6, v7, v8, a1);
  v12[3] = v9;
  v12[4] = MEMORY[0x186DA9D64](&protocol conformance descriptor for Notification.Subscription<A>, v9);
  v12[0] = v10;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t *specialized Notification.Subscription.init(_:_:_:_:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _DWORD *v15;
  _QWORD *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v28 = a4;
  v30 = *v4;
  v8 = *(_QWORD *)(v30 + 80);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v27 - v13;
  v15 = (_DWORD *)swift_slowAlloc();
  *v15 = 0;
  v4[2] = (uint64_t)v15;
  v16 = (_QWORD *)swift_slowAlloc();
  *v16 = 0;
  v4[3] = (uint64_t)v16;
  v4[4] = 0;
  v4[5] = (uint64_t)a1;
  v4[6] = (uint64_t)a2;
  v4[7] = a3;
  v4[8] = 0;
  v29 = a3;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v18 = a1;
  v19 = a2;
  swift_unknownObjectRetain();
  v17(v14, v28, v8);
  v20 = swift_allocObject();
  swift_weakInit();
  v17(v11, (uint64_t)v14, v8);
  v21 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v22 = (char *)swift_allocObject();
  *((_QWORD *)v22 + 2) = v8;
  *((_QWORD *)v22 + 3) = *(_QWORD *)(v30 + 88);
  *((_QWORD *)v22 + 4) = v20;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v22[v21], v11, v8);
  aBlock[4] = partial apply for closure #1 in Notification.Subscription.init(_:_:_:_:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  aBlock[3] = &block_descriptor_13;
  v23 = _Block_copy(aBlock);
  v24 = v19;
  swift_release();
  v25 = objc_msgSend(v18, sel_addObserverForName_object_queue_usingBlock_, v24, v29, 0, v23);
  _Block_release(v23);

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  v4[8] = (uint64_t)v25;
  swift_unknownObjectRelease();
  return v4;
}

uint64_t type metadata accessor for Notification.Subscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Notification.Subscription);
}

id NSString.init(string:)(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithString_, a1);
}

_QWORD *PropertyListEncoder.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x1E0DEE9E0];
  v0[2] = 200;
  v0[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  v0[4] = v2;
  return v0;
}

uint64_t Locale.Language.region.getter@<X0>(uint64_t *a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v11;
  Swift::String v12;
  _OWORD v14[4];
  __int128 v15;
  __int128 v16;

  v3 = v1[5];
  v15 = v1[4];
  v16 = v3;
  v4 = v1[3];
  v14[2] = v1[2];
  v14[3] = v4;
  v5 = v1[1];
  v14[0] = *v1;
  v14[1] = v5;
  v6 = v15;
  v8 = *((_QWORD *)&v15 + 1);
  v7 = v15;
  object = (void *)*((_QWORD *)&v16 + 1);
  countAndFlagsBits = v16;
  if (!*((_QWORD *)&v15 + 1))
  {
    outlined retain of Locale.Language((uint64_t *)v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    v7 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)v14);
    v8 = v11;
    outlined retain of Locale.Language((uint64_t *)v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v8)
    {
      v12 = String.uppercased()();
      object = v12._object;
      countAndFlagsBits = v12._countAndFlagsBits;
    }
    else
    {
      v7 = 0;
      countAndFlagsBits = 0;
      object = 0;
    }
  }
  *a1 = v7;
  a1[1] = v8;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  return outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
}

double static NumberFormatStyleConfiguration.Precision.fractionLength(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a2 = xmmword_18205FD60;
  *(_OWORD *)(a2 + 16) = xmmword_18205FD60;
  *(_QWORD *)(a2 + 32) = a1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = a1;
  *(_BYTE *)(a2 + 56) = 0x80;
  return result;
}

uint64_t dispatch thunk of JSONEncoder.keyEncodingStrategy.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt16(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;

  v3 = objc_msgSend(a1, sel_unsignedShortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(_BYTE *)(a2 + 2) = 0;
  }
  return v5 & 1;
}

void static JSONEncoder.OutputFormatting.sortedKeys.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

double static Date.- infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result;

  result = *a1 - a3;
  *a2 = result;
  return result;
}

BOOL static Set._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  swift_unknownObjectRetain();
  v8 = static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!v8)
  {
    v9 = (unint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
    v8 = ~(v9 >> 1) & 0x4000000000000000 | v9;
  }
  _swift_isClassOrObjCExistentialType();
  v10 = specialized _setDownCastConditional<A, B>(_:)(v8, a3, a4);
  swift_bridgeObjectRelease();
  *a2 = v10;
  return v10 != 0;
}

void base witness table accessor for Cancellable in NSObject.KVOSubscription<A, B, C>()
{
  JUMPOUT(0x186DA9D64);
}

void sub_181926AA0()
{
  __break(1u);
}

void sub_181926B04()
{
  objc_end_catch();
  JUMPOUT(0x181926AD0);
}

void sub_181927160(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  int v3;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    if (v3)
      free(v2);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_18192718C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void _doPatternNormalization(const __CFString *a1, void **a2, unsigned __int8 *a3, int a4, CFStringRef *a5, CFStringCompareFlags a6, CFIndex *a7, size_t a8, CFStringNormalizationForm theForm)
{
  CFIndex *v10;
  _BYTE *v13;
  UniChar *v15;
  int v16;
  CFIndex v17;
  CFStringCompareFlags v18;
  CFMutableStringRef MutableWithExternalCharactersNoCopy;
  CFIndex Length;
  const char *CStringPtr;
  int64_t v22;
  CFIndex v23;
  CFIndex v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  CFIndex v28;
  UniChar v29;
  BOOL v30;
  uint64_t v31;
  CFIndex v32;
  int64_t v33;
  CFIndex v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  const char *v40;
  CFIndex v41;
  UniChar *v42;
  CFIndex *v43;
  _BYTE *v44;
  CFStringCompareFlags v46;
  UniChar buffer[8];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  CFStringRef theString;
  const UniChar *CharactersPtr;
  const char *v57;
  uint64_t v58;
  CFIndex v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  CFRange v63;
  CFRange v64;
  CFRange v65;

  v10 = a7;
  v46 = a6;
  v13 = a3;
  v62 = *MEMORY[0x1E0C80C00];
  v15 = (UniChar *)*a2;
  v16 = *a3;
  v17 = *a7;
  bzero(*a2, a8);
  v63.location = 0;
  v63.length = v17;
  CFStringGetCharacters(a1, v63, v15);
  v18 = v46;
  v15[v17] = 0;
  *a5 = CFStringCreateWithCharacters(0, v15, v17);
  if (a4)
  {
    +[_NSPredicateOperatorUtilities copyRegexFindSafePattern:toBuffer:](_NSPredicateOperatorUtilities, "copyRegexFindSafePattern:toBuffer:", a1, v15);
    v17 = u_strlen(v15);
  }
  MutableWithExternalCharactersNoCopy = CFStringCreateMutableWithExternalCharactersNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v15, v17, a8, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (v18)
  {
    if ((v18 & 0x100) != 0)
    {
      objc_opt_self();
      Length = CFStringGetLength(MutableWithExternalCharactersNoCopy);
      theString = MutableWithExternalCharactersNoCopy;
      v58 = 0;
      v59 = Length;
      CharactersPtr = CFStringGetCharactersPtr(MutableWithExternalCharactersNoCopy);
      v44 = v13;
      v43 = v10;
      if (CharactersPtr)
        CStringPtr = 0;
      else
        CStringPtr = CFStringGetCStringPtr(MutableWithExternalCharactersNoCopy, 0x600u);
      v60 = 0;
      v61 = 0;
      v57 = CStringPtr;
      if (Length >= 1)
      {
        v22 = 0;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v23 = -Length;
        v24 = Length + 64;
        v49 = 0u;
        v50 = 0u;
        v25 = Length;
        *(_OWORD *)buffer = 0u;
        v48 = 0u;
        do
        {
          v26 = v25;
          if (v25 >= 5)
            v27 = 5;
          else
            v27 = v25;
          --v25;
          v28 = v59;
          if (v59 >= v26)
          {
            if (CharactersPtr)
            {
              v29 = CharactersPtr[v26 - 1 + v58];
            }
            else if (v57)
            {
              v29 = v57[v58 - 1 + v26];
            }
            else
            {
              v30 = v61 >= v26 && v22 < v26;
              if (!v30)
              {
                v31 = v27 + v23;
                v32 = v24 - v27;
                v33 = v26 - v27;
                v34 = v33 + 64;
                if (v33 + 64 >= v59)
                  v34 = v59;
                v60 = v33;
                v61 = v34;
                if (v59 >= v32)
                  v28 = v32;
                v64.length = v28 + v31;
                v64.location = v33 + v58;
                CFStringGetCharacters(theString, v64, buffer);
                v22 = v60;
              }
              v29 = buffer[v26 - 1 - v22];
            }
            v35 = v29;
            v36 = v29 - 65284;
            v30 = v36 > 0x3A;
            v37 = (1 << v36) & 0x580000008000CF1;
            if (!v30 && v37 != 0 || (v35 - 65371) < 3)
            {
              CFStringInsert(MutableWithExternalCharactersNoCopy, v25, CFSTR("\\"));
              theString = MutableWithExternalCharactersNoCopy;
              v58 = 0;
              v59 = Length;
              CharactersPtr = CFStringGetCharactersPtr(MutableWithExternalCharactersNoCopy);
              if (CharactersPtr)
                v40 = 0;
              else
                v40 = CFStringGetCStringPtr(MutableWithExternalCharactersNoCopy, 0x600u);
              v22 = 0;
              v57 = v40;
              v60 = 0;
              v61 = 0;
            }
          }
          ++v23;
          --v24;
        }
        while (v25 + 1 > 1);
      }
      v13 = v44;
      v10 = v43;
      v18 = v46;
    }
    CFStringFold(MutableWithExternalCharactersNoCopy, v18, 0);
  }
  CFStringNormalize(MutableWithExternalCharactersNoCopy, theForm);
  if (CFStringGetCharactersPtr(MutableWithExternalCharactersNoCopy) == v15)
  {
    v41 = CFStringGetLength(MutableWithExternalCharactersNoCopy);
  }
  else
  {
    if (v16)
      free(v15);
    v41 = CFStringGetLength(MutableWithExternalCharactersNoCopy);
    v42 = (UniChar *)malloc_type_malloc(2 * v41 + 2, 0x1000040BDFB0063uLL);
    *a2 = v42;
    *v13 = 1;
    v65.location = 0;
    v65.length = v41;
    CFStringGetCharacters(MutableWithExternalCharactersNoCopy, v65, v42);
    v42[v41] = 0;
  }
  *v10 = v41;
  CFRelease(MutableWithExternalCharactersNoCopy);
}

void sub_1819275AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12)
{
  _BYTE *v12;
  void *v13;
  int v14;
  id v15;
  int v16;

  v16 = v14;
  if (a2 == 1)
  {
    v15 = objc_begin_catch(exception_object);
    if (v16)
      free(v13);
    *v12 = 0;
    objc_exception_throw(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t URLRequest.httpBody.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v10;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(void **)(*(_QWORD *)v2 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v6 = swift_allocObject();
    swift_retain();
    v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v6 + 16) = v10;
    *(_QWORD *)v2 = v6;
    swift_release();
  }
  v8 = *(id *)(*(_QWORD *)v2 + 16);
  closure #1 in URLRequest.httpBody.setter(v8, a1, a2);

  return outlined consume of Data?(a1, a2);
}

void Data._Representation.resetBytes(in:)()
{
  __asm { BR              X12 }
}

void sub_18192779C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;

  v10 = v1;
  LOWORD(v11) = a1;
  BYTE2(v11) = BYTE2(a1);
  HIBYTE(v11) = BYTE3(a1);
  v12 = BYTE4(a1);
  v14 = BYTE6(a1);
  v5 = BYTE6(a1);
  v13 = BYTE5(a1);
  if (BYTE6(a1) >= v3)
  {
    if (BYTE6(a1) < v4)
    {
      __break(1u);
      JUMPOUT(0x181927AC0);
    }
    if (__OFSUB__(v3, v4))
    {
      __break(1u);
      JUMPOUT(0x181927AC8);
    }
    bzero((char *)&v10 + v4, v3 - v4);
    v7 = v10;
    v8 = v11 | ((unint64_t)v12 << 32) | ((unint64_t)v13 << 40) | ((unint64_t)v14 << 48);
  }
  else
  {
    v15 = v1;
    LOWORD(v16) = a1;
    BYTE2(v16) = BYTE2(a1);
    BYTE3(v16) = BYTE3(a1);
    BYTE4(v16) = BYTE4(a1);
    BYTE5(v16) = BYTE5(a1);
    type metadata accessor for __DataStorage();
    v6 = swift_allocObject();
    __DataStorage.init(bytes:length:)((unint64_t)&v15, v5);
    if (v3 > 2147483646)
    {
      type metadata accessor for Data.RangeReference();
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = v5;
      v15 = v9;
      v16 = v6;
      Data.LargeSlice.resetBytes(in:)(v4, v3);
      v7 = v15;
      v8 = v16 | 0x8000000000000000;
    }
    else
    {
      LODWORD(v15) = 0;
      HIDWORD(v15) = v5;
      v16 = v6;
      Data.InlineSlice.resetBytes(in:)(v4, v3);
      v7 = v15;
      v8 = v16 | 0x4000000000000000;
    }
  }
  *v2 = v7;
  v2[1] = v8;
}

void Data._Representation.count.setter()
{
  __asm { BR              X10 }
}

void sub_181927B74()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v10 = v1;
  LOWORD(v11) = v3;
  BYTE2(v11) = BYTE2(v3);
  v4 = HIDWORD(v3);
  HIBYTE(v11) = BYTE3(v3);
  v5 = v3 >> 40;
  v12 = BYTE4(v3);
  v13 = BYTE5(v3);
  if (v2)
  {
    if (v2 < 15)
    {
      if (v2 == BYTE6(v3))
        return;
      if (v2 <= BYTE6(v3))
      {
        if (v2 < 0)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }
      }
      else
      {
        v14 = v2;
        bzero((char *)&v10 + BYTE6(v3), v2 - BYTE6(v3));
        LOBYTE(v4) = v12;
        LOBYTE(v5) = v13;
        LOBYTE(v2) = v14;
      }
      v7 = v10;
      v8 = v11 | ((unint64_t)v4 << 32) | ((unint64_t)v5 << 40) | ((unint64_t)v2 << 48);
    }
    else
    {
      v15 = v1;
      LOWORD(v16) = v3;
      BYTE2(v16) = BYTE2(v3);
      BYTE3(v16) = BYTE3(v3);
      BYTE4(v16) = BYTE4(v3);
      BYTE5(v16) = BYTE5(v3);
      type metadata accessor for __DataStorage();
      v6 = swift_allocObject();
      __DataStorage.init(bytes:length:)((unint64_t)&v15, BYTE6(v3));
      if ((unint64_t)v2 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        v9 = swift_allocObject();
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)(v9 + 24) = BYTE6(v3);
        v15 = v9;
        v16 = v6;
        Data.LargeSlice.count.setter(v2);
        v7 = v15;
        v8 = v16 | 0x8000000000000000;
      }
      else
      {
        LODWORD(v15) = 0;
        HIDWORD(v15) = BYTE6(v3);
        v16 = v6;
        Data.InlineSlice.count.setter(v2);
        v7 = v15;
        v8 = v16 | 0x4000000000000000;
      }
    }
  }
  else
  {
    v7 = 0;
    v8 = 0xC000000000000000;
  }
  *v0 = v7;
  v0[1] = v8;
}

void Data.InlineSlice.count.setter(uint64_t a1)
{
  int *v1;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  Data.InlineSlice.ensureUniqueReference()();
  v3 = *v1;
  v4 = v1[1];
  v5 = v4 - *v1;
  if (__OFSUB__((_DWORD)v4, *v1))
  {
    __break(1u);
    goto LABEL_15;
  }
  v6 = __OFSUB__(a1, v5);
  v7 = a1 - v5;
  if (v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v7 >= 1)
  {
    v8 = v4 + v7;
    if (__OFADD__(v4, v7))
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    if (v8 < v4)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    __DataStorage.resetBytes(in:)(v4, v8);
LABEL_9:
    if (a1 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (a1 <= 0x7FFFFFFF)
      {
        v10 = v3 + a1;
        if (!__OFADD__(v3, (_DWORD)a1))
        {
          if (v10 >= v3)
          {
            *v1 = v3;
            v1[1] = v10;
            return;
          }
          goto LABEL_19;
        }
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v9 = *(_QWORD *)(*((_QWORD *)v1 + 1) + 24);
  if (!__OFADD__(v9, v7))
  {
    __DataStorage.setLength(_:)(v9 + v7);
    goto LABEL_9;
  }
LABEL_22:
  __break(1u);
}

void __DataStorage.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;

  v3 = v2[5];
  v4 = a1 - v3;
  if (__OFSUB__(a1, v3))
  {
    __break(1u);
    goto LABEL_15;
  }
  v5 = a2 - v3;
  if (__OFSUB__(a2, v3))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 < v4)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (__OFSUB__(v5, v4))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return;
  }
  if (v5 != v4)
  {
    if (v2[3] >= v5)
    {
      __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(0, 0);
    }
    else
    {
      if (v5 >= v2[4])
        __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(v5, 0);
      v2[3] = v5;
    }
    v6 = v2[2];
    if (v6)
    {
      bzero((void *)(v6 + v4), v5 - v4);
      return;
    }
    goto LABEL_18;
  }
}

uint64_t StringProtocol.data(using:allowLossyConversion:)(uint64_t *a1, char a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  id v9;
  void *v10;
  id v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v13 - v5;
  v7 = *a1;
  if (v7 == 4)
  {
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return Data.init<A>(_:)((uint64_t)v6, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  }
  else
  {
    StringProtocol._ephemeralString.getter();
    v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v10, sel_dataUsingEncoding_allowLossyConversion_, v7, a2 & 1);
    swift_unknownObjectRelease();
    if (v9)
    {
      v11 = v9;
      v9 = specialized Data.init(referencing:)(v11);

    }
  }
  return (uint64_t)v9;
}

uint64_t Data.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30[2];
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v9 = (char *)v26 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v26 - v12;
  v14 = *(_QWORD *)(a2 - 8);
  v16 = MEMORY[0x1E0C80A78](v15);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))((char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v30, (uint64_t)&v32);
    v18 = v34;
    v19 = v35;
    __swift_project_boxed_opaque_existential_1(&v32, v34);
    (*(void (**)(__int128 *__return_ptr, _BYTE *(*)@<X0>(_BYTE *@<X0>, _BYTE *@<X1>, _QWORD *@<X8>), _QWORD, ValueMetadata *, uint64_t, uint64_t))(v19 + 8))(&v29, closure #1 in Data.init<A>(_:), 0, &type metadata for Data._Representation, v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, a2);
    v30[0] = v29;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
  }
  else
  {
    v27 = v10;
    v28 = v14;
    v31 = 0;
    memset(v30, 0, sizeof(v30));
    outlined destroy of ContiguousBytes?((uint64_t)v30);
    dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
    v21 = v32;
    v20 = v33;
    if (v33 >> 60 == 15)
    {
      v26[2] = v32;
      v26[0] = v33;
      v22 = dispatch thunk of Sequence.underestimatedCount.getter();
      *(_QWORD *)&v30[0] = specialized Data._Representation.init(count:)(v22);
      *((_QWORD *)&v30[0] + 1) = v23;
      MEMORY[0x1E0C80A78](*(_QWORD *)&v30[0]);
      v26[-4] = a2;
      v26[-3] = a3;
      v26[1] = v24;
      v26[-2] = v24;
      Data._Representation.withUnsafeMutableBytes<A>(_:)();
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v13, v9, AssociatedTypeWitness);
      __asm { BR              X12 }
    }
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a1, a2);
    *(_QWORD *)&v30[0] = v21;
    *((_QWORD *)&v30[0] + 1) = v20;
  }
  return *(_QWORD *)&v30[0];
}

uint64_t outlined destroy of ContiguousBytes?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized Data._Representation.init(count:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
      {
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)(v1);
      if (v1 > 0x7FFFFFFE)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

void Data._Representation.withUnsafeMutableBytes<A>(_:)()
{
  __asm { BR              X15 }
}

uint64_t sub_1819288AC()
{
  uint64_t (*v0)(uint64_t *, char *);
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v2;
  LOWORD(v7) = v1;
  BYTE2(v7) = BYTE2(v1);
  HIBYTE(v7) = BYTE3(v1);
  v8 = BYTE4(v1);
  v9 = BYTE5(v1);
  v10 = BYTE6(v1);
  result = v0(&v6, (char *)&v6 + BYTE6(v1));
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v3 = v6;
  v3[1] = v5;
  return result;
}

uint64_t Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  int *v1;
  int *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v6 = *v1;
    v5 = v2[1];
    if ((int)v5 < (int)v6)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    v7 = *((_QWORD *)v2 + 1);
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = *(_QWORD *)(v7 + 40);
      v10 = __OFSUB__(v6, v9);
      v11 = v6 - v9;
      if (v10)
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      v12 = v8 + v11;
    }
    else
    {
      v12 = 0;
    }
    v13 = v5 - v6;
    type metadata accessor for __DataStorage();
    v14 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v12, v13, 1, 0, 0, v6);
    *((_QWORD *)v2 + 1) = v14;
    result = swift_release();
  }
  v15 = *v2;
  v16 = v2[1];
  if ((int)v16 < (int)v15)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v17 = (_QWORD *)*((_QWORD *)v2 + 1);
  v18 = v17[2];
  if (!v18)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v19 = v17[5];
  v10 = __OFSUB__(v15, v19);
  v20 = v15 - v19;
  if (v10)
    goto LABEL_15;
  v21 = v16 - v15;
  if (v17[3] < v21)
    v21 = v17[3];
  return a1(v18 + v20, v18 + v20 + v21);
}

uint64_t partial apply for closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #3 in Data.init<A>(_:)(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), a2);
}

uint64_t closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v14[1] = v4;
  swift_getAssociatedTypeWitness();
  v12 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  result = dispatch thunk of Sequence._copyContents(initializing:)();
  *(_QWORD *)(a4 + v12) = result;
  return result;
}

uint64_t specialized Data.init(count:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
      {
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t __DataStorage.init(length:)(uint64_t result)
{
  Swift::Int v1;
  uint64_t v2;
  int64_t v3;
  Swift::Int v4;
  BOOL v5;
  Swift::Int v6;
  int v7;

  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  if (result > 0x3FFFFFFFFFFFFFFELL)
  {
    __break(1u);
LABEL_17:
    result = swift_once();
    goto LABEL_5;
  }
  v1 = result;
  v3 = result;
  if (result <= 0x3FFFFFFF)
  {
    v3 = result + (result >> 2);
    if (__OFADD__(result, result >> 2))
    {
      __break(1u);
LABEL_19:
      result = swift_once();
      goto LABEL_7;
    }
  }
  if (one-time initialization token for vmOpsThreshold != -1)
    goto LABEL_17;
LABEL_5:
  if (v3 < static __DataStorage.vmOpsThreshold)
    goto LABEL_11;
  if (one-time initialization token for _pageSize != -1)
    goto LABEL_19;
LABEL_7:
  v4 = _pageSize + v3;
  if (__OFADD__(_pageSize, v3))
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v5)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (__OFSUB__(_pageSize, 1))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v3 = v6 & ~(_pageSize - 1);
LABEL_11:
  HIWORD(v7) = 0;
  _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v7 + 1);
  if (v1 > 0x20000)
    result = (uint64_t)malloc_type_calloc(1uLL, v3, (unint64_t)HIWORD(v7) << 48);
  else
    result = (uint64_t)malloc_type_malloc(v3, (unint64_t)HIWORD(v7) << 48);
  if (result)
  {
    *(_BYTE *)(v2 + 64) = v1 <= 0x20000;
    *(_QWORD *)(v2 + 16) = result;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = v3;
    *(_QWORD *)(v2 + 40) = 0;
    __DataStorage.setLength(_:)(v1);
    return v2;
  }
LABEL_23:
  __break(1u);
  return result;
}

Swift::Void __swiftcall __DataStorage.setLength(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::Int v4;

  if (*(_QWORD *)(v1 + 32) < a1 || (v3 = *(_QWORD *)(v1 + 16)) == 0)
  {
    __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(a1, 1);
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v1 + 24);
  if (v4 >= a1 || *(_BYTE *)(v1 + 64) != 1)
  {
    if (v4 > a1)
      *(_BYTE *)(v1 + 64) = 1;
    goto LABEL_8;
  }
  if (!__OFSUB__(a1, v4))
  {
    bzero((void *)(v3 + v4), a1 - v4);
LABEL_8:
    *(_QWORD *)(v1 + 24) = a1;
    return;
  }
  __break(1u);
}

uint64_t dispatch thunk of NSKeyValueObservation.invalidate()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t DateComponents.day.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 80) = v3;
  *(_BYTE *)(v2 + 88) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t NSScanner.scanInt(representation:)(char *a1)
{
  uint64_t result;
  char v2;
  char v3;

  v3 = *a1;
  result = NSScanner.scanInt64(representation:)(&v3);
  if ((v2 & 1) != 0)
    return 0;
  return result;
}

uint64_t NSScanner.scanInt64(representation:)(char *a1)
{
  void *v1;
  char v2;
  unint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v5[0] = 0x7FFFFFFFFFFFFFFFLL;
  if ((v2 & 1) != 0)
  {
    v4 = -1;
    if ((objc_msgSend(v1, sel_scanHexLongLong_, &v4) & 1) != 0)
    {
      if (v4 >= 0x7FFFFFFFFFFFFFFFLL)
        return 0x7FFFFFFFFFFFFFFFLL;
      else
        return v4;
    }
    else
    {
      return 0;
    }
  }
  else if (objc_msgSend(v1, sel_scanLongLong_, v5))
  {
    return v5[0];
  }
  else
  {
    return 0;
  }
}

ValueMetadata *type metadata accessor for ICUDateFormatter.DateFormatInfo()
{
  return &type metadata for ICUDateFormatter.DateFormatInfo;
}

uint64_t NSURLSession.data(for:delegate:)()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  v7 = *(_OWORD *)(v0 + 112);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 128) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  v3 = swift_initStackObject();
  *(_QWORD *)(v0 + 136) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(inited + 16) = v3;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_QWORD *)(v4 + 32) = v1;
  *(_QWORD *)(v4 + 40) = inited;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *v5 = v0;
  v5[1] = NSURLSession.data(for:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void __NSPostASAPQueueNotes(uint64_t a1, uint64_t a2, char *a3)
{
  postQueueNotifications(a3, 1);
}

uint64_t URLComponents.percentEncodedQuery.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (v0[16])
  {
    v1 = v0[15];
  }
  else
  {
    v2 = *v0;
    v3 = *((_BYTE *)v0 + 15) != 1 || v2 == 0;
    if (v3 || (*(_BYTE *)(v2 + 192) & 1) != 0)
    {
      v1 = 0;
    }
    else
    {
      v4 = String.subscript.getter();
      v1 = MEMORY[0x186DA4634](v4);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  return v1;
}

void static JSONEncoder.OutputFormatting.prettyPrinted.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

id URLRequest.cachePolicy.setter(uint64_t a1)
{
  return URLRequest.cachePolicy.setter(a1, (SEL *)&selRef_setCachePolicy_);
}

void specialized static UInt._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v3 = objc_msgSend(a1, sel_unsignedIntegerValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_QWORD *)a2 = v3;
    *(_BYTE *)(a2 + 8) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 544175136;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 1953384789;
    v8._object = (void *)0xE400000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

ValueMetadata *type metadata accessor for LocaleCache.State.IdentifierAndPrefs()
{
  return &type metadata for LocaleCache.State.IdentifierAndPrefs;
}

uint64_t PredicateArchivingState.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __JSONEncoder()
{
  return __JSONEncoder.encodeNil()();
}

uint64_t __JSONEncoder.encodeNil()()
{
  _QWORD *v0;

  if (((*(uint64_t (**)(void))(*v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  type metadata accessor for JSONReference();
  swift_initStaticObject();
  MEMORY[0x186DA4AFC]();
  if (*(_QWORD *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Set<A>(void *a1, uint64_t *a2, uint64_t a3)
{
  return static Set._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

__CFNotificationCenter *__standardDefaultCenter_block_invoke()
{
  NSNotificationCenter *v0;
  const void *TaskCenter;
  __CFNotificationCenter *result;

  v0 = [NSNotificationCenter alloc];
  TaskCenter = (const void *)_CFXNotificationGetTaskCenter();
  result = (__CFNotificationCenter *)CFRetain(TaskCenter);
  v0->_impl = result;
  atomic_store((unint64_t)v0, &qword_1ECD09900);
  return result;
}

uint64_t Locale.measurementSystem.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 296))(ObjectType, v1);
}

uint64_t protocol witness for _LocaleProtocol.measurementSystem.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 296))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.measurementSystem.getter in conformance _LocaleICU@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 184);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.measurementSystem.getter((_QWORD *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));
  return swift_release();
}

uint64_t partial apply for closure #1 in _LocaleICU.measurementSystem.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.measurementSystem.getter(a1, v2, a2);
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t countAndFlagsBits;
  void *object;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  Swift::String result;
  _QWORD v34[8];
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v3 = *(void **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)v6)
  {
    v12 = objc_msgSend(objc_retainAutorelease(v3), sel__cfurl);
    v13 = (void *)_CFURLCopyPath();
    if (v13)
    {
      v14 = v13;
      countAndFlagsBits = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      object = v15;

      goto LABEL_17;
    }

    goto LABEL_11;
  }
  if (!v5)
  {
    if (percentEncoded)
    {
      if (v4)
      {
        if ((*(_BYTE *)(v4 + 168) & 1) != 0)
          v16 = MEMORY[0x186DA5030](0, 0xE000000000000000);
        else
          v16 = String.subscript.getter();
        countAndFlagsBits = MEMORY[0x186DA4634](v16);
        object = v21;
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    if (!v4)
      goto LABEL_27;
    if ((*(_BYTE *)(v4 + 168) & 1) != 0)
      v17 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v17 = String.subscript.getter();
    v22 = v17;
    v23 = v18;
    v24 = v19;
    v25 = v20;
    if ((v17 ^ v18) >> 14)
    {
      v35 = (void *)v17;
      v36 = v18;
      v37 = v19;
      v38 = v20;
      MEMORY[0x1E0C80A78](v17);
      v34[2] = &v35;
      v34[3] = MEMORY[0x1E0DEE9E8];
      swift_bridgeObjectRetain();
      v26 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v34, v22, v23, v24, v25);
      if (v27 == (void *)1)
      {
        v28 = (unint64_t)v35;
        v29 = v36;
        v30 = v37;
        v31 = v38;
        swift_bridgeObjectRetain();
        countAndFlagsBits = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v28, v29, v30, v31, MEMORY[0x1E0DEE9E8]);
        object = v32;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if (object)
          goto LABEL_17;
      }
      else
      {
        countAndFlagsBits = (uint64_t)v26;
        object = v27;
        swift_bridgeObjectRelease_n();
        if (object)
          goto LABEL_17;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_11:
    countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
    goto LABEL_17;
  }
  URL.absoluteURL.getter(&v35);
  v8 = v35;
  v34[4] = v35;
  v34[5] = v36;
  v34[6] = v37;
  v9 = URL.path(percentEncoded:)(percentEncoded);
  countAndFlagsBits = v9._countAndFlagsBits;
  object = v9._object;

  swift_release();
  swift_release();
LABEL_17:
  v6 = countAndFlagsBits;
  v7 = object;
LABEL_28:
  result._object = v7;
  result._countAndFlagsBits = v6;
  return result;
}

uint64_t closure #1 in NSNotificationCenter.Notifications.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = closure #1 in NSNotificationCenter.Notifications.Iterator.next();
  v5[35] = a1;
  v5[36] = a2;
  return swift_task_switch();
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  int v0;
  int v1;
  id v2;
  double v3;

  v1 = v0;
  v2 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v3) = v1;
  return (NSNumber)objc_msgSend(v2, sel_initWithFloat_, v3);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in NSObject.KeyValueObservingPublisher<A, B>()
{
  return MEMORY[0x1E0DEDD18];
}

uint64_t URL.host.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.host(percentEncoded:), (SEL *)&selRef_host);
}

ValueMetadata *type metadata accessor for PredicateExpressions.VariableID()
{
  return &type metadata for PredicateExpressions.VariableID;
}

Foundation::Date __swiftcall Date.init(timeInterval:since:)(Swift::Double timeInterval, Foundation::Date since)
{
  double *v2;
  double *v3;
  Foundation::Date result;

  result._time = *v2 + timeInterval;
  *v3 = result._time;
  return result;
}

uint64_t _NSKeyValueProxyDeallocate(void *a1)
{
  uint64_t v2;

  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueProxyLock);
  if (a1 && (unint64_t)_objc_rootRetainCount() > 1)
  {
    v2 = 0;
  }
  else
  {
    objc_msgSend((id)objc_msgSend((id)objc_opt_class(), "_proxyShare"), "removeObject:", a1);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueProxyLock);
    objc_msgSend(a1, "_proxyNonGCFinalize");
    os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueProxyLock);
    v2 = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueProxyLock);
  return v2;
}

id _NSGetProxyValueWithGetter(NSObject *a1, uint64_t a2, void *a3)
{
  id v5;

  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueProxyLock);
  v5 = _NSGetProxyValueWithGetterNoLock(a1, a3);
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueProxyLock);
  return v5;
}

id _NSGetProxyValueWithGetterNoLock(NSObject *a1, void *a2)
{
  void *v4;
  void *v5;
  NSKeyValueProxyShareKey *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;

  v4 = (void *)objc_msgSend(a2, "proxyClass");
  v5 = (void *)objc_msgSend(v4, "_proxyShare");
  v6 = (NSKeyValueProxyShareKey *)_NSGetProxyValueWithGetterNoLock_proxyShareKey;
  if (!_NSGetProxyValueWithGetterNoLock_proxyShareKey)
  {
    v6 = objc_alloc_init(NSKeyValueProxyShareKey);
    _NSGetProxyValueWithGetterNoLock_proxyShareKey = (uint64_t)v6;
  }
  v6->_container = a1;
  v7 = objc_msgSend(a2, "key");
  *(_QWORD *)(_NSGetProxyValueWithGetterNoLock_proxyShareKey + 16) = v7;
  v8 = (void *)objc_msgSend(v5, "member:");
  v9 = _NSGetProxyValueWithGetterNoLock_proxyShareKey;
  *(_QWORD *)(_NSGetProxyValueWithGetterNoLock_proxyShareKey + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  if (v8)
  {
    v10 = v8;
    v11 = v8;
  }
  else
  {
    v10 = objc_alloc((Class)v4);
    objc_msgSend(v10, "_proxyInitWithContainer:getter:", a1, a2);
    objc_msgSend(v5, "addObject:", v10);
  }
  return v10;
}

NSHashTable *_NSKeyValueProxyShareCreate()
{
  NSPointerFunctions *v0;
  NSHashTable *v1;

  v0 = -[NSPointerFunctions initWithOptions:]([NSPointerFunctions alloc], "initWithOptions:", 5);
  -[NSPointerFunctions setHashFunction:](v0, "setHashFunction:", NSKeyValueProxyHash);
  -[NSPointerFunctions setIsEqualFunction:](v0, "setIsEqualFunction:", NSKeyValueProxyIsEqual);
  v1 = -[NSHashTable initWithPointerFunctions:capacity:]([NSHashTable alloc], "initWithPointerFunctions:capacity:", v0, 0);

  return v1;
}

CFIndex protocol witness for Error._code.getter in conformance CFErrorRef()
{
  CFErrorRef *v0;

  return CFErrorGetCode(*v0);
}

BOOL NSIntersectsRect(NSRect aRect, NSRect bRect)
{
  BOOL result;

  result = 0;
  if (aRect.size.width > 0.0 && bRect.size.width > 0.0 && aRect.size.height > 0.0 && bRect.size.height > 0.0)
  {
    if (aRect.origin.x >= bRect.origin.x)
    {
      if (bRect.origin.x + bRect.size.width <= aRect.origin.x)
        return 0;
    }
    else if (aRect.origin.x + aRect.size.width <= bRect.origin.x)
    {
      return 0;
    }
    if (aRect.origin.y >= bRect.origin.y)
    {
      if (bRect.origin.y + bRect.size.height <= aRect.origin.y)
        return 0;
    }
    else if (aRect.origin.y + aRect.size.height <= bRect.origin.y)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

__C::_NSRange __swiftcall _NSSwiftCalendar.range(of:in:for:)(NSCalendarUnit of, NSCalendarUnit in, Foundation::Date a3)
{
  double *v3;
  uint64_t v4;
  double v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  Swift::Int v19;
  Swift::Int v20;
  __C::_NSRange result;
  double v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v6 = *v3;
  _fromNSCalendarUnit(_:)(of, &v26);
  v7 = v26;
  if (v26 != 18)
  {
    _fromNSCalendarUnit(_:)(in, &v25);
    v8 = v25;
    if (v25 != 18)
    {
      v9 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
      os_unfair_lock_lock((os_unfair_lock_t)(v9 + 32));
      v10 = *(_QWORD *)(v9 + 24);
      swift_unknownObjectRetain();
      os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 32));
      v24 = v7;
      v23 = v8;
      v11 = 1.59271755e13;
      if (v6 <= 1.59271755e13)
        v11 = v6;
      v12 = fmax(v11, -2.11845067e11);
      ObjectType = swift_getObjectType();
      v22 = v12;
      v14 = (*(uint64_t (**)(char *, char *, double *, uint64_t, uint64_t))(v10 + 144))(&v24, &v23, &v22, ObjectType, v10);
      v16 = v15;
      v18 = v17;
      swift_unknownObjectRelease();
      if ((v18 & 1) == 0)
      {
        v19 = v16 - v14;
        if (!__OFSUB__(v16, v14))
          goto LABEL_10;
        __break(1u);
      }
    }
  }
  v14 = 0x7FFFFFFFFFFFFFFFLL;
  v19 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_10:
  v20 = v14;
  result.length = v19;
  result.location = v20;
  return result;
}

uint64_t protocol witness for _CalendarProtocol.range(of:in:for:) in conformance _CalendarICU()
{
  return _CalendarICU.range(of:in:for:)();
}

uint64_t _CalendarICU.range(of:in:for:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for closure #1 in _CalendarICU.range(of:in:for:)((uint64_t)&v4);
  v2 = v4;
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t Calendar.enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(double *a1, const void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t (*a6)(_QWORD, _QWORD, _QWORD))
{
  __int128 *v6;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  _BYTE __dst[288];
  double v20;
  __int128 v21;

  v11 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  v12 = *a3;
  v13 = *a4;
  v14 = *a5;
  v21 = *v6;
  v20 = v11;
  v18 = v12;
  v17 = v13;
  v16 = v14;
  return Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(&v20, __dst, &v18, &v17, &v16, a6);
}

uint64_t Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(double *a1, const void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t (*a6)(_QWORD, _QWORD, _QWORD))
{
  uint64_t *v6;
  double v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  char v19;
  double v20;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];
  double v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  _QWORD v35[36];
  _BYTE __dst[282];

  v11 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  v12 = *a3;
  v23 = *a4;
  v13 = *a5;
  v15 = *v6;
  v14 = v6[1];
  memcpy(v35, a2, 0x11AuLL);
  v32 = v15;
  v33 = v14;
  result = DateComponents._validate(for:)(&v32);
  if ((result & 1) != 0 && v11 >= -2.11845067e11 && v11 <= 1.59271755e13)
  {
    v17 = 0;
    v18 = 0;
    v19 = 1;
    v20 = v11;
    do
    {
      v26[0] = v15;
      v26[1] = v14;
      v31 = *(id *)&v11;
      memcpy(v35, a2, 0x11AuLL);
      v30 = v12;
      v29 = v23;
      v28 = v13;
      v27 = v20;
      v24 = v18;
      LOBYTE(v25) = v19 & 1;
      Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v31, v35, &v30, &v29, &v28, &v27, (uint64_t)&v24, (uint64_t)&v32);
      v20 = v34;
      if (v33 == 2)
      {
        if (v17 >= 0x64)
        {
          *(double *)v26 = v11;
          v32 = v15;
          v33 = v14;
          memcpy(v35, __dst, 0x11AuLL);
          LOBYTE(v24) = v13;
          LOBYTE(v31) = v12;
          LOBYTE(v27) = v23;
          return _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(v26, &v32, v35, (unsigned __int8 *)&v24, (unsigned __int8 *)&v31, (unsigned __int8 *)&v27);
        }
      }
      else
      {
        v18 = v32;
        LOBYTE(v32) = 0;
        v35[0] = v18;
        LOBYTE(v35[1]) = 0;
        result = a6(v35, v33 & 1, &v32);
        v19 = 0;
        if ((v32 & 1) != 0)
          return result;
      }
    }
    while (!__OFADD__(v17++, 1));
    __break(1u);

    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.date(bySettingHour:minute:second:of:options:)(Swift::Int bySettingHour, Swift::Int minute, Swift::Int second, Foundation::Date of, NSCalendarOptions options)
{
  __int16 v5;
  uint64_t v6;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  Swift::Double v18;
  Foundation::Date ofa[2];
  BOOL v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  Foundation::Date_optional result;

  v10 = *(_QWORD *)options;
  if ((v5 & 2) != 0)
    v11 = 3;
  else
    v11 = 0;
  if ((v5 & 0x100) != 0)
    v12 = 2;
  else
    v12 = v11;
  if ((v5 & 0x200) != 0)
    v13 = 1;
  else
    v13 = v12;
  if ((v5 & 0x400) != 0)
    v14 = 0;
  else
    v14 = v13;
  v15 = (v5 & 0x3000) == 0x2000;
  v16 = *(_QWORD *)(v6 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 32));
  *(_OWORD *)&ofa[0]._time = *(_OWORD *)(v16 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 32));
  v23 = *(_OWORD *)&ofa[0]._time;
  v22 = v10;
  v21 = v14;
  v20 = v15;
  Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)(bySettingHour, minute, second, ofa[0], (Foundation::Calendar::MatchingPolicy)&v22, (Foundation::Calendar::RepeatedTimePolicy)&v21, (Foundation::Calendar::SearchDirection)&v20);
  v17 = swift_unknownObjectRelease();
  result.value = *(Foundation::Date *)&v18;
  result.is_nil = v17;
  return result;
}

uint64_t Calendar.minimumRange(of:)(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t ObjectType;
  char v6;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = v2;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 128))(&v6, ObjectType, v3);
}

__C::_NSRange __swiftcall _NSSwiftCalendar.maximumRange(of:)(NSCalendarUnit of)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  Swift::Int v10;
  Swift::Int v11;
  __C::_NSRange result;
  char v13;
  char v14;

  _fromNSCalendarUnit(_:)(of, &v14);
  v2 = v14;
  if (v14 != 18)
  {
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
    v4 = *(_QWORD *)(v3 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
    ObjectType = swift_getObjectType();
    v13 = v2;
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 136))(&v13, ObjectType, v4);
    v8 = v7;
    LOBYTE(v4) = v9;
    swift_unknownObjectRelease();
    if ((v4 & 1) == 0)
    {
      v10 = v8 - v6;
      if (!__OFSUB__(v8, v6))
        goto LABEL_7;
      __break(1u);
    }
  }
  v6 = 0x7FFFFFFFFFFFFFFFLL;
  v10 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_7:
  v11 = v6;
  result.length = v10;
  result.location = v11;
  return result;
}

Foundation::Date_optional __swiftcall _NSSwiftCalendar.nextDate(after:matching:value:options:)(Foundation::Date after, NSCalendarUnit matching, Swift::Int value, NSCalendarOptions options)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  Swift::Double v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  BOOL v19;
  BOOL v20;
  char v21;
  uint64_t v22[36];
  uint64_t v23;
  __int128 v24;
  __int128 __dst[18];
  char __src[288];
  Swift::Int_optional v27;
  Foundation::Date_optional result;

  v7 = v4;
  v9 = v5;
  v10 = *(_QWORD *)matching;
  if ((v4 & 2) != 0)
    v11 = 3;
  else
    v11 = 0;
  if ((v4 & 0x100) != 0)
    v12 = 2;
  else
    v12 = v11;
  if ((v4 & 0x200) != 0)
    v12 = 1;
  if ((v4 & 0x400) != 0)
    v13 = 0;
  else
    v13 = v12;
  v14 = _fromNSCalendarUnit(_:)(value, __src);
  v16 = __src[0];
  if (__src[0] == 18)
  {
    *(_QWORD *)v9 = 0;
    *(_BYTE *)(v9 + 8) = 1;
  }
  else
  {
    __dst[0] = 0uLL;
    v22[0] = 0;
    v22[1] = 0;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, v22, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    LOBYTE(__dst[0]) = v16;
    v27.value = options;
    v27.is_nil = 0;
    DateComponents.setValue(_:for:)(v27, (Foundation::Calendar::Component)__dst);
    v17 = *(_QWORD *)(v6 + OBJC_IVAR____NSSwiftCalendar__lock);
    os_unfair_lock_lock((os_unfair_lock_t)(v17 + 32));
    v18 = *(_OWORD *)(v17 + 16);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 32));
    v24 = v18;
    v23 = v10;
    memcpy(__dst, __src, 0x11AuLL);
    memcpy(v22, __src, 0x11AuLL);
    v21 = v13;
    v20 = (v7 & 0x3000) == 0x2000;
    v19 = (v7 & 4) != 0;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(&v23, v22, &v21, (char *)&v20, (char *)&v19, v9);
    swift_unknownObjectRelease();
    v14 = outlined release of DateComponents((uint64_t)__dst);
  }
  result.value = *(Foundation::Date *)&v15;
  result.is_nil = v14;
  return result;
}

uint64_t _NSSwiftCalendar.nextDate(after:matching:options:)@<X0>(uint64_t *a1@<X0>, const void *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  __int128 v16;
  BOOL v17;
  BOOL v18;
  char v19;
  _BYTE __dst[288];
  uint64_t v21;
  __int128 v22;

  v5 = a3;
  v8 = *a1;
  if ((a3 & 2) != 0)
    v9 = 3;
  else
    v9 = 0;
  if ((a3 & 0x100) != 0)
    v10 = 2;
  else
    v10 = v9;
  if ((a3 & 0x200) != 0)
    v11 = 1;
  else
    v11 = v10;
  if ((a3 & 0x400) != 0)
    v12 = 0;
  else
    v12 = v11;
  v13 = (a3 & 0x3000) == 0x2000;
  v14 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 32));
  v16 = *(_OWORD *)(v14 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 32));
  v22 = v16;
  v21 = v8;
  memcpy(__dst, a2, 0x11AuLL);
  v19 = v12;
  v18 = v13;
  v17 = (v5 & 4) != 0;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(&v21, __dst, &v19, (char *)&v18, (char *)&v17, a4);
  return swift_unknownObjectRelease();
}

Foundation::Date_optional __swiftcall Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)(Swift::Int bySettingHour, Swift::Int minute, Swift::Int second, Foundation::Date of, Foundation::Calendar::MatchingPolicy matchingPolicy, Foundation::Calendar::RepeatedTimePolicy repeatedTimePolicy, Foundation::Calendar::SearchDirection direction)
{
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v12;
  double v13;
  int v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t ObjectType;
  unsigned __int8 v21;
  Swift::Double v22;
  double v23;
  char v24;
  double v25;
  char v27;
  char v28;
  char v29;
  __int128 __dst[18];
  double v31;
  double v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  double __src[36];
  double v37[2];
  char v38;
  Foundation::Date_optional result;

  v12 = v8;
  v13 = *(double *)matchingPolicy;
  v14 = *(unsigned __int8 *)repeatedTimePolicy;
  v15 = *(_BYTE *)direction;
  v16 = *v7;
  v17 = *v9;
  v18 = v9[1];
  LOBYTE(__dst[0]) = 3;
  if (v13 > 1.59271755e13)
    v13 = 1.59271755e13;
  v19 = fmax(v13, -2.11845067e11);
  ObjectType = swift_getObjectType();
  __src[0] = v19;
  v21 = (*(_QWORD *(**)(double *__return_ptr, __int128 *, double *, uint64_t, uint64_t))(v18 + 160))(v37, __dst, __src, ObjectType, v18);
  if ((v38 & 1) != 0)
  {
    *(_QWORD *)v12 = 0;
    *(_BYTE *)(v12 + 8) = 1;
  }
  else
  {
    v23 = v37[0];
    __dst[0] = 0uLL;
    v34 = 0;
    v35 = 0;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, &v34, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, bySettingHour, 0, minute, 0, second, 0, 0, 1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    if (v14 == 3)
      v24 = 3;
    else
      v24 = 0;
    v34 = v17;
    v35 = v18;
    v31 = v23 + -0.5;
    memcpy(__dst, __src, 0x11AuLL);
    v29 = v24;
    v28 = v15;
    v27 = v16;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)((uint64_t *)&v31, __dst, &v29, &v28, &v27, (uint64_t)&v32);
    v25 = v32;
    if ((v33 & 1) != 0)
    {
      v21 = outlined release of DateComponents((uint64_t)__src);
      *(double *)v12 = v25;
      *(_BYTE *)(v12 + 8) = 1;
    }
    else if (v23 <= v32)
    {
      v21 = outlined release of DateComponents((uint64_t)__src);
      *(double *)v12 = v25;
      *(_BYTE *)(v12 + 8) = 0;
    }
    else
    {
      v34 = v17;
      v35 = v18;
      v32 = v23;
      memcpy(__dst, __src, 0x11AuLL);
      LOBYTE(v31) = v14;
      v29 = v15;
      v28 = v16;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)((uint64_t *)&v32, __dst, (char *)&v31, &v29, &v28, v12);
      v21 = outlined release of DateComponents((uint64_t)__src);
    }
  }
  result.value = *(Foundation::Date *)&v22;
  result.is_nil = v21;
  return result;
}

uint64_t Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)@<X0>(uint64_t *a1@<X0>, const void *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  __int128 *v6;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t result;
  char v16;
  char v17;
  char v18;
  char v19;
  _BYTE __dst[288];
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;

  v11 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  v12 = *a3;
  v13 = *a4;
  v14 = *a5;
  v23 = 0;
  v24 = 1;
  v22 = *v6;
  v21 = v11;
  v19 = v12;
  v18 = v13;
  v17 = v14;
  result = specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(&v21, __dst, &v19, &v18, &v17, &v22, &v23);
  v16 = v24;
  *(_QWORD *)a6 = v23;
  *(_BYTE *)(a6 + 8) = v16;
  return result;
}

uint64_t specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)(double *a1, const void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t *a6, uint64_t a7)
{
  double v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[2];
  double v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  _BYTE __dst[296];

  v9 = *a1;
  v10 = *a3;
  v11 = *a4;
  v12 = *a5;
  v14 = *a6;
  v13 = a6[1];
  memcpy(__dst, a2, 0x11AuLL);
  v26 = v14;
  v27 = v13;
  result = DateComponents._validate(for:)(&v26);
  if ((result & 1) != 0 && v9 >= -2.11845067e11 && v9 <= 1.59271755e13)
  {
    v16 = 101;
    v17 = v9;
    while (1)
    {
      v20[0] = v14;
      v20[1] = v13;
      v25 = *(id *)&v9;
      memcpy(__dst, a2, 0x11AuLL);
      v24 = v10;
      v23 = v11;
      v22 = v12;
      v21 = v17;
      v18 = 0;
      LOBYTE(v19) = 1;
      result = Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)((double *)&v25, __dst, &v24, &v23, &v22, &v21, (uint64_t)&v18, (uint64_t)&v26);
      if (v27 != 2)
        break;
      v17 = v28;
      if (!--v16)
      {
        *(double *)v20 = v9;
        v26 = v14;
        v27 = v13;
        memcpy(__dst, a2, 0x11AuLL);
        LOBYTE(v18) = v12;
        LOBYTE(v25) = v10;
        LOBYTE(v21) = v11;
        return _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)(v20, &v26, __dst, (unsigned __int8 *)&v18, (unsigned __int8 *)&v25, (unsigned __int8 *)&v21);
      }
    }
    *(_QWORD *)a7 = v26;
    *(_BYTE *)(a7 + 8) = 0;
  }
  return result;
}

BOOL DateComponents._validate(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  BOOL v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  unsigned __int8 v76;
  uint64_t v77;
  uint64_t v78;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_BYTE *)(v1 + 40);
  v74 = *(_QWORD *)(v1 + 48);
  v5 = *(_BYTE *)(v1 + 56);
  v68 = *(_QWORD *)(v1 + 64);
  v73 = *(_BYTE *)(v1 + 72);
  v66 = *(_QWORD *)(v1 + 80);
  v71 = *(_BYTE *)(v1 + 88);
  v72 = *(_QWORD *)(v1 + 96);
  v6 = *(_BYTE *)(v1 + 104);
  v64 = *(_QWORD *)(v1 + 112);
  v69 = *(_BYTE *)(v1 + 120);
  v62 = *(_QWORD *)(v1 + 128);
  v67 = *(_BYTE *)(v1 + 136);
  v60 = *(_QWORD *)(v1 + 144);
  v65 = *(_BYTE *)(v1 + 152);
  v7 = *(_QWORD *)(v1 + 160);
  v8 = *(_BYTE *)(v1 + 168);
  v58 = *(_QWORD *)(v1 + 176);
  v63 = *(_BYTE *)(v1 + 184);
  v56 = *(_QWORD *)(v1 + 192);
  v61 = *(_BYTE *)(v1 + 200);
  v70 = *(_QWORD *)(v1 + 208);
  v75 = *(_BYTE *)(v1 + 216);
  v59 = *(_BYTE *)(v1 + 248);
  v54 = *(_QWORD *)(v1 + 256);
  v55 = *(_QWORD *)(v1 + 240);
  v57 = *(_BYTE *)(v1 + 264);
  v9 = *(_BYTE *)(v1 + 280);
  v10 = *(_QWORD *)(v1 + 272);
  v11 = *(unsigned __int8 *)(v1 + 281);
  if ((v4 & 1) != 0)
    goto LABEL_4;
  v52 = *(_BYTE *)(v1 + 104);
  v53 = *(_BYTE *)(v1 + 280);
  v12 = *(_QWORD *)(v1 + 272);
  v13 = *(unsigned __int8 *)(v1 + 281);
  v14 = *(_BYTE *)(v1 + 168);
  v15 = *(_QWORD *)(v1 + 160);
  v16 = *(_QWORD *)(v1 + 32);
  v77 = *a1;
  v78 = v3;
  v76 = 0;
  v18 = Calendar.validRange(for:)(&v76);
  result = 0;
  if (v16 >= v18)
  {
    v20 = v17 < v16;
    v7 = v15;
    v8 = v14;
    v11 = v13;
    v10 = v12;
    v6 = v52;
    v9 = v53;
    if (!v20)
    {
LABEL_4:
      if ((v5 & 1) != 0)
      {
        v21 = v4 ^ 1;
      }
      else
      {
        v22 = v6;
        v77 = v2;
        v78 = v3;
        v21 = 1;
        v76 = 1;
        v24 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v74 < v24)
          return result;
        v6 = v22;
        if (v23 < v74)
          return result;
      }
      if ((v6 & 1) == 0)
      {
        v77 = v2;
        v78 = v3;
        v76 = 17;
        v26 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v72 < v26 || v25 < v72)
          return result;
        v21 = 1;
      }
      if ((v75 & 1) == 0)
      {
        v77 = v2;
        v78 = v3;
        v76 = 9;
        v28 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v70 < v28 || v27 < v70)
          return result;
        v21 = 1;
      }
      if ((v73 & 1) == 0)
      {
        v77 = v2;
        v78 = v3;
        v76 = 2;
        v30 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v68 < v30 || v29 < v68)
          return result;
        v21 = 1;
      }
      if ((v71 & 1) == 0)
      {
        v77 = v2;
        v78 = v3;
        v76 = 3;
        v32 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v66 < v32 || v31 < v66)
          return result;
        v21 = 1;
      }
      if ((v69 & 1) == 0)
      {
        v77 = v2;
        v78 = v3;
        v76 = 4;
        v34 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v64 < v34 || v33 < v64)
          return result;
        v21 = 1;
      }
      if ((v67 & 1) == 0)
      {
        v77 = v2;
        v78 = v3;
        v76 = 5;
        v36 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v62 < v36 || v35 < v62)
          return result;
        v21 = 1;
      }
      if ((v65 & 1) == 0)
      {
        v77 = v2;
        v78 = v3;
        v76 = 6;
        v38 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v60 < v38 || v37 < v60)
          return result;
        v21 = 1;
      }
      if ((v63 & 1) == 0)
      {
        v77 = v2;
        v78 = v3;
        v76 = 7;
        v40 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v58 < v40 || v39 < v58)
          return result;
        v21 = 1;
      }
      if ((v61 & 1) == 0)
      {
        v77 = v2;
        v78 = v3;
        v76 = 8;
        v42 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v56 < v42 || v41 < v56)
          return result;
        v21 = 1;
      }
      if ((v59 & 1) == 0)
      {
        v77 = v2;
        v78 = v3;
        v76 = 10;
        v44 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v55 < v44 || v43 < v55)
          return result;
        v21 = 1;
      }
      if ((v57 & 1) == 0)
      {
        v77 = v2;
        v78 = v3;
        v76 = 11;
        v46 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v54 < v46 || v45 < v54)
          return result;
        v21 = 1;
      }
      if ((v9 & 1) == 0)
      {
        v77 = v2;
        v78 = v3;
        v76 = 12;
        v48 = Calendar.validRange(for:)(&v76);
        result = 0;
        if (v10 < v48 || v47 < v10)
          return result;
        v21 = 1;
      }
      if ((v8 & 1) != 0)
      {
        if (v11 == 2)
          v49 = 1;
        else
          v49 = v21;
        return (v49 & 1) != 0 || (v11 & 1) == 0;
      }
      v77 = v2;
      v78 = v3;
      v76 = 13;
      v51 = Calendar.validRange(for:)(&v76);
      result = 0;
      if (v7 >= v51 && v50 >= v7)
        return 1;
    }
  }
  return result;
}

uint64_t Calendar.validRange(for:)(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;

  LODWORD(v2) = *a1;
  v3 = *(_QWORD *)(v1 + 8);
  if ((_DWORD)v2 != 12)
  {
    if ((_DWORD)v2 == 8)
      return 1;
    if ((_DWORD)v2 != 1)
    {
LABEL_44:
      ObjectType = swift_getObjectType();
      BYTE6(v38) = v2;
      v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 136))((char *)&v38 + 6, ObjectType, v3);
      v29 = v28;
      v31 = v30;
      if ((v30 & 1) != 0)
        v32 = 0;
      else
        v32 = v27;
      BYTE5(v38) = v2;
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 128))((char *)&v38 + 5, ObjectType, v3);
      if ((v34 & 1) == 0)
      {
        v35 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v31 & 1) == 0)
          v35 = v29;
        if (v32 < result)
          result = v32;
        if (v35 <= v33)
          v35 = v33;
        if (v35 < result)
          goto LABEL_66;
        if (result != v35)
        {
LABEL_58:
          if (!__OFSUB__(v35, 1))
            return result;
          goto LABEL_67;
        }
        __break(1u);
      }
      result = v32 & (v32 >> 63);
      v35 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_58;
    }
  }
  v4 = swift_getObjectType();
  v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  v5((uint64_t *)((char *)&v38 + 2), v4, v3);
  swift_unknownObjectRelease();
  if (BYTE2(v38) != 6)
  {
    swift_unknownObjectRetain();
    v5((uint64_t *)((char *)&v38 + 1), v4, v3);
    swift_unknownObjectRelease();
    if (BYTE1(v38) != 8)
    {
      swift_unknownObjectRetain();
      v5(&v38, v4, v3);
      swift_unknownObjectRelease();
      if (v38 != 12)
      {
        if ((_DWORD)v2 != 12)
          goto LABEL_44;
        v17 = swift_getObjectType();
        BYTE4(v38) = 1;
        v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 136))((char *)&v38 + 4, v17, v3);
        v20 = v19;
        v22 = v21;
        if ((v21 & 1) != 0)
          v2 = 0;
        else
          v2 = v18;
        BYTE3(v38) = 1;
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 128))((char *)&v38 + 3, v17, v3);
        if ((v24 & 1) != 0)
        {
          result = v2 & (v2 >> 63);
          v25 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v25 = 0x7FFFFFFFFFFFFFFFLL;
          if ((v22 & 1) == 0)
            v25 = v20;
          if (v2 < result)
            result = v2;
          if (v25 <= v23)
            v25 = v23;
          if (v25 < result)
            goto LABEL_68;
          if (result == v25)
          {
            __break(1u);
            goto LABEL_44;
          }
        }
        if (!__OFSUB__(v25, 1))
          return result;
        __break(1u);
        goto LABEL_64;
      }
    }
  }
  v37 = v2;
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 136))(&v37, v4, v3);
  v8 = v7;
  v10 = v9;
  if ((v9 & 1) != 0)
    v11 = 0;
  else
    v11 = v6;
  v36 = v2;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 128))(&v36, v4, v3);
  if ((v14 & 1) != 0)
  {
    v16 = v11 & (v11 >> 63);
    v15 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_24;
  }
  if ((v10 & 1) != 0)
    v15 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v15 = v8;
  if (v11 >= result)
    v16 = result;
  else
    v16 = v11;
  if (v15 <= v13)
    v15 = v13;
  if (v15 < v16)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (v16 == v15)
  {
    __break(1u);
    return 1;
  }
LABEL_24:
  if (__OFSUB__(v15, 1))
  {
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    return result;
  }
  if (v16 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFELL;
  if (v16 <= 1)
    return 1;
  else
    return v16;
}

uint64_t protocol witness for _CalendarProtocol.maximumRange(of:) in conformance _CalendarICU()
{
  return _CalendarICU.maximumRange(of:)();
}

void partial apply for closure #1 in _CalendarICU.maximumRange(of:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v6 = *(_BYTE *)(v1 + 24);
  _CalendarICU._locked_maximumRange(of:)((uint64_t)&v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
}

void _CalendarICU._locked_maximumRange(of:)(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_18192C2A4()
{
  return 0;
}

void protocol witness for _CalendarProtocol.minimumRange(of:) in conformance _CalendarICU(uint64_t a1)
{
  _CalendarICU.minimumRange(of:)(a1);
}

void _CalendarICU.minimumRange(of:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_18192C474()
{
  return 0;
}

void partial apply for closure #1 in _CalendarICU.range(of:in:for:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  double v8;
  char v9;
  char v10;

  v3 = *(_BYTE *)(v1 + 25);
  v4 = *(double *)(v1 + 32);
  v10 = *(_BYTE *)(v1 + 24);
  v9 = v3;
  v8 = v4;
  _CalendarICU._locked_range(of:in:for:)(&v10, &v9, &v8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7 & 1;
}

void _CalendarICU._locked_range(of:in:for:)(char *a1, _BYTE *a2, double *a3)
{
  unsigned int v3;
  double v4;
  unsigned int v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  double v16;

  v3 = *a2;
  v4 = *a3;
  if (*a3 > 1.59271755e13)
    v4 = 1.59271755e13;
  if (v3 > 0xF || ((1 << v3) & 0xE100) == 0)
  {
    v6 = *a1;
    switch(*a1)
    {
      case 4:
        if (v3 - 4 >= 3)
        {
          LOBYTE(v6) = 4;
          goto LABEL_29;
        }
        return;
      case 5:
        if (v3 - 5 >= 2)
        {
          LOBYTE(v6) = 5;
          goto LABEL_29;
        }
        return;
      case 6:
        if (v3 != 6)
        {
          LOBYTE(v6) = 6;
          goto LABEL_29;
        }
        return;
      case 7:
        if (v3 - 3 >= 5)
        {
          LOBYTE(v6) = 7;
          goto LABEL_29;
        }
        return;
      case 13:
        LOBYTE(v6) = 13;
LABEL_29:
        LOBYTE(v16) = v6;
        _CalendarICU._locked_maximumRange(of:)((uint64_t)&v16);
        return;
      default:
        v7 = fmax(v4, -2.11845067e11);
        switch(*a2)
        {
          case 0:
            if (v6 > 0xB)
              return;
            if (((1 << v6) & 0xE0E) != 0)
              goto LABEL_29;
            if (v6 != 8)
              return;
            LOBYTE(v16) = 3;
            _CalendarICU._locked_maximumRange(of:)((uint64_t)&v16);
            if ((v10 & 1) != 0)
              return;
            if (__OFSUB__(v9, v8))
            {
              __break(1u);
            }
            else if (!__OFADD__(v8, v9 - v8))
            {
              if (!__OFSUB__(v9, 1))
              {
                if (!__OFADD__(v9 - 1, 6))
                {
                  if (v9 + 5 >= -6)
                    return;
LABEL_60:
                  __break(1u);
                  return;
                }
LABEL_59:
                __break(1u);
                goto LABEL_60;
              }
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }
            __break(1u);
            goto LABEL_58;
          case 1:
            if (v6 <= 0x11)
            {
              if (((1 << v6) & 0x20A04) != 0)
              {
                v15 = *a1;
                v11 = 1;
                goto LABEL_43;
              }
              if (((1 << v6) & 0x508) != 0)
              {
                v15 = *a1;
                v14 = 1;
                goto LABEL_52;
              }
            }
            return;
          case 2:
            switch(*a1)
            {
              case 3:
              case 8:
              case 10:
                v15 = *a1;
                v11 = 2;
                goto LABEL_43;
              case 11:
                v15 = 11;
                v13 = 2;
                goto LABEL_54;
              default:
                return;
            }
            return;
          case 9:
            if (v6 <= 0xB)
            {
              if (((1 << v6) & 0x508) != 0)
              {
                v15 = *a1;
                v12 = 9;
                goto LABEL_51;
              }
              if (((1 << v6) & 0x804) != 0)
              {
                v15 = *a1;
                v13 = 9;
LABEL_54:
                v14 = v13;
                v16 = v7;
                _CalendarICU._locked_algorithmC(smaller:larger:at:)(&v15, &v14, (uint64_t *)&v16);
              }
            }
            return;
          case 0xA:
            if (v6 == 3)
            {
              v16 = v7;
              _CalendarICU._locked_algorithmD(at:)((uint64_t *)&v16);
            }
            return;
          case 0xC:
            if (v6 <= 0xB)
            {
              if (((1 << v6) & 0xA04) != 0)
              {
                v15 = *a1;
                v11 = 12;
LABEL_43:
                v14 = v11;
                v16 = v7;
                _CalendarICU._locked_algorithmA(smaller:larger:at:)(&v15, &v14, (uint64_t *)&v16);
              }
              else if (((1 << v6) & 0x108) != 0)
              {
                v15 = *a1;
                v12 = 12;
LABEL_51:
                v14 = v12;
LABEL_52:
                v16 = v7;
                _CalendarICU._locked_algorithmB(smaller:larger:at:)(&v15, &v14, &v16);
              }
            }
            return;
          default:
            return;
        }
    }
  }
}

uint64_t protocol witness for _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:) in conformance _TimeZoneICU@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  partial apply for closure #1 in _TimeZoneICU.nextDaylightSavingTimeTransition(after:)((uint64_t *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return swift_release();
}

void partial apply for closure #1 in _TimeZoneICU.nextDaylightSavingTimeTransition(after:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  closure #1 in _TimeZoneICU.nextDaylightSavingTimeTransition(after:)(a1, *(_QWORD *)(v2 + 16), a2, *(double *)(v2 + 24));
}

void closure #1 in _TimeZoneICU.nextDaylightSavingTimeTransition(after:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11[2];

  v11[1] = *(double *)MEMORY[0x1E0C80C00];
  if (*a1)
    goto LABEL_2;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  LODWORD(v11[0]) = 0;
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v7, v8)[2] >> 31)
    __break(1u);
  v9 = ucal_open();
  swift_release();
  swift_bridgeObjectRelease();
  if (v9)
  {
    *a1 = v9;
LABEL_2:
    v11[0] = a4;
    v10 = 0x42ACF8AB468F0000;
    static _TimeZoneICU.nextDaylightSavingTimeTransition(forLocked:startingAt:limit:)(v11, (double *)&v10, a3);
    return;
  }
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
}

void sub_18192CDC4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18192CF7C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

BOOL _unitHasSpecifierAndIsDimensional(void *a1)
{
  return (objc_opt_respondsToSelector() & 1) != 0
      && (objc_opt_isKindOfClass() & 1) != 0
      && objc_msgSend(a1, "specifier") != -1;
}

void *__cdecl NSAllocateCollectable(NSUInteger size, NSUInteger options)
{
  char v2;
  malloc_zone_t *v4;

  v2 = options;
  v4 = malloc_default_zone();
  if ((v2 & 1) != 0)
    return malloc_type_zone_calloc(v4, 1uLL, size, 0xCC510C36uLL);
  else
    return malloc_type_zone_malloc(v4, size, 0xC5D73FE6uLL);
}

uint64_t static UInt64._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int64._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_);
}

uint64_t type metadata instantiation function for PredicateExpressions.StringLocalizedStandardContains()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t NSKeyValueObservedChange.newValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t NSKeyValueObservedChange.oldValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

void sub_18192F81C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18192F95C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18192F988(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18192F914);
  }
  JUMPOUT(0x18192F97CLL);
}

NSString *__cdecl NSStringFromSize(NSSize aSize)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("{%.*g, %.*g}"), 17, *(_QWORD *)&aSize.width, 17, *(_QWORD *)&aSize.height);
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneICU(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _TimeZoneICU and conformance _TimeZoneICU();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneICU and conformance _TimeZoneICU()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU;
  if (!lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU)
  {
    v1 = type metadata accessor for _TimeZoneICU();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _TimeZoneICU, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneICU and conformance _TimeZoneICU);
  }
  return result;
}

uint64_t type metadata completion function for Notification.Subscription()
{
  return swift_initClassMetadata2();
}

os_log_t ___userInteractionLog_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.Foundation", "NSProcessInfoInteractionTracking");
  qword_1ECD09D30 = (uint64_t)result;
  return result;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Calendar()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1);
}

uint64_t NSURLSession.data(for:delegate:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[13] = a2;
  v3[14] = v2;
  v3[15] = *a1;
  return swift_task_switch();
}

uint64_t protocol witness for Collection.subscript.getter in conformance IndexSet@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)(a2 + 80) = *v2;
  v3 = a1[1];
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = a1[4];
  return swift_retain();
}

void static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t URL.isFileURL.getter()
{
  void **v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  char v5;

  v1 = *v0;
  if (!_foundation_swift_url_feature_enabled())
    return (uint64_t)objc_msgSend(v1, sel_isFileURL);
  URL.scheme.getter();
  if (!v2)
    return 0;
  v3 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v3._countAndFlagsBits == 1701603686 && v3._object == (void *)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v5 & 1;
  }
}

void (*URLComponents.fragment.getter(uint64_t a1))(char *, _QWORD)
{
  return URLComponents._URLComponents.fragment.getter(a1);
}

void (*URLComponents.query.getter(uint64_t a1))(char *, _QWORD)
{
  return URLComponents._URLComponents.query.getter(a1);
}

ValueMetadata *type metadata accessor for PredicateExpressionCodingKeys()
{
  return &type metadata for PredicateExpressionCodingKeys;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __JSONEncoder(double a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  __int128 v7[3];

  v4 = *v1;
  if (((*(uint64_t (**)(void))(*(_QWORD *)*v1 + 208))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_4;
  }
  v5 = *(_QWORD *)(v4 + 144);
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((__int128 *)(v4 + 72), v7);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  specialized static JSONReference.number<A, B>(from:with:for:_:)(v7, v5, 0, 0, 0, 255, a1);
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  result = swift_release();
  if (v2)
    return result;
  MEMORY[0x186DA4AFC](result);
  if (*(_QWORD *)((*(_QWORD *)(v4 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v4 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    goto LABEL_7;
LABEL_4:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

ValueMetadata *type metadata accessor for ICUPatternGenerator.PatternGeneratorInfo()
{
  return &type metadata for ICUPatternGenerator.PatternGeneratorInfo;
}

ValueMetadata *type metadata accessor for ICUDateFormatter.PatternCacheKey()
{
  return &type metadata for ICUDateFormatter.PatternCacheKey;
}

uint64_t URLComponents.queryItems.setter(Swift::OpaquePointer_optional a1)
{
  URLComponents._URLComponents.setQueryItems(_:)(a1);
  return swift_bridgeObjectRelease();
}

uint64_t Date.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v6 = v5;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

id String.init(utf8String:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v2 = MEMORY[0x186DA4658]();
  if (v3)
    return (id)v2;
  v5 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithUTF8String_, a1);
  if (!v5)
    return 0;
  v6 = v5;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  return v4;
}

uint64_t __NSPostIdleQueueNotes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return postQueueNotifications(a3, 0);
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t assignWithCopy for NSNotificationCenter.Publisher(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t type metadata accessor for BufferView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BufferView);
}

uint64_t storeEnumTagSinglePayload for KeyPathComparator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle()
{
  return &type metadata for Date.FormatStyle;
}

void *type metadata accessor for LocalizedStringResource.CodingKeys()
{
  return &unk_1E0F25040;
}

ValueMetadata *type metadata accessor for JSONDecoder.KeyDecodingStrategy()
{
  return &type metadata for JSONDecoder.KeyDecodingStrategy;
}

uint64_t dispatch thunk of JSONDecoder.userInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t static PredicateExpressions.build_Arg<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t Dictionary<>.init<A>(_:including:)(__int128 *a1, uint64_t a2, Swift::UInt a3, unint64_t a4)
{
  void *v4;
  __int128 v6;

  v6 = *a1;
  v4 = static AttributeScope.scopeDescription.getter(a3, a4);
  swift_bridgeObjectRelease();
  return specialized Dictionary<>.init(_:attributeTable:options:)((uint64_t *)&v6, (uint64_t)v4, 0);
}

{
  return Dictionary<>.init<A>(_:including:)(a1, a2, a3, a4);
}

{
  void *v4;
  uint64_t v5;
  __int128 v7;

  v7 = *a1;
  v4 = static AttributeScope.scopeDescription.getter(a3, a4);
  swift_bridgeObjectRelease();
  v5 = specialized Dictionary<>.init(_:attributeTable:options:)((uint64_t *)&v7, (uint64_t)v4, 0);
  swift_release();
  return v5;
}

uint64_t URL.description.getter()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  id v6;
  id v7;
  char v8;
  id v9;
  uint64_t result;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  unint64_t v29;
  id v30;
  id v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  Swift::String v44;
  Swift::String v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    v6 = objc_msgSend(v1, sel_description);
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

    return (uint64_t)v7;
  }
  v46 = v1;
  v47 = v2;
  v48 = v3;
  URL.scheme.getter();
  if (!v4)
    goto LABEL_16;
  v5 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v5._countAndFlagsBits == 1635017060 && v5._object == (void *)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
      goto LABEL_16;
  }
  swift_retain();
  v9 = v1;
  swift_retain();
  result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!v2)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

  }
  else
  {
    v11 = objc_msgSend(v9, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    swift_release();
    swift_release();

  }
  v12 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v12 < 129)
  {
LABEL_16:
    swift_retain();
    v14 = v1;
    swift_retain();
    result = _foundation_swift_url_feature_enabled();
    if (!(_DWORD)result)
    {
      v16 = objc_msgSend(v14, sel_relativeString);
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v15 = v17;
      swift_release();
      swift_release();

      goto LABEL_26;
    }
    if (v2)
    {
      v7 = *(id *)(v2 + 16);
      v15 = *(void **)(v2 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();

      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_30;
  }
  v46 = 0;
  v47 = 0xE000000000000000;
  v13 = v9;
  swift_retain();
  swift_retain();
  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    v18 = objc_msgSend(v13, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    swift_release();
    swift_release();

    goto LABEL_21;
  }
  if (!v2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();

LABEL_21:
  v19 = specialized Collection.prefix(_:)(120);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = MEMORY[0x186DA4634](v19, v21, v23, v25);
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x202E2E2E20;
  v27._object = (void *)0xE500000000000000;
  String.append(_:)(v27);
  v28 = v13;
  swift_retain();
  swift_retain();
  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    v31 = objc_msgSend(v28, sel_relativeString);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v29 = v32;
    swift_release();
    swift_release();

    goto LABEL_25;
  }
  if (v2)
  {
    v30 = *(id *)(v2 + 16);
    v29 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

LABEL_25:
    v33 = specialized BidirectionalCollection.suffix(_:)(8uLL, (uint64_t)v30, v29);
    v35 = v34;
    v37 = v36;
    v39 = v38;
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = MEMORY[0x186DA4634](v33, v35, v37, v39);
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v46;
    v15 = (void *)v47;
LABEL_26:
    URL.baseURL.getter((uint64_t *)&v46);
    v41 = v46;
    if (v46)
    {
      v43 = v47;
      v42 = v48;
      v46 = 0;
      v47 = 0xE000000000000000;
      v44._countAndFlagsBits = (uint64_t)v7;
      v44._object = v15;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._countAndFlagsBits = 539831584;
      v45._object = (void *)0xE400000000000000;
      String.append(_:)(v45);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v41, v43, v42);
      outlined consume of URL?(v41);
      return (uint64_t)v46;
    }
    return (uint64_t)v7;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[2];

  v9 = *a2;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v10 + 16))(v13, v11);
  v17[0] = a2;
  v14 = *(_QWORD *)(v9 + *MEMORY[0x1E0DEE2A8] + 8);
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  v15 = v17[1];
  swift_retain();
  AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
  swift_release();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v13, a3);
  result = type metadata accessor for PredicateExpressions.KeyPath(0, a3, v14, a4);
  *(_QWORD *)(a5 + *(int *)(result + 44)) = v15;
  return result;
}

uint64_t PredicateCodableConfiguration.allowKeyPath(_:identifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  void *object;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  unint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t countAndFlagsBits;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  _QWORD *v92;
  uint64_t v93;
  int64_t v94;
  unint64_t v95;
  int64_t v96;
  int64_t v97;
  Swift::String v98;
  int v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  Swift::String v103;
  Swift::String v104;
  Swift::String v105;
  Swift::String v106;
  Swift::String v107;
  Swift::String v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  uint64_t v114;
  int64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  uint64_t *v130;
  _QWORD *__src;
  char *__srca;
  int64_t v133;
  int64_t v134;
  Swift::String v136;
  uint64_t v137;
  uint64_t v138;
  int64_t v139;
  unint64_t v140;
  uint64_t v141;
  _BYTE v142[24];
  __int128 v143;
  char v144;

  v136._countAndFlagsBits = a2;
  v136._object = a3;
  AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
  v10 = *v3;
  v130 = v3;
  __src = (_QWORD *)(*v3 + 64);
  v11 = 1 << *(_BYTE *)(*v3 + 32);
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(*v3 + 64);
  v133 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  v14 = 0;
  v128 = v10;
  if (v13)
    goto LABEL_8;
LABEL_9:
  v17 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  object = v136._object;
  if (v17 >= v133)
  {
LABEL_73:
    swift_release();
    type metadata accessor for AnyKeyPath();
    swift_bridgeObjectRetain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyKeyPath & Sendable);
    swift_dynamicCast();
    v13 = *(_QWORD *)v142;
    v4 = (uint64_t)v130;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v141 = *v130;
    v10 = *v130;
    *v130 = 0x8000000000000000;
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(v136._countAndFlagsBits, (uint64_t)v136._object);
    v68 = *(_QWORD *)(v10 + 16);
    v69 = (v67 & 1) == 0;
    v70 = v68 + v69;
    if (!__OFADD__(v68, v69))
    {
      v4 = v67;
      if (*(_QWORD *)(v10 + 24) < v70)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v70, isUniquelyReferenced_nonNull_native);
        v71 = v141;
        countAndFlagsBits = v136._countAndFlagsBits;
        v73 = specialized __RawDictionaryStorage.find<A>(_:)(v136._countAndFlagsBits, (uint64_t)v136._object);
        if ((v4 & 1) != (v74 & 1))
          goto LABEL_127;
        v5 = v73;
        goto LABEL_80;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v71 = v10;
        goto LABEL_79;
      }
LABEL_87:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
      v77 = static _DictionaryStorage.copy(original:)();
      v71 = v77;
      if (!*(_QWORD *)(v10 + 16))
        goto LABEL_119;
      v78 = (char *)(v77 + 64);
      __srca = (char *)(v10 + 64);
      v79 = (unint64_t)((1 << *(_BYTE *)(v71 + 32)) + 63) >> 6;
      v127 = v71;
      if (v71 != v10 || v78 >= &__srca[8 * v79])
        memmove(v78, __srca, 8 * v79);
      v134 = 0;
      *(_QWORD *)(v71 + 16) = *(_QWORD *)(v10 + 16);
      v80 = 1 << *(_BYTE *)(v10 + 32);
      v81 = -1;
      if (v80 < 64)
        v81 = ~(-1 << v80);
      v140 = v81 & *(_QWORD *)(v10 + 64);
      v129 = (unint64_t)(v80 + 63) >> 6;
      while (1)
      {
        if (v140)
        {
          v82 = __clz(__rbit64(v140));
          v140 &= v140 - 1;
          v83 = v82 | (v134 << 6);
        }
        else
        {
          v94 = v134 + 1;
          if (__OFADD__(v134, 1))
          {
LABEL_121:
            __break(1u);
            goto LABEL_122;
          }
          if (v94 >= v129)
            goto LABEL_119;
          v95 = *(_QWORD *)&__srca[8 * v94];
          v96 = v134 + 1;
          if (!v95)
          {
            v96 = v134 + 2;
            if (v134 + 2 >= v129)
              goto LABEL_119;
            v95 = *(_QWORD *)&__srca[8 * v96];
            if (!v95)
            {
              v96 = v134 + 3;
              if (v134 + 3 >= v129)
                goto LABEL_119;
              v95 = *(_QWORD *)&__srca[8 * v96];
              if (!v95)
              {
                v96 = v134 + 4;
                if (v134 + 4 >= v129)
                  goto LABEL_119;
                v95 = *(_QWORD *)&__srca[8 * v96];
                if (!v95)
                {
                  v96 = v134 + 5;
                  if (v134 + 5 >= v129)
                    goto LABEL_119;
                  v95 = *(_QWORD *)&__srca[8 * v96];
                  if (!v95)
                  {
                    v96 = v134 + 6;
                    if (v134 + 6 >= v129)
                      goto LABEL_119;
                    v95 = *(_QWORD *)&__srca[8 * v96];
                    if (!v95)
                    {
                      v96 = v134 + 7;
                      if (v134 + 7 >= v129)
                        goto LABEL_119;
                      v95 = *(_QWORD *)&__srca[8 * v96];
                      if (!v95)
                      {
                        v97 = v134 + 8;
                        if (v134 + 8 >= v129)
                          goto LABEL_119;
                        v95 = *(_QWORD *)&__srca[8 * v97];
                        if (!v95)
                        {
                          while (1)
                          {
                            v96 = v97 + 1;
                            if (__OFADD__(v97, 1))
                              goto LABEL_123;
                            v71 = v127;
                            if (v96 >= v129)
                              break;
                            v95 = *(_QWORD *)&__srca[8 * v96];
                            ++v97;
                            if (v95)
                              goto LABEL_118;
                          }
LABEL_119:
                          swift_bridgeObjectRelease();
LABEL_79:
                          countAndFlagsBits = v136._countAndFlagsBits;
LABEL_80:
                          *(_QWORD *)v142 = v13;
                          *(_OWORD *)&v142[8] = 0u;
                          v143 = 0u;
                          v144 = 0;
                          if ((v4 & 1) != 0)
                          {
                            outlined assign with take of PredicateCodableConfiguration.AllowListKeyPath((uint64_t)v142, *(_QWORD *)(v71 + 56) + 48 * v5);
                          }
                          else
                          {
                            specialized _NativeDictionary._insert(at:key:value:)(v5, countAndFlagsBits, (uint64_t)v136._object, (uint64_t)v142, (_QWORD *)v71);
                            swift_bridgeObjectRetain();
                          }
                          *v130 = v71;
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v75 = dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
                          PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v75, 0, 0, 0);
                          dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
                          return PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v76, 0, 0, 0);
                        }
                        v96 = v134 + 8;
                        v71 = v127;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_118:
          v140 = (v95 - 1) & v95;
          v134 = v96;
          v83 = __clz(__rbit64(v95)) + (v96 << 6);
        }
        v84 = 16 * v83;
        v85 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v83);
        v87 = *v85;
        v86 = v85[1];
        v88 = 48 * v83;
        v89 = *(_QWORD *)(v10 + 56) + v88;
        v6 = *(_QWORD *)(v89 + 8);
        v138 = *(_QWORD *)v89;
        v90 = *(_QWORD *)v89;
        v7 = *(void **)(v89 + 16);
        v8 = *(_QWORD *)(v89 + 24);
        v9 = *(_QWORD *)(v89 + 32);
        v91 = *(_BYTE *)(v89 + 40);
        v92 = (_QWORD *)(*(_QWORD *)(v71 + 48) + v84);
        *v92 = v87;
        v92[1] = v86;
        v93 = *(_QWORD *)(v71 + 56) + v88;
        *(_QWORD *)v93 = v90;
        *(_QWORD *)(v93 + 8) = v6;
        *(_QWORD *)(v93 + 16) = v7;
        *(_QWORD *)(v93 + 24) = v8;
        *(_QWORD *)(v93 + 32) = v9;
        *(_BYTE *)(v93 + 40) = v91;
        swift_bridgeObjectRetain();
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v138, v6, (uint64_t)v7, v8, v9, v91);
      }
    }
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  v18 = __src[v17];
  v19 = v14 + 1;
  if (!v18)
  {
    v19 = v14 + 2;
    if (v14 + 2 >= v133)
      goto LABEL_73;
    v18 = __src[v19];
    if (!v18)
    {
      v19 = v14 + 3;
      if (v14 + 3 >= v133)
        goto LABEL_73;
      v18 = __src[v19];
      if (!v18)
      {
        v20 = v14 + 4;
        if (v14 + 4 < v133)
        {
          v18 = __src[v20];
          if (v18)
          {
            v19 = v14 + 4;
            goto LABEL_22;
          }
          while (1)
          {
            v19 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_85;
            if (v19 >= v133)
              goto LABEL_73;
            v18 = __src[v19];
            ++v20;
            if (v18)
              goto LABEL_22;
          }
        }
        goto LABEL_73;
      }
    }
  }
LABEL_22:
  v137 = (v18 - 1) & v18;
  v139 = v19;
  v15 = __clz(__rbit64(v18)) + (v19 << 6);
  while (1)
  {
    v21 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v15);
    v22 = *v21;
    v5 = v21[1];
    v23 = *(_QWORD *)(v10 + 56) + 48 * v15;
    v9 = *(_QWORD *)v23;
    v4 = *(_QWORD *)(v23 + 8);
    v6 = *(_QWORD *)(v23 + 16);
    v8 = *(_QWORD *)(v23 + 24);
    v7 = *(void **)(v23 + 32);
    v24 = *(_BYTE *)(v23 + 40);
    v25 = *v21 == v136._countAndFlagsBits && v5 == (_QWORD)object;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if ((v24 & 1) != 0)
        goto LABEL_124;
      *(_QWORD *)v142 = v9;
      type metadata accessor for AnyKeyPath();
      swift_retain_n();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        *(_QWORD *)v142 = 0;
        *(_QWORD *)&v142[8] = 0xE000000000000000;
        _StringGuts.grow(_:)(57);
        v108._object = (void *)0x800000018230B0B0;
        v108._countAndFlagsBits = 0xD000000000000014;
        String.append(_:)(v108);
        v109._countAndFlagsBits = AnyKeyPath.debugDescription.getter();
        String.append(_:)(v109);
        swift_bridgeObjectRelease();
        v110._countAndFlagsBits = 0x2720646E612027;
        v110._object = (void *)0xE700000000000000;
        String.append(_:)(v110);
        v111._countAndFlagsBits = AnyKeyPath.debugDescription.getter();
        String.append(_:)(v111);
        swift_bridgeObjectRelease();
        v112._countAndFlagsBits = 0xD000000000000017;
        v112._object = (void *)0x800000018230B0D0;
        String.append(_:)(v112);
        String.append(_:)(v136);
        v113._countAndFlagsBits = 39;
        v113._object = (void *)0xE100000000000000;
        String.append(_:)(v113);
        goto LABEL_126;
      }
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      return swift_release();
    }
    if ((v24 & 1) != 0)
    {
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 1);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 1);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    type metadata accessor for AnyKeyPath();
    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
    swift_bridgeObjectRetain();
    if ((MEMORY[0x186DA51E0](v9, a1) & 1) == 0)
    {
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      swift_bridgeObjectRelease();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v5);
    v28 = v27;
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      v10 = v128;
LABEL_7:
      v13 = v137;
      v14 = v139;
      if (!v137)
        goto LABEL_9;
      goto LABEL_8;
    }
    v29 = swift_isUniquelyReferenced_nonNull_native();
    v30 = *v130;
    *v130 = 0x8000000000000000;
    if ((v29 & 1) != 0)
    {
      v31 = v30;
      goto LABEL_33;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
    v36 = static _DictionaryStorage.copy(original:)();
    v118 = v36;
    if (*(_QWORD *)(v30 + 16))
      break;
LABEL_69:
    swift_bridgeObjectRelease();
    v31 = v118;
LABEL_33:
    swift_bridgeObjectRelease();
    v32 = *(_QWORD *)(v31 + 56) + 48 * v26;
    v33 = v26;
    v35 = *(_QWORD *)(v32 + 8);
    v34 = *(_QWORD *)(v32 + 16);
    v123 = *(_QWORD *)(v32 + 24);
    v125 = *(_QWORD *)v32;
    v121 = *(_QWORD *)(v32 + 32);
    v119 = *(_BYTE *)(v32 + 40);
    specialized _NativeDictionary._delete(at:)(v33, v31);
    *v130 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v125, v35, v34, v123, v121, v119);
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
    v13 = v137;
    v14 = v139;
    v10 = v128;
    if (!v137)
      goto LABEL_9;
LABEL_8:
    v137 = (v13 - 1) & v13;
    v139 = v14;
    v15 = __clz(__rbit64(v13)) | (v14 << 6);
    object = v136._object;
  }
  v37 = v36;
  v38 = (char *)(v36 + 64);
  v39 = (char *)(v30 + 64);
  v40 = (unint64_t)((1 << *(_BYTE *)(v37 + 32)) + 63) >> 6;
  v114 = v30 + 64;
  if (v37 != v30 || v38 >= &v39[8 * v40])
  {
    memmove(v38, v39, 8 * v40);
    v37 = v118;
  }
  v41 = 0;
  *(_QWORD *)(v37 + 16) = *(_QWORD *)(v30 + 16);
  v42 = 1 << *(_BYTE *)(v30 + 32);
  v116 = v26;
  v117 = v30;
  if (v42 < 64)
    v43 = ~(-1 << v42);
  else
    v43 = -1;
  v44 = v43 & *(_QWORD *)(v30 + 64);
  v115 = (unint64_t)(v42 + 63) >> 6;
  while (2)
  {
    if (v44)
    {
      v124 = v41;
      v126 = (v44 - 1) & v44;
      v45 = __clz(__rbit64(v44)) | (v41 << 6);
      v47 = v117;
      v46 = v118;
LABEL_46:
      v48 = 16 * v45;
      v49 = (uint64_t *)(*(_QWORD *)(v47 + 48) + 16 * v45);
      v51 = *v49;
      v50 = v49[1];
      v52 = 48 * v45;
      v53 = *(_QWORD *)(v47 + 56) + v52;
      v54 = *(_QWORD *)v53;
      v55 = *(_QWORD *)(v53 + 8);
      v56 = *(_QWORD *)(v53 + 16);
      v57 = *(_QWORD *)(v53 + 24);
      v122 = *(_QWORD *)(v53 + 32);
      v58 = *(_BYTE *)(v53 + 40);
      v120 = v58;
      v59 = (_QWORD *)(*(_QWORD *)(v46 + 48) + v48);
      *v59 = v51;
      v59[1] = v50;
      v60 = *(_QWORD *)(v46 + 56) + v52;
      *(_QWORD *)v60 = v54;
      *(_QWORD *)(v60 + 8) = v55;
      *(_QWORD *)(v60 + 16) = v56;
      *(_QWORD *)(v60 + 24) = v57;
      *(_QWORD *)(v60 + 32) = v122;
      *(_BYTE *)(v60 + 40) = v58;
      swift_bridgeObjectRetain();
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v54, v55, v56, v57, v122, v120);
      v26 = v116;
      v41 = v124;
      v44 = v126;
      continue;
    }
    break;
  }
  v61 = v41 + 1;
  v47 = v117;
  v46 = v118;
  if (__OFADD__(v41, 1))
  {
    __break(1u);
    goto LABEL_121;
  }
  if (v61 >= v115)
    goto LABEL_69;
  v62 = *(_QWORD *)(v114 + 8 * v61);
  v63 = v41 + 1;
  if (v62)
    goto LABEL_68;
  v63 = v41 + 2;
  if (v41 + 2 >= v115)
    goto LABEL_69;
  v62 = *(_QWORD *)(v114 + 8 * v63);
  if (v62)
    goto LABEL_68;
  v63 = v41 + 3;
  if (v41 + 3 >= v115)
    goto LABEL_69;
  v62 = *(_QWORD *)(v114 + 8 * v63);
  if (v62)
    goto LABEL_68;
  v63 = v41 + 4;
  if (v41 + 4 >= v115)
    goto LABEL_69;
  v62 = *(_QWORD *)(v114 + 8 * v63);
  if (v62)
    goto LABEL_68;
  v63 = v41 + 5;
  if (v41 + 5 >= v115)
    goto LABEL_69;
  v62 = *(_QWORD *)(v114 + 8 * v63);
  if (v62)
    goto LABEL_68;
  v63 = v41 + 6;
  if (v41 + 6 >= v115)
    goto LABEL_69;
  v62 = *(_QWORD *)(v114 + 8 * v63);
  if (v62)
  {
LABEL_68:
    v124 = v63;
    v126 = (v62 - 1) & v62;
    v45 = __clz(__rbit64(v62)) + (v63 << 6);
    goto LABEL_46;
  }
  v64 = v41 + 7;
  if (v41 + 7 >= v115)
    goto LABEL_69;
  v62 = *(_QWORD *)(v114 + 8 * v64);
  if (v62)
  {
    v63 = v41 + 7;
    v47 = v117;
    v46 = v118;
    goto LABEL_68;
  }
  v26 = v116;
  v47 = v117;
  v46 = v118;
  while (1)
  {
    v63 = v64 + 1;
    if (__OFADD__(v64, 1))
      break;
    if (v63 >= v115)
      goto LABEL_69;
    v62 = *(_QWORD *)(v114 + 8 * v63);
    ++v64;
    if (v62)
      goto LABEL_68;
  }
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 1);
  *(_QWORD *)v142 = 0;
  *(_QWORD *)&v142[8] = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v98._object = (void *)0x800000018230B0B0;
  v98._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v98);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  v99 = *(_DWORD *)(v9 + 16);
  *(_OWORD *)v142 = *(_OWORD *)v9;
  *(_DWORD *)&v142[16] = v99;
  swift_getAtKeyPath();
  swift_release();
  v100._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
  v101._countAndFlagsBits = 46;
  v101._object = (void *)0xE100000000000000;
  String.append(_:)(v101);
  v102._countAndFlagsBits = v8;
  v102._object = v7;
  String.append(_:)(v102);
  v103._countAndFlagsBits = 92;
  v103._object = (void *)0xE100000000000000;
  String.append(_:)(v103);
  swift_bridgeObjectRelease();
  v104._countAndFlagsBits = 0x2720646E612027;
  v104._object = (void *)0xE700000000000000;
  String.append(_:)(v104);
  v105._countAndFlagsBits = AnyKeyPath.debugDescription.getter();
  String.append(_:)(v105);
  swift_bridgeObjectRelease();
  v106._countAndFlagsBits = 0xD000000000000017;
  v106._object = (void *)0x800000018230B0D0;
  String.append(_:)(v106);
  String.append(_:)(v136);
  v107._countAndFlagsBits = 39;
  v107._object = (void *)0xE100000000000000;
  String.append(_:)(v107);
LABEL_126:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_127:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined retain of PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return a1;
}

uint64_t outlined copy of PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
    return swift_retain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
    return swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall AnyKeyPath._validateForPredicateUsage(restrictArguments:)(Swift::Bool restrictArguments)
{
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  v2 = *(unsigned int *)(v1 + 32);
  switch((v2 >> 24) & 0x7F)
  {
    case 1uLL:
    case 3uLL:
      dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
      type metadata accessor for PartialKeyPath();
      swift_dynamicCastClassUnconditional();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      if ((v3 & 1) != 0)
        goto LABEL_21;
      return;
    case 2uLL:
      if ((v2 & 0x400000) != 0)
      {
        if ((v2 & 0x80000) == 0)
        {
          v4 = 4;
          goto LABEL_16;
        }
        if (restrictArguments)
          goto LABEL_21;
        v5 = 4;
      }
      else
      {
        if ((v2 & 0x80000) == 0)
        {
          v4 = 3;
          goto LABEL_16;
        }
        if (restrictArguments)
          goto LABEL_21;
        v5 = 3;
      }
      v6 = *(_QWORD *)(v1 + 32 + 8 * v5);
      if ((v6 & 0x8000000000000000) != 0)
        goto LABEL_19;
      v7 = v5 + (v6 >> 3);
      if ((unint64_t)(v7 - 0xFFFFFFFFFFFFFFELL) >> 61 != 7)
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        _StringGuts.grow(_:)(52);
        v8._countAndFlagsBits = 0xD000000000000031;
        v8._object = (void *)0x800000018230AA90;
        String.append(_:)(v8);
        v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v9);
        swift_bridgeObjectRelease();
        v10._countAndFlagsBits = 41;
        v10._object = (void *)0xE100000000000000;
        String.append(_:)(v10);
        while (1)
        {
LABEL_21:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      v4 = v7 + 2;
LABEL_16:
      if ((*(_DWORD *)(v1 + 24) & 0xFFFFFFu) > (unint64_t)(8 * v4))
        goto LABEL_21;
      return;
    case 4uLL:
      goto LABEL_21;
    default:
      goto LABEL_20;
  }
}

uint64_t outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t type metadata accessor for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateExpressions.KeyPath);
}

void static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)()
{
  type metadata accessor for PredicateExpressions.Comparison();
}

uint64_t sub_181932590(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  uint64_t result;

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(&v5[*(int *)(a1 + 60)], v4, v2);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(&v5[*(int *)(a1 + 64)], v3, v1);
  *v5 = v6;
  return result;
}

void type metadata accessor for PredicateExpressions.Comparison()
{
  JUMPOUT(0x186DA9CBCLL);
}

_BYTE *initializeWithCopy for PredicateExpressions.Comparison(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v7, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 16))((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t initializeWithCopy for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

Swift::Int UUID.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  return Hasher._finalize()();
}

uint64_t instantiation function for generic protocol witness table for _CalendarICU(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU(&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU, (uint64_t)&protocol conformance descriptor for _CalendarICU);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void NSHashInsert(NSHashTable *table, const void *pointer)
{
  if (!table)
    NSLog((NSString *)CFSTR("%s: hash table argument is NULL"), "void NSHashInsert(NSHashTable * _Nonnull, const void * _Nullable)");
  -[NSHashTable insertItem:](table, "insertItem:", pointer);
}

void *initUAUserActivity()
{
  void *result;

  if (qword_1ECD0A430
    || (result = dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2),
        (qword_1ECD0A430 = (uint64_t)result) != 0))
  {
    result = objc_getClass("UAUserActivity");
    qword_1ECD0A428 = (uint64_t)result;
    getUAUserActivityClass = UAUserActivityFunction;
  }
  return result;
}

uint64_t __supportsUserActivityAppLinks_block_invoke()
{
  uint64_t result;

  getUAUserActivityClass();
  if ((objc_opt_respondsToSelector() & 1) != 0)
    result = objc_msgSend(getUAUserActivityClass(), "supportsUserActivityAppLinks");
  else
    result = 0;
  _MergedGlobals_140 = result;
  return result;
}

uint64_t UAUserActivityFunction()
{
  return qword_1ECD0A428;
}

void NSRunLoop.SchedulerTimeType.Stride.init(floatLiteral:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

uint64_t URLResourceValues.typeIdentifier.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E0C99AD0]);
}

char *String.init(format:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;

  swift_bridgeObjectRetain();
  v6 = specialized withVaList<A>(_:_:)(a3, a1, a2, 0, 0);
  swift_bridgeObjectRelease();
  return v6;
}

void static Date.FormatStyle.Symbol.CyclicYear.abbreviated.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.Variable<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Variable.encode(to:)(a1, a2, a3, a4);
}

uint64_t PredicateExpressions.Variable.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[4];

  v6 = type metadata accessor for PredicateExpressions.Variable.CodingKeys(255, *(_QWORD *)(a2 + 16), a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>.CodingKeys, v6);
  v7 = type metadata accessor for KeyedEncodingContainer();
  v12[0] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v12 - v8;
  v10 = *v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12[3] = v10;
  lazy protocol witness table accessor for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12[0] + 8))(v9, v7);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.VariableID, &type metadata for PredicateExpressions.VariableID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.VariableID, &type metadata for PredicateExpressions.VariableID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.VariableID, &type metadata for PredicateExpressions.VariableID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.Variable<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return PredicateExpressions.Variable.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5);
}

uint64_t PredicateExpressions.Variable.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v15 = a5;
  v7 = type metadata accessor for PredicateExpressions.Variable.CodingKeys(255, a2, a3, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>.CodingKeys, v7);
  v8 = type metadata accessor for KeyedDecodingContainer();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v5)
  {
    v12 = v15;
    lazy protocol witness table accessor for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *v12 = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithBool_, BOOLeanLiteral);
}

uint64_t static Locale.MeasurementSystem.uk.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for uk != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EDC3A1D8;
  v3 = xmmword_1EDC3A1E0;
  *(_QWORD *)a1 = static Locale.MeasurementSystem.uk;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LinkAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LinkAttribute;
}

IMP __coderAllocateClassForUnarchival_block_invoke()
{
  IMP result;

  qword_1ECD09690 = (uint64_t)class_getMethodImplementation(MEMORY[0x1E0DE7910], sel_classForKeyedArchiver);
  qword_1ECD09698 = (uint64_t)class_getMethodImplementation(MEMORY[0x1E0DE7910], sel_classForArchiver);
  result = class_getMethodImplementation(MEMORY[0x1E0DE7910], sel_classForCoder);
  qword_1ECD096A0 = (uint64_t)result;
  return result;
}

uint64_t NSNotificationCenter.Notifications.Iterator.next()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t type metadata accessor for ScopedAttributeContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScopedAttributeContainer);
}

unint64_t *protocol witness for Collection.formIndex(after:) in conformance AttributedString.CharacterView(unint64_t *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD v17[3];
  __int128 v18[3];
  _BYTE v19[40];

  v2 = *result >> 10;
  v3 = v1[5] >> 10;
  if (v2 >= v1[1] >> 10 && v3 >= v2)
  {
    v5 = result;
    v6 = *v1;
    v7 = *(_OWORD *)(*v1 + 16);
    v8 = *(_OWORD *)(*v1 + 48);
    v17[1] = *(_OWORD *)(*v1 + 32);
    v17[2] = v8;
    v17[0] = v7;
    v9 = *(_OWORD *)(v6 + 16);
    v18[1] = *(_OWORD *)(v6 + 32);
    v18[2] = v8;
    v18[0] = v9;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v18, (uint64_t)v19);
    outlined retain of Locale((uint64_t)v19);
    v10 = BigString.index(after:)();
    v12 = v11;
    v14 = v13;
    v16 = v15;
    result = (unint64_t *)outlined release of Locale((uint64_t)v17);
    if (v3 >= v10 >> 10)
    {
      *v5 = v10;
      v5[1] = v12;
      v5[2] = v14;
      v5[3] = v16;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

__int128 *protocol witness for Collection.subscript.read in conformance AttributedString.CharacterView(__int128 **a1, _QWORD *a2)
{
  _QWORD *v2;
  __int128 *result;
  unint64_t v6;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = (__int128 *)malloc(0xA0uLL);
  *a1 = result;
  v6 = *a2 >> 10;
  if (v6 < v2[1] >> 10 || v6 >= v2[5] >> 10)
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    v9 = (uint64_t)(result + 3);
    v10 = (uint64_t)(result + 6);
    v11 = (_OWORD *)*v2;
    v13 = *(_OWORD *)(*v2 + 32);
    v12 = *(_OWORD *)(*v2 + 48);
    result[3] = *(_OWORD *)(*v2 + 16);
    result[4] = v13;
    result[5] = v12;
    v14 = v11[1];
    v15 = v11[3];
    result[1] = v11[2];
    result[2] = v15;
    *result = v14;
    outlined init with take of any PredicateExpression<Self.Output == B1>(result, (uint64_t)(result + 6));
    outlined retain of Locale(v10);
    v16 = BigString.subscript.getter();
    v18 = v17;
    *((_QWORD *)v8 + 19) = v17;
    outlined release of Locale(v9);
    *((_QWORD *)v8 + 17) = v16;
    *((_QWORD *)v8 + 18) = v18;
    return (__int128 *)protocol witness for Collection.subscript.read in conformance AttributedString.CharacterView;
  }
  return result;
}

id NSArray.init(arrayLiteral:)()
{
  id v0;
  id v1;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v1 = objc_msgSend(v0, sel_initWithArray_, _ContiguousArrayBuffer._asCocoaArray()());
  swift_unknownObjectRelease();
  return v1;
}

id IndexSet.count.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_count);
}

uint64_t URLResourceValues.isExcludedFromBackup.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E0C999D8], a1);
}

id specialized static IndexSet.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v7;

  v2 = *(void **)(*(_QWORD *)a1 + 16);
  v3 = *(void **)(*(_QWORD *)a2 + 16);
  v4 = v2;
  objc_msgSend(v3, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  v5 = objc_msgSend(v2, sel_isEqualToIndexSet_, v7);

  return v5;
}

BOOL _isEmpty(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (a1 < 0)
  {
    v1 = *MEMORY[0x1E0DE7C58];
    if ((~a1 & 0xC000000000000007) == 0)
      v1 = 0;
    v2 = v1 ^ a1;
    v3 = 0xFFFFFFFFFFFFFFFLL;
    if ((~(_BYTE)v2 & 7) == 0)
      v3 = 0xFFFFFFFFFFFFFLL;
    v4 = v3 & (v2 >> 3);
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 8);
    if ((v5 & 2) != 0)
    {
      v4 = *(_QWORD *)(a1 + 16);
    }
    else if ((v5 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    }
  }
  return v4 == 0;
}

uint64_t kCFStringEncodingASCII.getter()
{
  return 1536;
}

uint64_t Locale.regionCode.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 176))(ObjectType, v1);
  if (v4)
  {
    v5 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v5 = result & 0xFFFFFFFFFFFFLL;
    if (!v5)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t specialized _LocaleProtocol.regionCode.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v1 = *(_QWORD *)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  closure #1 in _LocaleICU.region.getter((_QWORD *)(v1 + 16), &v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  object = v5._object;
  if (!v5._object)
    return 0;
  countAndFlagsBits = v5._countAndFlagsBits;
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(countAndFlagsBits, (uint64_t)object);
  return countAndFlagsBits;
}

uint64_t _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v3;
  id v4;

  *a3 = v3;
  a3[1] = a1;
  a3[2] = a2;
  v4 = v3;
  return swift_retain();
}

void static MeasurementFormatUnitUsage.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_181934DDC@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181934F18 + 4 * byte_1820E9044[a1]))(0x6E6F73726570);
}

uint64_t sub_181934F18(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6F73726570 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t Date.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  return (*(uint64_t (**)(uint64_t *))(a3 + 48))(&v5);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.FormatStyle@<X0>(Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  uint64_t result;
  Swift::String v4;

  v4 = Date.FormatStyle.format(_:)(a2);
  result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

Swift::String __swiftcall Date.FormatStyle.format(_:)(Foundation::Date a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String result;
  uint64_t v16;
  _OWORD v17[2];
  char v18;
  __int128 v19;
  char v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = v1[5];
  v3 = v1[3];
  v33 = v1[4];
  v34 = v2;
  v4 = v1[5];
  v35[0] = v1[6];
  *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)((char *)v1 + 106);
  v5 = v1[1];
  v30[0] = *v1;
  v30[1] = v5;
  v6 = v1[3];
  v8 = *v1;
  v7 = v1[1];
  v31 = v1[2];
  v32 = v6;
  v27 = v33;
  v28 = v4;
  v29[0] = v1[6];
  *(_OWORD *)((char *)v29 + 10) = *(_OWORD *)((char *)v1 + 106);
  v24 = v8;
  v25 = v7;
  *(_OWORD *)v26 = v31;
  *(_OWORD *)&v26[16] = v3;
  outlined retain of Date.FormatStyle((uint64_t)v30);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v24, (uint64_t)v17);
  v24 = v17[0];
  v25 = v17[1];
  v26[0] = v18;
  *(_OWORD *)&v26[8] = v19;
  v26[24] = v20;
  v27 = v21;
  LOBYTE(v28) = v22;
  *((_QWORD *)&v28 + 1) = v23;
  v9 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v9
    || (v10 = swift_retain_n(),
        MEMORY[0x1E0C80A78](v10),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v16, (uint64_t *)&v24),
        v12 = *((_QWORD *)&v24 + 1),
        v11 = v24,
        swift_release_n(),
        !v12))
  {
    v11 = 0;
    v12 = 0xE000000000000000;
  }
  v13 = v11;
  v14 = (void *)v12;
  result._object = v14;
  result._countAndFlagsBits = v13;
  return result;
}

__n128 static FormatStyle<>.dateTime.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  _OWORD v14[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static LocaleCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, (uint64_t *)v14);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = *(_QWORD *)&v14[0];
  v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = static CalendarCache.cache + 16;
  v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v6, (uint64_t *)v14);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  v13 = (__n128)v14[0];
  if (one-time initialization token for cache != -1)
    swift_once();
  v8 = static TimeZoneCache.cache + 16;
  v9 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v8, (uint64_t *)v14);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  v10 = *(_QWORD *)&v14[0];
  v11 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating, (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = xmmword_1820FDF70;
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v11;
  result = v13;
  *(__n128 *)(a1 + 104) = v13;
  *(_WORD *)(a1 + 120) = 256;
  return result;
}

id @objc static NSLocale._newLocaleAsIfCurrent(_:overrides:disableBundleMatching:)(uint64_t a1, uint64_t a2, void *a3, void *a4, char a5)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;

  if (a3)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = a4;
  v11 = specialized static NSLocale._newLocaleAsIfCurrent(_:overrides:disableBundleMatching:)((uint64_t)v7, v9, a4, a5);

  swift_bridgeObjectRelease();
  return v11;
}

id specialized static NSLocale._newLocaleAsIfCurrent(_:overrides:disableBundleMatching:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  const __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  id v15;
  objc_super v17;
  _OWORD v18[7];
  _OWORD v19[2];
  _OWORD v20[7];
  _OWORD v21[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  swift_retain();
  LocaleCache.preferences()(v20);
  if (a3)
  {
    v8 = a3;
    LocalePreferences.apply(_:)(v8);

  }
  v18[6] = v20[6];
  v19[0] = v21[0];
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)((char *)v21 + 12);
  v18[2] = v20[2];
  v18[3] = v20[3];
  v18[4] = v20[4];
  v18[5] = v20[5];
  v18[0] = v20[0];
  v18[1] = v20[1];
  type metadata accessor for _LocaleICU();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v9 = _LocaleICU.init(name:prefs:disableBundleMatching:)(a1, a2, (uint64_t *)v18, a4 & 1);
  swift_release();
  v10 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU, (uint64_t)&protocol conformance descriptor for _LocaleICU);
  v11 = (objc_class *)type metadata accessor for _NSSwiftLocale();
  v12 = (char *)objc_allocWithZone(v11);
  v13 = (uint64_t *)&v12[OBJC_IVAR____NSSwiftLocale_locale];
  *v13 = v9;
  v13[1] = v10;
  v14 = String._bridgeToObjectiveCImpl()();
  v17.receiver = v12;
  v17.super_class = v11;
  swift_retain();
  v15 = objc_msgSendSuper2(&v17, sel_initWithLocaleIdentifier_, v14);
  swift_release();
  swift_unknownObjectRelease();
  return v15;
}

Swift::Void __swiftcall LocalePreferences.apply(_:)(CFDictionaryRef a1)
{
  _QWORD *v1;
  const __CFDictionary *v2;
  __CFArray *v3;
  __CFArray *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 IsMetric;
  int IsCm;
  int IsC;
  _BOOL4 v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef v27;
  CFTypeRef v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t i;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  unint64_t v55;
  char isUniquelyReferenced_nonNull_native;
  char v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  CFTypeRef v91;
  CFTypeRef v92;
  CFTypeRef v93;
  CFTypeRef v94;
  void *v95;
  void *v96;
  void *v97;
  id v98;
  id v99;
  uint64_t v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int64_t v106;
  unint64_t v107;
  unint64_t j;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int64_t v117;
  unint64_t v118;
  int64_t v119;
  unsigned int v120;
  char v121;
  char v122;
  unint64_t v123;
  uint64_t v124;
  _BOOL8 v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t *v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t v147;
  int64_t v148;
  char *v149;
  void *Weekday;
  void *v151;
  uint64_t v152;
  int64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t k;
  uint64_t *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  Swift::String v166;
  uint64_t v167;
  int64_t v168;
  unint64_t v169;
  int64_t v170;
  char v171;
  char v172;
  unint64_t v173;
  uint64_t v174;
  _BOOL8 v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  unint64_t v184;
  int64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  int64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  int64_t v193;
  unint64_t v194;
  int64_t v195;
  uint64_t v196;
  void *Week;
  void *v198;
  uint64_t v199;
  int64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  int64_t v205;
  unint64_t v206;
  unint64_t v207;
  int64_t v208;
  unint64_t v209;
  int64_t v210;
  uint64_t *v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  Swift::String v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char v219;
  int64_t v220;
  void *v221;
  char *v222;
  char *__src;
  int64_t __srca;
  void *v225;
  char v226;
  char v227;
  int64_t v228;
  void *v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  _QWORD *v234;
  const __CFDictionary *v235;
  BOOL v236;
  unsigned __int8 v237;
  _QWORD v238[2];

  v2 = a1;
  v238[1] = *MEMORY[0x1E0C80C00];
  v236 = 0;
  if (CFDictionaryGetCount(a1) < 1)
    return;
  v3 = __CFLocalePrefsCopyAppleLanguages(v2);
  if (v3)
  {
    v4 = v3;
    -[__CFArray copy](v3, sel_copy);
    v5 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v6 = specialized _arrayConditionalCast<A, B>(_:)(v5);

    swift_bridgeObjectRelease();
    if (v6)
    {
      swift_bridgeObjectRelease();
      v1[1] = v6;
    }
  }
  v7 = (void *)__CFLocalePrefsCopyAppleLocale(v2);
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

    swift_bridgeObjectRelease();
    v1[2] = v9;
    v1[3] = v11;
  }
  IsMetric = __CFLocalePrefsAppleMetricUnitsIsMetric(v2, &v236);
  if (v236)
    *(_BYTE *)v1 = IsMetric;
  IsCm = __CFLocalePrefsAppleMeasurementUnitsIsCm(v2, (char *)&v236);
  if (v236)
    *((_BYTE *)v1 + 136) = IsCm == 0;
  IsC = __CFLocalePrefsAppleTemperatureUnitIsC(v2, (char *)&v236);
  if (v236)
    *((_BYTE *)v1 + 137) = IsC != 0;
  v15 = __CFLocalePrefsAppleForce24HourTime(v2, &v236);
  if (v236)
    *((_BYTE *)v1 + 138) = v15;
  v16 = __CFLocalePrefsAppleForce12HourTime(v2, &v236);
  if (v236)
    *((_BYTE *)v1 + 139) = v16;
  v17 = (void *)__CFLocalePrefsCopyAppleCollationOrder(v2);
  if (v17)
  {
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

    swift_bridgeObjectRelease();
    v1[4] = v19;
    v1[5] = v21;
  }
  v22 = (void *)__CFLocalePrefsCopyCountry(v2);
  if (v22)
  {
    v23 = v22;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v26 = v25;

    swift_bridgeObjectRelease();
    v1[15] = v24;
    v1[16] = v26;
  }
  v27 = __CFLocalePrefsCopyAppleICUDateTimeSymbols(v2);
  if (v27)
  {
    v28 = v27;

    v1[8] = v28;
  }
  v29 = (void *)__CFLocalePrefsCopyAppleICUDateFormatStrings(v2);
  v234 = v1;
  v235 = v2;
  if (v29)
  {
    v30 = v29;
    v31 = (void *)v1[9];
    v32 = v29;

    v1[9] = v30;
    v238[0] = 0;
    v33 = v32;
    specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v33, v238);

    v34 = v238[0];
    if (v238[0])
    {
      v225 = v33;
      v35 = 0;
      v36 = v238[0] + 64;
      v37 = 1 << *(_BYTE *)(v238[0] + 32);
      if (v37 < 64)
        v38 = ~(-1 << v37);
      else
        v38 = -1;
      v39 = v38 & *(_QWORD *)(v238[0] + 64);
      v40 = (unint64_t)(v37 + 63) >> 6;
      v228 = v40;
      v231 = MEMORY[0x1E0DEE9E0];
      if (!v39)
        goto LABEL_32;
LABEL_29:
      v41 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      for (i = v41 | (v35 << 6); ; i = __clz(__rbit64(v53)) + (v35 << 6))
      {
        v43 = 16 * i;
        v44 = (uint64_t *)(*(_QWORD *)(v34 + 48) + v43);
        v45 = *v44;
        v46 = v44[1];
        v47 = (uint64_t *)(*(_QWORD *)(v34 + 56) + v43);
        v48 = *v47;
        v49 = v47[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v50 = specialized FixedWidthInteger.init(_:)(v45, v46);
        if ((v51 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          if (v39)
            goto LABEL_29;
          goto LABEL_32;
        }
        v55 = v50;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v238[0] = v231;
        v58 = specialized __RawDictionaryStorage.find<A>(_:)(v55);
        v59 = *(_QWORD *)(v231 + 16);
        v60 = (v57 & 1) == 0;
        v61 = v59 + v60;
        if (__OFADD__(v59, v60))
          goto LABEL_279;
        if (*(_QWORD *)(v231 + 24) >= v61)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v40 = v228;
            v63 = v231;
            if ((v57 & 1) != 0)
              goto LABEL_53;
          }
          else
          {
            v217 = v58;
            v219 = v57;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Date.FormatStyle.DateStyle, String>);
            v67 = static _DictionaryStorage.copy(original:)();
            v63 = v67;
            if (*(_QWORD *)(v231 + 16))
            {
              v68 = (char *)(v67 + 64);
              __src = (char *)(v231 + 64);
              v69 = (unint64_t)((1 << *(_BYTE *)(v63 + 32)) + 63) >> 6;
              if (v63 != v231 || v68 >= &__src[8 * v69])
                memmove(v68, __src, 8 * v69);
              v70 = 0;
              *(_QWORD *)(v63 + 16) = *(_QWORD *)(v231 + 16);
              v71 = 1 << *(_BYTE *)(v231 + 32);
              if (v71 < 64)
                v72 = ~(-1 << v71);
              else
                v72 = -1;
              v73 = v72 & *(_QWORD *)(v231 + 64);
              v221 = (void *)((unint64_t)(v71 + 63) >> 6);
              while (1)
              {
                if (v73)
                {
                  v74 = __clz(__rbit64(v73));
                  v73 &= v73 - 1;
                  v75 = v74 | (v70 << 6);
                }
                else
                {
                  v83 = v70 + 1;
                  if (__OFADD__(v70, 1))
                  {
                    __break(1u);
LABEL_284:
                    __break(1u);
LABEL_285:
                    __break(1u);
                    goto LABEL_286;
                  }
                  if (v83 >= (uint64_t)v221)
                    break;
                  v84 = *(_QWORD *)&__src[8 * v83];
                  v85 = v70 + 1;
                  if (!v84)
                  {
                    v85 = v70 + 2;
                    if (v70 + 2 >= (uint64_t)v221)
                      break;
                    v84 = *(_QWORD *)&__src[8 * v85];
                    if (!v84)
                    {
                      v85 = v70 + 3;
                      if (v70 + 3 >= (uint64_t)v221)
                        break;
                      v84 = *(_QWORD *)&__src[8 * v85];
                      if (!v84)
                      {
                        v85 = v70 + 4;
                        if (v70 + 4 >= (uint64_t)v221)
                          break;
                        v84 = *(_QWORD *)&__src[8 * v85];
                        if (!v84)
                        {
                          v85 = v70 + 5;
                          if (v70 + 5 >= (uint64_t)v221)
                            break;
                          v84 = *(_QWORD *)&__src[8 * v85];
                          if (!v84)
                          {
                            v85 = v70 + 6;
                            if (v70 + 6 >= (uint64_t)v221)
                              break;
                            v84 = *(_QWORD *)&__src[8 * v85];
                            if (!v84)
                            {
                              v85 = v70 + 7;
                              if (v70 + 7 >= (uint64_t)v221)
                                break;
                              v84 = *(_QWORD *)&__src[8 * v85];
                              if (!v84)
                              {
                                v86 = v70 + 8;
                                if (v70 + 8 >= (uint64_t)v221)
                                  break;
                                v84 = *(_QWORD *)&__src[8 * v86];
                                if (!v84)
                                {
                                  while (1)
                                  {
                                    v85 = v86 + 1;
                                    if (__OFADD__(v86, 1))
                                      break;
                                    if (v85 >= (uint64_t)v221)
                                      goto LABEL_87;
                                    v84 = *(_QWORD *)&__src[8 * v85];
                                    ++v86;
                                    if (v84)
                                      goto LABEL_86;
                                  }
LABEL_286:
                                  __break(1u);
                                  goto LABEL_287;
                                }
                                v85 = v70 + 8;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_86:
                  v73 = (v84 - 1) & v84;
                  v70 = v85;
                  v75 = __clz(__rbit64(v84)) + (v85 << 6);
                }
                v76 = 8 * v75;
                v77 = *(_QWORD *)(*(_QWORD *)(v231 + 48) + 8 * v75);
                v78 = 16 * v75;
                v79 = (uint64_t *)(*(_QWORD *)(v231 + 56) + v78);
                v81 = *v79;
                v80 = v79[1];
                *(_QWORD *)(*(_QWORD *)(v63 + 48) + v76) = v77;
                v82 = (_QWORD *)(*(_QWORD *)(v63 + 56) + v78);
                *v82 = v81;
                v82[1] = v80;
                swift_bridgeObjectRetain();
              }
            }
LABEL_87:
            swift_bridgeObjectRelease();
            v40 = v228;
            v58 = v217;
            if ((v219 & 1) != 0)
            {
LABEL_53:
              v66 = (_QWORD *)(*(_QWORD *)(v63 + 56) + 16 * v58);
              swift_bridgeObjectRelease();
              *v66 = v48;
              v66[1] = v49;
              goto LABEL_90;
            }
          }
        }
        else
        {
          v62 = v57;
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v61, isUniquelyReferenced_nonNull_native);
          v63 = v238[0];
          v64 = specialized __RawDictionaryStorage.find<A>(_:)(v55);
          if ((v62 & 1) != (v65 & 1))
            goto LABEL_289;
          v58 = v64;
          v40 = v228;
          if ((v62 & 1) != 0)
            goto LABEL_53;
        }
        *(_QWORD *)(v63 + 8 * (v58 >> 6) + 64) |= 1 << v58;
        *(_QWORD *)(*(_QWORD *)(v63 + 48) + 8 * v58) = v55;
        v87 = (_QWORD *)(*(_QWORD *)(v63 + 56) + 16 * v58);
        *v87 = v48;
        v87[1] = v49;
        v88 = *(_QWORD *)(v63 + 16);
        v89 = __OFADD__(v88, 1);
        v90 = v88 + 1;
        if (v89)
          goto LABEL_282;
        *(_QWORD *)(v63 + 16) = v90;
LABEL_90:
        swift_bridgeObjectRelease();
        v231 = v63;
        if (v39)
          goto LABEL_29;
LABEL_32:
        v52 = v35 + 1;
        if (__OFADD__(v35, 1))
        {
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
          goto LABEL_275;
        }
        if (v52 >= v40)
          goto LABEL_92;
        v53 = *(_QWORD *)(v36 + 8 * v52);
        ++v35;
        if (!v53)
        {
          v35 = v52 + 1;
          if (v52 + 1 >= v40)
            goto LABEL_92;
          v53 = *(_QWORD *)(v36 + 8 * v35);
          if (!v53)
          {
            v35 = v52 + 2;
            if (v52 + 2 >= v40)
              goto LABEL_92;
            v53 = *(_QWORD *)(v36 + 8 * v35);
            if (!v53)
            {
              v54 = v52 + 3;
              if (v54 >= v40)
              {
LABEL_92:

                swift_release();
                v1 = v234;
                swift_bridgeObjectRelease();
                v234[13] = v231;
                goto LABEL_94;
              }
              v53 = *(_QWORD *)(v36 + 8 * v54);
              if (!v53)
              {
                while (1)
                {
                  v35 = v54 + 1;
                  if (__OFADD__(v54, 1))
                    break;
                  if (v35 >= v40)
                    goto LABEL_92;
                  v53 = *(_QWORD *)(v36 + 8 * v35);
                  ++v54;
                  if (v53)
                    goto LABEL_45;
                }
LABEL_275:
                __break(1u);
                goto LABEL_276;
              }
              v35 = v54;
            }
          }
        }
LABEL_45:
        v39 = (v53 - 1) & v53;
      }
    }

LABEL_94:
    v2 = v235;
  }
  v91 = __CFLocalePrefsCopyAppleICUTimeFormatStrings(v2);
  if (v91)
  {
    v92 = v91;

    v1[10] = v92;
  }
  v93 = __CFLocalePrefsCopyAppleICUNumberFormatStrings(v2);
  if (v93)
  {
    v94 = v93;

    v1[11] = v94;
  }
  v95 = (void *)__CFLocalePrefsCopyAppleICUNumberSymbols(v2);
  if (!v95)
    goto LABEL_172;
  v96 = v95;
  v97 = (void *)v1[12];
  v98 = v95;

  v1[12] = v96;
  v238[0] = 0;
  v99 = v98;
  specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v99, v238);

  v100 = v238[0];
  if (!v238[0])
  {

    goto LABEL_171;
  }
  v229 = v99;
  v101 = 0;
  v102 = v238[0] + 64;
  v103 = 1 << *(_BYTE *)(v238[0] + 32);
  if (v103 < 64)
    v104 = ~(-1 << v103);
  else
    v104 = -1;
  v105 = v104 & *(_QWORD *)(v238[0] + 64);
  v106 = (unint64_t)(v103 + 63) >> 6;
  v232 = MEMORY[0x1E0DEE9E0];
  if (!v105)
    goto LABEL_108;
LABEL_105:
  v107 = __clz(__rbit64(v105));
  v105 &= v105 - 1;
  for (j = v107 | (v101 << 6); ; j = __clz(__rbit64(v118)) + (v101 << 6))
  {
    v109 = 16 * j;
    v110 = (uint64_t *)(*(_QWORD *)(v100 + 48) + v109);
    v111 = *v110;
    v112 = v110[1];
    v113 = (uint64_t *)(*(_QWORD *)(v100 + 56) + v109);
    v115 = *v113;
    v114 = v113[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v116 = specialized FixedWidthInteger.init(_:)(v111, v112);
    if ((v116 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      if (v105)
        goto LABEL_105;
      goto LABEL_108;
    }
    v120 = v116;
    v121 = swift_isUniquelyReferenced_nonNull_native();
    v238[0] = v232;
    v123 = specialized __RawDictionaryStorage.find<A>(_:)(v120);
    v124 = *(_QWORD *)(v232 + 16);
    v125 = (v122 & 1) == 0;
    v126 = v124 + v125;
    if (__OFADD__(v124, v125))
      goto LABEL_280;
    if (*(_QWORD *)(v232 + 24) >= v126)
    {
      if ((v121 & 1) != 0)
      {
        v127 = v232;
        if ((v122 & 1) != 0)
          goto LABEL_129;
      }
      else
      {
        v218 = v123;
        v227 = v122;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, String>);
        v131 = static _DictionaryStorage.copy(original:)();
        v127 = v131;
        if (*(_QWORD *)(v232 + 16))
        {
          v132 = (char *)(v131 + 64);
          v222 = (char *)(v232 + 64);
          v133 = (unint64_t)((1 << *(_BYTE *)(v127 + 32)) + 63) >> 6;
          if (v127 != v232 || v132 >= &v222[8 * v133])
            memmove(v132, v222, 8 * v133);
          __srca = 0;
          *(_QWORD *)(v127 + 16) = *(_QWORD *)(v232 + 16);
          v134 = 1 << *(_BYTE *)(v232 + 32);
          if (v134 < 64)
            v135 = ~(-1 << v134);
          else
            v135 = -1;
          v136 = v135 & *(_QWORD *)(v232 + 64);
          v220 = (unint64_t)(v134 + 63) >> 6;
          while (1)
          {
            if (v136)
            {
              v137 = __clz(__rbit64(v136));
              v136 &= v136 - 1;
              v138 = v137 | (__srca << 6);
            }
            else
            {
              v146 = __srca + 1;
              if (__OFADD__(__srca, 1))
                goto LABEL_284;
              if (v146 >= v220)
                break;
              v147 = *(_QWORD *)&v222[8 * v146];
              v148 = __srca + 1;
              if (!v147)
              {
                v148 = __srca + 2;
                if (__srca + 2 >= v220)
                  break;
                v147 = *(_QWORD *)&v222[8 * v148];
                if (!v147)
                {
                  v148 = __srca + 3;
                  if (__srca + 3 >= v220)
                    break;
                  v147 = *(_QWORD *)&v222[8 * v148];
                  if (!v147)
                  {
                    v148 = __srca + 4;
                    if (__srca + 4 >= v220)
                      break;
                    v147 = *(_QWORD *)&v222[8 * v148];
                    if (!v147)
                    {
                      v148 = __srca + 5;
                      if (__srca + 5 >= v220)
                        break;
                      v147 = *(_QWORD *)&v222[8 * v148];
                      if (!v147)
                      {
                        v148 = __srca + 6;
                        if (__srca + 6 >= v220)
                          break;
                        v147 = *(_QWORD *)&v222[8 * v148];
                        if (!v147)
                        {
                          v148 = __srca + 7;
                          if (__srca + 7 >= v220)
                            break;
                          v147 = *(_QWORD *)&v222[8 * v148];
                          if (!v147)
                          {
                            v149 = (char *)(__srca + 8);
                            if (__srca + 8 >= v220)
                              break;
                            v147 = *(_QWORD *)&v222[8 * (_QWORD)v149];
                            if (!v147)
                            {
                              while (1)
                              {
                                v148 = (int64_t)(v149 + 1);
                                if (__OFADD__(v149, 1))
                                  break;
                                if (v148 >= v220)
                                  goto LABEL_163;
                                v147 = *(_QWORD *)&v222[8 * v148];
                                ++v149;
                                if (v147)
                                  goto LABEL_162;
                              }
LABEL_287:
                              __break(1u);
                              goto LABEL_288;
                            }
                            v148 = __srca + 8;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_162:
              v136 = (v147 - 1) & v147;
              __srca = v148;
              v138 = __clz(__rbit64(v147)) + (v148 << 6);
            }
            v139 = 4 * v138;
            v140 = *(_DWORD *)(*(_QWORD *)(v232 + 48) + 4 * v138);
            v141 = 16 * v138;
            v142 = (uint64_t *)(*(_QWORD *)(v232 + 56) + v141);
            v144 = *v142;
            v143 = v142[1];
            *(_DWORD *)(*(_QWORD *)(v127 + 48) + v139) = v140;
            v145 = (_QWORD *)(*(_QWORD *)(v127 + 56) + v141);
            *v145 = v144;
            v145[1] = v143;
            swift_bridgeObjectRetain();
          }
        }
LABEL_163:
        swift_bridgeObjectRelease();
        v123 = v218;
        if ((v227 & 1) != 0)
        {
LABEL_129:
          v130 = (uint64_t *)(*(_QWORD *)(v127 + 56) + 16 * v123);
          swift_bridgeObjectRelease();
          *v130 = v115;
          v130[1] = v114;
          goto LABEL_165;
        }
      }
    }
    else
    {
      v226 = v122;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v126, v121);
      v127 = v238[0];
      v128 = specialized __RawDictionaryStorage.find<A>(_:)(v120);
      if ((v226 & 1) != (v129 & 1))
        goto LABEL_290;
      v123 = v128;
      if ((v226 & 1) != 0)
        goto LABEL_129;
    }
    specialized _NativeDictionary._insert(at:key:value:)(v123, v120, v115, v114, (_QWORD *)v127);
LABEL_165:
    swift_bridgeObjectRelease();
    v232 = v127;
    if (v105)
      goto LABEL_105;
LABEL_108:
    v117 = v101 + 1;
    if (__OFADD__(v101, 1))
      goto LABEL_272;
    if (v117 >= v106)
      break;
    v118 = *(_QWORD *)(v102 + 8 * v117);
    ++v101;
    if (!v118)
    {
      v101 = v117 + 1;
      if (v117 + 1 >= v106)
        break;
      v118 = *(_QWORD *)(v102 + 8 * v101);
      if (!v118)
      {
        v101 = v117 + 2;
        if (v117 + 2 >= v106)
          break;
        v118 = *(_QWORD *)(v102 + 8 * v101);
        if (!v118)
        {
          v119 = v117 + 3;
          if (v119 >= v106)
            break;
          v118 = *(_QWORD *)(v102 + 8 * v119);
          if (!v118)
          {
            while (1)
            {
              v101 = v119 + 1;
              if (__OFADD__(v119, 1))
                break;
              if (v101 >= v106)
                goto LABEL_167;
              v118 = *(_QWORD *)(v102 + 8 * v101);
              ++v119;
              if (v118)
                goto LABEL_121;
            }
LABEL_276:
            __break(1u);
            goto LABEL_277;
          }
          v101 = v119;
        }
      }
    }
LABEL_121:
    v105 = (v118 - 1) & v118;
  }
LABEL_167:
  swift_release();

  if (*(_QWORD *)(v232 + 16))
  {
    swift_bridgeObjectRelease();
    v234[14] = v232;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_171:
  v2 = v235;
LABEL_172:
  Weekday = (void *)__CFLocalePrefsCopyAppleFirstWeekday(v2);
  if (Weekday)
  {
    v151 = Weekday;
    v238[0] = 0;
    specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(Weekday, v238);

    v152 = v238[0];
    if (v238[0])
    {
      v153 = 0;
      v154 = v238[0] + 64;
      v155 = 1 << *(_BYTE *)(v238[0] + 32);
      if (v155 < 64)
        v156 = ~(-1 << v155);
      else
        v156 = -1;
      v157 = v156 & *(_QWORD *)(v238[0] + 64);
      v158 = (unint64_t)(v155 + 63) >> 6;
      v159 = MEMORY[0x1E0DEE9E0];
      if (!v157)
        goto LABEL_181;
LABEL_178:
      v160 = __clz(__rbit64(v157));
      v157 &= v157 - 1;
      for (k = v160 | (v153 << 6); ; k = __clz(__rbit64(v169)) + (v153 << 6))
      {
        v162 = (uint64_t *)(*(_QWORD *)(v152 + 48) + 16 * k);
        v163 = *v162;
        v164 = (void *)v162[1];
        v165 = *(_QWORD *)(*(_QWORD *)(v152 + 56) + 8 * k);
        swift_bridgeObjectRetain();
        v166._countAndFlagsBits = v163;
        v166._object = v164;
        Calendar.Identifier.init(identifierString:)(v166);
        v167 = LOBYTE(v238[0]);
        if (LOBYTE(v238[0]) == 16)
        {
          if (v157)
            goto LABEL_178;
          goto LABEL_181;
        }
        v171 = swift_isUniquelyReferenced_nonNull_native();
        v238[0] = v159;
        v173 = specialized __RawDictionaryStorage.find<A>(_:)(v167);
        v174 = *(_QWORD *)(v159 + 16);
        v175 = (v172 & 1) == 0;
        v176 = v174 + v175;
        if (__OFADD__(v174, v175))
          goto LABEL_281;
        if (*(_QWORD *)(v159 + 24) >= v176)
        {
          if ((v171 & 1) != 0)
          {
            v178 = v159;
            if ((v172 & 1) != 0)
              goto LABEL_202;
          }
          else
          {
            v233 = v173;
            v230 = v172;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, Int>);
            v181 = static _DictionaryStorage.copy(original:)();
            v178 = v181;
            if (*(_QWORD *)(v159 + 16))
            {
              v182 = (void *)(v181 + 64);
              v183 = v159 + 64;
              v184 = (unint64_t)((1 << *(_BYTE *)(v178 + 32)) + 63) >> 6;
              if (v178 != v159 || (unint64_t)v182 >= v183 + 8 * v184)
                memmove(v182, (const void *)(v159 + 64), 8 * v184);
              v185 = 0;
              *(_QWORD *)(v178 + 16) = *(_QWORD *)(v159 + 16);
              v186 = 1 << *(_BYTE *)(v159 + 32);
              if (v186 < 64)
                v187 = ~(-1 << v186);
              else
                v187 = -1;
              v188 = v187 & *(_QWORD *)(v159 + 64);
              v189 = (unint64_t)(v186 + 63) >> 6;
              while (1)
              {
                if (v188)
                {
                  v190 = __clz(__rbit64(v188));
                  v188 &= v188 - 1;
                  v191 = v190 | (v185 << 6);
                }
                else
                {
                  v193 = v185 + 1;
                  if (__OFADD__(v185, 1))
                    goto LABEL_285;
                  if (v193 >= v189)
                    break;
                  v194 = *(_QWORD *)(v183 + 8 * v193);
                  ++v185;
                  if (!v194)
                  {
                    v185 = v193 + 1;
                    if (v193 + 1 >= v189)
                      break;
                    v194 = *(_QWORD *)(v183 + 8 * v185);
                    if (!v194)
                    {
                      v185 = v193 + 2;
                      if (v193 + 2 >= v189)
                        break;
                      v194 = *(_QWORD *)(v183 + 8 * v185);
                      if (!v194)
                      {
                        v185 = v193 + 3;
                        if (v193 + 3 >= v189)
                          break;
                        v194 = *(_QWORD *)(v183 + 8 * v185);
                        if (!v194)
                        {
                          v185 = v193 + 4;
                          if (v193 + 4 >= v189)
                            break;
                          v194 = *(_QWORD *)(v183 + 8 * v185);
                          if (!v194)
                          {
                            v185 = v193 + 5;
                            if (v193 + 5 >= v189)
                              break;
                            v194 = *(_QWORD *)(v183 + 8 * v185);
                            if (!v194)
                            {
                              v185 = v193 + 6;
                              if (v193 + 6 >= v189)
                                break;
                              v194 = *(_QWORD *)(v183 + 8 * v185);
                              if (!v194)
                              {
                                v195 = v193 + 7;
                                if (v195 >= v189)
                                  break;
                                v196 = v183;
                                v194 = *(_QWORD *)(v183 + 8 * v195);
                                if (!v194)
                                {
                                  while (1)
                                  {
                                    v185 = v195 + 1;
                                    if (__OFADD__(v195, 1))
                                      break;
                                    if (v185 >= v189)
                                      goto LABEL_236;
                                    v183 = v196;
                                    v194 = *(_QWORD *)(v196 + 8 * v185);
                                    ++v195;
                                    if (v194)
                                      goto LABEL_235;
                                  }
LABEL_288:
                                  __break(1u);
LABEL_289:
                                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                                  __break(1u);
LABEL_290:
                                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                                  __break(1u);
LABEL_291:
                                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                                  __break(1u);
                                  return;
                                }
                                v185 = v195;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_235:
                  v188 = (v194 - 1) & v194;
                  v191 = __clz(__rbit64(v194)) + (v185 << 6);
                }
                v192 = *(_QWORD *)(*(_QWORD *)(v159 + 56) + 8 * v191);
                *(_BYTE *)(*(_QWORD *)(v178 + 48) + v191) = *(_BYTE *)(*(_QWORD *)(v159 + 48) + v191);
                *(_QWORD *)(*(_QWORD *)(v178 + 56) + 8 * v191) = v192;
              }
            }
LABEL_236:
            swift_bridgeObjectRelease();
            v173 = v233;
            if ((v230 & 1) != 0)
            {
LABEL_202:
              *(_QWORD *)(*(_QWORD *)(v178 + 56) + 8 * v173) = v165;
              goto LABEL_238;
            }
          }
        }
        else
        {
          v177 = v172;
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v176, v171);
          v178 = v238[0];
          v179 = specialized __RawDictionaryStorage.find<A>(_:)(v167);
          if ((v177 & 1) != (v180 & 1))
            goto LABEL_291;
          v173 = v179;
          if ((v177 & 1) != 0)
            goto LABEL_202;
        }
        specialized _NativeDictionary._insert(at:key:value:)(v173, v167, v165, (_QWORD *)v178);
LABEL_238:
        swift_bridgeObjectRelease();
        v159 = v178;
        if (v157)
          goto LABEL_178;
LABEL_181:
        v168 = v153 + 1;
        if (__OFADD__(v153, 1))
          goto LABEL_273;
        if (v168 >= v158)
        {
LABEL_240:
          swift_release();
          if (*(_QWORD *)(v159 + 16))
          {
            swift_bridgeObjectRelease();
            v234[6] = v159;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          v2 = v235;
          break;
        }
        v169 = *(_QWORD *)(v154 + 8 * v168);
        ++v153;
        if (!v169)
        {
          v153 = v168 + 1;
          if (v168 + 1 >= v158)
            goto LABEL_240;
          v169 = *(_QWORD *)(v154 + 8 * v153);
          if (!v169)
          {
            v153 = v168 + 2;
            if (v168 + 2 >= v158)
              goto LABEL_240;
            v169 = *(_QWORD *)(v154 + 8 * v153);
            if (!v169)
            {
              v170 = v168 + 3;
              if (v170 >= v158)
                goto LABEL_240;
              v169 = *(_QWORD *)(v154 + 8 * v170);
              if (!v169)
              {
                while (1)
                {
                  v153 = v170 + 1;
                  if (__OFADD__(v170, 1))
                    break;
                  if (v153 >= v158)
                    goto LABEL_240;
                  v169 = *(_QWORD *)(v154 + 8 * v153);
                  ++v170;
                  if (v169)
                    goto LABEL_194;
                }
LABEL_277:
                __break(1u);
                goto LABEL_278;
              }
              v153 = v170;
            }
          }
        }
LABEL_194:
        v157 = (v169 - 1) & v169;
      }
    }
  }
  Week = (void *)__CFLocalePrefsCopyAppleMinDaysInFirstWeek(v2);
  if (Week)
  {
    v198 = Week;
    v238[0] = 0;
    specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(Week, v238);

    v199 = v238[0];
    if (v238[0])
    {
      v200 = 0;
      v238[0] = MEMORY[0x1E0DEE9E0];
      v201 = v199 + 64;
      v202 = 1 << *(_BYTE *)(v199 + 32);
      v203 = -1;
      if (v202 < 64)
        v203 = ~(-1 << v202);
      v204 = v203 & *(_QWORD *)(v199 + 64);
      v205 = (unint64_t)(v202 + 63) >> 6;
      while (1)
      {
        if (v204)
        {
          v206 = __clz(__rbit64(v204));
          v204 &= v204 - 1;
          v207 = v206 | (v200 << 6);
        }
        else
        {
          v208 = v200 + 1;
          if (__OFADD__(v200, 1))
            goto LABEL_274;
          if (v208 >= v205)
          {
LABEL_267:
            swift_release();
            v216 = v238[0];
            if (*(_QWORD *)(v238[0] + 16))
            {
              swift_bridgeObjectRelease();
              v234[7] = v216;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            return;
          }
          v209 = *(_QWORD *)(v201 + 8 * v208);
          ++v200;
          if (!v209)
          {
            v200 = v208 + 1;
            if (v208 + 1 >= v205)
              goto LABEL_267;
            v209 = *(_QWORD *)(v201 + 8 * v200);
            if (!v209)
            {
              v200 = v208 + 2;
              if (v208 + 2 >= v205)
                goto LABEL_267;
              v209 = *(_QWORD *)(v201 + 8 * v200);
              if (!v209)
              {
                v210 = v208 + 3;
                if (v210 >= v205)
                  goto LABEL_267;
                v209 = *(_QWORD *)(v201 + 8 * v210);
                if (!v209)
                {
                  while (1)
                  {
                    v200 = v210 + 1;
                    if (__OFADD__(v210, 1))
                      break;
                    if (v200 >= v205)
                      goto LABEL_267;
                    v209 = *(_QWORD *)(v201 + 8 * v200);
                    ++v210;
                    if (v209)
                      goto LABEL_264;
                  }
LABEL_278:
                  __break(1u);
LABEL_279:
                  __break(1u);
LABEL_280:
                  __break(1u);
LABEL_281:
                  __break(1u);
LABEL_282:
                  __break(1u);
                }
                v200 = v210;
              }
            }
          }
LABEL_264:
          v204 = (v209 - 1) & v209;
          v207 = __clz(__rbit64(v209)) + (v200 << 6);
        }
        v211 = (uint64_t *)(*(_QWORD *)(v199 + 48) + 16 * v207);
        v212 = *v211;
        v213 = (void *)v211[1];
        v214 = *(_QWORD *)(*(_QWORD *)(v199 + 56) + 8 * v207);
        swift_bridgeObjectRetain();
        v215._countAndFlagsBits = v212;
        v215._object = v213;
        Calendar.Identifier.init(identifierString:)(v215);
        if (v237 != 16)
          specialized Dictionary.subscript.setter(v214, 0, v237);
      }
    }
  }
}

CFTypeRef __CFLocalePrefsCopyCountry(const __CFDictionary *a1)
{
  const void *Value;
  const void *v2;
  CFTypeID v3;

  Value = CFDictionaryGetValue(a1, CFSTR("Country"));
  if (Value && (v2 = Value, v3 = CFGetTypeID(Value), v3 == CFStringGetTypeID()))
    return CFRetain(v2);
  else
    return 0;
}

CFTypeRef __CFLocalePrefsCopyAppleMinDaysInFirstWeek(const __CFDictionary *a1)
{
  const void *Value;
  const void *v2;
  CFTypeID v3;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleMinDaysInFirstWeek"));
  if (Value && (v2 = Value, v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID()))
    return CFRetain(v2);
  else
    return 0;
}

CFTypeRef __CFLocalePrefsCopyAppleLocale(const __CFDictionary *a1)
{
  const void *Value;
  const void *v2;
  CFTypeID v3;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleLocale"));
  if (Value && (v2 = Value, v3 = CFGetTypeID(Value), v3 == CFStringGetTypeID()))
    return CFRetain(v2);
  else
    return 0;
}

__CFArray *__CFLocalePrefsCopyAppleLanguages(const __CFDictionary *a1)
{
  const __CFArray *Value;
  const __CFArray *v2;
  CFTypeID v3;
  uint64_t Count;
  __CFArray *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v8;

  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("AppleLanguages"));
  if (!Value)
    return 0;
  v2 = Value;
  v3 = CFGetTypeID(Value);
  if (v3 != CFArrayGetTypeID())
    return 0;
  Count = CFArrayGetCount(v2);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE30], Count, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
      v8 = CFGetTypeID(ValueAtIndex);
      if (v8 == CFStringGetTypeID())
        CFArrayAppendValue(Mutable, ValueAtIndex);
    }
  }
  return Mutable;
}

CFTypeRef __CFLocalePrefsCopyAppleICUTimeFormatStrings(const __CFDictionary *a1)
{
  const void *Value;
  const void *v2;
  CFTypeID v3;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleICUTimeFormatStrings"));
  if (Value && (v2 = Value, v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID()))
    return CFRetain(v2);
  else
    return 0;
}

CFTypeRef __CFLocalePrefsCopyAppleICUNumberSymbols(const __CFDictionary *a1)
{
  const void *Value;
  const void *v2;
  CFTypeID v3;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleICUNumberSymbols"));
  if (Value && (v2 = Value, v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID()))
    return CFRetain(v2);
  else
    return 0;
}

CFTypeRef __CFLocalePrefsCopyAppleICUNumberFormatStrings(const __CFDictionary *a1)
{
  const void *Value;
  const void *v2;
  CFTypeID v3;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleICUNumberFormatStrings"));
  if (Value && (v2 = Value, v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID()))
    return CFRetain(v2);
  else
    return 0;
}

CFTypeRef __CFLocalePrefsCopyAppleICUDateTimeSymbols(const __CFDictionary *a1)
{
  const void *Value;
  const void *v2;
  CFTypeID v3;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleICUDateTimeSymbols"));
  if (Value && (v2 = Value, v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID()))
    return CFRetain(v2);
  else
    return 0;
}

CFTypeRef __CFLocalePrefsCopyAppleICUDateFormatStrings(const __CFDictionary *a1)
{
  const void *Value;
  const void *v2;
  CFTypeID v3;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleICUDateFormatStrings"));
  if (Value && (v2 = Value, v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID()))
    return CFRetain(v2);
  else
    return 0;
}

CFTypeRef __CFLocalePrefsCopyAppleFirstWeekday(const __CFDictionary *a1)
{
  const void *Value;
  const void *v2;
  CFTypeID v3;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleFirstWeekday"));
  if (Value && (v2 = Value, v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID()))
    return CFRetain(v2);
  else
    return 0;
}

CFTypeRef __CFLocalePrefsCopyAppleCollationOrder(const __CFDictionary *a1)
{
  const void *Value;
  const void *v2;
  CFTypeID v3;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleCollationOrder"));
  if (Value && (v2 = Value, v3 = CFGetTypeID(Value), v3 == CFStringGetTypeID()))
    return CFRetain(v2);
  else
    return 0;
}

uint64_t __CFLocalePrefsAppleTemperatureUnitIsC(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  const void *v4;
  uint64_t result;
  char v6;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleTemperatureUnit"));
  if (!Value)
    goto LABEL_6;
  v4 = Value;
  if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0C9B0A0]))
  {
    if (CFEqual(v4, (CFTypeRef)*MEMORY[0x1E0C9B098]))
    {
      v6 = 1;
      result = 1;
      goto LABEL_7;
    }
LABEL_6:
    v6 = 0;
    result = 0;
    goto LABEL_7;
  }
  result = 0;
  v6 = 1;
LABEL_7:
  *a2 = v6;
  return result;
}

BOOL __CFLocalePrefsAppleMetricUnitsIsMetric(const __CFDictionary *a1, BOOL *a2)
{
  const void *Value;
  _BOOL8 v4;
  BOOL v5;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleMetricUnits"));
  v4 = Value == (const void *)*MEMORY[0x1E0C9AE50];
  v5 = Value == (const void *)*MEMORY[0x1E0C9AE40] || Value == (const void *)*MEMORY[0x1E0C9AE50];
  *a2 = v5;
  return v4;
}

uint64_t __CFLocalePrefsAppleMeasurementUnitsIsCm(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  const void *v4;
  uint64_t result;
  char v6;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleMeasurementUnits"));
  if (!Value)
    goto LABEL_6;
  v4 = Value;
  if (!CFEqual(Value, CFSTR("Inches")))
  {
    if (CFEqual(v4, CFSTR("Centimeters")))
    {
      v6 = 1;
      result = 1;
      goto LABEL_7;
    }
LABEL_6:
    v6 = 0;
    result = 0;
    goto LABEL_7;
  }
  result = 0;
  v6 = 1;
LABEL_7:
  *a2 = v6;
  return result;
}

BOOL __CFLocalePrefsAppleForce24HourTime(const __CFDictionary *a1, BOOL *a2)
{
  const void *Value;
  _BOOL8 v4;
  BOOL v5;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleICUForce24HourTime"));
  v4 = Value == (const void *)*MEMORY[0x1E0C9AE50];
  v5 = Value == (const void *)*MEMORY[0x1E0C9AE40] || Value == (const void *)*MEMORY[0x1E0C9AE50];
  *a2 = v5;
  return v4;
}

BOOL __CFLocalePrefsAppleForce12HourTime(const __CFDictionary *a1, BOOL *a2)
{
  const void *Value;
  _BOOL8 v4;
  BOOL v5;

  Value = CFDictionaryGetValue(a1, CFSTR("AppleICUForce12HourTime"));
  v4 = Value == (const void *)*MEMORY[0x1E0C9AE50];
  v5 = Value == (const void *)*MEMORY[0x1E0C9AE40] || Value == (const void *)*MEMORY[0x1E0C9AE50];
  *a2 = v5;
  return v4;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v14 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  v4 = v14;
  if (!v2)
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      return v4;
LABEL_7:
    for (i = 4; ; ++i)
    {
      v6 = i - 4;
      if ((a1 & 0xC000000000000001) != 0)
      {
        MEMORY[0x186DA53A8](i - 4, a1);
        v7 = i - 3;
        if (__OFADD__(v6, 1))
          goto LABEL_22;
      }
      else
      {
        swift_unknownObjectRetain();
        v7 = i - 3;
        if (__OFADD__(v6, 1))
        {
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
      }
      if (!swift_dynamicCast())
      {
        swift_release();
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1);
        v4 = v14;
      }
      v9 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v4 = v14;
      }
      *(_QWORD *)(v4 + 16) = v9 + 1;
      v10 = v4 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v12;
      *(_QWORD *)(v10 + 40) = v13;
      if (v7 == v2)
        return v4;
    }
  }
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v2)
    goto LABEL_7;
  return v4;
}

Swift::String __swiftcall Date.formatted()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  Swift::String result;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20[8];

  v18 = 1;
  v19 = 0;
  v16 = 1;
  v17 = 0;
  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static LocaleCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v0, (uint64_t *)v20);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  *(_QWORD *)&v15 = *(_QWORD *)&v20[0];
  *((_QWORD *)&v15 + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static CalendarCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v2, (uint64_t *)v20);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v14 = v20[0];
  if (one-time initialization token for cache != -1)
    swift_once();
  v4 = static TimeZoneCache.cache + 16;
  v5 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v4, (uint64_t *)v20);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  *(_QWORD *)&v13 = *(_QWORD *)&v20[0];
  *((_QWORD *)&v13 + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating, (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  v12 = 0;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)((uint64_t)&v18, &v16, &v15, &v14, &v13, &v12, (uint64_t)v20);
  v6 = specialized Date.formatted<A>(_:)(v20);
  v8 = v7;
  outlined release of Date.FormatStyle((uint64_t)v20);
  v9 = v6;
  v10 = v8;
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

uint64_t _NSSwiftLocale.classForCoder.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t *v7;
  uint64_t v9[3];
  __int128 v10;

  v10 = *(_OWORD *)(v0 + OBJC_IVAR____NSSwiftLocale_locale);
  v1 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v1 != -1)
    swift_once();
  v2 = static LocaleCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v9[0];
  v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  v9[0] = v4;
  v9[1] = v5;
  v6 = specialized static Locale.== infix(_:_:)((uint64_t)&v10, (uint64_t)v9);
  swift_unknownObjectRelease();
  swift_release();
  if ((v6 & 1) != 0)
    v7 = (unint64_t *)&lazy cache variable for type metadata for NSAutoLocale;
  else
    v7 = (unint64_t *)&lazy cache variable for type metadata for NSLocale;
  return type metadata accessor for NSMorphologyPronoun(0, v7);
}

id _NSSwiftTimeZone.replacementObject(for:)@<X0>(_QWORD *a1@<X8>)
{
  char *v1;
  void *v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  id result;
  uint64_t v13[3];
  __int128 v14;

  v2 = v1;
  ObjectType = swift_getObjectType();
  v14 = *(_OWORD *)&v1[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  v5 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v5 != -1)
    swift_once();
  v6 = static TimeZoneCache.cache + 16;
  v7 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v6, v13);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  v8 = v13[0];
  v9 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating, (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  v13[0] = v8;
  v13[1] = v9;
  v10 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v14, (uint64_t)v13);
  swift_unknownObjectRelease();
  swift_release();
  if ((v10 & 1) != 0)
  {
    v11 = objc_msgSend(objc_allocWithZone((Class)__NSLocalTimeZone), sel_init);
    result = (id)type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for __NSLocalTimeZone);
    ObjectType = (uint64_t)result;
  }
  else
  {
    result = v2;
    v11 = result;
  }
  a1[3] = ObjectType;
  *a1 = v11;
  return result;
}

uint64_t closure #1 in TimeZoneCache.autoupdatingCurrent()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    type metadata accessor for _TimeZoneAutoupdating();
    v5 = swift_allocObject();
    *(_QWORD *)(a1 + 16) = v5;
    swift_retain();
  }
  *a2 = v5;
  return swift_retain();
}

uint64_t Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = *(_QWORD *)result;
  v8 = *a2;
  v9 = *((_BYTE *)a2 + 8);
  v10 = *(_BYTE *)(result + 8) | (*(_QWORD *)result == 0);
  if (*(_BYTE *)(result + 8) & 1 | (*(_QWORD *)result == 0))
  {
    v7 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0x3000000000000;
  }
  else
  {
    if ((unint64_t)(v7 - 1) > 3)
    {
      v13 = 3327;
      v14 = 0x2020E0906030001;
      v12 = 50660611;
    }
    else
    {
      v15 = 8 * (v7 - 1);
      v12 = *(_QWORD *)((char *)&unk_1820FDF08 + v15);
      v14 = *(_QWORD *)((char *)&unk_1820FDF28 + v15);
      v13 = 3327;
    }
    v11 = 3;
  }
  v16 = *a3;
  v17 = *a4;
  v18 = *a5;
  v19 = *a6;
  if (!v8)
    v9 = 1;
  if ((v9 & 1) == 0)
  {
    v20 = 0x900000000;
    v21 = 0x1000000000000;
    if ((~v14 & 0x3000000000000) != 0)
    {
      v27 = 0;
      v24 = v14 & 0x200000000000000;
      v22 = v13 >> 8;
      v23 = v12 & 3;
      v30 = v12 & 0x500;
      v29 = v12 & 0x70000;
      v28 = v12 & 0x3000000;
      v26 = v14 & 0x30000;
      v25 = v14 & 0x7000000;
      v20 = v14 & 0x900000000;
      v21 = v14 & 1 | 0x1000000000000;
      if (v8 != 3)
      {
LABEL_12:
        if (v8 == 2)
          v31 = 0x100000000000000;
        else
          v31 = v24;
        goto LABEL_17;
      }
    }
    else
    {
      LOWORD(v22) = 12;
      v23 = 255;
      v24 = 0x200000000000000;
      v25 = 100663296;
      v26 = 196608;
      v27 = 256;
      v28 = 50331648;
      v29 = 327680;
      v30 = 1280;
      v11 = 3;
      LOBYTE(v13) = -1;
      if (v8 != 3)
        goto LABEL_12;
    }
    LOWORD(v22) = 0;
    v31 = 0x100000000000000;
LABEL_17:
    v12 = v30 | v23 | v29 | v28;
    v32 = v21 | v27;
    result = v26 | v25;
    v14 = v32 | v26 | v25 | v20 | v31 & 0x300000000000000;
    LOWORD(v13) = v13 | (unsigned __int16)((_WORD)v22 << 8);
  }
  *(_QWORD *)a7 = v11;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = v12;
  *(_QWORD *)(a7 + 24) = 0;
  *(_QWORD *)(a7 + 32) = v14;
  *(_QWORD *)(a7 + 40) = 0;
  *(_WORD *)(a7 + 48) = v13;
  *(_QWORD *)(a7 + 56) = v7;
  *(_BYTE *)(a7 + 64) = v10 & 1;
  *(_OWORD *)(a7 + 72) = v16;
  *(_OWORD *)(a7 + 88) = v18;
  *(_OWORD *)(a7 + 104) = v17;
  *(_BYTE *)(a7 + 120) = v19;
  *(_BYTE *)(a7 + 121) = 1;
  return result;
}

void sub_1819381B0(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1819381D0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t destroy for ICUMeasurementNumberFormatter.Signature(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 40);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Locale.decimalSeparator.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 224))(ObjectType, v1);
}

uint64_t protocol witness for _LocaleProtocol.decimalSeparator.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 224))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.decimalSeparator.getter in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.decimalSeparator.getter(&v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.decimalSeparator.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _LocaleICU.decimalSeparator.getter(v1, a1);
}

uint64_t closure #1 in _LocaleICU.decimalSeparator.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  int Symbol;
  uint64_t v9;
  _DWORD v10[20];
  _BYTE v11[144];
  _QWORD v12[20];

  v12[18] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  outlined init with take of LocalePreferences?(a1 + 40, (uint64_t)v11);
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v12);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v12) == 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = v12[14];
    swift_bridgeObjectRetain();
  }
  v6 = _LocaleICU.State.NumberFormattersBox.formatter(for:identifier:numberSymbols:)(1, v4, v3, v5);
  result = swift_bridgeObjectRelease();
  if (v6)
  {
    MEMORY[0x1E0C80A78](result);
    v10[19] = 0;
    Symbol = unum_getSymbol();
    result = 0;
    v9 = 0;
    if (Symbol <= 32 && Symbol > 0)
      result = specialized String.init(_utf16:)((uint64_t)v10, Symbol);
    *a2 = result;
    a2[1] = v9;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x186DA5EC4](*(_QWORD *)(v1 + 40), a1, 4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Notifications.State()
{
  return &type metadata for NSNotificationCenter.Notifications.State;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance JSONDecoderImpl.KeyedContainer<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return JSONDecoderImpl.KeyedContainer.superDecoder()(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), a1);
}

uint64_t JSONDecoderImpl.KeyedContainer.superDecoder()@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = specialized JSONDecoderImpl.KeyedContainer.decoderForKeyNoThrow<A>(_:)(0x7265707573, 0xE500000000000000, 0, 0, a1, a2, a3);
  a4[3] = type metadata accessor for JSONDecoderImpl();
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl, (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
  a4[4] = result;
  *a4 = v5;
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier and conformance Calendar.Identifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier, &type metadata for Calendar.Identifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier, &type metadata for Calendar.Identifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Calendar.Identifier, &type metadata for Calendar.Identifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier);
  }
  return result;
}

uint64_t one-time initialization function for cache()
{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<CalendarCache.State>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 60) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v1 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v1;
  *(_QWORD *)(result + 48) = -1;
  *(_BYTE *)(result + 56) = 0;
  static CalendarCache.cache = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICULegacyNumberFormatter.Signature : ICULegacyNumberFormatter]>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static ICULegacyNumberFormatter.cache = 100;
  unk_1EDC3B320 = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICUDateIntervalFormatter.Signature : ICUDateIntervalFormatter?]>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static ICUDateIntervalFormatter.cache = 100;
  unk_1EDC47DB0 = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICURelativeDateFormatter.Signature : ICURelativeDateFormatter?]>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static ICURelativeDateFormatter.cache = 100;
  *(_QWORD *)algn_1EDC47DE8 = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICUListFormatter.Signature : ICUListFormatter]>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static ICUListFormatter.cache = 100;
  unk_1EDC47CD0 = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[RegexPatternCache.Key : Regex<AnyRegexOutput>]>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static RegexPatternCache.cache = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[Date.ComponentsFormatStyle : NSDateComponentsFormatter]>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static Date.ComponentsFormatStyle.cache = 100;
  unk_1EDC47C80 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ICULegacyKey and conformance ICULegacyKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICULegacyKey and conformance ICULegacyKey;
  if (!lazy protocol witness table cache variable for type ICULegacyKey and conformance ICULegacyKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICULegacyKey, &type metadata for ICULegacyKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICULegacyKey and conformance ICULegacyKey);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.VariableID(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

ValueMetadata *type metadata accessor for Date.FormatStyle.DateStyle()
{
  return &type metadata for Date.FormatStyle.DateStyle;
}

uint64_t copyFromStringToStorage(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t v8;
  void *v10;
  uint64_t ValueAtIndex;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  NSString *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v8 = a3;
    v10 = (void *)result;
    do
    {
      v19 = 0;
      v20 = 0;
      ValueAtIndex = CFStorageGetValueAtIndex();
      v12 = v19 - a5 + v20;
      if (v12 >= v8)
        v12 = v8;
      v20 = v12;
      if (a6)
      {
        result = objc_msgSend(v10, "getCharacters:range:", ValueAtIndex, a2, v12);
        v13 = v20;
        v14 = v20;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v16 = 0;
        result = objc_msgSend(v10, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", ValueAtIndex, v12, &v18, _NSCStringEncoding, 0, a2, v12, &v16);
        if ((result & 1) == 0)
        {
          v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unable to convert bytes in string %p to _NSCStringEncoding"), v10);
          objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v15, 0));
        }
        v13 = v18;
        v14 = v20 - v17;
      }
      a2 += v14;
      a5 += v13;
      v8 -= v14;
    }
    while (v8);
  }
  return result;
}

uint64_t protocol witness for CVarArg._cVarArgEncoding.getter in conformance [A](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x186DA9D64](&protocol conformance descriptor for [A], a1);
  return CVarArg<>._cVarArgEncoding.getter(a1, a2, v4);
}

uint64_t URL.deletingPathExtension()@<X0>(unint64_t object@<X8>)
{
  uint64_t v1;
  _OWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  id v10;
  Swift::String v11;
  uint64_t countAndFlagsBits;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  Swift::String v63;
  id v64;
  void *v65;
  unint64_t v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  id v73;
  __int128 v74;
  id v75;
  void *v76;
  unsigned __int16 *v77;
  id v78;
  void *v79;
  id v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  id v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD v91[3];
  uint64_t v92[3];
  _OWORD v93[8];
  _OWORD v94[2];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  Swift::String v98;
  _BYTE v99[72];
  uint64_t v100;
  __int128 v101;
  _OWORD v102[3];
  _OWORD v103[8];
  _OWORD v104[2];
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;

  v3 = v103;
  v5 = *(void **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!v4)
    {
      __break(1u);
LABEL_74:
      __break(1u);
      return result;
    }
    if ((*(_BYTE *)(v4 + 168) & 1) != 0)
      v8 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v8 = String.subscript.getter();
    v26 = MEMORY[0x186DA4634](v8);
    v28 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (!v29)
    {
      *(_QWORD *)object = v5;
      *(_QWORD *)(object + 8) = v4;
      *(_QWORD *)(object + 16) = v6;
      swift_retain();
      v33 = v5;
      return swift_retain();
    }
    v30 = *(_BYTE *)(v4 + 218);
    v117 = 1;
    v116 = 1;
    v115 = 1;
    v114 = 1;
    v113 = 1;
    v112 = 1;
    v111 = 1;
    v110 = 1;
    v109 = 1;
    v108 = 1;
    v107 = 1;
    v106 = v30;
    v105 = 0;
    v31 = *(_BYTE *)(v4 + 168);
    v90 = v6;
    if ((v31 & 1) != 0)
    {
      swift_retain();
      v32 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    }
    else
    {
      swift_retain();
      v3 = v103;
      v32 = String.subscript.getter();
    }
    countAndFlagsBits = MEMORY[0x186DA4634](v32);
    v9 = v34;
    swift_bridgeObjectRelease();
    v35 = String.pathExtension.getter(countAndFlagsBits, v9);
    v37 = v36;
    v38 = swift_bridgeObjectRelease();
    v39 = HIBYTE(v37) & 0xF;
    if ((v37 & 0x2000000000000000) == 0)
      v39 = v35 & 0xFFFFFFFFFFFFLL;
    if (v39)
    {
      LOBYTE(v103[0]) = 46;
      MEMORY[0x1E0C80A78](v38);
      v85 = (uint64_t)v103;
      swift_bridgeObjectRetain();
      specialized BidirectionalCollection.lastIndex(where:)((unint64_t)closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)&v84, countAndFlagsBits, v9);
      v41 = v40;
      swift_bridgeObjectRelease();
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v42 = String.subscript.getter();
        v44 = v43;
        v46 = v45;
        v48 = v47;
        swift_bridgeObjectRelease();
        countAndFlagsBits = MEMORY[0x186DA4634](v42, v44, v46, v48);
        v50 = v49;
        swift_bridgeObjectRelease();
        v3 = v103;
        swift_bridgeObjectRelease();
        v9 = v50;
      }
    }
    v116 = 0;
    v110 = 0;
    if ((v9 & 0x1000000000000000) != 0)
    {
      *(_QWORD *)&v103[0] = countAndFlagsBits;
      *((_QWORD *)&v103[0] + 1) = v9;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      v76 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v77 = (unsigned __int16 *)objc_msgSend(v76, sel__fastCharacterContents);
      v78 = v76;
      if (v77)
      {
        *(_QWORD *)&v103[0] = countAndFlagsBits;
        *((_QWORD *)&v103[0] + 1) = v9;
        StringProtocol._ephemeralString.getter();
        v79 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v80 = objc_msgSend(v79, sel_length);
        swift_unknownObjectRelease();
        v81 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v77, (uint64_t)v80, 0x10u, 1);
      }
      else
      {
        v81 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(countAndFlagsBits, v9, 0x10u, 1);
      }
      v82 = v81;
      swift_bridgeObjectRelease_n();
      v3 = v103;
      if ((v82 & 1) != 0)
      {
LABEL_32:
        swift_bridgeObjectRelease();
        v98._countAndFlagsBits = v4;
        LOBYTE(v98._object) = v116;
        BYTE1(v98._object) = v115;
        BYTE2(v98._object) = v114;
        BYTE3(v98._object) = v113;
        BYTE4(v98._object) = v112;
        BYTE5(v98._object) = v111;
        BYTE6(v98._object) = v110;
        HIBYTE(v98._object) = v109;
        v99[0] = v108;
        memset(&v99[8], 0, 64);
        v100 = 0;
        LOBYTE(v101) = v107;
        *((_QWORD *)&v101 + 1) = countAndFlagsBits;
        *(_QWORD *)&v102[0] = v9;
        *(_OWORD *)((char *)v102 + 8) = 0u;
        *(_OWORD *)((char *)&v102[1] + 8) = 0u;
        BYTE8(v102[2]) = v106;
        BYTE9(v102[2]) = v105;
        v103[0] = v98;
        v103[1] = *(_OWORD *)v99;
        v103[4] = *(_OWORD *)&v99[48];
        v103[5] = 0uLL;
        v103[2] = *(_OWORD *)&v99[16];
        v103[3] = *(_OWORD *)&v99[32];
        *(_OWORD *)((char *)v104 + 10) = *(_OWORD *)((char *)&v102[1] + 10);
        v103[7] = v102[0];
        v104[0] = v102[1];
        v103[6] = v101;
        v93[6] = v101;
        v93[7] = v102[0];
        v94[0] = v102[1];
        *(_OWORD *)((char *)v94 + 10) = *(_OWORD *)((char *)&v102[1] + 10);
        v93[2] = *(_OWORD *)&v99[16];
        v93[3] = *(_OWORD *)&v99[32];
        v93[4] = *(_OWORD *)&v99[48];
        v93[5] = 0uLL;
        v93[0] = v98;
        v93[1] = *(_OWORD *)v99;
        v95 = (uint64_t)v5;
        v96 = v4;
        v97 = v90;
        outlined retain of URLComponents((uint64_t)v103);
        URL.baseURL.getter(v92);
        v53 = (void *)v92[0];
        v91[0] = v92[0];
        v91[1] = v92[1];
        v91[2] = v92[2];
        URLComponents.url(relativeTo:)((uint64_t)v91, &v95);
        outlined consume of URL?(v53);
        result = outlined release of URLComponents((uint64_t)&v98);
        v54 = v95;
        if (v95)
        {
          v56 = v96;
          v55 = v97;
          result = outlined release of URLComponents((uint64_t)&v98);
          *(_QWORD *)object = v54;
          *(_QWORD *)(object + 8) = v56;
          *(_QWORD *)(object + 16) = v55;
          return result;
        }
        goto LABEL_74;
      }
    }
    else
    {
      if ((v9 & 0x2000000000000000) != 0)
      {
        v52 = HIBYTE(v9) & 0xF;
        *(_QWORD *)&v103[0] = countAndFlagsBits;
        *((_QWORD *)&v103[0] + 1) = v9 & 0xFFFFFFFFFFFFFFLL;
        v51 = (char *)v103;
      }
      else if ((countAndFlagsBits & 0x1000000000000000) != 0)
      {
        v51 = (char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v52 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v51 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v51, v52, 0x10u, 1))
        goto LABEL_32;
    }
    swift_bridgeObjectRelease();
    v86 = 0;
    v85 = 897;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_72;
  }
  swift_retain();
  v9 = v5;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    v89 = object;
    *(_QWORD *)&v103[0] = v9;
    *((_QWORD *)&v103[0] + 1) = v4;
    *(_QWORD *)&v103[1] = v6;
    v10 = (id)v9;
    swift_retain();
    v90 = v6;
    swift_retain();
    v11 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v11._countAndFlagsBits;
    v98 = v11;
    swift_bridgeObjectRetain();
    v88 = v10;
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v11._object;
    }
    else
    {
      object = (unint64_t)v11._object;
      if ((specialized BidirectionalCollection.last.getter(v11._countAndFlagsBits, (unint64_t)v11._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        object = (unint64_t)v98._object;
        countAndFlagsBits = v98._countAndFlagsBits;
      }
    }
    *(_QWORD *)&v103[0] = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(v93, 0x2FuLL);
    v3 = *(_OWORD **)&v103[0];
    v57 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if ((object & 0x2000000000000000) != 0)
      v58 = HIBYTE(object) & 0xF;
    else
      v58 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v58)
    {
      swift_bridgeObjectRelease();
      v60 = 0;
      v62 = 0xE000000000000000;
      v6 = v90;
      v67 = v88;
      goto LABEL_55;
    }
    v87 = (uint64_t)&v87;
    swift_bridgeObjectRetain();
    if ((object & 0x1000000000000000) != 0)
    {
      v60 = 0;
      v62 = 1;
    }
    else
    {
      if ((object & 0x2000000000000000) == 0)
      {
        if ((countAndFlagsBits & 0x1000000000000000) != 0)
        {
          v59 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_43:
          v60 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(v59, v57, (uint64_t)v3, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
          v62 = v61;
          goto LABEL_51;
        }
LABEL_72:
        v59 = _StringObject.sharedUTF8.getter();
        v57 = v83;
        goto LABEL_43;
      }
      *(_QWORD *)&v103[0] = countAndFlagsBits;
      *((_QWORD *)&v103[0] + 1) = object & 0xFFFFFFFFFFFFFFLL;
      v60 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v103, HIBYTE(object) & 0xF, (uint64_t)v3, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
      v62 = v68;
    }
LABEL_51:
    v67 = v88;
    if (v62 == 1)
    {
      swift_bridgeObjectRetain();
      v60 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(countAndFlagsBits, object, (uint64_t)v3);
      v62 = v69;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v6 = v90;
    if (!v62)
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v60 = 0;
      v62 = 0xE000000000000000;
      goto LABEL_57;
    }
LABEL_55:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_57:
    swift_release();
    swift_release();

    object = v89;
    goto LABEL_58;
  }
  v13 = objc_msgSend((id)v9, sel__parameterString);
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v18 = objc_msgSend((id)v9, sel_path)) != 0)
    {
      v19 = v18;
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v6;
      v23 = v22;

      *(_QWORD *)&v103[0] = v20;
      *((_QWORD *)&v103[0] + 1) = v23;
      swift_bridgeObjectRetain();
      v24._countAndFlagsBits = 59;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      v6 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v25._countAndFlagsBits = (uint64_t)v15;
      v25._object = v17;
      String.append(_:)(v25);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      *(_QWORD *)&v103[0] = 59;
      *((_QWORD *)&v103[0] + 1) = 0xE100000000000000;
      v63._countAndFlagsBits = (uint64_t)v15;
      v63._object = v17;
      String.append(_:)(v63);
      swift_release();
      swift_release();

    }
    swift_bridgeObjectRelease();
    v62 = *((_QWORD *)&v103[0] + 1);
    v60 = *(_QWORD *)&v103[0];
  }
  else
  {
    v64 = objc_msgSend((id)v9, sel_path);
    if (v64)
    {
      v65 = v64;
      v60 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
      v62 = v66;
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
      swift_release();

      v60 = 0;
      v62 = 0xE000000000000000;
    }
  }
LABEL_58:
  swift_bridgeObjectRelease();
  v70 = HIBYTE(v62) & 0xF;
  if ((v62 & 0x2000000000000000) == 0)
    v70 = v60 & 0xFFFFFFFFFFFFLL;
  if (v70 && (v71 = objc_msgSend((id)v9, sel_URLByDeletingPathExtension)) != 0)
  {
    v72 = v71;
    URL.init(reference:)(v71, v103);

    v73 = *(id *)&v103[0];
    URL.init(reference:)(v73, v103);

    swift_release();
    result = swift_release();
    v74 = *(_OWORD *)((char *)v103 + 8);
    *(_QWORD *)object = *(_QWORD *)&v103[0];
    *(_OWORD *)(object + 8) = v74;
  }
  else
  {
    *(_QWORD *)object = v9;
    *(_QWORD *)(object + 8) = v4;
    *(_QWORD *)(object + 16) = v6;
    v75 = (id)v9;
    swift_retain();
    return swift_retain();
  }
  return result;
}

void static Date.FormatStyle.TimeStyle.shortened.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static Date.FormatStyle.TimeStyle.standard.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_18193A300(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

_QWORD *static DecodableAttributedStringKey<>.decode(from:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[4];

  v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v1)
  {
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    type metadata accessor for NSKeyedUnarchiver();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(AssociatedTypeWitness, v12, v13);
    v3 = v5;
    if (v5)
    {
      outlined consume of Data._Representation(v12, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      v7 = a1[3];
      v8 = a1[4];
      v3 = __swift_project_boxed_opaque_existential_1(a1, v7);
      v9 = type metadata accessor for DecodingError();
      swift_allocError();
      v11 = v10;
      MEMORY[0x186DA5FB4](v7, v8);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, *MEMORY[0x1E0DEC458], v9);
      swift_willThrow();
      outlined consume of Data._Representation(v12, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

void *type metadata accessor for ScopeDescription()
{
  return &unk_1E0F1E438;
}

void *type metadata accessor for LoadedScopeCache()
{
  return &unk_1E0F1E3B0;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ImageURLAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ImageURLAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.PresentationIntentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.PresentationIntentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.AgreementArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.AgreementArgumentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ReplacementIndexAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ReplacementIndexAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.AgreementConceptAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.AgreementConceptAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ReferentConceptAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ReferentConceptAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.InflectionRuleAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.InflectionRuleAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.MorphologyAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.MorphologyAttribute;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.TimeStyle()
{
  return &type metadata for Date.FormatStyle.TimeStyle;
}

BOOL specialized static Float._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  int v4;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  _BOOL8 result;

  objc_msgSend(a1, sel_floatValue);
  if ((~v4 & 0x7F800000) != 0 || (v4 & 0x7FFFFF) == 0)
  {
    v6 = specialized Float.init(exactly:)(a1);
    v7 = v6;
    v9 = (v6 & 0x100000000) >> 32;
    result = (v6 & 0x100000000) == 0;
    v8 = v7;
  }
  else
  {
    objc_msgSend(a1, sel_floatValue);
    LOBYTE(v9) = 0;
    result = 1;
  }
  *(_DWORD *)a2 = v8;
  *(_BYTE *)(a2 + 4) = v9 & 1;
  return result;
}

unint64_t specialized Float.init(exactly:)(void *a1)
{
  id v1;
  unsigned int v2;
  unint64_t v3;
  float v4;
  unsigned __int8 v5;
  uint64_t v6;
  double v7;

  v1 = objc_retainAutorelease(a1);
  v2 = *(unsigned __int8 *)objc_msgSend(v1, sel_objCType) - 73;
  if (v2 > 0x28)
  {
LABEL_9:
    objc_msgSend(v1, sel_doubleValue);
    v4 = v7;
    if (v7 == v4)
      goto LABEL_8;
LABEL_10:
    v6 = 0;
    v5 = 1;
    return v6 | ((unint64_t)v5 << 32);
  }
  if (((1 << v2) & 0x109) == 0)
  {
    if (((1 << v2) & 0x10900000000) != 0)
    {
      v3 = specialized Float.init<A>(exactly:)((uint64_t)objc_msgSend(v1, sel_longLongValue));
      if ((v3 & 0x100000000) != 0)
        goto LABEL_10;
      goto LABEL_7;
    }
    goto LABEL_9;
  }
  v3 = specialized Float.init<A>(exactly:)((unint64_t)objc_msgSend(v1, sel_unsignedLongLongValue));
  if ((v3 & 0x100000000) != 0)
    goto LABEL_10;
LABEL_7:
  v4 = *(float *)&v3;
LABEL_8:
  v5 = 0;
  v6 = LODWORD(v4);
  return v6 | ((unint64_t)v5 << 32);
}

uint64_t IndexSet.RangeView.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)v1 + 2);
  v3 = *v1;
  *(_OWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  return swift_retain();
}

uint64_t destructiveInjectEnumTag for _FTSSequence.Iterator.State(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    LOBYTE(a2) = 2;
    *(_QWORD *)result = v2;
  }
  *(_BYTE *)(result + 24) = a2;
  return result;
}

void URLResourceValues.init()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9E8];
  *a1 = MEMORY[0x1E0DEE9E0];
  a1[1] = v1;
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSNotificationCenter.Notifications.Iterator()
{
  uint64_t v0;
  _QWORD *v1;

  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  *v1 = v0;
  v1[1] = protocol witness for AsyncIteratorProtocol.next() in conformance NSNotificationCenter.Notifications.Iterator;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _KeyValueCodingAndObserving.didChangeValue<A>(for:)(uint64_t a1, uint64_t a2)
{
  return _KeyValueCodingAndObserving.willChangeValue<A>(for:)(a1, a2, (SEL *)&selRef_didChangeValueForKey_);
}

uint64_t _KeyValueCodingAndObserving.willChangeValue<A>(for:)(uint64_t a1, uint64_t a2)
{
  return _KeyValueCodingAndObserving.willChangeValue<A>(for:)(a1, a2, (SEL *)&selRef_willChangeValueForKey_);
}

id thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error, @guaranteed String) -> (@out Any?)(uint64_t a1, void *a2, void *a3)
{
  void (*v4)(_QWORD *__return_ptr);
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD v14[3];
  uint64_t v15;

  v4 = *(void (**)(_QWORD *__return_ptr))(a1 + 32);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  swift_retain();
  v5 = a2;
  v4(v14);
  swift_release();

  swift_bridgeObjectRelease();
  v6 = v15;
  if (!v15)
    return 0;
  v7 = __swift_project_boxed_opaque_existential_1(v14, v15);
  v8 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v8 + 16))(v11, v9);
  v12 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v12;
}

uint64_t closure #1 in closure #1 in _getErrorDefaultUserInfo<A>(_:)@<X0>(void *a1@<X0>, id a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  id v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  void *v48;

  if (static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedDescription")) == a2 && v8 == a3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
LABEL_20:
    v48 = a1;
    v18 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_35;
    v19 = *((_QWORD *)&v46 + 1);
    v20 = v47;
    __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
LABEL_22:
    if (v22)
    {
      *(_QWORD *)(a4 + 24) = MEMORY[0x1E0DEA968];
      *(_QWORD *)a4 = v21;
      *(_QWORD *)(a4 + 8) = v22;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    goto LABEL_37;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedFailureReason")) == a2 && v11 == a3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
LABEL_27:
    v48 = a1;
    v24 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_35;
    v25 = *((_QWORD *)&v46 + 1);
    v26 = v47;
    __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 24))(v25, v26);
    goto LABEL_22;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedRecoverySuggestion")) == a2 && v14 == a3)
  {
    swift_bridgeObjectRelease();
LABEL_30:
    v48 = a1;
    v27 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v28 = *((_QWORD *)&v46 + 1);
      v29 = v47;
      __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
      v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 32))(v28, v29);
      goto LABEL_22;
    }
LABEL_35:
    v47 = 0;
    v45 = 0u;
    v46 = 0u;
    v34 = (uint64_t *)&demangling cache variable for type metadata for LocalizedError?;
LABEL_36:
    result = outlined destroy of Any?((uint64_t)&v45, v34);
    goto LABEL_37;
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
    goto LABEL_30;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSHelpAnchor")) == a2 && v17 == a3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
LABEL_33:
    v48 = a1;
    v31 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v32 = *((_QWORD *)&v46 + 1);
      v33 = v47;
      __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
      v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 40))(v32, v33);
      goto LABEL_22;
    }
    goto LABEL_35;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedRecoveryOptions")) == a2 && v35 == a3)
  {
    swift_bridgeObjectRelease();
LABEL_43:
    v48 = a1;
    v37 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverableError);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v38 = *((_QWORD *)&v46 + 1);
      v39 = v47;
      __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
      v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 16))(v38, v39);
      *(_QWORD *)(a4 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      *(_QWORD *)a4 = v40;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    }
    v47 = 0;
    v45 = 0u;
    v46 = 0u;
    v34 = (uint64_t *)&demangling cache variable for type metadata for RecoverableError?;
    goto LABEL_36;
  }
  v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v36 & 1) != 0)
    goto LABEL_43;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSRecoveryAttempter")) == a2 && v41 == a3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
      goto LABEL_37;
  }
  v48 = a1;
  v43 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverableError);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    v44 = type metadata accessor for __NSErrorRecoveryAttempter();
    result = swift_allocObject();
    *(_QWORD *)(a4 + 24) = v44;
    *(_QWORD *)a4 = result;
    return result;
  }
LABEL_37:
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

uint64_t _getErrorDefaultUserInfo<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  char isEscapingClosureAtFileLocation;
  void (*v24)(char *, uint64_t, uint64_t);
  void *v25;
  uint64_t (*v26)();
  uint64_t v27;
  void *v28;
  uint64_t (*v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t (*v38)();
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  void *v45;
  uint64_t (*v46)();
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  void *v53;
  uint64_t (*v54)();
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t (*v65)();
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v74;
  void (*v75)();
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD aBlock[3];
  void *v81;
  uint64_t (*v82)();
  uint64_t v83;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v74 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v74 - v7;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v74 - v10;
  v12 = (id)dispatch thunk of CustomStringConvertible.description.getter();
  v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v14 == v15)
    goto LABEL_10;
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    v75 = 0;
    v22 = 0;
    goto LABEL_12;
  }
  if (one-time initialization token for _errorDomainUserInfoProviderQueue != -1)
    swift_once();
  v18 = _errorDomainUserInfoProviderQueue;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v12;
  *(_QWORD *)(v19 + 24) = v14;
  v20 = swift_allocObject();
  v75 = partial apply for closure #1 in _getErrorDefaultUserInfo<A>(_:);
  *(_QWORD *)(v20 + 16) = partial apply for closure #1 in _getErrorDefaultUserInfo<A>(_:);
  *(_QWORD *)(v20 + 24) = v19;
  v82 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v83 = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  v81 = &block_descriptor_12;
  v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v18, v21);
  _Block_release(v21);
  v22 = 1;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_12:
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v24(v11, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomNSError);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v76, (uint64_t)aBlock);
    v25 = v81;
    v26 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    v27 = (*((uint64_t (**)(void *, uint64_t (*)()))v26 + 4))(v25, v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    v79 = v27;
    if ((v22 & 1) != 0)
      goto LABEL_30;
  }
  else
  {
    v78 = 0;
    v76 = 0u;
    v77 = 0u;
    outlined destroy of Any?((uint64_t)&v76, &demangling cache variable for type metadata for CustomNSError?);
    v79 = MEMORY[0x1E0DEE9E0];
    if ((v22 & 1) != 0)
      goto LABEL_30;
  }
  v24(v8, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v76, (uint64_t)aBlock);
    v28 = v81;
    v29 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    v30 = (*((uint64_t (**)(void *, uint64_t (*)()))v29 + 2))(v28, v29);
    v32 = MEMORY[0x1E0DEA968];
    if (v31)
    {
      v33 = v30;
      v34 = v31;
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedDescription"));
      *((_QWORD *)&v77 + 1) = v32;
      *(_QWORD *)&v76 = v33;
      *((_QWORD *)&v76 + 1) = v34;
      specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v35, v36);
    }
    v37 = v81;
    v38 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    v39 = (*((uint64_t (**)(void *, uint64_t (*)()))v38 + 3))(v37, v38);
    if (v40)
    {
      v41 = v39;
      v42 = v40;
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedFailureReason"));
      *((_QWORD *)&v77 + 1) = v32;
      *(_QWORD *)&v76 = v41;
      *((_QWORD *)&v76 + 1) = v42;
      specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v43, v44);
    }
    v45 = v81;
    v46 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    v47 = (*((uint64_t (**)(void *, uint64_t (*)()))v46 + 4))(v45, v46);
    if (v48)
    {
      v49 = v47;
      v50 = v48;
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedRecoverySuggestion"));
      *((_QWORD *)&v77 + 1) = v32;
      *(_QWORD *)&v76 = v49;
      *((_QWORD *)&v76 + 1) = v50;
      specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v51, v52);
    }
    v53 = v81;
    v54 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    v55 = (*((uint64_t (**)(void *, uint64_t (*)()))v54 + 5))(v53, v54);
    if (v56)
    {
      v57 = v55;
      v58 = v56;
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSHelpAnchor"));
      *((_QWORD *)&v77 + 1) = v32;
      *(_QWORD *)&v76 = v57;
      *((_QWORD *)&v76 + 1) = v58;
      specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v59, v60);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }
  else
  {
    v78 = 0;
    v76 = 0u;
    v77 = 0u;
    outlined destroy of Any?((uint64_t)&v76, &demangling cache variable for type metadata for LocalizedError?);
  }
  v24(v74, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverableError);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v76, (uint64_t)aBlock);
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedRecoveryOptions"));
    v63 = v62;
    v64 = v81;
    v65 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    v66 = (*((uint64_t (**)(void *, uint64_t (*)()))v65 + 2))(v64, v65);
    *((_QWORD *)&v77 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    *(_QWORD *)&v76 = v66;
    specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v61, v63);
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSRecoveryAttempter"));
    v69 = v68;
    v70 = type metadata accessor for __NSErrorRecoveryAttempter();
    v71 = swift_allocObject();
    *((_QWORD *)&v77 + 1) = v70;
    *(_QWORD *)&v76 = v71;
    specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v67, v69);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }
  else
  {
    v78 = 0;
    v76 = 0u;
    v77 = 0u;
    outlined destroy of Any?((uint64_t)&v76, (uint64_t *)&demangling cache variable for type metadata for RecoverableError?);
  }
LABEL_30:
  v72 = _NativeDictionary.bridged()();
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v75);
  return v72;
}

uint64_t Error<>._domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t static CustomNSError.errorDomain.getter()
{
  swift_getMetatypeMetadata();
  return String.init<A>(reflecting:)();
}

uint64_t CustomNSError.errorUserInfo.getter()
{
  return MEMORY[0x1E0DEE9E0];
}

uint64_t type metadata completion function for _MutableHandle()
{
  return swift_initClassMetadata2();
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t __iop_copyCompletionBlock_block_invoke()
{
  uint64_t result;

  if (_CFExecutableLinkedOnOrAfter())
    result = 1;
  else
    result = dyld_program_sdk_at_least();
  _MergedGlobals_13 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.Run(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.LanguageCode()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t PredicateExpressions.Variable.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;

  if (one-time initialization token for nextID != -1)
    result = swift_once();
  do
    v2 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v2 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  *a1 = v2;
  return result;
}

id @objc static NSTimeZone._autoupdating()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  id v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static TimeZoneCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.bridgedAutoupdatingCurrent.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

id closure #1 in TimeZoneCache.bridgedAutoupdatingCurrent.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;
  objc_super v14;

  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    v4 = *(id *)(a1 + 88);
  }
  else
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v6 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      type metadata accessor for _TimeZoneAutoupdating();
      v6 = swift_allocObject();
      *(_QWORD *)(a1 + 16) = v6;
      swift_retain();
    }
    v7 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating, (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
    v8 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
    v9 = (char *)objc_allocWithZone(v8);
    v10 = (uint64_t *)&v9[OBJC_IVAR____NSSwiftTimeZone_timeZone];
    *v10 = v6;
    v10[1] = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
    v11 = swift_allocObject();
    *(_DWORD *)(v11 + 32) = 0;
    *(_OWORD *)(v11 + 16) = xmmword_1820E9CE0;
    *(_QWORD *)&v9[OBJC_IVAR____NSSwiftTimeZone_lock] = v11;
    v14.receiver = v9;
    v14.super_class = v8;
    swift_retain();
    v12 = objc_msgSendSuper2(&v14, sel_init);
    *(_QWORD *)(a1 + 88) = v12;
    v4 = v12;
    v3 = 0;
  }
  *a2 = v4;
  return v3;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneGMTICU(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU;
  if (!lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU)
  {
    v1 = type metadata accessor for _TimeZoneGMTICU();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _TimeZoneGMTICU, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU);
  }
  return result;
}

uint64_t Predicate.init(_:)@<X0>(void (*a1)(__int128 *__return_ptr, char **)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  char **v33;
  int *v34;
  char **v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD v40[2];
  void (*v41)(__int128 *__return_ptr, char **);
  __int128 v42[2];

  v40[1] = a2;
  v41 = a1;
  v8 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  v9 = 8 * a3;
  if (a3 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *v8, 1, a4);
    v11 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    if (a3)
    {
      v14 = (_QWORD *)((char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
      v15 = a3;
      do
      {
        v16 = *v8++;
        *v14++ = type metadata accessor for PredicateExpressions.Variable(255, v16, v12, v13);
        --v15;
      }
      while (v15);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v11 = TupleTypeMetadata;
  }
  v17 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v19 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[0] = v40;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v40 - v21;
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)v40 - v25;
  if (a3)
  {
    if (one-time initialization token for nextID != -1)
      swift_once();
    v27 = 0;
    do
    {
      if (a3 == 1)
        v28 = 0;
      else
        v28 = *(_DWORD *)(v11 + 16 * v27 + 32);
      do
        v29 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
      while (__stxr(v29 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
      *(_QWORD *)&v26[v28] = v29;
      ++v27;
    }
    while (v27 != a3);
  }
  v30 = a5 + *(int *)(type metadata accessor for Predicate(0, a3, a4, v24) + 36);
  v31 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v30, v26, v11);
  v32 = MEMORY[0x1E0C80A78](v31);
  v33 = (char **)((char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v19, v30, v11, v32);
  if (a3)
  {
    v34 = (int *)(v11 + 32);
    v35 = v33;
    v36 = a3;
    do
    {
      if (a3 == 1)
      {
        LODWORD(v37) = 0;
        v38 = v22;
      }
      else
      {
        v37 = *v34;
        v38 = &v22[v37];
      }
      *(_QWORD *)v38 = *(_QWORD *)&v19[(int)v37];
      *v35++ = v38;
      v34 += 4;
      --v36;
    }
    while (v36);
  }
  v41(v42, v33);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v42, a5);
}

uint64_t TimeZone.init(secondsFromGMT:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;

  if (one-time initialization token for cache != -1)
    swift_once();
  v4 = static TimeZoneCache.cache + 16;
  v5 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v4, a1, &v8);
  os_unfair_lock_unlock(v5);
  result = swift_release_n();
  v7 = *((_QWORD *)&v8 + 1);
  if (!(_QWORD)v8)
    v7 = 0;
  *a2 = v8;
  a2[1] = v7;
  return result;
}

void Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)(char *a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t inited;
  uint64_t v16;
  char v17;
  uint64_t v19;
  char v20;
  __int128 v21;
  _BYTE v22[9];
  __int128 v23;

  v17 = *a1;
  v8 = *a2;
  v9 = *a3;
  v10 = *a4;
  v11 = *a6;
  v12 = a6[1];
  if (one-time initialization token for cache != -1)
    swift_once();
  v13 = static TimeZoneCache.cache + 16;
  v14 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v14);
  closure #1 in TimeZoneCache.offsetFixed(_:)(v13, 0, &v23);
  os_unfair_lock_unlock(v14);
  swift_release_n();
  if ((_QWORD)v23)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)&v23 = v11;
    *((_QWORD *)&v23 + 1) = v12;
    if (one-time initialization token for cache != -1)
      swift_once();
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    inited = swift_initStaticObject();
    swift_release();
    *(_QWORD *)&v21 = inited;
    *((_QWORD *)&v21 + 1) = lazy protocol witness table accessor for type _LocaleUnlocalized and conformance _LocaleUnlocalized();
    v19 = 0;
    v20 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)v22, (uint64_t *)&v23, &v21, 2, 0, 4, 0, (uint64_t)&v19);
    *(_BYTE *)a7 = v9;
    *(_BYTE *)(a7 + 1) = a5 & 1;
    *(_BYTE *)(a7 + 2) = v10;
    *(_BYTE *)(a7 + 3) = v17;
    *(_BYTE *)(a7 + 4) = v8;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = v16;
    *(_QWORD *)(a7 + 24) = v11;
    *(_QWORD *)(a7 + 32) = v12;
  }
  else
  {
    __break(1u);
  }
}

unint64_t closure #1 in TimeZoneCache.offsetFixed(_:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  uint64_t v18;
  _BOOL8 v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  void *__src;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;

  v6 = result;
  v8 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(v8 + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v9 & 1) != 0)
    {
      v48 = *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * result);
      result = swift_unknownObjectRetain();
      v10 = v48;
LABEL_58:
      *a3 = v10;
      return result;
    }
  }
  v11 = a2;
  if (a2 < 0)
  {
    v11 = -a2;
    if (__OFSUB__(0, a2))
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  type metadata accessor for _TimeZoneGMTICU();
  v3 = (_QWORD *)swift_allocObject();
  v12 = specialized static TimeZone.nameForSecondsFromGMT(_:)(a2);
  if (!v13)
  {
LABEL_12:
    result = swift_deallocPartialClassInstance();
    v10 = 0uLL;
    goto LABEL_58;
  }
  v14 = v12;
  v15 = v13;
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU, (uint64_t)&protocol conformance descriptor for _TimeZoneGMTICU);
  v3[3] = v14;
  v3[4] = v15;
  v3[2] = a2;
  if (__ROR8__(0xFEDCBA987654321 * v11 + 0x91A2B3C4D5E6F8, 3) >= 0x2468ACF13579BFuLL)
  {
LABEL_57:
    *(_QWORD *)&v10 = v3;
    *((_QWORD *)&v10 + 1) = result;
    goto LABEL_58;
  }
  v47 = result;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v49 = *(_QWORD *)(v6 + 48);
  v4 = v49;
  *(_QWORD *)(v6 + 48) = 0x8000000000000000;
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v18 = *(_QWORD *)(v49 + 16);
  v19 = (v17 & 1) == 0;
  v20 = __OFADD__(v18, v19);
  v21 = v18 + v19;
  if (v20)
    goto LABEL_18;
  LOBYTE(v11) = v17;
  if (*(_QWORD *)(v49 + 24) >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v22 = v49;
      goto LABEL_15;
    }
LABEL_19:
    v44 = v11;
    v45 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
    v25 = static _DictionaryStorage.copy(original:)();
    v22 = v25;
    if (*(_QWORD *)(v4 + 16))
    {
      result = v25 + 64;
      __src = (void *)(v4 + 64);
      v26 = (unint64_t)((1 << *(_BYTE *)(v22 + 32)) + 63) >> 6;
      if (v22 != v4 || result >= (unint64_t)__src + 8 * v26)
        result = (unint64_t)memmove((void *)result, __src, 8 * v26);
      v27 = 0;
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v4 + 16);
      v28 = 1 << *(_BYTE *)(v4 + 32);
      v29 = -1;
      if (v28 < 64)
        v29 = ~(-1 << v28);
      v30 = v29 & *(_QWORD *)(v4 + 64);
      v31 = (unint64_t)(v28 + 63) >> 6;
      while (1)
      {
        if (v30)
        {
          v32 = __clz(__rbit64(v30));
          v30 &= v30 - 1;
          v33 = v32 | (v27 << 6);
        }
        else
        {
          v38 = v27 + 1;
          if (__OFADD__(v27, 1))
            goto LABEL_60;
          if (v38 >= v31)
            break;
          v39 = *((_QWORD *)__src + v38);
          ++v27;
          if (!v39)
          {
            v27 = v38 + 1;
            if (v38 + 1 >= v31)
              break;
            v39 = *((_QWORD *)__src + v27);
            if (!v39)
            {
              v27 = v38 + 2;
              if (v38 + 2 >= v31)
                break;
              v39 = *((_QWORD *)__src + v27);
              if (!v39)
              {
                v27 = v38 + 3;
                if (v38 + 3 >= v31)
                  break;
                v39 = *((_QWORD *)__src + v27);
                if (!v39)
                {
                  v27 = v38 + 4;
                  if (v38 + 4 >= v31)
                    break;
                  v39 = *((_QWORD *)__src + v27);
                  if (!v39)
                  {
                    v27 = v38 + 5;
                    if (v38 + 5 >= v31)
                      break;
                    v39 = *((_QWORD *)__src + v27);
                    if (!v39)
                    {
                      v27 = v38 + 6;
                      if (v38 + 6 >= v31)
                        break;
                      v39 = *((_QWORD *)__src + v27);
                      if (!v39)
                      {
                        v27 = v38 + 7;
                        if (v38 + 7 >= v31)
                          break;
                        v39 = *((_QWORD *)__src + v27);
                        if (!v39)
                        {
                          v40 = v38 + 8;
                          if (v40 >= v31)
                            break;
                          v39 = *((_QWORD *)__src + v40);
                          if (!v39)
                          {
                            while (1)
                            {
                              v27 = v40 + 1;
                              if (__OFADD__(v40, 1))
                                goto LABEL_61;
                              if (v27 >= v31)
                                goto LABEL_53;
                              v39 = *((_QWORD *)__src + v27);
                              ++v40;
                              if (v39)
                                goto LABEL_52;
                            }
                          }
                          v27 = v40;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_52:
          v30 = (v39 - 1) & v39;
          v33 = __clz(__rbit64(v39)) + (v27 << 6);
        }
        v34 = 8 * v33;
        v35 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v33);
        v36 = 16 * v33;
        v37 = *(_OWORD *)(*(_QWORD *)(v4 + 56) + v36);
        *(_QWORD *)(*(_QWORD *)(v22 + 48) + v34) = v35;
        *(_OWORD *)(*(_QWORD *)(v22 + 56) + v36) = v37;
        result = swift_unknownObjectRetain();
      }
    }
LABEL_53:
    swift_bridgeObjectRelease();
    result = v45;
    if ((v44 & 1) != 0)
      goto LABEL_16;
    goto LABEL_54;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
  v22 = v49;
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v11 & 1) != (v23 & 1))
  {
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_12;
  }
LABEL_15:
  if ((v11 & 1) != 0)
  {
LABEL_16:
    v24 = (_QWORD *)(*(_QWORD *)(v22 + 56) + 16 * result);
    swift_unknownObjectRelease();
    *v24 = v3;
    v24[1] = v47;
LABEL_56:
    *(_QWORD *)(v6 + 48) = v22;
    swift_bridgeObjectRelease();
    result = v47;
    goto LABEL_57;
  }
LABEL_54:
  *(_QWORD *)(v22 + 8 * (result >> 6) + 64) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * result) = a2;
  v41 = (_QWORD *)(*(_QWORD *)(v22 + 56) + 16 * result);
  *v41 = v3;
  v41[1] = v47;
  v42 = *(_QWORD *)(v22 + 16);
  v20 = __OFADD__(v42, 1);
  v43 = v42 + 1;
  if (!v20)
  {
    *(_QWORD *)(v22 + 16) = v43;
    goto LABEL_56;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
  return result;
}

_QWORD *protocol witness for _TimeZoneProtocol.init(secondsFromGMT:) in conformance _TimeZoneGMTICU(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)swift_allocObject();
  v3 = specialized static TimeZone.nameForSecondsFromGMT(_:)(a1);
  if (v4)
  {
    v2[3] = v3;
    v2[4] = v4;
    v2[2] = a1;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.VariableID@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return PredicateExpressions.VariableID.init(from:)(a1, a2);
}

uint64_t PredicateExpressions.VariableID.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  _BOOL8 v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t result;
  unint64_t v42;
  char v43;
  _QWORD v44[4];
  uint64_t v45;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v44, v44[3]);
  v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  if (one-time initialization token for predicateArchivingState != -1)
    swift_once();
  v6 = (uint64_t *)pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (!v6)
  {
    v11 = v5;
    goto LABEL_58;
  }
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 40);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
LABEL_58:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      *a2 = v11;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }
  }
  v12 = one-time initialization token for nextID;
  swift_retain();
  if (v12 != -1)
    swift_once();
  do
    v11 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v11 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v45 = *(_QWORD *)(v7 + 40);
  v14 = v45;
  *(_QWORD *)(v7 + 40) = 0x8000000000000000;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v16 & 1) == 0;
  v19 = __OFADD__(v17, v18);
  v20 = v17 + v18;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v14 + 24) < v20)
    {
      v21 = v16;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
      v22 = v45;
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v21 & 1) != (v23 & 1))
        goto LABEL_62;
      if ((v21 & 1) == 0)
        goto LABEL_56;
LABEL_19:
      *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v15) = v11;
LABEL_57:
      *(_QWORD *)(v7 + 40) = v22;
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v22 = v14;
      if ((v16 & 1) != 0)
        goto LABEL_19;
LABEL_56:
      specialized _NativeDictionary._insert(at:key:value:)(v15, v5, v11, (_QWORD *)v22);
      goto LABEL_57;
    }
  }
  v43 = v16;
  v42 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt, PredicateExpressions.VariableID>);
  v24 = static _DictionaryStorage.copy(original:)();
  v22 = v24;
  if (!*(_QWORD *)(v14 + 16))
  {
LABEL_55:
    swift_bridgeObjectRelease();
    v15 = v42;
    if ((v43 & 1) != 0)
      goto LABEL_19;
    goto LABEL_56;
  }
  v25 = (void *)(v24 + 64);
  v26 = v14 + 64;
  v27 = (unint64_t)((1 << *(_BYTE *)(v22 + 32)) + 63) >> 6;
  if (v22 != v14 || (unint64_t)v25 >= v26 + 8 * v27)
    memmove(v25, (const void *)(v14 + 64), 8 * v27);
  v28 = 0;
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v14 + 16);
  v29 = 1 << *(_BYTE *)(v14 + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & *(_QWORD *)(v14 + 64);
  v32 = (unint64_t)(v29 + 63) >> 6;
  v33 = v14 + 64;
  while (1)
  {
    if (v31)
    {
      v34 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      v35 = v34 | (v28 << 6);
      goto LABEL_29;
    }
    v38 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_61;
    }
    if (v38 >= v32)
      goto LABEL_55;
    v39 = *(_QWORD *)(v33 + 8 * v38);
    ++v28;
    if (!v39)
    {
      v28 = v38 + 1;
      if (v38 + 1 >= v32)
        goto LABEL_55;
      v39 = *(_QWORD *)(v33 + 8 * v28);
      if (!v39)
      {
        v28 = v38 + 2;
        if (v38 + 2 >= v32)
          goto LABEL_55;
        v39 = *(_QWORD *)(v33 + 8 * v28);
        if (!v39)
        {
          v28 = v38 + 3;
          if (v38 + 3 >= v32)
            goto LABEL_55;
          v39 = *(_QWORD *)(v33 + 8 * v28);
          if (!v39)
          {
            v28 = v38 + 4;
            if (v38 + 4 >= v32)
              goto LABEL_55;
            v39 = *(_QWORD *)(v33 + 8 * v28);
            if (!v39)
            {
              v28 = v38 + 5;
              if (v38 + 5 >= v32)
                goto LABEL_55;
              v39 = *(_QWORD *)(v33 + 8 * v28);
              if (!v39)
              {
                v28 = v38 + 6;
                if (v38 + 6 >= v32)
                  goto LABEL_55;
                v39 = *(_QWORD *)(v33 + 8 * v28);
                if (!v39)
                {
                  v28 = v38 + 7;
                  if (v38 + 7 >= v32)
                    goto LABEL_55;
                  v39 = *(_QWORD *)(v33 + 8 * v28);
                  if (!v39)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_54:
    v31 = (v39 - 1) & v39;
    v35 = __clz(__rbit64(v39)) + (v28 << 6);
LABEL_29:
    v36 = 8 * v35;
    v37 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + v36);
    *(_QWORD *)(*(_QWORD *)(v22 + 48) + v36) = *(_QWORD *)(*(_QWORD *)(v14 + 48) + v36);
    *(_QWORD *)(*(_QWORD *)(v22 + 56) + v36) = v37;
  }
  v40 = v38 + 8;
  if (v40 >= v32)
    goto LABEL_55;
  v39 = *(_QWORD *)(v33 + 8 * v40);
  if (v39)
  {
    v28 = v40;
    v33 = v14 + 64;
    goto LABEL_54;
  }
  while (1)
  {
    v28 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v28 >= v32)
      goto LABEL_55;
    v33 = v14 + 64;
    v39 = *(_QWORD *)(v26 + 8 * v28);
    ++v40;
    if (v39)
      goto LABEL_54;
  }
LABEL_61:
  __break(1u);
LABEL_62:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

char *@objc static NSTimeZone._timeZoneWith(secondsFromGMT:)(uint64_t a1)
{
  os_unfair_lock_s *v1;
  char *v3;

  if (one-time initialization token for cache != -1)
    a1 = swift_once();
  v1 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1E0C80A78](a1);
  swift_retain_n();
  os_unfair_lock_lock(v1 + 36);
  partial apply for closure #1 in TimeZoneCache.bridgedOffsetFixed(_:)(&v3);
  os_unfair_lock_unlock(v1 + 36);
  swift_release_n();
  return v3;
}

char *partial apply for closure #1 in TimeZoneCache.bridgedOffsetFixed(_:)@<X0>(char **a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TimeZoneCache.bridgedOffsetFixed(_:)(*(_QWORD *)(v1 + 16), a1);
}

char *closure #1 in TimeZoneCache.bridgedOffsetFixed(_:)@<X0>(uint64_t a1@<X1>, char **a2@<X8>)
{
  char *result;

  result = TimeZoneCache.State.bridgedOffsetFixed(_:)(a1);
  *a2 = result;
  return result;
}

char *TimeZoneCache.State.bridgedOffsetFixed(_:)(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  objc_class *v16;
  char *v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  objc_class *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  _BOOL8 v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *result;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  unint64_t v95;
  unint64_t v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  void *__srcc[2];
  char *__src;
  char *__srca;
  char *__srcb;
  objc_super v104;
  uint64_t v105;
  objc_super v106;

  v5 = v1;
  v7 = *(_QWORD *)(v1 + 112);
  if (*(_QWORD *)(v7 + 16))
  {
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v9 & 1) != 0)
    {
      v2 = *(id *)(*(_QWORD *)(v7 + 56) + 8 * v8);
      v10 = v2;
      return (char *)v2;
    }
  }
  v11 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v11 + 16))
  {
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v13 & 1) != 0)
    {
      v14 = v12;
      v15 = *(_QWORD *)(v11 + 56);
      v16 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
      *(_OWORD *)__srcc = *(_OWORD *)(v15 + 16 * v14);
      v17 = (char *)objc_allocWithZone(v16);
      *(_OWORD *)&v17[OBJC_IVAR____NSSwiftTimeZone_timeZone] = *(_OWORD *)__srcc;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
      v18 = swift_allocObject();
      *(_DWORD *)(v18 + 32) = 0;
      *(_OWORD *)(v18 + 16) = xmmword_1820E9CE0;
      *(_QWORD *)&v17[OBJC_IVAR____NSSwiftTimeZone_lock] = v18;
      v104.receiver = v17;
      v104.super_class = v16;
      swift_unknownObjectRetain_n();
      v2 = objc_msgSendSuper2(&v104, sel_init);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v105 = *(_QWORD *)(v5 + 112);
      v4 = v105;
      *(_QWORD *)(v5 + 112) = 0x8000000000000000;
      v21 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      v22 = *(_QWORD *)(v4 + 16);
      v23 = (v20 & 1) == 0;
      v24 = v22 + v23;
      if (!__OFADD__(v22, v23))
      {
        v3 = v20;
        if (*(_QWORD *)(v4 + 24) < v24)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
          v25 = v105;
          v26 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
          if ((v3 & 1) != (v27 & 1))
            goto LABEL_103;
          v21 = v26;
          if ((v3 & 1) == 0)
            goto LABEL_64;
LABEL_23:
          v43 = *(_QWORD *)(v25 + 56);

          *(_QWORD *)(v43 + 8 * v21) = v2;
LABEL_65:
          *(_QWORD *)(v5 + 112) = v25;
          swift_unknownObjectRelease();
          goto LABEL_144;
        }
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v25 = v4;
          if ((v20 & 1) != 0)
            goto LABEL_23;
LABEL_64:
          specialized _NativeDictionary._insert(at:key:value:)(v21, a1, (uint64_t)v2, (_QWORD *)v25);
          goto LABEL_65;
        }
LABEL_31:
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<Int, _NSSwiftTimeZone>);
        v44 = static _DictionaryStorage.copy(original:)();
        v25 = v44;
        if (*(_QWORD *)(v4 + 16))
        {
          result = (char *)(v44 + 64);
          __src = (char *)(v4 + 64);
          v46 = (unint64_t)((1 << *(_BYTE *)(v25 + 32)) + 63) >> 6;
          if (v25 != v4 || result >= &__src[8 * v46])
            result = (char *)memmove(result, __src, 8 * v46);
          v47 = 0;
          *(_QWORD *)(v25 + 16) = *(_QWORD *)(v4 + 16);
          v48 = 1 << *(_BYTE *)(v4 + 32);
          v49 = -1;
          if (v48 < 64)
            v49 = ~(-1 << v48);
          v50 = v49 & *(_QWORD *)(v4 + 64);
          v97 = (unint64_t)(v48 + 63) >> 6;
          while (1)
          {
            if (v50)
            {
              v51 = __clz(__rbit64(v50));
              v50 &= v50 - 1;
              v52 = v51 | (v47 << 6);
            }
            else
            {
              v55 = v47 + 1;
              if (__OFADD__(v47, 1))
              {
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
                goto LABEL_149;
              }
              if (v55 >= v97)
                break;
              v56 = *(_QWORD *)&__src[8 * v55];
              ++v47;
              if (!v56)
              {
                v47 = v55 + 1;
                if (v55 + 1 >= v97)
                  break;
                v56 = *(_QWORD *)&__src[8 * v47];
                if (!v56)
                {
                  v47 = v55 + 2;
                  if (v55 + 2 >= v97)
                    break;
                  v56 = *(_QWORD *)&__src[8 * v47];
                  if (!v56)
                  {
                    v47 = v55 + 3;
                    if (v55 + 3 >= v97)
                      break;
                    v56 = *(_QWORD *)&__src[8 * v47];
                    if (!v56)
                    {
                      v47 = v55 + 4;
                      if (v55 + 4 >= v97)
                        break;
                      v56 = *(_QWORD *)&__src[8 * v47];
                      if (!v56)
                      {
                        v47 = v55 + 5;
                        if (v55 + 5 >= v97)
                          break;
                        v56 = *(_QWORD *)&__src[8 * v47];
                        if (!v56)
                        {
                          v47 = v55 + 6;
                          if (v55 + 6 >= v97)
                            break;
                          v56 = *(_QWORD *)&__src[8 * v47];
                          if (!v56)
                          {
                            v57 = v55 + 7;
                            if (v57 >= v97)
                              break;
                            v56 = *(_QWORD *)&__src[8 * v57];
                            if (!v56)
                            {
                              while (1)
                              {
                                v47 = v57 + 1;
                                if (__OFADD__(v57, 1))
                                  break;
                                if (v47 >= v97)
                                  goto LABEL_63;
                                v56 = *(_QWORD *)&__src[8 * v47];
                                ++v57;
                                if (v56)
                                  goto LABEL_62;
                              }
LABEL_149:
                              __break(1u);
LABEL_150:
                              __break(1u);
                              goto LABEL_151;
                            }
                            v47 = v57;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_62:
              v50 = (v56 - 1) & v56;
              v52 = __clz(__rbit64(v56)) + (v47 << 6);
            }
            v53 = 8 * v52;
            v54 = *(void **)(*(_QWORD *)(v4 + 56) + v53);
            *(_QWORD *)(*(_QWORD *)(v25 + 48) + v53) = *(_QWORD *)(*(_QWORD *)(v4 + 48) + v53);
            *(_QWORD *)(*(_QWORD *)(v25 + 56) + v53) = v54;
            result = v54;
          }
        }
LABEL_63:
        swift_bridgeObjectRelease();
        if ((v3 & 1) != 0)
          goto LABEL_23;
        goto LABEL_64;
      }
      __break(1u);
      goto LABEL_29;
    }
  }
  type metadata accessor for _TimeZoneGMTICU();
  v28 = (_QWORD *)swift_allocObject();
  v29 = specialized static TimeZone.nameForSecondsFromGMT(_:)(a1);
  if (!v30)
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  v28[3] = v29;
  v28[4] = v30;
  v21 = a1;
  v28[2] = a1;
  if (a1 < 0)
  {
    v21 = -a1;
    if (__OFSUB__(0, a1))
    {
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
  }
  v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneGMTICU and conformance _TimeZoneGMTICU, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneGMTICU, (uint64_t)&protocol conformance descriptor for _TimeZoneGMTICU);
  v31 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  v32 = (char *)objc_allocWithZone(v31);
  v33 = &v32[OBJC_IVAR____NSSwiftTimeZone_timeZone];
  *(_QWORD *)v33 = v28;
  *((_QWORD *)v33 + 1) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  v34 = swift_allocObject();
  *(_DWORD *)(v34 + 32) = 0;
  *(_OWORD *)(v34 + 16) = xmmword_1820E9CE0;
  *(_QWORD *)&v32[OBJC_IVAR____NSSwiftTimeZone_lock] = v34;
  v106.receiver = v32;
  v106.super_class = v31;
  swift_retain_n();
  v2 = objc_msgSendSuper2(&v106, sel_init);
  if (__ROR8__(0xFEDCBA987654321 * v21 + 0x91A2B3C4D5E6F8, 3) > 0x2468ACF13579BEuLL)
  {
    swift_release_n();
    return (char *)v2;
  }
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v105 = *(_QWORD *)(v5 + 48);
  v4 = v105;
  *(_QWORD *)(v5 + 48) = 0x8000000000000000;
  v35 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v37 = *(_QWORD *)(v4 + 16);
  v38 = (v36 & 1) == 0;
  v39 = __OFADD__(v37, v38);
  v40 = v37 + v38;
  if (v39)
    goto LABEL_30;
  LOBYTE(v21) = v36;
  if (*(_QWORD *)(v4 + 24) < v40)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, isUniquelyReferenced_nonNull_native);
    v41 = v105;
    v35 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v21 & 1) != (v42 & 1))
    {
LABEL_103:
      v73 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_104;
    }
    goto LABEL_26;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v41 = v4;
LABEL_26:
    if ((v21 & 1) == 0)
      goto LABEL_99;
    goto LABEL_27;
  }
  v95 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
  v58 = static _DictionaryStorage.copy(original:)();
  v41 = v58;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_98;
  result = (char *)(v58 + 64);
  __srca = (char *)(v4 + 64);
  v59 = (unint64_t)((1 << *(_BYTE *)(v41 + 32)) + 63) >> 6;
  if (v41 != v4 || result >= &__srca[8 * v59])
    result = (char *)memmove(result, __srca, 8 * v59);
  v60 = 0;
  *(_QWORD *)(v41 + 16) = *(_QWORD *)(v4 + 16);
  v61 = 1 << *(_BYTE *)(v4 + 32);
  v62 = -1;
  if (v61 < 64)
    v62 = ~(-1 << v61);
  v63 = v62 & *(_QWORD *)(v4 + 64);
  v98 = (unint64_t)(v61 + 63) >> 6;
  while (1)
  {
    if (v63)
    {
      v64 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      v65 = v64 | (v60 << 6);
      goto LABEL_74;
    }
    v70 = v60 + 1;
    if (__OFADD__(v60, 1))
      goto LABEL_147;
    if (v70 >= v98)
      goto LABEL_98;
    v71 = *(_QWORD *)&__srca[8 * v70];
    ++v60;
    if (!v71)
    {
      v60 = v70 + 1;
      if (v70 + 1 >= v98)
        goto LABEL_98;
      v71 = *(_QWORD *)&__srca[8 * v60];
      if (!v71)
      {
        v60 = v70 + 2;
        if (v70 + 2 >= v98)
          goto LABEL_98;
        v71 = *(_QWORD *)&__srca[8 * v60];
        if (!v71)
        {
          v60 = v70 + 3;
          if (v70 + 3 >= v98)
            goto LABEL_98;
          v71 = *(_QWORD *)&__srca[8 * v60];
          if (!v71)
          {
            v60 = v70 + 4;
            if (v70 + 4 >= v98)
              goto LABEL_98;
            v71 = *(_QWORD *)&__srca[8 * v60];
            if (!v71)
            {
              v60 = v70 + 5;
              if (v70 + 5 >= v98)
                goto LABEL_98;
              v71 = *(_QWORD *)&__srca[8 * v60];
              if (!v71)
              {
                v60 = v70 + 6;
                if (v70 + 6 >= v98)
                  goto LABEL_98;
                v71 = *(_QWORD *)&__srca[8 * v60];
                if (!v71)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_97:
    v63 = (v71 - 1) & v71;
    v65 = __clz(__rbit64(v71)) + (v60 << 6);
LABEL_74:
    v66 = 8 * v65;
    v67 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v65);
    v68 = 16 * v65;
    v69 = *(_OWORD *)(*(_QWORD *)(v4 + 56) + v68);
    *(_QWORD *)(*(_QWORD *)(v41 + 48) + v66) = v67;
    *(_OWORD *)(*(_QWORD *)(v41 + 56) + v68) = v69;
    result = (char *)swift_unknownObjectRetain();
  }
  v72 = v70 + 7;
  if (v72 >= v98)
    goto LABEL_98;
  v71 = *(_QWORD *)&__srca[8 * v72];
  if (v71)
  {
    v60 = v72;
    goto LABEL_97;
  }
  while (1)
  {
    v60 = v72 + 1;
    if (__OFADD__(v72, 1))
      goto LABEL_150;
    if (v60 >= v98)
      break;
    v71 = *(_QWORD *)&__srca[8 * v60];
    ++v72;
    if (v71)
      goto LABEL_97;
  }
LABEL_98:
  swift_bridgeObjectRelease();
  v35 = v95;
  if ((v21 & 1) != 0)
  {
LABEL_27:
    v21 = *(_QWORD *)(v41 + 56) + 16 * v35;
    swift_unknownObjectRelease();
    *(_QWORD *)v21 = v28;
    *(_QWORD *)(v21 + 8) = v3;
    goto LABEL_100;
  }
LABEL_99:
  specialized _NativeDictionary._insert(at:key:value:)(v35, a1, (uint64_t)v28, (_QWORD *)v41);
LABEL_100:
  *(_QWORD *)(v5 + 48) = v41;
  swift_bridgeObjectRelease();
  v3 = (uint64_t)v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v105 = *(_QWORD *)(v5 + 112);
  v4 = v105;
  *(_QWORD *)(v5 + 112) = 0x8000000000000000;
  v73 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v75 = *(_QWORD *)(v4 + 16);
  v76 = (v74 & 1) == 0;
  v39 = __OFADD__(v75, v76);
  v77 = v75 + v76;
  if (v39)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v21) = v74;
    if (*(_QWORD *)(v4 + 24) < v77)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v77, isUniquelyReferenced_nonNull_native);
      v78 = v105;
      v73 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v21 & 1) != (v79 & 1))
        goto LABEL_103;
LABEL_106:
      if ((v21 & 1) != 0)
      {
LABEL_107:
        v80 = *(_QWORD *)(v78 + 56);
        v81 = 8 * v73;

        *(_QWORD *)(v80 + v81) = v3;
        goto LABEL_143;
      }
LABEL_142:
      specialized _NativeDictionary._insert(at:key:value:)(v73, a1, v3, (_QWORD *)v78);
LABEL_143:
      *(_QWORD *)(v5 + 112) = v78;
      swift_release_n();
LABEL_144:
      swift_bridgeObjectRelease();
      return (char *)v2;
    }
LABEL_104:
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v78 = v4;
      goto LABEL_106;
    }
  }
  v96 = v73;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<Int, _NSSwiftTimeZone>);
  v82 = static _DictionaryStorage.copy(original:)();
  v78 = v82;
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_141:
    swift_bridgeObjectRelease();
    v73 = v96;
    if ((v21 & 1) != 0)
      goto LABEL_107;
    goto LABEL_142;
  }
  result = (char *)(v82 + 64);
  __srcb = (char *)(v4 + 64);
  v83 = (unint64_t)((1 << *(_BYTE *)(v78 + 32)) + 63) >> 6;
  if (v78 != v4 || result >= &__srcb[8 * v83])
    result = (char *)memmove(result, __srcb, 8 * v83);
  v84 = 0;
  *(_QWORD *)(v78 + 16) = *(_QWORD *)(v4 + 16);
  v85 = 1 << *(_BYTE *)(v4 + 32);
  v86 = -1;
  if (v85 < 64)
    v86 = ~(-1 << v85);
  v87 = v86 & *(_QWORD *)(v4 + 64);
  v99 = (unint64_t)(v85 + 63) >> 6;
  while (2)
  {
    if (v87)
    {
      v88 = __clz(__rbit64(v87));
      v87 &= v87 - 1;
      v89 = v88 | (v84 << 6);
LABEL_117:
      v90 = 8 * v89;
      v91 = *(void **)(*(_QWORD *)(v4 + 56) + v90);
      *(_QWORD *)(*(_QWORD *)(v78 + 48) + v90) = *(_QWORD *)(*(_QWORD *)(v4 + 48) + v90);
      *(_QWORD *)(*(_QWORD *)(v78 + 56) + v90) = v91;
      result = v91;
      continue;
    }
    break;
  }
  v92 = v84 + 1;
  if (__OFADD__(v84, 1))
    goto LABEL_148;
  if (v92 >= v99)
    goto LABEL_141;
  v93 = *(_QWORD *)&__srcb[8 * v92];
  ++v84;
  if (v93)
    goto LABEL_140;
  v84 = v92 + 1;
  if (v92 + 1 >= v99)
    goto LABEL_141;
  v93 = *(_QWORD *)&__srcb[8 * v84];
  if (v93)
    goto LABEL_140;
  v84 = v92 + 2;
  if (v92 + 2 >= v99)
    goto LABEL_141;
  v93 = *(_QWORD *)&__srcb[8 * v84];
  if (v93)
    goto LABEL_140;
  v84 = v92 + 3;
  if (v92 + 3 >= v99)
    goto LABEL_141;
  v93 = *(_QWORD *)&__srcb[8 * v84];
  if (v93)
    goto LABEL_140;
  v84 = v92 + 4;
  if (v92 + 4 >= v99)
    goto LABEL_141;
  v93 = *(_QWORD *)&__srcb[8 * v84];
  if (v93)
    goto LABEL_140;
  v84 = v92 + 5;
  if (v92 + 5 >= v99)
    goto LABEL_141;
  v93 = *(_QWORD *)&__srcb[8 * v84];
  if (v93)
    goto LABEL_140;
  v84 = v92 + 6;
  if (v92 + 6 >= v99)
    goto LABEL_141;
  v93 = *(_QWORD *)&__srcb[8 * v84];
  if (v93)
  {
LABEL_140:
    v87 = (v93 - 1) & v93;
    v89 = __clz(__rbit64(v93)) + (v84 << 6);
    goto LABEL_117;
  }
  v94 = v92 + 7;
  if (v94 >= v99)
    goto LABEL_141;
  v93 = *(_QWORD *)&__srcb[8 * v94];
  if (v93)
  {
    v84 = v94;
    goto LABEL_140;
  }
  while (1)
  {
    v84 = v94 + 1;
    if (__OFADD__(v94, 1))
      break;
    if (v84 >= v99)
      goto LABEL_141;
    v93 = *(_QWORD *)&__srcb[8 * v84];
    ++v94;
    if (v93)
      goto LABEL_140;
  }
LABEL_151:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _TimeZoneGMTICU()
{
  return objc_opt_self();
}

uint64_t specialized static TimeZone.nameForSecondsFromGMT(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unsigned __int16 v4;
  Swift::String v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  Swift::String v16;

  if ((unint64_t)(a1 - 64801) < 0xFFFFFFFFFFFE05BFLL)
    return 0;
  v1 = 5524807;
  if (a1 >= 0)
    v3 = a1;
  else
    v3 = -a1;
  v4 = (unsigned __int16)(v3 + 30) % 0xE10u;
  if (v3 > 0xDF1 || (unsigned __int16)(v3 + 30) % 0xE10u >= 0x3C)
  {
    if (v3 > 0x8C81)
    {
      v7 = dispatch thunk of CustomStringConvertible.description.getter();
      v6 = v8;
    }
    else
    {
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v7 = 48;
      v6 = (void *)0xE100000000000000;
    }
    if (v4 > 0x257u)
    {
      v11 = dispatch thunk of CustomStringConvertible.description.getter();
      v10 = v12;
    }
    else
    {
      v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v11 = 48;
      v10 = (void *)0xE100000000000000;
    }
    if (a1 >= 0)
      v13 = 43;
    else
      v13 = 45;
    v14 = 0xE100000000000000;
    String.append(_:)(*(Swift::String *)&v13);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = v7;
    v15._object = v6;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = v11;
    v16._object = v10;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    return 5524807;
  }
  return v1;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = a4[6] + 56 * result;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(v4 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneAutoupdating(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating;
  if (!lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating)
  {
    v1 = type metadata accessor for _TimeZoneAutoupdating();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _TimeZoneAutoupdating, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating);
  }
  return result;
}

uint64_t type metadata accessor for _TimeZoneAutoupdating()
{
  return objc_opt_self();
}

void Calendar._adjustedDateForMismatches(start:searchingDate:matchDate:matchingComponents:compsToMatch:direction:matchingPolicy:repeatedTimePolicy:isForwardDST:isExactMatch:isLeapDay:)(void *__src@<X3>, double *a2@<X0>, double *a3@<X1>, double *a4@<X2>, __int128 *a5@<X4>, char *a6@<X5>, unsigned __int8 *a7@<X6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, _BYTE *a10, _BYTE *a11, _BYTE *a12)
{
  double *v12;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  BOOL v43;
  double v44;
  BOOL v45;
  uint8x8_t v46;
  _BYTE *v47;
  int v48;
  int v49;
  double v50;
  uint64_t ObjectType;
  void (*v52)(_OWORD *__return_ptr, uint64_t, _QWORD);
  int v53;
  char v54;
  int v55;
  uint64_t v56;
  int v57;
  double v58;
  double v59;
  void (*v60)(double *__return_ptr, uint64_t *, double *, uint64_t, _QWORD);
  double v61;
  double v62;
  _BYTE *v63;
  double v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned __int8 v70;
  char v71;
  int v73;
  int v75;
  unsigned __int8 v77;
  double v78;
  _QWORD v79[36];
  double v80;
  char v81;
  double v82[36];
  double v83[36];
  double v84[36];
  uint64_t v85;
  unsigned __int8 v86;
  _OWORD __srca[18];
  __int128 __dst[18];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char v101;
  _DWORD v102[2];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _BYTE *v107;

  v107 = a11;
  v15 = *a2;
  v16 = *a3;
  v17 = *a4;
  memcpy(__dst, __src, 0x11AuLL);
  v18 = a5[1];
  v103 = *a5;
  v19 = *a5;
  v104 = a5[1];
  v105 = a5[2];
  v20 = a5[2];
  v106 = a5[3];
  v21 = *((_QWORD *)a5 + 8);
  v22 = *((unsigned __int8 *)a5 + 72);
  v102[0] = *(_DWORD *)((char *)a5 + 73);
  *(_DWORD *)((char *)v102 + 3) = *((_DWORD *)a5 + 19);
  v23 = *((_QWORD *)a5 + 10);
  v24 = *((unsigned __int8 *)a5 + 88);
  v25 = *(__int128 *)((char *)a5 + 233);
  v26 = *(__int128 *)((char *)a5 + 265);
  v99 = *(__int128 *)((char *)a5 + 249);
  v100 = v26;
  v101 = *((_BYTE *)a5 + 281);
  v27 = *(__int128 *)((char *)a5 + 169);
  v28 = *(__int128 *)((char *)a5 + 201);
  v95 = *(__int128 *)((char *)a5 + 185);
  v96 = v28;
  v97 = *(__int128 *)((char *)a5 + 217);
  v98 = v25;
  v29 = *(__int128 *)((char *)a5 + 105);
  v30 = *(__int128 *)((char *)a5 + 137);
  v91 = *(__int128 *)((char *)a5 + 121);
  v92 = v30;
  v93 = *(__int128 *)((char *)a5 + 153);
  v94 = v27;
  v89 = *(__int128 *)((char *)a5 + 89);
  v90 = v29;
  v71 = *a6;
  v73 = *a7;
  v70 = *a8;
  v31 = *v12;
  v32 = v12[1];
  *a10 = 0;
  *v107 = 1;
  *a12 = 0;
  v84[0] = v31;
  v84[1] = v32;
  v82[0] = v17;
  __srca[0] = v19;
  __srca[1] = v18;
  v33 = a5[3];
  __srca[2] = v20;
  __srca[3] = v33;
  v69 = v21;
  *(_QWORD *)&__srca[4] = v21;
  BYTE8(__srca[4]) = v22;
  *(_DWORD *)((char *)&__srca[4] + 9) = *(_DWORD *)((char *)a5 + 73);
  HIDWORD(__srca[4]) = *((_DWORD *)a5 + 19);
  *(_QWORD *)&__srca[5] = v23;
  BYTE8(__srca[5]) = v24;
  v34 = *(__int128 *)((char *)a5 + 233);
  v35 = *(__int128 *)((char *)a5 + 249);
  v36 = *((_BYTE *)a5 + 281);
  *(_OWORD *)((char *)&__srca[16] + 9) = *(__int128 *)((char *)a5 + 265);
  *(_OWORD *)((char *)&__srca[5] + 9) = *(__int128 *)((char *)a5 + 89);
  v37 = *(__int128 *)((char *)a5 + 105);
  v38 = *(__int128 *)((char *)a5 + 121);
  v39 = *(__int128 *)((char *)a5 + 137);
  *(_OWORD *)((char *)&__srca[9] + 9) = *(__int128 *)((char *)a5 + 153);
  *(_OWORD *)((char *)&__srca[8] + 9) = v39;
  *(_OWORD *)((char *)&__srca[7] + 9) = v38;
  *(_OWORD *)((char *)&__srca[6] + 9) = v37;
  v40 = *(__int128 *)((char *)a5 + 169);
  v41 = *(__int128 *)((char *)a5 + 185);
  v42 = *(__int128 *)((char *)a5 + 201);
  *(_OWORD *)((char *)&__srca[13] + 9) = *(__int128 *)((char *)a5 + 217);
  *(_OWORD *)((char *)&__srca[12] + 9) = v42;
  *(_OWORD *)((char *)&__srca[11] + 9) = v41;
  *(_OWORD *)((char *)&__srca[10] + 9) = v40;
  BYTE9(__srca[17]) = v36;
  *(_OWORD *)((char *)&__srca[15] + 9) = v35;
  *(_OWORD *)((char *)&__srca[14] + 9) = v34;
  v43 = Calendar.date(_:containsMatchingComponents:)(v83, v82, (uint64_t *)__srca);
  v44 = v83[0];
  if ((LOWORD(v83[0]) & 0x2200) != 0)
    goto LABEL_2;
  v45 = v43;
  v67 = v23;
  v68 = v24;
  v46 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v83[0]);
  v46.i16[0] = vaddlv_u8(v46);
  v47 = v107;
  if (v46.u32[0] == 1 && (LOBYTE(v83[0]) & 0x10) != 0)
  {
    *(double *)__srca = v31;
    *((double *)__srca + 1) = v32;
    v83[0] = v17;
    LOBYTE(v82[0]) = v73;
    Calendar._adjustedDateForMismatchedHour(matchDate:compsToMatch:matchingPolicy:repeatedTimePolicy:isExactMatch:)(v83, (unsigned __int8 *)v82, v107, (uint64_t)v84);
    if ((LOBYTE(v84[1]) & 1) == 0)
    {
      v50 = v84[0];
      *a10 = 1;
      *(double *)a9 = v50;
      *(_BYTE *)(a9 + 8) = 0;
      return;
    }
  }
  if (v45)
    goto LABEL_2;
  *(double *)__srca = v44;
  Calendar.ComponentSet.highestSetUnit.getter((char *)v84);
  v48 = LOBYTE(v84[0]);
  if (LOBYTE(v84[0]) == 18)
    goto LABEL_2;
  LOBYTE(__srca[0]) = LOBYTE(v84[0]);
  Calendar.Component.nextHigherUnit.getter(&v86);
  v49 = v86;
  if ((LODWORD(v44) & 0x10000) == 0 && v86 == 18)
    goto LABEL_2;
  if (v48)
  {
    if (v48 == 1 || v48 == 12)
      v49 = v48;
  }
  else
  {
    v49 = 1;
  }
  v75 = v49;
  ObjectType = swift_getObjectType();
  v52 = *(void (**)(_OWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)&v32 + 24);
  swift_unknownObjectRetain();
  v52(__srca, ObjectType, *(_QWORD *)&v32);
  swift_unknownObjectRelease();
  v66 = LOBYTE(__srca[0]);
  swift_unknownObjectRetain();
  v52(__srca, ObjectType, *(_QWORD *)&v32);
  swift_unknownObjectRelease();
  v53 = LOBYTE(__srca[0]);
  if (v75 == 18)
  {
    v54 = v71;
    v55 = v68;
    v56 = v67;
    v57 = v22;
    if ((LODWORD(v44) & 0x10000) != 0)
      goto LABEL_38;
    __break(1u);
  }
  v54 = v71;
  v55 = v68;
  v56 = v67;
  v57 = v22;
  if ((LODWORD(v44) & 0x10000) != 0 || v75 == 1)
  {
LABEL_38:
    if (((v57 | v55) & 1) == 0)
    {
      if (v53 == 2)
      {
        if ((LODWORD(v44) & 0x10000) != 0)
        {
          v84[0] = v31;
          v84[1] = v32;
          v83[0] = v15;
          v82[0] = v16;
          *(double *)v79 = v17;
          __srca[0] = v103;
          __srca[1] = v104;
          __srca[2] = v105;
          __srca[3] = v106;
          *(_QWORD *)&__srca[4] = v69;
          BYTE8(__srca[4]) = v57;
          *(_DWORD *)((char *)&__srca[4] + 9) = v102[0];
          HIDWORD(__srca[4]) = *(_DWORD *)((char *)v102 + 3);
          *(_QWORD *)&__srca[5] = v56;
          BYTE8(__srca[5]) = v55;
          *(_OWORD *)((char *)&__srca[16] + 9) = v100;
          *(_OWORD *)((char *)&__srca[5] + 9) = v89;
          *(_OWORD *)((char *)&__srca[9] + 9) = v93;
          *(_OWORD *)((char *)&__srca[8] + 9) = v92;
          *(_OWORD *)((char *)&__srca[7] + 9) = v91;
          *(_OWORD *)((char *)&__srca[6] + 9) = v90;
          *(_OWORD *)((char *)&__srca[13] + 9) = v97;
          *(_OWORD *)((char *)&__srca[12] + 9) = v96;
          *(_OWORD *)((char *)&__srca[11] + 9) = v95;
          *(_OWORD *)((char *)&__srca[10] + 9) = v94;
          BYTE9(__srca[17]) = v101;
          *(_OWORD *)((char *)&__srca[15] + 9) = v99;
          *(_OWORD *)((char *)&__srca[14] + 9) = v98;
          LOBYTE(v80) = v54;
          LOBYTE(v85) = v73;
          LOBYTE(v78) = v70;
          Calendar._adjustedDateForMismatchedChineseLeapMonth(start:searchingDate:matchDate:matchingComponents:compsToMatch:direction:matchingPolicy:repeatedTimePolicy:isExactMatch:isLeapDay:)((uint64_t)v83, (uint64_t)v82, (uint64_t)v79, (uint64_t)__dst, (uint64_t)__srca, (uint64_t)&v80, (uint64_t)&v85, (uint64_t)&v78, v47, a12);
          return;
        }
      }
      else if ((LOBYTE(v44) & 0xC) != 0)
      {
        v84[0] = v31;
        v84[1] = v32;
        v83[0] = v15;
        v82[0] = v16;
        *(double *)v79 = v17;
        __srca[0] = v103;
        __srca[1] = v104;
        __srca[2] = v105;
        __srca[3] = v106;
        *(_QWORD *)&__srca[4] = v69;
        BYTE8(__srca[4]) = v57;
        *(_DWORD *)((char *)&__srca[4] + 9) = v102[0];
        HIDWORD(__srca[4]) = *(_DWORD *)((char *)v102 + 3);
        *(_QWORD *)&__srca[5] = v56;
        BYTE8(__srca[5]) = v55;
        *(_OWORD *)((char *)&__srca[16] + 9) = v100;
        *(_OWORD *)((char *)&__srca[5] + 9) = v89;
        *(_OWORD *)((char *)&__srca[9] + 9) = v93;
        *(_OWORD *)((char *)&__srca[8] + 9) = v92;
        *(_OWORD *)((char *)&__srca[7] + 9) = v91;
        *(_OWORD *)((char *)&__srca[6] + 9) = v90;
        *(_OWORD *)((char *)&__srca[13] + 9) = v97;
        *(_OWORD *)((char *)&__srca[12] + 9) = v96;
        *(_OWORD *)((char *)&__srca[11] + 9) = v95;
        *(_OWORD *)((char *)&__srca[10] + 9) = v94;
        BYTE9(__srca[17]) = v101;
        *(_OWORD *)((char *)&__srca[15] + 9) = v99;
        *(_OWORD *)((char *)&__srca[14] + 9) = v98;
        if (v75 == 18)
        {
          __break(1u);
        }
        else
        {
          LOBYTE(v80) = v75;
          LOBYTE(v85) = v54;
          LOBYTE(v78) = v73;
          v77 = v70;
          Calendar._adjustedDateForMismatchedLeapMonthOrDay(start:searchingDate:matchDate:matchingComponents:compsToMatch:nextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:isExactMatch:isLeapDay:)((uint64_t)v83, (uint64_t)v82, (uint64_t)v79, (uint64_t)__dst, (uint64_t)__srca, (uint64_t)&v80, (uint64_t)&v85, (uint64_t)&v78, &v77, v47, a12);
        }
        return;
      }
    }
LABEL_2:
    *(double *)a9 = v17;
    *(_BYTE *)(a9 + 8) = 0;
    return;
  }
  if (v75 != 2 || v66)
    goto LABEL_46;
  v85 = 4;
  if (v17 <= 1.59271755e13)
    v58 = v17;
  else
    v58 = 1.59271755e13;
  v59 = fmax(v58, -2.11845067e11);
  v83[0] = v59;
  v60 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, _QWORD))(*(_QWORD *)&v32 + 192);
  v60((double *)__srca, &v85, v83, ObjectType, *(_QWORD *)&v32);
  memcpy(v84, __srca, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v84);
  if ((LOBYTE(v84[9]) & 1) != 0 || *(_QWORD *)&v84[8] != 2)
  {
    v54 = v71;
LABEL_46:
    *(double *)__srca = v31;
    *((double *)__srca + 1) = v32;
    v84[0] = v16;
    LOBYTE(v83[0]) = v75;
    LOBYTE(v82[0]) = v54;
    LOBYTE(v79[0]) = v73;
    LOBYTE(v80) = v70;
    Calendar._matchingDate(after:matching:inNextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:)(v84, __dst, v83, (unsigned __int8 *)v82, (unsigned __int8 *)v79, (unsigned __int8 *)&v80, (double *)a9);
    return;
  }
  LOBYTE(v79[0]) = 2;
  v82[0] = v59;
  (*(void (**)(double *__return_ptr, _QWORD *, double *, uint64_t, double))(*(_QWORD *)&v32 + 160))(v83, v79, v82, ObjectType, COERCE_DOUBLE(*(_QWORD *)&v32));
  if ((LOBYTE(v83[2]) & 1) != 0)
    goto LABEL_2;
  v61 = v83[1] + v83[0];
  if (v73 == 1)
  {
    *(_QWORD *)&v82[0] = 112;
    if (v15 <= 1.59271755e13)
      v62 = v15;
    else
      v62 = 1.59271755e13;
    v79[0] = fmax(v62, -2.11845067e11);
    v60(v83, (uint64_t *)v82, (double *)v79, ObjectType, *(_QWORD *)&v32);
    v63 = a12;
    memcpy(v82, v83, 0x11AuLL);
    memcpy(v79, v83, 0x11AuLL);
    if (v61 <= 1.59271755e13)
      v64 = v61;
    else
      v64 = 1.59271755e13;
    v78 = fmax(v64, -2.11845067e11);
    (*(void (**)(double *__return_ptr, _QWORD *, double *, _QWORD, uint64_t, double))(*(_QWORD *)&v32 + 200))(&v80, v79, &v78, 0, ObjectType, COERCE_DOUBLE(*(_QWORD *)&v32));
    outlined release of DateComponents((uint64_t)v82);
    if ((v81 & 1) != 0)
    {
      *(double *)a9 = v80;
      *(_BYTE *)(a9 + 8) = 1;
      return;
    }
    v61 = v80;
    v65 = a9;
  }
  else
  {
    v65 = a9;
    v63 = a12;
  }
  *v63 = 1;
  *v47 = 0;
  *(double *)v65 = v61;
  *(_BYTE *)(v65 + 8) = 0;
}

BOOL Calendar.date(_:containsMatchingComponents:)(_QWORD *a1, double *a2, uint64_t *a3)
{
  uint64_t *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  double v29;
  uint64_t ObjectType;
  uint64_t v31;
  __int128 v32;
  BOOL v33;
  uint64_t v34;
  int v37;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[25];
  char v57;
  _OWORD v58[18];
  _OWORD __dst[18];
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  uint64_t v78;
  _OWORD __src[18];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[3];

  v4 = *((_OWORD *)a3 + 15);
  v5 = *((_OWORD *)a3 + 13);
  v92 = *((_OWORD *)a3 + 14);
  v93 = v4;
  v6 = *((_OWORD *)a3 + 15);
  v94[0] = *((_OWORD *)a3 + 16);
  v7 = *((_OWORD *)a3 + 11);
  v8 = *((_OWORD *)a3 + 9);
  v88 = *((_OWORD *)a3 + 10);
  v89 = v7;
  v9 = *((_OWORD *)a3 + 11);
  v10 = *((_OWORD *)a3 + 13);
  v90 = *((_OWORD *)a3 + 12);
  v91 = v10;
  v11 = *((_OWORD *)a3 + 7);
  v12 = *((_OWORD *)a3 + 5);
  v84 = *((_OWORD *)a3 + 6);
  v85 = v11;
  v13 = *((_OWORD *)a3 + 7);
  v14 = *((_OWORD *)a3 + 9);
  v86 = *((_OWORD *)a3 + 8);
  v87 = v14;
  v15 = *((_OWORD *)a3 + 3);
  v80 = *((_OWORD *)a3 + 2);
  v81 = v15;
  v16 = *((_OWORD *)a3 + 5);
  v18 = *((_OWORD *)a3 + 2);
  v17 = *((_OWORD *)a3 + 3);
  v82 = *((_OWORD *)a3 + 4);
  v83 = v16;
  *(_OWORD *)((char *)v94 + 9) = *(_OWORD *)((char *)a3 + 265);
  *(_OWORD *)((char *)&__src[16] + 9) = *(_OWORD *)((char *)a3 + 265);
  __src[14] = v92;
  __src[15] = v6;
  __src[16] = *((_OWORD *)a3 + 16);
  __src[10] = v88;
  __src[11] = v9;
  __src[12] = v90;
  __src[13] = v5;
  __src[6] = v84;
  __src[7] = v13;
  __src[8] = v86;
  __src[9] = v8;
  __src[2] = v18;
  __src[3] = v17;
  v19 = *a2;
  v20 = *a3;
  v21 = a3[1];
  v22 = a3[2];
  v23 = a3[3];
  v24 = *((unsigned __int8 *)a3 + 281);
  v25 = *v3;
  v26 = v3[1];
  *(_QWORD *)&__src[0] = *a3;
  *((_QWORD *)&__src[0] + 1) = v21;
  *(_QWORD *)&__src[1] = v22;
  *((_QWORD *)&__src[1] + 1) = v23;
  __src[4] = v82;
  __src[5] = v12;
  v37 = v24;
  BYTE9(__src[17]) = v24;
  DateComponents.setUnits.getter(&v78);
  v27 = v78;
  *(_QWORD *)&__src[0] = v78;
  v28 = 1.59271755e13;
  if (v19 <= 1.59271755e13)
    v28 = v19;
  v29 = fmax(v28, -2.11845067e11);
  ObjectType = swift_getObjectType();
  *(double *)__dst = v29;
  (*(void (**)(uint64_t *__return_ptr, _OWORD *, _OWORD *, uint64_t, uint64_t))(v26 + 192))(&v60, __src, __dst, ObjectType, v26);
  v31 = v60;
  if ((v27 & 0x4000) != 0)
  {
    v60 = v25;
    v61 = v26;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if ((_QWORD)v62)
    {
      __src[0] = v62;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)__src);
      v31 = v60;
    }
    else
    {
      v31 = v25;
    }
  }
  v32 = v62;
  *(_OWORD *)((char *)&__src[16] + 10) = *(_OWORD *)((char *)v77 + 10);
  __src[14] = v75;
  __src[15] = v76;
  __src[16] = v77[0];
  __src[10] = v71;
  __src[11] = v72;
  __src[12] = v73;
  __src[13] = v74;
  __src[6] = v67;
  __src[7] = v68;
  __src[8] = v69;
  __src[9] = v70;
  __src[2] = v63;
  __src[3] = v64;
  __src[4] = v65;
  __src[5] = v66;
  *(_QWORD *)&__src[0] = v31;
  *((_QWORD *)&__src[0] + 1) = v61;
  __src[1] = v62;
  if (v20)
  {
    *(_QWORD *)&__src[0] = v20;
    *((_QWORD *)&__src[0] + 1) = v21;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if ((_QWORD)v32)
    {
      __dst[0] = v32;
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)__dst);
    }
  }
  if (v22)
  {
    *(_QWORD *)&__src[1] = v22;
    *((_QWORD *)&__src[1] + 1) = v23;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    if (*(_QWORD *)&__src[0])
    {
      *(_QWORD *)&__dst[0] = v22;
      *((_QWORD *)&__dst[0] + 1) = v23;
      Calendar.timeZone.setter((uint64_t *)__dst);
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  memcpy(__dst, __src, 0x11AuLL);
  memcpy(v58, __src, 0x11AuLL);
  *(_QWORD *)&v39 = v20;
  *((_QWORD *)&v39 + 1) = v21;
  v40 = v22;
  v41 = v23;
  *(_OWORD *)&v56[9] = *(_OWORD *)((char *)v94 + 9);
  v54 = v92;
  v55 = v93;
  *(_OWORD *)v56 = v94[0];
  v50 = v88;
  v51 = v89;
  v52 = v90;
  v53 = v91;
  v46 = v84;
  v47 = v85;
  v48 = v86;
  v49 = v87;
  v42 = v80;
  v43 = v81;
  v44 = v82;
  v45 = v83;
  v57 = v37;
  v33 = specialized static DateComponents.== infix(_:_:)((uint64_t)v58, &v39);
  if (v33)
  {
    outlined release of DateComponents((uint64_t)__dst);
    *a1 = 0;
  }
  else
  {
    *(_QWORD *)&v58[0] = v20;
    *((_QWORD *)&v58[0] + 1) = v21;
    *(_QWORD *)&v58[1] = v22;
    *((_QWORD *)&v58[1] + 1) = v23;
    *(_OWORD *)((char *)&v58[16] + 9) = *(_OWORD *)((char *)v94 + 9);
    v58[14] = v92;
    v58[15] = v93;
    v58[16] = v94[0];
    v58[10] = v88;
    v58[11] = v89;
    v58[12] = v90;
    v58[13] = v91;
    v58[6] = v84;
    v58[7] = v85;
    v58[8] = v86;
    v58[9] = v87;
    v58[2] = v80;
    v58[3] = v81;
    v58[4] = v82;
    v58[5] = v83;
    BYTE9(v58[17]) = v37;
    DateComponents.mismatchedUnits(comparedTo:)((uint64_t)v58, (uint64_t *)&v39);
    outlined release of DateComponents((uint64_t)__dst);
    v34 = v39;
    if ((v39 & 0x10000) != 0 && v37 == 2)
      v34 = v39 & 0xFFFFFFFFFFFEFFFFLL;
    *a1 = v34;
  }
  return v33;
}

BOOL specialized static DateComponents.== infix(_:_:)(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  _OWORD v25[2];

  v2 = *a2;
  v23 = *(unsigned __int8 *)(a1 + 281);
  v3 = *((_BYTE *)a2 + 40);
  v4 = *((_BYTE *)a2 + 56);
  v5 = *((_BYTE *)a2 + 72);
  v6 = *((_BYTE *)a2 + 216);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 40))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 32) != *((_QWORD *)a2 + 4))
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 56))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 48) != *((_QWORD *)a2 + 6))
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 216) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 216))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 208) != *((_QWORD *)a2 + 26))
      v6 = 1;
    if ((v6 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 72))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 64) != *((_QWORD *)a2 + 8))
      v5 = 1;
    if ((v5 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 88))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 80) == *((_QWORD *)a2 + 10))
      v7 = *((_BYTE *)a2 + 88);
    else
      v7 = 1;
    if ((v7 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 120) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 120))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 112) == *((_QWORD *)a2 + 14))
      v8 = *((_BYTE *)a2 + 120);
    else
      v8 = 1;
    if ((v8 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 136))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 128) == *((_QWORD *)a2 + 16))
      v9 = *((_BYTE *)a2 + 136);
    else
      v9 = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 152) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 152))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 144) == *((_QWORD *)a2 + 18))
      v10 = *((_BYTE *)a2 + 152);
    else
      v10 = 1;
    if ((v10 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 184) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 184))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 176) == *((_QWORD *)a2 + 22))
      v11 = *((_BYTE *)a2 + 184);
    else
      v11 = 1;
    if ((v11 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 200) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 200))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 192) == *((_QWORD *)a2 + 24))
      v12 = *((_BYTE *)a2 + 200);
    else
      v12 = 1;
    if ((v12 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 248) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 248))
      return 0;
  }
  else
  {
    v13 = *((_BYTE *)a2 + 248);
    if (*(_QWORD *)(a1 + 240) != *((_QWORD *)a2 + 30))
      v13 = 1;
    if ((v13 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 264) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 264))
      return 0;
  }
  else
  {
    v14 = *((_BYTE *)a2 + 264);
    if (*(_QWORD *)(a1 + 256) != *((_QWORD *)a2 + 32))
      v14 = 1;
    if ((v14 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 280) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 280))
      return 0;
  }
  else
  {
    v15 = *((_BYTE *)a2 + 280);
    if (*(_QWORD *)(a1 + 272) != *((_QWORD *)a2 + 34))
      v15 = 1;
    if ((v15 & 1) != 0)
      return 0;
  }
  v21 = a2[1];
  v22 = *(_OWORD *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 168) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 168))
      return 0;
  }
  else
  {
    v16 = *((_BYTE *)a2 + 168);
    if (*(_QWORD *)(a1 + 160) != *((_QWORD *)a2 + 20))
      v16 = 1;
    if ((v16 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 104) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 104))
      return 0;
  }
  else
  {
    v17 = *((_BYTE *)a2 + 104);
    if (*(_QWORD *)(a1 + 96) != *((_QWORD *)a2 + 12))
      v17 = 1;
    if ((v17 & 1) != 0)
      return 0;
  }
  if (v23 != 2 && (v23 & 1) != 0)
  {
    if ((*((_BYTE *)a2 + 281) & 1) == 0)
      return 0;
  }
  else if ((*((_BYTE *)a2 + 281) & 1) != 0)
  {
    return 0;
  }
  if (*(_QWORD *)a1)
  {
    v25[0] = *(_OWORD *)a1;
    if (!(_QWORD)v2)
    {
LABEL_111:
      swift_unknownObjectRetain();
      goto LABEL_113;
    }
    v24 = v2;
    swift_unknownObjectRetain_n();
    v18 = specialized static Calendar.== infix(_:_:)((uint64_t)v25, (uint64_t)&v24);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if ((v18 & 1) == 0)
      return 0;
  }
  else if ((_QWORD)v2)
  {
LABEL_113:
    swift_unknownObjectRelease();
    return 0;
  }
  if ((_QWORD)v22)
  {
    v25[0] = v22;
    if ((_QWORD)v21)
    {
      v24 = v21;
      swift_unknownObjectRetain_n();
      v19 = specialized static TimeZone.== infix(_:_:)((uint64_t)v25, (uint64_t)&v24);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (v19 & 1) != 0;
    }
    goto LABEL_111;
  }
  if ((_QWORD)v21)
    goto LABEL_113;
  return 1;
}

uint64_t DateComponents.setUnits.getter@<X0>(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = v1[168];
  if (v1[56])
    v3 = (v1[40] & 1) == 0;
  else
    v3 = ((v1[40] & 1) == 0) | 2;
  if (!v1[216])
    v3 |= 0x200uLL;
  if (!v1[72])
    v3 |= 4uLL;
  if (!v1[88])
    v3 |= 8uLL;
  if (!v1[120])
    v3 |= 0x10uLL;
  if (!v1[136])
    v3 |= 0x20uLL;
  if (!v1[152])
    v3 |= 0x40uLL;
  if (!v1[184])
    v3 |= 0x80uLL;
  if (!v1[200])
    v3 |= 0x100uLL;
  if (!v1[248])
    v3 |= 0x400uLL;
  if (!v1[264])
    v3 |= 0x800uLL;
  if (v1[280])
    v4 = v3;
  else
    v4 = v3 | 0x1000;
  if (!v1[104])
    v4 |= 0x40000uLL;
  if (!v1[168])
    v4 |= 0x2000uLL;
  *a1 = v4;
  return result;
}

uint64_t NSAttributedString.init<A>(_:includingOnly:)(uint64_t *a1, uint64_t a2, Swift::UInt a3, unint64_t a4)
{
  return NSAttributedString.init<A>(_:including:)(a1, a2, a3, a4);
}

{
  uint64_t v5;

  v5 = *a1;
  return NSAttributedString.init<A>(_:including:)(&v5, a2, a3, a4);
}

uint64_t outlined release of JSONError(uint64_t a1)
{
  outlined consume of JSONError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  return a1;
}

uint64_t outlined consume of JSONError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t result;

  v7 = (((a7 - 1) >> 1) | ((a7 - 1) << 7));
  v8 = v7 > 5;
  v9 = (1 << v7) & 0x27;
  if (!v8 && v9 != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t __NSFireTimer(void *a1, uint64_t a2)
{
  void *v3;
  const char *v4;
  id v5;
  id v6;

  v3 = *(void **)(a2 + 8);
  v4 = *(const char **)(a2 + 16);
  _CFAutoreleasePoolPush();
  v5 = a1;
  v6 = v3;
  objc_msgSend(v3, v4, a1);

  return _CFAutoreleasePoolPop();
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSCalendarIdentifier(void **a1, void **a2)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t StringProtocol.capitalized.getter(uint64_t a1)
{
  uint64_t v1;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t countAndFlagsBits;
  uint64_t v8;

  v3 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1, v3);
  String.init<A>(_:)();
  countAndFlagsBits = String._capitalized()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

Swift::String __swiftcall String._capitalized()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BOOL4 v7;
  Swift::Int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  Swift::String v24;
  unsigned int v25;
  Swift::String v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37;
  Swift::String result;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v2 = v1;
  v3 = v0;
  v48 = *MEMORY[0x1E0C80C00];
  v44 = type metadata accessor for Unicode.Scalar.Properties();
  v4 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = 0;
  v47 = 0xE000000000000000;
  if ((v2 & 0x1000000000000000) != 0)
  {
    v8 = String.UTF8View._foreignCount()();
    v7 = (v2 & 0x2000000000000000) == 0;
  }
  else
  {
    v7 = (v2 & 0x2000000000000000) == 0;
    if ((v2 & 0x2000000000000000) != 0)
      v8 = HIBYTE(v2) & 0xF;
    else
      v8 = v3 & 0xFFFFFFFFFFFFLL;
  }
  MEMORY[0x186DA4670](v8);
  v42 = v3 & 0xFFFFFFFFFFFFLL;
  if (v7)
    v9 = v3 & 0xFFFFFFFFFFFFLL;
  else
    v9 = HIBYTE(v2) & 0xF;
  if (v9)
  {
    v43 = v7;
    v40 = v2 & 0xFFFFFFFFFFFFFFLL;
    v41 = HIBYTE(v2) & 0xF;
    v39[1] = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    swift_bridgeObjectRetain();
    v10 = 0;
    v11 = 0;
    v12 = v3;
    while (1)
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        v15 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if (v43)
        {
          if ((v3 & 0x1000000000000000) == 0)
            _StringObject.sharedUTF8.getter();
        }
        else
        {
          v45[0] = v3;
          v45[1] = v40;
        }
        v15 = _decodeScalar(_:startingAt:)();
      }
      v17 = v15;
      v18 = v16;
      Unicode.Scalar.properties.getter();
      if (BYTE2(v17) > 1u)
      {
        if (BYTE2(v17) > 0xEu)
          goto LABEL_38;
      }
      else
      {
        v19 = (uint64_t)*(&__CFUniCharUppercaseLetterCharacterSetBitmap_0 + BYTE2(v17));
        if (v19 && ((*(unsigned __int8 *)(v19 + ((unsigned __int16)v17 >> 3)) >> (v17 & 7)) & 1) != 0)
        {
          if ((v10 & 1) != 0)
          {
            v13 = Unicode.Scalar.Properties.lowercaseMapping.getter();
          }
          else
          {
LABEL_30:
            if (v17 > 0x7F)
            {
              v29 = (v17 & 0x3F) << 8;
              if (v17 >= 0x800)
              {
                v34 = (v29 | (v17 >> 6) & 0x3F) << 8;
                v35 = (((v34 | (v17 >> 12) & 0x3F) << 8) | (v17 >> 18)) - 2122219023;
                v21 = (v34 | (v17 >> 12)) + 8487393;
                if (HIWORD(v17))
                  v21 = v35;
              }
              else
              {
                v21 = (v29 | (v17 >> 6)) + 33217;
              }
            }
            else
            {
              v21 = v17 + 1;
            }
            v45[0] = (v21 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v21) >> 3))));
            v13 = MEMORY[0x186DA46D0](v45);
          }
          goto LABEL_11;
        }
        v20 = (uint64_t)*(&__CFUniCharLowercaseLetterCharacterSetBitmap_0 + BYTE2(v17));
        if (v20 && ((*(unsigned __int8 *)(v20 + ((unsigned __int16)v17 >> 3)) >> (v17 & 7)) & 1) != 0)
        {
          if ((v10 & 1) != 0)
            goto LABEL_30;
          v13 = Unicode.Scalar.Properties.titlecaseMapping.getter();
LABEL_11:
          String.append(_:)(*(Swift::String *)&v13);
          v10 = 1;
          goto LABEL_12;
        }
      }
      v22 = (uint64_t)*(&__CFUniCharCaseIgnorableCharacterSetBitmap_0 + BYTE2(v17));
      if (!v22 || ((*(unsigned __int8 *)(v22 + ((unsigned __int16)v17 >> 3)) >> (v17 & 7)) & 1) == 0)
      {
LABEL_38:
        if (v17 > 0x7F)
        {
          v27 = (v17 & 0x3F) << 8;
          if (v17 >= 0x800)
          {
            v30 = (v27 | (v17 >> 6) & 0x3F) << 8;
            v31 = (((v30 | (v17 >> 12) & 0x3F) << 8) | (v17 >> 18)) - 2122219023;
            v25 = (v30 | (v17 >> 12)) + 8487393;
            if (HIWORD(v17))
              v25 = v31;
          }
          else
          {
            v25 = (v27 | (v17 >> 6)) + 33217;
          }
        }
        else
        {
          v25 = v17 + 1;
        }
        v45[0] = (v25 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v25) >> 3))));
        v26._countAndFlagsBits = MEMORY[0x186DA46D0](v45);
        String.append(_:)(v26);
        v10 = 0;
        goto LABEL_12;
      }
      if (v17 > 0x7F)
      {
        v28 = (v17 & 0x3F) << 8;
        if (v17 >= 0x800)
        {
          v32 = (v28 | (v17 >> 6) & 0x3F) << 8;
          v33 = (((v32 | (v17 >> 12) & 0x3F) << 8) | (v17 >> 18)) - 2122219023;
          v23 = (v32 | (v17 >> 12)) + 8487393;
          if (HIWORD(v17))
            v23 = v33;
        }
        else
        {
          v23 = (v28 | (v17 >> 6)) + 33217;
        }
      }
      else
      {
        v23 = v17 + 1;
      }
      v45[0] = (v23 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v23) >> 3))));
      v24._countAndFlagsBits = MEMORY[0x186DA46D0](v45);
      String.append(_:)(v24);
LABEL_12:
      v11 += v18;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v44);
      v3 = v12;
      if (v11 >= v9)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v36 = v46;
  v37 = (void *)v47;
  result._object = v37;
  result._countAndFlagsBits = v36;
  return result;
}

double static Date.timeIntervalSinceReferenceDate.getter()
{
  timespec __tp;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  return (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
}

uint64_t NSNotificationCenter.Notifications.next()()
{
  _QWORD *v0;

  outlined init with take of LocalePreferences?(*v0 + 184, *v0 + 136, &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (uint64_t)(v0 + 10);
  v2 = v0[36];
  v0[7] = v0 + 23;
  v0[2] = v0;
  v0[3] = NSNotificationCenter.Notifications.next();
  v3 = swift_continuation_init();
  v4 = *(os_unfair_lock_s **)(v2 + 24);
  v5 = swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v3;
  v6 = v4 + 4;
  v4 += 16;
  os_unfair_lock_lock(v4);
  closure #1 in closure #1 in NSNotificationCenter.Notifications.next()(v6, *(_QWORD *)(v5 + 16), (uint64_t)(v0 + 10));
  os_unfair_lock_unlock(v4);
  swift_task_dealloc();
  v7 = v0[10];
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (uint64_t)(v0 + 29);
    v10 = (uint64_t)(v0 + 11);
    swift_bridgeObjectRetain();
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(v7 + 8 * v11++ + 32);
      outlined init with copy of (Hashable & Sendable)?(v10, v9, &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
      outlined init with take of LocalePreferences?(v9, *(_QWORD *)(*(_QWORD *)(v12 + 64) + 40), &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
      swift_continuation_resume();
    }
    while (v8 != v11);
    swift_bridgeObjectRelease();
  }
  outlined destroy of NSNotificationCenter.Notifications.Resumption(v1);
  return swift_continuation_await();
}

{
  uint64_t v0;
  _OWORD *v1;

  outlined init with take of LocalePreferences?(v0 + 136, v0 + 80, &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
  v1 = *(_OWORD **)(v0 + 280);
  if (*(_QWORD *)(v0 + 80))
  {
    outlined init with copy of Notification(v0 + 80, *(_QWORD **)(v0 + 280));
    outlined destroy of NSNotificationCenter.Notifications.NotificationWrapper(v0 + 80);
  }
  else
  {
    outlined destroy of Any?(v0 + 80, &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    *v1 = 0u;
    v1[1] = 0u;
    v1[2] = 0u;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void static Measurement<>.FormatStyle.UnitWidth.narrow.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static Duration.UnitsFormatStyle.Unit.minutes.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static Duration.UnitsFormatStyle.Unit.hours.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static Date.FormatStyle.Symbol.CyclicYear.narrow.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t URLResourceValues.generationIdentifier.getter()
{
  return URLResourceValues.fileResourceIdentifier.getter(MEMORY[0x1E0C999A8]);
}

Swift::Bool __swiftcall _NSSwiftCalendar.isDateInWeekend(_:)(Foundation::Date a1)
{
  double *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t ObjectType;
  char v10;
  double v12;

  v3 = *v1;
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____NSSwiftCalendar__lock);
  v5 = (os_unfair_lock_s *)(v4 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  v6 = *(_QWORD *)(v4 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v5);
  v7 = 1.59271755e13;
  if (v3 <= 1.59271755e13)
    v7 = v3;
  v8 = fmax(v7, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v12 = v8;
  v10 = (*(uint64_t (**)(double *, uint64_t, uint64_t))(v6 + 168))(&v12, ObjectType, v6);
  swift_unknownObjectRelease();
  return v10 & 1;
}

uint64_t partial apply for closure #1 in _CalendarICU.isDateInWeekend(_:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;

  result = ucal_isWeekend();
  *a1 = (_DWORD)result != 0;
  return result;
}

char *IndexSet.formIndex(after:)(char **a1)
{
  uint64_t *v1;
  BOOL v3;
  char *result;
  char *v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  BOOL v11;

  v3 = __OFADD__(*a1, 1);
  result = *a1 + 1;
  if (v3)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (result != a1[2])
  {
LABEL_15:
    *a1 = result;
    return result;
  }
  v5 = a1[3];
  v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 == a1[4])
    goto LABEL_15;
  v7 = *v1;
  a1[3] = v6;
  v8 = *(_BYTE *)(v7 + 24);
  result = (char *)objc_msgSend(*(id *)(v7 + 16), sel_rangeAtIndex_);
  v10 = &result[v9];
  v11 = __OFADD__(result, v9);
  if ((v8 & 1) == 0)
    goto LABEL_12;
  if (v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((uint64_t)v10 >= (uint64_t)result)
  {
LABEL_14:
    a1[1] = result;
    a1[2] = v10;
    goto LABEL_15;
  }
  __break(1u);
LABEL_12:
  if (v11)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((uint64_t)v10 >= (uint64_t)result)
    goto LABEL_14;
LABEL_20:
  __break(1u);
  return result;
}

id static Locale.canonicalLanguageIdentifier(from:)(uint64_t a1, uint64_t a2)
{
  return static Locale._canonicalLocaleIdentifier(from:)(a1, a2, MEMORY[0x1E0C987A0]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t result;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57[5];

  v4 = v3;
  v7 = v3[1];
  LODWORD(v57[0]) = a1;
  v8 = dispatch thunk of CustomStringConvertible.description.getter();
  v10 = v9;
  type metadata accessor for JSONReference();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v10;
  *(_BYTE *)(v11 + 32) = 1;
  v12 = *v4;
  v13 = v4[2];
  v15 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(a3 + 24);
  v57[3] = v15;
  v57[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(boxed_opaque_existential_1, a2, v15);
  v17 = _JSONKeyedEncodingContainer._converted(_:)(v57, v12, v7, v13);
  v19 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  if (*(_BYTE *)(v7 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v20 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v20;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
  v24 = *(_QWORD *)(v20 + 16);
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v15) = v22;
    if (*(_QWORD *)(v20 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      v27 = v57[0];
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v15 & 1) != (v29 & 1))
        goto LABEL_51;
      v23 = v28;
      if ((v15 & 1) == 0)
        goto LABEL_46;
LABEL_9:
      v30 = *(_QWORD *)(v27 + 56);
      swift_release();
      *(_QWORD *)(v30 + 8 * v23) = v11;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50 = *(_QWORD *)(v7 + 16);
      v51 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 16) = v27;
      *(_QWORD *)(v7 + 24) = 0;
      v52 = *(_BYTE *)(v7 + 32);
      *(_BYTE *)(v7 + 32) = 4;
      outlined consume of JSONReference.Backing(v50, v51, v52);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v27 = v20;
      if ((v22 & 1) != 0)
        goto LABEL_9;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v17, v19, v11, v27);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v31 = static _DictionaryStorage.copy(original:)();
  v27 = v31;
  if (!*(_QWORD *)(v20 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_9;
    goto LABEL_46;
  }
  v32 = (void *)(v31 + 64);
  v33 = (unint64_t)((1 << *(_BYTE *)(v27 + 32)) + 63) >> 6;
  if (v27 != v20 || (unint64_t)v32 >= v20 + 64 + 8 * v33)
    memmove(v32, (const void *)(v20 + 64), 8 * v33);
  v54 = v20 + 64;
  v34 = 0;
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v20 + 16);
  v35 = 1 << *(_BYTE *)(v20 + 32);
  v36 = -1;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  v37 = v36 & *(_QWORD *)(v20 + 64);
  v55 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v56 = v34;
      v39 = v38 | (v34 << 6);
      goto LABEL_19;
    }
    v46 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v46 >= v55)
      goto LABEL_45;
    v47 = *(_QWORD *)(v54 + 8 * v46);
    v48 = v34 + 1;
    if (!v47)
    {
      v48 = v34 + 2;
      if (v34 + 2 >= v55)
        goto LABEL_45;
      v47 = *(_QWORD *)(v54 + 8 * v48);
      if (!v47)
      {
        v48 = v34 + 3;
        if (v34 + 3 >= v55)
          goto LABEL_45;
        v47 = *(_QWORD *)(v54 + 8 * v48);
        if (!v47)
        {
          v48 = v34 + 4;
          if (v34 + 4 >= v55)
            goto LABEL_45;
          v47 = *(_QWORD *)(v54 + 8 * v48);
          if (!v47)
          {
            v48 = v34 + 5;
            if (v34 + 5 >= v55)
              goto LABEL_45;
            v47 = *(_QWORD *)(v54 + 8 * v48);
            if (!v47)
            {
              v48 = v34 + 6;
              if (v34 + 6 >= v55)
                goto LABEL_45;
              v47 = *(_QWORD *)(v54 + 8 * v48);
              if (!v47)
              {
                v48 = v34 + 7;
                if (v34 + 7 >= v55)
                  goto LABEL_45;
                v47 = *(_QWORD *)(v54 + 8 * v48);
                if (!v47)
                {
                  v48 = v34 + 8;
                  if (v34 + 8 >= v55)
                    goto LABEL_45;
                  v47 = *(_QWORD *)(v54 + 8 * v48);
                  if (!v47)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    v37 = (v47 - 1) & v47;
    v56 = v48;
    v39 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_19:
    v40 = 16 * v39;
    v41 = (_QWORD *)(*(_QWORD *)(v20 + 48) + 16 * v39);
    v42 = v41[1];
    v43 = 8 * v39;
    v44 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + v43);
    v45 = (_QWORD *)(*(_QWORD *)(v27 + 48) + v40);
    *v45 = *v41;
    v45[1] = v42;
    *(_QWORD *)(*(_QWORD *)(v27 + 56) + v43) = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    v34 = v56;
  }
  v49 = v34 + 9;
  if (v34 + 9 >= v55)
    goto LABEL_45;
  v47 = *(_QWORD *)(v54 + 8 * v49);
  if (v47)
  {
    v48 = v34 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    v48 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v48 >= v55)
      goto LABEL_45;
    v47 = *(_QWORD *)(v54 + 8 * v48);
    ++v49;
    if (v47)
      goto LABEL_44;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t destroy for AttributedString.Runs.Run()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t *assignWithTake for Data._Representation(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t type metadata completion function for PredicateExpressions.Value()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t closure #1 in NSURLSession.data(for:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *v4 = v0;
  v4[1] = closure #1 in NSURLSession.data(for:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in NSURLSession.data(for:delegate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  os_unfair_lock_s *v20;
  _QWORD aBlock[7];

  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  objc_msgSend(*(id *)(a3 + 16), sel_copy, MEMORY[0x1E0C80A78](v10).n128_f64[0]);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  v13 = (void *)aBlock[6];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v14 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_140;
  v16 = _Block_copy(aBlock);
  swift_release();
  v17 = objc_msgSend(a2, sel__dataTaskWithRequest_delegate_completionHandler_, v13, a4, v16);
  _Block_release(v16);

  objc_msgSend(v17, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v17, sel_resume);
  v18 = *(os_unfair_lock_s **)(a5 + 16);
  v19 = v18 + 4;
  v20 = v18 + 8;
  os_unfair_lock_lock(v18 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v19, v17, (char *)aBlock);
  os_unfair_lock_unlock(v20);
  if ((aBlock[0] & 1) == 0)
    objc_msgSend(v17, sel_cancel);

}

_QWORD *closure #1 in NSURLSession.CancelState.activate(task:)@<X0>(_QWORD *result@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  char v4;

  if (result[1])
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if ((*(_BYTE *)result & 1) != 0)
    {
      v4 = 0;
    }
    else
    {
      *(_BYTE *)result = 0;
      result[1] = a2;
      result = a2;
      v4 = 1;
    }
    *a3 = v4;
  }
  return result;
}

uint64_t NSFileHandle.write<A>(contentsOf:)(uint64_t a1, ValueMetadata *a2, void (**a3)(int64_t))
{
  uint64_t v3;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  id v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  uint64_t v64;
  unint64_t v65;
  int64_t v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (**v72)(int64_t);
  void (**v73)(int64_t);
  uint64_t *v74;
  __int128 v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  unsigned int (*v87)(char *, uint64_t, uint64_t);
  uint64_t v88;
  char *AssociatedConformanceWitness;
  int64_t v90;
  char *v91;
  uint64_t *v92;
  void (**v93)(int64_t);
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD v98[3];
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  _OWORD v102[2];
  _OWORD v103[2];
  _OWORD v104[2];
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  _OWORD v108[2];
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  swift_getAssociatedTypeWitness();
  v93 = a3;
  v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8)
                                                               + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v86 = (char *)&v83 - v13;
  v87 = v7;
  v94 = swift_getAssociatedTypeWitness();
  v88 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94);
  v91 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  AssociatedConformanceWitness = (char *)&v83 - v16;
  v92 = *(uint64_t **)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v84 = (char *)&v83 - v21;
  v22 = swift_checkMetadataState();
  MEMORY[0x1E0C80A78](v22);
  if (a2 == &type metadata for Data)
    return specialized NSFileHandle.write<A>(contentsOf:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v85 = a1;
  if ((ValueMetadata *)type metadata accessor for DispatchData() == a2)
    return specialized NSFileHandle.write<A>(contentsOf:)();
  v90 = (int64_t)a2;
  v23 = v95;
  if ((_NSFileHandleIsClosed((uint64_t)v95) & 1) == 0)
  {
    if (!_NSFileHandleCanPerformWritingInSwiftOverlay(v23)
      || (objc_msgSend(v95, sel_fileDescriptor) & 0x80000000) != 0)
    {
      v93[8](v90);
      v40 = v91;
      dispatch thunk of Sequence.makeIterator()();
      AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
      dispatch thunk of IteratorProtocol.next()();
      v51 = v92;
      v87 = (unsigned int (*)(char *, uint64_t, uint64_t))v92[6];
      if (v87(v11, 1, AssociatedTypeWitness) != 1)
      {
        v52 = (uint64_t (*)(char *, char *, uint64_t))v51[4];
        v53 = MEMORY[0x1E0DEE9C0] + 8;
        do
        {
          v54 = v52(v19, v11, AssociatedTypeWitness);
          MEMORY[0x1E0C80A78](v54);
          *(&v83 - 2) = (uint64_t)v95;
          v55 = swift_getAssociatedConformanceWitness();
          (*(void (**)(_BYTE *(*)(_BYTE *, _BYTE *), uint64_t *, uint64_t, uint64_t, uint64_t))(v55 + 8))(partial apply for closure #1 in NSFileHandle.write<A>(contentsOf:), &v83 - 4, v53, AssociatedTypeWitness, v55);
          if (v3)
          {
            ((void (*)(char *, uint64_t))v92[1])(v19, AssociatedTypeWitness);
            return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v91, v94);
          }
          ((void (*)(char *, uint64_t))v92[1])(v19, AssociatedTypeWitness);
          v56 = v91;
          dispatch thunk of IteratorProtocol.next()();
        }
        while (v87(v11, 1, AssociatedTypeWitness) != 1);
        v40 = v56;
      }
    }
    else
    {
      v93[8](v90);
      v40 = AssociatedConformanceWitness;
      dispatch thunk of Sequence.makeIterator()();
      v41 = swift_getAssociatedConformanceWitness();
      v42 = v86;
      v91 = (char *)v41;
      dispatch thunk of IteratorProtocol.next()();
      v43 = v92;
      v87 = (unsigned int (*)(char *, uint64_t, uint64_t))v92[6];
      if (v87(v42, 1, AssociatedTypeWitness) != 1)
      {
        v44 = (void (*)(char *, char *, uint64_t))v43[4];
        v45 = MEMORY[0x1E0DEE9C0] + 8;
        v46 = v84;
        do
        {
          v44(v46, v42, AssociatedTypeWitness);
          v47 = objc_msgSend(v95, sel_fileDescriptor);
          MEMORY[0x1E0C80A78](v47);
          *((_DWORD *)&v83 - 4) = v48;
          v49 = swift_getAssociatedConformanceWitness();
          (*(void (**)(ssize_t (*)(ssize_t, uint64_t), uint64_t *, uint64_t, uint64_t, uint64_t))(v49 + 8))(partial apply for closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:), &v83 - 4, v45, AssociatedTypeWitness, v49);
          if (v3)
          {
            ((void (*)(char *, uint64_t))v92[1])(v46, AssociatedTypeWitness);
            return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(AssociatedConformanceWitness, v94);
          }
          ((void (*)(char *, uint64_t))v92[1])(v46, AssociatedTypeWitness);
          dispatch thunk of IteratorProtocol.next()();
        }
        while (v87(v42, 1, AssociatedTypeWitness) != 1);
        v50 = v88;
        v40 = AssociatedConformanceWitness;
        return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v40, v94);
      }
    }
    v50 = v88;
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v40, v94);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)&v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *((_QWORD *)&v106 + 1) = v25;
  v26 = MEMORY[0x1E0DEA968];
  AnyHashable.init<A>(_:)();
  *(_QWORD *)(inited + 96) = v26;
  *(_QWORD *)(inited + 72) = 0xD00000000000002ELL;
  *(_QWORD *)(inited + 80) = 0x80000001823069A0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v27 = static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (AnyHashable, Any)(inited + 32, (uint64_t)&v106);
  swift_retain();
  v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v106);
  if ((v29 & 1) != 0)
    goto LABEL_65;
  v30 = (v28 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v31 = *(_QWORD *)(v27 + 64 + v30) | (1 << v28);
  v91 = (char *)(v27 + 64);
  *(_QWORD *)(v27 + 64 + v30) = v31;
  v32 = *(_QWORD *)(v27 + 48) + 40 * v28;
  v33 = v106;
  v34 = v107;
  *(_QWORD *)(v32 + 32) = *(_QWORD *)&v108[0];
  *(_OWORD *)v32 = v33;
  *(_OWORD *)(v32 + 16) = v34;
  outlined init with take of Any((_OWORD *)((char *)v108 + 8), (_OWORD *)(*(_QWORD *)(v27 + 56) + 32 * v28));
  v35 = *(_QWORD *)(v27 + 16);
  v36 = __OFADD__(v35, 1);
  v37 = v35 + 1;
  if (v36)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  *(_QWORD *)(v27 + 16) = v37;
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v27 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v38 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v38 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v57 = -1;
  v58 = -1 << *(_BYTE *)(v27 + 32);
  v88 = ~v58;
  if (-v58 < 64)
    v57 = ~(-1 << -(char)v58);
  v59 = v57 & *(_QWORD *)(v27 + 64);
  v94 = (uint64_t)v104 + 8;
  v95 = (char *)v108 + 8;
  v92 = &v101;
  v93 = (void (**)(int64_t))&v99;
  AssociatedConformanceWitness = (char *)(v38 + 8);
  v90 = (unint64_t)(63 - v58) >> 6;
  swift_retain();
  v60 = 0;
  while (1)
  {
    if (v59)
    {
      v64 = (v59 - 1) & v59;
      v65 = __clz(__rbit64(v59)) | (v60 << 6);
      v66 = v60;
      goto LABEL_52;
    }
    v67 = v60 + 1;
    if (__OFADD__(v60, 1))
      goto LABEL_64;
    if (v67 >= v90)
      break;
    v68 = *(_QWORD *)&v91[8 * v67];
    v66 = v60 + 1;
    if (!v68)
    {
      v66 = v60 + 2;
      if (v60 + 2 >= v90)
        break;
      v68 = *(_QWORD *)&v91[8 * v66];
      if (!v68)
      {
        v66 = v60 + 3;
        if (v60 + 3 >= v90)
          break;
        v68 = *(_QWORD *)&v91[8 * v66];
        if (!v68)
        {
          v66 = v60 + 4;
          if (v60 + 4 >= v90)
            break;
          v68 = *(_QWORD *)&v91[8 * v66];
          if (!v68)
          {
            v66 = v60 + 5;
            if (v60 + 5 >= v90)
              break;
            v68 = *(_QWORD *)&v91[8 * v66];
            if (!v68)
            {
              v66 = v60 + 6;
              if (v60 + 6 >= v90)
                break;
              v68 = *(_QWORD *)&v91[8 * v66];
              if (!v68)
              {
                v69 = v60 + 7;
                if (v60 + 7 >= v90)
                  break;
                v68 = *(_QWORD *)&v91[8 * v69];
                if (!v68)
                {
                  while (1)
                  {
                    v66 = v69 + 1;
                    if (__OFADD__(v69, 1))
                      break;
                    if (v66 >= v90)
                      goto LABEL_58;
                    v68 = *(_QWORD *)&v91[8 * v66];
                    ++v69;
                    if (v68)
                      goto LABEL_51;
                  }
LABEL_67:
                  __break(1u);
                }
                v66 = v60 + 7;
              }
            }
          }
        }
      }
    }
LABEL_51:
    v64 = (v68 - 1) & v68;
    v65 = __clz(__rbit64(v68)) + (v66 << 6);
LABEL_52:
    outlined init with copy of AnyHashable(*(_QWORD *)(v27 + 48) + 40 * v65, (uint64_t)&v106);
    outlined init with copy of Any(*(_QWORD *)(v27 + 56) + 32 * v65, (uint64_t)v95);
    v104[0] = v108[0];
    v104[1] = v108[1];
    v105 = v109;
    v103[0] = v106;
    v103[1] = v107;
    outlined init with copy of AnyHashable((uint64_t)v103, (uint64_t)v98);
    if (!swift_dynamicCast())
    {
      v96 = 0;
      v97 = 0;
      outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v103);
      swift_bridgeObjectRelease();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_release();
      goto LABEL_59;
    }
    v70 = v96;
    v71 = v97;
    outlined init with copy of Any(v94, (uint64_t)v98);
    outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v103);
    v72 = v93;
    outlined init with take of Any(v98, v93);
    *(_QWORD *)&v100 = v70;
    *((_QWORD *)&v100 + 1) = v71;
    v73 = v72;
    v74 = v92;
    outlined init with take of Any(v73, v92);
    v75 = v100;
    outlined init with take of Any(v74, v102);
    outlined init with take of Any(v102, &v100);
    v76 = specialized __RawDictionaryStorage.find<A>(_:)(v75, *((uint64_t *)&v75 + 1));
    v77 = v76;
    if ((v78 & 1) != 0)
    {
      v61 = v27;
      v62 = (_OWORD *)(v38[6] + 16 * v76);
      swift_bridgeObjectRelease();
      *v62 = v75;
      v27 = v61;
      v63 = (_OWORD *)(v38[7] + 32 * v77);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
      outlined init with take of Any(&v100, v63);
      goto LABEL_29;
    }
    if (v38[2] >= v38[3])
    {
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    *(_QWORD *)&AssociatedConformanceWitness[(v76 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v76;
    *(_OWORD *)(v38[6] + 16 * v76) = v75;
    outlined init with take of Any(&v100, (_OWORD *)(v38[7] + 32 * v76));
    v79 = v38[2];
    v36 = __OFADD__(v79, 1);
    v80 = v79 + 1;
    if (v36)
      goto LABEL_63;
    v38[2] = v80;
LABEL_29:
    v60 = v66;
    v59 = v64;
  }
LABEL_58:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_59:
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v81 = objc_allocWithZone((Class)NSError);
  v82 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v81, sel_initWithDomain_code_userInfo_, v82, 512, _NativeDictionary.bridged()());
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_willThrow();
}

uint64_t specialized NSFileHandle.write<A>(contentsOf:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t *v25;
  int64_t i;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  _OWORD v55[2];
  _OWORD v56[2];
  _OWORD v57[2];
  _OWORD v58[2];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  uint64_t v63;
  uint64_t v64;

  v3 = v2;
  v64 = *MEMORY[0x1E0C80C00];
  if ((_NSFileHandleIsClosed((uint64_t)v3) & 1) == 0)
  {
    if (_NSFileHandleCanPerformWritingInSwiftOverlay(v3)
      && (objc_msgSend(v3, sel_fileDescriptor) & 0x80000000) == 0)
    {
      outlined copy of Data._Representation(a1, a2);
      objc_msgSend(v3, sel_fileDescriptor);
      __asm { BR              X9 }
    }
    outlined copy of Data._Representation(a1, a2);
    v19 = v3;
    specialized Data._Representation.withUnsafeBytes<A>(_:)(a1, a2);
    return outlined consume of Data._Representation(a1, a2);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)&v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *((_QWORD *)&v60 + 1) = v7;
  v8 = MEMORY[0x1E0DEA968];
  AnyHashable.init<A>(_:)();
  *(_QWORD *)(inited + 96) = v8;
  *(_QWORD *)(inited + 72) = 0xD00000000000002ELL;
  *(_QWORD *)(inited + 80) = 0x80000001823069A0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v9 = static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (AnyHashable, Any)(inited + 32, (uint64_t)&v60);
  swift_retain();
  v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v60);
  if ((v11 & 1) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v48 = v9 + 64;
  *(_QWORD *)(v9 + 64 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
  v12 = *(_QWORD *)(v9 + 48) + 40 * v10;
  v13 = v60;
  v14 = v61;
  *(_QWORD *)(v12 + 32) = *(_QWORD *)&v62[0];
  *(_OWORD *)v12 = v13;
  *(_OWORD *)(v12 + 16) = v14;
  outlined init with take of Any((_OWORD *)((char *)v62 + 8), (_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v10));
  v15 = *(_QWORD *)(v9 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(_QWORD *)(v9 + 16) = v17;
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v9 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v18 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v18 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v20 = -1;
  v21 = -1 << *(_BYTE *)(v9 + 32);
  if (-v21 < 64)
    v20 = ~(-1 << -(char)v21);
  v22 = v20 & *(_QWORD *)(v9 + 64);
  v47 = (unint64_t)(63 - v21) >> 6;
  v23 = (char *)v62 + 8;
  v24 = (char *)v58 + 8;
  v25 = &v53;
  swift_retain();
  for (i = 0; ; i = v50)
  {
    if (v22)
    {
      v49 = (v22 - 1) & v22;
      v50 = i;
      v33 = __clz(__rbit64(v22)) | (i << 6);
      goto LABEL_38;
    }
    v34 = i + 1;
    if (__OFADD__(i, 1))
      goto LABEL_48;
    if (v34 >= v47)
      break;
    v35 = *(_QWORD *)(v48 + 8 * v34);
    v36 = i + 1;
    if (!v35)
    {
      v36 = i + 2;
      if (i + 2 >= v47)
        break;
      v35 = *(_QWORD *)(v48 + 8 * v36);
      if (!v35)
      {
        v36 = i + 3;
        if (i + 3 >= v47)
          break;
        v35 = *(_QWORD *)(v48 + 8 * v36);
        if (!v35)
        {
          v36 = i + 4;
          if (i + 4 >= v47)
            break;
          v35 = *(_QWORD *)(v48 + 8 * v36);
          if (!v35)
          {
            v36 = i + 5;
            if (i + 5 >= v47)
              break;
            v35 = *(_QWORD *)(v48 + 8 * v36);
            if (!v35)
            {
              v36 = i + 6;
              if (i + 6 >= v47)
                break;
              v35 = *(_QWORD *)(v48 + 8 * v36);
              if (!v35)
              {
                v37 = i + 7;
                if (i + 7 >= v47)
                  break;
                v35 = *(_QWORD *)(v48 + 8 * v37);
                if (!v35)
                {
                  while (1)
                  {
                    v36 = v37 + 1;
                    if (__OFADD__(v37, 1))
                      break;
                    if (v36 >= v47)
                      goto LABEL_44;
                    v35 = *(_QWORD *)(v48 + 8 * v36);
                    ++v37;
                    if (v35)
                      goto LABEL_37;
                  }
LABEL_51:
                  __break(1u);
                  JUMPOUT(0x18194254CLL);
                }
                v36 = i + 7;
              }
            }
          }
        }
      }
    }
LABEL_37:
    v49 = (v35 - 1) & v35;
    v50 = v36;
    v33 = __clz(__rbit64(v35)) + (v36 << 6);
LABEL_38:
    outlined init with copy of AnyHashable(*(_QWORD *)(v9 + 48) + 40 * v33, (uint64_t)&v60);
    outlined init with copy of Any(*(_QWORD *)(v9 + 56) + 32 * v33, (uint64_t)v23);
    v58[0] = v62[0];
    v58[1] = v62[1];
    v59 = v63;
    v57[0] = v60;
    v57[1] = v61;
    outlined init with copy of AnyHashable((uint64_t)v57, (uint64_t)&v52);
    if (!swift_dynamicCast())
    {
      outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v57);
      swift_bridgeObjectRelease();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_release();
      goto LABEL_45;
    }
    outlined init with copy of Any((uint64_t)v24, (uint64_t)&v52);
    outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v57);
    outlined init with take of Any(&v52, v25);
    v54 = v51;
    outlined init with take of Any(v25, v55);
    v38 = v54;
    outlined init with take of Any(v55, v56);
    outlined init with take of Any(v56, &v54);
    v39 = specialized __RawDictionaryStorage.find<A>(_:)(v38, *((uint64_t *)&v38 + 1));
    v40 = v39;
    if ((v41 & 1) != 0)
    {
      v27 = v25;
      v28 = v24;
      v29 = v23;
      v30 = v9;
      v31 = (_OWORD *)(v18[6] + 16 * v39);
      swift_bridgeObjectRelease();
      *v31 = v38;
      v9 = v30;
      v23 = v29;
      v24 = v28;
      v25 = v27;
      v32 = (_OWORD *)(v18[7] + 32 * v40);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      outlined init with take of Any(&v54, v32);
      goto LABEL_15;
    }
    if (v18[2] >= v18[3])
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    *(_QWORD *)((char *)v18 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v39;
    *(_OWORD *)(v18[6] + 16 * v39) = v38;
    outlined init with take of Any(&v54, (_OWORD *)(v18[7] + 32 * v39));
    v42 = v18[2];
    v16 = __OFADD__(v42, 1);
    v43 = v42 + 1;
    if (v16)
      goto LABEL_47;
    v18[2] = v43;
LABEL_15:
    v22 = v49;
  }
LABEL_44:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_45:
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v44 = objc_allocWithZone((Class)NSError);
  v45 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v44, sel_initWithDomain_code_userInfo_, v45, 512, _NativeDictionary.bridged()());
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_willThrow();
}

void sub_18194295C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Unwind_Resume(a1);
}

uint64_t _NSFileHandleIsClosed(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned __int16 *)(a1 + 100));
  return (v1 >> 2) & 1;
}

BOOL _NSFileHandleCanPerformWritingInSwiftOverlay(void *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (objc_msgSend(a1, "fileDescriptor") == -1)
    return 0;
  v2 = objc_msgSend(a1, "methodForSelector:", sel_writeData_error_);
  if (v2 == +[NSConcreteFileHandle instanceMethodForSelector:](NSConcreteFileHandle, "instanceMethodForSelector:", sel_writeData_error_))return 1;
  v3 = objc_msgSend(a1, "methodForSelector:", sel_writeData_);
  return v3 == +[NSConcreteFileHandle instanceMethodForSelector:](NSConcreteFileHandle, "instanceMethodForSelector:", sel_writeData_);
}

ssize_t closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:)(ssize_t __buf, uint64_t a2, int __fd)
{
  char *v3;
  int64_t v4;
  int v6;

  if (__buf)
  {
    v3 = (char *)__buf;
    v4 = a2 - __buf;
    if (a2 - __buf >= 1)
    {
      do
      {
        while (1)
        {
          __buf = write(__fd, v3, v4);
          if (__buf < 0)
            break;
          v4 -= __buf;
          v3 += __buf;
          if (v4 <= 0)
            return __buf;
        }
      }
      while (MEMORY[0x186DA4118]() == 35);
      v6 = MEMORY[0x186DA4118]();
      __buf = _NSErrorWithFilePathAndErrno(v6, 0, 0);
      if (__buf)
        return swift_willThrow();
      else
        __break(1u);
    }
  }
  return __buf;
}

void type metadata completion function for NumberFormatStyleConfiguration.Collection()
{
  unint64_t v0;

  type metadata accessor for FloatingPointRoundingRule?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void static MeasurementFormatUnitUsage<>.barometric.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

void static MeasurementFormatUnitUsage<>.visibility.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributedString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t Default;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  Default = _loadDefaultAttributes()();
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v8);
  v7 = Default;
  AttributedString.init(from:configuration:)(v8, &v7, &v9);
  result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v2)
    *a2 = v9;
  return result;
}

uint64_t AttributedString.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t Default;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  Default = _loadDefaultAttributes()();
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v8);
  v7 = Default;
  AttributedString.init(from:configuration:)(v8, &v7, &v9);
  result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v2)
    *a2 = v9;
  return result;
}

void AttributedString.init(_:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  uint64_t Default;
  uint64_t v5;

  v3 = a1;
  Default = _loadDefaultAttributes()();
  AttributedString.init(_:attributeTable:options:)(v3, Default, 1, &v5);

  *a2 = v5;
}

unint64_t AttributedString.init(_:attributeTable:options:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t result;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  BOOL v58;
  void *v59;
  _QWORD *v60;
  __int128 *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t aBlock;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, void *);
  void *v68;
  uint64_t (*v69)();
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[4];
  _QWORD v78[4];
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD v84[3];
  char v85[48];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _QWORD v89[14];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v8 = objc_msgSend(a1, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  BigString.init(_:)();
  aBlock = 0;
  MEMORY[0x186DA9E90](&aBlock, 8);
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = aBlock;
  v79 = 0;
  v78[0] = BigString.startIndex.getter();
  v78[1] = v9;
  v78[2] = v10;
  v78[3] = v11;
  v77[0] = v78[0];
  v77[1] = v9;
  v77[2] = v10;
  v77[3] = v11;
  v74 = 0;
  v75 = MEMORY[0x1E0DEE9E0];
  v76 = MEMORY[0x1E0DEE9E8];
  v73 = 0;
  v12 = objc_msgSend(a1, sel_length);
  v13 = swift_allocObject();
  v14 = v84[1];
  *(_OWORD *)(v13 + 56) = v84[0];
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  v15 = v13;
  *(_QWORD *)(v13 + 32) = &v79;
  *(_QWORD *)(v13 + 40) = v77;
  *(_QWORD *)(v13 + 48) = v78;
  *(_OWORD *)(v13 + 72) = v14;
  *(_OWORD *)(v13 + 88) = v84[2];
  *(_QWORD *)(v13 + 104) = &v74;
  *(_QWORD *)(v13 + 112) = &v80;
  *(_QWORD *)(v13 + 120) = &v73;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = partial apply for closure #1 in AttributedString.init(_:attributeTable:options:);
  *(_QWORD *)(v16 + 24) = v15;
  v69 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v70 = v16;
  aBlock = MEMORY[0x1E0C809B0];
  v66 = 1107296256;
  v67 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v68 = &block_descriptor_21;
  v17 = _Block_copy(&aBlock);
  swift_retain();
  outlined retain of Locale((uint64_t)v84);
  swift_release();
  objc_msgSend(a1, sel_enumerateAttributesInRange_options_usingBlock_, 0, v12, 0, v17);
  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v17 & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v79)
  {
    v19 = v79;
    swift_willThrow();

    outlined release of Locale((uint64_t)v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    return swift_unknownObjectRelease();
  }
  v59 = a1;
  v60 = a4;
  v20 = v74;
  if (v74 > 0)
  {
    v21 = v75;
    v22 = v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Rope.append(_:)(v20, v21, v22);
  }
  v23 = v80;
  v24 = v81;
  v25 = v82;
  v26 = v83;
  type metadata accessor for AttributedString.Guts();
  swift_allocObject();
  outlined retain of Locale((uint64_t)v84);
  swift_unknownObjectRetain();
  v27 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v84, v23, v24, v25, v26);
  v28 = v27;
  v62 = v27;
  if (v73 != 1)
  {
    swift_retain();
    goto LABEL_15;
  }
  v29 = v27[2];
  v101 = v27[1];
  v102 = v29;
  v103 = v27[3];
  v30 = BigString.startIndex.getter();
  v32 = v31;
  v34 = v33;
  v36 = v35;
  result = BigString.endIndex.getter();
  if (result >> 10 < v30 >> 10)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v93 = v30;
  v94 = v32;
  v95 = v34;
  v96 = v36;
  v97 = result;
  v98 = v37;
  v99 = v38;
  v100 = v39;
  swift_retain();
  AttributedString.Guts.fixScalarConstrainedAttributes(in:)();
  v40 = v28[2];
  v90 = v28[1];
  v91 = v40;
  v61 = v28 + 1;
  v92 = v28[3];
  v41 = *((_QWORD *)v28 + 2);
  v42 = *((_QWORD *)v28 + 3);
  v43 = *((_QWORD *)v28 + 4);
  v44 = *((_QWORD *)v28 + 5);
  v46 = *((_QWORD *)v28 + 6);
  v45 = *((_QWORD *)v28 + 7);
  v47 = BigString.startIndex.getter();
  v104 = v48;
  v64 = v49;
  v51 = v50;
  if (v47 >> 10 < (unint64_t)BigString.endIndex.getter() >> 10)
  {
    do
    {
      v89[8] = v41;
      v89[9] = v42;
      v89[10] = v43;
      v89[11] = v44;
      v89[12] = v46;
      v89[13] = v45;
      BigString.utf8.getter();
      v89[0] = v47;
      v89[1] = v104;
      v89[2] = v64;
      v89[3] = v51;
      v89[4] = v47;
      v89[5] = v104;
      v89[6] = v64;
      v89[7] = v51;
      specialized BidirectionalCollection<>._getBlock(for:in:)(2, v89, (unint64_t *)&aBlock);
      result = outlined release of Locale((uint64_t)v85);
      v63 = v72;
      if (v72 == 2)
        goto LABEL_20;
      v53 = (unint64_t)v69;
      v52 = v70;
      v54 = v71;
      v55 = v47 >> 11;
      aBlock = 0;
      v66 = 0;
      result = AttributedString.Guts._constrainedAttributes(at:with:)(v55, &aBlock);
      if (v53 >> 11 < v55)
      {
        __break(1u);
        goto LABEL_18;
      }
      v56 = result;
      v64 = v54;
      v104 = v52;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString._InternalRunsSlice.updateEach(with:)(v62, v55, v53 >> 11, v56);
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v57 = v61[1];
      v86 = *v61;
      v87 = v57;
      v88 = v61[2];
      v41 = v62[2];
      v42 = v62[3];
      v43 = v62[4];
      v44 = v62[5];
      v46 = v62[6];
      v45 = v62[7];
      v58 = v53 >> 10 >= (unint64_t)BigString.endIndex.getter() >> 10;
      v47 = v53;
      v51 = v63;
    }
    while (!v58);
  }
LABEL_15:

  outlined release of Locale((uint64_t)v84);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  result = swift_unknownObjectRelease();
  *v60 = v62;
  return result;
}

uint64_t AttributedString.Guts.init(string:runs:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v12;
  unint64_t v13;
  uint64_t result;
  __int128 v15;
  unint64_t v16;

  v6 = v5;
  v12 = BigString.isEmpty.getter();
  if (a2)
  {
    v13 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v13);
    result = swift_unknownObjectRelease_n();
    if ((((a4 == 0) ^ v12) & 1) == 0)
    {
LABEL_3:
      v15 = a1[1];
      *(_OWORD *)(v6 + 16) = *a1;
      *(_OWORD *)(v6 + 32) = v15;
      *(_OWORD *)(v6 + 48) = a1[2];
      *(_QWORD *)(v6 + 64) = a2;
      *(_QWORD *)(v6 + 72) = a3;
      *(_QWORD *)(v6 + 80) = a4;
      *(_QWORD *)(v6 + 88) = a5;
      return v6;
    }
  }
  else
  {
    v16 = swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v16);
    result = swift_unknownObjectRelease();
    if ((v12 & 1) != 0)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t NSAttributedString.init(_:)(uint64_t *a1)
{
  uint64_t v1;
  __int128 v2;
  id v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  int v27;
  char v28;
  char v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t result;
  _OWORD *v40;
  id v41;
  uint64_t v42;
  uint64_t Default;
  uint64_t v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[6];
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[48];
  char v58[48];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[2];
  __int128 v69;
  __int128 v70[3];
  _BYTE v71[48];

  v1 = *a1;
  Default = _loadDefaultAttributes()();
  v2 = *(_OWORD *)(v1 + 32);
  v68[0] = *(_OWORD *)(v1 + 16);
  v68[1] = v2;
  v69 = *(_OWORD *)(v1 + 48);
  v70[0] = v68[0];
  v70[1] = v2;
  v70[2] = v69;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v70, (uint64_t)v71);
  outlined retain of Locale((uint64_t)v71);
  MEMORY[0x186DA46F4](v68);
  v3 = objc_allocWithZone((Class)NSMutableAttributedString);
  v4 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v41 = objc_msgSend(v3, sel_initWithString_, v4);
  swift_unknownObjectRelease();
  v5 = *(_OWORD *)(v1 + 32);
  v65 = *(_OWORD *)(v1 + 16);
  v66 = v5;
  v67 = *(_OWORD *)(v1 + 48);
  BigString.startIndex.getter();
  v6 = *(_QWORD *)(v1 + 64);
  v44 = *(_QWORD *)(v1 + 72);
  v40 = (_OWORD *)v1;
  v47 = *(_QWORD *)(v1 + 88);
  v48 = *(_QWORD *)(v1 + 80);
  if (v6)
  {
    v7 = *(unsigned __int8 *)(v6 + 18);
    swift_unknownObjectRetain();
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v45 = v40 + 1;
  v51[2] = v6;
  v51[3] = v44;
  v51[4] = v48;
  v51[5] = v47;
  v52 = v47;
  v53 = v7;
  v42 = v6 + 24;
  v55 = 0;
  v56 = 0;
  v54 = 0;
  v46 = v6;
  while (1)
  {
    if (v6)
    {
      if (v10 == v48)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_unknownObjectRelease();
LABEL_40:
        v38 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithAttributedString_, v41);

        return (uint64_t)v38;
      }
    }
    else if (!v10)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_40;
    }
    if (v52 != v47)
      break;
    v50 = v8;
    v13 = v53;
    v14 = v54;
    if (v54)
    {
      v15 = (_QWORD *)(v54 + 24 * ((v53 >> ((4 * *(_BYTE *)(v54 + 18) + 8) & 0x3C)) & 0xF));
      v16 = v15[3];
      v17 = v15[4];
      v18 = v15[5];
      v12 = __OFADD__(v9, 1);
      v19 = v9 + 1;
      v20 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v20 & 1) != 0)
        goto LABEL_42;
      v49 = v19;
      v55 = v19;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v13, v6);
      v17 = v21;
      v18 = v22;
      swift_unknownObjectRelease();
      v12 = __OFADD__(v9, 1);
      v23 = v9 + 1;
      if (v12)
        goto LABEL_42;
      v49 = v23;
      v55 = v23;
      swift_unknownObjectRetain();
      v16 = specialized Rope._Node.subscript.getter(v13, v6);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = __OFADD__(v10, v16);
    v10 += v16;
    if (v12)
      goto LABEL_43;
    v56 = v10;
    if (!v6)
      goto LABEL_45;
    v24 = ((-15 << ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v6 + 18) | ((unint64_t)*(unsigned __int16 *)(v6 + 16) << ((4 * *(_BYTE *)(v6 + 18) + 8) & 0x3C));
    swift_unknownObjectRetain();
    if (v13 >= v24)
      goto LABEL_45;
    if (v14)
    {
      v25 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
      v26 = ((v13 >> v25) & 0xF) + 1;
      if (v26 < *(unsigned __int16 *)(v14 + 16))
      {
        v53 = (v26 << v25) | ((-15 << v25) - 1) & v13;
LABEL_28:
        swift_unknownObjectRelease_n();
        goto LABEL_34;
      }
    }
    v27 = *(unsigned __int8 *)(v6 + 18);
    v28 = (4 * v27 + 8) & 0x3C;
    v51[0] = (v13 >> v28) & 0xF;
    if (v27)
    {
      swift_unknownObjectRetain();
      v29 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v42, v51, (uint64_t)&v52, v6, v27);
      swift_unknownObjectRelease();
      if ((v29 & 1) == 0)
      {
        v31 = *(unsigned __int8 *)(v6 + 18);
LABEL_33:
        v32 = *(unsigned __int16 *)(v6 + 16);
        v33 = *(_BYTE *)(v6 + 18);
        swift_unknownObjectRelease_n();
        v52 = v47;
        v53 = ((-15 << ((4 * v33 + 8) & 0x3C)) - 1) & v31 | (unint64_t)(v32 << ((4 * v33 + 8) & 0x3C));
        v54 = 0;
        goto LABEL_34;
      }
      goto LABEL_28;
    }
    v30 = ((v13 >> v28) & 0xF) + 1;
    if (v30 >= *(unsigned __int16 *)(v6 + 16))
    {
      v31 = 0;
      goto LABEL_33;
    }
    v53 = (v30 << v28) | ((-15 << v28) - 1) & v13;
    swift_unknownObjectRelease_n();
    v54 = v6;
LABEL_34:
    v34 = v40[2];
    v62 = *v45;
    v63 = v34;
    v64 = v40[3];
    BigString.utf8.getter();
    BigString.UTF8View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v57);
    v35 = v40[2];
    v59 = *v45;
    v60 = v35;
    v61 = v40[3];
    BigString.utf16.getter();
    v36 = BigString.UTF16View.distance(from:to:)();
    outlined release of Locale((uint64_t)v58);
    if (*(_QWORD *)(v17 + 16))
    {
      v51[0] = v17;
      v51[1] = v18;
      swift_bridgeObjectRetain();
      v37 = specialized Dictionary<>.init(_:attributeTable:options:)(v51, Default, 1);
      v6 = v46;
      if (*(_QWORD *)(v37 + 16))
      {
        type metadata accessor for NSAttributedStringKey(0);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
        v11 = v50;
        objc_msgSend(v41, sel_setAttributes_range_, _NativeDictionary.bridged()(), v50, v36);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v11 = v50;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v50;
      v6 = v46;
    }
    v12 = __OFADD__(v11, v36);
    v8 = v11 + v36;
    v9 = v49;
    if (v12)
      goto LABEL_44;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);

  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t _loadDefaultAttributes()()
{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t i;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  _QWORD *v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  __int128 v70;
  _QWORD *v71;

  if (one-time initialization token for _loadedScopeCache != -1)
    goto LABEL_84;
LABEL_2:
  v0 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
  swift_retain();
  os_unfair_lock_lock(v0);
  closure #1 in _loadDefaultAttributes()(0xD000000000000039, 0x800000018230DCE0, 0xD000000000000032, 0x800000018230DD20, &v71);
  os_unfair_lock_unlock(v0);
  swift_release();
  v1 = v71;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
  v3 = v1[2];
  v2 = v1[3];
  v4 = v3 + 1;
  if (v3 >= v2 >> 1)
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v2 > 1), v3 + 1, 1, v1);
  v1[2] = v4;
  v5 = &v1[2 * v3];
  v5[4] = &type metadata for AttributeScopes.FoundationAttributes;
  v5[5] = &protocol witness table for AttributeScopes.FoundationAttributes;
  v71 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 + 1, 0);
  v6 = v71;
  v7 = v1 + 5;
  do
  {
    v8 = static AttributeScope.scopeDescription.getter(*(v7 - 1), *v7);
    swift_bridgeObjectRelease();
    v71 = v6;
    v10 = v6[2];
    v9 = v6[3];
    v11 = v6;
    if (v10 >= v9 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      v11 = v71;
    }
    v11[2] = v10 + 1;
    v11[v10 + 4] = v8;
    v7 += 2;
    --v4;
    v6 = v11;
  }
  while (v4);
  v66 = v11 + 4;
  swift_bridgeObjectRelease();
  v65 = v6[2];
  if (!v65)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
  swift_bridgeObjectRetain();
  v12 = 0;
  v13 = MEMORY[0x1E0DEE9E0];
LABEL_13:
  v67 = v12;
  v14 = v66[v12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v71 = (_QWORD *)v13;
  v68 = v14 + 64;
  v16 = 1 << *(_BYTE *)(v14 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & *(_QWORD *)(v14 + 64);
  v69 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain();
  i = 0;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (i << 6);
      goto LABEL_36;
    }
    v22 = i + 1;
    if (__OFADD__(i, 1))
      goto LABEL_81;
    if (v22 >= v69)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v12 = v67 + 1;
      swift_bridgeObjectRelease();
      if (v67 + 1 == v65)
      {
        swift_bridgeObjectRelease_n();
        return v13;
      }
      goto LABEL_13;
    }
    v23 = *(_QWORD *)(v68 + 8 * v22);
    ++i;
    if (!v23)
    {
      i = v22 + 1;
      if (v22 + 1 >= v69)
        goto LABEL_12;
      v23 = *(_QWORD *)(v68 + 8 * i);
      if (!v23)
      {
        i = v22 + 2;
        if (v22 + 2 >= v69)
          goto LABEL_12;
        v23 = *(_QWORD *)(v68 + 8 * i);
        if (!v23)
        {
          i = v22 + 3;
          if (v22 + 3 >= v69)
            goto LABEL_12;
          v23 = *(_QWORD *)(v68 + 8 * i);
          if (!v23)
          {
            v24 = v22 + 4;
            if (v24 >= v69)
              goto LABEL_12;
            v23 = *(_QWORD *)(v68 + 8 * v24);
            for (i = v24; !v23; ++v24)
            {
              i = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_82;
              if (i >= v69)
                goto LABEL_12;
              v23 = *(_QWORD *)(v68 + 8 * i);
            }
          }
        }
      }
    }
    v18 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (i << 6);
LABEL_36:
    v25 = 16 * v21;
    v26 = (uint64_t *)(*(_QWORD *)(v14 + 48) + v25);
    v28 = *v26;
    v27 = v26[1];
    v70 = *(_OWORD *)(*(_QWORD *)(v14 + 56) + v25);
    swift_bridgeObjectRetain();
    v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
    v31 = *(_QWORD *)(v13 + 16);
    v32 = (v29 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      swift_once();
      goto LABEL_2;
    }
    v34 = v29;
    if (*(_QWORD *)(v13 + 24) >= v33)
      break;
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, isUniquelyReferenced_nonNull_native & 1);
    v35 = (uint64_t)v71;
    v36 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
    if ((v34 & 1) != (v37 & 1))
      goto LABEL_86;
    v30 = v36;
    if ((v34 & 1) != 0)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      *(_OWORD *)(*(_QWORD *)(v35 + 56) + 16 * v30) = v70;
      goto LABEL_18;
    }
LABEL_43:
    *(_QWORD *)(v35 + 8 * (v30 >> 6) + 64) |= 1 << v30;
    v38 = (uint64_t *)(*(_QWORD *)(v35 + 48) + 16 * v30);
    *v38 = v28;
    v38[1] = v27;
    *(_OWORD *)(*(_QWORD *)(v35 + 56) + 16 * v30) = v70;
    v39 = *(_QWORD *)(v35 + 16);
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    if (v40)
      goto LABEL_80;
    *(_QWORD *)(v35 + 16) = v41;
LABEL_18:
    isUniquelyReferenced_nonNull_native = 1;
    v13 = v35;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v35 = v13;
    if ((v29 & 1) != 0)
      goto LABEL_17;
    goto LABEL_43;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
  v42 = static _DictionaryStorage.copy(original:)();
  v35 = v42;
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_74:
    swift_release();
    v71 = (_QWORD *)v35;
    if ((v34 & 1) != 0)
      goto LABEL_17;
    goto LABEL_43;
  }
  v43 = (void *)(v42 + 64);
  v44 = (unint64_t)((1 << *(_BYTE *)(v35 + 32)) + 63) >> 6;
  if (v35 != v13 || (unint64_t)v43 >= v13 + 64 + 8 * v44)
    memmove(v43, (const void *)(v13 + 64), 8 * v44);
  v62 = v13 + 64;
  v45 = 0;
  *(_QWORD *)(v35 + 16) = *(_QWORD *)(v13 + 16);
  v46 = 1 << *(_BYTE *)(v13 + 32);
  if (v46 < 64)
    v47 = ~(-1 << v46);
  else
    v47 = -1;
  v48 = v47 & *(_QWORD *)(v13 + 64);
  v63 = (unint64_t)(v46 + 63) >> 6;
  while (2)
  {
    if (v48)
    {
      v49 = __clz(__rbit64(v48));
      v48 &= v48 - 1;
      v64 = v45;
      v50 = v49 | (v45 << 6);
LABEL_54:
      v51 = 16 * v50;
      v52 = (uint64_t *)(*(_QWORD *)(v13 + 48) + v51);
      v54 = *v52;
      v53 = v52[1];
      v55 = *(_OWORD *)(*(_QWORD *)(v13 + 56) + v51);
      v56 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v51);
      *v56 = v54;
      v56[1] = v53;
      *(_OWORD *)(*(_QWORD *)(v35 + 56) + v51) = v55;
      swift_bridgeObjectRetain();
      v45 = v64;
      continue;
    }
    break;
  }
  v57 = v45 + 1;
  if (__OFADD__(v45, 1))
    goto LABEL_83;
  if (v57 >= v63)
    goto LABEL_74;
  v58 = *(_QWORD *)(v62 + 8 * v57);
  v59 = v45 + 1;
  if (v58)
    goto LABEL_73;
  v59 = v45 + 2;
  if (v45 + 2 >= v63)
    goto LABEL_74;
  v58 = *(_QWORD *)(v62 + 8 * v59);
  if (v58)
    goto LABEL_73;
  v59 = v45 + 3;
  if (v45 + 3 >= v63)
    goto LABEL_74;
  v58 = *(_QWORD *)(v62 + 8 * v59);
  if (v58)
    goto LABEL_73;
  v59 = v45 + 4;
  if (v45 + 4 >= v63)
    goto LABEL_74;
  v58 = *(_QWORD *)(v62 + 8 * v59);
  if (v58)
    goto LABEL_73;
  v59 = v45 + 5;
  if (v45 + 5 >= v63)
    goto LABEL_74;
  v58 = *(_QWORD *)(v62 + 8 * v59);
  if (v58)
  {
LABEL_73:
    v48 = (v58 - 1) & v58;
    v64 = v59;
    v50 = __clz(__rbit64(v58)) + (v59 << 6);
    goto LABEL_54;
  }
  v60 = v45 + 6;
  if (v45 + 6 >= v63)
    goto LABEL_74;
  v58 = *(_QWORD *)(v62 + 8 * v60);
  if (v58)
  {
    v59 = v45 + 6;
    goto LABEL_73;
  }
  while (1)
  {
    v59 = v60 + 1;
    if (__OFADD__(v60, 1))
      break;
    if (v59 >= v63)
      goto LABEL_74;
    v58 = *(_QWORD *)(v62 + 8 * v59);
    ++v60;
    if (v58)
      goto LABEL_73;
  }
  __break(1u);
LABEL_86:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _loadDefaultAttributes()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t inited;
  _QWORD *v11;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_182065BC0;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  *(_QWORD *)(inited + 48) = a3;
  *(_QWORD *)(inited + 56) = a4;
  *(_QWORD *)(inited + 64) = 0xD000000000000037;
  *(_QWORD *)(inited + 72) = 0x800000018230DD60;
  *(_QWORD *)(inited + 80) = 0xD000000000000030;
  *(_QWORD *)(inited + 88) = 0x800000018230DDA0;
  *(_QWORD *)(inited + 96) = 0xD00000000000003BLL;
  *(_QWORD *)(inited + 104) = 0x800000018230DDE0;
  *(_QWORD *)(inited + 112) = 0xD000000000000034;
  *(_QWORD *)(inited + 120) = 0x800000018230DE20;
  *(_QWORD *)(inited + 128) = 0xD000000000000040;
  *(_QWORD *)(inited + 136) = 0x800000018230DE60;
  *(_QWORD *)(inited + 144) = 0xD000000000000040;
  *(_QWORD *)(inited + 152) = 0x800000018230DEB0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = specialized Sequence.compactMap<A>(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  result = swift_arrayDestroy();
  *a5 = v11;
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v5 = *(v2 - 1);
    v6 = *v2;
    v7 = *(v2 - 3);
    v8 = (void *)*(v2 - 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = LoadedScopeCache.scopeType(for:in:)(v7, v8, v5, v6);
    v11 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      v13 = v3[2];
      v12 = v3[3];
      if (v13 >= v12 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v3);
      v3[2] = v13 + 1;
      v4 = &v3[2 * v13];
      v4[4] = v9;
      v4[5] = v11;
    }
    v2 += 4;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[4];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  __int128 v38[4];
  char v39;
  char v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _QWORD *v56;

  v1 = *(_OWORD *)(a1 + 176);
  v52 = *(_OWORD *)(a1 + 160);
  v53 = v1;
  v54 = *(_OWORD *)(a1 + 192);
  v55 = *(_QWORD *)(a1 + 208);
  v2 = *(_OWORD *)(a1 + 112);
  v48 = *(_OWORD *)(a1 + 96);
  v49 = v2;
  v3 = *(_OWORD *)(a1 + 144);
  v50 = *(_OWORD *)(a1 + 128);
  v51 = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v44 = *(_OWORD *)(a1 + 32);
  v45 = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v46 = *(_OWORD *)(a1 + 64);
  v47 = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v7 = *((_QWORD *)&v52 + 1);
  v23 = *((_QWORD *)&v50 + 1) >> 10;
  v42 = *(_OWORD *)a1;
  v43 = v6;
  if (*((_QWORD *)&v50 + 1) >> 10 == *((_QWORD *)&v52 + 1) >> 10)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v8 = v54;
  v9 = *((_QWORD *)&v53 + 1);
  v10 = v53;
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(a1);
  v56 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    specialized AttributedString.Runs.AttributesSlice4.index(before:)(v7, v10, v9, v8, (__int128 **)&v30);
    v10 = *((_QWORD *)&v30 + 1);
    v7 = v30;
    v11 = v31;
    v12 = v32;
    v13 = specialized AttributedString.Runs.AttributesSlice4.subscript.getter(&v30, &v34, &v36, (unint64_t *)v38, v30, *((uint64_t *)&v30 + 1), v31, v32);
    v14 = v30;
    v41 = v15 & 1;
    v40 = v35;
    v39 = v37;
    v32 = v13;
    v33 = v15 & 1;
    closure #1 in AttributedString.enumerateInflectableRanges(in:editor:)((uint64_t)&v30, v13, v15 & 1, v34, v35, v36, v37, v38, (uint64_t)v28);
    outlined consume of AttributedString.AttributeRunBoundaries?(v14, *((uint64_t *)&v14 + 1));
    v16 = v29;
    if (v29)
    {
      v26 = v28[1];
      v27 = v28[0];
      v24 = v28[3];
      v25 = v28[2];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
      v8 = v12;
      v18 = v56[2];
      v17 = v56[3];
      v9 = v11;
      if (v18 >= v17 >> 1)
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v56);
      v19 = v56;
      v56[2] = v18 + 1;
      v20 = &v19[9 * v18];
      *((_OWORD *)v20 + 2) = v27;
      *((_OWORD *)v20 + 3) = v26;
      *((_OWORD *)v20 + 4) = v25;
      *((_OWORD *)v20 + 5) = v24;
      v20[12] = v16;
    }
    else
    {
      v8 = v12;
      v9 = v11;
    }
  }
  while (v23 != v7 >> 10);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator(a1);
  return v56;
}

{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32[4];
  _BYTE v33[80];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;

  v1 = *(_OWORD *)(a1 + 144);
  v2 = *(_OWORD *)(a1 + 176);
  v56 = *(_OWORD *)(a1 + 160);
  v57 = v2;
  v3 = *(_OWORD *)(a1 + 176);
  v58 = *(_OWORD *)(a1 + 192);
  v4 = *(_OWORD *)(a1 + 80);
  v5 = *(_OWORD *)(a1 + 112);
  v52 = *(_OWORD *)(a1 + 96);
  v53 = v5;
  v6 = *(_OWORD *)(a1 + 112);
  v7 = *(_OWORD *)(a1 + 144);
  v54 = *(_OWORD *)(a1 + 128);
  v55 = v7;
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 48);
  v48 = *(_OWORD *)(a1 + 32);
  v49 = v9;
  v10 = *(_OWORD *)(a1 + 48);
  v11 = *(_OWORD *)(a1 + 80);
  v50 = *(_OWORD *)(a1 + 64);
  v51 = v11;
  v12 = *(_OWORD *)(a1 + 16);
  v46 = *(_OWORD *)a1;
  v47 = v12;
  v70 = v56;
  v71 = v3;
  v66 = v52;
  v67 = v6;
  v68 = v54;
  v69 = v1;
  v62 = v48;
  v63 = v10;
  v64 = v50;
  v65 = v4;
  v59 = *(_QWORD *)(a1 + 208);
  v72 = *(_QWORD *)(a1 + 192);
  v13 = *((_QWORD *)&v56 + 1);
  v14 = *((_QWORD *)&v54 + 1) >> 10;
  v60 = v46;
  v61 = v8;
  if (*((_QWORD *)&v54 + 1) >> 10 == *((_QWORD *)&v56 + 1) >> 10)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v15 = v72;
  v16 = *((_QWORD *)&v71 + 1);
  v17 = v71;
  v18 = v59;
  v73 = *((_QWORD *)&v58 + 1);
  v25 = a1;
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(a1);
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v26 = v59;
  v27 = *((_QWORD *)&v54 + 1) >> 10;
  do
  {
    v39 = v70;
    v40 = v71;
    v41 = v72;
    v35 = v66;
    v36 = v67;
    v37 = v68;
    v38 = v69;
    *(_OWORD *)&v33[32] = v62;
    *(_OWORD *)&v33[48] = v63;
    *(_OWORD *)&v33[64] = v64;
    v34 = v65;
    *(_OWORD *)v33 = v60;
    *(_OWORD *)&v33[16] = v61;
    v32[0] = v13;
    v32[1] = v17;
    v32[2] = v16;
    v32[3] = v15;
    outlined retain of AttributedString.Runs((uint64_t)&v60);
    AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)(v32, v73, v18, &v42);
    outlined release of AttributedString.Runs((uint64_t)&v60);
    v13 = v42;
    v17 = v43;
    v16 = v44;
    v15 = v45;
    specialized AttributedString.Runs.AttributesSlice1.subscript.getter((uint64_t)v33, &v33[8], v42, v43, v44, v45);
    if ((v33[0] & 1) == 0)
    {
      v30 = *(_OWORD *)&v33[24];
      v31 = *(_OWORD *)&v33[8];
      v28 = *(_OWORD *)&v33[56];
      v29 = *(_OWORD *)&v33[40];
      v21 = objc_msgSend((id)objc_opt_self(), sel_automatic, v25);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      v23 = v19[2];
      v22 = v19[3];
      if (v23 >= v22 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v19);
      v19[2] = v23 + 1;
      v20 = &v19[9 * v23];
      *((_OWORD *)v20 + 2) = v31;
      *((_OWORD *)v20 + 3) = v30;
      *((_OWORD *)v20 + 4) = v29;
      *((_OWORD *)v20 + 5) = v28;
      v20[12] = v21;
      v18 = v26;
      v14 = v27;
    }
  }
  while (v14 != v13 >> 10);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator(v25);
  return v19;
}

uint64_t LoadedScopeCache.scopeType(for:in:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  unint64_t v10;
  char v11;
  void *v12;
  uint32_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  _BOOL8 v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  char isUniquelyReferenced_nonNull_native;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t result;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  _QWORD *v74;
  int64_t v75;
  unint64_t v76;
  int64_t v77;
  Swift::String v78;
  Swift::String v79;
  unint64_t v80;
  int64_t v81;
  void *v82;
  char *v83;
  char *__src;
  char *__srca;
  uint64_t v86;
  uint64_t v87;

  v5 = v4;
  v9 = *v4;
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
    if ((v11 & 1) != 0)
    {
      v12 = *(void **)(*(_QWORD *)(v9 + 56) + 16 * v10);
      swift_bridgeObjectRelease();
      if (v12)
        return (uint64_t)v12;
      v13 = _dyld_image_count();
      if (*((_DWORD *)v5 + 2) == v13)
        return 0;
      *((_DWORD *)v5 + 2) = v13;
      v14 = swift_bridgeObjectRetain();
      v15 = specialized _NativeDictionary.filter(_:)(v14);
      swift_bridgeObjectRelease();
      *v5 = v15;
    }
    swift_bridgeObjectRelease();
  }
  v16 = String.utf8CString.getter();
  LOBYTE(v12) = v16;
  v17 = dlopen((const char *)(v16 + 32), 16);
  swift_release();
  if (!v17
    || (v18 = String.utf8CString.getter(),
        LOBYTE(v12) = v18,
        v19 = dlsym(v17, (const char *)(v18 + 32)),
        swift_release(),
        !v19))
  {
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v87 = *v5;
    a4 = *v5;
    *v5 = 0x8000000000000000;
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
    v36 = *(_QWORD *)(a4 + 16);
    v37 = (v35 & 1) == 0;
    v38 = v36 + v37;
    if (!__OFADD__(v36, v37))
    {
      LOBYTE(v12) = v35;
      if (*(_QWORD *)(a4 + 24) >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          goto LABEL_38;
        v39 = a4;
        if ((v35 & 1) != 0)
          goto LABEL_25;
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
        v39 = v87;
        v40 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
        if ((v12 & 1) != (v41 & 1))
          goto LABEL_112;
        v21 = v40;
        if ((v12 & 1) != 0)
          goto LABEL_25;
      }
LABEL_28:
      specialized _NativeDictionary._insert(at:key:value:)(v21, a1, a2, 0, 0, v39);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
    v44 = static _DictionaryStorage.copy(original:)();
    v39 = v44;
    if (*(_QWORD *)(a4 + 16))
    {
      v45 = (char *)(v44 + 64);
      __src = (char *)(a4 + 64);
      v46 = (unint64_t)((1 << *(_BYTE *)(v39 + 32)) + 63) >> 6;
      if (v39 != a4 || v45 >= &__src[8 * v46])
        memmove(v45, __src, 8 * v46);
      v47 = 0;
      *(_QWORD *)(v39 + 16) = *(_QWORD *)(a4 + 16);
      v48 = 1 << *(_BYTE *)(a4 + 32);
      v49 = -1;
      if (v48 < 64)
        v49 = ~(-1 << v48);
      v50 = v49 & *(_QWORD *)(a4 + 64);
      v82 = (void *)((unint64_t)(v48 + 63) >> 6);
      while (1)
      {
        if (v50)
        {
          v51 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          v52 = v51 | (v47 << 6);
        }
        else
        {
          v28 = __OFADD__(v47++, 1);
          if (v28)
          {
            __break(1u);
LABEL_109:
            __break(1u);
            goto LABEL_110;
          }
          if (v47 >= (uint64_t)v82)
            break;
          v59 = *(_QWORD *)&__src[8 * v47];
          if (!v59)
          {
            v60 = v47 + 1;
            if (v47 + 1 >= (uint64_t)v82)
              break;
            v59 = *(_QWORD *)&__src[8 * v60];
            if (!v59)
            {
              v60 = v47 + 2;
              if (v47 + 2 >= (uint64_t)v82)
                break;
              v59 = *(_QWORD *)&__src[8 * v60];
              if (!v59)
              {
                v60 = v47 + 3;
                if (v47 + 3 >= (uint64_t)v82)
                  break;
                v59 = *(_QWORD *)&__src[8 * v60];
                if (!v59)
                {
                  v60 = v47 + 4;
                  if (v47 + 4 >= (uint64_t)v82)
                    break;
                  v59 = *(_QWORD *)&__src[8 * v60];
                  if (!v59)
                  {
                    v60 = v47 + 5;
                    if (v47 + 5 >= (uint64_t)v82)
                      break;
                    v59 = *(_QWORD *)&__src[8 * v60];
                    if (!v59)
                    {
                      v60 = v47 + 6;
                      if (v47 + 6 >= (uint64_t)v82)
                        break;
                      v59 = *(_QWORD *)&__src[8 * v60];
                      if (!v59)
                      {
                        v60 = v47 + 7;
                        if (v47 + 7 >= (uint64_t)v82)
                          break;
                        v59 = *(_QWORD *)&__src[8 * v60];
                        if (!v59)
                        {
                          while (1)
                          {
                            v47 = v60 + 1;
                            if (__OFADD__(v60, 1))
                              break;
                            if (v47 >= (uint64_t)v82)
                              goto LABEL_71;
                            v59 = *(_QWORD *)&__src[8 * v47];
                            ++v60;
                            if (v59)
                              goto LABEL_66;
                          }
LABEL_110:
                          __break(1u);
                          goto LABEL_111;
                        }
                      }
                    }
                  }
                }
              }
            }
            v47 = v60;
          }
LABEL_66:
          v50 = (v59 - 1) & v59;
          v52 = __clz(__rbit64(v59)) + (v47 << 6);
        }
        v53 = 16 * v52;
        v54 = (uint64_t *)(*(_QWORD *)(a4 + 48) + v53);
        v56 = *v54;
        v55 = v54[1];
        v57 = *(_OWORD *)(*(_QWORD *)(a4 + 56) + v53);
        v58 = (_QWORD *)(*(_QWORD *)(v39 + 48) + v53);
        *v58 = v56;
        v58[1] = v55;
        *(_OWORD *)(*(_QWORD *)(v39 + 56) + v53) = v57;
        swift_bridgeObjectRetain();
      }
    }
LABEL_71:
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
      goto LABEL_28;
LABEL_25:
    v42 = (_QWORD *)(*(_QWORD *)(v39 + 56) + 16 * v21);
    *v42 = 0;
    v42[1] = 0;
LABEL_29:
    *v5 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v20 = swift_conformsToProtocol2();
  if (v20)
    v21 = v20;
  else
    v21 = 0;
  if (v20)
    v12 = v19;
  else
    v12 = 0;
  if (!v12)
    goto LABEL_113;
  swift_bridgeObjectRetain();
  v22 = swift_isUniquelyReferenced_nonNull_native();
  v86 = *v5;
  v23 = *v5;
  *v5 = 0x8000000000000000;
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
  v26 = *(_QWORD *)(v23 + 16);
  v27 = (v25 & 1) == 0;
  v28 = __OFADD__(v26, v27);
  v29 = v26 + v27;
  if (v28)
    goto LABEL_37;
  v30 = v25;
  if (*(_QWORD *)(v23 + 24) < v29)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, v22);
    v31 = v86;
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
    if ((v30 & 1) != (v32 & 1))
      goto LABEL_112;
    if ((v30 & 1) != 0)
      goto LABEL_20;
LABEL_33:
    specialized _NativeDictionary._insert(at:key:value:)(v24, a1, a2, v12, v21, v31);
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }
  if ((v22 & 1) != 0)
  {
    v31 = v23;
    if ((v25 & 1) == 0)
      goto LABEL_33;
LABEL_20:
    v33 = (_QWORD *)(*(_QWORD *)(v31 + 56) + 16 * v24);
    *v33 = v12;
    v33[1] = v21;
LABEL_34:
    *v5 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  v80 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
  v61 = static _DictionaryStorage.copy(original:)();
  v31 = v61;
  if (!*(_QWORD *)(v23 + 16))
  {
LABEL_106:
    swift_bridgeObjectRelease();
    v24 = v80;
    if ((v30 & 1) == 0)
      goto LABEL_33;
    goto LABEL_20;
  }
  v62 = (char *)(v61 + 64);
  v83 = (char *)(v23 + 64);
  v63 = (unint64_t)((1 << *(_BYTE *)(v31 + 32)) + 63) >> 6;
  if (v31 != v23 || v62 >= &v83[8 * v63])
    memmove(v62, v83, 8 * v63);
  __srca = 0;
  *(_QWORD *)(v31 + 16) = *(_QWORD *)(v23 + 16);
  v64 = 1 << *(_BYTE *)(v23 + 32);
  v65 = -1;
  if (v64 < 64)
    v65 = ~(-1 << v64);
  v66 = v65 & *(_QWORD *)(v23 + 64);
  v81 = (unint64_t)(v64 + 63) >> 6;
  while (1)
  {
    if (v66)
    {
      v67 = __clz(__rbit64(v66));
      v66 &= v66 - 1;
      v68 = v67 | ((_QWORD)__srca << 6);
      goto LABEL_81;
    }
    v75 = (int64_t)(__srca + 1);
    if (__OFADD__(__srca, 1))
      goto LABEL_109;
    if (v75 >= v81)
      goto LABEL_106;
    v76 = *(_QWORD *)&v83[8 * v75];
    if (!v76)
      break;
LABEL_101:
    v66 = (v76 - 1) & v76;
    __srca = (char *)v75;
    v68 = __clz(__rbit64(v76)) + (v75 << 6);
LABEL_81:
    v69 = 16 * v68;
    v70 = (uint64_t *)(*(_QWORD *)(v23 + 48) + v69);
    v72 = *v70;
    v71 = v70[1];
    v73 = *(_OWORD *)(*(_QWORD *)(v23 + 56) + v69);
    v74 = (_QWORD *)(*(_QWORD *)(v31 + 48) + v69);
    *v74 = v72;
    v74[1] = v71;
    *(_OWORD *)(*(_QWORD *)(v31 + 56) + v69) = v73;
    swift_bridgeObjectRetain();
  }
  v77 = (int64_t)(__srca + 2);
  if ((uint64_t)(__srca + 2) >= v81)
    goto LABEL_106;
  v76 = *(_QWORD *)&v83[8 * v77];
  if (v76)
    goto LABEL_100;
  v77 = (int64_t)(__srca + 3);
  if ((uint64_t)(__srca + 3) >= v81)
    goto LABEL_106;
  v76 = *(_QWORD *)&v83[8 * v77];
  if (v76)
    goto LABEL_100;
  v77 = (int64_t)(__srca + 4);
  if ((uint64_t)(__srca + 4) >= v81)
    goto LABEL_106;
  v76 = *(_QWORD *)&v83[8 * v77];
  if (v76)
    goto LABEL_100;
  v77 = (int64_t)(__srca + 5);
  if ((uint64_t)(__srca + 5) >= v81)
    goto LABEL_106;
  v76 = *(_QWORD *)&v83[8 * v77];
  if (v76)
    goto LABEL_100;
  v77 = (int64_t)(__srca + 6);
  if ((uint64_t)(__srca + 6) >= v81)
    goto LABEL_106;
  v76 = *(_QWORD *)&v83[8 * v77];
  if (v76)
    goto LABEL_100;
  v77 = (int64_t)(__srca + 7);
  if ((uint64_t)(__srca + 7) >= v81)
    goto LABEL_106;
  v76 = *(_QWORD *)&v83[8 * v77];
  if (v76)
    goto LABEL_100;
  v77 = (int64_t)(__srca + 8);
  if ((uint64_t)(__srca + 8) >= v81)
    goto LABEL_106;
  v76 = *(_QWORD *)&v83[8 * v77];
  if (v76)
  {
LABEL_100:
    v75 = v77;
    goto LABEL_101;
  }
  while (1)
  {
    v75 = v77 + 1;
    if (__OFADD__(v77, 1))
      break;
    if (v75 >= v81)
      goto LABEL_106;
    v76 = *(_QWORD *)&v83[8 * v75];
    ++v77;
    if (v76)
      goto LABEL_101;
  }
LABEL_111:
  __break(1u);
LABEL_112:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_113:
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v78._countAndFlagsBits = a1;
  v78._object = a2;
  String.append(_:)(v78);
  v79._object = (void *)0x800000018230DF20;
  v79._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v79);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ImageURLAttribute()
{
  return 0x556567616D49534ELL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute()
{
  return 0xD00000000000001ALL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LinkAttribute()
{
  return 0x6B6E694C534ELL;
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name);
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name);
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name);
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute()
{
  return 0xD000000000000016;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.PresentationIntentAttribute.name);
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return 0x6175676E614C534ELL;
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.AgreementArgumentAttribute()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.AgreementArgumentAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name);
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  size_t v4;
  unint64_t *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  BOOL v18;
  unint64_t *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  BOOL v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  int64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  Swift::Int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  int64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;

  v2 = isStackAllocationSafe;
  v98 = *MEMORY[0x1E0C80C00];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v95 = (unint64_t)((1 << v3) + 63) >> 6;
  v96 = isStackAllocationSafe;
  v4 = 8 * v95;
  if ((v3 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v19 = (unint64_t *)swift_slowAlloc();
      bzero(v19, v4);
      v20 = 0;
      v21 = 0;
      v22 = v2 + 64;
      v23 = 1 << *(_BYTE *)(v2 + 32);
      if (v23 < 64)
        v24 = ~(-1 << v23);
      else
        v24 = -1;
      v25 = v24 & *(_QWORD *)(v2 + 64);
      v26 = (unint64_t)(v23 + 63) >> 6;
      while (1)
      {
        if (v25)
        {
          v27 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          v28 = v27 | (v21 << 6);
        }
        else
        {
          v29 = v21 + 1;
          if (__OFADD__(v21, 1))
            goto LABEL_133;
          if (v29 >= v26)
            goto LABEL_58;
          v30 = *(_QWORD *)(v22 + 8 * v29);
          ++v21;
          if (!v30)
          {
            v21 = v29 + 1;
            if (v29 + 1 >= v26)
              goto LABEL_58;
            v30 = *(_QWORD *)(v22 + 8 * v21);
            if (!v30)
            {
              v21 = v29 + 2;
              if (v29 + 2 >= v26)
                goto LABEL_58;
              v30 = *(_QWORD *)(v22 + 8 * v21);
              if (!v30)
              {
                v21 = v29 + 3;
                if (v29 + 3 >= v26)
                  goto LABEL_58;
                v30 = *(_QWORD *)(v22 + 8 * v21);
                if (!v30)
                {
                  v31 = v29 + 4;
                  if (v31 >= v26)
                    goto LABEL_58;
                  v30 = *(_QWORD *)(v22 + 8 * v31);
                  if (!v30)
                  {
                    while (1)
                    {
                      v21 = v31 + 1;
                      if (__OFADD__(v31, 1))
                        goto LABEL_137;
                      if (v21 >= v26)
                        break;
                      v30 = *(_QWORD *)(v22 + 8 * v21);
                      ++v31;
                      if (v30)
                        goto LABEL_54;
                    }
LABEL_58:
                    if (!v20)
                    {
                      v2 = MEMORY[0x1E0DEE9E0];
                      goto LABEL_128;
                    }
                    if (v20 == *(_QWORD *)(v2 + 16))
                    {
                      swift_retain();
                      goto LABEL_128;
                    }
                    v93 = v1;
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
                    v32 = static _DictionaryStorage.allocate(capacity:)();
                    v61 = 0;
                    v94 = v19;
                    v62 = *v19;
                    v63 = v32 + 64;
                    while (1)
                    {
                      if (v62)
                      {
                        v69 = __clz(__rbit64(v62));
                        v62 &= v62 - 1;
                        v70 = v61;
                        v71 = v69 | (v61 << 6);
                      }
                      else
                      {
                        v72 = v61 + 1;
                        if (__OFADD__(v61, 1))
                          goto LABEL_136;
                        if (v72 >= v95)
                          goto LABEL_127;
                        v19 = v94;
                        v73 = v94[v72];
                        v74 = v61 + 1;
                        if (!v73)
                        {
                          v74 = v61 + 2;
                          if (v61 + 2 >= v95)
                            goto LABEL_130;
                          v73 = v94[v74];
                          if (!v73)
                          {
                            v74 = v61 + 3;
                            if (v61 + 3 >= v95)
                              goto LABEL_130;
                            v73 = v94[v74];
                            if (!v73)
                            {
                              v74 = v61 + 4;
                              if (v61 + 4 >= v95)
                                goto LABEL_130;
                              v73 = v94[v74];
                              if (!v73)
                              {
                                v74 = v61 + 5;
                                if (v61 + 5 >= v95)
                                  goto LABEL_130;
                                v73 = v94[v74];
                                if (!v73)
                                {
                                  v75 = v61 + 6;
                                  if (v61 + 6 >= v95)
                                    goto LABEL_130;
                                  v73 = v94[v75];
                                  if (!v73)
                                  {
                                    while (1)
                                    {
                                      v74 = v75 + 1;
                                      if (__OFADD__(v75, 1))
                                        goto LABEL_139;
                                      if (v74 >= v95)
                                        break;
                                      v73 = v94[v74];
                                      ++v75;
                                      if (v73)
                                        goto LABEL_117;
                                    }
LABEL_130:
                                    v2 = v32;
LABEL_128:
                                    MEMORY[0x186DA9E78](v19, -1, -1);
                                    return v2;
                                  }
                                  v74 = v61 + 6;
                                }
                              }
                            }
                          }
                        }
LABEL_117:
                        v62 = (v73 - 1) & v73;
                        v70 = v74;
                        v71 = __clz(__rbit64(v73)) + (v74 << 6);
                      }
                      v76 = 16 * v71;
                      v77 = *(_QWORD *)(v2 + 56);
                      v78 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v76);
                      v80 = *v78;
                      v79 = v78[1];
                      v81 = (uint64_t *)(v77 + v76);
                      v82 = *v81;
                      v97 = v81[1];
                      Hasher.init(_seed:)();
                      swift_bridgeObjectRetain();
                      String.hash(into:)();
                      v83 = Hasher._finalize()();
                      v84 = -1 << *(_BYTE *)(v32 + 32);
                      v85 = v83 & ~v84;
                      v86 = v85 >> 6;
                      if (((-1 << v85) & ~*(_QWORD *)(v63 + 8 * (v85 >> 6))) != 0)
                      {
                        v64 = __clz(__rbit64((-1 << v85) & ~*(_QWORD *)(v63 + 8 * (v85 >> 6)))) | v85 & 0x7FFFFFFFFFFFFFC0;
                      }
                      else
                      {
                        v87 = 0;
                        v88 = (unint64_t)(63 - v84) >> 6;
                        do
                        {
                          if (++v86 == v88 && (v87 & 1) != 0)
                            goto LABEL_132;
                          v89 = v86 == v88;
                          if (v86 == v88)
                            v86 = 0;
                          v87 |= v89;
                          v90 = *(_QWORD *)(v63 + 8 * v86);
                        }
                        while (v90 == -1);
                        v64 = __clz(__rbit64(~v90)) + (v86 << 6);
                      }
                      *(_QWORD *)(v63 + ((v64 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v64;
                      v65 = 16 * v64;
                      v66 = (_QWORD *)(*(_QWORD *)(v32 + 48) + v65);
                      *v66 = v80;
                      v66[1] = v79;
                      v67 = (_QWORD *)(*(_QWORD *)(v32 + 56) + v65);
                      v2 = v96;
                      v68 = v97;
                      *v67 = v82;
                      v67[1] = v68;
                      ++*(_QWORD *)(v32 + 16);
                      --v20;
                      v61 = v70;
                      if (!v20)
                      {
LABEL_127:
                        v2 = v32;
                        v19 = v94;
                        goto LABEL_128;
                      }
                    }
                  }
                  v21 = v31;
                }
              }
            }
          }
LABEL_54:
          v25 = (v30 - 1) & v30;
          v28 = __clz(__rbit64(v30)) + (v21 << 6);
        }
        if (*(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v28))
        {
          *(unint64_t *)((char *)v19 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
          v18 = __OFADD__(v20++, 1);
          if (v18)
          {
            __break(1u);
            goto LABEL_58;
          }
        }
      }
    }
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v5 = (unint64_t *)((char *)&v92 - ((v4 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v5, v4);
  v6 = 0;
  v7 = 0;
  v8 = v2 + 64;
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
    }
    else
    {
      v15 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }
      if (v15 >= v12)
        goto LABEL_28;
      v16 = *(_QWORD *)(v8 + 8 * v15);
      ++v7;
      if (!v16)
      {
        v7 = v15 + 1;
        if (v15 + 1 >= v12)
          goto LABEL_28;
        v16 = *(_QWORD *)(v8 + 8 * v7);
        if (!v16)
        {
          v7 = v15 + 2;
          if (v15 + 2 >= v12)
            goto LABEL_28;
          v16 = *(_QWORD *)(v8 + 8 * v7);
          if (!v16)
          {
            v7 = v15 + 3;
            if (v15 + 3 >= v12)
              goto LABEL_28;
            v16 = *(_QWORD *)(v8 + 8 * v7);
            if (!v16)
            {
              v17 = v15 + 4;
              if (v17 >= v12)
                goto LABEL_28;
              v16 = *(_QWORD *)(v8 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  v7 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    break;
                  if (v7 >= v12)
                    goto LABEL_28;
                  v16 = *(_QWORD *)(v8 + 8 * v7);
                  ++v17;
                  if (v16)
                    goto LABEL_24;
                }
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
                goto LABEL_138;
              }
              v7 = v17;
            }
          }
        }
      }
LABEL_24:
      v11 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v7 << 6);
    }
    if (*(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v14))
    {
      *(unint64_t *)((char *)v5 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v18 = __OFADD__(v6++, 1);
      if (v18)
        break;
    }
  }
  __break(1u);
LABEL_28:
  if (!v6)
    return MEMORY[0x1E0DEE9E0];
  if (v6 != *(_QWORD *)(v2 + 16))
  {
    v92 = (uint64_t)&v92;
    v93 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
    v32 = static _DictionaryStorage.allocate(capacity:)();
    v33 = 0;
    v94 = (unint64_t *)((char *)&v92 - ((v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    v34 = *v5;
    v35 = v32 + 64;
    while (1)
    {
      if (v34)
      {
        v40 = __clz(__rbit64(v34));
        v34 &= v34 - 1;
        v97 = v33;
        v41 = v40 | (v33 << 6);
      }
      else
      {
        v42 = v33 + 1;
        if (__OFADD__(v33, 1))
          goto LABEL_134;
        if (v42 >= v95)
          return v32;
        v43 = v94[v42];
        v44 = v33 + 1;
        if (!v43)
        {
          v44 = v33 + 2;
          if (v33 + 2 >= v95)
            return v32;
          v43 = v94[v44];
          if (!v43)
          {
            v44 = v33 + 3;
            if (v33 + 3 >= v95)
              return v32;
            v43 = v94[v44];
            if (!v43)
            {
              v44 = v33 + 4;
              if (v33 + 4 >= v95)
                return v32;
              v43 = v94[v44];
              if (!v43)
              {
                v44 = v33 + 5;
                if (v33 + 5 >= v95)
                  return v32;
                v43 = v94[v44];
                if (!v43)
                {
                  v45 = v33 + 6;
                  if (v33 + 6 >= v95)
                    return v32;
                  v43 = v94[v45];
                  if (!v43)
                  {
                    while (1)
                    {
                      v44 = v45 + 1;
                      if (__OFADD__(v45, 1))
                        break;
                      if (v44 >= v95)
                        return v32;
                      v43 = v94[v44];
                      ++v45;
                      if (v43)
                        goto LABEL_83;
                    }
LABEL_138:
                    __break(1u);
LABEL_139:
                    __break(1u);
                  }
                  v44 = v33 + 6;
                }
              }
            }
          }
        }
LABEL_83:
        v34 = (v43 - 1) & v43;
        v97 = v44;
        v41 = __clz(__rbit64(v43)) + (v44 << 6);
      }
      v46 = 16 * v41;
      v47 = *(_QWORD *)(v2 + 56);
      v48 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v46);
      v50 = *v48;
      v49 = v48[1];
      v51 = (uint64_t *)(v47 + v46);
      v52 = *v51;
      v19 = (unint64_t *)v51[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v53 = Hasher._finalize()();
      v54 = -1 << *(_BYTE *)(v32 + 32);
      v55 = v53 & ~v54;
      v56 = v55 >> 6;
      if (((-1 << v55) & ~*(_QWORD *)(v35 + 8 * (v55 >> 6))) != 0)
      {
        v36 = __clz(__rbit64((-1 << v55) & ~*(_QWORD *)(v35 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_63;
      }
      v57 = 0;
      v58 = (unint64_t)(63 - v54) >> 6;
      do
      {
        if (++v56 == v58 && (v57 & 1) != 0)
        {
          __break(1u);
          goto LABEL_130;
        }
        v59 = v56 == v58;
        if (v56 == v58)
          v56 = 0;
        v57 |= v59;
        v60 = *(_QWORD *)(v35 + 8 * v56);
      }
      while (v60 == -1);
      v36 = __clz(__rbit64(~v60)) + (v56 << 6);
LABEL_63:
      *(_QWORD *)(v35 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
      v37 = 16 * v36;
      v38 = (_QWORD *)(*(_QWORD *)(v32 + 48) + v37);
      *v38 = v50;
      v38[1] = v49;
      v39 = (_QWORD *)(*(_QWORD *)(v32 + 56) + v37);
      *v39 = v52;
      v39[1] = v19;
      ++*(_QWORD *)(v32 + 16);
      --v6;
      v2 = v96;
      v33 = v97;
      if (!v6)
        return v32;
    }
  }
  swift_retain();
  return v2;
}

{
  uint64_t v1;
  char v2;
  size_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  Swift::Int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  BOOL v89;
  uint64_t v90;
  _QWORD v92[2];
  int64_t v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  _BYTE v110[72];
  uint64_t v111;

  v1 = isStackAllocationSafe;
  v111 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE *)(isStackAllocationSafe + 32);
  v93 = (unint64_t)((1 << v2) + 63) >> 6;
  v3 = 8 * v93;
  v98 = isStackAllocationSafe;
  if ((v2 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v94 = (unint64_t *)swift_slowAlloc();
      bzero(v94, v3);
      v24 = 0;
      v25 = *(_QWORD *)(v1 + 64);
      v95 = 0;
      v96 = v1 + 64;
      v26 = 1 << *(_BYTE *)(v1 + 32);
      if (v26 < 64)
        v27 = ~(-1 << v26);
      else
        v27 = -1;
      v28 = v27 & v25;
      v97 = (unint64_t)(v26 + 63) >> 6;
      while (1)
      {
        if (v28)
        {
          v29 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          v30 = v29 | (v24 << 6);
        }
        else
        {
          v31 = v24 + 1;
          if (__OFADD__(v24, 1))
            goto LABEL_139;
          if (v31 >= v97)
            goto LABEL_69;
          v32 = *(_QWORD *)(v96 + 8 * v31);
          ++v24;
          if (!v32)
          {
            v24 = v31 + 1;
            if (v31 + 1 >= v97)
              goto LABEL_69;
            v32 = *(_QWORD *)(v96 + 8 * v24);
            if (!v32)
            {
              v24 = v31 + 2;
              if (v31 + 2 >= v97)
                goto LABEL_69;
              v32 = *(_QWORD *)(v96 + 8 * v24);
              if (!v32)
              {
                v33 = v31 + 3;
                if (v33 >= v97)
                  goto LABEL_69;
                v32 = *(_QWORD *)(v96 + 8 * v33);
                if (!v32)
                {
                  while (1)
                  {
                    v24 = v33 + 1;
                    if (__OFADD__(v33, 1))
                      goto LABEL_142;
                    if (v24 >= v97)
                      break;
                    v32 = *(_QWORD *)(v96 + 8 * v24);
                    ++v33;
                    if (v32)
                      goto LABEL_58;
                  }
LABEL_69:
                  v42 = v95;
                  if (!v95)
                  {
                    v1 = MEMORY[0x1E0DEE9E0];
                    goto LABEL_135;
                  }
                  if (v95 == *(_QWORD *)(v1 + 16))
                  {
                    swift_retain();
                    goto LABEL_135;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  v67 = static _DictionaryStorage.allocate(capacity:)();
                  v68 = 0;
                  v69 = *v94;
                  v70 = v67 + 64;
                  while (1)
                  {
                    if (v69)
                    {
                      v74 = __clz(__rbit64(v69));
                      v69 &= v69 - 1;
                      v98 = v68;
                      v75 = v74 | (v68 << 6);
                    }
                    else
                    {
                      v76 = v68 + 1;
                      if (__OFADD__(v68, 1))
                        goto LABEL_143;
                      if (v76 >= v93)
                        goto LABEL_134;
                      v77 = v94[v76];
                      v78 = v68 + 1;
                      if (!v77)
                      {
                        v78 = v68 + 2;
                        if (v68 + 2 >= v93)
                          goto LABEL_134;
                        v77 = v94[v78];
                        if (!v77)
                        {
                          v78 = v68 + 3;
                          if (v68 + 3 >= v93)
                            goto LABEL_134;
                          v77 = v94[v78];
                          if (!v77)
                          {
                            v78 = v68 + 4;
                            if (v68 + 4 >= v93)
                              goto LABEL_134;
                            v77 = v94[v78];
                            if (!v77)
                            {
                              v79 = v68 + 5;
                              if (v68 + 5 >= v93)
                                goto LABEL_134;
                              v77 = v94[v79];
                              if (!v77)
                              {
                                while (1)
                                {
                                  v78 = v79 + 1;
                                  if (__OFADD__(v79, 1))
                                    goto LABEL_145;
                                  if (v78 >= v93)
                                    break;
                                  v77 = v94[v78];
                                  ++v79;
                                  if (v77)
                                    goto LABEL_124;
                                }
LABEL_134:
                                v1 = v67;
LABEL_135:
                                MEMORY[0x186DA9E78](v94, -1, -1);
                                return v1;
                              }
                              v78 = v68 + 5;
                            }
                          }
                        }
                      }
LABEL_124:
                      v69 = (v77 - 1) & v77;
                      v98 = v78;
                      v75 = __clz(__rbit64(v77)) + (v78 << 6);
                    }
                    v80 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v75);
                    v82 = *v80;
                    v81 = v80[1];
                    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v1 + 56) + 72 * v75, (uint64_t)&v105);
                    v101 = v107;
                    v102 = v108;
                    v103 = v109;
                    v99 = v105;
                    v100 = v106;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    v83 = Hasher._finalize()();
                    v84 = -1 << *(_BYTE *)(v67 + 32);
                    v85 = v83 & ~v84;
                    v86 = v85 >> 6;
                    if (((-1 << v85) & ~*(_QWORD *)(v70 + 8 * (v85 >> 6))) != 0)
                    {
                      v71 = __clz(__rbit64((-1 << v85) & ~*(_QWORD *)(v70 + 8 * (v85 >> 6)))) | v85 & 0x7FFFFFFFFFFFFFC0;
                    }
                    else
                    {
                      v87 = 0;
                      v88 = (unint64_t)(63 - v84) >> 6;
                      do
                      {
                        if (++v86 == v88 && (v87 & 1) != 0)
                          goto LABEL_138;
                        v89 = v86 == v88;
                        if (v86 == v88)
                          v86 = 0;
                        v87 |= v89;
                        v90 = *(_QWORD *)(v70 + 8 * v86);
                      }
                      while (v90 == -1);
                      v71 = __clz(__rbit64(~v90)) + (v86 << 6);
                    }
                    *(_QWORD *)(v70 + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v71;
                    v72 = (_QWORD *)(*(_QWORD *)(v67 + 48) + 16 * v71);
                    *v72 = v82;
                    v72[1] = v81;
                    v73 = *(_QWORD *)(v67 + 56) + 72 * v71;
                    *(_OWORD *)(v73 + 16) = v100;
                    *(_OWORD *)(v73 + 32) = v101;
                    *(_OWORD *)(v73 + 48) = v102;
                    *(_QWORD *)(v73 + 64) = v103;
                    *(_OWORD *)v73 = v99;
                    ++*(_QWORD *)(v67 + 16);
                    --v42;
                    v68 = v98;
                    if (!v42)
                      goto LABEL_134;
                  }
                }
                v24 = v33;
              }
            }
          }
LABEL_58:
          v28 = (v32 - 1) & v32;
          v30 = __clz(__rbit64(v32)) + (v24 << 6);
        }
        v34 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v30);
        v35 = *v34;
        v36 = v34[1];
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v1 + 56) + 72 * v30, (uint64_t)v110);
        *(_QWORD *)&v105 = v35;
        *((_QWORD *)&v105 + 1) = v36;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v110, (uint64_t)&v106);
        *(_QWORD *)&v99 = v35;
        *((_QWORD *)&v99 + 1) = v36;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v106, (uint64_t)&v100);
        v37 = v104;
        if (v104
          && *(_QWORD *)(v104 + 16)
          && (Hasher.init(_seed:)(),
              Hasher._combine(_:)(0),
              v38 = Hasher._finalize()(),
              v39 = -1 << *(_BYTE *)(v37 + 32),
              v40 = v38 & ~v39,
              ((*(_QWORD *)(v37 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8)) >> v40) & 1) != 0))
        {
          v41 = ~v39;
          while (*(_QWORD *)(*(_QWORD *)(v37 + 48) + 16 * v40 + 8))
          {
            v40 = (v40 + 1) & v41;
            if (((*(_QWORD *)(v37 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8)) >> v40) & 1) == 0)
              goto LABEL_42;
          }
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRelease();
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v105);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v100);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v110);
          swift_bridgeObjectRelease();
          *(unint64_t *)((char *)v94 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
          v22 = __OFADD__(v95++, 1);
          v1 = v98;
          if (v22)
          {
            __break(1u);
            goto LABEL_69;
          }
        }
        else
        {
LABEL_42:
          swift_bridgeObjectRetain_n();
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v105);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v100);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v110);
          swift_bridgeObjectRelease();
          v1 = v98;
        }
      }
    }
  }
  v92[1] = v92;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v94 = (_QWORD *)((char *)v92 - ((v3 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v94, v3);
  v4 = 0;
  v5 = *(_QWORD *)(v1 + 64);
  v95 = 0;
  v96 = v1 + 64;
  v6 = 1 << *(_BYTE *)(v1 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & v5;
  v97 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_24;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_137;
    if (v11 >= v97)
      goto LABEL_34;
    v12 = *(_QWORD *)(v96 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v97)
        goto LABEL_34;
      v12 = *(_QWORD *)(v96 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v97)
          goto LABEL_34;
        v12 = *(_QWORD *)(v96 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_23:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_24:
    v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v1 + 56) + 72 * v10, (uint64_t)v110);
    *(_QWORD *)&v105 = v15;
    *((_QWORD *)&v105 + 1) = v16;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v110, (uint64_t)&v106);
    *(_QWORD *)&v99 = v15;
    *((_QWORD *)&v99 + 1) = v16;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v106, (uint64_t)&v100);
    v17 = v104;
    if (v104
      && *(_QWORD *)(v104 + 16)
      && (Hasher.init(_seed:)(),
          Hasher._combine(_:)(0),
          v18 = Hasher._finalize()(),
          v19 = -1 << *(_BYTE *)(v17 + 32),
          v20 = v18 & ~v19,
          ((*(_QWORD *)(v17 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0))
    {
      v21 = ~v19;
      while (*(_QWORD *)(*(_QWORD *)(v17 + 48) + 16 * v20 + 8))
      {
        v20 = (v20 + 1) & v21;
        if (((*(_QWORD *)(v17 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
          goto LABEL_7;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v105);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v100);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v110);
      swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v94 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      v22 = __OFADD__(v95++, 1);
      v1 = v98;
      if (v22)
      {
        __break(1u);
        goto LABEL_34;
      }
    }
    else
    {
LABEL_7:
      swift_bridgeObjectRetain_n();
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v105);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v100);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v110);
      swift_bridgeObjectRelease();
      v1 = v98;
    }
  }
  v13 = v11 + 3;
  if (v13 >= v97)
    goto LABEL_34;
  v12 = *(_QWORD *)(v96 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_140;
    if (v4 >= v97)
      break;
    v12 = *(_QWORD *)(v96 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_34:
  v23 = v95;
  if (!v95)
    return MEMORY[0x1E0DEE9E0];
  if (v95 != *(_QWORD *)(v1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
    v43 = static _DictionaryStorage.allocate(capacity:)();
    v44 = 0;
    v45 = *v94;
    v46 = v43 + 64;
    while (1)
    {
      if (v45)
      {
        v50 = __clz(__rbit64(v45));
        v45 &= v45 - 1;
        v98 = v44;
        v51 = v50 | (v44 << 6);
      }
      else
      {
        v52 = v44 + 1;
        if (__OFADD__(v44, 1))
          goto LABEL_141;
        if (v52 >= v93)
          return v43;
        v53 = v94[v52];
        v54 = v44 + 1;
        if (!v53)
        {
          v54 = v44 + 2;
          if (v44 + 2 >= v93)
            return v43;
          v53 = v94[v54];
          if (!v53)
          {
            v54 = v44 + 3;
            if (v44 + 3 >= v93)
              return v43;
            v53 = v94[v54];
            if (!v53)
            {
              v54 = v44 + 4;
              if (v44 + 4 >= v93)
                return v43;
              v53 = v94[v54];
              if (!v53)
              {
                v55 = v44 + 5;
                if (v44 + 5 >= v93)
                  return v43;
                v53 = v94[v55];
                if (!v53)
                {
                  while (1)
                  {
                    v54 = v55 + 1;
                    if (__OFADD__(v55, 1))
                      break;
                    if (v54 >= v93)
                      return v43;
                    v53 = v94[v54];
                    ++v55;
                    if (v53)
                      goto LABEL_92;
                  }
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
                }
                v54 = v44 + 5;
              }
            }
          }
        }
LABEL_92:
        v45 = (v53 - 1) & v53;
        v98 = v54;
        v51 = __clz(__rbit64(v53)) + (v54 << 6);
      }
      v56 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v51);
      v58 = *v56;
      v57 = v56[1];
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v1 + 56) + 72 * v51, (uint64_t)&v105);
      v101 = v107;
      v102 = v108;
      v103 = v109;
      v99 = v105;
      v100 = v106;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v59 = Hasher._finalize()();
      v60 = -1 << *(_BYTE *)(v43 + 32);
      v61 = v59 & ~v60;
      v62 = v61 >> 6;
      if (((-1 << v61) & ~*(_QWORD *)(v46 + 8 * (v61 >> 6))) != 0)
      {
        v47 = __clz(__rbit64((-1 << v61) & ~*(_QWORD *)(v46 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_74;
      }
      v63 = 0;
      v64 = (unint64_t)(63 - v60) >> 6;
      do
      {
        if (++v62 == v64 && (v63 & 1) != 0)
        {
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        v65 = v62 == v64;
        if (v62 == v64)
          v62 = 0;
        v63 |= v65;
        v66 = *(_QWORD *)(v46 + 8 * v62);
      }
      while (v66 == -1);
      v47 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
      *(_QWORD *)(v46 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
      v48 = (_QWORD *)(*(_QWORD *)(v43 + 48) + 16 * v47);
      *v48 = v58;
      v48[1] = v57;
      v49 = *(_QWORD *)(v43 + 56) + 72 * v47;
      *(_OWORD *)(v49 + 16) = v100;
      *(_OWORD *)(v49 + 32) = v101;
      *(_OWORD *)(v49 + 48) = v102;
      *(_QWORD *)(v49 + 64) = v103;
      *(_OWORD *)v49 = v99;
      ++*(_QWORD *)(v43 + 16);
      --v23;
      v44 = v98;
      if (!v23)
        return v43;
    }
  }
  swift_retain();
  return v1;
}

{
  uint64_t v1;
  char v2;
  size_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  Swift::Int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v98;
  int64_t v99;
  unint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  _BYTE *v104;
  __int128 *v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[64];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE v114[72];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  unsigned __int8 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _BYTE v126[72];
  uint64_t v127;

  v1 = isStackAllocationSafe;
  v127 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE *)(isStackAllocationSafe + 32);
  v99 = (unint64_t)((1 << v2) + 63) >> 6;
  v3 = 8 * v99;
  v107 = isStackAllocationSafe;
  if ((v2 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v100 = (unint64_t *)swift_slowAlloc();
      bzero(v100, v3);
      v28 = 0;
      v29 = *(_QWORD *)(v1 + 64);
      v101 = 0;
      v102 = v1 + 64;
      v30 = 1 << *(_BYTE *)(v1 + 32);
      if (v30 < 64)
        v31 = ~(-1 << v30);
      else
        v31 = -1;
      v32 = v31 & v29;
      v105 = &v116;
      v106 = v114;
      v103 = (unint64_t)(v30 + 63) >> 6;
      v104 = v110;
      while (1)
      {
        if (v32)
        {
          v33 = __clz(__rbit64(v32));
          v32 &= v32 - 1;
          v34 = v33 | (v28 << 6);
        }
        else
        {
          v35 = v28 + 1;
          if (__OFADD__(v28, 1))
            goto LABEL_144;
          if (v35 >= v103)
            goto LABEL_73;
          v36 = *(_QWORD *)(v102 + 8 * v35);
          ++v28;
          if (!v36)
          {
            v28 = v35 + 1;
            if (v35 + 1 >= v103)
              goto LABEL_73;
            v36 = *(_QWORD *)(v102 + 8 * v28);
            if (!v36)
            {
              v28 = v35 + 2;
              if (v35 + 2 >= v103)
                goto LABEL_73;
              v36 = *(_QWORD *)(v102 + 8 * v28);
              if (!v36)
              {
                v37 = v35 + 3;
                if (v37 >= v103)
                  goto LABEL_73;
                v36 = *(_QWORD *)(v102 + 8 * v37);
                if (!v36)
                {
                  while (1)
                  {
                    v28 = v37 + 1;
                    if (__OFADD__(v37, 1))
                      goto LABEL_148;
                    if (v28 >= v103)
                      break;
                    v36 = *(_QWORD *)(v102 + 8 * v28);
                    ++v37;
                    if (v36)
                      goto LABEL_61;
                  }
LABEL_73:
                  v48 = v101;
                  if (!v101)
                  {
                    v1 = MEMORY[0x1E0DEE9E0];
                    goto LABEL_139;
                  }
                  if (v101 == *(_QWORD *)(v1 + 16))
                  {
                    swift_retain();
                    goto LABEL_139;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  v73 = static _DictionaryStorage.allocate(capacity:)();
                  v74 = 0;
                  v75 = *v100;
                  v76 = v73 + 64;
                  while (1)
                  {
                    if (v75)
                    {
                      v80 = __clz(__rbit64(v75));
                      v75 &= v75 - 1;
                      v81 = v80 | (v74 << 6);
                    }
                    else
                    {
                      v82 = v74 + 1;
                      if (__OFADD__(v74, 1))
                        goto LABEL_149;
                      if (v82 >= v99)
                        goto LABEL_138;
                      v83 = v100[v82];
                      ++v74;
                      if (!v83)
                      {
                        v74 = v82 + 1;
                        if (v82 + 1 >= v99)
                          goto LABEL_138;
                        v83 = v100[v74];
                        if (!v83)
                        {
                          v74 = v82 + 2;
                          if (v82 + 2 >= v99)
                            goto LABEL_138;
                          v83 = v100[v74];
                          if (!v83)
                          {
                            v74 = v82 + 3;
                            if (v82 + 3 >= v99)
                              goto LABEL_138;
                            v83 = v100[v74];
                            if (!v83)
                            {
                              v84 = v82 + 4;
                              if (v84 >= v99)
                                goto LABEL_138;
                              v83 = v100[v84];
                              if (!v83)
                              {
                                while (1)
                                {
                                  v74 = v84 + 1;
                                  if (__OFADD__(v84, 1))
                                    goto LABEL_151;
                                  if (v74 >= v99)
                                    break;
                                  v83 = v100[v74];
                                  ++v84;
                                  if (v83)
                                    goto LABEL_128;
                                }
LABEL_138:
                                v1 = v73;
LABEL_139:
                                MEMORY[0x186DA9E78](v100, -1, -1);
                                return v1;
                              }
                              v74 = v84;
                            }
                          }
                        }
                      }
LABEL_128:
                      v75 = (v83 - 1) & v83;
                      v81 = __clz(__rbit64(v83)) + (v74 << 6);
                    }
                    v85 = *(_QWORD *)(v1 + 56);
                    v86 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v81);
                    v88 = *v86;
                    v87 = v86[1];
                    outlined init with copy of AttributedString._AttributeValue(v85 + 72 * v81, (uint64_t)&v121);
                    v117 = v123;
                    v118 = v124;
                    v119 = v125;
                    v115 = v121;
                    v116 = v122;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    v89 = Hasher._finalize()();
                    v90 = -1 << *(_BYTE *)(v73 + 32);
                    v91 = v89 & ~v90;
                    v92 = v91 >> 6;
                    if (((-1 << v91) & ~*(_QWORD *)(v76 + 8 * (v91 >> 6))) != 0)
                    {
                      v77 = __clz(__rbit64((-1 << v91) & ~*(_QWORD *)(v76 + 8 * (v91 >> 6)))) | v91 & 0x7FFFFFFFFFFFFFC0;
                    }
                    else
                    {
                      v93 = 0;
                      v94 = (unint64_t)(63 - v90) >> 6;
                      do
                      {
                        if (++v92 == v94 && (v93 & 1) != 0)
                          goto LABEL_143;
                        v95 = v92 == v94;
                        if (v92 == v94)
                          v92 = 0;
                        v93 |= v95;
                        v96 = *(_QWORD *)(v76 + 8 * v92);
                      }
                      while (v96 == -1);
                      v77 = __clz(__rbit64(~v96)) + (v92 << 6);
                    }
                    *(_QWORD *)(v76 + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v77;
                    v78 = (_QWORD *)(*(_QWORD *)(v73 + 48) + 16 * v77);
                    *v78 = v88;
                    v78[1] = v87;
                    v79 = *(_QWORD *)(v73 + 56) + 72 * v77;
                    *(_OWORD *)(v79 + 16) = v116;
                    *(_OWORD *)(v79 + 32) = v117;
                    *(_OWORD *)(v79 + 48) = v118;
                    *(_QWORD *)(v79 + 64) = v119;
                    *(_OWORD *)v79 = v115;
                    ++*(_QWORD *)(v73 + 16);
                    --v48;
                    v1 = v107;
                    if (!v48)
                      goto LABEL_138;
                  }
                }
                v28 = v37;
              }
            }
          }
LABEL_61:
          v32 = (v36 - 1) & v36;
          v34 = __clz(__rbit64(v36)) + (v28 << 6);
        }
        v38 = *(_QWORD *)(v1 + 56);
        v39 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v34);
        v40 = *v39;
        v41 = v39[1];
        outlined init with copy of AttributedString._AttributeValue(v38 + 72 * v34, (uint64_t)v126);
        *(_QWORD *)&v121 = v40;
        *((_QWORD *)&v121 + 1) = v41;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v126, (uint64_t)&v122);
        *(_QWORD *)&v115 = v40;
        *((_QWORD *)&v115 + 1) = v41;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v122, (uint64_t)v105);
        v42 = v120;
        swift_bridgeObjectRetain_n();
        outlined destroy of AttributedString._AttributeValue((uint64_t)v105);
        v112 = v40;
        v113 = v41;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v122, (uint64_t)v106);
        if (v42 != 1)
          break;
        v108 = v40;
        v109 = v41;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v106, (uint64_t)v104);
        v43 = v111;
        if (v111
          && *(_QWORD *)(v111 + 16)
          && (Hasher.init(_seed:)(),
              Hasher._combine(_:)(0),
              v44 = Hasher._finalize()(),
              v45 = -1 << *(_BYTE *)(v43 + 32),
              v46 = v44 & ~v45,
              ((*(_QWORD *)(v43 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8)) >> v46) & 1) != 0))
        {
          v47 = ~v45;
          while (*(_QWORD *)(*(_QWORD *)(v43 + 48) + 16 * v46 + 8))
          {
            v46 = (v46 + 1) & v47;
            if (((*(_QWORD *)(v43 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8)) >> v46) & 1) == 0)
              goto LABEL_69;
          }
          swift_bridgeObjectRelease();
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v104);
LABEL_45:
          outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
          swift_bridgeObjectRelease();
          v1 = v107;
        }
        else
        {
LABEL_69:
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v104);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
          swift_bridgeObjectRelease();
          *(unint64_t *)((char *)v100 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
          v26 = __OFADD__(v101++, 1);
          v1 = v107;
          if (v26)
            goto LABEL_146;
        }
      }
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
      goto LABEL_45;
    }
  }
  v98 = (uint64_t)&v98;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v100 = (unint64_t *)((char *)&v98 - ((v3 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v100, v3);
  v4 = 0;
  v5 = *(_QWORD *)(v1 + 64);
  v101 = 0;
  v102 = v1 + 64;
  v6 = 1 << *(_BYTE *)(v1 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & v5;
  v105 = &v116;
  v106 = v114;
  v103 = (unint64_t)(v6 + 63) >> 6;
  v104 = v110;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_141;
    if (v11 >= v103)
      goto LABEL_36;
    v12 = *(_QWORD *)(v102 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v103)
        goto LABEL_36;
      v12 = *(_QWORD *)(v102 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v103)
          goto LABEL_36;
        v12 = *(_QWORD *)(v102 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_24:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    v14 = *(_QWORD *)(v1 + 56);
    v15 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v10);
    v16 = *v15;
    v17 = v15[1];
    outlined init with copy of AttributedString._AttributeValue(v14 + 72 * v10, (uint64_t)v126);
    *(_QWORD *)&v121 = v16;
    *((_QWORD *)&v121 + 1) = v17;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v126, (uint64_t)&v122);
    *(_QWORD *)&v115 = v16;
    *((_QWORD *)&v115 + 1) = v17;
    v18 = (uint64_t)v105;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v122, (uint64_t)v105);
    v19 = v120;
    swift_bridgeObjectRetain_n();
    outlined destroy of AttributedString._AttributeValue(v18);
    v112 = v16;
    v113 = v17;
    v20 = (uint64_t)v106;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v122, (uint64_t)v106);
    if (v19 != 1)
    {
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
      goto LABEL_8;
    }
    v108 = v16;
    v109 = v17;
    outlined init with copy of AttributedString._AttributeValue(v20, (uint64_t)v104);
    v21 = v111;
    if (v111
      && *(_QWORD *)(v111 + 16)
      && (Hasher.init(_seed:)(),
          Hasher._combine(_:)(0),
          v22 = Hasher._finalize()(),
          v23 = -1 << *(_BYTE *)(v21 + 32),
          v24 = v22 & ~v23,
          ((*(_QWORD *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0))
    {
      v25 = ~v23;
      while (*(_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * v24 + 8))
      {
        v24 = (v24 + 1) & v25;
        if (((*(_QWORD *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
          goto LABEL_32;
      }
      swift_bridgeObjectRelease();
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v104);
LABEL_8:
      outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
      swift_bridgeObjectRelease();
      v1 = v107;
    }
    else
    {
LABEL_32:
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v104);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
      swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v100 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      v26 = __OFADD__(v101++, 1);
      v1 = v107;
      if (v26)
        goto LABEL_142;
    }
  }
  v13 = v11 + 3;
  if (v13 >= v103)
    goto LABEL_36;
  v12 = *(_QWORD *)(v102 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_145;
    if (v4 >= v103)
      break;
    v12 = *(_QWORD *)(v102 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_36:
  v27 = v101;
  if (!v101)
    return MEMORY[0x1E0DEE9E0];
  if (v101 != *(_QWORD *)(v1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
    v49 = static _DictionaryStorage.allocate(capacity:)();
    v50 = 0;
    v51 = *v100;
    v52 = v49 + 64;
    while (1)
    {
      if (v51)
      {
        v56 = __clz(__rbit64(v51));
        v51 &= v51 - 1;
        v57 = v56 | (v50 << 6);
      }
      else
      {
        v58 = v50 + 1;
        if (__OFADD__(v50, 1))
          goto LABEL_147;
        if (v58 >= v99)
          return v49;
        v59 = v100[v58];
        ++v50;
        if (!v59)
        {
          v50 = v58 + 1;
          if (v58 + 1 >= v99)
            return v49;
          v59 = v100[v50];
          if (!v59)
          {
            v50 = v58 + 2;
            if (v58 + 2 >= v99)
              return v49;
            v59 = v100[v50];
            if (!v59)
            {
              v50 = v58 + 3;
              if (v58 + 3 >= v99)
                return v49;
              v59 = v100[v50];
              if (!v59)
              {
                v60 = v58 + 4;
                if (v60 >= v99)
                  return v49;
                v59 = v100[v60];
                if (!v59)
                {
                  while (1)
                  {
                    v50 = v60 + 1;
                    if (__OFADD__(v60, 1))
                      break;
                    if (v50 >= v99)
                      return v49;
                    v59 = v100[v50];
                    ++v60;
                    if (v59)
                      goto LABEL_96;
                  }
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
                }
                v50 = v60;
              }
            }
          }
        }
LABEL_96:
        v51 = (v59 - 1) & v59;
        v57 = __clz(__rbit64(v59)) + (v50 << 6);
      }
      v61 = *(_QWORD *)(v1 + 56);
      v62 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v57);
      v64 = *v62;
      v63 = v62[1];
      outlined init with copy of AttributedString._AttributeValue(v61 + 72 * v57, (uint64_t)&v121);
      v117 = v123;
      v118 = v124;
      v119 = v125;
      v115 = v121;
      v116 = v122;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v65 = Hasher._finalize()();
      v66 = -1 << *(_BYTE *)(v49 + 32);
      v67 = v65 & ~v66;
      v68 = v67 >> 6;
      if (((-1 << v67) & ~*(_QWORD *)(v52 + 8 * (v67 >> 6))) != 0)
      {
        v53 = __clz(__rbit64((-1 << v67) & ~*(_QWORD *)(v52 + 8 * (v67 >> 6)))) | v67 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_78;
      }
      v69 = 0;
      v70 = (unint64_t)(63 - v66) >> 6;
      do
      {
        if (++v68 == v70 && (v69 & 1) != 0)
        {
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          goto LABEL_150;
        }
        v71 = v68 == v70;
        if (v68 == v70)
          v68 = 0;
        v69 |= v71;
        v72 = *(_QWORD *)(v52 + 8 * v68);
      }
      while (v72 == -1);
      v53 = __clz(__rbit64(~v72)) + (v68 << 6);
LABEL_78:
      *(_QWORD *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
      v54 = (_QWORD *)(*(_QWORD *)(v49 + 48) + 16 * v53);
      *v54 = v64;
      v54[1] = v63;
      v55 = *(_QWORD *)(v49 + 56) + 72 * v53;
      *(_OWORD *)(v55 + 16) = v116;
      *(_OWORD *)(v55 + 32) = v117;
      *(_OWORD *)(v55 + 48) = v118;
      *(_QWORD *)(v55 + 64) = v119;
      *(_OWORD *)v55 = v115;
      ++*(_QWORD *)(v49 + 16);
      --v27;
      v1 = v107;
      if (!v27)
        return v49;
    }
  }
  swift_retain();
  return v1;
}

__n128 protocol witness for Collection.startIndex.getter in conformance AttributedString.Runs@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 40);
  v4 = *(_OWORD *)(v1 + 56);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

ValueMetadata *type metadata accessor for Locale.Script()
{
  return &type metadata for Locale.Script;
}

ValueMetadata *type metadata accessor for AttributedString._InternalRun.Summary()
{
  return &type metadata for AttributedString._InternalRun.Summary;
}

ValueMetadata *type metadata accessor for Duration.UnitsFormatStyle.UnitWidth()
{
  return &type metadata for Duration.UnitsFormatStyle.UnitWidth;
}

ValueMetadata *type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy()
{
  return &type metadata for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy;
}

void *type metadata accessor for ICUMeasurementNumberFormatter.Signature()
{
  return &unk_1E0F27910;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.Run(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithDouble_, floatLiteral);
}

void URL.init(fileURLWithPath:isDirectory:)(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  _QWORD v14[3];
  BOOL v15;
  _QWORD *v16;
  __int128 v17;

  if (_foundation_swift_url_feature_enabled())
  {
    v15 = (a3 & 1) == 0;
    memset(v14, 0, sizeof(v14));
    swift_bridgeObjectRetain();
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, (unsigned __int8 *)&v15, (uint64_t)v14, (uint64_t *)&v16);
    v8 = v16;
    v9 = v17;
  }
  else
  {
    v10 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v10 = a1 & 0xFFFFFFFFFFFFLL;
    if (v10)
      swift_bridgeObjectRetain();
    v11 = objc_allocWithZone(MEMORY[0x1E0C99E98]);
    v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v11, sel_initFileURLWithPath_isDirectory_, v12, a3 & 1);
    swift_unknownObjectRelease();
    v8 = static URL._converted(from:)(v13);

    v9 = 0uLL;
  }
  *(_QWORD *)a4 = v8;
  *(_OWORD *)(a4 + 8) = v9;
}

uint64_t specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v13;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(void **)(*(_QWORD *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v6 = swift_allocObject();
    swift_retain();
    v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v6 + 16) = v13;
    *(_QWORD *)a1 = v6;
    swift_release();
  }
  v8 = *(void **)(*(_QWORD *)a1 + 16);
  if (a3)
    v9 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v9 = 0;
  v10 = String._bridgeToObjectiveCImpl()();
  v11 = v8;
  objc_msgSend(v11, sel_setValue_forHTTPHeaderField_, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

{
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v10;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(void **)(*(_QWORD *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v6 = swift_allocObject();
    swift_retain();
    v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v6 + 16) = v10;
    *(_QWORD *)a1 = v6;
    swift_release();
  }
  v8 = *(void **)(*(_QWORD *)a1 + 16);
  objc_msgSend(v8, sel_setHTTPMethod_, String._bridgeToObjectiveCImpl()());
  if (a3)
    swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for NSURLSession.CancelState()
{
  return objc_opt_self();
}

uint64_t closure #1 in NSNotificationCenter.Notifications.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)@<X0>(double *a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, double *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  double *v8;
  uint64_t v9;
  double v16;
  int v17;
  unsigned __int8 v18;
  unsigned int v19;
  double v20;
  double v21;
  char v22;
  uint64_t v23;
  double v24;
  uint64_t result;
  char v26;
  double v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  __int16 v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t ObjectType;
  void (*v36)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  uint64_t v51;
  double v52;
  unsigned __int8 v53;
  __int128 v54[18];
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  _BYTE __dst[282];
  _BYTE __src[296];

  v16 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  v17 = *a3;
  v18 = *a4;
  v19 = *a5;
  v20 = *a6;
  v21 = *(double *)a7;
  v22 = *(_BYTE *)(a7 + 8);
  v24 = *v8;
  v23 = *((_QWORD *)v8 + 1);
  v59 = 1;
  v58 = 0;
  v57 = 0;
  *(double *)v54 = v24;
  *((_QWORD *)&v54[0] + 1) = v23;
  v43 = v20;
  LOBYTE(v55) = v19;
  Calendar._adjustedComponents(_:date:direction:)(a2, &v43, (unsigned __int8 *)&v55, (uint64_t)__src);
  v43 = v24;
  v44 = v23;
  v47 = *(_QWORD *)&v20;
  memcpy(v54, __src, 0x11AuLL);
  LOBYTE(v52) = v19;
  LOBYTE(v51) = v17;
  v53 = v18;
  Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)((double *)&v47, v54, (unsigned __int8 *)&v52, (unsigned __int8 *)&v51, &v53, (double *)&v55);
  if (v9)
    return outlined release of DateComponents((uint64_t)__src);
  if ((v56 & 1) != 0)
    goto LABEL_4;
  v43 = v24;
  v44 = v23;
  v47 = *(_QWORD *)&v16;
  v51 = v55;
  v52 = v20;
  memcpy(v54, __src, 0x11AuLL);
  v53 = v19;
  v50 = v17;
  v49 = v18;
  Calendar._adjustedDateForMismatches(start:searchingDate:matchDate:matchingComponents:compsToMatch:direction:matchingPolicy:repeatedTimePolicy:isForwardDST:isExactMatch:isLeapDay:)(a2, (double *)&v47, &v52, (double *)&v51, v54, (char *)&v53, &v50, &v49, (uint64_t)&v55, &v57, &v59, &v58);
  v27 = *(double *)&v55;
  if ((v56 & 1) != 0)
  {
    v43 = v24;
    v44 = v23;
    v52 = v20;
    memcpy(v54, a2, 0x11AuLL);
    LOBYTE(v51) = v19;
    v47 = v55;
    v48 = 1;
    Calendar.bumpedDateUpToNextHigherUnitInComponents(_:_:_:_:)(&v52, (unsigned __int8 *)&v51, (uint64_t)&v47, (uint64_t)&v55);
    result = outlined release of DateComponents((uint64_t)__src);
    if (!v56)
      v20 = *(double *)&v55;
    goto LABEL_5;
  }
  v43 = v24;
  v44 = v23;
  v47 = v55;
  memcpy(v54, a2, 0x11AuLL);
  v29 = Calendar.date(_:containsMatchingComponents:)(&v55, (double *)&v47, (uint64_t *)v54);
  v30 = v55;
  if (v29 && (v59 & 1) == 0)
    v59 = 1;
  v43 = v24;
  v44 = v23;
  v52 = v20;
  memcpy(v54, __dst, 0x11AuLL);
  LOBYTE(v51) = v19;
  v47 = *(_QWORD *)&v27;
  v48 = 0;
  Calendar.bumpedDateUpToNextHigherUnitInComponents(_:_:_:_:)(&v52, (unsigned __int8 *)&v51, (uint64_t)&v47, (uint64_t)&v55);
  if (!v56)
    v20 = *(double *)&v55;
  if (!(v29 | (v30 >> 13) & 1) && (v30 & 0x200) == 0)
    v59 = 0;
  v31 = v30;
  if ((v22 & 1) == 0)
  {
    if (v21 >= v27)
      goto LABEL_21;
LABEL_28:
    v32 = -1;
    if ((v19 & 1) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
  v21 = v16;
  if (v16 < v27)
    goto LABEL_28;
LABEL_21:
  if (v21 > v27)
    v32 = v19;
  else
    v32 = 0;
  if ((v19 & 1) != 0 || v21 <= v27)
  {
LABEL_30:
    result = outlined release of DateComponents((uint64_t)__src);
    if (v57 == 1)
    {
      v28 = a8;
      if ((v59 & 1) != 0)
      {
        if (!v32)
        {
LABEL_33:
          v26 = 2;
LABEL_51:
          v27 = 0.0;
          goto LABEL_6;
        }
LABEL_36:
        v26 = 1;
        goto LABEL_6;
      }
      v26 = 2;
      if (v17 == 3 || !v32)
        goto LABEL_51;
    }
    else
    {
      v28 = a8;
      if ((v59 & 1) != 0)
      {
        if (!v32)
          goto LABEL_33;
        goto LABEL_36;
      }
      v26 = 2;
      if (v17 == 3 || !v58 || !v32)
        goto LABEL_51;
    }
    v26 = 0;
    goto LABEL_6;
  }
  v32 = 1;
LABEL_29:
  if ((v31 & 0x2000) != 0)
    goto LABEL_30;
  DateComponents.highestSetUnit.getter((char *)v54);
  if (LOBYTE(v54[0]) == 4)
  {
    v55 = 16;
    if (v27 <= 1.59271755e13)
      v33 = v27;
    else
      v33 = 1.59271755e13;
    v34 = fmax(v33, -2.11845067e11);
    ObjectType = swift_getObjectType();
    v43 = v34;
    v36 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(v23 + 192);
    v36(v54, &v55, &v43, ObjectType, v23);
    outlined release of DateComponents((uint64_t)v54);
    if ((BYTE8(v54[7]) & 1) != 0)
    {
      v37 = 0;
      if ((v19 & 1) == 0)
      {
LABEL_43:
        v38 = 3600.0;
LABEL_54:
        v39 = v38 + v27;
        v47 = 16;
        if (v39 <= 1.59271755e13)
          v40 = v39;
        else
          v40 = 1.59271755e13;
        v52 = fmax(v40, -2.11845067e11);
        v36(&v43, &v47, &v52, ObjectType, v23);
        outlined release of DateComponents((uint64_t)&v43);
        result = outlined release of DateComponents((uint64_t)__src);
        if ((v46 & 1) != 0)
          v41 = v37 == 0;
        else
          v41 = v37 == v45;
        if (v41)
          v20 = v39;
        goto LABEL_5;
      }
    }
    else
    {
      v37 = *(_QWORD *)&v54[7];
      if ((v19 & 1) == 0)
        goto LABEL_43;
    }
    v38 = -3600.0;
    goto LABEL_54;
  }
LABEL_4:
  result = outlined release of DateComponents((uint64_t)__src);
LABEL_5:
  v26 = 2;
  v27 = 0.0;
  v28 = a8;
LABEL_6:
  *(double *)v28 = v27;
  *(_BYTE *)(v28 + 8) = v26;
  *(double *)(v28 + 16) = v20;
  return result;
}

void Calendar.bumpedDateUpToNextHigherUnitInComponents(_:_:_:_:)(double *a1@<X0>, unsigned __int8 *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  double *v4;
  double v6;
  int v7;
  double v8;
  char v9;
  double v10;
  double v11;
  char v12;
  double v13;
  double v14;
  uint64_t ObjectType;
  char v16;
  double v17;
  double v18;
  int v19;
  Foundation::Date v20;
  char v21;
  Swift::Int v22;
  double v23;
  char v24;
  double v25;
  char v26;
  double v27;
  double v28;
  char v29;

  v6 = *a1;
  v7 = *a2;
  v8 = *(double *)a3;
  v9 = *(_BYTE *)(a3 + 8);
  v11 = *v4;
  v10 = v4[1];
  DateComponents.highestSetUnit.getter((char *)&v27);
  v12 = LOBYTE(v27);
  if (LOBYTE(v27) < 2u)
  {
    v12 = 1;
  }
  else if (LOBYTE(v27) == 18
         || LOBYTE(v27) != 12
         && (LOBYTE(v25) = LOBYTE(v27),
             Calendar.Component.nextHigherUnit.getter(&v27),
             v12 = LOBYTE(v27),
             LOBYTE(v27) == 18))
  {
LABEL_10:
    *(_QWORD *)a4 = 0;
LABEL_11:
    v16 = 1;
LABEL_29:
    *(_BYTE *)(a4 + 8) = v16;
    return;
  }
  LOBYTE(v23) = v12;
  v13 = 1.59271755e13;
  if (v6 <= 1.59271755e13)
    v13 = v6;
  v14 = fmax(v13, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v25 = v14;
  (*(void (**)(double *__return_ptr, double *, double *, uint64_t, double))(*(_QWORD *)&v10 + 160))(&v27, &v23, &v25, ObjectType, COERCE_DOUBLE(*(_QWORD *)&v10));
  if ((v29 & 1) != 0)
    goto LABEL_10;
  v17 = v28;
  if (v7)
    v17 = -1.0;
  v18 = v27 + v17;
  if ((v9 & 1) != 0 || (v8 < v18 ? (v19 = 1) : (v19 = v7), v19 == 1 && (v18 < v8 || ((v7 ^ 1) & 1) != 0)))
  {
LABEL_28:
    v16 = 0;
    *(double *)a4 = v18;
    goto LABEL_29;
  }
  DateComponents.lowestSetUnit.getter((char *)&v27);
  v21 = LOBYTE(v27);
  if (LOBYTE(v27) != 18)
  {
    v27 = v11;
    v28 = v10;
    v24 = v21;
    if (v7)
      v22 = -1;
    else
      v22 = 1;
    v23 = v8;
    Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v24, v22, v20, (Swift::Bool)&v23);
    if ((v26 & 1) != 0)
    {
      *(double *)a4 = v25;
      goto LABEL_11;
    }
    v18 = v25;
    goto LABEL_28;
  }
  __break(1u);
}

void DateComponents.highestSetUnit.getter(char *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  char v3;
  unsigned __int8 v4;
  char v5;
  char v6;
  unsigned __int8 v7;
  char v8;
  char v9;
  int v10;
  char v11;
  int v12;
  char v13;
  BOOL v14;

  if (v1[40] == 1)
  {
    v2 = v1[248];
    if (v1[104])
      v3 = 9;
    else
      v3 = 17;
    if (!v1[56])
      v3 = 1;
    v4 = v1[56] & v1[104] & v1[216] & v1[72] & v1[88];
    if (v1[72])
      v5 = 3;
    else
      v5 = 2;
    if (((v1[56] & v1[104]) & v1[216] & 1) != 0)
      v6 = v5;
    else
      v6 = v3;
    v7 = v4 & v1[120] & v1[136];
    if (v1[120])
      v8 = 5;
    else
      v8 = 4;
    if (((v1[56] & v1[104] & v1[216]) & (v1[72] & v1[88]) & 1) != 0)
      v6 = v8;
    if (v1[152])
      v9 = 7;
    else
      v9 = 6;
    if ((v4 & (v1[120] & v1[136]) & 1) != 0)
      v6 = v9;
    v10 = (v7 & v1[152] & v1[184] & v1[200]);
    if (v1[200])
      v11 = 10;
    else
      v11 = 8;
    if ((v7 & (v1[152] & v1[184]) & 1) != 0)
      v6 = v11;
    v12 = v10 & v2;
    if ((v10 & v2) != 0)
      v13 = 11;
    else
      v13 = v6;
    if (v12)
      v14 = v1[264] == 0;
    else
      v14 = 1;
    if (!v14)
    {
      if (v1[168])
        v13 = 18;
      else
        v13 = 13;
      if (!v1[280])
        v13 = 12;
    }
    *a1 = v13;
  }
  else
  {
    *a1 = 0;
  }
}

double *Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)@<X0>(double *a1@<X0>, const void *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, double *a6@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  double v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  double *result;
  double v18;
  double v19;
  char v20;
  double v21;
  double *v22;
  int v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  double v26;
  __int128 v27[18];
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  char v32;
  char v33;
  _BYTE __dst[282];
  double *v35;

  v35 = a6;
  v12 = *a1;
  memcpy(__dst, a2, sizeof(__dst));
  v13 = *a3;
  v23 = *a4;
  v14 = *a5;
  v15 = *v6;
  v16 = v6[1];
  v33 = 1;
  v29 = v15;
  v30 = v16;
  v28 = v12;
  memcpy(v27, a2, 0x11AuLL);
  LOBYTE(v26) = v13;
  result = Calendar.dateAfterMatchingEra(startingAt:components:direction:matchedEra:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, &v33, (uint64_t)&v31);
  if (v32)
    v18 = v12;
  else
    v18 = v31;
  v19 = 0.0;
  v20 = v33;
  if (v33 == 1)
  {
    v29 = v15;
    v30 = v16;
    v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    result = Calendar.dateAfterMatchingYear(startingAt:components:direction:)(&v28, v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (v7)
      return result;
    if (!v32)
      v18 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingYearForWeekOfYear(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32)
      v18 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingQuarter(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32)
      v18 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingWeekOfYear(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32)
      v18 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v18;
    memcpy(v27, a2, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingDayOfYear(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32)
      v18 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingMonth(startingAt:components:direction:strictMatching:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, v23 == 3, (uint64_t)&v31);
    if (!v32)
      v18 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingWeekOfMonth(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32)
      v18 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingWeekdayOrdinal(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32)
      v18 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    LOBYTE(v26) = v13;
    Calendar.dateAfterMatchingWeekday(startingAt:components:direction:)(&v28, (uint64_t)v27, (unsigned __int8 *)&v26, (uint64_t)&v31);
    if (!v32)
      v18 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v18;
    v26 = v12;
    memcpy(v27, __dst, 0x11AuLL);
    v25 = v13;
    Calendar.dateAfterMatchingDay(startingAt:originalStartDate:components:direction:)(&v28, &v26, (uint64_t)v27, &v25, (uint64_t)&v31);
    if (!v32)
      v18 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v18;
    v26 = v12;
    memcpy(v27, __dst, 0x11AuLL);
    v25 = v13;
    v24 = v23;
    Calendar.dateAfterMatchingHour(startingAt:originalStartDate:components:direction:findLastMatch:isStrictMatching:matchingPolicy:)(&v28, &v26, (uint64_t)v27, &v25, v14, v23 == 3, &v24, (uint64_t)&v31);
    if (!v32)
      v18 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v18;
    memcpy(v27, __dst, 0x11AuLL);
    Calendar.dateAfterMatchingMinute(startingAt:components:direction:)(&v28, (uint64_t)v27, (uint64_t)&v31);
    if (!v32)
      v18 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v18;
    v26 = v12;
    memcpy(v27, __dst, 0x11AuLL);
    v25 = v13;
    Calendar.dateAfterMatchingSecond(startingAt:originalStartDate:components:direction:)(&v28, &v26, (uint64_t)v27, &v25, (uint64_t)&v31);
    if (v32)
      v21 = v18;
    else
      v21 = v31;
    v29 = v15;
    v30 = v16;
    v28 = v21;
    memcpy(v27, __dst, 0x11AuLL);
    result = Calendar.dateAfterMatchingNanosecond(startingAt:components:direction:)(&v28, (uint64_t)v27, (uint64_t)&v31);
    v19 = v31;
    if (v32)
      v19 = v21;
  }
  v22 = v35;
  *v35 = v19;
  *((_BYTE *)v22 + 8) = v20 ^ 1;
  return result;
}

double *Calendar.dateAfterMatchingSecond(startingAt:originalStartDate:components:direction:)@<X0>(double *result@<X0>, double *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  double *v5;
  double *v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t ObjectType;
  void (*v18)(double *__return_ptr, uint64_t *, double *, uint64_t, _QWORD);
  void (*v19)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, _QWORD);
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  Foundation::Date v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  int v31;
  char v32;
  double v33;
  _QWORD v34[36];
  uint64_t v35;
  double v36[36];
  _QWORD v37[17];
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD v42[36];
  uint64_t v43;
  double v44[36];
  _QWORD __dst[36];
  _QWORD __src[37];
  uint64_t v47;

  if ((*(_BYTE *)(a3 + 152) & 1) != 0)
  {
    *(_QWORD *)a5 = 0;
LABEL_3:
    *(_BYTE *)(a5 + 8) = 1;
    return result;
  }
  v7 = v5;
  v8 = *result;
  v9 = *a2;
  v10 = *(_QWORD *)(a3 + 128);
  v32 = *(_BYTE *)(a3 + 136);
  v11 = *(_QWORD *)(a3 + 144);
  v12 = *a4;
  v13 = *v5;
  v14 = v7[1];
  v47 = 64;
  if (v8 <= 1.59271755e13)
    v15 = v8;
  else
    v15 = 1.59271755e13;
  v16 = fmax(v15, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v44[0] = v16;
  v18 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, _QWORD))(*(_QWORD *)&v14 + 192);
  v18((double *)__src, &v47, v44, ObjectType, *(_QWORD *)&v14);
  memcpy(__dst, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)__dst);
  if ((__dst[19] & 1) != 0)
  {
    if (v11)
      goto LABEL_9;
  }
  else if (v11 != __dst[18])
  {
LABEL_9:
    v31 = v12;
    v19 = *(void (**)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)&v14 + 160);
    LOBYTE(v37[0]) = 6;
    *(double *)v42 = v16;
    v19(v44, v37, v42, ObjectType, *(_QWORD *)&v14);
    if ((LOBYTE(v44[2]) & 1) != 0)
    {
      v20 = v8;
LABEL_11:
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      v22 = 6;
      goto LABEL_12;
    }
    while (1)
    {
      v20 = v44[1] + v44[0];
      v43 = 64;
      if (v44[1] + v44[0] <= 1.59271755e13)
        v23 = v44[1] + v44[0];
      else
        v23 = 1.59271755e13;
      v24 = fmax(v23, -2.11845067e11);
      *(double *)v37 = v24;
      v18(v44, &v43, (double *)v37, ObjectType, *(_QWORD *)&v14);
      memcpy(v42, v44, 0x11AuLL);
      result = (double *)outlined release of DateComponents((uint64_t)v42);
      if (LOBYTE(v42[19]) == 1)
      {
        if (v20 == v8)
          goto LABEL_72;
        if (!v11)
        {
          if (v9 >= v20)
            goto LABEL_33;
          if ((v31 & 1) != 0)
          {
            v11 = 0;
            goto LABEL_37;
          }
LABEL_44:
          v41 = 32;
          v36[0] = v24;
          v18((double *)v37, &v41, v36, ObjectType, *(_QWORD *)&v14);
          result = (double *)outlined release of DateComponents((uint64_t)v37);
          if ((v32 & 1) != 0)
            goto LABEL_33;
          v27 = v38 ? 0 : v37[16];
          if (v10 >= v27)
            goto LABEL_33;
          LOBYTE(v35) = 5;
          *(double *)v34 = v24;
          v19(v36, &v35, v34, ObjectType, *(_QWORD *)&v14);
          if ((LOBYTE(v36[2]) & 1) == 0)
          {
            do
            {
              v8 = v20;
              v20 = v36[0] - v36[1];
              v35 = 32;
              if (v36[0] - v36[1] <= 1.59271755e13)
                v28 = v36[0] - v36[1];
              else
                v28 = 1.59271755e13;
              v29 = fmax(v28, -2.11845067e11);
              v33 = v29;
              v18(v36, &v35, &v33, ObjectType, *(_QWORD *)&v14);
              memcpy(v34, v36, 0x11AuLL);
              result = (double *)outlined release of DateComponents((uint64_t)v34);
              if (LOBYTE(v34[17]) == 1)
              {
                if ((v31 & 1) != 0)
                {
                  if (v20 >= v8)
                    goto LABEL_72;
                }
                else if (v8 >= v20)
                {
                  goto LABEL_72;
                }
                if ((v10 & 0x8000000000000000) == 0)
                  goto LABEL_33;
              }
              else
              {
                if ((v31 & 1) != 0)
                {
                  if (v20 >= v8)
                    goto LABEL_72;
                }
                else if (v8 >= v20)
                {
                  goto LABEL_72;
                }
                if (v10 >= v34[16])
                  goto LABEL_33;
              }
              LOBYTE(v35) = 5;
              *(double *)v34 = v29;
              v19(v36, &v35, v34, ObjectType, *(_QWORD *)&v14);
            }
            while (LOBYTE(v36[2]) != 1);
          }
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          v22 = 5;
LABEL_12:
          *(_QWORD *)v21 = v22;
          *(double *)(v21 + 8) = v20;
LABEL_16:
          *(_BYTE *)(v21 + 16) = 0;
          return (double *)swift_willThrow();
        }
      }
      else
      {
        if (v20 == v8)
        {
LABEL_72:
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(double *)v30 = v20;
          *(double *)(v30 + 8) = v8;
          *(_BYTE *)(v30 + 16) = 1;
          return (double *)swift_willThrow();
        }
        if (v11 == v42[18])
        {
          if (v9 >= v20)
            goto LABEL_33;
          if (!v31)
            goto LABEL_44;
LABEL_37:
          v41 = 64;
          if (v9 <= 1.59271755e13)
            v25 = v9;
          else
            v25 = 1.59271755e13;
          v36[0] = fmax(v25, -2.11845067e11);
          v18((double *)v37, &v41, v36, ObjectType, *(_QWORD *)&v14);
          result = (double *)outlined release of DateComponents((uint64_t)v37);
          if ((v40 & 1) != 0)
          {
            if (v11 <= 0)
              goto LABEL_33;
          }
          else if (v39 >= v11)
          {
            goto LABEL_33;
          }
          v36[0] = v13;
          v36[1] = v14;
          LOBYTE(v33) = 5;
          v35 = *(_QWORD *)&v20;
          *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v33, -1, v26, (Swift::Bool)&v35);
          if ((v34[1] & 1) != 0)
          {
            *(_QWORD *)a5 = v34[0];
            goto LABEL_3;
          }
          v20 = *(double *)v34;
          goto LABEL_33;
        }
      }
      LOBYTE(v37[0]) = 6;
      *(double *)v42 = v24;
      v19(v44, v37, v42, ObjectType, *(_QWORD *)&v14);
      v8 = v20;
      if ((LOBYTE(v44[2]) & 1) != 0)
        goto LABEL_11;
    }
  }
  LOBYTE(v37[0]) = 6;
  *(double *)v42 = v16;
  result = (double *)(*(_QWORD *(**)(double *__return_ptr, _QWORD *, _QWORD *, uint64_t, double))(*(_QWORD *)&v14 + 160))(v44, v37, v42, ObjectType, COERCE_DOUBLE(*(_QWORD *)&v14));
  if ((LOBYTE(v44[2]) & 1) != 0)
  {
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(_QWORD *)v21 = 6;
    *(double *)(v21 + 8) = v8;
    goto LABEL_16;
  }
  v20 = v44[0];
LABEL_33:
  *(double *)a5 = v20;
  *(_BYTE *)(a5 + 8) = 0;
  return result;
}

double *Calendar.dateAfterMatchingMinute(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t ObjectType;
  void (*v11)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  void (*v12)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, uint64_t);
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  _QWORD __dst[36];
  uint64_t v20;
  double __src[36];
  _QWORD v22[17];
  char v23;
  uint64_t v24;

  if ((*(_BYTE *)(a2 + 136) & 1) != 0)
  {
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 1;
    return result;
  }
  v5 = *result;
  v6 = *(_QWORD *)(a2 + 128);
  v7 = *(_QWORD *)(v3 + 8);
  v24 = 32;
  if (v5 <= 1.59271755e13)
    v8 = v5;
  else
    v8 = 1.59271755e13;
  v9 = fmax(v8, -2.11845067e11);
  ObjectType = swift_getObjectType();
  __src[0] = v9;
  v11 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v7 + 192);
  v11((double *)v22, &v24, __src, ObjectType, v7);
  outlined release of DateComponents((uint64_t)v22);
  if ((v23 & 1) == 0)
  {
    if (v6 != v22[16])
      goto LABEL_8;
LABEL_12:
    LOBYTE(v20) = 5;
    *(double *)__dst = v9;
    result = (double *)(*(_QWORD *(**)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, uint64_t))(v7 + 160))(__src, &v20, __dst, ObjectType, v7);
    if ((LOBYTE(__src[2]) & 1) == 0)
      v5 = __src[0];
LABEL_26:
    *(double *)a3 = v5;
    *(_BYTE *)(a3 + 8) = 0;
    return result;
  }
  if (!v6)
    goto LABEL_12;
LABEL_8:
  v12 = *(void (**)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, uint64_t))(v7 + 160);
  LOBYTE(v20) = 5;
  *(double *)__dst = v9;
  v12(__src, &v20, __dst, ObjectType, v7);
  if ((LOBYTE(__src[2]) & 1) == 0)
  {
    while (1)
    {
      v13 = __src[1] + __src[0];
      v20 = 32;
      if (__src[1] + __src[0] <= 1.59271755e13)
        v15 = __src[1] + __src[0];
      else
        v15 = 1.59271755e13;
      v16 = fmax(v15, -2.11845067e11);
      v18 = v16;
      v11(__src, &v20, &v18, ObjectType, v7);
      memcpy(__dst, __src, 0x11AuLL);
      result = (double *)outlined release of DateComponents((uint64_t)__dst);
      if (LOBYTE(__dst[17]) == 1)
      {
        if (v13 == v5)
          goto LABEL_27;
        if (!v6)
        {
LABEL_25:
          v5 = v13;
          goto LABEL_26;
        }
      }
      else
      {
        if (v13 == v5)
        {
LABEL_27:
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(double *)v17 = v13;
          *(double *)(v17 + 8) = v5;
          *(_BYTE *)(v17 + 16) = 1;
          return (double *)swift_willThrow();
        }
        if (v6 == __dst[16])
          goto LABEL_25;
      }
      LOBYTE(v20) = 5;
      *(double *)__dst = v16;
      v12(__src, &v20, __dst, ObjectType, v7);
      v5 = v13;
      if (LOBYTE(__src[2]) == 1)
        goto LABEL_10;
    }
  }
  v13 = v5;
LABEL_10:
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(_QWORD *)v14 = 5;
  *(double *)(v14 + 8) = v13;
  *(_BYTE *)(v14 + 16) = 0;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingYear(startingAt:components:direction:)@<X0>(double *result@<X0>, __int128 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t ObjectType;
  int v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  double v50;
  char v51;
  _QWORD __dst[36];
  _QWORD __src[38];

  v6 = *((_BYTE *)a2 + 56);
  if ((v6 & 1) != 0)
  {
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }
  v8 = *((_QWORD *)a2 + 6);
  v28 = *a3;
  v10 = *v4;
  v9 = v4[1];
  v11 = *result;
  __dst[0] = 3;
  if (v11 > 1.59271755e13)
    v11 = 1.59271755e13;
  *(_QWORD *)&v30 = fmax(v11, -2.11845067e11);
  ObjectType = swift_getObjectType();
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, __int128 *))(v9 + 192))(__src, __dst, &v30);
  memcpy(__dst, __src, 0x11AuLL);
  if ((__dst[7] & 1) != 0 || v8 == __dst[6])
  {
    result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(_QWORD *)a4 = 0;
LABEL_7:
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }
  v12 = v8;
  *(_QWORD *)&v30 = v10;
  *((_QWORD *)&v30 + 1) = v9;
  if (LOBYTE(__dst[5]))
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v13 = __dst[4];
  Calendar.dateIfEraHasYear(era:year:)(v13, v8, (uint64_t)&v50);
  v14 = v50;
  if ((v51 & 1) != 0)
  {
    result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v14;
    goto LABEL_7;
  }
  v15 = a2[1];
  v30 = *a2;
  v31 = v15;
  v32 = a2[2];
  v16 = *(__int128 *)((char *)a2 + 249);
  v48 = *(__int128 *)((char *)a2 + 265);
  v17 = *(__int128 *)((char *)a2 + 217);
  v46 = *(__int128 *)((char *)a2 + 233);
  v47 = v16;
  v18 = *(__int128 *)((char *)a2 + 153);
  v42 = *(__int128 *)((char *)a2 + 169);
  v19 = *(__int128 *)((char *)a2 + 201);
  v43 = *(__int128 *)((char *)a2 + 185);
  v44 = v19;
  v45 = v17;
  v20 = *(__int128 *)((char *)a2 + 89);
  v38 = *(__int128 *)((char *)a2 + 105);
  v21 = *(__int128 *)((char *)a2 + 137);
  v39 = *(__int128 *)((char *)a2 + 121);
  v40 = v21;
  v41 = v18;
  v22 = *(__int128 *)((char *)a2 + 73);
  v35 = *(__int128 *)((char *)a2 + 57);
  v36 = v22;
  v33 = v12;
  v34 = v6;
  v49 = *((_BYTE *)a2 + 281);
  v37 = v20;
  DateComponents.setUnits.getter((uint64_t *)&v50);
  v23 = v28;
  if ((*(_QWORD *)&v50 & (*(_QWORD *)&v50 - 1)) == 0)
    v23 = 0;
  if (v23 == 1)
  {
    v29 = 1;
    if (v14 <= 1.59271755e13)
      v24 = v14;
    else
      v24 = 1.59271755e13;
    v50 = fmax(v24, -2.11845067e11);
    (*(void (**)(__int128 *__return_ptr, char *, double *, uint64_t, uint64_t))(v9 + 160))(&v30, &v29, &v50, ObjectType, v9);
    if ((v31 & 1) != 0)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(_QWORD *)v25 = 1;
      *(double *)(v25 + 8) = v14;
      *(_BYTE *)(v25 + 16) = 0;
      swift_willThrow();
      return (double *)outlined release of DateComponents((uint64_t)__dst);
    }
    v26 = *((double *)&v30 + 1);
    result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v26 + -1.0 + v14;
  }
  else
  {
    result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v14;
  }
  *(_BYTE *)(a4 + 8) = 0;
  return result;
}

void Calendar.Component.nextHigherUnit.getter(_BYTE *a1@<X8>)
{
  char *v1;

  *a1 = byte_1820E5106[*v1];
}

double *Calendar.dateAfterMatchingWeekdayOrdinal(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t ObjectType;
  void (*v13)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  _BOOL4 v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double *v38;
  char v39;
  uint64_t v40;
  void (*v41)(double *__return_ptr, double *, _QWORD *, uint64_t, uint64_t);
  __int128 v42;
  _QWORD v43[36];
  double v44[36];
  uint64_t v45;
  _QWORD v46[36];
  double v47[36];
  _QWORD __dst[36];
  _QWORD __src[37];
  uint64_t v50;

  if ((*(_BYTE *)(a2 + 200) & 1) != 0)
    goto LABEL_2;
  v6 = *result;
  v40 = *(_QWORD *)(a2 + 176);
  v39 = *(_BYTE *)(a2 + 184);
  v7 = *(_QWORD *)(a2 + 192);
  v8 = *a3;
  v9 = *(_QWORD *)(v4 + 8);
  v50 = 256;
  if (v6 <= 1.59271755e13)
    v10 = v6;
  else
    v10 = 1.59271755e13;
  v11 = fmax(v10, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v47[0] = v11;
  v13 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v9 + 192);
  v13((double *)__src, &v50, v47, ObjectType, v9);
  memcpy(__dst, __src, 0x11AuLL);
  result = (double *)outlined release of DateComponents((uint64_t)__dst);
  if ((__dst[25] & 1) != 0)
  {
    if (!v7)
      goto LABEL_2;
  }
  else if (v7 == __dst[24])
  {
LABEL_2:
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }
  v38 = (double *)a4;
  v41 = *(void (**)(double *__return_ptr, double *, _QWORD *, uint64_t, uint64_t))(v9 + 160);
  v14 = v6;
  do
  {
    LOBYTE(v44[0]) = 8;
    if (v14 <= 1.59271755e13)
      v15 = v14;
    else
      v15 = 1.59271755e13;
    v46[0] = fmax(v15, -2.11845067e11);
    v41(v47, v44, v46, ObjectType, v9);
    if ((LOBYTE(v47[2]) & 1) != 0)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(_QWORD *)v21 = 8;
      *(double *)(v21 + 8) = v14;
      *(_BYTE *)(v21 + 16) = 0;
      return (double *)swift_willThrow();
    }
    if (v8)
      v16 = v47[0] - v47[1];
    else
      v16 = v47[1] + v47[0];
    *(_QWORD *)&v44[0] = 256;
    if (v16 <= 1.59271755e13)
      v17 = v16;
    else
      v17 = 1.59271755e13;
    v46[0] = fmax(v17, -2.11845067e11);
    v13(v47, (uint64_t *)v44, (double *)v46, ObjectType, v9);
    memcpy(v46, v47, 0x11AuLL);
    result = (double *)outlined release of DateComponents((uint64_t)v46);
    v18 = v46[24];
    if (LOBYTE(v46[25]))
      v18 = 0;
    v19 = v14 >= v16;
    if (v8)
      v19 = v16 >= v14;
    if (v19)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(double *)v22 = v16;
      *(double *)(v22 + 8) = v14;
      v23 = 1;
LABEL_37:
      *(_BYTE *)(v22 + 16) = v23;
      return (double *)swift_willThrow();
    }
    v14 = v16;
  }
  while (v7 != v18);
  if ((v39 & 1) != 0)
    goto LABEL_40;
  v45 = 128;
  if (v16 <= 1.59271755e13)
    v20 = v16;
  else
    v20 = 1.59271755e13;
  v44[0] = fmax(v20, -2.11845067e11);
  v13(v47, &v45, v44, ObjectType, v9);
  memcpy(v46, v47, 0x11AuLL);
  result = (double *)outlined release of DateComponents((uint64_t)v46);
  if ((v46[23] & 1) != 0)
  {
    if (v40)
    {
      if ((v40 & 0x8000000000000000) == 0)
        goto LABEL_54;
      goto LABEL_44;
    }
LABEL_40:
    v26 = v38;
    *v38 = v16;
    goto LABEL_41;
  }
  v24 = v46[22];
  v25 = v40;
  if (v40 == v46[22])
    goto LABEL_40;
  if (v40 >= v46[22])
  {
    v30 = v7;
    goto LABEL_52;
  }
LABEL_44:
  LOBYTE(v42) = 8;
  *(double *)v43 = v11;
  v41(v44, (double *)&v42, v43, ObjectType, v9);
  if ((LOBYTE(v44[2]) & 1) != 0)
    goto LABEL_54;
  v27 = v44[0];
  v6 = v44[0];
  v43[0] = 384;
  if (v44[0] <= 1.59271755e13)
    v28 = v44[0];
  else
    v28 = 1.59271755e13;
  *(_QWORD *)&v42 = fmax(v28, -2.11845067e11);
  v13(v44, v43, (double *)&v42, ObjectType, v9);
  memcpy(v43, v44, 0x11AuLL);
  if ((v43[23] & 1) == 0 && (v43[25] & 1) == 0)
  {
    v24 = v43[22];
    v30 = v43[24];
    result = (double *)outlined release of DateComponents((uint64_t)v43);
    v25 = v40;
LABEL_52:
    if (v25 != v24 || v7 != v30)
    {
LABEL_54:
      v31 = v6;
      while (1)
      {
        LOBYTE(v42) = 3;
        if (v31 <= 1.59271755e13)
          v32 = v31;
        else
          v32 = 1.59271755e13;
        v43[0] = fmax(v32, -2.11845067e11);
        v41(v44, (double *)&v42, v43, ObjectType, v9);
        if ((LOBYTE(v44[2]) & 1) != 0)
        {
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(_QWORD *)v22 = 3;
          *(double *)(v22 + 8) = v31;
          v23 = 2;
          goto LABEL_37;
        }
        v6 = v44[1] + v44[0];
        v43[0] = 384;
        if (v44[1] + v44[0] <= 1.59271755e13)
          v33 = v44[1] + v44[0];
        else
          v33 = 1.59271755e13;
        *(_QWORD *)&v42 = fmax(v33, -2.11845067e11);
        v13(v44, v43, (double *)&v42, ObjectType, v9);
        memcpy(v43, v44, 0x11AuLL);
        if ((v43[23] & 1) != 0 || (v43[25] & 1) != 0)
        {
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(_QWORD *)v29 = 7;
          *(double *)(v29 + 8) = v6;
          goto LABEL_71;
        }
        v34 = v31 >= v6;
        if (v8)
          v34 = v6 >= v31;
        if (v34)
          break;
        v35 = v43[22];
        v36 = v43[24];
        result = (double *)outlined release of DateComponents((uint64_t)v43);
        v31 = v6;
        if (v40 == v35)
        {
          v31 = v6;
          if (v7 == v36)
            goto LABEL_69;
        }
      }
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(double *)v29 = v6;
      *(double *)(v29 + 8) = v31;
      v37 = 1;
      goto LABEL_74;
    }
LABEL_69:
    v26 = v38;
    *v38 = v6;
LABEL_41:
    *((_BYTE *)v26 + 8) = 0;
    return result;
  }
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(_QWORD *)v29 = 8;
  *(double *)(v29 + 8) = v27;
LABEL_71:
  v37 = 2;
LABEL_74:
  *(_BYTE *)(v29 + 16) = v37;
  swift_willThrow();
  return (double *)outlined release of DateComponents((uint64_t)v43);
}

double *Calendar.dateAfterMatchingWeekOfMonth(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t ObjectType;
  void (*v12)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(double *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  char v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  uint64_t v26;
  void (*v27)(double *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t);
  int v28;
  double v29;
  _OWORD v30[2];
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  double v80;
  char v81;
  uint64_t v82;
  _QWORD v83[36];
  double v84[36];
  _QWORD __dst[36];
  uint64_t v86;
  _QWORD __src[37];

  if ((*(_BYTE *)(a2 + 248) & 1) != 0)
    goto LABEL_2;
  v6 = *result;
  v7 = *(_QWORD *)(a2 + 240);
  v28 = *a3;
  v8 = *(_QWORD *)(v4 + 8);
  v86 = 1024;
  if (v6 <= 1.59271755e13)
    v9 = v6;
  else
    v9 = 1.59271755e13;
  v10 = fmax(v9, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v84[0] = v10;
  v12 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v8 + 192);
  v12((double *)__src, &v86, v84, ObjectType, v8);
  memcpy(__dst, __src, 0x11AuLL);
  result = (double *)outlined release of DateComponents((uint64_t)__dst);
  if ((__dst[31] & 1) != 0)
  {
    if (v7)
    {
      v13 = 0;
      goto LABEL_10;
    }
LABEL_2:
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }
  v13 = __dst[30];
  if (v7 == __dst[30])
    goto LABEL_2;
LABEL_10:
  v14 = *(void (**)(double *__return_ptr, _OWORD *, _QWORD *, uint64_t, uint64_t))(v8 + 160);
  LOBYTE(v30[0]) = 10;
  *(double *)v83 = v10;
  v27 = v14;
  v14(v84, v30, v83, ObjectType, v8);
  if ((LOBYTE(v84[2]) & 1) == 0)
  {
    if (v28)
      v16 = -1;
    else
      v16 = 1;
    do
    {
      v17 = v6;
      v6 = v84[0];
      if (v28)
      {
        if (v7 != 1 || v13 >= 3)
        {
          v18 = v84[0] + -1.0;
          LOBYTE(v30[0]) = 10;
          if (v84[0] + -1.0 > 1.59271755e13)
            v18 = 1.59271755e13;
          v83[0] = fmax(v18, -2.11845067e11);
          v27(v84, v30, v83, ObjectType, v8);
          if ((LOBYTE(v84[2]) & 1) == 0)
          {
            v6 = v84[0];
            goto LABEL_41;
          }
        }
      }
      else
      {
        v19 = v84[1];
        LOBYTE(v83[0]) = 10;
        LOBYTE(v30[0]) = 2;
        v84[0] = v10;
        result = (double *)(*(uint64_t (**)(_QWORD *, _OWORD *, double *, uint64_t, uint64_t))(v8 + 144))(v83, v30, v84, ObjectType, v8);
        if ((v21 & 1) != 0)
        {
          if (v7 != 1)
            goto LABEL_40;
          result = 0;
          v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if (v7 != 1)
        {
          goto LABEL_40;
        }
        if (__OFSUB__(v20, result))
        {
          __break(1u);
          return result;
        }
        if (v13 != v20 - (_QWORD)result)
        {
LABEL_40:
          v6 = v19 + v6;
          goto LABEL_41;
        }
      }
      while (1)
      {
        v82 = 8;
        v22 = v6 <= 1.59271755e13 ? v6 : 1.59271755e13;
        v23 = fmax(v22, -2.11845067e11);
        *(double *)v30 = v23;
        v12(v84, &v82, (double *)v30, ObjectType, v8);
        memcpy(v83, v84, 0x11AuLL);
        outlined release of DateComponents((uint64_t)v83);
        if ((v83[11] & 1) == 0 && v83[10] == 1)
          break;
        v79 = 1;
        v78 = 1;
        v77 = 1;
        v76 = 0;
        v75 = 1;
        v74 = 1;
        v73 = 1;
        v72 = 1;
        v71 = 1;
        v70 = 1;
        v69 = 1;
        v68 = 1;
        v67 = 1;
        v66 = 1;
        v65 = 1;
        v64 = 1;
        v31 = 0;
        memset(v30, 0, sizeof(v30));
        v32 = 1;
        v33 = 0;
        v34 = 1;
        v35 = 0;
        v36 = 1;
        v37 = v16;
        v38 = 0;
        v39 = 0;
        v40 = 1;
        v41 = 0;
        v42 = 1;
        v43 = 0;
        v44 = 1;
        v45 = 0;
        v46 = 1;
        v47 = 0;
        v48 = 1;
        v49 = 0;
        v50 = 1;
        v51 = 0;
        v52 = 1;
        v53 = 0;
        v54 = 1;
        v55 = 0;
        v56 = 1;
        v57 = 0;
        v58 = 1;
        v59 = 0;
        v60 = 1;
        v61 = 0;
        v62 = 1;
        v63 = 2;
        v29 = v23;
        (*(void (**)(double *__return_ptr, _OWORD *, double *, _QWORD, uint64_t, uint64_t))(v8 + 200))(&v80, v30, &v29, 0, ObjectType, v8);
        if ((v81 & 1) != 0)
          break;
        v6 = v80;
      }
LABEL_41:
      *(_QWORD *)&v30[0] = 1024;
      if (v6 <= 1.59271755e13)
        v24 = v6;
      else
        v24 = 1.59271755e13;
      v10 = fmax(v24, -2.11845067e11);
      v80 = v10;
      v12(v84, (uint64_t *)v30, &v80, ObjectType, v8);
      memcpy(v83, v84, 0x11AuLL);
      result = (double *)outlined release of DateComponents((uint64_t)v83);
      if (LOBYTE(v83[31]) == 1)
      {
        if ((v28 & 1) != 0)
        {
          if (v6 >= v17)
            goto LABEL_53;
        }
        else if (v17 >= v6)
        {
          goto LABEL_53;
        }
        if (!v7)
          goto LABEL_52;
        v13 = 0;
      }
      else
      {
        v25 = v17 >= v6;
        if (v28)
          v25 = v6 >= v17;
        if (v25)
        {
LABEL_53:
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(double *)v26 = v6;
          *(double *)(v26 + 8) = v17;
          *(_BYTE *)(v26 + 16) = 1;
          return (double *)swift_willThrow();
        }
        v13 = v83[30];
        if (v7 == v83[30])
        {
LABEL_52:
          *(double *)a4 = v6;
          *(_BYTE *)(a4 + 8) = 0;
          return result;
        }
      }
      LOBYTE(v30[0]) = 10;
      *(double *)v83 = v10;
      v27(v84, v30, v83, ObjectType, v8);
    }
    while ((LOBYTE(v84[2]) & 1) == 0);
  }
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(_QWORD *)v15 = 10;
  *(double *)(v15 + 8) = v6;
  *(_BYTE *)(v15 + 16) = 0;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingWeekOfYear(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t ObjectType;
  void (*v13)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  void (*v14)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, uint64_t);
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  double v22;
  _QWORD __dst[36];
  uint64_t v24;
  double __src[36];
  _QWORD v26[33];
  char v27;
  uint64_t v28;

  if ((*(_BYTE *)(a2 + 264) & 1) != 0)
    goto LABEL_26;
  v6 = *result;
  v7 = *(_QWORD *)(a2 + 256);
  v8 = *a3;
  v9 = *(_QWORD *)(v4 + 8);
  v28 = 2048;
  if (v6 <= 1.59271755e13)
    v10 = v6;
  else
    v10 = 1.59271755e13;
  v11 = fmax(v10, -2.11845067e11);
  ObjectType = swift_getObjectType();
  __src[0] = v11;
  v13 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v9 + 192);
  v13((double *)v26, &v28, __src, ObjectType, v9);
  result = (double *)outlined release of DateComponents((uint64_t)v26);
  if ((v27 & 1) != 0)
  {
    if (v7)
      goto LABEL_7;
LABEL_26:
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }
  if (v7 == v26[32])
    goto LABEL_26;
LABEL_7:
  v14 = *(void (**)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, uint64_t))(v9 + 160);
  while (1)
  {
    LOBYTE(v24) = 11;
    if (v6 <= 1.59271755e13)
      v15 = v6;
    else
      v15 = 1.59271755e13;
    __dst[0] = fmax(v15, -2.11845067e11);
    v14(__src, &v24, __dst, ObjectType, v9);
    if ((LOBYTE(__src[2]) & 1) != 0)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      v21 = 0;
      *(_QWORD *)v20 = 11;
      goto LABEL_29;
    }
    if (v8)
      v16 = __src[0] - __src[1];
    else
      v16 = __src[1] + __src[0];
    v24 = 2048;
    if (v16 <= 1.59271755e13)
      v17 = v16;
    else
      v17 = 1.59271755e13;
    v22 = fmax(v17, -2.11845067e11);
    v13(__src, &v24, &v22, ObjectType, v9);
    memcpy(__dst, __src, 0x11AuLL);
    result = (double *)outlined release of DateComponents((uint64_t)__dst);
    v18 = __dst[32];
    if (LOBYTE(__dst[33]))
      v18 = 0;
    v19 = v6 >= v16;
    if (v8)
      v19 = v16 >= v6;
    if (v19)
      break;
    v6 = v16;
    if (v7 == v18)
    {
      *(double *)a4 = v16;
      *(_BYTE *)(a4 + 8) = 0;
      return result;
    }
  }
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(double *)v20 = v16;
  v21 = 1;
LABEL_29:
  *(double *)(v20 + 8) = v6;
  *(_BYTE *)(v20 + 16) = v21;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingNanosecond(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t ObjectType;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  _QWORD __dst[36];
  double v12;
  _QWORD __src[36];

  if ((*(_BYTE *)(a2 + 168) & 1) != 0)
  {
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 1;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 160);
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *result;
    __dst[0] = 127;
    if (v6 > 1.59271755e13)
      v6 = 1.59271755e13;
    v7 = fmax(v6, -2.11845067e11);
    ObjectType = swift_getObjectType();
    v12 = v7;
    (*(void (**)(_QWORD *__return_ptr, _QWORD *, double *, uint64_t, uint64_t))(v5 + 192))(__src, __dst, &v12, ObjectType, v5);
    if (v4 == 0x7FFFFFFFFFFFFFFFLL)
      v9 = 0;
    else
      v9 = v4;
    __src[20] = v9;
    LOBYTE(__src[21]) = v4 == 0x7FFFFFFFFFFFFFFFLL;
    memcpy(__dst, __src, 0x11AuLL);
    v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 176);
    outlined retain of DateComponents((uint64_t)__src);
    v10(__dst, ObjectType, v5);
    outlined release of DateComponents((uint64_t)__src);
    return (double *)outlined release of DateComponents((uint64_t)__src);
  }
  return result;
}

double *Calendar.dateAfterMatchingWeekday(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t ObjectType;
  void (*v13)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  void (*v14)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  BOOL v22;
  uint64_t v23;
  double v24;
  _QWORD __dst[36];
  uint64_t v26;
  double __src[36];
  _QWORD v28[23];
  char v29;
  uint64_t v30;

  if ((*(_BYTE *)(a2 + 184) & 1) != 0)
    goto LABEL_2;
  v6 = *result;
  v7 = *(_QWORD *)(a2 + 176);
  v8 = *a3;
  v9 = *(_QWORD *)(v4 + 8);
  v30 = 128;
  if (v6 <= 1.59271755e13)
    v10 = v6;
  else
    v10 = 1.59271755e13;
  v11 = fmax(v10, -2.11845067e11);
  ObjectType = swift_getObjectType();
  __src[0] = v11;
  v13 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v9 + 192);
  v13((double *)v28, &v30, __src, ObjectType, v9);
  result = (double *)outlined release of DateComponents((uint64_t)v28);
  if ((v29 & 1) != 0)
  {
    if (!v7)
      goto LABEL_2;
  }
  else if (v7 == v28[22])
  {
LABEL_2:
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }
  v14 = *(void (**)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, uint64_t))(v9 + 160);
  LOBYTE(v26) = 7;
  *(double *)__dst = v11;
  v14(__src, &v26, __dst, ObjectType, v9);
  if ((LOBYTE(__src[2]) & 1) != 0)
  {
LABEL_11:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(_QWORD *)v15 = 7;
    *(double *)(v15 + 8) = v6;
    *(_BYTE *)(v15 + 16) = 0;
    return (double *)swift_willThrow();
  }
  while (1)
  {
    v16 = v6;
    v18 = __src[0];
    v17 = __src[1];
    if (v8)
    {
      v19 = __src[0] + -1.0;
      LOBYTE(v26) = 3;
      if (__src[0] + -1.0 > 1.59271755e13)
        v19 = 1.59271755e13;
      __dst[0] = fmax(v19, -2.11845067e11);
      v14(__src, &v26, __dst, ObjectType, v9);
      v6 = (LOBYTE(__src[2]) & 1) != 0 ? v18 - v17 : __src[0];
    }
    else
    {
      v6 = __src[1] + __src[0];
    }
    v26 = 128;
    v20 = v6 <= 1.59271755e13 ? v6 : 1.59271755e13;
    v21 = fmax(v20, -2.11845067e11);
    v24 = v21;
    v13(__src, &v26, &v24, ObjectType, v9);
    memcpy(__dst, __src, 0x11AuLL);
    result = (double *)outlined release of DateComponents((uint64_t)__dst);
    if (LOBYTE(__dst[23]) != 1)
      break;
    if ((v8 & 1) != 0)
    {
      if (v6 >= v16)
        goto LABEL_35;
    }
    else if (v16 >= v6)
    {
      goto LABEL_35;
    }
    if (!v7)
      goto LABEL_34;
LABEL_15:
    LOBYTE(v26) = 7;
    *(double *)__dst = v21;
    v14(__src, &v26, __dst, ObjectType, v9);
    if ((LOBYTE(__src[2]) & 1) != 0)
      goto LABEL_11;
  }
  v22 = v16 >= v6;
  if (v8)
    v22 = v6 >= v16;
  if (!v22)
  {
    if (v7 == __dst[22])
    {
LABEL_34:
      *(double *)a4 = v6;
      *(_BYTE *)(a4 + 8) = 0;
      return result;
    }
    goto LABEL_15;
  }
LABEL_35:
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  *(double *)v23 = v6;
  *(double *)(v23 + 8) = v16;
  *(_BYTE *)(v23 + 16) = 1;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingQuarter(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t ObjectType;
  _QWORD *(*v13)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  char v27;
  double v28;
  double v29;
  char v30;

  if ((*(_BYTE *)(a2 + 216) & 1) != 0)
  {
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }
  v6 = *result;
  v7 = *(_QWORD *)(a2 + 208);
  v8 = *a3;
  v9 = *(_QWORD *)(v4 + 8);
  v27 = 1;
  if (v6 <= 1.59271755e13)
    v10 = v6;
  else
    v10 = 1.59271755e13;
  v11 = fmax(v10, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v26 = v11;
  v13 = *(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(v9 + 160);
  result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
  if ((v30 & 1) == 0)
  {
    v6 = v28;
    if (v8)
    {
      v6 = v28 + v29 + -1.0;
      if (v7 == 4)
        goto LABEL_31;
      v27 = 9;
      if (v6 <= 1.59271755e13)
        v16 = v28 + v29 + -1.0;
      else
        v16 = 1.59271755e13;
      v26 = fmax(v16, -2.11845067e11);
      result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
      if ((v30 & 1) != 0)
        goto LABEL_54;
      v6 = v28 - v29;
      if (v7 == 3)
        goto LABEL_31;
      v27 = 9;
      if (v6 <= 1.59271755e13)
        v17 = v28 - v29;
      else
        v17 = 1.59271755e13;
      v26 = fmax(v17, -2.11845067e11);
      result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
      if ((v30 & 1) != 0)
        goto LABEL_54;
      v6 = v28 - v29;
      if (v7 == 2)
        goto LABEL_31;
      v27 = 9;
      if (v6 <= 1.59271755e13)
        v18 = v28 - v29;
      else
        v18 = 1.59271755e13;
      v26 = fmax(v18, -2.11845067e11);
      result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
      if ((v30 & 1) != 0)
        goto LABEL_54;
      v6 = v28 - v29;
      if (v7 == 1)
      {
LABEL_31:
        *(double *)a4 = v6;
        *(_BYTE *)(a4 + 8) = 0;
        return result;
      }
      v27 = 9;
      if (v6 <= 1.59271755e13)
        v19 = v28 - v29;
      else
        v19 = 1.59271755e13;
      v26 = fmax(v19, -2.11845067e11);
      result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
      if ((v30 & 1) == 0)
      {
        v6 = v28 - v29;
        goto LABEL_31;
      }
    }
    else
    {
      if (v7 == 1)
        goto LABEL_31;
      if ((unint64_t)(v7 - 2) >= 3)
        v20 = 3;
      else
        v20 = v7 - 2;
      v27 = 9;
      if (v28 <= 1.59271755e13)
        v21 = v28;
      else
        v21 = 1.59271755e13;
      v26 = fmax(v21, -2.11845067e11);
      result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
      if ((v30 & 1) == 0)
      {
        v6 = v29 + v28;
        if (!v20)
          goto LABEL_31;
        v27 = 9;
        if (v6 <= 1.59271755e13)
          v22 = v29 + v28;
        else
          v22 = 1.59271755e13;
        v26 = fmax(v22, -2.11845067e11);
        result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
        if ((v30 & 1) == 0)
        {
          v23 = v20 + 1;
          v6 = v29 + v28;
          if (v23 == 2)
            goto LABEL_31;
          v27 = 9;
          if (v6 <= 1.59271755e13)
            v24 = v29 + v28;
          else
            v24 = 1.59271755e13;
          v26 = fmax(v24, -2.11845067e11);
          result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
          if ((v30 & 1) == 0)
          {
            v6 = v29 + v28;
            if (v23 == 3)
              goto LABEL_31;
            v27 = 9;
            if (v6 <= 1.59271755e13)
              v25 = v29 + v28;
            else
              v25 = 1.59271755e13;
            v26 = fmax(v25, -2.11845067e11);
            result = (double *)v13(&v28, &v27, &v26, ObjectType, v9);
            if ((v30 & 1) == 0)
            {
              v6 = v29 + v28;
              goto LABEL_31;
            }
          }
        }
      }
    }
LABEL_54:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    v15 = 9;
    goto LABEL_55;
  }
  lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
  swift_allocError();
  v15 = 1;
LABEL_55:
  *(_QWORD *)v14 = v15;
  *(double *)(v14 + 8) = v6;
  *(_BYTE *)(v14 + 16) = 0;
  return (double *)swift_willThrow();
}

double *Calendar.dateAfterMatchingMonth(startingAt:components:direction:strictMatching:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  int v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t *__return_ptr, uint64_t, _QWORD *);
  BOOL v14;
  char v15;
  double v16;
  double v17;
  void (*v18)(double *__return_ptr, uint64_t *, double *, uint64_t, _QWORD *);
  void (*v19)(double *__return_ptr, _QWORD *, double *, uint64_t, _QWORD *);
  uint64_t v20;
  double v21;
  double v22;
  void (*v23)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, _QWORD *);
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  BOOL v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  uint64_t v39;
  char v40;
  double v43;
  _QWORD v44[36];
  uint64_t v45;
  uint64_t v46;
  double v47[36];
  double v48[36];
  _QWORD __dst[36];
  uint64_t v50;
  double __src[37];

  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    *(_QWORD *)a5 = 0;
    *(_BYTE *)(a5 + 8) = 1;
    return result;
  }
  v6 = *result;
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *a3;
  v9 = *(_QWORD **)(v5 + 8);
  v10 = *(unsigned __int8 *)(a2 + 281);
  ObjectType = swift_getObjectType();
  v12 = (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *))v9[3];
  swift_unknownObjectRetain();
  v12((uint64_t *)__src, ObjectType, v9);
  swift_unknownObjectRelease();
  v14 = LOBYTE(__src[0]) != 2 || v10 == 2;
  v15 = (v10 & 1) == 0 || v14;
  v50 = 4;
  if (v6 <= 1.59271755e13)
    v16 = v6;
  else
    v16 = 1.59271755e13;
  v17 = fmax(v16, -2.11845067e11);
  v48[0] = v17;
  v18 = (void (*)(double *__return_ptr, uint64_t *, double *, uint64_t, _QWORD *))v9[24];
  v18(__src, &v50, v48, ObjectType, v9);
  memcpy(__dst, __src, 0x11AuLL);
  result = (double *)outlined release of DateComponents((uint64_t)__dst);
  if ((__dst[9] & 1) != 0)
  {
    if (v7)
    {
LABEL_17:
      v40 = v15;
      v19 = (void (*)(double *__return_ptr, _QWORD *, double *, uint64_t, _QWORD *))v9[20];
      LOBYTE(v44[0]) = 2;
      v47[0] = v17;
      v19(v48, v44, v47, ObjectType, v9);
      if ((LOBYTE(v48[2]) & 1) == 0)
      {
        do
        {
          v25 = v6;
          v26 = v48[1];
          v27 = v48[0];
          if (v8)
          {
            v44[0] = 4;
            if (v48[0] <= 1.59271755e13)
              v28 = v48[0];
            else
              v28 = 1.59271755e13;
            v47[0] = fmax(v28, -2.11845067e11);
            v18(v48, v44, v47, ObjectType, v9);
            memcpy(v47, v48, 0x11AuLL);
            outlined release of DateComponents((uint64_t)v47);
            if ((LOBYTE(v47[9]) & 1) != 0)
              goto LABEL_46;
            if (*(_QWORD *)&v47[8] != 3)
              goto LABEL_46;
            swift_unknownObjectRetain();
            v12(&v46, ObjectType, v9);
            swift_unknownObjectRelease();
            if (!(_BYTE)v46)
              goto LABEL_45;
            swift_unknownObjectRetain();
            v12(&v46, ObjectType, v9);
            swift_unknownObjectRelease();
            if (v46 == 1)
              goto LABEL_45;
            swift_unknownObjectRetain();
            v12(&v46, ObjectType, v9);
            swift_unknownObjectRelease();
            if (v46 == 11
              || (swift_unknownObjectRetain(),
                  v12(&v46, ObjectType, v9),
                  swift_unknownObjectRelease(),
                  v46 == 7)
              || (swift_unknownObjectRetain(),
                  v12(&v46, ObjectType, v9),
                  swift_unknownObjectRelease(),
                  v46 == 13))
            {
LABEL_45:
              v29 = -259200.0;
            }
            else
            {
LABEL_46:
              v29 = -86400.0;
            }
            v26 = -(v26 + v29);
          }
          v6 = v27 + v26;
          v44[0] = 4;
          if (v6 <= 1.59271755e13)
            v30 = v6;
          else
            v30 = 1.59271755e13;
          v31 = fmax(v30, -2.11845067e11);
          v46 = *(_QWORD *)&v31;
          v18(v48, v44, (double *)&v46, ObjectType, v9);
          memcpy(v47, v48, 0x11AuLL);
          result = (double *)outlined release of DateComponents((uint64_t)v47);
          if (LOBYTE(v47[9]) == 1)
          {
            if ((v8 & 1) != 0)
            {
              if (v6 >= v25)
                goto LABEL_62;
            }
            else if (v25 >= v6)
            {
              goto LABEL_62;
            }
            if (!v7)
              goto LABEL_59;
          }
          else
          {
            v32 = v25 >= v6;
            if (v8)
              v32 = v6 >= v25;
            if (v32)
            {
LABEL_62:
              lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
              swift_allocError();
              *(double *)v33 = v6;
              *(double *)(v33 + 8) = v25;
              *(_BYTE *)(v33 + 16) = 1;
              return (double *)swift_willThrow();
            }
            if (v7 == *(_QWORD *)&v47[8])
            {
LABEL_59:
              if (v40 & 1 | ((a4 & 1) == 0))
                goto LABEL_60;
              goto LABEL_23;
            }
          }
          LOBYTE(v44[0]) = 2;
          v47[0] = v31;
          v19(v48, v44, v47, ObjectType, v9);
        }
        while (LOBYTE(v48[2]) != 1);
      }
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(_QWORD *)v20 = 2;
      *(double *)(v20 + 8) = v6;
LABEL_19:
      *(_BYTE *)(v20 + 16) = 0;
      return (double *)swift_willThrow();
    }
  }
  else if (v7 != __dst[8])
  {
    goto LABEL_17;
  }
  if (v15 & 1 | ((a4 & 1) == 0))
  {
LABEL_60:
    v24 = v6;
    goto LABEL_61;
  }
LABEL_23:
  v46 = 4;
  if (v6 <= 1.59271755e13)
    v21 = v6;
  else
    v21 = 1.59271755e13;
  v22 = fmax(v21, -2.11845067e11);
  v47[0] = v22;
  v18(v48, &v46, v47, ObjectType, v9);
  result = (double *)outlined release of DateComponents((uint64_t)v48);
  if ((BYTE1(v48[35]) & 1) != 0)
    goto LABEL_60;
  v23 = (void (*)(double *__return_ptr, uint64_t *, _QWORD *, uint64_t, _QWORD *))v9[20];
  LOBYTE(v45) = 2;
  *(double *)v44 = v22;
  v23(v47, &v45, v44, ObjectType, v9);
  if ((LOBYTE(v47[2]) & 1) != 0)
  {
    v24 = v6;
LABEL_29:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(_QWORD *)v20 = 2;
    *(double *)(v20 + 8) = v24;
    goto LABEL_19;
  }
  while (1)
  {
    v34 = v47[1];
    if (!v8)
      goto LABEL_72;
    if (v47[1] / 86400.0 > 30.0)
    {
      v35 = -172800.0;
LABEL_70:
      v34 = v47[1] + v35;
      goto LABEL_71;
    }
    if (v47[1] / 86400.0 > 28.0)
    {
      v35 = -86400.0;
      goto LABEL_70;
    }
LABEL_71:
    v34 = -v34;
LABEL_72:
    v24 = v47[0] + v34;
    v45 = 4;
    v36 = v47[0] + v34 <= 1.59271755e13 ? v47[0] + v34 : 1.59271755e13;
    v37 = fmax(v36, -2.11845067e11);
    v43 = v37;
    v18(v47, &v45, &v43, ObjectType, v9);
    memcpy(v44, v47, 0x11AuLL);
    if (LOBYTE(v44[9]) != 1)
      break;
    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_79;
LABEL_80:
    if (v6 < v24)
      v38 = 1;
    else
      v38 = v8;
    if (v38 != 1 || (v8 & 1) != 0 && v24 >= v6)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(double *)v39 = v24;
      *(double *)(v39 + 8) = v6;
      *(_BYTE *)(v39 + 16) = 1;
      swift_willThrow();
      return (double *)outlined release of DateComponents((uint64_t)v44);
    }
    outlined release of DateComponents((uint64_t)v44);
    LOBYTE(v45) = 2;
    *(double *)v44 = v37;
    v23(v47, &v45, v44, ObjectType, v9);
    v6 = v24;
    if (LOBYTE(v47[2]) == 1)
      goto LABEL_29;
  }
  if (v44[8] != v7)
    goto LABEL_80;
LABEL_79:
  if ((v44[35] & 0x100) == 0)
    goto LABEL_80;
  result = (double *)outlined release of DateComponents((uint64_t)v44);
LABEL_61:
  *(double *)a5 = v24;
  *(_BYTE *)(a5 + 8) = 0;
  return result;
}

double *Calendar.dateAfterMatchingEra(startingAt:components:direction:matchedEra:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t ObjectType;
  void (*v14)(uint64_t *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t);
  double v17;
  double v18;
  double v19;
  uint64_t __dst[36];
  uint64_t v21;
  char v22;
  __int128 __src[18];
  _OWORD v24[6];
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int16 v40;
  _QWORD v41[4];
  uint64_t v42;
  char v43;
  uint64_t v44[3];

  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    goto LABEL_10;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *a3;
  v10 = *(_QWORD *)(v5 + 8);
  v11 = *result;
  v44[0] = 1;
  if (v11 > 1.59271755e13)
    v11 = 1.59271755e13;
  v12 = fmax(v11, -2.11845067e11);
  ObjectType = swift_getObjectType();
  *(double *)v24 = v12;
  v14 = *(void (**)(uint64_t *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v10 + 192);
  v14(v41, v44, (double *)v24, ObjectType, v10);
  result = (double *)outlined release of DateComponents((uint64_t)v41);
  if ((v43 & 1) != 0)
  {
    if (!v8)
    {
LABEL_10:
      *(_QWORD *)a5 = 0;
      *(_BYTE *)(a5 + 8) = 1;
      return result;
    }
    if (v9)
    {
      if (v8 > 0)
      {
LABEL_8:
        *a4 = 0;
        goto LABEL_10;
      }
    }
    else if (v8 < 0)
    {
      goto LABEL_8;
    }
  }
  else
  {
    if (v8 == v42)
      goto LABEL_10;
    if (v9)
    {
      if (v42 < v8)
        goto LABEL_8;
    }
    else if (v8 < v42)
    {
      goto LABEL_8;
    }
  }
  __src[0] = 0uLL;
  __dst[0] = 0;
  __dst[1] = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, __dst, 0, 1, 0, 1, 0, 1, (uint64_t)v24, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
    v15 = 0;
  else
    v15 = v8;
  __src[0] = v24[0];
  __src[1] = v24[1];
  *(_QWORD *)&__src[2] = v15;
  BYTE8(__src[2]) = v8 == 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&__src[3] = 1;
  BYTE8(__src[3]) = 0;
  *(_QWORD *)&__src[4] = 1;
  BYTE8(__src[4]) = 0;
  *(_QWORD *)&__src[5] = 1;
  BYTE8(__src[5]) = 0;
  *(_QWORD *)&__src[6] = v25;
  BYTE8(__src[6]) = v26;
  *(_QWORD *)&__src[7] = 0;
  BYTE8(__src[7]) = 0;
  *(_QWORD *)&__src[8] = 0;
  BYTE8(__src[8]) = 0;
  *(_QWORD *)&__src[9] = 0;
  BYTE8(__src[9]) = 0;
  *(_QWORD *)&__src[10] = 0;
  BYTE8(__src[10]) = 0;
  *(_QWORD *)&__src[11] = v27;
  BYTE8(__src[11]) = v28;
  *(_QWORD *)&__src[12] = v29;
  BYTE8(__src[12]) = v30;
  *(_QWORD *)&__src[13] = v31;
  BYTE8(__src[13]) = v32;
  *(_QWORD *)&__src[14] = v33;
  BYTE8(__src[14]) = v34;
  *(_QWORD *)&__src[15] = v35;
  BYTE8(__src[15]) = v36;
  BYTE8(__src[16]) = v38;
  *(_QWORD *)&__src[16] = v37;
  *(_QWORD *)&__src[17] = v39;
  WORD4(__src[17]) = v40;
  memcpy(__dst, __src, 0x11AuLL);
  v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v10 + 176);
  outlined retain of DateComponents((uint64_t)__src);
  v16(&v21, __dst, ObjectType, v10);
  outlined release of DateComponents((uint64_t)__src);
  v17 = *(double *)&v21;
  if ((v22 & 1) != 0)
  {
    result = (double *)outlined release of DateComponents((uint64_t)__src);
    *a4 = 0;
    *(double *)a5 = v17;
    *(_BYTE *)(a5 + 8) = 1;
    return result;
  }
  v18 = *(double *)&v21;
  v21 = 1;
  if (v17 > 1.59271755e13)
    v18 = 1.59271755e13;
  v19 = fmax(v18, -2.11845067e11);
  v14(__dst, &v21, &v19, ObjectType, v10);
  outlined release of DateComponents((uint64_t)__dst);
  result = (double *)outlined release of DateComponents((uint64_t)__src);
  if ((__dst[5] & 1) == 0)
  {
    if (__dst[4] == v8)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (v8)
LABEL_24:
    *a4 = 0;
LABEL_25:
  *(double *)a5 = v17;
  *(_BYTE *)(a5 + 8) = 0;
  return result;
}

double *Calendar.dateAfterMatchingDay(startingAt:originalStartDate:components:direction:)@<X0>(double *result@<X0>, double *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  double v7;
  double v8;
  int v9;
  uint64_t v10;
  char v11;
  double v12;
  double v13;
  uint64_t ObjectType;
  void (*v15)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(double *__return_ptr, _QWORD *, double *, uint64_t, uint64_t);
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  void (*v24)(double *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t);
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  _QWORD v38[36];
  uint64_t v39;
  _QWORD v40[36];
  _QWORD v41[36];
  uint64_t v42;
  double v43[36];
  double v44[2];
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _QWORD __dst[36];
  uint64_t v52;
  _QWORD __src[37];

  if ((*(_BYTE *)(a3 + 88) & 1) != 0)
  {
    *(_QWORD *)a5 = 0;
    *(_BYTE *)(a5 + 8) = 1;
    return result;
  }
  v7 = *result;
  v8 = *a2;
  v36 = *(_QWORD *)(a3 + 80);
  v9 = *a4;
  v10 = *(_QWORD *)(v5 + 8);
  v11 = *(_BYTE *)(a3 + 72);
  v52 = 8;
  if (v7 <= 1.59271755e13)
    v12 = v7;
  else
    v12 = 1.59271755e13;
  v13 = fmax(v12, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v44[0] = v13;
  v15 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v10 + 192);
  v15((double *)__src, &v52, v44, ObjectType, v10);
  memcpy(__dst, __src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)__dst);
  if (LOBYTE(__dst[11]))
    v16 = 0;
  else
    v16 = __dst[10];
  if ((v11 & 1) == 0 && ((v9 ^ 1) & 1) == 0)
  {
    LOBYTE(v41[0]) = 2;
    v43[0] = v13;
    v17 = *(void (**)(double *__return_ptr, _QWORD *, double *, uint64_t, uint64_t))(v10 + 160);
    v17(v44, v41, v43, ObjectType, v10);
    if ((v45 & 1) == 0)
    {
      v18 = v44[1] + v44[0] + -1.0;
      if (v8 >= v18)
      {
        LOBYTE(v41[0]) = 3;
        if (v18 > 1.59271755e13)
          v18 = 1.59271755e13;
        v43[0] = fmax(v18, -2.11845067e11);
        v17(v44, v41, v43, ObjectType, v10);
        if ((v45 & 1) == 0)
        {
          v7 = v44[0];
          *(_QWORD *)&v43[0] = 8;
          if (v44[0] <= 1.59271755e13)
            v19 = v44[0];
          else
            v19 = 1.59271755e13;
          v41[0] = fmax(v19, -2.11845067e11);
          v15(v44, (uint64_t *)v43, (double *)v41, ObjectType, v10);
          outlined release of DateComponents((uint64_t)v44);
          if (v49)
            v16 = 0;
          else
            v16 = v48;
        }
      }
      else
      {
        v7 = v8;
      }
    }
  }
  if (v7 <= 1.59271755e13)
    v20 = v7;
  else
    v20 = 1.59271755e13;
  v21 = fmax(v20, -2.11845067e11);
  if (v36 == v16)
  {
    LOBYTE(v41[0]) = 3;
    v43[0] = v21;
    result = (double *)(*(_QWORD *(**)(double *__return_ptr, _QWORD *, double *, uint64_t, uint64_t))(v10 + 160))(v44, v41, v43, ObjectType, v10);
    if ((v45 & 1) != 0)
      v22 = v7;
    else
      v22 = v44[0];
LABEL_70:
    *(double *)a5 = v22;
    *(_BYTE *)(a5 + 8) = 0;
    return result;
  }
  v50 = 4;
  v43[0] = v21;
  v15(v44, &v50, v43, ObjectType, v10);
  outlined release of DateComponents((uint64_t)v44);
  if (v47)
    v23 = 0;
  else
    v23 = v46;
  v24 = *(void (**)(double *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t))(v10 + 160);
  LOBYTE(v40[0]) = 3;
  *(double *)v41 = v21;
  v24(v43, v40, v41, ObjectType, v10);
  if ((LOBYTE(v43[2]) & 1) != 0)
  {
    v22 = v7;
LABEL_34:
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(_QWORD *)v25 = 3;
    *(double *)(v25 + 8) = v22;
    *(_BYTE *)(v25 + 16) = 0;
    return (double *)swift_willThrow();
  }
  while (1)
  {
    v26 = v43[1];
    v27 = v43[0];
    if (v9)
    {
      v28 = v43[0] + -1.0;
      LOBYTE(v40[0]) = 3;
      if (v43[0] + -1.0 > 1.59271755e13)
        v28 = 1.59271755e13;
      v41[0] = fmax(v28, -2.11845067e11);
      v24(v43, v40, v41, ObjectType, v10);
      v22 = (LOBYTE(v43[2]) & 1) != 0 ? v27 - v26 : v43[0];
    }
    else
    {
      v22 = v43[1] + v43[0];
    }
    v42 = 8;
    v29 = v22 <= 1.59271755e13 ? v22 : 1.59271755e13;
    v30 = fmax(v29, -2.11845067e11);
    *(double *)v40 = v30;
    v15(v43, &v42, (double *)v40, ObjectType, v10);
    memcpy(v41, v43, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v41);
    v31 = LOBYTE(v41[11]) ? 0 : v41[10];
    v39 = 4;
    v37 = v30;
    v15((double *)v40, &v39, &v37, ObjectType, v10);
    memcpy(v38, v40, 0x11AuLL);
    result = (double *)outlined release of DateComponents((uint64_t)v38);
    if (LOBYTE(v38[9]) == 1)
      break;
    v32 = v7 >= v22;
    if (v9)
      v32 = v22 >= v7;
    if (v32)
    {
LABEL_68:
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(double *)v35 = v22;
      *(double *)(v35 + 8) = v7;
      *(_BYTE *)(v35 + 16) = 1;
      return (double *)swift_willThrow();
    }
    v33 = v38[8] - v23;
    if (__OFSUB__(v38[8], v23))
      goto LABEL_71;
LABEL_62:
    if (v33 < 0)
    {
      v34 = __OFSUB__(0, v33);
      v33 = -v33;
      if (v34)
        goto LABEL_72;
    }
    if (v33 >= 2)
    {
      v22 = v22 - v26;
      goto LABEL_70;
    }
    if (v36 == v31)
      goto LABEL_70;
    LOBYTE(v40[0]) = 3;
    *(double *)v41 = v30;
    v24(v43, v40, v41, ObjectType, v10);
    v7 = v22;
    if ((LOBYTE(v43[2]) & 1) != 0)
      goto LABEL_34;
  }
  if ((v9 & 1) != 0)
  {
    if (v22 >= v7)
      goto LABEL_68;
  }
  else if (v7 >= v22)
  {
    goto LABEL_68;
  }
  v33 = -v23;
  if (!__OFSUB__(0, v23))
    goto LABEL_62;
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

uint64_t Calendar._adjustedComponents(_:date:direction:)@<X0>(void *__src@<X0>, double *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  void (*v15)(_QWORD *__return_ptr, uint64_t *, _OWORD *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  void (*v26)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v28;
  int v29;
  double v30;
  double v31;
  uint64_t ObjectType;
  void (*v33)(_OWORD *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t);
  Foundation::Date v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  uint64_t *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[36];
  uint64_t v76;
  char v77;
  uint64_t v78;
  _OWORD __srca[18];
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  _QWORD v91[7];
  char v92;
  uint64_t v93;
  char v94;
  _OWORD __dst[19];

  memcpy(__dst, __src, 0x11AuLL);
  v9 = *a2;
  v10 = *a3;
  v12 = *v4;
  v11 = v4[1];
  DateComponents.highestSetUnit.getter((char *)v91);
  if (LOBYTE(v91[0]) == 3)
  {
    v28 = *(_QWORD *)&__dst[5];
    v29 = BYTE8(__dst[5]);
    if (v9 <= 1.59271755e13)
      v30 = v9;
    else
      v30 = 1.59271755e13;
    v31 = fmax(v30, -2.11845067e11);
    if (v10)
    {
      v76 = 8;
      ObjectType = swift_getObjectType();
      *(double *)__srca = v31;
      v33 = *(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t))(v11 + 192);
      outlined retain of DateComponents((uint64_t)__dst);
      v33(v91, &v76, (uint64_t *)__srca, ObjectType, v11);
      outlined release of DateComponents((uint64_t)v91);
      if ((v29 & 1) != 0 || (!v94 ? (v35 = v93) : (v35 = 0), v28 >= v35))
      {
        *(_QWORD *)&__srca[0] = v12;
        *((_QWORD *)&__srca[0] + 1) = v11;
        v90 = 2;
        v78 = *(_QWORD *)&v9;
        *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v90, -1, v34, (Swift::Bool)&v78);
        if ((v75[1] & 1) != 0)
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        v39 = *(double *)v75;
        v75[0] = 4;
        if (v39 > 1.59271755e13)
          v39 = 1.59271755e13;
        v78 = fmax(v39, -2.11845067e11);
      }
      else
      {
        v75[0] = 4;
        v78 = *(_QWORD *)&v31;
      }
      v40 = v75;
      goto LABEL_47;
    }
    v75[0] = 8;
    ObjectType = swift_getObjectType();
    *(double *)__srca = v31;
    v33 = *(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t))(v11 + 192);
    outlined retain of DateComponents((uint64_t)__dst);
    v33(v91, v75, (uint64_t *)__srca, ObjectType, v11);
    result = outlined release of DateComponents((uint64_t)v91);
    if (v94)
      v36 = 0;
    else
      v36 = v93;
    v37 = *(_QWORD *)&__dst[4];
    v38 = BYTE8(__dst[4]);
    if (v29)
    {
      if (v36 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_51;
    }
    else if (v36 >= v28)
    {
LABEL_51:
      LOBYTE(v91[0]) = BYTE8(__dst[2]);
      LOBYTE(__srca[0]) = BYTE8(__dst[3]);
      LOBYTE(v75[0]) = v38;
      LOBYTE(v76) = v29;
      LOBYTE(v78) = BYTE8(__dst[6]);
      v90 = BYTE8(__dst[7]);
      v89 = BYTE8(__dst[8]);
      v88 = BYTE8(__dst[9]);
      v87 = BYTE8(__dst[10]);
      v86 = BYTE8(__dst[11]);
      v85 = BYTE8(__dst[12]);
      v84 = BYTE8(__dst[13]);
      v83 = BYTE8(__dst[14]);
      v82 = BYTE8(__dst[15]);
      v81 = BYTE8(__dst[16]);
      v80 = BYTE8(__dst[17]);
      v41 = __dst[0];
      v42 = __dst[1];
      *(_QWORD *)(a4 + 32) = *(_QWORD *)&__dst[2];
      *(_BYTE *)(a4 + 40) = v91[0];
      *(_QWORD *)(a4 + 48) = *(_QWORD *)&__dst[3];
      *(_BYTE *)(a4 + 56) = __srca[0];
      *(_QWORD *)(a4 + 64) = v37;
      *(_BYTE *)(a4 + 72) = v75[0];
      *(_QWORD *)(a4 + 80) = v28;
      *(_BYTE *)(a4 + 88) = v76;
      *(_QWORD *)(a4 + 96) = *(_QWORD *)&__dst[6];
      *(_BYTE *)(a4 + 104) = v78;
      *(_QWORD *)(a4 + 112) = *(_QWORD *)&__dst[7];
      *(_BYTE *)(a4 + 120) = v90;
      *(_QWORD *)(a4 + 128) = *(_QWORD *)&__dst[8];
      *(_BYTE *)(a4 + 136) = v89;
      *(_QWORD *)(a4 + 144) = *(_QWORD *)&__dst[9];
      *(_BYTE *)(a4 + 152) = v88;
      *(_QWORD *)(a4 + 160) = *(_QWORD *)&__dst[10];
      *(_BYTE *)(a4 + 168) = v87;
      *(_QWORD *)(a4 + 176) = *(_QWORD *)&__dst[11];
      *(_BYTE *)(a4 + 184) = v86;
      *(_QWORD *)(a4 + 192) = *(_QWORD *)&__dst[12];
      *(_BYTE *)(a4 + 200) = v85;
      *(_QWORD *)(a4 + 208) = *(_QWORD *)&__dst[13];
      *(_BYTE *)(a4 + 216) = v84;
      *(_QWORD *)(a4 + 224) = *(_QWORD *)&__dst[14];
      *(_BYTE *)(a4 + 232) = v83;
      *(_QWORD *)(a4 + 240) = *(_QWORD *)&__dst[15];
      *(_BYTE *)(a4 + 248) = v82;
      *(_QWORD *)(a4 + 256) = *(_QWORD *)&__dst[16];
      *(_BYTE *)(a4 + 264) = v81;
      *(_QWORD *)(a4 + 272) = *(_QWORD *)&__dst[17];
      *(_BYTE *)(a4 + 280) = v80;
      *(_BYTE *)(a4 + 281) = BYTE9(__dst[17]);
      *(_OWORD *)a4 = v41;
      *(_OWORD *)(a4 + 16) = v42;
      return result;
    }
    v76 = 4;
    v78 = *(_QWORD *)&v31;
    v40 = &v76;
LABEL_47:
    v33(__srca, v40, &v78, ObjectType, v11);
    result = outlined release of DateComponents((uint64_t)__srca);
    v37 = *(_QWORD *)&__srca[4];
    if (BYTE8(__srca[4]))
      v37 = 0;
    v38 = v37 == 0x7FFFFFFFFFFFFFFFLL;
    if (v37 == 0x7FFFFFFFFFFFFFFFLL)
      v37 = 0;
    goto LABEL_51;
  }
  if (LOBYTE(v91[0]) != 2)
  {
    memcpy((void *)a4, __src, 0x11AuLL);
    return outlined retain of DateComponents((uint64_t)__dst);
  }
  v44 = v10;
  v78 = 2;
  v13 = 1.59271755e13;
  if (v9 <= 1.59271755e13)
    v13 = v9;
  v14 = fmax(v13, -2.11845067e11);
  v74 = swift_getObjectType();
  *(double *)__srca = v14;
  v15 = *(void (**)(_QWORD *__return_ptr, uint64_t *, _OWORD *, uint64_t, uint64_t))(v11 + 192);
  outlined retain of DateComponents((uint64_t)__dst);
  v15(v91, &v78, __srca, v74, v11);
  outlined release of DateComponents((uint64_t)v91);
  if (v92)
    v16 = 0;
  else
    v16 = v91[6];
  v43 = v16;
  if (v16 == 0x7FFFFFFFFFFFFFFFLL)
    v17 = 0;
  else
    v17 = v16;
  v18 = BYTE8(__dst[13]);
  v19 = BYTE8(__dst[7]);
  v72 = v11;
  v64 = BYTE8(__dst[16]);
  v65 = BYTE8(__dst[17]);
  BYTE8(__srca[16]) = BYTE8(__dst[16]);
  WORD4(__srca[17]) = WORD4(__dst[17]);
  v45 = __dst[0];
  __srca[0] = __dst[0];
  v54 = *((_QWORD *)&__dst[1] + 1);
  v55 = *(_QWORD *)&__dst[1];
  __srca[1] = __dst[1];
  v57 = *(_QWORD *)&__dst[2];
  *(_QWORD *)&__srca[2] = *(_QWORD *)&__dst[2];
  v46 = BYTE8(__dst[2]);
  BYTE8(__srca[2]) = BYTE8(__dst[2]);
  v20 = v17;
  *(_QWORD *)&__srca[3] = v17;
  v21 = v16 == 0x7FFFFFFFFFFFFFFFLL;
  BYTE8(__srca[3]) = v16 == 0x7FFFFFFFFFFFFFFFLL;
  v61 = *(_QWORD *)&__dst[4];
  *(_QWORD *)&__srca[4] = *(_QWORD *)&__dst[4];
  v50 = BYTE8(__dst[4]);
  v51 = BYTE8(__dst[5]);
  BYTE8(__srca[4]) = BYTE8(__dst[4]);
  v62 = *(_QWORD *)&__dst[5];
  v63 = *(_QWORD *)&__dst[6];
  *(_QWORD *)&__srca[5] = *(_QWORD *)&__dst[5];
  BYTE8(__srca[5]) = BYTE8(__dst[5]);
  *(_QWORD *)&__srca[6] = *(_QWORD *)&__dst[6];
  v52 = BYTE8(__dst[6]);
  BYTE8(__srca[6]) = BYTE8(__dst[6]);
  v66 = *(_QWORD *)&__dst[7];
  v67 = *(_QWORD *)&__dst[8];
  *(_QWORD *)&__srca[7] = *(_QWORD *)&__dst[7];
  BYTE8(__srca[7]) = BYTE8(__dst[7]);
  *(_QWORD *)&__srca[8] = *(_QWORD *)&__dst[8];
  v53 = BYTE8(__dst[8]);
  BYTE8(__srca[8]) = BYTE8(__dst[8]);
  v68 = *(_QWORD *)&__dst[9];
  v69 = *(_QWORD *)&__dst[10];
  *(_QWORD *)&__srca[9] = *(_QWORD *)&__dst[9];
  v56 = BYTE8(__dst[9]);
  BYTE8(__srca[9]) = BYTE8(__dst[9]);
  *(_QWORD *)&__srca[10] = *(_QWORD *)&__dst[10];
  v58 = BYTE8(__dst[10]);
  v59 = BYTE8(__dst[11]);
  BYTE8(__srca[10]) = BYTE8(__dst[10]);
  v70 = *(_QWORD *)&__dst[11];
  v71 = *(_QWORD *)&__dst[12];
  *(_QWORD *)&__srca[11] = *(_QWORD *)&__dst[11];
  BYTE8(__srca[11]) = BYTE8(__dst[11]);
  *(_QWORD *)&__srca[12] = *(_QWORD *)&__dst[12];
  v60 = BYTE8(__dst[12]);
  BYTE8(__srca[12]) = BYTE8(__dst[12]);
  v73 = *(_QWORD *)&__dst[13];
  *(_QWORD *)&__srca[13] = *(_QWORD *)&__dst[13];
  BYTE8(__srca[13]) = BYTE8(__dst[13]);
  v47 = *(_QWORD *)&__dst[14];
  *(_QWORD *)&__srca[14] = *(_QWORD *)&__dst[14];
  v22 = BYTE8(__dst[14]);
  BYTE8(__srca[14]) = BYTE8(__dst[14]);
  v48 = *(_QWORD *)&__dst[15];
  *(_QWORD *)&__srca[15] = *(_QWORD *)&__dst[15];
  v23 = BYTE8(__dst[15]);
  BYTE8(__srca[15]) = BYTE8(__dst[15]);
  v24 = *(_QWORD *)&__dst[17];
  v49 = *(_QWORD *)&__dst[16];
  *(_QWORD *)&__srca[16] = *(_QWORD *)&__dst[16];
  *(_QWORD *)&__srca[17] = *(_QWORD *)&__dst[17];
  v25 = BYTE9(__dst[17]);
  memcpy(v75, __srca, 0x11AuLL);
  v26 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))(v72 + 176);
  outlined retain of DateComponents((uint64_t)__srca);
  v26(&v76, v75, v74, v72);
  result = outlined release of DateComponents((uint64_t)__srca);
  if ((v77 & 1) != 0)
    goto LABEL_12;
  if ((v44 & 1) == 0)
  {
    if (*(double *)&v76 >= v9)
      goto LABEL_12;
    if (v43 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v21 = v43 == 0x7FFFFFFFFFFFFFFELL;
      if (v43 == 0x7FFFFFFFFFFFFFFELL)
        v20 = 0;
      else
        v20 = v43 + 1;
      goto LABEL_12;
    }
    goto LABEL_55;
  }
  if (v9 >= *(double *)&v76)
  {
LABEL_12:
    LOBYTE(v75[0]) = v46;
    LOBYTE(v76) = v21;
    v90 = v50;
    v89 = v51;
    v88 = v52;
    v87 = v19;
    v86 = v53;
    v85 = v56;
    v84 = v58;
    v83 = v59;
    v82 = v60;
    v81 = v18;
    v80 = v22;
    *(_OWORD *)a4 = v45;
    *(_QWORD *)(a4 + 16) = v55;
    *(_QWORD *)(a4 + 24) = v54;
    *(_QWORD *)(a4 + 32) = v57;
    *(_BYTE *)(a4 + 40) = v75[0];
    *(_QWORD *)(a4 + 48) = v20;
    *(_BYTE *)(a4 + 56) = v76;
    *(_QWORD *)(a4 + 64) = v61;
    *(_BYTE *)(a4 + 72) = v90;
    *(_QWORD *)(a4 + 80) = v62;
    *(_BYTE *)(a4 + 88) = v89;
    *(_QWORD *)(a4 + 96) = v63;
    *(_BYTE *)(a4 + 104) = v88;
    *(_QWORD *)(a4 + 112) = v66;
    *(_BYTE *)(a4 + 120) = v87;
    *(_QWORD *)(a4 + 128) = v67;
    *(_BYTE *)(a4 + 136) = v86;
    *(_QWORD *)(a4 + 144) = v68;
    *(_BYTE *)(a4 + 152) = v85;
    *(_QWORD *)(a4 + 160) = v69;
    *(_BYTE *)(a4 + 168) = v84;
    *(_QWORD *)(a4 + 176) = v70;
    *(_BYTE *)(a4 + 184) = v83;
    *(_QWORD *)(a4 + 192) = v71;
    *(_BYTE *)(a4 + 200) = v82;
    *(_QWORD *)(a4 + 208) = v73;
    *(_BYTE *)(a4 + 216) = v81;
    *(_QWORD *)(a4 + 224) = v47;
    *(_BYTE *)(a4 + 232) = v80;
    *(_QWORD *)(a4 + 240) = v48;
    *(_BYTE *)(a4 + 248) = v23;
    *(_QWORD *)(a4 + 256) = v49;
    *(_BYTE *)(a4 + 264) = v64;
    *(_QWORD *)(a4 + 272) = v24;
    *(_BYTE *)(a4 + 280) = v65;
    *(_BYTE *)(a4 + 281) = v25;
    return result;
  }
  if (v43 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v20 = v43 - 1;
    if (!__OFSUB__(v43, 1))
    {
      v21 = 0;
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_53;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

double *Calendar.dateAfterMatchingYearForWeekOfYear(startingAt:components:direction:)@<X0>(double *result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  double *v4;
  uint64_t v5;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t ObjectType;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  int v18;
  char v19;
  double v20;
  double v21;
  char v22;
  double v23;
  char v24;
  _QWORD __dst[36];
  _QWORD __src[37];

  if ((*(_BYTE *)(a2 + 280) & 1) != 0)
    goto LABEL_13;
  v7 = *(_QWORD *)(a2 + 272);
  v18 = *a3;
  v9 = *v4;
  v8 = v4[1];
  v10 = *result;
  __dst[0] = 4097;
  if (v10 > 1.59271755e13)
    v10 = 1.59271755e13;
  v11 = fmax(v10, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v20 = v11;
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, double *, uint64_t, double))(*(_QWORD *)&v8 + 192))(__src, __dst, &v20, ObjectType, COERCE_DOUBLE(*(_QWORD *)&v8));
  memcpy(__dst, __src, 0x11AuLL);
  if (LOBYTE(__dst[35]) == 1)
  {
    if (v7 != 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_6;
    goto LABEL_12;
  }
  if (__dst[34] == v7)
  {
LABEL_12:
    result = (double *)outlined release of DateComponents((uint64_t)__dst);
LABEL_13:
    *(_QWORD *)a4 = 0;
LABEL_14:
    *(_BYTE *)(a4 + 8) = 1;
    return result;
  }
LABEL_6:
  v20 = v9;
  v21 = v8;
  if (LOBYTE(__dst[5]))
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v13 = __dst[4];
  Calendar.dateIfEraHasYearForWeekOfYear(era:yearForWeekOfYear:)(v13, v7, (uint64_t)&v23);
  if (v5)
    return (double *)outlined release of DateComponents((uint64_t)__dst);
  v14 = v23;
  if ((v24 & 1) != 0)
  {
    result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v14;
    goto LABEL_14;
  }
  if (v18)
  {
    v19 = 12;
    if (v23 <= 1.59271755e13)
      v15 = v23;
    else
      v15 = 1.59271755e13;
    v23 = fmax(v15, -2.11845067e11);
    (*(void (**)(double *__return_ptr, char *, double *, uint64_t, double))(*(_QWORD *)&v8 + 160))(&v20, &v19, &v23, ObjectType, COERCE_DOUBLE(*(_QWORD *)&v8));
    if ((v22 & 1) != 0)
    {
      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(_QWORD *)v16 = 12;
      *(double *)(v16 + 8) = v14;
      *(_BYTE *)(v16 + 16) = 0;
      swift_willThrow();
      return (double *)outlined release of DateComponents((uint64_t)__dst);
    }
    v17 = v21;
    result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v17 + -1.0 + v14;
    *(_BYTE *)(a4 + 8) = 0;
  }
  else
  {
    result = (double *)outlined release of DateComponents((uint64_t)__dst);
    *(double *)a4 = v14;
    *(_BYTE *)(a4 + 8) = 0;
  }
  return result;
}

void DateComponents.lowestSetUnit.getter(char *a1@<X8>)
{
  _BYTE *v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  BOOL v8;

  if (v1[168] == 1)
  {
    if (v1[264])
      v2 = 10;
    else
      v2 = 11;
    if (v1[280])
      v3 = v2;
    else
      v3 = 12;
    if (v1[200])
      v4 = 7;
    else
      v4 = 8;
    if (((v1[280] & v1[264]) & v1[248] & 1) != 0)
      v3 = v4;
    if (v1[152])
      v5 = 5;
    else
      v5 = 6;
    if (((v1[280] & v1[264] & v1[248]) & (v1[200] & v1[184]) & 1) != 0)
      v3 = v5;
    if (v1[120])
      v6 = 3;
    else
      v6 = 4;
    if (((v1[280] & v1[264] & v1[248] & v1[200] & v1[184]) & (v1[152] & v1[136]) & 1) != 0)
      v3 = v6;
    if (v1[72])
      v7 = 9;
    else
      v7 = 2;
    if (((v1[280] & v1[264] & v1[248] & v1[200] & v1[184] & v1[152] & v1[136]) & (v1[120] & v1[88]) & 1) != 0)
      v3 = v7;
    if (((v1[280] & v1[264] & v1[248] & v1[200] & v1[184] & v1[152] & v1[136] & v1[120] & v1[88] & v1[72]) & v1[216]) != 0)
    {
      v3 = 17;
      v8 = v1[104] == 0;
    }
    else
    {
      v8 = 1;
    }
    if (!v8)
    {
      if (v1[40])
        v3 = 18;
      else
        v3 = 0;
      if (!v1[56])
        v3 = 1;
    }
    *a1 = v3;
  }
  else
  {
    *a1 = 13;
  }
}

uint64_t StringProtocol.localizedStandardRange<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  v13[0] = LocaleCache.current.getter();
  v13[1] = v10;
  v11 = StringProtocol.range<A>(of:options:range:locale:)(a1, 0x81uLL, 0, 0, 1, (uint64_t)v13, a2, a3, a4, a5);
  swift_unknownObjectRelease();
  return v11;
}

void IndexPath.debugDescription.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_18194B32C()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 91;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a1 >= *a2;
}

uint64_t type metadata accessor for MeasurementFormatUnitUsage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MeasurementFormatUnitUsage);
}

uint64_t outlined destroy of NSNotificationCenter.Notifications.Resumption(uint64_t a1)
{
  destroy for NSNotificationCenter.Notifications.Resumption(a1);
  return a1;
}

uint64_t destroy for NSNotificationCenter.Notifications.Resumption(uint64_t a1)
{
  uint64_t result;
  void *v3;

  result = swift_bridgeObjectRelease();
  v3 = *(void **)(a1 + 8);
  if (v3)
  {

    if (*(_QWORD *)(a1 + 40))
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *outlined init with copy of Notification(uint64_t a1, _QWORD *a2)
{
  initializeWithCopy for NSNotificationCenter.Notifications.NotificationWrapper(a2, a1);
  return a2;
}

_QWORD *initializeWithCopy for NSNotificationCenter.Notifications.NotificationWrapper(_QWORD *a1, uint64_t a2)
{
  void *v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  id v8;
  __int128 v9;

  v4 = *(void **)a2;
  *a1 = *(_QWORD *)a2;
  v5 = a1 + 1;
  v6 = (_OWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = v4;
  if (v7)
  {
    a1[4] = v7;
    (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v7 - 8))(v5, v6, v7);
  }
  else
  {
    v9 = v6[1];
    *v5 = *v6;
    v5[1] = v9;
  }
  a1[5] = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t NSNotificationCenter.notifications(named:object:)(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;

  type metadata accessor for NSNotificationCenter.Notifications();
  v5 = swift_allocObject();
  swift_unknownObjectRetain();
  NSNotificationCenter.Notifications.init(center:name:object:)(v2, a1, a2);
  return v5;
}

uint64_t type metadata accessor for NSNotificationCenter.Notifications()
{
  return objc_opt_self();
}

uint64_t outlined destroy of NSNotificationCenter.Notifications.State(uint64_t a1)
{
  destroy for NSNotificationCenter.Notifications.State(a1);
  return a1;
}

uint64_t destroy for NSNotificationCenter.Notifications.State(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of NSNotificationCenter.Notifications.State(_QWORD *a1, uint64_t a2)
{
  initializeWithCopy for NSNotificationCenter.Notifications.State(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for NSNotificationCenter.Notifications.State(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)a1 = *a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = a2 + 1;
  v6 = a2[4];
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }
  else
  {
    v7 = v5[1];
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v7;
  }
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t DateComponents.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  _BYTE v15[32];
  Swift::String v16;
  __int128 v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;

  v0 = type metadata accessor for Mirror();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  DateComponents.customMirror.getter((uint64_t)v3);
  v4 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v22 = 0;
  v23 = 0xE000000000000000;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((_QWORD *)&v21 + 1))
  {
    v13[1] = v4;
    do
    {
      v17 = v19;
      v18[0] = v20;
      v18[1] = v21;
      v16._countAndFlagsBits = 0;
      v16._object = (void *)0xE000000000000000;
      v5 = v19;
      v14 = v19;
      outlined init with copy of Any((uint64_t)v18, (uint64_t)v15);
      if (*((_QWORD *)&v5 + 1))
        v6 = v5;
      else
        v6 = 0;
      if (*((_QWORD *)&v5 + 1))
        v7 = (void *)*((_QWORD *)&v5 + 1);
      else
        v7 = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      v8._countAndFlagsBits = v6;
      v8._object = v7;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._countAndFlagsBits = 8250;
      v9._object = (void *)0xE200000000000000;
      String.append(_:)(v9);
      _print_unlocked<A, B>(_:_:)();
      v10._countAndFlagsBits = 32;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v17);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (*((_QWORD *)&v21 + 1));
    v11 = v22;
  }
  else
  {
    v11 = 0;
  }
  swift_release();
  swift_release();
  return v11;
}

uint64_t outlined destroy of (label: String?, value: Any)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String?, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DateComponents.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  unint64_t v58;
  _OWORD *v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  _OWORD *v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  unint64_t v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  unint64_t v87;
  unint64_t v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  unint64_t v92;
  unint64_t v93;
  _OWORD *v94;
  __int128 v95;
  __int128 v96;
  unint64_t v97;
  unint64_t v98;
  _OWORD *v99;
  __int128 v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  _OWORD *v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  _OWORD v117[18];
  _OWORD v118[18];

  v114 = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v118, v1, 0x11AuLL);
  v9 = MEMORY[0x1E0DEA968];
  if (!*(_QWORD *)&v118[0])
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v18 = *(_QWORD *)&v118[1];
    if (!*(_QWORD *)&v118[1])
      goto LABEL_12;
    goto LABEL_7;
  }
  v117[0] = v118[0];
  swift_unknownObjectRetain();
  v10 = Calendar.description.getter();
  v116 = v9;
  *(_QWORD *)&v115 = v10;
  *((_QWORD *)&v115 + 1) = v11;
  v117[0] = xmmword_182065140;
  outlined init with take of Any(&v115, &v117[1]);
  v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v14 = v12[2];
  v13 = v12[3];
  if (v14 >= v13 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
  v12[2] = v14 + 1;
  v15 = &v12[6 * v14];
  v16 = v117[0];
  v17 = v117[2];
  v15[3] = v117[1];
  v15[4] = v17;
  v15[2] = v16;
  swift_unknownObjectRelease();
  v18 = *(_QWORD *)&v118[1];
  if (*(_QWORD *)&v118[1])
  {
LABEL_7:
    v111 = v3;
    v112 = v5;
    v113 = v2;
    swift_getObjectType();
    *(_QWORD *)&v117[0] = v18;
    swift_unknownObjectRetain();
    v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v116 = v9;
    *(_QWORD *)&v115 = v19;
    *((_QWORD *)&v115 + 1) = v20;
    v117[0] = xmmword_182065150;
    outlined init with take of Any(&v115, &v117[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v22 = v12[2];
    v21 = v12[3];
    if (v22 >= v21 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v12);
    v3 = v111;
    v5 = v112;
    v12[2] = v22 + 1;
    v23 = &v12[6 * v22];
    v24 = v117[0];
    v25 = v117[2];
    v23[3] = v117[1];
    v23[4] = v25;
    v23[2] = v24;
    swift_unknownObjectRelease();
    v2 = v113;
  }
LABEL_12:
  v26 = MEMORY[0x1E0DEB418];
  if ((BYTE8(v118[2]) & 1) != 0)
  {
    if ((BYTE8(v118[3]) & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    v116 = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v115 = *(_QWORD *)&v118[2];
    v117[0] = xmmword_182065160;
    outlined init with take of Any(&v115, &v117[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v28 = v12[2];
    v27 = v12[3];
    if (v28 >= v27 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v12);
    v12[2] = v28 + 1;
    v29 = &v12[6 * v28];
    v30 = v117[0];
    v31 = v117[2];
    v29[3] = v117[1];
    v29[4] = v31;
    v29[2] = v30;
    if ((BYTE8(v118[3]) & 1) != 0)
    {
LABEL_14:
      if ((BYTE8(v118[4]) & 1) != 0)
        goto LABEL_15;
      goto LABEL_34;
    }
  }
  v116 = v26;
  *(_QWORD *)&v115 = *(_QWORD *)&v118[3];
  v117[0] = xmmword_182065170;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v33 = v12[2];
  v32 = v12[3];
  if (v33 >= v32 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v12);
  v12[2] = v33 + 1;
  v34 = &v12[6 * v33];
  v35 = v117[0];
  v36 = v117[2];
  v34[3] = v117[1];
  v34[4] = v36;
  v34[2] = v35;
  if ((BYTE8(v118[4]) & 1) != 0)
  {
LABEL_15:
    if ((BYTE8(v118[5]) & 1) != 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_34:
  v116 = v26;
  *(_QWORD *)&v115 = *(_QWORD *)&v118[4];
  v117[0] = xmmword_182065180;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v38 = v12[2];
  v37 = v12[3];
  if (v38 >= v37 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v12);
  v12[2] = v38 + 1;
  v39 = &v12[6 * v38];
  v40 = v117[0];
  v41 = v117[2];
  v39[3] = v117[1];
  v39[4] = v41;
  v39[2] = v40;
  if ((BYTE8(v118[5]) & 1) != 0)
  {
LABEL_16:
    if ((BYTE8(v118[7]) & 1) != 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_39:
  v116 = v26;
  *(_QWORD *)&v115 = *(_QWORD *)&v118[5];
  v117[0] = xmmword_182065190;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v43 = v12[2];
  v42 = v12[3];
  if (v43 >= v42 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v12);
  v12[2] = v43 + 1;
  v44 = &v12[6 * v43];
  v45 = v117[0];
  v46 = v117[2];
  v44[3] = v117[1];
  v44[4] = v46;
  v44[2] = v45;
  if ((BYTE8(v118[7]) & 1) != 0)
  {
LABEL_17:
    if ((BYTE8(v118[8]) & 1) != 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_44:
  v116 = v26;
  *(_QWORD *)&v115 = *(_QWORD *)&v118[7];
  v117[0] = xmmword_1820651A0;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v48 = v12[2];
  v47 = v12[3];
  if (v48 >= v47 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v12);
  v12[2] = v48 + 1;
  v49 = &v12[6 * v48];
  v50 = v117[0];
  v51 = v117[2];
  v49[3] = v117[1];
  v49[4] = v51;
  v49[2] = v50;
  if ((BYTE8(v118[8]) & 1) != 0)
  {
LABEL_18:
    if ((BYTE8(v118[9]) & 1) != 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_49:
  v116 = v26;
  *(_QWORD *)&v115 = *(_QWORD *)&v118[8];
  v117[0] = xmmword_1820651B0;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v53 = v12[2];
  v52 = v12[3];
  if (v53 >= v52 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, v12);
  v12[2] = v53 + 1;
  v54 = &v12[6 * v53];
  v55 = v117[0];
  v56 = v117[2];
  v54[3] = v117[1];
  v54[4] = v56;
  v54[2] = v55;
  if ((BYTE8(v118[9]) & 1) != 0)
  {
LABEL_19:
    if ((BYTE8(v118[10]) & 1) != 0)
      goto LABEL_20;
    goto LABEL_59;
  }
LABEL_54:
  v116 = v26;
  *(_QWORD *)&v115 = *(_QWORD *)&v118[9];
  v117[0] = xmmword_1820651C0;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v58 = v12[2];
  v57 = v12[3];
  if (v58 >= v57 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v58 + 1, 1, v12);
  v12[2] = v58 + 1;
  v59 = &v12[6 * v58];
  v60 = v117[0];
  v61 = v117[2];
  v59[3] = v117[1];
  v59[4] = v61;
  v59[2] = v60;
  if ((BYTE8(v118[10]) & 1) != 0)
  {
LABEL_20:
    if ((BYTE8(v118[11]) & 1) != 0)
      goto LABEL_21;
    goto LABEL_64;
  }
LABEL_59:
  v116 = v26;
  *(_QWORD *)&v115 = *(_QWORD *)&v118[10];
  v117[0] = xmmword_1820651D0;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v63 = v12[2];
  v62 = v12[3];
  if (v63 >= v62 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v62 > 1), v63 + 1, 1, v12);
  v12[2] = v63 + 1;
  v64 = &v12[6 * v63];
  v65 = v117[0];
  v66 = v117[2];
  v64[3] = v117[1];
  v64[4] = v66;
  v64[2] = v65;
  if ((BYTE8(v118[11]) & 1) != 0)
  {
LABEL_21:
    if ((BYTE8(v118[12]) & 1) != 0)
      goto LABEL_22;
    goto LABEL_69;
  }
LABEL_64:
  v116 = v26;
  *(_QWORD *)&v115 = *(_QWORD *)&v118[11];
  v117[0] = xmmword_1820651E0;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v68 = v12[2];
  v67 = v12[3];
  if (v68 >= v67 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v67 > 1), v68 + 1, 1, v12);
  v12[2] = v68 + 1;
  v69 = &v12[6 * v68];
  v70 = v117[0];
  v71 = v117[2];
  v69[3] = v117[1];
  v69[4] = v71;
  v69[2] = v70;
  if ((BYTE8(v118[12]) & 1) != 0)
  {
LABEL_22:
    if ((BYTE8(v118[13]) & 1) != 0)
      goto LABEL_79;
    goto LABEL_74;
  }
LABEL_69:
  v116 = v26;
  *(_QWORD *)&v115 = *(_QWORD *)&v118[12];
  v117[0] = xmmword_1820651F0;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v73 = v12[2];
  v72 = v12[3];
  if (v73 >= v72 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v72 > 1), v73 + 1, 1, v12);
  v12[2] = v73 + 1;
  v74 = &v12[6 * v73];
  v75 = v117[0];
  v76 = v117[2];
  v74[3] = v117[1];
  v74[4] = v76;
  v74[2] = v75;
  if ((BYTE8(v118[13]) & 1) == 0)
  {
LABEL_74:
    v116 = v26;
    *(_QWORD *)&v115 = *(_QWORD *)&v118[13];
    v117[0] = xmmword_182065200;
    outlined init with take of Any(&v115, &v117[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v78 = v12[2];
    v77 = v12[3];
    if (v78 >= v77 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v77 > 1), v78 + 1, 1, v12);
    v12[2] = v78 + 1;
    v79 = &v12[6 * v78];
    v80 = v117[0];
    v81 = v117[2];
    v79[3] = v117[1];
    v79[4] = v81;
    v79[2] = v80;
  }
LABEL_79:
  if ((BYTE8(v118[15]) & 1) != 0)
  {
    if ((BYTE8(v118[16]) & 1) != 0)
      goto LABEL_81;
  }
  else
  {
    v116 = v26;
    *(_QWORD *)&v115 = *(_QWORD *)&v118[15];
    v117[0] = xmmword_182065210;
    outlined init with take of Any(&v115, &v117[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v83 = v12[2];
    v82 = v12[3];
    if (v83 >= v82 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v82 > 1), v83 + 1, 1, v12);
    v12[2] = v83 + 1;
    v84 = &v12[6 * v83];
    v85 = v117[0];
    v86 = v117[2];
    v84[3] = v117[1];
    v84[4] = v86;
    v84[2] = v85;
    if ((BYTE8(v118[16]) & 1) != 0)
    {
LABEL_81:
      if ((BYTE8(v118[6]) & 1) != 0)
        goto LABEL_82;
      goto LABEL_94;
    }
  }
  v116 = v26;
  *(_QWORD *)&v115 = *(_QWORD *)&v118[16];
  v117[0] = xmmword_182065220;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v88 = v12[2];
  v87 = v12[3];
  if (v88 >= v87 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v87 > 1), v88 + 1, 1, v12);
  v12[2] = v88 + 1;
  v89 = &v12[6 * v88];
  v90 = v117[0];
  v91 = v117[2];
  v89[3] = v117[1];
  v89[4] = v91;
  v89[2] = v90;
  if ((BYTE8(v118[6]) & 1) != 0)
  {
LABEL_82:
    if ((BYTE8(v118[17]) & 1) != 0)
      goto LABEL_104;
    goto LABEL_99;
  }
LABEL_94:
  v116 = v26;
  *(_QWORD *)&v115 = *(_QWORD *)&v118[6];
  v117[0] = xmmword_182065230;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v93 = v12[2];
  v92 = v12[3];
  if (v93 >= v92 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v92 > 1), v93 + 1, 1, v12);
  v12[2] = v93 + 1;
  v94 = &v12[6 * v93];
  v95 = v117[0];
  v96 = v117[2];
  v94[3] = v117[1];
  v94[4] = v96;
  v94[2] = v95;
  if ((BYTE8(v118[17]) & 1) == 0)
  {
LABEL_99:
    *(_QWORD *)&v115 = *(_QWORD *)&v118[17];
    v116 = v26;
    *(_QWORD *)&v117[0] = 0xD000000000000011;
    *((_QWORD *)&v117[0] + 1) = 0x8000000182305840;
    outlined init with take of Any(&v115, &v117[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v98 = v12[2];
    v97 = v12[3];
    if (v98 >= v97 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v97 > 1), v98 + 1, 1, v12);
    v12[2] = v98 + 1;
    v99 = &v12[6 * v98];
    v100 = v117[0];
    v101 = v117[2];
    v99[3] = v117[1];
    v99[4] = v101;
    v99[2] = v100;
  }
LABEL_104:
  if (BYTE9(v118[17]) != 2)
  {
    v116 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v115) = BYTE9(v118[17]) & 1;
    v117[0] = xmmword_182065240;
    outlined init with take of Any(&v115, &v117[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    v103 = v12[2];
    v102 = v12[3];
    if (v103 >= v102 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v102 > 1), v103 + 1, 1, v12);
    v12[2] = v103 + 1;
    v104 = &v12[6 * v103];
    v105 = v117[0];
    v106 = v117[2];
    v104[3] = v117[1];
    v104[4] = v106;
    v104[2] = v105;
  }
  memcpy(v117, v118, 0x11AuLL);
  *(_QWORD *)&v115 = v12;
  v107 = *MEMORY[0x1E0DEDFB8];
  v108 = type metadata accessor for Mirror.DisplayStyle();
  v109 = *(_QWORD *)(v108 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v109 + 104))(v8, v107, v108);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v8, 0, 1, v108);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEDFE8], v2);
  outlined retain of DateComponents((uint64_t)v118);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t specialized _parseInteger<A>(_:)(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unint64_t result;
  BOOL v9;
  unint64_t v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  char v25;

  if (a2)
  {
    v2 = a1;
    v3 = *a1;
    if (v3 == 43)
    {
      if (a2 >= 2)
      {
        v13 = 0;
        v14 = &a1[a2];
        v15 = a1 + 1;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            break;
          result = 0;
          v17 = !is_mul_ok(v13, 0xAuLL);
          v18 = 10 * v13;
          v11 = __CFADD__(v18, v16);
          v13 = v18 + v16;
          v19 = v11;
          if (!v17 && (v19 & 1) == 0)
          {
            ++v15;
            result = v13;
            if (v15 < v14)
              continue;
          }
          return result;
        }
      }
    }
    else if (v3 == 45)
    {
      if (a2 >= 2)
      {
        v4 = 0;
        v5 = &a1[a2];
        v6 = a1 + 1;
        while (1)
        {
          v7 = *v6 - 48;
          if (v7 > 9)
            break;
          result = 0;
          v9 = !is_mul_ok(v4, 0xAuLL);
          v10 = 10 * v4;
          v11 = v10 >= v7;
          v4 = v10 - v7;
          v12 = !v11;
          if (!v9 && (v12 & 1) == 0)
          {
            ++v6;
            result = v4;
            if (v6 < v5)
              continue;
          }
          return result;
        }
      }
    }
    else
    {
      if (a2 < 1)
        return 0;
      v20 = 0;
      v21 = &a1[a2];
      while (1)
      {
        v22 = *v2 - 48;
        if (v22 > 9)
          break;
        result = 0;
        v23 = !is_mul_ok(v20, 0xAuLL);
        v24 = 10 * v20;
        v11 = __CFADD__(v24, v22);
        v20 = v24 + v22;
        v25 = v11;
        if (!v23 && (v25 & 1) == 0)
        {
          ++v2;
          result = v20;
          if (v2 < v21)
            continue;
        }
        return result;
      }
    }
  }
  return 0;
}

{
  int v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  char v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  char v23;

  if (a2)
  {
    v2 = *a1;
    if (v2 == 43)
    {
      if (a2 >= 2)
      {
        v12 = 0;
        v13 = a1 + 1;
        while (1)
        {
          v14 = *v13 - 48;
          if (v14 > 9)
            break;
          v6 = 0;
          v15 = 10 * v12;
          v16 = (v15 & 0xFFFFFFFF00000000) != 0;
          v9 = __CFADD__((_DWORD)v15, v14);
          v12 = v15 + v14;
          v17 = v9;
          v11 = 1;
          if (!v16 && (v17 & 1) == 0)
          {
            v11 = 0;
            ++v13;
            v6 = v12;
            if (v13 < &a1[a2])
              continue;
          }
          return v6 | ((unint64_t)v11 << 32);
        }
      }
    }
    else if (v2 == 45)
    {
      if (a2 >= 2)
      {
        v3 = 0;
        v4 = a1 + 1;
        while (1)
        {
          v5 = *v4 - 48;
          if (v5 > 9)
            break;
          v6 = 0;
          v7 = 10 * v3;
          v8 = (v7 & 0xFFFFFFFF00000000) != 0;
          v9 = v7 >= v5;
          v3 = v7 - v5;
          v10 = !v9;
          v11 = 1;
          if (!v8 && (v10 & 1) == 0)
          {
            v11 = 0;
            ++v4;
            v6 = v3;
            if (v4 < &a1[a2])
              continue;
          }
          return v6 | ((unint64_t)v11 << 32);
        }
      }
    }
    else
    {
      if (a2 < 1)
      {
        v6 = 0;
        v11 = 0;
        return v6 | ((unint64_t)v11 << 32);
      }
      v18 = 0;
      v19 = &a1[a2];
      while (1)
      {
        v20 = *a1 - 48;
        if (v20 > 9)
          break;
        v6 = 0;
        v21 = 10 * v18;
        v22 = (v21 & 0xFFFFFFFF00000000) != 0;
        v9 = __CFADD__((_DWORD)v21, v20);
        v18 = v21 + v20;
        v23 = v9;
        v11 = 1;
        if (!v22 && (v23 & 1) == 0)
        {
          v11 = 0;
          ++a1;
          v6 = v18;
          if (a1 < v19)
            continue;
        }
        return v6 | ((unint64_t)v11 << 32);
      }
    }
  }
  v6 = 0;
  v11 = 1;
  return v6 | ((unint64_t)v11 << 32);
}

{
  int v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  char v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  char v23;

  if (a2)
  {
    v2 = *a1;
    if (v2 == 43)
    {
      if (a2 >= 2)
      {
        v12 = 0;
        v13 = a1 + 1;
        while (1)
        {
          v14 = *v13 - 48;
          if (v14 > 9)
            break;
          v6 = 0;
          v15 = 10 * (int)v12;
          v16 = v15 != (int)v15;
          v9 = __OFADD__((_DWORD)v15, v14);
          v12 = v15 + v14;
          v17 = v9;
          v11 = 1;
          if (!v16 && (v17 & 1) == 0)
          {
            v11 = 0;
            ++v13;
            v6 = v12;
            if (v13 < &a1[a2])
              continue;
          }
          return v6 | ((unint64_t)v11 << 32);
        }
      }
    }
    else if (v2 == 45)
    {
      if (a2 >= 2)
      {
        v3 = 0;
        v4 = a1 + 1;
        while (1)
        {
          v5 = *v4 - 48;
          if (v5 > 9)
            break;
          v6 = 0;
          v7 = 10 * (int)v3;
          v8 = v7 != (int)v7;
          v9 = __OFSUB__((_DWORD)v7, v5);
          v3 = v7 - v5;
          v10 = v9;
          v11 = 1;
          if (!v8 && (v10 & 1) == 0)
          {
            v11 = 0;
            ++v4;
            v6 = v3;
            if (v4 < &a1[a2])
              continue;
          }
          return v6 | ((unint64_t)v11 << 32);
        }
      }
    }
    else
    {
      if (a2 < 1)
      {
        v6 = 0;
        v11 = 0;
        return v6 | ((unint64_t)v11 << 32);
      }
      v18 = 0;
      v19 = &a1[a2];
      while (1)
      {
        v20 = *a1 - 48;
        if (v20 > 9)
          break;
        v6 = 0;
        v21 = 10 * (int)v18;
        v22 = v21 != (int)v21;
        v9 = __OFADD__((_DWORD)v21, v20);
        v18 = v21 + v20;
        v23 = v9;
        v11 = 1;
        if (!v22 && (v23 & 1) == 0)
        {
          v11 = 0;
          ++a1;
          v6 = v18;
          if (a1 < v19)
            continue;
        }
        return v6 | ((unint64_t)v11 << 32);
      }
    }
  }
  v6 = 0;
  v11 = 1;
  return v6 | ((unint64_t)v11 << 32);
}

Swift::Void __swiftcall URL.appendPathComponent(_:)(Swift::String a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *object;
  unint64_t countAndFlagsBits;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::Bool v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  char v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 v40;
  char v41;
  char v42;
  char v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char v75;
  _BYTE v76[72];
  char v77;
  uint64_t v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  char v82;
  char v83;
  _BYTE v84[160];
  _BYTE v85[160];
  uint64_t v86[20];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[2];
  __int128 v96;
  _BYTE v97[80];
  __int128 v98;
  _BYTE v99[42];
  _BYTE v100[32];

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v5 = (id)*v1;
  v6 = v1[1];
  v7 = v1[2];
  if (_foundation_swift_url_feature_enabled())
  {
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(countAndFlagsBits, (uint64_t)object, 2, 0, (uint64_t)v5, v6);

LABEL_6:
      swift_release();
      swift_release();
LABEL_25:
      v6 = *((_QWORD *)&v96 + 1);
      v5 = (id)v96;
      v7 = *(_QWORD *)v97;
      goto LABEL_26;
    }
    v9._countAndFlagsBits = 47;
    v9._object = (void *)0xE100000000000000;
    v10 = String.hasSuffix(_:)(v9);
    swift_retain();
    v5 = v5;
    swift_retain();
    if ((_foundation_swift_url_feature_enabled() & 1) != 0)
    {
      *(_QWORD *)&v96 = v5;
      *((_QWORD *)&v96 + 1) = v6;
      *(_QWORD *)v97 = v7;
      URL.scheme.getter();
      if (v11)
      {
        v12 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v12._countAndFlagsBits == 1701603686 && v12._object == (void *)0xE400000000000000)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if ((v24 & 1) != 0)
        {
LABEL_21:
          *(_QWORD *)&v96 = countAndFlagsBits;
          *((_QWORD *)&v96 + 1) = object;
          swift_bridgeObjectRetain();
          String.init<A>(_:)();
          v25 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v26 = objc_msgSend(v5, sel_URLByAppendingPathComponent_, v25);
          swift_unknownObjectRelease();
          if (!v26)
          {
            LODWORD(v27) = 2;
LABEL_27:
            *(_QWORD *)&v96 = v5;
            *((_QWORD *)&v96 + 1) = v6;
            *(_QWORD *)v97 = v7;
            v29 = URL.absoluteString.getter();
            specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v29, v30, 1, (uint64_t)v86);
            outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)v85, &demangling cache variable for type metadata for URLComponents._URLComponents?);
            outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)&v87, &demangling cache variable for type metadata for URLComponents._URLComponents?);
            if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v87) != 1)
            {
              v98 = v93;
              *(_OWORD *)v99 = v94;
              *(_OWORD *)&v99[16] = v95[0];
              *(_OWORD *)&v99[26] = *(_OWORD *)((char *)v95 + 10);
              *(_OWORD *)&v97[16] = v89;
              *(_OWORD *)&v97[32] = v90;
              *(_OWORD *)&v97[48] = v91;
              *(_OWORD *)&v97[64] = v92;
              v96 = v87;
              *(_OWORD *)v97 = v88;
              outlined init with take of LocalePreferences?((uint64_t)v85, (uint64_t)v84, &demangling cache variable for type metadata for URLComponents._URLComponents?);
              outlined retain of URLComponents((uint64_t)v84);
              URLComponents._URLComponents.path.getter();
              outlined release of URLComponents?(v86);
              v31 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v73 = countAndFlagsBits;
              v74 = (unint64_t)object;
              swift_bridgeObjectRetain();
              String.init<A>(_:)();
              v32 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v33 = objc_msgSend(v31, sel_stringByAppendingPathComponent_, v32);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              v34 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
              v36 = v35;

              v37 = (v36 & 0x2000000000000000) != 0 ? HIBYTE(v36) & 0xF : v34 & 0xFFFFFFFFFFFFLL;
              outlined init with take of LocalePreferences?((uint64_t)&v98 + 8, (uint64_t)v100, &demangling cache variable for type metadata for String?);
              if (v37)
              {
                swift_bridgeObjectRetain();
                v37 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v34, v36);
                v39 = v38;
                swift_bridgeObjectRelease();
              }
              else
              {
                v39 = 0xE000000000000000;
              }
              outlined release of String((uint64_t)v100);
              if (!(_DWORD)v27
                || (_DWORD)v27 == 2
                || (v49._countAndFlagsBits = 47, v49._object = (void *)0xE100000000000000, String.hasSuffix(_:)(v49)))
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                v73 = v34;
                v74 = v36;
                swift_bridgeObjectRetain();
                v50._countAndFlagsBits = 47;
                v50._object = (void *)0xE100000000000000;
                String.append(_:)(v50);
                swift_bridgeObjectRelease();
                v51 = HIBYTE(v36) & 0xF;
                if ((v36 & 0x2000000000000000) == 0)
                  v51 = v73 & 0xFFFFFFFFFFFFLL;
                if (v51)
                {
                  v37 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v73, v74);
                  v53 = v52;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v39 = v53;
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v37 = 0;
                  v39 = 0xE000000000000000;
                }
              }
              v73 = v96;
              LOBYTE(v74) = 0;
              *(_DWORD *)((char *)&v74 + 1) = *(_DWORD *)((char *)&v96 + 9);
              *(_WORD *)((char *)&v74 + 5) = BYTE13(v96);
              HIBYTE(v74) = HIBYTE(v96);
              v75 = v97[0];
              *(_OWORD *)v76 = *(_OWORD *)&v97[8];
              *(_OWORD *)&v76[16] = *(_OWORD *)&v97[24];
              *(_OWORD *)&v76[32] = *(_OWORD *)&v97[40];
              *(_OWORD *)&v76[48] = *(_OWORD *)&v97[56];
              *(_QWORD *)&v76[64] = *(_QWORD *)&v97[72];
              v77 = v98;
              v78 = v37;
              v79 = v39;
              v80 = *(_OWORD *)&v99[8];
              v81 = *(_OWORD *)&v99[24];
              v82 = v99[40];
              v83 = v99[41];
              URLComponents.url.getter(&v70);
              outlined release of URLComponents((uint64_t)&v73);
              v46 = v70;
              if (v70)
              {
                v48 = v71;
                v47 = v72;
                swift_release();
                swift_release();

                goto LABEL_43;
              }
            }
            goto LABEL_26;
          }
LABEL_24:
          URL.init(reference:)(v26, &v96);
          swift_release();
          swift_release();

          goto LABEL_25;
        }
      }
      else
      {
        swift_release();
        swift_release();

      }
    }
    else
    {
      v23 = objc_msgSend(v5, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v23 & 1) != 0)
        goto LABEL_21;
    }
    v27 = v10;
    *(_QWORD *)&v96 = countAndFlagsBits;
    *((_QWORD *)&v96 + 1) = object;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    v28 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v26 = objc_msgSend(v5, sel_URLByAppendingPathComponent_isDirectory_, v28, v27);
    swift_unknownObjectRelease();
    if (!v26)
      goto LABEL_27;
    goto LABEL_24;
  }
  v8 = objc_msgSend(v5, sel_URLByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v8)
  {
    URL.init(reference:)(v8, &v96);

    goto LABEL_6;
  }
  *(_QWORD *)&v96 = v5;
  *((_QWORD *)&v96 + 1) = v6;
  *(_QWORD *)v97 = v7;
  v13 = URL.absoluteString.getter();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v13, v14, 1, (uint64_t)v86);
  outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)v85, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)&v87, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v87) != 1)
  {
    v98 = v93;
    *(_OWORD *)v99 = v94;
    *(_OWORD *)&v99[16] = v95[0];
    *(_OWORD *)&v99[26] = *(_OWORD *)((char *)v95 + 10);
    *(_OWORD *)&v97[16] = v89;
    *(_OWORD *)&v97[32] = v90;
    *(_OWORD *)&v97[48] = v91;
    *(_OWORD *)&v97[64] = v92;
    v96 = v87;
    *(_OWORD *)v97 = v88;
    outlined init with take of LocalePreferences?((uint64_t)v85, (uint64_t)v84, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v84);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v86);
    v15 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v16 = objc_msgSend(v15, sel_stringByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v17 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v20 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0)
      v20 = v17 & 0xFFFFFFFFFFFFLL;
    if (v20)
    {
      v21 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v17, v19);
      v68 = v22;
      v69 = v21;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v68 = 0xE000000000000000;
      v69 = 0;
    }
    v66 = v99[40];
    v67 = v99[41];
    v64 = *(_QWORD *)&v99[32];
    v65 = *(_QWORD *)&v99[24];
    v62 = *(_QWORD *)&v99[16];
    v63 = *(_QWORD *)&v99[8];
    v61 = v98;
    v60 = *(_OWORD *)&v97[64];
    v59 = *(_OWORD *)&v97[48];
    v58 = *(_OWORD *)&v97[32];
    v57 = *(_QWORD *)&v97[8];
    v56 = *(_OWORD *)&v97[16];
    v54 = HIBYTE(v96);
    v55 = v97[0];
    v40 = BYTE13(v96);
    v41 = BYTE12(v96);
    v42 = BYTE11(v96);
    v43 = BYTE10(v96);
    v44 = BYTE9(v96);
    v45 = v96;
    outlined init with take of LocalePreferences?((uint64_t)&v98 + 8, (uint64_t)v100, &demangling cache variable for type metadata for String?);
    outlined release of String((uint64_t)v100);
    v73 = v45;
    LOBYTE(v74) = 0;
    BYTE1(v74) = v44;
    BYTE2(v74) = v43;
    BYTE3(v74) = v42;
    BYTE4(v74) = v41;
    *(_WORD *)((char *)&v74 + 5) = v40;
    HIBYTE(v74) = v54;
    v75 = v55;
    *(_QWORD *)v76 = v57;
    *(_OWORD *)&v76[8] = v56;
    *(_OWORD *)&v76[24] = v58;
    *(_OWORD *)&v76[40] = v59;
    *(_OWORD *)&v76[56] = v60;
    v77 = v61;
    v78 = v69;
    v79 = v68;
    *(_QWORD *)&v80 = v63;
    *((_QWORD *)&v80 + 1) = v62;
    *(_QWORD *)&v81 = v65;
    *((_QWORD *)&v81 + 1) = v64;
    v82 = v66;
    v83 = v67;
    URLComponents.url.getter(&v70);
    outlined release of URLComponents((uint64_t)&v73);
    v46 = v70;
    if (v70)
    {
      v48 = v71;
      v47 = v72;

      swift_release();
      swift_release();
LABEL_43:
      v5 = (id)v46;
      v6 = v48;
      v7 = v47;
    }
  }
LABEL_26:
  *v2 = v5;
  v2[1] = v6;
  v2[2] = v7;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> PredicateExpressions.Value<A>(_QWORD *a1)
{
  return PredicateExpressions.Value<A>.encode(to:)(a1);
}

uint64_t PredicateExpressions.Value<A>.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString.CharacterView> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString.CharacterView>, MEMORY[0x1E0DEC908]);
}

uint64_t type metadata completion function for Predicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t TupleTypeMetadata;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v18[2];

  v18[0] = "(";
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 == 1)
  {
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(319, *(_QWORD *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFELL), a3, a4);
    if (v7 > 0x3F)
      return TupleTypeMetadata;
    TupleTypeMetadata = swift_checkMetadataState();
    if (v8 > 0x3F)
      return TupleTypeMetadata;
LABEL_9:
    v18[1] = *(_QWORD *)(TupleTypeMetadata - 8) + 64;
    swift_initStructMetadata();
    return 0;
  }
  MEMORY[0x1E0C80A78](a1);
  if (v5)
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
    v13 = (_QWORD *)((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    v14 = v5;
    do
    {
      v15 = *v12++;
      *v13++ = type metadata accessor for PredicateExpressions.Variable(255, v15, v9, v10);
      --v14;
    }
    while (v14);
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  if (v16 <= 0x3F)
    goto LABEL_9;
  return TupleTypeMetadata;
}

uint64_t PredicateExpressions.Value.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 10302;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18205C850;
  *(_QWORD *)(v5 + 56) = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v5 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(boxed_opaque_existential_1, v1, v2);
  debugPrint<A>(_:separator:terminator:to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0x3C65756C6156;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Predicate<Pack{repeat A}>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Predicate.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t Predicate.init(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  char v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char v16;
  _QWORD v17[5];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v17);
  if (one-time initialization token for predicateArchivingState != -1)
    swift_once();
  v8 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (v8)
  {
    v9 = 0;
    v10 = (uint64_t *)(*v8 + 16);
    v11 = (uint64_t *)(*v8 + 24);
  }
  else
  {
    if (one-time initialization token for standardConfiguration != -1)
      swift_once();
    v10 = &static PredicateCodableConfiguration.standardConfiguration;
    v11 = &qword_1EDC3C640;
    v9 = byte_1EDC3C648;
  }
  v12 = *v11;
  v13 = *v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15[0] = v13;
  v15[1] = v12;
  v16 = v9;
  Predicate.init(from:configuration:)(v17, (uint64_t)v15, a2, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t Predicate.init(from:configuration:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t *v8;
  uint64_t MetatypeMetadata;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t TupleTypeMetadata2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  _QWORD *v102;
  __int128 v103[2];
  __int128 v104[2];
  uint64_t v105[2];
  char v106;
  char v107[8];
  uint64_t v108;
  uint64_t v109;
  char v110;

  v5 = a4;
  v102 = a1;
  v8 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  v85 = a5;
  if (a3 == 1)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
    v10 = MetatypeMetadata;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a3)
    {
      v13 = v8;
      v14 = (uint64_t *)((char *)&v80 - v12);
      v15 = a3;
      do
      {
        ++v13;
        *v14++ = swift_getMetatypeMetadata();
        --v15;
      }
      while (v15);
    }
    MetatypeMetadata = swift_getTupleTypeMetadata();
    v10 = MetatypeMetadata;
  }
  MEMORY[0x1E0C80A78](MetatypeMetadata);
  v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
  v100 = &v80;
  v95 = v5;
  v94 = v18;
  v89 = v8;
  v88 = v10;
  v87 = v17;
  if (a3 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255, *v8, v19, v20);
    TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x1E0C80A78](v18);
    v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a3)
    {
      v26 = v8;
      v27 = (uint64_t *)((char *)&v80 - v25);
      v28 = a3;
      do
      {
        v29 = *v26++;
        *v27++ = type metadata accessor for PredicateExpressions.Variable(255, v29, v22, v23);
        --v28;
      }
      while (v28);
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v5 = v95;
  }
  v90 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v99 = &v80;
  v92 = TupleTypeMetadata2;
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v84 = (uint64_t)&v80 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = &v80;
  MEMORY[0x1E0C80A78](v32);
  v86 = (uint64_t)&v80 - v33;
  v97 = &v80;
  MEMORY[0x1E0C80A78](v34);
  v93 = (uint64_t)&v80 - v35;
  v37 = type metadata accessor for Predicate(0, a3, v5, v36);
  v96 = &v80;
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v40 = (char *)&v80 - v39;
  v41 = *(_QWORD *)a2;
  LODWORD(v91) = *(unsigned __int8 *)(a2 + 16);
  __swift_project_boxed_opaque_existential_1(v102, v102[3]);
  v42 = v101;
  v43 = dispatch thunk of Decoder.unkeyedContainer()();
  if (v42)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v44 = (char)v91;
    v82 = v40;
    v80 = v38;
    v81 = v37;
    v45 = v93 + *(int *)(v92 + 48);
    MEMORY[0x1E0C80A78](v43);
    v50 = (char *)&v80 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
    v83 = v51;
    v101 = 0;
    if (a3)
    {
      v52 = 0;
      v53 = (int *)(v90 + 32);
      do
      {
        if (a3 == 1)
          v54 = 0;
        else
          v54 = *v53;
        *(_QWORD *)&v50[8 * v52++] = v45 + v54;
        v53 += 4;
      }
      while (a3 != v52);
      MEMORY[0x1E0C80A78](v46);
      v58 = (char *)&v80 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
      v59 = 0;
      v60 = (int *)(v88 + 32);
      v61 = v41;
      v62 = v87;
      v64 = v63;
      do
      {
        if (a3 == 1)
          v65 = 0;
        else
          v65 = *v60;
        v66 = &v62[v65];
        *(_QWORD *)v66 = *(_QWORD *)(v56 + 8 * v59);
        *(_QWORD *)&v58[8 * v59++] = v66;
        v60 += 4;
      }
      while (a3 != v59);
      v67 = v55;
    }
    else
    {
      v67 = v47;
      v58 = &v110;
      v61 = v41;
      v64 = v48;
    }
    v105[0] = v61;
    v105[1] = v64;
    v106 = v44;
    v69 = v108;
    v68 = v109;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v107, v108);
    v70 = v101;
    UnkeyedDecodingContainer.decodePredicateExpression<A>(input:predicateConfiguration:)(v67, (uint64_t)v50, (uint64_t)v58, v105, a3, v69, v95, v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v70)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
    }
    else
    {
      v101 = 0;
      v71 = v92;
      v72 = v67;
      v73 = v86 + *(int *)(v92 + 48);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v72, v86);
      v74 = v90;
      v95 = *(_QWORD *)(v90 - 8);
      v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16);
      v91(v73, v45, v90);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of any PredicateExpression<Self.Output == B1>(v103, (uint64_t)v104);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v104, (uint64_t)v82);
        v75 = *(int *)(v71 + 48);
        v76 = v84;
        v77 = v84 + v75;
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v93, v84);
        v91(v77, v45, v74);
        v78 = v81;
        (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(&v82[*(int *)(v81 + 36)], v77, v74);
        __swift_destroy_boxed_opaque_existential_1(v76);
        __swift_destroy_boxed_opaque_existential_1(v93);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
        (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v85, v82, v78);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      }
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v107, (uint64_t)v103);
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError.dataCorruptedError(in:debugDescription:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1(v93);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
}

uint64_t type metadata accessor for Predicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Predicate);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressionCodingKeys, &type metadata for PredicateExpressionCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressionCodingKeys, &type metadata for PredicateExpressionCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressionCodingKeys, &type metadata for PredicateExpressionCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressionCodingKeys, &type metadata for PredicateExpressionCodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for PredicateArchivingState()
{
  return objc_opt_self();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x186DA9D58](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t Predicate.evaluate(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t TupleTypeMetadata;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  void (*v39)(char *, uint64_t, uint64_t, __n128);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char **v43;
  uint64_t *v44;
  int *v45;
  int *v46;
  uint64_t v47;
  int v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char **v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[3];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v5 = v4;
  v7 = a1;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = 8 * v8;
  v68 = v8;
  if (v8 == 1)
  {
    v10 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0, *v10, a3, a4);
    v12 = *(_QWORD *)(TupleTypeMetadata - 8);
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v14 = (char *)&v58 - v13;
    type metadata accessor for PredicateExpressions.Variable(255, *v10, v15, v16);
    v17 = v12;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v19 = TupleTypeMetadata2;
  }
  else
  {
    v66 = (char **)v4;
    MEMORY[0x1E0C80A78](a1);
    v22 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (v8)
    {
      v23 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v24 = (uint64_t *)((char *)&v58 - v22);
      v25 = v68;
      do
      {
        v26 = *v23++;
        *v24++ = type metadata accessor for PredicateExpressions.Variable(255, v26, v20, v21);
        --v25;
      }
      while (v25);
    }
    v27 = v68;
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v65 = *(_QWORD *)(TupleTypeMetadata - 8);
    MEMORY[0x1E0C80A78](TupleTypeMetadata);
    v67 = (char *)&v58 - v28;
    v63 = &v58;
    MEMORY[0x1E0C80A78](v29);
    v32 = (uint64_t *)((char *)&v58 - v22);
    if (v27)
    {
      v33 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      v34 = v32;
      v35 = v68;
      do
      {
        v36 = *v33++;
        type metadata accessor for PredicateExpressions.Variable(255, v36, v30, v31);
        *v34++ = swift_getTupleTypeMetadata2();
        --v35;
      }
      while (v35);
    }
    v8 = v68;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata();
    v19 = TupleTypeMetadata2;
    v5 = (uint64_t)v66;
    v14 = v67;
    v17 = v65;
  }
  v63 = &v58;
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v67 = (char *)&v58 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v5, (uint64_t)v71);
  v60 = v73;
  v61 = v72;
  v59 = __swift_project_boxed_opaque_existential_1(v71, v72);
  v62 = &v58;
  v38 = MEMORY[0x1E0C80A78](v59);
  v66 = (char **)((char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
  v40 = v14;
  v39(v14, v5 + *(int *)(a2 + 36), TupleTypeMetadata, v38);
  v65 = *(_QWORD *)(a2 + 24);
  if (v8)
  {
    v43 = v66;
    v44 = (uint64_t *)(v65 & 0xFFFFFFFFFFFFFFFELL);
    v45 = (int *)(TupleTypeMetadata + 32);
    v46 = (int *)(v19 + 32);
    v47 = v8;
    do
    {
      if (v8 == 1)
        v52 = 0;
      else
        v52 = *v46;
      v53 = *v44;
      type metadata accessor for PredicateExpressions.Variable(255, *v44, v41, v42);
      v54 = swift_getTupleTypeMetadata2();
      if (v68 == 1)
        v48 = 0;
      else
        v48 = *v45;
      v49 = &v67[v52];
      v50 = &v49[*(int *)(v54 + 48)];
      *(_QWORD *)v49 = *(_QWORD *)&v40[v48];
      v51 = *v7++;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v50, v51, v53);
      *v43++ = v49;
      v45 += 4;
      v46 += 4;
      ++v44;
      --v47;
      v8 = v68;
    }
    while (v47);
  }
  PredicateBindings.init<each A>(_:)((uint64_t)v66, v8, v65, v42, &v70);
  v69 = v70;
  v55 = (char)v59;
  v56 = v64;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*(_QWORD *)(v60 + 8) + 16))(&v74, &v69, v61);
  swift_bridgeObjectRelease();
  if (!v56)
    v55 = v74;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
  return v55 & 1;
}

uint64_t type metadata accessor for PredicateExpressions.Variable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateExpressions.Variable);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Equal<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.Equal.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

uint64_t PredicateExpressions.Equal.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v6 = a2[4];
  v7 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v21 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v20 - v13;
  v15 = *a1;
  v22 = v15;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v6 + 16))(&v22, v7, v6, v12);
  if (!v3)
  {
    v16 = v9;
    v22 = v15;
    v17 = v21;
    (*(void (**)(uint64_t *, _QWORD))(a2[5] + 16))(&v22, a2[3]);
    v2 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v16 + 8);
    v19(v17, AssociatedTypeWitness);
    v19(v14, AssociatedTypeWitness);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Variable<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.Variable.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.Variable.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[2];

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v15 - v9;
  v11 = *a1;
  v15[0] = *v3;
  v15[1] = v11;
  PredicateBindings.subscript.getter(v15, v6, (uint64_t)v10);
  v12 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v6) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v10, v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
  swift_allocError();
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_BYTE *)(v13 + 16) = 3;
  return swift_willThrow();
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Value<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return PredicateExpressions.Value.evaluate(_:)(a1, a2);
}

uint64_t PredicateExpressions.Value.evaluate(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateBindings.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 16);
  if (v7)
  {
    v8 = *a1;
    v9 = v6 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of (id: PredicateExpressions.VariableID, value: Any)(v9, (uint64_t)&v12);
      if ((_QWORD)v12 == v8)
        break;
      outlined destroy of Any?((uint64_t)&v12, &demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
      v9 += 40;
      if (!--v7)
        goto LABEL_7;
    }
    v15 = v12;
    v16 = v13;
    v17 = v14;
    swift_bridgeObjectRelease();
    if (v17)
    {
      outlined init with take of Any((__int128 *)((char *)&v15 + 8), &v12);
      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    swift_bridgeObjectRelease();
  }
  outlined destroy of Any?((uint64_t)&v15, &demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any)?);
  v12 = 0u;
  v13 = 0u;
LABEL_9:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v10 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v10 ^ 1u, 1, a2);
}

uint64_t outlined init with copy of (id: PredicateExpressions.VariableID, value: Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PredicateBindings.init<each A>(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  _QWORD *v6;
  unint64_t **v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v19)(__n128);
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  unint64_t *v42;
  uint64_t *v43;
  char *v44;
  unint64_t *v45;
  uint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  if (a2)
  {
    v38 = a5;
    v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
    v41 = (_OWORD *)((char *)v47 + 8);
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v37 = a3 & 0xFFFFFFFFFFFFFFFELL;
    v39 = result;
    v40 = a2;
    v7 = (unint64_t **)result;
    do
    {
      v46 = a2;
      v43 = v5;
      v8 = *v5;
      v9 = *v7;
      type metadata accessor for PredicateExpressions.Variable(255, *v5, a3, a4);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v45 = &v37;
      v11 = *(_QWORD *)(*(_QWORD *)(TupleTypeMetadata2 - 8) + 64);
      v12 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
      v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
      v15 = *(int *)(v14 + 48);
      v16 = *v9;
      *(unint64_t *)((char *)&v37 - v13) = *v9;
      v17 = *(_QWORD *)(v8 - 8);
      v18 = v6;
      v19 = *(uint64_t (**)(__n128))(v17 + 16);
      v44 = (char *)&v37 + v15 - v13;
      v20 = v19(v12);
      v42 = &v37;
      v21 = MEMORY[0x1E0C80A78](v20);
      v22 = *(int *)(TupleTypeMetadata2 + 48);
      v23 = (char *)&v37 + v22 - v13;
      ((void (*)(char *, char *, uint64_t, __n128))v19)(v23, (char *)v9 + v22, v8, v21);
      v6 = v18;
      v50 = v8;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v49);
      (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 32))(boxed_opaque_existential_1, v23, v8);
      *(_QWORD *)&v47[0] = v16;
      outlined init with take of Any(&v49, v41);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      v26 = v6[2];
      v25 = v6[3];
      if (v26 >= v25 >> 1)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v6);
      v6[2] = v26 + 1;
      v27 = &v6[5 * v26];
      v28 = v47[0];
      v29 = v47[1];
      v27[8] = v48;
      *((_OWORD *)v27 + 2) = v28;
      *((_OWORD *)v27 + 3) = v29;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v44, v8);
      ++v7;
      v5 = v43 + 1;
      a2 = v46 - 1;
    }
    while (v46 != 1);
    *v38 = v6;
    v30 = v37 - 8;
    v31 = v39 - 8;
    v32 = v40;
    do
    {
      v33 = v32 - 1;
      v34 = 8 * v32;
      v35 = *(_QWORD *)(v31 + v34);
      type metadata accessor for PredicateExpressions.Variable(255, *(_QWORD *)(v30 + v34), a3, a4);
      v36 = swift_getTupleTypeMetadata2();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
      v32 = v33;
    }
    while (v33);
  }
  else
  {
    *a5 = MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1, a2);
}

uint64_t _JSONUnkeyedEncodingContainer.encode(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v2 + 8);
  type metadata accessor for JSONReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = 0;
  if (*(_BYTE *)(v5 + 32) == 3)
  {
    v11 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_BYTE *)(v5 + 32) = 7;
    swift_bridgeObjectRetain();
    v7 = swift_retain();
    MEMORY[0x186DA4AFC](v7);
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v8 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 16) = v11;
    *(_QWORD *)(v5 + 24) = 0;
    v10 = *(_BYTE *)(v5 + 32);
    *(_BYTE *)(v5 + 32) = 3;
    outlined consume of JSONReference.Backing(v8, v9, v10);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.milliseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1 / 1000.0;
  *a2 = result;
  return result;
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute()
{
  return 0x7463656C666E69;
}

BOOL specialized static NSNotificationCenter.Publisher.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  _BOOL8 result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  if (*(_QWORD *)a1 != *a2)
    return 0;
  v3 = (void *)a2[1];
  v4 = a2[2];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(a1 + 8));
  v8 = v7;
  if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)(v3) && v8 == v9)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v11 & 1) == 0)
      return result;
  }
  result = (v5 | v4) == 0;
  if (v5)
  {
    if (v4)
      return v5 == v4;
    else
      return v5 == 0;
  }
  return result;
}

void static Duration.UnitsFormatStyle.UnitWidth.narrow.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 2;
  *(_DWORD *)(a1 + 4) = 2;
}

ValueMetadata *type metadata accessor for NSScanner.NumberRepresentation()
{
  return &type metadata for NSScanner.NumberRepresentation;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Weekday()
{
  return &type metadata for Date.FormatStyle.Symbol.Weekday;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Month()
{
  return &type metadata for Date.FormatStyle.Symbol.Month;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Day()
{
  return &type metadata for Date.FormatStyle.Symbol.Day;
}

void static Date.FormatStyle.Symbol.YearForWeekOfYear.defaultDigits.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
}

uint64_t _NSRange.init<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  dispatch thunk of RangeExpression.relative<A>(to:)();
  result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v9, result))
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    return v10;
  }
  return result;
}

uint64_t AttributedString.init(_:attributes:)@<X0>(uint64_t *a1@<X4>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7[3];

  v3 = *a1;
  v4 = a1[1];
  BigString.init(_:)();
  result = AttributedString.init(_:attributes:)(v7, v3, v4, &v6);
  *a2 = v6;
  return result;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  free(v1);
}

uint64_t JSONEncoder.outputFormatting.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v2 = *a1;
  v3 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(_QWORD *)(v1 + 16) = v2;
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void Data.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_181950304()
{
  uint64_t v0;

  Hasher._combine(_:)(BYTE6(v0));
  return Hasher.combine(bytes:)();
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle(a1, a2, a3, a4, a5, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, a6, type metadata accessor for NSDecimal.FormatStyle, 0, (int64_t)&unk_1E0F428F8);
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X7>, uint64_t a7@<X8>, uint64_t (*a8)(_QWORD), int a9, int64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;

  v12 = v10;
  v33 = a4;
  v34 = a5;
  v31 = a3;
  v32 = a9;
  v16 = __swift_instantiateConcreteTypeFromMangledName(a6);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICUNumberFormatter.Signature(v12, (uint64_t)v18, a8);
  v18[*(int *)(v16 + 36)] = 0;
  v19 = specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, v31, v33, v34, (uint64_t (*)(_QWORD, __n128))a8, v32, a6, a10);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  result = outlined destroy of Any?((uint64_t)v18, a6);
  if ((v25 & 0x100000000) != 0)
    v27 = 0;
  else
    v27 = v19;
  if ((v25 & 0x100000000) != 0)
    v28 = 0;
  else
    v28 = v21;
  if ((v25 & 0x100000000) != 0)
    v29 = 0;
  else
    v29 = v23;
  if ((v25 & 0x100000000) != 0)
    v30 = 0;
  else
    v30 = v25;
  *(_QWORD *)a7 = v27;
  *(_QWORD *)(a7 + 8) = v28;
  *(_QWORD *)(a7 + 16) = v29;
  *(_DWORD *)(a7 + 24) = v30;
  *(_BYTE *)(a7 + 28) = BYTE4(v25) & 1;
  return result;
}

void specialized static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[2];
  uint64_t v17;

  v17 = a2;
  v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v3);
  v16[1] = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v8);
  MEMORY[0x1E0C80A78](v9);
  MEMORY[0x1E0C80A78](v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ICULegacyNumberFormatter.NumberFormatType, ICULegacyNumberFormatter.NumberFormatType));
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v16 + *(int *)(v13 + 48) - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(a1, (uint64_t)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v17, (uint64_t)v14);
  v15 = (char *)sub_18195080C + 4 * byte_1820E3844[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18195080C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v0, v2);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ICUNumberFormatter.Signature(v2, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    outlined destroy of (ICULegacyNumberFormatter.NumberFormatType, ICULegacyNumberFormatter.NumberFormatType)(v0);
    v4 = 0;
  }
  else
  {
    outlined init with take of ICUNumberFormatter.Signature(v3, v1, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    v4 = static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(v2, v1);
    outlined destroy of ICUNumberFormatter.Signature(v1, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    outlined destroy of ICUNumberFormatter.Signature(v2, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    outlined destroy of ICUNumberFormatter.Signature(v0, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  }
  return v4 & 1;
}

uint64_t outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, __n128))type metadata accessor for NSDecimal.FormatStyle, 0, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, (int64_t)&unk_1E0F428F8);
}

{
  return specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, __n128))type metadata accessor for NSDecimal.FormatStyle.Percent, 1, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>, (int64_t)&unk_1E0F428D0);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t ObjectType;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  char *v81;
  int64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[4];
  uint64_t v97[3];

  v92 = a1;
  v8 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  v94 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v94 + 64);
  MEMORY[0x1E0C80A78](v8);
  v95 = (uint64_t)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v79 - v11;
  v13 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (uint64_t *)((char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = a3;
  if (a3 >> 14 >= a5 >> 14)
    goto LABEL_10;
  v90 = a5;
  v87 = a2;
  v19 = v93;
  outlined init with copy of ICUNumberFormatter.Signature(v93, (uint64_t)v15, type metadata accessor for NSDecimal.FormatStyle.Currency);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v15 + *(int *)(v13 + 24), (uint64_t)v18, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  swift_storeEnumTagMultiPayload();
  v20 = *v15;
  v21 = v15[1];
  swift_unknownObjectRetain();
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v15, type metadata accessor for NSDecimal.FormatStyle.Currency);
  v22 = *(_BYTE *)(v19
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>)
                          + 36));
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v18, (uint64_t)v12, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  ObjectType = swift_getObjectType();
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 64);
  swift_unknownObjectRetain_n();
  v25 = v24(ObjectType, v21);
  v27 = v26;
  v93 = v20;
  swift_unknownObjectRelease();
  v28 = (uint64_t *)&v12[*(int *)(v8 + 20)];
  *v28 = v25;
  v28[1] = v27;
  v86 = v8;
  v12[*(int *)(v8 + 24)] = v22;
  v88 = v18;
  if (one-time initialization token for cache != -1)
    swift_once();
  v30 = static ICULegacyNumberFormatter.cache;
  v29 = unk_1EDC3B320;
  v31 = v95;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v12, v95, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v32 = (*(unsigned __int8 *)(v94 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
  v89 = swift_allocObject();
  outlined init with take of ICUNumberFormatter.Signature(v31, v89 + v32, type metadata accessor for ICULegacyNumberFormatter.Signature);
  v33 = (uint64_t *)(v29 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 24));
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v29 + 16, (uint64_t)v12, v96);
  os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 24));
  swift_release();
  if (v96[0])
  {
    swift_release();
LABEL_6:
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v12, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    v34 = String.subscript.getter();
    v36 = v35;
    v38 = v37;
    v40 = v39;
    v97[0] = 0;
    specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)(v34, v35, v37, v39, v97);
    if ((v41 & 0x100000000) == 0)
    {
      v96[0] = v34;
      v96[1] = v36;
      v96[2] = v38;
      v96[3] = v40;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      v42 = String.Index.init<A>(utf16Offset:in:)();
      swift_unknownObjectRelease();
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v88, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      v43 = 0;
LABEL_11:
      LOBYTE(v96[0]) = v43;
      return v42;
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v88, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
LABEL_10:
    v42 = 0;
    v43 = 1;
    goto LABEL_11;
  }
  implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  v85 = v45;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 24));
  v46 = *(_QWORD *)(*(_QWORD *)(v29 + 16) + 16);
  v84 = *(_QWORD *)(v29 + 16);
  if (v30 >= v46)
    swift_bridgeObjectRetain();
  else
    *v33 = MEMORY[0x1E0DEE9E0];
  v47 = v85;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v97[0] = *v33;
  v49 = v97[0];
  *v33 = 0x8000000000000000;
  v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
  v52 = *(_QWORD *)(v49 + 16);
  v53 = (v50 & 1) == 0;
  v54 = v52 + v53;
  if (__OFADD__(v52, v53))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v49 + 24) < v54)
    {
      v55 = v50;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v54, isUniquelyReferenced_nonNull_native);
      v56 = v97[0];
      v57 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
      if ((v55 & 1) != (v58 & 1))
        goto LABEL_65;
      v51 = v57;
      if ((v55 & 1) == 0)
        goto LABEL_61;
LABEL_22:
      v59 = *(_QWORD *)(v56 + 56);
      v60 = 8 * v51;
      swift_release();
      *(_QWORD *)(v59 + v60) = v85;
LABEL_62:
      *(_QWORD *)(v29 + 16) = v56;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 24));
      swift_release_n();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v56 = v49;
      if ((v50 & 1) != 0)
        goto LABEL_22;
LABEL_61:
      v78 = v51;
      outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v12, v31, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v78, v31, v47, (_QWORD *)v56);
      goto LABEL_62;
    }
  }
  v79 = v51;
  v80 = v50;
  v81 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  v61 = static _DictionaryStorage.copy(original:)();
  v56 = v61;
  if (!*(_QWORD *)(v49 + 16))
  {
LABEL_60:
    swift_bridgeObjectRelease();
    v12 = v81;
    v31 = v95;
    v47 = v85;
    v51 = v79;
    if ((v80 & 1) != 0)
      goto LABEL_22;
    goto LABEL_61;
  }
  v62 = (char *)(v61 + 64);
  v63 = 1 << *(_BYTE *)(v56 + 32);
  v83 = (char *)(v49 + 64);
  v64 = (unint64_t)(v63 + 63) >> 6;
  if (v56 != v49 || v62 >= &v83[8 * v64])
    memmove(v62, v83, 8 * v64);
  v86 = 0;
  *(_QWORD *)(v56 + 16) = *(_QWORD *)(v49 + 16);
  v65 = 1 << *(_BYTE *)(v49 + 32);
  v66 = -1;
  if (v65 < 64)
    v66 = ~(-1 << v65);
  v67 = v66 & *(_QWORD *)(v49 + 64);
  v82 = (unint64_t)(v65 + 63) >> 6;
  v68 = v95;
  while (1)
  {
    if (v67)
    {
      v69 = __clz(__rbit64(v67));
      v67 &= v67 - 1;
      v70 = v69 | (v86 << 6);
      goto LABEL_32;
    }
    v74 = v86 + 1;
    if (__OFADD__(v86, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    if (v74 >= v82)
      goto LABEL_60;
    v75 = *(_QWORD *)&v83[8 * v74];
    v76 = v86 + 1;
    if (!v75)
    {
      v76 = v86 + 2;
      if (v86 + 2 >= v82)
        goto LABEL_60;
      v75 = *(_QWORD *)&v83[8 * v76];
      if (!v75)
      {
        v76 = v86 + 3;
        if (v86 + 3 >= v82)
          goto LABEL_60;
        v75 = *(_QWORD *)&v83[8 * v76];
        if (!v75)
        {
          v76 = v86 + 4;
          if (v86 + 4 >= v82)
            goto LABEL_60;
          v75 = *(_QWORD *)&v83[8 * v76];
          if (!v75)
          {
            v76 = v86 + 5;
            if (v86 + 5 >= v82)
              goto LABEL_60;
            v75 = *(_QWORD *)&v83[8 * v76];
            if (!v75)
            {
              v76 = v86 + 6;
              if (v86 + 6 >= v82)
                goto LABEL_60;
              v75 = *(_QWORD *)&v83[8 * v76];
              if (!v75)
              {
                v76 = v86 + 7;
                if (v86 + 7 >= v82)
                  goto LABEL_60;
                v75 = *(_QWORD *)&v83[8 * v76];
                if (!v75)
                {
                  v76 = v86 + 8;
                  if (v86 + 8 >= v82)
                    goto LABEL_60;
                  v75 = *(_QWORD *)&v83[8 * v76];
                  if (!v75)
                  {
                    v76 = v86 + 9;
                    if (v86 + 9 >= v82)
                      goto LABEL_60;
                    v75 = *(_QWORD *)&v83[8 * v76];
                    if (!v75)
                      break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_59:
    v67 = (v75 - 1) & v75;
    v86 = v76;
    v70 = __clz(__rbit64(v75)) + (v76 << 6);
LABEL_32:
    v71 = *(_QWORD *)(v94 + 72) * v70;
    outlined init with copy of ICUNumberFormatter.Signature(*(_QWORD *)(v49 + 48) + v71, v68, type metadata accessor for ICULegacyNumberFormatter.Signature);
    v72 = 8 * v70;
    v73 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v70);
    outlined init with take of ICUNumberFormatter.Signature(v68, *(_QWORD *)(v56 + 48) + v71, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(_QWORD *)(*(_QWORD *)(v56 + 56) + v72) = v73;
    swift_retain();
  }
  v77 = v86 + 10;
  if (v86 + 10 >= v82)
    goto LABEL_60;
  v75 = *(_QWORD *)&v83[8 * v77];
  if (v75)
  {
    v76 = v86 + 10;
    goto LABEL_59;
  }
  while (1)
  {
    v76 = v77 + 1;
    if (__OFADD__(v77, 1))
      break;
    if (v76 >= v82)
      goto LABEL_60;
    v75 = *(_QWORD *)&v83[8 * v76];
    ++v77;
    if (v75)
      goto LABEL_59;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NSDecimal.FormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle);
}

uint64_t type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for ICULegacyNumberFormatter.NumberFormatType);
}

_OWORD *initializeWithCopy for NSDecimal.FormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v5[8] = *((_BYTE *)a2 + v4 + 8);
  *(_QWORD *)v5 = *(_QWORD *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a2 + v4 + 57);
  v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *((_OWORD *)v5 + 2) = *(_OWORD *)((char *)a2 + v4 + 32);
  *((_OWORD *)v5 + 3) = v7;
  *((_OWORD *)v5 + 1) = v8;
  v5[73] = *((_BYTE *)a2 + v4 + 73);
  *((_WORD *)v5 + 37) = *(_WORD *)((char *)a2 + v4 + 74);
  v5[76] = *((_BYTE *)a2 + v4 + 76);
  v5[77] = *((_BYTE *)a2 + v4 + 77);
  v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v10 = v9[9];
  v11 = &v5[v10];
  v12 = &v6[v10];
  v13 = type metadata accessor for FloatingPointRoundingRule();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_unknownObjectRetain();
  if (v15(v12, 1, v13))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = v9[10];
  v18 = &v5[v17];
  v19 = &v6[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v5[v9[11]] = v6[v9[11]];
  return a1;
}

uint64_t type metadata accessor for CurrencyFormatStyleConfiguration.Collection(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for CurrencyFormatStyleConfiguration.Collection);
}

uint64_t outlined init with take of ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t dispatch thunk of JSONDecoder.keyDecodingStrategy.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

void sub_181950D5C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181950D7C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x181950D34);
}

NSUncaughtExceptionHandler *NSGetUncaughtExceptionHandler(void)
{
  return (NSUncaughtExceptionHandler *)_CFDoExceptionOperation();
}

void base witness table accessor for CustomCombineIdentifierConvertible in Notification.Subscription<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t type metadata accessor for KeyPathComparator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyPathComparator);
}

uint64_t static EncodableAttributedStringKey<>.encode(_:to:)(uint64_t a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v11;
  id v12[6];

  v12[5] = *(id *)MEMORY[0x1E0C80C00];
  v12[0] = 0;
  v3 = objc_msgSend((id)objc_opt_self(), sel_archivedDataWithRootObject_requiringSecureCoding_error_, a1, 1, v12);
  if (v3)
  {
    v4 = v3;
    v5 = v12[0];
    v6 = v4;
    v7 = specialized Data.init(referencing:)(v6);
    v9 = v8;

    __swift_project_boxed_opaque_existential_1(a2, a2[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, (uint64_t)v12[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation((uint64_t)v7, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    if (v12[0])
    {
      v12[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v11 = (id)_nilObjCError;
    }
    return swift_willThrow();
  }
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReplacementIndexAttribute()
{
  return 0xD000000000000012;
}

unint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.AgreementConceptAttribute()
{
  return 0xD000000000000010;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute()
{
  return 0xD000000000000021;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute()
{
  return 0x6F6C6F6870726F6DLL;
}

uint64_t initializeWithCopy for AttributedString.Runs.Run(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void static String.Encoding.ascii.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void specialized static Int64._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v3 = objc_msgSend(a1, sel_longLongValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithLongLong_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_QWORD *)a2 = v3;
    *(_BYTE *)(a2 + 8) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 544175136;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0x3436746E49;
    v8._object = (void *)0xE500000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

void *___iOSStyleReceipt_block_invoke()
{
  return dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 256);
}

unint64_t Range<>.init(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized Range<>.init<A>(_:_genericIn:)(a1, a2, a3, a4);
}

unint64_t specialized Range<>.init<A>(_:_genericIn:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t result;
  char v9;

  if (a1 == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  v4 = (a4 & 0x2000000000000000) != 0 ? HIBYTE(a4) & 0xF : a3 & 0xFFFFFFFFFFFFLL;
  v5 = String.UTF16View.index(_:offsetBy:limitedBy:)();
  if ((v6 & 1) != 0)
    return 0;
  v7 = v5;
  result = String.UTF16View.index(_:offsetBy:limitedBy:)();
  if ((v9 & 1) != 0 || result >> 14 > 4 * v4)
    return 0;
  if (result >> 14 >= v7 >> 14)
    return v7;
  __break(1u);
  return result;
}

uint64_t initializeWithCopy for AttributedString.Runs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_retain();
  return a1;
}

CFCharacterSetRef CharacterSet.subtracting(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return __CharacterSetStorage.subtracting(_:)(*a1, a2);
}

CFCharacterSetRef __CharacterSetStorage.subtracting(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v3;
  const __CFCharacterSet *v4;
  CFCharacterSetRef result;
  CFCharacterSetRef v6;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 24);
  v4 = (const __CFCharacterSet *)*(id *)(a1 + 16);
  result = CFCharacterSetCreateInvertedSet(0, v4);
  v6 = result;
  if ((v3 & 1) != 0)
  {
    if (result)
    {
LABEL_5:

      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v6;
      *(_BYTE *)(v7 + 24) = 0;
      __CharacterSetStorage.union(_:)(v7, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98310], a2);
      return (CFCharacterSetRef)swift_release();
    }
    __break(1u);
  }
  if (result)
    goto LABEL_5;
  __break(1u);
  return result;
}

uint64_t CharacterSet.union(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return __CharacterSetStorage.union(_:)(*a1, (void (*)(uint64_t, _QWORD))MEMORY[0x1E0C98348], a2);
}

uint64_t __CharacterSetStorage.union(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, _QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v7;
  char v8;
  const __CFCharacterSet *v9;
  uint64_t result;
  uint64_t v11;

  v7 = *(void **)(v3 + 16);
  v8 = *(_BYTE *)(v3 + 24);
  v9 = v7;
  result = (uint64_t)CFCharacterSetCreateMutableCopy(0, v9);
  v11 = result;
  if ((v8 & 1) != 0)
  {
    if (result)
    {
LABEL_5:

      a2(v11, *(_QWORD *)(a1 + 16));
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v11;
      *(_BYTE *)(result + 24) = 1;
      *a3 = result;
      return result;
    }
    __break(1u);
  }
  if (result)
    goto LABEL_5;
  __break(1u);
  return result;
}

unint64_t _NSProcessInfoGetPowerState()
{
  if (_NSProcessInfoGetPowerState_once != -1)
    dispatch_once(&_NSProcessInfoGetPowerState_once, &__block_literal_global_146);
  return atomic_load(&_NSProcessInfoGetPowerState_powerState);
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

id NSUnitLength.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)(a1, a2, &lazy cache variable for type metadata for NSUnitLength, (uint64_t)off_1E0F112E0);
}

Swift::Void __swiftcall URL.removeCachedResourceValue(forKey:)(NSURLResourceKey forKey)
{
  id *v1;

  objc_msgSend(*v1, sel_removeCachedResourceValueForKey_, forKey);
}

uint64_t __dictionaryThatCanCode_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  result = objc_msgSend(a3, "conformsToProtocol:", &unk_1EDCC2CC8);
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 32), "removeObjectForKey:", a2);
  return result;
}

void sub_181951C78(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t type metadata accessor for _MutablePairHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MutablePairHandle);
}

uint64_t type metadata instantiation function for PredicateExpressions.DictionaryKeyDefaultValueSubscript()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata instantiation function for PredicateExpressions.OptionalFlatMap()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata instantiation function for FloatingPointParseStrategy()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata instantiation function for Measurement.CodingKeys()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t Notification.Subscription.__deallocating_deinit()
{
  uint64_t v0;

  MEMORY[0x186DA9E78](*(_QWORD *)(v0 + 16), -1, -1);
  MEMORY[0x186DA9E78](*(_QWORD *)(v0 + 24), -1, -1);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

id Error.localizedDescription.getter(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v2 + 16))(v5, v6, a1, v3);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v7, v5, a1);
  }
  v8 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_localizedDescription);
  swift_unknownObjectRelease();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return v9;
}

void URL.appending<A>(path:directoryHint:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;

  MEMORY[0x1E0C80A78](a1);
  v5 = *v4;
  if (!_foundation_swift_url_feature_enabled())
  {
    dispatch thunk of StringProtocol.hasSuffix(_:)();
    __asm { BR              X10 }
  }
  URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, 0, a2);
}

uint64_t PredicateExpressions.Variable.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x656C626169726156;
}

BOOL partial apply for closure #1 in Sequence.sorted<A, B>(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return Sequence.compare<A>(_:_:)(a1, a2, v2[3], v2[4], v2[6], v2[7]) == -1;
}

uint64_t Sequence.compare<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25[1] = a5;
  v29 = a2;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v25 - v14;
  v26 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v22 = (char *)v25 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v26 + 16))(v18, v27, a3, v20);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, a4) == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, a4);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 24))(a1, v29, a4, a6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a4);
    if (v23)
      goto LABEL_6;
  }
  v23 = 0;
LABEL_6:
  (*(void (**)(char *, uint64_t))(v28 + 8))(v22, AssociatedTypeWitness);
  return v23;
}

uint64_t getEnumTagSinglePayload for KeyPathComparator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t ___collectionClasses_block_invoke()
{
  id v0;
  uint64_t result;
  _QWORD v2[12];

  v2[11] = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v2[0] = MEMORY[0x1E0C99D20];
  v2[1] = MEMORY[0x1E0C99DE8];
  v2[2] = MEMORY[0x1E0C99D80];
  v2[3] = MEMORY[0x1E0C99E08];
  v2[4] = MEMORY[0x1E0C99E20];
  v2[5] = MEMORY[0x1E0C99E60];
  v2[6] = MEMORY[0x1E0C99E10];
  v2[7] = MEMORY[0x1E0C99E40];
  v2[8] = MEMORY[0x1E0C99E20];
  v2[9] = NSHashTable;
  v2[10] = NSPointerArray;
  result = objc_msgSend(v0, "initWithArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 11));
  qword_1ECD09B70 = result;
  return result;
}

ValueMetadata *type metadata accessor for NSRunLoop.SchedulerTimeType()
{
  return &type metadata for NSRunLoop.SchedulerTimeType;
}

id @objc static NSCalendar._autoupdatingCurrent.getter()
{
  return specialized static NSCalendar._autoupdatingCurrent.getter();
}

id specialized static NSCalendar._autoupdatingCurrent.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  objc_class *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  __int128 v7;
  objc_super v8;
  __int128 v9;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static CalendarCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v0, (uint64_t *)&v9);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  v2 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  v7 = v9;
  v3 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 16) = v7;
  *(_QWORD *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v4;
  v5 = *MEMORY[0x1E0C996C8];
  v8.receiver = v3;
  v8.super_class = v2;
  result = objc_msgSendSuper2(&v8, sel_initWithCheckedCalendarIdentifier_, v5);
  if (!result)
    __break(1u);
  return result;
}

id NSUnitPressure.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)(a1, a2, &lazy cache variable for type metadata for NSUnitPressure, (uint64_t)off_1E0F11318);
}

id _LocaleICU.collatorIdentifier.getter()
{
  uint64_t v0;
  id v1;
  const __CFAllocator *v2;
  const __CFString *v3;
  __CFString *CanonicalLanguageIdentifierFromString;
  const __CFAllocator *v5;
  const __CFString *v6;
  __CFString *v7;
  _BYTE v9[144];
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;

  outlined init with take of LocalePreferences?(v0 + 40, (uint64_t)v9);
  outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v10);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v10) == 1)
    goto LABEL_2;
  if (v12)
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    v3 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    swift_bridgeObjectRetain();
    CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v2, v3);
    swift_unknownObjectRelease();
    if (CanonicalLanguageIdentifierFromString)
    {
      v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
      swift_bridgeObjectRelease();

      outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
      return v1;
    }
    swift_bridgeObjectRelease();
    outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    return 0;
  }
  if (v11 && *(_QWORD *)(v11 + 16))
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    v6 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    swift_bridgeObjectRetain();
    v7 = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v5, v6);
    swift_unknownObjectRelease();
    if (v7)
    {
      v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

      outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
      swift_bridgeObjectRelease();
      return v1;
    }
    outlined retain of LocalePreferences?((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_2:
  v1 = *(id *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void AttributedString.subscript.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (*(_QWORD *)(*a1 + 184) == *(_QWORD *)(*a1 + 568))
  {
    **(_QWORD **)(v1 + 560) = *(_QWORD *)(v1 + 112);
    swift_retain();
    swift_release();
    swift_release();
    free((void *)v1);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

id NSString.init(stringLiteral:)(void *a1, uint64_t a2, char a3)
{
  unint64_t v3;
  uint64_t v4;
  id result;
  id v6;
  int v7;
  uint64_t v8;

  v3 = (unint64_t)a1;
  v8 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) == 0)
  {
    if (!a1)
    {
      __break(1u);
      goto LABEL_15;
    }
    if ((a3 & 2) != 0)
      v4 = 1;
    else
      v4 = 4;
    v3 = (unint64_t)objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytesNoCopy_length_encoding_freeWhenDone_, a1, a2, v4, 0);
    if (v3)
      goto LABEL_13;
    __break(1u);
  }
  if (HIDWORD(v3))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v3 >> 11 == 27)
    goto LABEL_17;
  if (WORD1(v3) > 0x10u)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  v7 = v3;
  result = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, &v7, 4, 2348810496);
  if (result)
  {
    v3 = (unint64_t)result;
LABEL_13:
    v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithString_, v3);

    return v6;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption;
}

uint64_t one-time initialization function for vmOpsThreshold()
{
  uint64_t result;

  if (one-time initialization token for _pageSize != -1)
    result = swift_once();
  if ((unint64_t)(_pageSize - 0x2000000000000000) >> 62 == 3)
    static __DataStorage.vmOpsThreshold = 4 * _pageSize;
  else
    __break(1u);
  return result;
}

uint64_t static Dictionary._forceBridgeFromObjectiveC(_:result:)(void *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t result;
  id v13;
  _QWORD *v14;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  char isEscapingClosureAtFileLocation;
  _QWORD v50[8];
  __int128 aBlock;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v53;
  uint64_t (*v54)();
  uint64_t v55;
  uint64_t v56;
  id v57;

  v10 = MEMORY[0x1E0DEA968];
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  if (a3 == v10 && a4 == MEMORY[0x1E0DEE9B8] + 8)
  {
    result = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (result)
      goto LABEL_10;
    v13 = objc_msgSend(a1, sel_count);
    if (v13)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v14 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v14 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v18 = (_QWORD *)v14[6];
    v19 = v14[7];
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v18, v19, a1, (uint64_t)v13);
    if (result < 0 || (uint64_t)v13 < result)
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v14[2] = result;
    if (!result)
    {
LABEL_34:
      result = swift_release();
      *a2 = v14;
      return result;
    }
    v20 = result - 1;
    v21 = v14 + 8;
    while (1)
    {
      while (1)
      {
        if (((*(_QWORD *)((char *)v21 + (((unint64_t)v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
          goto LABEL_26;
        v26 = (uint64_t *)(v14[6] + 16 * v20);
        v27 = *v26;
        v28 = v26[1];
        swift_bridgeObjectRetain();
        v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
        v31 = v30;
        swift_bridgeObjectRelease();
        if ((v31 & 1) == 0)
          break;
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v32 = v14[2];
        v33 = __OFSUB__(v32, 1);
        v34 = v32 - 1;
        if (v33)
        {
          __break(1u);
          goto LABEL_41;
        }
        v14[2] = v34;
LABEL_26:
        if (--v20 < 0)
          goto LABEL_34;
      }
      *(_QWORD *)((char *)v21 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      if (v20 < (uint64_t)v29)
      {
        *(_OWORD *)(v14[6] + 16 * v29) = *(_OWORD *)(v14[6] + 16 * v20);
        v22 = v14[7];
        v23 = (_OWORD *)(v22 + 32 * v20);
        v24 = v23[1];
        v25 = (_OWORD *)(v22 + 32 * v29);
        *v25 = *v23;
        v25[1] = v24;
        goto LABEL_26;
      }
      if (v29 == v20)
        goto LABEL_26;
      v35 = v14[6];
      v36 = (uint64_t *)(v35 + 16 * v29);
      v37 = (uint64_t *)(v35 + 16 * v20);
      v38 = *v36;
      v39 = v36[1];
      v40 = v37[1];
      *v36 = *v37;
      v36[1] = v40;
      *v37 = v38;
      v37[1] = v39;
      v41 = v14[7];
      v42 = (_OWORD *)(v41 + 32 * v29);
      v43 = (_OWORD *)(v41 + 32 * v20);
      outlined init with take of Any(v42, &aBlock);
      outlined init with take of Any(v43, v42);
      outlined init with take of Any(&aBlock, v43);
      if (v20 < 0)
        goto LABEL_34;
    }
  }
  result = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (result)
  {
LABEL_10:
    *a2 = result;
    return result;
  }
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (_swift_isClassOrObjCExistentialType() & 1) != 0)
  {
    result = (uint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
    *a2 = ~((unint64_t)result >> 1) & 0x4000000000000000 | result;
    return result;
  }
  if (*(uint64_t *)(*(_QWORD *)(a3 - 8) + 72) >= 8 && *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) > 7)
  {
    v44 = objc_msgSend(a1, sel_count);
    MEMORY[0x1E0C80A78](v44);
    v50[2] = a3;
    v50[3] = a4;
    v50[4] = a5;
    v50[5] = a1;
    v50[6] = v45;
    result = _NativeDictionary.init(_unsafeUninitializedCapacity:allowingDuplicates:initializingWith:)(v45, a3 == v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:), (uint64_t)v50, a3, a4);
    goto LABEL_10;
  }
  v16 = objc_msgSend(a1, sel_count);
  if (v16)
  {
    type metadata accessor for _DictionaryStorage();
    v17 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v17 = MEMORY[0x1E0DEE9E0];
  }
  v56 = v17;
  v57 = v16;
  v46 = (_QWORD *)swift_allocObject();
  v46[2] = a3;
  v46[3] = a4;
  v46[4] = a5;
  v46[5] = &v56;
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:)partial apply;
  *(_QWORD *)(v47 + 24) = v46;
  v54 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v55 = v47;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v52 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v53 = &block_descriptor_15;
  v48 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateKeysAndObjectsUsingBlock_, v48);
  _Block_release(v48);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    goto LABEL_42;
  if (*(id *)(v56 + 16) != v57)
  {
LABEL_43:
    __break(1u);
    return result;
  }
  *a2 = v56;
  return swift_release();
}

_QWORD *Locale.calendar.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5[2];

  v1 = *v0;
  v2 = v0[1];
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v2 + 192))(ObjectType, v2);
  v5[0] = v1;
  v5[1] = v2;
  swift_unknownObjectRetain();
  return Calendar.locale.setter(v5);
}

uint64_t protocol witness for _LocaleProtocol.calendar.getter in conformance _LocaleICU@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 184);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.calendar.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

void partial apply for closure #1 in _LocaleICU.calendar.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #1 in _LocaleICU.calendar.getter(a1, v2, a2);
}

void closure #1 in _LocaleICU.calendar.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[18];
  _BYTE v32[144];
  _BYTE v33[48];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  _LocaleICU._lockedCalendarIdentifier(_:)(a1, v33);
  v6 = v33[0];
  if (one-time initialization token for cache != -1)
    swift_once();
  v7 = static CalendarCache.cache + 16;
  v8 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in CalendarCache.fixed(_:)(v7, v6, &v36);
  if (!v3)
  {
    os_unfair_lock_unlock(v8);
    swift_release_n();
    v10 = *((_QWORD *)&v36 + 1);
    v9 = v36;
    ObjectType = swift_getObjectType();
    outlined init with take of LocalePreferences?(a2 + 40, (uint64_t)v32);
    outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v33);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v33) == 1)
    {
LABEL_22:
      *a3 = v9;
      a3[1] = v10;
      return;
    }
    v12 = v34;
    if (v34 && *(_QWORD *)(v34 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v14 & 1) != 0))
    {
      v15 = 0;
      v37 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
      v16 = v35;
      if (!v35)
        goto LABEL_16;
    }
    else
    {
      v37 = 0;
      v15 = 1;
      v16 = v35;
      if (!v35)
        goto LABEL_16;
    }
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
      if ((v18 & 1) != 0)
      {
        v19 = 0;
        v20 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
        if (v15)
        {
LABEL_17:
          outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v31);
          outlined retain of LocalePreferences(v31);
LABEL_18:
          if ((v19 & 1) == 0)
          {
            v25 = swift_getObjectType();
            if (v20 != (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 72))(v25, v10))
            {
              v31[0] = 0;
              v31[1] = 0;
              v29 = 0;
              v30 = 0;
              v26 = (*(uint64_t (**)(_QWORD *, uint64_t *, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 112))(v31, &v29, 0, 1, v20, 0, v25, v10);
              v10 = v27;
              swift_unknownObjectRelease();
              v9 = v26;
            }
          }
          outlined retain of LocalePreferences?((uint64_t)v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
          goto LABEL_22;
        }
LABEL_14:
        v21 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 56);
        outlined init with take of LocalePreferences?((uint64_t)v32, (uint64_t)v31);
        outlined retain of LocalePreferences(v31);
        v22 = v21(ObjectType, v10);
        if (v37 != v22)
        {
          v29 = 0;
          v30 = 0;
          v28[0] = 0;
          v28[1] = 0;
          v23 = (*(uint64_t (**)(uint64_t *, _QWORD *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v10 + 112))(&v29, v28, v37, 0, 0, 1, ObjectType, v10);
          v10 = v24;
          swift_unknownObjectRelease();
          v9 = v23;
        }
        goto LABEL_18;
      }
    }
LABEL_16:
    v20 = 0;
    v19 = 1;
    if (v15)
      goto LABEL_17;
    goto LABEL_14;
  }
  os_unfair_lock_unlock(v8);
  __break(1u);
}

uint64_t JSONDecoder.userInfo.modify(_QWORD *a1)
{
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)a1[2];
  *(_QWORD *)(a1[1] + a1[3] + 104) = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.markdownName.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute()
{
  return 0x746E657265666572;
}

BOOL static DateInterval.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance IndexSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.union(_:) in conformance IndexSet(a1, a2, a3, (void (*)(void))IndexSet.symmetricDifference(_:));
}

uint64_t IndexSet.formIntersection(_:)(_QWORD *a1)
{
  return IndexSet.formUnion(_:)(a1, (void (*)(uint64_t *__return_ptr, _QWORD *))IndexSet.intersection(_:));
}

uint64_t Locale.Region.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E0DEA628], a3);
}

uint64_t Calendar.date(byAdding:to:wrappingComponents:)(void *__src, double *a2, uint64_t a3)
{
  uint64_t v3;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t ObjectType;
  double v11;
  _BYTE __dst[288];

  memcpy(__dst, __src, 0x11AuLL);
  v6 = *a2;
  v7 = *(_QWORD *)(v3 + 8);
  if (*a2 > 1.59271755e13)
    v6 = 1.59271755e13;
  v8 = fmax(v6, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v11 = v8;
  return (*(uint64_t (**)(_BYTE *, double *, uint64_t, uint64_t, uint64_t))(v7 + 200))(__dst, &v11, a3, ObjectType, v7);
}

uint64_t type metadata completion function for NSKeyValueObservedChange()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IndexSet.RangeView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date, &type metadata for Date);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

void ___explicitSubclassExceptions_block_invoke()
{
  const __CFAllocator *v0;
  const __CFDictionary *v1;
  __CFDictionary *v2;
  Class v3;
  __CFDictionary *v4;
  Class v5;
  __CFDictionary *v6;
  Class v7;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)_explicitSubclassExceptionKeys, (const void **)_explicitSubclassExceptionObjects, 20, 0, 0);
  qword_1ECD09B80 = (uint64_t)CFDictionaryCreateMutableCopy(v0, 21, v1);
  CFRelease(v1);
  v2 = (__CFDictionary *)qword_1ECD09B80;
  v3 = NSClassFromString((NSString *)CFSTR("NSSharedKeyDictionary"));
  CFDictionaryAddValue(v2, v3, MEMORY[0x1E0C99E08]);
  v4 = (__CFDictionary *)qword_1ECD09B80;
  v5 = NSClassFromString((NSString *)CFSTR("__NSCFString"));
  CFDictionaryAddValue(v4, v5, NSMutableString);
  v6 = (__CFDictionary *)qword_1ECD09B80;
  v7 = NSClassFromString((NSString *)CFSTR("__NSCFConstantString"));
  CFDictionaryAddValue(v6, v7, NSMutableString);
}

void base witness table accessor for CustomCombineIdentifierConvertible in NSObject.KVOSubscription<A, B, C>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t (*JSONDecoder.userInfo.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;

  v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  v4 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  a1[3] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  *a1 = *(_QWORD *)(v1 + v4 + 104);
  swift_bridgeObjectRetain();
  return JSONDecoder.userInfo.modify;
}

void static Measurement<>.FormatStyle.UnitWidth.wide.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

double NSOrderedSet.makeIterator()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = swift_unknownObjectRetain();
  return NSFastEnumerationIterator.init(_:)(v2, a1);
}

uint64_t _NSCoderIsAppleSigningIdentifier(void *a1)
{
  uint64_t result;
  uint64_t v2;
  int v3;
  const char *v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  memset(v6, 0, 76);
  result = objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v6, 76, 0, 1, 0, 0, objc_msgSend(a1, "length"), 0);
  if ((_DWORD)result)
  {
    v2 = 0;
    BYTE11(v6[4]) = 0;
    do
      v3 = *((unsigned __int8 *)v6 + v2++);
    while ((v3 - 65) < 0x1A || (v3 - 48) < 0xA);
    v5 = (const char *)v6;
    if (v2 == 1)
      return strncmp(v5, "com.apple.", 0xAuLL) == 0;
    if (v3 == 46)
    {
      v5 = (char *)v6 + v2;
      return strncmp(v5, "com.apple.", 0xAuLL) == 0;
    }
    return 0;
  }
  return result;
}

unint64_t CharacterSet.remove(_:)(UTF32Char a1)
{
  uint64_t v1;
  int IsLongCharacterMember;
  uint64_t v4;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(_QWORD *)v1 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(*(_QWORD *)v1 + 16), a1);
  __CharacterSetStorage.insert(charactersIn:)(a1 | ((unint64_t)a1 << 32), (void (*)(void))MEMORY[0x1E0C98338]);
  if (IsLongCharacterMember)
    v4 = a1;
  else
    v4 = 0;
  return v4 | ((unint64_t)(IsLongCharacterMember == 0) << 32);
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance CharacterSet(_DWORD *a1, unsigned int *a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *v2 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.insert(charactersIn:)(v4 | (v4 << 32), (void (*)(void))MEMORY[0x1E0C982A0]);
  *a1 = v4;
  return 1;
}

void __CharacterSetStorage.insert(charactersIn:)(unint64_t a1, void (*a2)(void))
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  void *v5;
  int v6;
  const __CFCharacterSet *v7;
  CFMutableCharacterSetRef MutableCopy;
  CFMutableCharacterSetRef v9;
  __CFCharacterSet *v10;
  void *v11;

  v3 = a1;
  v4 = HIDWORD(a1);
  v5 = *(void **)(v2 + 16);
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
  {
    v6 = v4 - v3;
    if (v4 >= v3)
    {
      if (v6 != -1)
      {
        ((void (*)(void *, _QWORD, _QWORD))a2)(v5, v3, (v6 + 1));
        return;
      }
      goto LABEL_11;
    }
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v7 = v5;
  MutableCopy = CFCharacterSetCreateMutableCopy(0, v7);
  if (MutableCopy)
  {
    if (v4 >= v3)
    {
      if ((_DWORD)v4 - v3 != -1)
      {
        v9 = MutableCopy;
        v10 = MutableCopy;
        a2();

        v11 = *(void **)(v2 + 16);
        *(_QWORD *)(v2 + 16) = v9;
        *(_BYTE *)(v2 + 24) = 1;

        return;
      }
      goto LABEL_12;
    }
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
}

{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  void *v5;
  const __CFCharacterSet *v6;
  CFMutableCharacterSetRef MutableCopy;
  CFMutableCharacterSetRef v8;
  __CFCharacterSet *v9;
  void *v10;

  v3 = a1;
  v4 = HIDWORD(a1);
  v5 = *(void **)(v2 + 16);
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
  {
    if (v4 >= v3)
    {
      ((void (*)(void *, _QWORD, _QWORD))a2)(v5, v3, v4 - v3);
      return;
    }
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = v5;
  MutableCopy = CFCharacterSetCreateMutableCopy(0, v6);
  if (MutableCopy)
  {
    if (v4 >= v3)
    {
      v8 = MutableCopy;
      v9 = MutableCopy;
      a2();

      v10 = *(void **)(v2 + 16);
      *(_QWORD *)(v2 + 16) = v8;
      *(_BYTE *)(v2 + 24) = 1;

      return;
    }
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.AgreementConceptAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name);
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name);
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name);
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2, &one-time initialization token for name, &static AttributeScopes.FoundationAttributes.MorphologyAttribute.name);
}

void sub_181954F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

void static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
  type metadata accessor for PredicateExpressions.Equal();
}

uint64_t sub_181955558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v3 + *(int *)(a1 + 60), v2, v1);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Equal<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.Equal<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

void PredicateExpressions.Equal<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[16];

  v13[5] = a5;
  v13[6] = a4;
  v13[9] = a3;
  v13[4] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13[7] = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v13[8] = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[10] = v8;
  v13[11] = v8;
  v13[12] = v9;
  v13[13] = v10;
  v13[14] = v11;
  v13[15] = v12;
  type metadata accessor for PredicateExpressions.Equal();
}

uint64_t sub_18195567C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  *(_QWORD *)(v4 - 200) = v6;
  *(_QWORD *)(v4 - 192) = a1;
  *(_QWORD *)(v4 - 72) = v2;
  v10 = *(_QWORD *)(v4 - 152);
  v11 = v3;
  *(_QWORD *)(v4 - 184) = v8;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  v12 = *(_QWORD *)(v4 - 144);
  v13 = *(_QWORD *)(v4 - 128);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v4 - 184), v12, v13);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v14 = *(_QWORD *)(v4 - 192);
  v15 = *(_QWORD *)(v4 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 176) + 32))(v15 + *(int *)(v14 + 60), v10, v11);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  v16 = *(_QWORD *)(v4 - 200);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v16 + 16))(*(_QWORD *)(v4 - 168), v15, v14);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v14);
}

void type metadata accessor for PredicateExpressions.Equal()
{
  JUMPOUT(0x186DA9CBCLL);
}

unint64_t lazy protocol witness table accessor for type LocaleCache.State.IdentifierAndPrefs and conformance LocaleCache.State.IdentifierAndPrefs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocaleCache.State.IdentifierAndPrefs and conformance LocaleCache.State.IdentifierAndPrefs;
  if (!lazy protocol witness table cache variable for type LocaleCache.State.IdentifierAndPrefs and conformance LocaleCache.State.IdentifierAndPrefs)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for LocaleCache.State.IdentifierAndPrefs, &type metadata for LocaleCache.State.IdentifierAndPrefs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocaleCache.State.IdentifierAndPrefs and conformance LocaleCache.State.IdentifierAndPrefs);
  }
  return result;
}

uint64_t destroy for PredicateExpressions.Comparison(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v4);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t destroy for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

void Data._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X11 }
}

uint64_t PredicateExpressions.Value.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t base witness table accessor for Equatable in NSNotificationName()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t static TimeZone.autoupdatingCurrent.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static TimeZoneCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v2, &v6);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  v4 = v6;
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating, (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  *a1 = v4;
  a1[1] = result;
  return result;
}

id @objc static NSCalendar._newCalendarWithIdentifier(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v4;

  v3 = a3;
  v4 = specialized static NSCalendar._newCalendarWithIdentifier(_:)(v3);

  return v4;
}

id specialized static NSCalendar._newCalendarWithIdentifier(_:)(void *a1)
{
  void *v2;
  id v3;
  id v4;
  char v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  char v10;
  void *v11;
  id v12;
  id v13;
  char v14;
  void *v15;
  id v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  id v21;
  char v22;
  void *v23;
  id v24;
  id v25;
  char v26;
  void *v27;
  id v28;
  id v29;
  char v30;
  void *v31;
  id v32;
  id v33;
  char v34;
  void *v35;
  id v36;
  id v37;
  char v38;
  void *v39;
  id v40;
  id v41;
  char v42;
  void *v43;
  id v44;
  id v45;
  char v46;
  void *v47;
  id v48;
  id v49;
  char v50;
  void *v51;
  id v52;
  id v53;
  char v54;
  void *v55;
  id v56;
  id v57;
  char v58;
  void *v59;
  id v60;
  id v61;
  char v62;
  id result;
  void *v64;
  id v65;
  id v66;
  char v67;
  uint64_t v68;
  os_unfair_lock_s *v69;
  objc_class *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  objc_super v75;
  __int128 v76;

  v2 = (void *)*MEMORY[0x1E0C9B008];
  if (*MEMORY[0x1E0C9B008]
    && (type metadata accessor for CFStringRef(0),
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v3 = a1, v4 = v2, v5 = static _CFObject.== infix(_:_:)(), v3, v4, (v5 & 1) != 0))
  {
    v6 = 0;
  }
  else
  {
    v7 = (void *)*MEMORY[0x1E0C9AE60];
    if (*MEMORY[0x1E0C9AE60]
      && (type metadata accessor for CFStringRef(0),
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v8 = a1, v9 = v7, v10 = static _CFObject.== infix(_:_:)(), v8, v9, (v10 & 1) != 0))
    {
      v6 = 1;
    }
    else
    {
      v11 = (void *)*MEMORY[0x1E0C9AEB0];
      if (*MEMORY[0x1E0C9AEB0]
        && (type metadata accessor for CFStringRef(0),
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v12 = a1, v13 = v11, v14 = static _CFObject.== infix(_:_:)(), v12, v13, (v14 & 1) != 0))
      {
        v6 = 2;
      }
      else
      {
        v15 = (void *)*MEMORY[0x1E0C9B010];
        if (*MEMORY[0x1E0C9B010]
          && (type metadata accessor for CFStringRef(0),
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v16 = a1, v17 = v15, v18 = static _CFObject.== infix(_:_:)(), v16, v17, (v18 & 1) != 0))
        {
          v6 = 6;
        }
        else
        {
          v19 = (void *)*MEMORY[0x1E0C9B028];
          if (*MEMORY[0x1E0C9B028]
            && (type metadata accessor for CFStringRef(0),
                lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v20 = a1, v21 = v19, v22 = static _CFObject.== infix(_:_:)(), v20, v21, (v22 & 1) != 0))
          {
            v6 = 9;
          }
          else
          {
            v23 = (void *)*MEMORY[0x1E0C9B030];
            if (*MEMORY[0x1E0C9B030]
              && (type metadata accessor for CFStringRef(0),
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v24 = a1, v25 = v23, v26 = static _CFObject.== infix(_:_:)(), v24, v25, (v26 & 1) != 0))
            {
              v6 = 10;
            }
            else
            {
              v27 = (void *)*MEMORY[0x1E0C9B048];
              if (*MEMORY[0x1E0C9B048]
                && (type metadata accessor for CFStringRef(0),
                    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v28 = a1, v29 = v27, v30 = static _CFObject.== infix(_:_:)(), v28, v29, (v30 & 1) != 0))
              {
                v6 = 11;
              }
              else
              {
                v31 = (void *)*MEMORY[0x1E0C9B268];
                if (*MEMORY[0x1E0C9B268]
                  && (type metadata accessor for CFStringRef(0),
                      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v32 = a1, v33 = v31, v34 = static _CFObject.== infix(_:_:)(), v32, v33, (v34 & 1) != 0))
                {
                  v6 = 13;
                }
                else
                {
                  v35 = (void *)*MEMORY[0x1E0C9B220];
                  if (*MEMORY[0x1E0C9B220]
                    && (type metadata accessor for CFStringRef(0),
                        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v36 = a1, v37 = v35, v38 = static _CFObject.== infix(_:_:)(), v36, v37, (v38 & 1) != 0))
                  {
                    v6 = 12;
                  }
                  else
                  {
                    v39 = (void *)*MEMORY[0x1E0C9B020];
                    if (*MEMORY[0x1E0C9B020]
                      && (type metadata accessor for CFStringRef(0),
                          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v40 = a1, v41 = v39, v42 = static _CFObject.== infix(_:_:)(), v40, v41, (v42 & 1) != 0))
                    {
                      v6 = 8;
                    }
                    else
                    {
                      v43 = (void *)*MEMORY[0x1E0C9B018];
                      if (*MEMORY[0x1E0C9B018]
                        && (type metadata accessor for CFStringRef(0),
                            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v44 = a1, v45 = v43, v46 = static _CFObject.== infix(_:_:)(), v44, v45, (v46 & 1) != 0))
                      {
                        v6 = 7;
                      }
                      else
                      {
                        v47 = (void *)*MEMORY[0x1E0C9B038];
                        if (*MEMORY[0x1E0C9B038]
                          && (type metadata accessor for CFStringRef(0),
                              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v48 = a1, v49 = v47, v50 = static _CFObject.== infix(_:_:)(), v48, v49, (v50 & 1) != 0))
                        {
                          v6 = 14;
                        }
                        else
                        {
                          v51 = (void *)*MEMORY[0x1E0C9B040];
                          if (*MEMORY[0x1E0C9B040]
                            && (type metadata accessor for CFStringRef(0),
                                lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v52 = a1, v53 = v51, v54 = static _CFObject.== infix(_:_:)(), v52, v53, (v54 & 1) != 0))
                          {
                            v6 = 15;
                          }
                          else
                          {
                            v55 = (void *)*MEMORY[0x1E0C9AE98];
                            if (*MEMORY[0x1E0C9AE98]
                              && (type metadata accessor for CFStringRef(0),
                                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v56 = a1, v57 = v55, v58 = static _CFObject.== infix(_:_:)(), v56, v57, (v58 & 1) != 0))
                            {
                              v6 = 3;
                            }
                            else
                            {
                              v59 = (void *)*MEMORY[0x1E0C9AEA8];
                              if (*MEMORY[0x1E0C9AEA8]
                                && (type metadata accessor for CFStringRef(0),
                                    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), v60 = a1, v61 = v59, v62 = static _CFObject.== infix(_:_:)(), v60, v61, (v62 & 1) != 0))
                              {
                                v6 = 4;
                              }
                              else
                              {
                                result = 0;
                                v64 = (void *)*MEMORY[0x1E0C9AEA0];
                                if (!*MEMORY[0x1E0C9AEA0])
                                  return result;
                                type metadata accessor for CFStringRef(0);
                                lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
                                v65 = a1;
                                v66 = v64;
                                v67 = static _CFObject.== infix(_:_:)();

                                result = 0;
                                if ((v67 & 1) == 0)
                                  return result;
                                v6 = 5;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (one-time initialization token for cache != -1)
    swift_once();
  v68 = static CalendarCache.cache + 16;
  v69 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v69);
  closure #1 in CalendarCache.fixed(_:)(v68, v6, &v76);
  os_unfair_lock_unlock(v69);
  swift_release_n();
  v70 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  v74 = v76;
  v71 = (char *)objc_allocWithZone(v70);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  v72 = swift_allocObject();
  *(_DWORD *)(v72 + 32) = 0;
  *(_OWORD *)(v72 + 16) = v74;
  *(_QWORD *)&v71[OBJC_IVAR____NSSwiftCalendar__lock] = v72;
  v73 = *MEMORY[0x1E0C996C8];
  v75.receiver = v71;
  v75.super_class = v70;
  return objc_msgSendSuper2(&v75, sel_initWithCheckedCalendarIdentifier_, v73);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for CFStringRef);
}

id URL.setResourceValues(_:)()
{
  void **v0;
  void *v1;
  id v3;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = *v0;
  type metadata accessor for NSURLResourceKey(0);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey();
  swift_bridgeObjectRetain();
  v4[0] = 0;
  LODWORD(v1) = objc_msgSend(v1, sel_setResourceValues_error_, _NativeDictionary.bridged()(), v4);
  swift_unknownObjectRelease();
  if ((_DWORD)v1)
    return v4[0];
  if (v4[0])
  {
    v4[0];
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1)
      swift_once();
    v3 = (id)_nilObjCError;
  }
  return (id)swift_willThrow();
}

uint64_t URL.resourceValues(forKeys:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return URL.resourceValues(forKeys:)(a1, (SEL *)&selRef_resourceValuesForKeys_error_, a2);
}

uint64_t URL.resourceValues(forKeys:)@<X0>(uint64_t a1@<X0>, SEL *a2@<X1>, uint64_t *a3@<X8>)
{
  void **v3;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v14;
  id v15[2];

  v15[1] = *(id *)MEMORY[0x1E0C80C00];
  v7 = *v3;
  v8 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v8);
  swift_bridgeObjectRelease();
  type metadata accessor for NSURLResourceKey(0);
  v15[0] = 0;
  v9 = objc_msgSend(v7, *a2, _ContiguousArrayBuffer._asCocoaArray()(), v15);
  swift_unknownObjectRelease();
  v10 = v15[0];
  if (v9)
  {
    v11 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v10;

    *a3 = v11;
    a3[1] = a1;
    return swift_bridgeObjectRetain();
  }
  else
  {
    if (v15[0])
    {
      v15[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v14 = (id)_nilObjCError;
    }
    return swift_willThrow();
  }
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSURLResourceKey);
}

char *specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for NSURLResourceKey);
}

{
  return specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for NSFileAttributeKey);
}

_QWORD *specialized Sequence._copyContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey;
  if (!lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey)
  {
    type metadata accessor for NSURLResourceKey(255);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSURLResourceKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey);
  }
  return result;
}

void type metadata accessor for NSNotificationName(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSNotificationName);
}

void AttributeContainer.init<A>(_:including:)(uint64_t a1@<X0>, Swift::UInt a2@<X2>, unint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t AssociatedTypeWitness;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t isClassOrObjCExistentialType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  __n128 v71;
  char *v72;
  void (*v73)(char *, char *, uint64_t, __n128);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  int64_t v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  int64_t v101;
  _OWORD *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  int64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  int64_t v122;
  __int128 v123;
  __int128 v124;
  _OWORD v125[2];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  void *v133;
  char v134;
  __int128 v135;
  unint64_t v136;

  v102 = a4;
  v5 = static AttributeScope.scopeDescription.getter(a2, a3);
  swift_bridgeObjectRelease();
  v6 = 0;
  v135 = MEMORY[0x1E0DEE9E0];
  v7 = *(_QWORD *)(a1 + 64);
  v104 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v11 = (char *)&v126 + 8;
  v12 = &v134;
  v111 = (unint64_t)(v8 + 63) >> 6;
  v101 = v111 - 1;
  v103 = MEMORY[0x1E0DEE9B0] + 8;
  v107 = v5;
  v106 = (char *)&v126 + 8;
  v105 = &v134;
  v108 = a1;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v14 = (v10 - 1) & v10;
      v15 = v13 | (v6 << 6);
LABEL_8:
      v16 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)&v126 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v15);
      v17 = (void *)v126;
      outlined init with copy of Any(v16 + 32 * v15, (uint64_t)v11);
      v18 = v17;
      goto LABEL_18;
    }
    v19 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if (v19 < v111)
    {
      v20 = *(_QWORD *)(v104 + 8 * v19);
      if (v20)
        goto LABEL_12;
      v6 += 2;
      if (v19 + 1 >= v111)
      {
        v6 = v19;
      }
      else
      {
        v20 = *(_QWORD *)(v104 + 8 * v6);
        if (v20)
          goto LABEL_15;
        v77 = v19 + 2;
        if (v19 + 2 < v111)
        {
          v20 = *(_QWORD *)(v104 + 8 * v77);
          if (v20)
            goto LABEL_44;
          v6 = v19 + 3;
          if (v19 + 3 >= v111)
          {
            v6 = v19 + 2;
          }
          else
          {
            v20 = *(_QWORD *)(v104 + 8 * v6);
            if (v20)
            {
LABEL_15:
              v19 = v6;
LABEL_12:
              v14 = (v20 - 1) & v20;
              v15 = __clz(__rbit64(v20)) + (v19 << 6);
              v6 = v19;
              goto LABEL_8;
            }
            v77 = v19 + 4;
            if (v19 + 4 < v111)
            {
              v20 = *(_QWORD *)(v104 + 8 * v77);
              if (!v20)
              {
                while (1)
                {
                  v19 = v77 + 1;
                  if (__OFADD__(v77, 1))
                    goto LABEL_73;
                  if (v19 >= v111)
                  {
                    v6 = v101;
                    goto LABEL_17;
                  }
                  v20 = *(_QWORD *)(v104 + 8 * v19);
                  ++v77;
                  if (v20)
                    goto LABEL_12;
                }
              }
LABEL_44:
              v19 = v77;
              goto LABEL_12;
            }
          }
        }
      }
    }
LABEL_17:
    v14 = 0;
    *(_QWORD *)&v128 = 0;
    v126 = 0u;
    v127 = 0u;
LABEL_18:
    outlined init with take of LocalePreferences?((uint64_t)&v126, (uint64_t)&v133, &demangling cache variable for type metadata for (key: NSAttributedStringKey, value: Any)?);
    v21 = v133;
    if (!v133)
    {
      swift_bridgeObjectRelease();
      swift_release();
      *v102 = v135;
      return;
    }
    v136 = v14;
    outlined init with take of Any(v12, &v131);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    if (!v5[2])
    {
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    v122 = v6;
    v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v22, v23);
    if ((v25 & 1) != 0)
      break;
    swift_bridgeObjectRelease();
LABEL_41:
    v6 = v122;
LABEL_5:
    v10 = v136;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);

  }
  v26 = (uint64_t *)(v5[7] + 16 * v24);
  v28 = *v26;
  v27 = v26[1];
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v119 = type metadata accessor for Optional();
  v30 = *(_QWORD *)(v119 - 8);
  v118 = *(uint64_t **)(v30 + 64);
  MEMORY[0x1E0C80A78](v119);
  v120 = (char *)&v100 - v31;
  v32 = v132;
  v33 = __swift_project_boxed_opaque_existential_1(&v131, v132);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v35 = *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64);
  v117 = &v100;
  v121 = v30;
  if ((isClassOrObjCExistentialType & 1) != 0)
  {
    if (v35 != 8)
      goto LABEL_70;
    v36 = *v33;
    swift_unknownObjectRetain();
  }
  else
  {
    v78 = MEMORY[0x1E0C80A78](isClassOrObjCExistentialType);
    (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v80 + 16))((char *)&v100 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0), v33, v32, v78);
    v36 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  }
  v37 = swift_conformsToProtocol2();
  v38 = v28;
  if (v37)
    v39 = v37;
  else
    v39 = 0;
  v115 = v38;
  if (v37)
    v40 = v38;
  else
    v40 = 0;
  v116 = v21;
  if (v40)
  {
    swift_getAssociatedTypeWitness();
    v114 = v36;
    v41 = swift_dynamicCastUnknownClass();
    if (v41)
    {
      v42 = v41;
      v43 = swift_getAssociatedTypeWitness();
      v44 = MEMORY[0x1E0C80A78](v43);
      v45 = v110;
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v39 + 32))(v42, v40, v39, v44);
      v110 = v45;
      if (v45)
        goto LABEL_68;
      v46 = v120;
      swift_dynamicCast();
      swift_unknownObjectRelease();
      v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v46, 0, 1, AssociatedTypeWitness);
      goto LABEL_37;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v81 = objc_allocWithZone((Class)NSError);
    v82 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v83 = objc_msgSend(v81, sel_initWithDomain_code_userInfo_, v82, 4866, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v84 = objc_msgSend(v83, sel_domain);
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
    v87 = v86;

    if (v85 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v87 == v88)
      goto LABEL_63;
    v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v98 & 1) != 0)
    {
LABEL_67:
      swift_willThrow();
LABEL_68:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_willThrow();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
      swift_release();
      return;
    }
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  v114 = v27;
  v48 = v120;
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v37);
  v50 = (char *)&v100 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v126 = v36;
  MEMORY[0x1E0C80A78](v51);
  v53 = (char *)&v100 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectRetain();
  v54 = swift_dynamicCast();
  v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
  if ((v54 & 1) != 0)
  {
    v55(v53, 0, 1, AssociatedTypeWitness);
    v113 = &v100;
    v56 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
    v56(v50, v53, AssociatedTypeWitness);
    v46 = v48;
    v56(v48, v50, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    v27 = v114;
    v55(v48, 0, 1, AssociatedTypeWitness);
LABEL_37:
    v57 = v115;
    v113 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(v27 + 24))(v115, v27);
    v114 = v58;
    v112 = &v100;
    v59 = v27;
    v60 = *(_QWORD *)(v47 + 64);
    MEMORY[0x1E0C80A78](v113);
    v61 = (v60 + 15) & 0xFFFFFFFFFFFFFFF0;
    v109 = (char *)&v100 - v61;
    v63 = MEMORY[0x1E0C80A78](v62);
    v65 = (char *)&v100 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
    v66 = v46;
    v67 = v119;
    (*(void (**)(char *, char *, uint64_t, __n128))(v121 + 16))(v65, v66, v119, v63);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v65, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v121 + 8))(v65, v67);
      v130 = 0;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      a1 = v108;
      v5 = v107;
      v11 = v106;
      v68 = v67;
    }
    else
    {
      v69 = v109;
      v70 = (*(uint64_t (**)(void))(v47 + 32))();
      v118 = &v100;
      v71 = MEMORY[0x1E0C80A78](v70);
      v72 = (char *)&v100 - v61;
      v73 = *(void (**)(char *, char *, uint64_t, __n128))(v47 + 16);
      v73(v72, v69, AssociatedTypeWitness, v71);
      *((_QWORD *)&v124 + 1) = AssociatedTypeWitness;
      *(_QWORD *)&v125[0] = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v123);
      ((void (*)(uint64_t *, char *, uint64_t))v73)(boxed_opaque_existential_1, v72, AssociatedTypeWitness);
      (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t))(v59 + 32))(&v126, v57, v59);
      *(_OWORD *)((char *)v125 + 8) = v126;
      BYTE8(v125[1]) = (*(uint64_t (**)(uint64_t, unint64_t))(v59 + 40))(v57, v59) & 1;
      v75 = (*(uint64_t (**)(uint64_t, unint64_t))(v59 + 48))(v57, v59);
      v76 = *(void (**)(char *, uint64_t))(v47 + 8);
      v76(v72, AssociatedTypeWitness);
      v130 = v75;
      v128 = v125[0];
      v129 = v125[1];
      v126 = v123;
      v127 = v124;
      v76(v69, AssociatedTypeWitness);
      a1 = v108;
      v5 = v107;
      v11 = v106;
      v68 = v119;
    }
    v12 = v105;
    v21 = v116;
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v126, (unint64_t)v113, v114);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v68);
    goto LABEL_41;
  }
  v55(v53, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v53, v119);
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v89 = objc_allocWithZone((Class)NSError);
  v90 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v91 = objc_msgSend(v89, sel_initWithDomain_code_userInfo_, v90, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v92 = objc_msgSend(v91, sel_domain);
  v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
  v95 = v94;

  v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v21 = v116;
  if (v93 == v96 && v95 == v97)
  {
LABEL_63:
    swift_bridgeObjectRelease_n();
    goto LABEL_67;
  }
  v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v99 & 1) != 0)
    goto LABEL_67;
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
}

void specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, id a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  if (!a1)
    goto LABEL_15;
  if (!a2)
  {
LABEL_16:
    __break(1u);
    return;
  }
  objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, a1, a4);
  if (a4 < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a4)
  {
    type metadata accessor for NSAttributedStringKey(0);
    v7 = a1 - 8;
    v8 = a4;
    do
    {
      if (v8 > a4)
      {
        __break(1u);
        goto LABEL_13;
      }
      v9 = v8 - 1;
      v10 = 8 * v8;
      v16 = *(_QWORD *)(v7 + 8 * v8);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *(_QWORD *)(v7 + v10) = v15;
      v8 = v9;
    }
    while (v9);
    v11 = a2 - 32;
    v12 = 32 * a4;
    v13 = a4;
    while (v13 <= a4)
    {
      v14 = v13 - 1;
      v16 = *(_QWORD *)(v11 + 8 * v13 + 24);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      outlined init with take of Any(&v15, (_OWORD *)(v11 + v12));
      v12 -= 32;
      v13 = v14;
      if (!v14)
        return;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
}

void partial apply for closure #1 in AttributedString.init(_:attributeTable:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  closure #1 in AttributedString.init(_:attributeTable:options:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(void ***)(v4 + 32), *(unint64_t **)(v4 + 40), *(uint64_t **)(v4 + 48), v4 + 56, *(uint64_t **)(v4 + 104), *(_QWORD *)(v4 + 112), *(_BYTE **)(v4 + 120));
}

void closure #1 in AttributedString.init(_:attributeTable:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, void **a7, unint64_t *a8, uint64_t *a9, uint64_t a10, uint64_t *a11, uint64_t a12, _BYTE *a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  int64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t AssociatedTypeWitness;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t isClassOrObjCExistentialType;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  void *v53;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  __CFString *v63;
  id v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __CFString *v71;
  id v72;
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t (*v90)(void);
  char *v91;
  uint64_t v92;
  __n128 v93;
  char *v94;
  void (*v95)(char *, char *, uint64_t, __n128);
  char *v96;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  char v100;
  char v101;
  int64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  void *v128;
  id v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  char v135;
  uint64_t v136;
  int64_t v137;
  void **v138;
  _BYTE *v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  __CFString *v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  void *v162;
  uint64_t v163;
  _QWORD *v164;
  int64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  int64_t v169;
  unint64_t v170;
  __int128 v171;
  __int128 v172;
  _BYTE v173[32];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  char v184;

  v145 = a8;
  v138 = a7;
  v156 = a6;
  v139 = a4;
  v143 = a3;
  v14 = a1;
  v141 = a13;
  v140 = a12;
  v146 = a11;
  v144 = a10;
  v142 = a9;
  v181 = MEMORY[0x1E0DEE9E0];
  v182 = MEMORY[0x1E0DEE9E8];
  v15 = *(_QWORD *)(a1 + 64);
  v158 = a1 + 64;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v19 = (char *)&v174 + 8;
  v20 = &v184;
  v152 = CFSTR("NSCocoaErrorDomain");
  v165 = (unint64_t)(v16 + 63) >> 6;
  v137 = v165 - 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = 0;
  v162 = 0;
  v149 = MEMORY[0x1E0DEE9B0] + 8;
  v147 = MEMORY[0x1E0DEE9B8] + 8;
  v157 = v14;
  v161 = (char *)&v174 + 8;
  v160 = a5;
  v159 = &v184;
  while (1)
  {
    if (v18)
    {
      v22 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v23 = v22 | (v21 << 6);
LABEL_7:
      v24 = *(_QWORD *)(v14 + 56);
      *(_QWORD *)&v174 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v23);
      v25 = (void *)v174;
      outlined init with copy of Any(v24 + 32 * v23, (uint64_t)v19);
      v26 = v25;
      goto LABEL_17;
    }
    v27 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    if (v27 < v165)
    {
      v28 = *(_QWORD *)(v158 + 8 * v27);
      if (v28)
        goto LABEL_11;
      v21 += 2;
      if (v27 + 1 >= v165)
      {
        v21 = v27;
      }
      else
      {
        v28 = *(_QWORD *)(v158 + 8 * v21);
        if (v28)
          goto LABEL_14;
        v102 = v27 + 2;
        if (v27 + 2 < v165)
        {
          v28 = *(_QWORD *)(v158 + 8 * v102);
          if (v28)
            goto LABEL_55;
          v21 = v27 + 3;
          if (v27 + 3 >= v165)
          {
            v21 = v27 + 2;
          }
          else
          {
            v28 = *(_QWORD *)(v158 + 8 * v21);
            if (v28)
            {
LABEL_14:
              v27 = v21;
LABEL_11:
              v18 = (v28 - 1) & v28;
              v23 = __clz(__rbit64(v28)) + (v27 << 6);
              v21 = v27;
              goto LABEL_7;
            }
            v102 = v27 + 4;
            if (v27 + 4 < v165)
            {
              v28 = *(_QWORD *)(v158 + 8 * v102);
              if (!v28)
              {
                while (1)
                {
                  v27 = v102 + 1;
                  if (__OFADD__(v102, 1))
                    goto LABEL_88;
                  if (v27 >= v165)
                  {
                    v21 = v137;
                    goto LABEL_16;
                  }
                  v28 = *(_QWORD *)(v158 + 8 * v27);
                  ++v102;
                  if (v28)
                    goto LABEL_11;
                }
              }
LABEL_55:
              v27 = v102;
              goto LABEL_11;
            }
          }
        }
      }
    }
LABEL_16:
    v18 = 0;
    *(_QWORD *)&v176 = 0;
    v175 = 0u;
    v174 = 0u;
LABEL_17:
    outlined init with take of LocalePreferences?((uint64_t)&v174, (uint64_t)&v183, &demangling cache variable for type metadata for (key: NSAttributedStringKey, value: Any)?);
    v29 = v183;
    if (!v183)
      break;
    outlined init with take of Any(v20, &v179);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    if (*(_QWORD *)(a5 + 16)
      && (v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v30, v31), (v33 & 1) != 0))
    {
      v34 = (uint64_t *)(*(_QWORD *)(a5 + 56) + 16 * v32);
      v36 = *v34;
      v35 = v34[1];
      swift_bridgeObjectRelease();
      v163 = v35;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v167 = type metadata accessor for Optional();
      v168 = *(_QWORD *)(v167 - 8);
      v38 = *(_QWORD *)(v168 + 64);
      MEMORY[0x1E0C80A78](v167);
      v166 = (char *)&v136 - v39;
      v40 = v180;
      v41 = __swift_project_boxed_opaque_existential_1(&v179, v180);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      v43 = *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64);
      v169 = v21;
      v170 = (unint64_t)&v136;
      if ((isClassOrObjCExistentialType & 1) != 0)
      {
        if (v43 != 8)
          goto LABEL_84;
        v44 = *v41;
        swift_unknownObjectRetain();
      }
      else
      {
        v103 = MEMORY[0x1E0C80A78](isClassOrObjCExistentialType);
        (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v105 + 16))((char *)&v136 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0), v41, v40, v103);
        v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }
      v45 = swift_conformsToProtocol2();
      if (v45)
        v46 = v45;
      else
        v46 = 0;
      if (v45)
        v47 = v36;
      else
        v47 = 0;
      if (!v47)
      {
        v55 = *(_QWORD **)(AssociatedTypeWitness - 8);
        MEMORY[0x1E0C80A78](v45);
        v57 = (char *)&v136 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
        v155 = &v136;
        *(_QWORD *)&v174 = v44;
        MEMORY[0x1E0C80A78](v58);
        swift_unknownObjectRetain();
        v59 = swift_dynamicCast();
        v164 = v55;
        v60 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v55[7];
        if ((v59 & 1) != 0)
        {
          v60((char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, AssociatedTypeWitness);
          v154 = &v136;
          v61 = (void (*)(char *, char *, uint64_t))v164[4];
          v61(v57, (char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), AssociatedTypeWitness);
          v62 = v166;
          v61(v166, v57, AssociatedTypeWitness);
          swift_unknownObjectRelease();
          goto LABEL_43;
        }
        v164 = (_QWORD *)v44;
        v60((char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(v168 + 8))((char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), v167);
        v71 = v152;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
        v72 = objc_allocWithZone((Class)NSError);
        v73 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v54 = objc_msgSend(v72, sel_initWithDomain_code_userInfo_, v73, 4866, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v74 = objc_msgSend(v54, sel_domain);
        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v77 = v76;

        if (v75 != static String._unconditionallyBridgeFromObjectiveC(_:)(v71) || v77 != v78)
        {
          v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v14 = v157;
          a5 = v160;
          v19 = v161;
          v20 = v159;
          if ((v101 & 1) == 0)
            goto LABEL_86;
          goto LABEL_50;
        }
        swift_bridgeObjectRelease_n();
        v14 = v157;
        goto LABEL_41;
      }
      swift_getAssociatedTypeWitness();
      v164 = (_QWORD *)v44;
      v48 = swift_dynamicCastUnknownClass();
      if (v48)
      {
        v49 = v48;
        v50 = swift_getAssociatedTypeWitness();
        v155 = &v136;
        v51 = MEMORY[0x1E0C80A78](v50);
        v52 = v49;
        v53 = v162;
        (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v46 + 32))(v52, v47, v46, v51);
        if (v53)
        {
          swift_unknownObjectRelease();
          v54 = v53;
          v162 = 0;
          v14 = v157;
          a5 = v160;
          v19 = v161;
          v20 = v159;
          goto LABEL_51;
        }
        v162 = 0;
        v62 = v166;
        swift_dynamicCast();
        swift_unknownObjectRelease();
        v164 = *(_QWORD **)(AssociatedTypeWitness - 8);
        v60 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v164[7];
LABEL_43:
        v60(v62, 0, 1, AssociatedTypeWitness);
        v79 = v163;
        v154 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(v163 + 24))(v36, v163);
        v155 = (uint64_t *)v80;
        v153 = &v136;
        v81 = v164;
        v82 = v164[8];
        MEMORY[0x1E0C80A78](v154);
        v150 = (v82 + 15) & 0xFFFFFFFFFFFFFFF0;
        v151 = (char *)&v136 - v150;
        v84 = MEMORY[0x1E0C80A78](v83);
        v85 = (char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
        v86 = v168;
        (*(void (**)(char *, __n128))(v168 + 16))(v85, v84);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v81[6])(v85, 1, AssociatedTypeWitness) == 1)
        {
          v87 = v167;
          (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v167);
          v178 = 0;
          v176 = 0u;
          v177 = 0u;
          v175 = 0u;
          v174 = 0u;
          v14 = v157;
          a5 = v160;
          v20 = v159;
          v21 = v169;
          v88 = v87;
        }
        else
        {
          v89 = v164;
          v90 = (uint64_t (*)(void))v164[4];
          v148 = &v136;
          v91 = v151;
          v92 = v90();
          v148 = &v136;
          v93 = MEMORY[0x1E0C80A78](v92);
          v94 = (char *)&v136 - v150;
          v95 = (void (*)(char *, char *, uint64_t, __n128))v89[2];
          v96 = v91;
          v95((char *)&v136 - v150, v91, AssociatedTypeWitness, v93);
          *((_QWORD *)&v172 + 1) = AssociatedTypeWitness;
          *(_QWORD *)v173 = swift_getAssociatedConformanceWitness();
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v171);
          ((void (*)(uint64_t *, char *, uint64_t))v95)(boxed_opaque_existential_1, v94, AssociatedTypeWitness);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v79 + 32))(&v174, v36, v79);
          *(_OWORD *)&v173[8] = v174;
          v173[24] = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 40))(v36, v79) & 1;
          v98 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 48))(v36, v79);
          v99 = (void (*)(char *, uint64_t))v89[1];
          v99(v94, AssociatedTypeWitness);
          v178 = v98;
          v176 = *(_OWORD *)v173;
          v177 = *(_OWORD *)&v173[16];
          v175 = v172;
          v174 = v171;
          v99(v96, AssociatedTypeWitness);
          v14 = v157;
          a5 = v160;
          v20 = v159;
          v21 = v169;
          v88 = v167;
        }
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v174, (unint64_t)v154, (unint64_t)v155);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v168 + 8))(v166, v88);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);

        v19 = v161;
      }
      else
      {
        v63 = v152;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
        v64 = objc_allocWithZone((Class)NSError);
        v65 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v54 = objc_msgSend(v64, sel_initWithDomain_code_userInfo_, v65, 4866, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v66 = objc_msgSend(v54, sel_domain);
        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v69 = v68;

        if (v67 != static String._unconditionallyBridgeFromObjectiveC(_:)(v63) || v69 != v70)
        {
          v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a5 = v160;
          v19 = v161;
          v20 = v159;
          if ((v100 & 1) == 0)
            goto LABEL_85;
          goto LABEL_50;
        }
        swift_bridgeObjectRelease_n();
LABEL_41:
        a5 = v160;
        v19 = v161;
        v20 = v159;
LABEL_50:
        swift_willThrow();
        swift_unknownObjectRelease();
        v162 = 0;
LABEL_51:
        v21 = v169;
        if ((v156 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_willThrow();

          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
          swift_release();
          v128 = *v138;
          *v138 = v54;
          v129 = v54;

          *v139 = 1;
          return;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);

      }
    }
    else
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);

    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  v106 = v181;
  v107 = v182;
  v108 = v145;
  v170 = *v145;
  BigString.utf16.getter();
  v109 = v142;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v110 = BigString.UTF16View.index(_:offsetBy:)();
  v112 = v111;
  v114 = v113;
  v116 = v115;
  outlined release of Locale((uint64_t)&v183);
  *v109 = v110;
  v109[1] = v112;
  v109[2] = v114;
  v109[3] = v116;
  BigString.unicodeScalars.getter();
  v117 = BigString.UnicodeScalarView.index(roundingUp:)();
  v119 = v118;
  v121 = v120;
  v123 = v122;
  outlined release of Locale((uint64_t)&v171);
  *v108 = v117;
  v108[1] = v119;
  v108[2] = v121;
  v108[3] = v123;
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)&v174);
  v124 = (v117 >> 11) - (v170 >> 11);
  if (v124 <= 0)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return;
  }
  if (*v146 < 1)
    goto LABEL_76;
  v125 = v146[1];
  v126 = v146[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Dictionary<>.== infix(_:_:)(v125, v106) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_76:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }
  v127 = specialized static Set.== infix(_:_:)(v126, v107);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v127 & 1) != 0)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (!__OFADD__(*v146, v124))
    {
      *v146 += v124;
      return;
    }
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    return;
  }
LABEL_77:
  v130 = v146;
  v131 = *v146;
  if (*v146 >= 1)
  {
    v132 = v146[1];
    v133 = v146[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Rope.append(_:)(v131, v132, v133);
    v130 = v146;
  }
  *v130 = v124;
  v130[1] = v106;
  v130[2] = v107;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v134 = v141;
  if ((*v141 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v135 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v106);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v134 = v135 & 1;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DateInterval(_QWORD *a1)
{
  return DateInterval.encode(to:)(a1);
}

uint64_t DateInterval.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[8];
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DateInterval.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11 = v8;
  v10[7] = 0;
  lazy protocol witness table accessor for type Date and conformance Date();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[6] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DateInterval@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return DateInterval.init(from:)(a1, a2);
}

uint64_t DateInterval.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<DateInterval.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v13[15] = 0;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v14;
    v13[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    v11 = v10;
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateInterval.CodingKeys, &unk_1E0F17B40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateInterval.CodingKeys, &unk_1E0F17B40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateInterval.CodingKeys, &unk_1E0F17B40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateInterval.CodingKeys, &unk_1E0F17B40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys);
  }
  return result;
}

void type metadata completion function for CurrencyFormatStyleConfiguration.Collection()
{
  unint64_t v0;

  type metadata accessor for FloatingPointRoundingRule?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t one-time initialization function for standardConfiguration()
{
  return closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration((uint64_t)&static PredicateCodableConfiguration.standardConfiguration);
}

id URLResourceValues.fileSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E0C99998]);
}

uint64_t dispatch thunk of static CustomNSError.errorDomain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

Swift::Bool __swiftcall URL.startAccessingSecurityScopedResource()()
{
  id *v0;

  return objc_msgSend(*v0, sel_startAccessingSecurityScopedResource);
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGSize(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CGPoint(a1, a2, (uint64_t)"{CGSize=dd}");
}

double Calendar.init(identifier:)@<D0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  double result;
  __int128 v7;

  v3 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v4 = static CalendarCache.cache + 16;
  v5 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in CalendarCache.fixed(_:)(v4, v3, &v7);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

id one-time initialization function for name()
{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSAssumedFallbackInflection"));
  static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name = (uint64_t)result;
  unk_1EDC3E520 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSInlinePresentationIntent"));
  static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name = (uint64_t)result;
  qword_1EDC3E588 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSMarkdownSourcePosition"));
  static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name = (uint64_t)result;
  qword_1EDC3E500 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPresentationIntent"));
  static AttributeScopes.FoundationAttributes.PresentationIntentAttribute.name = (uint64_t)result;
  unk_1EDC3E4C0 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSInflectionAgreementArgument"));
  static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name = (uint64_t)result;
  qword_1EDC3E4A8 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSInflectionAgreementConcept"));
  static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name = (uint64_t)result;
  qword_1EDC3E490 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSInflectionReferentConcept"));
  static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name = (uint64_t)result;
  qword_1EDC3E478 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSInflect"));
  static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name = (uint64_t)result;
  qword_1EDC3E450 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSMorphology"));
  static AttributeScopes.FoundationAttributes.MorphologyAttribute.name = (uint64_t)result;
  unk_1EDC3E430 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  if (one-time initialization token for inflectionAlternative != -1)
    swift_once();
  result = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSAttributedStringKey.inflectionAlternative);
  static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name = (uint64_t)result;
  qword_1EDC3E4D8 = v1;
  return result;
}

{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedNumberFormat"));
  static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name = (uint64_t)result;
  qword_1EDC3E180 = v1;
  return result;
}

uint64_t type metadata accessor for Duration.TimeFormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.TimeFormatStyle);
}

void type metadata accessor for PredicateExpressions.NotEqual()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t CharacterSet.inverted.getter@<X0>(uint64_t *a1@<X8>)
{
  return __CharacterSetStorage.inverted.getter(a1);
}

uint64_t __CharacterSetStorage.inverted.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  char v4;
  const __CFCharacterSet *v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(void **)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  v5 = v3;
  result = (uint64_t)CFCharacterSetCreateInvertedSet(0, v5);
  v7 = result;
  if ((v4 & 1) != 0)
  {
    if (result)
    {
LABEL_5:

      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v7;
      *(_BYTE *)(result + 24) = 0;
      *a1 = result;
      return result;
    }
    __break(1u);
  }
  if (result)
    goto LABEL_5;
  __break(1u);
  return result;
}

NSNumber __swiftcall UInt._bridgeToObjectiveC()()
{
  uint64_t v0;

  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, v0);
}

uint64_t protocol witness for Collection.count.getter in conformance Data()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD))((char *)&loc_18195ADE8 + dword_181E5B8E4[*(_QWORD *)(v0 + 8) >> 62]))(0);
}

uint64_t sub_18195ADF8()
{
  uint64_t v0;

  return BYTE6(v0);
}

Swift::String_optional __swiftcall URLRequest.value(forHTTPHeaderField:)(Swift::String forHTTPHeaderField)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  Swift::String_optional result;

  v2 = *(void **)(*(_QWORD *)v1 + 16);
  v3 = String._bridgeToObjectiveCImpl()();
  v4 = v2;
  v5 = objc_msgSend(v4, sel_valueForHTTPHeaderField_, v3);
  swift_unknownObjectRelease();
  if (v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

  }
  else
  {

    v6 = 0;
    v8 = 0;
  }
  v9 = (uint64_t)v6;
  v10 = v8;
  result.value._object = v10;
  result.value._countAndFlagsBits = v9;
  return result;
}

ValueMetadata *type metadata accessor for PredicateExpressions.ComparisonOperator()
{
  return &type metadata for PredicateExpressions.ComparisonOperator;
}

void *type metadata accessor for LoadedScopeCache.ScopeType()
{
  return &unk_1E0F1E320;
}

float protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

float JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  float v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v37 = a3;
  v35 = a2;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v34 - v13;
  v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(_QWORD *)(a4 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    v19 = *(_QWORD *)(a4 + 56) + 24 * v17;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, a5);
    v23 = v36;
    specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v20, v21, HIDWORD(v34), v37, (uint64_t)v14, a5, a6);
    if (!v23)
      v6 = v24;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    v36 = (char *)v26
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v27[3] = a5;
    v27[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v37);
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v38 = 0xD00000000000001DLL;
    v39 = 0x800000018230D870;
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 2238496;
    v30._object = (void *)0xE300000000000000;
    String.append(_:)(v30);
    v31._countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 3025186;
    v32._object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC448], v25);
    swift_willThrow();
  }
  return v6;
}

uint64_t one-time initialization function for inflectionAlternative()
{
  uint64_t result;

  result = String._bridgeToObjectiveCImpl()();
  static NSAttributedStringKey.inflectionAlternative = result;
  return result;
}

uint64_t partial apply for closure #1 in NSURLSession.data(for:delegate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(_QWORD *)(v6 + 40) = v4;
  *(_QWORD *)(v6 + 48) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch();
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int16()
{
  __int16 *v0;

  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, *v0);
}

uint64_t destroy for DebugStringConversionState()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t one-time initialization function for cfLocaleCollatorID()
{
  uint64_t result;

  result = String._bridgeToObjectiveCImpl()();
  static NSLocaleKey.cfLocaleCollatorID = result;
  return result;
}

uint64_t partial apply for closure #1 in NSNotificationCenter.Notifications.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  return closure #1 in NSNotificationCenter.Notifications.Iterator.next()(a1, v1);
}

uint64_t getEnumTag for PredicateExpressionCodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

Swift::Void __swiftcall _NSSwiftLocale.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD v27[2];
  __int128 v28;

  if (-[objc_class allowsKeyedCoding](with.super.isa, sel_allowsKeyedCoding))
  {
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    ObjectType = swift_getObjectType();
    v5 = *(void (**)(uint64_t, uint64_t))(v3 + 64);
    swift_unknownObjectRetain();
    v5(ObjectType, v3);
    swift_unknownObjectRelease();
    v6 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 40) = v8;
  *(_QWORD *)(inited + 48) = 0xD000000000000026;
  *(_QWORD *)(inited + 56) = 0x800000018230CC90;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)v27);
  v10 = v27[0];
  v11 = v27[1];
  swift_retain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v13 & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v9[(v12 >> 6) + 8] |= 1 << v12;
  v14 = (uint64_t *)(v9[6] + 16 * v12);
  *v14 = v10;
  v14[1] = v11;
  outlined init with take of Any(&v28, (_OWORD *)(v9[7] + 32 * v12));
  v15 = v9[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v9[2] = v17;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v18 = objc_allocWithZone((Class)NSError);
  v19 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v21 = objc_msgSend(v20, sel_domain);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v24 == v25)
  {
    swift_bridgeObjectRelease_n();
LABEL_9:
    -[objc_class failWithError:](with.super.isa, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
    swift_unknownObjectRelease();
    return;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
    goto LABEL_9;
LABEL_12:
  __break(1u);
}

unint64_t AttributedString.init<A>(_:including:)@<X0>(void *a1@<X0>, Swift::UInt a2@<X2>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  void *v7;
  unint64_t result;
  uint64_t v9;

  v7 = static AttributeScope.scopeDescription.getter(a2, a3);
  swift_bridgeObjectRelease();
  result = AttributedString.init(_:attributeTable:options:)(a1, (uint64_t)v7, 0, &v9);
  if (!v4)
    *a4 = v9;
  return result;
}

uint64_t closure #1 in NSURLSession.data(for:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

void IndexSet.insert<A>(integersIn:)()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  IndexSet.insert(integersIn:)(v0, v1);
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v2 = lazy protocol witness table accessor for type Int and conformance Int();
    v3[0] = MEMORY[0x1E0DEB458];
    v3[1] = v2;
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB8C0], v1, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for String.LocalizationValue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

Foundation::Date __swiftcall Date.init(timeIntervalSinceNow:)(Swift::Double timeIntervalSinceNow)
{
  double *v1;
  double *v3;
  Foundation::Date result;
  timespec __tp;
  uint64_t v6;

  v3 = v1;
  v6 = *MEMORY[0x1E0C80C00];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  result._time = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001 + timeIntervalSinceNow;
  *v3 = result._time;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute, &type metadata for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute and conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute);
  }
  return result;
}

double static Date.timeIntervalBetween1970AndReferenceDate.getter()
{
  return 978307200.0;
}

void static URL.applicationSupportDirectory.getter(uint64_t *a1@<X8>)
{
  id v2;
  NSArray *v3;
  uint64_t v4;
  _QWORD *v5;
  NSArray *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  unsigned __int8 v18;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 14, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      v4 = swift_dynamicCastClass();
      if (v4)
      {
        v5 = (_QWORD *)v4;

        if (!v5[2])
          goto LABEL_20;
LABEL_15:
        v10 = (void *)v5[4];
        v9 = v5[5];
        v11 = v5[6];
        swift_retain();
        v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = (uint64_t)v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      -[NSArray copy](v3, sel_copy);
      v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      v5 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2])
        goto LABEL_15;
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
        goto LABEL_15;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    -[NSArray copy](v3, sel_copy);
    v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    v8 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2])
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = NSSearchPathForDirectoriesInDomains(NSApplicationSupportDirectory, 1uLL, 1);
  if (v6)
  {
    v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v7 = swift_dynamicCastClass();
    if (v7)
    {
      v8 = (_QWORD *)v7;

      if (!v8[2])
        goto LABEL_22;
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  v13 = v8[4];
  v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static JSONEncoder.OutputFormatting.withoutEscapingSlashes.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static Calendar._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  os_unfair_lock_s *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  __int128 v12;

  if (a1)
  {
    type metadata accessor for _NSSwiftCalendar();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
      v6 = (_OWORD *)(v5 + 16);
      v7 = (os_unfair_lock_s *)(v5 + 32);
      v8 = a1;
      os_unfair_lock_lock(v7);
      closure #1 in _NSSwiftCalendar.calendar.getter(v6, &v12);
      os_unfair_lock_unlock(v7);

      v10 = *((_QWORD *)&v12 + 1);
      v9 = v12;
    }
    else
    {
      type metadata accessor for _CalendarBridged();
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = a1;
      v10 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged();
      v11 = a1;
    }
    *a2 = v9;
    a2[1] = v10;
  }
  else
  {
    __break(1u);
  }
}

uint64_t PredicateExpressions.Equal.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(23);
  v0._countAndFlagsBits = 0x686C286C61757145;
  v0._object = (void *)0xEB00000000203A73;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x203A736872202CLL;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributedString(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v5[2];

  v3 = *v1;
  v5[0] = _loadDefaultAttributes()();
  v5[1] = v3;
  AttributedString.encode(to:configuration:)(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.encode(to:configuration:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  __int128 *v60;
  int v61;
  char v62;
  char v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  BOOL v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t AssociatedTypeWitness;
  __n128 v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char isUniquelyReferenced_nonNull_native;
  char v153;
  unint64_t v154;
  uint64_t v155;
  _BOOL8 v156;
  uint64_t v157;
  char v158;
  unint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  unint64_t v166;
  int64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  int64_t v180;
  uint64_t result;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int128 *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE v203[40];
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  _QWORD v209[5];
  _QWORD v210[3];
  uint64_t v211;
  _QWORD v212[2];
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE v220[32];
  uint64_t v221;
  _BYTE v222[24];
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _OWORD v227[2];
  __int128 v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246[3];
  _BYTE v247[48];
  uint64_t v248;

  v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.AttributeKey>);
  v189 = *(_QWORD *)(v197 - 8);
  MEMORY[0x1E0C80A78](v197);
  v194 = (char *)&v182 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v193 = (char *)&v182 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.CodingKeys>);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v182 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v2;
  v14 = *(_QWORD *)(*v2 + 64);
  if (!v14)
    goto LABEL_7;
  v15 = *(_QWORD *)(v13 + 72);
  if (!v15)
    goto LABEL_7;
  v196 = *a2;
  v248 = v9;
  *(_QWORD *)&v200 = v10;
  if (v15 != 1)
  {
    v22 = 1;
    goto LABEL_9;
  }
  v16 = *(_QWORD *)(v13 + 80);
  v17 = *(unsigned __int8 *)(v14 + 18);
  v18 = swift_unknownObjectRetain_n();
  specialized Rope._endPath.getter(v18);
  swift_unknownObjectRelease();
  if (!v16)
    goto LABEL_215;
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v17, v14);
  v20 = v19;
  swift_unknownObjectRelease_n();
  v21 = *(_QWORD *)(v20 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v21)
  {
LABEL_7:
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    v23 = *(_OWORD *)(v13 + 32);
    v227[0] = *(_OWORD *)(v13 + 16);
    v227[1] = v23;
    v228 = *(_OWORD *)(v13 + 48);
    v246[1] = v23;
    v246[2] = v228;
    v246[0] = v227[0];
    outlined init with take of any PredicateExpression<Self.Output == B1>(v246, (uint64_t)v247);
    outlined retain of Locale((uint64_t)v247);
    MEMORY[0x186DA46F4](v227);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v212, v214);
    v24 = v201;
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
    v201 = v24;
    swift_bridgeObjectRelease();
    v25 = v212;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  v22 = *(_QWORD *)(v13 + 64);
  v15 = *(_QWORD *)(v13 + 72);
LABEL_9:
  v221 = 0;
  memset(v220, 0, sizeof(v220));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (v22 && v15 > 10)
  {
    lazy protocol witness table accessor for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    LOBYTE(v212[0]) = 0;
    v26 = v248;
    KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
    LOBYTE(v204) = 1;
    KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
    (*(void (**)(char *, uint64_t))(v200 + 8))(v12, v26);
    outlined destroy of Any?((uint64_t)v220, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
    outlined init with take of LocalePreferences?((uint64_t)v212, (uint64_t)v220, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
  }
  else
  {
    dispatch thunk of Encoder.unkeyedContainer()();
  }
  v27 = *(_OWORD *)(v13 + 32);
  v243 = *(_OWORD *)(v13 + 16);
  v244 = v27;
  v245 = *(_OWORD *)(v13 + 48);
  v28 = BigString.startIndex.getter();
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = *(_QWORD *)(v13 + 64);
  v36 = *(_QWORD *)(v13 + 72);
  v38 = *(_QWORD *)(v13 + 80);
  v37 = *(_QWORD *)(v13 + 88);
  v199 = (uint64_t *)v28;
  if (v35)
  {
    v39 = *(unsigned __int8 *)(v35 + 18);
    v40 = v37;
    swift_unknownObjectRetain();
    v37 = v40;
  }
  else
  {
    v39 = 0;
  }
  v41 = 0;
  v212[0] = v35;
  v212[1] = v36;
  v213 = v38;
  v214 = v37;
  v183 = &v215;
  v184 = 0;
  v215 = v37;
  v216 = v39;
  v219 = 0;
  v188 = MEMORY[0x1E0DEE9E0];
  v217 = 0;
  v218 = 0;
  v191 = (__int128 *)(v13 + 16);
  if (!v35)
    goto LABEL_19;
  while (2)
  {
    if (v41 == v38)
    {
LABEL_194:
      swift_unknownObjectRelease();
LABEL_195:
      outlined destroy of Any?((uint64_t)v220, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
      goto LABEL_197;
    }
LABEL_20:
    if (v215 != v37)
      goto LABEL_203;
    v198 = v41;
    v187 = v37;
    v190 = v34;
    v195 = v32;
    *(_QWORD *)&v200 = v30;
    v42 = v216;
    v43 = v217;
    if (v217)
    {
      v44 = (_QWORD *)(v217 + 24 * ((v216 >> ((4 * *(_BYTE *)(v217 + 18) + 8) & 0x3C)) & 0xF));
      v46 = v44[3];
      v45 = v44[4];
      v47 = v44[5];
      v48 = v218 + 1;
      v49 = __OFADD__(v218, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v49)
        goto LABEL_204;
      v218 = v48;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50 = v46;
      v248 = v45;
      v192 = v47;
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v42, v35);
      v52 = v51;
      v54 = v53;
      swift_unknownObjectRelease();
      if (__OFADD__(v218, 1))
        goto LABEL_204;
      v192 = v54;
      v248 = v52;
      ++v218;
      swift_unknownObjectRetain();
      v50 = specialized Rope._Node.subscript.getter(v42, v35);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (__OFADD__(v198, v50))
    {
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
      goto LABEL_207;
    }
    v219 = v198 + v50;
    if (!v35)
      goto LABEL_213;
    v55 = ((-15 << ((4 * *(_BYTE *)(v35 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v35 + 18) | ((unint64_t)*(unsigned __int16 *)(v35 + 16) << ((4 * *(_BYTE *)(v35 + 18) + 8) & 0x3C));
    swift_unknownObjectRetain();
    if (v42 >= v55)
      goto LABEL_213;
    v56 = v199;
    v57 = v200;
    if (v43)
    {
      v58 = (4 * *(_BYTE *)(v43 + 18) + 8) & 0x3C;
      v59 = ((v42 >> v58) & 0xF) + 1;
      if (v59 < *(unsigned __int16 *)(v43 + 16))
      {
        v216 = (v59 << v58) | ((-15 << v58) - 1) & v42;
        swift_unknownObjectRelease_n();
        v60 = v191;
        goto LABEL_43;
      }
    }
    v61 = *(unsigned __int8 *)(v35 + 18);
    v62 = (4 * v61 + 8) & 0x3C;
    *(_QWORD *)&v204 = (v42 >> v62) & 0xF;
    if (v61)
    {
      swift_unknownObjectRetain();
      v63 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v35 + 24, (uint64_t *)&v204, (uint64_t)v183, v35, v61);
      swift_unknownObjectRelease();
      v60 = v191;
      if ((v63 & 1) != 0)
      {
        swift_unknownObjectRelease_n();
        goto LABEL_43;
      }
      v65 = *(unsigned __int8 *)(v35 + 18);
    }
    else
    {
      v64 = ((v42 >> v62) & 0xF) + 1;
      v60 = v191;
      if (v64 < *(unsigned __int16 *)(v35 + 16))
      {
        v216 = (v64 << v62) | ((-15 << v62) - 1) & v42;
        swift_unknownObjectRelease_n();
        v217 = v35;
        goto LABEL_43;
      }
      v65 = 0;
    }
    v66 = *(unsigned __int16 *)(v35 + 16);
    v67 = *(_BYTE *)(v35 + 18);
    swift_unknownObjectRelease_n();
    v215 = v187;
    v216 = ((-15 << ((4 * v67 + 8) & 0x3C)) - 1) & v65 | (unint64_t)(v66 << ((4 * v67 + 8) & 0x3C));
    v217 = 0;
    v57 = v200;
LABEL_43:
    v68 = v195;
    v69 = v60[1];
    v240 = *v60;
    v241 = v69;
    v242 = v60[2];
    BigString.utf8.getter();
    v70 = v57;
    v71 = v190;
    v72 = (unint64_t)v56;
    v73 = BigString.UTF8View.index(_:offsetBy:)();
    v74 = v68;
    v76 = v75;
    v78 = v77;
    v80 = v79;
    outlined release of Locale((uint64_t)&v224);
    if (v73 >> 10 < v72 >> 10)
      goto LABEL_206;
    v229 = v72;
    v230 = v70;
    v231 = v74;
    v232 = v71;
    v185 = (uint64_t *)v73;
    v186 = v76;
    v233 = v73;
    v234 = v76;
    v190 = v78;
    v235 = v78;
    v187 = v80;
    v236 = v80;
    v81 = v191[1];
    v237 = *v191;
    v238 = v81;
    v239 = v191[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v225);
    MEMORY[0x186DA46DC](&v226);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v222, v223);
    v82 = v201;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    v201 = v82;
    if (v82)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_194;
    }
    swift_bridgeObjectRelease();
    v83 = v248;
    v84 = v196;
    if (!*(_QWORD *)(v248 + 16))
      goto LABEL_52;
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v220, (uint64_t)&v204, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
    if (!*((_QWORD *)&v205 + 1))
    {
      outlined destroy of Any?((uint64_t)&v204, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
LABEL_52:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v222, v223);
      dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
      __swift_project_boxed_opaque_existential_1(v210, v211);
      lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
      dispatch thunk of Encoder.container<A>(keyedBy:)();
      v91 = v83 + 64;
      v92 = 1 << *(_BYTE *)(v83 + 32);
      if (v92 < 64)
        v93 = ~(-1 << v92);
      else
        v93 = -1;
      v94 = v93 & *(_QWORD *)(v83 + 64);
      *(_QWORD *)&v200 = (unint64_t)(v92 + 63) >> 6;
      swift_bridgeObjectRetain();
      v95 = 0;
      v195 = v83 + 64;
      while (1)
      {
        while (v94)
        {
          v96 = __clz(__rbit64(v94));
          v94 &= v94 - 1;
          v97 = v96 | (v95 << 6);
          if (*(_QWORD *)(v84 + 16))
            goto LABEL_75;
        }
        v98 = __OFADD__(v95++, 1);
        if (v98)
        {
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
          goto LABEL_205;
        }
        if (v95 >= (uint64_t)v200)
          goto LABEL_96;
        v99 = *(_QWORD *)(v91 + 8 * v95);
        if (!v99)
        {
          v100 = v95 + 1;
          if (v95 + 1 >= (uint64_t)v200)
            goto LABEL_96;
          v99 = *(_QWORD *)(v91 + 8 * v100);
          if (!v99)
          {
            v100 = v95 + 2;
            if (v95 + 2 >= (uint64_t)v200)
              goto LABEL_96;
            v99 = *(_QWORD *)(v91 + 8 * v100);
            if (!v99)
            {
              v100 = v95 + 3;
              if (v95 + 3 >= (uint64_t)v200)
                goto LABEL_96;
              v99 = *(_QWORD *)(v91 + 8 * v100);
              if (!v99)
              {
                v100 = v95 + 4;
                if (v95 + 4 >= (uint64_t)v200)
                  goto LABEL_96;
                v99 = *(_QWORD *)(v91 + 8 * v100);
                if (!v99)
                {
                  v100 = v95 + 5;
                  if (v95 + 5 >= (uint64_t)v200)
                  {
LABEL_96:
                    swift_release();
                    (*(void (**)(char *, uint64_t))(v189 + 8))(v194, v197);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    goto LABEL_154;
                  }
                  v99 = *(_QWORD *)(v91 + 8 * v100);
                  if (!v99)
                  {
                    while (1)
                    {
                      v95 = v100 + 1;
                      if (__OFADD__(v100, 1))
                        break;
                      if (v95 >= (uint64_t)v200)
                        goto LABEL_96;
                      v99 = *(_QWORD *)(v91 + 8 * v95);
                      ++v100;
                      if (v99)
                        goto LABEL_74;
                    }
LABEL_207:
                    __break(1u);
LABEL_208:
                    __break(1u);
LABEL_209:
                    __break(1u);
                    goto LABEL_210;
                  }
                }
              }
            }
          }
          v95 = v100;
        }
LABEL_74:
        v94 = (v99 - 1) & v99;
        v97 = __clz(__rbit64(v99)) + (v95 << 6);
        if (*(_QWORD *)(v84 + 16))
        {
LABEL_75:
          v101 = (uint64_t *)(*(_QWORD *)(v83 + 48) + 16 * v97);
          v102 = *v101;
          v103 = v101[1];
          swift_bridgeObjectRetain();
          v104 = specialized __RawDictionaryStorage.find<A>(_:)(v102, v103);
          if ((v105 & 1) != 0)
          {
            v106 = *(_QWORD *)(*(_QWORD *)(v84 + 56) + 16 * v104);
            v107 = swift_conformsToProtocol2();
            if (v107)
              v108 = v106;
            else
              v108 = 0;
            if (v107)
              v109 = v107;
            else
              v109 = 0;
            if (v108)
            {
              *(_QWORD *)&v204 = v102;
              *((_QWORD *)&v204 + 1) = v103;
              *(_QWORD *)&v205 = 0;
              BYTE8(v205) = 1;
              KeyedEncodingContainer.superEncoder(forKey:)();
              swift_bridgeObjectRelease();
              v110 = *(_QWORD *)(v109 + 8);
              AssociatedTypeWitness = swift_getAssociatedTypeWitness();
              v199 = &v182;
              v198 = *(_QWORD *)(AssociatedTypeWitness - 8);
              v112 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
              v114 = (char *)&v182 - v113;
              v115 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v110 + 24))(v108, v110, v112);
              v117 = v248;
              if (*(_QWORD *)(v248 + 16)
                && (v118 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v116), (v119 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v117 + 56) + 72 * v118, (uint64_t)&v204);
              }
              else
              {
                v208 = 0;
                v206 = 0u;
                v207 = 0u;
                v204 = 0u;
                v205 = 0u;
              }
              swift_bridgeObjectRelease();
              if (!*((_QWORD *)&v205 + 1))
                goto LABEL_211;
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v204, (uint64_t)v203);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              swift_dynamicCast();
              outlined destroy of AttributedString._AttributeValue((uint64_t)&v204);
              v120 = v201;
              (*(void (**)(char *, _QWORD *, uint64_t, uint64_t))(v109 + 16))(v114, v209, v108, v109);
              v201 = v120;
              if (v120)
              {
                (*(void (**)(char *, uint64_t))(v198 + 8))(v114, AssociatedTypeWitness);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v209);
                swift_release();
                (*(void (**)(char *, uint64_t))(v189 + 8))(v194, v197);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
                goto LABEL_194;
              }
              (*(void (**)(char *, uint64_t))(v198 + 8))(v114, AssociatedTypeWitness);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v209);
              v84 = v196;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            v83 = v248;
            v91 = v195;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
      }
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v204, (uint64_t)v210);
    v85 = v192;
    if (*(_QWORD *)(v188 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v86 = v188;
      v87 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v85);
      if ((v88 & 1) != 0)
      {
        v89 = *(_QWORD *)(*(_QWORD *)(v86 + 56) + 8 * v87);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v89 != v184)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v90 = v188;
          goto LABEL_152;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v210, v211);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
    __swift_project_boxed_opaque_existential_1(v209, v209[3]);
    lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    v121 = v83 + 64;
    v122 = 1 << *(_BYTE *)(v83 + 32);
    if (v122 < 64)
      v123 = ~(-1 << v122);
    else
      v123 = -1;
    v124 = v123 & *(_QWORD *)(v83 + 64);
    *(_QWORD *)&v200 = (unint64_t)(v122 + 63) >> 6;
    swift_bridgeObjectRetain();
    v125 = 0;
    v195 = v83 + 64;
    while (1)
    {
      while (v124)
      {
        v126 = __clz(__rbit64(v124));
        v124 &= v124 - 1;
        v127 = v126 | (v125 << 6);
        if (*(_QWORD *)(v84 + 16))
          goto LABEL_121;
      }
      v98 = __OFADD__(v125++, 1);
      if (v98)
        goto LABEL_202;
      if (v125 >= (uint64_t)v200)
        break;
      v128 = *(_QWORD *)(v121 + 8 * v125);
      if (!v128)
      {
        v129 = v125 + 1;
        if (v125 + 1 >= (uint64_t)v200)
          break;
        v128 = *(_QWORD *)(v121 + 8 * v129);
        if (!v128)
        {
          v129 = v125 + 2;
          if (v125 + 2 >= (uint64_t)v200)
            break;
          v128 = *(_QWORD *)(v121 + 8 * v129);
          if (!v128)
          {
            v129 = v125 + 3;
            if (v125 + 3 >= (uint64_t)v200)
              break;
            v128 = *(_QWORD *)(v121 + 8 * v129);
            if (!v128)
            {
              v129 = v125 + 4;
              if (v125 + 4 >= (uint64_t)v200)
                break;
              v128 = *(_QWORD *)(v121 + 8 * v129);
              if (!v128)
              {
                v129 = v125 + 5;
                if (v125 + 5 >= (uint64_t)v200)
                  break;
                v128 = *(_QWORD *)(v121 + 8 * v129);
                if (!v128)
                {
                  while (1)
                  {
                    v125 = v129 + 1;
                    if (__OFADD__(v129, 1))
                      break;
                    if (v125 >= (uint64_t)v200)
                      goto LABEL_142;
                    v128 = *(_QWORD *)(v121 + 8 * v125);
                    ++v129;
                    if (v128)
                      goto LABEL_120;
                  }
LABEL_210:
                  __break(1u);
LABEL_211:
                  outlined destroy of Any?((uint64_t)&v204, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  __break(1u);
LABEL_212:
                  outlined destroy of Any?((uint64_t)&v204, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  __break(1u);
LABEL_213:
                  __break(1u);
LABEL_214:
                  __break(1u);
LABEL_215:
                  swift_unknownObjectRelease();
                  __break(1u);
                  goto LABEL_216;
                }
              }
            }
          }
        }
        v125 = v129;
      }
LABEL_120:
      v124 = (v128 - 1) & v128;
      v127 = __clz(__rbit64(v128)) + (v125 << 6);
      if (*(_QWORD *)(v84 + 16))
      {
LABEL_121:
        v130 = (uint64_t *)(*(_QWORD *)(v83 + 48) + 16 * v127);
        v131 = *v130;
        v132 = v130[1];
        swift_bridgeObjectRetain();
        v133 = specialized __RawDictionaryStorage.find<A>(_:)(v131, v132);
        if ((v134 & 1) != 0)
        {
          v135 = *(_QWORD *)(*(_QWORD *)(v84 + 56) + 16 * v133);
          v136 = swift_conformsToProtocol2();
          if (v136)
            v137 = v135;
          else
            v137 = 0;
          if (v136)
            v138 = v136;
          else
            v138 = 0;
          if (v137)
          {
            *(_QWORD *)&v204 = v131;
            *((_QWORD *)&v204 + 1) = v132;
            *(_QWORD *)&v205 = 0;
            BYTE8(v205) = 1;
            KeyedEncodingContainer.superEncoder(forKey:)();
            swift_bridgeObjectRelease();
            v139 = *(_QWORD *)(v138 + 8);
            v140 = swift_getAssociatedTypeWitness();
            v199 = &v182;
            v198 = *(_QWORD *)(v140 - 8);
            v141 = MEMORY[0x1E0C80A78](v140);
            v143 = (char *)&v182 - v142;
            v144 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v139 + 24))(v137, v139, v141);
            v146 = v248;
            if (*(_QWORD *)(v248 + 16)
              && (v147 = specialized __RawDictionaryStorage.find<A>(_:)(v144, v145), (v148 & 1) != 0))
            {
              outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v146 + 56) + 72 * v147, (uint64_t)&v204);
            }
            else
            {
              v208 = 0;
              v206 = 0u;
              v207 = 0u;
              v204 = 0u;
              v205 = 0u;
            }
            swift_bridgeObjectRelease();
            if (!*((_QWORD *)&v205 + 1))
              goto LABEL_212;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v204, (uint64_t)&v202);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            swift_dynamicCast();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v204);
            v149 = v201;
            (*(void (**)(char *, _BYTE *, uint64_t, uint64_t))(v138 + 16))(v143, v203, v137, v138);
            v201 = v149;
            if (v149)
            {
              (*(void (**)(char *, uint64_t))(v198 + 8))(v143, v140);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v203);
              swift_release();
              (*(void (**)(char *, uint64_t))(v189 + 8))(v193, v197);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v209);
              swift_unknownObjectRelease();
              outlined destroy of Any?((uint64_t)v220, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
              goto LABEL_197;
            }
            (*(void (**)(char *, uint64_t))(v198 + 8))(v143, v140);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v203);
            v84 = v196;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          v83 = v248;
          v121 = v195;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
LABEL_142:
    swift_release();
    (*(void (**)(char *, uint64_t))(v189 + 8))(v193, v197);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v209);
    v150 = v192;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v151 = v188;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v204 = v151;
    v154 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v150);
    v155 = *(_QWORD *)(v151 + 16);
    v156 = (v153 & 1) == 0;
    v157 = v155 + v156;
    if (__OFADD__(v155, v156))
      goto LABEL_208;
    v158 = v153;
    if (*(_QWORD *)(v151 + 24) < v157)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v157, isUniquelyReferenced_nonNull_native);
      v90 = v204;
      v159 = specialized __RawDictionaryStorage.find<A>(_:)(v248, v192);
      if ((v158 & 1) != (v160 & 1))
        goto LABEL_217;
      v154 = v159;
      v161 = v184;
      if ((v158 & 1) != 0)
      {
LABEL_146:
        *(_QWORD *)(*(_QWORD *)(v90 + 56) + 8 * v154) = v161;
        goto LABEL_150;
      }
LABEL_149:
      specialized _NativeDictionary._insert(at:key:value:)(v154, v248, v192, v161, (_QWORD *)v90);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_150:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__(v161, 1))
        goto LABEL_209;
      v184 = v161 + 1;
LABEL_152:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v222, v223);
      v162 = v201;
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      v201 = v162;
      if (!v162)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
        v188 = v90;
LABEL_154:
        v41 = v219;
        v35 = v212[0];
        v30 = v186;
        v199 = v185;
        v32 = v190;
        v34 = v187;
        v38 = v213;
        v37 = v214;
        if (v212[0])
          continue;
LABEL_19:
        if (!v41)
          goto LABEL_195;
        goto LABEL_20;
      }
      swift_unknownObjectRelease();
      outlined destroy of Any?((uint64_t)v220, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
LABEL_197:
      swift_bridgeObjectRelease();
      v25 = v222;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    }
    break;
  }
  v161 = v184;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v90 = v151;
    if ((v153 & 1) != 0)
      goto LABEL_146;
    goto LABEL_149;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AttributedString._AttributeStorage, Int>);
  v163 = static _DictionaryStorage.copy(original:)();
  v90 = v163;
  if (!*(_QWORD *)(v151 + 16))
  {
LABEL_191:
    swift_bridgeObjectRelease();
    v161 = v184;
    if ((v158 & 1) != 0)
      goto LABEL_146;
    goto LABEL_149;
  }
  v164 = (void *)(v163 + 64);
  v165 = v188 + 64;
  v166 = (unint64_t)((1 << *(_BYTE *)(v90 + 32)) + 63) >> 6;
  if (v90 != v188 || (unint64_t)v164 >= v165 + 8 * v166)
    memmove(v164, (const void *)(v188 + 64), 8 * v166);
  v167 = 0;
  v168 = v188;
  *(_QWORD *)(v90 + 16) = *(_QWORD *)(v188 + 16);
  v169 = 1 << *(_BYTE *)(v168 + 32);
  if (v169 < 64)
    v170 = ~(-1 << v169);
  else
    v170 = -1;
  v171 = v170 & *(_QWORD *)(v168 + 64);
  v172 = (unint64_t)(v169 + 63) >> 6;
  while (2)
  {
    if (v171)
    {
      v173 = __clz(__rbit64(v171));
      v171 &= v171 - 1;
      v174 = v173 | (v167 << 6);
LABEL_165:
      v175 = 16 * v174;
      v176 = 8 * v174;
      v177 = *(_QWORD *)(*(_QWORD *)(v168 + 56) + v176);
      v178 = *(_QWORD *)(v90 + 48);
      v200 = *(_OWORD *)(*(_QWORD *)(v168 + 48) + v175);
      *(_OWORD *)(v178 + v175) = v200;
      *(_QWORD *)(*(_QWORD *)(v90 + 56) + v176) = v177;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v98 = __OFADD__(v167++, 1);
  if (v98)
    goto LABEL_214;
  if (v167 >= v172)
    goto LABEL_191;
  v179 = *(_QWORD *)(v165 + 8 * v167);
  if (v179)
  {
LABEL_186:
    v171 = (v179 - 1) & v179;
    v174 = __clz(__rbit64(v179)) + (v167 << 6);
    goto LABEL_165;
  }
  if (v167 + 1 >= v172)
    goto LABEL_191;
  v179 = *(_QWORD *)(v165 + 8 * (v167 + 1));
  if (v179)
  {
    ++v167;
    goto LABEL_186;
  }
  v180 = v167 + 2;
  if (v167 + 2 >= v172)
    goto LABEL_191;
  v179 = *(_QWORD *)(v165 + 8 * v180);
  if (v179)
    goto LABEL_185;
  v180 = v167 + 3;
  if (v167 + 3 >= v172)
    goto LABEL_191;
  v179 = *(_QWORD *)(v165 + 8 * v180);
  if (v179)
    goto LABEL_185;
  v180 = v167 + 4;
  if (v167 + 4 >= v172)
    goto LABEL_191;
  v179 = *(_QWORD *)(v165 + 8 * v180);
  if (v179)
    goto LABEL_185;
  v180 = v167 + 5;
  if (v167 + 5 >= v172)
    goto LABEL_191;
  v179 = *(_QWORD *)(v165 + 8 * v180);
  if (v179)
    goto LABEL_185;
  v180 = v167 + 6;
  if (v167 + 6 >= v172)
    goto LABEL_191;
  v179 = *(_QWORD *)(v165 + 8 * v180);
  if (v179)
    goto LABEL_185;
  v180 = v167 + 7;
  if (v167 + 7 >= v172)
    goto LABEL_191;
  v179 = *(_QWORD *)(v165 + 8 * v180);
  if (v179)
  {
LABEL_185:
    v167 = v180;
    v168 = v188;
    goto LABEL_186;
  }
  while (1)
  {
    v167 = v180 + 1;
    if (__OFADD__(v180, 1))
      break;
    if (v167 >= v172)
      goto LABEL_191;
    v179 = *(_QWORD *)(v165 + 8 * v167);
    ++v180;
    v168 = v188;
    if (v179)
      goto LABEL_186;
  }
LABEL_216:
  __break(1u);
LABEL_217:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _JSONUnkeyedEncodingContainer.superEncoder()(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *v1;
  v3 = v1[1];
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(unsigned __int8 *)(v3 + 32);
  if (v6 == 4)
  {
    v7 = *(_QWORD *)(v5 + 16);
    goto LABEL_6;
  }
  if (v6 == 3)
  {
    if (v5 >> 62)
    {
      v11 = *(_QWORD *)(v3 + 24);
      swift_retain();
      outlined copy of JSONReference.Backing(v5, v11, 3);
      v7 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of JSONReference.Backing(v5, v11, 3);
      goto LABEL_7;
    }
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
    swift_retain();
LABEL_7:
    v8 = *(_QWORD *)(v4 + 144);
    v9 = type metadata accessor for __JSONReferencingEncoder();
    swift_allocObject();
    swift_retain();
    swift_retain();
    v10 = __JSONReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)(v4, v7, v8, v3);
    a1[3] = v9;
    a1[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type __JSONReferencingEncoder and conformance __JSONEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __JSONReferencingEncoder, (uint64_t)&protocol conformance descriptor for __JSONEncoder);
    *a1 = v10;
    return;
  }
  __break(1u);
}

uint64_t _JSONKeyedEncodingContainer.superEncoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, __n128);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35[5];

  v34 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v33 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v32 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v30 - v10;
  v12 = *v3;
  v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
  v14((char *)&v30 - v10, a1, v6, v9);
  v15 = v3[1];
  v16 = v3[2];
  v17 = *(_QWORD *)(a2 + 24);
  v35[3] = v6;
  v35[4] = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v14)(boxed_opaque_existential_1, a1, v6);
  swift_retain();
  v19 = _JSONKeyedEncodingContainer._converted(_:)(v35, v12, v15, v16);
  v30 = v20;
  v31 = v19;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  v21 = *v3;
  v22 = v3[1];
  v23 = *(_QWORD *)(v21 + 144);
  v24 = type metadata accessor for __JSONReferencingEncoder();
  v25 = swift_allocObject();
  v26 = (uint64_t)v32;
  ((void (*)(char *, char *, uint64_t))v14)(v32, v11, v6);
  swift_retain();
  swift_retain();
  v27 = specialized __JSONReferencingEncoder.init(referencing:key:convertedKey:codingPathNode:wrapping:)(v12, v26, v31, v30, v23, v22, v25, v6, v17);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v6);
  v28 = v34;
  v34[3] = v24;
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type __JSONReferencingEncoder and conformance __JSONEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __JSONReferencingEncoder, (uint64_t)&protocol conformance descriptor for __JSONEncoder);
  v28[4] = result;
  *v28 = v27;
  return result;
}

uint64_t initializeWithCopy for _AttributedStringFromMarkdownCreatorConcrete.ExtendedAttributesBox.AttributeKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for __JSONReferencingEncoder()
{
  return objc_opt_self();
}

unint64_t AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v10;
  unint64_t result;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  int64_t v63;
  int64_t v64;
  int v65;
  int64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  __int128 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char v131[48];
  char v132[48];
  char v133[48];
  char v134[48];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _OWORD v143[2];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _OWORD v156[2];
  __int128 v157;
  _OWORD v158[3];
  _QWORD v159[8];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _BYTE v169[40];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  _BYTE v173[40];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  _BYTE v177[40];
  _BYTE v178[40];
  __int128 v179;
  __int128 v180;
  __int128 v181;

  v5 = *(_QWORD *)(v4 + 80);
  if (!*(_QWORD *)(v4 + 64))
  {
    v32 = swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v32);
    return swift_unknownObjectRelease();
  }
  v10 = swift_unknownObjectRetain_n();
  specialized Rope._endPath.getter(v10);
  result = swift_unknownObjectRelease_n();
  if (v5 && ((a3 & 1) != 0 || a1 != a2))
  {
    v114 = a3;
    v12 = *(_OWORD *)(v4 + 32);
    v163 = *(_OWORD *)(v4 + 16);
    v164 = v12;
    v165 = *(_OWORD *)(v4 + 48);
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v13 = BigString.UTF8View.index(_:offsetBy:)();
    v15 = v14;
    v17 = v16;
    v19 = v18;
    outlined release of Locale((uint64_t)v131);
    v20 = *(_OWORD *)(v4 + 32);
    v160 = *(_OWORD *)(v4 + 16);
    v161 = v20;
    v162 = *(_OWORD *)(v4 + 48);
    result = BigString.utf8.getter();
    v121 = a1;
    v125 = a2;
    if (__OFSUB__(a2, a1))
    {
      __break(1u);
    }
    else
    {
      v117 = (__int128 *)(v4 + 16);
      v21 = BigString.UTF8View.index(_:offsetBy:)();
      v22 = v13;
      v24 = v23;
      v26 = v25;
      v28 = v27;
      result = outlined release of Locale((uint64_t)v132);
      v159[0] = v22;
      v159[1] = v15;
      v113 = v21;
      v159[2] = v17;
      v159[3] = v19;
      v159[4] = v21;
      v159[5] = v24;
      v159[6] = v26;
      v159[7] = v28;
      if ((v114 & 1) == 0 && a4)
      {
        v29 = *(_QWORD *)(a4 + 16);
        if (!v29)
          goto LABEL_17;
        v30 = (uint64_t *)(a4 + 40);
        while (1)
        {
          v31 = *v30;
          v30 += 2;
          if (v31)
            break;
          if (!--v29)
            goto LABEL_15;
        }
      }
      result = AttributedString.Guts.fixScalarConstrainedAttributes(in:)();
LABEL_15:
      v34 = v121;
      v33 = v125;
      v35 = v22;
      if ((v114 & 1) != 0)
      {
LABEL_22:
        v38 = v35 >> 10;
        if (v35 >> 10 == v113 >> 10)
        {
          v39 = v117[1];
          v174 = *v117;
          v175 = v39;
          v176 = v117[2];
          result = BigString.startIndex.getter();
          if (v38 <= result >> 10)
            return result;
          result = BigString.endIndex.getter();
          if (v38 >= result >> 10)
            return result;
          result = v34 - 1;
          if (!__OFSUB__(v34, 1))
          {
            result = AttributedString.Guts._needsParagraphFixing(from:to:)(result, v34);
            if ((result & 1) == 0)
              return result;
            v40 = v117[1];
            v170 = *v117;
            v171 = v40;
            v172 = v117[2];
            v179 = v170;
            v180 = v40;
            v181 = v172;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v179, (uint64_t)&v153);
            outlined retain of Locale((uint64_t)&v153);
            v41 = BigString.index(before:)();
            v43 = v42;
            v45 = v44;
            v47 = v46;
            outlined release of Locale((uint64_t)&v170);
            v48 = v117[1];
            v166 = *v117;
            v167 = v48;
            v168 = v117[2];
            BigString.utf8.getter();
            v135 = v166;
            v136 = v167;
            v137 = v168;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v135, (uint64_t)v156);
            outlined retain of Locale((uint64_t)v156);
            v49 = v41;
            v50 = v43;
            v51 = v45;
            v52 = v47;
            v53 = BigString.index(after:)();
            v55 = v54;
            v57 = v56;
            v59 = v58;
            result = outlined release of Locale((uint64_t)&v166);
            v60 = v49;
            v61 = v49 >> 10;
            if (v61 <= v53 >> 10)
            {
              v122 = v60;
              *(_QWORD *)&v148 = v60;
              *((_QWORD *)&v148 + 1) = v50;
              *(_QWORD *)&v149 = v51;
              *((_QWORD *)&v149 + 1) = v52;
              *(_QWORD *)&v150 = v53;
              *((_QWORD *)&v150 + 1) = v55;
              v151 = v57;
              v152 = v59;
              specialized BidirectionalCollection<>._getBlock(for:in:)(2, &v148, &v126);
              result = outlined release of Locale((uint64_t)v158);
              if (v130 == 2)
              {
LABEL_82:
                __break(1u);
                return result;
              }
              if (v61 <= v129 >> 10)
              {
                LOBYTE(v62) = 0;
                v63 = 0;
                v64 = 0;
                v65 = 0;
                v123 = v122 >> 11;
                v66 = v129 >> 11;
                goto LABEL_58;
              }
              goto LABEL_77;
            }
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
            goto LABEL_78;
          }
          goto LABEL_71;
        }
        v67 = v117[1];
        v158[0] = *v117;
        v158[1] = v67;
        v158[2] = v117[2];
        if (v38 <= (unint64_t)BigString.startIndex.getter() >> 10)
          goto LABEL_38;
        result = v34 - 1;
        if (!__OFSUB__(v34, 1))
        {
          if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v34) & 1) != 0)
          {
            v68 = v117[1];
            v156[0] = *v117;
            v156[1] = v68;
            v157 = v117[2];
            v166 = v156[0];
            v167 = v68;
            v168 = v157;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v166, (uint64_t)v169);
            outlined retain of Locale((uint64_t)v169);
            v124 = BigString.index(before:)();
            v70 = v69;
            v72 = v71;
            v74 = v73;
            outlined release of Locale((uint64_t)v156);
            v75 = v117[1];
            v153 = *v117;
            v154 = v75;
            v155 = v117[2];
            BigString.utf8.getter();
            v170 = v153;
            v171 = v154;
            v172 = v155;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v170, (uint64_t)v173);
            outlined retain of Locale((uint64_t)v173);
            v119 = v70;
            v76 = v72;
            v115 = v74;
            v77 = BigString.index(after:)();
            v79 = v78;
            v81 = v80;
            v112 = v82;
            result = outlined release of Locale((uint64_t)&v153);
            if (v124 >> 10 > v77 >> 10)
            {
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
              goto LABEL_74;
            }
            *(_QWORD *)&v148 = v124;
            *((_QWORD *)&v148 + 1) = v119;
            *(_QWORD *)&v149 = v76;
            *((_QWORD *)&v149 + 1) = v115;
            *(_QWORD *)&v150 = v77;
            *((_QWORD *)&v150 + 1) = v79;
            v151 = v81;
            v152 = v112;
            specialized BidirectionalCollection<>._getBlock(for:in:)(2, &v148, &v126);
            result = outlined release of Locale((uint64_t)v133);
            if (v130 == 2)
            {
LABEL_80:
              __break(1u);
              goto LABEL_81;
            }
            if (v124 >> 10 > v129 >> 10)
              goto LABEL_73;
            v62 = 0;
            v83 = v124 >> 11;
            v66 = v129 >> 11;
LABEL_39:
            v84 = v117[1];
            v145 = *v117;
            v146 = v84;
            v147 = v117[2];
            result = BigString.endIndex.getter();
            v123 = v83;
            if (v113 >> 10 < result >> 10)
            {
              if (v62)
              {
                if (v33 <= 0)
                  return result;
              }
              else if (v66 >= v33)
              {
                LOBYTE(v62) = 0;
                goto LABEL_57;
              }
              result = AttributedString.Guts._needsParagraphFixing(from:to:)(v33 - 1, v33);
              if ((result & 1) != 0)
              {
                v91 = v117[1];
                v143[0] = *v117;
                v143[1] = v91;
                v144 = v117[2];
                v174 = v143[0];
                v175 = v91;
                v176 = v144;
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v174, (uint64_t)v177);
                outlined retain of Locale((uint64_t)v177);
                v92 = BigString.index(before:)();
                v94 = v93;
                v96 = v95;
                v98 = v97;
                outlined release of Locale((uint64_t)v143);
                v99 = v117[1];
                v140 = *v117;
                v141 = v99;
                v142 = v117[2];
                BigString.utf8.getter();
                v179 = v140;
                v180 = v141;
                v181 = v142;
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v179, (uint64_t)v178);
                outlined retain of Locale((uint64_t)v178);
                v100 = v92;
                v101 = v94;
                v102 = v96;
                v120 = v98;
                v103 = BigString.index(after:)();
                v105 = v104;
                v118 = v106;
                v108 = v107;
                result = outlined release of Locale((uint64_t)&v140);
                v109 = v100;
                v110 = v100 >> 10;
                if (v110 > v103 >> 10)
                {
LABEL_74:
                  __break(1u);
LABEL_75:
                  __break(1u);
                  goto LABEL_76;
                }
                v116 = v109;
                *(_QWORD *)&v135 = v109;
                *((_QWORD *)&v135 + 1) = v101;
                *(_QWORD *)&v136 = v102;
                *((_QWORD *)&v136 + 1) = v120;
                *(_QWORD *)&v137 = v103;
                *((_QWORD *)&v137 + 1) = v105;
                v138 = v118;
                v139 = v108;
                specialized BidirectionalCollection<>._getBlock(for:in:)(2, &v135, &v126);
                result = outlined release of Locale((uint64_t)v134);
                if (v130 == 2)
                {
LABEL_81:
                  __break(1u);
                  goto LABEL_82;
                }
                if (v110 > v129 >> 10)
                  goto LABEL_75;
                v63 = v116 >> 11;
                v64 = v129 >> 11;
                v65 = 1;
LABEL_58:
                if ((v62 & 1) == 0 && v66 > v34)
                {
                  v126 = 0;
                  v127 = 0;
                  result = AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v126, v123, v34, v66);
                }
                if (v64 > v125)
                  v111 = v65;
                else
                  v111 = 0;
                if (v111 == 1)
                {
                  v126 = 0;
                  v127 = 0;
                  return AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v126, v63, v125, v64);
                }
                return result;
              }
            }
LABEL_57:
            v63 = 0;
            v64 = 0;
            v65 = 0;
            goto LABEL_58;
          }
LABEL_38:
          v66 = 0;
          v83 = 0;
          v62 = 1;
          goto LABEL_39;
        }
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      if (a4)
      {
LABEL_17:
        v36 = *(_QWORD *)(a4 + 16);
        v35 = v22;
        v34 = v121;
        if (!v36)
          return result;
        swift_bridgeObjectRetain_n();
        v37 = 40;
        do
        {
          if (!*(_QWORD *)(a4 + v37))
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            v33 = v125;
            goto LABEL_44;
          }
          swift_bridgeObjectRelease();
          v37 += 16;
          --v36;
        }
        while (v36);
        result = swift_bridgeObjectRelease_n();
        v33 = v125;
        if ((v114 & 1) == 0)
          return result;
        goto LABEL_22;
      }
LABEL_44:
      v126 = 0;
      v127 = 0;
      v85 = AttributedString.Guts._constrainedAttributes(at:with:)(v34, (uint64_t *)&v126);
      v86 = v117[1];
      v148 = *v117;
      v149 = v86;
      v150 = v117[2];
      BigString.utf8.getter();
      specialized BidirectionalCollection<>._getBlock(for:in:)(3, v159, &v126);
      result = outlined release of Locale((uint64_t)&v135);
      if (v128 == 2)
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      if (v130 == 2)
      {
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      v87 = v126 >> 11;
      if ((uint64_t)(v126 >> 11) <= v34 && v129 >> 10 >= v126 >> 10)
      {
        v88 = v129 >> 11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v89 = swift_retain();
        specialized AttributedString._InternalRunsSlice.updateEach(with:)(v89, v87, v34, v85);
        swift_release();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if (v88 >= v33)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v90 = swift_retain();
          specialized AttributedString._InternalRunsSlice.updateEach(with:)(v90, v33, v88, v85);
          swift_release();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease_n();
        }
        goto LABEL_69;
      }
    }
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  return result;
}

uint64_t AttributedString.Guts.fixScalarConstrainedAttributes(in:)()
{
  _OWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  __int128 v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  char isUniquelyReferenced_nonNull_native;
  char v62;
  unint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  int64_t v98;
  unint64_t v99;
  int64_t v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int64_t v111;
  unint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t result;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  int64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  __int128 *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  _OWORD v150[4];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char v165[48];
  char v166[48];
  char v167[48];
  char v168[48];
  char v169[48];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;

  v2 = v0;
  v3 = v0[2];
  v182 = v0[1];
  v183 = v3;
  v184 = v0[3];
  BigString.unicodeScalars.getter();
  v4 = BigString.UnicodeScalarView.index(roundingDown:)();
  v6 = v5;
  outlined release of Locale((uint64_t)v165);
  v7 = v0[2];
  v179 = v0[1];
  v180 = v7;
  v181 = v0[3];
  BigString.unicodeScalars.getter();
  v8 = BigString.UnicodeScalarView.index(roundingUp:)();
  outlined release of Locale((uint64_t)v166);
  v9 = v4 >> 11;
  v10 = v8 >> 11;
  if (v10 < v4 >> 11)
    goto LABEL_212;
  v11 = v2[8];
  if (v11)
    v12 = v2[10];
  else
    v12 = 0;
  if (v12 < v9)
  {
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
    goto LABEL_215;
  }
  v13 = v2[9];
  v147 = v2[11];
  v143 = v4;
  v130 = v6;
  if (!v11 || v9 >= v2[10] || !*(_WORD *)(v11 + 16))
  {
    swift_retain_n();
    v26 = swift_unknownObjectRetain_n();
    v27 = specialized Rope._endPath.getter(v26);
    swift_unknownObjectRelease();
    v17 = 0;
    v14 = 0;
    if (!v11)
      goto LABEL_195;
    while (1)
    {
      swift_unknownObjectRetain();
      v28 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v147, v27, v17, v11, v13);
      swift_release();
      swift_unknownObjectRelease_n();
      v30 = v9 - v14;
      if (!__OFSUB__(v9, v14))
        break;
      while (1)
      {
        __break(1u);
LABEL_198:
        v121 = v29;
        v14 = v30;
LABEL_194:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v27 = v1 & 0xFFFFFFFFFFFFF0FFLL | (v121 << 8);
        v13 = v145;
        v10 = v146;
        if (v11)
          break;
LABEL_195:
        swift_release();
        v28 = 0;
        v30 = v9 - v14;
        if (!__OFSUB__(v9, v14))
          goto LABEL_36;
      }
    }
LABEL_36:
    v157 = v2;
    v158 = v9;
    v159 = v10;
    v160 = v147;
    v161 = v27;
    v162 = v17;
    v163 = v28;
    v164 = v30;
    specialized IndexingIterator.next()();
    if (!v31)
    {
      v145 = MEMORY[0x1E0DEE9E0];
LABEL_148:
      swift_release();
      v103 = 0;
      v148 = v145 + 64;
      v104 = 1 << *(_BYTE *)(v145 + 32);
      v105 = -1;
      if (v104 < 64)
        v105 = ~(-1 << v104);
      v106 = v105 & *(_QWORD *)(v145 + 64);
      v107 = (unint64_t)(v104 + 63) >> 6;
      while (1)
      {
        if (v106)
        {
          v108 = __clz(__rbit64(v106));
          v106 &= v106 - 1;
          v109 = v108 | (v103 << 6);
          v110 = v145;
        }
        else
        {
          v111 = v103 + 1;
          v110 = v145;
          if (__OFADD__(v103, 1))
          {
            __break(1u);
            goto LABEL_200;
          }
          if (v111 >= v107)
            return swift_release();
          v112 = *(_QWORD *)(v148 + 8 * v111);
          ++v103;
          if (!v112)
          {
            v103 = v111 + 1;
            if (v111 + 1 >= v107)
              return swift_release();
            v112 = *(_QWORD *)(v148 + 8 * v103);
            if (!v112)
            {
              v103 = v111 + 2;
              if (v111 + 2 >= v107)
                return swift_release();
              v112 = *(_QWORD *)(v148 + 8 * v103);
              if (!v112)
              {
                v113 = v111 + 3;
                if (v113 >= v107)
                  return swift_release();
                v112 = *(_QWORD *)(v148 + 8 * v113);
                if (!v112)
                {
                  while (1)
                  {
                    v103 = v113 + 1;
                    if (__OFADD__(v113, 1))
                      break;
                    if (v103 >= v107)
                      return swift_release();
                    v112 = *(_QWORD *)(v148 + 8 * v103);
                    ++v113;
                    if (v112)
                      goto LABEL_166;
                  }
LABEL_203:
                  __break(1u);
LABEL_204:
                  __break(1u);
LABEL_205:
                  __break(1u);
                  goto LABEL_206;
                }
                v103 = v113;
              }
            }
          }
LABEL_166:
          v106 = (v112 - 1) & v112;
          v109 = __clz(__rbit64(v112)) + (v103 << 6);
        }
        v114 = *(_QWORD *)(*(_QWORD *)(v110 + 56) + 8 * v109);
        v115 = *(_QWORD *)(v114 + 16);
        if (v115)
        {
          v116 = (unint64_t *)(*(_QWORD *)(v145 + 48) + 16 * v109);
          v118 = *v116;
          v117 = v116[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v119 = (uint64_t *)(v114 + 40);
          do
          {
            AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v118, v117, *(v119 - 1), *v119, 0);
            v119 += 2;
            --v115;
          }
          while (v115);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
    v1 = v31;
    v145 = MEMORY[0x1E0DEE9E0];
    v142 = (__int128 *)(v2 + 2);
    v129 = v2;
    while (1)
    {
      v32 = v130;
      v33 = v143;
      while (1)
      {
        v34 = v142[1];
        v176 = *v142;
        v177 = v34;
        v178 = v142[2];
        BigString.utf8.getter();
        v143 = BigString.UTF8View.index(_:offsetBy:)();
        v36 = v35;
        outlined release of Locale((uint64_t)v167);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) != 0)
          break;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        specialized IndexingIterator.next()();
        v1 = v38;
        v32 = v36;
        v33 = v143;
        if (!v38)
          goto LABEL_148;
      }
      v128 = v1;
      v141 = v32;
      v130 = v36;
      if (v143 >> 10 > v33 >> 10)
        break;
LABEL_145:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      specialized IndexingIterator.next()();
      v1 = v102;
      if (!v102)
        goto LABEL_148;
    }
    v11 = v33;
    v2 = v129;
    v144 = v1 + 64;
    v127 = v1 + 104;
    v39 = v142;
LABEL_45:
    v40 = v39[1];
    v173 = *v39;
    v174 = v40;
    v175 = v39[2];
    BigString.unicodeScalars.getter();
    v17 = v141;
    LODWORD(v146) = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v168);
    v41 = v39[1];
    v170 = *v39;
    v171 = v41;
    v172 = v39[2];
    BigString.unicodeScalars.getter();
    v42 = BigString.UnicodeScalarView.index(after:)();
    v141 = v43;
    outlined release of Locale((uint64_t)v169);
    v44 = 1 << *(_BYTE *)(v1 + 32);
    v9 = (unint64_t)(v44 + 63) >> 6;
    if (v44 < 64)
      v45 = ~(-1 << v44);
    else
      v45 = -1;
    v46 = v45 & *(_QWORD *)(v1 + 64);
    v139 = v11 >> 11;
    v140 = v42;
    v138 = v42 >> 11;
    v136 = v9 - 1;
    swift_bridgeObjectRetain();
    v48 = 0;
    v147 = v9;
    v137 = v9 - 5;
    if (!v46)
    {
LABEL_54:
      v54 = v48 + 1;
      if (__OFADD__(v48, 1))
      {
        __break(1u);
LABEL_186:
        v121 = 1;
        v14 = v47;
        goto LABEL_194;
      }
      if (v54 >= v147)
      {
        v56 = v48;
      }
      else
      {
        v55 = *(_QWORD *)(v144 + 8 * v54);
        if (v55)
        {
LABEL_57:
          v46 = (v55 - 1) & v55;
          v50 = __clz(__rbit64(v55)) + (v54 << 6);
          v48 = v54;
          goto LABEL_53;
        }
        v56 = v48 + 1;
        if (v48 + 2 < v147)
        {
          v55 = *(_QWORD *)(v144 + 8 * (v48 + 2));
          if (v55)
          {
            v54 = v48 + 2;
            goto LABEL_57;
          }
          v56 = v48 + 2;
          if (v48 + 3 < v147)
          {
            v55 = *(_QWORD *)(v144 + 8 * (v48 + 3));
            if (v55)
            {
              v54 = v48 + 3;
              goto LABEL_57;
            }
            v54 = v48 + 4;
            v56 = v48 + 3;
            if (v48 + 4 < v147)
            {
              v55 = *(_QWORD *)(v144 + 8 * v54);
              if (v55)
                goto LABEL_57;
              while (v137 != v48)
              {
                v55 = *(_QWORD *)(v127 + 8 * v48++);
                if (v55)
                {
                  v54 = v48 + 4;
                  goto LABEL_57;
                }
              }
              v56 = v136;
            }
          }
        }
      }
      v46 = 0;
      v151 = 0;
      memset(v150, 0, sizeof(v150));
      v48 = v56;
      v149 = 0u;
      goto LABEL_60;
    }
    while (1)
    {
      while (1)
      {
        v49 = __clz(__rbit64(v46));
        v46 &= v46 - 1;
        v50 = v49 | (v48 << 6);
LABEL_53:
        v51 = *(_QWORD *)(v1 + 56);
        v52 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v50);
        v53 = v52[1];
        *(_QWORD *)&v149 = *v52;
        *((_QWORD *)&v149 + 1) = v53;
        outlined init with copy of AttributedString._AttributeValue(v51 + 72 * v50, (uint64_t)v150);
        swift_bridgeObjectRetain();
LABEL_60:
        outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v149, (uint64_t)&v152);
        v17 = v153;
        if (!v153)
        {
          swift_release();
          v11 = v140;
          v39 = v142;
          if (v143 >> 10 <= v140 >> 10)
            goto LABEL_145;
          goto LABEL_45;
        }
        v9 = v152;
        v11 = v155;
        v57 = v156;
        outlined copy of AttributedString.AttributeRunBoundaries?(v155, v156);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v154);
        if (v57 >= 2)
          break;
LABEL_51:
        swift_bridgeObjectRelease();
        if (!v46)
          goto LABEL_54;
      }
      v58 = HIBYTE(v57) & 0xF;
      if ((v57 & 0x2000000000000000) == 0)
        v58 = v11 & 0xFFFFFFFFFFFFLL;
      if (!v58)
      {
        outlined consume of AttributedString.AttributeRunBoundaries?(v11, v57);
        goto LABEL_51;
      }
      if ((v57 & 0x1000000000000000) != 0)
      {
        v60 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else if ((v57 & 0x2000000000000000) != 0)
      {
        if ((v11 & 0x80) != 0)
          __asm { BR              X10 }
        v60 = v11;
      }
      else
      {
        if ((v11 & 0x1000000000000000) != 0)
          v59 = (char *)((v57 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v59 = (char *)_StringObject.sharedUTF8.getter();
        v60 = *v59;
        if (*v59 < 0)
          __asm { BR              X9 }
      }
      outlined consume of AttributedString.AttributeRunBoundaries?(v11, v57);
      if (v60 == (_DWORD)v146)
        goto LABEL_51;
      if (v138 < v139)
        goto LABEL_207;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v149 = v145;
      v63 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v17);
      v64 = *(_QWORD *)(v145 + 16);
      v133 = v62;
      v65 = (v62 & 1) == 0;
      v66 = v64 + v65;
      if (__OFADD__(v64, v65))
      {
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }
      if (*(_QWORD *)(v145 + 24) >= v66)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v67 = v145;
          v70 = v62;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Range<Int>]>);
          v81 = static _DictionaryStorage.copy(original:)();
          v67 = v81;
          v70 = v133;
          if (*(_QWORD *)(v145 + 16))
          {
            v132 = v63;
            v82 = (char *)(v81 + 64);
            v83 = (char *)(v145 + 64);
            v84 = (unint64_t)((1 << *(_BYTE *)(v67 + 32)) + 63) >> 6;
            v125 = v145 + 64;
            if (v67 != v145 || v82 >= &v83[8 * v84])
              memmove(v82, v83, 8 * v84);
            v85 = 0;
            v135 = v67;
            *(_QWORD *)(v67 + 16) = *(_QWORD *)(v145 + 16);
            v86 = 1 << *(_BYTE *)(v145 + 32);
            if (v86 < 64)
              v87 = ~(-1 << v86);
            else
              v87 = -1;
            v88 = v87 & *(_QWORD *)(v145 + 64);
            v126 = (unint64_t)(v86 + 63) >> 6;
            while (1)
            {
              if (v88)
              {
                v89 = __clz(__rbit64(v88));
                v88 &= v88 - 1;
                v90 = v85;
                v91 = v89 | (v85 << 6);
              }
              else
              {
                v98 = v85 + 1;
                if (__OFADD__(v85, 1))
                  goto LABEL_223;
                v67 = v135;
                v63 = v132;
                if (v98 >= v126)
                  break;
                v99 = *(_QWORD *)(v125 + 8 * v98);
                v100 = v85 + 1;
                if (!v99)
                {
                  v100 = v85 + 2;
                  if (v85 + 2 >= v126)
                    break;
                  v99 = *(_QWORD *)(v125 + 8 * v100);
                  if (!v99)
                  {
                    v100 = v85 + 3;
                    if (v85 + 3 >= v126)
                      break;
                    v99 = *(_QWORD *)(v125 + 8 * v100);
                    if (!v99)
                    {
                      v100 = v85 + 4;
                      if (v85 + 4 >= v126)
                        break;
                      v99 = *(_QWORD *)(v125 + 8 * v100);
                      if (!v99)
                      {
                        v100 = v85 + 5;
                        if (v85 + 5 >= v126)
                          break;
                        v99 = *(_QWORD *)(v125 + 8 * v100);
                        if (!v99)
                        {
                          v100 = v85 + 6;
                          if (v85 + 6 >= v126)
                            break;
                          v99 = *(_QWORD *)(v125 + 8 * v100);
                          if (!v99)
                          {
                            v101 = v85 + 7;
                            if (v85 + 7 >= v126)
                              break;
                            v99 = *(_QWORD *)(v125 + 8 * v101);
                            if (!v99)
                            {
                              v1 = v128;
                              v2 = v129;
                              v67 = v135;
                              v63 = v132;
                              v70 = v133;
                              while (1)
                              {
                                v100 = v101 + 1;
                                if (__OFADD__(v101, 1))
                                  goto LABEL_224;
                                if (v100 >= v126)
                                  goto LABEL_144;
                                v99 = *(_QWORD *)(v125 + 8 * v100);
                                ++v101;
                                if (v99)
                                  goto LABEL_143;
                              }
                            }
                            v100 = v85 + 7;
                            v1 = v128;
                            v2 = v129;
                          }
                        }
                      }
                    }
                  }
                }
LABEL_143:
                v88 = (v99 - 1) & v99;
                v90 = v100;
                v91 = __clz(__rbit64(v99)) + (v100 << 6);
              }
              v92 = 16 * v91;
              v93 = (_QWORD *)(*(_QWORD *)(v145 + 48) + 16 * v91);
              v94 = v93[1];
              v95 = 8 * v91;
              v96 = *(_QWORD *)(*(_QWORD *)(v145 + 56) + v95);
              v97 = (_QWORD *)(*(_QWORD *)(v135 + 48) + v92);
              *v97 = *v93;
              v97[1] = v94;
              *(_QWORD *)(*(_QWORD *)(v135 + 56) + v95) = v96;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v70 = v133;
              v85 = v90;
            }
          }
LABEL_144:
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v66, isUniquelyReferenced_nonNull_native);
        v67 = v149;
        v68 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v17);
        v70 = v133;
        if ((v133 & 1) != (v69 & 1))
          goto LABEL_225;
        v63 = v68;
      }
      swift_bridgeObjectRelease();
      if ((v70 & 1) == 0)
      {
        *(_QWORD *)(v67 + 8 * (v63 >> 6) + 64) |= 1 << v63;
        v71 = (uint64_t *)(*(_QWORD *)(v67 + 48) + 16 * v63);
        *v71 = v9;
        v71[1] = v17;
        *(_QWORD *)(*(_QWORD *)(v67 + 56) + 8 * v63) = MEMORY[0x1E0DEE9D8];
        v72 = *(_QWORD *)(v67 + 16);
        v22 = __OFADD__(v72, 1);
        v73 = v72 + 1;
        if (v22)
          goto LABEL_209;
        *(_QWORD *)(v67 + 16) = v73;
        swift_bridgeObjectRetain();
      }
      v134 = v67;
      v74 = *(_QWORD *)(v67 + 56);
      v131 = v63;
      v11 = *(_QWORD *)(v74 + 8 * v63);
      v75 = *(_QWORD *)(v11 + 16);
      if (v75 && (v76 = v75 - 1, *(_QWORD *)(v11 + 32 + 16 * (v75 - 1) + 8) == v139))
      {
        v9 = *(_QWORD *)(v11 + 32 + 16 * v76);
        if ((uint64_t)v138 < v9)
          goto LABEL_214;
        v77 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v74 + 8 * v131) = v11;
        if ((v77 & 1) == 0)
        {
          v11 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v11);
          *(_QWORD *)(v74 + 8 * v131) = v11;
        }
        v78 = v11 + 16 * v76;
        *(_QWORD *)(v78 + 32) = v9;
      }
      else
      {
        v79 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v74 + 8 * v131) = v11;
        if ((v79 & 1) == 0)
        {
          v11 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1, (_QWORD *)v11);
          *(_QWORD *)(v74 + 8 * v131) = v11;
        }
        v9 = *(_QWORD *)(v11 + 16);
        v80 = *(_QWORD *)(v11 + 24);
        if (v9 >= v80 >> 1)
        {
          v11 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v80 > 1), v9 + 1, 1, (_QWORD *)v11);
          *(_QWORD *)(v74 + 8 * v131) = v11;
        }
        *(_QWORD *)(v11 + 16) = v9 + 1;
        v78 = v11 + 16 * v9;
        *(_QWORD *)(v78 + 32) = v139;
      }
      *(_QWORD *)(v78 + 40) = v138;
      swift_bridgeObjectRelease_n();
      v145 = v134;
      if (!v46)
        goto LABEL_54;
    }
  }
  v145 = v2[9];
  v146 = v10;
  v1 = *(unsigned __int8 *)(v11 + 18);
  if (*(_BYTE *)(v11 + 18))
  {
    swift_unknownObjectRetain_n();
    swift_retain_n();
    v14 = v4 >> 11;
    v15 = v11;
    while (1)
    {
      v18 = *(unsigned __int16 *)(v15 + 16);
      if (!*(_WORD *)(v15 + 16))
        goto LABEL_12;
      v19 = *(_QWORD *)(v15 + 40);
      v20 = v14 - v19;
      if (__OFSUB__(v14, v19))
        goto LABEL_205;
      if (__OFADD__(v20, 1))
      {
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
        goto LABEL_208;
      }
      if ((uint64_t)(v20 + 1) <= 0)
      {
        v18 = 0;
      }
      else
      {
        if ((_DWORD)v18 == 1)
        {
          v14 -= v19;
LABEL_12:
          if (v14)
            goto LABEL_204;
          goto LABEL_13;
        }
        v21 = *(_QWORD *)(v15 + 64);
        v22 = __OFSUB__(v20, v21);
        v23 = v20 - v21;
        if (v22)
          goto LABEL_210;
        if (__OFADD__(v23, 1))
          goto LABEL_211;
        if ((uint64_t)(v23 + 1) >= 1)
        {
          if ((_DWORD)v18 != 2)
          {
            v24 = (_QWORD *)(v15 + 88);
            v25 = 2;
            while (1)
            {
              if (v18 == v25)
              {
LABEL_200:
                __break(1u);
LABEL_201:
                __break(1u);
LABEL_202:
                __break(1u);
                goto LABEL_203;
              }
              v14 = v23 - *v24;
              if (__OFSUB__(v23, *v24))
                goto LABEL_201;
              if (__OFADD__(v14, 1))
                goto LABEL_202;
              if ((uint64_t)(v14 + 1) < 1)
                break;
              ++v25;
              v24 += 3;
              v23 = v14;
              if (v18 == v25)
                goto LABEL_12;
            }
            v18 = v25;
            v14 = v23;
            goto LABEL_13;
          }
          v14 = v23;
          goto LABEL_12;
        }
        v18 = 1;
        v14 = v20;
      }
LABEL_13:
      v16 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
      v1 = ((-15 << v16) - 1) & v1 | (v18 << v16);
      v17 = *(_QWORD *)(v15 + 24 + 24 * v18);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v15 = v17;
      if (!*(_BYTE *)(v17 + 18))
        goto LABEL_173;
    }
  }
  swift_unknownObjectRetain_n();
  swift_retain_n();
  v14 = v4 >> 11;
  v17 = v11;
LABEL_173:
  v121 = *(unsigned __int16 *)(v17 + 16);
  if (!*(_WORD *)(v17 + 16))
    goto LABEL_193;
  v122 = *(_QWORD *)(v17 + 24);
  v47 = v14 - v122;
  if (__OFSUB__(v14, v122))
  {
LABEL_219:
    __break(1u);
    goto LABEL_220;
  }
  if (__OFADD__(v47, 1))
  {
LABEL_220:
    __break(1u);
    goto LABEL_221;
  }
  if ((uint64_t)(v47 + 1) <= 0)
  {
    v121 = 0;
    goto LABEL_194;
  }
  if ((_DWORD)v121 == 1)
  {
    v14 -= v122;
    goto LABEL_193;
  }
  v123 = *(_QWORD *)(v17 + 48);
  v22 = __OFSUB__(v47, v123);
  v30 = v47 - v123;
  if (v22)
  {
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }
  if (!__OFADD__(v30, 1))
  {
    if ((uint64_t)(v30 + 1) < 1)
      goto LABEL_186;
    if ((_DWORD)v121 == 2)
    {
      v14 = v30;
LABEL_193:
      if (!v14)
        goto LABEL_194;
LABEL_218:
      __break(1u);
      goto LABEL_219;
    }
    v124 = (_QWORD *)(v17 + 72);
    v29 = 2;
    while (v121 != v29)
    {
      v14 = v30 - *v124;
      if (__OFSUB__(v30, *v124))
        goto LABEL_216;
      if (__OFADD__(v14, 1))
        goto LABEL_217;
      if ((uint64_t)(v14 + 1) < 1)
        goto LABEL_198;
      ++v29;
      v124 += 3;
      v30 = v14;
      if (v121 == v29)
        goto LABEL_193;
    }
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
    goto LABEL_218;
  }
LABEL_222:
  __break(1u);
LABEL_223:
  __break(1u);
LABEL_224:
  __break(1u);
LABEL_225:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AttributedString._InternalRunsSlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 88);
  v18 = *(_OWORD *)result;
  v19 = *(_QWORD *)(result + 16);
  if ((_QWORD)v18 != v5)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v9 = result;
  outlined init with take of LocalePreferences?((uint64_t)&v19, (uint64_t)v20, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v22, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v22)
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(*((unint64_t *)&v18 + 1), v4);
    result = swift_unknownObjectRelease();
  }
  if (v5 != *(_QWORD *)(a2 + 88))
    goto LABEL_26;
  v10 = *(_QWORD *)(a2 + 64);
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v21, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v21)
  {
    v11 = *(_QWORD *)(v21 + 24 * ((*((_QWORD *)&v18 + 1) >> ((4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    v11 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v18 + 1), v10);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v9 + 32);
  v13 = v12 + v11;
  if (__OFADD__(v12, v11))
    goto LABEL_27;
  if (v12 >= a4)
    v14 = a4;
  else
    v14 = *(_QWORD *)(v9 + 32);
  if (v12 >= a3)
    v15 = v14;
  else
    v15 = a3;
  if (v13 <= a3)
    v16 = a3;
  else
    v16 = v13;
  if (v13 <= a4)
    v17 = v16;
  else
    v17 = a4;
  if (v15 == v17)
    goto LABEL_28;
  result = v17 - v15;
  if (__OFSUB__(v17, v15))
LABEL_29:
    __break(1u);
  return result;
}

uint64_t AttributedString.Guts._needsParagraphFixing(from:to:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  char v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  int64_t v93;
  unint64_t v94;
  int64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  int v110;
  void (*v111)(char *, uint64_t, uint64_t, uint64_t);
  char *v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int64_t v125;
  uint64_t v126;
  uint64_t v127;
  int64_t v128;
  _QWORD *v129;
  char *v130;
  char *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  __int128 *v136;
  __int128 *v137;
  int64_t v138;
  unint64_t v139;
  uint64_t v140;
  _BYTE v141[40];
  _BYTE v142[40];
  _QWORD v143[3];
  uint64_t v144;
  char *v145;
  __int128 v146;
  uint64_t v147;
  _BYTE v148[24];
  uint64_t v149;
  _BYTE v150[40];
  _BYTE v151[40];
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  _BYTE v157[72];
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE v165[72];
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;

  v3 = v2[8];
  v4 = v2[10];
  if (v3)
    v5 = v2[10];
  else
    v5 = 0;
  if (result < 0 || (v6 = result, v5 < result))
  {
LABEL_233:
    __break(1u);
LABEL_234:
    __break(1u);
    goto LABEL_235;
  }
  v8 = v2[9];
  v140 = v2[11];
  if (v3)
  {
    if (*(_WORD *)(v3 + 16) && v4 > result)
    {
      v138 = v8;
      v139 = v4;
      v17 = *(unsigned __int8 *)(v3 + 18);
      if (*(_BYTE *)(v3 + 18))
      {
        result = swift_unknownObjectRetain_n();
        v43 = v3;
        while (1)
        {
          v45 = *(unsigned __int16 *)(v43 + 16);
          if (!*(_WORD *)(v43 + 16))
            goto LABEL_59;
          v46 = *(_QWORD *)(v43 + 40);
          v23 = __OFSUB__(v6, v46);
          v47 = v6 - v46;
          if (v23)
            goto LABEL_227;
          if (__OFADD__(v47, 1))
            goto LABEL_228;
          if (v47 + 1 < 1)
          {
            v45 = 0;
            goto LABEL_60;
          }
          if ((_DWORD)v45 == 1)
            break;
          v48 = (uint64_t *)(v43 + 64);
          v49 = 1;
          while (1)
          {
            v50 = *v48;
            v48 += 3;
            v6 = v47 - v50;
            if (__OFSUB__(v47, v50))
            {
              __break(1u);
LABEL_222:
              __break(1u);
LABEL_223:
              __break(1u);
LABEL_224:
              __break(1u);
              goto LABEL_225;
            }
            if (__OFADD__(v6, 1))
              goto LABEL_222;
            if (v6 + 1 < 1)
              break;
            ++v49;
            v47 = v6;
            if (v45 == v49)
              goto LABEL_59;
          }
          v45 = v49;
          v6 = v47;
LABEL_60:
          v44 = (4 * *(_BYTE *)(v43 + 18) + 8) & 0x3C;
          v17 = ((-15 << v44) - 1) & v17 | (v45 << v44);
          v12 = *(_QWORD *)(v43 + 24 + 24 * v45);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v43 = v12;
          if (!*(_BYTE *)(v12 + 18))
            goto LABEL_179;
        }
        v6 = v47;
LABEL_59:
        if (!v6)
          goto LABEL_60;
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
        goto LABEL_233;
      }
      result = swift_unknownObjectRetain_n();
      v12 = v3;
LABEL_179:
      v114 = *(unsigned __int16 *)(v12 + 16);
      if (*(_WORD *)(v12 + 16))
      {
        v115 = *(_QWORD *)(v12 + 24);
        v23 = __OFSUB__(v6, v115);
        v6 -= v115;
        if (v23)
        {
LABEL_241:
          __break(1u);
          goto LABEL_242;
        }
        if (__OFADD__(v6, 1))
        {
LABEL_242:
          __break(1u);
          goto LABEL_243;
        }
        if (v6 + 1 < 1)
        {
          v114 = 0;
LABEL_215:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v11 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v114 << 8);
          v8 = v138;
          goto LABEL_13;
        }
        if ((_DWORD)v114 != 1)
        {
          v116 = (uint64_t *)(v12 + 48);
          v117 = 1;
          while (1)
          {
            v118 = *v116;
            v116 += 3;
            v23 = __OFSUB__(v6, v118);
            v6 -= v118;
            if (v23)
              goto LABEL_237;
            if (__OFADD__(v6, 1))
              goto LABEL_238;
            if (v6 + 1 < 1)
              break;
            if (v114 == ++v117)
              goto LABEL_189;
          }
          v114 = v117;
          goto LABEL_215;
        }
      }
LABEL_189:
      if (v6)
      {
        __break(1u);
        goto LABEL_191;
      }
      goto LABEL_215;
    }
  }
  v10 = swift_unknownObjectRetain_n();
  v11 = specialized Rope._endPath.getter(v10);
  result = swift_unknownObjectRelease();
  v12 = 0;
  if (v3)
  {
LABEL_13:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v140, v11, v12, v3, v8);
    result = swift_unknownObjectRelease_n();
  }
  v6 = v2[8];
  v13 = (__int128 *)v2[10];
  if (v6)
    v14 = v2[10];
  else
    v14 = 0;
  if (a2 < 0 || v14 < a2)
    goto LABEL_234;
  v15 = v2[9];
  v16 = v2[11];
  v139 = v11;
  if (!v6 || !*(_WORD *)(v6 + 16) || (uint64_t)v13 <= a2)
  {
    v28 = swift_unknownObjectRetain_n();
    v29 = specialized Rope._endPath.getter(v28);
    result = swift_unknownObjectRelease();
    v20 = 0;
    if (!v6)
      goto LABEL_42;
    goto LABEL_41;
  }
  v136 = (__int128 *)v15;
  v137 = v13;
  v138 = v16;
  v17 = *(unsigned __int8 *)(v6 + 18);
  if (*(_BYTE *)(v6 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v18 = v6;
    while (1)
    {
      v21 = *(unsigned __int16 *)(v18 + 16);
      if (!*(_WORD *)(v18 + 16))
        goto LABEL_25;
      v22 = *(_QWORD *)(v18 + 40);
      v23 = __OFSUB__(a2, v22);
      v24 = a2 - v22;
      if (v23)
        goto LABEL_229;
      if (__OFADD__(v24, 1))
        goto LABEL_230;
      if (v24 + 1 < 1)
      {
        v21 = 0;
      }
      else
      {
        if ((_DWORD)v21 == 1)
        {
          a2 = v24;
LABEL_25:
          if (a2)
            goto LABEL_226;
          goto LABEL_26;
        }
        v25 = (uint64_t *)(v18 + 64);
        v26 = 1;
        while (1)
        {
          v27 = *v25;
          v25 += 3;
          a2 = v24 - v27;
          if (__OFSUB__(v24, v27))
            goto LABEL_223;
          if (__OFADD__(a2, 1))
            goto LABEL_224;
          if (a2 + 1 < 1)
            break;
          ++v26;
          v24 = a2;
          if (v21 == v26)
            goto LABEL_25;
        }
        v21 = v26;
        a2 = v24;
      }
LABEL_26:
      v19 = (4 * *(_BYTE *)(v18 + 18) + 8) & 0x3C;
      v17 = ((-15 << v19) - 1) & v17 | (v21 << v19);
      v20 = *(_QWORD *)(v18 + 24 + 24 * v21);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v18 = v20;
      if (!*(_BYTE *)(v20 + 18))
        goto LABEL_192;
    }
  }
LABEL_191:
  result = swift_unknownObjectRetain_n();
  v20 = v6;
LABEL_192:
  v119 = *(unsigned __int16 *)(v20 + 16);
  if (!*(_WORD *)(v20 + 16))
  {
    v16 = v138;
    goto LABEL_204;
  }
  v120 = *(_QWORD *)(v20 + 24);
  v23 = __OFSUB__(a2, v120);
  a2 -= v120;
  if (v23)
  {
LABEL_243:
    __break(1u);
    goto LABEL_244;
  }
  v16 = v138;
  if (__OFADD__(a2, 1))
  {
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
    return result;
  }
  if (a2 + 1 >= 1)
  {
    if ((_DWORD)v119 != 1)
    {
      v121 = (uint64_t *)(v20 + 48);
      v122 = 1;
      while (1)
      {
        v123 = *v121;
        v121 += 3;
        v23 = __OFSUB__(a2, v123);
        a2 -= v123;
        if (v23)
          goto LABEL_239;
        if (__OFADD__(a2, 1))
          goto LABEL_240;
        if (a2 + 1 < 1)
          break;
        if (v119 == ++v122)
          goto LABEL_204;
      }
      v119 = v122;
      goto LABEL_217;
    }
LABEL_204:
    if (a2)
    {
      __break(1u);
LABEL_206:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    goto LABEL_217;
  }
  v119 = 0;
LABEL_217:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v29 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v119 << 8);
  v15 = (uint64_t)v136;
LABEL_41:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v16, v29, v20, v6, v15);
  result = swift_unknownObjectRelease_n();
LABEL_42:
  if (v140 != v2[11])
  {
LABEL_235:
    __break(1u);
    goto LABEL_236;
  }
  v30 = v2[8];
  if (v12)
  {
    v31 = v12 + 24 * ((v139 >> ((4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C)) & 0xF);
    v32 = *(_QWORD *)(v31 + 32);
    v33 = *(_QWORD *)(v31 + 40);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v139, v30);
    v32 = v34;
    v33 = v35;
    result = swift_unknownObjectRelease();
    v30 = v2[8];
    v140 = v2[11];
  }
  if (v16 != v140)
  {
LABEL_236:
    __break(1u);
LABEL_237:
    __break(1u);
LABEL_238:
    __break(1u);
LABEL_239:
    __break(1u);
LABEL_240:
    __break(1u);
    goto LABEL_241;
  }
  if (v20)
  {
    v36 = v20 + 24 * ((v29 >> ((4 * *(_BYTE *)(v20 + 18) + 8) & 0x3C)) & 0xF);
    v38 = *(_QWORD *)(v36 + 32);
    v37 = *(_QWORD *)(v36 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v29, v30);
    v38 = v39;
    v37 = v40;
    swift_unknownObjectRelease();
  }
  v41 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v32);
  v42 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v38);
  if ((v41 & 1) == 0 && (v42 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  if (((v41 ^ v42) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_212;
  }
  v127 = v33;
  v128 = v37;
  v51 = *(_QWORD *)(v32 + 64);
  v134 = (uint64_t *)(v32 + 64);
  v52 = 1 << *(_BYTE *)(v32 + 32);
  v53 = -1;
  if (v52 < 64)
    v53 = ~(-1 << v52);
  v54 = v53 & v51;
  v55 = &v159;
  v138 = (unint64_t)(v52 + 63) >> 6;
  v139 = (unint64_t)&v162 + 8;
  v137 = (__int128 *)v148;
  v126 = v138 - 1;
  result = swift_bridgeObjectRetain();
  v140 = 0;
  v133 = v32;
  v135 = v38;
  v136 = &v159;
  if (!v54)
    goto LABEL_107;
LABEL_103:
  v73 = __clz(__rbit64(v54));
  v54 &= v54 - 1;
  v74 = v73 | (v140 << 6);
LABEL_104:
  v75 = *(_QWORD *)(v32 + 56);
  v76 = (_QWORD *)(*(_QWORD *)(v32 + 48) + 16 * v74);
  v77 = v76[1];
  *(_QWORD *)&v158 = *v76;
  *((_QWORD *)&v158 + 1) = v77;
  outlined init with copy of AttributedString._AttributeValue(v75 + 72 * v74, (uint64_t)v55);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v158, (uint64_t)&v176);
    v81 = v177;
    if (!v177)
      break;
    v56 = v176;
    v173 = v180;
    v174 = v181;
    v175 = v182;
    v171 = v178;
    v172 = v179;
    v57 = *((_QWORD *)&v180 + 1);
    if (!(_QWORD)v181)
    {
      swift_bridgeObjectRelease_n();
      outlined consume of AttributedString.AttributeRunBoundaries?(v57, 0);
      if (*(_QWORD *)(v38 + 16))
      {
        v58 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v81);
        if ((v59 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v38 + 56) + 72 * v58, (uint64_t)&v166);
        }
        else
        {
          v170 = 0;
          v168 = 0u;
          v169 = 0u;
          v166 = 0u;
          v167 = 0u;
        }
      }
      else
      {
        v170 = 0;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
      }
      swift_bridgeObjectRelease();
      outlined init with copy of AttributedString._AttributeValue((uint64_t)&v171, (uint64_t)v165);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v166, (uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v165, v139, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (*((_QWORD *)&v159 + 1))
      {
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v158, (uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if (!v164)
        {
          outlined destroy of Any?((uint64_t)v165, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v166, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v157);
LABEL_210:
          outlined destroy of Any?((uint64_t)&v158, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_211:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_212:
          swift_bridgeObjectRelease();
          return 1;
        }
        v60 = *(_OWORD *)(v139 + 48);
        v154 = *(_OWORD *)(v139 + 32);
        v155 = v60;
        v156 = *(_QWORD *)(v139 + 64);
        v61 = *(_OWORD *)(v139 + 16);
        v152 = *(_OWORD *)v139;
        v153 = v61;
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v157, (uint64_t)v151);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v152, (uint64_t)v150);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v151, (uint64_t)&v146, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v150, (uint64_t)v137, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        if (v147)
        {
          if (v149)
          {
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v146, (uint64_t)v143);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v137, (uint64_t)v142);
            v62 = v144;
            v130 = v145;
            v129 = __swift_project_boxed_opaque_existential_1(v143, v144);
            v132 = &v124;
            v63 = *(_QWORD *)(v62 - 8);
            MEMORY[0x1E0C80A78](v129);
            v65 = (char *)&v124 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v142, (uint64_t)v141);
            v66 = type metadata accessor for Optional();
            v131 = (char *)&v124;
            v67 = *(_QWORD *)(v66 - 8);
            MEMORY[0x1E0C80A78](v66);
            v69 = (char *)&v124 - v68;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            v70 = swift_dynamicCast();
            v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56);
            if (v70)
            {
              v71(v69, 0, 1, v62);
              (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v65, v69, v62);
              v72 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v62);
            }
            else
            {
              v71(v69, 1, 1, v62);
              (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v66);
              v72 = 0;
            }
            v32 = v133;
            v38 = v135;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v143);
            goto LABEL_101;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
LABEL_97:
          v72 = 0;
        }
        else
        {
          if (v149)
          {
            outlined destroy of Any?((uint64_t)v137, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            goto LABEL_97;
          }
          v72 = 1;
        }
LABEL_101:
        outlined destroy of Any?((uint64_t)v150, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of Any?((uint64_t)v151, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v152);
        outlined destroy of Any?((uint64_t)v165, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v166, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v157);
        result = outlined destroy of Any?((uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if ((v72 & 1) == 0)
          goto LABEL_211;
      }
      else
      {
        outlined destroy of Any?((uint64_t)v165, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v166, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
        if (v164)
          goto LABEL_210;
        result = outlined destroy of Any?((uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      }
      v55 = v136;
      if (v54)
        goto LABEL_103;
      goto LABEL_107;
    }
    if ((_QWORD)v174 == 1)
    {
      outlined consume of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v173 + 1), 1);
      outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
    result = swift_bridgeObjectRelease();
    if (v54)
      goto LABEL_103;
LABEL_107:
    v78 = v140 + 1;
    if (__OFADD__(v140, 1))
      goto LABEL_231;
    if (v78 < v138)
    {
      v79 = v134[v78];
      if (v79)
        goto LABEL_110;
      v80 = v140 + 2;
      ++v140;
      if (v78 + 1 < v138)
      {
        v79 = v134[v80];
        if (v79)
          goto LABEL_113;
        v140 = v78 + 1;
        if (v78 + 2 < v138)
        {
          v79 = v134[v78 + 2];
          if (v79)
          {
            v78 += 2;
LABEL_110:
            v54 = (v79 - 1) & v79;
            v74 = __clz(__rbit64(v79)) + (v78 << 6);
            v140 = v78;
            goto LABEL_104;
          }
          v80 = v78 + 3;
          v140 = v78 + 2;
          if (v78 + 3 < v138)
          {
            v79 = v134[v80];
            if (v79)
            {
LABEL_113:
              v78 = v80;
              goto LABEL_110;
            }
            while (1)
            {
              v78 = v80 + 1;
              if (__OFADD__(v80, 1))
                goto LABEL_245;
              if (v78 >= v138)
                break;
              v79 = v134[v78];
              ++v80;
              if (v79)
                goto LABEL_110;
            }
            v140 = v126;
          }
        }
      }
    }
    v54 = 0;
    v163 = 0;
    v161 = 0u;
    v162 = 0u;
    v159 = 0u;
    v160 = 0u;
    v158 = 0u;
  }
  swift_release();
  v82 = *(_QWORD *)(v38 + 64);
  v83 = 1 << *(_BYTE *)(v38 + 32);
  result = swift_bridgeObjectRelease();
  v84 = 0;
  v85 = -1;
  if (v83 < 64)
    v85 = ~(-1 << v83);
  v86 = v85 & v82;
  v87 = v133;
  v139 = (unint64_t)&v162 + 8;
  v140 = (uint64_t)&v159;
  v137 = (__int128 *)v148;
  v138 = (unint64_t)(v83 + 63) >> 6;
  v128 = v138 - 5;
  v136 = (__int128 *)(v38 + 64);
  v125 = v138 - 1;
  v126 = v38 + 104;
  if (!v86)
    goto LABEL_133;
LABEL_129:
  while (2)
  {
    v88 = __clz(__rbit64(v86));
    v86 &= v86 - 1;
    v89 = v88 | (v84 << 6);
LABEL_130:
    v90 = *(_QWORD *)(v38 + 56);
    v91 = (_QWORD *)(*(_QWORD *)(v38 + 48) + 16 * v89);
    v92 = v91[1];
    *(_QWORD *)&v158 = *v91;
    *((_QWORD *)&v158 + 1) = v92;
    outlined init with copy of AttributedString._AttributeValue(v90 + 72 * v89, v140);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v158, (uint64_t)&v176);
      v96 = v177;
      if (!v177)
        goto LABEL_206;
      v97 = v176;
      v173 = v180;
      v174 = v181;
      v175 = v182;
      v171 = v178;
      v172 = v179;
      v98 = *((_QWORD *)&v180 + 1);
      if (!(_QWORD)v181)
        break;
      if ((_QWORD)v174 == 1)
      {
        outlined consume of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v173 + 1), 1);
        outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
      result = swift_bridgeObjectRelease();
      if (v86)
        goto LABEL_129;
LABEL_133:
      v93 = v84 + 1;
      if (__OFADD__(v84, 1))
        goto LABEL_232;
      if (v93 >= v138)
      {
        v95 = v84;
      }
      else
      {
        v94 = *((_QWORD *)v136 + v93);
        if (v94)
          goto LABEL_136;
        v95 = v84 + 1;
        if (v84 + 2 < v138)
        {
          v94 = *((_QWORD *)v136 + v84 + 2);
          if (v94)
          {
            v93 = v84 + 2;
LABEL_136:
            v86 = (v94 - 1) & v94;
            v89 = __clz(__rbit64(v94)) + (v93 << 6);
            v84 = v93;
            goto LABEL_130;
          }
          v95 = v84 + 2;
          if (v84 + 3 < v138)
          {
            v94 = *((_QWORD *)v136 + v84 + 3);
            if (v94)
            {
              v93 = v84 + 3;
              goto LABEL_136;
            }
            v93 = v84 + 4;
            v95 = v84 + 3;
            if (v84 + 4 < v138)
            {
              v94 = *((_QWORD *)v136 + v93);
              if (v94)
                goto LABEL_136;
              while (v128 != v84)
              {
                v94 = *(_QWORD *)(v126 + 8 * v84++);
                if (v94)
                {
                  v93 = v84 + 4;
                  goto LABEL_136;
                }
              }
              v95 = v125;
            }
          }
        }
      }
      v86 = 0;
      v163 = 0;
      v161 = 0u;
      v162 = 0u;
      v159 = 0u;
      v160 = 0u;
      v84 = v95;
      v158 = 0u;
    }
    swift_bridgeObjectRelease_n();
    outlined consume of AttributedString.AttributeRunBoundaries?(v98, 0);
    if (*(_QWORD *)(v87 + 16))
    {
      v99 = specialized __RawDictionaryStorage.find<A>(_:)(v97, v96);
      if ((v100 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v87 + 56) + 72 * v99, (uint64_t)&v166);
      }
      else
      {
        v170 = 0;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
      }
    }
    else
    {
      v170 = 0;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v171, (uint64_t)v165);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v166, (uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v165, v139, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((_QWORD *)&v159 + 1))
    {
      outlined destroy of Any?((uint64_t)v165, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v166, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
      if (v164)
        goto LABEL_219;
      result = outlined destroy of Any?((uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_167;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v158, (uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (v164)
    {
      v101 = *(_OWORD *)(v139 + 48);
      v154 = *(_OWORD *)(v139 + 32);
      v155 = v101;
      v156 = *(_QWORD *)(v139 + 64);
      v102 = *(_OWORD *)(v139 + 16);
      v152 = *(_OWORD *)v139;
      v153 = v102;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v157, (uint64_t)v151);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v152, (uint64_t)v150);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v151, (uint64_t)&v146, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v150, (uint64_t)v137, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v147)
      {
        if (v149)
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v146, (uint64_t)v143);
          outlined init with take of any PredicateExpression<Self.Output == B1>(v137, (uint64_t)v142);
          v103 = v144;
          v131 = v145;
          v129 = __swift_project_boxed_opaque_existential_1(v143, v144);
          v134 = &v124;
          v104 = *(_QWORD *)(v103 - 8);
          MEMORY[0x1E0C80A78](v129);
          v130 = (char *)&v124 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v142, (uint64_t)v141);
          v106 = type metadata accessor for Optional();
          v132 = &v124;
          v107 = *(_QWORD *)(v106 - 8);
          MEMORY[0x1E0C80A78](v106);
          v109 = (char *)&v124 - v108;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          v110 = swift_dynamicCast();
          v111 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56);
          if (v110)
          {
            v111(v109, 0, 1, v103);
            v112 = v130;
            (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v130, v109, v103);
            v113 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*(void (**)(char *, uint64_t))(v104 + 8))(v112, v103);
          }
          else
          {
            v111(v109, 1, 1, v103);
            (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v106);
            v113 = 0;
          }
          v87 = v133;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v143);
          goto LABEL_166;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v146);
LABEL_162:
        v113 = 0;
      }
      else
      {
        if (v149)
        {
          outlined destroy of Any?((uint64_t)v137, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_162;
        }
        v113 = 1;
      }
LABEL_166:
      outlined destroy of Any?((uint64_t)v150, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v151, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v152);
      outlined destroy of Any?((uint64_t)v165, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v166, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v157);
      result = outlined destroy of Any?((uint64_t)&v158, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v113 & 1) == 0)
        goto LABEL_220;
LABEL_167:
      v38 = v135;
      if (v86)
        continue;
      goto LABEL_133;
    }
    break;
  }
  outlined destroy of Any?((uint64_t)v165, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v166, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v157);
LABEL_219:
  outlined destroy of Any?((uint64_t)&v158, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_220:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return 1;
}

Swift::String_optional __swiftcall TimeZone.abbreviation(for:)(Foundation::Date a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  Swift::String_optional result;
  uint64_t v9;

  v3 = *v1;
  v4 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v9 = v3;
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 56))(&v9, ObjectType, v4);
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

double _NSSwiftTimeZone.daylightSavingTimeOffset.getter()
{
  uint64_t v0;
  uint64_t v1;
  __darwin_time_t v2;
  uint64_t ObjectType;
  double v4;
  timespec __tp;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&v2 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  ObjectType = swift_getObjectType();
  __tp.tv_sec = v2;
  v4 = (*(double (**)(timespec *, uint64_t, uint64_t))(v1 + 72))(&__tp, ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

Swift::Double protocol witness for _TimeZoneProtocol.daylightSavingTimeOffset(for:) in conformance _TimeZoneAutoupdating(double a1)
{
  return _TimeZoneAutoupdating.daylightSavingTimeOffset(for:)(*(Foundation::Date *)&a1);
}

double protocol witness for _TimeZoneProtocol.daylightSavingTimeOffset(for:) in conformance _TimeZoneICU()
{
  uint64_t v0;
  uint64_t v1;
  double v3;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  partial apply for closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)((uint64_t *)(v1 + 16), &v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();
  return v3;
}

uint64_t _NSSwiftTimeZone.abbreviation.getter()
{
  uint64_t v0;
  uint64_t v1;
  __darwin_time_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  timespec __tp;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&v2 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  ObjectType = swift_getObjectType();
  __tp.tv_sec = v2;
  v4 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v1 + 56))(&__tp, ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t protocol witness for _TimeZoneProtocol.abbreviation(for:) in conformance _TimeZoneAutoupdating(double a1)
{
  return _TimeZoneAutoupdating.abbreviation(for:)(*(Foundation::Date *)&a1).value._countAndFlagsBits;
}

Swift::String_optional __swiftcall _TimeZoneICU.abbreviation(for:)(Foundation::Date a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String_optional result;
  uint64_t v6[3];

  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)((uint64_t *)(v2 + 16), v1, (double *)v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  swift_release();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  closure #1 in _TimeZoneICU.abbreviation(for:)((uint64_t *)(v2 + 16), v1, v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
  swift_release();
  v3 = v6[0];
  v4 = (void *)v6[1];
  result.value._object = v4;
  result.value._countAndFlagsBits = v3;
  return result;
}

uint64_t closure #1 in _TimeZoneICU.abbreviation(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];

  v4 = v3;
  v19[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 32);
  if (!*a1)
  {
    v16 = *(_QWORD *)(a2 + 24);
    LODWORD(v19[0]) = 0;
    swift_bridgeObjectRetain();
    if (specialized _copyCollectionToContiguousArray<A>(_:)(v16, v6)[2] >> 31)
      __break(1u);
    v17 = ucal_open();
    swift_release();
    result = swift_bridgeObjectRelease();
    if (!v17)
    {
      *a3 = 0;
      a3[1] = 0;
      return result;
    }
    *a1 = v17;
  }
  v7 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  v19[0] = static LocaleCache.cache;
  LocaleCache.current.getter();
  v9 = v8;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v9 + 64))(ObjectType, v9);
  swift_unknownObjectRelease();
  v11 = swift_bridgeObjectRetain_n();
  MEMORY[0x1E0C80A78](v11);
  swift_bridgeObjectRetain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v18, v19);
  if (v4)
  {
    swift_bridgeObjectRelease_n();
    result = swift_willThrow();
    __break(1u);
  }
  else
  {
    v12 = v19[0];
    v13 = v19[1];
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease_n();
    *a3 = v12;
    a3[1] = v13;
  }
  return result;
}

uint64_t partial apply for closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t closure #1 in _TimeZoneICU.daylightSavingTimeOffset(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (*a1)
    goto LABEL_2;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v6, v7)[2] >> 31)
    __break(1u);
  v8 = ucal_open();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (v8)
  {
    *a1 = v8;
LABEL_2:
    ucal_setMillis();
    result = ucal_get();
    *a3 = (double)(int)result / 1000.0;
    return result;
  }
  *a3 = 0.0;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED918]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED8E8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E0DED940]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t KeyPath;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t result;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v92;
  __int128 v93;

  *(_QWORD *)&v93 = MEMORY[0x1E0DEE9E0];
  *((_QWORD *)&v93 + 1) = MEMORY[0x1E0DEE9E0];
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1E0DEB418], 0, 0, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1E0DEAFA0], 0, 0, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1E0DEB070], 0, 0, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1E0DEA968], 0, 0, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1E0DEBAF0], 0, 0, 1);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(MEMORY[0x1E0DEA2D0], 0, 0, 1);
  v1 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  v2 = *v1;
  if ((unint64_t)*v1 > 0x7FF || ((unint64_t)(v2 - 512) >= 3 ? (v3 = v2 == 0) : (v3 = 1), v3))
  {
    v4 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v4, 0x72412E7466697753, (void *)0xEB00000000796172);
  }
  v5 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : Int]);
  v6 = *v5;
  if ((unint64_t)*v5 > 0x7FF || (unint64_t)(v6 - 512) < 3 || !v6)
  {
    v7 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v7, 0xD000000000000010, (void *)0x800000018230B160);
  }
  v8 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Int>);
  v9 = *v8;
  if ((unint64_t)*v8 > 0x7FF || (unint64_t)(v9 - 512) < 3 || !v9)
  {
    v10 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v10, 0x65532E7466697753, (void *)0xE900000000000074);
  }
  v11 = *(_QWORD *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
  if (v11 > 0x7FF || v11 - 512 < 3 || !v11)
  {
    v12 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v12, 0x704F2E7466697753, (void *)0xEE006C616E6F6974);
  }
  v13 = *(_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<String>);
  if (v13 > 0x7FF || v13 - 512 < 3 || !v13)
  {
    v14 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v14, 0x6C532E7466697753, (void *)0xEB00000000656369);
  }
  v15 = *(_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{Int}>);
  if (v15 > 0x7FF || v15 - 512 < 3 || !v15)
  {
    v16 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v16, 0xD000000000000014, (void *)0x800000018230B180);
  }
  v17 = *(_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Expression<Pack{Int}, Int>);
  if (v17 > 0x7FF || v17 - 512 < 3 || !v17)
  {
    v18 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v18, 0xD000000000000015, (void *)0x800000018230B1A0);
  }
  v19 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v19, 0, 0, 1);
  v20 = *(_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Arithmetic<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  if (v20 > 0x7FF || v20 - 512 < 3 || !v20)
  {
    v21 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v21, 0xD00000000000001FLL, (void *)0x800000018230B1C0);
  }
  v22 = *(_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.ClosedRange<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  if (v22 > 0x7FF || v22 - 512 < 3 || !v22)
  {
    v23 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v23, 0xD000000000000020, (void *)0x800000018230B1E0);
  }
  v24 = *(_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.RangeExpressionContains<PredicateExpressions.Value<Range<Int>>, PredicateExpressions.Value<Int>>);
  if (v24 > 0x7FF || v24 - 512 < 3 || !v24)
  {
    v25 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v25, 0xD00000000000002CLL, (void *)0x800000018230B210);
  }
  v26 = *(_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.CollectionContainsCollection<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<[Int]>>);
  if (v26 > 0x7FF || v26 - 512 < 3 || !v26)
  {
    v27 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v27, 0xD000000000000031, (void *)0x800000018230B240);
  }
  v92 = v5;
  v28 = *(_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.CollectionIndexSubscript<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Int>>);
  if (v28 > 0x7FF || v28 - 512 < 3 || !v28)
  {
    v29 = TypeMetadata.descriptor.getter();
    PredicateCodableConfiguration._allowPartialType(_:identifier:)(v29, 0xD00000000000002DLL, (void *)0x800000018230B280);
  }
  v30 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.CollectionRangeSubscript<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Range<Int>>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v30, 0xD00000000000002DLL, (void *)0x800000018230B2B0);
  v31 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Comparison<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v31, 0xD00000000000001FLL, (void *)0x800000018230B2E0);
  v32 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Conditional<PredicateExpressions.Value<Bool>, PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v32, 0xD000000000000020, (void *)0x800000018230B300);
  v33 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Conjunction<PredicateExpressions.Value<Bool>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v33, 0xD000000000000020, (void *)0x800000018230B330);
  v34 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.DictionaryKeyDefaultValueSubscript<PredicateExpressions.Value<[Int : Int]>, PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v34, 0xD000000000000037, (void *)0x800000018230B360);
  v35 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.DictionaryKeySubscript<PredicateExpressions.Value<[Int : Int]>, PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v35, 0xD00000000000002BLL, (void *)0x800000018230B3A0);
  v36 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Disjunction<PredicateExpressions.Value<Bool>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v36, 0xD000000000000020, (void *)0x800000018230B3D0);
  v37 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.IntDivision<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v37, 0xD000000000000020, (void *)0x800000018230B400);
  v38 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.IntRemainder<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v38, 0xD000000000000021, (void *)0x800000018230B430);
  v39 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.FloatDivision<PredicateExpressions.Value<Float>, PredicateExpressions.Value<Float>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v39, 0xD000000000000022, (void *)0x800000018230B460);
  v40 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v40, 0xD00000000000001ALL, (void *)0x800000018230B490);
  v41 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Filter<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v41, 0xD00000000000001BLL, (void *)0x800000018230B4B0);
  v42 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.NotEqual<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v42, 0xD00000000000001DLL, (void *)0x800000018230B4D0);
  v43 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Negation<PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v43, 0xD00000000000001DLL, (void *)0x800000018230B4F0);
  v44 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.OptionalFlatMap<PredicateExpressions.Value<Bool?>, Bool, PredicateExpressions.Value<Bool>, Bool>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v44, 0xD000000000000024, (void *)0x800000018230B510);
  v45 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.NilCoalesce<PredicateExpressions.Value<Bool?>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v45, 0xD000000000000020, (void *)0x800000018230B540);
  v46 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.ForcedUnwrap<PredicateExpressions.Value<Bool?>, Bool>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v46, 0xD000000000000021, (void *)0x800000018230B570);
  v47 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Range<PredicateExpressions.Value<Int>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v47, 0xD00000000000001ALL, (void *)0x800000018230B5A0);
  v48 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceContains<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v48, 0xD000000000000025, (void *)0x800000018230B5C0);
  v49 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceContainsWhere<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<Bool>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v49, 0xD00000000000002ALL, (void *)0x800000018230B5F0);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v49, 0xD000000000000027, (void *)0x800000018230B620);
  v50 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceStartsWith<PredicateExpressions.Value<[Int]>, PredicateExpressions.Value<[Int]>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v50, 0xD000000000000027, (void *)0x800000018230B650);
  v51 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceMaximum<PredicateExpressions.Value<[Int]>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v51, 0xD000000000000024, (void *)0x800000018230B680);
  v52 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.SequenceMinimum<PredicateExpressions.Value<[Int]>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v52, 0xD000000000000024, (void *)0x800000018230B6B0);
  v53 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.ConditionalCast<PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v53, 0xD000000000000024, (void *)0x800000018230B6E0);
  v54 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.ForceCast<PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v54, 0xD00000000000001ELL, (void *)0x800000018230B710);
  v55 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.TypeCheck<PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v55, 0xD00000000000001ELL, (void *)0x800000018230B730);
  v56 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.UnaryMinus<PredicateExpressions.Value<Int>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v56, 0xD00000000000001FLL, (void *)0x800000018230B750);
  v57 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.NilLiteral<Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v57, 0xD00000000000001FLL, (void *)0x800000018230B770);
  v58 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.PredicateEvaluate<PredicateExpressions.Value<Predicate<Pack{Int}>>, Pack{PredicateExpressions.Value<Int>}>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v58, 0xD000000000000026, (void *)0x800000018230B790);
  v59 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.StringContainsRegex<PredicateExpressions.Value<String>, PredicateExpressions.Value<PredicateExpressions.PredicateRegex>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v59, 0xD000000000000028, (void *)0x800000018230B7C0);
  v60 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.StringCaseInsensitiveCompare<PredicateExpressions.Value<String>, PredicateExpressions.Value<String>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v60, 0xD000000000000031, (void *)0x800000018230B7F0);
  v61 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.StringLocalizedCompare<PredicateExpressions.Value<String>, PredicateExpressions.Value<String>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v61, 0xD00000000000002BLL, (void *)0x800000018230B830);
  v62 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.StringLocalizedStandardContains<PredicateExpressions.Value<String>, PredicateExpressions.Value<String>>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v62, 0xD000000000000034, (void *)0x800000018230B860);
  v63 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Value<Int>, Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v63, 0xD00000000000001CLL, (void *)0x800000018230B8A0);
  v64 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Variable<Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v64, 0xD00000000000001DLL, (void *)0x800000018230B8C0);
  v65 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Int>);
  PredicateCodableConfiguration.allowPartialType(_:identifier:)(v65, 0xD00000000000001ALL, (void *)0x800000018230B8E0);
  KeyPath = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(KeyPath, 0xD000000000000012, (void *)0x800000018230B900);
  swift_release();
  v67 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v67, 0xD000000000000015, (void *)0x800000018230B920);
  swift_release();
  v68 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v68, 0xD000000000000014, (void *)0x800000018230B940);
  swift_release();
  v69 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v69, 0xD000000000000017, (void *)0x800000018230B960);
  swift_release();
  v70 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v70, 0xD000000000000012, (void *)0x800000018230B980);
  swift_release();
  v71 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v71, 0xD000000000000015, (void *)0x800000018230B9A0);
  swift_release();
  v72 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v72, 0xD000000000000011, (void *)0x800000018230B9C0);
  swift_release();
  v73 = swift_getKeyPath();
  PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v73, 0xD000000000000014, (void *)0x800000018230B9E0);
  result = swift_release();
  v75 = *v1;
  if ((unint64_t)*v1 <= 0x7FF && (unint64_t)(v75 - 512) >= 3 && v75)
  {
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  v76 = TypeMetadata.descriptor.getter();
  result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v76, 0xD000000000000011, 0x800000018230BA00, 0x746E756F63, 0xE500000000000000, (uint64_t)closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  v77 = *v1;
  if ((unint64_t)*v1 <= 0x7FF && (unint64_t)(v77 - 512) >= 3 && v77)
    goto LABEL_78;
  v78 = TypeMetadata.descriptor.getter();
  result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v78, 0xD000000000000013, 0x800000018230BA20, 0x7974706D457369, 0xE700000000000000, (uint64_t)closure #2 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  v79 = *v1;
  if ((unint64_t)*v1 <= 0x7FF && (unint64_t)(v79 - 512) >= 3 && v79)
    goto LABEL_79;
  v80 = TypeMetadata.descriptor.getter();
  result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v80, 0xD000000000000011, 0x800000018230BA40, 0x7473726966, 0xE500000000000000, (uint64_t)closure #3 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  v81 = *v1;
  if ((unint64_t)*v1 <= 0x7FF && (unint64_t)(v81 - 512) >= 3 && v81)
    goto LABEL_80;
  v82 = TypeMetadata.descriptor.getter();
  result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v82, 0xD000000000000010, 0x800000018230BA60, 1953718636, 0xE400000000000000, (uint64_t)closure #4 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  v83 = *v8;
  if ((unint64_t)*v8 <= 0x7FF && (unint64_t)(v83 - 512) >= 3 && v83)
    goto LABEL_81;
  v84 = TypeMetadata.descriptor.getter();
  result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v84, 0x65532E7466697753, 0xEF746E756F632E74, 0x746E756F63, 0xE500000000000000, (uint64_t)closure #5 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  v85 = *v8;
  if ((unint64_t)*v8 <= 0x7FF && (unint64_t)(v85 - 512) >= 3 && v85)
    goto LABEL_82;
  v86 = TypeMetadata.descriptor.getter();
  result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v86, 0xD000000000000011, 0x800000018230BA80, 0x7974706D457369, 0xE700000000000000, (uint64_t)closure #6 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  v87 = *v92;
  if ((unint64_t)*v92 <= 0x7FF && (unint64_t)(v87 - 512) >= 3 && v87)
    goto LABEL_83;
  v88 = TypeMetadata.descriptor.getter();
  result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v88, 0xD000000000000016, 0x800000018230BAA0, 0x746E756F63, 0xE500000000000000, (uint64_t)closure #7 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
  v89 = *v92;
  if ((unint64_t)*v92 > 0x7FF || (unint64_t)(v89 - 512) < 3 || !v89)
  {
    v90 = TypeMetadata.descriptor.getter();
    result = PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v90, 0xD000000000000018, 0x800000018230BAC0, 0x7974706D457369, 0xE700000000000000, (uint64_t)closure #8 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration, 0);
    *(_OWORD *)a1 = v93;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t PredicateCodableConfiguration._allowPartialType(_:identifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  unint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  char v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  int64_t v83;
  unint64_t v84;
  int64_t v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  Swift::String v99;
  uint64_t v100;
  int64_t v101;
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *__src;
  char *__srca;
  uint64_t v109;

  v5 = v3;
  v8 = *(_QWORD *)(v3 + 8);
  v104 = v8 + 64;
  v9 = 1 << *(_BYTE *)(v8 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v8 + 64);
  __src = (void *)((unint64_t)(v9 + 63) >> 6);
  swift_bridgeObjectRetain();
  v12 = 0;
  while (1)
  {
    do
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v12 << 6);
        goto LABEL_24;
      }
      v17 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      if (v17 >= (uint64_t)__src)
        goto LABEL_70;
      v18 = *(_QWORD *)(v104 + 8 * v17);
      ++v12;
      if (v18)
        goto LABEL_23;
      v12 = v17 + 1;
      if (v17 + 1 >= (uint64_t)__src)
        goto LABEL_70;
      v18 = *(_QWORD *)(v104 + 8 * v12);
      if (v18)
        goto LABEL_23;
      v12 = v17 + 2;
      if (v17 + 2 >= (uint64_t)__src)
        goto LABEL_70;
      v18 = *(_QWORD *)(v104 + 8 * v12);
      if (v18)
        goto LABEL_23;
      v19 = v17 + 3;
      if (v19 >= (uint64_t)__src)
      {
LABEL_70:
        swift_release();
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v109 = *(_QWORD *)(v5 + 8);
        v4 = v109;
        *(_QWORD *)(v5 + 8) = 0x8000000000000000;
        v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
        v57 = *(_QWORD *)(v109 + 16);
        v58 = (v56 & 1) == 0;
        v59 = v57 + v58;
        if (!__OFADD__(v57, v58))
        {
          LOBYTE(v8) = v56;
          if (*(_QWORD *)(v109 + 24) < v59)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, isUniquelyReferenced_nonNull_native);
            v60 = v109;
            v61 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
            if ((v8 & 1) != (v62 & 1))
              goto LABEL_123;
            v11 = v61;
            v63 = a1;
            if ((v8 & 1) == 0)
              goto LABEL_114;
            goto LABEL_77;
          }
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v60 = v109;
            v63 = a1;
            if ((v56 & 1) == 0)
              goto LABEL_114;
            goto LABEL_77;
          }
LABEL_81:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
          v65 = static _DictionaryStorage.copy(original:)();
          v60 = v65;
          if (!*(_QWORD *)(v4 + 16))
            goto LABEL_113;
          v66 = (char *)(v65 + 64);
          v105 = v60;
          __srca = (char *)(v4 + 64);
          v67 = (unint64_t)((1 << *(_BYTE *)(v60 + 32)) + 63) >> 6;
          if (v60 != v4 || v66 >= &__srca[8 * v67])
            memmove(v66, __srca, 8 * v67);
          v68 = 0;
          *(_QWORD *)(v60 + 16) = *(_QWORD *)(v4 + 16);
          v69 = 1 << *(_BYTE *)(v4 + 32);
          v70 = -1;
          if (v69 < 64)
            v70 = ~(-1 << v69);
          v71 = v70 & *(_QWORD *)(v4 + 64);
          v72 = (unint64_t)(v69 + 63) >> 6;
          while (1)
          {
            if (v71)
            {
              v73 = __clz(__rbit64(v71));
              v71 &= v71 - 1;
              v74 = v73 | (v68 << 6);
            }
            else
            {
              v83 = v68 + 1;
              if (__OFADD__(v68, 1))
              {
LABEL_117:
                __break(1u);
                goto LABEL_118;
              }
              if (v83 >= v72)
                goto LABEL_113;
              v84 = *(_QWORD *)&__srca[8 * v83];
              ++v68;
              if (!v84)
              {
                v68 = v83 + 1;
                if (v83 + 1 >= v72)
                  goto LABEL_113;
                v84 = *(_QWORD *)&__srca[8 * v68];
                if (!v84)
                {
                  v68 = v83 + 2;
                  if (v83 + 2 >= v72)
                    goto LABEL_113;
                  v84 = *(_QWORD *)&__srca[8 * v68];
                  if (!v84)
                  {
                    v68 = v83 + 3;
                    if (v83 + 3 >= v72)
                      goto LABEL_113;
                    v84 = *(_QWORD *)&__srca[8 * v68];
                    if (!v84)
                    {
                      v68 = v83 + 4;
                      if (v83 + 4 >= v72)
                        goto LABEL_113;
                      v84 = *(_QWORD *)&__srca[8 * v68];
                      if (!v84)
                      {
                        v68 = v83 + 5;
                        if (v83 + 5 >= v72)
                          goto LABEL_113;
                        v84 = *(_QWORD *)&__srca[8 * v68];
                        if (!v84)
                        {
                          v68 = v83 + 6;
                          if (v83 + 6 >= v72)
                            goto LABEL_113;
                          v84 = *(_QWORD *)&__srca[8 * v68];
                          if (!v84)
                          {
                            v85 = v83 + 7;
                            if (v85 >= v72)
                              goto LABEL_113;
                            v84 = *(_QWORD *)&__srca[8 * v85];
                            if (!v84)
                            {
                              while (1)
                              {
                                v68 = v85 + 1;
                                if (__OFADD__(v85, 1))
                                  goto LABEL_119;
                                v60 = v105;
                                if (v68 >= v72)
                                  break;
                                v84 = *(_QWORD *)&__srca[8 * v68];
                                ++v85;
                                if (v84)
                                  goto LABEL_112;
                              }
LABEL_113:
                              swift_bridgeObjectRelease();
                              v63 = a1;
                              if ((v8 & 1) == 0)
                              {
LABEL_114:
                                specialized _NativeDictionary._insert(at:key:value:)(v11, a2, (uint64_t)a3, v63, 1, (_QWORD *)v60);
                                swift_bridgeObjectRetain();
                                goto LABEL_115;
                              }
LABEL_77:
                              v64 = *(_QWORD *)(v60 + 56) + 16 * v11;
                              *(_QWORD *)v64 = v63;
                              *(_BYTE *)(v64 + 8) = 1;
LABEL_115:
                              *(_QWORD *)(v5 + 8) = v60;
                              swift_bridgeObjectRelease();
                              return swift_bridgeObjectRelease();
                            }
                            v68 = v85;
                            v60 = v105;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_112:
              v71 = (v84 - 1) & v84;
              v74 = __clz(__rbit64(v84)) + (v68 << 6);
            }
            v75 = 16 * v74;
            v76 = (uint64_t *)(*(_QWORD *)(v4 + 48) + v75);
            v78 = *v76;
            v77 = v76[1];
            v79 = *(_QWORD *)(v4 + 56) + v75;
            v80 = *(_QWORD *)v79;
            LOBYTE(v79) = *(_BYTE *)(v79 + 8);
            v81 = (_QWORD *)(*(_QWORD *)(v60 + 48) + v75);
            *v81 = v78;
            v81[1] = v77;
            v82 = *(_QWORD *)(v60 + 56) + v75;
            *(_QWORD *)v82 = v80;
            *(_BYTE *)(v82 + 8) = v79;
            swift_bridgeObjectRetain();
          }
        }
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      v18 = *(_QWORD *)(v104 + 8 * v19);
      if (!v18)
      {
        while (1)
        {
          v12 = v19 + 1;
          if (__OFADD__(v19, 1))
            goto LABEL_79;
          if (v12 >= (uint64_t)__src)
            goto LABEL_70;
          v18 = *(_QWORD *)(v104 + 8 * v12);
          ++v19;
          if (v18)
            goto LABEL_23;
        }
      }
      v12 = v19;
LABEL_23:
      v11 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_24:
      v20 = 16 * v16;
      v21 = (uint64_t *)(*(_QWORD *)(v8 + 48) + v20);
      v22 = *v21;
      v4 = v21[1];
      v23 = *(_QWORD *)(v8 + 56) + v20;
      v24 = *(_QWORD *)v23;
      v25 = *(unsigned __int8 *)(v23 + 8);
      v26 = *v21 == a2 && v4 == (_QWORD)a3;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (!v25)
          goto LABEL_120;
        if (v24 != a1)
        {
          _StringGuts.grow(_:)(83);
          v93._countAndFlagsBits = 0xD000000000000021;
          v93._object = (void *)0x800000018230B130;
          String.append(_:)(v93);
          swift_getKeyPath();
          dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          swift_getAtKeyPath();
          swift_release();
          v94._countAndFlagsBits = String.init(cString:)();
          String.append(_:)(v94);
          swift_bridgeObjectRelease();
          v95._object = (void *)0x800000018230B110;
          v95._countAndFlagsBits = 0xD000000000000014;
          String.append(_:)(v95);
          swift_getKeyPath();
          dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          swift_getAtKeyPath();
          swift_release();
          v96._countAndFlagsBits = String.init(cString:)();
          String.append(_:)(v96);
          swift_bridgeObjectRelease();
          v97._countAndFlagsBits = 0xD000000000000017;
          v97._object = (void *)0x800000018230B0D0;
          String.append(_:)(v97);
          v98._countAndFlagsBits = a2;
          v98._object = a3;
          String.append(_:)(v98);
          v99._countAndFlagsBits = 39;
          v99._object = (void *)0xE100000000000000;
          String.append(_:)(v99);
          goto LABEL_122;
        }
        return swift_release();
      }
      if (v24 == a1)
        v27 = v25;
      else
        v27 = 0;
    }
    while (v27 != 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v4);
    v30 = v29;
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
      break;
LABEL_7:
    swift_bridgeObjectRelease();
  }
  v31 = swift_isUniquelyReferenced_nonNull_native();
  v32 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 8) = 0x8000000000000000;
  if ((v31 & 1) != 0)
  {
    v13 = v32;
LABEL_6:
    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v28, v13);
    v14 = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v13;
    swift_bridgeObjectRelease();
    v4 = v14;
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  v33 = static _DictionaryStorage.copy(original:)();
  v13 = v33;
  if (!*(_QWORD *)(v32 + 16))
  {
LABEL_66:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v34 = (char *)(v33 + 64);
  v35 = (char *)(v32 + 64);
  v36 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  v100 = v32 + 64;
  if (v13 != v32 || v34 >= &v35[8 * v36])
    memmove(v34, v35, 8 * v36);
  v37 = 0;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v32 + 16);
  v38 = 1 << *(_BYTE *)(v32 + 32);
  if (v38 < 64)
    v39 = ~(-1 << v38);
  else
    v39 = -1;
  v40 = v39 & *(_QWORD *)(v32 + 64);
  v101 = (unint64_t)(v38 + 63) >> 6;
  while (2)
  {
    if (v40)
    {
      v102 = (v40 - 1) & v40;
      v103 = v37;
      v41 = __clz(__rbit64(v40)) | (v37 << 6);
LABEL_44:
      v42 = 16 * v41;
      v43 = (uint64_t *)(*(_QWORD *)(v32 + 48) + v42);
      v45 = *v43;
      v44 = v43[1];
      v46 = *(_QWORD *)(v32 + 56) + v42;
      v47 = *(_QWORD *)v46;
      LOBYTE(v46) = *(_BYTE *)(v46 + 8);
      v48 = (_QWORD *)(*(_QWORD *)(v13 + 48) + v42);
      *v48 = v45;
      v48[1] = v44;
      v49 = *(_QWORD *)(v13 + 56) + v42;
      *(_QWORD *)v49 = v47;
      *(_BYTE *)(v49 + 8) = v46;
      swift_bridgeObjectRetain();
      v40 = v102;
      v37 = v103;
      continue;
    }
    break;
  }
  v50 = v37 + 1;
  if (__OFADD__(v37, 1))
  {
    __break(1u);
    goto LABEL_117;
  }
  if (v50 >= v101)
    goto LABEL_66;
  v51 = *(_QWORD *)(v100 + 8 * v50);
  v52 = v37 + 1;
  if (v51)
    goto LABEL_65;
  v52 = v37 + 2;
  if (v37 + 2 >= v101)
    goto LABEL_66;
  v51 = *(_QWORD *)(v100 + 8 * v52);
  if (v51)
    goto LABEL_65;
  v52 = v37 + 3;
  if (v37 + 3 >= v101)
    goto LABEL_66;
  v51 = *(_QWORD *)(v100 + 8 * v52);
  if (v51)
    goto LABEL_65;
  v52 = v37 + 4;
  if (v37 + 4 >= v101)
    goto LABEL_66;
  v51 = *(_QWORD *)(v100 + 8 * v52);
  if (v51)
    goto LABEL_65;
  v52 = v37 + 5;
  if (v37 + 5 >= v101)
    goto LABEL_66;
  v51 = *(_QWORD *)(v100 + 8 * v52);
  if (v51)
    goto LABEL_65;
  v52 = v37 + 6;
  if (v37 + 6 >= v101)
    goto LABEL_66;
  v51 = *(_QWORD *)(v100 + 8 * v52);
  if (v51)
  {
LABEL_65:
    v102 = (v51 - 1) & v51;
    v103 = v52;
    v41 = __clz(__rbit64(v51)) + (v52 << 6);
    goto LABEL_44;
  }
  v53 = v37 + 7;
  if (v37 + 7 >= v101)
    goto LABEL_66;
  v51 = *(_QWORD *)(v100 + 8 * v53);
  if (v51)
  {
    v52 = v37 + 7;
    goto LABEL_65;
  }
  while (1)
  {
    v52 = v53 + 1;
    if (__OFADD__(v53, 1))
      break;
    if (v52 >= v101)
      goto LABEL_66;
    v51 = *(_QWORD *)(v100 + 8 * v52);
    ++v53;
    if (v51)
      goto LABEL_65;
  }
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  _StringGuts.grow(_:)(75);
  v86._countAndFlagsBits = 0xD000000000000019;
  v86._object = (void *)0x800000018230B0F0;
  String.append(_:)(v86);
  v87._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v87);
  swift_bridgeObjectRelease();
  v88._object = (void *)0x800000018230B110;
  v88._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v88);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  swift_getAtKeyPath();
  swift_release();
  v89._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  v90._countAndFlagsBits = 0xD000000000000017;
  v90._object = (void *)0x800000018230B0D0;
  String.append(_:)(v90);
  v91._countAndFlagsBits = a2;
  v91._object = a3;
  String.append(_:)(v91);
  v92._countAndFlagsBits = 39;
  v92._object = (void *)0xE100000000000000;
  String.append(_:)(v92);
LABEL_122:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_123:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = a6[7] + 16 * result;
  *(_QWORD *)v7 = a4;
  *(_BYTE *)(v7 + 8) = a5 & 1;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

uint64_t *PredicateCodableConfiguration.allowPartialType(_:identifier:)(uint64_t *result, uint64_t a2, void *a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v5 = *result;
  if ((unint64_t)*result > 0x7FF || ((unint64_t)(v5 - 512) >= 3 ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    v7 = TypeMetadata.descriptor.getter();
    return (uint64_t *)PredicateCodableConfiguration._allowPartialType(_:identifier:)(v7, a2, a3);
  }
  return result;
}

void URL.appending<A>(component:directoryHint:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  Swift::String v17;
  _QWORD v18[22];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v10;
  v13 = *v3;
  v12 = v3[1];
  v14 = v3[2];
  if (!_foundation_swift_url_feature_enabled())
  {
    v18[7] = v14;
    v18[8] = v12;
    v18[9] = a3;
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v18[6] = a1;
    v15(v9, a1, a2);
    v16 = String.init<A>(_:)();
    v17._countAndFlagsBits = 47;
    v17._object = (void *)0xE100000000000000;
    v18[10] = v16;
    String.hasSuffix(_:)(v17);
    __asm { BR              X9 }
  }
  v18[13] = v13;
  v18[14] = v12;
  v18[15] = v14;
  LOBYTE(v19) = v11;
  URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, 1, a3);
}

ValueMetadata *type metadata accessor for PredicateCodableConfiguration.AllowListKeyPath()
{
  return &type metadata for PredicateCodableConfiguration.AllowListKeyPath;
}

ValueMetadata *type metadata accessor for PredicateCodableConfiguration.AllowListType()
{
  return &type metadata for PredicateCodableConfiguration.AllowListType;
}

void AttributedString.subscript.modify(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  char *v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;

  v2 = v1;
  v4 = (char *)malloc(0x240uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 70) = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = (_QWORD *)*v2;
    v7 = *(_OWORD *)(*v2 + 32);
    v6 = *(_OWORD *)(*v2 + 48);
    *((_OWORD *)v4 + 20) = *(_OWORD *)(*v2 + 16);
    *((_OWORD *)v4 + 21) = v7;
    *((_OWORD *)v4 + 22) = v6;
    v8 = v5[8];
    v9 = v5[9];
    v11 = v5[10];
    v10 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)(v4 + 320));
    swift_unknownObjectRetain();
    *v2 = AttributedString.Guts.init(string:runs:)((_OWORD *)v4 + 20, v8, v9, v11, v10);
    swift_release();
  }
  v12 = *v2;
  v14 = *(_OWORD *)(*v2 + 32);
  v13 = *(_OWORD *)(*v2 + 48);
  *((_OWORD *)v4 + 32) = *(_OWORD *)(*v2 + 16);
  *((_OWORD *)v4 + 33) = v14;
  *((_OWORD *)v4 + 34) = v13;
  v15 = BigString.startIndex.getter();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = BigString.endIndex.getter();
  *((_QWORD *)v4 + 14) = v12;
  *((_QWORD *)v4 + 15) = v15;
  *((_QWORD *)v4 + 16) = v17;
  *((_QWORD *)v4 + 17) = v19;
  *((_QWORD *)v4 + 18) = v21;
  *((_QWORD *)v4 + 19) = v22;
  *((_QWORD *)v4 + 20) = v23;
  *((_QWORD *)v4 + 21) = v24;
  *((_QWORD *)v4 + 22) = v25;
  *((_QWORD *)v4 + 23) = 0;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v26 = *((_OWORD *)v4 + 17);
  v27 = *((_OWORD *)v4 + 18);
  v28 = *((_OWORD *)v4 + 19);
  v29 = (_OWORD *)*v2;
  *((_OWORD *)v4 + 12) = *((_OWORD *)v4 + 16);
  *((_OWORD *)v4 + 13) = v26;
  *((_OWORD *)v4 + 14) = v27;
  *((_OWORD *)v4 + 15) = v28;
  v31 = v29[2];
  v30 = v29[3];
  *((_OWORD *)v4 + 29) = v29[1];
  *((_OWORD *)v4 + 30) = v31;
  *((_OWORD *)v4 + 31) = v30;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  swift_release();
  outlined release of Locale((uint64_t)(v4 + 368));
  outlined release of Locale((uint64_t)v4);
  *((_QWORD *)v4 + 14) = v29;
  v32 = *((_OWORD *)v4 + 4);
  *(_OWORD *)(v4 + 120) = *((_OWORD *)v4 + 3);
  *(_OWORD *)(v4 + 136) = v32;
  v33 = *((_OWORD *)v4 + 6);
  *(_OWORD *)(v4 + 152) = *((_OWORD *)v4 + 5);
  *(_OWORD *)(v4 + 168) = v33;
  if (one-time initialization token for currentIdentity != -1)
    swift_once();
  v34 = static AttributedString.currentIdentity;
  v35 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v35);
  v36 = *(_QWORD *)(v34 + 16);
  v37 = v36 + 1;
  if (__OFADD__(v36, 1))
  {
    __break(1u);
  }
  else
  {
    v38 = v4 + 416;
    *((_QWORD *)v4 + 71) = v37;
    *(_QWORD *)(v34 + 16) = v37;
    os_unfair_lock_unlock(v35);
    swift_release();
    *((_QWORD *)v4 + 23) = v37;
    BigString.init()();
    *((_QWORD *)v4 + 32) = 0;
    MEMORY[0x186DA9E90](v4 + 256, 8);
    v39 = *((_QWORD *)v4 + 32);
    type metadata accessor for AttributedString.Guts();
    v40 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      v41 = v38[1];
      *(_OWORD *)(v40 + 16) = *v38;
      *(_OWORD *)(v40 + 32) = v41;
      *(_OWORD *)(v40 + 48) = v38[2];
      *(_QWORD *)(v40 + 64) = 0;
      *(_QWORD *)(v40 + 72) = 0;
      *(_QWORD *)(v40 + 80) = 0;
      *(_QWORD *)(v40 + 88) = v39;
      *v2 = v40;
      swift_release();
      return;
    }
  }
  __break(1u);
}

uint64_t *closure #1 in static AttributedString._nextModifyIdentity.getter@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *result + 1;
  if (__OFADD__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    *result = v2;
    *a2 = v2;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.UnicodeScalarView, &type metadata for AttributedString.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.UnicodeScalarView, &type metadata for AttributedString.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.UnicodeScalarView, &type metadata for AttributedString.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.UnicodeScalarView, &type metadata for AttributedString.UnicodeScalarView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute, &type metadata for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute and conformance AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.InflectionRuleAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.InflectionRuleAttribute, &type metadata for AttributeScopes.FoundationAttributes.InflectionRuleAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InflectionRuleAttribute and conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.MorphologyAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.MorphologyAttribute, &type metadata for AttributeScopes.FoundationAttributes.MorphologyAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute);
  }
  return result;
}

uint64_t one-time initialization function for observationInfoGetter()
{
  uint64_t result;

  result = Selector.init(_:)();
  static NSKeyValueObservation.Helper.observationInfoGetter = result;
  return result;
}

unint64_t one-time initialization function for cache()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v0 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  swift_retain();
  v1 = 0;
  while (1)
  {
    v2 = (char *)&outlined read-only object #0 of TimeZoneCache.State.init() + v1;
    v3 = *(_QWORD *)((char *)&outlined read-only object #0 of TimeZoneCache.State.init() + v1 + 40);
    v4 = *(_QWORD *)((char *)&outlined read-only object #0 of TimeZoneCache.State.init() + v1 + 56);
    if (!v3)
    {
      swift_bridgeObjectRetain();
LABEL_8:
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<TimeZoneCache.State>._Buffer);
      result = swift_allocObject();
      *(_DWORD *)(result + 144) = 0;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      v14 = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = v14;
      *(_QWORD *)(result + 64) = v14;
      *(_QWORD *)(result + 72) = -1;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_QWORD *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = v14;
      *(_QWORD *)(result + 128) = v14;
      *(_QWORD *)(result + 136) = v0;
      static TimeZoneCache.cache = result;
      return result;
    }
    v5 = *((_QWORD *)v2 + 4);
    v6 = *((_QWORD *)v2 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v3);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v0 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = (uint64_t *)(v0[6] + 16 * result);
    *v9 = v5;
    v9[1] = v3;
    v10 = (_QWORD *)(v0[7] + 16 * result);
    *v10 = v6;
    v10[1] = v4;
    v11 = v0[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_10;
    v0[2] = v13;
    v1 += 32;
    if (v1 == 1632)
      goto LABEL_8;
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

unint64_t instantiation function for generic protocol witness table for _CalendarAutoupdating(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _CalendarAutoupdating and conformance _CalendarAutoupdating();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _CalendarAutoupdating and conformance _CalendarAutoupdating()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating;
  if (!lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating)
  {
    v1 = type metadata accessor for _CalendarAutoupdating();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _CalendarAutoupdating, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating);
  }
  return result;
}

id DateInterval.description.getter()
{
  double *v0;
  double v1;
  double v2;
  id v3;
  id v4;
  id v5;
  Swift::String v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  Swift::String v12;
  id v14;

  v1 = *v0;
  v2 = v0[1];
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
  v4 = objc_msgSend(v3, sel_description);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v14 = v5;
  v6._countAndFlagsBits = 544175136;
  v6._object = (void *)0xE400000000000000;
  String.append(_:)(v6);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v1 + v2);
  v8 = objc_msgSend(v7, sel_description);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12._countAndFlagsBits = (uint64_t)v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t __performOrderedCleanup(id *a1)
{
  _CFAutoreleasePoolPush();

  free(a1);
  return _CFAutoreleasePoolPop();
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.HourOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption;
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  uint64_t v0;

  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInt_, v0);
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance JSONDecoderImpl.UnkeyedContainer@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized JSONDecoderImpl.UnkeyedContainer.decoderForNextElement<A>(ofType:)();
  if (!v2)
  {
    v5 = *(_QWORD *)(v1 + 64);
    v6 = __OFADD__(v5, 1);
    v7 = v5 + 1;
    if (v6)
    {
      __break(1u);
    }
    else
    {
      v8 = result;
      *(_QWORD *)(v1 + 64) = v7;
      *(_QWORD *)(v1 + 24) = 0;
      *(_QWORD *)(v1 + 32) = 0;
      *(_BYTE *)(v1 + 40) = -2;
      a1[3] = type metadata accessor for JSONDecoderImpl();
      result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (uint64_t (*)(uint64_t))type metadata accessor for JSONDecoderImpl, (uint64_t)&protocol conformance descriptor for JSONDecoderImpl);
      a1[4] = result;
      *a1 = v8;
    }
  }
  return result;
}

uint64_t specialized JSONDecoderImpl.UnkeyedContainer.decoderForNextElement<A>(ofType:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t *v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  ValueMetadata *v49;
  unint64_t v50;
  uint64_t v51;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
  v3 = *(unsigned __int8 *)(v0 + 40);
  if (v3 < 0xFE)
  {
    v17 = *(_QWORD *)(v0 + 24);
    v18 = *(_QWORD *)(v0 + 32);
    goto LABEL_10;
  }
  v4 = v2;
  v5 = *(_QWORD *)(v0 + 8);
  v6 = JSONMap.loadValue(at:)(v5);
  if (v8 <= 0xFDu)
  {
    v17 = v6;
    v18 = v7;
    LOBYTE(v3) = v8;
    *(_QWORD *)(v0 + 8) = JSONMap.offset(after:)(v5);
    *(_QWORD *)(v0 + 24) = v17;
    *(_QWORD *)(v0 + 32) = v18;
    *(_BYTE *)(v0 + 40) = v3;
LABEL_10:
    v19 = *(_QWORD *)v0;
    v46 = *(_QWORD *)(*(_QWORD *)v0 + 24);
    v47 = *(_QWORD *)(*(_QWORD *)v0 + 32);
    v21 = *(_QWORD *)(v0 + 64);
    v20 = *(_QWORD *)(v1 + 72);
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = v21;
    *(_QWORD *)(v22 + 24) = v20;
    if (v20 >> 62)
    {
      if (v20 >> 62 != 1)
      {
        v26 = 1;
        goto LABEL_15;
      }
      v23 = (int64_t *)((v20 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v23 = (int64_t *)(v20 + 64);
    }
    v24 = *v23;
    swift_retain();
    v26 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_20;
    }
LABEL_15:
    v35 = v18;
    v36 = v17;
    v37 = v3;
    *(_QWORD *)(v22 + 32) = v26;
    v27 = *(void **)(v19 + 40);
    v39 = *(_QWORD *)(v19 + 48);
    v28 = *(_QWORD *)(v19 + 64);
    v29 = *(_QWORD *)(v19 + 72);
    v30 = *(_QWORD *)(v19 + 80);
    v43 = *(_QWORD *)(v19 + 88);
    v40 = *(_QWORD *)(v19 + 104);
    v41 = *(_QWORD *)(v19 + 96);
    v51 = *(_QWORD *)(v19 + 112);
    v31 = *(_QWORD *)(v19 + 128);
    v42 = *(_QWORD *)(v19 + 120);
    v32 = *(_QWORD *)(v19 + 144);
    v44 = *(_QWORD *)(v19 + 136);
    v45 = *(_BYTE *)(v19 + 152);
    v38 = *(_BYTE *)(v19 + 56);
    type metadata accessor for JSONDecoderImpl();
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 160) = v22 | 0x4000000000000000;
    *(_QWORD *)(v1 + 24) = v46;
    *(_QWORD *)(v1 + 32) = v47;
    *(_QWORD *)(v1 + 40) = v27;
    *(_QWORD *)(v1 + 48) = v39;
    *(_BYTE *)(v1 + 56) = v38;
    *(_QWORD *)(v1 + 64) = v28;
    *(_QWORD *)(v1 + 72) = v29;
    *(_QWORD *)(v1 + 80) = v30;
    *(_QWORD *)(v1 + 88) = v43;
    *(_QWORD *)(v1 + 96) = v41;
    *(_QWORD *)(v1 + 104) = v40;
    *(_QWORD *)(v1 + 112) = v51;
    *(_QWORD *)(v1 + 120) = v42;
    *(_QWORD *)(v1 + 128) = v31;
    *(_QWORD *)(v1 + 136) = v44;
    *(_QWORD *)(v1 + 144) = v32;
    *(_BYTE *)(v1 + 152) = v45;
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of JSONEncoder.DateEncodingStrategy(v27, v39, v38);
    outlined copy of JSONEncoder.KeyEncodingStrategy(v28);
    outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v30, v43);
    outlined copy of JSONEncoder.KeyEncodingStrategy(v31);
    swift_bridgeObjectRetain();
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v21 = v25[2];
    v26 = v25[3];
    v24 = v21 + 1;
    if (v21 < v26 >> 1)
    {
LABEL_16:
      v25[2] = v24;
      v33 = &v25[3 * v21];
      v33[4] = v36;
      v33[5] = v35;
      *((_BYTE *)v33 + 48) = v37;
      *(_QWORD *)(v1 + 16) = v25;
      return v1;
    }
LABEL_20:
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v24, 1, v25);
    goto LABEL_16;
  }
  v9 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v0 + 72));
  v10 = *(_QWORD *)(v1 + 64);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
  v49 = &type metadata for _CodingKey;
  v50 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v13 = swift_allocObject();
  *(_QWORD *)&v48 = v13;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = v10;
  *(_BYTE *)(v13 + 40) = 2;
  v9[2] = v12 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)&v9[5 * v12 + 4]);
  v14 = type metadata accessor for DecodingError();
  swift_allocError();
  v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v16 = v4;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x1E0DEC460], v14);
  swift_willThrow();
  return v1;
}

uint64_t one-time initialization function for observationInfoSetter()
{
  uint64_t result;

  result = Selector.init(_:)();
  static NSKeyValueObservation.Helper.observationInfoSetter = result;
  return result;
}

uint64_t static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v24;
  char v25[4];
  int v26;

  v14 = a3 & 1;
  v15 = a6 & 1;
  v16 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = &v25[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v19 = *(_DWORD *)(a1 + 4);
  v20 = *a4;
  v25[0] = *(_BYTE *)a1;
  v26 = v19;
  v24 = v20;
  outlined init with copy of ICUNumberFormatter.Signature(a7, (uint64_t)v18, v21);
  v22 = swift_bridgeObjectRetain();
  return Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)(v22, v25, a2, v14, &v24, a5, v15, (uint64_t)v18, a8);
}

uint64_t Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v30;

  v15 = *a2;
  v16 = *((_DWORD *)a2 + 1);
  v17 = *a5;
  v18 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v19 = a9 + *(int *)(v18 + 40);
  *(_QWORD *)(a9 + 16) = a1;
  v20 = a8;
  *(_BYTE *)(a9 + 24) = v15;
  *(_DWORD *)(a9 + 28) = v16;
  *(_QWORD *)(a9 + 32) = a3;
  *(_BYTE *)(a9 + 40) = a4 & 1;
  *(_QWORD *)(a9 + 48) = v17;
  outlined init with copy of ICUNumberFormatter.Signature(a8, a9 + *(int *)(v18 + 36), type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  v21 = 0x7FFFFFFFFFFFFFFELL;
  if (a6 < 0x7FFFFFFFFFFFFFFELL)
    v21 = a6;
  if (a7 & 1 | (a6 < 1))
    v22 = 0;
  else
    v22 = v21;
  if (a7 & 1 | (a6 < 1))
    v23 = 0;
  else
    v23 = v21 + 1;
  *(_QWORD *)v19 = v22;
  *(_QWORD *)(v19 + 8) = v23;
  *(_BYTE *)(v19 + 16) = a7 & 1 | (a6 < 1);
  if (one-time initialization token for cache != -1)
    swift_once();
  v24 = static LocaleCache.cache + 16;
  v25 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v25);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v24, &v30);
  os_unfair_lock_unlock(v25);
  swift_release_n();
  v26 = v30;
  v27 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  result = outlined destroy of ICUNumberFormatter.Signature(v20, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  *(_QWORD *)a9 = v26;
  *(_QWORD *)(a9 + 8) = v27;
  return result;
}

uint64_t Duration.UnitsFormatStyle._getSkeletons(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  uint64_t v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;

  v3 = v2;
  v62 = (_OWORD *)a1;
  v63 = a2;
  v58 = 0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v60 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v61 = (uint64_t)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v55 - v9;
  MEMORY[0x1E0C80A78](v11);
  v64 = (_OWORD *)((char *)v55 - v12);
  MEMORY[0x1E0C80A78](v13);
  v15 = (_OWORD *)((char *)v55 - v14);
  v16 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = *(_QWORD *)(v2 + 16);
  v19 = *(_QWORD *)(v2 + 32);
  v20 = *(_BYTE *)(v2 + 40);
  v21 = v2 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle(0) + 36);
  outlined init with copy of ICUNumberFormatter.Signature(v21, (uint64_t)v18, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  v22 = (uint64_t)&v18[*(int *)(v16 + 24)];
  v23 = specialized static Duration.UnitsFormatStyle.unitsToUse(duration:allowedUnits:maximumUnitCount:roundSmallerParts:trailingFractionalPartLength:roundingIncrement:dropZeroUnits:)((uint64_t)v62, v63, v59, v19, v20, v22, *(_QWORD *)(v21 + 8), *(_QWORD *)(v21 + *(int *)(v16 + 28)), *(_BYTE *)(v21 + *(int *)(v16 + 28) + 8), *(_QWORD *)(v3 + 48) < 1);
  v63 = v24;
  v25 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v22, v25);
  v62 = v15;
  Duration.UnitsFormatStyle._createNumberFormatStyle(useFractionalLimitsIfAvailable:)(1, v15);
  result = Duration.UnitsFormatStyle._createNumberFormatStyle(useFractionalLimitsIfAvailable:)(0, v64);
  v27 = *(_QWORD *)(v23 + 16);
  if (v27)
  {
    v28 = v63;
    v29 = *(_QWORD *)(v63 + 16);
    if (!v29)
      goto LABEL_9;
  }
  else
  {
    v30 = swift_bridgeObjectRetain();
    specialized Sequence.min(by:)(v30, (char *)&v66);
    result = swift_bridgeObjectRelease();
    v31 = v66;
    if (v66 != 8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v66) = v31;
      Duration.UnitsFormatStyle.Unit.icuSkeleton.getter();
      v44 = v43;
      v46 = v45;
      v47 = *(_BYTE *)(v3 + 24);
      v48 = (uint64_t)v62;
      outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v62, (uint64_t)v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v6, 0, 1, v65);
      v49 = specialized static ICUMeasurementNumberFormatter.skeleton(_:width:usage:numberFormatStyle:)(v44, v46, v47, 0xEu, (uint64_t)v6);
      v51 = v50;
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(skeleton: String, measurementUnit: Duration.UnitsFormatStyle.Unit, measurementValue: Double)>);
      v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_18205C850;
      *(_QWORD *)(v34 + 32) = v49;
      *(_QWORD *)(v34 + 40) = v51;
      *(_BYTE *)(v34 + 48) = v31;
      *(_QWORD *)(v34 + 56) = 0;
      outlined destroy of Any?((uint64_t)v64, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      v42 = v48;
LABEL_23:
      outlined destroy of Any?(v42, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      return v34;
    }
    v28 = v63;
    v29 = *(_QWORD *)(v63 + 16);
    if (!v29)
      goto LABEL_9;
  }
  if (*(double *)(v28 + 32) < 0.0)
  {
    v32 = 1;
LABEL_10:
    v67 = 9;
    v33 = *(_QWORD *)(v23 + 16);
    swift_bridgeObjectRetain();
    if (v33)
    {
      v55[0] = v61 + 74;
      v56 = v27 - 1;
      v57 = v28 + 32;
      v34 = MEMORY[0x1E0DEE9D8];
      v55[1] = 0x800000018230A240;
      v58 = v23;
      v59 = v3;
      if (*(_QWORD *)(v28 + 16))
      {
        v35 = *(unsigned __int8 *)(v23 + 32);
        if (v56)
          v36 = v64;
        else
          v36 = v62;
        outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v36, (uint64_t)v10);
        if (v32
          && (v37 = specialized getter of mostSignificantUnit #1 in Duration.UnitsFormatStyle._getSkeletons(_:)(&v67, v23), v37 != 8)&& (_DWORD)v35 == v37)
        {
          v38 = v61;
          outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v10, v61);
          v39 = v55[0] + *(int *)(v65 + 36);
          *(_BYTE *)(v39 + 2) = 0;
          *(_WORD *)v39 = 0;
          outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          outlined init with take of LocalePreferences?(v38, (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        }
        else
        {
          v40 = v61;
          outlined init with copy of FloatingPointFormatStyle<Double>((uint64_t)v10, v61);
          v41 = v55[0] + *(int *)(v65 + 36);
          *(_BYTE *)(v41 + 2) = 1;
          *(_WORD *)v41 = 257;
          outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
          outlined init with take of LocalePreferences?(v40, (uint64_t)v10, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        }
        __asm { BR              X8 }
      }
    }
    else
    {
      v34 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v64, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    v42 = (uint64_t)v62;
    goto LABEL_23;
  }
  if (v29 == 1)
  {
LABEL_9:
    v32 = 0;
    goto LABEL_10;
  }
  v52 = 5;
  while (1)
  {
    v53 = v52 - 3;
    if (__OFADD__(v52 - 4, 1))
      break;
    v54 = *(double *)(v28 + 8 * v52);
    v32 = v54 < 0.0;
    if (v54 >= 0.0)
    {
      ++v52;
      if (v53 != v29)
        continue;
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

Swift::String __swiftcall BinaryFloatingPoint.formatted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  int *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  Swift::String result;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  v5 = type metadata accessor for FloatingPointFormatStyle(0, v0, v1, v2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v24 - v7);
  if (one-time initialization token for cache != -1)
    swift_once();
  v9 = static LocaleCache.cache + 16;
  v10 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v9, &v25);
  os_unfair_lock_unlock(v10);
  swift_release_n();
  v11 = v25;
  v12 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  v13 = (char *)v8 + *(int *)(v5 + 36);
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v13 + 7) = 0;
  *((_QWORD *)v13 + 8) = 0;
  *((_QWORD *)v13 + 6) = 0;
  *((_DWORD *)v13 + 18) = 131584;
  *((_WORD *)v13 + 38) = 512;
  v14 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v15 = &v13[v14[9]];
  v16 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = &v13[v14[10]];
  *(_QWORD *)v17 = 0;
  v17[8] = -1;
  v13[v14[11]] = 3;
  *v8 = v11;
  v8[1] = v12;
  v18 = FloatingPointFormatStyle.format(_:)(v4, v5);
  v20 = v19;
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  v21 = v18;
  v22 = v20;
  result._object = v22;
  result._countAndFlagsBits = v21;
  return result;
}

__n128 IntegerFormatStyle.precision(_:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __n128 result;
  __n128 v10;
  __int128 v11;
  __int128 v12;

  v11 = a1[1];
  v12 = *a1;
  v10 = (__n128)a1[2];
  v6 = *((_QWORD *)a1 + 6);
  v7 = *((_BYTE *)a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v8 = a3 + *(int *)(a2 + 36);
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  result = v10;
  *(__n128 *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 64) = v6;
  *(_BYTE *)(v8 + 72) = v7;
  return result;
}

_OWORD *initializeWithCopy for IntegerFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  *a1 = *a2;
  v4 = *(int *)(a3 + 36);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v5[8] = *((_BYTE *)a2 + v4 + 8);
  *(_QWORD *)v5 = *(_QWORD *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a2 + v4 + 57);
  v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *((_OWORD *)v5 + 2) = *(_OWORD *)((char *)a2 + v4 + 32);
  *((_OWORD *)v5 + 3) = v7;
  *((_OWORD *)v5 + 1) = v8;
  v5[73] = *((_BYTE *)a2 + v4 + 73);
  *((_WORD *)v5 + 37) = *(_WORD *)((char *)a2 + v4 + 74);
  v5[76] = *((_BYTE *)a2 + v4 + 76);
  v5[77] = *((_BYTE *)a2 + v4 + 77);
  v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v10 = v9[9];
  v11 = &v5[v10];
  v12 = &v6[v10];
  v13 = type metadata accessor for FloatingPointRoundingRule();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_unknownObjectRetain();
  if (v15(v12, 1, v13))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = v9[10];
  v18 = &v5[v17];
  v19 = &v6[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v5[v9[11]] = v6[v9[11]];
  return a1;
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t Duration.UnitsFormatStyle._createNumberFormatStyle(useFractionalLimitsIfAvailable:)@<X0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  __int128 *v2;
  int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v7[73] = 2;
  *(_DWORD *)(v7 + 74) = 33554434;
  v9 = &v7[*(int *)(v8 + 36)];
  v10 = type metadata accessor for FloatingPointRoundingRule();
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v12 = 0;
  v13 = 0;
  v14 = &v7[v5[10]];
  *(_QWORD *)v14 = 0;
  v14[8] = -1;
  v7[v5[11]] = 3;
  if ((a1 & 1) != 0
    && (result = type metadata accessor for Duration.UnitsFormatStyle(0),
        v16 = (uint64_t *)((char *)v2 + *(int *)(result + 36)),
        v12 = *v16,
        v13 = v16[1],
        v13 < *v16))
  {
    __break(1u);
  }
  else
  {
    v17 = *((_QWORD *)v2 + 6);
    result = type metadata accessor for Duration.UnitsFormatStyle(0);
    v18 = (uint64_t)v2 + *(int *)(result + 40);
    if ((*(_BYTE *)(v18 + 16) & 1) != 0)
    {
      v19 = 998;
      if (v12 >= 998)
        v20 = 998;
      else
        v20 = v12;
      v21 = v20 & ~(v20 >> 63);
      if ((v13 & ~(v13 >> 63)) < 998)
        v19 = v13 & ~(v13 >> 63);
      if (v17 < 1)
      {
        *((_OWORD *)v7 + 1) = xmmword_18205FD60;
        *((_OWORD *)v7 + 2) = xmmword_18205FD60;
      }
      else
      {
        v22 = 999;
        if (v17 < 999)
          v22 = v17;
        *((_QWORD *)v7 + 2) = v22;
        *((_QWORD *)v7 + 3) = 0;
        *((_QWORD *)v7 + 4) = 0;
        *((_QWORD *)v7 + 5) = 1;
      }
      *((_QWORD *)v7 + 6) = v21;
      goto LABEL_39;
    }
    v23 = *(_QWORD *)(v18 + 8);
    if (v17 < 1)
    {
      v27 = *(_QWORD *)v18;
      if (v27 >= 999)
        v27 = 999;
      v28 = v27 & ~(v27 >> 63);
      v29 = v23 & ~(v23 >> 63);
      if (v29 >= 999)
        v29 = 999;
      if (v12 >= 998)
        v30 = 998;
      else
        v30 = v12;
      v26 = v30 & ~(v30 >> 63);
      *((_QWORD *)v7 + 2) = v28;
      *((_QWORD *)v7 + 3) = 0;
      *((_QWORD *)v7 + 4) = v29;
      *((_QWORD *)v7 + 5) = 0;
      if ((v13 & ~(v13 >> 63)) >= 998)
        v19 = 998;
      else
        v19 = v13 & ~(v13 >> 63);
      goto LABEL_38;
    }
    if (v23 >= v17)
    {
      if (v17 >= 999)
        v24 = 999;
      else
        v24 = v17;
      if (v23 >= 999)
        v23 = 999;
      if (v12 >= 998)
        v25 = 998;
      else
        v25 = v12;
      v26 = v25 & ~(v25 >> 63);
      *((_QWORD *)v7 + 2) = v24;
      *((_QWORD *)v7 + 3) = 0;
      *((_QWORD *)v7 + 4) = v23;
      *((_QWORD *)v7 + 5) = 0;
      if ((v13 & ~(v13 >> 63)) >= 998)
        v19 = 998;
      else
        v19 = v13 & ~(v13 >> 63);
LABEL_38:
      *((_QWORD *)v7 + 6) = v26;
LABEL_39:
      *((_QWORD *)v7 + 7) = 0;
      *((_QWORD *)v7 + 8) = v19;
      v7[72] = 0x80;
      v31 = (uint64_t)a2
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>)
                   + 36);
      *(_QWORD *)v31 = 0;
      *(_BYTE *)(v31 + 8) = 1;
      *(_QWORD *)(v31 + 16) = 0;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0;
      *(_QWORD *)(v31 + 40) = 0x1FFFFFFFELL;
      *(_QWORD *)(v31 + 56) = 0;
      *(_QWORD *)(v31 + 64) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_DWORD *)(v31 + 72) = 131584;
      *(_WORD *)(v31 + 76) = 512;
      v32 = v31 + v5[9];
      v34 = *v2;
      v11((char *)v32, 1, 1, v10);
      v33 = v31 + v5[10];
      *(_QWORD *)v33 = 0;
      *(_BYTE *)(v33 + 8) = -1;
      *(_BYTE *)(v31 + v5[11]) = 3;
      *a2 = v34;
      swift_unknownObjectRetain();
      return outlined assign with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v7, v31, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.UnitsFormatStyle);
}

uint64_t outlined assign with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t specialized static Duration.UnitsFormatStyle.unitsToUse(duration:allowedUnits:maximumUnitCount:roundSmallerParts:trailingFractionalPartLength:roundingIncrement:dropZeroUnits:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  swift_bridgeObjectRetain();
  v18 = specialized _copyCollectionToContiguousArray<A>(_:)(a3);
  swift_bridgeObjectRelease();
  v38 = v18;
  specialized MutableCollection<>.sort(by:)(&v38);
  v19 = v38;
  v37 = a8;
  Duration.valuesForUnits(_:trailingFractionalLength:smallestUnitRounding:roundingIncrement:)(v38, a7, a6, a8, a9 & 1, a1, a2);
  v21 = v20;
  if ((a5 & 1) != 0 || *(_QWORD *)(a3 + 16) <= a4)
  {
    if ((a10 & 1) != 0)
    {
      v29 = specialized static Duration.UnitsFormatStyle.removingZeroUnits(units:values:)(v19, v20);
      swift_release();
      swift_bridgeObjectRelease();
      return v29;
    }
  }
  else if ((a10 & 1) == 0
         || (v22 = specialized static Duration.UnitsFormatStyle.removingZeroUnits(units:values:)(v19, v20),
             v24 = v23,
             swift_release(),
             swift_bridgeObjectRelease(),
             v19 = v22,
             v21 = v24,
             *(_QWORD *)(v22 + 16) > a4))
  {
    v25 = *(_QWORD *)(v21 + 16);
    if (v25)
    {
      if (*(double *)(v21 + 32) != 0.0)
      {
        v27 = 0;
        goto LABEL_17;
      }
      if (v25 != 1)
      {
        for (i = 5; ; ++i)
        {
          v27 = i - 4;
          if (*(double *)(v21 + 8 * i) != 0.0)
            break;
          v28 = i - 3;
          if (__OFADD__(v27, 1))
          {
            __break(1u);
            goto LABEL_30;
          }
          if (v28 == v25)
            return v19;
        }
LABEL_17:
        swift_bridgeObjectRelease();
        if (__OFADD__(v27, a4))
        {
LABEL_30:
          __break(1u);
        }
        else
        {
          if (v27 + a4 >= *(_QWORD *)(v19 + 16))
            a4 = *(_QWORD *)(v19 + 16);
          else
            a4 += v27;
          if (a4 >= v27)
          {
            if ((v27 & 0x8000000000000000) == 0)
            {
              type metadata accessor for __ContiguousArrayStorageBase();
              swift_unknownObjectRetain_n();
              v31 = swift_dynamicCastClass();
              if (!v31)
              {
                swift_bridgeObjectRelease();
                v31 = MEMORY[0x1E0DEE9D8];
              }
              v36 = a1;
              v32 = *(_QWORD *)(v31 + 16);
              swift_release();
              if (v32 == a4 - v27)
              {
                v33 = swift_dynamicCastClass();
                v34 = v37;
                v35 = a6;
                if (!v33)
                {
                  swift_bridgeObjectRelease();
                  v33 = MEMORY[0x1E0DEE9D8];
                }
                goto LABEL_28;
              }
LABEL_33:
              swift_bridgeObjectRelease();
              v33 = specialized _copyCollectionToContiguousArray<A>(_:)(v19, v19 + 32, v27, (2 * a4) | 1);
              v34 = v37;
              v35 = a6;
LABEL_28:
              swift_bridgeObjectRelease();
              Duration.valuesForUnits(_:trailingFractionalLength:smallestUnitRounding:roundingIncrement:)(v33, a7, v35, v34, a9 & 1, v36, a2);
              return v33;
            }
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
        }
        __break(1u);
        goto LABEL_32;
      }
    }
  }
  return v19;
}

uint64_t specialized static Duration.UnitsFormatStyle.removingZeroUnits(units:values:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  double v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v5 = a1 + 32;
    result = swift_bridgeObjectRetain();
    v7 = 0;
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v9 = (char *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v10 = *(double *)(a2 + 8 * v7 + 32);
      if (v10 != 0.0)
      {
        if (v7 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return result;
        }
        v11 = *(_BYTE *)(v5 + v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
        v13 = *((_QWORD *)v9 + 2);
        v12 = *((_QWORD *)v9 + 3);
        if (v13 >= v12 >> 1)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v9);
        *((_QWORD *)v9 + 2) = v13 + 1;
        v9[v13 + 32] = v11;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
          v8 = (_QWORD *)result;
        }
        v15 = v8[2];
        v14 = v8[3];
        if (v15 >= v14 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v8);
          v8 = (_QWORD *)result;
        }
        v8[2] = v15 + 1;
        *(double *)&v8[v15 + 4] = v10;
      }
      if (v2 == ++v7)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v9;
      }
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * v4 - 64;
  v5 = specialized Sequence._copyContents(initializing:)(&v7, (_BYTE *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  id v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9[6];

  v2 = objc_msgSend(*(id *)(a1 + 16), sel_count);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  v3 = (uint64_t)v2;
  if ((uint64_t)v2 <= 0)
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v4 = (_QWORD *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = v3;
    v4[3] = 2 * (v6 >> 3);
  }
  swift_retain();
  v7 = specialized Sequence._copySequenceContents(initializing:)(v9, (uint64_t)(v4 + 4), v3, a1);
  result = swift_release();
  if (v7 == v3)
    return (uint64_t)v4;
  __break(1u);
  return result;
}

{
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[240];

  v2 = specialized BidirectionalCollection._distance(from:to:)(*(_QWORD *)(a1 + 136), *(_QWORD **)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168));
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  v3 = v2;
  if (v2 <= 0)
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AttributeContainer, Range<AttributedString.Index>)>);
    v4 = (_QWORD *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v4[2] = v3;
    v4[3] = 2 * ((uint64_t)(v5 - 32) / 80);
  }
  outlined retain of AttributedString.Runs.NSAttributesSlice(a1);
  v6 = specialized Sequence._copyContents(initializing:)((uint64_t)v8, (uint64_t)(v4 + 4), v3);
  result = outlined release of AttributedString.Runs.NSAttributesSlice.Iterator((uint64_t)v8);
  if (v6 == v3)
    return (uint64_t)v4;
  __break(1u);
  return result;
}

{
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[15];

  v2 = specialized Collection.distance(from:to:)((*(_QWORD *)(a1 + 48) >> 11 << 16) | 4, (*(_QWORD *)(a1 + 80) >> 11 << 16) | 4);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  v3 = v2;
  if (v2 <= 0)
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String.Index>);
    v4 = (_QWORD *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = v3;
    v4[3] = 2 * (v6 >> 3);
  }
  outlined retain of Locale(a1);
  v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v9, (uint64_t)(v4 + 4), v3);
  result = swift_unknownObjectRelease();
  if (v7 == v3)
    return (uint64_t)v4;
  __break(1u);
  return result;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[248];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v2 = *(_OWORD *)(a1 + 176);
  v25 = *(_OWORD *)(a1 + 160);
  v26 = v2;
  v27 = *(_OWORD *)(a1 + 192);
  v28 = *(_QWORD *)(a1 + 208);
  v3 = *(_OWORD *)(a1 + 112);
  v21 = *(_OWORD *)(a1 + 96);
  v22 = v3;
  v4 = *(_OWORD *)(a1 + 144);
  v23 = *(_OWORD *)(a1 + 128);
  v24 = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v17 = *(_OWORD *)(a1 + 32);
  v18 = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v19 = *(_OWORD *)(a1 + 64);
  v20 = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v15 = *(_OWORD *)a1;
  v16 = v7;
  v8 = specialized BidirectionalCollection._distance(from:to:)(*((_QWORD *)&v23 + 1), v24, *((_QWORD *)&v24 + 1), v25, *((_QWORD *)&v25 + 1), v26, *((_QWORD *)&v26 + 1), v27);
  if (!v8)
    return MEMORY[0x1E0DEE9D8];
  v9 = v8;
  if (v8 <= 0)
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(AttributedString?, Range<AttributedString.Index>)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v9;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(a1);
  v12 = specialized Sequence._copyContents(initializing:)((uint64_t)v14, (uint64_t)(v10 + 4), v9);
  result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v14);
  if (v12 == v9)
    return (uint64_t)v10;
  __break(1u);
  return result;
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[248];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v2 = *(_OWORD *)(a1 + 176);
  v25 = *(_OWORD *)(a1 + 160);
  v26 = v2;
  v27 = *(_OWORD *)(a1 + 192);
  v28 = *(_QWORD *)(a1 + 208);
  v3 = *(_OWORD *)(a1 + 112);
  v21 = *(_OWORD *)(a1 + 96);
  v22 = v3;
  v4 = *(_OWORD *)(a1 + 144);
  v23 = *(_OWORD *)(a1 + 128);
  v24 = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v17 = *(_OWORD *)(a1 + 32);
  v18 = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v19 = *(_OWORD *)(a1 + 64);
  v20 = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v15 = *(_OWORD *)a1;
  v16 = v7;
  v8 = specialized BidirectionalCollection._distance(from:to:)(*((_QWORD *)&v23 + 1), v24, *((_QWORD *)&v24 + 1), v25, *((_QWORD *)&v25 + 1), v26, *((_QWORD *)&v26 + 1), v27);
  if (!v8)
    return MEMORY[0x1E0DEE9D8];
  v9 = v8;
  if (v8 <= 0)
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InflectionRule?, Range<AttributedString.Index>)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v9;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(a1);
  v12 = specialized Sequence._copyContents(initializing:)((uint64_t)v14, (uint64_t)(v10 + 4), v9);
  result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v14);
  if (v12 == v9)
    return (uint64_t)v10;
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 31;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32])
          memmove(v13, a4 + 32, 2 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *specialized Sequence._copyContents(initializing:)(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t initializeWithCopy for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  v9 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v10 = *(int *)(v9 + 24);
  v11 = v7 + v10;
  v12 = v8 + v10;
  v13 = type metadata accessor for FloatingPointRoundingRule();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  v15 = *(int *)(v9 + 28);
  v16 = v7 + v15;
  v17 = v8 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = *(int *)(a3 + 40);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  return a1;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString.UnicodeScalarView@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  result = *(__n128 *)(v1 + 32);
  v6 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 80) = v2;
  *(_QWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a1 + 104) = result.n128_u64[0];
  return result;
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t storeEnumTagSinglePayload for Predicate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t (*PropertyListDecoder.userInfo.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 24);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  return PropertyListDecoder.userInfo.modify;
}

void *type metadata accessor for String.LocalizationValue.CodingKeys()
{
  return &unk_1E0F32AC8;
}

void *type metadata accessor for TimeZone.CodingKeys()
{
  return &unk_1E0F31E38;
}

void *type metadata accessor for Locale.CodingKeys()
{
  return &unk_1E0F2F110;
}

ValueMetadata *type metadata accessor for ByteCountFormatStyle.Units()
{
  return &type metadata for ByteCountFormatStyle.Units;
}

void *type metadata accessor for DateInterval.CodingKeys()
{
  return &unk_1E0F17B40;
}

uint64_t one-time initialization function for _loadedScopeCache()
{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<LoadedScopeCache>._Buffer);
  result = swift_allocObject();
  v1 = MEMORY[0x1E0DEE9E0];
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = v1;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = v1;
  _loadedScopeCache = result;
  return result;
}

uint64_t static Measurement.< infix<A, B>(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  double v3;
  void *v4;
  double v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *ObjCClassFromObject;
  id v11;
  id v12;
  id v13;
  id v14;
  char v15;
  id v16;
  double v17;
  id v18;
  double v19;
  uint64_t result;

  v2 = *(void **)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(void **)a2;
  v5 = *(double *)(a2 + 8);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) != 0)
    return v3 < v5;
  objc_opt_self();
  v6 = swift_dynamicCastObjCClass();
  if (v6)
  {
    v7 = (void *)v6;
    objc_opt_self();
    v8 = swift_dynamicCastObjCClass();
    if (v8)
    {
      v9 = (void *)v8;
      ObjCClassFromObject = (void *)swift_getObjCClassFromObject();
      v11 = v2;
      v12 = v4;
      v13 = objc_msgSend(ObjCClassFromObject, sel_baseUnit);
      v14 = objc_msgSend((id)swift_getObjCClassFromObject(), sel_baseUnit);
      v15 = static NSObject.== infix(_:_:)();

      if ((v15 & 1) != 0)
      {
        v16 = objc_msgSend(v7, sel_converter);
        objc_msgSend(v16, sel_baseUnitValueFromValue_, v3);
        v3 = v17;

        v18 = objc_msgSend(v9, sel_converter);
        objc_msgSend(v18, sel_baseUnitValueFromValue_, v5);
        v5 = v19;

        return v3 < v5;
      }

    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PropertyListDecoder.userInfo.modify(_QWORD *a1)
{
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)a1[2];
  *(_QWORD *)(a1[1] + 16) = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t NSNotificationCenter.Notifications.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  *v1 = v0;
  v1[1] = NSNotificationCenter.Notifications.Iterator.next();
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata completion function for NSObject.KVOSubscription()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return result;
}

void type metadata accessor for FloatingPointRoundingRule?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for FloatingPointRoundingRule?)
  {
    type metadata accessor for FloatingPointRoundingRule();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FloatingPointRoundingRule?);
  }
}

id NSString.init(format:_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = getVaList(_:)();
  swift_bridgeObjectRelease();
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFormat_arguments_, a1, v2);
}

uint64_t JSONDecoder.keyDecodingStrategy.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  v5 = v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_options + 88);
  *(_QWORD *)(v5 + 88) = v2;
  *(_QWORD *)(v5 + 96) = v3;
  outlined consume of JSONEncoder.KeyEncodingStrategy(v6);
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

uint64_t static Int64._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, SEL *a3, SEL *a4)
{
  id v6;
  id v7;
  char v8;

  v6 = objc_msgSend(a1, *a3);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, v6);
  v8 = static NSObject.== infix(_:_:)();

  if ((v8 & 1) != 0)
  {
    *(_QWORD *)a2 = v6;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return v8 & 1;
}

uint64_t AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v4;
  _QWORD *v5;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[48];
  _BYTE v24[48];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v5 = v4;
  v8 = v4[2];
  v28 = v4[1];
  v29 = v8;
  v30 = v4[3];
  BigString.unicodeScalars.getter();
  v9 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v23);
  v10 = v4[2];
  v25 = v4[1];
  v26 = v10;
  v27 = v4[3];
  BigString.unicodeScalars.getter();
  v11 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v24);
  v12 = v9 >> 11;
  v13 = v11 >> 11;
  v20[2] = a3;
  v20[3] = a4;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)partial apply for closure #1 in AttributedString.Guts.removeAttributeValue<A>(forKey:in:), (uint64_t)v20, v5, v12, v11 >> 11);
  swift_release();
  v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 32);
  v14(&v21, a3, a4);
  v15 = v22;
  result = outlined consume of AttributedString.AttributeRunBoundaries?(v21, v22);
  if (v15 != 1)
  {
    v14(&v21, a3, a4);
    v17 = v22;
    if (v22 == 1)
    {
      v18 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v19 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_18205C850;
      *(_QWORD *)(v18 + 32) = v19;
      *(_QWORD *)(v18 + 40) = v17;
    }
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v12, v13, 0, v18);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t AttributedSubstring.subscript.setter(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  specialized AttributedSubstring.subscript.setter(a1, *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8), a3);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t specialized AttributedSubstring.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, __n128))(v10 + 16))((char *)&v13 - v8, a1, v7);
  return AttributedSubstring.subscript.setter((uint64_t)v9, v11, a2, a3);
}

{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  char v23[48];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[4];

  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = (_QWORD *)*v3;
    v9 = *(_OWORD *)(*v3 + 16);
    v10 = *(_OWORD *)(*v3 + 48);
    v30[1] = *(_OWORD *)(*v3 + 32);
    v30[2] = v10;
    v30[0] = v9;
    v11 = v8[8];
    v12 = v8[9];
    v13 = v8[10];
    v14 = v8[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v30);
    swift_unknownObjectRetain();
    *v4 = AttributedString.Guts.init(string:runs:)(v30, v11, v12, v13, v14);
    swift_release();
  }
  v15 = (_OWORD *)*v4;
  if (a2 == 1)
  {
    v16 = v15[2];
    v24 = v15[1];
    v25 = v16;
    v26 = v15[3];
    BigString.unicodeScalars.getter();
    v17 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)&v22);
    v18 = v15[2];
    v27 = v15[1];
    v28 = v18;
    v29 = v15[3];
    BigString.unicodeScalars.getter();
    v19 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v23);
    v20 = (_QWORD *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v20, v17 >> 11, (_QWORD *)(v19 >> 11));
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1, a2, a3 & 0xFFFFFFFFFFLL);
    outlined consume of AttributedString.AttributeRunBoundaries?(a1, a2);
    return outlined consume of AttributedString.AttributeRunBoundaries?(a1, a2);
  }
}

uint64_t AttributedSubstring.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  void (*v24)(char *, uint64_t);
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[4];

  v5 = v4;
  v34 = a3;
  v35 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v30 - v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v16 = *(_QWORD **)v4;
    v17 = *(_OWORD *)(*(_QWORD *)v4 + 16);
    v18 = *(_OWORD *)(*(_QWORD *)v4 + 48);
    v40[1] = *(_OWORD *)(*(_QWORD *)v4 + 32);
    v40[2] = v18;
    v40[0] = v17;
    v20 = v16[8];
    v19 = v16[9];
    v22 = v16[10];
    v21 = v16[11];
    v32 = v22;
    v33 = v19;
    v31 = v21;
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v40);
    swift_unknownObjectRetain();
    *(_QWORD *)v5 = AttributedString.Guts.init(string:runs:)(v40, v20, v33, v32, v31);
    swift_release();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v23 = (__int128 *)(v5 + 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    v24 = *(void (**)(char *, uint64_t))(v9 + 8);
    v24(v11, v8);
    v25 = *(_OWORD *)(v5 + 24);
    v36 = *v23;
    v37 = v25;
    v26 = *(_OWORD *)(v5 + 56);
    v38 = *(_OWORD *)(v5 + 40);
    v39 = v26;
    AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v34, (uint64_t)&v36, v34, v35);
    return ((uint64_t (*)(uint64_t, uint64_t))v24)(a1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, AssociatedTypeWitness);
    v28 = *(_OWORD *)(v5 + 24);
    v36 = *v23;
    v37 = v28;
    v29 = *(_OWORD *)(v5 + 56);
    v38 = *(_OWORD *)(v5 + 40);
    v39 = v29;
    AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)((uint64_t)v15, v34, (uint64_t)&v36, v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
  }
}

uint64_t AttributedString.subscript.setter(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  specialized AttributedString.subscript.setter(a1, *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8), a3);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t specialized AttributedString.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, __n128))(v10 + 16))((char *)&v13 - v8, a1, v7);
  return AttributedString.subscript.setter((uint64_t)v9, v11, a2, a3);
}

uint64_t AttributedString.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD v70[4];

  v5 = v4;
  v57 = a4;
  v56 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v53 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v53 - v14;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v58 = a1;
  v55 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = (_QWORD *)*v5;
    v18 = *(_OWORD *)(*v5 + 16);
    v19 = *(_OWORD *)(*v5 + 48);
    v70[1] = *(_OWORD *)(*v5 + 32);
    v70[2] = v19;
    v70[0] = v18;
    v20 = v17[8];
    v54 = v17[9];
    v21 = v17[10];
    v22 = v17[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v70);
    swift_unknownObjectRetain();
    v23 = v21;
    a1 = v58;
    v24 = AttributedString.Guts.init(string:runs:)(v70, v20, v54, v23, v22);
    v8 = v55;
    *v5 = v24;
    swift_release();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v11, v8);
    v26 = *v5;
    v27 = *(_OWORD *)(*v5 + 32);
    v67 = *(_OWORD *)(*v5 + 16);
    v68 = v27;
    v69 = *(_OWORD *)(v26 + 48);
    v28 = BigString.startIndex.getter();
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v35 = BigString.endIndex.getter();
    v59 = v28;
    v60 = v30;
    v61 = v32;
    v62 = v34;
    v63 = v35;
    v64 = v36;
    v65 = v37;
    v66 = v38;
    AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v56, (uint64_t)&v59, v56, v57);
    return ((uint64_t (*)(uint64_t, uint64_t))v25)(v58, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, AssociatedTypeWitness);
    v40 = *v5;
    v41 = *(_OWORD *)(*v5 + 32);
    v67 = *(_OWORD *)(*v5 + 16);
    v68 = v41;
    v69 = *(_OWORD *)(v40 + 48);
    v42 = BigString.startIndex.getter();
    v44 = v43;
    v46 = v45;
    v48 = v47;
    v49 = BigString.endIndex.getter();
    v59 = v42;
    v60 = v44;
    v61 = v46;
    v62 = v48;
    v63 = v49;
    v64 = v50;
    v65 = v51;
    v66 = v52;
    AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)((uint64_t)v15, v56, (uint64_t)&v59, v56, v57);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v58, v55);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
  }
}

uint64_t AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t, __n128);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t inited;
  _QWORD v31[12];
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[48];
  _BYTE v40[48];
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v6 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)v31 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
  v15((char *)v31 - v13, a1, AssociatedTypeWitness, v12);
  *((_QWORD *)&v33 + 1) = AssociatedTypeWitness;
  *(_QWORD *)&v34[0] = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v32);
  ((void (*)(uint64_t *, char *, uint64_t))v15)(boxed_opaque_existential_1, v14, AssociatedTypeWitness);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v35, a4, a5);
  *(_OWORD *)((char *)v34 + 8) = v35[0];
  BYTE8(v34[1]) = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a4, a5) & 1;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  v38 = v17;
  v36 = v34[0];
  v37 = v34[1];
  v35[0] = v32;
  v35[1] = v33;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  v20 = v19;
  v21 = *(_OWORD *)(v6 + 32);
  v32 = *(_OWORD *)(v6 + 16);
  v33 = v21;
  v34[0] = *(_OWORD *)(v6 + 48);
  BigString.unicodeScalars.getter();
  v22 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v39);
  v23 = *(_OWORD *)(v6 + 32);
  v41 = *(_OWORD *)(v6 + 16);
  v42 = v23;
  v43 = *(_OWORD *)(v6 + 48);
  BigString.unicodeScalars.getter();
  v24 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v40);
  v25 = v22 >> 11;
  v26 = v24 >> 11;
  v31[2] = v18;
  v31[3] = v20;
  v31[4] = v35;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)partial apply for closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:), (uint64_t)v31, (_QWORD *)v6, v22 >> 11, v26);
  swift_release();
  v27 = v37;
  if ((_QWORD)v37 != 1)
  {
    v28 = *((_QWORD *)&v36 + 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    *(_QWORD *)(inited + 32) = v28;
    *(_QWORD *)(inited + 40) = v27;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v25, v26, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v35);
}

uint64_t AttributedString._InternalRunsSlice.updateEach(with:)(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  char v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  int v143;
  char v144;
  char v145;
  unint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  char v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t (*v172)(__int128 *, uint64_t, uint64_t, char *);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  unint64_t v181;
  _QWORD v182[2];
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  char v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  _OWORD v198[3];
  _OWORD v199[3];
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  _OWORD v206[2];

  v172 = (uint64_t (*)(__int128 *, uint64_t, uint64_t, char *))result;
  v5 = a3[8];
  if (v5)
    v6 = a3[10];
  else
    v6 = 0;
  if (a4 < 0 || v6 < a4)
  {
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
LABEL_408:
    __break(1u);
LABEL_409:
    __break(1u);
LABEL_410:
    __break(1u);
LABEL_411:
    __break(1u);
    goto LABEL_412;
  }
  v9 = a3;
  v10 = a3[9];
  v11 = a3[11];
  v179 = a3 + 8;
  if (!v5 || (*(_WORD *)(v5 + 16) ? (v12 = a3[10] <= a4) : (v12 = 1), v12))
  {
    v13 = swift_unknownObjectRetain_n();
    v14 = specialized Rope._endPath.getter(v13);
    result = swift_unknownObjectRelease();
    v15 = 0;
    v16 = 0;
    if (!v5)
      goto LABEL_48;
    goto LABEL_13;
  }
  v17 = *(unsigned __int8 *)(v5 + 18);
  if (*(_BYTE *)(v5 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v16 = a4;
    v18 = (_QWORD *)v5;
    while (1)
    {
      v20 = *((unsigned __int16 *)v18 + 8);
      if (!*((_WORD *)v18 + 8))
        break;
      v21 = v18[5];
      v22 = __OFSUB__(v16, v21);
      v23 = v16 - v21;
      if (v22)
        goto LABEL_375;
      if (__OFADD__(v23, 1))
        goto LABEL_376;
      if (v23 + 1 < 1)
      {
        v20 = 0;
        goto LABEL_18;
      }
      if ((_DWORD)v20 == 1)
      {
        v16 = v23;
        break;
      }
      v24 = v18 + 8;
      v25 = 1;
      while (1)
      {
        v26 = *v24;
        v24 += 3;
        v16 = v23 - v26;
        if (__OFSUB__(v23, v26))
          goto LABEL_343;
        if (__OFADD__(v16, 1))
        {
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
LABEL_370:
          __break(1u);
LABEL_371:
          __break(1u);
          goto LABEL_372;
        }
        if (v16 + 1 < 1)
          break;
        ++v25;
        v23 = v16;
        if (v20 == v25)
          goto LABEL_17;
      }
      v20 = v25;
      v16 = v23;
LABEL_18:
      v19 = (4 * *((_BYTE *)v18 + 18) + 8) & 0x3C;
      v17 = ((-15 << v19) - 1) & v17 | (v20 << v19);
      v15 = (_QWORD *)v18[3 * v20 + 3];
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v18 = v15;
      if (!*((_BYTE *)v15 + 18))
        goto LABEL_33;
    }
LABEL_17:
    if (!v16)
      goto LABEL_18;
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }
  result = swift_unknownObjectRetain_n();
  v16 = a4;
  v15 = (_QWORD *)v5;
LABEL_33:
  v27 = *((unsigned __int16 *)v15 + 8);
  if (!*((_WORD *)v15 + 8))
  {
    v9 = a3;
    goto LABEL_46;
  }
  v28 = v15[3];
  v22 = __OFSUB__(v16, v28);
  v29 = v16 - v28;
  v9 = a3;
  if (!v22)
  {
    if (__OFADD__(v29, 1))
      goto LABEL_414;
    if (v29 + 1 < 1)
    {
      v27 = 0;
      goto LABEL_47;
    }
    if ((_DWORD)v27 != 1)
    {
      v30 = v15 + 6;
      v31 = 1;
      while (1)
      {
        v32 = *v30;
        v30 += 3;
        v16 = v29 - v32;
        if (__OFSUB__(v29, v32))
          goto LABEL_392;
        if (__OFADD__(v16, 1))
          goto LABEL_393;
        if (v16 + 1 < 1)
          goto LABEL_336;
        ++v31;
        v29 = v16;
        if (v27 == v31)
          goto LABEL_46;
      }
    }
    v16 = v29;
LABEL_46:
    if (v16)
    {
LABEL_412:
      __break(1u);
      goto LABEL_413;
    }
LABEL_47:
    while (2)
    {
      swift_unknownObjectRelease();
      result = swift_unknownObjectRelease();
      v14 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
      if (v5)
      {
LABEL_13:
        swift_unknownObjectRetain();
        v180 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, (uint64_t)v15, v5, v10);
        result = swift_unknownObjectRelease_n();
      }
      else
      {
LABEL_48:
        v180 = 0;
      }
      v33 = a5;
      v10 = a4 - v16;
      if (__OFSUB__(a4, v16))
        goto LABEL_391;
      v34 = a4;
      v35 = v11;
      v36 = v14;
      v178 = v33;
      while (1)
      {
        v17 = *v179;
        v181 = v36;
        if (v34 != v33)
        {
          if (v17)
            v42 = v9[10];
          else
            v42 = 0;
          goto LABEL_104;
        }
        if (!v17)
        {
          if (v34 > 0)
            goto LABEL_377;
          v9 = 0;
          goto LABEL_102;
        }
        v37 = v9[10];
        if (v37 < v34)
          goto LABEL_363;
        a5 = v9[11];
        v38 = v34;
        v39 = *(unsigned __int8 *)(v17 + 18);
        v40 = !*(_WORD *)(v17 + 16) || v37 <= v38;
        v173 = v9[9];
        if (!v40)
          break;
        v41 = ((-15 << ((4 * v39 + 8) & 0x3C)) - 1) & v39 | ((unint64_t)*(unsigned __int16 *)(v17 + 16) << ((4 * v39 + 8) & 0x3C));
        swift_unknownObjectRetain();
        v9 = 0;
        v11 = 0;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(a5, v41, v11, v17, v173);
        result = swift_unknownObjectRelease_n();
        v34 = a4;
        v36 = v181;
LABEL_102:
        v42 = v34 - (_QWORD)v9;
        if (__OFSUB__(v34, v9))
          goto LABEL_358;
        v9 = a3;
LABEL_104:
        if (v10 >= v42)
          return result;
        if (v35 != v9[11])
          goto LABEL_345;
        if (v15)
        {
          v54 = &v15[3 * ((v36 >> ((4 * *((_BYTE *)v15 + 18) + 8) & 0x3C)) & 0xF)];
          v56 = v54[4];
          v55 = v54[5];
          v57 = v54[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }
        else
        {
          v58 = v9[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v36, v58);
          v56 = v59;
          v55 = v60;
          result = swift_unknownObjectRelease();
          if (v35 != v9[11])
            goto LABEL_362;
          v61 = v9[8];
          swift_unknownObjectRetain();
          v57 = specialized Rope._Node.subscript.getter(v36, v61);
          v34 = a4;
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v22 = __OFADD__(v10, v57);
        v62 = v10 + v57;
        if (v22)
          goto LABEL_346;
        *(_QWORD *)&v190 = v56;
        *((_QWORD *)&v190 + 1) = v55;
        if (v10 >= v178)
          v63 = v178;
        else
          v63 = v10;
        if (v10 >= v34)
          v64 = v63;
        else
          v64 = v34;
        if (v62 <= v34)
          v65 = v34;
        else
          v65 = v62;
        if (v62 <= v178)
          v66 = v65;
        else
          v66 = v178;
        if (v64 == v66)
          goto LABEL_347;
        v189 = 1;
        if (v64 != v10 || v66 != v62)
        {
          result = v172(&v190, v64, v66, &v189);
          if ((v189 & 1) == 0)
          {
            v89 = v35;
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v9 = a3;
            goto LABEL_235;
          }
          if (__OFSUB__(v66, v64))
            goto LABEL_366;
          v11 = *((_QWORD *)&v190 + 1);
          v5 = v190;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v64, v66, v66 - v64, v5, v11);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          v80 = a3[8];
          v9 = (_QWORD *)a3[10];
          if (v80)
            v81 = a3[10];
          else
            v81 = 0;
          if (v10 < 0 || v81 < v10)
            goto LABEL_368;
          a5 = a3[9];
          v175 = a3[11];
          if (v80 && *(_WORD *)(v80 + 16) && v10 < (uint64_t)v9)
          {
            v82 = *(unsigned __int8 *)(v80 + 18);
            if (*(_BYTE *)(v80 + 18))
            {
              result = swift_unknownObjectRetain_n();
              v17 = v10;
              v83 = (_QWORD *)v80;
              while (1)
              {
                v29 = *((unsigned __int16 *)v83 + 8);
                if (!*((_WORD *)v83 + 8))
                  goto LABEL_150;
                v85 = v83[5];
                v22 = __OFSUB__(v17, v85);
                v31 = v17 - v85;
                if (v22)
                  goto LABEL_356;
                if (__OFADD__(v31, 1))
                  goto LABEL_357;
                if (v31 + 1 < 1)
                {
                  v29 = 0;
                }
                else
                {
                  if ((_DWORD)v29 == 1)
                  {
                    v17 = v31;
LABEL_150:
                    if (v17)
                      goto LABEL_353;
                    goto LABEL_151;
                  }
                  v86 = v83 + 8;
                  v87 = 1;
                  while (1)
                  {
                    v88 = *v86;
                    v86 += 3;
                    v17 = v31 - v88;
                    if (__OFSUB__(v31, v88))
                      goto LABEL_334;
                    if (__OFADD__(v17, 1))
                      goto LABEL_335;
                    if (v17 + 1 < 1)
                      break;
                    ++v87;
                    v31 = v17;
                    if (v29 == v87)
                      goto LABEL_150;
                  }
                  v29 = v87;
                  v17 = v31;
                }
LABEL_151:
                v84 = (4 * *((_BYTE *)v83 + 18) + 8) & 0x3C;
                v82 = ((-15 << v84) - 1) & v82 | (v29 << v84);
                v15 = (_QWORD *)v83[3 * v29 + 3];
                swift_unknownObjectRetain();
                result = swift_unknownObjectRelease();
                v83 = v15;
                if (!*((_BYTE *)v15 + 18))
                  goto LABEL_212;
              }
            }
            result = swift_unknownObjectRetain_n();
            v17 = v10;
            v15 = (_QWORD *)v80;
LABEL_212:
            v125 = *((unsigned __int16 *)v15 + 8);
            if (*((_WORD *)v15 + 8))
            {
              v126 = v15[3];
              v22 = __OFSUB__(v17, v126);
              v127 = v17 - v126;
              if (v22)
                goto LABEL_399;
              if (__OFADD__(v127, 1))
                goto LABEL_400;
              if (v127 + 1 < 1)
              {
                v125 = 0;
              }
              else
              {
                if ((_DWORD)v125 == 1)
                {
                  v17 = v127;
                  goto LABEL_230;
                }
                v131 = v15 + 6;
                v132 = 1;
                while (1)
                {
                  v133 = *v131;
                  v131 += 3;
                  v17 = v127 - v133;
                  if (__OFSUB__(v127, v133))
                    goto LABEL_373;
                  if (__OFADD__(v17, 1))
                    goto LABEL_374;
                  if (v17 + 1 < 1)
                    break;
                  ++v132;
                  v127 = v17;
                  if (v125 == v132)
                    goto LABEL_230;
                }
                v125 = v132;
                v17 = v127;
              }
            }
            else
            {
LABEL_230:
              if (v17)
                goto LABEL_395;
            }
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v92 = v82 & 0xFFFFFFFFFFFFF0FFLL | (v125 << 8);
            v34 = a4;
LABEL_171:
            swift_unknownObjectRetain();
            v181 = v92;
            v180 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v175, v92, (uint64_t)v15, v80, a5);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_unknownObjectRelease_n();
          }
          else
          {
            v91 = swift_unknownObjectRetain_n();
            v92 = specialized Rope._endPath.getter(v91);
            swift_unknownObjectRelease();
            v17 = 0;
            v15 = 0;
            if (v80)
              goto LABEL_171;
            v181 = v92;
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v180 = 0;
          }
          v9 = a3;
          v22 = __OFSUB__(v10, v17);
          v10 -= v17;
          if (v22)
            goto LABEL_370;
          v89 = v175;
          goto LABEL_235;
        }
        v9 = a3;
        if (v35 != a3[11])
          goto LABEL_359;
        if (!*v179)
          goto LABEL_415;
        specialized Rope._Node._prepareModify(at:)(v181, (uint64_t)&v191);
        v206[0] = v192;
        v186 = v191;
        v187 = v192;
        v188 = v193;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v206);
        result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)v206 + 8);
        v187 = MEMORY[0x1E0DEE9E0];
        v67 = v35 + 1;
        a3[11] = v35 + 1;
        if (!a3[8])
          goto LABEL_416;
        specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v172(&v190, v10, v62, &v189);
        if ((v189 & 1) == 0)
        {
          result = v181;
          if (v67 != a3[11])
            goto LABEL_369;
          if (!*v179)
            goto LABEL_419;
          specialized Rope._Node._prepareModify(at:)(v181, (uint64_t)&v200);
          v205 = v201;
          v186 = v200;
          v187 = v201;
          v188 = v202;
          v90 = v190;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
          result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205 + 8);
          v187 = v90;
          v89 = v35 + 2;
          a3[11] = v35 + 2;
          if (!a3[8])
            goto LABEL_420;
          v15 = specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_210;
        }
        result = v181;
        if (v67 != a3[11])
          goto LABEL_367;
        if (!*v179)
          goto LABEL_417;
        specialized Rope._Node._prepareModify(at:)(v181, (uint64_t)&v194);
        v203 = v195;
        v204 = v196;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v203);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v204);
        v186 = v194;
        v188 = v197;
        v68 = *((_QWORD *)&v190 + 1);
        result = v190;
        v187 = v190;
        a3[11] = v35 + 2;
        if (!a3[8])
          goto LABEL_418;
        v171 = result;
        swift_bridgeObjectRetain_n();
        v170 = v68;
        swift_bridgeObjectRetain_n();
        v15 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v69 = a3[8];
        v70 = a3[9];
        v71 = a3[10];
        v72 = a3[11];
        v174 = v35 + 2;
        *(_QWORD *)&v186 = v35 + 2;
        *((_QWORD *)&v186 + 1) = v181;
        *(_QWORD *)&v187 = v15;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(after:)(&v186, v69, v70, v71, v72);
        swift_unknownObjectRelease();
        v73 = v186;
        v74 = v187;
        v75 = swift_unknownObjectRetain();
        v76 = specialized Rope._endPath.getter(v75);
        result = swift_unknownObjectRelease();
        if (*((_QWORD *)&v73 + 1) >= v76)
        {
          v34 = a4;
        }
        else
        {
          v34 = a4;
          if ((_QWORD)v73 != a3[11])
            goto LABEL_379;
          if (v74)
          {
            v77 = v74 + 24 * ((*((_QWORD *)&v73 + 1) >> ((4 * *(_BYTE *)(v74 + 18) + 8) & 0x3C)) & 0xFLL);
            v79 = *(_QWORD *)(v77 + 32);
            v78 = *(_QWORD *)(v77 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v93 = a3[8];
            swift_unknownObjectRetain();
            v34 = a4;
            specialized Rope._Node.subscript.getter(*((unint64_t *)&v73 + 1), v93);
            v79 = v94;
            v78 = v95;
            swift_unknownObjectRelease();
          }
          if ((specialized static Dictionary<>.== infix(_:_:)(v79, v171) & 1) != 0)
          {
            v96 = specialized static Set.== infix(_:_:)(v78, v170);
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            if ((v96 & 1) != 0)
            {
              v97 = v179;
              v98 = specialized Rope._remove(at:)((uint64_t)&v186, v174, v181);
              v99 = a3[8];
              v100 = a3[11];
              v101 = v98;
              if (v98 < specialized Rope._endPath.getter(v99) && *(_BYTE *)(v99 + 18))
              {
                v102 = (v98 >> ((4 * *(_BYTE *)(v99 + 18) + 8) & 0x3C)) & 0xF;
                swift_unknownObjectRetain();
                v97 = v179;
                specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v99 + 24, v102, v98);
                swift_unknownObjectRelease();
              }
              v103 = v186;
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              if (v100 != a3[11])
                goto LABEL_401;
              if (!*v97)
                goto LABEL_421;
              result = specialized Rope._Node._prepareModify(at:)(v98, (uint64_t)v198);
              v186 = v198[0];
              v187 = v198[1];
              v188 = v198[2];
              if (__OFADD__(*((_QWORD *)&v198[0] + 1), v103))
                goto LABEL_402;
              *((_QWORD *)&v186 + 1) = *((_QWORD *)&v198[0] + 1) + v103;
              v174 = v100 + 1;
              a3[11] = v100 + 1;
              if (!a3[8])
                goto LABEL_422;
              v15 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              goto LABEL_186;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
          }
        }
        v101 = v181;
LABEL_186:
        v104 = *v179;
        if (*v179)
          v104 = *(unsigned __int8 *)(v104 + 18);
        v89 = v174;
        v181 = v101;
        if (v101 <= v104)
        {
          swift_bridgeObjectRelease_n();
          result = swift_bridgeObjectRelease_n();
          goto LABEL_235;
        }
        v105 = a3[8];
        v106 = a3[11];
        *(_QWORD *)&v186 = v174;
        *((_QWORD *)&v186 + 1) = v101;
        *(_QWORD *)&v187 = v15;
        if (v174 != v106)
          goto LABEL_380;
        if (v105)
        {
          v107 = *(unsigned __int8 *)(v105 + 18);
          result = swift_unknownObjectRetain();
          if (v101 <= v107)
            goto LABEL_381;
        }
        else if (!v101)
        {
          goto LABEL_381;
        }
        v108 = (4 * *((_BYTE *)v15 + 18) + 8) & 0x3C;
        if (((v101 >> v108) & 0xF) != 0)
        {
          v109 = ((((v101 >> v108) & 0xF) - 1) << v108) | ((-15 << v108) - 1) & v101;
          result = swift_unknownObjectRelease();
          v110 = v15;
          v111 = v174;
        }
        else
        {
          swift_unknownObjectRetain();
          v112 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v186, v105);
          result = swift_unknownObjectRelease_n();
          if ((v112 & 1) == 0)
            goto LABEL_396;
          v109 = *((_QWORD *)&v186 + 1);
          v111 = v186;
          v110 = (_QWORD *)v187;
        }
        if (v111 != a3[11])
          goto LABEL_382;
        if (v110)
        {
          v113 = &v110[3 * ((v109 >> ((4 * *((_BYTE *)v110 + 18) + 8) & 0x3C)) & 0xF)];
          v115 = v113[4];
          v114 = v113[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v116 = a3[8];
          swift_unknownObjectRetain();
          v34 = a4;
          specialized Rope._Node.subscript.getter(v109, v116);
          v115 = v117;
          v114 = v118;
          swift_unknownObjectRelease();
        }
        if ((specialized static Dictionary<>.== infix(_:_:)(v115, v171) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_209:
          swift_bridgeObjectRelease();
LABEL_210:
          result = swift_bridgeObjectRelease();
          goto LABEL_235;
        }
        v119 = specialized static Set.== infix(_:_:)(v114, v170);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v119 & 1) == 0)
          goto LABEL_209;
        v120 = specialized Rope._remove(at:)((uint64_t)&v186, v174, v101);
        v121 = a3[8];
        v122 = a3[11];
        if (v120 >= specialized Rope._endPath.getter(v121))
        {
          v121 = 0;
        }
        else if (*(_BYTE *)(v121 + 18))
        {
          v123 = (v120 >> ((4 * *(_BYTE *)(v121 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          v124 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v121 + 24, v123, v120);
          swift_unknownObjectRelease();
          v121 = v124;
        }
        v183 = v122;
        v184 = v120;
        v185 = v121;
        v128 = v186;
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if (v122 != a3[11])
          goto LABEL_403;
        v129 = a3[8];
        if (v129)
        {
          v130 = *(unsigned __int8 *)(v129 + 18);
          result = swift_unknownObjectRetain();
          if (v120 <= v130)
            goto LABEL_404;
        }
        else if (!v120)
        {
          goto LABEL_404;
        }
        if (v121 && (v166 = (4 * *(_BYTE *)(v121 + 18) + 8) & 0x3C, ((v120 >> v166) & 0xF) != 0))
        {
          v184 = ((((v120 >> v166) & 0xF) - 1) << v166) | ((-15 << v166) - 1) & v120;
          result = swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRetain();
          v167 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v183, v129);
          result = swift_unknownObjectRelease_n();
          if ((v167 & 1) == 0)
            goto LABEL_409;
          v122 = v183;
        }
        v34 = a4;
        if (v122 != a3[11])
          goto LABEL_405;
        if (!*v179)
          goto LABEL_423;
        v181 = v184;
        result = specialized Rope._Node._prepareModify(at:)(v184, (uint64_t)v199);
        v186 = v199[0];
        v187 = v199[1];
        v188 = v199[2];
        v22 = __OFSUB__(v10, *((_QWORD *)&v199[0] + 1));
        v10 -= *((_QWORD *)&v199[0] + 1);
        if (v22)
          goto LABEL_406;
        if (__OFADD__(*((_QWORD *)&v199[0] + 1), v128))
          goto LABEL_407;
        *((_QWORD *)&v186 + 1) = *((_QWORD *)&v199[0] + 1) + v128;
        v89 = v122 + 1;
        v9 = a3;
        a3[11] = v122 + 1;
        if (!a3[8])
          goto LABEL_424;
        v15 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if (__OFSUB__(v180, 1))
          goto LABEL_408;
        --v180;
LABEL_235:
        v134 = v9[8];
        v135 = v9[11];
        *(_QWORD *)&v186 = v89;
        *((_QWORD *)&v186 + 1) = v181;
        *(_QWORD *)&v187 = v15;
        v22 = __OFADD__(v180++, 1);
        if (v22)
          goto LABEL_348;
        if (v89 != v135)
          goto LABEL_349;
        v136 = v89;
        if (v15)
        {
          v137 = &v15[3 * ((v181 >> ((4 * *((_BYTE *)v15 + 18) + 8) & 0x3C)) & 0xF)];
          v138 = v137[3];
          v11 = v137[5];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          v138 = specialized Rope._Node.subscript.getter(v181, v134);
          v11 = v139;
        }
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v22 = __OFADD__(v10, v138);
        v10 += v138;
        if (v22)
          goto LABEL_350;
        if (v134)
        {
          v140 = ((-15 << ((4 * *(_BYTE *)(v134 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v134 + 18) | ((unint64_t)*(unsigned __int16 *)(v134 + 16) << ((4 * *(_BYTE *)(v134 + 18) + 8) & 0x3C));
          result = swift_unknownObjectRetain();
        }
        else
        {
          v140 = 0;
        }
        if (v181 >= v140)
          goto LABEL_351;
        if (v15
          && (v141 = (4 * *((_BYTE *)v15 + 18) + 8) & 0x3C,
              v142 = ((v181 >> v141) & 0xF) + 1,
              v142 < *((unsigned __int16 *)v15 + 8)))
        {
          v36 = (v142 << v141) | ((-15 << v141) - 1) & v181;
          result = swift_unknownObjectRelease_n();
        }
        else
        {
          v143 = *(unsigned __int8 *)(v134 + 18);
          v144 = (4 * v143 + 8) & 0x3C;
          v183 = (v181 >> v144) & 0xF;
          if (v143)
          {
            swift_unknownObjectRetain();
            v145 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v134 + 24, &v183, (uint64_t)&v186, v134, v143);
            result = swift_unknownObjectRelease();
            if ((v145 & 1) == 0)
              goto LABEL_254;
            result = swift_unknownObjectRelease_n();
            v36 = *((_QWORD *)&v186 + 1);
          }
          else
          {
            v146 = ((v181 >> v144) & 0xF) + 1;
            if (v146 >= *(unsigned __int16 *)(v134 + 16))
            {
LABEL_254:
              if (v134)
              {
                v147 = *(unsigned __int8 *)(v134 + 18);
                v148 = *(unsigned __int16 *)(v134 + 16);
                result = swift_unknownObjectRelease_n();
                v36 = ((-15 << ((4 * v147 + 8) & 0x3C)) - 1) & v147 | (unint64_t)(v148 << ((4 * v147 + 8) & 0x3C));
              }
              else
              {
                v36 = 0;
              }
              v33 = v178;
              *(_QWORD *)&v186 = v136;
              *((_QWORD *)&v186 + 1) = v36;
              *(_QWORD *)&v187 = 0;
              goto LABEL_258;
            }
            v36 = (v146 << v144) | ((-15 << v144) - 1) & v181;
            *((_QWORD *)&v186 + 1) = v36;
            result = swift_unknownObjectRelease_n();
            *(_QWORD *)&v187 = v134;
          }
        }
        v33 = v178;
LABEL_258:
        v35 = v186;
        v15 = (_QWORD *)v187;
        if (v10 >= v33)
        {
          v149 = *v179;
          if (v34 == v33)
          {
            v35 = v9[11];
            if (v149)
            {
              v150 = v9[10];
              if (v150 < v34)
                goto LABEL_378;
              v151 = v9[11];
              v11 = v9[9];
              v152 = *(unsigned __int8 *)(v149 + 18);
              if (*(_WORD *)(v149 + 16) && v150 > v34)
              {
                if (*(_BYTE *)(v149 + 18))
                {
                  result = swift_unknownObjectRetain_n();
                  v153 = (_QWORD *)v149;
                  while (1)
                  {
                    v155 = *((unsigned __int16 *)v153 + 8);
                    if (!*((_WORD *)v153 + 8))
                      goto LABEL_267;
                    v156 = v153[5];
                    v157 = v34 - v156;
                    if (__OFSUB__(v34, v156))
                      goto LABEL_354;
                    if (__OFADD__(v157, 1))
                      goto LABEL_355;
                    if (v157 + 1 <= 0)
                    {
                      v155 = 0;
                    }
                    else
                    {
                      if ((_DWORD)v155 == 1)
                      {
                        v34 -= v156;
LABEL_267:
                        if (v34)
                          goto LABEL_352;
                        goto LABEL_268;
                      }
                      v158 = v153[8];
                      v22 = __OFSUB__(v157, v158);
                      v159 = v157 - v158;
                      if (v22)
                        goto LABEL_364;
                      if (__OFADD__(v159, 1))
                        goto LABEL_365;
                      if (v159 + 1 >= 1)
                      {
                        if ((_DWORD)v155 != 2)
                        {
                          v160 = v153 + 11;
                          v161 = 2;
                          while (v155 != v161)
                          {
                            v34 = v159 - *v160;
                            if (__OFSUB__(v159, *v160))
                              goto LABEL_341;
                            if (__OFADD__(v34, 1))
                              goto LABEL_342;
                            if (v34 + 1 < 1)
                            {
                              v155 = v161;
                              v34 = v159;
                              goto LABEL_268;
                            }
                            ++v161;
                            v160 += 3;
                            v159 = v34;
                            if (v155 == v161)
                              goto LABEL_267;
                          }
LABEL_340:
                          __break(1u);
LABEL_341:
                          __break(1u);
LABEL_342:
                          __break(1u);
LABEL_343:
                          __break(1u);
                          goto LABEL_344;
                        }
                        v34 = v159;
                        goto LABEL_267;
                      }
                      v155 = 1;
                      v34 = v157;
                    }
LABEL_268:
                    v154 = (4 * *((_BYTE *)v153 + 18) + 8) & 0x3C;
                    v152 = ((-15 << v154) - 1) & v152 | (v155 << v154);
                    v15 = (_QWORD *)v153[3 * v155 + 3];
                    swift_unknownObjectRetain();
                    result = swift_unknownObjectRelease();
                    v153 = v15;
                    if (!*((_BYTE *)v15 + 18))
                      goto LABEL_294;
                  }
                }
                result = swift_unknownObjectRetain_n();
                v152 = 0;
                v15 = (_QWORD *)v149;
LABEL_294:
                v162 = *((unsigned __int16 *)v15 + 8);
                if (*((_WORD *)v15 + 8))
                {
                  v163 = v15[3];
                  v22 = __OFSUB__(v34, v163);
                  v164 = v34 - v163;
                  if (v22)
                    goto LABEL_397;
                  if (__OFADD__(v164, 1))
                    goto LABEL_398;
                  if (v164 + 1 <= 0)
                  {
                    v162 = 0;
                    goto LABEL_330;
                  }
                  if ((_DWORD)v162 != 1)
                  {
                    v165 = v15[6];
                    v34 = v164 - v165;
                    if (__OFSUB__(v164, v165))
                      goto LABEL_410;
                    if (__OFADD__(v34, 1))
                      goto LABEL_411;
                    if (v34 + 1 >= 1)
                    {
                      if ((_DWORD)v162 != 2)
                      {
                        v168 = v15 + 9;
                        v169 = 2;
                        while (v162 != v169)
                        {
                          v164 = v34 - *v168;
                          if (__OFSUB__(v34, *v168))
                            goto LABEL_388;
                          if (__OFADD__(v164, 1))
                            goto LABEL_389;
                          if (v164 + 1 < 1)
                          {
                            v162 = v169;
                            goto LABEL_330;
                          }
                          ++v169;
                          v168 += 3;
                          v34 = v164;
                          if (v162 == v169)
                            goto LABEL_304;
                        }
                        goto LABEL_387;
                      }
                      goto LABEL_303;
                    }
                    v162 = 1;
                    v34 = v164;
LABEL_330:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    v36 = v152 & 0xFFFFFFFFFFFFF0FFLL | (v162 << 8);
LABEL_52:
                    swift_unknownObjectRetain();
                    v35 = v151;
                    v180 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v151, v36, (uint64_t)v15, v149, v11);
                    result = swift_unknownObjectRelease_n();
                    v33 = v178;
                    goto LABEL_53;
                  }
                }
                else
                {
LABEL_303:
                  v164 = v34;
                }
LABEL_304:
                if (v164)
                  goto LABEL_394;
                v34 = 0;
                goto LABEL_330;
              }
              v36 = ((-15 << ((4 * v152 + 8) & 0x3C)) - 1) & v152 | ((unint64_t)*(unsigned __int16 *)(v149 + 16) << ((4 * v152 + 8) & 0x3C));
              swift_unknownObjectRetain();
              v34 = 0;
              v15 = 0;
              goto LABEL_52;
            }
            if (v34 > 0)
              goto LABEL_386;
            v34 = 0;
            v15 = 0;
            v36 = 0;
            v180 = 0;
LABEL_53:
            v22 = __OFSUB__(a4, v34);
            v10 = a4 - v34;
            v34 = a4;
            if (v22)
              goto LABEL_371;
          }
          else
          {
            v10 = 0;
            v180 = 0;
            v15 = 0;
            v36 = 0;
            v35 = v9[11];
            if (v149)
            {
              v15 = 0;
              v10 = v9[10];
              v180 = v9[9];
              v36 = ((-15 << ((4 * *(_BYTE *)(v149 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v149 + 18) | ((unint64_t)*(unsigned __int16 *)(v149 + 16) << ((4 * *(_BYTE *)(v149 + 18) + 8) & 0x3C));
            }
          }
        }
      }
      if (*(_BYTE *)(v17 + 18))
      {
        result = swift_unknownObjectRetain_n();
        v9 = (_QWORD *)a4;
        v5 = v17;
LABEL_73:
        v29 = *(unsigned __int16 *)(v5 + 16);
        if (!*(_WORD *)(v5 + 16))
          goto LABEL_71;
        v44 = *(_QWORD *)(v5 + 40);
        v22 = __OFSUB__(v9, v44);
        v31 = (uint64_t)v9 - v44;
        if (v22)
          goto LABEL_338;
        if (__OFADD__(v31, 1))
          goto LABEL_339;
        if (v31 + 1 < 1)
        {
          v29 = 0;
          goto LABEL_72;
        }
        if ((_DWORD)v29 == 1)
        {
          v9 = (_QWORD *)v31;
LABEL_71:
          if (!v9)
            goto LABEL_72;
          __break(1u);
LABEL_338:
          __break(1u);
LABEL_339:
          __break(1u);
          goto LABEL_340;
        }
        v45 = (uint64_t *)(v5 + 64);
        v46 = 1;
        while (1)
        {
          v47 = *v45;
          v45 += 3;
          v9 = (_QWORD *)(v31 - v47);
          if (__OFSUB__(v31, v47))
            break;
          if (__OFADD__(v9, 1))
            goto LABEL_333;
          if ((uint64_t)v9 + 1 < 1)
          {
            v29 = v46;
            v9 = (_QWORD *)v31;
LABEL_72:
            v43 = (4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C;
            v39 = ((-15 << v43) - 1) & v39 | (v29 << v43);
            v11 = *(_QWORD *)(v5 + 24 + 24 * v29);
            swift_unknownObjectRetain();
            result = swift_unknownObjectRelease();
            v5 = v11;
            if (!*(_BYTE *)(v11 + 18))
              goto LABEL_87;
            goto LABEL_73;
          }
          ++v46;
          v31 = (uint64_t)v9;
          if (v29 == v46)
            goto LABEL_71;
        }
        __break(1u);
LABEL_333:
        __break(1u);
LABEL_334:
        __break(1u);
LABEL_335:
        __break(1u);
LABEL_336:
        v27 = v31;
        v16 = v29;
        continue;
      }
      break;
    }
    result = swift_unknownObjectRetain_n();
    v39 = 0;
    v9 = (_QWORD *)a4;
    v11 = v17;
LABEL_87:
    v48 = *(unsigned __int16 *)(v11 + 16);
    if (!*(_WORD *)(v11 + 16))
      goto LABEL_99;
    v49 = *(_QWORD *)(v11 + 24);
    v22 = __OFSUB__(v9, v49);
    v50 = (_QWORD *)((char *)v9 - v49);
    if (v22)
      goto LABEL_384;
    if (__OFADD__(v50, 1))
      goto LABEL_385;
    if ((uint64_t)v50 + 1 < 1)
    {
      v48 = 0;
    }
    else
    {
      if ((_DWORD)v48 == 1)
      {
        v9 = v50;
LABEL_99:
        if (v9)
          goto LABEL_383;
        goto LABEL_100;
      }
      v51 = (uint64_t *)(v11 + 48);
      v52 = 1;
      while (1)
      {
        v53 = *v51;
        v51 += 3;
        v9 = (_QWORD *)((char *)v50 - v53);
        if (__OFSUB__(v50, v53))
          goto LABEL_360;
        if (__OFADD__(v9, 1))
          goto LABEL_361;
        if ((uint64_t)v9 + 1 < 1)
          break;
        ++v52;
        v50 = v9;
        if (v48 == v52)
          goto LABEL_99;
      }
      v48 = v52;
      v9 = v50;
    }
LABEL_100:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v41 = v39 & 0xFFFFFFFFFFFFF0FFLL | (v48 << 8);
    goto LABEL_101;
  }
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

uint64_t closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  _BYTE v10[72];

  outlined init with copy of AttributedString._AttributeValue(a7, (uint64_t)v10);
  swift_bridgeObjectRetain();
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v10, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _DarwinSearchPathsSequence()
{
  return 0;
}

double protocol witness for static AttributedStringKey.runBoundaries.getter in conformance AttributeScopes.FoundationAttributes.LinkAttribute@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_18205FD60;
  return result;
}

uint64_t partial apply for closure #1 in AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t closure #1 in AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE v19[72];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = &v19[-v12 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(&v19[-v12 - 8], 1, 1, AssociatedTypeWitness, v11);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
  v16 = v15;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v13, a5, a6, (uint64_t)v19);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v19, v14, v16);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t type metadata completion function for PredicateExpressions.ForcedUnwrap()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t URL.relativePath.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State())
    {
      v5 = objc_msgSend(v2, sel__parameterString);
      if (v5)
      {
        v6 = v5;
        v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
        v9 = v8;

        v10 = objc_msgSend(v2, sel_relativePath);
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

          v38 = (uint64_t)v12;
          v39 = v14;
          swift_bridgeObjectRetain();
          v15._countAndFlagsBits = 59;
          v15._object = (void *)0xE100000000000000;
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v16._countAndFlagsBits = (uint64_t)v7;
          v16._object = v9;
          String.append(_:)(v16);
          swift_bridgeObjectRelease();
        }
        else
        {
          v38 = 59;
          v39 = 0xE100000000000000;
          v33._countAndFlagsBits = (uint64_t)v7;
          v33._object = v9;
          String.append(_:)(v33);
        }
        swift_bridgeObjectRelease();
        return v38;
      }
    }
    v17 = objc_msgSend(v2, sel_relativePath);
    if (v17)
    {
      v18 = v17;
      v19 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

      return v19;
    }
    return 0;
  }
  if (v1)
  {
    if ((*(_BYTE *)(v1 + 168) & 1) != 0)
      v4 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v4 = String.subscript.getter();
    v20 = MEMORY[0x186DA4634](v4);
    v22 = v21;
    swift_bridgeObjectRelease();
    v36 = v20;
    v37 = v22;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      v23 = v22;
    }
    else
    {
      v23 = v22;
      if ((specialized BidirectionalCollection.last.getter(v20, v22) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        v20 = v36;
        v23 = v37;
      }
    }
    v38 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v35, 0x2FuLL);
    v24 = v38;
    v25 = v20 & 0xFFFFFFFFFFFFLL;
    if ((v23 & 0x2000000000000000) != 0)
      v26 = HIBYTE(v23) & 0xF;
    else
      v26 = v20 & 0xFFFFFFFFFFFFLL;
    if (!v26)
    {
      swift_bridgeObjectRelease();
      v19 = 0;
LABEL_30:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    swift_bridgeObjectRetain();
    if ((v23 & 0x1000000000000000) != 0)
    {
      v19 = 0;
      v30 = 1;
    }
    else
    {
      if ((v23 & 0x2000000000000000) != 0)
      {
        v38 = v20;
        v39 = v23 & 0xFFFFFFFFFFFFFFLL;
        v27 = &v38;
        v28 = HIBYTE(v23) & 0xF;
      }
      else
      {
        if ((v20 & 0x1000000000000000) != 0)
        {
          v27 = (uint64_t *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v27 = (uint64_t *)_StringObject.sharedUTF8.getter();
          v25 = v34;
        }
        v28 = v25;
      }
      v19 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)v27, v28, v24, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
      v30 = v29;
    }
    if (v30 == 1)
    {
      swift_bridgeObjectRetain();
      v19 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v20, v23, v24);
      v32 = v31;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (v32)
        goto LABEL_30;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v30)
        goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t type metadata completion function for JSONDecoder()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CodingUserInfoKey();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void base witness table accessor for Equatable in KeyPathComparator<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t DateComponents.month.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 64) = v3;
  *(_BYTE *)(v2 + 72) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t type metadata completion function for _MutablePairHandle()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PredicateExpressions.TypeCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateExpressions.TypeCheck);
}

uint64_t type metadata accessor for PredicateExpressions.ForceCast(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateExpressions.ForceCast);
}

uint64_t type metadata accessor for PredicateExpressions.Negation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateExpressions.Negation);
}

void type metadata accessor for PredicateExpressions.Filter()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.Range()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.DictionaryKeyDefaultValueSubscript()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.StringLocalizedStandardContains()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.StringCaseInsensitiveCompare()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.CollectionRangeSubscript()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.CollectionIndexSubscript()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.RangeExpressionContains()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.StringLocalizedCompare()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.DictionaryKeySubscript()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.SequenceContainsWhere()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.SequenceStartsWith()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.SequenceContains()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.SequenceMinimum()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.SequenceMaximum()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.OptionalFlatMap()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t type metadata accessor for PredicateExpressions.ConditionalCast(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateExpressions.ConditionalCast);
}

void type metadata accessor for PredicateExpressions.FloatDivision()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.IntRemainder()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t type metadata accessor for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateExpressions.ForcedUnwrap);
}

void type metadata accessor for PredicateExpressions.NilCoalesce()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.IntDivision()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.Disjunction()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.Conjunction()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.Conditional()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.ClosedRange()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t type metadata accessor for PredicateExpressions.UnaryMinus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateExpressions.UnaryMinus);
}

uint64_t type metadata accessor for PredicateExpressions.NilLiteral(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateExpressions.NilLiteral);
}

void type metadata accessor for PredicateExpressions.Arithmetic()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.PredicateEvaluate()
{
  JUMPOUT(0x186DA9CBCLL);
}

void type metadata accessor for PredicateExpressions.CollectionContainsCollection()
{
  JUMPOUT(0x186DA9CBCLL);
}

uint64_t Date.formatted(date:time:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];
  char v21;
  __int128 v22;
  char v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  _OWORD v33[6];
  _OWORD v34[2];
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v37 = *a1;
  v38 = 0;
  v35 = v2;
  v36 = 0;
  if (one-time initialization token for cache != -1)
    swift_once();
  v3 = static LocaleCache.cache + 16;
  v4 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v3, (uint64_t *)v33);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  *(_QWORD *)&v19 = *(_QWORD *)&v33[0];
  *((_QWORD *)&v19 + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1)
    swift_once();
  v5 = static CalendarCache.cache + 16;
  v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v5, (uint64_t *)v33);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  v18 = v33[0];
  if (one-time initialization token for cache != -1)
    swift_once();
  v7 = static TimeZoneCache.cache + 16;
  v8 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v7, &v17);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  v9 = v17;
  v10 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating, (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  *(_QWORD *)&v27 = v9;
  *((_QWORD *)&v27 + 1) = v10;
  LOBYTE(v20[0]) = 0;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)((uint64_t)&v37, &v35, &v19, &v18, &v27, (char *)v20, (uint64_t)v33);
  v30 = v33[4];
  v31 = v33[5];
  v32[0] = v34[0];
  *(_OWORD *)((char *)v32 + 10) = *(_OWORD *)((char *)v34 + 10);
  v27 = v33[0];
  v28 = v33[1];
  v29[0] = v33[2];
  v29[1] = v33[3];
  outlined retain of Date.FormatStyle((uint64_t)v33);
  ICUDateFormatter.DateFormatInfo.init(_:)(&v27, (uint64_t)v20);
  v27 = v20[0];
  v28 = v20[1];
  LOBYTE(v29[0]) = v21;
  *(_OWORD *)((char *)v29 + 8) = v22;
  BYTE8(v29[1]) = v23;
  v30 = v24;
  LOBYTE(v31) = v25;
  *((_QWORD *)&v31 + 1) = v26;
  v11 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v11
    || (v12 = swift_retain_n(),
        MEMORY[0x1E0C80A78](v12),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v16, (uint64_t *)&v27),
        v14 = *((_QWORD *)&v27 + 1),
        v13 = v27,
        swift_release_n(),
        !v14))
  {
    v13 = 0;
  }
  outlined release of Date.FormatStyle((uint64_t)v33);
  return v13;
}

uint64_t protocol witness for _CalendarProtocol.identifier.getter in conformance _CalendarAutoupdating()
{
  return _CalendarAutoupdating.identifier.getter();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(double *a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  ICUDateFormatter.DateFormatInfo.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(double *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  v35 = v2 + 64;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v33 = ~v3;
    v34 = *(_QWORD *)(v2 + 48);
    v36 = *((_QWORD *)a1 + 1);
    v37 = *a1;
    v31 = *((_QWORD *)a1 + 3);
    v32 = *((_QWORD *)a1 + 2);
    v30 = *((unsigned __int8 *)a1 + 32);
    v28 = *((_QWORD *)a1 + 6);
    v29 = *((_QWORD *)a1 + 5);
    v27 = *((unsigned __int8 *)a1 + 56);
    v25 = *((_QWORD *)a1 + 9);
    v26 = *((_QWORD *)a1 + 8);
    v5 = a1[11];
    v24 = *((unsigned __int8 *)a1 + 80);
    do
    {
      v6 = v34 + 96 * v4;
      v8 = *(_QWORD *)(v6 + 16);
      v7 = *(_QWORD *)(v6 + 24);
      v9 = *(unsigned __int8 *)(v6 + 32);
      v10 = *(_QWORD *)(v6 + 40);
      v11 = *(_QWORD *)(v6 + 48);
      v12 = *(unsigned __int8 *)(v6 + 56);
      v13 = *(_QWORD *)(v6 + 64);
      v14 = *(_QWORD *)(v6 + 72);
      v15 = *(unsigned __int8 *)(v6 + 80);
      v16 = *(double *)(v6 + 88);
      v17 = *(_QWORD *)v6 == *(_QWORD *)&v37 && *(_QWORD *)(v6 + 8) == v36;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v18 = v8 == v32 && v7 == v31;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v19 = v9 == v30 && v10 == v29;
          v20 = v19 && v11 == v28;
          if (v20 && v12 == v27)
          {
            v22 = v13 == v26 && v14 == v25;
            if ((v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              && ((v24 ^ v15) & 1) == 0
              && v16 == v5)
            {
              break;
            }
          }
        }
      }
      v4 = (v4 + 1) & v33;
    }
    while (((*(_QWORD *)(v35 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t protocol witness for _LocaleProtocol.forceFirstWeekday(_:) in conformance _LocaleAutoupdating(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  char v6;
  uint64_t v7;

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v7 = static LocaleCache.cache;
  LocaleCache.current.getter();
  v3 = v2;
  ObjectType = swift_getObjectType();
  v6 = v1;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 432))(&v6, ObjectType, v3);
  return swift_unknownObjectRelease();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t *a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  Swift::Int v5;
  _BYTE v7[72];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = *((_OWORD *)a1 + 3);
  v10 = *((_OWORD *)a1 + 2);
  v11 = v2;
  v3 = *((_OWORD *)a1 + 5);
  v12 = *((_OWORD *)a1 + 4);
  v13 = v3;
  v4 = *((_OWORD *)a1 + 1);
  v8 = *(_OWORD *)a1;
  v9 = v4;
  Hasher.init(_seed:)();
  ICUDateFormatter.PatternCacheKey.hash(into:)((uint64_t)v7);
  v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v5);
}

uint64_t outlined retain of ICUDateFormatter.PatternCacheKey(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  char v22;
  char v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[3];
  __int16 v40;
  unsigned __int8 v41[8];
  uint64_t v42;
  unsigned __int32 v43;
  uint64_t v44;
  char v45;
  char v46;
  unsigned __int32 v47;
  char v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;

  v5 = -1 << *(_BYTE *)(v2 + 32);
  v6 = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return v6;
  v34 = ~v5;
  v7 = *a1;
  v8 = a1[1];
  v29 = *((unsigned __int8 *)a1 + 16);
  v9 = *(_OWORD *)(a1 + 5);
  v39[0] = *(_OWORD *)(a1 + 3);
  v39[1] = v9;
  v39[2] = *(_OWORD *)(a1 + 7);
  v40 = *((_WORD *)a1 + 36);
  v26 = a1[10];
  v27 = a1[11];
  v32 = v8;
  v33 = v7;
  while (1)
  {
    v10 = *(_QWORD *)(v36 + 48) + 96 * v6;
    v11 = *(_BYTE *)(v10 + 24);
    v12 = *(_QWORD *)(v10 + 32);
    v4.i32[0] = *(_DWORD *)(v10 + 40);
    v13 = *(_QWORD *)(v10 + 48);
    v14 = *(_BYTE *)(v10 + 56);
    v15 = *(_BYTE *)(v10 + 57);
    v3.i32[0] = *(_DWORD *)(v10 + 58);
    v16 = *(_BYTE *)(v10 + 62);
    v17 = *(_BYTE *)(v10 + 63);
    v18 = *(_QWORD *)(v10 + 64);
    v19 = *(_BYTE *)(v10 + 72);
    v20 = *(_BYTE *)(v10 + 73);
    v37 = *(_QWORD *)(v10 + 80);
    v38 = *(_QWORD *)(v10 + 88);
    if (*(_QWORD *)v10 == v7 && *(_QWORD *)(v10 + 8) == v8)
    {
      if (*(unsigned __int8 *)(v10 + 16) != v29)
        goto LABEL_5;
    }
    else
    {
      v28 = *(unsigned __int8 *)(v10 + 16);
      v31 = *(_BYTE *)(v10 + 24);
      v30 = *(_QWORD *)(v10 + 32);
      v22 = *(_BYTE *)(v10 + 56);
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v12 = v30;
      v11 = v31;
      if ((v23 & 1) == 0)
        goto LABEL_5;
      v14 = v22;
      if (v28 != v29)
        goto LABEL_5;
    }
    v41[0] = v11;
    v42 = v12;
    v43 = vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0];
    v44 = v13;
    v45 = v14;
    v46 = v15;
    v47 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    v48 = v16;
    v49 = v17;
    v50 = v18;
    v51 = v19;
    v52 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)(v41, (unsigned __int8 *)v39))
    {
LABEL_3:
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    if (!v38)
    {
      swift_bridgeObjectRelease();
      if (!v27)
        goto LABEL_25;
      goto LABEL_4;
    }
    if (!v27)
      goto LABEL_3;
    if (v37 == v26 && v38 == v27)
      break;
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
      return v6;
LABEL_5:
    v7 = v33;
    v6 = (v6 + 1) & v34;
    v8 = v32;
    if (((*(_QWORD *)(v35 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      return v6;
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t outlined release of ICUDateFormatter.PatternCacheKey(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t protocol witness for _LocaleProtocol.customDateFormat(_:) in conformance _LocaleAutoupdating(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v7;

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v3 = v2;
  ObjectType = swift_getObjectType();
  v7 = v1;
  v5 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 504))(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t _LocaleICU.customDateFormat(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE v8[144];
  _BYTE v9[104];
  uint64_t v10;

  v2 = *a1;
  outlined init with take of LocalePreferences?(v1 + 40, (uint64_t)v8);
  outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v9);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v9) == 1)
    return 0;
  v4 = v10;
  if (!v10)
    return 0;
  if (!*(_QWORD *)(v10 + 16))
    return 0;
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
  if ((v6 & 1) == 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v5);
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t type metadata accessor for ICUDateFormatter()
{
  return objc_opt_self();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  Swift::Int v6;

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3);
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

uint64_t type metadata accessor for ICUPatternGenerator()
{
  return objc_opt_self();
}

uint64_t outlined retain of ICUDateFormatter.DateFormatInfo(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_OWORD *)(a5[6] + 96 * result);
  v6 = a2[3];
  v5[2] = a2[2];
  v5[3] = v6;
  v7 = a2[5];
  v5[4] = a2[4];
  v5[5] = v7;
  v8 = a2[1];
  *v5 = *a2;
  v5[1] = v8;
  v9 = (_QWORD *)(a5[7] + 16 * result);
  *v9 = a3;
  v9[1] = a4;
  v10 = a5[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a5[2] = v12;
  return result;
}

uint64_t initializeWithCopy for JSONError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of JSONError(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t outlined copy of JSONError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t result;

  v7 = (((a7 - 1) >> 1) | ((a7 - 1) << 7));
  v8 = v7 > 5;
  v9 = (1 << v7) & 0x27;
  if (!v8 && v9 != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t ___generateElements_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "isEqual:", objc_msgSend(MEMORY[0x1E0C99E38], "null")) ^ 1;
}

uint64_t type metadata completion function for FloatingPointFormatStyle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for CFDictionaryRef(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for CFDictionaryRef);
}

uint64_t URLResourceValues.volumeAvailableCapacityForOpportunisticUsage.getter()
{
  return URLResourceValues.fileIdentifier.getter(MEMORY[0x1E0C99BB0]);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONWriter.serializePreformattedStringArray(_:depth:)(Swift::OpaquePointer _, Swift::Int depth)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char *v17;

  if (depth > 511)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 1;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = 0;
    *(_BYTE *)(v15 + 48) = 2;
    swift_willThrow();
    return;
  }
  v3 = v2;
  *(_QWORD *)&v16 = 91;
  *((_QWORD *)&v16 + 1) = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)((uint64_t *)&v16);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    *(_QWORD *)&v16 = 10;
    *((_QWORD *)&v16 + 1) = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)((uint64_t *)&v16);
    swift_bridgeObjectRelease();
    if (__OFADD__(*(_QWORD *)v2, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    ++*(_QWORD *)v2;
  }
  v5 = *((_QWORD *)_._rawValue + 2);
  if (!v5)
    goto LABEL_30;
  v17 = (char *)&v16 + 1;
  swift_bridgeObjectRetain();
  v6 = (uint64_t *)((char *)_._rawValue + 40);
  v7 = 1;
  v8 = 1 - v5;
  while (1)
  {
    v10 = *(v6 - 1);
    v9 = *v6;
    v11 = *(unsigned __int8 *)(v3 + 8);
    swift_bridgeObjectRetain();
    if ((v7 & 1) != 0)
    {
      if ((v11 & 1) == 0)
        goto LABEL_10;
LABEL_9:
      JSONWriter.writeIndent()();
      goto LABEL_10;
    }
    if (v11)
      v16 = xmmword_182069A20;
    else
      v16 = xmmword_182069A10;
    Data._Representation.append(contentsOf:)();
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(v3 + 8) == 1)
      goto LABEL_9;
LABEL_10:
    swift_bridgeObjectRetain();
    if ((v9 & 0x1000000000000000) != 0)
    {
      v10 = static String._copying(_:)();
      v12 = v13;
      swift_bridgeObjectRelease();
      if ((v12 & 0x2000000000000000) != 0)
      {
LABEL_21:
        *(_QWORD *)&v16 = v10;
        *((_QWORD *)&v16 + 1) = v12 & 0xFFFFFFFFFFFFFFLL;
        if ((v12 & 0xF00000000000000) == 0)
          goto LABEL_23;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = v9;
      if ((v9 & 0x2000000000000000) != 0)
        goto LABEL_21;
    }
    if ((v10 & 0x1000000000000000) != 0)
    {
      if ((v10 & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_23;
LABEL_22:
      Data._Representation.append(contentsOf:)();
      goto LABEL_23;
    }
    _StringObject.sharedUTF8.getter();
    if (v14)
      goto LABEL_22;
LABEL_23:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v8)
      break;
    v7 = 0;
    v6 += 2;
    if (++v8 == 1)
    {
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
LABEL_30:
  if (*(_BYTE *)(v3 + 8) == 1)
  {
    *(_QWORD *)&v16 = 10;
    *((_QWORD *)&v16 + 1) = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)((uint64_t *)&v16);
    swift_bridgeObjectRelease();
    if (!__OFSUB__(*(_QWORD *)v3, 1))
    {
      --*(_QWORD *)v3;
      JSONWriter.writeIndent()();
      goto LABEL_33;
    }
LABEL_35:
    __break(1u);
  }
  else
  {
LABEL_33:
    *(_QWORD *)&v16 = 93;
    *((_QWORD *)&v16 + 1) = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)((uint64_t *)&v16);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall JSONWriter.writeIndent()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  const char *v4;
  __int128 v5;

  v1 = *v0;
  switch(*v0)
  {
    case 0:
      return;
    case 1:
      v2 = 8224;
      v3 = 0xE200000000000000;
      goto LABEL_16;
    case 2:
      v2 = 538976288;
      v3 = 0xE400000000000000;
      goto LABEL_16;
    case 3:
      v2 = 0x202020202020;
      v3 = 0xE600000000000000;
      goto LABEL_16;
    case 4:
      v2 = 0x2020202020202020;
      v3 = 0xE800000000000000;
      goto LABEL_16;
    case 5:
      v2 = 0x2020202020202020;
      v3 = 0xEA00000000002020;
      goto LABEL_16;
    case 6:
      v2 = 0x2020202020202020;
      v3 = 0xEC00000020202020;
      goto LABEL_16;
    case 7:
      v2 = 0x2020202020202020;
      v3 = 0xEE00202020202020;
      goto LABEL_16;
    case 8:
      v2 = 0xD000000000000010;
      v4 = "                ";
      goto LABEL_15;
    case 9:
      v2 = 0xD000000000000012;
      v4 = "                  ";
      goto LABEL_15;
    case 10:
      v2 = 0xD000000000000014;
      v4 = "                    ";
LABEL_15:
      v3 = (unint64_t)(v4 - 32) | 0x8000000000000000;
LABEL_16:
      *(_QWORD *)&v5 = v2;
      *((_QWORD *)&v5 + 1) = v3;
      specialized String.withUTF8<A>(_:)((uint64_t *)&v5);
      swift_bridgeObjectRelease();
      break;
    default:
      if (v1 < 0)
      {
        __break(1u);
      }
      else
      {
        do
        {
          v5 = xmmword_182069A40;
          Data._Representation.append(contentsOf:)();
          swift_bridgeObjectRelease();
          --v1;
        }
        while (v1);
      }
      break;
  }
}

uint64_t protocol witness for Error._userInfo.getter in conformance CFErrorRef()
{
  CFErrorRef *v0;
  uint64_t v1;
  CFDictionaryRef v3;

  v3 = CFErrorCopyUserInfo(*v0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CFDictionaryRef?);
  v1 = Optional._bridgeToObjectiveC()();

  return v1;
}

char *NSScanner.scanUpToCharacters(from:)(uint64_t *a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *result;
  char v18;
  uint64_t v19;
  char *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;

  v2 = v1;
  v73 = *a1;
  v3 = objc_msgSend(v1, sel_charactersToBeSkipped);
  v74 = v1;
  if (!v3)
  {
    v25 = objc_msgSend(v1, sel_string);
    v26 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    objc_msgSend(v2, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    v29 = StringProtocol._toUTF16Index(_:)();
    v30 = v29;
    v31 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0)
      v31 = v26 & 0xFFFFFFFFFFFFLL;
    v32 = 4 * v31;
    if (4 * v31 != v29 >> 14)
    {
      v33 = 0;
      do
      {
        result = (char *)String.Index.samePosition(in:)();
        if ((v34 & 1) == 0)
          break;
        v35 = v33 + 1;
        if (__OFADD__(v33, 1))
        {
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        v36 = (char *)objc_msgSend(v74, sel__deprecated_scanLocation);
        v21 = __OFADD__(v36, v35);
        result = &v36[v35];
        if (v21)
          goto LABEL_54;
        v30 = StringProtocol._toUTF16Index(_:)();
        ++v33;
      }
      while (v32 != v30 >> 14);
    }
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v4 = v3;
  objc_msgSend(v4, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for CFCharacterSetRef(0);
  swift_dynamicCast();
  type metadata accessor for __CharacterSetStorage();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v75;
  *(_BYTE *)(v5 + 24) = 0;

  v6 = objc_msgSend(v2, sel_string);
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v72 = v7;

  v8 = objc_msgSend(v2, sel_string);
  v9 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  objc_msgSend(v2, sel__deprecated_scanLocation);
  lazy protocol witness table accessor for type String and conformance String();
  v12 = StringProtocol._toUTF16Index(_:)();
  v13 = v12;
  v14 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v14 = v9 & 0xFFFFFFFFFFFFLL;
  v15 = 4 * v14;
  if (4 * v14 != v12 >> 14)
  {
    v16 = 0;
    do
    {
      result = (char *)String.Index.samePosition(in:)();
      if ((v18 & 1) == 0)
        break;
      v19 = v16 + 1;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      v20 = (char *)objc_msgSend(v74, sel__deprecated_scanLocation);
      v21 = __OFADD__(v20, v19);
      result = &v20[v19];
      if (v21)
        goto LABEL_52;
      v13 = StringProtocol._toUTF16Index(_:)();
      ++v16;
    }
    while (v15 != v13 >> 14);
  }
  swift_bridgeObjectRelease();
  v22 = specialized Collection.suffix(from:)(v13, (uint64_t)v70, v72);
  v24 = v23;
  swift_bridgeObjectRelease();
  if (v24 >> 14 != v22 >> 14)
  {
    swift_retain();
    v30 = v22;
    while (1)
    {
      v37 = Substring.subscript.getter();
      v39 = v38;
      swift_retain();
      LOBYTE(v37) = specialized Sequence.allSatisfy(_:)(v37, v39, v5);
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
        break;
      v30 = Substring.index(after:)();
      if (v24 >> 14 == v30 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease();
    swift_release_n();
LABEL_32:
    v40 = v74;
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
LABEL_25:
  v40 = v74;
  v41 = objc_msgSend(v74, sel_string);
  v42 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v44 = v43;
  swift_release();

  swift_bridgeObjectRelease();
  v45 = HIBYTE(v44) & 0xF;
  if ((v44 & 0x2000000000000000) == 0)
    v45 = v42;
  v46 = v45 << 16;
  if ((v44 & 0x1000000000000000) == 0 || (v42 & 0x800000000000000) != 0)
    v30 = v46 | 7;
  else
    v30 = v46 | 0xB;
LABEL_33:
  v47 = objc_msgSend(v40, sel_string);
  v48 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  v50 = v49;

  swift_bridgeObjectRetain();
  v51 = specialized Collection.suffix(from:)(v30, v48, v50);
  v53 = v52;
  v71 = v50;
  swift_bridgeObjectRelease();
  if (v53 >> 14 == v51 >> 14)
  {
    swift_bridgeObjectRelease();
LABEL_39:
    v58 = HIBYTE(v71) & 0xF;
    if ((v71 & 0x2000000000000000) == 0)
      v58 = v48;
    v59 = v58 << 16;
    if ((v71 & 0x1000000000000000) == 0 || (v48 & 0x800000000000000) != 0)
      v54 = v59 | 7;
    else
      v54 = v59 | 0xB;
  }
  else
  {
    swift_retain();
    v54 = v51;
    while (1)
    {
      v55 = Substring.subscript.getter();
      v57 = v56;
      swift_retain();
      LOBYTE(v55) = specialized Sequence.allSatisfy(_:)(v55, v57, v73);
      swift_bridgeObjectRelease();
      if ((v55 & 1) != 0)
        break;
      v54 = Substring.index(after:)();
      if (v53 >> 14 == v54 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  if (v30 >> 14 == v54 >> 14)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v61 = objc_msgSend(v74, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v61);

  lazy protocol witness table accessor for type String and conformance String();
  v62 = StringProtocol._toUTF16Offset(_:)();
  swift_bridgeObjectRelease();
  result = (char *)objc_msgSend(v74, sel__deprecated_setScanLocation_, v62);
  if (v54 >> 14 >= v30 >> 14)
  {
    v63 = String.subscript.getter();
    v65 = v64;
    v67 = v66;
    v69 = v68;
    swift_bridgeObjectRelease();
    v60 = MEMORY[0x186DA4634](v63, v65, v67, v69);
    swift_bridgeObjectRelease();
    return (char *)v60;
  }
LABEL_55:
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall NSScanner.scanCharacter()()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  Swift::String_optional result;
  id v56;
  id v57;
  uint64_t v58;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_charactersToBeSkipped);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v3, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v58;
    *(_BYTE *)(v4 + 24) = 0;

    v5 = objc_msgSend(v1, sel_string);
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v7 = v6;

    v8 = objc_msgSend(v1, sel_string);
    v9 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v57 = v1;
    objc_msgSend(v1, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    v12 = StringProtocol._toUTF16Index(_:)();
    v13 = v12;
    v14 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v14 = v9 & 0xFFFFFFFFFFFFLL;
    v15 = 4 * v14;
    if (4 * v14 != v12 >> 14)
    {
      v16 = 0;
      do
      {
        v17 = String.Index.samePosition(in:)();
        if ((v18 & 1) == 0)
          break;
        v19 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        v20 = objc_msgSend(v1, sel__deprecated_scanLocation, v56);
        v21 = __OFADD__(v20, v19);
        v17 = (uint64_t)v20 + v19;
        if (v21)
          goto LABEL_39;
        v13 = StringProtocol._toUTF16Index(_:)();
        ++v16;
      }
      while (v15 != v13 >> 14);
    }
    swift_bridgeObjectRelease();
    v22 = specialized Collection.suffix(from:)(v13, (uint64_t)v56, v7);
    v24 = v23;
    swift_bridgeObjectRelease();
    if (v24 >> 14 == v22 >> 14)
    {
      swift_bridgeObjectRelease();
LABEL_25:
      v1 = v57;
      v39 = objc_msgSend(v57, sel_string, v56);
      v40 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v42 = v41;
      swift_release();

      swift_bridgeObjectRelease();
      v43 = HIBYTE(v42) & 0xF;
      if ((v42 & 0x2000000000000000) == 0)
        v43 = v40;
      v44 = v43 << 16;
      if ((v42 & 0x1000000000000000) == 0 || (v40 & 0x800000000000000) != 0)
        v30 = v44 | 7;
      else
        v30 = v44 | 0xB;
    }
    else
    {
      swift_retain();
      v30 = v22;
      while (1)
      {
        v36 = Substring.subscript.getter();
        v38 = v37;
        swift_retain();
        LOBYTE(v36) = specialized Sequence.allSatisfy(_:)(v36, v38, v4);
        swift_bridgeObjectRelease();
        if ((v36 & 1) == 0)
          break;
        v30 = Substring.index(after:)();
        if (v24 >> 14 == v30 >> 14)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease();
      swift_release_n();
      v1 = v57;
    }
  }
  else
  {
    v25 = objc_msgSend(v0, sel_string);
    v26 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    objc_msgSend(v1, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    v29 = StringProtocol._toUTF16Index(_:)();
    v30 = v29;
    v31 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0)
      v31 = v26 & 0xFFFFFFFFFFFFLL;
    v32 = 4 * v31;
    if (4 * v31 != v29 >> 14)
    {
      v33 = 0;
      do
      {
        v17 = String.Index.samePosition(in:)();
        if ((v18 & 1) == 0)
          break;
        v34 = v33 + 1;
        if (__OFADD__(v33, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        v35 = objc_msgSend(v1, sel__deprecated_scanLocation);
        v21 = __OFADD__(v35, v34);
        v17 = (uint64_t)v35 + v34;
        if (v21)
          goto LABEL_41;
        v30 = StringProtocol._toUTF16Index(_:)();
        ++v33;
      }
      while (v32 != v30 >> 14);
    }
    swift_bridgeObjectRelease();
  }
  v45 = objc_msgSend(v1, sel_string, v56);
  v46 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  v48 = v47;

  v49 = HIBYTE(v48) & 0xF;
  if ((v48 & 0x2000000000000000) == 0)
    v49 = v46 & 0xFFFFFFFFFFFFLL;
  if (v30 >> 14 == 4 * v49)
  {
    swift_bridgeObjectRelease();
    v50 = 0;
    v51 = 0;
  }
  else
  {
    v50 = String.subscript.getter();
    v51 = v52;
    String.index(after:)();
    swift_bridgeObjectRelease();
    v53 = objc_msgSend(v1, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v53);

    lazy protocol witness table accessor for type String and conformance String();
    v54 = StringProtocol._toUTF16Offset(_:)();
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel__deprecated_setScanLocation_, v54);
  }
  v17 = v50;
  v18 = v51;
LABEL_42:
  result.value._object = v18;
  result.value._countAndFlagsBits = v17;
  return result;
}

uint64_t NSScanner.currentIndex.getter()
{
  void *v0;
  void *v1;
  id v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  id v14;
  BOOL v15;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_string);
  v3 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  objc_msgSend(v1, sel__deprecated_scanLocation, v3, v5);
  lazy protocol witness table accessor for type String and conformance String();
  v6 = StringProtocol._toUTF16Index(_:)();
  v7 = v6;
  v8 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v8 = v3 & 0xFFFFFFFFFFFFLL;
  v9 = 4 * v8;
  if (4 * v8 != v6 >> 14)
  {
    v10 = 0;
    do
    {
      result = String.Index.samePosition(in:)();
      if ((v12 & 1) == 0)
        break;
      v13 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        return result;
      }
      v14 = objc_msgSend(v1, sel__deprecated_scanLocation, v3, v5);
      v15 = __OFADD__(v14, v13);
      result = (uint64_t)v14 + v13;
      if (v15)
        goto LABEL_11;
      v7 = StringProtocol._toUTF16Index(_:)();
      ++v10;
    }
    while (v9 != v7 >> 14);
  }
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEA9A8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEA9B0], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String, MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEA980], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for String, MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

__CFString *protocol witness for Error._domain.getter in conformance CFErrorRef()
{
  CFErrorRef *v0;
  __CFString *result;
  __CFString *v2;
  id v3;

  result = (id)CFErrorGetDomain(*v0);
  if (result)
  {
    v2 = result;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return (__CFString *)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.SequenceMaximum()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t PredicateExpressions.Comparison.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<UInt8>) -> (@owned String?, @error @owned Error)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

uint64_t ___generateElements_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "isEqual:", objc_msgSend(MEMORY[0x1E0C99E38], "null"));
}

uint64_t type metadata completion function for IntegerFormatStyle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Duration.TimeFormatStyle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Duration.TimeFormatStyle.Attributed(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for Duration.TimeFormatStyle.Pattern(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.TimeFormatStyle.Pattern);
}

uint64_t type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.TimeFormatStyle.Pattern.Fields);
}

uint64_t type metadata accessor for Duration.TimeFormatStyle.Attributed(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.TimeFormatStyle.Attributed);
}

uint64_t specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  _OWORD v15[4];
  uint64_t v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_26;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v6)
      goto LABEL_29;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_29;
      v12 = *(_QWORD *)(v2 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_29;
        v12 = *(_QWORD *)(v2 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_29;
          v12 = *(_QWORD *)(v2 + 8 * v8);
          if (!v12)
          {
            v8 = v11 + 4;
            if (v11 + 4 >= v6)
              goto LABEL_29;
            v12 = *(_QWORD *)(v2 + 8 * v8);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_25:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_26:
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v10, (uint64_t)v17);
    v15[2] = v18;
    v15[3] = v19;
    v16 = v20;
    v15[0] = v17[0];
    v15[1] = v17[1];
    v14 = *((_QWORD *)&v18 + 1);
    if ((_QWORD)v19 == 1)
    {
      outlined consume of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v18 + 1), 1);
      outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
    }
    else
    {
      if (!(_QWORD)v19)
      {
        swift_bridgeObjectRelease_n();
        outlined consume of AttributedString.AttributeRunBoundaries?(v14, 0);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
        swift_release();
        swift_bridgeObjectRelease();
        return 1;
      }
      swift_bridgeObjectRelease();
    }
    result = outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
  }
  v13 = v11 + 5;
  if (v13 >= v6)
  {
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_29;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_25;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t AttributedString.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v19;
  _BYTE v20[24];
  uint64_t v21;
  _QWORD v22[8];
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v6 = *a1;
  v7 = *v3;
  v8 = *(_OWORD *)(*v3 + 32);
  v23 = *(_OWORD *)(*v3 + 16);
  v24 = v8;
  v25 = *(_OWORD *)(v7 + 48);
  v22[0] = BigString.startIndex.getter();
  v22[1] = v9;
  v22[2] = v10;
  v22[3] = v11;
  v22[4] = BigString.endIndex.getter();
  v22[5] = v12;
  v22[6] = v13;
  v22[7] = v14;
  v15 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v6 + 8);
  swift_retain();
  AttributedString.Guts.getUniformValue<A>(in:key:)(v22, v15, a2, (uint64_t)v20);
  if (v21)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v20, (uint64_t)&v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v20);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a3, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v17 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 1, 1, v17);
  }
  return swift_release();
}

_QWORD *AttributedString.Guts.getUniformValue<A>(in:key:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  char v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  int v114;
  void (*v115)(char *, uint64_t, uint64_t, uint64_t);
  char v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _OWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  __int128 *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t i;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _BYTE v150[40];
  _QWORD v151[3];
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  _BYTE v159[40];
  _BYTE v160[40];
  _OWORD v161[4];
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;

  v5 = v4;
  v139 = a2;
  v140 = a3;
  v172 = 0;
  v170 = 0u;
  v171 = 0u;
  v168 = 0u;
  v169 = 0u;
  v6 = *result >> 11;
  v7 = v4[8];
  v8 = v5[10];
  if (v7)
    v9 = v5[10];
  else
    v9 = 0;
  if (v9 < v6)
    goto LABEL_320;
  v10 = result[4];
  v11 = v5[9];
  v12 = v5[11];
  v145 = v5;
  v136 = a4;
  if (v7)
  {
    if (v6 < v8 && *(_WORD *)(v7 + 16) != 0)
    {
      v147 = v12;
      v148 = v11;
      v146 = v10;
      v27 = *(unsigned __int8 *)(v7 + 18);
      if (*(_BYTE *)(v7 + 18))
      {
        swift_unknownObjectRetain_n();
        result = (_QWORD *)swift_retain_n();
        v16 = v6;
        v121 = v7;
        while (1)
        {
          v123 = *(unsigned __int16 *)(v121 + 16);
          if (!*(_WORD *)(v121 + 16))
            goto LABEL_223;
          v124 = *(_QWORD *)(v121 + 40);
          v125 = v16 - v124;
          if (__OFSUB__(v16, v124))
            goto LABEL_308;
          if (__OFADD__(v125, 1))
          {
LABEL_309:
            __break(1u);
LABEL_310:
            __break(1u);
LABEL_311:
            __break(1u);
LABEL_312:
            __break(1u);
LABEL_313:
            __break(1u);
LABEL_314:
            __break(1u);
LABEL_315:
            __break(1u);
LABEL_316:
            __break(1u);
LABEL_317:
            __break(1u);
LABEL_318:
            __break(1u);
LABEL_319:
            __break(1u);
LABEL_320:
            __break(1u);
LABEL_321:
            __break(1u);
LABEL_322:
            __break(1u);
            goto LABEL_323;
          }
          if (v125 + 1 <= 0)
          {
            v123 = 0;
          }
          else
          {
            if ((_DWORD)v123 == 1)
            {
              v16 -= v124;
LABEL_223:
              if (v16)
                goto LABEL_307;
              goto LABEL_224;
            }
            v126 = *(_QWORD *)(v121 + 64);
            v35 = __OFSUB__(v125, v126);
            v127 = v125 - v126;
            if (v35)
              goto LABEL_318;
            if (__OFADD__(v127, 1))
              goto LABEL_319;
            if (v127 + 1 >= 1)
            {
              if ((_DWORD)v123 != 2)
              {
                v128 = (_QWORD *)(v121 + 88);
                v129 = 2;
                while (1)
                {
                  if (v123 == v129)
                    goto LABEL_297;
                  v16 = v127 - *v128;
                  if (__OFSUB__(v127, *v128))
                    goto LABEL_298;
                  if (__OFADD__(v16, 1))
                    goto LABEL_299;
                  if (v16 + 1 < 1)
                    break;
                  ++v129;
                  v128 += 3;
                  v127 = v16;
                  if (v123 == v129)
                    goto LABEL_223;
                }
                v123 = v129;
                v16 = v127;
                goto LABEL_224;
              }
              v16 = v127;
              goto LABEL_223;
            }
            v123 = 1;
            v16 = v125;
          }
LABEL_224:
          v122 = (4 * *(_BYTE *)(v121 + 18) + 8) & 0x3C;
          v27 = ((-15 << v122) - 1) & v27 | (v123 << v122);
          v15 = *(_QWORD *)(v121 + 24 + 24 * v123);
          swift_unknownObjectRetain();
          result = (_QWORD *)swift_unknownObjectRelease();
          v121 = v15;
          if (!*(_BYTE *)(v15 + 18))
            goto LABEL_248;
        }
      }
      swift_unknownObjectRetain_n();
      result = (_QWORD *)swift_retain_n();
      v16 = v6;
      v15 = v7;
LABEL_248:
      v130 = *(unsigned __int16 *)(v15 + 16);
      if (*(_WORD *)(v15 + 16))
      {
        v131 = *(_QWORD *)(v15 + 24);
        v132 = v16 - v131;
        v12 = v147;
        v11 = v148;
        if (__OFSUB__(v16, v131))
          goto LABEL_337;
        if (__OFADD__(v132, 1))
          goto LABEL_338;
        if (v132 + 1 <= 0)
        {
          v130 = 0;
          goto LABEL_280;
        }
        if ((_DWORD)v130 == 1)
        {
          v16 -= v131;
        }
        else
        {
          v134 = *(_QWORD *)(v15 + 48);
          v35 = __OFSUB__(v132, v134);
          v31 = v132 - v134;
          if (v35)
            goto LABEL_341;
          if (__OFADD__(v31, 1))
            goto LABEL_342;
          if (v31 + 1 < 1)
          {
            v130 = 1;
            v16 = v132;
            goto LABEL_280;
          }
          if ((_DWORD)v130 != 2)
          {
            v135 = (_QWORD *)(v15 + 72);
            v36 = 2;
            while (v130 != v36)
            {
              v16 = v31 - *v135;
              if (__OFSUB__(v31, *v135))
                goto LABEL_330;
              if (__OFADD__(v16, 1))
                goto LABEL_331;
              if (v16 + 1 < 1)
                goto LABEL_279;
              ++v36;
              v135 += 3;
              v31 = v16;
              if (v130 == v36)
                goto LABEL_255;
            }
            goto LABEL_329;
          }
          v16 = v31;
        }
      }
      else
      {
        v12 = v147;
        v11 = v148;
      }
LABEL_255:
      if (!v16)
        goto LABEL_280;
      __break(1u);
LABEL_257:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v154);
      goto LABEL_260;
    }
  }
  swift_retain_n();
  v14 = swift_unknownObjectRetain_n();
  v148 = specialized Rope._endPath.getter(v14);
  swift_unknownObjectRelease();
  v15 = 0;
  v16 = 0;
  if (!v7)
    goto LABEL_281;
LABEL_12:
  swift_unknownObjectRetain();
  v17 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v148, v15, v7, v11);
  swift_release();
  result = (_QWORD *)swift_unknownObjectRelease_n();
  v11 = v6 - v16;
  if (__OFSUB__(v6, v16))
  {
LABEL_283:
    __break(1u);
    goto LABEL_284;
  }
LABEL_13:
  v146 = v10 >> 11;
  v138 = (__int128 *)((char *)&v156 + 8);
  v18 = v17;
  for (i = v6; ; v6 = i)
  {
    v20 = v5[8];
    v147 = v12;
    if (v6 != v146)
    {
      if (v20)
        v29 = v5[10];
      else
        v29 = 0;
      goto LABEL_85;
    }
    v21 = v5[10];
    if (v20)
      v22 = v5[10];
    else
      v22 = 0;
    if (v22 < v6)
      goto LABEL_302;
    if (v20)
      break;
    v27 = 0;
LABEL_83:
    v29 = v6 - v27;
    if (__OFSUB__(v6, v27))
      goto LABEL_303;
    v5 = v145;
LABEL_85:
    if (v11 == v29)
    {
      swift_release();
      return (_QWORD *)outlined init with take of LocalePreferences?((uint64_t)&v168, v136, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    }
    if (v12 != v5[11])
      goto LABEL_287;
    if (v15)
    {
      v45 = (_QWORD *)(v15 + 24 * ((v148 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF));
      v46 = v45[4];
      v47 = v45[5];
      v48 = v45[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v142 = v47;
      v143 = (uint64_t *)v46;
    }
    else
    {
      v137 = 0;
      v49 = v11;
      v50 = v6;
      v51 = v18;
      v52 = v145;
      v53 = v145[8];
      swift_unknownObjectRetain();
      v54 = v148;
      specialized Rope._Node.subscript.getter(v148, v53);
      v143 = (uint64_t *)v55;
      v57 = v56;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (v12 != v52[11])
        goto LABEL_310;
      v142 = v57;
      v58 = v52[8];
      swift_unknownObjectRetain();
      v48 = specialized Rope._Node.subscript.getter(v54, v58);
      v12 = v147;
      swift_unknownObjectRelease();
      v18 = v51;
      v6 = v50;
      v11 = v49;
      v15 = (uint64_t)v137;
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v59 = v11 + v48;
    if (__OFADD__(v11, v48))
      goto LABEL_288;
    if (v146 >= v11)
      v60 = v11;
    else
      v60 = v146;
    if (v11 < v6)
      v60 = v6;
    if (v59 <= v6)
      v61 = v6;
    else
      v61 = v11 + v48;
    if (v146 >= v59)
      v62 = v61;
    else
      v62 = v146;
    if (v60 == v62)
      goto LABEL_289;
    v5 = v145;
    v63 = v145[8];
    v64 = v145[11];
    *(_QWORD *)&v154 = v12;
    *((_QWORD *)&v154 + 1) = v148;
    *(_QWORD *)&v155 = v15;
    v35 = __OFADD__(v18++, 1);
    if (v35)
      goto LABEL_290;
    if (v12 != v64)
      goto LABEL_291;
    if (v15)
    {
      v65 = *(_QWORD *)(v15 + 24 * ((v148 >> ((4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      swift_retain();
      swift_unknownObjectRetain();
      v65 = specialized Rope._Node.subscript.getter(v148, v63);
    }
    swift_bridgeObjectRelease();
    result = (_QWORD *)swift_bridgeObjectRelease();
    v35 = __OFADD__(v11, v65);
    v11 += v65;
    if (v35)
      goto LABEL_292;
    if (v63)
    {
      v66 = ((-15 << ((4 * *(_BYTE *)(v63 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v63 + 18) | ((unint64_t)*(unsigned __int16 *)(v63 + 16) << ((4 * *(_BYTE *)(v63 + 18) + 8) & 0x3C));
      result = (_QWORD *)swift_unknownObjectRetain();
    }
    else
    {
      v66 = 0;
    }
    v67 = v147;
    if (v148 >= v66)
      goto LABEL_293;
    if (v15)
    {
      v68 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
      v69 = ((v148 >> v68) & 0xF) + 1;
      if (v69 < *(unsigned __int16 *)(v15 + 16))
      {
        v70 = (v69 << v68) | ((-15 << v68) - 1) & v148;
        result = (_QWORD *)swift_unknownObjectRelease_n();
        goto LABEL_122;
      }
    }
    v71 = *(unsigned __int8 *)(v63 + 18);
    v72 = (4 * v71 + 8) & 0x3C;
    *(_QWORD *)&v163 = (v148 >> v72) & 0xF;
    if (v71)
    {
      swift_unknownObjectRetain();
      v73 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v63 + 24, (uint64_t *)&v163, (uint64_t)&v154, v63, v71);
      result = (_QWORD *)swift_unknownObjectRelease();
      if ((v73 & 1) != 0)
      {
        result = (_QWORD *)swift_unknownObjectRelease_n();
        v70 = *((_QWORD *)&v154 + 1);
        goto LABEL_122;
      }
    }
    else
    {
      v74 = ((v148 >> v72) & 0xF) + 1;
      if (v74 < *(unsigned __int16 *)(v63 + 16))
      {
        v70 = (v74 << v72) | ((-15 << v72) - 1) & v148;
        *((_QWORD *)&v154 + 1) = v70;
        result = (_QWORD *)swift_unknownObjectRelease_n();
        *(_QWORD *)&v155 = v63;
LABEL_122:
        v75 = v146;
        if (v11 < v146)
          goto LABEL_123;
        goto LABEL_128;
      }
    }
    if (v63)
    {
      v76 = *(unsigned __int8 *)(v63 + 18);
      v77 = *(unsigned __int16 *)(v63 + 16);
      result = (_QWORD *)swift_unknownObjectRelease_n();
      v70 = ((-15 << ((4 * v76 + 8) & 0x3C)) - 1) & v76 | (unint64_t)(v77 << ((4 * v76 + 8) & 0x3C));
    }
    else
    {
      v70 = 0;
    }
    v75 = v146;
    *(_QWORD *)&v154 = v67;
    *((_QWORD *)&v154 + 1) = v70;
    *(_QWORD *)&v155 = 0;
    if (v11 < v146)
    {
LABEL_123:
      v148 = v70;
      v12 = v154;
      v15 = v155;
      swift_release();
      goto LABEL_189;
    }
LABEL_128:
    v78 = v5[8];
    if (i != v75)
    {
      v12 = v5[11];
      if (v78)
      {
        v18 = v5[9];
        v11 = v5[10];
        v94 = *(unsigned __int8 *)(v78 + 18);
        v95 = *(unsigned __int16 *)(v78 + 16);
        swift_release();
        v15 = 0;
        v148 = ((-15 << ((4 * v94 + 8) & 0x3C)) - 1) & v94 | (unint64_t)(v95 << ((4 * v94 + 8) & 0x3C));
      }
      else
      {
        swift_release();
        v148 = 0;
        v15 = 0;
        v18 = 0;
        v11 = 0;
      }
      goto LABEL_189;
    }
    v79 = v5[10];
    if (v78)
      v80 = v5[10];
    else
      v80 = 0;
    if (v80 < i)
      goto LABEL_313;
    v147 = v5[11];
    if (v78)
    {
      v81 = v5[9];
      v82 = *(unsigned __int8 *)(v78 + 18);
      if (i < v79 && *(_WORD *)(v78 + 16))
      {
        if (*(_BYTE *)(v78 + 18))
        {
          result = (_QWORD *)swift_unknownObjectRetain_n();
          v83 = i;
          v84 = v78;
          while (1)
          {
            v86 = *(unsigned __int16 *)(v84 + 16);
            if (!*(_WORD *)(v84 + 16))
              goto LABEL_139;
            v87 = *(_QWORD *)(v84 + 40);
            v35 = __OFSUB__(v83, v87);
            v88 = v83 - v87;
            if (v35)
              goto LABEL_295;
            if (__OFADD__(v88, 1))
              goto LABEL_296;
            if (v88 + 1 <= 0)
            {
              v86 = 0;
            }
            else
            {
              if ((_DWORD)v86 == 1)
                goto LABEL_138;
              v89 = *(_QWORD *)(v84 + 64);
              v83 = v88 - v89;
              if (__OFSUB__(v88, v89))
                goto LABEL_311;
              if (__OFADD__(v83, 1))
                goto LABEL_312;
              if (v83 + 1 < 1)
              {
                v86 = 1;
                v83 = v88;
              }
              else
              {
                if ((_DWORD)v86 == 2)
                  goto LABEL_139;
                v90 = *(_QWORD *)(v84 + 88);
                v35 = __OFSUB__(v83, v90);
                v88 = v83 - v90;
                if (v35)
                  goto LABEL_324;
                if (__OFADD__(v88, 1))
                  goto LABEL_325;
                if (v88 + 1 >= 1)
                {
                  if ((_DWORD)v86 != 3)
                  {
                    v91 = 3;
                    if (v86 > 3)
                      v91 = *(unsigned __int16 *)(v84 + 16);
                    v92 = (_QWORD *)(v84 + 112);
                    v93 = 3;
                    while (v91 != v93)
                    {
                      v83 = v88 - *v92;
                      if (__OFSUB__(v88, *v92))
                        goto LABEL_305;
                      if (__OFADD__(v83, 1))
                        goto LABEL_306;
                      if (v83 + 1 < 1)
                      {
                        v86 = v93;
                        v83 = v88;
                        goto LABEL_140;
                      }
                      ++v93;
                      v92 += 3;
                      v88 = v83;
                      if (v86 == v93)
                        goto LABEL_139;
                    }
LABEL_304:
                    __break(1u);
LABEL_305:
                    __break(1u);
LABEL_306:
                    __break(1u);
LABEL_307:
                    __break(1u);
LABEL_308:
                    __break(1u);
                    goto LABEL_309;
                  }
LABEL_138:
                  v83 = v88;
LABEL_139:
                  if (v83)
                    goto LABEL_294;
                  goto LABEL_140;
                }
                v86 = 2;
              }
            }
LABEL_140:
            v85 = (4 * *(_BYTE *)(v84 + 18) + 8) & 0x3C;
            v82 = ((-15 << v85) - 1) & v82 | (v86 << v85);
            v15 = *(_QWORD *)(v84 + 24 + 24 * v86);
            swift_unknownObjectRetain();
            result = (_QWORD *)swift_unknownObjectRelease();
            v84 = v15;
            if (!*(_BYTE *)(v15 + 18))
              goto LABEL_173;
          }
        }
        result = (_QWORD *)swift_unknownObjectRetain_n();
        v82 = 0;
        v83 = i;
        v15 = v78;
LABEL_173:
        v97 = *(unsigned __int16 *)(v15 + 16);
        if (!*(_WORD *)(v15 + 16))
          goto LABEL_184;
        v98 = *(_QWORD *)(v15 + 24);
        v35 = __OFSUB__(v83, v98);
        v99 = v83 - v98;
        if (v35)
          goto LABEL_327;
        if (__OFADD__(v99, 1))
          goto LABEL_328;
        if (v99 + 1 <= 0)
        {
          v97 = 0;
        }
        else
        {
          if ((_DWORD)v97 == 1)
            goto LABEL_178;
          v100 = *(_QWORD *)(v15 + 48);
          v83 = v99 - v100;
          if (__OFSUB__(v99, v100))
            goto LABEL_339;
          if (__OFADD__(v83, 1))
            goto LABEL_340;
          if (v83 + 1 < 1)
          {
            v97 = 1;
            v83 = v99;
          }
          else
          {
            if ((_DWORD)v97 == 2)
              goto LABEL_184;
            v117 = *(_QWORD *)(v15 + 72);
            v35 = __OFSUB__(v83, v117);
            v99 = v83 - v117;
            if (v35)
              goto LABEL_343;
            if (__OFADD__(v99, 1))
              goto LABEL_344;
            if (v99 + 1 < 1)
            {
              v97 = 2;
            }
            else
            {
              if ((_DWORD)v97 != 3)
              {
                v118 = 3;
                if (v97 > 3)
                  v118 = *(unsigned __int16 *)(v15 + 16);
                v119 = (_QWORD *)(v15 + 96);
                v120 = 3;
                while (v118 != v120)
                {
                  v83 = v99 - *v119;
                  if (__OFSUB__(v99, *v119))
                    goto LABEL_335;
                  if (__OFADD__(v83, 1))
                    goto LABEL_336;
                  if (v83 + 1 < 1)
                  {
                    v97 = v120;
                    v83 = v99;
                    goto LABEL_185;
                  }
                  ++v120;
                  v119 += 3;
                  v99 = v83;
                  if (v97 == v120)
                    goto LABEL_184;
                }
                goto LABEL_334;
              }
LABEL_178:
              v83 = v99;
LABEL_184:
              if (v83)
                goto LABEL_326;
            }
          }
        }
LABEL_185:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v96 = v82 & 0xFFFFFFFFFFFFF0FFLL | (v97 << 8);
      }
      else
      {
        v96 = ((-15 << ((4 * v82 + 8) & 0x3C)) - 1) & v82 | ((unint64_t)*(unsigned __int16 *)(v78 + 16) << ((4 * v82 + 8) & 0x3C));
        swift_unknownObjectRetain();
        v83 = 0;
        v15 = 0;
      }
      swift_unknownObjectRetain();
      v148 = v96;
      v18 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v147, v96, v15, v78, v81);
      swift_release();
      result = (_QWORD *)swift_unknownObjectRelease_n();
      goto LABEL_187;
    }
    result = (_QWORD *)swift_release();
    v83 = 0;
    v15 = 0;
    v148 = 0;
    v18 = 0;
LABEL_187:
    v11 = i - v83;
    if (__OFSUB__(i, v83))
      goto LABEL_314;
    v12 = v147;
LABEL_189:
    v101 = (*(uint64_t (**)(void))(v140 + 24))();
    v103 = (uint64_t)v143;
    if (v143[2] && (v104 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v102), (v105 & 1) != 0))
    {
      outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v103 + 56) + 72 * v104, (uint64_t)&v154);
    }
    else
    {
      v158 = 0;
      v156 = 0u;
      v157 = 0u;
      v155 = 0u;
      v154 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v155 + 1))
    {
      swift_release();
      outlined destroy of Any?((uint64_t)&v168, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      result = (_QWORD *)outlined destroy of Any?((uint64_t)&v154, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_262:
      v133 = (_OWORD *)v136;
      *(_QWORD *)(v136 + 64) = 0;
      v133[2] = 0u;
      v133[3] = 0u;
      *v133 = 0u;
      v133[1] = 0u;
      return result;
    }
    v165 = v156;
    v166 = v157;
    v167 = v158;
    v163 = v154;
    v164 = v155;
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v168, (uint64_t)&v154, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((_QWORD *)&v155 + 1))
    {
      outlined destroy of Any?((uint64_t)&v168, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      v19 = &v154;
LABEL_15:
      result = (_QWORD *)outlined destroy of Any?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_16;
    }
    v161[2] = v156;
    v161[3] = v157;
    v162 = v158;
    v161[0] = v154;
    v161[1] = v155;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v163, (uint64_t)v160);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v161, (uint64_t)v159);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v160, (uint64_t)&v154, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v159, (uint64_t)v138, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!*((_QWORD *)&v155 + 1))
    {
      if (v158)
      {
        outlined destroy of Any?((uint64_t)v138, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_260:
        outlined destroy of Any?((uint64_t)v159, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of Any?((uint64_t)v160, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v161);
        outlined destroy of Any?((uint64_t)&v168, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_261:
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v163);
        result = (_QWORD *)swift_release();
        goto LABEL_262;
      }
      outlined destroy of Any?((uint64_t)v159, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v160, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v161);
      v19 = &v168;
      goto LABEL_15;
    }
    if (!v158)
      goto LABEL_257;
    v141 = v18;
    v147 = v12;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v154, (uint64_t)v151);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v138, (uint64_t)v150);
    v106 = v152;
    v142 = v153;
    v137 = __swift_project_boxed_opaque_existential_1(v151, v152);
    v143 = &v136;
    v107 = *(_QWORD *)(v106 - 8);
    MEMORY[0x1E0C80A78](v137);
    v109 = (char *)&v136 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v150, (uint64_t)&v149);
    v110 = type metadata accessor for Optional();
    v111 = *(_QWORD *)(v110 - 8);
    MEMORY[0x1E0C80A78](v110);
    v113 = (char *)&v136 - v112;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v114 = swift_dynamicCast();
    v115 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56);
    if (v114)
    {
      v115(v113, 0, 1, v106);
      (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v109, v113, v106);
      v116 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v106);
    }
    else
    {
      v115(v113, 1, 1, v106);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v113, v110);
      v116 = 0;
    }
    v5 = v145;
    v12 = v147;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v150);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v151);
    outlined destroy of Any?((uint64_t)v159, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v160, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v161);
    result = (_QWORD *)outlined destroy of Any?((uint64_t)&v168, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v18 = v141;
    if ((v116 & 1) == 0)
      goto LABEL_261;
LABEL_16:
    v170 = v165;
    v171 = v166;
    v172 = v167;
    v168 = v163;
    v169 = v164;
  }
  v23 = v5[9];
  v142 = v5[11];
  v143 = (uint64_t *)v23;
  v24 = *(unsigned __int16 *)(v20 + 16);
  v12 = *(unsigned __int8 *)(v20 + 18);
  v25 = v6 >= v21 || (_DWORD)v24 == 0;
  v141 = v18;
  if (v25)
  {
    v26 = ((-15 << ((4 * v12 + 8) & 0x3C)) - 1) & v12 | (unint64_t)(v24 << ((4 * v12 + 8) & 0x3C));
    swift_unknownObjectRetain();
    v27 = 0;
    v28 = 0;
LABEL_82:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v142, v26, v28, v20, (uint64_t)v143);
    result = (_QWORD *)swift_unknownObjectRelease_n();
    v12 = v147;
    v18 = v141;
    goto LABEL_83;
  }
  if ((_DWORD)v12)
  {
    result = (_QWORD *)swift_unknownObjectRetain_n();
    v27 = v6;
    v7 = v20;
    while (1)
    {
      v31 = *(unsigned __int16 *)(v7 + 16);
      if (!*(_WORD *)(v7 + 16))
        goto LABEL_36;
      v32 = *(_QWORD *)(v7 + 40);
      v33 = v27 - v32;
      if (__OFSUB__(v27, v32))
        goto LABEL_285;
      if (__OFADD__(v33, 1))
        goto LABEL_286;
      if (v33 + 1 <= 0)
      {
        v31 = 0;
        goto LABEL_37;
      }
      if ((_DWORD)v31 == 1)
        break;
      v34 = *(_QWORD *)(v7 + 64);
      v35 = __OFSUB__(v33, v34);
      v36 = v33 - v34;
      if (v35)
        goto LABEL_300;
      if (__OFADD__(v36, 1))
        goto LABEL_301;
      if (v36 + 1 < 1)
      {
        v31 = 1;
        v27 = v33;
        goto LABEL_37;
      }
      if ((_DWORD)v31 == 2)
      {
        v27 = v36;
        goto LABEL_36;
      }
      v37 = (_QWORD *)(v7 + 88);
      v38 = 2;
      while (1)
      {
        if (v31 == v38)
        {
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
LABEL_279:
          v130 = v36;
          v16 = v31;
LABEL_280:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v148 = v27 & 0xFFFFFFFFFFFFF0FFLL | (v130 << 8);
          v5 = v145;
          v10 = v146;
          if (v7)
            goto LABEL_12;
LABEL_281:
          result = (_QWORD *)swift_release();
          v17 = 0;
          v11 = v6 - v16;
          if (__OFSUB__(v6, v16))
            goto LABEL_283;
          goto LABEL_13;
        }
        v27 = v36 - *v37;
        if (__OFSUB__(v36, *v37))
          goto LABEL_277;
        if (__OFADD__(v27, 1))
          goto LABEL_278;
        if (v27 + 1 < 1)
          break;
        ++v38;
        v37 += 3;
        v36 = v27;
        if (v31 == v38)
          goto LABEL_36;
      }
      v31 = v38;
      v27 = v36;
LABEL_37:
      v30 = (4 * *(_BYTE *)(v7 + 18) + 8) & 0x3C;
      v12 = ((-15 << v30) - 1) & v12 | (v31 << v30);
      v28 = *(_QWORD *)(v7 + 24 + 24 * v31);
      swift_unknownObjectRetain();
      result = (_QWORD *)swift_unknownObjectRelease();
      v7 = v28;
      if (!*(_BYTE *)(v28 + 18))
        goto LABEL_59;
    }
    v27 -= v32;
LABEL_36:
    if (!v27)
      goto LABEL_37;
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
    goto LABEL_304;
  }
  result = (_QWORD *)swift_unknownObjectRetain_n();
  v12 = 0;
  v27 = v6;
  v28 = v20;
LABEL_59:
  v39 = *(unsigned __int16 *)(v28 + 16);
  if (!*(_WORD *)(v28 + 16))
    goto LABEL_68;
  v40 = *(_QWORD *)(v28 + 24);
  v35 = __OFSUB__(v27, v40);
  v41 = v27 - v40;
  if (v35)
    goto LABEL_322;
  if (!__OFADD__(v41, 1))
  {
    if (v41 + 1 <= 0)
    {
      v39 = 0;
    }
    else
    {
      if ((_DWORD)v39 == 1)
      {
LABEL_69:
        if (v41)
          goto LABEL_321;
        v27 = 0;
        goto LABEL_81;
      }
      v42 = *(_QWORD *)(v28 + 48);
      v27 = v41 - v42;
      if (__OFSUB__(v41, v42))
        goto LABEL_332;
      if (__OFADD__(v27, 1))
        goto LABEL_333;
      if (v27 + 1 < 1)
      {
        v39 = 1;
        v27 = v41;
      }
      else
      {
        if ((_DWORD)v39 == 2)
        {
LABEL_68:
          v41 = v27;
          goto LABEL_69;
        }
        v43 = (_QWORD *)(v28 + 72);
        v44 = 2;
        while (1)
        {
          if (v39 == v44)
            goto LABEL_315;
          v41 = v27 - *v43;
          if (__OFSUB__(v27, *v43))
            goto LABEL_316;
          if (__OFADD__(v41, 1))
            goto LABEL_317;
          if (v41 + 1 < 1)
            break;
          ++v44;
          v43 += 3;
          v27 = v41;
          if (v39 == v44)
            goto LABEL_69;
        }
        v39 = v44;
      }
    }
LABEL_81:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v26 = v12 & 0xFFFFFFFFFFFFF0FFLL | (v39 << 8);
    goto LABEL_82;
  }
LABEL_323:
  __break(1u);
LABEL_324:
  __break(1u);
LABEL_325:
  __break(1u);
LABEL_326:
  __break(1u);
LABEL_327:
  __break(1u);
LABEL_328:
  __break(1u);
LABEL_329:
  __break(1u);
LABEL_330:
  __break(1u);
LABEL_331:
  __break(1u);
LABEL_332:
  __break(1u);
LABEL_333:
  __break(1u);
LABEL_334:
  __break(1u);
LABEL_335:
  __break(1u);
LABEL_336:
  __break(1u);
LABEL_337:
  __break(1u);
LABEL_338:
  __break(1u);
LABEL_339:
  __break(1u);
LABEL_340:
  __break(1u);
LABEL_341:
  __break(1u);
LABEL_342:
  __break(1u);
LABEL_343:
  __break(1u);
LABEL_344:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString._InternalRunsSlice.updateEach(with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  int v143;
  char v144;
  char v145;
  unint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  char v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD v182[2];
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  _OWORD v197[3];
  _OWORD v198[3];
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  _OWORD v205[2];

  v5 = (uint64_t *)(result + 64);
  v4 = *(_QWORD *)(result + 64);
  if (v4)
    v6 = *(_QWORD *)(result + 80);
  else
    v6 = 0;
  if (a2 < 0 || v6 < a2)
  {
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    __break(1u);
LABEL_408:
    __break(1u);
LABEL_409:
    __break(1u);
LABEL_410:
    __break(1u);
LABEL_411:
    __break(1u);
LABEL_412:
    __break(1u);
LABEL_413:
    __break(1u);
    goto LABEL_414;
  }
  v7 = a3;
  v8 = (_QWORD *)result;
  v9 = *(_QWORD *)(result + 72);
  v180 = (_QWORD *)result;
  v181 = *(_QWORD *)(result + 88);
  v171 = (uint64_t *)(result + 64);
  if (!v4 || (*(_WORD *)(v4 + 16) ? (v10 = *(_QWORD *)(result + 80) <= a2) : (v10 = 1), v10))
  {
    v11 = swift_unknownObjectRetain_n();
    v12 = specialized Rope._endPath.getter(v11);
    result = swift_unknownObjectRelease();
    v13 = 0;
    v14 = 0;
    if (!v4)
      goto LABEL_48;
    goto LABEL_13;
  }
  v15 = *(unsigned __int8 *)(v4 + 18);
  if (*(_BYTE *)(v4 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v14 = a2;
    v16 = (_QWORD *)v4;
    while (1)
    {
      v18 = *((unsigned __int16 *)v16 + 8);
      if (!*((_WORD *)v16 + 8))
        break;
      v19 = v16[5];
      v20 = __OFSUB__(v14, v19);
      v21 = v14 - v19;
      if (v20)
        goto LABEL_377;
      if (__OFADD__(v21, 1))
        goto LABEL_378;
      if (v21 + 1 <= 0)
      {
        v18 = 0;
        goto LABEL_18;
      }
      if ((_DWORD)v18 == 1)
      {
        v14 = v21;
        break;
      }
      v22 = v16 + 8;
      v23 = 1;
      while (1)
      {
        v24 = *v22;
        v22 += 3;
        v14 = v21 - v24;
        if (__OFSUB__(v21, v24))
          goto LABEL_345;
        if (__OFADD__(v14, 1))
        {
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
LABEL_370:
          __break(1u);
LABEL_371:
          __break(1u);
LABEL_372:
          __break(1u);
LABEL_373:
          __break(1u);
          goto LABEL_374;
        }
        if (v14 + 1 < 1)
          break;
        ++v23;
        v21 = v14;
        if (v18 == v23)
          goto LABEL_17;
      }
      v18 = v23;
      v14 = v21;
LABEL_18:
      v17 = (4 * *((_BYTE *)v16 + 18) + 8) & 0x3C;
      v15 = ((-15 << v17) - 1) & v15 | (v18 << v17);
      v13 = (_QWORD *)v16[3 * v18 + 3];
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v16 = v13;
      if (!*((_BYTE *)v13 + 18))
        goto LABEL_33;
    }
LABEL_17:
    if (!v14)
      goto LABEL_18;
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
    goto LABEL_392;
  }
  result = swift_unknownObjectRetain_n();
  v14 = a2;
  v13 = (_QWORD *)v4;
LABEL_33:
  v25 = *((unsigned __int16 *)v13 + 8);
  if (!*((_WORD *)v13 + 8))
  {
    v7 = a3;
    v5 = v171;
    goto LABEL_46;
  }
  v26 = v13[3];
  v20 = __OFSUB__(v14, v26);
  v27 = v14 - v26;
  v7 = a3;
  v5 = v171;
  if (!v20)
  {
    if (__OFADD__(v27, 1))
      goto LABEL_416;
    if (v27 + 1 <= 0)
    {
      v25 = 0;
      goto LABEL_47;
    }
    if ((_DWORD)v25 != 1)
    {
      v28 = v13 + 6;
      v29 = 1;
      while (1)
      {
        v30 = *v28;
        v28 += 3;
        v14 = v27 - v30;
        if (__OFSUB__(v27, v30))
          goto LABEL_394;
        if (__OFADD__(v14, 1))
          goto LABEL_395;
        if (v14 + 1 < 1)
          goto LABEL_338;
        ++v29;
        v27 = v14;
        if (v25 == v29)
          goto LABEL_46;
      }
    }
    v14 = v27;
LABEL_46:
    if (v14)
    {
LABEL_414:
      __break(1u);
      goto LABEL_415;
    }
LABEL_47:
    while (2)
    {
      swift_unknownObjectRelease();
      result = swift_unknownObjectRelease();
      v12 = v15 & 0xFFFFFFFFFFFFF0FFLL | (v25 << 8);
      v8 = v180;
      if (v4)
      {
LABEL_13:
        swift_unknownObjectRetain();
        v179 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v181, v12, (uint64_t)v13, v4, v9);
        result = swift_unknownObjectRelease_n();
      }
      else
      {
LABEL_48:
        v179 = 0;
      }
      v9 = a2;
      v20 = __OFSUB__(a2, v14);
      v31 = a2 - v14;
      if (v20)
        goto LABEL_393;
      v178 = v12;
      v32 = v181;
      while (1)
      {
        v35 = *v5;
        v181 = v32;
        if (v9 != v7)
        {
          if (v35)
            v41 = v8[10];
          else
            v41 = 0;
          goto LABEL_104;
        }
        if (!v35)
        {
          if (v9 > 0)
            goto LABEL_379;
          v7 = 0;
          goto LABEL_102;
        }
        v36 = v8[10];
        if (v36 < v9)
          goto LABEL_365;
        v37 = v8[9];
        v38 = v8[11];
        v15 = *(unsigned __int8 *)(v35 + 18);
        v39 = !*(_WORD *)(v35 + 16) || v36 <= v9;
        v173 = v37;
        if (!v39)
          break;
        v40 = ((-15 << ((4 * v15 + 8) & 0x3C)) - 1) & v15 | ((unint64_t)*(unsigned __int16 *)(v35 + 16) << ((4 * v15 + 8) & 0x3C));
        swift_unknownObjectRetain();
        v7 = 0;
        v9 = 0;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v38, v40, v9, v35, v173);
        result = swift_unknownObjectRelease_n();
        v9 = a2;
        v8 = v180;
        v32 = v181;
LABEL_102:
        v41 = v9 - v7;
        if (__OFSUB__(v9, v7))
          goto LABEL_360;
        v7 = a3;
LABEL_104:
        if (v31 >= v41)
          return result;
        if (v32 != v8[11])
          goto LABEL_347;
        if (v13)
        {
          v53 = v178;
          v54 = &v13[3 * ((v178 >> ((4 * *((_BYTE *)v13 + 18) + 8) & 0x3C)) & 0xF)];
          v56 = v54[4];
          v55 = v54[5];
          v57 = v54[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }
        else
        {
          v58 = v8[8];
          swift_unknownObjectRetain();
          v53 = v178;
          specialized Rope._Node.subscript.getter(v178, v58);
          v56 = v59;
          v55 = v60;
          result = swift_unknownObjectRelease();
          if (v181 != v8[11])
            goto LABEL_364;
          v61 = v8[8];
          swift_unknownObjectRetain();
          v57 = specialized Rope._Node.subscript.getter(v178, v61);
          v7 = a3;
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v62 = v31 + v57;
        if (__OFADD__(v31, v57))
          goto LABEL_348;
        *(_QWORD *)&v189 = v56;
        *((_QWORD *)&v189 + 1) = v55;
        if (v31 >= v7)
          v63 = v7;
        else
          v63 = v31;
        v9 = a2;
        if (v31 >= a2)
          v64 = v63;
        else
          v64 = a2;
        if (v62 <= a2)
          v65 = a2;
        else
          v65 = v62;
        if (v62 <= v7)
          v66 = v65;
        else
          v66 = v7;
        if (v64 == v66)
          goto LABEL_349;
        if (v64 != v31 || v66 != v62)
        {
          v186 = 0uLL;
          result = specialized AttributedString._AttributeStorage.matchStyle(of:for:)(a4, (uint64_t *)&v186);
          if ((result & 1) != 0)
          {
            if (__OFSUB__(v66, v64))
              goto LABEL_368;
            v9 = *((_QWORD *)&v189 + 1);
            v4 = v189;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v64, v66, v66 - v64, v4, v9);
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v83 = v180[8];
            if (v83)
              v84 = v180[10];
            else
              v84 = 0;
            if (v31 < 0 || v84 < v31)
              goto LABEL_370;
            v85 = v180[9];
            v181 = v180[11];
            if (v83 && *(_WORD *)(v83 + 16) && v31 < v180[10])
            {
              v86 = *(unsigned __int8 *)(v83 + 18);
              if (*(_BYTE *)(v83 + 18))
              {
                result = swift_unknownObjectRetain_n();
                v15 = v31;
                v5 = (uint64_t *)v83;
                while (1)
                {
                  v27 = *((unsigned __int16 *)v5 + 8);
                  if (!*((_WORD *)v5 + 8))
                    goto LABEL_150;
                  v88 = v5[5];
                  v20 = __OFSUB__(v15, v88);
                  v29 = v15 - v88;
                  if (v20)
                    goto LABEL_358;
                  if (__OFADD__(v29, 1))
                    goto LABEL_359;
                  if (v29 + 1 <= 0)
                  {
                    v27 = 0;
                  }
                  else
                  {
                    if ((_DWORD)v27 == 1)
                    {
                      v15 = v29;
LABEL_150:
                      if (v15)
                        goto LABEL_355;
                      goto LABEL_151;
                    }
                    v89 = v5 + 8;
                    v90 = 1;
                    while (1)
                    {
                      v91 = *v89;
                      v89 += 3;
                      v15 = v29 - v91;
                      if (__OFSUB__(v29, v91))
                        goto LABEL_336;
                      if (__OFADD__(v15, 1))
                        goto LABEL_337;
                      if (v15 + 1 < 1)
                        break;
                      ++v90;
                      v29 = v15;
                      if (v27 == v90)
                        goto LABEL_150;
                    }
                    v27 = v90;
                    v15 = v29;
                  }
LABEL_151:
                  v87 = (4 * *((_BYTE *)v5 + 18) + 8) & 0x3C;
                  v86 = ((-15 << v87) - 1) & v86 | (v27 << v87);
                  v13 = (_QWORD *)v5[3 * v27 + 3];
                  swift_unknownObjectRetain();
                  result = swift_unknownObjectRelease();
                  v5 = v13;
                  if (!*((_BYTE *)v13 + 18))
                    goto LABEL_212;
                }
              }
              result = swift_unknownObjectRetain_n();
              v15 = v31;
              v13 = (_QWORD *)v83;
LABEL_212:
              v128 = *((unsigned __int16 *)v13 + 8);
              if (*((_WORD *)v13 + 8))
              {
                v129 = v13[3];
                v20 = __OFSUB__(v15, v129);
                v130 = v15 - v129;
                if (v20)
                  goto LABEL_401;
                if (__OFADD__(v130, 1))
                  goto LABEL_402;
                if (v130 + 1 <= 0)
                {
                  v94 = v85;
                  v128 = 0;
                }
                else
                {
                  if ((_DWORD)v128 == 1)
                  {
                    v15 = v130;
                    goto LABEL_230;
                  }
                  v134 = v13 + 6;
                  v135 = 1;
                  while (1)
                  {
                    v136 = *v134;
                    v134 += 3;
                    v15 = v130 - v136;
                    if (__OFSUB__(v130, v136))
                      goto LABEL_375;
                    if (__OFADD__(v15, 1))
                      goto LABEL_376;
                    if (v15 + 1 < 1)
                      break;
                    ++v135;
                    v130 = v15;
                    if (v128 == v135)
                      goto LABEL_230;
                  }
                  v94 = v85;
                  v128 = v135;
                  v15 = v130;
                }
              }
              else
              {
LABEL_230:
                if (v15)
                  goto LABEL_397;
                v94 = v85;
              }
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              v53 = v86 & 0xFFFFFFFFFFFFF0FFLL | (v128 << 8);
              v5 = v171;
LABEL_171:
              swift_unknownObjectRetain();
              v179 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v181, v53, (uint64_t)v13, v83, v94);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_unknownObjectRelease_n();
            }
            else
            {
              v93 = swift_unknownObjectRetain_n();
              v94 = v85;
              v53 = specialized Rope._endPath.getter(v93);
              swift_unknownObjectRelease();
              v13 = 0;
              v15 = 0;
              if (v83)
                goto LABEL_171;
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              v179 = 0;
            }
            v7 = a3;
            v9 = a2;
            v20 = __OFSUB__(v31, v15);
            v31 -= v15;
            if (v20)
              goto LABEL_372;
          }
          else
          {
LABEL_210:
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
          }
          v67 = v180;
          goto LABEL_236;
        }
        v67 = v180;
        if (v181 != v180[11])
          goto LABEL_361;
        if (!*v5)
          goto LABEL_417;
        specialized Rope._Node._prepareModify(at:)(v53, (uint64_t)&v190);
        v205[0] = v191;
        v186 = v190;
        v187 = v191;
        v188 = v192;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v205);
        result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)v205 + 8);
        v187 = MEMORY[0x1E0DEE9E0];
        v68 = v181 + 1;
        v180[11] = v181 + 1;
        if (!v180[8])
          goto LABEL_418;
        specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v186 = 0uLL;
        result = specialized AttributedString._AttributeStorage.matchStyle(of:for:)(a4, (uint64_t *)&v186);
        if ((result & 1) == 0)
        {
          if (v68 != v180[11])
            goto LABEL_371;
          if (!*v5)
            goto LABEL_421;
          specialized Rope._Node._prepareModify(at:)(v53, (uint64_t)&v199);
          v204 = v200;
          v186 = v199;
          v187 = v200;
          v188 = v201;
          v92 = v189;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v204);
          result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v204 + 8);
          v187 = v92;
          v181 += 2;
          v180[11] = v181;
          if (!v180[8])
            goto LABEL_422;
          v13 = specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          goto LABEL_236;
        }
        if (v68 != v180[11])
          goto LABEL_369;
        if (!*v5)
          goto LABEL_419;
        specialized Rope._Node._prepareModify(at:)(v53, (uint64_t)&v193);
        v202 = v194;
        v203 = v195;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v202);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v203);
        v186 = v193;
        v188 = v196;
        v69 = *((_QWORD *)&v189 + 1);
        result = v189;
        v187 = v189;
        v70 = v53;
        v71 = v181 + 2;
        v180[11] = v181 + 2;
        if (!v180[8])
          goto LABEL_420;
        v174 = result;
        swift_bridgeObjectRetain_n();
        v172 = v69;
        swift_bridgeObjectRetain_n();
        v13 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v72 = v180[8];
        v73 = v180[9];
        v74 = v180[10];
        v75 = v180[11];
        v181 += 2;
        *(_QWORD *)&v186 = v71;
        *((_QWORD *)&v186 + 1) = v70;
        *(_QWORD *)&v187 = v13;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(after:)(&v186, v72, v73, v74, v75);
        swift_unknownObjectRelease();
        v76 = v186;
        v77 = v187;
        v78 = swift_unknownObjectRetain();
        v79 = specialized Rope._endPath.getter(v78);
        result = swift_unknownObjectRelease();
        if (*((_QWORD *)&v76 + 1) >= v79)
        {
          v7 = a3;
          v9 = a2;
          v5 = v171;
          v53 = v178;
        }
        else
        {
          v7 = a3;
          v9 = a2;
          if ((_QWORD)v76 != v180[11])
            goto LABEL_381;
          if (v77)
          {
            v80 = v77 + 24 * ((*((_QWORD *)&v76 + 1) >> ((4 * *(_BYTE *)(v77 + 18) + 8) & 0x3C)) & 0xFLL);
            v81 = *(_QWORD *)(v80 + 32);
            v82 = *(_QWORD *)(v80 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v95 = v180[8];
            swift_unknownObjectRetain();
            v9 = a2;
            specialized Rope._Node.subscript.getter(*((unint64_t *)&v76 + 1), v95);
            v81 = v96;
            v82 = v97;
            swift_unknownObjectRelease();
          }
          v5 = v171;
          v53 = v178;
          if ((specialized static Dictionary<>.== infix(_:_:)(v81, v174) & 1) == 0)
          {
            swift_bridgeObjectRelease();
LABEL_185:
            result = swift_bridgeObjectRelease();
            goto LABEL_186;
          }
          v98 = specialized static Set.== infix(_:_:)(v82, v172);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v98 & 1) != 0)
          {
            v53 = specialized Rope._remove(at:)((uint64_t)&v186, v181, v178);
            v99 = v180;
            v100 = v180[8];
            v101 = v180[11];
            if (v53 < specialized Rope._endPath.getter(v100) && *(_BYTE *)(v100 + 18))
            {
              v102 = (v53 >> ((4 * *(_BYTE *)(v100 + 18) + 8) & 0x3C)) & 0xF;
              swift_unknownObjectRetain();
              v9 = a2;
              v103 = v102;
              v99 = v180;
              specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v100 + 24, v103, v53);
              swift_unknownObjectRelease();
            }
            v104 = v186;
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            if (v101 != v99[11])
              goto LABEL_403;
            if (!*v171)
              goto LABEL_423;
            result = specialized Rope._Node._prepareModify(at:)(v53, (uint64_t)v197);
            v186 = v197[0];
            v187 = v197[1];
            v188 = v197[2];
            if (__OFADD__(*((_QWORD *)&v197[0] + 1), v104))
              goto LABEL_404;
            *((_QWORD *)&v186 + 1) = *((_QWORD *)&v197[0] + 1) + v104;
            v181 = v101 + 1;
            v99[11] = v101 + 1;
            if (!v99[8])
              goto LABEL_424;
            v13 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
            swift_bridgeObjectRelease();
            goto LABEL_185;
          }
        }
LABEL_186:
        v105 = *v5;
        if (*v5)
          v105 = *(unsigned __int8 *)(v105 + 18);
        v67 = v180;
        if (v53 <= v105)
        {
          swift_bridgeObjectRelease_n();
          result = swift_bridgeObjectRelease_n();
          goto LABEL_236;
        }
        v106 = v180[8];
        v107 = v180[11];
        *(_QWORD *)&v186 = v181;
        *((_QWORD *)&v186 + 1) = v53;
        *(_QWORD *)&v187 = v13;
        if (v181 != v107)
          goto LABEL_382;
        if (v106)
        {
          v108 = *(unsigned __int8 *)(v106 + 18);
          result = swift_unknownObjectRetain();
          if (v53 <= v108)
            goto LABEL_383;
        }
        else if (!v53)
        {
          goto LABEL_383;
        }
        v109 = (4 * *((_BYTE *)v13 + 18) + 8) & 0x3C;
        if (((v53 >> v109) & 0xF) != 0)
        {
          v110 = ((((v53 >> v109) & 0xF) - 1) << v109) | ((-15 << v109) - 1) & v53;
          result = swift_unknownObjectRelease();
          v111 = v13;
          v112 = v181;
          v113 = v174;
        }
        else
        {
          swift_unknownObjectRetain();
          v114 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v186, v106);
          result = swift_unknownObjectRelease_n();
          v113 = v174;
          if ((v114 & 1) == 0)
            goto LABEL_398;
          v110 = *((_QWORD *)&v186 + 1);
          v112 = v186;
          v111 = (_QWORD *)v187;
        }
        v9 = a2;
        if (v112 != v180[11])
          goto LABEL_384;
        if (v111)
        {
          v115 = &v111[3 * ((v110 >> ((4 * *((_BYTE *)v111 + 18) + 8) & 0x3C)) & 0xF)];
          v116 = v115[4];
          v117 = v115[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v118 = v180[8];
          swift_unknownObjectRetain();
          v9 = a2;
          specialized Rope._Node.subscript.getter(v110, v118);
          v116 = v119;
          v117 = v120;
          swift_unknownObjectRelease();
        }
        if ((specialized static Dictionary<>.== infix(_:_:)(v116, v113) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_210;
        }
        v121 = specialized static Set.== infix(_:_:)(v117, v172);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v121 & 1) == 0)
        {
          v5 = v171;
          goto LABEL_210;
        }
        v122 = specialized Rope._remove(at:)((uint64_t)&v186, v181, v53);
        v123 = v180;
        v124 = v180[8];
        v125 = v180[11];
        if (v122 >= specialized Rope._endPath.getter(v124))
        {
          v124 = 0;
        }
        else if (*(_BYTE *)(v124 + 18))
        {
          v126 = (v122 >> ((4 * *(_BYTE *)(v124 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          v127 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v124 + 24, v126, v122);
          swift_unknownObjectRelease();
          v124 = v127;
          v123 = v180;
        }
        v183 = v125;
        v184 = v122;
        v185 = v124;
        v131 = v186;
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if (v125 != v123[11])
          goto LABEL_405;
        v132 = v123[8];
        if (v132)
        {
          v133 = *(unsigned __int8 *)(v132 + 18);
          result = swift_unknownObjectRetain();
          if (v122 <= v133)
            goto LABEL_406;
        }
        else if (!v122)
        {
          goto LABEL_406;
        }
        if (v124 && (v167 = (4 * *(_BYTE *)(v124 + 18) + 8) & 0x3C, ((v122 >> v167) & 0xF) != 0))
        {
          v184 = ((((v122 >> v167) & 0xF) - 1) << v167) | ((-15 << v167) - 1) & v122;
          result = swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRetain();
          v168 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v183, v132);
          result = swift_unknownObjectRelease_n();
          if ((v168 & 1) == 0)
            goto LABEL_411;
          v125 = v183;
        }
        v67 = v180;
        v9 = a2;
        v5 = v171;
        if (v125 != v180[11])
          goto LABEL_407;
        if (!*v171)
          goto LABEL_425;
        v53 = v184;
        result = specialized Rope._Node._prepareModify(at:)(v184, (uint64_t)v198);
        v186 = v198[0];
        v187 = v198[1];
        v188 = v198[2];
        v20 = __OFSUB__(v31, *((_QWORD *)&v198[0] + 1));
        v31 -= *((_QWORD *)&v198[0] + 1);
        if (v20)
          goto LABEL_408;
        if (__OFADD__(*((_QWORD *)&v198[0] + 1), v131))
          goto LABEL_409;
        *((_QWORD *)&v186 + 1) = *((_QWORD *)&v198[0] + 1) + v131;
        v181 = v125 + 1;
        v180[11] = v125 + 1;
        if (!v180[8])
          goto LABEL_426;
        v13 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v20 = __OFSUB__(v179--, 1);
        v7 = a3;
        if (v20)
          goto LABEL_410;
LABEL_236:
        v137 = v67[8];
        v138 = v67[11];
        *(_QWORD *)&v186 = v181;
        *((_QWORD *)&v186 + 1) = v53;
        *(_QWORD *)&v187 = v13;
        if (__OFADD__(v179, 1))
          goto LABEL_350;
        if (v181 != v138)
          goto LABEL_351;
        ++v179;
        if (v13)
        {
          v139 = v13[3 * ((v53 >> ((4 * *((_BYTE *)v13 + 18) + 8) & 0x3C)) & 0xF) + 3];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          v139 = specialized Rope._Node.subscript.getter(v53, v137);
        }
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v20 = __OFADD__(v31, v139);
        v31 += v139;
        if (v20)
          goto LABEL_352;
        if (v137)
        {
          v140 = ((-15 << ((4 * *(_BYTE *)(v137 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v137 + 18) | ((unint64_t)*(unsigned __int16 *)(v137 + 16) << ((4 * *(_BYTE *)(v137 + 18) + 8) & 0x3C));
          result = swift_unknownObjectRetain();
        }
        else
        {
          v140 = 0;
        }
        v8 = v180;
        if (v53 >= v140)
          goto LABEL_353;
        if (v13
          && (v141 = (4 * *((_BYTE *)v13 + 18) + 8) & 0x3C,
              v142 = ((v53 >> v141) & 0xF) + 1,
              v142 < *((unsigned __int16 *)v13 + 8)))
        {
          v178 = (v142 << v141) | ((-15 << v141) - 1) & v53;
          result = swift_unknownObjectRelease_n();
        }
        else
        {
          v143 = *(unsigned __int8 *)(v137 + 18);
          v144 = (4 * v143 + 8) & 0x3C;
          v183 = (v53 >> v144) & 0xF;
          if (v143)
          {
            swift_unknownObjectRetain();
            v145 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v137 + 24, &v183, (uint64_t)&v186, v137, v143);
            result = swift_unknownObjectRelease();
            if ((v145 & 1) == 0)
              goto LABEL_254;
            result = swift_unknownObjectRelease_n();
            v178 = *((_QWORD *)&v186 + 1);
          }
          else
          {
            v146 = ((v53 >> v144) & 0xF) + 1;
            if (v146 >= *(unsigned __int16 *)(v137 + 16))
            {
LABEL_254:
              if (v137)
              {
                v147 = *(unsigned __int8 *)(v137 + 18);
                v148 = *(unsigned __int16 *)(v137 + 16);
                result = swift_unknownObjectRelease_n();
                v149 = ((-15 << ((4 * v147 + 8) & 0x3C)) - 1) & v147 | (unint64_t)(v148 << ((4 * v147 + 8) & 0x3C));
              }
              else
              {
                v149 = 0;
              }
              *(_QWORD *)&v186 = v181;
              *((_QWORD *)&v186 + 1) = v149;
              v178 = v149;
              *(_QWORD *)&v187 = 0;
              goto LABEL_258;
            }
            v178 = (v146 << v144) | ((-15 << v144) - 1) & v53;
            *((_QWORD *)&v186 + 1) = v178;
            result = swift_unknownObjectRelease_n();
            *(_QWORD *)&v187 = v137;
          }
        }
LABEL_258:
        v32 = v186;
        v13 = (_QWORD *)v187;
        if (v31 >= v7)
        {
          v150 = *v5;
          if (v9 == v7)
          {
            v32 = v180[11];
            if (v150)
            {
              v151 = v180[10];
              if (v151 < v9)
                goto LABEL_380;
              v152 = v180[9];
              v153 = *(unsigned __int8 *)(v150 + 18);
              if (*(_WORD *)(v150 + 16) && v151 > a2)
              {
                if (*(_BYTE *)(v150 + 18))
                {
                  result = swift_unknownObjectRetain_n();
                  v34 = a2;
                  v154 = (_QWORD *)v150;
                  while (1)
                  {
                    v156 = *((unsigned __int16 *)v154 + 8);
                    if (!*((_WORD *)v154 + 8))
                      goto LABEL_267;
                    v157 = v154[5];
                    v158 = v34 - v157;
                    if (__OFSUB__(v34, v157))
                      goto LABEL_356;
                    if (__OFADD__(v158, 1))
                      goto LABEL_357;
                    if (v158 + 1 <= 0)
                    {
                      v156 = 0;
                    }
                    else
                    {
                      if ((_DWORD)v156 == 1)
                      {
                        v34 -= v157;
LABEL_267:
                        if (v34)
                          goto LABEL_354;
                        goto LABEL_268;
                      }
                      v159 = v154[8];
                      v20 = __OFSUB__(v158, v159);
                      v160 = v158 - v159;
                      if (v20)
                        goto LABEL_366;
                      if (__OFADD__(v160, 1))
                        goto LABEL_367;
                      if (v160 + 1 >= 1)
                      {
                        if ((_DWORD)v156 != 2)
                        {
                          v161 = v154 + 11;
                          v162 = 2;
                          while (v156 != v162)
                          {
                            v34 = v160 - *v161;
                            if (__OFSUB__(v160, *v161))
                              goto LABEL_343;
                            if (__OFADD__(v34, 1))
                              goto LABEL_344;
                            if (v34 + 1 < 1)
                            {
                              v156 = v162;
                              v34 = v160;
                              goto LABEL_268;
                            }
                            ++v162;
                            v161 += 3;
                            v160 = v34;
                            if (v156 == v162)
                              goto LABEL_267;
                          }
LABEL_342:
                          __break(1u);
LABEL_343:
                          __break(1u);
LABEL_344:
                          __break(1u);
LABEL_345:
                          __break(1u);
                          goto LABEL_346;
                        }
                        v34 = v160;
                        goto LABEL_267;
                      }
                      v156 = 1;
                      v34 = v158;
                    }
LABEL_268:
                    v155 = (4 * *((_BYTE *)v154 + 18) + 8) & 0x3C;
                    v153 = ((-15 << v155) - 1) & v153 | (v156 << v155);
                    v13 = (_QWORD *)v154[3 * v156 + 3];
                    swift_unknownObjectRetain();
                    result = swift_unknownObjectRelease();
                    v154 = v13;
                    if (!*((_BYTE *)v13 + 18))
                      goto LABEL_294;
                  }
                }
                result = swift_unknownObjectRetain_n();
                v153 = 0;
                v34 = a2;
                v13 = (_QWORD *)v150;
LABEL_294:
                v163 = *((unsigned __int16 *)v13 + 8);
                if (!*((_WORD *)v13 + 8))
                {
                  v165 = v34;
                  v7 = a3;
                  goto LABEL_305;
                }
                v164 = v13[3];
                v20 = __OFSUB__(v34, v164);
                v165 = v34 - v164;
                v7 = a3;
                if (v20)
                  goto LABEL_399;
                if (__OFADD__(v165, 1))
                  goto LABEL_400;
                if (v165 + 1 <= 0)
                {
                  v163 = 0;
                }
                else
                {
                  if ((_DWORD)v163 == 1)
                    goto LABEL_305;
                  v166 = v13[6];
                  v34 = v165 - v166;
                  if (__OFSUB__(v165, v166))
                    goto LABEL_412;
                  if (__OFADD__(v34, 1))
                    goto LABEL_413;
                  if (v34 + 1 < 1)
                  {
                    v163 = 1;
                    v34 = v165;
                  }
                  else
                  {
                    if ((_DWORD)v163 != 2)
                    {
                      v169 = v13 + 9;
                      v170 = 2;
                      while (v163 != v170)
                      {
                        v165 = v34 - *v169;
                        if (__OFSUB__(v34, *v169))
                          goto LABEL_390;
                        if (__OFADD__(v165, 1))
                          goto LABEL_391;
                        if (v165 + 1 < 1)
                        {
                          v163 = v170;
                          goto LABEL_332;
                        }
                        ++v170;
                        v169 += 3;
                        v34 = v165;
                        if (v163 == v170)
                          goto LABEL_305;
                      }
                      goto LABEL_389;
                    }
                    v165 -= v166;
LABEL_305:
                    if (v165)
                      goto LABEL_396;
                    v34 = 0;
                  }
                }
LABEL_332:
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                v33 = v153 & 0xFFFFFFFFFFFFF0FFLL | (v163 << 8);
              }
              else
              {
                v33 = ((-15 << ((4 * v153 + 8) & 0x3C)) - 1) & v153 | ((unint64_t)*(unsigned __int16 *)(v150 + 16) << ((4 * v153 + 8) & 0x3C));
                swift_unknownObjectRetain();
                v34 = 0;
                v13 = 0;
              }
              swift_unknownObjectRetain();
              v178 = v33;
              v179 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v32, v33, (uint64_t)v13, v150, v152);
              result = swift_unknownObjectRelease_n();
              v9 = a2;
              goto LABEL_53;
            }
            if (v9 > 0)
              goto LABEL_388;
            v34 = 0;
            v13 = 0;
            v178 = 0;
            v179 = 0;
LABEL_53:
            v20 = __OFSUB__(v9, v34);
            v31 = v9 - v34;
            v8 = v180;
            if (v20)
              goto LABEL_373;
          }
          else
          {
            v31 = 0;
            v178 = 0;
            v179 = 0;
            v13 = 0;
            v32 = v180[11];
            if (v150)
            {
              v13 = 0;
              v31 = v180[10];
              v179 = v180[9];
              v178 = ((-15 << ((4 * *(_BYTE *)(v150 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v150 + 18) | ((unint64_t)*(unsigned __int16 *)(v150 + 16) << ((4 * *(_BYTE *)(v150 + 18) + 8) & 0x3C));
            }
          }
        }
      }
      if (*(_BYTE *)(v35 + 18))
      {
        result = swift_unknownObjectRetain_n();
        v7 = v9;
        v4 = v35;
LABEL_73:
        v27 = *(unsigned __int16 *)(v4 + 16);
        if (!*(_WORD *)(v4 + 16))
          goto LABEL_71;
        v43 = *(_QWORD *)(v4 + 40);
        v20 = __OFSUB__(v7, v43);
        v29 = v7 - v43;
        if (v20)
          goto LABEL_340;
        if (__OFADD__(v29, 1))
          goto LABEL_341;
        if (v29 + 1 <= 0)
        {
          v27 = 0;
          goto LABEL_72;
        }
        if ((_DWORD)v27 == 1)
        {
          v7 = v29;
LABEL_71:
          if (!v7)
            goto LABEL_72;
          __break(1u);
LABEL_340:
          __break(1u);
LABEL_341:
          __break(1u);
          goto LABEL_342;
        }
        v44 = (uint64_t *)(v4 + 64);
        v45 = 1;
        while (1)
        {
          v46 = *v44;
          v44 += 3;
          v7 = v29 - v46;
          if (__OFSUB__(v29, v46))
            break;
          if (__OFADD__(v7, 1))
            goto LABEL_335;
          if (v7 + 1 < 1)
          {
            v27 = v45;
            v7 = v29;
LABEL_72:
            v42 = (4 * *(_BYTE *)(v4 + 18) + 8) & 0x3C;
            v15 = ((-15 << v42) - 1) & v15 | (v27 << v42);
            v9 = *(_QWORD *)(v4 + 24 + 24 * v27);
            swift_unknownObjectRetain();
            result = swift_unknownObjectRelease();
            v4 = v9;
            if (!*(_BYTE *)(v9 + 18))
              goto LABEL_87;
            goto LABEL_73;
          }
          ++v45;
          v29 = v7;
          if (v27 == v45)
            goto LABEL_71;
        }
        __break(1u);
LABEL_335:
        __break(1u);
LABEL_336:
        __break(1u);
LABEL_337:
        __break(1u);
LABEL_338:
        v25 = v29;
        v14 = v27;
        continue;
      }
      break;
    }
    result = swift_unknownObjectRetain_n();
    v15 = 0;
    v7 = v9;
    v9 = v35;
LABEL_87:
    v47 = *(unsigned __int16 *)(v9 + 16);
    if (!*(_WORD *)(v9 + 16))
      goto LABEL_99;
    v48 = *(_QWORD *)(v9 + 24);
    v20 = __OFSUB__(v7, v48);
    v49 = v7 - v48;
    if (v20)
      goto LABEL_386;
    if (__OFADD__(v49, 1))
      goto LABEL_387;
    if (v49 + 1 <= 0)
    {
      v47 = 0;
    }
    else
    {
      if ((_DWORD)v47 == 1)
      {
        v7 = v49;
LABEL_99:
        if (v7)
          goto LABEL_385;
        goto LABEL_100;
      }
      v50 = (uint64_t *)(v9 + 48);
      v51 = 1;
      while (1)
      {
        v52 = *v50;
        v50 += 3;
        v7 = v49 - v52;
        if (__OFSUB__(v49, v52))
          goto LABEL_362;
        if (__OFADD__(v7, 1))
          goto LABEL_363;
        if (v7 + 1 < 1)
          break;
        ++v51;
        v49 = v7;
        if (v47 == v51)
          goto LABEL_99;
      }
      v47 = v51;
      v7 = v49;
    }
LABEL_100:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v40 = v15 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
    goto LABEL_101;
  }
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  __break(1u);
LABEL_426:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  unint64_t *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  Swift::Int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  int64_t v85;
  unint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  Swift::Int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t *v102;
  unint64_t *v103;
  int64_t v104;
  char *v105;
  int64_t v106;
  __int128 *v107;
  uint64_t v108;
  __int128 *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  _BYTE v122[72];
  uint64_t v123;

  v111 = a3;
  v108 = a2;
  v3 = isStackAllocationSafe;
  v123 = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  v104 = (unint64_t)((1 << v4) + 63) >> 6;
  v5 = 8 * v104;
  v110 = isStackAllocationSafe;
  if ((v4 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v103 = (unint64_t *)swift_slowAlloc();
      bzero(v103, v5);
      v102 = 0;
      v29 = 0;
      v30 = *(_QWORD *)(v3 + 64);
      v105 = (char *)(v3 + 64);
      v31 = 1 << *(_BYTE *)(v3 + 32);
      if (v31 < 64)
        v32 = ~(-1 << v31);
      else
        v32 = -1;
      v33 = v32 & v30;
      v109 = &v118;
      v106 = (unint64_t)(v31 + 63) >> 6;
      v107 = &v113;
      while (1)
      {
        if (v33)
        {
          v36 = __clz(__rbit64(v33));
          v33 &= v33 - 1;
          v37 = v36 | (v29 << 6);
          v38 = v111;
        }
        else
        {
          v39 = v29 + 1;
          v38 = v111;
          if (__OFADD__(v29, 1))
            goto LABEL_156;
          if (v39 >= v106)
            goto LABEL_86;
          v40 = *(_QWORD *)&v105[8 * v39];
          ++v29;
          if (!v40)
          {
            v29 = v39 + 1;
            if (v39 + 1 >= v106)
              goto LABEL_86;
            v40 = *(_QWORD *)&v105[8 * v29];
            if (!v40)
            {
              v29 = v39 + 2;
              if (v39 + 2 >= v106)
                goto LABEL_86;
              v40 = *(_QWORD *)&v105[8 * v29];
              if (!v40)
              {
                v41 = v39 + 3;
                if (v41 >= v106)
                  goto LABEL_86;
                v40 = *(_QWORD *)&v105[8 * v41];
                if (!v40)
                {
                  while (1)
                  {
                    v29 = v41 + 1;
                    if (__OFADD__(v41, 1))
                      goto LABEL_159;
                    if (v29 >= v106)
                      break;
                    v40 = *(_QWORD *)&v105[8 * v29];
                    ++v41;
                    if (v40)
                      goto LABEL_67;
                  }
LABEL_86:
                  v49 = v102;
                  if (!v102)
                  {
                    v3 = MEMORY[0x1E0DEE9E0];
                    goto LABEL_152;
                  }
                  if (v102 == *(uint64_t **)(v3 + 16))
                  {
                    swift_retain();
                    goto LABEL_152;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  v75 = static _DictionaryStorage.allocate(capacity:)();
                  v76 = 0;
                  v77 = *v103;
                  v78 = v75 + 64;
                  while (1)
                  {
                    if (v77)
                    {
                      v82 = v49;
                      v83 = __clz(__rbit64(v77));
                      v77 &= v77 - 1;
                      v84 = v83 | (v76 << 6);
                    }
                    else
                    {
                      v85 = v76 + 1;
                      if (__OFADD__(v76, 1))
                        goto LABEL_160;
                      if (v85 >= v104)
                        goto LABEL_151;
                      v86 = v103[v85];
                      ++v76;
                      if (!v86)
                      {
                        v76 = v85 + 1;
                        if (v85 + 1 >= v104)
                          goto LABEL_151;
                        v86 = v103[v76];
                        if (!v86)
                        {
                          v76 = v85 + 2;
                          if (v85 + 2 >= v104)
                            goto LABEL_151;
                          v86 = v103[v76];
                          if (!v86)
                          {
                            v76 = v85 + 3;
                            if (v85 + 3 >= v104)
                              goto LABEL_151;
                            v86 = v103[v76];
                            if (!v86)
                            {
                              v87 = v85 + 4;
                              if (v87 >= v104)
                                goto LABEL_151;
                              v86 = v103[v87];
                              if (!v86)
                              {
                                while (1)
                                {
                                  v76 = v87 + 1;
                                  if (__OFADD__(v87, 1))
                                    goto LABEL_162;
                                  if (v76 >= v104)
                                    break;
                                  v86 = v103[v76];
                                  ++v87;
                                  if (v86)
                                    goto LABEL_141;
                                }
LABEL_151:
                                v3 = v75;
LABEL_152:
                                MEMORY[0x186DA9E78](v103, -1, -1);
                                goto LABEL_153;
                              }
                              v76 = v87;
                            }
                          }
                        }
                      }
LABEL_141:
                      v82 = v49;
                      v77 = (v86 - 1) & v86;
                      v84 = __clz(__rbit64(v86)) + (v76 << 6);
                    }
                    v88 = *(_QWORD *)(v3 + 56);
                    v89 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v84);
                    v91 = *v89;
                    v90 = v89[1];
                    outlined init with copy of AttributedString._AttributeValue(v88 + 72 * v84, (uint64_t)&v117);
                    v114 = v119;
                    v115 = v120;
                    v116 = v121;
                    v112 = v117;
                    v113 = v118;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    v92 = Hasher._finalize()();
                    v93 = -1 << *(_BYTE *)(v75 + 32);
                    v94 = v92 & ~v93;
                    v95 = v94 >> 6;
                    if (((-1 << v94) & ~*(_QWORD *)(v78 + 8 * (v94 >> 6))) != 0)
                    {
                      v79 = __clz(__rbit64((-1 << v94) & ~*(_QWORD *)(v78 + 8 * (v94 >> 6)))) | v94 & 0x7FFFFFFFFFFFFFC0;
                    }
                    else
                    {
                      v96 = 0;
                      v97 = (unint64_t)(63 - v93) >> 6;
                      do
                      {
                        if (++v95 == v97 && (v96 & 1) != 0)
                          goto LABEL_155;
                        v98 = v95 == v97;
                        if (v95 == v97)
                          v95 = 0;
                        v96 |= v98;
                        v99 = *(_QWORD *)(v78 + 8 * v95);
                      }
                      while (v99 == -1);
                      v79 = __clz(__rbit64(~v99)) + (v95 << 6);
                    }
                    *(_QWORD *)(v78 + ((v79 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v79;
                    v80 = (_QWORD *)(*(_QWORD *)(v75 + 48) + 16 * v79);
                    *v80 = v91;
                    v80[1] = v90;
                    v81 = *(_QWORD *)(v75 + 56) + 72 * v79;
                    *(_OWORD *)(v81 + 16) = v113;
                    *(_OWORD *)(v81 + 32) = v114;
                    *(_OWORD *)(v81 + 48) = v115;
                    *(_QWORD *)(v81 + 64) = v116;
                    *(_OWORD *)v81 = v112;
                    ++*(_QWORD *)(v75 + 16);
                    v49 = (uint64_t *)((char *)v82 - 1);
                    v3 = v110;
                    if (v82 == (uint64_t *)1)
                      goto LABEL_151;
                  }
                }
                v29 = v41;
              }
            }
          }
LABEL_67:
          v33 = (v40 - 1) & v40;
          v37 = __clz(__rbit64(v40)) + (v29 << 6);
        }
        v42 = *(_QWORD *)(v3 + 56);
        v43 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v37);
        v44 = *v43;
        v45 = v43[1];
        outlined init with copy of AttributedString._AttributeValue(v42 + 72 * v37, (uint64_t)v122);
        *(_QWORD *)&v117 = v44;
        *((_QWORD *)&v117 + 1) = v45;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v122, (uint64_t)v109);
        *(_QWORD *)&v112 = v44;
        *((_QWORD *)&v112 + 1) = v45;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v109, (uint64_t)v107);
        v47 = *((_QWORD *)&v115 + 1);
        v46 = v116;
        swift_bridgeObjectRetain_n();
        outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v107);
        if (!v46)
          break;
        if (v46 == 1)
        {
          swift_bridgeObjectRetain();
          outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined consume of AttributedString.AttributeRunBoundaries?(v47, 1);
          if (v38 == 1)
            goto LABEL_82;
          v34 = v108;
          v35 = v38;
LABEL_51:
          outlined consume of AttributedString.AttributeRunBoundaries?(v34, v35);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
          swift_bridgeObjectRelease();
          v3 = v110;
        }
        else
        {
          if (!v38)
          {
LABEL_50:
            outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
            swift_bridgeObjectRetain();
            outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
            outlined consume of AttributedString.AttributeRunBoundaries?(v47, v46);
            v34 = v47;
            v35 = v46;
            goto LABEL_51;
          }
          if (v47 == v108 && v46 == v38)
            v48 = 1;
          else
            v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
          swift_bridgeObjectRetain();
          outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined consume of AttributedString.AttributeRunBoundaries?(v47, v46);
          outlined consume of AttributedString.AttributeRunBoundaries?(v47, v46);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
          swift_bridgeObjectRelease();
          v3 = v110;
          if ((v48 & 1) != 0)
          {
LABEL_83:
            *(unint64_t *)((char *)v103 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
            v27 = __OFADD__(v102, 1);
            v102 = (uint64_t *)((char *)v102 + 1);
            if (v27)
            {
              __break(1u);
              goto LABEL_86;
            }
          }
        }
      }
      if (v38)
        goto LABEL_50;
      swift_bridgeObjectRelease_n();
      outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined consume of AttributedString.AttributeRunBoundaries?(v47, 0);
      outlined consume of AttributedString.AttributeRunBoundaries?(v47, 0);
LABEL_82:
      outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
      swift_bridgeObjectRelease();
      v3 = v110;
      goto LABEL_83;
    }
  }
  v102 = &v101;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v105 = (char *)&v101 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0);
  bzero(v105, v5);
  v103 = 0;
  v6 = 0;
  v7 = *(_QWORD *)(v3 + 64);
  v106 = v3 + 64;
  v8 = 1 << *(_BYTE *)(v3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v107 = (__int128 *)((unint64_t)(v8 + 63) >> 6);
  v109 = &v118;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v6 << 6);
      v15 = v111;
      goto LABEL_24;
    }
    v16 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_154;
    v15 = v111;
    if (v16 >= (uint64_t)v107)
      goto LABEL_42;
    v17 = *(_QWORD *)(v106 + 8 * v16);
    ++v6;
    if (!v17)
    {
      v6 = v16 + 1;
      if (v16 + 1 >= (uint64_t)v107)
        goto LABEL_42;
      v17 = *(_QWORD *)(v106 + 8 * v6);
      if (!v17)
      {
        v6 = v16 + 2;
        if (v16 + 2 >= (uint64_t)v107)
          goto LABEL_42;
        v17 = *(_QWORD *)(v106 + 8 * v6);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v10 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_24:
    v19 = *(_QWORD *)(v3 + 56);
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v14);
    v21 = *v20;
    v22 = v20[1];
    outlined init with copy of AttributedString._AttributeValue(v19 + 72 * v14, (uint64_t)v122);
    *(_QWORD *)&v117 = v21;
    *((_QWORD *)&v117 + 1) = v22;
    v23 = (uint64_t)v109;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v122, (uint64_t)v109);
    *(_QWORD *)&v112 = v21;
    *((_QWORD *)&v112 + 1) = v22;
    outlined init with copy of AttributedString._AttributeValue(v23, (uint64_t)&v113);
    v24 = *((_QWORD *)&v115 + 1);
    v25 = v116;
    swift_bridgeObjectRetain_n();
    outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v113);
    if (!v25)
    {
      if (v15)
        goto LABEL_6;
      swift_bridgeObjectRelease_n();
      outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, 0);
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, 0);
LABEL_38:
      outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
      swift_bridgeObjectRelease();
      v3 = v110;
      goto LABEL_39;
    }
    if (v25 == 1)
    {
      swift_bridgeObjectRetain();
      outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, 1);
      if (v15 == 1)
        goto LABEL_38;
      v11 = v108;
      v12 = v15;
LABEL_7:
      outlined consume of AttributedString.AttributeRunBoundaries?(v11, v12);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
      swift_bridgeObjectRelease();
      v3 = v110;
    }
    else
    {
      if (!v15)
      {
LABEL_6:
        outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
        outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
        swift_bridgeObjectRelease();
        outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
        outlined consume of AttributedString.AttributeRunBoundaries?(v24, v25);
        v11 = v24;
        v12 = v25;
        goto LABEL_7;
      }
      if (v24 == v108 && v25 == v15)
        v26 = 1;
      else
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
      outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, v25);
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, v25);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
      swift_bridgeObjectRelease();
      v3 = v110;
      if ((v26 & 1) != 0)
      {
LABEL_39:
        *(_QWORD *)&v105[(v14 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v14;
        v27 = __OFADD__(v103, 1);
        v103 = (unint64_t *)((char *)v103 + 1);
        if (v27)
        {
          __break(1u);
          goto LABEL_42;
        }
      }
    }
  }
  v18 = v16 + 3;
  if (v18 >= (uint64_t)v107)
    goto LABEL_42;
  v17 = *(_QWORD *)(v106 + 8 * v18);
  if (v17)
  {
    v6 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v6 = v18 + 1;
    if (__OFADD__(v18, 1))
      goto LABEL_157;
    if (v6 >= (uint64_t)v107)
      break;
    v17 = *(_QWORD *)(v106 + 8 * v6);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_42:
  v28 = v103;
  if (v103)
  {
    if (v103 != *(unint64_t **)(v3 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
      v50 = static _DictionaryStorage.allocate(capacity:)();
      v51 = 0;
      v52 = *(_QWORD *)v105;
      v53 = v50 + 64;
      while (1)
      {
        if (v52)
        {
          v57 = v28;
          v58 = __clz(__rbit64(v52));
          v52 &= v52 - 1;
          v59 = v58 | (v51 << 6);
        }
        else
        {
          v60 = v51 + 1;
          if (__OFADD__(v51, 1))
            goto LABEL_158;
          if (v60 >= v104)
          {
LABEL_119:
            v3 = v50;
            goto LABEL_153;
          }
          v61 = *(_QWORD *)&v105[8 * v60];
          ++v51;
          if (!v61)
          {
            v51 = v60 + 1;
            if (v60 + 1 >= v104)
              goto LABEL_119;
            v61 = *(_QWORD *)&v105[8 * v51];
            if (!v61)
            {
              v51 = v60 + 2;
              if (v60 + 2 >= v104)
                goto LABEL_119;
              v61 = *(_QWORD *)&v105[8 * v51];
              if (!v61)
              {
                v51 = v60 + 3;
                if (v60 + 3 >= v104)
                  goto LABEL_119;
                v61 = *(_QWORD *)&v105[8 * v51];
                if (!v61)
                {
                  v62 = v60 + 4;
                  if (v62 >= v104)
                    goto LABEL_119;
                  v61 = *(_QWORD *)&v105[8 * v62];
                  if (!v61)
                  {
                    while (1)
                    {
                      v51 = v62 + 1;
                      if (__OFADD__(v62, 1))
                        break;
                      if (v51 >= v104)
                        goto LABEL_119;
                      v61 = *(_QWORD *)&v105[8 * v51];
                      ++v62;
                      if (v61)
                        goto LABEL_109;
                    }
LABEL_161:
                    __break(1u);
LABEL_162:
                    __break(1u);
                  }
                  v51 = v62;
                }
              }
            }
          }
LABEL_109:
          v57 = v28;
          v52 = (v61 - 1) & v61;
          v59 = __clz(__rbit64(v61)) + (v51 << 6);
        }
        v63 = *(_QWORD *)(v3 + 56);
        v64 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v59);
        v66 = *v64;
        v65 = v64[1];
        outlined init with copy of AttributedString._AttributeValue(v63 + 72 * v59, (uint64_t)&v117);
        v114 = v119;
        v115 = v120;
        v116 = v121;
        v112 = v117;
        v113 = v118;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v67 = Hasher._finalize()();
        v68 = -1 << *(_BYTE *)(v50 + 32);
        v69 = v67 & ~v68;
        v70 = v69 >> 6;
        if (((-1 << v69) & ~*(_QWORD *)(v53 + 8 * (v69 >> 6))) != 0)
        {
          v54 = __clz(__rbit64((-1 << v69) & ~*(_QWORD *)(v53 + 8 * (v69 >> 6)))) | v69 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_91;
        }
        v71 = 0;
        v72 = (unint64_t)(63 - v68) >> 6;
        do
        {
          if (++v70 == v72 && (v71 & 1) != 0)
          {
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
            goto LABEL_161;
          }
          v73 = v70 == v72;
          if (v70 == v72)
            v70 = 0;
          v71 |= v73;
          v74 = *(_QWORD *)(v53 + 8 * v70);
        }
        while (v74 == -1);
        v54 = __clz(__rbit64(~v74)) + (v70 << 6);
LABEL_91:
        *(_QWORD *)(v53 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v54;
        v55 = (_QWORD *)(*(_QWORD *)(v50 + 48) + 16 * v54);
        *v55 = v66;
        v55[1] = v65;
        v56 = *(_QWORD *)(v50 + 56) + 72 * v54;
        *(_OWORD *)(v56 + 16) = v113;
        *(_OWORD *)(v56 + 32) = v114;
        *(_OWORD *)(v56 + 48) = v115;
        *(_QWORD *)(v56 + 64) = v116;
        *(_OWORD *)v56 = v112;
        ++*(_QWORD *)(v50 + 16);
        v28 = (unint64_t *)((char *)v57 - 1);
        v3 = v110;
        if (v57 == (unint64_t *)1)
          goto LABEL_119;
      }
    }
    swift_retain();
  }
  else
  {
    v3 = MEMORY[0x1E0DEE9E0];
  }
LABEL_153:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized AttributedString._AttributeStorage.matchStyle(of:for:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t i;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t *v52;
  _BYTE v53[40];
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v4 = *a2;
  v5 = a2[1];
  v6 = *v2;
  v49 = *v2 + 64;
  v7 = 1 << *(_BYTE *)(*v2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(*v2 + 64);
  v50 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v48 = 0;
  v11 = 0;
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v11 << 6);
LABEL_25:
    v18 = (unint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *v52;
    if (*(_QWORD *)(*v52 + 16))
    {
      swift_bridgeObjectRetain_n();
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
      if ((v23 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(v21 + 56) + 72 * v22, (uint64_t)&v56);
      }
      else
      {
        v60 = 0;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v57 + 1))
      {
LABEL_4:
        outlined destroy of Any?((uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        v12 = 0;
LABEL_5:
        swift_bridgeObjectRetain();
        outlined consume of AttributedString.AttributeRunBoundaries?(v12, 1);
        outlined consume of AttributedString.AttributeRunBoundaries?(v4, v5);
        goto LABEL_6;
      }
    }
    else
    {
      v60 = 0;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      swift_bridgeObjectRetain();
      if (!*((_QWORD *)&v57 + 1))
        goto LABEL_4;
    }
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v56, (uint64_t)v53);
    outlined destroy of Any?((uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
    v12 = v54;
    v24 = v55;
    outlined copy of AttributedString.AttributeRunBoundaries?(v54, v55);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v53);
    if (v24)
    {
      if (v24 == 1)
        goto LABEL_5;
      if (!v5)
        goto LABEL_39;
      if (v12 == v4 && v24 == v5)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0)
          goto LABEL_6;
      }
LABEL_42:
      if (!*(_QWORD *)(a1 + 16))
      {
        v60 = 0;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        goto LABEL_49;
      }
      swift_bridgeObjectRetain();
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
      if ((v27 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v26, (uint64_t)&v56);
      }
      else
      {
        v60 = 0;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v57 + 1))
      {
        outlined destroy of Any?((uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_6:
        result = swift_bridgeObjectRelease();
      }
      else
      {
LABEL_49:
        outlined destroy of Any?((uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
        v60 = 0;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v56, v20, v19);
        result = swift_bridgeObjectRelease();
        v48 = 1;
      }
    }
    else
    {
      if (!v5)
      {
        swift_bridgeObjectRelease_n();
        outlined consume of AttributedString.AttributeRunBoundaries?(v12, 0);
        goto LABEL_42;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
  }
  v15 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_101;
  }
  if (v15 >= v50)
    goto LABEL_50;
  v16 = *(_QWORD *)(v49 + 8 * v15);
  ++v11;
  if (v16)
    goto LABEL_24;
  v11 = v15 + 1;
  if (v15 + 1 >= v50)
    goto LABEL_50;
  v16 = *(_QWORD *)(v49 + 8 * v11);
  if (v16)
    goto LABEL_24;
  v11 = v15 + 2;
  if (v15 + 2 >= v50)
    goto LABEL_50;
  v16 = *(_QWORD *)(v49 + 8 * v11);
  if (v16)
    goto LABEL_24;
  v11 = v15 + 3;
  if (v15 + 3 >= v50)
    goto LABEL_50;
  v16 = *(_QWORD *)(v49 + 8 * v11);
  if (v16)
    goto LABEL_24;
  v17 = v15 + 4;
  if (v17 >= v50)
  {
LABEL_50:
    swift_release();
    v28 = a1 + 64;
    v29 = 1 << *(_BYTE *)(a1 + 32);
    v30 = -1;
    if (v29 < 64)
      v30 = ~(-1 << v29);
    v31 = v30 & *(_QWORD *)(a1 + 64);
    v51 = (unint64_t)(v29 + 63) >> 6;
    result = swift_bridgeObjectRetain();
    v32 = 0;
    if (v31)
      goto LABEL_58;
LABEL_59:
    v36 = v32 + 1;
    if (!__OFADD__(v32, 1))
    {
      if (v36 < v51)
      {
        v37 = *(_QWORD *)(v28 + 8 * v36);
        ++v32;
        if (v37)
          goto LABEL_74;
        v32 = v36 + 1;
        if (v36 + 1 >= v51)
          goto LABEL_99;
        v37 = *(_QWORD *)(v28 + 8 * v32);
        if (v37)
          goto LABEL_74;
        v32 = v36 + 2;
        if (v36 + 2 >= v51)
          goto LABEL_99;
        v37 = *(_QWORD *)(v28 + 8 * v32);
        if (v37)
          goto LABEL_74;
        v32 = v36 + 3;
        if (v36 + 3 >= v51)
          goto LABEL_99;
        v37 = *(_QWORD *)(v28 + 8 * v32);
        if (v37)
        {
LABEL_74:
          v31 = (v37 - 1) & v37;
          for (i = __clz(__rbit64(v37)) + (v32 << 6); ; i = v34 | (v32 << 6))
          {
            v39 = (unint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
            v40 = v39[1];
            if (!*(_QWORD *)(a1 + 16))
            {
              v60 = 0;
              v58 = 0u;
              v59 = 0u;
              v56 = 0u;
              v57 = 0u;
              swift_bridgeObjectRetain();
LABEL_55:
              outlined destroy of Any?((uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for AttributedString._AttributeValue?);
              v33 = 0;
LABEL_56:
              swift_bridgeObjectRetain();
              outlined consume of AttributedString.AttributeRunBoundaries?(v33, 1);
              outlined consume of AttributedString.AttributeRunBoundaries?(v4, v5);
LABEL_57:
              result = swift_bridgeObjectRelease();
              if (!v31)
                goto LABEL_59;
              goto LABEL_58;
            }
            v41 = *v39;
            swift_bridgeObjectRetain_n();
            v42 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v40);
            if ((v43 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v42, (uint64_t)&v56);
            }
            else
            {
              v60 = 0;
              v58 = 0u;
              v59 = 0u;
              v56 = 0u;
              v57 = 0u;
            }
            swift_bridgeObjectRelease();
            if (!*((_QWORD *)&v57 + 1))
              goto LABEL_55;
            v33 = *((_QWORD *)&v58 + 1);
            v44 = v59;
            outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v58 + 1), v59);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v56);
            if (!v44)
              break;
            if (v44 == 1)
              goto LABEL_56;
            if (!v5)
            {
LABEL_88:
              swift_bridgeObjectRelease();
              goto LABEL_57;
            }
            if (v33 != v4 || v44 != v5)
            {
              v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v45 & 1) == 0)
                goto LABEL_57;
              goto LABEL_90;
            }
            swift_bridgeObjectRelease();
            if (!*(_QWORD *)(a1 + 16))
            {
LABEL_96:
              v60 = 0;
              v58 = 0u;
              v59 = 0u;
              v56 = 0u;
              v57 = 0u;
              goto LABEL_97;
            }
LABEL_91:
            swift_bridgeObjectRetain();
            v46 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v40);
            if ((v47 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v46, (uint64_t)&v56);
            }
            else
            {
              v60 = 0;
              v58 = 0u;
              v59 = 0u;
              v56 = 0u;
              v57 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_97:
            specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v56, v41, v40);
            result = swift_bridgeObjectRelease();
            v48 = 1;
            if (!v31)
              goto LABEL_59;
LABEL_58:
            v34 = __clz(__rbit64(v31));
            v31 &= v31 - 1;
          }
          if (v5)
            goto LABEL_88;
          swift_bridgeObjectRelease_n();
          outlined consume of AttributedString.AttributeRunBoundaries?(v33, 0);
LABEL_90:
          if (!*(_QWORD *)(a1 + 16))
            goto LABEL_96;
          goto LABEL_91;
        }
        v38 = v36 + 4;
        if (v38 < v51)
        {
          v37 = *(_QWORD *)(v28 + 8 * v38);
          if (!v37)
          {
            while (1)
            {
              v32 = v38 + 1;
              if (__OFADD__(v38, 1))
                goto LABEL_103;
              if (v32 >= v51)
                goto LABEL_99;
              v37 = *(_QWORD *)(v28 + 8 * v32);
              ++v38;
              if (v37)
                goto LABEL_74;
            }
          }
          v32 = v38;
          goto LABEL_74;
        }
      }
LABEL_99:
      swift_release();
      return v48 & 1;
    }
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  v16 = *(_QWORD *)(v49 + 8 * v17);
  if (v16)
  {
    v11 = v17;
LABEL_24:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v50)
      goto LABEL_50;
    v16 = *(_QWORD *)(v49 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_24;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
  return result;
}

uint64_t outlined consume of AttributedString.AttributeRunBoundaries?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined copy of AttributedString.AttributeRunBoundaries?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

id static Locale._canonicalLocaleIdentifier(from:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = *MEMORY[0x1E0C9AE30];
  v5 = String._bridgeToObjectiveCImpl()();
  v6 = (void *)a3(v4, v5);
  swift_unknownObjectRelease();
  if (!v6)
    return 0;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  return v7;
}

unint64_t lazy protocol witness table accessor for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher;
  if (!lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher)
  {
    v1 = type metadata accessor for NSTimer.TimerPublisher();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSTimer.TimerPublisher, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher);
  }
  return result;
}

uint64_t type metadata accessor for NSTimer.TimerPublisher()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for NSDecimal.FormatStyle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t DateComponents.year.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 48) = v3;
  *(_BYTE *)(v2 + 56) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t DateComponents.hour.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) == 0 && result == 0x7FFFFFFFFFFFFFFFLL)
    v3 = 0;
  else
    v3 = result;
  *(_QWORD *)(v2 + 112) = v3;
  *(_BYTE *)(v2 + 120) = a2 & 1 | (result == 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs(_QWORD *a1, __int128 *a2))(void **a1)
{
  _QWORD *v4;

  v4 = malloc(0x58uLL);
  *a1 = v4;
  AttributedString.Runs.subscript.getter(a2, v4);
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs;
}

__int128 *AttributedString.Runs.subscript.getter@<X0>(__int128 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[4];
  _OWORD v49[4];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v4 = *result;
  v5 = result[1];
  v6 = result[2];
  v7 = result[3];
  v8 = *(_OWORD *)(v2 + 176);
  v56 = *(_OWORD *)(v2 + 160);
  v57 = v8;
  v58 = *(_QWORD *)(v2 + 192);
  v9 = *(_OWORD *)(v2 + 112);
  v52 = *(_OWORD *)(v2 + 96);
  v53 = v9;
  v10 = *(_OWORD *)(v2 + 144);
  v54 = *(_OWORD *)(v2 + 128);
  v55 = v10;
  v11 = *(_OWORD *)(v2 + 48);
  v49[2] = *(_OWORD *)(v2 + 32);
  v49[3] = v11;
  v12 = *(_OWORD *)(v2 + 80);
  v50 = *(_OWORD *)(v2 + 64);
  v51 = v12;
  v13 = *(_OWORD *)(v2 + 16);
  v49[0] = *(_OWORD *)v2;
  v49[1] = v13;
  if ((uint64_t)v4 < *((uint64_t *)&v49[0] + 1) || (uint64_t)v4 >= *((uint64_t *)&v50 + 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  v48[0] = v4;
  v48[1] = v5;
  v48[2] = v6;
  v48[3] = v7;
  result = (__int128 *)AttributedString.Runs._resolve(_:)((uint64_t *)v48, (uint64_t *)&v42);
  v14 = *(_OWORD **)&v49[0];
  if ((_QWORD)v42 != *(_QWORD *)(*(_QWORD *)&v49[0] + 88))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v15 = *((_QWORD *)&v42 + 1);
  v17 = *((_QWORD *)&v44 + 1);
  v16 = v45;
  v18 = v46;
  v19 = v47;
  if ((_QWORD)v43)
  {
    v20 = (_QWORD *)(v43 + 24 * ((*((_QWORD *)&v42 + 1) >> ((4 * *(_BYTE *)(v43 + 18) + 8) & 0x3C)) & 0xFLL));
    v21 = v20[3];
    v22 = v20[4];
    v23 = v20[5];
    outlined retain of AttributedString.Runs((uint64_t)v49);
    v41 = v22;
    swift_bridgeObjectRetain();
    v40 = v23;
    result = (__int128 *)swift_bridgeObjectRetain();
  }
  else
  {
    v24 = *(_QWORD *)(*(_QWORD *)&v49[0] + 64);
    outlined retain of AttributedString.Runs((uint64_t)v49);
    swift_unknownObjectRetain();
    v21 = specialized Rope._Node.subscript.getter(v15, v24);
    v40 = v26;
    v41 = v25;
    result = (__int128 *)swift_unknownObjectRelease();
  }
  if (*((_QWORD *)&v54 + 1) >> 10 >= v17 >> 10)
    v27 = *((_QWORD *)&v54 + 1);
  else
    v27 = v17;
  if (*((_QWORD *)&v54 + 1) >> 10 >= v17 >> 10)
    v28 = v55;
  else
    v28 = v16;
  if (*((_QWORD *)&v54 + 1) >> 10 >= v17 >> 10)
    v29 = *((_QWORD *)&v55 + 1);
  else
    v29 = v18;
  if (*((_QWORD *)&v54 + 1) >> 10 >= v17 >> 10)
    v30 = v56;
  else
    v30 = v19;
  if (__OFADD__(v21, v17 >> 11))
    goto LABEL_28;
  if (*((_QWORD *)&v56 + 1) >> 11 >= (int64_t)(v21 + (v17 >> 11)))
    v31 = v21 + (v17 >> 11);
  else
    v31 = *((_QWORD *)&v56 + 1) >> 11;
  v32 = v14[2];
  v42 = v14[1];
  v43 = v32;
  v44 = v14[3];
  result = (__int128 *)BigString.utf8.getter();
  if (__OFSUB__(v31, v27 >> 11))
    goto LABEL_29;
  v33 = BigString.UTF8View.index(_:offsetBy:)();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  result = (__int128 *)outlined release of Locale((uint64_t)v48);
  if (v33 >> 10 >= v27 >> 10)
  {
    *a2 = v41;
    a2[1] = v40;
    a2[2] = v27;
    a2[3] = v28;
    a2[4] = v29;
    a2[5] = v30;
    a2[6] = v33;
    a2[7] = v35;
    a2[8] = v37;
    a2[9] = v39;
    a2[10] = v14;
    return result;
  }
LABEL_30:
  __break(1u);
  return result;
}

os_log_t ___initFCLoggers_block_invoke()
{
  os_log_t result;

  qword_1ECD0A6F8 = (uint64_t)os_log_create("com.apple.foundation.filecoordination", "general");
  qword_1ECD0A700 = (uint64_t)os_log_create("com.apple.foundation.filecoordination", "claims");
  qword_1ECD0A708 = (uint64_t)os_log_create("com.apple.foundation.filecoordination", "presenter");
  qword_1ECD0A710 = (uint64_t)os_log_create("com.apple.foundation.filecoordination", "provider");
  qword_1ECD0A718 = (uint64_t)os_log_create("com.apple.foundation.filecoordination", "process-monitor");
  result = os_log_create("com.apple.foundation.filecoordination", "fsevents");
  qword_1ECD0A720 = (uint64_t)result;
  return result;
}

void static Duration.UnitsFormatStyle.Unit.milliseconds.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

double NSRunLoop.SchedulerTimeType.init(_:)@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double protocol witness for static SchedulerTimeIntervalConvertible.seconds(_:) in conformance NSRunLoop.SchedulerTimeType.Stride@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = (double)a1;
  *a2 = (double)a1;
  return result;
}

id IndexSet.last.getter()
{
  return IndexSet.first.getter((SEL *)&selRef_lastIndex);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in IndexPath()
{
  return MEMORY[0x1E0DEB430];
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in Data()
{
  return &protocol witness table for Data;
}

void PredicateExpressions.Comparison.op.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void static ByteCountFormatStyle.Units.all.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xFFFFLL;
}

uint64_t URLResourceValues.creationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x1E0C998E8], a1);
}

uint64_t URLResourceValues.isDirectory.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E0C999D0]);
}

uint64_t assignWithTake for Measurement(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t (*PropertyListEncoder.userInfo.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 32);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *a1 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  return PropertyListEncoder.userInfo.modify;
}

void _compatEncodeValueOfObjCType(objc_class *a1, uint64_t a2, double *a3, const char *a4)
{
  NSString *v6;
  unint64_t v7;
  NSString *v8;
  __CFString *v9;
  unint64_t v10;
  NSString *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  NSString *v15;
  int v16;
  unint64_t v17;
  NSString *v18;
  unint64_t v19;
  NSString *v20;
  unint64_t v21;
  NSString *v22;
  unint64_t v23;
  NSString *v24;
  unint64_t v25;
  NSString *v26;
  NSString *v27;
  unint64_t v28;
  NSString *v29;
  NSString *v30;
  void *v31;
  uint64_t v32;
  const void **v33;
  void *v34;
  NSString *value;

  if ((int)a2 > 80)
  {
    switch((int)a2)
    {
      case 'c':
LABEL_7:
        v10 = *((_QWORD *)a1 + 11);
        *((_QWORD *)a1 + 11) = v10 + 1;
        if (v10 > 0x27)
          v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v10);
        else
          v11 = (NSString *)generic_keys[v10];
        v16 = *(char *)a3;
        goto LABEL_42;
      case 'd':
        v21 = *((_QWORD *)a1 + 11);
        *((_QWORD *)a1 + 11) = v21 + 1;
        if (v21 > 0x27)
          v22 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v21);
        else
          v22 = (NSString *)generic_keys[v21];
        _encodeDouble((uint64_t)a1, v22, *a3);
        return;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_64;
      case 'f':
        v23 = *((_QWORD *)a1 + 11);
        *((_QWORD *)a1 + 11) = v23 + 1;
        if (v23 > 0x27)
          v24 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v23);
        else
          v24 = (NSString *)generic_keys[v23];
        _encodeFloat((uint64_t)a1, v24, *(float *)a3);
        return;
      case 'i':
      case 'l':
LABEL_19:
        v13 = *((_QWORD *)a1 + 11);
        *((_QWORD *)a1 + 11) = v13 + 1;
        if (v13 > 0x27)
          v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v13);
        else
          v11 = (NSString *)generic_keys[v13];
        v16 = *(_DWORD *)a3;
        goto LABEL_42;
      case 'q':
        goto LABEL_21;
      case 's':
        goto LABEL_15;
      default:
        if ((_DWORD)a2 == 81)
        {
LABEL_21:
          v14 = *((_QWORD *)a1 + 11);
          *((_QWORD *)a1 + 11) = v14 + 1;
          if (v14 > 0x27)
            v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v14);
          else
            v15 = (NSString *)generic_keys[v14];
          _encodeInt64((uint64_t)a1, v15, *(_QWORD *)a3);
        }
        else
        {
          if ((_DWORD)a2 != 83)
            goto LABEL_64;
LABEL_15:
          v12 = *((_QWORD *)a1 + 11);
          *((_QWORD *)a1 + 11) = v12 + 1;
          if (v12 > 0x27)
            v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v12);
          else
            v11 = (NSString *)generic_keys[v12];
          v16 = *(__int16 *)a3;
LABEL_42:
          _encodeInt32((uint64_t)a1, v11, v16);
        }
        break;
    }
  }
  else
  {
    if ((int)a2 > 57)
    {
      switch((int)a2)
      {
        case ':':
          v6 = NSCopyStringFromSelector(*(const char **)a3);
          v7 = *((_QWORD *)a1 + 11);
          *((_QWORD *)a1 + 11) = v7 + 1;
          value = v6;
          if (v7 > 0x27)
          {
            v30 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v7);
            v8 = value;
            v9 = (__CFString *)v30;
          }
          else
          {
            v8 = v6;
            v9 = generic_keys[v7];
          }
          _encodeObject((uint64_t)a1, v9, v8, 0);

          return;
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
          goto LABEL_64;
        case '@':
          v17 = *((_QWORD *)a1 + 11);
          *((_QWORD *)a1 + 11) = v17 + 1;
          if (v17 > 0x27)
            v18 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v17);
          else
            v18 = (NSString *)generic_keys[v17];
          v31 = *(void **)a3;
          v32 = (uint64_t)a1;
          goto LABEL_63;
        case 'B':
          v19 = *((_QWORD *)a1 + 11);
          *((_QWORD *)a1 + 11) = v19 + 1;
          if (v19 > 0x27)
            v20 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v19);
          else
            v20 = (NSString *)generic_keys[v19];
          if (*(_BYTE *)a3)
            v33 = (const void **)MEMORY[0x1E0C9AE50];
          else
            v33 = (const void **)MEMORY[0x1E0C9AE40];
          addValueToTopContainerE((uint64_t)a1, v20, *v33);
          return;
        case 'C':
          goto LABEL_7;
        default:
          if ((_DWORD)a2 == 73 || (_DWORD)a2 == 76)
            goto LABEL_19;
          goto LABEL_64;
      }
    }
    if ((_DWORD)a2 == 35)
    {
      _NSCoderCheckPotentiallyMangledClassNameAndWarn(*(_QWORD *)a3, 1);
      v25 = *((_QWORD *)a1 + 11);
      *((_QWORD *)a1 + 11) = v25 + 1;
      if (v25 > 0x27)
        v26 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v25);
      else
        v26 = (NSString *)generic_keys[v25];
      v29 = NSStringFromClass(*(Class *)a3);
    }
    else
    {
      if ((_DWORD)a2 == 37)
      {
        v27 = _NSMethodExceptionProem(a1, a4);
        NSLog((NSString *)CFSTR("%@: warning: NXAtom being encoded -- will not be decoded uniqued"), v27);
      }
      else if ((_DWORD)a2 != 42)
      {
LABEL_64:
        v34 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@: unknown type encoding ('%c')"), _NSMethodExceptionProem(a1, a4), a2), 0);
        objc_exception_throw(v34);
      }
      v28 = *((_QWORD *)a1 + 11);
      *((_QWORD *)a1 + 11) = v28 + 1;
      if (v28 > 0x27)
        v26 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$%ld"), v28);
      else
        v26 = (NSString *)generic_keys[v28];
      v29 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)a3);
    }
    v31 = v29;
    v32 = (uint64_t)a1;
    v18 = v26;
LABEL_63:
    _encodeObject(v32, v18, v31, 0);
  }
}

uint64_t type metadata completion function for PredicateExpressions.NotEqual()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t PropertyListEncoder.userInfo.modify(_QWORD *a1)
{
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)a1[2];
  *(_QWORD *)(a1[1] + 24) = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_bridgeObjectRelease();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet and conformance IndexSet;
  if (!lazy protocol witness table cache variable for type IndexSet and conformance IndexSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet, &type metadata for IndexSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet);
  }
  return result;
}

uint64_t PredicateExpressions.Comparison.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 64));
}

BOOL specialized static NumberFormatStyleConfiguration.Precision.Option.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v15;
  char v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;

  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a1, &v25);
  v3 = v31;
  if ((v31 & 0x80) == 0)
  {
    v4 = v25;
    v5 = v26;
    outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a2, &v18);
    if (v24 < 0 || (_QWORD)v4 != (_QWORD)v18)
      return 0;
    v6 = v19;
    if ((v5 & 1) != 0)
      return (v6 & 1) != 0;
    if (*((_QWORD *)&v4 + 1) != *((_QWORD *)&v18 + 1))
      v6 = 1;
    return (v6 & 1) == 0;
  }
  v31 &= ~0x80u;
  v7 = v25;
  v8 = BYTE8(v25);
  v9 = v26;
  v10 = v27;
  v11 = v28;
  v12 = v29;
  v13 = v30;
  outlined init with take of NumberFormatStyleConfiguration.Precision.Option(a2, &v18);
  v6 = v24;
  if ((v24 & 0x80) == 0)
    return 0;
  v15 = BYTE8(v18);
  v16 = v20;
  v17 = v22;
  if ((v8 & 1) != 0)
  {
    if (!BYTE8(v18))
      return 0;
  }
  else
  {
    if (v7 != (_QWORD)v18)
      v15 = 1;
    if ((v15 & 1) != 0)
      return 0;
  }
  if ((v10 & 1) != 0)
  {
    if (!v20)
      return 0;
  }
  else
  {
    if (v9 != v19)
      v16 = 1;
    if ((v16 & 1) != 0)
      return 0;
  }
  if ((v12 & 1) != 0)
  {
    if (!v22)
      return 0;
  }
  else
  {
    if (v11 != v21)
      v17 = 1;
    if ((v17 & 1) != 0)
      return 0;
  }
  if ((v3 & 1) == 0)
    return (v24 & 1) == 0 && v13 == v23;
  return (v6 & 1) != 0;
}

_OWORD *outlined init with take of NumberFormatStyleConfiguration.Precision.Option(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_OWORD *)((char *)a2 + 41) = *(__int128 *)((char *)a1 + 41);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

_QWORD *protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(int64_t a1, uint64_t a2, float a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

_QWORD *_JSONKeyedEncodingContainer.encode(_:forKey:)(int64_t a1, uint64_t a2, float a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(char *, int64_t, uint64_t, __n128);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *, int64_t, uint64_t);
  unint64_t v22;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t *v64;
  int64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68[5];
  __int128 v69[3];

  v7 = *(_QWORD *)(a2 + 16);
  v66 = (_QWORD *)type metadata accessor for Optional();
  v8 = *(v66 - 1);
  v9 = MEMORY[0x1E0C80A78](v66);
  v11 = (uint64_t)&v63 - v10;
  v64 = v3;
  v65 = a1;
  v12 = *v3;
  v13 = *(_QWORD *)(*v3 + 144);
  v14 = *(_QWORD *)(v7 - 8);
  v15 = *(void (**)(char *, int64_t, uint64_t, __n128))(v14 + 16);
  v15((char *)&v63 - v10, a1, v7, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v7);
  outlined init with take of JSONEncoder.NonConformingFloatEncodingStrategy((__int128 *)(v12 + 72), v69);
  swift_retain();
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = v67;
  v18 = specialized static JSONReference.number<A, B>(from:with:for:_:)(v69, v13, v11, v7, v16, a3);
  if (v17)
  {
    outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
    (*(void (**)(uint64_t, _QWORD *))(v8 + 8))(v11, v66);
    return (_QWORD *)swift_release();
  }
  v67 = v18;
  outlined retain of JSONEncoder.NonConformingFloatEncodingStrategy(v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy);
  (*(void (**)(uint64_t, _QWORD *))(v8 + 8))(v11, v66);
  swift_release();
  v20 = *v64;
  v19 = v64[1];
  v21 = (void (*)(uint64_t *, int64_t, uint64_t))v15;
  v22 = v64[2];
  v68[3] = v7;
  v68[4] = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v68);
  v21(boxed_opaque_existential_1, v65, v7);
  v24 = _JSONKeyedEncodingContainer._converted(_:)(v68, v20, v19, v22);
  v26 = v25;
  result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  if (*(_BYTE *)(v19 + 32) != 4)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v28 = *(_QWORD *)(v19 + 16);
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  *(_BYTE *)(v19 + 32) = 7;
  swift_bridgeObjectRetain();
  v29 = v67;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v68[0] = v28;
  v31 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v26);
  v33 = *(_QWORD *)(v28 + 16);
  v34 = (v32 & 1) == 0;
  v35 = __OFADD__(v33, v34);
  v36 = v33 + v34;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v11) = v32;
    if (*(_QWORD *)(v28 + 24) < v36)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
      v37 = v68[0];
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v26);
      if ((v11 & 1) == (v38 & 1))
        goto LABEL_10;
      v31 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v37 = v28;
LABEL_10:
      if ((v11 & 1) != 0)
      {
LABEL_11:
        v39 = *(_QWORD *)(v37 + 56);
        v40 = 8 * v31;
        swift_release();
        *(_QWORD *)(v39 + v40) = v67;
LABEL_49:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v60 = *(_QWORD *)(v19 + 16);
        v61 = *(_QWORD *)(v19 + 24);
        *(_QWORD *)(v19 + 16) = v37;
        *(_QWORD *)(v19 + 24) = 0;
        v62 = *(_BYTE *)(v19 + 32);
        *(_BYTE *)(v19 + 32) = 4;
        outlined consume of JSONReference.Backing(v60, v61, v62);
        swift_bridgeObjectRelease();
        return (_QWORD *)swift_release();
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v31, v24, v26, v29, v37);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
  }
  v64 = (uint64_t *)v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v41 = static _DictionaryStorage.copy(original:)();
  v37 = v41;
  v42 = *(_QWORD *)(v28 + 16);
  if (!v42)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    v31 = (unint64_t)v64;
    if ((v11 & 1) != 0)
      goto LABEL_11;
    goto LABEL_48;
  }
  result = (_QWORD *)(v41 + 64);
  v43 = 1 << *(_BYTE *)(v37 + 32);
  v66 = (_QWORD *)(v28 + 64);
  v44 = (unint64_t)(v43 + 63) >> 6;
  if (v37 != v28 || result >= &v66[v44])
  {
    result = memmove(result, v66, 8 * v44);
    v42 = *(_QWORD *)(v28 + 16);
  }
  v45 = 0;
  *(_QWORD *)(v37 + 16) = v42;
  v46 = 1 << *(_BYTE *)(v28 + 32);
  v47 = -1;
  if (v46 < 64)
    v47 = ~(-1 << v46);
  v48 = v47 & *(_QWORD *)(v28 + 64);
  v65 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    if (v48)
    {
      v49 = __clz(__rbit64(v48));
      v48 &= v48 - 1;
      v50 = v49 | (v45 << 6);
      goto LABEL_21;
    }
    v57 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    v29 = v67;
    if (v57 >= v65)
      goto LABEL_47;
    v58 = v66[v57];
    ++v45;
    if (!v58)
    {
      v45 = v57 + 1;
      if (v57 + 1 >= v65)
        goto LABEL_47;
      v58 = v66[v45];
      if (!v58)
      {
        v45 = v57 + 2;
        if (v57 + 2 >= v65)
          goto LABEL_47;
        v58 = v66[v45];
        if (!v58)
        {
          v45 = v57 + 3;
          if (v57 + 3 >= v65)
            goto LABEL_47;
          v58 = v66[v45];
          if (!v58)
          {
            v45 = v57 + 4;
            if (v57 + 4 >= v65)
              goto LABEL_47;
            v58 = v66[v45];
            if (!v58)
            {
              v45 = v57 + 5;
              if (v57 + 5 >= v65)
                goto LABEL_47;
              v58 = v66[v45];
              if (!v58)
              {
                v45 = v57 + 6;
                if (v57 + 6 >= v65)
                  goto LABEL_47;
                v58 = v66[v45];
                if (!v58)
                {
                  v45 = v57 + 7;
                  if (v57 + 7 >= v65)
                    goto LABEL_47;
                  v58 = v66[v45];
                  if (!v58)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    v48 = (v58 - 1) & v58;
    v50 = __clz(__rbit64(v58)) + (v45 << 6);
LABEL_21:
    v51 = 16 * v50;
    v52 = (_QWORD *)(*(_QWORD *)(v28 + 48) + 16 * v50);
    v53 = v52[1];
    v54 = 8 * v50;
    v55 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + v54);
    v56 = (_QWORD *)(*(_QWORD *)(v37 + 48) + v51);
    *v56 = *v52;
    v56[1] = v53;
    *(_QWORD *)(*(_QWORD *)(v37 + 56) + v54) = v55;
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_retain();
  }
  v59 = v57 + 8;
  if (v59 >= v65)
    goto LABEL_47;
  v58 = v66[v59];
  if (v58)
  {
    v45 = v59;
    goto LABEL_46;
  }
  while (1)
  {
    v45 = v59 + 1;
    if (__OFADD__(v59, 1))
      break;
    v29 = v67;
    if (v45 >= v65)
      goto LABEL_47;
    v58 = v66[v45];
    ++v59;
    if (v58)
      goto LABEL_46;
  }
LABEL_53:
  __break(1u);
  return result;
}

uint64_t destroy for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = v4 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0) + 24);
  v6 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

void base witness table accessor for Equatable in Measurement<A><>.FormatStyle()
{
  JUMPOUT(0x186DA9D64);
}

void LocalizedStringResource.init(_:table:locale:bundle:comment:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  Swift::String v20;
  unsigned __int8 v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  _QWORD v25[3];

  v9 = a1[1];
  v23 = *a1;
  v10 = a1[2];
  v24 = *a4;
  v11 = *(void **)a5;
  v12 = *(_QWORD *)(a5 + 8);
  v13 = *(_QWORD *)(a5 + 16);
  v14 = *(_BYTE *)(a5 + 24);
  swift_bridgeObjectRetain();
  LocalizedStringResource.BundleDescription.resolvedURL.getter(v25);
  outlined consume of LocalizedStringResource.BundleDescription(v11, v12, v13, v14);
  v15 = (void *)v25[0];
  v16 = v25[1];
  v17 = v25[2];
  swift_retain();
  v18 = v15;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    URL.scheme.getter();
    if (v19)
    {
      v20 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v20._countAndFlagsBits == 1701603686 && v20._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
LABEL_9:
        *(_QWORD *)a6 = v9;
        *(_QWORD *)(a6 + 8) = v10;
        *(_QWORD *)(a6 + 16) = v23;
        *(_QWORD *)(a6 + 24) = v9;
        *(_QWORD *)(a6 + 32) = v10;
        *(_QWORD *)(a6 + 40) = a2;
        *(_QWORD *)(a6 + 48) = a3;
        *(_OWORD *)(a6 + 56) = v24;
        *(_QWORD *)(a6 + 72) = v18;
        *(_QWORD *)(a6 + 80) = v16;
        *(_QWORD *)(a6 + 96) = 0;
        *(_QWORD *)(a6 + 104) = 0;
        *(_QWORD *)(a6 + 88) = v17;
        return;
      }
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      swift_release();
      swift_release();

    }
  }
  else
  {
    v21 = objc_msgSend(v18, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v21 & 1) != 0)
      goto LABEL_9;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *outlined consume of LocalizedStringResource.BundleDescription(void *result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1)
  {

    swift_release();
    return (void *)swift_release();
  }
  return result;
}

void LocalizedStringResource.BundleDescription.resolvedURL.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t ObjCClassFromMetadata;
  id v9;
  id v10;
  id v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  v3 = *(void **)v1;
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(_BYTE *)(v1 + 24) == 1)
    {
      v6 = v1 + 8;
      v5 = *(_QWORD *)(v1 + 8);
      v4 = *(_QWORD *)(v6 + 8);
      *a1 = v3;
      a1[1] = v5;
      a1[2] = v4;
      swift_retain();
      v7 = v3;
      swift_retain();
      return;
    }
  }
  else
  {
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v9 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v10 = objc_msgSend(v9, sel_bundleURL);

    if (v10)
    {
LABEL_7:
      URL.init(reference:)(v10, &v13);

      v12 = v14;
      *a1 = v13;
      *(_OWORD *)(a1 + 1) = v12;
      return;
    }
    __break(1u);
  }
  v11 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v10 = objc_msgSend(v11, sel_bundleURL);

  if (v10)
    goto LABEL_7;
  __break(1u);
}

unint64_t AttributedString.runs.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  unint64_t result;
  uint64_t v4;

  v2 = BigString.startIndex.getter();
  result = BigString.endIndex.getter();
  if (result >> 10 < v2 >> 10)
  {
    __break(1u);
  }
  else
  {
    v4 = swift_retain();
    return AttributedString.Runs.init(_:in:)(v4, a1);
  }
  return result;
}

uint64_t specialized static AttributedString.Guts.characterwiseIsEqual(_:to:)(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20[12];
  uint64_t v21;
  _OWORD v22[12];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[12];
  uint64_t v47;
  _OWORD v48[12];
  uint64_t v49;

  v3 = a1[2];
  v43 = a1[1];
  v44 = v3;
  v45 = a1[3];
  v32 = BigString.startIndex.getter();
  v33 = v4;
  v34 = v5;
  v35 = v6;
  v36 = BigString.endIndex.getter();
  v37 = v7;
  v38 = v8;
  v39 = v9;
  v10 = a2[2];
  v40 = a2[1];
  v41 = v10;
  v42 = a2[3];
  v24 = BigString.startIndex.getter();
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v28 = BigString.endIndex.getter();
  v29 = v14;
  v30 = v15;
  v31 = v16;
  v17 = swift_retain();
  AttributedString.Runs.init(_:in:)(v17, v46);
  v18 = swift_retain();
  AttributedString.Runs.init(_:in:)(v18, v48);
  v22[10] = v46[10];
  v22[11] = v46[11];
  v23 = v47;
  v22[6] = v46[6];
  v22[7] = v46[7];
  v22[8] = v46[8];
  v22[9] = v46[9];
  v22[2] = v46[2];
  v22[3] = v46[3];
  v22[4] = v46[4];
  v22[5] = v46[5];
  v22[0] = v46[0];
  v22[1] = v46[1];
  v20[10] = v48[10];
  v20[11] = v48[11];
  v21 = v49;
  v20[6] = v48[6];
  v20[7] = v48[7];
  v20[8] = v48[8];
  v20[9] = v48[9];
  v20[2] = v48[2];
  v20[3] = v48[3];
  v20[4] = v48[4];
  v20[5] = v48[5];
  v20[0] = v48[0];
  v20[1] = v48[1];
  LOBYTE(a2) = specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)((uint64_t)v22, v20);
  outlined release of AttributedString.Runs((uint64_t)v48);
  outlined release of AttributedString.Runs((uint64_t)v46);
  return a2 & 1;
}

unint64_t AttributedString.Runs.init(_:in:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105[48];
  char v106[48];
  char v107[48];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;

  v4 = *(_OWORD *)(a1 + 32);
  v114 = *(_OWORD *)(a1 + 16);
  v115 = v4;
  v116 = *(_OWORD *)(a1 + 48);
  BigString.unicodeScalars.getter();
  swift_retain();
  v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  v7 = v6;
  v9 = v8;
  v11 = v10;
  outlined release of Locale((uint64_t)v105);
  v12 = *(_OWORD *)(a1 + 32);
  v111 = *(_OWORD *)(a1 + 16);
  v112 = v12;
  v113 = *(_OWORD *)(a1 + 48);
  BigString.unicodeScalars.getter();
  v13 = BigString.UnicodeScalarView.index(roundingDown:)();
  v96 = v15;
  v97 = v14;
  v95 = v16;
  result = outlined release of Locale((uint64_t)v106);
  v18 = v13 >> 10;
  if (v13 >> 10 < v5 >> 10)
    goto LABEL_67;
  AttributedString.Guts.findRun(at:)(v5, (uint64_t *)&v99);
  v93 = *((_QWORD *)&v99 + 1);
  v94 = v99;
  v91 = *((_QWORD *)&v101 + 1);
  v92 = v100;
  v89 = v103;
  v90 = v102;
  v87 = *((_QWORD *)&v100 + 1);
  v88 = v104;
  v19 = *(_OWORD *)(a1 + 32);
  v99 = *(_OWORD *)(a1 + 16);
  v100 = v19;
  v101 = *(_OWORD *)(a1 + 48);
  v85 = v7;
  v86 = v5;
  v83 = v11;
  v84 = v9;
  v98 = v13;
  if (v18 == (unint64_t)BigString.endIndex.getter() >> 10)
  {
    if (*(_QWORD *)(a1 + 64))
      v20 = *(_QWORD *)(a1 + 72);
    else
      v20 = 0;
    v21 = *(_QWORD *)(a1 + 88);
    v22 = swift_unknownObjectRetain();
    v81 = v21;
    v79 = specialized Rope._endPath.getter(v22);
    swift_release();
    swift_unknownObjectRelease();
    result = 0;
    v23 = v13;
    v25 = v96;
    v24 = v97;
    v26 = v97;
    v27 = v96;
    v28 = v95;
    v29 = v95;
LABEL_62:
    v39 = v87;
    v31 = v88;
    v34 = v93;
    v37 = v94;
    v32 = v91;
    v35 = v92;
    v30 = v89;
    v33 = v90;
    v36 = v79;
    v38 = v81;
    if (v20 < v87)
      goto LABEL_68;
    goto LABEL_63;
  }
  result = BigString.startIndex.getter();
  if (v18 == result >> 10)
  {
    swift_release();
    v31 = v88;
    v30 = v89;
    v29 = v88;
    v27 = v89;
    v33 = v90;
    v32 = v91;
    v26 = v90;
    v23 = v91;
    v35 = v92;
    v34 = v93;
    result = v92;
    v36 = v93;
    v37 = v94;
    v28 = v95;
    v38 = v94;
    v39 = v87;
    v20 = v87;
    v25 = v96;
    v24 = v97;
LABEL_63:
    *a2 = a1;
    a2[1] = v39;
    a2[2] = v37;
    a2[3] = v34;
    a2[4] = v35;
    a2[5] = v32;
    a2[6] = v33;
    a2[7] = v30;
    a2[8] = v31;
    a2[9] = v20;
    a2[10] = v38;
    a2[11] = v36;
    a2[12] = result;
    a2[13] = v23;
    a2[14] = v26;
    a2[15] = v27;
    a2[16] = v29;
    a2[17] = v86;
    a2[18] = v85;
    a2[19] = v84;
    a2[20] = v83;
    a2[21] = v98;
    a2[22] = v24;
    a2[23] = v25;
    a2[24] = v28;
    return result;
  }
  v40 = *(_QWORD *)(a1 + 64);
  v41 = *(_QWORD *)(a1 + 80);
  if (!v40)
    v41 = 0;
  if (v13 < 0x800)
    goto LABEL_72;
  v42 = v13 >> 11;
  if (v41 < (uint64_t)((v13 >> 11) - 1))
    goto LABEL_72;
  v75 = (v13 >> 11) - 1;
  v77 = *(_QWORD *)(a1 + 72);
  v43 = *(_QWORD *)(a1 + 88);
  v82 = v43;
  if (!v40 || v42 > *(_QWORD *)(a1 + 80) || !*(_WORD *)(v40 + 16))
  {
    v56 = swift_unknownObjectRetain_n();
    v57 = specialized Rope._endPath.getter(v56);
    result = swift_unknownObjectRelease();
    v48 = 0;
    v45 = 0;
    if (!v40)
    {
      v58 = 0;
LABEL_53:
      v51 = __OFSUB__(v75, v45);
      v65 = v75 - v45;
      if (v51)
        goto LABEL_73;
      v66 = *(_QWORD *)(a1 + 64);
      v67 = *(_QWORD *)(a1 + 72);
      v80 = *(_QWORD *)(a1 + 80);
      v68 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)&v108 = v82;
      *((_QWORD *)&v108 + 1) = v57;
      *(_QWORD *)&v109 = v48;
      if (__OFADD__(v58, 1))
      {
LABEL_74:
        __break(1u);
      }
      else if (v82 == v68)
      {
        v78 = v58 + 1;
        if (v48)
        {
          v69 = *(_QWORD *)(v48 + 24 * ((v57 >> ((4 * *(_BYTE *)(v48 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          v69 = specialized Rope._Node.subscript.getter(v57, v66);
        }
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if (!__OFADD__(v65, v69))
        {
          swift_unknownObjectRetain();
          specialized Rope.formIndex(after:)(&v108, v66, v67, v80, v82);
          swift_unknownObjectRelease_n();
          v79 = *((_QWORD *)&v108 + 1);
          v81 = v108;
          v76 = v109;
          v70 = *(_OWORD *)(a1 + 32);
          v108 = *(_OWORD *)(a1 + 16);
          v109 = v70;
          v110 = *(_OWORD *)(a1 + 48);
          result = BigString.utf8.getter();
          if (!__OFSUB__(v65 + v69, v42))
          {
            v24 = v97;
            v28 = v95;
            v25 = v96;
            v23 = BigString.UTF8View.index(_:offsetBy:)();
            v26 = v71;
            v27 = v72;
            v29 = v73;
            outlined release of Locale((uint64_t)v107);
            swift_release();
            result = v76;
            v20 = v78;
            goto LABEL_62;
          }
          goto LABEL_77;
        }
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      __break(1u);
      goto LABEL_76;
    }
LABEL_35:
    swift_unknownObjectRetain();
    v58 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v43, v57, v48, v40, v77);
    result = swift_unknownObjectRelease_n();
    goto LABEL_53;
  }
  v74 = v13 >> 11;
  v44 = *(unsigned __int8 *)(v40 + 18);
  if (*(_BYTE *)(v40 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v45 = (v13 >> 11) - 1;
    v46 = v40;
    while (1)
    {
      v49 = *(unsigned __int16 *)(v46 + 16);
      if (!*(_WORD *)(v46 + 16))
        goto LABEL_19;
      v50 = *(_QWORD *)(v46 + 40);
      v51 = __OFSUB__(v45, v50);
      v52 = v45 - v50;
      if (v51)
        goto LABEL_70;
      if (__OFADD__(v52, 1))
        goto LABEL_71;
      if (v52 + 1 >= 1)
        break;
      v49 = 0;
LABEL_20:
      v47 = (4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C;
      v44 = ((-15 << v47) - 1) & v44 | (v49 << v47);
      v48 = *(_QWORD *)(v46 + 24 + 24 * v49);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v46 = v48;
      if (!*(_BYTE *)(v48 + 18))
        goto LABEL_37;
    }
    if ((_DWORD)v49 != 1)
    {
      v53 = (uint64_t *)(v46 + 64);
      v54 = 1;
      while (1)
      {
        v55 = *v53;
        v53 += 3;
        v45 = v52 - v55;
        if (__OFSUB__(v52, v55))
          break;
        if (__OFADD__(v45, 1))
          goto LABEL_66;
        if (v45 + 1 < 1)
        {
          v49 = v54;
          v45 = v52;
          goto LABEL_20;
        }
        ++v54;
        v52 = v45;
        if (v49 == v54)
          goto LABEL_19;
      }
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    v45 = v52;
LABEL_19:
    if (v45)
      goto LABEL_69;
    goto LABEL_20;
  }
  result = swift_unknownObjectRetain_n();
  v45 = (v13 >> 11) - 1;
  v48 = v40;
LABEL_37:
  v59 = *(unsigned __int16 *)(v48 + 16);
  if (*(_WORD *)(v48 + 16))
  {
    v60 = *(_QWORD *)(v48 + 24);
    v51 = __OFSUB__(v45, v60);
    v61 = v45 - v60;
    if (v51)
    {
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    if (__OFADD__(v61, 1))
    {
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    if (v61 + 1 < 1)
    {
      v59 = 0;
LABEL_51:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v57 = v44 & 0xFFFFFFFFFFFFF0FFLL | (v59 << 8);
      v42 = v74;
      goto LABEL_35;
    }
    if ((_DWORD)v59 != 1)
    {
      v62 = (uint64_t *)(v48 + 48);
      v63 = 1;
      while (1)
      {
        v64 = *v62;
        v62 += 3;
        v45 = v61 - v64;
        if (__OFSUB__(v61, v64))
          goto LABEL_78;
        if (__OFADD__(v45, 1))
          goto LABEL_79;
        if (v45 + 1 < 1)
        {
          v59 = v63;
          v45 = v61;
          goto LABEL_51;
        }
        ++v63;
        v61 = v45;
        if (v59 == v63)
          goto LABEL_50;
      }
    }
    v45 = v61;
  }
LABEL_50:
  if (!v45)
    goto LABEL_51;
LABEL_82:
  __break(1u);
  return result;
}

unint64_t AttributedString.Guts.findRun(at:)@<X0>(unint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42[48];
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v4 = *(_QWORD *)(v2 + 64);
  v5 = result >> 11;
  if (v4)
    v6 = *(_QWORD *)(v2 + 80);
  else
    v6 = 0;
  if (v6 < v5)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v7 = *(_QWORD *)(v2 + 72);
  v8 = *(_QWORD *)(v2 + 88);
  v41 = result >> 11;
  if (!v4 || (v5 < *(_QWORD *)(v2 + 80) ? (v9 = *(unsigned __int16 *)(v4 + 16) == 0) : (v9 = 1), v9))
  {
    v10 = swift_unknownObjectRetain_n();
    v11 = specialized Rope._endPath.getter(v10);
    result = swift_unknownObjectRelease();
    v12 = 0;
    v5 = 0;
    if (v4)
      goto LABEL_12;
    v14 = v8;
    v15 = 0;
LABEL_48:
    v31 = v41 - v5;
    if (!__OFSUB__(v41, v5))
    {
      v32 = *(_OWORD *)(v2 + 32);
      v43 = *(_OWORD *)(v2 + 16);
      v44 = v32;
      v45 = *(_OWORD *)(v2 + 48);
      result = BigString.utf8.getter();
      if (!__OFSUB__(0, v5))
      {
        v33 = BigString.UTF8View.index(_:offsetBy:)();
        v35 = v34;
        v37 = v36;
        v39 = v38;
        result = outlined release of Locale((uint64_t)v42);
        *a2 = v14;
        a2[1] = v11;
        a2[2] = v12;
        a2[3] = v15;
        a2[4] = v31;
        a2[5] = v33;
        a2[6] = v35;
        a2[7] = v37;
        a2[8] = v39;
        return result;
      }
      goto LABEL_59;
    }
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v40 = *(_QWORD *)(v2 + 88);
  v16 = *(unsigned __int8 *)(v4 + 18);
  if (!*(_BYTE *)(v4 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v12 = v4;
    v25 = *(unsigned __int16 *)(v4 + 16);
    if (!*(_WORD *)(v4 + 16))
      goto LABEL_45;
LABEL_34:
    v26 = *(_QWORD *)(v12 + 24);
    v20 = __OFSUB__(v5, v26);
    v27 = v5 - v26;
    if (v20)
      goto LABEL_62;
    if (__OFADD__(v27, 1))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if (v27 + 1 < 1)
    {
      v25 = 0;
      goto LABEL_46;
    }
    if ((_DWORD)v25 == 1)
    {
      v5 = v27;
      goto LABEL_45;
    }
    v28 = (uint64_t *)(v12 + 48);
    v29 = 1;
    while (1)
    {
      v30 = *v28;
      v28 += 3;
      v5 = v27 - v30;
      if (__OFSUB__(v27, v30))
        break;
      if (__OFADD__(v5, 1))
        goto LABEL_61;
      if (v5 + 1 < 1)
      {
        v25 = v29;
        v5 = v27;
        goto LABEL_46;
      }
      ++v29;
      v27 = v5;
      if (v25 == v29)
        goto LABEL_45;
    }
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  result = swift_unknownObjectRetain_n();
  v12 = v4;
  do
  {
    v18 = *(unsigned __int16 *)(v12 + 16);
    if (*(_WORD *)(v12 + 16))
    {
      v19 = *(_QWORD *)(v12 + 40);
      v20 = __OFSUB__(v5, v19);
      v21 = v5 - v19;
      if (v20)
        goto LABEL_55;
      if (__OFADD__(v21, 1))
        goto LABEL_56;
      if (v21 + 1 < 1)
      {
        v18 = 0;
        goto LABEL_17;
      }
      if ((_DWORD)v18 != 1)
      {
        v22 = (uint64_t *)(v12 + 64);
        v23 = 1;
        while (1)
        {
          v24 = *v22;
          v22 += 3;
          v5 = v21 - v24;
          if (__OFSUB__(v21, v24))
            break;
          if (__OFADD__(v5, 1))
            goto LABEL_53;
          if (v5 + 1 < 1)
          {
            v18 = v23;
            v5 = v21;
            goto LABEL_17;
          }
          ++v23;
          v21 = v5;
          if (v18 == v23)
            goto LABEL_16;
        }
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      v5 = v21;
    }
LABEL_16:
    if (v5)
      goto LABEL_54;
LABEL_17:
    v17 = (4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C;
    v16 = ((-15 << v17) - 1) & v16 | (v18 << v17);
    v12 = *(_QWORD *)(v12 + 24 + 24 * v18);
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
  }
  while (*(_BYTE *)(v12 + 18));
  v16 &= 0xFFFFFFFFFFFFF0FFLL;
  v25 = *(unsigned __int16 *)(v12 + 16);
  if (*(_WORD *)(v12 + 16))
    goto LABEL_34;
LABEL_45:
  if (!v5)
  {
LABEL_46:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v11 = v16 | (v25 << 8);
    v8 = v40;
LABEL_12:
    swift_unknownObjectRetain();
    v13 = v7;
    v14 = v8;
    v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v8, v11, v12, v4, v13);
    result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.StringLocalizedStandardContains()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t one-time initialization function for us()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static Locale.MeasurementSystem.us = 0x6D65747379737375;
  unk_1EDC3E860 = 0xE800000000000000;
  xmmword_1EDC3E868 = (__int128)v1;
  return result;
}

void URLRequest.allHTTPHeaderFields.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(void **)(*(_QWORD *)v1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v4 = swift_allocObject();
    swift_retain();
    v5 = v3;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v4 + 16) = v8;
    *(_QWORD *)v1 = v4;
    swift_release();
  }
  v6 = *(id *)(*(_QWORD *)v1 + 16);
  if (a1)
  {
    swift_bridgeObjectRetain();
    v7 = (void *)_NativeDictionary.bridged()();
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v6, sel_setAllHTTPHeaderFields_, v7);
  swift_bridgeObjectRelease();

}

uint64_t one-time initialization function for cache(uint64_t a1)
{
  return one-time initialization function for cache(a1, &demangling cache variable for type metadata for LockedState<[ICUMeasurementNumberFormatter.Signature : ICUMeasurementNumberFormatter?]>._Buffer, &static ICUMeasurementNumberFormatter.cache, (uint64_t *)algn_1EDC3D1D8);
}

{
  return one-time initialization function for cache(a1, &demangling cache variable for type metadata for LockedState<[ICUNumberFormatter.Signature : ICUNumberFormatter?]>._Buffer, &static ICUNumberFormatter.cache, &qword_1EDC3D820);
}

{
  return one-time initialization function for cache(a1, &demangling cache variable for type metadata for LockedState<[ICUPercentNumberFormatter.Signature : ICUPercentNumberFormatter?]>._Buffer, &static ICUPercentNumberFormatter.cache, (uint64_t *)algn_1EDC3B488);
}

{
  return one-time initialization function for cache(a1, &demangling cache variable for type metadata for LockedState<[ICUCurrencyNumberFormatter.Signature : ICUCurrencyNumberFormatter?]>._Buffer, &static ICUCurrencyNumberFormatter.cache, (uint64_t *)algn_1EDC41C48);
}

{
  return one-time initialization function for cache(a1, &demangling cache variable for type metadata for LockedState<[ICUByteCountNumberFormatter.Signature : ICUByteCountNumberFormatter?]>._Buffer, &static ICUByteCountNumberFormatter.cache, &qword_1EDC34D40);
}

uint64_t getEnumTagSinglePayload for AttributedString.Index(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

void static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 1;
}

ValueMetadata *type metadata accessor for NSOperationQueue.SchedulerTimeType.Stride()
{
  return &type metadata for NSOperationQueue.SchedulerTimeType.Stride;
}

ValueMetadata *type metadata accessor for ByteCountFormatStyle()
{
  return &type metadata for ByteCountFormatStyle;
}

ValueMetadata *type metadata accessor for ByteCountFormatStyle.Style()
{
  return &type metadata for ByteCountFormatStyle.Style;
}

void *type metadata accessor for AttributedString.AttributeKey()
{
  return &unk_1E0F1C878;
}

void *type metadata accessor for AttributedString.CodingKeys()
{
  return &unk_1E0F1C7E8;
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance JSONDecoderImpl.UnkeyedContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return JSONDecoderImpl.UnkeyedContainer.nestedContainer<A>(keyedBy:)(a1, a2, a3);
}

uint64_t JSONDecoderImpl.UnkeyedContainer.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  ValueMetadata *v67;
  unint64_t v68;
  uint64_t v69;

  v4 = v3;
  v6 = type metadata accessor for KeyedDecodingContainer();
  v7 = (_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(unsigned __int8 *)(v3 + 40);
  if (v9 < 0xFE)
  {
    v69 = *(_QWORD *)(v3 + 32);
    goto LABEL_9;
  }
  v10 = (_QWORD *)v6;
  v11 = *(_QWORD *)(v3 + 8);
  v12 = JSONMap.loadValue(at:)(v11);
  if (v14 <= 0xFDu)
  {
    v8 = v12;
    LOBYTE(v9) = v14;
    v23 = v13;
    *(_QWORD *)(v3 + 8) = JSONMap.offset(after:)(v11);
    *(_QWORD *)(v3 + 24) = v8;
    *(_QWORD *)(v3 + 32) = v23;
    v69 = v23;
    *(_BYTE *)(v3 + 40) = v9;
LABEL_9:
    v10 = *(_QWORD **)v3;
    v25 = *(_QWORD *)(v3 + 64);
    v24 = *(_QWORD *)(v3 + 72);
    v26 = swift_allocObject();
    v59 = v25;
    *(_QWORD *)(v26 + 16) = v25;
    *(_QWORD *)(v26 + 24) = v24;
    if (v24 >> 62)
    {
      if (v24 >> 62 != 1)
      {
        v29 = 1;
        goto LABEL_14;
      }
      v27 = (uint64_t *)((v24 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v27 = (uint64_t *)(v24 + 64);
    }
    v28 = *v27;
    swift_retain_n();
    v29 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
LABEL_14:
    *(_QWORD *)(v26 + 32) = v29;
    swift_retain();
    swift_release();
    v64 = v10[20];
    v10[20] = v26 | 0x4000000000000000;
    v30 = (_QWORD *)v10[2];
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10[2] = v30;
    v60 = a2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
      v10[2] = v30;
    }
    v33 = v30[2];
    v32 = v30[3];
    v15 = (_QWORD *)(v33 + 1);
    if (v33 >= v32 >> 1)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v30);
    v30[2] = v15;
    v34 = (uint64_t)&v30[3 * v33 + 4];
    v35 = v69;
    *(_QWORD *)v34 = v8;
    *(_QWORD *)(v34 + 8) = v35;
    *(_BYTE *)(v34 + 16) = v9;
    v10[2] = v30;
    v36 = v30[2];
    if (!v36)
    {
      __break(1u);
      goto LABEL_42;
    }
    v37 = (uint64_t)&v30[3 * v36 + 4];
    a2 = *(_QWORD *)(v37 - 24);
    v25 = *(_QWORD *)(v37 - 16);
    v38 = *(unsigned __int8 *)(v37 - 8);
    if (v38 >> 5 != 3)
    {
      v39 = v38 >> 5 == 5 && (v25 | a2) == 0;
      if (!v39 || v38 != 160)
      {
        v4 = type metadata accessor for DecodingError();
        swift_allocError();
        v15 = v40;
        *v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        v41 = v10[20];
        swift_retain();
        swift_retain();
        _CodingPathNode.path.getter(v41);
        swift_release();
        _StringGuts.grow(_:)(43);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v65 = 0xD000000000000035;
        *((_QWORD *)&v65 + 1) = 0x800000018230E9E0;
        v42 = v10[2];
        if (*(_QWORD *)(v42 + 16))
          __asm { BR              X10 }
        goto LABEL_45;
      }
      v50 = type metadata accessor for DecodingError();
      swift_allocError();
      v52 = v51;
      v4 = (uint64_t)v51
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                  + 48);
      *v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      v53 = v10[20];
      v15 = (_QWORD *)(v53 & 0x3FFFFFFFFFFFFFFFLL);
      swift_retain();
      swift_retain();
      _CodingPathNode.path.getter(v53);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v52, *MEMORY[0x1E0DEC460], v50);
      swift_willThrow();
      swift_release();
      v49 = v64;
LABEL_37:
      v10[20] = v49;
      swift_retain();
      swift_release();
      v7 = (_QWORD *)v10[2];
      if (v7[2])
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v58 = v7[2];
          if (v58)
          {
LABEL_40:
            v7[2] = v58 - 1;
            v10[2] = v7;
            swift_release();
            swift_release();
            return swift_release();
          }
          goto LABEL_44;
        }
LABEL_43:
        v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        v58 = v7[2];
        if (v58)
          goto LABEL_40;
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
LABEL_28:
    v44 = v10[20];
    v46 = v10[17];
    *(_QWORD *)&v65 = v10[16];
    v45 = v65;
    *((_QWORD *)&v65 + 1) = v46;
    swift_retain_n();
    swift_retain_n();
    outlined copy of JSONEncoder.KeyEncodingStrategy(v65);
    v47 = a2;
    v15 = (_QWORD *)v60;
    v48 = static JSONDecoderImpl.KeyedContainer.stringify(objectRegion:using:codingPathNode:keyDecodingStrategy:)(v47, v25, (uint64_t)v10, v44, (unint64_t *)&v65);
    v69 = v61;
    if (v61)
    {
      swift_release();
      swift_release_n();
      outlined consume of JSONEncoder.KeyEncodingStrategy(v45);
      swift_release();
      v49 = v64;
      goto LABEL_37;
    }
    v62 = v48;
    outlined consume of JSONEncoder.KeyEncodingStrategy(v45);
    swift_release();
    *(_QWORD *)&v65 = v10;
    *((_QWORD *)&v65 + 1) = v44;
    v66 = v62;
    v55 = type metadata accessor for JSONDecoderImpl.KeyedContainer(0, v60, a3, v54);
    MEMORY[0x186DA9D64](&protocol conformance descriptor for JSONDecoderImpl.KeyedContainer<A>, v55);
    KeyedDecodingContainer.init<A>(_:)();
    swift_release();
    v10[20] = v64;
    swift_retain();
    swift_release();
    v56 = (_QWORD *)v10[2];
    if (v56[2])
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v57 = v56[2];
        if (v57)
          goto LABEL_35;
        goto LABEL_49;
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v56);
    v56 = (_QWORD *)result;
    v57 = *(_QWORD *)(result + 16);
    if (v57)
    {
LABEL_35:
      v56[2] = v57 - 1;
      v10[2] = v56;
      swift_release();
      swift_release();
      result = swift_release();
      if (!__OFADD__(v59, 1))
      {
        *(_QWORD *)(v4 + 64) = v59 + 1;
        *v7 = 0;
        v7[1] = 0;
        *(_BYTE *)(v4 + 40) = -2;
        return result;
      }
      goto LABEL_50;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
  v15 = (_QWORD *)_CodingPathNode.path.getter(*(_QWORD *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 64);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_46:
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
  v17 = v15[2];
  v16 = v15[3];
  if (v17 >= v16 >> 1)
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v15);
  v67 = &type metadata for _CodingKey;
  v68 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v18 = swift_allocObject();
  *(_QWORD *)&v65 = v18;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 16) = v4;
  *(_BYTE *)(v18 + 40) = 2;
  v15[2] = v17 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v65, (uint64_t)&v15[5 * v17 + 4]);
  v19 = type metadata accessor for DecodingError();
  swift_allocError();
  v21 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *v21 = v10;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC460], v19);
  return swift_willThrow();
}

uint64_t type metadata completion function for PredicateExpressions.KeyPath()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t PropertyListEncoder.outputFormat.setter(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 32);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  return swift_release();
}

void static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

unint64_t _NSProcessInfoGetThermalState()
{
  if (_NSProcessInfoGetThermalState_once != -1)
    dispatch_once(&_NSProcessInfoGetThermalState_once, &__block_literal_global_142);
  return atomic_load(&_NSProcessInfoGetThermalState_currentState);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale()
{
  return Locale.description.getter();
}

uint64_t Locale.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  swift_unknownObjectRetain();
  v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  v5._countAndFlagsBits = 10272;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return v4;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _LocaleICU()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = *(void **)(*(_QWORD *)v0 + 24);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0x206465786966;
}

uint64_t specialized _LocaleAutoupdating.debugDescription.getter()
{
  uint64_t *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t result;
  uint64_t v11[3];
  _QWORD v12[2];
  _OWORD v13[9];

  strcpy((char *)v12, "autoupdating ");
  HIWORD(v12[1]) = -4864;
  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (uint64_t *)(static LocaleCache.cache + 16);
  v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.current.getter(v0, v13);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (*(_QWORD *)&v13[0])
  {
    v2 = *((_QWORD *)&v13[0] + 1);
LABEL_7:
    swift_release();
    ObjectType = swift_getObjectType();
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
    v8 = v7;
    swift_unknownObjectRelease();
    v9._countAndFlagsBits = v6;
    v9._object = v8;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    return v12[0];
  }
  LocaleCache.preferences()(v13);
  v4 = v3;
  swift_retain();
  os_unfair_lock_lock(v1);
  closure #2 in LocaleCache.current.getter(v0, (uint64_t)v13, v4 & 1, v11);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (v11[0])
  {
    v2 = v11[1];
    outlined release of LocalePreferences(v13);
    goto LABEL_7;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v11;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v6 = *(void **)(*(_QWORD *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v7 = swift_allocObject();
    swift_retain();
    v8 = v6;
    objc_msgSend(v8, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v7 + 16) = v11;
    *(_QWORD *)a1 = v7;
    swift_release();
  }
  v9 = *(id *)(*(_QWORD *)a1 + 16);
  closure #1 in URLRequest.httpBody.setter(v9, a2, a3);

  return outlined consume of Data?(a2, a3);
}

uint64_t one-time initialization function for _cache()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[String : ICU.CaseMap]>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static ICU.CaseMap._cache = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for KeyPathComparator<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for KeyPathComparator<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

NSString *NSUserName(void)
{
  return (NSString *)(id)CFCopyUserName();
}

uint64_t URLResourceValues.volume.getter@<X0>(_QWORD *a1@<X8>)
{
  return URLResourceValues.parentDirectory.getter(MEMORY[0x1E0C99D08], a1);
}

void sub_181979048(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t AttributedString.init<A>(_:including:)@<X0>(void *a1@<X0>, Swift::UInt a2@<X2>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  void *v7;
  uint64_t result;
  uint64_t v9;

  v7 = static AttributeScope.scopeDescription.getter(a2, a3);
  swift_bridgeObjectRelease();
  AttributedString.init(_:attributeTable:options:)(a1, (uint64_t)v7, 0, &v9);
  result = swift_release();
  if (!v4)
    *a4 = v9;
  return result;
}

id static TimeZone._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = result;
    type metadata accessor for _NSSwiftTimeZone();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      result = (id)swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _TimeZoneBridged();
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = v2;
      v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
      result = v2;
    }
    *a2 = v5;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char *v7;

  v2 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = *MEMORY[0x1E0DED4E8];
  v5 = type metadata accessor for FloatingPointRoundingRule();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v3, v4, v5);
  v7 = (char *)a1 + *(int *)(v2 + 28);
  *a1 = 0;
  a1[1] = 0;
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  return result;
}

uint64_t NSExtensionMain(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  NSAssertionHandler v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v4 = (uint64_t (*)(uint64_t, uint64_t))_MergedGlobals_129;
  v10 = _MergedGlobals_129;
  if (!_MergedGlobals_129)
  {
    v6[0].super.isa = (Class)MEMORY[0x1E0C809B0];
    v6[1].super.isa = (Class)3221225472;
    v6[2].super.isa = (Class)__getEXExtensionMainSymbolLoc_block_invoke;
    v6[3].super.isa = (Class)&unk_1E0F50E58;
    v6[4].super.isa = (Class)&v7;
    __getEXExtensionMainSymbolLoc_block_invoke(v6);
    v4 = (uint64_t (*)(uint64_t, uint64_t))v8[3];
  }
  _Block_object_dispose(&v7, 8);
  if (!v4)
  {
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "int _EXExtensionMain(int, const char **)"), CFSTR("NSExtensionMain.m"), 14, CFSTR("%s"), dlerror());
    __break(1u);
  }
  return v4(a1, a2);
}

void sub_181979504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getEXExtensionMainSymbolLoc_block_invoke(NSAssertionHandler *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!qword_1ECD0A298)
    qword_1ECD0A298 = _sl_dlopen();
  v2 = (void *)qword_1ECD0A298;
  if (!qword_1ECD0A298)
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v4 = (void *)-[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *ExtensionFoundationLibrary(void)"), CFSTR("NSExtensionMain.m"), 13, CFSTR("%s"), 0);
    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "EXExtensionMain");
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = result;
  _MergedGlobals_129 = *(_UNKNOWN **)(*((_QWORD *)a1[4].super.isa + 1) + 24);
  return result;
}

void protocol witness for Subscription.request(_:) in conformance NSObject.KVOSubscription<A, B, C>(uint64_t a1)
{
  NSObject.KVOSubscription.request(_:)(a1);
}

void NSObject.KVOSubscription.request(_:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  os_unfair_lock_s *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  os_unfair_lock_t v54;
  uint64_t v55;

  v2 = v1;
  v4 = *(_QWORD *)v1;
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v6 = type metadata accessor for Optional();
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v45 - v7;
  v50 = v5;
  v52 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v9);
  v51 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v4 + 88);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v45 - v14;
  v55 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v16);
  v53 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = *(os_unfair_lock_t *)&v2[*(_QWORD *)(v4 + 176)];
  os_unfair_lock_lock(v54);
  v18 = *((_QWORD *)v2 + 3);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
  {
    v19 = *((_QWORD *)v2 + 3);
    v20 = v55;
  }
  else
  {
    v47 = v8;
    v21 = a1;
    v22 = v11;
    static Subscribers.Demand.unlimited.getter();
    v23 = static Subscribers.Demand.== infix(_:_:)();
    v19 = static Subscribers.Demand.unlimited.getter();
    if ((v23 & 1) != 0)
    {
      v11 = v22;
    }
    else
    {
      v11 = v22;
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
        goto LABEL_9;
      if ((v18 | v21) < 0)
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      v19 = v18 + v21;
      if (__OFADD__(v18, v21))
      {
LABEL_9:
        v19 = static Subscribers.Demand.unlimited.getter();
      }
      else if (v19 < 0)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
    }
    *((_QWORD *)v2 + 3) = v19;
    v20 = v55;
    v8 = v47;
  }
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    if (v19 < 0)
    {
      __break(1u);
      goto LABEL_47;
    }
    if (!v19)
    {
LABEL_19:
      v30 = *((_QWORD *)v2 + 3);
      static Subscribers.Demand.unlimited.getter();
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
      {
LABEL_29:
        v37 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 136)];
        (*(void (**)(char *, uint64_t))(v13 + 8))(v37, v12);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v37, 1, 1, v11);
        v38 = v54;
LABEL_45:
        os_unfair_lock_unlock(v38);
        return;
      }
      static Subscribers.Demand.unlimited.getter();
      if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
      {
        v31 = static Subscribers.Demand.unlimited.getter();
LABEL_28:
        *((_QWORD *)v2 + 3) = v31;
        goto LABEL_29;
      }
      if ((v30 & 0x8000000000000000) == 0)
      {
        if (v30)
        {
          v31 = v30 - 1;
          goto LABEL_28;
        }
        goto LABEL_48;
      }
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
  }
  v24 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 136)];
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v24, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    goto LABEL_19;
  }
  v45[1] = v4;
  v46 = v13;
  v47 = (char *)v12;
  v25 = v53;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v53, v15, v11);
  v26 = v48;
  v27 = v49;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v8, &v2[*(_QWORD *)(*(_QWORD *)v2 + 144)], v49);
  v28 = v52;
  v29 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v8, 1, v50) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v11);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v27);
    v13 = v46;
    v12 = (uint64_t)v47;
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v51, v8, v29);
  v32 = *((_QWORD *)v2 + 3);
  static Subscribers.Demand.unlimited.getter();
  v33 = static Subscribers.Demand.== infix(_:_:)();
  v35 = v46;
  v34 = v47;
  if ((v33 & 1) == 0)
  {
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    {
      v36 = static Subscribers.Demand.unlimited.getter();
    }
    else
    {
      if (v32 < 0)
      {
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      if (!v32)
      {
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      v36 = v32 - 1;
    }
    *((_QWORD *)v2 + 3) = v36;
  }
  (*(void (**)(char *, char *))(v35 + 8))(v24, v34);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v24, 1, 1, v11);
  v38 = v54;
  os_unfair_lock_unlock(v54);
  os_unfair_recursive_lock_lock_with_options();
  v39 = v53;
  v40 = dispatch thunk of Subscriber.receive(_:)();
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(v38);
  v41 = *((_QWORD *)v2 + 3);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
  {
LABEL_44:
    (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v29);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v11);
    goto LABEL_45;
  }
  v42 = v11;
  static Subscribers.Demand.unlimited.getter();
  v43 = static Subscribers.Demand.== infix(_:_:)();
  v44 = static Subscribers.Demand.unlimited.getter();
  if ((v43 & 1) != 0)
  {
    v11 = v42;
LABEL_43:
    *((_QWORD *)v2 + 3) = v44;
    goto LABEL_44;
  }
  v11 = v42;
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    goto LABEL_41;
  if ((v41 | v40) < 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v44 = v41 + v40;
  if (__OFADD__(v41, v40))
  {
LABEL_41:
    v44 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_43;
  }
  if ((v44 & 0x8000000000000000) == 0)
    goto LABEL_43;
LABEL_54:
  __break(1u);
}

uint64_t one-time initialization function for formatterCache()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICUDateFormatter.DateFormatInfo : ICUDateFormatter?]>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static ICUDateFormatter.formatterCache = 100;
  unk_1EDC47D40 = result;
  return result;
}

uint64_t static AnyHashable._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  id v2;

  if (a1)
  {
    type metadata accessor for NSObject();
    lazy protocol witness table accessor for type NSObject and conformance NSObject();
    v2 = a1;
  }
  return AnyHashable.init<A>(_:)();
}

void sub_18197A21C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id @objc static NSLocale._canonicalLocaleIdentifier(from:)(uint64_t a1, uint64_t a2, void *a3)
{
  const __CFAllocator *v3;
  const __CFString *v4;
  __CFString *CanonicalLocaleIdentifierFromString;
  void *v6;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
  v4 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v3, v4);
  swift_unknownObjectRelease();
  if (CanonicalLocaleIdentifierFromString)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs(uint64_t *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  char v59[48];
  __int128 v60;
  __int128 v61;
  __int128 v62;

  v2 = *result;
  if (*result < v1[1] || v2 >= v1[9])
    goto LABEL_82;
  v3 = result;
  v4 = (_QWORD *)*v1;
  v5 = result[3];
  v6 = result[7];
  v7 = *(_QWORD *)(*v1 + 64);
  v8 = v4[9];
  v10 = v4[10];
  v9 = v4[11];
  v57 = v4;
  v58 = v9;
  v56 = result[4];
  if (v5 != 1)
  {
    v11 = result[1];
    if (v11 == v9)
    {
      v12 = result[2];
      if (v6 == 2)
      {
        if (v7)
        {
          swift_unknownObjectRetain();
          v13 = v10;
          result = (uint64_t *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v12, v5, v7, v8, v10);
          v9 = v58;
          v14 = result;
        }
        else
        {
          v13 = v4[10];
          v14 = 0;
        }
      }
      else
      {
        v13 = v4[10];
        v14 = (uint64_t *)((unint64_t)result[4] >> 11);
        result = (uint64_t *)swift_unknownObjectRetain();
        v9 = v58;
      }
      goto LABEL_66;
    }
  }
  if (v7)
    v15 = v4[9];
  else
    v15 = 0;
  if (v2 < 0 || v15 < v2)
    goto LABEL_86;
  if (!v7 || (v2 < v8 ? (v16 = *(unsigned __int16 *)(v7 + 16) == 0) : (v16 = 1), v16))
  {
    v17 = swift_unknownObjectRetain_n();
    v12 = specialized Rope._endPath.getter(v17);
    result = (uint64_t *)swift_unknownObjectRelease();
    v5 = 0;
    if (!v7)
    {
      v13 = v10;
      v14 = 0;
      v9 = v58;
      v11 = v58;
      goto LABEL_66;
    }
LABEL_20:
    swift_unknownObjectRetain();
    v11 = v58;
    v13 = v10;
    v14 = (uint64_t *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v58, v12, v5, v7, v8, v10);
    result = (uint64_t *)swift_unknownObjectRelease_n();
    v9 = v58;
LABEL_66:
    *(_QWORD *)&v60 = v11;
    *((_QWORD *)&v60 + 1) = v12;
    *(_QWORD *)&v61 = v5;
    v25 = __OFADD__(v2, 1);
    v40 = v2 + 1;
    if (v25)
      goto LABEL_83;
    if (v11 != v9)
      goto LABEL_84;
    if (v5)
    {
      v41 = *(_QWORD *)(v5 + 24 * ((v12 >> ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v41 = specialized Rope._Node.subscript.getter(v12, v7);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = (uint64_t *)swift_bridgeObjectRelease();
    v25 = __OFADD__(v14, v41);
    v42 = (char *)v14 + v41;
    if (v25)
      goto LABEL_85;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v60, v7, v8, v13, v58);
    swift_unknownObjectRelease_n();
    v43 = v60;
    v44 = v57 + 1;
    v45 = v61;
    if (v6 == 2)
    {
      v46 = v57[2];
      v60 = *v44;
      v61 = v46;
      v62 = v57[3];
      BigString.utf8.getter();
      BigString.startIndex.getter();
    }
    else
    {
      v47 = v57[2];
      v60 = *v44;
      v61 = v47;
      v62 = v57[3];
      BigString.utf8.getter();
      result = (uint64_t *)v56;
      if (__OFSUB__(v42, v56 >> 11))
        goto LABEL_87;
    }
    v48 = BigString.UTF8View.index(_:offsetBy:)();
    v50 = v49;
    v52 = v51;
    v54 = v53;
    result = (uint64_t *)outlined release of Locale((uint64_t)v59);
    *v3 = v40;
    *(_OWORD *)(v3 + 1) = v43;
    v3[3] = v45;
    v3[4] = v48;
    v3[5] = v50;
    v3[6] = v52;
    v3[7] = v54;
    return result;
  }
  v18 = v4[10];
  v55 = result[7];
  v19 = *(unsigned __int8 *)(v7 + 18);
  if (!*(_BYTE *)(v7 + 18))
  {
    result = (uint64_t *)swift_unknownObjectRetain_n();
    v20 = v2;
    v5 = v7;
LABEL_42:
    v30 = *(unsigned __int16 *)(v5 + 16);
    if (*(_WORD *)(v5 + 16))
    {
      v31 = v20 - 1;
      if (__OFSUB__(v20, 1))
        goto LABEL_89;
      if (__OFADD__(v31, 1))
        goto LABEL_91;
      if (v20 <= 0)
      {
        v30 = 0;
LABEL_64:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v12 = v19 & 0xFFFFFFFFFFFFF0FFLL | (v30 << 8);
        v6 = v55;
        v10 = v18;
        goto LABEL_20;
      }
      if ((_DWORD)v30 != 1)
      {
        v32 = v30 - 2;
        if (v31 < v30 - 2)
          v32 = v20 - 1;
        if (v32 >= v20 + 0x7FFFFFFFFFFFFFFFLL)
          v32 = v20 + 0x7FFFFFFFFFFFFFFFLL;
        v33 = v32 + 1;
        if (v33 >= 5)
        {
          v35 = v33 & 3;
          if ((v33 & 3) == 0)
            v35 = 4;
          v36 = v33 - v35;
          v34 = v36 + 1;
          v37 = 0uLL;
          v38 = (int64x2_t)(unint64_t)(v20 - 1);
          v39.i64[0] = -1;
          v39.i64[1] = -1;
          do
          {
            v38 = vaddq_s64(v38, v39);
            v37 = vaddq_s64(v37, v39);
            v36 -= 4;
          }
          while (v36);
          v31 = vaddvq_s64(vaddq_s64(v37, v38));
        }
        else
        {
          v34 = 1;
        }
        while (v20 + 0x8000000000000000 != v34)
        {
          if (v20 == v34)
          {
            v30 = v20;
            goto LABEL_64;
          }
          ++v34;
          --v31;
          if (v30 == v34)
            goto LABEL_63;
        }
        goto LABEL_88;
      }
    }
    else
    {
      v31 = v20;
    }
LABEL_63:
    if (v31)
      goto LABEL_90;
    goto LABEL_64;
  }
  result = (uint64_t *)swift_unknownObjectRetain_n();
  v20 = v2;
  v21 = v7;
  while (1)
  {
    v23 = *(unsigned __int16 *)(v21 + 16);
    if (*(_WORD *)(v21 + 16))
      break;
LABEL_25:
    if (v20)
      goto LABEL_79;
LABEL_26:
    v22 = (4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C;
    v19 = ((-15 << v22) - 1) & v19 | (v23 << v22);
    v5 = *(_QWORD *)(v21 + 24 + 24 * v23);
    swift_unknownObjectRetain();
    result = (uint64_t *)swift_unknownObjectRelease();
    v21 = v5;
    if (!*(_BYTE *)(v5 + 18))
      goto LABEL_42;
  }
  v24 = *(_QWORD *)(v21 + 32);
  v25 = __OFSUB__(v20, v24);
  v26 = v20 - v24;
  if (v25)
    goto LABEL_80;
  if (__OFADD__(v26, 1))
    goto LABEL_81;
  if (v26 + 1 <= 0)
  {
    v23 = 0;
    goto LABEL_26;
  }
  if ((_DWORD)v23 == 1)
  {
    v20 = v26;
    goto LABEL_25;
  }
  v27 = (uint64_t *)(v21 + 56);
  v28 = 1;
  while (1)
  {
    v29 = *v27;
    v27 += 3;
    v20 = v26 - v29;
    if (__OFSUB__(v26, v29))
      break;
    if (__OFADD__(v20, 1))
      goto LABEL_78;
    if (v20 + 1 < 1)
    {
      v23 = v28;
      v20 = v26;
      goto LABEL_26;
    }
    ++v28;
    v26 = v20;
    if (v23 == v28)
      goto LABEL_25;
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
  return result;
}

__n128 IntegerFormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v3;
  __n128 result;
  __n128 v7;

  (*(void (**)(__n128 *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v7;
  *a3 = v7;
  return result;
}

unint64_t lazy protocol witness table accessor for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType, &type metadata for NSRunLoop.SchedulerTimeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType, &type metadata for NSRunLoop.SchedulerTimeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSRunLoop.SchedulerTimeType, &type metadata for NSRunLoop.SchedulerTimeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop.SchedulerTimeType and conformance NSRunLoop.SchedulerTimeType);
  }
  return result;
}

uint64_t one-time initialization function for cache(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  *a3 = 100;
  *a4 = result;
  return result;
}

id URLRequest.cachePolicy.setter(uint64_t a1, SEL *a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v9;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(void **)(*(_QWORD *)v2 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v6 = swift_allocObject();
    swift_retain();
    v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v6 + 16) = v9;
    *(_QWORD *)v2 = v6;
    swift_release();
  }
  return objc_msgSend(*(id *)(*(_QWORD *)v2 + 16), *a2, a1);
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(a1, a2, a3, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

void static URL.temporaryDirectory.getter(uint64_t a1@<X8>)
{
  id v2;
  id v3;
  __int128 v4;
  NSString *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 v11;

  if (_foundation_swift_url_feature_enabled())
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = objc_msgSend(v2, sel_temporaryDirectory);

    if (v3)
    {
      URL.init(reference:)(v3, &v9);

      v4 = v10;
      *(_QWORD *)a1 = v9;
      *(_OWORD *)(a1 + 8) = v4;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v5 = NSTemporaryDirectory();
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    v11 = 0;
    v9 = 0;
    v10 = 0uLL;
    URL.init(filePath:directoryHint:relativeTo:)((uint64_t)v6, v8, &v11, (uint64_t)&v9, (uint64_t *)a1);
  }
}

uint64_t type metadata accessor for PredicateExpressions.KeyPath.CommonKeyPathKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PredicateExpressions.KeyPath.CommonKeyPathKind);
}

Foundation::DateInterval __swiftcall DateInterval.init(start:duration:)(Foundation::Date start, Swift::Double duration)
{
  Swift::Double *v2;
  Swift::Double *v3;
  Foundation::DateInterval result;

  if (start._time < 0.0)
  {
    __break(1u);
  }
  else
  {
    duration = *v2;
    *v3 = *v2;
    v3[1] = start._time;
  }
  result.duration = duration;
  result.start = start;
  return result;
}

unint64_t lazy protocol witness table accessor for type ICUDateFormatter.DateFormatInfo and conformance ICUDateFormatter.DateFormatInfo()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICUDateFormatter.DateFormatInfo and conformance ICUDateFormatter.DateFormatInfo;
  if (!lazy protocol witness table cache variable for type ICUDateFormatter.DateFormatInfo and conformance ICUDateFormatter.DateFormatInfo)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICUDateFormatter.DateFormatInfo, &type metadata for ICUDateFormatter.DateFormatInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUDateFormatter.DateFormatInfo and conformance ICUDateFormatter.DateFormatInfo);
  }
  return result;
}

void NSKeyValueObservingTSDDestroy(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  free(a1);
}

id URLRequest.httpShouldUsePipelining.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setHTTPShouldUsePipelining_);
}

void sub_18197B1D4(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18197B1F8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AttributedString.characters.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *v1;
  v4 = BigString.startIndex.getter();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = BigString.endIndex.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v8;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  a1[7] = v13;
  a1[8] = v14;
  a1[9] = 0;
  return swift_retain();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance URL(void *a1, uint64_t a2)
{
  uint64_t v5;
  __int128 v6;

  outlined consume of URL?(*(void **)a2);
  URL.init(reference:)(a1, &v5);
  *(_QWORD *)a2 = v5;
  *(_OWORD *)(a2 + 8) = v6;
  return 1;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer()
{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

{
  return _JSONUnkeyedEncodingContainer.encode(_:)();
}

uint64_t _JSONUnkeyedEncodingContainer.encode(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v4 = v3;
  type metadata accessor for JSONReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v4;
  *(_BYTE *)(result + 32) = 1;
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    v10 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 7;
    v6 = swift_retain();
    MEMORY[0x186DA4AFC](v6);
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v7 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 16) = v10;
    *(_QWORD *)(v1 + 24) = 0;
    v9 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 8);
  type metadata accessor for JSONReference();
  result = swift_initStaticObject();
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    v7 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 7;
    v3 = swift_retain_n();
    MEMORY[0x186DA4AFC](v3);
    if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v4 = *(_QWORD *)(v1 + 16);
    v5 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 16) = v7;
    *(_QWORD *)(v1 + 24) = 0;
    v6 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v4, v5, v6);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v4 = v3;
  type metadata accessor for JSONReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v4;
  *(_BYTE *)(result + 32) = 1;
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    v10 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 7;
    v6 = swift_retain();
    MEMORY[0x186DA4AFC](v6);
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v7 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 16) = v10;
    *(_QWORD *)(v1 + 24) = 0;
    v9 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v4 = v3;
  type metadata accessor for JSONReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v4;
  *(_BYTE *)(result + 32) = 1;
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    v10 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 7;
    v6 = swift_retain();
    MEMORY[0x186DA4AFC](v6);
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v7 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 16) = v10;
    *(_QWORD *)(v1 + 24) = 0;
    v9 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v4 = v3;
  type metadata accessor for JSONReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v4;
  *(_BYTE *)(result + 32) = 1;
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    v10 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 7;
    v6 = swift_retain();
    MEMORY[0x186DA4AFC](v6);
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v7 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 16) = v10;
    *(_QWORD *)(v1 + 24) = 0;
    v9 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v4 = v3;
  type metadata accessor for JSONReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v4;
  *(_BYTE *)(result + 32) = 1;
  if (*(_BYTE *)(v1 + 32) == 3)
  {
    v10 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 7;
    v6 = swift_retain();
    MEMORY[0x186DA4AFC](v6);
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v7 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 16) = v10;
    *(_QWORD *)(v1 + 24) = 0;
    v9 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v1 + 32) = 3;
    outlined consume of JSONReference.Backing(v7, v8, v9);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexPath and conformance IndexPath()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexPath and conformance IndexPath;
  if (!lazy protocol witness table cache variable for type IndexPath and conformance IndexPath)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexPath, &type metadata for IndexPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index;
  if (!lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Index, &type metadata for AttributedString.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index;
  if (!lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Index, &type metadata for AttributedString.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs, &type metadata for AttributedString.Runs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs, &type metadata for AttributedString.Runs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.Runs, &type metadata for AttributedString.Runs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView;
  if (!lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.CharacterView, &type metadata for AttributedString.CharacterView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView;
  if (!lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.CharacterView, &type metadata for AttributedString.CharacterView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView;
  if (!lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.CharacterView, &type metadata for AttributedString.CharacterView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView;
  if (!lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.CharacterView, &type metadata for AttributedString.CharacterView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
  }
  return result;
}

uint64_t ___startElementNs_block_invoke()
{
  uint64_t result;

  result = _CFAppVersionCheckLessThan();
  _MergedGlobals_130 = (_DWORD)result != 0;
  return result;
}

void base witness table accessor for Equatable in Measurement<A><>.FormatStyle.UnitWidth()
{
  JUMPOUT(0x186DA9D64);
}

_QWORD *assignWithCopy for Locale(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v3;
  return a1;
}

uint64_t type metadata completion function for PredicateExpressions.Comparison()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t one-time initialization function for patternCache(uint64_t a1)
{
  return one-time initialization function for patternCache(a1, &demangling cache variable for type metadata for LockedState<[ICUDateFormatter.PatternCacheKey : String]>._Buffer, &static ICUDateFormatter.patternCache);
}

uint64_t one-time initialization function for currentIdentity()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<Int>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  static AttributedString.currentIdentity = result;
  return result;
}

void addNotificationToQueue(_QWORD *a1, uint64_t a2, void *a3, int a4)
{
  void *v6;
  void (__cdecl *v7)(CFRunLoopObserverRef, CFRunLoopActivity, void *);
  CFOptionFlags v8;
  __CFRunLoopObserver *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  __CFRunLoop *Current;
  CFRunLoopObserverContext v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v6 = (void *)a1[2];
    if (!v6)
      return;
    v16.version = 0;
    v16.info = a1;
    v16.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E0C98BD0];
    v16.release = (void (__cdecl *)(const void *))MEMORY[0x1E0C98BC0];
    v16.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x1E0C98350];
    v7 = (void (__cdecl *)(CFRunLoopObserverRef, CFRunLoopActivity, void *))__NSPostASAPQueueNotes;
    v8 = 130;
  }
  else
  {
    v6 = (void *)a1[3];
    if (!v6)
      return;
    v16.version = 0;
    v16.info = a1;
    v16.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E0C98BD0];
    v16.release = (void (__cdecl *)(const void *))MEMORY[0x1E0C98BC0];
    v16.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x1E0C98350];
    v7 = (void (__cdecl *)(CFRunLoopObserverRef, CFRunLoopActivity, void *))__NSPostIdleQueueNotes;
    v8 = 32;
  }
  v9 = CFRunLoopObserverCreate(0, v8, 0, 0, v7, &v16);
  objc_msgSend(v6, "addObject:", a2, v16.version, v16.info, v16.retain, v16.release, v16.copyDescription, v17);
  if (a3 && objc_msgSend(a3, "count"))
    v10 = (id)objc_msgSend(a3, "copy");
  else
    v10 = (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", *MEMORY[0x1E0C99748]);
  v11 = v10;
  objc_msgSend(v6, "addObject:", v10);
  v12 = objc_msgSend(v11, "count");
  if (v12 >= 1)
  {
    v13 = v12;
    for (i = 0; i != v13; ++i)
    {
      Current = CFRunLoopGetCurrent();
      CFRunLoopAddObserver(Current, v9, (CFRunLoopMode)objc_msgSend(v11, "objectAtIndex:", i));
    }
  }
  CFRelease(v9);

}

uint64_t initEXGetExtensionClass()
{
  void *v0;
  uint64_t (*v1)(void);

  v0 = (void *)ExtensionFoundationLibrary_frameworkLibrary_0;
  if ((ExtensionFoundationLibrary_frameworkLibrary_0
     || (v0 = dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2),
         (ExtensionFoundationLibrary_frameworkLibrary_0 = (uint64_t)v0) != 0))
    && (v1 = (uint64_t (*)(void))dlsym(v0, "EXGetExtensionClass"), (softLinkEXGetExtensionClass = v1) != 0))
  {
    return v1();
  }
  else
  {
    return 0;
  }
}

unint64_t instantiation function for generic protocol witness table for Data(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Data and conformance Data();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double JSONError.sourceLocation.getter()
{
  uint64_t v0;
  double result;
  _QWORD v2[4];
  char v3;

  outlined init with take of JSONError(v0, (uint64_t)v2);
  switch(v3)
  {
    case 0:
    case 4:
    case 8:
    case 9:
    case 10:
      result = *(double *)v2;
      break;
    case 1:
      result = *(double *)&v2[3];
      break;
    case 2:
      result = *(double *)v2;
      break;
    case 3:
    case 5:
      result = *(double *)&v2[2];
      break;
    case 6:
    case 7:
      result = *(double *)&v2[1];
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

void JSONError.debugDescription.getter()
{
  uint64_t v0;
  _QWORD v1[6];

  outlined init with take of JSONError(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_18197C408()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(61);
  v0._countAndFlagsBits = 0xD00000000000002FLL;
  v0._object = (void *)0x80000001823075F0;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x6E6D756C6F63202CLL;
  v2._object = (void *)0xE900000000000020;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 46;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t outlined init with take of JSONError(uint64_t a1, uint64_t a2)
{
  __swift_memcpy49_8(a2, a1);
  return a2;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

double URL.append<A>(components:directoryHint:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  double result;
  uint64_t v7;
  __int128 v8;

  v5 = *(void **)v4;
  URL._appending<A>(components:directoryHint:)(a1, a3, a4, &v7);

  swift_release();
  swift_release();
  *(_QWORD *)v4 = v7;
  result = *(double *)&v8;
  *(_OWORD *)(v4 + 8) = v8;
  return result;
}

uint64_t URL.appending<A>(components:directoryHint:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return URL._appending<A>(components:directoryHint:)(a1, a2, a3, a4);
}

uint64_t URL._appending<A>(components:directoryHint:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  char *v40;
  unint64_t v41;
  void (*v42)(char *, void **, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void *v47;
  __int128 v48;
  uint64_t v49;

  v45 = a3;
  v39 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v46 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v37 - v10;
  v37 = v12;
  MEMORY[0x1E0C80A78](v13);
  v40 = (char *)&v37 - v14;
  v38 = *v15;
  v16 = *(void **)v4;
  v17 = *(_QWORD *)(v4 + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  v18 = v16;
  swift_retain();
  v19 = _ArrayBuffer.requestNativeBuffer()();
  if (!v19)
  {
    v47 = a1;
    v20 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v20);
    v19 = _copyCollectionToContiguousArray<A>(_:)();
  }
  v21 = v19;
  swift_bridgeObjectRelease();
  v49 = v21;
  v22 = type metadata accessor for Array();
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF20], v22);
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF58], v22);
  RangeReplaceableCollection<>.removeLast()();
  v23 = v49;
  result = MEMORY[0x186DA4B68](v49, a2);
  if (!result)
  {
    swift_bridgeObjectRelease();
    v30 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
LABEL_14:
    v31 = v40;
    v30(v46, v40, a2);
    v32 = v18;
    swift_retain();
    swift_retain();
    v33 = String.init<A>(_:)();
    specialized URL.appending<A>(component:directoryHint:)(v33, v34, v38, (uint64_t)v32, v17);
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();

    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v31, a2);
    v35 = v48;
    v36 = v39;
    *v39 = v47;
    *(_OWORD *)(v36 + 1) = v35;
    return result;
  }
  if (result >= 1)
  {
    v25 = 0;
    v41 = v23 & 0xC000000000000001;
    v43 = result;
    v44 = v23;
    do
    {
      if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && v41)
      {
        result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v37 != 8)
          goto LABEL_16;
        v47 = (void *)result;
        v42 = *(void (**)(char *, void **, uint64_t))(v7 + 16);
        v42(v11, &v47, a2);
        swift_unknownObjectRelease();
      }
      else
      {
        v26 = v23
            + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
            + *(_QWORD *)(v7 + 72) * v25;
        v42 = *(void (**)(char *, void **, uint64_t))(v7 + 16);
        v42(v11, (void **)v26, a2);
      }
      ++v25;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v46, v11, a2);
      v27 = v18;
      swift_retain();
      swift_retain();
      v28 = String.init<A>(_:)();
      specialized URL.appending<A>(component:directoryHint:)(v28, v29, 0, (uint64_t)v27, v17);
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release_n();

      v18 = v47;
      v17 = v48;
      v23 = v44;
    }
    while (v43 != v25);
    swift_bridgeObjectRelease();
    v30 = (void (*)(char *, char *, uint64_t))v42;
    goto LABEL_14;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void specialized URL.appending<A>(component:directoryHint:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  Swift::String v10;

  if (!_foundation_swift_url_feature_enabled())
  {
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    v10._countAndFlagsBits = 47;
    v10._object = (void *)0xE100000000000000;
    String.hasSuffix(_:)(v10);
    __asm { BR              X10 }
  }
  specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, a2, a3, 1, a4, a5);
}

uint64_t static Locale.MeasurementSystem.metric.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for metric != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EDC3AF38;
  v3 = xmmword_1EDC3AF40;
  *(_QWORD *)a1 = static Locale.MeasurementSystem.metric;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Locale.MeasurementSystem.us.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;

  if (one-time initialization token for us != -1)
    swift_once();
  v2 = unk_1EDC3E860;
  v3 = xmmword_1EDC3E868;
  *(_QWORD *)a1 = static Locale.MeasurementSystem.us;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata completion function for Duration.TimeFormatStyle.Pattern()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Duration.TimeFormatStyle.Attributed()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Duration.TimeFormatStyle.Pattern(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t one-time initialization function for _patternGeneratorCache()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICUPatternGenerator.PatternGeneratorInfo : ICUPatternGenerator?]>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static ICUPatternGenerator._patternGeneratorCache = 100;
  *(_QWORD *)algn_1EDC47D58 = result;
  return result;
}

uint64_t Sequence.sorted<A, B>(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = MEMORY[0x1E0C80A78](a1);
  v17 = v6;
  v18 = v7;
  v19 = v8;
  v20 = v9;
  v21 = v10;
  v22 = v11;
  v23 = v12;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v13 + 16))(&v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], v2, a2, v4);
  v24 = dispatch thunk of Sequence._copyToContiguousArray()();
  swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for ContiguousArray();
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEC728], v14);
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEC738], v14);
  MutableCollection<>.sort(by:)();
  return v24;
}

Swift::Void __swiftcall URL.appendPathExtension(_:)(Swift::String a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *object;
  uint64_t countAndFlagsBits;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Swift::String v10;
  Swift::Int v11;
  unint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  id v50;
  void *v51;
  unint64_t v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  _QWORD v64[3];
  uint64_t v65[3];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _OWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[72];
  uint64_t v80;
  __int128 v81;
  _BYTE v82[42];
  _OWORD v83[8];
  _OWORD v84[2];
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int16 v98;

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v5 = (id)*v1;
  v6 = v1[1];
  v7 = v1[2];
  if (!_foundation_swift_url_feature_enabled())
  {
    swift_retain();
    v5 = v5;
    swift_retain();
    v63 = countAndFlagsBits;
    if ((_foundation_swift_url_feature_enabled() & 1) == 0)
    {
      v13 = objc_msgSend(v5, sel__parameterString);
      if (v13)
      {
        v14 = v13;
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v17 = v16;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v18 = objc_msgSend(v5, sel_path)) != 0)
        {
          v19 = v18;
          v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
          v22 = v21;

          v86 = (uint64_t)v20;
          v87 = v22;
          swift_bridgeObjectRetain();
          v23._countAndFlagsBits = 59;
          v23._object = (void *)0xE100000000000000;
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v24._countAndFlagsBits = (uint64_t)v15;
          v24._object = v17;
          String.append(_:)(v24);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v86 = 59;
          v87 = 0xE100000000000000;
          v49._countAndFlagsBits = (uint64_t)v15;
          v49._object = v17;
          String.append(_:)(v49);
          swift_release();
          swift_release();

        }
        swift_bridgeObjectRelease();
        v42 = v86;
        v44 = v87;
      }
      else
      {
        v50 = objc_msgSend(v5, sel_path);
        if (v50)
        {
          v51 = v50;
          v42 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
          v44 = v52;
          swift_release();
          swift_release();

        }
        else
        {
          swift_release();
          swift_release();

          v42 = 0;
          v44 = 0xE000000000000000;
        }
      }
      goto LABEL_49;
    }
    v62 = object;
    v86 = (uint64_t)v5;
    v87 = v6;
    v88 = v7;
    v9 = v5;
    swift_retain();
    swift_retain();
    v10 = URL.path(percentEncoded:)(1);
    v11 = v10._countAndFlagsBits;
    v83[0] = v10;
    swift_bridgeObjectRetain();
    v61 = v9;
    if (String.count.getter() <= 1)
    {
      v12 = (unint64_t)v10._object;
    }
    else
    {
      v12 = (unint64_t)v10._object;
      if ((specialized BidirectionalCollection.last.getter(v10._countAndFlagsBits, (unint64_t)v10._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        v12 = *((_QWORD *)&v83[0] + 1);
        v11 = *(_QWORD *)&v83[0];
      }
    }
    v86 = Set.init(minimumCapacity:)();
    specialized Set._Variant.insert(_:)(&v78, 0x2FuLL);
    v39 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v12 & 0x2000000000000000) != 0)
      v40 = HIBYTE(v12) & 0xF;
    else
      v40 = v11 & 0xFFFFFFFFFFFFLL;
    if (v40)
    {
      v59[1] = v59;
      v60 = v86;
      swift_bridgeObjectRetain();
      if ((v12 & 0x1000000000000000) != 0)
      {
        v42 = 0;
        v44 = 1;
      }
      else if ((v12 & 0x2000000000000000) != 0)
      {
        v86 = v11;
        v87 = v12 & 0xFFFFFFFFFFFFFFLL;
        v42 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)((uint64_t)&v86, HIBYTE(v12) & 0xF, v60, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
        v44 = v54;
      }
      else
      {
        if ((v11 & 0x1000000000000000) != 0)
        {
          v41 = (v12 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else
        {
          v41 = _StringObject.sharedUTF8.getter();
          v39 = v58;
        }
        v42 = specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)(v41, v39, v60, (uint64_t (*)(_QWORD))specialized StringProtocol.hexToAscii(_:));
        v44 = v43;
      }
      v53 = v61;
      if (v44 == 1)
      {
        swift_bridgeObjectRetain();
        v42 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v11, v12, v60);
        v44 = v55;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v44)
          goto LABEL_45;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v44)
          goto LABEL_45;
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v42 = 0;
      v44 = 0xE000000000000000;
      goto LABEL_48;
    }
    swift_bridgeObjectRelease();
    v42 = 0;
    v44 = 0xE000000000000000;
    v53 = v61;
LABEL_45:
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_48:
    swift_release();
    swift_release();

LABEL_49:
    swift_bridgeObjectRelease();
    v56 = HIBYTE(v44) & 0xF;
    if ((v44 & 0x2000000000000000) == 0)
      v56 = v42 & 0xFFFFFFFFFFFFLL;
    if (v56)
    {
      v57 = objc_msgSend(v5, sel_URLByAppendingPathExtension_, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease();
      if (v57)
      {
        URL.init(reference:)(v57, &v86);
        swift_release();
        swift_release();

        v5 = (id)v86;
        v6 = v87;
        v7 = v88;
      }
    }
    goto LABEL_54;
  }
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 168) & 1) != 0)
      v8 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v8 = String.subscript.getter();
    v25 = MEMORY[0x186DA4634](v8);
    v27 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0)
      v28 = v25 & 0xFFFFFFFFFFFFLL;
    if (!v28)
      goto LABEL_54;
    v29 = *(_BYTE *)(v6 + 218);
    v85 = 1;
    v86 = v6;
    v87 = 0x101010101010101;
    LOBYTE(v88) = 1;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0;
    v94 = 1;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v98 = v29;
    swift_retain();
    v30 = (unint64_t)URLComponents._URLComponents.path.getter();
    v32 = v31;
    if ((specialized String.validatePathExtension(_:)(countAndFlagsBits, (unint64_t)object) & 1) != 0)
    {
      *(_QWORD *)&v83[0] = 46;
      *((_QWORD *)&v83[0] + 1) = 0xE100000000000000;
      v33._countAndFlagsBits = countAndFlagsBits;
      v33._object = object;
      String.append(_:)(v33);
      v34 = (Swift::String)v83[0];
      *(_QWORD *)&v83[0] = v30;
      *((_QWORD *)&v83[0] + 1) = v32;
      swift_bridgeObjectRetain();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v35 = HIBYTE(v32) & 0xF;
    if ((v32 & 0x2000000000000000) == 0)
      v35 = v30 & 0xFFFFFFFFFFFFLL;
    if (v35)
    {
      v36 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v30, v32);
      v38 = v37;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v36 = 0;
      v38 = 0xE000000000000000;
    }
    *(_QWORD *)&v78 = v6;
    BYTE8(v78) = 0;
    *(_DWORD *)((char *)&v78 + 9) = 16843009;
    BYTE13(v78) = 1;
    HIWORD(v78) = 256;
    v79[0] = 1;
    memset(&v79[8], 0, 64);
    v80 = 0;
    LOBYTE(v81) = 1;
    *((_QWORD *)&v81 + 1) = v36;
    *(_QWORD *)v82 = v38;
    memset(&v82[8], 0, 32);
    v82[40] = v29;
    v82[41] = 0;
    v83[6] = v81;
    v83[7] = *(_OWORD *)v82;
    v84[0] = *(_OWORD *)&v82[16];
    v83[2] = *(_OWORD *)&v79[16];
    v83[3] = *(_OWORD *)&v79[32];
    v83[4] = *(_OWORD *)&v79[48];
    v83[5] = 0uLL;
    v83[0] = v78;
    v83[1] = *(_OWORD *)v79;
    *(_OWORD *)((char *)v84 + 10) = *(_OWORD *)&v82[26];
    v72 = v81;
    v73 = *(_OWORD *)v82;
    v74[0] = *(_OWORD *)&v82[16];
    *(_OWORD *)((char *)v74 + 10) = *(_OWORD *)&v82[26];
    v68 = *(_OWORD *)&v79[16];
    v69 = *(_OWORD *)&v79[32];
    v70 = *(_OWORD *)&v79[48];
    v71 = 0uLL;
    v66 = v78;
    v67 = *(_OWORD *)v79;
    v75 = (uint64_t)v5;
    v76 = v6;
    v77 = v7;
    outlined retain of URLComponents((uint64_t)v83);
    URL.baseURL.getter(v65);
    v45 = (void *)v65[0];
    v64[0] = v65[0];
    v64[1] = v65[1];
    v64[2] = v65[2];
    URLComponents.url(relativeTo:)((uint64_t)v64, &v75);
    outlined consume of URL?(v45);
    outlined release of URLComponents((uint64_t)&v78);
    v46 = v75;
    if (v75)
    {
      v48 = v76;
      v47 = v77;
      outlined release of URLComponents((uint64_t)&v78);
      swift_release();

      swift_release();
      v5 = (id)v46;
      v6 = v48;
      v7 = v47;
LABEL_54:
      *v2 = v5;
      v2[1] = v6;
      v2[2] = v7;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t Date.FormatStyle.day(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  char v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[74];

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)a1 + 9);
  v6 = v2[5];
  *(_OWORD *)&v22[16] = v2[4];
  *(_OWORD *)&v22[32] = v6;
  *(_OWORD *)&v22[48] = v2[6];
  *(_OWORD *)&v22[58] = *(__int128 *)((char *)v2 + 106);
  v7 = v2[1];
  v19 = *v2;
  v20 = v7;
  v8 = v2[3];
  v21 = v2[2];
  *(_OWORD *)v22 = v8;
  if ((v21 & 0xFF000000000000) == 0x3000000000000)
  {
    v9 = 50332931;
    if ((v5 & 1) != 0)
    {
      v10 = 0;
      v11 = 0x100000000;
      v12 = 0x20000090603;
    }
    else
    {
      v9 = 50333183;
      v11 = 0x200000000;
      v12 = 0x2000E090603;
      v10 = 327680;
    }
    v16 = 0;
    v15 = v9 | v10;
    v14 = v12 | v11;
    v13 = xmmword_1820FDF60;
    v17 = 3327;
  }
  else
  {
    v13 = v19;
    v14 = (unint64_t)v21 >> 16;
    v15 = v20;
    v16 = *((_QWORD *)&v21 + 1);
    v17 = *(_WORD *)v22;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v22[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v22[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v22[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v22[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v22[2];
  *(_OWORD *)a2 = v13;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v3;
  *(_BYTE *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 33) = v5;
  *(_DWORD *)(a2 + 34) = v14;
  *(_WORD *)(a2 + 38) = WORD2(v14);
  *(_QWORD *)(a2 + 40) = v16;
  *(_WORD *)(a2 + 48) = v17;
  return outlined retain of Date.FormatStyle((uint64_t)&v19);
}

void sub_18197E8E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

ValueMetadata *type metadata accessor for NSURLSession.CancelState.State()
{
  return &type metadata for NSURLSession.CancelState.State;
}

uint64_t _NSAlgToCompAlg(unint64_t a1)
{
  if (a1 >= 5)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unrecognized compression algorithm value: %ld"), a1), 0));
  return dword_1821A83E0[a1];
}

id Date.description.getter()
{
  double *v0;
  id v1;
  id v2;
  id v3;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
  v2 = objc_msgSend(v1, sel_description);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a5;
  v22 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v20 - v10;
  v20 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)(a4 + 8) + 16))(a3, v9);
  v12 = swift_checkMetadataState();
  v24 = a1;
  dispatch thunk of RawRepresentable.rawValue.getter();
  v13 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
    v14 = specialized numericCast<A, B>(_:)((uint64_t)v11, AssociatedTypeWitness, v13);
  else
    v14 = specialized numericCast<A, B>(_:)((uint64_t)v11, AssociatedTypeWitness);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, AssociatedTypeWitness);
  v16 = objc_allocWithZone((Class)NSError);
  v17 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v16, sel_initWithDomain_code_userInfo_, v17, v15, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  (*(void (**)(id, uint64_t, uint64_t))(a4 + 72))(v18, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v24, v12);
}

uint64_t CustomNSError<>.errorCode.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v13 - v7;
  dispatch thunk of RawRepresentable.rawValue.getter();
  v9 = *(_QWORD *)(a4 + 8);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
    v10 = specialized numericCast<A, B>(_:)((uint64_t)v8, AssociatedTypeWitness, v9);
  else
    v10 = specialized numericCast<A, B>(_:)((uint64_t)v8, AssociatedTypeWitness);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return v11;
}

uint64_t specialized numericCast<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t, __n128);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t result;
  char v40;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t AssociatedConformanceWitness;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  uint64_t AssociatedTypeWitness;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;

  v53 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v52 = (char *)&v50 - v5;
  v6 = *(_QWORD **)(a2 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v55 = (char *)&v50 - v11;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v50 - v13;
  MEMORY[0x1E0C80A78](v15);
  v54 = (char *)&v50 - v16;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v50 - v18;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v50 - v21;
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v50 - v25;
  v27 = (void (*)(char *, uint64_t, uint64_t, __n128))v6[2];
  v27((char *)&v50 - v25, a1, a2, v24);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  ((void (*)(char *, char *, uint64_t))v27)(v22, v26, a2);
  if ((a1 & 1) == 0)
  {
    v29 = (void (*)(char *, uint64_t))v6[1];
    v30 = v22;
LABEL_7:
    v29(v30, a2);
    goto LABEL_8;
  }
  v50 = v9;
  v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v29 = (void (*)(char *, uint64_t))v6[1];
  v29(v22, a2);
  if (v28 <= 64)
    goto LABEL_8;
  ((void (*)(char *, char *, uint64_t))v27)(v19, v26, a2);
  v57 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_27:
      dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_28:
      v30 = v19;
      goto LABEL_7;
    }
  }
  else
  {
    v40 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v43 = __OFSUB__(v41, 64);
    v42 = v41 - 64 < 0;
    if ((v40 & 1) == 0)
      goto LABEL_25;
    if (v41 <= 64)
    {
      v46 = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      MEMORY[0x186DA5E34](&unk_18206D478, 256, v46, AssociatedConformanceWitness);
      v48 = v54;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(v46) = dispatch thunk of static Comparable.< infix(_:_:)();
      v29(v48, a2);
      v49 = (void (*)(char *, char *, uint64_t))v6[4];
      v36 = v50;
      v49(v50, v19, a2);
      if ((v46 & 1) != 0)
        goto LABEL_32;
      dispatch thunk of BinaryInteger._lowWord.getter();
      v30 = v36;
      goto LABEL_7;
    }
  }
  lazy protocol witness table accessor for type Int and conformance Int();
  v44 = v54;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v45 = dispatch thunk of static Comparable.< infix(_:_:)();
  v29(v44, a2);
  v29(v19, a2);
  if ((v45 & 1) != 0)
  {
    __break(1u);
LABEL_25:
    if (v42 == v43)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_8:
  v31 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, char *, uint64_t))v27)(v14, v26, a2);
  if (v31 < 65)
  {
    v35 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v29(v14, a2);
    if (v35 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v29(v14, a2);
  }
  v32 = v55;
  ((void (*)(char *, char *, uint64_t))v27)(v55, v26, a2);
  v57 = 0x7FFFFFFFFFFFFFFFLL;
  v33 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v34 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v33 & 1) == 0)
  {
    if (v34 >= 64)
    {
      v56 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_19;
    }
LABEL_18:
    dispatch thunk of BinaryInteger._lowWord.getter();
    v29(v32, a2);
LABEL_20:
    v38 = dispatch thunk of BinaryInteger._lowWord.getter();
    v29(v26, a2);
    return v38;
  }
  if (v34 <= 64)
    goto LABEL_18;
  lazy protocol witness table accessor for type Int and conformance Int();
LABEL_19:
  v36 = v54;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v37 = dispatch thunk of static Comparable.< infix(_:_:)();
  v29(v36, a2);
  v29(v32, a2);
  if ((v37 & 1) == 0)
    goto LABEL_20;
  __break(1u);
LABEL_32:
  result = ((uint64_t (*)(char *, uint64_t))v29)(v36, a2);
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t, __n128);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t result;
  char v40;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t AssociatedConformanceWitness;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t AssociatedTypeWitness;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v53 = (char *)&v50 - v6;
  v7 = *(_QWORD **)(a2 - 8);
  MEMORY[0x1E0C80A78](v8);
  v55 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v50 - v11;
  MEMORY[0x1E0C80A78](v13);
  v52 = (char *)&v50 - v14;
  MEMORY[0x1E0C80A78](v15);
  v54 = (char *)&v50 - v16;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v50 - v18;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v50 - v21;
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v50 - v25;
  v27 = (void (*)(char *, uint64_t, uint64_t, __n128))v7[2];
  v27((char *)&v50 - v25, a1, a2, v24);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  ((void (*)(char *, char *, uint64_t))v27)(v22, v26, a2);
  if ((a1 & 1) == 0)
  {
    v29 = (void (*)(char *, uint64_t))v7[1];
    v30 = v22;
LABEL_7:
    v29(v30, a2);
    goto LABEL_8;
  }
  v50 = v5;
  v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v29 = (void (*)(char *, uint64_t))v7[1];
  v29(v22, a2);
  if (v28 < 65)
    goto LABEL_8;
  ((void (*)(char *, char *, uint64_t))v27)(v19, v26, a2);
  v57 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_27:
      dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_28:
      v30 = v19;
      goto LABEL_7;
    }
  }
  else
  {
    v40 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v43 = __OFSUB__(v41, 64);
    v42 = v41 - 64 < 0;
    if ((v40 & 1) == 0)
      goto LABEL_25;
    if (v41 <= 64)
    {
      v46 = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      MEMORY[0x186DA5E34](&unk_18206D478, 256, v46, AssociatedConformanceWitness);
      v48 = v54;
      dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
      LOBYTE(v46) = dispatch thunk of static Comparable.< infix(_:_:)();
      v29(v48, a2);
      v49 = (void (*)(char *, char *, uint64_t))v7[4];
      v36 = v52;
      v49(v52, v19, a2);
      if ((v46 & 1) != 0)
        goto LABEL_32;
      dispatch thunk of BinaryInteger._lowWord.getter();
      v30 = v36;
      goto LABEL_7;
    }
  }
  lazy protocol witness table accessor for type Int and conformance Int();
  v44 = v54;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v45 = dispatch thunk of static Comparable.< infix(_:_:)();
  v29(v44, a2);
  v29(v19, a2);
  if ((v45 & 1) != 0)
  {
    __break(1u);
LABEL_25:
    if (v42 == v43)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_8:
  v31 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, char *, uint64_t))v27)(v12, v26, a2);
  if (v31 <= 64)
  {
    v35 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v29(v12, a2);
    if (v35 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v29(v12, a2);
  }
  v32 = v55;
  ((void (*)(char *, char *, uint64_t))v27)(v55, v26, a2);
  v57 = 0x7FFFFFFFFFFFFFFFLL;
  v33 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v34 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v33 & 1) == 0)
  {
    if (v34 >= 64)
    {
      v56 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_19;
    }
LABEL_17:
    dispatch thunk of BinaryInteger._lowWord.getter();
    v29(v32, a2);
LABEL_20:
    v38 = dispatch thunk of BinaryInteger._lowWord.getter();
    v29(v26, a2);
    return v38;
  }
  if (v34 < 65)
    goto LABEL_17;
  lazy protocol witness table accessor for type Int and conformance Int();
LABEL_19:
  v36 = v54;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v37 = dispatch thunk of static Comparable.< infix(_:_:)();
  v29(v36, a2);
  v29(v32, a2);
  if ((v37 & 1) == 0)
    goto LABEL_20;
  __break(1u);
LABEL_32:
  result = ((uint64_t (*)(char *, uint64_t))v29)(v36, a2);
  __break(1u);
  return result;
}

void sub_18197F6AC(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_18197F6CC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *i;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  char v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  char v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;

  v6 = v5;
  v12 = v5[2];
  if (!*v5)
    v12 = 0;
  v141 = v12;
  ++v5[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Rope.builder<A>(removing:in:)(a1, a2, v13, (uint64_t)&v151);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Rope.Builder.insertBeforeTip<A>(_:)(a3, a4, a5);
  v15 = v155;
  v16 = v156;
  v17 = v157;
  v156 = 0;
  v157 = 0;
  v155 = 0;
  if (v16)
  {
    if (v15)
    {
      v18 = v153;
      v19 = v154;
      v154 = 0;
      v153 = 0uLL;
      if (*((_QWORD *)&v18 + 1))
      {
        specialized Rope.Builder._appendNow(_:)(v18, *((uint64_t *)&v18 + 1), v19);
        outlined consume of Rope<AttributedString._InternalRun>._Item?(v153, *((uint64_t *)&v153 + 1));
      }
      *(_QWORD *)&v153 = v15;
      *((_QWORD *)&v153 + 1) = v16;
      v154 = v17;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v20 = v153;
  v21 = v154;
  v154 = 0;
  v153 = 0uLL;
  if (*((_QWORD *)&v20 + 1))
    v14.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v20, *((uint64_t *)&v20 + 1), v21);
LABEL_19:
  v29 = v158;
  while (v29[2])
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v23 = v29[2];
      if (!v23)
        goto LABEL_170;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v29);
      v29 = (_QWORD *)result;
      v23 = *(_QWORD *)(result + 16);
      if (!v23)
      {
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
        goto LABEL_173;
      }
    }
    v24 = v23 - 1;
    v25 = &v29[4 * v24];
    v26 = v25[4];
    v27 = v25[5];
    v28 = v25[6];
    v29[2] = v24;
    v158 = v29;
    if (v26)
    {
      specialized Rope.Builder._insertBeforeTip(_:)(v26, v27, v28);
      goto LABEL_19;
    }
  }
  v140 = a2;
  v139 = a1;
  v30 = v153;
  v31 = v154;
  v153 = 0uLL;
  v154 = 0;
  if (*((_QWORD *)&v30 + 1))
    v14.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v30, *((uint64_t *)&v30 + 1), v31);
  v32 = *((_QWORD *)&v151 + 1);
  v34 = *((_QWORD *)&v152 + 1);
  v33 = v152;
  *(_QWORD *)&v145 = 0;
  MEMORY[0x186DA9E90](&v145, 8, v31, v14);
  v35 = v145;
  for (i = (_QWORD *)v151; i[2]; v35 = v46)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v37 = i[2];
      if (!v37)
        goto LABEL_28;
    }
    else
    {
      i = specialized _ArrayBuffer._consumeAndCreateNew()(i);
      v37 = i[2];
      if (!v37)
      {
LABEL_28:
        __break(1u);
        break;
      }
    }
    v38 = v37 - 1;
    v39 = &i[4 * v38];
    v40 = v39[4];
    v41 = v39[5];
    v42 = v39[6];
    v43 = v39[7];
    i[2] = v38;
    v32 = specialized static Rope.join(_:_:)(v40, v41, v42, v43, v32, v33, v34);
    v33 = v44;
    v34 = v45;
  }
  *(_QWORD *)&v151 = i;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v6 = v32;
  v6[1] = v33;
  v6[2] = v34;
  v6[3] = v35;
  v143 = (unint64_t *)v6;
  v47 = v153;
  v48 = v155;
  v49 = v156;
  swift_bridgeObjectRelease();
  outlined consume of Rope<AttributedString._InternalRun>._Item?(v47, *((uint64_t *)&v47 + 1));
  outlined consume of Rope<AttributedString._InternalRun>._Item?(v48, v49);
  result = swift_bridgeObjectRelease();
  if (v32)
    v50 = v34;
  else
    v50 = 0;
  v51 = v50 - v141;
  if (__OFSUB__(v50, v141))
    goto LABEL_181;
  v52 = v140 + v51;
  if (__OFADD__(v140, v51))
  {
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
    goto LABEL_186;
  }
  if (v52 < 1 || v52 >= v50)
    goto LABEL_87;
  if (!v32 || !*(_WORD *)(v32 + 16))
  {
    v66 = swift_unknownObjectRetain();
    v67 = specialized Rope._endPath.getter(v66);
    result = swift_unknownObjectRelease();
    v58 = 0;
    v55 = 0;
    if (!v32)
      goto LABEL_61;
    goto LABEL_60;
  }
  v54 = *(unsigned __int8 *)(v32 + 18);
  v142 = v140 + v51;
  if (*(_BYTE *)(v32 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v55 = v52;
    v56 = v32;
    while (1)
    {
      v59 = *(unsigned __int16 *)(v56 + 16);
      if (!*(_WORD *)(v56 + 16))
        goto LABEL_44;
      v60 = *(_QWORD *)(v56 + 40);
      v61 = __OFSUB__(v55, v60);
      v62 = v55 - v60;
      if (v61)
        goto LABEL_176;
      if (__OFADD__(v62, 1))
      {
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
        goto LABEL_182;
      }
      if (v62 + 1 >= 1)
        break;
      v59 = 0;
LABEL_45:
      v57 = (4 * *(_BYTE *)(v56 + 18) + 8) & 0x3C;
      v54 = ((-15 << v57) - 1) & v54 | (v59 << v57);
      v58 = *(_QWORD *)(v56 + 24 + 24 * v59);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v56 = v58;
      if (!*(_BYTE *)(v58 + 18))
        goto LABEL_138;
    }
    if ((_DWORD)v59 != 1)
    {
      v63 = (uint64_t *)(v56 + 64);
      v64 = 1;
      while (1)
      {
        v65 = *v63;
        v63 += 3;
        v55 = v62 - v65;
        if (__OFSUB__(v62, v65))
          goto LABEL_171;
        if (__OFADD__(v55, 1))
          goto LABEL_172;
        if (v55 + 1 < 1)
          break;
        ++v64;
        v62 = v55;
        if (v59 == v64)
          goto LABEL_44;
      }
      v59 = v64;
      v55 = v62;
      goto LABEL_45;
    }
    v55 = v62;
LABEL_44:
    if (v55)
      goto LABEL_175;
    goto LABEL_45;
  }
  result = swift_unknownObjectRetain_n();
  v55 = v52;
  v58 = v32;
LABEL_138:
  v127 = *(unsigned __int16 *)(v58 + 16);
  if (!*(_WORD *)(v58 + 16))
    goto LABEL_157;
  v128 = *(_QWORD *)(v58 + 24);
  v61 = __OFSUB__(v55, v128);
  v129 = v55 - v128;
  if (v61)
  {
LABEL_196:
    __break(1u);
    goto LABEL_197;
  }
  if (__OFADD__(v129, 1))
  {
LABEL_197:
    __break(1u);
    goto LABEL_198;
  }
  if (v129 + 1 < 1)
  {
    v127 = 0;
  }
  else
  {
    if ((_DWORD)v127 == 1)
    {
      v55 = v129;
LABEL_157:
      if (v55)
      {
LABEL_195:
        __break(1u);
        goto LABEL_196;
      }
      goto LABEL_158;
    }
    v133 = (uint64_t *)(v58 + 48);
    v134 = 1;
    while (1)
    {
      v135 = *v133;
      v133 += 3;
      v55 = v129 - v135;
      if (__OFSUB__(v129, v135))
        goto LABEL_183;
      if (__OFADD__(v55, 1))
        goto LABEL_184;
      if (v55 + 1 < 1)
        break;
      ++v134;
      v129 = v55;
      if (v127 == v134)
        goto LABEL_157;
    }
    v127 = v134;
    v55 = v129;
  }
LABEL_158:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v67 = v54 & 0xFFFFFFFFFFFFF0FFLL | (v127 << 8);
  v52 = v142;
LABEL_60:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v67, v58, v32, v33);
  result = swift_unknownObjectRelease();
LABEL_61:
  if (v55)
  {
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }
  v148 = v35;
  v149 = v67;
  v150 = v58;
  if (v58)
  {
    v68 = v58 + 24 * ((v67 >> ((4 * *(_BYTE *)(v58 + 18) + 8) & 0x3C)) & 0xF);
    v69 = *(_QWORD *)(v68 + 32);
    v70 = *(_QWORD *)(v68 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32)
      goto LABEL_64;
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v67, v32);
    v69 = v77;
    v70 = v78;
    swift_unknownObjectRelease();
    if (v32)
    {
LABEL_64:
      v71 = *(unsigned __int8 *)(v32 + 18);
      swift_unknownObjectRetain();
      if (v67 > v71)
        goto LABEL_65;
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
  }
  if (!v67)
    goto LABEL_74;
LABEL_65:
  if (v58)
  {
    v72 = (4 * *(_BYTE *)(v58 + 18) + 8) & 0x3C;
    if (((v67 >> v72) & 0xF) != 0)
    {
      v67 = ((((v67 >> v72) & 0xF) - 1) << v72) | ((-15 << v72) - 1) & v67;
      v149 = v67;
      swift_unknownObjectRelease();
LABEL_71:
      v74 = v58 + 24 * ((v67 >> ((4 * *(_BYTE *)(v58 + 18) + 8) & 0x3C)) & 0xF);
      v75 = *(_QWORD *)(v74 + 32);
      v76 = *(_QWORD *)(v74 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_76;
    }
  }
  swift_unknownObjectRetain();
  v73 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v148, v32);
  result = swift_unknownObjectRelease_n();
  if ((v73 & 1) == 0)
  {
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
    goto LABEL_195;
  }
  if (v148 != v35)
    goto LABEL_187;
  v67 = v149;
  v58 = v150;
  if (v150)
    goto LABEL_71;
LABEL_75:
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v67, v32);
  v75 = v79;
  v76 = v80;
  swift_unknownObjectRelease();
LABEL_76:
  if ((specialized static Dictionary<>.== infix(_:_:)(v75, v69) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
LABEL_87:
    v83 = (uint64_t *)v143;
    v89 = v139;
    if (v139 < 1)
      return result;
    goto LABEL_88;
  }
  v81 = specialized static Set.== infix(_:_:)(v76, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v81 & 1) == 0)
    goto LABEL_87;
  v82 = v52;
  v83 = (uint64_t *)v143;
  v84 = specialized Rope._remove(at:)((uint64_t)&v151, v35, v67);
  v85 = *v143;
  v86 = v143[3];
  if (v84 < specialized Rope._endPath.getter(*v143) && *(_BYTE *)(v85 + 18))
  {
    v87 = (v84 >> ((4 * *(_BYTE *)(v85 + 18) + 8) & 0x3C)) & 0xF;
    swift_unknownObjectRetain();
    specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v85 + 24, v87, v84);
    swift_unknownObjectRelease();
  }
  v88 = v151;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v85)
    goto LABEL_201;
  result = specialized Rope._Node._prepareModify(at:)(v84, (uint64_t)&v151);
  v145 = v151;
  v146 = v152;
  v147 = v153;
  v89 = v139;
  if (__OFADD__(*((_QWORD *)&v151 + 1), v88))
    goto LABEL_194;
  *((_QWORD *)&v145 + 1) = *((_QWORD *)&v151 + 1) + v88;
  v35 = v86 + 1;
  v143[3] = v35;
  if (!*v143)
  {
LABEL_202:
    __break(1u);
    return result;
  }
  v52 = v82;
  specialized Rope._Node._finalizeModify(_:)(&v144, &v145);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v139 < 1)
    return result;
LABEL_88:
  if (v52 <= v89)
    return result;
  v90 = *v83;
  v91 = v83[2];
  if (*v83)
    v92 = v83[2];
  else
    v92 = 0;
  if (v92 < v89)
    goto LABEL_185;
  v93 = v83[1];
  if (!v90 || !*(_WORD *)(v90 + 16) || v91 <= v89)
  {
    v104 = swift_unknownObjectRetain();
    v105 = specialized Rope._endPath.getter(v104);
    result = swift_unknownObjectRelease();
    v97 = 0;
    v106 = 0;
    v107 = 0;
    if (!v90)
      goto LABEL_116;
    goto LABEL_115;
  }
  v94 = *(unsigned __int8 *)(v90 + 18);
  if (*(_BYTE *)(v90 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v95 = v90;
    while (1)
    {
      v98 = *(unsigned __int16 *)(v95 + 16);
      if (!*(_WORD *)(v95 + 16))
        goto LABEL_99;
      v99 = *(_QWORD *)(v95 + 40);
      v61 = __OFSUB__(v89, v99);
      v100 = v89 - v99;
      if (v61)
        goto LABEL_179;
      if (__OFADD__(v100, 1))
        goto LABEL_180;
      if (v100 + 1 >= 1)
        break;
      v98 = 0;
LABEL_100:
      v96 = (4 * *(_BYTE *)(v95 + 18) + 8) & 0x3C;
      v94 = ((-15 << v96) - 1) & v94 | (v98 << v96);
      v97 = *(_QWORD *)(v95 + 24 + 24 * v98);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v95 = v97;
      if (!*(_BYTE *)(v97 + 18))
        goto LABEL_145;
    }
    if ((_DWORD)v98 != 1)
    {
      v101 = (uint64_t *)(v95 + 64);
      v102 = 1;
      while (1)
      {
        v103 = *v101;
        v101 += 3;
        v89 = v100 - v103;
        if (__OFSUB__(v100, v103))
          break;
        if (__OFADD__(v89, 1))
          goto LABEL_174;
        if (v89 + 1 < 1)
        {
          v98 = v102;
          v89 = v100;
          goto LABEL_100;
        }
        ++v102;
        v100 = v89;
        if (v98 == v102)
          goto LABEL_99;
      }
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
      goto LABEL_177;
    }
    v89 = v100;
LABEL_99:
    if (v89)
      goto LABEL_178;
    goto LABEL_100;
  }
  result = swift_unknownObjectRetain_n();
  v97 = v90;
LABEL_145:
  v130 = *(unsigned __int16 *)(v97 + 16);
  if (!*(_WORD *)(v97 + 16))
    goto LABEL_165;
  v131 = *(_QWORD *)(v97 + 24);
  v61 = __OFSUB__(v89, v131);
  v132 = v89 - v131;
  if (v61)
  {
LABEL_199:
    __break(1u);
    goto LABEL_200;
  }
  if (__OFADD__(v132, 1))
  {
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
    goto LABEL_202;
  }
  if (v132 + 1 >= 1)
  {
    if ((_DWORD)v130 != 1)
    {
      v136 = (uint64_t *)(v97 + 48);
      v137 = 1;
      while (1)
      {
        v138 = *v136;
        v136 += 3;
        v89 = v132 - v138;
        if (__OFSUB__(v132, v138))
          goto LABEL_190;
        if (__OFADD__(v89, 1))
          goto LABEL_191;
        if (v89 + 1 < 1)
        {
          v130 = v137;
          v106 = v132;
          goto LABEL_167;
        }
        ++v137;
        v132 = v89;
        if (v130 == v137)
          goto LABEL_165;
      }
    }
    v89 = v132;
LABEL_165:
    if (v89)
    {
LABEL_198:
      __break(1u);
      goto LABEL_199;
    }
    v106 = 0;
    goto LABEL_167;
  }
  v130 = 0;
  v106 = v89;
LABEL_167:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v105 = v94 & 0xFFFFFFFFFFFFF0FFLL | (v130 << 8);
LABEL_115:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v105, v97, v90, v93);
  result = swift_unknownObjectRelease();
  v107 = v106;
LABEL_116:
  if (v107)
  {
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
    goto LABEL_192;
  }
  *(_QWORD *)&v145 = v35;
  *((_QWORD *)&v145 + 1) = v105;
  *(_QWORD *)&v146 = v97;
  if (v97)
  {
    v108 = (_QWORD *)(v97 + 24 * ((v105 >> ((4 * *(_BYTE *)(v97 + 18) + 8) & 0x3C)) & 0xF));
    v110 = v108[3];
    v109 = v108[4];
    v111 = v108[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v90)
      goto LABEL_119;
LABEL_128:
    if (v105)
      goto LABEL_120;
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  swift_unknownObjectRetain();
  v110 = specialized Rope._Node.subscript.getter(v105, v90);
  v109 = v118;
  v111 = v119;
  swift_unknownObjectRelease();
  if (!v90)
    goto LABEL_128;
LABEL_119:
  v112 = *(unsigned __int8 *)(v90 + 18);
  swift_unknownObjectRetain();
  if (v112 >= v105)
    goto LABEL_129;
LABEL_120:
  if (v97)
  {
    v113 = (4 * *(_BYTE *)(v97 + 18) + 8) & 0x3C;
    if (((v105 >> v113) & 0xF) != 0)
    {
      v35 = ((((v105 >> v113) & 0xF) - 1) << v113) | ((-15 << v113) - 1) & v105;
      *((_QWORD *)&v145 + 1) = v35;
      swift_unknownObjectRelease();
LABEL_126:
      v115 = v97 + 24 * ((v35 >> ((4 * *(_BYTE *)(v97 + 18) + 8) & 0x3C)) & 0xF);
      v116 = *(_QWORD *)(v115 + 32);
      v117 = *(_QWORD *)(v115 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_131;
    }
  }
  swift_unknownObjectRetain();
  v114 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v145, v90);
  result = swift_unknownObjectRelease_n();
  if ((v114 & 1) == 0)
    goto LABEL_193;
  if ((_QWORD)v145 != v35)
    goto LABEL_189;
  v35 = *((_QWORD *)&v145 + 1);
  v97 = v146;
  if ((_QWORD)v146)
    goto LABEL_126;
LABEL_130:
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v35, v90);
  v116 = v120;
  v117 = v121;
  swift_unknownObjectRelease();
LABEL_131:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Dictionary<>.== infix(_:_:)(v116, v109) & 1) != 0)
  {
    v122 = specialized static Set.== infix(_:_:)(v117, v111);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v122 & 1) != 0)
    {
      specialized Rope.update<A>(at:by:)(&v145, v143, v110);
      v123 = *v143;
      v124 = v143[1];
      v125 = v143[2];
      v126 = v143[3];
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v145, v123, v124, v125, v126);
      swift_unknownObjectRelease();
      specialized Rope._remove(at:)((uint64_t)&v148, v145, *((unint64_t *)&v145 + 1));
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease_n();
  }
}

{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *i;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char v100[8];
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  char v115[8];
  __int128 v116;
  uint64_t v117;
  char v118[8];
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v6 = v5;
  if (*v5)
    v10 = v5[2];
  else
    v10 = 0;
  ++v5[3];
  specialized Rope.builder<A>(removing:in:)(a1, a2, a3, (uint64_t)&v103);
  swift_unknownObjectRelease();
  v11 = swift_retain();
  specialized Rope.Builder.insertBeforeTip<A>(_:)(v11, a4, a5);
  v14 = v107;
  v13 = v108;
  v15 = v109;
  v108 = 0;
  v109 = 0;
  v107 = 0;
  if (v13)
  {
    if (v14)
    {
      v16 = v105;
      v17 = v106;
      v106 = 0;
      v105 = 0uLL;
      if (*((_QWORD *)&v16 + 1))
      {
        specialized Rope.Builder._appendNow(_:)(v16, *((uint64_t *)&v16 + 1), v17);
        outlined consume of Rope<AttributedString._InternalRun>._Item?(v105, *((uint64_t *)&v105 + 1));
      }
      *(_QWORD *)&v105 = v14;
      *((_QWORD *)&v105 + 1) = v13;
      v106 = v15;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v18 = v105;
  v19 = v106;
  v106 = 0;
  v105 = 0uLL;
  if (*((_QWORD *)&v18 + 1))
    v12.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v18, *((uint64_t *)&v18 + 1), v19);
LABEL_20:
  v27 = v110;
  while (v27[2])
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      v21 = v27[2];
      if (!v21)
        goto LABEL_91;
    }
    else
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      v27 = (_QWORD *)result;
      v21 = *(_QWORD *)(result + 16);
      if (!v21)
      {
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
    }
    v22 = v21 - 1;
    v23 = &v27[4 * v22];
    v24 = v23[4];
    v25 = v23[5];
    v26 = v23[6];
    v27[2] = v22;
    v110 = v27;
    if (v24)
    {
      specialized Rope.Builder._insertBeforeTip(_:)(v24, v25, v26);
      goto LABEL_20;
    }
  }
  v94 = v10;
  v28 = v105;
  v29 = v106;
  v105 = 0uLL;
  v106 = 0;
  if (*((_QWORD *)&v28 + 1))
    v12.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v28, *((uint64_t *)&v28 + 1), v29);
  v30 = *((_QWORD *)&v103 + 1);
  v32 = *((_QWORD *)&v104 + 1);
  v31 = v104;
  *(_QWORD *)&v97 = 0;
  MEMORY[0x186DA9E90](&v97, 8, v29, v12);
  v33 = v97;
  for (i = (_QWORD *)v103; i[2]; v33 = v44)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v35 = i[2];
      if (!v35)
        goto LABEL_29;
    }
    else
    {
      i = specialized _ArrayBuffer._consumeAndCreateNew()(i);
      v35 = i[2];
      if (!v35)
      {
LABEL_29:
        __break(1u);
        break;
      }
    }
    v36 = v35 - 1;
    v37 = &i[4 * v36];
    v38 = v37[4];
    v39 = v37[5];
    v40 = v37[6];
    v41 = v37[7];
    i[2] = v36;
    v30 = specialized static Rope.join(_:_:)(v38, v39, v40, v41, v30, v31, v32);
    v31 = v42;
    v32 = v43;
  }
  *(_QWORD *)&v103 = i;
  *v6 = v30;
  v6[1] = v31;
  v6[2] = v32;
  v6[3] = v33;
  v96 = (unint64_t *)v6;
  v45 = v105;
  v46 = v107;
  v47 = v108;
  swift_bridgeObjectRelease();
  outlined consume of Rope<AttributedString._InternalRun>._Item?(v45, *((uint64_t *)&v45 + 1));
  outlined consume of Rope<AttributedString._InternalRun>._Item?(v46, v47);
  result = swift_bridgeObjectRelease();
  if (v30)
    v48 = v32;
  else
    v48 = 0;
  v49 = v48 - v94;
  if (__OFSUB__(v48, v94))
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v50 = a2 + v49;
  if (__OFADD__(a2, v49))
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if (v50 >= 1 && v50 < v48)
  {
    AttributedString._InternalRuns._exactIndex(atUTF8Offset:)(a2 + v49, v30, v31, v32, v33, (unint64_t *)&v111);
    v116 = v111;
    v117 = v112;
    result = outlined init with take of LocalePreferences?((uint64_t)&v117, (uint64_t)v118, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    v52 = *((_QWORD *)&v116 + 1);
    v113 = v116;
    v114 = v117;
    if ((_QWORD)v116 == v33)
    {
      outlined init with take of LocalePreferences?((uint64_t)v118, (uint64_t)&v119, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
      if (v119)
      {
        v53 = v119 + 24 * ((v52 >> ((4 * *(_BYTE *)(v119 + 18) + 8) & 0x3C)) & 0xF);
        v54 = *(_QWORD *)(v53 + 32);
        v55 = *(_QWORD *)(v53 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v30)
          goto LABEL_43;
      }
      else
      {
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v52, v30);
        v54 = v62;
        v55 = v63;
        swift_unknownObjectRelease();
        if (v30)
        {
LABEL_43:
          v56 = *(unsigned __int8 *)(v30 + 18);
          swift_unknownObjectRetain();
          if (v52 > v56)
          {
LABEL_44:
            outlined init with take of LocalePreferences?((uint64_t)v118, (uint64_t)&v120, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
            if (v120 && (v57 = (4 * *(_BYTE *)(v120 + 18) + 8) & 0x3C, ((v52 >> v57) & 0xF) != 0))
            {
              v52 = ((((v52 >> v57) & 0xF) - 1) << v57) | ((-15 << v57) - 1) & v52;
              *((_QWORD *)&v113 + 1) = v52;
              result = swift_unknownObjectRelease();
            }
            else
            {
              swift_unknownObjectRetain();
              v58 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v113, v30);
              result = swift_unknownObjectRelease_n();
              if ((v58 & 1) == 0)
              {
LABEL_98:
                __break(1u);
                goto LABEL_99;
              }
              v52 = *((_QWORD *)&v113 + 1);
            }
            if ((_QWORD)v113 != v33)
              goto LABEL_96;
            if (v114)
            {
              v59 = v114 + 24 * ((v52 >> ((4 * *(_BYTE *)(v114 + 18) + 8) & 0x3C)) & 0xF);
              v60 = *(_QWORD *)(v59 + 32);
              v61 = *(_QWORD *)(v59 + 40);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              goto LABEL_56;
            }
LABEL_55:
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v52, v30);
            v60 = v64;
            v61 = v65;
            swift_unknownObjectRelease();
LABEL_56:
            if ((specialized static Dictionary<>.== infix(_:_:)(v60, v54) & 1) != 0)
            {
              v66 = specialized static Set.== infix(_:_:)(v61, v55);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v66 & 1) == 0)
                goto LABEL_67;
              v67 = specialized Rope._remove(at:)((uint64_t)&v103, v33, v52);
              v68 = *v96;
              v69 = v96[3];
              if (v67 < specialized Rope._endPath.getter(*v96) && *(_BYTE *)(v68 + 18))
              {
                v70 = (v67 >> ((4 * *(_BYTE *)(v68 + 18) + 8) & 0x3C)) & 0xF;
                swift_unknownObjectRetain();
                specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v68 + 24, v70, v67);
                swift_unknownObjectRelease();
              }
              v71 = v103;
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              if (!v68)
                goto LABEL_101;
              result = specialized Rope._Node._prepareModify(at:)(v67, (uint64_t)&v103);
              v97 = v103;
              v98 = v104;
              v99 = v105;
              if (__OFADD__(*((_QWORD *)&v103 + 1), v71))
              {
LABEL_100:
                __break(1u);
LABEL_101:
                __break(1u);
                goto LABEL_102;
              }
              *((_QWORD *)&v97 + 1) = *((_QWORD *)&v103 + 1) + v71;
              v96[3] = v69 + 1;
              if (!*v96)
              {
LABEL_102:
                __break(1u);
                return result;
              }
              specialized Rope._Node._finalizeModify(_:)(&v101, &v97);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            goto LABEL_67;
          }
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
      }
      if (v52)
        goto LABEL_44;
      goto LABEL_54;
    }
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
LABEL_67:
  result = a1;
  if (a1 < 1 || v50 <= a1)
    return result;
  v72 = *v96;
  v73 = v96[3];
  AttributedString._InternalRuns._exactIndex(atUTF8Offset:)(a1, *v96, v96[1], v96[2], v73, (unint64_t *)&v97);
  v113 = v97;
  v114 = v98;
  result = outlined init with take of LocalePreferences?((uint64_t)&v114, (uint64_t)v115, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  v74 = *((_QWORD *)&v113 + 1);
  v101 = v113;
  v102 = v114;
  if ((_QWORD)v113 != v73)
    goto LABEL_95;
  outlined init with take of LocalePreferences?((uint64_t)v115, (uint64_t)&v121, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v121)
  {
    v75 = (_QWORD *)(v121 + 24 * ((v74 >> ((4 * *(_BYTE *)(v121 + 18) + 8) & 0x3C)) & 0xF));
    v77 = v75[3];
    v76 = v75[4];
    v78 = v75[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v72)
      goto LABEL_72;
LABEL_82:
    if (v74)
      goto LABEL_73;
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  swift_unknownObjectRetain();
  v77 = specialized Rope._Node.subscript.getter(v74, v72);
  v76 = v85;
  v78 = v86;
  swift_unknownObjectRelease();
  if (!v72)
    goto LABEL_82;
LABEL_72:
  v79 = *(unsigned __int8 *)(v72 + 18);
  swift_unknownObjectRetain();
  if (v79 >= v74)
    goto LABEL_83;
LABEL_73:
  outlined init with take of LocalePreferences?((uint64_t)v115, (uint64_t)&v122, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v122 && (v80 = (4 * *(_BYTE *)(v122 + 18) + 8) & 0x3C, ((v74 >> v80) & 0xF) != 0))
  {
    v74 = ((((v74 >> v80) & 0xF) - 1) << v80) | ((-15 << v80) - 1) & v74;
    *((_QWORD *)&v101 + 1) = v74;
    result = swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
    v81 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v101, v72);
    result = swift_unknownObjectRelease_n();
    if ((v81 & 1) == 0)
    {
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    v74 = *((_QWORD *)&v101 + 1);
  }
  if ((_QWORD)v101 != v73)
    goto LABEL_97;
  if (v102)
  {
    v82 = v102 + 24 * ((v74 >> ((4 * *(_BYTE *)(v102 + 18) + 8) & 0x3C)) & 0xF);
    v83 = *(_QWORD *)(v82 + 32);
    v84 = *(_QWORD *)(v82 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_85;
  }
LABEL_84:
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v74, v72);
  v83 = v87;
  v84 = v88;
  swift_unknownObjectRelease();
LABEL_85:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Dictionary<>.== infix(_:_:)(v83, v76) & 1) != 0)
  {
    v89 = specialized static Set.== infix(_:_:)(v84, v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v89 & 1) != 0)
    {
      specialized Rope.update<A>(at:by:)(&v101, v96, v77);
      v90 = *v96;
      v91 = v96[1];
      v92 = v96[2];
      v93 = v96[3];
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v101, v90, v91, v92, v93);
      swift_unknownObjectRelease();
      specialized Rope._remove(at:)((uint64_t)v100, v101, *((unint64_t *)&v101 + 1));
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease_n();
  }
}

uint64_t outlined init with take of Rope<AttributedString._InternalRun>._UnmanagedLeaf?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AttributedString.append<A>(_:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v7 = *v3;
  v8 = *(_OWORD *)(*v3 + 32);
  v20 = *(_OWORD *)(*v3 + 16);
  v21 = v8;
  v22 = *(_OWORD *)(v7 + 48);
  *(_QWORD *)&v13 = BigString.endIndex.getter();
  *((_QWORD *)&v13 + 1) = v9;
  v14 = v10;
  v15 = v11;
  v16 = v13;
  v17 = v9;
  v18 = v10;
  v19 = v11;
  return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v13, a1, a2, a3);
}

uint64_t specialized AttributedString.replaceSubrange<A, B>(_:with:)(_OWORD *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v22[7];
  _OWORD v23[4];

  v5 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = (_QWORD *)*v4;
    v11 = *(_OWORD *)(*v4 + 16);
    v12 = *(_OWORD *)(*v4 + 48);
    v23[1] = *(_OWORD *)(*v4 + 32);
    v23[2] = v12;
    v23[0] = v11;
    v13 = v10[8];
    v14 = v10[9];
    v15 = v10[10];
    v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v23);
    swift_unknownObjectRetain();
    *v5 = AttributedString.Guts.init(string:runs:)(v23, v13, v14, v15, v16);
    swift_release();
  }
  v17 = (_OWORD *)*v5;
  v18 = v17[2];
  v22[4] = v17[1];
  v22[5] = v18;
  v22[6] = v17[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v19 = a1[1];
  v22[0] = *a1;
  v22[1] = v19;
  v20 = a1[3];
  v22[2] = a1[2];
  v22[3] = v20;
  return AttributedString.Guts.replaceSubrange<A>(_:with:)(v22, a2, a3, a4);
}

uint64_t AttributedString.Guts.replaceSubrange<A>(_:with:)(_QWORD *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  _OWORD *v4;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  void (*v21)(_OWORD *, _QWORD);
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE v31[48];
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[48];
  _BYTE v38[48];
  _OWORD v39[17];

  (*(void (**)(_OWORD **__return_ptr, ValueMetadata *, uint64_t))(a4 + 64))(&v32, a3, a4);
  v8 = v32[2];
  v39[3] = v32[1];
  v39[4] = v8;
  v29 = v33;
  v39[5] = v32[3];
  v39[6] = v33;
  v27 = v35;
  v39[7] = v34;
  v39[8] = v35;
  v39[9] = v36;
  swift_unknownObjectRetain();
  swift_release();
  v9 = v4[2];
  v39[13] = v4[1];
  v39[14] = v9;
  v39[15] = v4[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v31);
  v10 = BigSubstring.UnicodeScalarView.isIdentical(to:)();
  outlined release of Locale((uint64_t)&v32);
  v30 = v29 >> 11;
  v11 = v27 >> 11;
  v12 = AttributedStringProtocol.__guts.getter(a3, a4);
  v13 = *a1 >> 11;
  v14 = a1[4];
  v15 = v14 >> 11;
  if ((v10 & 1) != 0)
  {
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v13, v14 >> 11, v12, v30, v11);
    result = v13;
    v17 = v15;
    v18 = 0;
LABEL_7:
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(result, v17, v18, 0);
    swift_release();
    return swift_unknownObjectRelease();
  }
  v25 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v13, v14 >> 11);
  v26 = v19;
  v20 = v4[2];
  v39[10] = v4[1];
  v39[11] = v20;
  v39[12] = v4[3];
  BigString.utf8.getter();
  v28 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v37);
  swift_unknownObjectRetain();
  v21 = (void (*)(_OWORD *, _QWORD))BigString.unicodeScalars.modify();
  BigString.UnicodeScalarView.replaceSubrange(_:with:)();
  v21(v39, 0);
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v13, v15, v12, v30, v11);
  v22 = v4[2];
  v39[0] = v4[1];
  v39[1] = v22;
  v39[2] = v4[3];
  BigString.utf8.getter();
  v23 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v38);
  v24 = v23 - v28;
  if (__OFSUB__(v23, v28))
  {
    __break(1u);
    goto LABEL_9;
  }
  v17 = v26 + v24;
  if (__OFADD__(v26, v24))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = v25;
  if (v17 >= v25)
  {
    v18 = 1;
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t AttributedStringProtocol.__guts.getter(ValueMetadata *a1, uint64_t a2)
{
  _QWORD v3[10];

  if (a1 == &type metadata for AttributedString || a1 == &type metadata for AttributedSubstring)
    return swift_retain();
  (*(void (**)(_QWORD *__return_ptr))(a2 + 56))(v3);
  return v3[0];
}

uint64_t AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  int v85;
  char v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  int64_t v111;
  unint64_t v112;
  int64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157[4];
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;

  if (result != a2)
  {
    v3 = v2;
    v161 = result;
    v153 = result;
    v4 = AttributedString.Guts._characterInvalidatedAttributes(at:)(result);
    v152 = v5;
    swift_bridgeObjectRetain();
    result = Set.init(minimumCapacity:)();
    v6 = 0;
    *(_QWORD *)&v162 = result;
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v4 + 64;
    v10 = v8 & *(_QWORD *)(v4 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    while (1)
    {
      if (v10)
      {
        v12 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v13 = v12 | (v6 << 6);
        goto LABEL_6;
      }
      v17 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_329:
        __break(1u);
        goto LABEL_330;
      }
      if (v17 >= v11)
        break;
      v18 = *(_QWORD *)(v9 + 8 * v17);
      ++v6;
      if (!v18)
      {
        v6 = v17 + 1;
        if (v17 + 1 >= v11)
          break;
        v18 = *(_QWORD *)(v9 + 8 * v6);
        if (!v18)
        {
          v6 = v17 + 2;
          if (v17 + 2 >= v11)
            break;
          v18 = *(_QWORD *)(v9 + 8 * v6);
          if (!v18)
          {
            v6 = v17 + 3;
            if (v17 + 3 >= v11)
              break;
            v18 = *(_QWORD *)(v9 + 8 * v6);
            if (!v18)
            {
              v6 = v17 + 4;
              if (v17 + 4 >= v11)
                break;
              v18 = *(_QWORD *)(v9 + 8 * v6);
              if (!v18)
              {
                v19 = v17 + 5;
                if (v19 >= v11)
                  break;
                v18 = *(_QWORD *)(v9 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    v6 = v19 + 1;
                    if (__OFADD__(v19, 1))
                      break;
                    if (v6 >= v11)
                      goto LABEL_26;
                    v18 = *(_QWORD *)(v9 + 8 * v6);
                    ++v19;
                    if (v18)
                      goto LABEL_25;
                  }
LABEL_371:
                  __break(1u);
LABEL_372:
                  __break(1u);
LABEL_373:
                  __break(1u);
LABEL_374:
                  __break(1u);
                  goto LABEL_375;
                }
                v6 = v19;
              }
            }
          }
        }
      }
LABEL_25:
      v10 = (v18 - 1) & v18;
      v13 = __clz(__rbit64(v18)) + (v6 << 6);
LABEL_6:
      v14 = (unint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
      v15 = *v14;
      v16 = v14[1];
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((unint64_t *)&v164, v15, v16);
      result = swift_bridgeObjectRelease();
    }
LABEL_26:
    result = swift_release();
    v157[0] = v162;
    if (v153 < 0)
    {
LABEL_369:
      __break(1u);
LABEL_370:
      __break(1u);
      goto LABEL_371;
    }
    v21 = v2[8];
    v20 = v2[9];
    v22 = v2[10];
    v23 = v2[11];
    v156 = v2;
    if (v153)
    {
      swift_unknownObjectRetain();
      swift_retain();
      v24 = v22;
      result = specialized Rope._endPath.getter(v21);
      v25 = result;
      if (v21)
      {
        result = swift_unknownObjectRelease();
        v26 = 0;
      }
      else
      {
        v26 = 0;
        v20 = 0;
        v24 = 0;
      }
      goto LABEL_74;
    }
    if (v21)
    {
      if (v22 < 0)
      {
LABEL_386:
        __break(1u);
LABEL_387:
        __break(1u);
        goto LABEL_388;
      }
      if (*(_WORD *)(v21 + 16) && v22)
      {
        v27 = *(unsigned __int8 *)(v21 + 18);
        if (*(_BYTE *)(v21 + 18))
        {
          swift_unknownObjectRetain_n();
          result = swift_retain();
          v9 = 0;
          v28 = v21;
          while (1)
          {
            v30 = *(unsigned __int16 *)(v28 + 16);
            if (!*(_WORD *)(v28 + 16))
              goto LABEL_37;
            v31 = *(_QWORD *)(v28 + 40);
            v32 = __OFSUB__(v9, v31);
            v33 = v9 - v31;
            if (v32)
              goto LABEL_364;
            if (__OFADD__(v33, 1))
            {
LABEL_365:
              __break(1u);
LABEL_366:
              __break(1u);
LABEL_367:
              __break(1u);
LABEL_368:
              __break(1u);
              goto LABEL_369;
            }
            if (v33 + 1 >= 1)
              break;
            v30 = 0;
LABEL_38:
            v29 = (4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C;
            v27 = ((-15 << v29) - 1) & v27 | (v30 << v29);
            v26 = *(_QWORD *)(v28 + 24 + 24 * v30);
            swift_unknownObjectRetain();
            result = swift_unknownObjectRelease();
            v28 = v26;
            if (!*(_BYTE *)(v26 + 18))
              goto LABEL_58;
          }
          if ((_DWORD)v30 != 1)
          {
            v34 = (uint64_t *)(v28 + 64);
            v35 = 1;
            while (1)
            {
              v36 = *v34;
              v34 += 3;
              v9 = v33 - v36;
              if (__OFSUB__(v33, v36))
                goto LABEL_342;
              if (__OFADD__(v9, 1))
              {
LABEL_343:
                __break(1u);
LABEL_344:
                __break(1u);
LABEL_345:
                __break(1u);
LABEL_346:
                __break(1u);
LABEL_347:
                __break(1u);
LABEL_348:
                __break(1u);
LABEL_349:
                __break(1u);
LABEL_350:
                __break(1u);
LABEL_351:
                __break(1u);
                goto LABEL_352;
              }
              if (v9 + 1 < 1)
                break;
              ++v35;
              v33 = v9;
              if (v30 == v35)
                goto LABEL_37;
            }
            v30 = v35;
            v9 = v33;
            goto LABEL_38;
          }
          v9 = v33;
LABEL_37:
          if (v9)
            goto LABEL_363;
          goto LABEL_38;
        }
        swift_unknownObjectRetain_n();
        result = swift_retain();
        v9 = 0;
        v26 = v21;
LABEL_58:
        v37 = *(unsigned __int16 *)(v26 + 16);
        if (!*(_WORD *)(v26 + 16))
          goto LABEL_71;
        v38 = *(_QWORD *)(v26 + 24);
        v32 = __OFSUB__(v9, v38);
        v39 = v9 - v38;
        if (v32)
        {
LABEL_391:
          __break(1u);
LABEL_392:
          __break(1u);
LABEL_393:
          if (!v9)
            __break(1u);
          goto LABEL_395;
        }
        if (__OFADD__(v39, 1))
          goto LABEL_392;
        if (v39 + 1 < 1)
        {
          v37 = 0;
          goto LABEL_72;
        }
        if ((_DWORD)v37 == 1)
        {
          v9 = v39;
LABEL_71:
          if (!v9)
            goto LABEL_72;
          goto LABEL_390;
        }
        v40 = (uint64_t *)(v26 + 48);
        v41 = 1;
        while (1)
        {
          v42 = *v40;
          v40 += 3;
          v9 = v39 - v42;
          if (__OFSUB__(v39, v42))
            goto LABEL_384;
          if (__OFADD__(v9, 1))
            break;
          if (v9 + 1 < 1)
          {
            v37 = v41;
            v9 = v39;
LABEL_72:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v25 = v27 & 0xFFFFFFFFFFFFF0FFLL | (v37 << 8);
LABEL_53:
            swift_unknownObjectRetain();
            v20 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v23, v25, v26, v21, v20);
            result = swift_unknownObjectRelease_n();
            v24 = -v9;
            if (__OFSUB__(0, v9))
              goto LABEL_382;
            goto LABEL_74;
          }
          ++v41;
          v39 = v9;
          if (v37 == v41)
            goto LABEL_71;
        }
LABEL_385:
        __break(1u);
        goto LABEL_386;
      }
    }
    swift_unknownObjectRetain_n();
    swift_retain();
    v25 = specialized Rope._endPath.getter(v21);
    result = swift_unknownObjectRelease();
    v26 = 0;
    v9 = 0;
    if (v21)
      goto LABEL_53;
    v20 = 0;
    v24 = 0;
LABEL_74:
    *(_QWORD *)&v164 = v23;
    *((_QWORD *)&v164 + 1) = v25;
    *(_QWORD *)&v165 = v26;
    *((_QWORD *)&v165 + 1) = v20;
    v43 = -15;
    v44 = v24;
    *(_QWORD *)&v166 = v24;
    while (1)
    {
      v49 = v3[8];
      v154 = v44;
      if (!v49)
      {
        v9 = 0;
        goto LABEL_122;
      }
      v50 = v3[10];
      if (v50 < 0)
        goto LABEL_344;
      v51 = v3[9];
      v52 = v3[11];
      v53 = *(unsigned __int8 *)(v49 + 18);
      if (*(_WORD *)(v49 + 16) && v50 != 0)
        break;
      v55 = ((-15 << ((4 * v53 + 8) & 0x3C)) - 1) & v53 | ((unint64_t)*(unsigned __int16 *)(v49 + 16) << ((4 * v53 + 8) & 0x3C));
      swift_unknownObjectRetain();
      v9 = 0;
      v26 = 0;
LABEL_121:
      swift_unknownObjectRetain();
      specialized Rope._Node.distanceFromStart<A>(to:in:)(v52, v55, v26, v49, v51);
      result = swift_unknownObjectRelease_n();
      v44 = v154;
      v3 = v156;
LABEL_122:
      if (__OFSUB__(0, v9))
        goto LABEL_339;
      if (-v9 >= v44 || !*(_QWORD *)(v157[0] + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v160 = a2;
        result = a2 - 1;
        if (!__OFSUB__(a2, 1))
        {
          v57 = AttributedString.Guts._characterInvalidatedAttributes(at:)(result);
          v100 = v99;
          swift_bridgeObjectRetain();
          result = Set.init(minimumCapacity:)();
          v101 = 0;
          *(_QWORD *)&v162 = result;
          v102 = 1 << *(_BYTE *)(v57 + 32);
          v103 = -1;
          if (v102 < 64)
            v103 = ~(-1 << v102);
          v104 = v57 + 64;
          v105 = v103 & *(_QWORD *)(v57 + 64);
          v106 = (unint64_t)(v102 + 63) >> 6;
          while (1)
          {
            if (v105)
            {
              v107 = __clz(__rbit64(v105));
              v105 &= v105 - 1;
              v108 = v107 | (v101 << 6);
            }
            else
            {
              v111 = v101 + 1;
              if (__OFADD__(v101, 1))
                goto LABEL_336;
              if (v111 >= v106)
                goto LABEL_215;
              v112 = *(_QWORD *)(v104 + 8 * v111);
              ++v101;
              if (!v112)
              {
                v101 = v111 + 1;
                if (v111 + 1 >= v106)
                  goto LABEL_215;
                v112 = *(_QWORD *)(v104 + 8 * v101);
                if (!v112)
                {
                  v101 = v111 + 2;
                  if (v111 + 2 >= v106)
                    goto LABEL_215;
                  v112 = *(_QWORD *)(v104 + 8 * v101);
                  if (!v112)
                  {
                    v101 = v111 + 3;
                    if (v111 + 3 >= v106)
                      goto LABEL_215;
                    v112 = *(_QWORD *)(v104 + 8 * v101);
                    if (!v112)
                    {
                      v101 = v111 + 4;
                      if (v111 + 4 >= v106)
                        goto LABEL_215;
                      v112 = *(_QWORD *)(v104 + 8 * v101);
                      if (!v112)
                      {
                        v113 = v111 + 5;
                        if (v113 >= v106)
                          goto LABEL_215;
                        v112 = *(_QWORD *)(v104 + 8 * v113);
                        if (!v112)
                        {
                          while (1)
                          {
                            v101 = v113 + 1;
                            if (__OFADD__(v113, 1))
                              goto LABEL_383;
                            if (v101 >= v106)
                              break;
                            v112 = *(_QWORD *)(v104 + 8 * v101);
                            ++v113;
                            if (v112)
                              goto LABEL_214;
                          }
LABEL_215:
                          swift_release();
                          v159 = v162;
                          v114 = *((_OWORD *)v3 + 2);
                          v164 = *((_OWORD *)v3 + 1);
                          v165 = v114;
                          v166 = *((_OWORD *)v3 + 3);
                          BigString.utf8.getter();
                          v53 = BigString.UTF8View.count.getter();
                          result = outlined release of Locale((uint64_t)&v162);
                          if (v53 >= a2)
                          {
                            v49 = v3[8];
                            if (v49)
                              v115 = v3[10];
                            else
                              v115 = 0;
                            if ((a2 & 0x8000000000000000) == 0 && v115 >= a2)
                            {
                              v9 = v3[9];
                              v43 = v3[11];
                              v153 = v100;
                              if (v49 && v3[10] > a2 && *(_WORD *)(v49 + 16))
                              {
                                v152 = v3[9];
                                v4 = *(unsigned __int8 *)(v49 + 18);
                                if (!*(_BYTE *)(v49 + 18))
                                  goto LABEL_248;
                                swift_unknownObjectRetain_n();
                                result = swift_retain();
                                v9 = -15;
                                v116 = a2;
                                v117 = v49;
                                while (2)
                                {
                                  v119 = *(unsigned __int16 *)(v117 + 16);
                                  if (*(_WORD *)(v117 + 16))
                                  {
                                    v120 = *(_QWORD *)(v117 + 40);
                                    v32 = __OFSUB__(v116, v120);
                                    v121 = v116 - v120;
                                    if (v32)
                                      goto LABEL_358;
                                    if (__OFADD__(v121, 1))
                                    {
LABEL_359:
                                      __break(1u);
LABEL_360:
                                      __break(1u);
LABEL_361:
                                      __break(1u);
                                      goto LABEL_362;
                                    }
                                    if (v121 + 1 < 1)
                                    {
                                      v119 = 0;
                                      goto LABEL_228;
                                    }
                                    if ((_DWORD)v119 != 1)
                                    {
                                      v122 = (uint64_t *)(v117 + 64);
                                      v123 = 1;
                                      while (1)
                                      {
                                        v124 = *v122;
                                        v122 += 3;
                                        v116 = v121 - v124;
                                        if (__OFSUB__(v121, v124))
                                          goto LABEL_337;
                                        if (__OFADD__(v116, 1))
                                          goto LABEL_338;
                                        if (v116 + 1 < 1)
                                          break;
                                        ++v123;
                                        v121 = v116;
                                        if (v119 == v123)
                                          goto LABEL_227;
                                      }
                                      v119 = v123;
                                      v116 = v121;
LABEL_228:
                                      v118 = (4 * *(_BYTE *)(v117 + 18) + 8) & 0x3C;
                                      v4 = ((-15 << v118) - 1) & v4 | (v119 << v118);
                                      v26 = *(_QWORD *)(v117 + 24 + 24 * v119);
                                      swift_unknownObjectRetain();
                                      result = swift_unknownObjectRelease();
                                      v117 = v26;
                                      if (!*(_BYTE *)(v26 + 18))
                                        goto LABEL_249;
                                      continue;
                                    }
                                    v116 = v121;
                                  }
                                  break;
                                }
LABEL_227:
                                if (v116)
                                  goto LABEL_357;
                                goto LABEL_228;
                              }
                              swift_unknownObjectRetain_n();
                              swift_retain();
                              v125 = specialized Rope._endPath.getter(v49);
                              result = swift_unknownObjectRelease();
                              v26 = 0;
                              v116 = 0;
                              if (!v49)
                                goto LABEL_263;
LABEL_243:
                              swift_unknownObjectRetain();
                              v126 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v43, v125, v26, v49, v9);
                              result = swift_unknownObjectRelease_n();
                              goto LABEL_264;
                            }
LABEL_377:
                            __break(1u);
LABEL_378:
                            __break(1u);
                            goto LABEL_379;
                          }
LABEL_376:
                          __break(1u);
                          goto LABEL_377;
                        }
                        v101 = v113;
                      }
                    }
                  }
                }
              }
LABEL_214:
              v105 = (v112 - 1) & v112;
              v108 = __clz(__rbit64(v112)) + (v101 << 6);
            }
            v109 = (unint64_t *)(*(_QWORD *)(v57 + 48) + 16 * v108);
            v110 = *v109;
            v9 = v109[1];
            swift_bridgeObjectRetain();
            specialized Set._Variant.insert(_:)((unint64_t *)&v164, v110, v9);
            result = swift_bridgeObjectRelease();
          }
        }
LABEL_375:
        __break(1u);
        goto LABEL_376;
      }
      v70 = v164;
      v45 = v165;
      v49 = v3[8];
      if (!v49)
      {
        v73 = v3[11];
        if (!v44)
        {
          v47 = v153;
          if (v153 > 0)
            goto LABEL_368;
          v9 = 0;
          v45 = 0;
          v26 = 0;
          v46 = 0;
          v48 = v153;
          goto LABEL_171;
        }
        v49 = 0;
LABEL_150:
        v9 = v3[9];
        v162 = v164;
        v163 = v165;
        v46 = *((_QWORD *)&v165 + 1) - 1;
        if (__OFSUB__(*((_QWORD *)&v165 + 1), 1))
          goto LABEL_345;
        if ((_QWORD)v164 != v73)
          goto LABEL_346;
        if (v49)
        {
          v83 = *(unsigned __int8 *)(v49 + 18);
          result = swift_unknownObjectRetain();
          if (*((_QWORD *)&v70 + 1) <= v83)
            goto LABEL_347;
        }
        else if (!*((_QWORD *)&v164 + 1))
        {
          goto LABEL_347;
        }
        if (v45)
        {
          v84 = (4 * *(_BYTE *)(v45 + 18) + 8) & 0x3C;
          if (((*((_QWORD *)&v70 + 1) >> v84) & 0xFLL) != 0)
          {
            v26 = ((((*((_QWORD *)&v70 + 1) >> v84) & 0xFLL) - 1) << v84) | ((-15 << v84) - 1) & *((_QWORD *)&v70 + 1);
            *((_QWORD *)&v162 + 1) = v26;
            goto LABEL_163;
          }
        }
        v85 = *(unsigned __int8 *)(v49 + 18);
        v86 = (4 * v85 + 8) & 0x3C;
        v87 = (*((_QWORD *)&v70 + 1) >> v86) & 0xFLL;
        v160 = v87;
        if (v85)
        {
          swift_unknownObjectRetain();
          v88 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v49 + 16, v49 + 24, &v160, (uint64_t)&v162, v85);
          result = swift_unknownObjectRelease();
          if ((v88 & 1) == 0)
            goto LABEL_354;
          if ((_QWORD)v162 != (_QWORD)v70)
            goto LABEL_348;
          v26 = *((_QWORD *)&v162 + 1);
          v45 = v163;
          if (v163)
          {
LABEL_163:
            v89 = v45 + 24 * (((unint64_t)v26 >> ((4 * *(_BYTE *)(v45 + 18) + 8) & 0x3C)) & 0xF);
            v90 = *(_QWORD *)(v89 + 24);
            v9 = *(_QWORD *)(v89 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_169:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v48 = v154 - v90;
            if (__OFSUB__(v154, v90))
              goto LABEL_349;
            v73 = v70;
            v47 = v153;
            goto LABEL_171;
          }
        }
        else
        {
          if (!v87)
            goto LABEL_354;
          v26 = ((v87 - 1) << v86) | ((-15 << v86) - 1) & *((_QWORD *)&v70 + 1);
          *((_QWORD *)&v162 + 1) = v26;
          v45 = v49;
          if (v49)
            goto LABEL_163;
        }
        swift_unknownObjectRetain();
        v90 = specialized Rope._Node.subscript.getter(v26, v49);
        v9 = v91;
        swift_unknownObjectRelease();
        goto LABEL_169;
      }
      v71 = v3;
      v72 = v3[10];
      if (v44 != v72)
      {
        v73 = v71[11];
        v3 = v71;
        goto LABEL_150;
      }
      if (v72 < v153)
        goto LABEL_355;
      v57 = v156[9];
      v73 = v156[11];
      v53 = *(unsigned __int8 *)(v49 + 18);
      if (*(_WORD *)(v49 + 16))
      {
        v43 = -15;
        if (*(_BYTE *)(v49 + 18))
        {
          result = swift_unknownObjectRetain_n();
          v9 = v153;
          v74 = v49;
          while (1)
          {
            v77 = *(unsigned __int16 *)(v74 + 16);
            if (!*(_WORD *)(v74 + 16))
              goto LABEL_393;
            v78 = *(_QWORD *)(v74 + 40);
            v32 = __OFSUB__(v9, v78);
            v79 = v9 - v78;
            if (v32)
              break;
            if (v79 <= 0)
            {
              v75 = 0;
            }
            else
            {
              if ((_DWORD)v77 == 1)
                goto LABEL_395;
              v80 = *(_QWORD *)(v74 + 64);
              v9 = v79 - v80;
              if (__OFSUB__(v79, v80))
                goto LABEL_332;
              if (v9 >= 1)
              {
                if ((_DWORD)v77 != 2)
                {
                  v81 = (_QWORD *)(v74 + 88);
                  v75 = 2;
                  while (v77 != v75)
                  {
                    v82 = v9 - *v81;
                    if (__OFSUB__(v9, *v81))
                      goto LABEL_245;
                    if (v82 < 1)
                      goto LABEL_132;
                    ++v75;
                    v81 += 3;
                    v9 = v82;
                    if (v77 == v75)
                      goto LABEL_395;
                  }
                  __break(1u);
LABEL_245:
                  __break(1u);
LABEL_246:
                  __break(1u);
                  goto LABEL_247;
                }
LABEL_395:
                __break(1u);
LABEL_396:
                if (!v9)
                  __break(1u);
LABEL_398:
                __break(1u);
                return result;
              }
              v9 = v79;
              v75 = 1;
            }
LABEL_132:
            v76 = (4 * *(_BYTE *)(v74 + 18) + 8) & 0x3C;
            v53 = ((-15 << v76) - 1) & v53 | (v75 << v76);
            v45 = *(_QWORD *)(v74 + 24 + 24 * v75);
            swift_unknownObjectRetain();
            result = swift_unknownObjectRelease();
            v74 = v45;
            if (!*(_BYTE *)(v45 + 18))
              goto LABEL_173;
          }
          __break(1u);
          goto LABEL_329;
        }
        result = swift_unknownObjectRetain_n();
        v53 = 0;
        v9 = v153;
        v45 = v49;
LABEL_173:
        v92 = *(unsigned __int16 *)(v45 + 16);
        if (!*(_WORD *)(v45 + 16))
          goto LABEL_396;
        v93 = *(_QWORD *)(v45 + 24);
        v32 = __OFSUB__(v9, v93);
        v94 = v9 - v93;
        if (v32)
          goto LABEL_367;
        if (v94 <= 0)
        {
          v97 = 0;
        }
        else
        {
          if ((_DWORD)v92 == 1)
            goto LABEL_398;
          v95 = *(_QWORD *)(v45 + 48);
          v9 = v94 - v95;
          if (__OFSUB__(v94, v95))
            goto LABEL_370;
          if (v9 >= 1)
          {
            if ((_DWORD)v92 == 2)
              goto LABEL_398;
            v96 = (_QWORD *)(v45 + 72);
            v97 = 2;
            while (v92 != v97)
            {
              v98 = v9 - *v96;
              if (__OFSUB__(v9, *v96))
                goto LABEL_331;
              if (v98 < 1)
                goto LABEL_188;
              ++v97;
              v96 += 3;
              v9 = v98;
              if (v92 == v97)
                goto LABEL_398;
            }
LABEL_330:
            __break(1u);
LABEL_331:
            __break(1u);
LABEL_332:
            __break(1u);
LABEL_333:
            __break(1u);
LABEL_334:
            __break(1u);
LABEL_335:
            __break(1u);
LABEL_336:
            __break(1u);
LABEL_337:
            __break(1u);
LABEL_338:
            __break(1u);
LABEL_339:
            __break(1u);
LABEL_340:
            __break(1u);
LABEL_341:
            __break(1u);
LABEL_342:
            __break(1u);
            goto LABEL_343;
          }
          v9 = v94;
          v97 = 1;
        }
LABEL_188:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v26 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v97 << 8);
      }
      else
      {
        v26 = ((-15 << ((4 * v53 + 8) & 0x3C)) - 1) & v53 | ((unint64_t)*(unsigned __int16 *)(v49 + 16) << ((4 * v53 + 8) & 0x3C));
        swift_unknownObjectRetain();
        v9 = 0;
        v45 = 0;
      }
      swift_unknownObjectRetain();
      v46 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v73, v26, v45, v49, v57);
      result = swift_unknownObjectRelease_n();
      v47 = v153;
      v48 = v153 - v9;
      if (__OFSUB__(v153, v9))
        goto LABEL_351;
LABEL_171:
      *(_QWORD *)&v164 = v73;
      *((_QWORD *)&v164 + 1) = v26;
      *(_QWORD *)&v165 = v45;
      *((_QWORD *)&v165 + 1) = v46;
      *(_QWORD *)&v166 = v48;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v3 = v156;
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v164, 0, v47, v156, v157, v4, v152, (uint64_t)&v161);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v44 = v166;
      v43 = -15;
    }
    if (*(_BYTE *)(v49 + 18))
    {
      swift_unknownObjectRetain_n();
      v9 = 0;
      v57 = v49;
      while (1)
      {
        v59 = *(unsigned __int16 *)(v57 + 16);
        if (*(_WORD *)(v57 + 16))
        {
          v60 = *(_QWORD *)(v57 + 40);
          v32 = __OFSUB__(v9, v60);
          v56 = v9 - v60;
          if (v32)
            goto LABEL_324;
          if (__OFADD__(v56, 1))
          {
LABEL_325:
            __break(1u);
LABEL_326:
            v127 = v56;
            v116 = v59;
            goto LABEL_262;
          }
          if (v56 + 1 < 1)
          {
            v59 = 0;
            goto LABEL_92;
          }
          if ((_DWORD)v59 != 1)
          {
            v61 = (uint64_t *)(v57 + 64);
            v62 = 1;
            while (1)
            {
              v63 = *v61;
              v61 += 3;
              v9 = v56 - v63;
              if (__OFSUB__(v56, v63))
                goto LABEL_246;
              if (__OFADD__(v9, 1))
                break;
              if (v9 + 1 < 1)
              {
                v59 = v62;
                v9 = v56;
                goto LABEL_92;
              }
              ++v62;
              v56 = v9;
              if (v59 == v62)
                goto LABEL_91;
            }
LABEL_247:
            __break(1u);
LABEL_248:
            swift_unknownObjectRetain_n();
            result = swift_retain();
            v116 = a2;
            v26 = v49;
LABEL_249:
            v9 = v43;
            v127 = *(unsigned __int16 *)(v26 + 16);
            if (!*(_WORD *)(v26 + 16))
            {
LABEL_261:
              if (!v116)
                goto LABEL_262;
              goto LABEL_387;
            }
            v128 = *(_QWORD *)(v26 + 24);
            v32 = __OFSUB__(v116, v128);
            v59 = v116 - v128;
            if (v32)
            {
LABEL_388:
              __break(1u);
              goto LABEL_389;
            }
            if (__OFADD__(v59, 1))
            {
LABEL_389:
              __break(1u);
LABEL_390:
              __break(1u);
              goto LABEL_391;
            }
            if (v59 + 1 >= 1)
            {
              if ((_DWORD)v127 == 1)
              {
                v116 = v59;
                goto LABEL_261;
              }
              v129 = (uint64_t *)(v26 + 48);
              v56 = 1;
              while (1)
              {
                v130 = *v129;
                v129 += 3;
                v116 = v59 - v130;
                if (__OFSUB__(v59, v130))
                  break;
                if (__OFADD__(v116, 1))
                  goto LABEL_380;
                if (v116 + 1 < 1)
                  goto LABEL_326;
                ++v56;
                v59 = v116;
                if (v127 == v56)
                  goto LABEL_261;
              }
LABEL_379:
              __break(1u);
LABEL_380:
              __break(1u);
              goto LABEL_381;
            }
            v127 = 0;
LABEL_262:
            swift_unknownObjectRelease();
            result = swift_unknownObjectRelease();
            v125 = v4 & 0xFFFFFFFFFFFFF0FFLL | (v127 << 8);
            v43 = v9;
            v9 = v152;
            if (v49)
              goto LABEL_243;
LABEL_263:
            v126 = 0;
LABEL_264:
            v4 = a2 - v116;
            if (__OFSUB__(a2, v116))
              goto LABEL_378;
            v157[0] = v43;
            v157[1] = v125;
            v157[2] = v26;
            v157[3] = v126;
            v158 = a2 - v116;
            v131 = v156;
            v26 = a2;
            v132 = v153;
            while (2)
            {
              v9 = v131[8];
              if (v53 == v26)
              {
                if (v9)
                {
                  v49 = v131[10];
                  if (v49 < v26)
                    goto LABEL_356;
                  v155 = v131[9];
                  v133 = v131[11];
                  v134 = *(unsigned __int8 *)(v9 + 18);
                  if (*(_WORD *)(v9 + 16))
                    v135 = v49 <= v26;
                  else
                    v135 = 1;
                  if (v135)
                  {
                    v136 = ((-15 << ((4 * v134 + 8) & 0x3C)) - 1) & v134 | ((unint64_t)*(unsigned __int16 *)(v9 + 16) << ((4 * v134 + 8) & 0x3C));
                    swift_unknownObjectRetain();
                    v137 = 0;
                    v26 = 0;
                  }
                  else
                  {
                    v152 = v133;
                    if (*(_BYTE *)(v9 + 18))
                    {
                      result = swift_unknownObjectRetain_n();
                      v137 = v26;
                      v139 = v9;
                      while (1)
                      {
                        v59 = *(unsigned __int16 *)(v139 + 16);
                        if (!*(_WORD *)(v139 + 16))
                          goto LABEL_283;
                        v141 = *(_QWORD *)(v139 + 40);
                        v32 = __OFSUB__(v137, v141);
                        v56 = v137 - v141;
                        if (v32)
                          goto LABEL_334;
                        if (__OFADD__(v56, 1))
                          goto LABEL_335;
                        if (v56 + 1 >= 1)
                          break;
                        v59 = 0;
LABEL_284:
                        v140 = (4 * *(_BYTE *)(v139 + 18) + 8) & 0x3C;
                        v134 = ((-15 << v140) - 1) & v134 | (v59 << v140);
                        v26 = *(_QWORD *)(v139 + 24 + 24 * v59);
                        swift_unknownObjectRetain();
                        result = swift_unknownObjectRelease();
                        v139 = v26;
                        if (!*(_BYTE *)(v26 + 18))
                          goto LABEL_299;
                      }
                      if ((_DWORD)v59 != 1)
                      {
                        v142 = (uint64_t *)(v139 + 64);
                        v143 = 1;
                        while (1)
                        {
                          v144 = *v142;
                          v142 += 3;
                          v137 = v56 - v144;
                          if (__OFSUB__(v56, v144))
                            break;
                          if (__OFADD__(v137, 1))
                            goto LABEL_322;
                          if (v137 + 1 < 1)
                          {
                            v59 = v143;
                            v137 = v56;
                            goto LABEL_284;
                          }
                          ++v143;
                          v56 = v137;
                          if (v59 == v143)
                            goto LABEL_283;
                        }
                        __break(1u);
LABEL_322:
                        __break(1u);
LABEL_323:
                        __break(1u);
LABEL_324:
                        __break(1u);
                        goto LABEL_325;
                      }
                      v137 = v56;
LABEL_283:
                      if (v137)
                        goto LABEL_333;
                      goto LABEL_284;
                    }
                    result = swift_unknownObjectRetain_n();
                    v134 = 0;
                    v137 = v26;
                    v26 = v9;
LABEL_299:
                    v145 = *(unsigned __int16 *)(v26 + 16);
                    if (*(_WORD *)(v26 + 16))
                    {
                      v146 = *(_QWORD *)(v26 + 24);
                      v32 = __OFSUB__(v137, v146);
                      v147 = v137 - v146;
                      if (v32)
                        goto LABEL_373;
                      if (__OFADD__(v147, 1))
                        goto LABEL_374;
                      if (v147 + 1 >= 1)
                      {
                        if ((_DWORD)v145 != 1)
                        {
                          v148 = (uint64_t *)(v26 + 48);
                          v149 = 1;
                          while (1)
                          {
                            v150 = *v148;
                            v148 += 3;
                            v137 = v147 - v150;
                            if (__OFSUB__(v147, v150))
                              break;
                            if (__OFADD__(v137, 1))
                              goto LABEL_353;
                            if (v137 + 1 < 1)
                            {
                              v145 = v149;
                              v137 = v147;
                              goto LABEL_312;
                            }
                            ++v149;
                            v147 = v137;
                            if (v145 == v149)
                              goto LABEL_311;
                          }
LABEL_352:
                          __break(1u);
LABEL_353:
                          __break(1u);
LABEL_354:
                          __break(1u);
LABEL_355:
                          __break(1u);
LABEL_356:
                          __break(1u);
LABEL_357:
                          __break(1u);
LABEL_358:
                          __break(1u);
                          goto LABEL_359;
                        }
                        v137 = v147;
                        goto LABEL_311;
                      }
                      v145 = 0;
                    }
                    else
                    {
LABEL_311:
                      if (v137)
                        goto LABEL_372;
                    }
LABEL_312:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    v136 = v134 & 0xFFFFFFFFFFFFF0FFLL | (v145 << 8);
                    v133 = v152;
                  }
                  swift_unknownObjectRetain();
                  specialized Rope._Node.distanceFromStart<A>(to:in:)(v133, v136, v26, v9, v155);
                  result = swift_unknownObjectRelease_n();
                  v131 = v156;
                  v26 = a2;
                  v132 = v153;
                }
                else
                {
                  if (v26 > 0)
                    goto LABEL_366;
                  v137 = 0;
                }
                v138 = v26 - v137;
                if (__OFSUB__(v26, v137))
                  goto LABEL_350;
              }
              else if (v9)
              {
                v138 = v131[10];
              }
              else
              {
                v138 = 0;
              }
              if (v4 >= v138 || !*(_QWORD *)(v159 + 16))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                result = v161;
                if (v160 >= v161)
                  return result;
LABEL_381:
                __break(1u);
LABEL_382:
                __break(1u);
LABEL_383:
                __break(1u);
LABEL_384:
                __break(1u);
                goto LABEL_385;
              }
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized AttributedString.Guts.updateRun(at:within:with:)(v157, v26, v53, v131, &v159, v57, v132, (uint64_t)&v160);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = (uint64_t)$defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v131, v26, v53, v157);
              v4 = v158;
              continue;
            }
          }
          v9 = v56;
        }
LABEL_91:
        if (v9)
          goto LABEL_323;
LABEL_92:
        v58 = (4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C;
        v53 = ((-15 << v58) - 1) & v53 | (v59 << v58);
        v26 = *(_QWORD *)(v57 + 24 + 24 * v59);
        swift_unknownObjectRetain();
        result = swift_unknownObjectRelease();
        v57 = v26;
        if (!*(_BYTE *)(v26 + 18))
          goto LABEL_107;
      }
    }
    result = swift_unknownObjectRetain_n();
    v9 = 0;
    v53 = 0;
    v26 = v49;
LABEL_107:
    v64 = *(unsigned __int16 *)(v26 + 16);
    if (*(_WORD *)(v26 + 16))
    {
      v65 = *(_QWORD *)(v26 + 24);
      v32 = __OFSUB__(v9, v65);
      v66 = v9 - v65;
      if (v32)
        goto LABEL_361;
      if (__OFADD__(v66, 1))
      {
LABEL_362:
        __break(1u);
LABEL_363:
        __break(1u);
LABEL_364:
        __break(1u);
        goto LABEL_365;
      }
      if (v66 + 1 < 1)
      {
        v64 = 0;
LABEL_120:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v55 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v64 << 8);
        goto LABEL_121;
      }
      if ((_DWORD)v64 != 1)
      {
        v67 = (uint64_t *)(v26 + 48);
        v68 = 1;
        while (1)
        {
          v69 = *v67;
          v67 += 3;
          v9 = v66 - v69;
          if (__OFSUB__(v66, v69))
            goto LABEL_340;
          if (__OFADD__(v9, 1))
            goto LABEL_341;
          if (v9 + 1 < 1)
            break;
          ++v68;
          v66 = v9;
          if (v64 == v68)
            goto LABEL_119;
        }
        v64 = v68;
        v9 = v66;
        goto LABEL_120;
      }
      v9 = v66;
    }
LABEL_119:
    if (v9)
      goto LABEL_360;
    goto LABEL_120;
  }
  return result;
}

uint64_t outlined consume of Rope<AttributedString._InternalRun>._Item?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double specialized Rope.Builder._appendNow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  __int128 v12;

  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  if (!v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
    v7 = swift_allocObject();
    *(_WORD *)(v7 + 16) = 0;
    *(_BYTE *)(v7 + 18) = 0;
    v8 = 0uLL;
  }
  v11 = v7;
  v12 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Rope._Node._appendItem(_:)(a1, a2, a3);
  if (*(_WORD *)(v11 + 16) == 15)
  {
    v9 = swift_unknownObjectRetain();
    specialized Rope.Builder._appendNow(_:)(v9, v12, *((uint64_t *)&v12 + 1));
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 8) = v11;
    result = *(double *)&v12;
    *(_OWORD *)(v3 + 16) = v12;
  }
  return result;
}

uint64_t specialized Rope.builder<A>(removing:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v6 = v4[2];
  ++v4[3];
  v7 = *v4;
  if (*v4)
    v8 = v6;
  else
    v8 = 0;
  if (result < 0 || v8 < a2)
    goto LABEL_79;
  v10 = result;
  if (result == a2)
    return specialized Rope.builder<A>(splittingAt:in:)(result, a4);
  v11 = v4[1];
  v50 = v6;
  v51 = MEMORY[0x1E0DEE9D8];
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0;
  v57 = MEMORY[0x1E0DEE9D8];
  v48 = v7;
  v49 = (_QWORD *)v11;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  v47 = result;
  if (*(_BYTE *)(v7 + 18))
  {
    v12 = result;
    v13 = a2;
    while (1)
    {
      v14 = *(unsigned __int16 *)(v7 + 16);
      v15 = v12;
      if (!*(_WORD *)(v7 + 16))
        goto LABEL_31;
      v16 = *(_QWORD *)(v7 + 40);
      v17 = __OFSUB__(v12, v16);
      v15 = v12 - v16;
      if (v17)
        goto LABEL_74;
      if (__OFADD__(v15, 1))
        goto LABEL_75;
      if (v15 + 1 > 0)
        break;
      v20 = v13 - v12;
      if (__OFSUB__(v13, v12))
        goto LABEL_78;
      result = 0;
LABEL_34:
      v13 = v12 + v20;
      if (__OFADD__(v12, v20))
      {
        __break(1u);
        goto LABEL_70;
      }
      if (result >= v14)
      {
        a3 = result;
      }
      else
      {
        v22 = *(_QWORD *)(v7 + 24 + 24 * result + 16);
        a3 = result;
        if (v22 < v13)
        {
          v17 = __OFSUB__(v13, v22);
          v13 -= v22;
          if (v17)
            goto LABEL_77;
          a3 = result + 1;
          if (result + 1 < v14)
          {
            v23 = *(_QWORD *)(v7 + 24 + 24 * a3 + 16);
            if (v23 < v13)
            {
              v17 = __OFSUB__(v13, v23);
              v13 -= v23;
              if (v17)
                goto LABEL_82;
              a3 = result + 2;
              if (result + 2 < v14)
              {
                v24 = (uint64_t *)(v7 + 24 * result + 88);
                while (1)
                {
                  v26 = *v24;
                  v24 += 3;
                  v25 = v26;
                  if (v26 >= v13)
                    break;
                  v17 = __OFSUB__(v13, v25);
                  v13 -= v25;
                  if (v17)
                    goto LABEL_76;
                  if (v14 == ++a3)
                  {
                    a3 = *(unsigned __int16 *)(v7 + 16);
                    break;
                  }
                }
              }
            }
          }
        }
      }
      if (result < a3)
        goto LABEL_54;
      result = specialized Rope._Node._innerSplit(at:into:)(result, (uint64_t)&v51);
      v7 = v48;
      if (!*(_BYTE *)(v48 + 18))
      {
        v47 = v12;
        goto LABEL_55;
      }
    }
    if ((_DWORD)v14 != 1)
    {
      v18 = *(_QWORD *)(v7 + 64);
      v17 = __OFSUB__(v15, v18);
      v19 = v15 - v18;
      if (v17)
        goto LABEL_80;
      if (__OFADD__(v19, 1))
        goto LABEL_81;
      if (v19 + 1 < 1)
      {
        result = 1;
        v20 = v13 - v12;
        if (__OFSUB__(v13, v12))
          goto LABEL_53;
LABEL_33:
        v12 = v15;
        goto LABEL_34;
      }
      if ((_DWORD)v14 != 2)
      {
        v21 = (_QWORD *)(v7 + 88);
        result = 2;
        while (v14 != result)
        {
          v15 = v19 - *v21;
          if (__OFSUB__(v19, *v21))
            goto LABEL_71;
          if (__OFADD__(v15, 1))
            goto LABEL_72;
          if (v15 + 1 < 1)
          {
            v15 = v19;
            v20 = v13 - v12;
            if (__OFSUB__(v13, v12))
              goto LABEL_53;
            goto LABEL_33;
          }
          ++result;
          v21 += 3;
          v19 = v15;
          if (v14 == result)
            goto LABEL_31;
        }
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      v15 = v19;
    }
LABEL_31:
    if (v15)
      goto LABEL_73;
    result = *(unsigned __int16 *)(v7 + 16);
    v20 = v13 - v12;
    if (__OFSUB__(v13, v12))
    {
LABEL_53:
      __break(1u);
LABEL_54:
      v27 = v12;
      v28 = v13;
      v29 = v7;
      goto LABEL_57;
    }
    goto LABEL_33;
  }
LABEL_55:
  result = (uint64_t)specialized closure #2 in Rope.builder<A>(removing:in:)((unsigned __int16 *)(v7 + 16), (_QWORD *)(v7 + 24), &v47, v10, a2);
  v30 = result;
  v31 = v27;
  v32 = v28;
  v33 = v49;
  v34 = v50;
  if (result >= a3)
  {
    swift_unknownObjectRetain();
    result = specialized Rope._Node._leafSplit(at:into:)(v30, (uint64_t)&v51, v7, v33, v34);
    if (v32 < 0)
      goto LABEL_83;
    v39 = result - v32;
    if (result < v32)
      goto LABEL_83;
    v40 = v37;
    v41 = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized Rope.Builder._insertAfterTip(_:)(v39, v40, v41);
    if (v31 < 0 || v32 < v31)
    {
LABEL_84:
      __break(1u);
    }
    else
    {
      if (v31)
      {
        v42 = *((_QWORD *)&v53 + 1);
        v43 = v54;
        *((_QWORD *)&v53 + 1) = 0;
        v54 = 0uLL;
        if ((_QWORD)v43)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized Rope.Builder._appendNow(_:)(v42, v43, *((uint64_t *)&v43 + 1));
          outlined consume of Rope<AttributedString._InternalRun>._Item?(*((uint64_t *)&v53 + 1), v54);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
        }
        else
        {
          result = swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v31 = *((_QWORD *)&v53 + 1);
        v41 = *((_QWORD *)&v54 + 1);
        v40 = v54;
      }
      v44 = v53;
      v45 = v56;
      v46 = v57;
      *(_QWORD *)a4 = v51;
      *(_OWORD *)(a4 + 8) = v52;
      *(_QWORD *)(a4 + 24) = v44;
      *(_QWORD *)(a4 + 32) = v31;
      *(_QWORD *)(a4 + 40) = v40;
      *(_QWORD *)(a4 + 48) = v41;
      *(_OWORD *)(a4 + 56) = v55;
      *(_QWORD *)(a4 + 72) = v45;
      *(_QWORD *)(a4 + 80) = v46;
    }
  }
  else
  {
    v29 = v7;
LABEL_57:
    result = specialized Rope._Node._removeSubrange<A>(from:to:in:into:)(result, v27, a3, v28, &v51, v29);
    v35 = v56;
    v36 = v57;
    *(_QWORD *)a4 = v51;
    *(_OWORD *)(a4 + 8) = v52;
    *(_OWORD *)(a4 + 24) = v53;
    *(_OWORD *)(a4 + 40) = v54;
    *(_OWORD *)(a4 + 56) = v55;
    *(_QWORD *)(a4 + 72) = v35;
    *(_QWORD *)(a4 + 80) = v36;
  }
  return result;
}

uint64_t specialized Rope.builder<A>(splittingAt:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v3 = result;
  ++*(_QWORD *)(v2 + 24);
  v5 = MEMORY[0x1E0DEE9D8];
  v31 = MEMORY[0x1E0DEE9D8];
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  v37 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)v2;
  if (!*(_QWORD *)v2 || !*(_WORD *)(v6 + 16))
  {
    if (result)
      goto LABEL_39;
    *(_QWORD *)a2 = MEMORY[0x1E0DEE9D8];
    *(_OWORD *)(a2 + 8) = 0uLL;
    *(_OWORD *)(a2 + 24) = 0uLL;
    *(_OWORD *)(a2 + 40) = 0uLL;
    *(_OWORD *)(a2 + 56) = 0uLL;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = v5;
    return result;
  }
  v7 = *(_OWORD *)(v2 + 8);
  v30 = result;
  v28 = v6;
  v29 = v7;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = 0;
  if (!*(_BYTE *)(v6 + 18))
  {
LABEL_26:
    v15 = specialized closure #2 in Rope.builder<A>(splittingAt:in:)(v6 + 16, (_QWORD *)(v6 + 24), &v30);
    v17 = v16;
    swift_unknownObjectRetain();
    result = specialized Rope._Node._leafSplit(at:into:)(v15, (uint64_t)&v31, v6, (_QWORD *)v29, *((uint64_t *)&v29 + 1));
    if (v17 < 0)
      goto LABEL_40;
    v20 = result - v17;
    if (result < v17)
      goto LABEL_40;
    v21 = v18;
    v22 = v19;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Rope.Builder._insertAfterTip(_:)(v20, v21, v22);
    if (v17)
    {
      v23 = *((_QWORD *)&v33 + 1);
      v24 = v34;
      *((_QWORD *)&v33 + 1) = 0;
      v34 = 0uLL;
      if ((_QWORD)v24)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Rope.Builder._appendNow(_:)(v23, v24, *((uint64_t *)&v24 + 1));
        outlined consume of Rope<AttributedString._InternalRun>._Item?(*((uint64_t *)&v33 + 1), v34);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        result = swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      result = swift_bridgeObjectRelease_n();
      v17 = *((_QWORD *)&v33 + 1);
      v22 = *((_QWORD *)&v34 + 1);
      v21 = v34;
    }
    v25 = v33;
    v26 = v36;
    v27 = v37;
    *(_QWORD *)a2 = v31;
    *(_OWORD *)(a2 + 8) = v32;
    *(_QWORD *)(a2 + 24) = v25;
    *(_QWORD *)(a2 + 32) = v17;
    *(_QWORD *)(a2 + 40) = v21;
    *(_QWORD *)(a2 + 48) = v22;
    *(_OWORD *)(a2 + 56) = v35;
    *(_QWORD *)(a2 + 72) = v26;
    *(_QWORD *)(a2 + 80) = v27;
    return result;
  }
  while (1)
  {
    v8 = *(unsigned __int16 *)(v6 + 16);
    if (!*(_WORD *)(v6 + 16))
    {
      if (v3)
        goto LABEL_41;
      result = -1;
      goto LABEL_6;
    }
    v9 = *(_QWORD *)(v6 + 40);
    v10 = __OFSUB__(v3, v9);
    v11 = v3 - v9;
    if (v10)
      goto LABEL_37;
    if (v11 > 0)
      break;
    result = 0;
LABEL_6:
    result = specialized Rope._Node._innerSplit(at:into:)(result, (uint64_t)&v31);
    v6 = v28;
    if (!*(_BYTE *)(v28 + 18))
    {
      v30 = v3;
      goto LABEL_26;
    }
  }
  if ((_DWORD)v8 == 1)
    goto LABEL_41;
  v12 = *(_QWORD *)(v6 + 64);
  v3 = v11 - v12;
  if (__OFSUB__(v11, v12))
    goto LABEL_38;
  if (v3 < 1)
  {
    result = 1;
    v3 = v11;
    goto LABEL_6;
  }
  if ((_DWORD)v8 == 2)
    goto LABEL_41;
  v13 = (_QWORD *)(v6 + 88);
  result = 2;
  while (v8 != result)
  {
    v14 = v3 - *v13;
    if (__OFSUB__(v3, *v13))
      goto LABEL_36;
    if (v14 < 1)
      goto LABEL_6;
    ++result;
    v13 += 3;
    v3 = v14;
    if (v8 == result)
      goto LABEL_41;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Rope.Builder.insertBeforeTip<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  char v49;
  unint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  unint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;

  v4 = *(_QWORD *)(result + 64);
  if (v4)
    v5 = *(_QWORD *)(result + 80);
  else
    v5 = 0;
  if (a2 < 0)
    goto LABEL_294;
  v6 = (_QWORD *)a2;
  if (v5 < a2)
    goto LABEL_294;
  v7 = a3;
  v8 = (_QWORD *)result;
  v9 = *(_QWORD *)(result + 72);
  v119 = *(_QWORD *)(result + 88);
  v107 = (_QWORD *)result;
  if (v4)
  {
    if (*(_QWORD *)(result + 80) > a2 && *(_WORD *)(v4 + 16) != 0)
    {
      v118 = *(_QWORD *)(result + 72);
      v12 = *(unsigned __int8 *)(v4 + 18);
      if (*(_BYTE *)(v4 + 18))
      {
        swift_unknownObjectRetain_n();
        result = swift_retain_n();
        v14 = (uint64_t)v6;
        v91 = v4;
        while (1)
        {
          v93 = *(unsigned __int16 *)(v91 + 16);
          if (!*(_WORD *)(v91 + 16))
            goto LABEL_198;
          v94 = *(_QWORD *)(v91 + 40);
          v95 = v14 - v94;
          if (__OFSUB__(v14, v94))
            goto LABEL_284;
          if (__OFADD__(v95, 1))
            goto LABEL_285;
          if (v95 + 1 <= 0)
          {
            v93 = 0;
          }
          else
          {
            if ((_DWORD)v93 == 1)
            {
              v14 -= v94;
              goto LABEL_198;
            }
            v96 = *(_QWORD *)(v91 + 64);
            v15 = __OFSUB__(v95, v96);
            v97 = v95 - v96;
            if (v15)
              goto LABEL_292;
            if (__OFADD__(v97, 1))
              goto LABEL_293;
            if (v97 + 1 < 1)
            {
              v93 = 1;
              v14 = v95;
            }
            else
            {
              if ((_DWORD)v93 == 2)
              {
                v14 = v97;
LABEL_198:
                if (v14)
                  goto LABEL_283;
                goto LABEL_199;
              }
              v98 = (_QWORD *)(v91 + 88);
              v99 = 2;
              while (1)
              {
                if (v93 == v99)
                  goto LABEL_276;
                v14 = v97 - *v98;
                if (__OFSUB__(v97, *v98))
                  goto LABEL_277;
                if (__OFADD__(v14, 1))
                  goto LABEL_278;
                if (v14 + 1 < 1)
                  break;
                ++v99;
                v98 += 3;
                v97 = v14;
                if (v93 == v99)
                  goto LABEL_198;
              }
              v93 = v99;
              v14 = v97;
            }
          }
LABEL_199:
          v92 = (4 * *(_BYTE *)(v91 + 18) + 8) & 0x3C;
          v12 = ((-15 << v92) - 1) & v12 | (v93 << v92);
          v13 = *(_QWORD *)(v91 + 24 + 24 * v93);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v91 = v13;
          if (!*(_BYTE *)(v13 + 18))
            goto LABEL_221;
        }
      }
      swift_unknownObjectRetain_n();
      result = swift_retain_n();
      v14 = (uint64_t)v6;
      v13 = v4;
LABEL_221:
      v100 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        v101 = *(_QWORD *)(v13 + 24);
        v102 = v14 - v101;
        v8 = v107;
        v7 = a3;
        v9 = v118;
        if (__OFSUB__(v14, v101))
          goto LABEL_303;
        if (__OFADD__(v102, 1))
          goto LABEL_304;
        if (v102 + 1 <= 0)
        {
LABEL_232:
          v100 = 0;
          goto LABEL_261;
        }
        if ((_DWORD)v100 == 1)
        {
          v14 -= v101;
        }
        else
        {
          v103 = *(_QWORD *)(v13 + 48);
          v15 = __OFSUB__(v102, v103);
          v24 = v102 - v103;
          if (v15)
            goto LABEL_305;
          if (__OFADD__(v24, 1))
            goto LABEL_306;
          if (v24 + 1 < 1)
          {
            v100 = 1;
            v14 = v102;
            goto LABEL_261;
          }
          if ((_DWORD)v100 != 2)
          {
            v104 = (_QWORD *)(v13 + 72);
            v16 = 2;
            while (v100 != v16)
            {
              v14 = v24 - *v104;
              if (__OFSUB__(v24, *v104))
                goto LABEL_299;
              if (__OFADD__(v14, 1))
                goto LABEL_300;
              if (v14 + 1 < 1)
                goto LABEL_260;
              ++v16;
              v104 += 3;
              v24 = v14;
              if (v100 == v16)
                goto LABEL_228;
            }
            goto LABEL_298;
          }
          v14 = v24;
        }
      }
      else
      {
        v8 = v107;
        v7 = a3;
        v9 = v118;
      }
LABEL_228:
      if (!v14)
        goto LABEL_261;
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
      goto LABEL_232;
    }
  }
  swift_retain_n();
  v11 = swift_unknownObjectRetain_n();
  v12 = specialized Rope._endPath.getter(v11);
  swift_unknownObjectRelease();
  v13 = 0;
  v14 = 0;
  if (!v4)
    goto LABEL_262;
LABEL_13:
  swift_unknownObjectRetain();
  v115 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v119, v12, v13, v4, v9);
  swift_release();
  result = swift_unknownObjectRelease_n();
  v15 = __OFSUB__(v6, v14);
  v14 = (uint64_t)v6 - v14;
  if (v15)
  {
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
LABEL_277:
    __break(1u);
LABEL_278:
    __break(1u);
LABEL_279:
    __break(1u);
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
LABEL_282:
    __break(1u);
LABEL_283:
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
    goto LABEL_289;
  }
LABEL_14:
  v16 = v3 + 32;
  v111 = (uint64_t *)v3;
  v105 = (_QWORD *)(v3 + 8);
  v106 = (_QWORD *)(v3 + 32);
  v4 = v119;
  while (1)
  {
    v17 = v8[8];
    v119 = v4;
    if (v6 != (_QWORD *)v7)
    {
      if (v17)
        v22 = v8[10];
      else
        v22 = 0;
      goto LABEL_68;
    }
    v4 = v8[10];
    if (v17)
      v18 = v8[10];
    else
      v18 = 0;
    if (v18 < (uint64_t)v6)
      goto LABEL_268;
    if (v17)
    {
      v3 = v8[9];
      v19 = *(unsigned __int16 *)(v17 + 16);
      v7 = *(unsigned __int8 *)(v17 + 18);
      v20 = v4 <= (uint64_t)v6 || (_DWORD)v19 == 0;
      v109 = v12;
      v116 = v8[11];
      if (v20)
      {
        v21 = ((-15 << ((4 * v7 + 8) & 0x3C)) - 1) & v7 | (unint64_t)(v19 << ((4 * v7 + 8) & 0x3C));
        swift_unknownObjectRetain();
        v8 = 0;
        v9 = 0;
LABEL_65:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v116, v21, v9, v17, v3);
        result = swift_unknownObjectRelease_n();
        v7 = a3;
        v12 = v109;
        goto LABEL_66;
      }
      if (*(_BYTE *)(v17 + 18))
      {
        swift_unknownObjectRetain_n();
        v8 = v6;
        v12 = v17;
        while (1)
        {
          v24 = *(unsigned __int16 *)(v12 + 16);
          if (*(_WORD *)(v12 + 16))
          {
            v25 = *(_QWORD *)(v12 + 40);
            v15 = __OFSUB__(v8, v25);
            v16 = (uint64_t)v8 - v25;
            if (v15)
              goto LABEL_247;
            if (__OFADD__(v16, 1))
              goto LABEL_248;
            if (v16 + 1 < 1)
            {
              v24 = 0;
              goto LABEL_36;
            }
            if ((_DWORD)v24 != 1)
            {
              v26 = (uint64_t *)(v12 + 64);
              v27 = 1;
              while (1)
              {
                v28 = *v26;
                v26 += 3;
                v8 = (_QWORD *)(v16 - v28);
                if (__OFSUB__(v16, v28))
                  goto LABEL_230;
                if (__OFADD__(v8, 1))
                  goto LABEL_231;
                if ((uint64_t)v8 + 1 < 1)
                  break;
                ++v27;
                v16 = (uint64_t)v8;
                if (v24 == v27)
                  goto LABEL_35;
              }
              v24 = v27;
              v8 = (_QWORD *)v16;
              goto LABEL_36;
            }
            v8 = (_QWORD *)v16;
          }
LABEL_35:
          if (v8)
          {
            __break(1u);
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
            goto LABEL_249;
          }
LABEL_36:
          v23 = (4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C;
          v7 = ((-15 << v23) - 1) & v7 | (v24 << v23);
          v9 = *(_QWORD *)(v12 + 24 + 24 * v24);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v12 = v9;
          if (!*(_BYTE *)(v9 + 18))
            goto LABEL_51;
        }
      }
      result = swift_unknownObjectRetain_n();
      v7 = 0;
      v8 = v6;
      v9 = v17;
LABEL_51:
      v29 = *(unsigned __int16 *)(v9 + 16);
      if (!*(_WORD *)(v9 + 16))
        goto LABEL_63;
      v30 = *(_QWORD *)(v9 + 24);
      v15 = __OFSUB__(v8, v30);
      v31 = (_QWORD *)((char *)v8 - v30);
      if (v15)
        goto LABEL_287;
      if (__OFADD__(v31, 1))
        goto LABEL_288;
      if ((uint64_t)v31 + 1 < 1)
      {
        v29 = 0;
      }
      else
      {
        if ((_DWORD)v29 == 1)
        {
          v8 = v31;
LABEL_63:
          if (v8)
            goto LABEL_286;
          goto LABEL_64;
        }
        v32 = (uint64_t *)(v9 + 48);
        v33 = 1;
        while (1)
        {
          v34 = *v32;
          v32 += 3;
          v8 = (_QWORD *)((char *)v31 - v34);
          if (__OFSUB__(v31, v34))
            goto LABEL_270;
          if (__OFADD__(v8, 1))
            goto LABEL_271;
          if ((uint64_t)v8 + 1 < 1)
            break;
          ++v33;
          v31 = v8;
          if (v29 == v33)
            goto LABEL_63;
        }
        v29 = v33;
        v8 = v31;
      }
LABEL_64:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v21 = v7 & 0xFFFFFFFFFFFFF0FFLL | (v29 << 8);
      v6 = (_QWORD *)a2;
      goto LABEL_65;
    }
    v8 = 0;
LABEL_66:
    v22 = (char *)v6 - (char *)v8;
    v4 = v119;
    if (__OFSUB__(v6, v8))
      goto LABEL_269;
    v8 = v107;
LABEL_68:
    if (v14 == v22)
      return swift_release_n();
    v24 = v8[11];
    if (v4 != v24)
      goto LABEL_252;
    if (v13)
    {
      v3 = v12;
      v35 = (_QWORD *)(v13 + 24 * ((v12 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF));
      v12 = v35[4];
      v36 = v35[5];
      v9 = v35[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v113 = v36;
      v114 = v12;
    }
    else
    {
      v37 = v8[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v12, v37);
      v113 = v39;
      v114 = v38;
      result = swift_unknownObjectRelease();
      if (v4 != v8[11])
        goto LABEL_275;
      v40 = v8[8];
      swift_unknownObjectRetain();
      v3 = v12;
      v9 = specialized Rope._Node.subscript.getter(v12, v40);
      v12 = v41;
      v4 = v119;
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = v14 + v9;
    if (__OFADD__(v14, v9))
      goto LABEL_253;
    if (v14 >= v7)
      v16 = v7;
    else
      v16 = v14;
    if (v14 < (uint64_t)v6)
      v16 = (uint64_t)v6;
    if (v24 <= (uint64_t)v6)
      v42 = (uint64_t)v6;
    else
      v42 = v14 + v9;
    if (v24 <= v7)
      v24 = v42;
    else
      v24 = v7;
    if (v16 == v24)
    {
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      v100 = v16;
      v14 = v24;
LABEL_261:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v12 = v12 & 0xFFFFFFFFFFFFF0FFLL | (v100 << 8);
      v6 = (_QWORD *)a2;
      if (v4)
        goto LABEL_13;
LABEL_262:
      result = swift_release();
      v115 = 0;
      v15 = __OFSUB__(v6, v14);
      v14 = (uint64_t)v6 - v14;
      if (v15)
        goto LABEL_264;
      goto LABEL_14;
    }
    v15 = __OFSUB__(v24, v16);
    v24 -= v16;
    v117 = v24;
    if (v15)
      goto LABEL_255;
    v43 = v8[8];
    v9 = v8[9];
    v12 = v8[10];
    v24 = v8[11];
    v122 = v4;
    v123 = (uint64_t *)v3;
    v124 = v13;
    v16 = v115 + 1;
    if (__OFADD__(v115, 1))
      goto LABEL_256;
    if (v4 != v24)
      goto LABEL_257;
    ++v115;
    if (v13)
    {
      v44 = (_QWORD *)(v13 + 24 * ((v3 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF));
      v9 = v44[3];
      v12 = v44[4];
      v4 = v44[5];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      swift_retain();
      swift_unknownObjectRetain();
      v9 = specialized Rope._Node.subscript.getter(v3, v43);
      v12 = v45;
      v4 = v46;
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v15 = __OFADD__(v14, v9);
    v14 += v9;
    if (v15)
      goto LABEL_258;
    if (v43)
    {
      v47 = ((-15 << ((4 * *(_BYTE *)(v43 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v43 + 18) | ((unint64_t)*(unsigned __int16 *)(v43 + 16) << ((4 * *(_BYTE *)(v43 + 18) + 8) & 0x3C));
      result = swift_unknownObjectRetain();
    }
    else
    {
      v47 = 0;
    }
    v4 = v119;
    v12 = v3;
    v48 = v3 >= v47;
    v3 = (unint64_t)v111;
    if (v48)
      goto LABEL_259;
    if (v13)
    {
      v49 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
      v50 = ((v12 >> v49) & 0xF) + 1;
      if (v50 < *(unsigned __int16 *)(v13 + 16))
      {
        v12 = (v50 << v49) | ((-15 << v49) - 1) & v12;
        result = swift_unknownObjectRelease_n();
        goto LABEL_107;
      }
    }
    v51 = *(unsigned __int8 *)(v43 + 18);
    v52 = (4 * v51 + 8) & 0x3C;
    v53 = (v12 >> v52) & 0xF;
    v121 = v53;
    if (!v51)
      break;
    swift_unknownObjectRetain();
    v9 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v43 + 24, &v121, (uint64_t)&v122, v43, v51);
    result = swift_unknownObjectRelease();
    v6 = (_QWORD *)a2;
    if ((v9 & 1) == 0)
      goto LABEL_110;
    result = swift_unknownObjectRelease_n();
    v4 = v122;
    v12 = (unint64_t)v123;
    v13 = v124;
    if (v14 >= v7)
      goto LABEL_114;
LABEL_108:
    result = swift_release();
LABEL_180:
    if (v117)
    {
      v75 = v111[4];
      v9 = v111[5];
      v76 = v111[6];
      *v106 = 0;
      v106[1] = 0;
      v106[2] = 0;
      if (v9)
      {
        v110 = v12;
        v120 = v4;
        v77 = v111[1];
        v78 = v111[2];
        v79 = v111[3];
        *v105 = 0;
        v105[1] = 0;
        v105[2] = 0;
        if (!v77)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
          v77 = swift_allocObject();
          v79 = 0;
          v78 = 0;
          *(_WORD *)(v77 + 16) = 0;
          *(_BYTE *)(v77 + 18) = 0;
        }
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        result = swift_isUniquelyReferenced_nonNull();
        if ((result & 1) == 0)
        {
          v80 = specialized Rope._Node.copy()(v77);
          v78 = v81;
          v79 = v82;
          result = swift_unknownObjectRelease();
          v77 = v80;
        }
        v15 = __OFADD__(v78, 1);
        v83 = v78 + 1;
        if (v15)
          goto LABEL_272;
        v15 = __OFADD__(v79, v75);
        v84 = v79 + v75;
        if (v15)
          goto LABEL_273;
        v85 = *(unsigned __int16 *)(v77 + 16);
        v86 = (_QWORD *)(v77 + 24 * *(unsigned __int16 *)(v77 + 16));
        v86[3] = v75;
        v86[4] = v9;
        v86[5] = v76;
        if (v85 == 0xFFFF)
          goto LABEL_274;
        v87 = v85 + 1;
        *(_WORD *)(v77 + 16) = v87;
        if (v87 == 15)
        {
          v88 = swift_unknownObjectRetain();
          specialized Rope.Builder._appendNow(_:)(v88, v83, v84);
          v3 = (unint64_t)v111;
          v89 = v113;
          swift_bridgeObjectRelease();
          v90 = v114;
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v9 = v113;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          v111[1] = v77;
          v111[2] = v83;
          v90 = v114;
          v111[3] = v84;
          v89 = v113;
        }
        v7 = a3;
        v6 = (_QWORD *)a2;
        swift_bridgeObjectRelease();
        outlined consume of Rope<AttributedString._InternalRun>._Item?(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v3 + 32) = v117;
        *(_QWORD *)(v3 + 40) = v90;
        *(_QWORD *)(v3 + 48) = v89;
        v8 = v107;
        v4 = v120;
        v12 = v110;
      }
      else
      {
        v16 = v117;
        v111[4] = v117;
        v111[5] = v114;
        v6 = (_QWORD *)a2;
        v111[6] = v113;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
  }
  v9 = v53 + 1;
  if (v53 + 1 < (unint64_t)*(unsigned __int16 *)(v43 + 16))
  {
    result = swift_unknownObjectRelease_n();
    v12 = (v9 << v52) | ((-15 << v52) - 1) & v12;
    v13 = v43;
LABEL_107:
    v6 = (_QWORD *)a2;
    if (v14 >= v7)
      goto LABEL_114;
    goto LABEL_108;
  }
  v6 = (_QWORD *)a2;
LABEL_110:
  if (v43)
  {
    v54 = *(unsigned __int8 *)(v43 + 18);
    v9 = *(unsigned __int16 *)(v43 + 16);
    result = swift_unknownObjectRelease_n();
    v55 = (4 * v54 + 8) & 0x3C;
    v56 = ((-15 << v55) - 1) & v54;
    v6 = (_QWORD *)a2;
    v12 = v56 | (v9 << v55);
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
  v122 = v119;
  if (v14 < v7)
    goto LABEL_108;
LABEL_114:
  v57 = v8[8];
  if (v6 != (_QWORD *)v7)
  {
    v4 = v8[11];
    if (v57)
    {
      v14 = v8[10];
      v115 = v8[9];
      v66 = *(unsigned __int8 *)(v57 + 18);
      v9 = *(unsigned __int16 *)(v57 + 16);
      result = swift_release();
      v13 = 0;
      v67 = (4 * v66 + 8) & 0x3C;
      v68 = ((-15 << v67) - 1) & v66;
      v6 = (_QWORD *)a2;
      v12 = v68 | (v9 << v67);
    }
    else
    {
      result = swift_release();
      v12 = 0;
      v13 = 0;
      v115 = 0;
      v14 = 0;
    }
    goto LABEL_180;
  }
  v7 = v8[10];
  if (v57)
    v58 = v8[10];
  else
    v58 = 0;
  if (v58 < (uint64_t)v6)
    goto LABEL_281;
  v119 = v8[11];
  if (!v57)
  {
    result = swift_release();
    v4 = 0;
    v13 = 0;
    v12 = 0;
    v115 = 0;
LABEL_178:
    v14 = (uint64_t)v6 - v4;
    v7 = a3;
    if (__OFSUB__(v6, v4))
      goto LABEL_282;
    v4 = v119;
    goto LABEL_180;
  }
  v59 = v8[9];
  v12 = *(unsigned __int8 *)(v57 + 18);
  if (v7 <= (uint64_t)v6 || !*(_WORD *)(v57 + 16))
  {
    v12 = ((-15 << ((4 * v12 + 8) & 0x3C)) - 1) & v12 | ((unint64_t)*(unsigned __int16 *)(v57 + 16) << ((4 * v12 + 8) & 0x3C));
    swift_unknownObjectRetain();
    v4 = 0;
    v13 = 0;
LABEL_177:
    swift_unknownObjectRetain();
    v115 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v119, v12, v13, v57, v59);
    swift_release();
    result = swift_unknownObjectRelease_n();
    goto LABEL_178;
  }
  if (*(_BYTE *)(v57 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v4 = (uint64_t)v6;
    v9 = v57;
    while (1)
    {
      v24 = *(unsigned __int16 *)(v9 + 16);
      if (!*(_WORD *)(v9 + 16))
        goto LABEL_125;
      v61 = *(_QWORD *)(v9 + 40);
      v62 = v4 - v61;
      if (__OFSUB__(v4, v61))
        goto LABEL_266;
      if (__OFADD__(v62, 1))
        goto LABEL_267;
      if (v62 + 1 <= 0)
      {
        v24 = 0;
      }
      else
      {
        if ((_DWORD)v24 == 1)
        {
          v4 -= v61;
LABEL_125:
          if (v4)
            goto LABEL_265;
          goto LABEL_126;
        }
        v63 = *(_QWORD *)(v9 + 64);
        v15 = __OFSUB__(v62, v63);
        v16 = v62 - v63;
        if (v15)
          goto LABEL_279;
        if (__OFADD__(v16, 1))
          goto LABEL_280;
        if (v16 + 1 >= 1)
        {
          if ((_DWORD)v24 != 2)
          {
            v64 = (_QWORD *)(v9 + 88);
            v65 = 2;
            while (v24 != v65)
            {
              v4 = v16 - *v64;
              if (__OFSUB__(v16, *v64))
                goto LABEL_250;
              if (__OFADD__(v4, 1))
                goto LABEL_251;
              if (v4 + 1 < 1)
              {
                v24 = v65;
                v4 = v16;
                goto LABEL_126;
              }
              ++v65;
              v64 += 3;
              v16 = v4;
              if (v24 == v65)
                goto LABEL_125;
            }
LABEL_249:
            __break(1u);
LABEL_250:
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
            goto LABEL_254;
          }
          v4 = v16;
          goto LABEL_125;
        }
        v24 = 1;
        v4 = v62;
      }
LABEL_126:
      v60 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C;
      v12 = ((-15 << v60) - 1) & v12 | (v24 << v60);
      v13 = *(_QWORD *)(v9 + 24 + 24 * v24);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v9 = v13;
      if (!*(_BYTE *)(v13 + 18))
        goto LABEL_153;
    }
  }
  result = swift_unknownObjectRetain_n();
  v12 = 0;
  v4 = (uint64_t)v6;
  v13 = v57;
LABEL_153:
  v69 = *(unsigned __int16 *)(v13 + 16);
  if (!*(_WORD *)(v13 + 16))
  {
LABEL_162:
    v71 = v4;
    goto LABEL_163;
  }
  v70 = *(_QWORD *)(v13 + 24);
  v15 = __OFSUB__(v4, v70);
  v71 = v4 - v70;
  if (v15)
    goto LABEL_296;
  if (__OFADD__(v71, 1))
    goto LABEL_297;
  if (v71 + 1 <= 0)
  {
    v69 = 0;
LABEL_176:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v12 = v12 & 0xFFFFFFFFFFFFF0FFLL | (v69 << 8);
    v6 = (_QWORD *)a2;
    goto LABEL_177;
  }
  if ((_DWORD)v69 == 1)
  {
LABEL_163:
    if (v71)
      goto LABEL_295;
    v4 = 0;
    goto LABEL_176;
  }
  v72 = *(_QWORD *)(v13 + 48);
  v4 = v71 - v72;
  if (__OFSUB__(v71, v72))
    goto LABEL_301;
  if (__OFADD__(v4, 1))
    goto LABEL_302;
  if (v4 + 1 < 1)
  {
    v69 = 1;
    v4 = v71;
    goto LABEL_176;
  }
  if ((_DWORD)v69 == 2)
    goto LABEL_162;
  v73 = (_QWORD *)(v13 + 72);
  v74 = 2;
  while (v69 != v74)
  {
    v71 = v4 - *v73;
    if (__OFSUB__(v4, *v73))
      goto LABEL_290;
    if (__OFADD__(v71, 1))
      goto LABEL_291;
    if (v71 + 1 < 1)
    {
      v69 = v74;
      goto LABEL_176;
    }
    ++v74;
    v73 += 3;
    v4 = v71;
    if (v69 == v74)
      goto LABEL_163;
  }
LABEL_289:
  __break(1u);
LABEL_290:
  __break(1u);
LABEL_291:
  __break(1u);
LABEL_292:
  __break(1u);
LABEL_293:
  __break(1u);
LABEL_294:
  __break(1u);
LABEL_295:
  __break(1u);
LABEL_296:
  __break(1u);
LABEL_297:
  __break(1u);
LABEL_298:
  __break(1u);
LABEL_299:
  __break(1u);
LABEL_300:
  __break(1u);
LABEL_301:
  __break(1u);
LABEL_302:
  __break(1u);
LABEL_303:
  __break(1u);
LABEL_304:
  __break(1u);
LABEL_305:
  __break(1u);
LABEL_306:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(v3 + 40);
    if (v7)
    {
      v8 = *(_QWORD *)(v3 + 32);
      v9 = *(_QWORD *)(v3 + 48);
      v10 = *(_QWORD *)(v3 + 8);
      v11 = *(_OWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if (!v10)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
        v10 = swift_allocObject();
        *(_WORD *)(v10 + 16) = 0;
        *(_BYTE *)(v10 + 18) = 0;
        v11 = 0uLL;
      }
      v13 = v10;
      v14 = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._Node._appendItem(_:)(v8, v7, v9);
      if (*(_WORD *)(v13 + 16) == 15)
      {
        v12 = swift_unknownObjectRetain();
        specialized Rope.Builder._appendNow(_:)(v12, v14, *((uint64_t *)&v14 + 1));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v3 + 8) = v13;
        *(_OWORD *)(v3 + 16) = v14;
      }
    }
    *(_QWORD *)(v3 + 32) = v6;
    *(_QWORD *)(v3 + 40) = a2;
    *(_QWORD *)(v3 + 48) = a3;
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double protocol witness for AttributedStringProtocol.unicodeScalars.getter in conformance AttributedString@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  double result;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[48];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v3 = *v1;
  v4 = *(_OWORD *)(*v1 + 32);
  v28 = *(_OWORD *)(*v1 + 16);
  v29 = v4;
  v30 = *(_OWORD *)(v3 + 48);
  v20 = BigString.startIndex.getter();
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = BigString.endIndex.getter();
  v25 = v8;
  v26 = v9;
  v27 = v10;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v14);
  outlined release of Locale((uint64_t)v15);
  swift_release();
  *(_QWORD *)a1 = v3;
  v11 = v17;
  *(_OWORD *)(a1 + 8) = v16;
  *(_OWORD *)(a1 + 24) = v11;
  result = *(double *)&v18;
  v13 = v19;
  *(_OWORD *)(a1 + 40) = v18;
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t AttributedString._InternalRuns._exactIndex(atUTF8Offset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  if (a2)
    v7 = a4;
  else
    v7 = 0;
  if (result < 0)
    goto LABEL_56;
  v8 = result;
  if (v7 < result)
    goto LABEL_56;
  v9 = a5;
  v10 = a3;
  if (!a2 || a4 <= result || !*(_WORD *)(a2 + 16))
  {
    v23 = swift_unknownObjectRetain();
    v24 = specialized Rope._endPath.getter(v23);
    result = swift_unknownObjectRelease();
    v14 = 0;
    v13 = 0;
    if (!a2)
      goto LABEL_47;
    goto LABEL_28;
  }
  v32 = a3;
  v33 = a5;
  v12 = *(unsigned __int8 *)(a2 + 18);
  if (!*(_BYTE *)(a2 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v9 = 0;
    v13 = v8;
    v14 = a2;
    v28 = *(unsigned __int16 *)(a2 + 16);
    if (*(_WORD *)(a2 + 16))
      goto LABEL_34;
LABEL_45:
    if (!v13)
    {
      while (1)
      {
LABEL_46:
        swift_unknownObjectRelease();
        result = swift_unknownObjectRelease();
        v24 = v9 | (v28 << 8);
        v10 = v32;
        v9 = v33;
        if (a2)
        {
LABEL_28:
          swift_unknownObjectRetain();
          v26 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v24, v14, a2, v10);
          result = swift_unknownObjectRelease();
          v27 = v8 - v13;
          if (!__OFSUB__(v8, v13))
            goto LABEL_29;
        }
        else
        {
LABEL_47:
          v26 = 0;
          v27 = v8 - v13;
          if (!__OFSUB__(v8, v13))
          {
LABEL_29:
            if (!v13)
            {
              *a6 = v9;
              a6[1] = v24;
              a6[2] = v14;
              a6[3] = v26;
              a6[4] = v27;
              return result;
            }
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
        }
        __break(1u);
LABEL_50:
        v28 = v25;
        v13 = v27;
      }
    }
    goto LABEL_62;
  }
  result = swift_unknownObjectRetain_n();
  v13 = v8;
  v14 = a2;
  while (2)
  {
    v16 = *(unsigned __int16 *)(v14 + 16);
    if (!*(_WORD *)(v14 + 16))
      goto LABEL_12;
    v17 = *(_QWORD *)(v14 + 40);
    v18 = __OFSUB__(v13, v17);
    v19 = v13 - v17;
    if (v18)
      goto LABEL_54;
    if (__OFADD__(v19, 1))
      goto LABEL_55;
    if (v19 + 1 < 1)
    {
      v16 = 0;
      goto LABEL_13;
    }
    if ((_DWORD)v16 == 1)
    {
      v13 = v19;
LABEL_12:
      if (!v13)
        goto LABEL_13;
      goto LABEL_53;
    }
    v20 = (uint64_t *)(v14 + 64);
    v21 = 1;
    while (1)
    {
      v22 = *v20;
      v20 += 3;
      v13 = v19 - v22;
      if (__OFSUB__(v19, v22))
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      if (__OFADD__(v13, 1))
        goto LABEL_52;
      if (v13 + 1 < 1)
        break;
      ++v21;
      v19 = v13;
      if (v16 == v21)
        goto LABEL_12;
    }
    v16 = v21;
    v13 = v19;
LABEL_13:
    v15 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
    v12 = ((-15 << v15) - 1) & v12 | (v16 << v15);
    v14 = *(_QWORD *)(v14 + 24 + 24 * v16);
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
    if (*(_BYTE *)(v14 + 18))
      continue;
    break;
  }
  v9 = v12 & 0xFFFFFFFFFFFFF0FFLL;
  v28 = *(unsigned __int16 *)(v14 + 16);
  if (!*(_WORD *)(v14 + 16))
    goto LABEL_45;
LABEL_34:
  v29 = *(_QWORD *)(v14 + 24);
  v18 = __OFSUB__(v13, v29);
  v27 = v13 - v29;
  if (v18)
    goto LABEL_60;
  if (!__OFADD__(v27, 1))
  {
    if ((uint64_t)(v27 + 1) < 1)
    {
      v28 = 0;
      goto LABEL_46;
    }
    if ((_DWORD)v28 == 1)
    {
      v13 = v27;
      goto LABEL_45;
    }
    v30 = (uint64_t *)(v14 + 48);
    v25 = 1;
    while (1)
    {
      v31 = *v30;
      v30 += 3;
      v13 = v27 - v31;
      if (__OFSUB__(v27, v31))
        goto LABEL_58;
      if (__OFADD__(v13, 1))
        break;
      if (v13 + 1 < 1)
        goto LABEL_50;
      ++v25;
      v27 = v13;
      if (v28 == v25)
        goto LABEL_45;
    }
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
  }
  __break(1u);
LABEL_62:
  __break(1u);
  return result;
}

uint64_t specialized Rope.Builder._insertAfterTip(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  if (!result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v6 = v3;
  v7 = result;
  v8 = v3[8];
  if (v8)
  {
    v9 = v3[7];
    v11 = v3[9];
    v10 = (_QWORD *)v3[10];
    v12 = v10[2];
    if (v12)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      if (v12 <= v10[2])
      {
        specialized Rope.prepend(_:)(v9, v8, v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        result = swift_bridgeObjectRelease_n();
LABEL_13:
        v6[10] = v10;
        goto LABEL_14;
      }
      __break(1u);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
      v13 = swift_allocObject();
      *(_WORD *)(v13 + 16) = 0;
      *(_BYTE *)(v13 + 18) = 0;
      v20[0] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope._Node._appendItem(_:)(v9, v8, v11);
      v18 = 0;
      v19 = v20[0];
      v17 = 0;
      memset(v20, 0, sizeof(v20));
      MEMORY[0x186DA9E90](v20, 8);
      v9 = v20[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_10:
        v15 = v10[2];
        v14 = v10[3];
        if (v15 >= v14 >> 1)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v10);
        v10[2] = v15 + 1;
        v16 = &v10[4 * v15];
        v16[4] = v19;
        v16[5] = v18;
        v16[6] = v17;
        v16[7] = v9;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    goto LABEL_10;
  }
LABEL_14:
  v6[7] = v7;
  v6[8] = a2;
  v6[9] = a3;
  return result;
}

unsigned __int16 *specialized closure #2 in Rope.builder<A>(removing:in:)(unsigned __int16 *result, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *a3;
  v6 = *result;
  if (*result)
  {
    v7 = v5 - *a2;
    if (__OFSUB__(v5, *a2))
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (__OFADD__(v7, 1))
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v7 + 1 < 1)
    {
      v6 = 0;
      v8 = a5 - a4;
      if (!__OFSUB__(a5, a4))
        goto LABEL_17;
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if ((_DWORD)v6 != 1)
    {
      v9 = a2 + 3;
      v10 = 1;
      while (1)
      {
        v11 = *v9;
        v9 += 3;
        v5 = v7 - v11;
        if (__OFSUB__(v7, v11))
          goto LABEL_21;
        if (__OFADD__(v5, 1))
          goto LABEL_22;
        if (v5 + 1 < 1)
        {
          v6 = v10;
          v5 = v7;
          v8 = a5 - a4;
          if (__OFSUB__(a5, a4))
            goto LABEL_20;
          goto LABEL_17;
        }
        ++v10;
        v7 = v5;
        if (v6 == v10)
          goto LABEL_15;
      }
    }
    v5 -= *a2;
  }
LABEL_15:
  if (!v5)
  {
    v8 = a5 - a4;
    if (!__OFSUB__(a5, a4))
    {
LABEL_17:
      specialized Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(v6, v5, v8, 1, result, (uint64_t)a2);
      return (unsigned __int16 *)v6;
    }
    goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(uint64_t result, uint64_t a2, uint64_t a3, char a4, unsigned __int16 *a5, uint64_t a6)
{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __OFADD__(a2, a3);
  v7 = a2 + a3;
  if (v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = *a5;
  if (v8 > result)
  {
    v9 = (a4 & 1) == 0;
    if (__OFADD__(v7, v9))
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    v10 = *(_QWORD *)(a6 + 24 * result);
    if (v10 < v7 + v9)
    {
      v6 = __OFSUB__(v7, v10);
      v11 = v7 - v10;
      if (v6)
      {
LABEL_19:
        __break(1u);
        return result;
      }
      v12 = result + 1;
      if (result + 1 >= v8)
        return v12;
      v13 = (uint64_t *)(a6 + 24 * result + 24);
      while (!__OFADD__(v11, v9))
      {
        v15 = *v13;
        v13 += 3;
        v14 = v15;
        if (v15 >= v11 + v9)
          return v12;
        v6 = __OFSUB__(v11, v14);
        v11 -= v14;
        if (v6)
          goto LABEL_16;
        if (v8 == ++v12)
          return *a5;
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  return result;
}

{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __OFADD__(a2, a3);
  v7 = a2 + a3;
  if (v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = *a5;
  if (v8 > result)
  {
    v9 = (a4 & 1) == 0;
    if (__OFADD__(v7, v9))
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    v10 = *(_QWORD *)(a6 + 24 * result + 16);
    if (v10 < v7 + v9)
    {
      v6 = __OFSUB__(v7, v10);
      v11 = v7 - v10;
      if (v6)
      {
LABEL_19:
        __break(1u);
        return result;
      }
      v12 = result + 1;
      if (result + 1 >= v8)
        return v12;
      v13 = (uint64_t *)(a6 + 24 * result + 40);
      while (!__OFADD__(v11, v9))
      {
        v15 = *v13;
        v13 += 3;
        v14 = v15;
        if (v15 >= v11 + v9)
          return v12;
        v6 = __OFSUB__(v11, v14);
        v11 -= v14;
        if (v6)
          goto LABEL_16;
        if (v8 == ++v12)
          return *a5;
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t one-time initialization function for _nilObjCError()
{
  uint64_t result;

  lazy protocol witness table accessor for type _GenericObjCError and conformance _GenericObjCError();
  result = swift_allocError();
  _nilObjCError = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _GenericObjCError and conformance _GenericObjCError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError;
  if (!lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _GenericObjCError, &type metadata for _GenericObjCError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError;
  if (!lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _GenericObjCError, &type metadata for _GenericObjCError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GenericObjCError and conformance _GenericObjCError);
  }
  return result;
}

uint64_t Date.FormatStyle.weekday(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  int v3;
  unsigned __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  __int128 v18;
  unsigned __int128 v19;
  __int128 v20;
  _BYTE v21[74];

  v3 = *a1;
  v4 = v2[1];
  v18 = *v2;
  v19 = v4;
  v5 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v5;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  v6 = v2[3];
  v20 = v2[2];
  *(_OWORD *)v21 = v6;
  v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    v8 = 0x906030001;
    v9 = 50332931;
    if (v3 == 6)
    {
      v10 = 0;
      v11 = 0x1000000000000;
      v12 = 0x200000000000000;
    }
    else
    {
      v9 = 50333183;
      v8 = 0x906030100;
      v11 = 0x2000000000000;
      v12 = 0x2000E0000000000;
      v10 = 327680;
    }
    v15 = 0;
    v7 = v12 | v11 | v8;
    v13 = (unint64_t)v9 | (unsigned __int128)(unint64_t)v10;
    v14 = xmmword_1820FDF60;
    v16 = 3327;
  }
  else
  {
    v14 = v18;
    v13 = v19;
    v15 = *((_QWORD *)&v20 + 1);
    v16 = *(_WORD *)v21;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 32) = v7 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v3 << 24);
  *(_QWORD *)(a2 + 40) = v15;
  *(_WORD *)(a2 + 48) = v16;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t _LocaleICU.temperatureUnit.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  os_unfair_lock_s *v4;
  char v5;
  char v6;
  _BYTE v7[144];
  _BYTE v8[137];
  char v9;

  outlined init with take of LocalePreferences?(v1 + 40, (uint64_t)v7);
  outlined init with take of LocalePreferences?((uint64_t)v7, (uint64_t)v8);
  result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v8);
  if ((_DWORD)result == 1 || v9 == 2)
  {
    v4 = *(os_unfair_lock_s **)(v1 + 184);
    swift_retain();
    os_unfair_lock_lock(v4 + 140);
    closure #1 in _LocaleICU.temperatureUnit.getter((uint64_t)&v4[4], &v6);
    os_unfair_lock_unlock(v4 + 140);
    result = swift_release();
    v5 = v6;
  }
  else
  {
    v5 = v9 & 1;
  }
  *a1 = v5;
  return result;
}

uint64_t closure #1 in _LocaleICU.temperatureUnit.getter@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  int v3;
  uint64_t v4;
  int UnitsForUsage;
  char v6;

  v3 = *(unsigned __int8 *)(result + 320);
  if (v3 != 2)
  {
    v6 = v3 & 1;
    goto LABEL_5;
  }
  v4 = result;
  String.utf8CString.getter();
  UnitsForUsage = uameasfmt_getUnitsForUsage();
  result = swift_release();
  if (UnitsForUsage >= 1)
  {
    v6 = 1;
    *(_BYTE *)(v4 + 320) = 1;
LABEL_5:
    *a2 = v6;
    return result;
  }
  *(_BYTE *)(v4 + 320) = 1;
  *a2 = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type ICUPatternGenerator.PatternGeneratorInfo and conformance ICUPatternGenerator.PatternGeneratorInfo()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICUPatternGenerator.PatternGeneratorInfo and conformance ICUPatternGenerator.PatternGeneratorInfo;
  if (!lazy protocol witness table cache variable for type ICUPatternGenerator.PatternGeneratorInfo and conformance ICUPatternGenerator.PatternGeneratorInfo)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICUPatternGenerator.PatternGeneratorInfo, &type metadata for ICUPatternGenerator.PatternGeneratorInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUPatternGenerator.PatternGeneratorInfo and conformance ICUPatternGenerator.PatternGeneratorInfo);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICUDateFormatter.PatternCacheKey and conformance ICUDateFormatter.PatternCacheKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICUDateFormatter.PatternCacheKey and conformance ICUDateFormatter.PatternCacheKey;
  if (!lazy protocol witness table cache variable for type ICUDateFormatter.PatternCacheKey and conformance ICUDateFormatter.PatternCacheKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICUDateFormatter.PatternCacheKey, &type metadata for ICUDateFormatter.PatternCacheKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUDateFormatter.PatternCacheKey and conformance ICUDateFormatter.PatternCacheKey);
  }
  return result;
}

id _NSLocalizedStringResourceSwiftWrapper.init(key:defaultValue:table:locale:bundleURL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t *a8)
{
  void *v8;
  objc_class *ObjectType;
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  objc_super v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;

  ObjectType = (objc_class *)swift_getObjectType();
  v18 = *a7;
  v27 = *a8;
  v28 = *(_OWORD *)(a8 + 1);
  v29 = v18;
  v19 = v8;
  LocalizedStringResource.init(key:defaultValue:table:locale:bundleURL:sandboxExtensionToken:)(a1, a2, a3, a4, a5, a6, &v29, (uint64_t)&v27, (uint64_t)&v30, 0, 0);
  v20 = v32;
  v21 = v33;
  v22 = v36;
  v23 = &v19[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
  *(_QWORD *)v23 = v30;
  *(_OWORD *)(v23 + 8) = v31;
  *((_QWORD *)v23 + 3) = v20;
  *((_QWORD *)v23 + 4) = v21;
  *(_OWORD *)(v23 + 40) = v34;
  *(_OWORD *)(v23 + 56) = v35;
  *((_QWORD *)v23 + 9) = v22;
  v24 = v38;
  *((_OWORD *)v23 + 5) = v37;
  *((_OWORD *)v23 + 6) = v24;

  v26.receiver = v19;
  v26.super_class = ObjectType;
  return objc_msgSendSuper2(&v26, sel_init);
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.CodableStorage()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  void *v23;
  void *v24;

  v7 = "p";
  v8 = MEMORY[0x1E0DE9D30] + 64;
  v9 = MEMORY[0x1E0DE9D38] + 64;
  v10 = MEMORY[0x1E0DE9D30] + 64;
  v11 = MEMORY[0x1E0DE9D38] + 64;
  v12 = MEMORY[0x1E0DE9D30] + 64;
  v13 = MEMORY[0x1E0DE9D38] + 64;
  v14 = MEMORY[0x1E0DE9D38] + 64;
  v15 = &unk_182061908;
  v16 = MEMORY[0x1E0DE9D38] + 64;
  v17 = &unk_182061908;
  v18 = &unk_182061920;
  v19 = &unk_182061938;
  result = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(319);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v20 = &v6;
    result = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(319);
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v21 = &v5;
      result = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(319);
      if (v3 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        v22 = &v4;
        v23 = &unk_182061968;
        v24 = &unk_182061980;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format);
}

uint64_t type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
}

uint64_t URLResourceValues._get(_:)(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  char v5;
  id v6;
  id v8;
  __int128 v9;
  __int128 v10;

  v2 = *v1;
  if (!*(_QWORD *)(v2 + 16))
  {
    v9 = 0u;
    v10 = 0u;
    goto LABEL_8;
  }
  v3 = a1;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0)
  {
    v9 = 0u;
    v10 = 0u;

    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v4, (uint64_t)&v9);

  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v9);
    return 2;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
    return 2;
  v6 = objc_msgSend(v8, sel_BOOLValue);

  return (uint64_t)v6;
}

uint64_t URLResourceValues.creationDate.getter@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;

  v4 = *v2;
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = *a1;
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v7 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }
    else
    {
      v9 = 0u;
      v10 = 0u;
    }

  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
    *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = result ^ 1;
  return result;
}

uint64_t URLResourceValues.parentDirectory.getter@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;

  v4 = *v2;
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = *a1;
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v7 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }
    else
    {
      v9 = 0u;
      v10 = 0u;
    }

  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

uint64_t URLResourceValues.fileIdentifier.getter(id *a1)
{
  uint64_t *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *a1;
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v4, (uint64_t)&v9);
    }
    else
    {
      v9 = 0u;
      v10 = 0u;
    }

  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v6 = swift_dynamicCast();
  v7 = v11;
  if (!v6)
    return 0;
  return v7;
}

id URLResourceValues.linkCount.getter(void **a1)
{
  return URLResourceValues._get(_:)(*a1);
}

id URLResourceValues._get(_:)(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  char v5;
  id v6;
  id v8;
  __int128 v9;
  __int128 v10;

  v2 = *v1;
  if (!*(_QWORD *)(v2 + 16))
  {
    v9 = 0u;
    v10 = 0u;
    goto LABEL_8;
  }
  v3 = a1;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0)
  {
    v9 = 0u;
    v10 = 0u;

    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v4, (uint64_t)&v9);

  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v9);
    return 0;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v6 = objc_msgSend(v8, sel_integerValue);

  return v6;
}

uint64_t URLResourceValues.fileResourceIdentifier.getter(id *a1)
{
  uint64_t *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  char v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *a1;
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v4, (uint64_t)&v7);
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }

  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSCopying & NSSecureCoding & NSObject);
  if (swift_dynamicCast())
    return v9;
  else
    return 0;
}

uint64_t URLResourceValues._set(_:newValue:)(void *a1, unsigned __int8 a2)
{
  int v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  __int128 v9;
  __int128 v10;

  v2 = a2;
  v3 = a1;
  specialized Set._Variant.insert(_:)(&v9, v3);

  if (v2 == 2)
  {
    v9 = 0u;
    v10 = 0u;
    v4 = v3;
  }
  else
  {
    v5 = objc_allocWithZone((Class)NSNumber);
    v6 = v3;
    v7 = objc_msgSend(v5, sel_initWithBool_, v2 & 1);
    *((_QWORD *)&v10 + 1) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(_QWORD *)&v9 = v7;
    v4 = v6;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v9, v4);
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  id v24;
  void *v26;
  id v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v3;
    *v3 = 0x8000000000000000;
    v24 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v6 + 48) + 8 * v9));
  v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)(a2) && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      v16 = ~v8;
      do
      {
        v9 = (v9 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_15;
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v6 + 48) + 8 * v9));
        v19 = v18;
        if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(a2) && v19 == v20)
          goto LABEL_16;
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  v26 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  v27 = v26;
  return 0;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  void *v63;
  id v64;
  Swift::Int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  Swift::Int v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  void *v91;
  _QWORD *v92;
  _QWORD *v93;
  int64_t v94;
  int64_t v95;

  v4 = v3;
  v6 = (void *)result;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 16);
  v9 = *(_QWORD *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    v10 = *v3;
    goto LABEL_120;
  }
  v91 = (void *)result;
  if ((a3 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
    v11 = static _SetStorage.resize(original:capacity:move:)();
    v10 = v11;
    if (*(_QWORD *)(v7 + 16))
    {
      v12 = 1 << *(_BYTE *)(v7 + 32);
      v92 = (_QWORD *)(v7 + 56);
      if (v12 < 64)
        v13 = ~(-1 << v12);
      else
        v13 = -1;
      v14 = v13 & *(_QWORD *)(v7 + 56);
      v94 = (unint64_t)(v12 + 63) >> 6;
      v15 = v11 + 56;
      swift_retain();
      v16 = 0;
      while (1)
      {
        if (v14)
        {
          v18 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
          v19 = v18 | (v16 << 6);
        }
        else
        {
          v20 = v16 + 1;
          if (__OFADD__(v16, 1))
            goto LABEL_125;
          if (v20 >= v94)
          {
LABEL_66:
            swift_release();
            v50 = 1 << *(_BYTE *)(v7 + 32);
            v6 = v91;
            if (v50 > 63)
              bzero(v92, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v92 = -1 << v50;
            *(_QWORD *)(v7 + 16) = 0;
            break;
          }
          v21 = v92[v20];
          ++v16;
          if (!v21)
          {
            v16 = v20 + 1;
            if (v20 + 1 >= v94)
              goto LABEL_66;
            v21 = v92[v16];
            if (!v21)
            {
              v16 = v20 + 2;
              if (v20 + 2 >= v94)
                goto LABEL_66;
              v21 = v92[v16];
              if (!v21)
              {
                v16 = v20 + 3;
                if (v20 + 3 >= v94)
                  goto LABEL_66;
                v21 = v92[v16];
                if (!v21)
                {
                  v22 = v20 + 4;
                  if (v22 >= v94)
                    goto LABEL_66;
                  v21 = v92[v22];
                  if (!v21)
                  {
                    while (1)
                    {
                      v16 = v22 + 1;
                      if (__OFADD__(v22, 1))
                        break;
                      if (v16 >= v94)
                        goto LABEL_66;
                      v21 = v92[v16];
                      ++v22;
                      if (v21)
                        goto LABEL_29;
                    }
LABEL_129:
                    __break(1u);
LABEL_130:
                    __break(1u);
LABEL_131:
                    __break(1u);
LABEL_132:
                    swift_bridgeObjectRelease_n();
                    goto LABEL_133;
                  }
                  v16 = v22;
                }
              }
            }
          }
LABEL_29:
          v14 = (v21 - 1) & v21;
          v19 = __clz(__rbit64(v21)) + (v16 << 6);
        }
        v23 = *(void **)(*(_QWORD *)(v7 + 48) + 8 * v19);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        Hasher.init(_seed:)();
        String.hash(into:)();
        v24 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        v25 = -1 << *(_BYTE *)(v10 + 32);
        v26 = v24 & ~v25;
        v27 = v26 >> 6;
        if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
        {
          v17 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v28 = 0;
          v29 = (unint64_t)(63 - v25) >> 6;
          do
          {
            if (++v27 == v29 && (v28 & 1) != 0)
            {
              __break(1u);
              goto LABEL_124;
            }
            v30 = v27 == v29;
            if (v27 == v29)
              v27 = 0;
            v28 |= v30;
            v31 = *(_QWORD *)(v15 + 8 * v27);
          }
          while (v31 == -1);
          v17 = __clz(__rbit64(~v31)) + (v27 << 6);
        }
        *(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v17) = v23;
        ++*(_QWORD *)(v10 + 16);
      }
    }
LABEL_105:
    swift_release();
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  if (v9 > v8)
  {
    v32 = v3;
    v33 = static _SetStorage.copy(original:)();
    v10 = v33;
    if (!*(_QWORD *)(v7 + 16))
      goto LABEL_102;
    v34 = (void *)(v33 + 56);
    v35 = v7 + 56;
    v36 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
    if (v10 != v7 || (unint64_t)v34 >= v35 + 8 * v36)
      memmove(v34, (const void *)(v7 + 56), 8 * v36);
    v37 = 0;
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
    v38 = 1 << *(_BYTE *)(v7 + 32);
    v39 = -1;
    if (v38 < 64)
      v39 = ~(-1 << v38);
    v40 = v39 & *(_QWORD *)(v7 + 56);
    v41 = (unint64_t)(v38 + 63) >> 6;
    while (1)
    {
      if (v40)
      {
        v42 = __clz(__rbit64(v40));
        v40 &= v40 - 1;
        v43 = v42 | (v37 << 6);
      }
      else
      {
        v47 = v37 + 1;
        if (__OFADD__(v37, 1))
          goto LABEL_126;
        if (v47 >= v41)
          goto LABEL_102;
        v48 = *(_QWORD *)(v35 + 8 * v47);
        ++v37;
        if (!v48)
        {
          v37 = v47 + 1;
          if (v47 + 1 >= v41)
            goto LABEL_102;
          v48 = *(_QWORD *)(v35 + 8 * v37);
          if (!v48)
          {
            v37 = v47 + 2;
            if (v47 + 2 >= v41)
              goto LABEL_102;
            v48 = *(_QWORD *)(v35 + 8 * v37);
            if (!v48)
            {
              v37 = v47 + 3;
              if (v47 + 3 >= v41)
                goto LABEL_102;
              v48 = *(_QWORD *)(v35 + 8 * v37);
              if (!v48)
              {
                v49 = v47 + 4;
                if (v49 >= v41)
                  goto LABEL_102;
                v48 = *(_QWORD *)(v35 + 8 * v49);
                if (!v48)
                {
                  while (1)
                  {
                    v37 = v49 + 1;
                    if (__OFADD__(v49, 1))
                      goto LABEL_130;
                    if (v37 >= v41)
                      break;
                    v48 = *(_QWORD *)(v35 + 8 * v37);
                    ++v49;
                    if (v48)
                      goto LABEL_65;
                  }
LABEL_102:
                  result = swift_release();
                  *v32 = v10;
LABEL_120:
                  *(_QWORD *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                  *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2) = v6;
                  v88 = *(_QWORD *)(v10 + 16);
                  v89 = __OFADD__(v88, 1);
                  v90 = v88 + 1;
                  if (!v89)
                  {
                    *(_QWORD *)(v10 + 16) = v90;
                    return result;
                  }
LABEL_128:
                  __break(1u);
                  goto LABEL_129;
                }
                v37 = v49;
              }
            }
          }
        }
LABEL_65:
        v40 = (v48 - 1) & v48;
        v43 = __clz(__rbit64(v48)) + (v37 << 6);
      }
      v44 = 8 * v43;
      v45 = *(void **)(*(_QWORD *)(v7 + 48) + v44);
      *(_QWORD *)(*(_QWORD *)(v10 + 48) + v44) = v45;
      v46 = v45;
    }
  }
  v51 = static _SetStorage.resize(original:capacity:move:)();
  v10 = v51;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_105;
  v52 = 1 << *(_BYTE *)(v7 + 32);
  v93 = (_QWORD *)(v7 + 56);
  if (v52 < 64)
    v53 = ~(-1 << v52);
  else
    v53 = -1;
  v54 = v53 & *(_QWORD *)(v7 + 56);
  v95 = (unint64_t)(v52 + 63) >> 6;
  v55 = v51 + 56;
  swift_retain();
  v56 = 0;
  while (v54)
  {
    v58 = __clz(__rbit64(v54));
    v54 &= v54 - 1;
    v59 = v58 | (v56 << 6);
LABEL_93:
    v63 = *(void **)(*(_QWORD *)(v7 + 48) + 8 * v59);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    Hasher.init(_seed:)();
    v64 = v63;
    String.hash(into:)();
    v65 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v66 = -1 << *(_BYTE *)(v10 + 32);
    v67 = v65 & ~v66;
    v68 = v67 >> 6;
    if (((-1 << v67) & ~*(_QWORD *)(v55 + 8 * (v67 >> 6))) != 0)
    {
      v57 = __clz(__rbit64((-1 << v67) & ~*(_QWORD *)(v55 + 8 * (v67 >> 6)))) | v67 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_74;
    }
    v69 = 0;
    v70 = (unint64_t)(63 - v66) >> 6;
    do
    {
      if (++v68 == v70 && (v69 & 1) != 0)
      {
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }
      v71 = v68 == v70;
      if (v68 == v70)
        v68 = 0;
      v69 |= v71;
      v72 = *(_QWORD *)(v55 + 8 * v68);
    }
    while (v72 == -1);
    v57 = __clz(__rbit64(~v72)) + (v68 << 6);
LABEL_74:
    *(_QWORD *)(v55 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v57;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v57) = v64;
    ++*(_QWORD *)(v10 + 16);
  }
  v60 = v56 + 1;
  if (__OFADD__(v56, 1))
    goto LABEL_127;
  if (v60 >= v95)
  {
    swift_release_n();
    v6 = v91;
    goto LABEL_106;
  }
  v6 = v91;
  v61 = v93[v60];
  ++v56;
  if (v61)
    goto LABEL_92;
  v56 = v60 + 1;
  if (v60 + 1 >= v95)
    goto LABEL_123;
  v61 = v93[v56];
  if (v61)
    goto LABEL_92;
  v56 = v60 + 2;
  if (v60 + 2 >= v95)
    goto LABEL_123;
  v61 = v93[v56];
  if (v61)
    goto LABEL_92;
  v56 = v60 + 3;
  if (v60 + 3 >= v95)
    goto LABEL_123;
  v61 = v93[v56];
  if (v61)
  {
LABEL_92:
    v54 = (v61 - 1) & v61;
    v59 = __clz(__rbit64(v61)) + (v56 << 6);
    goto LABEL_93;
  }
  v62 = v60 + 4;
  if (v62 >= v95)
    goto LABEL_123;
  v61 = v93[v62];
  if (v61)
  {
    v56 = v62;
    goto LABEL_92;
  }
  while (1)
  {
    v56 = v62 + 1;
    if (__OFADD__(v62, 1))
      goto LABEL_131;
    if (v56 >= v95)
      break;
    v61 = v93[v56];
    ++v62;
    if (v61)
      goto LABEL_92;
  }
LABEL_123:
  swift_release_n();
LABEL_106:
  *v4 = v10;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  Hasher.init(_seed:)();
  String.hash(into:)();
  v73 = Hasher._finalize()();
  result = swift_bridgeObjectRelease();
  v74 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v73 & ~v74;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_120;
  v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v10 + 48) + 8 * a2));
  v77 = v76;
  if (v75 == static String._unconditionallyBridgeFromObjectiveC(_:)(v6) && v77 == v78)
    goto LABEL_132;
  v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v80 & 1) == 0)
  {
    v81 = ~v74;
    do
    {
      a2 = (a2 + 1) & v81;
      if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_120;
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(_QWORD *)(v10 + 48) + 8 * a2));
      v84 = v83;
      if (v82 == static String._unconditionallyBridgeFromObjectiveC(_:)(v6) && v84 == v85)
        goto LABEL_132;
      v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    while ((v87 & 1) == 0);
  }
LABEL_133:
  type metadata accessor for NSURLResourceKey(0);
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t URLRequest.allHTTPHeaderFields.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;
  _QWORD *v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  v2 = objc_msgSend(v1, sel_allHTTPHeaderFields);
  if (!v2)
  {

    return 0;
  }
  v3 = v2;
  if (MEMORY[0x1E0DEE9B8] + 8 != MEMORY[0x1E0DEA968])
  {
    swift_unknownObjectRetain();
    v4 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v4)
      goto LABEL_40;
    v6 = objc_msgSend(v3, sel_count);
    if (v6)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
      v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v4 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v34 = (char *)v4[6];
    v35 = v4[7];
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v34, v35, v3, (uint64_t)v6);
    if (result < 0 || (uint64_t)v6 < result)
      goto LABEL_45;
    v4[2] = result;
    if (!result)
      goto LABEL_39;
    v36 = result - 1;
    v37 = v4 + 8;
    while (1)
    {
      if (((*(_QWORD *)((char *)v37 + (((unint64_t)v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) != 0)
        goto LABEL_31;
      v39 = (uint64_t *)(v4[6] + 16 * v36);
      v40 = *v39;
      v41 = v39[1];
      swift_bridgeObjectRetain();
      v42 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
      v44 = v43;
      swift_bridgeObjectRelease();
      if ((v44 & 1) != 0)
      {
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v45 = v4[2];
        v23 = __OFSUB__(v45, 1);
        v46 = v45 - 1;
        if (v23)
          goto LABEL_43;
        v4[2] = v46;
        goto LABEL_31;
      }
      *(_QWORD *)((char *)v37 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
      if (v36 < (uint64_t)v42)
      {
        v38 = 16 * v42;
        *(_OWORD *)(v4[6] + v38) = *(_OWORD *)(v4[6] + 16 * v36);
        *(_OWORD *)(v4[7] + v38) = *(_OWORD *)(v4[7] + 16 * v36);
LABEL_31:
        if (--v36 < 0)
          goto LABEL_39;
      }
      else
      {
        if (v42 == v36)
          goto LABEL_31;
        v47 = v4[6];
        v48 = (uint64_t *)(v47 + 16 * v42);
        v49 = (uint64_t *)(v47 + 16 * v36);
        v50 = *v48;
        v51 = v48[1];
        v52 = v49[1];
        *v48 = *v49;
        v48[1] = v52;
        *v49 = v50;
        v49[1] = v51;
        v53 = v4[7];
        v54 = (uint64_t *)(v53 + 16 * v42);
        v55 = (uint64_t *)(v53 + 16 * v36);
        v56 = *v54;
        v57 = v54[1];
        v58 = v55[1];
        *v54 = *v55;
        v54[1] = v58;
        *v55 = v56;
        v55[1] = v57;
        if (v36 < 0)
          goto LABEL_39;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  v4 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
  {
LABEL_40:

    return (uint64_t)v4;
  }
  v5 = objc_msgSend(v3, sel_count);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v7 = (_QWORD *)v4[6];
  v8 = v4[7];
  swift_retain();
  result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v7, v8, v3, (uint64_t)v5);
  if (result < 0 || (uint64_t)v5 < result)
    goto LABEL_44;
  v4[2] = result;
  if (!result)
  {
LABEL_39:
    swift_release();
    goto LABEL_40;
  }
  v10 = result - 1;
  v11 = v4 + 8;
  while (1)
  {
    if (((*(_QWORD *)((char *)v11 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      goto LABEL_16;
    v16 = (uint64_t *)(v4[6] + 16 * v10);
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain();
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18);
    v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
      break;
    *(_QWORD *)((char *)v11 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    if (v10 < (uint64_t)v19)
    {
      *(_OWORD *)(v4[6] + 16 * v19) = *(_OWORD *)(v4[6] + 16 * v10);
      v12 = v4[7];
      v13 = (_OWORD *)(v12 + 32 * v10);
      v14 = v13[1];
      v15 = (_OWORD *)(v12 + 32 * v19);
      *v15 = *v13;
      v15[1] = v14;
LABEL_16:
      if (--v10 < 0)
        goto LABEL_39;
    }
    else
    {
      if (v19 == v10)
        goto LABEL_16;
      v25 = v4[6];
      v26 = (uint64_t *)(v25 + 16 * v19);
      v27 = (uint64_t *)(v25 + 16 * v10);
      v28 = *v26;
      v29 = v26[1];
      v30 = v27[1];
      *v26 = *v27;
      v26[1] = v30;
      *v27 = v28;
      v27[1] = v29;
      v31 = v4[7];
      v32 = (_OWORD *)(v31 + 32 * v19);
      v33 = (_OWORD *)(v31 + 32 * v10);
      outlined init with take of Any(v32, v59);
      outlined init with take of Any(v33, v32);
      outlined init with take of Any(v59, v33);
      if (v10 < 0)
        goto LABEL_39;
    }
  }
  swift_arrayDestroy();
  result = swift_arrayDestroy();
  v22 = v4[2];
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (!v23)
  {
    v4[2] = v24;
    goto LABEL_16;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t Date.FormatStyle.month(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[74];

  v3 = *a1;
  v4 = v2[5];
  *(_OWORD *)&v21[16] = v2[4];
  *(_OWORD *)&v21[32] = v4;
  *(_OWORD *)&v21[48] = v2[6];
  *(_OWORD *)&v21[58] = *(__int128 *)((char *)v2 + 106);
  v5 = v2[1];
  v18 = *v2;
  v19 = v5;
  v6 = v2[3];
  v20 = v2[2];
  *(_OWORD *)v21 = v6;
  v7 = v20;
  if ((v20 & 0xFF000000000000) == 0x3000000000000)
  {
    v8 = 0x906030001;
    if ((_DWORD)v3 == 5)
    {
      v9 = 0x1000000000000;
      v10 = 0x200000000000000;
      v11 = 1283;
    }
    else
    {
      v8 = 0x906030100;
      v9 = 0x2000000000000;
      v10 = 0x2000E0000000000;
      v11 = 1535;
    }
    v13 = 0;
    v14 = 0;
    v7 = v10 | v9 | v8;
    v15 = xmmword_1820FDF60;
    v12 = 3327;
    v16 = 50331648;
  }
  else
  {
    v12 = *(_WORD *)v21;
    v13 = *((_QWORD *)&v20 + 1);
    v14 = *((_QWORD *)&v19 + 1);
    v15 = v18;
    v16 = v19 & 0xFFFFFFFFFF000000;
    v11 = (unsigned __int16)v19;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v21[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v21[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v21[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v21[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v21[2];
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16 | (v3 << 16) | v11;
  *(_QWORD *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v13;
  *(_WORD *)(a2 + 48) = v12;
  return outlined retain of Date.FormatStyle((uint64_t)&v18);
}

uint64_t NSEnumerator.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 216) = 0;
  return swift_unknownObjectRetain();
}

_BYTE *Date.FormatStyle.capitalizationContext.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 120) = *result;
  return result;
}

void static CurrencyFormatStyleConfiguration.Presentation.fullName.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

id URLRequest.timeoutInterval.setter(double a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v7;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(void **)(*(_QWORD *)v1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v4 = swift_allocObject();
    swift_retain();
    v5 = v3;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v4 + 16) = v7;
    *(_QWORD *)v1 = v4;
    swift_release();
  }
  return objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_setTimeoutInterval_, a1);
}

uint64_t one-time initialization function for predicateArchivingState()
{
  uint64_t result;
  pthread_key_t v1[2];

  v1[1] = *MEMORY[0x1E0C80C00];
  v1[0] = 0;
  result = pthread_key_create(v1, 0);
  static _ThreadLocal.Key<A>.predicateArchivingState = v1[0];
  return result;
}

id _NSSwiftLocale.displayName(forKey:value:)(void *a1, uint64_t a2)
{
  char *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  char v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE v123[32];

  outlined init with copy of Any(a2, (uint64_t)v123);
  if (!swift_dynamicCast())
    return 0;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997E0]);
  v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997E8]);
      v12 = v11;
      if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v12 == v13)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997B0]);
          v18 = v17;
          if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v18 == v19)
          {
            swift_bridgeObjectRelease_n();
LABEL_22:
            v28 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v25 = objc_msgSend(v2, sel_localizedStringForCountryCode_, v28);
            goto LABEL_19;
          }
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_22;
          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99820]);
          v31 = v30;
          if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v31 == v32)
          {
            swift_bridgeObjectRelease_n();
LABEL_27:
            v34 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v25 = objc_msgSend(v2, sel_localizedStringForScriptCode_, v34);
            goto LABEL_19;
          }
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v33 & 1) != 0)
            goto LABEL_27;
          v35 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99848]);
          v37 = v36;
          if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v37 == v38)
          {
            swift_bridgeObjectRelease_n();
LABEL_32:
            v40 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v25 = objc_msgSend(v2, sel_localizedStringForVariantCode_, v40);
            goto LABEL_19;
          }
          v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v39 & 1) != 0)
            goto LABEL_32;
          v41 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997D0]);
          v43 = v42;
          if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v43 == v44)
          {
LABEL_35:
            swift_bridgeObjectRelease_n();
LABEL_37:
            swift_bridgeObjectRelease();
            return 0;
          }
          v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v45 & 1) != 0)
            goto LABEL_37;
          v47 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99798]);
          v49 = v48;
          if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v49 == v50)
            goto LABEL_45;
          v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v51 & 1) != 0)
          {
LABEL_46:
            v56 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v25 = objc_msgSend(v2, sel_localizedStringForCalendarIdentifier_, v56);
            goto LABEL_19;
          }
          v52 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99790]);
          v54 = v53;
          if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v54 == v55)
          {
LABEL_45:
            swift_bridgeObjectRelease_n();
            goto LABEL_46;
          }
          v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v57 & 1) != 0)
            goto LABEL_46;
          v58 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997A0]);
          v60 = v59;
          if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v60 == v61)
          {
            swift_bridgeObjectRelease_n();
LABEL_52:
            v63 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v25 = objc_msgSend(v2, sel_localizedStringForCollationIdentifier_, v63);
            goto LABEL_19;
          }
          v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v62 & 1) != 0)
            goto LABEL_52;
          v64 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99840]);
          v66 = v65;
          if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v66 == v67)
            goto LABEL_35;
          v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v68 & 1) != 0)
            goto LABEL_37;
          v69 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997F0]);
          v71 = v70;
          if (v69 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v71 == v72)
            goto LABEL_35;
          v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v73 & 1) != 0)
            goto LABEL_37;
          v74 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997C8]);
          v76 = v75;
          if (v74 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v76 == v77)
            goto LABEL_35;
          v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v78 & 1) != 0)
            goto LABEL_37;
          v79 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997D8]);
          v81 = v80;
          if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v81 == v82)
            goto LABEL_35;
          v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v83 & 1) != 0)
            goto LABEL_37;
          v84 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997C0]);
          v86 = v85;
          if (v84 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v86 == v87)
          {
            swift_bridgeObjectRelease_n();
LABEL_69:
            v89 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v25 = objc_msgSend(v2, sel_localizedStringForCurrencySymbol_, v89);
            goto LABEL_19;
          }
          v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v88 & 1) != 0)
            goto LABEL_69;
          v90 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997B8]);
          v92 = v91;
          if (v90 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v92 == v93)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v94 & 1) == 0)
            {
              v96 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C997A8]);
              v98 = v97;
              if (v96 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v98 == v99)
              {
                swift_bridgeObjectRelease_n();
              }
              else
              {
                v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v100 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  v102 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99810]);
                  v104 = v103;
                  if (v102 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v104 == v105)
                    goto LABEL_82;
                  v106 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v106 & 1) != 0)
                    return 0;
                  v107 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99818]);
                  v109 = v108;
                  if (v107 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v109 == v110)
                    goto LABEL_82;
                  v111 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v111 & 1) != 0)
                    return 0;
                  v112 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99780]);
                  v114 = v113;
                  if (v112 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v114 == v115)
                  {
LABEL_82:
                    swift_bridgeObjectRelease_n();
                    return 0;
                  }
                  v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v116 & 1) != 0)
                    return 0;
                  v117 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99788]);
                  v119 = v118;
                  if (v117 != static String._unconditionallyBridgeFromObjectiveC(_:)(a1) || v119 != v120)
                    _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  goto LABEL_37;
                }
              }
              v101 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v25 = objc_msgSend(v2, sel_localizedStringForCollatorIdentifier_, v101);
LABEL_19:
              v26 = v25;
              swift_unknownObjectRelease();
              if (v26)
              {
                v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);

                return v23;
              }
              return 0;
            }
          }
          v95 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v25 = objc_msgSend(v2, sel_localizedStringForCurrencyCode_, v95);
          goto LABEL_19;
        }
      }
      v24 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v25 = objc_msgSend(v2, sel_localizedStringForLanguageCode_, v24);
      goto LABEL_19;
    }
  }
  v20 = *(_QWORD *)&v2[OBJC_IVAR____NSSwiftLocale_locale + 8];
  ObjectType = swift_getObjectType();
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 72);
  swift_unknownObjectRetain();
  v23 = (id)v22(v121, v122, ObjectType, v20);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v23;
}

uint64_t protocol witness for _LocaleProtocol.countryCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.countryCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.countryCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.countryCodeDisplayName(for:)(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t closure #1 in _LocaleICU.countryCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  char v4;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;

  v9 = *(_QWORD *)(a1 + 480);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
    if ((v11 & 1) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
      v14 = *v12;
      v13 = v12[1];
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v16 = swift_retain();
  specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  v53 = v17;
  v13 = v18;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v54 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0x8000000000000000;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
  v22 = *(_QWORD *)(v54 + 16);
  v23 = (v20 & 1) == 0;
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }
  else
  {
    v4 = v20;
    if (*(_QWORD *)(v54 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      v25 = v54;
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
      if ((v4 & 1) != (v27 & 1))
        goto LABEL_52;
      v21 = v26;
      if ((v4 & 1) == 0)
        goto LABEL_47;
LABEL_12:
      v28 = (_QWORD *)(*(_QWORD *)(v25 + 56) + 16 * v21);
      swift_bridgeObjectRelease();
      v14 = v53;
      *v28 = v53;
      v28[1] = v13;
LABEL_48:
      *(_QWORD *)(a1 + 480) = v25;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v25 = v54;
      if ((v20 & 1) != 0)
        goto LABEL_12;
LABEL_47:
      v48 = a2;
      v14 = v53;
      specialized _NativeDictionary._insert(at:key:value:)(v21, v48, a3, v53, v13, v25);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  v49 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  v29 = static _DictionaryStorage.copy(original:)();
  v25 = v29;
  if (!*(_QWORD *)(v54 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    v21 = v49;
    if ((v4 & 1) != 0)
      goto LABEL_12;
    goto LABEL_47;
  }
  v30 = (void *)(v29 + 64);
  v31 = (unint64_t)((1 << *(_BYTE *)(v25 + 32)) + 63) >> 6;
  if (v25 != v54 || (unint64_t)v30 >= v54 + 64 + 8 * v31)
    memmove(v30, (const void *)(v54 + 64), 8 * v31);
  v50 = v54 + 64;
  v32 = 0;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v54 + 16);
  v33 = 1 << *(_BYTE *)(v54 + 32);
  v34 = -1;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  v35 = v34 & *(_QWORD *)(v54 + 64);
  v51 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      v36 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      v52 = v32;
      v37 = v36 | (v32 << 6);
      goto LABEL_22;
    }
    v44 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v44 >= v51)
      goto LABEL_46;
    v45 = *(_QWORD *)(v50 + 8 * v44);
    v46 = v32 + 1;
    if (!v45)
    {
      v46 = v32 + 2;
      if (v32 + 2 >= v51)
        goto LABEL_46;
      v45 = *(_QWORD *)(v50 + 8 * v46);
      if (!v45)
      {
        v46 = v32 + 3;
        if (v32 + 3 >= v51)
          goto LABEL_46;
        v45 = *(_QWORD *)(v50 + 8 * v46);
        if (!v45)
        {
          v46 = v32 + 4;
          if (v32 + 4 >= v51)
            goto LABEL_46;
          v45 = *(_QWORD *)(v50 + 8 * v46);
          if (!v45)
          {
            v46 = v32 + 5;
            if (v32 + 5 >= v51)
              goto LABEL_46;
            v45 = *(_QWORD *)(v50 + 8 * v46);
            if (!v45)
            {
              v46 = v32 + 6;
              if (v32 + 6 >= v51)
                goto LABEL_46;
              v45 = *(_QWORD *)(v50 + 8 * v46);
              if (!v45)
              {
                v46 = v32 + 7;
                if (v32 + 7 >= v51)
                  goto LABEL_46;
                v45 = *(_QWORD *)(v50 + 8 * v46);
                if (!v45)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_45:
    v35 = (v45 - 1) & v45;
    v52 = v46;
    v37 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_22:
    v38 = 16 * v37;
    v39 = (uint64_t *)(*(_QWORD *)(v54 + 48) + v38);
    v40 = *v39;
    v41 = v39[1];
    v42 = (_QWORD *)(*(_QWORD *)(v25 + 48) + v38);
    v43 = *(_OWORD *)(*(_QWORD *)(v54 + 56) + v38);
    *v42 = v40;
    v42[1] = v41;
    *(_OWORD *)(*(_QWORD *)(v25 + 56) + v38) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32 = v52;
  }
  v47 = v32 + 8;
  if (v32 + 8 >= v51)
    goto LABEL_46;
  v45 = *(_QWORD *)(v50 + 8 * v47);
  if (v45)
  {
    v46 = v32 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    v46 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    if (v46 >= v51)
      goto LABEL_46;
    v45 = *(_QWORD *)(v50 + 8 * v46);
    ++v47;
    if (v45)
      goto LABEL_45;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  const __CFString *v11;
  __CFString *CanonicalLanguageIdentifierFromString;
  Swift::String v13;
  uint64_t v14;
  int DisplayCountry;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  const __CFAllocator *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE v31[144];
  _QWORD v32[20];

  v3 = a3;
  v4 = a2;
  v32[18] = *MEMORY[0x1E0C80C00];
  specialized closure #1 in closure #1 in _LocaleICU.countryCodeDisplayName(for:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
  if (!v6)
  {
    outlined init with take of LocalePreferences?(a1 + 40, (uint64_t)v31);
    outlined init with take of LocalePreferences?((uint64_t)v31, (uint64_t)v32);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v32) == 1 || !v32[1])
    {
      if (one-time initialization token for cache != -1)
        swift_once();
      v7 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      v7 = swift_bridgeObjectRetain();
    }
    v22 = v7;
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
    {
LABEL_23:
      swift_bridgeObjectRelease();
      return;
    }
    v24 = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    v10 = v22 + 40;
    v25 = v4;
    v26 = v3;
    v23 = v9;
    while (1)
    {
      v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (String.count.getter() > 153)
        goto LABEL_11;
      v29 = 6254181;
      v30 = 0xE300000000000000;
      v13._countAndFlagsBits = v4;
      v13._object = v3;
      String.append(_:)(v13);
      v14 = swift_bridgeObjectRetain();
      v27 = &v22;
      MEMORY[0x1E0C80A78](v14);
      v28 = 0;
      String.utf8CString.getter();
      String.utf8CString.getter();
      DisplayCountry = uloc_getDisplayCountry();
      swift_release();
      v16 = swift_release();
      if (v28 > 0 || v28 == -127 || DisplayCountry > 257 || DisplayCountry <= 0)
        break;
      MEMORY[0x1E0C80A78](v16);
      v18 = v24;
      closure #1 in String.init(_utf16:)((_BYTE *)&v22 - v17, (unsigned __int16 *)&v22 - 264, v19, &v29);
      v24 = v18;
      v9 = v23;
      if (v18)
      {
        v21 = v24;
        swift_willThrow();

        __break(1u);
        return;
      }
      v20 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 = v25;
      v3 = v26;
      if (v20)
        goto LABEL_23;
LABEL_12:
      v10 += 16;
      if (!--v8)
        goto LABEL_23;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v25;
    v3 = v26;
    v9 = v23;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
}

{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  const __CFString *v11;
  __CFString *CanonicalLanguageIdentifierFromString;
  Swift::String v13;
  uint64_t v14;
  int DisplayVariant;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  const __CFAllocator *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE v31[144];
  _QWORD v32[20];

  v3 = a3;
  v4 = a2;
  v32[18] = *MEMORY[0x1E0C80C00];
  specialized closure #1 in closure #1 in _LocaleICU.variantCodeDisplayName(for:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
  if (!v6)
  {
    outlined init with take of LocalePreferences?(a1 + 40, (uint64_t)v31);
    outlined init with take of LocalePreferences?((uint64_t)v31, (uint64_t)v32);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v32) == 1 || !v32[1])
    {
      if (one-time initialization token for cache != -1)
        swift_once();
      v7 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      v7 = swift_bridgeObjectRetain();
    }
    v22 = v7;
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
    {
LABEL_23:
      swift_bridgeObjectRelease();
      return;
    }
    v24 = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    v10 = v22 + 40;
    v25 = v4;
    v26 = v3;
    v23 = v9;
    while (1)
    {
      v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (String.count.getter() > 250)
        goto LABEL_11;
      v29 = 0x5F53555F6E65;
      v30 = 0xE600000000000000;
      v13._countAndFlagsBits = v4;
      v13._object = v3;
      String.append(_:)(v13);
      v14 = swift_bridgeObjectRetain();
      v27 = &v22;
      MEMORY[0x1E0C80A78](v14);
      v28 = 0;
      String.utf8CString.getter();
      String.utf8CString.getter();
      DisplayVariant = uloc_getDisplayVariant();
      swift_release();
      v16 = swift_release();
      if (v28 > 0 || v28 == -127 || DisplayVariant > 257 || DisplayVariant <= 0)
        break;
      MEMORY[0x1E0C80A78](v16);
      v18 = v24;
      closure #1 in String.init(_utf16:)((_BYTE *)&v22 - v17, (unsigned __int16 *)&v22 - 264, v19, &v29);
      v24 = v18;
      v9 = v23;
      if (v18)
      {
        v21 = v24;
        swift_willThrow();

        __break(1u);
        return;
      }
      v20 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 = v25;
      v3 = v26;
      if (v20)
        goto LABEL_23;
LABEL_12:
      v10 += 16;
      if (!--v8)
        goto LABEL_23;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v25;
    v3 = v26;
    v9 = v23;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
}

uint64_t NSCoder.decodeObject(of:forKey:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  const char *ObjCClassFromMetadata;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _OWORD v10[2];

  v3 = a1;
  if (a1)
  {
    if (a1[2] == 1)
    {
      ObjCClassFromMetadata = (const char *)swift_getObjCClassFromMetadata();
      v6 = String._bridgeToObjectiveCImpl()();
      v7 = (id)__NSCoderDecodeObjectOfClassForKey(v2, ObjCClassFromMetadata, v6, 0);
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
    v3 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  v8 = String._bridgeToObjectiveCImpl()();
  v7 = (id)__NSCoderDecodeObjectOfClassesForKey(v2, (uint64_t)v3, v8, 0);

LABEL_6:
  swift_unknownObjectRelease();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  return outlined init with take of Any?((uint64_t)v10, a2);
}

uint64_t __NSCoderDecodeObjectOfClassesForKey(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", a2);
  if (a4)
    return objc_msgSend(a1, "decodeTopLevelObjectOfClasses:forKey:error:", v7, a3, a4);
  else
    return objc_msgSend(a1, "decodeObjectOfClasses:forKey:", v7, a3);
}

unint64_t lazy protocol witness table accessor for type IndexSet.Index and conformance IndexSet.Index()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index;
  if (!lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.Index, &type metadata for IndexSet.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index;
  if (!lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.Index, &type metadata for IndexSet.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.Index and conformance IndexSet.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for JSONEncoder.OutputFormatting, &type metadata for JSONEncoder.OutputFormatting);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for JSONEncoder.OutputFormatting, &type metadata for JSONEncoder.OutputFormatting);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for JSONEncoder.OutputFormatting, &type metadata for JSONEncoder.OutputFormatting);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for JSONEncoder.OutputFormatting, &type metadata for JSONEncoder.OutputFormatting);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }
  return result;
}

uint64_t initBKSProcessAssertionSetExpirationHandler(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t (*v5)();

  v4 = AssertionServicesLibrary();
  v5 = (uint64_t (*)())dlsym(v4, "BKSProcessAssertionSetExpirationHandler");
  softLinkBKSProcessAssertionSetExpirationHandler = v5;
  if (!v5)
    __assert_rtn("initBKSProcessAssertionSetExpirationHandler", "NSProcessInfo_Helpers.m", 79, "softLinkBKSProcessAssertionSetExpirationHandler");
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

Class initBKSProcessAssertion()
{
  Class result;

  AssertionServicesLibrary();
  result = objc_getClass("BKSProcessAssertion");
  classBKSProcessAssertion = (uint64_t)result;
  if (!result)
    __assert_rtn("initBKSProcessAssertion", "NSProcessInfo_Helpers.m", 78, "classBKSProcessAssertion");
  getBKSProcessAssertionClass = BKSProcessAssertionFunction;
  return result;
}

void *AssertionServicesLibrary()
{
  void *result;

  result = (void *)AssertionServicesLibrary_frameworkLibrary;
  if (!AssertionServicesLibrary_frameworkLibrary)
  {
    result = dlopen("/System/Library/PrivateFrameworks/AssertionServices.framework/AssertionServices", 2);
    AssertionServicesLibrary_frameworkLibrary = (uint64_t)result;
    if (!result)
      __assert_rtn("AssertionServicesLibrary", "NSProcessInfo_Helpers.m", 77, "frameworkLibrary");
  }
  return result;
}

uint64_t StringProtocol.cString(using:)(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  const char *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  v1 = *a1;
  StringProtocol._ephemeralString.getter();
  v2 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v3 = (const char *)objc_msgSend(objc_retainAutorelease(v2), sel_cStringUsingEncoding_, v1);
  if (!v3)
  {
    v7 = 0;
    goto LABEL_14;
  }
  v4 = v3;
  v5 = _swift_stdlib_strlen(v3);
  v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else if ((v6 & 0x8000000000000000) == 0)
  {
    if (v5 == -1)
    {
      v7 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v7 + 16) = v6;
    }
    v8 = (char *)(v7 + 32);
    if ((unint64_t)v4 < v7 + 32 + v6 && v8 < &v4[v6])
      goto LABEL_17;
    memcpy(v8, v4, v6);
    *(_QWORD *)(v7 + 16) = v6;
LABEL_14:
    swift_unknownObjectRelease();
    return v7;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_17:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in Data()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type CollectionOfOne<Data> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<Data>, MEMORY[0x1E0DEC640]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in IndexSet()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<IndexSet> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<IndexSet>, MEMORY[0x1E0DEC908]);
}

void *_checkErrorAndRound(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, NSRoundingMode roundingMode, NSDecimal *result, void *a8)
{
  void *v11;
  void *v12;
  NSDecimal *p_number;
  __int128 v14;
  uint64_t v15;
  NSDecimal number;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1
    && (v11 = (void *)objc_msgSend(a8, "exceptionDuringOperation:error:leftOperand:rightOperand:", a2, a1, a3, a4)) != 0)
  {
    if (a5 == 0x7FFF)
      return v11;
    memset(&number, 0, sizeof(number));
    objc_msgSend(v11, "decimalValue");
    NSDecimalRound(result, &number, a5, roundingMode);
    v12 = (void *)objc_opt_self();
    v14 = *(_OWORD *)result;
    LODWORD(v15) = *(_DWORD *)&result->_mantissa[6];
    p_number = (NSDecimal *)&v14;
  }
  else
  {
    if (a5 != 0x7FFF)
      NSDecimalRound(result, result, a5, roundingMode);
    v12 = (void *)objc_opt_self();
    number = *result;
    p_number = &number;
  }
  return (void *)objc_msgSend(v12, "decimalNumberWithDecimal:", p_number, v14, v15);
}

uint64_t type metadata accessor for NSDecimal.ParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSDecimal.ParseStrategy);
}

uint64_t destroy for KeyPathComparator(uint64_t a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Year()
{
  return &type metadata for Date.FormatStyle.Symbol.Year;
}

void static Date.FormatStyle.Symbol.Year.defaultDigits.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 3;
}

void Duration.valuesForUnits(_:trailingFractionalLength:smallestUnitRounding:roundingIncrement:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  double v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  double v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  long double v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;

  v14 = type metadata accessor for FloatingPointRoundingRule();
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + 16);
  if (!v19)
    return;
  v20 = *(char *)(v19 + a1 + 31);
  v134 = v15;
  v135 = a3;
  v132 = v18;
  v133 = v16;
  if (v20 < 5)
  {
    static Duration.interval(fractionalSecondsLength:)(a2);
    v136 = qword_1820DAFC8[v20];
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    v29 = static Duration.* infix<A>(_:_:)();
    v30 = v29;
    v25 = v31;
    if ((a5 & 1) != 0)
    {
      v23 = v29;
      goto LABEL_16;
    }
    v26 = static Duration.* infix(_:_:)();
    v28 = v32;
    v23 = v30;
    goto LABEL_13;
  }
  if ((v20 - 5) < 3u)
  {
    v21 = 3 * (v20 - 5) + 3;
    v22 = v21 ^ 0x7FFFFFFFFFFFFFFFLL;
    if ((v21 ^ 0x7FFFFFFFFFFFFFFFLL) >= a2)
      v22 = a2;
    if (__OFADD__(v21, v22))
    {
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }
    v23 = static Duration.interval(fractionalSecondsLength:)(v21 + v22);
    v25 = v24;
    if ((a5 & 1) != 0)
    {
LABEL_16:
      static Duration.zero.getter();
      if ((static Duration.== infix(_:_:)() & 1) != 0)
      {
LABEL_62:
        v115 = (_QWORD *)Duration.factor(intoUnits:)(a1);
        v116 = v115[2];
        v117 = Duration.components.getter();
        Duration.components.getter();
        v119 = v118;
        v120 = 3.0;
        v7 = 604800.0;
        switch((int)v20)
        {
          case 0:
            goto LABEL_70;
          case 1:
            v7 = 86400.0;
            goto LABEL_70;
          case 2:
            v7 = 3600.0;
            goto LABEL_70;
          case 3:
            v7 = 60.0;
            goto LABEL_70;
          case 4:
            v7 = 1.0;
            goto LABEL_70;
          case 5:
            goto LABEL_69;
          case 6:
            v120 = 6.0;
            goto LABEL_69;
          case 7:
            v120 = 9.0;
LABEL_69:
            v7 = pow(0.1, v120);
LABEL_70:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              goto LABEL_84;
            if (v116)
              goto LABEL_72;
            goto LABEL_85;
          default:
            goto LABEL_98;
        }
      }
      static Duration.zero.getter();
      v33 = static Duration.< infix(_:_:)();
      v127 = a1;
      v128 = v20;
      if ((v33 & 1) != 0)
      {
        v34 = static Duration.zero.getter();
        v23 = MEMORY[0x186DA6158](v34);
        v25 = v35;
      }
      static Duration.zero.getter();
      v36 = a6;
      v37 = a7;
      if ((static Duration.< infix(_:_:)() & 1) != 0)
      {
        v38 = static Duration.zero.getter();
        v36 = MEMORY[0x186DA6158](v38);
        v37 = v39;
      }
      v131 = a6;
      v40 = Duration.components.getter();
      static Duration.zero.getter();
      if ((static Duration.< infix(_:_:)() & 1) != 0)
      {
        v41 = static Duration.zero.getter();
        MEMORY[0x186DA6158](v41);
      }
      v42 = Duration.components.getter();
      v44 = v43;
      if (v42)
      {
        if (v43)
        {
          if ((static Duration.< infix(_:_:)() & 1) != 0)
          {
            v45 = static Duration.zero.getter();
            v47 = v46;
            v48 = static Duration.zero.getter();
          }
          else
          {
            static Duration./ infix(_:_:)();
            if ((~*(_QWORD *)&v54 & 0x7FF0000000000000) == 0)
            {
LABEL_89:
              __break(1u);
              goto LABEL_90;
            }
            if (v54 <= -1.0)
            {
LABEL_90:
              __break(1u);
              goto LABEL_91;
            }
            if (v54 >= 1.84467441e19)
            {
LABEL_91:
              __break(1u);
              goto LABEL_92;
            }
            v55 = (unint64_t)v54;
            v136 = (unint64_t)v54;
            lazy protocol witness table accessor for type UInt64 and conformance UInt64();
            v56 = static Duration.* infix<A>(_:_:)();
            MEMORY[0x186DA6158](v36, v37, v56, v57);
            static Duration./ infix(_:_:)();
            if ((~*(_QWORD *)&v58 & 0x7FF0000000000000) == 0)
            {
LABEL_92:
              __break(1u);
              goto LABEL_93;
            }
            if (v58 <= -9.22337204e18)
            {
LABEL_93:
              __break(1u);
              goto LABEL_94;
            }
            if (v58 >= 9.22337204e18)
            {
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
              goto LABEL_96;
            }
            v59 = (uint64_t)v58;
            v130 = (uint64_t)v58;
            Duration.init(secondsComponent:attosecondsComponent:)();
            v136 = v55;
            v60 = static Duration.* infix<A>(_:_:)();
            v129 = v55;
            v61 = v60;
            v126 = v62;
            Duration.init(secondsComponent:attosecondsComponent:)();
            v136 = v59;
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            v63 = static Duration.* infix<A>(_:_:)();
            v45 = MEMORY[0x186DA614C](v61, v126, v63, v64);
            v66 = v65;
            v136 = v129;
            v67 = static Duration.* infix<A>(_:_:)();
            v69 = v68;
            v136 = v130;
            v47 = v66;
            v70 = static Duration.* infix<A>(_:_:)();
            v48 = MEMORY[0x186DA614C](v67, v69, v70, v71);
          }
        }
        else
        {
          v51 = v42;
          if (v40 == 0x8000000000000000 && v42 == -1)
            goto LABEL_95;
          v52 = v40 / v42;
          v45 = Duration.init(secondsComponent:attosecondsComponent:)();
          if ((unsigned __int128)(v51 * (__int128)v52) >> 64 != (v51 * v52) >> 63)
            goto LABEL_88;
          v47 = v53;
          v48 = Duration.init(secondsComponent:attosecondsComponent:)();
        }
      }
      else
      {
        v136 = v43;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        v45 = static Duration./ infix<A>(_:_:)();
        v47 = v50;
        v136 = v44;
        v48 = static Duration.* infix<A>(_:_:)();
      }
      v72 = v48;
      v73 = v49;
      v74 = v131;
      static Duration.zero.getter();
      v75 = static Duration.< infix(_:_:)() & 1;
      static Duration.zero.getter();
      if (v75 == (static Duration.< infix(_:_:)() & 1))
      {
        v129 = v47;
      }
      else
      {
        v76 = static Duration.zero.getter();
        v72 = MEMORY[0x186DA6158](v76);
        v73 = v77;
        v78 = static Duration.zero.getter();
        v45 = MEMORY[0x186DA6158](v78);
        v129 = v79;
      }
      static Duration.zero.getter();
      v80 = v72;
      v81 = v73;
      if ((static Duration.< infix(_:_:)() & 1) != 0)
      {
        v82 = static Duration.zero.getter();
        v80 = MEMORY[0x186DA6158](v82);
        v81 = v83;
      }
      v130 = v45;
      static Duration.zero.getter();
      v84 = static Duration.< infix(_:_:)();
      v85 = v74;
      v86 = a7;
      if ((v84 & 1) != 0)
      {
        v87 = static Duration.zero.getter();
        v85 = MEMORY[0x186DA6158](v87);
        v86 = v88;
      }
      MEMORY[0x186DA6158](v80, v81, v85, v86);
      static Duration.zero.getter();
      if ((static Duration.< infix(_:_:)() & 1) != 0)
      {
        v89 = static Duration.zero.getter();
        MEMORY[0x186DA6158](v89);
      }
      static Duration.zero.getter();
      if ((static Duration.== infix(_:_:)() & 1) != 0)
      {
        v136 = 2;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        v91 = v129;
        v90 = v130;
        static Duration./ infix<A>(_:_:)();
        v136 = 2;
        v92 = static Duration.* infix<A>(_:_:)();
        MEMORY[0x186DA6158](v90, v91, v92, v93);
        static Duration.zero.getter();
LABEL_61:
        static Duration.== infix(_:_:)();
        a1 = v127;
        LODWORD(v20) = v128;
        goto LABEL_62;
      }
      static Duration.zero.getter();
      if ((static Duration.< infix(_:_:)() & 1) != 0)
      {
        v94 = static Duration.zero.getter();
        v23 = MEMORY[0x186DA6158](v94);
        v25 = v95;
      }
      v96 = MEMORY[0x186DA614C](v72, v73, v23, v25);
      v98 = v97;
      static Duration.zero.getter();
      v99 = v96;
      v100 = v98;
      if ((static Duration.< infix(_:_:)() & 1) != 0)
      {
        v101 = static Duration.zero.getter();
        v99 = MEMORY[0x186DA6158](v101);
        v100 = v102;
      }
      static Duration.zero.getter();
      if ((static Duration.< infix(_:_:)() & 1) != 0)
      {
        v103 = static Duration.zero.getter();
        v74 = MEMORY[0x186DA6158](v103);
        a7 = v104;
      }
      v131 = v96;
      MEMORY[0x186DA6158](v99, v100, v74, a7);
      static Duration.zero.getter();
      v105 = v98;
      if ((static Duration.< infix(_:_:)() & 1) != 0)
      {
        v106 = static Duration.zero.getter();
        MEMORY[0x186DA6158](v106);
      }
      v108 = v132;
      v107 = v133;
      v109 = v134;
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v135, v134);
      v110 = (*(uint64_t (**)(char *, uint64_t))(v107 + 88))(v108, v109);
      if (v110 == *MEMORY[0x1E0DED4F0])
        goto LABEL_59;
      v115 = v105;
      if (v110 == *MEMORY[0x1E0DED4E8])
      {
        if ((static Duration.< infix(_:_:)() & 1) == 0 && (static Duration.== infix(_:_:)() & 1) != 0)
        {
          v136 = 2;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          v122 = v129;
          v121 = v130;
          static Duration./ infix<A>(_:_:)();
          v136 = 2;
          v123 = static Duration.* infix<A>(_:_:)();
          MEMORY[0x186DA6158](v121, v122, v123, v124);
          static Duration.zero.getter();
          static Duration.== infix(_:_:)();
        }
        goto LABEL_60;
      }
      v116 = v131;
      if (v110 == *MEMORY[0x1E0DED500] || v110 == *MEMORY[0x1E0DED508])
      {
LABEL_59:
        static Duration.< infix(_:_:)();
      }
      else if (v110 != *MEMORY[0x1E0DED4D8])
      {
        v117 = v131;
        v119 = (uint64_t)v105;
        if (v110 != *MEMORY[0x1E0DED4E0])
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_84:
          v115 = specialized _ArrayBuffer._consumeAndCreateNew()(v115);
          if (v116)
          {
LABEL_72:
            if (v116 <= v115[2])
            {
              *(double *)&v115[v116 + 3] = ((double)v119 * 1.0e-18 + (double)v117) / v7 + *(double *)&v115[v116 + 3];
              return;
            }
          }
          else
          {
LABEL_85:
            __break(1u);
          }
          __break(1u);
          goto LABEL_87;
        }
      }
LABEL_60:
      v136 = 2;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v112 = v129;
      v111 = v130;
      static Duration./ infix<A>(_:_:)();
      v136 = 2;
      v113 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x186DA6158](v111, v112, v113, v114);
      static Duration.zero.getter();
      static Duration.== infix(_:_:)();
      goto LABEL_61;
    }
    if ((v20 - 5) >= 3u)
      goto LABEL_97;
    v26 = static Duration.* infix(_:_:)();
    v28 = v27;
LABEL_13:
    if ((static Duration.< infix(_:_:)() & 1) == 0)
    {
      v23 = v26;
      v25 = v28;
    }
    goto LABEL_16;
  }
LABEL_96:
  __break(1u);
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type Int64 and conformance Int64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEDCA0], MEMORY[0x1E0DEDC60]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEDCB0], MEMORY[0x1E0DEDC60]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
  }
  return result;
}

uint64_t Duration.factor(intoUnits:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    v3 = 0;
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v5 = *(char *)(a1 + v3 + 32);
      if (v5 <= 4)
      {
        v12 = qword_1820DAFC8[v5];
        v13 = Duration.components.getter();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        v15 = v4[2];
        v14 = v4[3];
        if (v15 >= v14 >> 1)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v4);
        v4[2] = v15 + 1;
        *(double *)&v4[v15 + 4] = (double)(v13 / v12);
        Duration.components.getter();
      }
      else
      {
        if ((v5 - 5) > 2u)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
          v17 = v4[2];
          v16 = v4[3];
          if (v17 >= v16 >> 1)
            v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v4);
          v4[2] = v17 + 1;
          v4[v17 + 4] = 0;
          goto LABEL_5;
        }
        v6 = qword_1820DAFF0[(char)(v5 - 5)];
        Duration.components.getter();
        v8 = (double)(v7 / v6);
        if (Duration.components.getter())
        {
          result = Duration.components.getter();
          if ((v5 - 5) > 2u)
          {
            __break(1u);
            return result;
          }
          v8 = __exp10(dbl_1820DB008[(char)(v5 - 5)]) * (double)result + v8;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        v11 = v4[2];
        v10 = v4[3];
        if (v11 >= v10 >> 1)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v4);
        v4[2] = v11 + 1;
        *(double *)&v4[v11 + 4] = v8;
      }
      Duration.init(secondsComponent:attosecondsComponent:)();
LABEL_5:
      if (v1 == ++v3)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v4;
      }
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

void type metadata completion function for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for IntegerFormatStyle<Int>(319, (unint64_t *)&lazy cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle);
  if (v0 <= 0x3F)
  {
    type metadata accessor for IntegerFormatStyle<Int>(319, &lazy cache variable for type metadata for IntegerFormatStyle<Int>.Currency, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Currency);
    if (v1 <= 0x3F)
    {
      type metadata accessor for IntegerFormatStyle<Int>(319, &lazy cache variable for type metadata for IntegerFormatStyle<Int>.Percent, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Percent);
      if (v2 <= 0x3F)
        swift_initEnumMetadataMultiPayload();
    }
  }
}

void type metadata completion function for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for IntegerFormatStyle<Int>(319, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E0DEB070], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle);
  if (v0 <= 0x3F)
  {
    type metadata accessor for IntegerFormatStyle<Int>(319, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E0DEB070], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Currency);
    if (v1 <= 0x3F)
    {
      type metadata accessor for IntegerFormatStyle<Int>(319, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E0DEB070], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Percent);
      if (v2 <= 0x3F)
        swift_initEnumMetadataMultiPayload();
    }
  }
}

void type metadata accessor for IntegerFormatStyle<Int>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB078], MEMORY[0x1E0DEB070]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

uint64_t type metadata accessor for IntegerFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle);
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointFormatStyle.Currency);
}

uint64_t type metadata accessor for IntegerFormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle.Currency);
}

uint64_t type metadata accessor for IntegerFormatStyle.Percent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle.Percent);
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Variable<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, a2);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Variable<A>, a2);
  a1[3] = result;
  return result;
}

uint64_t type metadata completion function for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for NSDecimal.FormatStyle(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for NSDecimal.FormatStyle.Currency(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for NSDecimal.FormatStyle.Percent(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Currency(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle.Currency);
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Percent(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle.Percent);
}

unint64_t lazy protocol witness table accessor for type ICUMeasurementNumberFormatter.Signature and conformance ICUMeasurementNumberFormatter.Signature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ICUMeasurementNumberFormatter.Signature and conformance ICUMeasurementNumberFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICUMeasurementNumberFormatter.Signature and conformance ICUMeasurementNumberFormatter.Signature)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ICUMeasurementNumberFormatter.Signature, &unk_1E0F27910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUMeasurementNumberFormatter.Signature and conformance ICUMeasurementNumberFormatter.Signature);
  }
  return result;
}

id IndexSet.first.getter(SEL *a1)
{
  uint64_t v1;
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), *a1);
  if (result == (id)0x7FFFFFFFFFFFFFFFLL)
    return 0;
  return result;
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Percent()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t type metadata completion function for AsyncLineSequence()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void base witness table accessor for Equatable in Measurement<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t Calendar.Identifier.debugDescription.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18198C13C + 4 * byte_1820F8CE6[*v0]))(0x6169726F67657267, 0xE90000000000006ELL);
}

uint64_t sub_18198C13C()
{
  return 0x7473696864647562;
}

uint64_t sub_18198C154()
{
  return 0x6573656E696863;
}

uint64_t sub_18198C16C()
{
  return 0x636974706F63;
}

uint64_t sub_18198C180()
{
  return 0x6369706F69687465;
}

uint64_t sub_18198C198()
{
  return 0x61616F69687465;
}

uint64_t sub_18198C1B0()
{
  return 0x776572626568;
}

uint64_t sub_18198C1C4()
{
  return 0x313036386F7369;
}

uint64_t sub_18198C1DC()
{
  return 0x6E6169646E69;
}

uint64_t sub_18198C1F0()
{
  return 0x63696D616C7369;
}

uint64_t sub_18198C208()
{
  return 0x2D63696D616C7369;
}

unint64_t sub_18198C27C()
{
  return 0xD000000000000010;
}

Swift::Void __swiftcall IndexSet.shift(startingAt:by:)(Swift::Int startingAt, Swift::Int by)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;

  if (*(_BYTE *)(*(_QWORD *)v2 + 24) == 1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *(void **)(*(_QWORD *)v2 + 16);
    if ((*(_BYTE *)(*(_QWORD *)v2 + 24) & 1) != 0 && (isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      objc_msgSend(v6, sel_shiftIndexesStartingAtIndex_by_, startingAt, by);
      return;
    }
  }
  else
  {
    v6 = *(void **)(*(_QWORD *)v2 + 16);
  }
  v7 = v6;
  objc_msgSend(v7, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v10;
  *(_BYTE *)(v8 + 24) = 1;
  *(_QWORD *)v2 = v8;
  v9 = v10;
  swift_release();
  objc_msgSend(v9, sel_shiftIndexesStartingAtIndex_by_, startingAt, by);

}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Equal<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  _QWORD v12[4];

  v5 = a3[1];
  v7 = *(_QWORD *)(*a3 + 24);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v12[0] = *(_QWORD *)(*a3 + 16);
  v6 = v12[0];
  v12[1] = v7;
  v12[2] = v8;
  v12[3] = v9;
  *(_QWORD *)(a1 + 16) = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, a2, v12);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, a2, v11);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>);
}

void Data._Representation.subscript.setter()
{
  __asm { BR              X11 }
}

void sub_18198C660(uint64_t a1@<X8>)
{
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v4;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  if (v3 >= BYTE6(a1))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 0 || (unint64_t)v3 > 0xD)
  {
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_7:
    JUMPOUT(0x18198C920);
  }
  *((_BYTE *)&v6 + v3) = v2;
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v1 = v6;
  v1[1] = v5;
}

uint64_t Duration.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a5 + 48))(v6, a4, a5);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Duration.UnitsFormatStyle@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = Duration.UnitsFormatStyle.format(_:)(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t Duration.UnitsFormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t i;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v2 = Duration.UnitsFormatStyle._getSkeletons(_:)(a1, a2);
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_SSs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j57VSdSSIggnyo_SS8skeleton_AG011measurementF0Sd0H5ValuetSSs5M11OIegnrzr_TRSSAMSdSSIggnyo_Tf1cn_nTf4ng_n(v2, (uint64_t (*)(uint64_t, uint64_t, _BYTE *, double))partial apply for closure #1 in Duration.UnitsFormatStyle._formatFields(_:));
  v4 = swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v3 + 16);
  v33 = v3;
  if (v5 == 2)
  {
    MEMORY[0x1E0C80A78](v4);
    v7 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v8)
      v9 = v7;
    else
      v9 = 0x7D317B202C7D307BLL;
    if (v8)
      v10 = v8;
    else
      v10 = 0xE800000000000000;
    swift_bridgeObjectRelease();
    v37 = v9;
    v38 = v10;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
LABEL_21:
    v5 = v37;
    v6 = *(_QWORD *)(v3 + 16);
    if (!v6)
      goto LABEL_49;
    goto LABEL_22;
  }
  if (v5 != 1)
  {
    MEMORY[0x1E0C80A78](v4);
    v11 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))partial apply for closure #1 in Duration.UnitsFormatStyle._getListPattern(_:));
    v12 = 0xE800000000000000;
    MEMORY[0x1E0C80A78](v11);
    v13 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v14)
      v15 = v13;
    else
      v15 = 0x7D317B202C7D307BLL;
    if (v14)
      v12 = v14;
    result = swift_bridgeObjectRelease();
    v37 = v15;
    v38 = v12;
    v17 = v5 - 3;
    if (v5 < 3)
    {
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      return result;
    }
    if (v5 != 3)
    {
      while (v17)
      {
        v5 = lazy protocol witness table accessor for type String and conformance String();
        lazy protocol witness table accessor for type String and conformance String();
        RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
        if (!--v17)
          goto LABEL_20;
      }
      goto LABEL_48;
    }
LABEL_20:
    v18 = swift_bridgeObjectRelease();
    MEMORY[0x1E0C80A78](v18);
    _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    goto LABEL_21;
  }
  v37 = 8204411;
  v38 = 0xE300000000000000;
  v6 = 1;
LABEL_22:
  v34 = v3 + 32;
  while (v6 <= *(_QWORD *)(v3 + 16))
  {
    v36 = v6 - 1;
    v35 = *(_QWORD *)(v34 + 16 * (v6 - 1) + 8);
    if ((v38 & 0x2000000000000000) != 0)
      v19 = HIBYTE(v38) & 0xF;
    else
      v19 = v37 & 0xFFFFFFFFFFFFLL;
    v20 = 7;
    if (((v38 >> 60) & ((v37 & 0x800000000000000) == 0)) != 0)
      v20 = 11;
    v5 = v20 | (v19 << 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v5, 8204411, 0xE300000000000000);
    if ((v22 & 1) != 0)
      goto LABEL_47;
    v23 = v21;
    v24 = 4 * v19;
    while (1)
    {
      v25 = v23;
      for (i = 15; i < 0x30000; i = String.index(after:)())
      {
        if (v24 <= v25 >> 14)
          break;
        v28 = String.subscript.getter();
        v30 = v29;
        v31 = String.subscript.getter();
        v5 = v32;
        if (v28 == v31 && v30 == v32)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v27 & 1) == 0)
            break;
        }
        v25 = String.index(after:)();
      }
      if ((i & 0xFFFFFFFFFFFFC000) == 0x30000)
        break;
      if (v23 < 0x4000)
        goto LABEL_47;
      v23 = String.index(_:offsetBy:)();
    }
    swift_bridgeObjectRelease();
    if (v25 >> 14 < v23 >> 14)
      goto LABEL_46;
    v5 = v35;
    lazy protocol witness table accessor for type String and conformance String();
    String.replaceSubrange<A>(_:with:)();
    swift_bridgeObjectRelease();
    v3 = v33;
    v6 = v36;
    if (!v36)
    {
      swift_bridgeObjectRelease();
      return v37;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t partial apply for closure #1 in Duration.UnitsFormatStyle._formatFields(_:)(void *a1, unint64_t a2, char *a3)
{
  uint64_t v3;

  return closure #1 in Duration.UnitsFormatStyle._formatFields(_:)(a1, a2, a3, *(_OWORD **)(v3 + 16));
}

uint64_t closure #1 in Duration.UnitsFormatStyle._formatFields(_:)(void *a1, unint64_t a2, char *a3, _OWORD *a4)
{
  char v6;
  char *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[88];
  uint64_t v15[3];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  *(_OWORD *)v15 = *a4;
  swift_unknownObjectRetain();
  v7 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(a1, a2, (uint64_t)v15);
  swift_unknownObjectRelease();
  if (!v7)
    __break(1u);
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  v10 = swift_retain_n();
  MEMORY[0x1E0C80A78](v10);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v14, v15);
  v12 = v15[1];
  v11 = v15[0];
  swift_release_n();
  if (v12)
  {
    swift_release();
  }
  else
  {
    v15[0] = 0;
    v15[1] = 0xE000000000000000;
    Double.write<A>(to:)();
    v8._countAndFlagsBits = 32;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v14[79] = v6;
    Duration.UnitsFormatStyle.Unit.icuSkeleton.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return v15[0];
  }
  return v11;
}

uint64_t instantiation function for generic protocol witness table for Measurement<A><>.FormatStyle(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle);
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle, a2);
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Measurement<A><>.FormatStyle, a2);
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Decoder.codingPath.getter in conformance JSONDecoderImpl()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_retain();
  v2 = _CodingPathNode.path.getter(v1);
  swift_release();
  return v2;
}

uint64_t instantiation function for generic protocol witness table for <A> PredicateExpressions.Value<A>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];
  _QWORD v9[2];

  v5 = *a3;
  v6 = a3[1];
  a1[1] = MEMORY[0x186DA9D64](&protocol conformance descriptor for PredicateExpressions.Value<A>);
  v9[0] = v5;
  v9[1] = v6;
  a1[2] = MEMORY[0x186DA9D64](&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, a2, v9);
  v8[0] = v5;
  v8[1] = v6;
  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, a2, v8);
  a1[3] = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.Comparison(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v4 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v5 + 64) + v8;
  if ((v8 | v6) > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((v9 + ((v6 + 1) & ~v6)) & ~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + (((v8 | v6) + 16) & ~(v8 | v6)));
    swift_retain();
  }
  else
  {
    v13 = ~v8;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v14 = ((unint64_t)a1 + v6 + 1) & ~v6;
    v15 = ((unint64_t)a2 + v6 + 1) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v14, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v14 + v9) & v13, (v15 + v9) & v13, v4);
  }
  return v3;
}

void type metadata completion function for Measurement<>.FormatStyle()
{
  unint64_t v0;

  type metadata accessor for FloatingPointFormatStyle<Double>?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for FloatingPointFormatStyle<Double>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for FloatingPointFormatStyle<Double>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  }
}

uint64_t destroy for ICUDateFormatter.DateFormatInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void _initUbiquityIdentityDidChange()
{
  NSFileManager *v0;
  NSObject *v1;
  uint8_t v2[8];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  if ((-[NSFileManager _processHasUbiquityContainerEntitlement](v0, "_processHasUbiquityContainerEntitlement")
     || -[NSFileManager _processUsesCloudServices](v0, "_processUsesCloudServices"))
    && -[NSFileManager _processCanAccessUbiquityIdentityToken](v0, "_processCanAccessUbiquityIdentityToken"))
  {
    if (qword_1ECD09828 != -1)
      dispatch_once(&qword_1ECD09828, &__block_literal_global_555);
  }
  else
  {
    v1 = _NSOSLog();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_1817D9000, v1, OS_LOG_TYPE_INFO, "Registering for NSUbiquityIdentityDidChangeNotification without the necessary entitlements", v2, 2u);
    }
  }
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  Swift::Int v20;
  _QWORD *v21;
  Swift::Int v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  Swift::Int v107;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  __int128 *v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  char *__dst;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v2 = a1[1];
  result = _minimumMergeRunLength(_:)(v2);
  if (result >= v2)
  {
    if (v2 < 0)
      goto LABEL_149;
    if (v2)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    return result;
  }
  if (v2 >= 0)
    v4 = v2;
  else
    v4 = v2 + 1;
  if (v2 < -1)
    goto LABEL_157;
  v105 = result;
  v112 = v1;
  if (v2 < 2)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v2 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v9 = (char *)MEMORY[0x1E0DEE9D8];
      v10 = a1;
LABEL_115:
      v95 = v9;
      v104 = v7;
      if (v11 >= 2)
      {
        v96 = *v10;
        do
        {
          v97 = v11 - 2;
          if (v11 < 2)
            goto LABEL_144;
          if (!v96)
            goto LABEL_156;
          v98 = v95;
          v99 = *(_QWORD *)&v95[16 * v97 + 32];
          v100 = *(_QWORD *)&v95[16 * v11 + 24];
          v101 = v112;
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v96 + 56 * v99), (char *)(v96 + 56 * *(_QWORD *)&v95[16 * v11 + 16]), v96 + 56 * v100, __dst);
          v112 = v101;
          if (v101)
            break;
          if (v100 < v99)
            goto LABEL_145;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
          if (v97 >= *((_QWORD *)v98 + 2))
            goto LABEL_146;
          v102 = &v98[16 * v97 + 32];
          *(_QWORD *)v102 = v99;
          *((_QWORD *)v102 + 1) = v100;
          v103 = *((_QWORD *)v98 + 2);
          if (v11 > v103)
            goto LABEL_147;
          memmove(&v98[16 * v11 + 16], &v98[16 * v11 + 32], 16 * (v103 - v11));
          v95 = v98;
          *((_QWORD *)v98 + 2) = v103 - 1;
          v11 = v103 - 1;
        }
        while (v103 > 2);
      }
LABEL_112:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v5 = v4 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable));
    v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v6 + 16) = v5;
    v104 = v6;
    __dst = (char *)(v6 + 32);
  }
  v8 = 0;
  v9 = (char *)MEMORY[0x1E0DEE9D8];
  v10 = a1;
  while (1)
  {
    v12 = v8++;
    if (v8 < v2)
    {
      v13 = *v10;
      outlined init with copy of (key: String, value: Encodable)(*v10 + 56 * v8, (uint64_t)&v110);
      outlined init with copy of (key: String, value: Encodable)(v13 + 56 * v12, (uint64_t)&v108);
      if (v110 == v108 && v111 == v109)
        v15 = 0;
      else
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined destroy of (key: String, value: Encodable)((uint64_t)&v108);
      outlined destroy of (key: String, value: Encodable)((uint64_t)&v110);
      v8 = v12 + 2;
      if (v12 + 2 < v2)
      {
        v16 = v13;
        v17 = v13 + 56 * v12 + 56;
        while (1)
        {
          outlined init with copy of (key: String, value: Encodable)(v17 + 56, (uint64_t)&v110);
          outlined init with copy of (key: String, value: Encodable)(v17, (uint64_t)&v108);
          v18 = v110 == v108 && v111 == v109;
          v19 = v18 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v108);
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v110);
          if (((v15 ^ v19) & 1) != 0)
            break;
          ++v8;
          v17 += 56;
          if (v2 == v8)
          {
            v8 = v2;
            break;
          }
        }
        v13 = v16;
      }
      if ((v15 & 1) != 0)
      {
        if (v8 < v12)
          goto LABEL_150;
        if (v12 < v8)
        {
          v20 = v13 + 56 * v8 - 56;
          v21 = (__int128 *)(v13 + 56 * v12);
          v22 = v8;
          v23 = v12;
          do
          {
            if (v23 != --v22)
            {
              if (!v13)
                goto LABEL_155;
              v24 = *((_QWORD *)v21 + 6);
              v26 = v21[1];
              v25 = v21[2];
              v27 = *v21;
              v29 = *(_OWORD *)(v20 + 16);
              v28 = *(_OWORD *)(v20 + 32);
              v30 = *(_OWORD *)v20;
              *((_QWORD *)v21 + 6) = *(_QWORD *)(v20 + 48);
              v21[1] = v29;
              v21[2] = v28;
              *v21 = v30;
              *(_OWORD *)v20 = v27;
              *(_OWORD *)(v20 + 16) = v26;
              *(_OWORD *)(v20 + 32) = v25;
              *(_QWORD *)(v20 + 48) = v24;
            }
            ++v23;
            v20 -= 56;
            v21 = (__int128 *)((char *)v21 + 56);
          }
          while (v23 < v22);
        }
      }
    }
    if (v8 >= v2)
      goto LABEL_64;
    if (__OFSUB__(v8, v12))
      goto LABEL_148;
    if (v8 - v12 >= v105)
      goto LABEL_64;
    if (__OFADD__(v12, v105))
      goto LABEL_151;
    if (v12 + v105 < v2)
      v2 = v12 + v105;
    if (v2 < v12)
      break;
    if (v8 != v2)
    {
      v31 = 56 * v8;
      do
      {
        v32 = v12;
        v33 = v31;
        while (1)
        {
          v34 = *v10 + v33;
          outlined init with copy of (key: String, value: Encodable)(v34, (uint64_t)&v110);
          outlined init with copy of (key: String, value: Encodable)(v34 - 56, (uint64_t)&v108);
          if (v110 == v108 && v111 == v109)
            break;
          v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v108);
          outlined destroy of (key: String, value: Encodable)((uint64_t)&v110);
          if ((v36 & 1) == 0)
            goto LABEL_53;
          if (!*v10)
            goto LABEL_153;
          v37 = *v10 + v33;
          v38 = *(_QWORD *)(v37 + 48);
          v40 = *(_OWORD *)(v37 + 16);
          v39 = *(_OWORD *)(v37 + 32);
          v41 = *(_OWORD *)v37;
          v42 = *(_OWORD *)(v37 - 40);
          *(_OWORD *)v37 = *(_OWORD *)(v37 - 56);
          *(_OWORD *)(v37 + 16) = v42;
          *(_OWORD *)(v37 + 32) = *(_OWORD *)(v37 - 24);
          *(_QWORD *)(v37 + 48) = *(_QWORD *)(v37 - 8);
          *(_OWORD *)(v37 - 56) = v41;
          *(_OWORD *)(v37 - 40) = v40;
          *(_OWORD *)(v37 - 24) = v39;
          v33 -= 56;
          ++v32;
          *(_QWORD *)(v37 - 8) = v38;
          if (v8 == v32)
            goto LABEL_53;
        }
        outlined destroy of (key: String, value: Encodable)((uint64_t)&v108);
        outlined destroy of (key: String, value: Encodable)((uint64_t)&v110);
LABEL_53:
        ++v8;
        v31 += 56;
      }
      while (v8 != v2);
      v8 = v2;
    }
LABEL_64:
    if (v8 < v12)
      goto LABEL_143;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    v44 = *((_QWORD *)v9 + 2);
    v43 = *((_QWORD *)v9 + 3);
    v11 = v44 + 1;
    if (v44 >= v43 >> 1)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v11;
    v45 = v9 + 32;
    v46 = &v9[16 * v44 + 32];
    *(_QWORD *)v46 = v12;
    *((_QWORD *)v46 + 1) = v8;
    if (v44)
    {
      v10 = a1;
      while (1)
      {
        v47 = v11 - 1;
        if (v11 >= 4)
        {
          v52 = &v45[16 * v11];
          v53 = *((_QWORD *)v52 - 8);
          v54 = *((_QWORD *)v52 - 7);
          v58 = __OFSUB__(v54, v53);
          v55 = v54 - v53;
          if (v58)
            goto LABEL_132;
          v57 = *((_QWORD *)v52 - 6);
          v56 = *((_QWORD *)v52 - 5);
          v58 = __OFSUB__(v56, v57);
          v50 = v56 - v57;
          v51 = v58;
          if (v58)
            goto LABEL_133;
          v59 = v11 - 2;
          v60 = &v45[16 * v11 - 32];
          v62 = *(_QWORD *)v60;
          v61 = *((_QWORD *)v60 + 1);
          v58 = __OFSUB__(v61, v62);
          v63 = v61 - v62;
          if (v58)
            goto LABEL_135;
          v58 = __OFADD__(v50, v63);
          v64 = v50 + v63;
          if (v58)
            goto LABEL_138;
          if (v64 >= v55)
          {
            v82 = &v45[16 * v47];
            v84 = *(_QWORD *)v82;
            v83 = *((_QWORD *)v82 + 1);
            v58 = __OFSUB__(v83, v84);
            v85 = v83 - v84;
            if (v58)
              goto LABEL_142;
            v75 = v50 < v85;
            goto LABEL_102;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v76 = *((_QWORD *)v9 + 4);
            v77 = *((_QWORD *)v9 + 5);
            v58 = __OFSUB__(v77, v76);
            v69 = v77 - v76;
            v70 = v58;
            goto LABEL_96;
          }
          v49 = *((_QWORD *)v9 + 4);
          v48 = *((_QWORD *)v9 + 5);
          v58 = __OFSUB__(v48, v49);
          v50 = v48 - v49;
          v51 = v58;
        }
        if ((v51 & 1) != 0)
          goto LABEL_134;
        v59 = v11 - 2;
        v65 = &v45[16 * v11 - 32];
        v67 = *(_QWORD *)v65;
        v66 = *((_QWORD *)v65 + 1);
        v68 = __OFSUB__(v66, v67);
        v69 = v66 - v67;
        v70 = v68;
        if (v68)
          goto LABEL_137;
        v71 = &v45[16 * v47];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v58 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v58)
          goto LABEL_140;
        if (__OFADD__(v69, v74))
          goto LABEL_141;
        if (v69 + v74 >= v50)
        {
          v75 = v50 < v74;
LABEL_102:
          if (v75)
            v47 = v59;
          goto LABEL_104;
        }
LABEL_96:
        if ((v70 & 1) != 0)
          goto LABEL_136;
        v78 = &v45[16 * v47];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v58 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v58)
          goto LABEL_139;
        if (v81 < v69)
          goto LABEL_15;
LABEL_104:
        v86 = v47 - 1;
        if (v47 - 1 >= v11)
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        v87 = *v10;
        if (!*v10)
          goto LABEL_154;
        v88 = v9;
        v89 = &v45[16 * v86];
        v90 = *(_QWORD *)v89;
        v91 = &v45[16 * v47];
        v92 = *((_QWORD *)v91 + 1);
        v93 = v112;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v87 + 56 * *(_QWORD *)v89), (char *)(v87 + 56 * *(_QWORD *)v91), v87 + 56 * v92, __dst);
        v112 = v93;
        if (v93)
          goto LABEL_112;
        if (v92 < v90)
          goto LABEL_129;
        if (v47 > *((_QWORD *)v88 + 2))
          goto LABEL_130;
        *(_QWORD *)v89 = v90;
        *(_QWORD *)&v45[16 * v86 + 8] = v92;
        v94 = *((_QWORD *)v88 + 2);
        if (v47 >= v94)
          goto LABEL_131;
        v9 = v88;
        v11 = v94 - 1;
        memmove(&v45[16 * v47], v91 + 16, 16 * (v94 - 1 - v47));
        *((_QWORD *)v88 + 2) = v94 - 1;
        v75 = v94 > 2;
        v10 = a1;
        if (!v75)
          goto LABEL_15;
      }
    }
    v11 = 1;
    v10 = a1;
LABEL_15:
    v2 = v10[1];
    if (v8 >= v2)
    {
      v7 = v104;
      goto LABEL_115;
    }
  }
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  Swift::Int v18;
  _BYTE *v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  Swift::Int v26;
  _OWORD *v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  Swift::Int v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  _OWORD *v39;
  BOOL v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int v108;
  Swift::Int v109;
  uint64_t v110;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_159;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_168;
  v108 = result;
  v105 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_125:
      v96 = v11;
      v107 = v8;
      if (v12 >= 2)
      {
        v97 = *v105;
        do
        {
          v98 = v12 - 2;
          if (v12 < 2)
            goto LABEL_154;
          if (!v97)
            goto LABEL_166;
          v99 = v96;
          v100 = *(_QWORD *)&v96[16 * v98 + 32];
          v101 = *(_QWORD *)&v96[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v97 + 48 * v100), (char *)(v97 + 48 * *(_QWORD *)&v96[16 * v12 + 16]), v97 + 48 * v101, __dst);
          if (v1)
            break;
          if (v101 < v100)
            goto LABEL_155;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v99 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v99);
          if (v98 >= *((_QWORD *)v99 + 2))
            goto LABEL_156;
          v102 = &v99[16 * v98 + 32];
          *(_QWORD *)v102 = v100;
          *((_QWORD *)v102 + 1) = v101;
          v103 = *((_QWORD *)v99 + 2);
          if (v12 > v103)
            goto LABEL_157;
          memmove(&v99[16 * v12 + 16], &v99[16 * v12 + 32], 16 * (v103 - v12));
          v96 = v99;
          *((_QWORD *)v99 + 2) = v103 - 1;
          v12 = v103 - 1;
        }
        while (v103 > 2);
      }
LABEL_122:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v107 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v107 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: _XMLPlistEncodingFormat.Reference, value: _XMLPlistEncodingFormat.Reference));
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v107 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v106 = *a1 + 16;
  v104 = *a1 - 48;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v109 = v3;
  v110 = *a1;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_51;
    v14 = v10 + 48 * v9;
    if (*(_BYTE *)(v14 + 16))
      goto LABEL_167;
    v15 = v10 + 48 * v13;
    if (*(_BYTE *)(v15 + 16))
      goto LABEL_167;
    if (*(_QWORD *)v14 == *(_QWORD *)v15 && *(_QWORD *)(v14 + 8) == *(_QWORD *)(v15 + 8))
    {
      v18 = v13 + 2;
      if (v13 + 2 >= v3)
      {
        v9 = v13 + 2;
        goto LABEL_51;
      }
      v17 = 0;
    }
    else
    {
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v18 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_41;
    }
    v19 = (_BYTE *)(v106 + 48 * v18);
    do
    {
      if (*v19)
        goto LABEL_167;
      v21 = v10 + 48 * v9;
      if (*(_BYTE *)(v21 + 16))
        goto LABEL_167;
      if (*((_QWORD *)v19 - 2) == *(_QWORD *)v21 && *((_QWORD *)v19 - 1) == *(_QWORD *)(v21 + 8))
      {
        if ((v17 & 1) != 0)
          goto LABEL_42;
      }
      else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
      {
        goto LABEL_41;
      }
      v19 += 48;
      v20 = v18 + 1;
      v9 = v18;
      v18 = v20;
    }
    while (v20 < v3);
    v18 = v20;
LABEL_41:
    v9 = v18;
    if ((v17 & 1) != 0)
    {
LABEL_42:
      if (v18 < v13)
        goto LABEL_162;
      if (v13 < v18)
      {
        v23 = 48 * v18;
        v24 = 48 * v13;
        v25 = v18;
        v26 = v13;
        do
        {
          if (v26 != --v25)
          {
            if (!v10)
              goto LABEL_165;
            v27 = (_OWORD *)(v10 + v24);
            v28 = *(_BYTE *)(v10 + v24 + 16);
            v29 = v10 + v23;
            v30 = *(_BYTE *)(v10 + v24 + 40);
            v31 = *(_OWORD *)(v10 + v24);
            v32 = *(_OWORD *)(v10 + v24 + 24);
            v34 = *(_OWORD *)(v10 + v23 - 32);
            v33 = *(_OWORD *)(v10 + v23 - 16);
            *v27 = *(_OWORD *)(v10 + v23 - 48);
            v27[1] = v34;
            v27[2] = v33;
            *(_OWORD *)(v29 - 48) = v31;
            *(_BYTE *)(v29 - 32) = v28;
            *(_OWORD *)(v29 - 24) = v32;
            *(_BYTE *)(v29 - 8) = v30;
          }
          ++v26;
          v23 -= 48;
          v24 += 48;
        }
        while (v26 < v25);
      }
      v9 = v18;
    }
LABEL_51:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_158;
      if (v9 - v13 < v108)
        break;
    }
LABEL_74:
    if (v9 < v13)
      goto LABEL_153;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v46 = *((_QWORD *)v11 + 2);
    v45 = *((_QWORD *)v11 + 3);
    v12 = v46 + 1;
    if (v46 >= v45 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v47 = v11 + 32;
    v48 = &v11[16 * v46 + 32];
    *(_QWORD *)v48 = v13;
    *((_QWORD *)v48 + 1) = v9;
    if (v46)
    {
      v10 = v110;
      while (1)
      {
        v49 = v12 - 1;
        if (v12 >= 4)
        {
          v54 = &v47[16 * v12];
          v55 = *((_QWORD *)v54 - 8);
          v56 = *((_QWORD *)v54 - 7);
          v60 = __OFSUB__(v56, v55);
          v57 = v56 - v55;
          if (v60)
            goto LABEL_142;
          v59 = *((_QWORD *)v54 - 6);
          v58 = *((_QWORD *)v54 - 5);
          v60 = __OFSUB__(v58, v59);
          v52 = v58 - v59;
          v53 = v60;
          if (v60)
            goto LABEL_143;
          v61 = v12 - 2;
          v62 = &v47[16 * v12 - 32];
          v64 = *(_QWORD *)v62;
          v63 = *((_QWORD *)v62 + 1);
          v60 = __OFSUB__(v63, v64);
          v65 = v63 - v64;
          if (v60)
            goto LABEL_145;
          v60 = __OFADD__(v52, v65);
          v66 = v52 + v65;
          if (v60)
            goto LABEL_148;
          if (v66 >= v57)
          {
            v84 = &v47[16 * v49];
            v86 = *(_QWORD *)v84;
            v85 = *((_QWORD *)v84 + 1);
            v60 = __OFSUB__(v85, v86);
            v87 = v85 - v86;
            if (v60)
              goto LABEL_152;
            v77 = v52 < v87;
            goto LABEL_112;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v78 = *((_QWORD *)v11 + 4);
            v79 = *((_QWORD *)v11 + 5);
            v60 = __OFSUB__(v79, v78);
            v71 = v79 - v78;
            v72 = v60;
            goto LABEL_106;
          }
          v51 = *((_QWORD *)v11 + 4);
          v50 = *((_QWORD *)v11 + 5);
          v60 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          v53 = v60;
        }
        if ((v53 & 1) != 0)
          goto LABEL_144;
        v61 = v12 - 2;
        v67 = &v47[16 * v12 - 32];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v70 = __OFSUB__(v68, v69);
        v71 = v68 - v69;
        v72 = v70;
        if (v70)
          goto LABEL_147;
        v73 = &v47[16 * v49];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v60 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v60)
          goto LABEL_150;
        if (__OFADD__(v71, v76))
          goto LABEL_151;
        if (v71 + v76 >= v52)
        {
          v77 = v52 < v76;
LABEL_112:
          if (v77)
            v49 = v61;
          goto LABEL_114;
        }
LABEL_106:
        if ((v72 & 1) != 0)
          goto LABEL_146;
        v80 = &v47[16 * v49];
        v82 = *(_QWORD *)v80;
        v81 = *((_QWORD *)v80 + 1);
        v60 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v60)
          goto LABEL_149;
        if (v83 < v71)
          goto LABEL_15;
LABEL_114:
        v88 = v49 - 1;
        if (v49 - 1 >= v12)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
          goto LABEL_161;
        }
        if (!v10)
          goto LABEL_164;
        v89 = v11;
        v90 = v10;
        v91 = &v47[16 * v88];
        v92 = *(_QWORD *)v91;
        v93 = &v47[16 * v49];
        v94 = *((_QWORD *)v93 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v90 + 48 * *(_QWORD *)v91), (char *)(v90 + 48 * *(_QWORD *)v93), v90 + 48 * v94, __dst);
        if (v1)
          goto LABEL_122;
        if (v94 < v92)
          goto LABEL_139;
        if (v49 > *((_QWORD *)v89 + 2))
          goto LABEL_140;
        *(_QWORD *)v91 = v92;
        *(_QWORD *)&v47[16 * v88 + 8] = v94;
        v95 = *((_QWORD *)v89 + 2);
        if (v49 >= v95)
          goto LABEL_141;
        v11 = v89;
        v12 = v95 - 1;
        memmove(&v47[16 * v49], v93 + 16, 16 * (v95 - 1 - v49));
        *((_QWORD *)v89 + 2) = v95 - 1;
        v77 = v95 > 2;
        v10 = v110;
        if (!v77)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v110;
LABEL_15:
    v3 = v109;
    if (v9 >= v109)
    {
      v8 = v107;
      goto LABEL_125;
    }
  }
  if (__OFADD__(v13, v108))
    goto LABEL_160;
  if (v13 + v108 >= v3)
    v35 = v3;
  else
    v35 = v13 + v108;
  if (v35 >= v13)
  {
    if (v9 != v35)
    {
      v36 = v104 + 48 * v9;
      do
      {
        v37 = v13;
        v38 = v36;
        do
        {
          if (*(_BYTE *)(v38 + 64) || *(_BYTE *)(v38 + 16))
            goto LABEL_167;
          v39 = (_OWORD *)(v38 + 48);
          v40 = *(_QWORD *)(v38 + 48) == *(_QWORD *)v38 && *(_QWORD *)(v38 + 56) == *(_QWORD *)(v38 + 8);
          if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_163;
          v41 = *(_OWORD *)v38;
          v42 = *(_OWORD *)(v38 + 16);
          v43 = *(_OWORD *)(v38 + 32);
          *(_OWORD *)v38 = *(_OWORD *)(v38 + 48);
          *(_OWORD *)(v38 + 24) = *(_OWORD *)(v38 + 72);
          v44 = *(_BYTE *)(v38 + 88);
          *(_BYTE *)(v38 + 16) = *(_BYTE *)(v38 + 64);
          *(_BYTE *)(v38 + 40) = v44;
          v38 -= 48;
          *v39 = v41;
          v39[1] = v42;
          ++v37;
          v39[2] = v43;
        }
        while (v9 != v37);
        ++v9;
        v36 += 48;
      }
      while (v9 != v35);
      v9 = v35;
    }
    goto LABEL_74;
  }
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_168:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 48 * a3 - 48;
LABEL_5:
    v9 = v6;
    v10 = v8;
    while (!*(_BYTE *)(v10 + 64) && !*(_BYTE *)(v10 + 16))
    {
      v11 = (_OWORD *)(v10 + 48);
      result = *(_QWORD *)(v10 + 48);
      if (result != *(_QWORD *)v10 || *(_QWORD *)(v10 + 56) != *(_QWORD *)(v10 + 8))
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
        {
          if (!v7)
          {
            __break(1u);
            break;
          }
          v13 = *(_OWORD *)v10;
          v14 = *(_OWORD *)(v10 + 16);
          v15 = *(_OWORD *)(v10 + 32);
          *(_OWORD *)v10 = *(_OWORD *)(v10 + 48);
          *(_OWORD *)(v10 + 24) = *(_OWORD *)(v10 + 72);
          v16 = *(_BYTE *)(v10 + 88);
          *(_BYTE *)(v10 + 16) = *(_BYTE *)(v10 + 64);
          *(_BYTE *)(v10 + 40) = v16;
          v10 -= 48;
          *v11 = v13;
          v11[1] = v14;
          ++v9;
          v11[2] = v15;
          if (v4 != v9)
            continue;
        }
      }
      ++v4;
      v8 += 48;
      if (v4 == a2)
        return result;
      goto LABEL_5;
    }
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributedString(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 16) = lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
  result = lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString and conformance AttributedString()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString, &type metadata for AttributedString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString, &type metadata for AttributedString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString, &type metadata for AttributedString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString, &type metadata for AttributedString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString, &type metadata for AttributedString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString, &type metadata for AttributedString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString and conformance AttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString and conformance AttributedString)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString, &type metadata for AttributedString);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Duration.UnitsFormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  uint64_t v0;

  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedLongLong_, v0);
}

void protocol witness for Hashable.hash(into:) in conformance DateInterval()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v0;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

uint64_t dispatch thunk of JSONDecoder.userInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t type metadata completion function for NSDecimal.FormatStyle.Currency()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for FloatingPointFormatStyle.Currency()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for IntegerFormatStyle.Currency()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::Int __swiftcall _NSSwiftCalendar.ordinality(of:in:for:)(NSCalendarUnit of, NSCalendarUnit in, Foundation::Date a3)
{
  double *v3;
  uint64_t v4;
  double v6;
  char v7;
  Swift::Int v8;
  char v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t ObjectType;
  Swift::Int v16;
  char v17;
  char v18;
  double v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v6 = *v3;
  _fromNSCalendarUnit(_:)(of, &v24);
  v7 = v24;
  if (v24 == 18)
    return 0x7FFFFFFFFFFFFFFFLL;
  _fromNSCalendarUnit(_:)(in, &v23);
  v9 = v23;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  if (v23 != 18)
  {
    v10 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
    v11 = (os_unfair_lock_s *)(v10 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 32));
    v12 = *(_QWORD *)(v10 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock(v11);
    v22 = v7;
    v21 = v9;
    v13 = 1.59271755e13;
    if (v6 <= 1.59271755e13)
      v13 = v6;
    v14 = fmax(v13, -2.11845067e11);
    ObjectType = swift_getObjectType();
    v20 = v14;
    v16 = (*(uint64_t (**)(char *, char *, double *, uint64_t, uint64_t))(v12 + 152))(&v22, &v21, &v20, ObjectType, v12);
    v18 = v17;
    swift_unknownObjectRelease();
    if ((v18 & 1) == 0)
      return v16;
  }
  return v8;
}

unint64_t protocol witness for _CalendarProtocol.ordinality(of:in:for:) in conformance _CalendarICU(Foundation::Calendar::Component a1, Foundation::Calendar::Component a2, double a3)
{
  return (unint64_t)_CalendarICU.ordinality(of:in:for:)(a1, a2, *(Foundation::Date *)&a3);
}

Swift::Int_optional __swiftcall _CalendarICU.ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  Swift::Int v5;
  Swift::Bool v6;
  Swift::Int v7;
  Swift::Bool v8;
  Swift::Int v9;
  Swift::Bool v10;
  Swift::Int_optional result;

  v4 = *(os_unfair_lock_s **)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  partial apply for closure #1 in _CalendarICU.ordinality(of:in:for:)((uint64_t)&v9);
  v5 = v9;
  v6 = v10;
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  v7 = v5;
  v8 = v6;
  result.value = v7;
  result.is_nil = v8;
  return result;
}

Swift::Int partial apply for closure #1 in _CalendarICU.ordinality(of:in:for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  Foundation::Date v4;
  char v6;
  char v7;
  Swift::Int_optional v8;

  v3 = *(_BYTE *)(v1 + 25);
  *(Foundation::Date *)&v4._time = *(Foundation::Date *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 24);
  v6 = v3;
  v8 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v7, (Foundation::Calendar::Component)&v6, v4);
  *(_QWORD *)a1 = v8.value;
  *(_BYTE *)(a1 + 8) = v8.is_nil;
  return v8.value;
}

Swift::Int_optional __swiftcall _CalendarICU._locked_ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  double *v3;
  uint64_t v4;
  Swift::Int v5;
  double v6;
  uint64_t value;
  uint64_t v8;
  int v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  Foundation::Date v20;
  double v21;
  Swift::Bool is_nil;
  int v23;
  int v24;
  double v25;
  double v26;
  Foundation::Date v27;
  double v28;
  Swift::Bool v29;
  int v30;
  int v31;
  double v32;
  Swift::Int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  double v53;
  BOOL v54;
  uint64_t v55;
  Swift::Int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  double v60;
  int v61;
  uint64_t v62;
  double v63;
  Foundation::Date v64;
  double v65;
  Swift::Int v66;
  int v67;
  double v68;
  double v69;
  uint64_t v70;
  double v71;
  double v72;
  int v73;
  uint64_t Attribute;
  Swift::Int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  Swift::Int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  Swift::Int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  double v87;
  Swift::Int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  Swift::Int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  Swift::Int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  double v101;
  Swift::Int v102;
  _QWORD *v103;
  char v104;
  Swift::Int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  Swift::Int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  Swift::Int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  double v117;
  Foundation::Date v118;
  uint64_t value_low;
  Swift::Int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  Swift::Int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  Swift::Int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  _QWORD *v133;
  int v134;
  int v135;
  uint64_t v136;
  double time;
  char v139;
  Swift::Int v140;
  uint64_t v141;
  double v142;
  double v143;
  uint64_t v144;
  double v145;
  double v146;
  char v147;
  Swift::Int v148;
  uint64_t v149;
  uint64_t v150;
  Swift::Int v151;
  uint64_t v152;
  uint64_t v153;
  Swift::Int v154;
  Foundation::Date v155;
  uint64_t v156;
  Swift::Int v157;
  Swift::Int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double v166;
  uint64_t v167;
  double v168;
  Swift::Int v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  char v173;
  char v174;
  Foundation::Date v175;
  char v176;
  uint64_t v177;
  Swift::Int_optional v178;
  Swift::Int_optional v179;
  Swift::Int_optional v180;
  Swift::Int_optional v181;
  Swift::Int_optional v182;
  Swift::Int_optional v183;
  Swift::Int_optional v184;
  Swift::Int_optional v185;
  Swift::Int_optional v186;
  Swift::Int_optional v187;
  Swift::Int_optional v188;
  Swift::Int_optional v189;
  Swift::Int_optional v190;
  Swift::Int_optional v191;
  Swift::Int_optional v192;
  Swift::Int_optional v193;
  Swift::Int_optional v194;
  Swift::Int_optional v195;
  Swift::Int_optional v196;
  Swift::Int_optional v197;
  Swift::Int_optional v198;
  Swift::Int_optional v199;
  Swift::Int_optional v200;
  Swift::Int_optional v201;
  Swift::Int_optional v202;
  Swift::Int_optional v203;
  Swift::Int_optional result;
  Swift::Int_optional v205;
  Swift::Int_optional v206;
  Swift::Int_optional v207;
  Swift::Int_optional v208;
  Swift::Int_optional v209;
  Swift::Int_optional v210;

  value = 0;
  v177 = *MEMORY[0x1E0C80C00];
  v8 = 1;
  v9 = *(unsigned __int8 *)of;
  v10 = *v3;
  switch(*(_BYTE *)in)
  {
    case 0:
      switch(*(_BYTE *)of)
      {
        case 1:
        case 0xC:
          goto LABEL_340;
        case 2:
          v174 = 0;
          v172 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v174);
          if ((v176 & 1) != 0)
            goto LABEL_332;
          time = v175._time;
          LOBYTE(v175._time) = 3;
          _CalendarICU._locked_maximumRange(of:)((uint64_t)&v175);
          if ((v139 & 1) != 0)
          {
            value = 0;
            LOBYTE(v8) = 0;
            goto LABEL_401;
          }
          v140 = *(_QWORD *)&result.is_nil - result.value;
          if (__OFSUB__(*(_QWORD *)&result.is_nil, result.value))
            goto LABEL_519;
          v54 = __OFADD__(v140, 1);
          v141 = v140 + 1;
          if (v54)
            goto LABEL_520;
          v142 = floor((v10 - time) / 86400.0 / (double)v141 * 0.96875);
          if ((~*(_QWORD *)&v142 & 0x7FF0000000000000) == 0)
            goto LABEL_521;
          if (v142 <= -9.22337204e18)
            goto LABEL_522;
          if (v142 >= 9.22337204e18)
            goto LABEL_533;
          v143 = (floor(v10) + 978307200.0) * 1000.0;
          if ((uint64_t)v142 <= 10)
            v144 = 0;
          else
            v144 = (uint64_t)v142 - 10;
          LOBYTE(v8) = 0;
          while (1)
          {
            value = v144 + 1;
            if (__OFADD__(v144, 1))
              goto LABEL_404;
            LODWORD(v175._time) = 0;
            MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32));
            ucal_setMillis();
            _CalendarICU._locked_add(_:amount:wrap:status:)(2, ++v144, 0);
            if (v145 > v143)
              goto LABEL_401;
          }
        case 3:
          v174 = 0;
          v172 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v174);
          v146 = v175._time;
          v147 = v176;
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32));
          ucal_setMillis();
          if ((v147 & 1) != 0)
            goto LABEL_332;
          a3._time = floor((v10 - v146) / 86400.0);
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_509;
          if (a3._time <= -9.22337204e18)
            goto LABEL_510;
          if (a3._time >= 9.22337204e18)
            goto LABEL_511;
          value = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
            goto LABEL_400;
          __break(1u);
LABEL_313:
          LOBYTE(v172) = 3;
          v174 = 0;
          v175._time = v10;
          result = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
          value = result.value;
          if (result.is_nil)
            goto LABEL_401;
          v148 = result.value - 1;
          if (__OFSUB__(result.value, 1))
            goto LABEL_512;
          if (v148 > 0x555555555555554)
            goto LABEL_332;
          LODWORD(v175._time) = 0;
          v149 = 24 * v148;
          if ((unsigned __int128)(v148 * (__int128)24) >> 64 != (24 * v148) >> 63)
            goto LABEL_523;
          result.value = ucal_get();
          v150 = v149 + SLODWORD(result.value);
          if (__OFADD__(v149, SLODWORD(result.value)))
            goto LABEL_524;
          value = v150 + 1;
          if (!__OFADD__(v150, 1))
            goto LABEL_400;
          __break(1u);
LABEL_321:
          LOBYTE(v172) = 4;
          v174 = 0;
          v175._time = v10;
          result = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
          value = result.value;
          if (result.is_nil)
            goto LABEL_401;
          v151 = result.value - 1;
          if (__OFSUB__(result.value, 1))
            goto LABEL_513;
          if (v151 > 0x222222222222221)
            goto LABEL_332;
          LODWORD(v175._time) = 0;
          v152 = 60 * v151;
          if ((unsigned __int128)(v151 * (__int128)60) >> 64 != (60 * v151) >> 63)
            goto LABEL_525;
          result.value = ucal_get();
          v153 = v152 + SLODWORD(result.value);
          if (__OFADD__(v152, SLODWORD(result.value)))
            goto LABEL_526;
          value = v153 + 1;
          if (!__OFADD__(v153, 1))
            goto LABEL_400;
          __break(1u);
LABEL_329:
          LOBYTE(v172) = 5;
          v174 = 0;
          v175._time = v10;
          result = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
          value = result.value;
          if (result.is_nil)
            goto LABEL_401;
          v154 = result.value - 1;
          if (__OFSUB__(result.value, 1))
            goto LABEL_514;
          if (v154 > 0x222222222222221)
            goto LABEL_332;
          LODWORD(v175._time) = 0;
          v170 = 60 * v154;
          if ((unsigned __int128)(v154 * (__int128)60) >> 64 != (60 * v154) >> 63)
            goto LABEL_530;
          result.value = ucal_get();
          v171 = v170 + SLODWORD(result.value);
          if (__OFADD__(v170, SLODWORD(result.value)))
            goto LABEL_531;
          value = v171 + 1;
          if (!__OFADD__(v171, 1))
            goto LABEL_400;
          goto LABEL_532;
        case 4:
          goto LABEL_313;
        case 5:
          goto LABEL_321;
        case 6:
          goto LABEL_329;
        case 7:
        case 8:
          v174 = 0;
          v172 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v174);
          if ((v176 & 1) != 0)
            goto LABEL_332;
          v12 = v175._time;
          v13 = (floor(v10) + 978307200.0) * 1000.0;
          v14 = (floor(v175._time) + 978307200.0) * 1000.0;
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32));
          ucal_setMillis();
          v15 = ucal_get();
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32));
          ucal_setMillis();
          for (; ucal_get() != v15; v14 = v14 + 86400000.0)
            _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1, 0);
          v16 = floor((v10 - v12) / 86400.0 / 7.0);
          if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) == 0)
            goto LABEL_445;
          if (v16 <= -9.22337204e18)
            goto LABEL_446;
          if (v16 >= 9.22337204e18)
            goto LABEL_447;
          if ((uint64_t)v16 <= 10)
            v17 = 0;
          else
            v17 = (uint64_t)v16 - 10;
          while (1)
          {
            value = v17 + 1;
            if (__OFADD__(v17, 1))
              break;
            LODWORD(v175._time) = 0;
            MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32));
            ucal_setMillis();
            _CalendarICU._locked_add(_:amount:wrap:status:)(3, ++v17, 0);
            if (v18 >= v13)
              goto LABEL_400;
          }
          __break(1u);
          goto LABEL_403;
        case 9:
          LOBYTE(v172) = 1;
          v174 = 0;
          v175._time = v10;
          v209 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
          value = v209.value;
          if (v209.is_nil)
            goto LABEL_401;
          LOBYTE(v172) = 9;
          v174 = 1;
          v175._time = v10;
          result = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, v155);
          if (result.is_nil)
          {
            value = result.value;
            goto LABEL_401;
          }
          v156 = value - 1;
          if (__OFSUB__(value, 1))
            goto LABEL_527;
          if ((unint64_t)(value - 0x2000000000000001) >> 62 != 3)
            goto LABEL_528;
          value = result.value + 4 * v156;
          if (__OFADD__(result.value, 4 * v156))
            goto LABEL_339;
          goto LABEL_400;
        case 0xA:
        case 0xB:
          v174 = 0;
          v172 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v174);
          if ((v176 & 1) != 0)
            goto LABEL_332;
          v70 = 0;
          v71 = v175._time;
          v72 = (floor(v10) + 978307200.0) * 1000.0;
          LODWORD(v175._time) = 0;
          break;
        default:
          goto LABEL_332;
      }
      do
      {
        v73 = ucal_get();
        if (*(_BYTE *)(v4 + 64) == 1)
          Attribute = (int)ucal_getAttribute();
        else
          Attribute = *(_QWORD *)(v4 + 56);
        if (Attribute == v73)
        {
          if (*(_BYTE *)(v4 + 80) == 1)
            ucal_getAttribute();
          v166 = floor((v10 - v71) / 86400.0 / 7.0);
          if ((~*(_QWORD *)&v166 & 0x7FF0000000000000) == 0)
          {
LABEL_448:
            __break(1u);
            goto LABEL_449;
          }
          if (v166 <= -9.22337204e18)
          {
LABEL_449:
            __break(1u);
LABEL_450:
            __break(1u);
LABEL_451:
            __break(1u);
LABEL_452:
            __break(1u);
LABEL_453:
            __break(1u);
LABEL_454:
            __break(1u);
LABEL_455:
            __break(1u);
LABEL_456:
            __break(1u);
LABEL_457:
            __break(1u);
LABEL_458:
            __break(1u);
LABEL_459:
            __break(1u);
LABEL_460:
            __break(1u);
LABEL_461:
            __break(1u);
LABEL_462:
            __break(1u);
LABEL_463:
            __break(1u);
LABEL_464:
            __break(1u);
LABEL_465:
            __break(1u);
LABEL_466:
            __break(1u);
LABEL_467:
            __break(1u);
LABEL_468:
            __break(1u);
LABEL_469:
            __break(1u);
LABEL_470:
            __break(1u);
LABEL_471:
            __break(1u);
LABEL_472:
            __break(1u);
LABEL_473:
            __break(1u);
LABEL_474:
            __break(1u);
LABEL_475:
            __break(1u);
LABEL_476:
            __break(1u);
LABEL_477:
            __break(1u);
LABEL_478:
            __break(1u);
LABEL_479:
            __break(1u);
LABEL_480:
            __break(1u);
LABEL_481:
            __break(1u);
LABEL_482:
            __break(1u);
LABEL_483:
            __break(1u);
LABEL_484:
            __break(1u);
LABEL_485:
            __break(1u);
LABEL_486:
            __break(1u);
LABEL_487:
            __break(1u);
LABEL_488:
            __break(1u);
LABEL_489:
            __break(1u);
LABEL_490:
            __break(1u);
LABEL_491:
            __break(1u);
LABEL_492:
            __break(1u);
LABEL_493:
            __break(1u);
LABEL_494:
            __break(1u);
LABEL_495:
            __break(1u);
LABEL_496:
            __break(1u);
LABEL_497:
            __break(1u);
LABEL_498:
            __break(1u);
LABEL_499:
            __break(1u);
LABEL_500:
            __break(1u);
LABEL_501:
            __break(1u);
LABEL_502:
            __break(1u);
LABEL_503:
            __break(1u);
            goto LABEL_504;
          }
          if (v166 >= 9.22337204e18)
            goto LABEL_450;
          if ((uint64_t)v166 <= 10)
            v167 = 0;
          else
            v167 = (uint64_t)v166 - 109;
          while (1)
          {
            value = v167 + 1;
            if (__OFADD__(v167, 1))
              break;
            MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32));
            ucal_setMillis();
            _CalendarICU._locked_add(_:amount:wrap:status:)(3, ++v167, 0);
            if (v168 > v72)
              goto LABEL_400;
          }
LABEL_403:
          __break(1u);
LABEL_404:
          __break(1u);
          goto LABEL_405;
        }
        _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1, 0);
        v54 = __OFADD__(v70++, 1);
      }
      while (!v54);
      __break(1u);
LABEL_148:
      LODWORD(v175._time) = 0;
      MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32), *(__n128 *)&a3._time);
      ucal_setMillis();
LABEL_341:
      LOBYTE(v8) = 0;
      value = (int)ucal_get();
LABEL_401:
      result.value = value;
      result.is_nil = v8;
      return result;
    case 1:
      value = 0;
      switch(*(_BYTE *)of)
      {
        case 2:
          goto LABEL_31;
        case 3:
        case 0x11:
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          goto LABEL_341;
        case 4:
          LODWORD(v172) = 0;
          v174 = 3;
          v173 = 1;
          v175._time = v10;
          v205 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v205.value;
          if (v205.is_nil)
            goto LABEL_401;
          v120 = v205.value - 1;
          if (__OFSUB__(v205.value, 1))
            goto LABEL_495;
          v121 = 24 * v120;
          if ((unsigned __int128)(v120 * (__int128)24) >> 64 != (24 * v120) >> 63)
            goto LABEL_496;
          v122 = ucal_get();
          v123 = v121 + v122;
          if (__OFADD__(v121, v122))
            goto LABEL_497;
          value = v123 + 1;
          if (!__OFADD__(v123, 1))
            goto LABEL_400;
          __break(1u);
LABEL_266:
          LODWORD(v172) = 0;
          v174 = 4;
          v173 = 1;
          v175._time = v10;
          v206 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v206.value;
          if (v206.is_nil)
            goto LABEL_401;
          v124 = v206.value - 1;
          if (__OFSUB__(v206.value, 1))
            goto LABEL_498;
          v125 = 60 * v124;
          if ((unsigned __int128)(v124 * (__int128)60) >> 64 != (60 * v124) >> 63)
            goto LABEL_499;
          v126 = ucal_get();
          v127 = v125 + v126;
          if (__OFADD__(v125, v126))
            goto LABEL_500;
          value = v127 + 1;
          if (!__OFADD__(v127, 1))
            goto LABEL_400;
          __break(1u);
LABEL_273:
          LODWORD(v172) = 0;
          v174 = 5;
          v173 = 1;
          v175._time = v10;
          v207 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v207.value;
          if (v207.is_nil)
            goto LABEL_401;
          v128 = v207.value - 1;
          if (__OFSUB__(v207.value, 1))
            goto LABEL_501;
          v129 = 60 * v128;
          if ((unsigned __int128)(v128 * (__int128)60) >> 64 != (60 * v128) >> 63)
            goto LABEL_502;
          v130 = ucal_get();
          v131 = v129 + v130;
          if (__OFADD__(v129, v130))
            goto LABEL_503;
          value = v131 + 1;
          if (!__OFADD__(v131, 1))
            goto LABEL_400;
          __break(1u);
LABEL_280:
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          v132 = ucal_get();
          if (*(_BYTE *)(v4 + 24) == 6)
          {
            if (v132 > 0xC)
            {
LABEL_504:
              __break(1u);
LABEL_505:
              __break(1u);
LABEL_506:
              __break(1u);
LABEL_507:
              __break(1u);
              goto LABEL_508;
            }
            LOBYTE(v8) = 0;
            v133 = &outlined read-only object #0 of _CalendarICU._locked_ordinality(of:in:for:);
          }
          else
          {
            if (v132 > 0xC)
            {
LABEL_508:
              __break(1u);
LABEL_509:
              __break(1u);
LABEL_510:
              __break(1u);
LABEL_511:
              __break(1u);
LABEL_512:
              __break(1u);
LABEL_513:
              __break(1u);
LABEL_514:
              __break(1u);
LABEL_515:
              __break(1u);
            }
            LOBYTE(v8) = 0;
            v133 = &outlined read-only object #1 of _CalendarICU._locked_ordinality(of:in:for:);
          }
          value = v133[v132 + 4];
          goto LABEL_401;
        case 5:
          goto LABEL_266;
        case 6:
          goto LABEL_273;
        case 7:
        case 8:
          goto LABEL_134;
        case 9:
          goto LABEL_280;
        case 0xB:
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          v134 = ucal_get();
          ucal_set();
          v135 = ucal_get();
          if (*(_BYTE *)(v4 + 64) == 1)
            v136 = (int)ucal_getAttribute();
          else
            v136 = *(_QWORD *)(v4 + 56);
          if (*(_BYTE *)(v4 + 80) == 1)
            v159 = (int)ucal_getAttribute();
          else
            v159 = *(_QWORD *)(v4 + 72);
          v160 = v134 + 7;
          v54 = __OFSUB__(v160, v159);
          v161 = v160 - v159;
          if (v54)
            goto LABEL_440;
          v54 = __OFADD__(v159, v135);
          v162 = v159 + v135;
          if (v54)
            goto LABEL_441;
          v54 = __OFSUB__(v162, v136);
          v163 = v162 - v136;
          if (v54)
            goto LABEL_442;
          if (__OFADD__(v163, 6))
            goto LABEL_443;
          v164 = (v163 + 6) % 7;
          v54 = __OFADD__(v161, v164);
          v165 = v161 + v164;
          if (v54)
            goto LABEL_444;
          value = v165 / 7;
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32));
          ucal_setMillis();
          LOBYTE(v8) = 0;
          goto LABEL_401;
        case 0xD:
          LOBYTE(v172) = 6;
          v174 = 1;
          v175._time = v10;
          v208 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
          value = v208.value;
          if (v208.is_nil)
            goto LABEL_401;
          a3._time = (v10 - floor(v10) + (double)v208.value + -1.0) * 1000000000.0;
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_505;
          if (a3._time <= -9.22337204e18)
            goto LABEL_506;
          if (a3._time >= 9.22337204e18)
            goto LABEL_507;
          value = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
            goto LABEL_400;
LABEL_339:
          __break(1u);
LABEL_340:
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          goto LABEL_341;
        default:
          goto LABEL_401;
      }
    case 2:
      value = 0;
      switch(*(_BYTE *)of)
      {
        case 3:
          goto LABEL_148;
        case 4:
          LODWORD(v172) = 0;
          v174 = 3;
          v173 = 2;
          v175._time = v10;
          v192 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v192.value;
          if (v192.is_nil)
            goto LABEL_401;
          v75 = v192.value - 1;
          if (__OFSUB__(v192.value, 1))
            goto LABEL_451;
          v76 = 24 * v75;
          if ((unsigned __int128)(v75 * (__int128)24) >> 64 != (24 * v75) >> 63)
            goto LABEL_452;
          v77 = ucal_get();
          v78 = v76 + v77;
          if (__OFADD__(v76, v77))
            goto LABEL_453;
          value = v78 + 1;
          if (!__OFADD__(v78, 1))
            goto LABEL_400;
          __break(1u);
LABEL_156:
          LODWORD(v172) = 0;
          v174 = 4;
          v173 = 2;
          v175._time = v10;
          v193 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v193.value;
          if (v193.is_nil)
            goto LABEL_401;
          v79 = v193.value - 1;
          if (__OFSUB__(v193.value, 1))
            goto LABEL_454;
          v80 = 60 * v79;
          if ((unsigned __int128)(v79 * (__int128)60) >> 64 != (60 * v79) >> 63)
            goto LABEL_455;
          v81 = ucal_get();
          v82 = v80 + v81;
          if (__OFADD__(v80, v81))
            goto LABEL_456;
          value = v82 + 1;
          if (!__OFADD__(v82, 1))
            goto LABEL_400;
          __break(1u);
LABEL_163:
          LODWORD(v172) = 0;
          v174 = 5;
          v173 = 2;
          v175._time = v10;
          v194 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v194.value;
          if (v194.is_nil)
            goto LABEL_401;
          v83 = v194.value - 1;
          if (__OFSUB__(v194.value, 1))
            goto LABEL_457;
          v84 = 60 * v83;
          if ((unsigned __int128)(v83 * (__int128)60) >> 64 != (60 * v83) >> 63)
            goto LABEL_458;
          v85 = ucal_get();
          v86 = v84 + v85;
          if (__OFADD__(v84, v85))
            goto LABEL_459;
          value = v86 + 1;
          if (!__OFADD__(v86, 1))
            goto LABEL_400;
          __break(1u);
LABEL_170:
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          break;
        case 5:
          goto LABEL_156;
        case 6:
          goto LABEL_163;
        case 7:
        case 8:
          LOBYTE(v172) = 3;
          v174 = 2;
          v175._time = v10;
          v178 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
          value = v178.value;
          if (v178.is_nil)
            goto LABEL_401;
          if (__OFADD__(v178.value, 6))
            goto LABEL_439;
          LOBYTE(v8) = 0;
          value = (v178.value + 6) / 7;
          goto LABEL_401;
        case 0xA:
          goto LABEL_170;
        case 0xD:
          LOBYTE(v172) = 6;
          v174 = 2;
          v175._time = v10;
          v195 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
          value = v195.value;
          if (v195.is_nil)
            goto LABEL_401;
          v87 = (v10 - floor(v10) + (double)v195.value + -1.0) * 1000000000.0;
          if ((~*(_QWORD *)&v87 & 0x7FF0000000000000) == 0)
            goto LABEL_460;
          if (v87 <= -9.22337204e18)
            goto LABEL_461;
          if (v87 >= 9.22337204e18)
            goto LABEL_462;
          value = (uint64_t)v87 + 1;
          if (!__OFADD__((uint64_t)v87, 1))
            goto LABEL_400;
          __break(1u);
          goto LABEL_178;
        default:
          goto LABEL_401;
      }
      goto LABEL_341;
    case 3:
    case 7:
    case 0x11:
      value = 0;
      switch(*(_BYTE *)of)
      {
        case 4:
          goto LABEL_31;
        case 5:
          LODWORD(v172) = 0;
          v174 = 4;
          v173 = 3;
          v175._time = v10;
          v181 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v181.value;
          if (v181.is_nil)
            goto LABEL_401;
          v33 = v181.value - 1;
          if (__OFSUB__(v181.value, 1))
            goto LABEL_409;
          v34 = 60 * v33;
          if ((unsigned __int128)(v33 * (__int128)60) >> 64 != (60 * v33) >> 63)
            goto LABEL_412;
          v35 = ucal_get();
          v36 = v34 + v35;
          if (__OFADD__(v34, v35))
            goto LABEL_413;
          value = v36 + 1;
          if (!__OFADD__(v36, 1))
            goto LABEL_400;
          __break(1u);
LABEL_56:
          LODWORD(v172) = 0;
          v174 = 5;
          v173 = 3;
          v175._time = v10;
          v182 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v182.value;
          if (v182.is_nil)
            goto LABEL_401;
          v37 = v182.value - 1;
          if (__OFSUB__(v182.value, 1))
            goto LABEL_410;
          v38 = 60 * v37;
          if ((unsigned __int128)(v37 * (__int128)60) >> 64 != (60 * v37) >> 63)
            goto LABEL_414;
          v39 = ucal_get();
          v40 = v38 + v39;
          if (__OFADD__(v38, v39))
            goto LABEL_415;
          value = v40 + 1;
          if (!__OFADD__(v40, 1))
            goto LABEL_400;
          __break(1u);
LABEL_63:
          LOBYTE(v172) = 6;
          v174 = 3;
          v175._time = v10;
          v183 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
          value = v183.value;
          if (v183.is_nil)
            goto LABEL_401;
          a3._time = (v10 - floor(v10) + (double)v183.value + -1.0) * 1000000000.0;
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_411;
          if (a3._time <= -9.22337204e18)
            goto LABEL_416;
          if (a3._time >= 9.22337204e18)
            goto LABEL_417;
          value = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
            goto LABEL_400;
          __break(1u);
          break;
        case 6:
          goto LABEL_56;
        case 0xD:
          goto LABEL_63;
        default:
          goto LABEL_401;
      }
      goto LABEL_70;
    case 4:
      switch(v9)
      {
        case 13:
          LOBYTE(v172) = 6;
          v174 = 4;
          v175._time = v10;
          v189 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
          value = v189.value;
          if (v189.is_nil)
            goto LABEL_401;
          a3._time = (v10 - floor(v10) + (double)v189.value + -1.0) * 1000000000.0;
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_433;
          if (a3._time <= -9.22337204e18)
          {
LABEL_434:
            __break(1u);
            goto LABEL_435;
          }
          if (a3._time >= 9.22337204e18)
          {
LABEL_435:
            __break(1u);
LABEL_436:
            __break(1u);
            goto LABEL_437;
          }
          value = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
          {
LABEL_400:
            LOBYTE(v8) = 0;
            goto LABEL_401;
          }
          __break(1u);
          break;
        case 6:
          break;
        case 5:
LABEL_31:
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          LOBYTE(v8) = 0;
          value = (int)ucal_get() + 1;
          goto LABEL_401;
        default:
          goto LABEL_332;
      }
      LODWORD(v172) = 0;
      v174 = 5;
      v173 = 4;
      v175._time = v10;
      v190 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
      value = v190.value;
      if (v190.is_nil)
        goto LABEL_401;
      v56 = v190.value - 1;
      if (__OFSUB__(v190.value, 1))
        goto LABEL_436;
      v57 = 60 * v56;
      if ((unsigned __int128)(v56 * (__int128)60) >> 64 != (60 * v56) >> 63)
      {
LABEL_437:
        __break(1u);
LABEL_438:
        __break(1u);
LABEL_439:
        __break(1u);
LABEL_440:
        __break(1u);
LABEL_441:
        __break(1u);
LABEL_442:
        __break(1u);
LABEL_443:
        __break(1u);
LABEL_444:
        __break(1u);
LABEL_445:
        __break(1u);
LABEL_446:
        __break(1u);
LABEL_447:
        __break(1u);
        goto LABEL_448;
      }
      v58 = ucal_get();
      v59 = v57 + v58;
      if (__OFADD__(v57, v58))
        goto LABEL_438;
      value = v59 + 1;
      if (!__OFADD__(v59, 1))
        goto LABEL_400;
      __break(1u);
LABEL_125:
      v174 = 9;
      v172 = v10;
      _CalendarICU._locked_start(of:at:)((uint64_t)&v174);
      if ((v176 & 1) != 0)
        goto LABEL_332;
      v60 = v175._time;
      LODWORD(v172) = 0;
      MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32));
      v6 = (floor(v60) + 978307200.0) * 1000.0;
      ucal_setMillis();
      v8 = 0;
      while (1)
      {
        v61 = ucal_get();
        v62 = *(_BYTE *)(v4 + 64) == 1 ? (int)ucal_getAttribute() : *(_QWORD *)(v4 + 56);
        if (v62 == v61)
          break;
        _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1, 0);
        v6 = v63;
        v54 = __OFADD__(v8++, 1);
        if (v54)
        {
          __break(1u);
LABEL_134:
          v174 = 1;
          v172 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v174);
          if ((v176 & 1) == 0)
          {
            v65 = v175._time;
            LODWORD(v172) = 0;
            v174 = 11;
            v173 = 1;
            v175._time = v10;
            v191 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, v64);
            v66 = v191.value;
            if (v191.is_nil)
            {
              value = v191.value;
              goto LABEL_401;
            }
            v67 = ucal_get();
            LODWORD(v172) = 0;
            MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32));
            v68 = (floor(v65) + 978307200.0) * 1000.0;
            ucal_setMillis();
            while (ucal_get() != v67)
            {
              _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1, 0);
              v68 = v69;
            }
            v174 = 11;
            v173 = 1;
            v175._time = v68 / 1000.0 + -978307200.0;
            result = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, v175);
            value = result.value;
            if (result.is_nil)
              goto LABEL_363;
            v158 = v66 - result.value;
            if (!__OFSUB__(v66, result.value))
            {
              value = v158 + 1;
              if (!__OFADD__(v158, 1))
                goto LABEL_400;
              __break(1u);
LABEL_363:
              LOBYTE(v8) = 1;
              goto LABEL_401;
            }
LABEL_529:
            __break(1u);
LABEL_530:
            __break(1u);
LABEL_531:
            __break(1u);
LABEL_532:
            __break(1u);
LABEL_533:
            __break(1u);
            return result;
          }
LABEL_332:
          value = 0;
          goto LABEL_401;
        }
      }
LABEL_256:
      v174 = 11;
      v173 = 1;
      v175._time = v6 / 1000.0 + -978307200.0;
      result = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, v175);
      value = result.value;
      if (result.is_nil)
        goto LABEL_363;
      if (*(_BYTE *)(v4 + 80) == 1)
      {
        result.value = ucal_getAttribute();
        value_low = SLODWORD(result.value);
      }
      else
      {
        value_low = *(_QWORD *)(v4 + 72);
      }
      if (v8 >= value_low && (v54 = __OFSUB__(value, 1), --value, v54))
      {
LABEL_517:
        __break(1u);
      }
      else
      {
        v174 = 11;
        v173 = 1;
        v175._time = v10;
        result = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, v118);
        if (result.is_nil)
          goto LABEL_394;
        v169 = result.value - value;
        if (!__OFSUB__(result.value, value))
        {
          value = v169 + 1;
          if (!__OFADD__(v169, 1))
            goto LABEL_400;
          __break(1u);
LABEL_394:
          LOBYTE(v8) = 1;
          value = result.value;
          goto LABEL_401;
        }
      }
      __break(1u);
LABEL_519:
      __break(1u);
LABEL_520:
      __break(1u);
LABEL_521:
      __break(1u);
LABEL_522:
      __break(1u);
LABEL_523:
      __break(1u);
LABEL_524:
      __break(1u);
LABEL_525:
      __break(1u);
LABEL_526:
      __break(1u);
LABEL_527:
      __break(1u);
LABEL_528:
      __break(1u);
      goto LABEL_529;
    case 5:
      if (v9 != 13)
      {
        if (v9 != 6)
          goto LABEL_332;
        goto LABEL_31;
      }
LABEL_70:
      LOBYTE(v172) = 6;
      v174 = 5;
      v175._time = v10;
      v184 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
      value = v184.value;
      if (v184.is_nil)
        goto LABEL_401;
      a3._time = (v10 - floor(v10) + (double)v184.value + -1.0) * 1000000000.0;
      if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
        goto LABEL_418;
      if (a3._time <= -9.22337204e18)
      {
LABEL_419:
        __break(1u);
        goto LABEL_420;
      }
      if (a3._time >= 9.22337204e18)
      {
LABEL_420:
        __break(1u);
LABEL_421:
        __break(1u);
        goto LABEL_422;
      }
      value = (uint64_t)a3._time + 1;
      if (__OFADD__((uint64_t)a3._time, 1))
      {
        __break(1u);
LABEL_77:
        LODWORD(v172) = 0;
        v174 = 3;
        v173 = 11;
        v175._time = v10;
        v185 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
        value = v185.value;
        if (v185.is_nil)
          goto LABEL_401;
        v41 = v185.value - 1;
        if (__OFSUB__(v185.value, 1))
          goto LABEL_421;
        v42 = 24 * v41;
        if ((unsigned __int128)(v41 * (__int128)24) >> 64 != (24 * v41) >> 63)
        {
LABEL_422:
          __break(1u);
          goto LABEL_423;
        }
        v43 = ucal_get();
        v44 = v42 + v43;
        if (__OFADD__(v42, v43))
        {
LABEL_423:
          __break(1u);
LABEL_424:
          __break(1u);
          goto LABEL_425;
        }
        value = v44 + 1;
        if (__OFADD__(v44, 1))
        {
          __break(1u);
LABEL_84:
          LODWORD(v172) = 0;
          v174 = 4;
          v173 = 11;
          v175._time = v10;
          v186 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v186.value;
          if (v186.is_nil)
            goto LABEL_401;
          v45 = v186.value - 1;
          if (__OFSUB__(v186.value, 1))
            goto LABEL_424;
          v46 = 60 * v45;
          if ((unsigned __int128)(v45 * (__int128)60) >> 64 != (60 * v45) >> 63)
          {
LABEL_425:
            __break(1u);
            goto LABEL_426;
          }
          v47 = ucal_get();
          v48 = v46 + v47;
          if (__OFADD__(v46, v47))
          {
LABEL_426:
            __break(1u);
LABEL_427:
            __break(1u);
            goto LABEL_428;
          }
          value = v48 + 1;
          if (__OFADD__(v48, 1))
          {
            __break(1u);
LABEL_91:
            LODWORD(v172) = 0;
            v174 = 5;
            v173 = 11;
            v175._time = v10;
            v187 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
            value = v187.value;
            if (v187.is_nil)
              goto LABEL_401;
            v49 = v187.value - 1;
            if (__OFSUB__(v187.value, 1))
              goto LABEL_427;
            v50 = 60 * v49;
            if ((unsigned __int128)(v49 * (__int128)60) >> 64 != (60 * v49) >> 63)
            {
LABEL_428:
              __break(1u);
              goto LABEL_429;
            }
            v51 = ucal_get();
            v52 = v50 + v51;
            if (__OFADD__(v50, v51))
            {
LABEL_429:
              __break(1u);
LABEL_430:
              __break(1u);
              goto LABEL_431;
            }
            value = v52 + 1;
            if (__OFADD__(v52, 1))
            {
              __break(1u);
LABEL_98:
              LOBYTE(v172) = 6;
              v174 = 11;
              v175._time = v10;
              v188 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
              value = v188.value;
              if (v188.is_nil)
                goto LABEL_401;
              v53 = (v10 - floor(v10) + (double)v188.value + -1.0) * 1000000000.0;
              if ((~*(_QWORD *)&v53 & 0x7FF0000000000000) == 0)
                goto LABEL_430;
              if (v53 <= -9.22337204e18)
              {
LABEL_431:
                __break(1u);
                goto LABEL_432;
              }
              if (v53 >= 9.22337204e18)
              {
LABEL_432:
                __break(1u);
LABEL_433:
                __break(1u);
                goto LABEL_434;
              }
              value = (uint64_t)v53 + 1;
              if (__OFADD__((uint64_t)v53, 1))
              {
                __break(1u);
LABEL_105:
                v11 = *(_QWORD *)(v4 + 56);
LABEL_106:
                v54 = __OFSUB__(value, v11);
                v55 = value - v11;
                if (!v54)
                {
                  if (v55 <= 0)
                    value = v55 + 7;
                  else
                    value = v55;
                  LOBYTE(v8) = 0;
                  goto LABEL_401;
                }
LABEL_405:
                __break(1u);
LABEL_406:
                __break(1u);
LABEL_407:
                __break(1u);
LABEL_408:
                __break(1u);
LABEL_409:
                __break(1u);
LABEL_410:
                __break(1u);
LABEL_411:
                __break(1u);
LABEL_412:
                __break(1u);
LABEL_413:
                __break(1u);
LABEL_414:
                __break(1u);
LABEL_415:
                __break(1u);
LABEL_416:
                __break(1u);
LABEL_417:
                __break(1u);
LABEL_418:
                __break(1u);
                goto LABEL_419;
              }
            }
          }
        }
      }
      goto LABEL_400;
    case 6:
      if (v9 != 13)
        goto LABEL_332;
      v19 = (v10 - floor(v10)) * 1000000000.0 + 1.0;
      if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
        goto LABEL_406;
      if (v19 <= -9.22337204e18)
        goto LABEL_407;
      if (v19 >= 9.22337204e18)
        goto LABEL_408;
      LOBYTE(v8) = 0;
      value = (uint64_t)v19;
      goto LABEL_401;
    case 9:
      value = 0;
      switch(*(_BYTE *)of)
      {
        case 2:
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          v102 = (int)ucal_get();
          if (*(_BYTE *)(v4 + 24) != 6)
            goto LABEL_354;
          if (v102 > 0xC)
            goto LABEL_478;
          LOBYTE(v8) = 0;
          v103 = &outlined read-only object #2 of _CalendarICU._locked_ordinality(of:in:for:);
          goto LABEL_356;
        case 3:
          v174 = 9;
          v172 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v174);
          v6 = v175._time;
          v104 = v176;
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32));
          ucal_setMillis();
          if ((v104 & 1) != 0)
            goto LABEL_332;
          a3._time = floor((v10 - v6) / 86400.0);
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_479;
          if (a3._time <= -9.22337204e18)
            goto LABEL_480;
          if (a3._time >= 9.22337204e18)
            goto LABEL_481;
          value = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
            goto LABEL_400;
          __break(1u);
LABEL_228:
          LODWORD(v172) = 0;
          v174 = 3;
          v173 = 9;
          v175._time = v10;
          v200 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v200.value;
          if (v200.is_nil)
            goto LABEL_401;
          v105 = v200.value - 1;
          if (__OFSUB__(v200.value, 1))
            goto LABEL_482;
          v106 = 24 * v105;
          if ((unsigned __int128)(v105 * (__int128)24) >> 64 != (24 * v105) >> 63)
            goto LABEL_483;
          v107 = ucal_get();
          v108 = v106 + v107;
          if (__OFADD__(v106, v107))
            goto LABEL_484;
          value = v108 + 1;
          if (!__OFADD__(v108, 1))
            goto LABEL_400;
          __break(1u);
LABEL_235:
          LODWORD(v172) = 0;
          v174 = 4;
          v173 = 9;
          v175._time = v10;
          v201 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v201.value;
          if (v201.is_nil)
            goto LABEL_401;
          v109 = v201.value - 1;
          if (__OFSUB__(v201.value, 1))
            goto LABEL_485;
          v110 = 60 * v109;
          if ((unsigned __int128)(v109 * (__int128)60) >> 64 != (60 * v109) >> 63)
            goto LABEL_486;
          v111 = ucal_get();
          v112 = v110 + v111;
          if (__OFADD__(v110, v111))
            goto LABEL_487;
          value = v112 + 1;
          if (!__OFADD__(v112, 1))
            goto LABEL_400;
          __break(1u);
LABEL_242:
          LODWORD(v172) = 0;
          v174 = 5;
          v173 = 9;
          v175._time = v10;
          v202 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v202.value;
          if (v202.is_nil)
            goto LABEL_401;
          v113 = v202.value - 1;
          if (__OFSUB__(v202.value, 1))
            goto LABEL_488;
          v114 = 60 * v113;
          if ((unsigned __int128)(v113 * (__int128)60) >> 64 != (60 * v113) >> 63)
            goto LABEL_489;
          v115 = ucal_get();
          v116 = v114 + v115;
          if (__OFADD__(v114, v115))
            goto LABEL_490;
          value = v116 + 1;
          if (!__OFADD__(v116, 1))
            goto LABEL_400;
          __break(1u);
LABEL_249:
          LOBYTE(v172) = 6;
          v174 = 9;
          v175._time = v10;
          v203 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
          value = v203.value;
          if (v203.is_nil)
            goto LABEL_401;
          v117 = (v10 - floor(v10) + (double)v203.value + -1.0) * 1000000000.0;
          if ((~*(_QWORD *)&v117 & 0x7FF0000000000000) == 0)
            goto LABEL_491;
          if (v117 <= -9.22337204e18)
            goto LABEL_492;
          if (v117 >= 9.22337204e18)
            goto LABEL_493;
          value = (uint64_t)v117 + 1;
          if (!__OFADD__((uint64_t)v117, 1))
            goto LABEL_400;
          __break(1u);
          break;
        case 4:
          goto LABEL_228;
        case 5:
          goto LABEL_235;
        case 6:
          goto LABEL_242;
        case 7:
        case 8:
          v174 = 9;
          v172 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v174);
          if ((v176 & 1) != 0)
            goto LABEL_332;
          v21 = v175._time;
          LODWORD(v172) = 0;
          v174 = 11;
          v173 = 1;
          v175._time = v10;
          v179 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, v20);
          v5 = v179.value;
          is_nil = v179.is_nil;
          v23 = ucal_get();
          if (is_nil)
            goto LABEL_217;
          v24 = v23;
          LODWORD(v172) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32));
          v25 = (floor(v21) + 978307200.0) * 1000.0;
          ucal_setMillis();
          while (ucal_get() != v24)
          {
            _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1, 0);
            v25 = v26;
          }
          goto LABEL_349;
        case 0xA:
        case 0xB:
          goto LABEL_125;
        case 0xD:
          goto LABEL_249;
        default:
          goto LABEL_401;
      }
      goto LABEL_256;
    case 0xA:
    case 0xB:
      value = 0;
      switch(*(_BYTE *)of)
      {
        case 3:
        case 7:
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          value = (int)ucal_get() + 1;
          if (*(_BYTE *)(v4 + 64) != 1)
            goto LABEL_105;
          v11 = (int)ucal_getAttribute();
          break;
        case 4:
          goto LABEL_77;
        case 5:
          goto LABEL_84;
        case 6:
          goto LABEL_91;
        case 0xD:
          goto LABEL_98;
        default:
          goto LABEL_401;
      }
      goto LABEL_106;
    case 0xC:
      value = 0;
      switch(*(_BYTE *)of)
      {
        case 3:
LABEL_178:
          v174 = 12;
          v172 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v174);
          if ((v176 & 1) != 0)
            goto LABEL_332;
          a3._time = floor((v10 - v175._time) / 86400.0);
          if ((~*(_QWORD *)&a3._time & 0x7FF0000000000000) == 0)
            goto LABEL_463;
          if (a3._time <= -9.22337204e18)
            goto LABEL_464;
          if (a3._time >= 9.22337204e18)
            goto LABEL_465;
          value = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1))
            goto LABEL_400;
          __break(1u);
LABEL_185:
          LODWORD(v172) = 0;
          v174 = 3;
          v173 = 12;
          v175._time = v10;
          v196 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v196.value;
          if (v196.is_nil)
            goto LABEL_401;
          v88 = v196.value - 1;
          if (__OFSUB__(v196.value, 1))
            goto LABEL_466;
          v89 = 24 * v88;
          if ((unsigned __int128)(v88 * (__int128)24) >> 64 != (24 * v88) >> 63)
            goto LABEL_467;
          v90 = ucal_get();
          v91 = v89 + v90;
          if (__OFADD__(v89, v90))
            goto LABEL_468;
          value = v91 + 1;
          if (!__OFADD__(v91, 1))
            goto LABEL_400;
          __break(1u);
LABEL_192:
          LODWORD(v172) = 0;
          v174 = 4;
          v173 = 12;
          v175._time = v10;
          v197 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v197.value;
          if (v197.is_nil)
            goto LABEL_401;
          v92 = v197.value - 1;
          if (__OFSUB__(v197.value, 1))
            goto LABEL_469;
          v93 = 60 * v92;
          if ((unsigned __int128)(v92 * (__int128)60) >> 64 != (60 * v92) >> 63)
            goto LABEL_470;
          v94 = ucal_get();
          v95 = v93 + v94;
          if (__OFADD__(v93, v94))
            goto LABEL_471;
          value = v95 + 1;
          if (!__OFADD__(v95, 1))
            goto LABEL_400;
          __break(1u);
LABEL_199:
          LODWORD(v172) = 0;
          v174 = 5;
          v173 = 12;
          v175._time = v10;
          v198 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, a3);
          value = v198.value;
          if (v198.is_nil)
            goto LABEL_401;
          v96 = v198.value - 1;
          if (__OFSUB__(v198.value, 1))
            goto LABEL_472;
          v97 = 60 * v96;
          if ((unsigned __int128)(v96 * (__int128)60) >> 64 != (60 * v96) >> 63)
            goto LABEL_473;
          v98 = ucal_get();
          v99 = v97 + v98;
          if (__OFADD__(v97, v98))
            goto LABEL_474;
          value = v99 + 1;
          if (!__OFADD__(v99, 1))
            goto LABEL_400;
          __break(1u);
LABEL_206:
          LODWORD(v175._time) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          v100 = ucal_get();
          if (SLODWORD(v175._time) <= 0)
            value = v100;
          else
            value = 0;
          LOBYTE(v8) = SLODWORD(v175._time) > 0;
          goto LABEL_401;
        case 4:
          goto LABEL_185;
        case 5:
          goto LABEL_192;
        case 6:
          goto LABEL_199;
        case 7:
        case 8:
          v174 = 12;
          v172 = v10;
          _CalendarICU._locked_start(of:at:)((uint64_t)&v174);
          if ((v176 & 1) != 0)
            goto LABEL_332;
          v28 = v175._time;
          LODWORD(v172) = 0;
          v174 = 11;
          v173 = 12;
          v175._time = v10;
          v180 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, v27);
          v5 = v180.value;
          v29 = v180.is_nil;
          v30 = ucal_get();
          if (v29)
            goto LABEL_217;
          v31 = v30;
          LODWORD(v172) = 0;
          MEMORY[0x186DAA160](*(_QWORD *)(v4 + 32));
          v25 = (floor(v28) + 978307200.0) * 1000.0;
          ucal_setMillis();
          while (ucal_get() != v31)
          {
            _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1, 0);
            v25 = v32;
          }
          v174 = 11;
          v173 = 12;
          v175._time = v25 / 1000.0 + -978307200.0;
          v210 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, v175);
          value = v210.value;
          if (v210.is_nil)
            goto LABEL_363;
          v157 = v5 - v210.value;
          if (__OFSUB__(v5, v210.value))
            goto LABEL_515;
          value = v157 + 1;
          if (!__OFADD__(v157, 1))
            goto LABEL_400;
          __break(1u);
LABEL_349:
          v174 = 11;
          v173 = 1;
          v175._time = v25 / 1000.0 + -978307200.0;
          result = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v174, (Foundation::Calendar::Component)&v173, v175);
          value = result.value;
          if (result.is_nil)
            goto LABEL_363;
          v102 = v5 - result.value;
          if (!__OFSUB__(v5, result.value))
          {
            value = v102 + 1;
            if (__OFADD__(v102, 1))
            {
              __break(1u);
LABEL_354:
              if (v102 <= 0xC)
              {
                LOBYTE(v8) = 0;
                v103 = &outlined read-only object #3 of _CalendarICU._locked_ordinality(of:in:for:);
LABEL_356:
                value = v103[v102 + 4];
                goto LABEL_401;
              }
              goto LABEL_494;
            }
            goto LABEL_400;
          }
          __break(1u);
          break;
        case 0xB:
          goto LABEL_206;
        case 0xD:
          LOBYTE(v172) = 6;
          v174 = 12;
          v175._time = v10;
          v199 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v172, (Foundation::Calendar::Component)&v174, a3);
          value = v199.value;
          if (v199.is_nil)
            goto LABEL_401;
          v101 = (v10 - floor(v10) + (double)v199.value + -1.0) * 1000000000.0;
          if ((~*(_QWORD *)&v101 & 0x7FF0000000000000) == 0)
            goto LABEL_475;
          if (v101 <= -9.22337204e18)
            goto LABEL_476;
          if (v101 >= 9.22337204e18)
            goto LABEL_477;
          value = (uint64_t)v101 + 1;
          if (!__OFADD__((uint64_t)v101, 1))
            goto LABEL_400;
          __break(1u);
LABEL_217:
          LOBYTE(v8) = 1;
          value = v5;
          goto LABEL_401;
        default:
          goto LABEL_401;
      }
      goto LABEL_517;
    default:
      goto LABEL_401;
  }
}

void protocol witness for Decodable.init(from:) in conformance TimeZone(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  TimeZone.init(from:)(a1, a2);
}

void TimeZone.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  _QWORD v21[2];
  uint64_t v22[2];
  unint64_t v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TimeZone.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v22[0]) = 1;
    if ((KeyedDecodingContainer.decodeIfPresent(_:forKey:)() & 1) != 0)
    {
      if (one-time initialization token for cache != -1)
        swift_once();
      v19 = static TimeZoneCache.cache + 16;
      v20 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
      swift_retain_n();
      os_unfair_lock_lock(v20);
      closure #1 in TimeZoneCache.autoupdatingCurrent()(v19, v22);
      os_unfair_lock_unlock(v20);
      swift_release_n();
      v12 = v22[0];
      v13 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating, (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
    }
    else
    {
      LOBYTE(v22[0]) = 0;
      v9 = KeyedDecodingContainer.decode(_:forKey:)();
      v23 = v10;
      if (one-time initialization token for cache != -1)
        swift_once();
      v21[1] = v21;
      v11 = (os_unfair_lock_s *)static TimeZoneCache.cache;
      v21[0] = static TimeZoneCache.cache + 16;
      swift_retain_n();
      os_unfair_lock_lock(v11 + 36);
      closure #1 in TimeZoneCache.fixed(_:)(v9, v23, v22);
      os_unfair_lock_unlock(v11 + 36);
      swift_release_n();
      v12 = v22[0];
      v13 = v22[1];
      swift_bridgeObjectRelease();
      if (!v12)
      {
        v14 = type metadata accessor for DecodingError();
        swift_allocError();
        v23 = v15;
        v17 = a1[3];
        v16 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v17);
        MEMORY[0x186DA5FB4](v17, v16);
        v18 = v23;
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(unint64_t, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v18, *MEMORY[0x1E0DEC458], v14);
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        goto LABEL_11;
      }
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = v13;
  }
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata completion function for ICUNumberFormatter.Signature()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.CollectionContainsCollection()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.NilCoalesce()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit, &type metadata for Duration.UnitsFormatStyle.Unit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit, &type metadata for Duration.UnitsFormatStyle.Unit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit, &type metadata for Duration.UnitsFormatStyle.Unit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexSet.RangeView and conformance IndexSet.RangeView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.RangeView, &type metadata for IndexSet.RangeView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.RangeView, &type metadata for IndexSet.RangeView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IndexSet.RangeView, &type metadata for IndexSet.RangeView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Region, &type metadata for Locale.Region);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Region, &type metadata for Locale.Region);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Region, &type metadata for Locale.Region);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Region, &type metadata for Locale.Region);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.Region, &type metadata for Locale.Region);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator;
  if (!lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSFastEnumerationIterator, &type metadata for NSFastEnumerationIterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.CodingKeys, &unk_1E0F1C7E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.CodingKeys, &unk_1E0F1C7E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.CodingKeys, &unk_1E0F1C7E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedString.CodingKeys, &unk_1E0F1C7E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DateComponents and conformance DateComponents()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateComponents, &type metadata for DateComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateComponents, &type metadata for DateComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateComponents, &type metadata for DateComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateComponents, &type metadata for DateComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateComponents, &type metadata for DateComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DateInterval and conformance DateInterval()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateInterval, &type metadata for DateInterval);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateInterval, &type metadata for DateInterval);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateInterval, &type metadata for DateInterval);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateInterval, &type metadata for DateInterval);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for DateInterval, &type metadata for DateInterval);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CharacterSet, &type metadata for CharacterSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CharacterSet, &type metadata for CharacterSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CharacterSet, &type metadata for CharacterSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CharacterSet, &type metadata for CharacterSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CharacterSet, &type metadata for CharacterSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CharacterSet, &type metadata for CharacterSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }
  return result;
}

ValueMetadata *type metadata accessor for Locale.IdentifierType()
{
  return &type metadata for Locale.IdentifierType;
}

uint64_t initEXGetExtensionContextVendorClass()
{
  void *v0;
  uint64_t (*v1)(void);

  v0 = (void *)ExtensionFoundationLibrary_frameworkLibrary;
  if ((ExtensionFoundationLibrary_frameworkLibrary
     || (v0 = dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2),
         (ExtensionFoundationLibrary_frameworkLibrary = (uint64_t)v0) != 0))
    && (v1 = (uint64_t (*)(void))dlsym(v0, "EXGetExtensionContextVendorClass"),
        (softLinkEXGetExtensionContextVendorClass = v1) != 0))
  {
    return v1();
  }
  else
  {
    return 0;
  }
}

uint64_t initEXGetExtensionContextInternalClass()
{
  void *v0;
  uint64_t (*v1)(void);

  v0 = (void *)ExtensionFoundationLibrary_frameworkLibrary;
  if ((ExtensionFoundationLibrary_frameworkLibrary
     || (v0 = dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2),
         (ExtensionFoundationLibrary_frameworkLibrary = (uint64_t)v0) != 0))
    && (v1 = (uint64_t (*)(void))dlsym(v0, "EXGetExtensionContextInternalClass"),
        (softLinkEXGetExtensionContextInternalClass = v1) != 0))
  {
    return v1();
  }
  else
  {
    return 0;
  }
}

void ___initializeLibrarianFunctions_block_invoke()
{
  void *v0;

  if (qword_1ECD09788 != -1)
    dispatch_once(&qword_1ECD09788, &__block_literal_global_10);
  v0 = (void *)qword_1ECD09780;
  if (qword_1ECD09780)
  {
    off_1ECD097C8 = dlsym((void *)qword_1ECD09780, "LBEvictItemAtURL");
    off_1ECD097B0 = dlsym(v0, "LBStartSyncForItem");
    off_1ECD097B8 = dlsym(v0, "LBSetSyncEnabledForItem");
    off_1ECD097D8 = dlsym(v0, "LBGetURLForPublishedItem");
    off_1ECD097D0 = dlsym(v0, "LBGetMobileContainerForID");
    off_1ECD097F8 = dlsym(v0, "LBCopyUbiquityAccountToken");
    off_1ECD09830 = dlsym(v0, "LBRefreshUbiquityAccountToken");
    off_1ECD097E8 = (uint64_t (*)(void))dlsym(v0, "LBCurrentProcessHasUbiquityContainer");
  }
}

uint64_t type metadata completion function for PredicateExpressions.Filter()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.OptionalFlatMap()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.Arithmetic()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

id NSDictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t isClassOrObjCExistentialType;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD v25[2];
  _QWORD *v26;
  _QWORD v27[4];
  _QWORD v28[3];
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    v33 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v3 = a1 + 32;
    v4 = (unint64_t)v28;
    v5 = a1 + 32;
    v26 = v2;
    v6 = v2;
    do
    {
      outlined init with copy of (Hashable & Sendable)?(v5, (uint64_t)v30, &demangling cache variable for type metadata for (Any, Any));
      outlined init with copy of Any((uint64_t)v30, (uint64_t)v27);
      outlined init with copy of Any((uint64_t)&v32, (uint64_t)v28);
      v7 = v29;
      v2 = __swift_project_boxed_opaque_existential_1(v28, v29);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      if ((isClassOrObjCExistentialType & 1) != 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) != 8)
        {
          __break(1u);
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
        swift_unknownObjectRetain();
      }
      else
      {
        v25[1] = v25;
        v9 = MEMORY[0x1E0C80A78](isClassOrObjCExistentialType);
        (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v11 + 16))((char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v7, v9);
        _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
      outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for (Any, Any));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v5 += 64;
      v6 = (_QWORD *)((char *)v6 - 1);
    }
    while (v6);
    v4 = v33;
    v27[0] = MEMORY[0x1E0DEE9D8];
    v2 = v26;
    specialized ContiguousArray.reserveCapacity(_:)();
    v12 = v2;
    do
    {
      outlined init with copy of (Hashable & Sendable)?(v3, (uint64_t)v30, &demangling cache variable for type metadata for (Any, Any));
      v13 = v31;
      v14 = __swift_project_boxed_opaque_existential_1(v30, v31);
      v15 = _swift_isClassOrObjCExistentialType();
      if ((v15 & 1) != 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) != 8)
          goto LABEL_27;
        swift_unknownObjectRetain();
      }
      else
      {
        v16 = MEMORY[0x1E0C80A78](v15);
        (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v18 + 16))((char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v13, v16);
        _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }
      outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for (Any, Any));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 64;
      v12 = (_QWORD *)((char *)v12 - 1);
    }
    while (v12);
    v3 = v27[0];
    swift_bridgeObjectRelease();
    if (!(v4 >> 62))
      goto LABEL_16;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = MEMORY[0x1E0DEE9D8];
    v4 = MEMORY[0x1E0DEE9D8];
    if (!(MEMORY[0x1E0DEE9D8] >> 62))
    {
LABEL_16:
      v19 = v4 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    v20 = -8;
    if (!(v3 >> 62))
      goto LABEL_18;
    goto LABEL_24;
  }
LABEL_28:
  v19 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v4);
  swift_bridgeObjectRelease_n();
LABEL_17:
  v20 = v19 + 32;
  if (!(v3 >> 62))
  {
LABEL_18:
    v21 = v3 & 0xFFFFFFFFFFFFFF8;
    goto LABEL_19;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    v22 = -8;
    goto LABEL_20;
  }
  v21 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease_n();
LABEL_19:
  v22 = v21 + 32;
LABEL_20:
  v23 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithObjects_forKeys_count_, v20, v22, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v23;
}

void specialized static Int._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v3 = objc_msgSend(a1, sel_integerValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v3);
  v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_QWORD *)a2 = v3;
    *(_BYTE *)(a2 + 8) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 544175136;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 7630409;
    v8._object = (void *)0xE300000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __initializeUnitDict_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = objc_msgSend(MEMORY[0x1E0C99D80], "sharedKeySetForKeys:", &unk_1E0FCEBA8);
  _MergedGlobals_8 = (uint64_t)(id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithSharedKeySet:", v0);
  v1 = objc_msgSend(&unk_1E0FCEBA8, "count");
  v2 = (uint64_t *)malloc_type_malloc(8 * v1, 0x80040B8603338uLL);
  v3 = (uint64_t *)malloc_type_malloc(8 * v1, 0x80040B8603338uLL);
  objc_msgSend(&unk_1E0FCEBA8, "getObjects:range:", v2, 0, v1);
  objc_msgSend(&unk_1E0FCEBC0, "getObjects:range:", v3, 0, v1);
  if (v1 >= 1)
  {
    v4 = v3;
    v5 = v2;
    do
    {
      v7 = *v4++;
      v6 = v7;
      v8 = *v5++;
      objc_msgSend((id)_MergedGlobals_8, "setObject:forKey:", v6, v8);
      --v1;
    }
    while (v1);
  }
  free(v2);
  free(v3);
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  a1[1] = MEMORY[0x186DA9D64](a4);
  a1[2] = MEMORY[0x186DA9D64](a5, a2);
  result = MEMORY[0x186DA9D64](a6, a2);
  a1[3] = result;
  return result;
}

__n128 Duration.UnitsFormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __n128 v6;

  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)a2, type metadata accessor for Duration.UnitsFormatStyle);
  v6 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v6;
  *a2 = v6;
  return result;
}

void sub_1819932BC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1819932DC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x181993294);
}

double one-time initialization function for paragraphSeparators()
{
  uint64_t v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UInt8]>);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_18205C850;
  *(_QWORD *)(v0 + 32) = &outlined read-only object #0 of one-time initialization function for paragraphSeparators;
  static String.paragraphSeparators = v0;
  return result;
}

id String.init(utf16CodeUnits:count:)(uint64_t a1, uint64_t a2)
{
  id v2;
  id v3;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCharacters_length_, a1, a2);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

_BYTE *specialized Data._Representation.init(_:)(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 > 0x7FFFFFFE)
    {
      return (_BYTE *)specialized Data.LargeSlice.init(_:)((unint64_t)result, (uint64_t)a2);
    }
    else
    {
      return specialized Data.InlineSlice.init(_:)((unint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.DictionaryKeyDefaultValueSubscript()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.Conditional()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

NSNumber __swiftcall Int16._bridgeToObjectiveC()()
{
  __int16 v0;

  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v0);
}

uint64_t one-time initialization function for localizedStringLogger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, localizedStringLogger);
  __swift_project_value_buffer(v0, (uint64_t)localizedStringLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t AttributedStringProtocol.range<A>(of:options:locale:)@<X0>(unint64_t *a1@<X0>, unint64_t a2@<X1>, ValueMetadata *a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, unint64_t *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  ValueMetadata *v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  ValueMetadata *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t ObjectType;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t result;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t, uint64_t);
  void (*v81)(char *, uint64_t, uint64_t, uint64_t);
  char *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char *v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  ValueMetadata *v95;
  char *v96;
  char v97;
  int v98;
  uint64_t v99;
  void (*v100)(_BYTE *__return_ptr, ValueMetadata *, uint64_t);
  unint64_t v101;
  __int128 v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  __int128 v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  ValueMetadata *v150;
  _BYTE v151[72];
  uint64_t v152;
  _QWORD v153[14];
  uint64_t v154;
  _OWORD v155[3];
  _OWORD v156[3];
  __int128 v157[3];
  _BYTE v158[56];

  v148 = a5;
  v145 = a1;
  v146 = a6;
  v150 = a3;
  v143 = a7;
  v144 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v130 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v130 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  MEMORY[0x1E0C80A78](v24);
  v147 = a4;
  v25 = *(_QWORD *)(a4 - 8);
  v31 = MEMORY[0x1E0C80A78](v26);
  v33 = (char *)&v130 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = *(char **)v30;
  if (!v142)
  {
    v142 = v23;
    v132 = v17;
    v133 = v20;
    v134 = v13;
    v135 = v10;
    v138 = v29;
    v139 = v27;
    v140 = v28;
    v136 = v15;
    v137 = v14;
    v60 = v148;
    (*(void (**)(_QWORD *__return_ptr, ValueMetadata *, uint64_t, __n128))(v148 + 56))(v153, v150, v148, v31);
    *(_QWORD *)v151 = v153[0];
    *(_OWORD *)&v151[8] = *(_OWORD *)&v153[1];
    *(_OWORD *)&v151[24] = *(_OWORD *)&v153[3];
    *(_OWORD *)&v151[40] = *(_OWORD *)&v153[5];
    *(_OWORD *)&v151[56] = *(_OWORD *)&v153[7];
    v152 = v153[9];
    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
    v61 = Substring.init<A>(_:)();
    v63 = v62;
    v141 = v64;
    v66 = v65;
    (*(void (**)(char *, unint64_t *, unint64_t))(v25 + 16))(v33, v145, v147);
    v67 = Substring.init<A>(_:)();
    v71 = v67;
    v72 = v68;
    v73 = v69;
    LOWORD(v33) = v144;
    if ((v144 & 0x400) == 0)
    {
      if ((v61 ^ v63) < 0x4000 || !((v67 ^ v68) >> 14))
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      v131 = v63;
      if ((v144 & 2) != 0)
      {
        v147 = v70;
        LODWORD(v142) = (v144 >> 2) & 1;
        v146 = (v144 >> 3) & 1;
        LODWORD(v145) = v144 & 1;
        swift_bridgeObjectRetain();
        v60 = v148;
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v71, v72, v73, v147, BYTE1(v33) & 1, (v33 & 0x80) != 0, (char)v145, v146, (char)v142, v61, v63, v141, v66);
        v89 = v97;
        swift_bridgeObjectRelease();
      }
      else
      {
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v67, v68, v69, v70, (v144 >> 8) & 1, (v144 >> 7) & 1, v144 & 1, (v144 >> 3) & 1, (v144 & 4) != 0, v61, v63, v141, v66);
        v89 = v88;
      }
      v95 = v150;
      swift_bridgeObjectRelease();
      if ((v89 & 1) != 0)
        goto LABEL_15;
LABEL_37:
      swift_bridgeObjectRetain();
      v99 = Substring.UTF8View.distance(from:to:)();
      swift_bridgeObjectRelease();
      v150 = (ValueMetadata *)Substring.UTF8View.distance(from:to:)();
      swift_bridgeObjectRelease();
      v100 = *(void (**)(_BYTE *__return_ptr, ValueMetadata *, uint64_t))(v60 + 32);
      v100(v153, v95, v60);
      v101 = v153[0];
      result = AttributedStringProtocol.__guts.getter(v95, v60);
      if (!__OFADD__(v99, v101 >> 11))
      {
        v102 = *(_OWORD *)(result + 32);
        *(_OWORD *)v153 = *(_OWORD *)(result + 16);
        *(_OWORD *)&v153[2] = v102;
        *(_OWORD *)&v153[4] = *(_OWORD *)(result + 48);
        BigString.utf8.getter();
        BigString.startIndex.getter();
        v103 = BigString.UTF8View.index(_:offsetBy:)();
        v105 = v104;
        v148 = v107;
        v149 = v106;
        outlined release of Locale((uint64_t)v156);
        swift_release();
        v100(v151, v95, v60);
        v108 = *(_QWORD *)v151;
        result = AttributedStringProtocol.__guts.getter(v95, v60);
        if (!__OFADD__(v150, v108 >> 11))
        {
          v109 = *(_OWORD *)(result + 32);
          *(_OWORD *)v151 = *(_OWORD *)(result + 16);
          *(_OWORD *)&v151[16] = v109;
          *(_OWORD *)&v151[32] = *(_OWORD *)(result + 48);
          BigString.utf8.getter();
          BigString.startIndex.getter();
          v110 = BigString.UTF8View.index(_:offsetBy:)();
          v112 = v111;
          v114 = v113;
          v116 = v115;
          outlined release of Locale((uint64_t)v157);
          result = swift_release();
          if (v110 >> 10 >= v103 >> 10)
          {
            v117 = v143;
            *v143 = v103;
            v117[1] = v105;
            v118 = v148;
            v117[2] = v149;
            v117[3] = v118;
            v117[4] = v110;
            v117[5] = v112;
            v117[6] = v114;
            v117[7] = v116;
            return result;
          }
          goto LABEL_56;
        }
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v130 = v61;
    v131 = v63;
    v146 = v66;
    v147 = v70;
    if (one-time initialization token for cache == -1)
    {
LABEL_23:
      v78 = static RegexPatternCache.cache;
      swift_retain();
      v79 = MEMORY[0x186DA4634](v71, v72, v73, v147);
      v81 = v80;
      v145 = &v130;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v78 + 24));
      v82 = v142;
      closure #1 in RegexPatternCache.regex(for:caseInsensitive:)((uint64_t *)(v78 + 16), v79, (uint64_t)v81, v33 & 1, v79, v81, v33 & 1, v142);
      v83 = (char)v33;
      os_unfair_lock_unlock((os_unfair_lock_t)(v78 + 24));
      swift_bridgeObjectRelease();
      swift_release_n();
      v85 = v139;
      v84 = v140;
      v86 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v140 + 48))(v82, 1, v139);
      v87 = v82;
      if (v86 == 1)
      {
        outlined destroy of Any?((uint64_t)v82, &demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      v90 = v138;
      (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v138, v87, v85);
      if ((v83 & 8) != 0)
      {
        v153[0] = v130;
        v153[1] = v131;
        v153[2] = v141;
        v153[3] = v146;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
        v91 = (uint64_t)v134;
        BidirectionalCollection<>.prefixMatch<A>(of:)();
        v93 = v136;
        v92 = v137;
        v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v91, 1, v137);
        v60 = v148;
        v95 = v150;
        if (v98 != 1)
        {
          v96 = v133;
          (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v133, v91, v92);
          goto LABEL_36;
        }
      }
      else
      {
        v153[0] = v130;
        v153[1] = v131;
        v153[2] = v141;
        v153[3] = v146;
        type metadata accessor for AnyRegexOutput();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
        v91 = (uint64_t)v135;
        BidirectionalCollection<>.firstMatch<A, B>(of:)();
        v93 = v136;
        v92 = v137;
        v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v91, 1, v137);
        v60 = v148;
        v95 = v150;
        if (v94 != 1)
        {
          v96 = v132;
          (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v132, v91, v92);
LABEL_36:
          Regex.Match.range.getter();
          (*(void (**)(char *, uint64_t))(v93 + 8))(v96, v92);
          (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v138, v139);
          swift_bridgeObjectRelease();
          goto LABEL_37;
        }
      }
      (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v90, v85);
      outlined destroy of Any?(v91, (uint64_t *)&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
LABEL_52:
    swift_once();
    goto LABEL_23;
  }
  v141 = *(_QWORD *)(v30 + 8);
  v34 = v150;
  v35 = v148;
  v36 = (_OWORD *)AttributedStringProtocol.__guts.getter(v150, v148);
  v37 = v36[1];
  v38 = v36[3];
  v156[1] = v36[2];
  v156[2] = v38;
  v156[0] = v37;
  v39 = v36[1];
  v157[1] = v36[2];
  v157[2] = v38;
  v157[0] = v39;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v157, (uint64_t)v158);
  outlined retain of Locale((uint64_t)v158);
  swift_release();
  (*(void (**)(_QWORD *__return_ptr, ValueMetadata *, uint64_t))(v35 + 32))(v153, v34, v35);
  v40 = (ValueMetadata *)v153[0];
  v41 = v153[1];
  v42 = v153[2];
  v43 = v153[3];
  (*(void (**)(_OWORD *__return_ptr, ValueMetadata *, uint64_t))(v35 + 40))(v155, v34, v35);
  v149 = v41;
  v150 = v40;
  *(_QWORD *)v151 = v40;
  *(_QWORD *)&v151[8] = v41;
  v148 = v42;
  *(_QWORD *)&v151[16] = v42;
  *(_QWORD *)&v151[24] = v43;
  v140 = v43;
  *(_OWORD *)&v151[32] = v155[0];
  *(_OWORD *)&v151[48] = v155[1];
  BigString.subscript.getter();
  v44 = MEMORY[0x186DA46E8](v153);
  v46 = v45;
  *(_QWORD *)&v155[0] = v44;
  *((_QWORD *)&v155[0] + 1) = v45;
  StringProtocol._ephemeralString.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  v47 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v48 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if ((v46 & 0x2000000000000000) != 0)
    v49 = HIBYTE(v46) & 0xF;
  else
    v49 = v44 & 0xFFFFFFFFFFFFLL;
  v146 = v49;
  v147 = v44;
  v50 = (v46 & 0x1000000000000000) == 0 || (v44 & 0x800000000000000) != 0;
  v51 = (unint64_t)v155;
  v52 = StringProtocol._toUTF16Offsets(_:)();
  v55 = (id)(v54 - v52);
  if (__OFSUB__(v54, v52))
  {
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v56 = v52;
  ObjectType = swift_getObjectType();
  v58 = (void *)(*(uint64_t (**)(uint64_t))(v141 + 496))(ObjectType);
  v55 = objc_msgSend(v47, sel_rangeOfString_options_range_locale_, v48, v144, v56, v55, v58);
  v51 = v59;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  v53 = 0x7FFFFFFFFFFFFFFFLL;
  if (v55 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    outlined release of Locale((uint64_t)v156);
LABEL_15:
    result = swift_bridgeObjectRelease();
    v75 = v143;
    *v143 = 0;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = 2;
    *((_OWORD *)v75 + 2) = 0u;
    *((_OWORD *)v75 + 3) = 0u;
    return result;
  }
  if (__OFADD__(v55, v51))
    goto LABEL_42;
  result = StringProtocol._toUTF16Indices(_:)();
  v53 = result;
  v51 = v76;
  v55 = (id)(4 << v50);
  if ((result & 0xC) != 4 << v50)
  {
    v77 = result >> 16;
    if ((v46 & 0x1000000000000000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  result = _StringGuts._slowEnsureMatchingEncoding(_:)(v53, v147, v46);
  v77 = result >> 16;
  if ((v46 & 0x1000000000000000) == 0)
    goto LABEL_19;
LABEL_44:
  if (v146 >= v77)
  {
    result = String.UTF8View._foreignDistance(from:to:)();
LABEL_19:
    if ((id)(v51 & 0xC) == v55)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v51, v147, v46);
      v51 = result;
      if ((v46 & 0x1000000000000000) == 0)
        goto LABEL_21;
    }
    else if ((v46 & 0x1000000000000000) == 0)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      v147 = v51 >> 16;
LABEL_49:
      BigString.utf8.getter();
      v119 = BigString.UTF8View.index(_:offsetBy:)();
      v71 = v120;
      v72 = v121;
      v123 = v122;
      outlined release of Locale((uint64_t)&v154);
      BigString.utf8.getter();
      v124 = BigString.UTF8View.index(_:offsetBy:)();
      v33 = v125;
      v73 = v126;
      v128 = v127;
      outlined release of Locale((uint64_t)v156);
      result = outlined release of Locale((uint64_t)v155);
      if (v124 >> 10 >= v119 >> 10)
      {
        v129 = v143;
        *v143 = v119;
        v129[1] = v71;
        v129[2] = v72;
        v129[3] = v123;
        v129[4] = v124;
        v129[5] = (unint64_t)v33;
        v129[6] = v73;
        v129[7] = v128;
        return result;
      }
      __break(1u);
      goto LABEL_52;
    }
    if (v146 < v51 >> 16)
    {
      __break(1u);
      goto LABEL_54;
    }
    v147 = String.UTF8View._foreignDistance(from:to:)();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t protocol witness for AttributedStringProtocol.startIndex.getter in conformance AttributedString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = a3(a1, a2, a3, a4, a5, a6);
  *a7 = result;
  a7[1] = v9;
  a7[2] = v10;
  a7[3] = v11;
  return result;
}

uint64_t protocol witness for AttributedStringProtocol.endIndex.getter in conformance AttributedString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return protocol witness for AttributedStringProtocol.startIndex.getter in conformance AttributedString(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D13130], a3, a4, a5, a6);
}

uint64_t protocol witness for AttributedStringProtocol.startIndex.getter in conformance AttributedString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return protocol witness for AttributedStringProtocol.startIndex.getter in conformance AttributedString(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D13010], a3, a4, a5, a6);
}

id String.init(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id result;
  void *v6;
  id v7;
  void *v8[3];

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  v8[0] = *(void **)a1;
  v8[1] = v2;
  v8[2] = v3;
  objc_allocWithZone((Class)NSString);
  swift_retain();
  v4 = v8[0];
  swift_retain();
  result = @nonobjc NSString.init(contentsOf:usedEncoding:)(v8, 0);
  if (!v1)
  {
    v6 = result;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return v7;
  }
  return result;
}

id @nonobjc NSString.init(contentsOf:usedEncoding:)(void **a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v3 = v2;
  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = *a1;
  v9[0] = 0;
  v5 = objc_msgSend(v3, sel_initWithContentsOfURL_usedEncoding_error_, v4, a2, v9);
  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    if (v9[0])
    {
      v9[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v7 = (id)_nilObjCError;
    }
    swift_willThrow();
  }

  swift_release();
  swift_release();
  return v5;
}

uint64_t _NSEncodingFromDataForExtendedAttribute(void *a1)
{
  const UInt8 *v2;
  uint64_t v3;
  const UInt8 *v4;
  const UInt8 *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const __CFString *v9;
  const __CFString *v10;
  CFStringEncoding v11;
  CFStringEncoding encoding;
  char v14[100];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = (const UInt8 *)objc_msgSend(a1, "bytes");
  v3 = objc_msgSend(a1, "length");
  v4 = &v2[v3];
  v5 = v2;
  if (v3 >= 1)
  {
    v5 = v2;
    do
    {
      if (*v5 == 59)
        break;
      ++v5;
    }
    while (v5 < v4);
  }
  if (v5 >= v4 - 1
    || ((v6 = v4 - (v5 + 1), v6 >= 0x63) ? (v7 = 99) : (v7 = v6),
        (__memcpy_chk(), v14[v7] = 0, encoding = 0, sscanf_l(v14, 0, "%u", &encoding) != 1)
     || !CFStringIsEncodingAvailable(encoding)
     || (v8 = CFStringConvertEncodingToNSStringEncoding(encoding), v8 == 0xFFFFFFFF)))
  {
    if (v5 > v2)
    {
      v9 = CFStringCreateWithBytes(0, v2, v5 - v2, 0x8000100u, 1u);
      if (v9)
      {
        v10 = v9;
        v11 = CFStringConvertIANACharSetNameToEncoding(v9);
        if (v11 == -1)
          v8 = 0xFFFFFFFFLL;
        else
          v8 = CFStringConvertEncodingToNSStringEncoding(v11);
        CFRelease(v10);
        return v8;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v8;
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>);
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Percent(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent);
}

uint64_t closure #1 in _LocaleICU.hourCycle.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  int Language;
  _QWORD *v32;
  uint64_t v33;
  int Script;
  uint64_t v35;
  os_unfair_lock_s *v36;
  int Country;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  Swift::String v41;
  uint64_t countAndFlagsBits;
  os_unfair_lock_t v43;
  Swift::String v44;
  uint64_t v45;
  char *v46;
  Swift::String v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  os_unfair_lock_s *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _BOOL8 v97;
  uint64_t v98;
  char v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  _BYTE v145[280];
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t object;
  uint64_t v156;
  uint64_t v157;
  os_unfair_lock_t v158;
  char *v159;
  _QWORD *p_os_unfair_lock_opaque;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167[25];
  char v168;
  _BYTE v169[144];
  _BYTE v170[144];
  _QWORD *v171;
  os_unfair_lock_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  os_unfair_lock_t v176;
  uint64_t v177;
  void *v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;

  v4 = v3;
  v181 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(result + 281);
  if (v6 != 4)
  {
    *a3 = v6;
    return result;
  }
  v8 = result;
  v10 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v11._countAndFlagsBits = specialized static Locale.keywordValue(identifier:key:)();
  if (v11._object)
  {
    result = Locale.HourCycle.init(rawValue:)(v11, (char *)v167);
    v12 = v167[0];
    if (LOBYTE(v167[0]) != 4)
      goto LABEL_17;
  }
  outlined init with take of LocalePreferences?(a2 + 40, (uint64_t)v169);
  outlined init with take of LocalePreferences?((uint64_t)v169, (uint64_t)v170);
  result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v170);
  if ((_DWORD)result == 1)
    goto LABEL_5;
  if ((v170[138] & 1) != 0)
  {
    v12 = 2;
    goto LABEL_17;
  }
  if ((v170[139] & 1) != 0)
  {
    v12 = 1;
LABEL_17:
    *(_BYTE *)(v8 + 281) = v12;
    *a3 = v12;
    return result;
  }
LABEL_5:
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(v10, v9, v167);
  v13 = v168;
  if (v168 != 4)
  {
    result = (uint64_t)outlined release of Locale.Components(v167);
    *(_BYTE *)(v8 + 281) = v13;
    *a3 = v13;
    return result;
  }
  v162 = a3;
  _LocaleICU._lockedCalendarIdentifier(_:)(v8, &v171);
  v164 = v171;
  v14 = *(_QWORD *)(v8 + 336);
  if (!v14)
    goto LABEL_51;
  v15 = *(_QWORD *)(v8 + 328);
  v16 = *(_QWORD *)(v8 + 344);
  v17 = *(_QWORD *)(v8 + 352);
  if (v14 != 1)
  {
    v27 = *(_QWORD *)(v8 + 328);
    v28 = *(void **)(v8 + 336);
    goto LABEL_45;
  }
  v153 = 1;
  v150 = v16;
  v151 = v17;
  v161 = v3;
  specialized static Locale.keywordValue(identifier:key:)();
  if (!v18)
  {
LABEL_20:
    v146 = v15;
    v30 = swift_bridgeObjectRetain();
    MEMORY[0x1E0C80A78](v30);
    LODWORD(v171) = 0;
    String.utf8CString.getter();
    Language = uloc_getLanguage();
    v32 = (_QWORD *)swift_release();
    p_os_unfair_lock_opaque = 0;
    v33 = 0;
    if ((int)v171 <= 0 && Language > 0)
    {
      v145[Language] = 0;
      v32 = (_QWORD *)MEMORY[0x186DA4658](v145, 0);
      p_os_unfair_lock_opaque = v32;
    }
    v157 = v33;
    MEMORY[0x1E0C80A78](v32);
    LODWORD(v171) = 0;
    String.utf8CString.getter();
    Script = uloc_getScript();
    swift_release();
    v35 = 0;
    if ((int)v171 > 0)
    {
      v158 = 0;
    }
    else
    {
      v158 = 0;
      if (Script > 0)
      {
        v145[Script] = 0;
        v35 = MEMORY[0x186DA4658](v145);
        v158 = v36;
      }
    }
    v156 = v35;
    MEMORY[0x1E0C80A78](v35);
    LODWORD(v171) = 0;
    String.utf8CString.getter();
    Country = uloc_getCountry();
    swift_release();
    v159 = 0;
    if ((int)v171 > 0)
    {
      v152 = 0;
      v38 = v157;
    }
    else
    {
      v152 = 0;
      v38 = v157;
      if (Country > 0)
      {
        v145[Country] = 0;
        v159 = (char *)MEMORY[0x186DA4658](v145);
        v152 = v39;
      }
    }
    swift_bridgeObjectRelease();
    if (v38)
    {
      v40 = p_os_unfair_lock_opaque;
      v41 = String.lowercased()();
      countAndFlagsBits = v41._countAndFlagsBits;
      object = (unint64_t)v41._object;
    }
    else
    {
      v40 = 0;
      countAndFlagsBits = 0;
      object = 0;
    }
    v43 = v158;
    p_os_unfair_lock_opaque = v40;
    if (v158)
    {
      v171 = (_QWORD *)v156;
      v172 = v158;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      v44 = String._capitalized()();
      v154 = v44._countAndFlagsBits;
      v148 = v44._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v156 = 0;
      v154 = 0;
      v148 = 0;
    }
    v45 = v152;
    v163 = v10;
    v149 = countAndFlagsBits;
    if (v152)
    {
      v46 = v159;
      v47 = String.uppercased()();
      v48 = v47._object;
      v28 = (void *)v45;
      v159 = v46;
      v49 = (uint64_t)v46;
      v147 = v47._countAndFlagsBits;
      v50 = v45;
    }
    else
    {
      v51 = (uint64_t)p_os_unfair_lock_opaque;
      v171 = p_os_unfair_lock_opaque;
      v172 = (os_unfair_lock_t)v38;
      v52 = v156;
      v173 = countAndFlagsBits;
      v174 = object;
      v175 = v156;
      v176 = v43;
      v177 = v154;
      v178 = v148;
      v179 = 0u;
      v180 = 0u;
      outlined copy of Locale.LanguageCode?((uint64_t)p_os_unfair_lock_opaque, v38);
      outlined copy of Locale.LanguageCode?(v52, (uint64_t)v43);
      outlined copy of Locale.LanguageCode?(0, 0);
      v159 = (char *)specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v171);
      v28 = v53;
      outlined consume of Locale.LanguageCode?(v51, v157);
      outlined consume of Locale.LanguageCode?(v52, (uint64_t)v43);
      outlined consume of Locale.LanguageCode?(0, 0);
      if (v28)
      {
        v54 = String.uppercased()();
        v147 = v54._countAndFlagsBits;
        v48 = v54._object;
      }
      else
      {
        v159 = 0;
        v147 = 0;
        v48 = 0;
      }
      v49 = 0;
      v50 = v152;
    }
    v55 = (uint64_t)p_os_unfair_lock_opaque;
    v152 = v49;
    outlined copy of Locale.LanguageCode?(v49, v50);
    outlined consume of Locale.LanguageCode?(v55, v157);
    outlined consume of Locale.LanguageCode?(v156, (uint64_t)v158);
    outlined consume of Locale.LanguageCode?(v152, v50);
    v56 = *(_QWORD *)(v8 + 336);
    p_os_unfair_lock_opaque = *(_QWORD **)(v8 + 328);
    v158 = *(os_unfair_lock_t *)(v8 + 344);
    v57 = (uint64_t)v159;
    v58 = v147;
    outlined copy of Locale.LanguageCode?((uint64_t)v159, (uint64_t)v28);
    outlined consume of Locale.Subdivision??((uint64_t)p_os_unfair_lock_opaque, v56);
    *(_QWORD *)(v8 + 328) = v57;
    *(_QWORD *)(v8 + 336) = v28;
    *(_QWORD *)(v8 + 344) = v58;
    *(_QWORD *)(v8 + 352) = v48;
    v4 = v161;
    v10 = v163;
    v14 = v153;
    if (v28)
    {
      v59 = v57;
      v15 = v146;
      v27 = v59;
      goto LABEL_45;
    }
LABEL_51:
    v71 = one-time initialization token for _patternGeneratorCache;
    swift_bridgeObjectRetain();
    if (v71 != -1)
      swift_once();
    v72 = *(os_unfair_lock_s **)algn_1EDC47D58;
    v159 = (char *)static ICUPatternGenerator._patternGeneratorCache;
    v61 = *(_QWORD *)algn_1EDC47D58 + 24;
    swift_retain_n();
    os_unfair_lock_lock(v72 + 6);
    p_os_unfair_lock_opaque = &v72[4]._os_unfair_lock_opaque;
    v73 = specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)&v72[4], v10, v9, v164);
    if (v4)
      goto LABEL_162;
    v74 = v73;
    os_unfair_lock_unlock(v72 + 6);
    swift_release();
    if (v74 != 1)
      goto LABEL_153;
    LOBYTE(v165) = v164;
    type metadata accessor for ICUPatternGenerator();
    swift_allocObject();
    swift_bridgeObjectRetain();
    v163 = v10;
    v75 = ICUPatternGenerator.init(localeIdentifier:calendarIdentifier:)(v10, v9, (char *)&v165);
    swift_retain();
    os_unfair_lock_lock(v72 + 6);
    v76 = *(_QWORD *)&v72[4]._os_unfair_lock_opaque;
    v77 = *(_QWORD *)(v76 + 16);
    v65 = (uint64_t)v72;
    v158 = v72 + 6;
    v161 = 0;
    if ((uint64_t)v159 >= v77)
    {
      swift_bridgeObjectRetain();
      v67 = v76;
      v78 = p_os_unfair_lock_opaque;
    }
    else
    {
      v67 = v76;
      v78 = p_os_unfair_lock_opaque;
      *p_os_unfair_lock_opaque = MEMORY[0x1E0DEE9E0];
    }
    v81 = v75;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v165 = *v78;
    v94 = v165;
    *v78 = 0x8000000000000000;
    v84 = specialized __RawDictionaryStorage.find<A>(_:)(v163, v9, v164);
    v96 = *(_QWORD *)(v94 + 16);
    v97 = (v95 & 1) == 0;
    v98 = v96 + v97;
    if (!__OFADD__(v96, v97))
    {
      v99 = v95;
      if (*(_QWORD *)(v94 + 24) < v98)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v98, isUniquelyReferenced_nonNull_native);
        v94 = v165;
        v100 = specialized __RawDictionaryStorage.find<A>(_:)(v163, v9, v164);
        if ((v99 & 1) != (v101 & 1))
          goto LABEL_163;
        v84 = v100;
        if ((v99 & 1) == 0)
          goto LABEL_151;
        goto LABEL_74;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v95 & 1) == 0)
          goto LABEL_151;
        goto LABEL_74;
      }
      object = v84;
      LODWORD(v156) = v95;
      v157 = v65;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPatternGenerator.PatternGeneratorInfo, ICUPatternGenerator?>);
      v124 = v94;
      v125 = static _DictionaryStorage.copy(original:)();
      v94 = v125;
      v65 = v124;
      if (!*(_QWORD *)(v124 + 16))
        goto LABEL_150;
      v126 = (_QWORD *)(v125 + 64);
      v127 = 1 << *(_BYTE *)(v94 + 32);
      p_os_unfair_lock_opaque = (_QWORD *)(v124 + 64);
      v128 = (unint64_t)(v127 + 63) >> 6;
      if (v94 != v124 || v126 >= &p_os_unfair_lock_opaque[v128])
        memmove(v126, p_os_unfair_lock_opaque, 8 * v128);
      v129 = 0;
      *(_QWORD *)(v94 + 16) = *(_QWORD *)(v124 + 16);
      v130 = 1 << *(_BYTE *)(v124 + 32);
      v131 = -1;
      if (v130 < 64)
        v131 = ~(-1 << v130);
      v61 = v131 & *(_QWORD *)(v124 + 64);
      v159 = (char *)((unint64_t)(v130 + 63) >> 6);
      while (1)
      {
        if (v61)
        {
          v132 = __clz(__rbit64(v61));
          v61 &= v61 - 1;
          v133 = v132 | (v129 << 6);
        }
        else
        {
          v141 = v129 + 1;
          if (__OFADD__(v129, 1))
          {
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
          if (v141 >= (uint64_t)v159)
            goto LABEL_150;
          v142 = p_os_unfair_lock_opaque[v141];
          ++v129;
          if (!v142)
          {
            v129 = v141 + 1;
            if (v141 + 1 >= (uint64_t)v159)
              goto LABEL_150;
            v142 = p_os_unfair_lock_opaque[v129];
            if (!v142)
            {
              v129 = v141 + 2;
              if (v141 + 2 >= (uint64_t)v159)
                goto LABEL_150;
              v142 = p_os_unfair_lock_opaque[v129];
              if (!v142)
              {
                v129 = v141 + 3;
                if (v141 + 3 >= (uint64_t)v159)
                  goto LABEL_150;
                v142 = p_os_unfair_lock_opaque[v129];
                if (!v142)
                {
                  v129 = v141 + 4;
                  if (v141 + 4 >= (uint64_t)v159)
                    goto LABEL_150;
                  v142 = p_os_unfair_lock_opaque[v129];
                  if (!v142)
                  {
                    v129 = v141 + 5;
                    if (v141 + 5 >= (uint64_t)v159)
                      goto LABEL_150;
                    v142 = p_os_unfair_lock_opaque[v129];
                    if (!v142)
                    {
                      v129 = v141 + 6;
                      if (v141 + 6 >= (uint64_t)v159)
                        goto LABEL_150;
                      v142 = p_os_unfair_lock_opaque[v129];
                      if (!v142)
                      {
                        v129 = v141 + 7;
                        if (v141 + 7 >= (uint64_t)v159)
                          goto LABEL_150;
                        v142 = p_os_unfair_lock_opaque[v129];
                        if (!v142)
                        {
                          v143 = v141 + 8;
                          if (v143 >= (uint64_t)v159)
                            goto LABEL_150;
                          v142 = p_os_unfair_lock_opaque[v143];
                          if (!v142)
                          {
                            while (1)
                            {
                              v129 = v143 + 1;
                              if (__OFADD__(v143, 1))
                                goto LABEL_160;
                              if (v129 >= (uint64_t)v159)
                                break;
                              v142 = p_os_unfair_lock_opaque[v129];
                              ++v143;
                              if (v142)
                                goto LABEL_149;
                            }
LABEL_150:
                            swift_bridgeObjectRelease();
                            v65 = v157;
                            v84 = object;
                            if ((v156 & 1) == 0)
                            {
LABEL_151:
                              specialized _NativeDictionary._insert(at:key:value:)(v84, v163, v9, v164, v81, (_QWORD *)v94);
                              swift_bridgeObjectRetain();
LABEL_152:
                              *(_QWORD *)(v65 + 16) = v94;
                              swift_bridgeObjectRelease();
                              os_unfair_lock_unlock(v158);
                              swift_release();
                              swift_bridgeObjectRelease();
                              outlined consume of ICUDateIntervalFormatter??(1);
                              v74 = v81;
LABEL_153:
                              swift_bridgeObjectRelease();
                              swift_release();
                              if (v74)
                              {
LABEL_154:
                                ICUPatternGenerator.defaultHourCycle.getter((char *)&v165);
                                swift_release();
                                result = (uint64_t)outlined release of Locale.Components(v167);
                                v144 = v165;
                              }
                              else
                              {
                                result = (uint64_t)outlined release of Locale.Components(v167);
                                v144 = 2;
                              }
                              *(_BYTE *)(v8 + 281) = v144;
                              *v162 = v144;
                              return result;
                            }
LABEL_74:
                            v102 = *(_QWORD *)(v94 + 56);
                            v103 = 8 * v84;
                            swift_release();
                            *(_QWORD *)(v102 + v103) = v81;
                            goto LABEL_152;
                          }
                          v129 = v143;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_149:
          v61 = (v142 - 1) & v142;
          v133 = __clz(__rbit64(v142)) + (v129 << 6);
        }
        v134 = 24 * v133;
        v135 = *(_QWORD *)(v65 + 48) + 24 * v133;
        v136 = *(_QWORD *)v135;
        v137 = *(_QWORD *)(v135 + 8);
        LOBYTE(v135) = *(_BYTE *)(v135 + 16);
        v138 = 8 * v133;
        v139 = *(_QWORD *)(*(_QWORD *)(v65 + 56) + v138);
        v140 = *(_QWORD *)(v94 + 48) + v134;
        *(_QWORD *)v140 = v136;
        *(_QWORD *)(v140 + 8) = v137;
        *(_BYTE *)(v140 + 16) = v135;
        *(_QWORD *)(*(_QWORD *)(v94 + 56) + v138) = v139;
        swift_retain();
        swift_bridgeObjectRetain();
      }
    }
    goto LABEL_76;
  }
  if (String.count.getter() < 3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v19 = specialized Collection.prefix(_:)(2);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_bridgeObjectRelease();
  MEMORY[0x186DA4634](v19, v21, v23, v25);
  swift_bridgeObjectRelease();
  v26 = String.uppercased()();
  v27 = v26._countAndFlagsBits;
  v28 = v26._object;
  swift_bridgeObjectRelease();
  v29 = String.uppercased()();
  *(Swift::String *)(v8 + 328) = v26;
  *(Swift::String *)(v8 + 344) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = v161;
  v14 = v153;
LABEL_45:
  outlined copy of Locale.Subdivision??(v15, v14);
  swift_bridgeObjectRelease();
  v165 = 1600417397;
  v166 = 0xE400000000000000;
  v60._countAndFlagsBits = v27;
  v60._object = v28;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61 = v165;
  v62 = v166;
  v63 = one-time initialization token for _patternGeneratorCache;
  swift_bridgeObjectRetain();
  if (v63 != -1)
    swift_once();
  v9 = *(_QWORD *)algn_1EDC47D58;
  v159 = (char *)static ICUPatternGenerator._patternGeneratorCache;
  v64 = (uint64_t *)(*(_QWORD *)algn_1EDC47D58 + 16);
  v65 = *(_QWORD *)algn_1EDC47D58 + 24;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  p_os_unfair_lock_opaque = (_QWORD *)v61;
  v163 = v62;
  v66 = specialized closure #1 in FormatterCache.formatter(for:creator:)(v9 + 16, v61, v62, v164);
  if (v4)
    goto LABEL_161;
  v67 = v66;
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  swift_release();
  if (v67 != 1)
  {
LABEL_114:
    swift_release();
    swift_bridgeObjectRelease_n();
    if (!v67)
    {
      result = (uint64_t)outlined release of Locale.Components(v167);
      *(_BYTE *)(v8 + 281) = 2;
      *v162 = 2;
      return result;
    }
    goto LABEL_154;
  }
  LOBYTE(v165) = v164;
  type metadata accessor for ICUPatternGenerator();
  swift_allocObject();
  v68 = v163;
  swift_bridgeObjectRetain();
  v67 = ICUPatternGenerator.init(localeIdentifier:calendarIdentifier:)((uint64_t)p_os_unfair_lock_opaque, v68, (char *)&v165);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  v69 = *(_QWORD *)(v9 + 16);
  v70 = *(_QWORD *)(v69 + 16);
  v161 = 0;
  v157 = v69;
  v158 = (os_unfair_lock_t)(v9 + 24);
  if ((uint64_t)v159 >= v70)
    swift_bridgeObjectRetain();
  else
    *v64 = MEMORY[0x1E0DEE9E0];
  swift_retain();
  v79 = swift_isUniquelyReferenced_nonNull_native();
  v165 = *v64;
  v80 = v165;
  *v64 = 0x8000000000000000;
  v81 = v80;
  v82 = (uint64_t)p_os_unfair_lock_opaque;
  v84 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)p_os_unfair_lock_opaque, v163, v164);
  v85 = *(_QWORD *)(v81 + 16);
  v86 = (v83 & 1) == 0;
  v87 = v85 + v86;
  if (!__OFADD__(v85, v86))
  {
    v65 = v83;
    if (*(_QWORD *)(v81 + 24) < v87)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v87, v79);
      v88 = v165;
      v89 = specialized __RawDictionaryStorage.find<A>(_:)(v82, v163, v164);
      if ((v65 & 1) != (v90 & 1))
        goto LABEL_163;
      v84 = v89;
      if ((v65 & 1) == 0)
        goto LABEL_112;
LABEL_65:
      v91 = *(_QWORD *)(v88 + 56);
      v92 = 8 * v84;
      swift_release();
      *(_QWORD *)(v91 + v92) = v67;
LABEL_113:
      *(_QWORD *)(v9 + 16) = v88;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v158);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
      goto LABEL_114;
    }
    if ((v79 & 1) != 0)
    {
      v88 = v81;
      if ((v83 & 1) != 0)
        goto LABEL_65;
LABEL_112:
      specialized _NativeDictionary._insert(at:key:value:)(v84, v82, v163, v164, v67, (_QWORD *)v88);
      swift_bridgeObjectRetain();
      goto LABEL_113;
    }
    goto LABEL_77;
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  object = v84;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPatternGenerator.PatternGeneratorInfo, ICUPatternGenerator?>);
  v104 = static _DictionaryStorage.copy(original:)();
  v88 = v104;
  v61 = v81;
  if (!*(_QWORD *)(v81 + 16))
  {
LABEL_111:
    swift_bridgeObjectRelease();
    v82 = (uint64_t)p_os_unfair_lock_opaque;
    v84 = object;
    if ((v65 & 1) != 0)
      goto LABEL_65;
    goto LABEL_112;
  }
  v105 = (char *)(v104 + 64);
  v106 = 1 << *(_BYTE *)(v88 + 32);
  v159 = (char *)(v81 + 64);
  v107 = (unint64_t)(v106 + 63) >> 6;
  if (v88 != v81 || v105 >= &v159[8 * v107])
    memmove(v105, v159, 8 * v107);
  v108 = 0;
  *(_QWORD *)(v88 + 16) = *(_QWORD *)(v81 + 16);
  v109 = 1 << *(_BYTE *)(v81 + 32);
  v110 = -1;
  if (v109 < 64)
    v110 = ~(-1 << v109);
  v111 = v110 & *(_QWORD *)(v81 + 64);
  v156 = (unint64_t)(v109 + 63) >> 6;
  while (1)
  {
    if (v111)
    {
      v112 = __clz(__rbit64(v111));
      v111 &= v111 - 1;
      v113 = v112 | (v108 << 6);
      goto LABEL_85;
    }
    v121 = v108 + 1;
    if (__OFADD__(v108, 1))
    {
      __break(1u);
      goto LABEL_158;
    }
    if (v121 >= v156)
      goto LABEL_111;
    v122 = *(_QWORD *)&v159[8 * v121];
    ++v108;
    if (!v122)
    {
      v108 = v121 + 1;
      if (v121 + 1 >= v156)
        goto LABEL_111;
      v122 = *(_QWORD *)&v159[8 * v108];
      if (!v122)
      {
        v108 = v121 + 2;
        if (v121 + 2 >= v156)
          goto LABEL_111;
        v122 = *(_QWORD *)&v159[8 * v108];
        if (!v122)
        {
          v108 = v121 + 3;
          if (v121 + 3 >= v156)
            goto LABEL_111;
          v122 = *(_QWORD *)&v159[8 * v108];
          if (!v122)
          {
            v108 = v121 + 4;
            if (v121 + 4 >= v156)
              goto LABEL_111;
            v122 = *(_QWORD *)&v159[8 * v108];
            if (!v122)
            {
              v108 = v121 + 5;
              if (v121 + 5 >= v156)
                goto LABEL_111;
              v122 = *(_QWORD *)&v159[8 * v108];
              if (!v122)
              {
                v108 = v121 + 6;
                if (v121 + 6 >= v156)
                  goto LABEL_111;
                v122 = *(_QWORD *)&v159[8 * v108];
                if (!v122)
                {
                  v108 = v121 + 7;
                  if (v121 + 7 >= v156)
                    goto LABEL_111;
                  v122 = *(_QWORD *)&v159[8 * v108];
                  if (!v122)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_110:
    v111 = (v122 - 1) & v122;
    v113 = __clz(__rbit64(v122)) + (v108 << 6);
LABEL_85:
    v114 = 24 * v113;
    v115 = *(_QWORD *)(v61 + 48) + 24 * v113;
    v116 = *(_QWORD *)v115;
    v117 = *(_QWORD *)(v115 + 8);
    LOBYTE(v115) = *(_BYTE *)(v115 + 16);
    v118 = 8 * v113;
    v119 = *(_QWORD *)(*(_QWORD *)(v61 + 56) + v118);
    v120 = *(_QWORD *)(v88 + 48) + v114;
    *(_QWORD *)v120 = v116;
    *(_QWORD *)(v120 + 8) = v117;
    *(_BYTE *)(v120 + 16) = v115;
    *(_QWORD *)(*(_QWORD *)(v88 + 56) + v118) = v119;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  v123 = v121 + 8;
  if (v123 >= v156)
    goto LABEL_111;
  v122 = *(_QWORD *)&v159[8 * v123];
  if (v122)
  {
    v108 = v123;
    goto LABEL_110;
  }
  while (1)
  {
    v108 = v123 + 1;
    if (__OFADD__(v123, 1))
      break;
    if (v108 >= v156)
      goto LABEL_111;
    v122 = *(_QWORD *)&v159[8 * v108];
    ++v123;
    if (v122)
      goto LABEL_110;
  }
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  os_unfair_lock_unlock((os_unfair_lock_t)v65);
  __break(1u);
LABEL_162:
  os_unfair_lock_unlock((os_unfair_lock_t)v61);
  __break(1u);
LABEL_163:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v10 = a3;
    v11 = ~v6;
    v12 = *(_QWORD *)(v4 + 48);
    do
    {
      v13 = v12 + 24 * v7;
      v14 = *(unsigned __int8 *)(v13 + 16);
      v15 = *(_QWORD *)v13 == a1 && *(_QWORD *)(v13 + 8) == a2;
      if ((v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && v14 == v10)
        break;
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

uint64_t outlined copy of Locale.Subdivision??(uint64_t result, uint64_t a2)
{
  if (a2 != 1)
    return outlined copy of Locale.LanguageCode?(result, a2);
  return result;
}

uint64_t ICUPatternGenerator.defaultHourCycle.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  result = MEMORY[0x186DAA3F4](*(_QWORD *)(v1 + 16), &v6);
  if (result < 4 && v6 < 1)
    v5 = result;
  else
    v5 = 2;
  *a1 = v5;
  return result;
}

uint64_t gsDefaultStorageManager()
{
  if (qword_1ECD0A820 != -1)
    dispatch_once(&qword_1ECD0A820, &__block_literal_global_244);
  return objc_msgSend((id)qword_1ECD0A808, "manager");
}

uint64_t getEnumTagSinglePayload for TermOfAddress.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t specialized Rope._Node._leafSplit(at:into:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;

  v6 = a5;
  v52 = a3;
  v54 = a5;
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull() & 1) != 0)
  {
    v11 = a3;
  }
  else
  {
    v11 = specialized Rope._Node.copy()(a3);
    a4 = v12;
    v6 = v13;
    swift_unknownObjectRelease();
    v52 = v11;
    v54 = v6;
  }
  if (*(unsigned __int16 *)(v11 + 16) - 2 == a1)
  {
    v14 = *(unsigned __int16 *)(a3 + 16) - 1;
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v15 = specialized Rope._Node.copy()(v11);
      a4 = v16;
      v6 = v17;
      swift_unknownObjectRelease();
      v52 = v15;
      v53 = a4;
      v11 = v15;
    }
    swift_unknownObjectRetain();
    v18 = specialized Rope._UnsafeHandle._removeChild(at:)(v14, (_WORD *)(v11 + 16), v11 + 24);
    v20 = v19;
    v22 = v21;
    swift_unknownObjectRelease();
    v23 = __OFSUB__(a4, 1);
    a4 = (_QWORD *)((char *)a4 - 1);
    if (v23)
      goto LABEL_37;
    v23 = __OFSUB__(v6, v18);
    v6 -= v18;
    if (v23)
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    specialized Rope.Builder._insertAfterTip(_:)(v18, v20, v22);
  }
  if (a1 == 1)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v24 = specialized Rope._Node.copy()(v11);
      a4 = v25;
      v6 = v26;
      swift_unknownObjectRelease();
      v52 = v24;
      v53 = a4;
      v11 = v24;
      v54 = v6;
    }
    swift_unknownObjectRetain();
    v18 = specialized Rope._UnsafeHandle._removeChild(at:)(0, (_WORD *)(v11 + 16), v11 + 24);
    v28 = v27;
    v22 = v29;
    swift_unknownObjectRelease();
    v23 = __OFSUB__(a4, 1);
    a4 = (_QWORD *)((char *)a4 - 1);
    if (v23)
      goto LABEL_39;
    v23 = __OFSUB__(v6, v18);
    v6 -= v18;
    if (v23)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    specialized Rope.Builder.insertBeforeTip(_:)(v18, v28, v22);
    a1 = 0;
  }
  v22 = a2;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v30 = specialized Rope._Node.copy()(v11);
    a4 = v31;
    v6 = v32;
    swift_unknownObjectRelease();
    v52 = v30;
    v11 = v30;
  }
  v33 = (_WORD *)(v11 + 16);
  swift_unknownObjectRetain();
  v5 = specialized Rope._UnsafeHandle._removeChild(at:)(a1, (_WORD *)(v11 + 16), v11 + 24);
  swift_unknownObjectRelease();
  v18 = (uint64_t)a4 - 1;
  if (__OFSUB__(a4, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  v53 = (_QWORD *)((char *)a4 - 1);
  v23 = __OFSUB__(v6, v5);
  v6 -= v5;
  if (v23)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v54 = v6;
  if (!*v33)
  {
LABEL_24:
    swift_unknownObjectRelease();
    goto LABEL_34;
  }
  if (!a1)
  {
    v51 = 0;
    swift_unknownObjectRetain_n();
    MEMORY[0x186DA9E90](&v51, 8);
    v49 = v51;
    a4 = *(_QWORD **)(a2 + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_26:
      v36 = a4[2];
      v35 = a4[3];
      if (v36 >= v35 >> 1)
        a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, a4);
      a4[2] = v36 + 1;
      v37 = &a4[4 * v36];
      v37[4] = v11;
      v37[5] = v18;
      v37[6] = v6;
      v37[7] = v49;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      *(_QWORD *)(v22 + 80) = a4;
      goto LABEL_34;
    }
LABEL_41:
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4[2] + 1, 1, a4);
    goto LABEL_26;
  }
  if (a1 == (unsigned __int16)*v33)
  {
    v34 = swift_unknownObjectRetain();
    specialized Rope.Builder._insertBeforeTip(_:)(v34, (uint64_t)a4 - 1, v6);
    goto LABEL_24;
  }
  v38 = specialized Rope._Node.split(keeping:)(a1);
  v50 = v39;
  v41 = v40;
  v42 = swift_unknownObjectRetain();
  specialized Rope.Builder._insertBeforeTip(_:)(v42, (uint64_t)v53, v54);
  v51 = 0;
  swift_unknownObjectRetain();
  MEMORY[0x186DA9E90](&v51, 8);
  v43 = v51;
  v44 = *(_QWORD **)(a2 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
  v46 = v44[2];
  v45 = v44[3];
  if (v46 >= v45 >> 1)
    v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v46 + 1, 1, v44);
  v44[2] = v46 + 1;
  v47 = &v44[4 * v46];
  v47[4] = v38;
  v47[5] = v50;
  v47[6] = v41;
  v47[7] = v43;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_QWORD *)(a2 + 80) = v44;
LABEL_34:
  swift_unknownObjectRelease();
  return v5;
}

uint64_t DataProtocol.copyBytes(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t TupleTypeMetadata2;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v55 = a1;
  v56 = a2;
  v58 = a5;
  v59 = *(_QWORD *)(a5 + 8);
  v60 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v49 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v52 = (char *)&v47 - v10;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v47 - v16;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v47 - v19;
  swift_getAssociatedConformanceWitness();
  v21 = type metadata accessor for Range();
  v53 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v50 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v51 = (char *)&v47 - v24;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  v60 = v5;
  v57 = a4;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  v59 = v11;
  v25 = *(void (**)(char *, uint64_t))(v11 + 8);
  v25(v14, AssociatedTypeWitness);
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v27 = TupleTypeMetadata2;
    v28 = *(int *)(TupleTypeMetadata2 + 48);
    v29 = v52;
    v47 = v25;
    v48 = v21;
    v30 = &v52[v28];
    v31 = v59;
    v32 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
    v32(v52, v20, AssociatedTypeWitness);
    v32(v30, v17, AssociatedTypeWitness);
    v33 = v49;
    v34 = &v49[*(int *)(v27 + 48)];
    v35 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v35(v49, v29, AssociatedTypeWitness);
    v35(v34, v30, AssociatedTypeWitness);
    v36 = v50;
    v32(v50, v33, AssociatedTypeWitness);
    v37 = v47;
    v47(v34, AssociatedTypeWitness);
    v38 = &v33[*(int *)(v27 + 48)];
    v32(v33, v29, AssociatedTypeWitness);
    v32(v38, v30, AssociatedTypeWitness);
    v39 = v48;
    v32(&v36[*(int *)(v48 + 36)], v38, AssociatedTypeWitness);
    v37(v33, AssociatedTypeWitness);
    v40 = v53;
    v41 = v51;
    v42 = v39;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v51, v36, v39);
    v43 = v58;
    v44 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 104);
    v45 = MEMORY[0x186DA9D64](MEMORY[0x1E0DEB8A8], v42);
    v46 = v44(v55, v56, v41, v42, v45, v57, v43);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
    return v46;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance Data()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_181997944 + 4 * byte_1821657FC[*(_QWORD *)(v0 + 8) >> 62]))();
}

void sub_181997944(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
}

void sub_18199794C(_QWORD *a1@<X8>)
{
  int v1;

  *a1 = v1;
}

void sub_181997958(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Data@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
  *a3 = result;
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1819979F4);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1819979AC + *((int *)qword_181E4F9F8 + (a4 >> 62))))(v5);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x181997C60);
  }
  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  Data._Representation.subscript.getter(v16, v17, a4, a5);
  v10 = v9;
  v12 = v11;
  v13 = specialized RandomAccessCollection<>.distance(from:to:)(v16, v17, a4, a5);
  v14 = a2 - a1;
  if (v13 < a2 - a1)
    v14 = v13;
  if (v14 >= 1)
    __asm { BR              X10 }
  outlined consume of Data._Representation(v10, v12);
  return 0;
}

id @objc static NSLocale._numberingSystem(forLocaleIdentifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static NSLocale._numberingSystem(forLocaleIdentifier:)((uint64_t)v3, v4);
  v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    v7 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

uint64_t specialized static NSLocale._numberingSystem(forLocaleIdentifier:)(uint64_t a1, uint64_t a2)
{
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v7;
  uint64_t v8[22];
  void *v9;

  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(a1, a2, v8);
  object = v9;
  if (v9)
  {
    countAndFlagsBits = v8[21];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined release of Locale.Components(v8);
  }
  else
  {
    static Locale.NumberingSystem.defaultNumberingSystem(for:)(a1, a2, &v7);
    outlined release of Locale.Components(v8);
    object = v7._object;
    if (!v7._object)
      return 0;
    countAndFlagsBits = v7._countAndFlagsBits;
  }
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(countAndFlagsBits, (uint64_t)object);
  return countAndFlagsBits;
}

uint64_t *static Locale.NumberingSystem.defaultNumberingSystem(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::String *a3@<X8>)
{
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  _BYTE __dst[352];
  _OWORD v14[6];
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD __src[22];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(a1, a2, v14);
  v6 = String.lowercased()();
  outlined consume of Locale.LanguageCode?(v20, v21);
  __src[0] = v14[0];
  __src[1] = v14[1];
  __src[2] = v14[2];
  __src[3] = v14[3];
  __src[4] = v14[4];
  __src[5] = v14[5];
  LOBYTE(__src[6]) = v15;
  *(_OWORD *)((char *)&__src[6] + 8) = v16;
  *(_OWORD *)((char *)&__src[7] + 8) = v17;
  *(_OWORD *)((char *)&__src[8] + 8) = v18;
  *(_OWORD *)((char *)&__src[9] + 8) = v19;
  *(_OWORD *)((char *)&__src[10] + 8) = xmmword_18206BE20;
  *(Swift::String *)((char *)&__src[11] + 8) = v6;
  WORD4(__src[12]) = v22;
  __src[13] = v23;
  __src[14] = v24;
  __src[15] = v25;
  __src[16] = v26;
  __src[17] = v27;
  __src[18] = v28;
  __src[19] = v29;
  __src[20] = v30;
  __src[21] = v31;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v7 = unumsys_open();
  swift_release();
  if (MEMORY[0x186DAA76C](v7))
  {
    v8 = String.init(cString:)();
    v10 = v9;
    v11 = String.lowercased()();
    a3->_countAndFlagsBits = v8;
    a3->_object = v10;
    a3[1] = v11;
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
  }
  unumsys_close();
  return outlined release of Locale.Components((uint64_t *)__src);
}

uint64_t type metadata completion function for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FloatingPointRoundingRule();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.PredicateEvaluate(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[2];

  result = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    v20[0] = *(_QWORD *)(result - 8) + 64;
    if (*(_QWORD *)(a1 + 16) == 1)
    {
      result = swift_checkMetadataState();
      if (v4 > 0x3F)
        return result;
LABEL_14:
      v20[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata();
      return 0;
    }
    MEMORY[0x1E0C80A78](result);
    v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4)
        goto LABEL_11;
      if ((unint64_t)&v7[-v9] < 0x20)
        goto LABEL_11;
      v8 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v10 = (__int128 *)(v9 + 16);
      v11 = v7 + 16;
      v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v5 != v8)
      {
LABEL_11:
        v14 = v5 - v8;
        v15 = 8 * v8;
        v16 = &v7[8 * v8];
        v17 = (uint64_t *)(v9 + v15);
        do
        {
          v18 = *v17++;
          *(_QWORD *)v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    result = swift_getTupleTypeMetadata();
    if (v19 <= 0x3F)
      goto LABEL_14;
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Data()
{
  __asm { BR              X10 }
}

uint64_t sub_1819983F8()
{
  uint64_t v0;
  unint64_t v1;

  outlined copy of Data._Representation(v0, v1);
  Data.Iterator.init(_:at:)(v0, v1);
  return outlined consume of Data._Representation(v0, v1);
}

unint64_t lazy protocol witness table accessor for type TimeZone and conformance TimeZone()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for TimeZone, &type metadata for TimeZone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  a1[3] = result;
  return result;
}

uint64_t static RegexComponent<>.localizedDecimal(locale:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 v10;

  v4 = (char *)a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0) + 20);
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v6 = &v4[v5[9]];
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = &v4[v5[10]];
  *(_QWORD *)v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;
  return swift_unknownObjectRetain();
}

uint64_t one-time initialization function for uk()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.lowercased()();
  result = v1._countAndFlagsBits;
  static Locale.MeasurementSystem.uk = 0x6D65747379736B75;
  *(_QWORD *)algn_1EDC3A1D8 = 0xE800000000000000;
  xmmword_1EDC3A1E0 = (__int128)v1;
  return result;
}

void sub_181998C54(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181998D8C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_181998DB8(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x181998D44);
  }
  JUMPOUT(0x181998DACLL);
}

uint64_t instantiation function for generic protocol witness table for Date.FormatStyle(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle);
}

double static NumberFormatStyleConfiguration.Precision.fractionLength<A>(_:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  char v5;
  char v6;
  uint64_t v7;

  v3 = RangeExpression.clampedLowerAndUpperBounds(_:)(0, 999, a1);
  result = 0.0;
  *(_OWORD *)a2 = xmmword_18205FD60;
  *(_OWORD *)(a2 + 16) = xmmword_18205FD60;
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = v5 & 1;
  *(_QWORD *)(a2 + 48) = v7;
  *(_BYTE *)(a2 + 56) = v6 & 1 | 0x80;
  return result;
}

uint64_t static NumberFormatStyleConfiguration.Precision.integerAndFractionLength<A, B>(integerLimits:fractionLimits:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  char v14;
  uint64_t v15;

  v5 = RangeExpression.clampedLowerAndUpperBounds(_:)(0, 999, a1);
  v7 = v6;
  v9 = v8 & 1;
  v11 = v10 & 1;
  result = RangeExpression.clampedLowerAndUpperBounds(_:)(0, 999, a2);
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = result;
  *(_QWORD *)(a3 + 40) = v13 & 1;
  *(_QWORD *)(a3 + 48) = v15;
  *(_BYTE *)(a3 + 56) = v14 & 1 | 0x80;
  return result;
}

uint64_t RangeExpression.clampedLowerAndUpperBounds(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, __n128))(v6 + 16))(v9, v10, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  if (swift_dynamicCast())
  {
    v11 = 0;
    if (v19 >= a2)
      v12 = a2;
    else
      v12 = v19;
    if (v19 >= a1)
      v13 = v12;
    else
      v13 = a1;
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Int>);
  result = swift_dynamicCast();
  if (!(_DWORD)result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeFrom<Int>);
    if (!swift_dynamicCast())
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PartialRangeThrough<Int>);
      if (!swift_dynamicCast())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeUpTo<Int>);
        if (!swift_dynamicCast())
        {
          (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, a3);
          result = 0;
          v17 = 1;
          v16 = 1;
          goto LABEL_31;
        }
      }
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, a3);
      result = 0;
      v16 = 1;
      goto LABEL_30;
    }
    if (v19 <= a1)
      v13 = a1;
    else
      v13 = v19;
    v11 = 1;
LABEL_22:
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, a3);
    v16 = 0;
    if (v13 >= a2)
      result = a2;
    else
      result = v13;
    if ((v11 & 1) != 0)
    {
      v17 = 1;
LABEL_31:
      LOBYTE(v19) = v16;
      v18[8] = v17;
      return result;
    }
LABEL_30:
    v17 = 0;
    goto LABEL_31;
  }
  if (a1 == a2)
  {
    __break(1u);
  }
  else if (!__OFSUB__(a2, 1))
  {
    v11 = 0;
    if (a2 - 1 >= v19)
      v15 = v19;
    else
      v15 = a2 - 1;
    if (v19 >= a1)
      v13 = v15;
    else
      v13 = a1;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t Sequence.sorted<A>(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = MEMORY[0x1E0C80A78](a1);
  v15 = v6;
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v11 + 16))(&v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], v2, a2, v4);
  v20 = dispatch thunk of Sequence._copyToContiguousArray()();
  swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for ContiguousArray();
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEC728], v12);
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEC738], v12);
  MutableCollection<>.sort(by:)();
  return v20;
}

uint64_t @objc static NSTimeZone._setDefaultTimeZone(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v10[3];

  if (a3)
  {
    type metadata accessor for _NSSwiftTimeZone();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      v6 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _TimeZoneBridged();
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = a3;
      v6 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
      v7 = a3;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v8 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v8 != -1)
    swift_once();
  v10[1] = v6;
  v10[2] = static TimeZoneCache.cache;
  v10[0] = v5;
  TimeZoneCache.setDefault(_:)(v10);
  return swift_unknownObjectRelease_n();
}

uint64_t TimeZoneCache.setDefault(_:)(uint64_t *a1)
{
  os_unfair_lock_s **v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  __n128 v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t result;
  const __CFString *v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, unint64_t);
  id v12;
  __CFNotificationCenter *v13;
  __n128 v14;
  uint64_t v15[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = *v1;
  swift_retain();
  os_unfair_lock_lock(v4 + 36);
  v15[0] = v2;
  v15[1] = v3;
  TimeZoneCache.State.setDefaultTimeZone(_:)(v15, &v14);
  os_unfair_lock_unlock(v4 + 36);
  swift_release();
  v5 = v14;
  if (one-time initialization token for cache != -1)
    swift_once();
  v6 = static CalendarCache.cache + 16;
  v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.reset()(v6);
  os_unfair_lock_unlock(v7);
  result = swift_release_n();
  if (v5.n128_u64[0])
  {
    v9 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    ObjectType = swift_getObjectType();
    v11 = *(uint64_t (**)(uint64_t, unint64_t))(v5.n128_u64[1] + 120);
    swift_unknownObjectRetain();
    v12 = objc_retainAutorelease((id)v11(ObjectType, v5.n128_u64[1]));
    v13 = CFNotificationCenterGetLocalCenter();
    swift_unknownObjectRetain();
    CFNotificationCenterPostNotification(v13, v9, v12, 0, 1u);

    swift_unknownObjectRelease_n();
    return swift_unknownObjectRelease_n();
  }
  return result;
}

__n128 TimeZoneCache.State.setDefaultTimeZone(_:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  objc_class *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  __n128 result;
  __n128 v12;
  objc_super v13;

  v4 = *a1;
  v5 = a1[1];
  TimeZoneCache.State.check()();
  v12 = *(__n128 *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 32) = v5;
  if (v4)
  {
    v6 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
    v7 = (char *)objc_allocWithZone(v6);
    v8 = &v7[OBJC_IVAR____NSSwiftTimeZone_timeZone];
    *(_QWORD *)v8 = v4;
    *((_QWORD *)v8 + 1) = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
    v9 = swift_allocObject();
    *(_DWORD *)(v9 + 32) = 0;
    *(_OWORD *)(v9 + 16) = xmmword_1820E9CE0;
    *(_QWORD *)&v7[OBJC_IVAR____NSSwiftTimeZone_lock] = v9;
    v13.receiver = v7;
    v13.super_class = v6;
    swift_unknownObjectRetain_n();
    v10 = objc_msgSendSuper2(&v13, sel_init);

    *(_QWORD *)(v2 + 96) = v10;
  }
  else
  {

    *(_QWORD *)(v2 + 96) = 0;
  }
  result = v12;
  *a2 = v12;
  return result;
}

uint64_t closure #1 in CalendarCache.reset()(uint64_t result)
{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t type metadata completion function for Duration.TimeFormatStyle.Pattern.Fields()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  char *v5;
  char *v6;

  result = type metadata accessor for FloatingPointRoundingRule();
  if (v1 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v5 = &v3;
    swift_getTupleTypeLayout2();
    v6 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t PredicateExpressions.KeyPath.kind.getter@<X0>(char *a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = swift_conformsToProtocol2();
  if (result)
    v4 = AssociatedTypeWitness;
  else
    v4 = 0;
  if (v4)
    return static PredicateExpressions.KeyPath.kind<A>(_:collectionType:)(a1);
  *a1 = 4;
  return result;
}

uint64_t type metadata completion function for Duration.UnitsFormatStyle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_181999E30(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t Data.copyBytes(to:count:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 < 0)
  {
    __break(1u);
    JUMPOUT(0x181999EB4);
  }
  if (a2)
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, unint64_t))((char *)&loc_181999E74
                                                                                        + dword_181E578AC[a4 >> 62]))(result, 0, a3, a3, a4);
  return result;
}

uint64_t __DataStorage.copyBytes(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  if (!*(_QWORD *)(v3 + 16))
  {
    if (!__OFSUB__(a3, a2))
      return UnsafeMutableRawBufferPointer.copyMemory(from:)();
    goto LABEL_7;
  }
  if (!__OFSUB__(a2, *(_QWORD *)(v3 + 40)))
  {
    if (!__OFSUB__(a3, a2))
      return UnsafeMutableRawBufferPointer.copyMemory(from:)();
LABEL_7:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t URLComponents.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  id v18;
  char v19;
  id v20;
  uint64_t result;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  id v39;
  unint64_t v40;
  id v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  Swift::String v55;
  Swift::String v56;
  _QWORD v57[2];
  __int128 v58;
  _BYTE v59[32];
  Swift::String v60;
  __int128 v61;
  _OWORD v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  void *v66;
  unint64_t v67;

  v0 = type metadata accessor for Mirror();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.url.getter((uint64_t *)&v63);
  v4 = (void *)v63;
  if (!(_QWORD)v63)
  {
    URLComponents.customMirror.getter((uint64_t)v3);
    v10 = Mirror.children.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v66 = 0;
    v67 = 0xE000000000000000;
    swift_retain();
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (*((_QWORD *)&v65 + 1))
    {
      v57[1] = v10;
      do
      {
        v61 = v63;
        v62[0] = v64;
        v62[1] = v65;
        v60._countAndFlagsBits = 0;
        v60._object = (void *)0xE000000000000000;
        v11 = v63;
        v58 = v63;
        outlined init with copy of Any((uint64_t)v62, (uint64_t)v59);
        if (*((_QWORD *)&v11 + 1))
          v12 = v11;
        else
          v12 = 0;
        if (*((_QWORD *)&v11 + 1))
          v13 = (void *)*((_QWORD *)&v11 + 1);
        else
          v13 = (void *)0xE000000000000000;
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
        v14._countAndFlagsBits = v12;
        v14._object = v13;
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        v15._countAndFlagsBits = 8250;
        v15._object = (void *)0xE200000000000000;
        String.append(_:)(v15);
        _print_unlocked<A, B>(_:_:)();
        v16._countAndFlagsBits = 32;
        v16._object = (void *)0xE100000000000000;
        String.append(_:)(v16);
        String.append(_:)(v60);
        swift_bridgeObjectRelease();
        outlined destroy of (label: String?, value: Any)((uint64_t)&v61);
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (*((_QWORD *)&v65 + 1));
      v17 = v66;
    }
    else
    {
      v17 = 0;
    }
    swift_release();
    swift_release();
    return (uint64_t)v17;
  }
  v6 = *((_QWORD *)&v63 + 1);
  v5 = v64;
  swift_retain();
  v7 = v4;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    v18 = objc_msgSend(v7, sel_description);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);

    goto LABEL_42;
  }
  *(_QWORD *)&v63 = v7;
  *((_QWORD *)&v63 + 1) = v6;
  *(_QWORD *)&v64 = v5;
  URL.scheme.getter();
  if (!v8)
    goto LABEL_29;
  v9 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v9._countAndFlagsBits == 1635017060 && v9._object == (void *)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
      goto LABEL_29;
  }
  v20 = v7;
  swift_retain();
  swift_retain();
  result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!v6)
      goto LABEL_45;
    swift_bridgeObjectRetain();
  }
  else
  {
    v22 = objc_msgSend(v20, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v22);

  }
  outlined consume of URL?(v4);
  v23 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v23 < 129)
  {
LABEL_29:
    v25 = v7;
    swift_retain();
    swift_retain();
    result = _foundation_swift_url_feature_enabled();
    if (!(_DWORD)result)
    {
      v27 = objc_msgSend(v25, sel_relativeString);
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v26 = v28;

      goto LABEL_33;
    }
    if (v6)
    {
      v17 = *(id *)(v6 + 16);
      v26 = *(void **)(v6 + 24);
      swift_bridgeObjectRetain();
LABEL_33:
      outlined consume of URL?(v4);
      goto LABEL_40;
    }
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  *(_QWORD *)&v63 = 0;
  *((_QWORD *)&v63 + 1) = 0xE000000000000000;
  v24 = v20;
  swift_retain();
  swift_retain();
  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    v29 = objc_msgSend(v24, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v29);

    goto LABEL_35;
  }
  if (!v6)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  swift_bridgeObjectRetain();
LABEL_35:
  outlined consume of URL?(v4);
  v30 = specialized Collection.prefix(_:)(120);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = MEMORY[0x186DA4634](v30, v32, v34, v36);
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 0x202E2E2E20;
  v38._object = (void *)0xE500000000000000;
  String.append(_:)(v38);
  v39 = v24;
  swift_retain();
  swift_retain();
  result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    v42 = objc_msgSend(v39, sel_relativeString);
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v40 = v43;

    goto LABEL_39;
  }
  if (v6)
  {
    v41 = *(id *)(v6 + 16);
    v40 = *(_QWORD *)(v6 + 24);
    swift_bridgeObjectRetain();
LABEL_39:
    outlined consume of URL?(v4);
    v44 = specialized BidirectionalCollection.suffix(_:)(8uLL, (uint64_t)v41, v40);
    v46 = v45;
    v48 = v47;
    v50 = v49;
    swift_bridgeObjectRelease();
    v51._countAndFlagsBits = MEMORY[0x186DA4634](v44, v46, v48, v50);
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = (void *)*((_QWORD *)&v63 + 1);
    v17 = (id)v63;
LABEL_40:
    *(_QWORD *)&v61 = v7;
    *((_QWORD *)&v61 + 1) = v6;
    *(_QWORD *)&v62[0] = v5;
    URL.baseURL.getter((uint64_t *)&v63);
    v52 = (void *)v63;
    if ((_QWORD)v63)
    {
      v54 = *((_QWORD *)&v63 + 1);
      v53 = v64;
      *(_QWORD *)&v63 = 0;
      *((_QWORD *)&v63 + 1) = 0xE000000000000000;
      v55._countAndFlagsBits = (uint64_t)v17;
      v55._object = v26;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._countAndFlagsBits = 539831584;
      v56._object = (void *)0xE400000000000000;
      String.append(_:)(v56);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v52, v54, v53);
      outlined consume of URL?(v52);
      outlined consume of URL?(v4);
      outlined consume of URL?(v4);
      return v63;
    }
LABEL_42:
    outlined consume of URL?(v4);
    outlined consume of URL?(v4);
    return (uint64_t)v17;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.AttributedStyle(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t result;

  a1[1] = a4();
  a1[2] = a5();
  result = a6();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle, &type metadata for Date.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle, &type metadata for Date.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle, &type metadata for Date.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle, &type metadata for Date.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle, &type metadata for Date.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle, &type metadata for Date.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle, &type metadata for Date.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.FormatStyle, &type metadata for Date.FormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle);
  }
  return result;
}

char *NSLog(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  return specialized withVaList<A>(_:_:)(a3);
}

void sub_18199ADE0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

Swift::String_optional __swiftcall Locale.localizedString(for:)(Foundation::Calendar::Identifier a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  void *v6;
  Swift::String_optional result;
  char v8;

  v2 = *(_BYTE *)a1;
  v3 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v8 = v2;
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 112))(&v8, ObjectType, v3);
  result.value._object = v6;
  result.value._countAndFlagsBits = v5;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.calendarIdentifierDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.calendarIdentifierDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.calendarIdentifierDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _LocaleICU.calendarIdentifierDisplayName(for:)(a1, *(unsigned __int8 *)(v2 + 16), a2);
}

uint64_t closure #1 in _LocaleICU.calendarIdentifierDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char v3;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  void *__src;
  int64_t v42;
  uint64_t v43;

  v7 = *(_QWORD *)(a1 + 504);
  if (*(_QWORD *)(v7 + 16))
  {
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v9 & 1) != 0)
    {
      v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
      v11 = v10[1];
      *a3 = *v10;
      a3[1] = v11;
      return swift_bridgeObjectRetain();
    }
  }
  v13 = swift_retain();
  v14 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v13, a2);
  v16 = v15;
  swift_release();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v43 = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 504) = 0x8000000000000000;
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v20 = *(_QWORD *)(v43 + 16);
  v21 = (v18 & 1) == 0;
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
  }
  else
  {
    v3 = v18;
    if (*(_QWORD *)(v43 + 24) < v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
      v23 = v43;
      v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v25 & 1))
        goto LABEL_50;
      v19 = v24;
      if ((v3 & 1) == 0)
        goto LABEL_46;
LABEL_11:
      v26 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 16 * v19);
      swift_bridgeObjectRelease();
      *v26 = v14;
      v26[1] = v16;
LABEL_47:
      *(_QWORD *)(a1 + 504) = v23;
      result = swift_bridgeObjectRelease();
      *a3 = v14;
      a3[1] = v16;
      return result;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v23 = v43;
      if ((v18 & 1) != 0)
        goto LABEL_11;
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v19, a2, v14, v16, (_QWORD *)v23);
      goto LABEL_47;
    }
  }
  v40 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, String?>);
  v27 = static _DictionaryStorage.copy(original:)();
  v23 = v27;
  if (!*(_QWORD *)(v43 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    v19 = v40;
    if ((v3 & 1) != 0)
      goto LABEL_11;
    goto LABEL_46;
  }
  v28 = (void *)(v27 + 64);
  v29 = (unint64_t)((1 << *(_BYTE *)(v23 + 32)) + 63) >> 6;
  __src = (void *)(v43 + 64);
  if (v23 != v43 || (unint64_t)v28 >= v43 + 64 + 8 * v29)
    memmove(v28, __src, 8 * v29);
  v30 = 0;
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v43 + 16);
  v31 = 1 << *(_BYTE *)(v43 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & *(_QWORD *)(v43 + 64);
  v42 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v33)
    {
      v34 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v35 = v34 | (v30 << 6);
      goto LABEL_21;
    }
    v37 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v37 >= v42)
      goto LABEL_45;
    v38 = *((_QWORD *)__src + v37);
    ++v30;
    if (!v38)
    {
      v30 = v37 + 1;
      if (v37 + 1 >= v42)
        goto LABEL_45;
      v38 = *((_QWORD *)__src + v30);
      if (!v38)
      {
        v30 = v37 + 2;
        if (v37 + 2 >= v42)
          goto LABEL_45;
        v38 = *((_QWORD *)__src + v30);
        if (!v38)
        {
          v30 = v37 + 3;
          if (v37 + 3 >= v42)
            goto LABEL_45;
          v38 = *((_QWORD *)__src + v30);
          if (!v38)
          {
            v30 = v37 + 4;
            if (v37 + 4 >= v42)
              goto LABEL_45;
            v38 = *((_QWORD *)__src + v30);
            if (!v38)
            {
              v30 = v37 + 5;
              if (v37 + 5 >= v42)
                goto LABEL_45;
              v38 = *((_QWORD *)__src + v30);
              if (!v38)
              {
                v30 = v37 + 6;
                if (v37 + 6 >= v42)
                  goto LABEL_45;
                v38 = *((_QWORD *)__src + v30);
                if (!v38)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_44:
    v33 = (v38 - 1) & v38;
    v35 = __clz(__rbit64(v38)) + (v30 << 6);
LABEL_21:
    v36 = *(_OWORD *)(*(_QWORD *)(v43 + 56) + 16 * v35);
    *(_BYTE *)(*(_QWORD *)(v23 + 48) + v35) = *(_BYTE *)(*(_QWORD *)(v43 + 48) + v35);
    *(_OWORD *)(*(_QWORD *)(v23 + 56) + 16 * v35) = v36;
    swift_bridgeObjectRetain();
  }
  v39 = v37 + 7;
  if (v39 >= v42)
    goto LABEL_45;
  v38 = *((_QWORD *)__src + v39);
  if (v38)
  {
    v30 = v39;
    goto LABEL_44;
  }
  while (1)
  {
    v30 = v39 + 1;
    if (__OFADD__(v39, 1))
      break;
    if (v30 >= v42)
      goto LABEL_45;
    v38 = *((_QWORD *)__src + v30);
    ++v39;
    if (v38)
      goto LABEL_44;
  }
LABEL_49:
  __break(1u);
LABEL_50:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t URLComponents.port.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 13) = 0;
  if ((a2 & 1) == 0 && result < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 88) = result;
    *(_BYTE *)(v2 + 96) = a2 & 1;
  }
  return result;
}

uint64_t type metadata completion function for NSDecimal.ParseStrategy()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _NSMoveTemporaryFileToDestination(void *a1, void *a2)
{
  uint64_t result;
  std::error_code *v4;
  std::error_code *v5;
  int v6;
  mode_t st_mode;
  int v8;
  stat v9;
  std::__fs::filesystem::path __to;
  std::__fs::filesystem::path __from;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(a2, "getFileSystemRepresentation:maxLength:", &__to, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0,
             0,
             0);
  if ((_DWORD)result)
  {
    result = objc_msgSend(a1, "getFileSystemRepresentation:maxLength:", &__from, 1024);
    if ((_DWORD)result)
    {
      if (lstat((const char *)&__to, &v9))
      {
        if (*__error() != 2)
          return 0;
        rename(&__from, &__to, v5);
        if (!v6)
          return 1;
      }
      else
      {
        st_mode = v9.st_mode;
        rename(&__from, &__to, v4);
        if (!v8)
        {
          chmod((const char *)&__to, st_mode);
          return 1;
        }
      }
      unlink((const char *)&__from);
      return 0;
    }
  }
  return result;
}

void base witness table accessor for Equatable in MeasurementFormatUnitUsage<A>()
{
  JUMPOUT(0x186DA9D64);
}

void sub_18199BFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose((const void *)(v43 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t type metadata completion function for ICULegacyNumberFormatter.NumberFormatType()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t static AttributedString.+ infix(_:_:)@<X0>(_QWORD *a1@<X0>, _OWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD *v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = (_OWORD *)*a1;
  v4 = *a2;
  *a3 = *a1;
  v5 = v3[2];
  v17 = v3[1];
  v18 = v5;
  v19 = v3[3];
  *(_QWORD *)&v10 = BigString.endIndex.getter();
  *((_QWORD *)&v10 + 1) = v6;
  v11 = v7;
  v12 = v8;
  v13 = v10;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  swift_retain();
  return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v10, v4);
}

uint64_t specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(_QWORD *a1, _OWORD *a2)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  void (*v22)(_OWORD *, _QWORD);
  __int128 v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE v33[48];
  _BYTE v34[48];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[48];
  _BYTE v40[112];
  _BYTE v41[48];
  _BYTE v42[48];
  _OWORD v43[16];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v3 = v2;
  v6 = a2[2];
  v52 = a2[1];
  v53 = v6;
  v54 = a2[3];
  v44 = BigString.startIndex.getter();
  v45 = v7;
  v46 = v8;
  v47 = v9;
  v48 = BigString.endIndex.getter();
  v49 = v10;
  v50 = v11;
  v51 = v12;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v33);
  outlined release of Locale((uint64_t)v34);
  swift_release();
  v13 = a2[2];
  v43[3] = a2[1];
  v43[4] = v13;
  v31 = v35;
  v43[5] = a2[3];
  v43[6] = v35;
  v29 = v37;
  v43[7] = v36;
  v43[8] = v37;
  v43[9] = v38;
  swift_unknownObjectRetain();
  swift_release();
  v14 = v2[2];
  v43[13] = v2[1];
  v43[14] = v14;
  v43[15] = v2[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v39);
  v15 = BigSubstring.UnicodeScalarView.isIdentical(to:)();
  outlined release of Locale((uint64_t)v40);
  v16 = v31 >> 11;
  v17 = v29 >> 11;
  v18 = *a1 >> 11;
  v19 = a1[4] >> 11;
  if ((v15 & 1) != 0)
  {
    swift_retain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v18, v19, (uint64_t)a2, v16, v17);
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v18, v19, 0, 0);
LABEL_7:
    swift_release();
    return swift_unknownObjectRelease();
  }
  swift_retain();
  v28 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v18, v19);
  v30 = v20;
  v21 = v3[2];
  v43[10] = v3[1];
  v43[11] = v21;
  v43[12] = v3[3];
  BigString.utf8.getter();
  v32 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v41);
  swift_unknownObjectRetain();
  v22 = (void (*)(_OWORD *, _QWORD))BigString.unicodeScalars.modify();
  BigString.UnicodeScalarView.replaceSubrange(_:with:)();
  v22(v43, 0);
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v18, v19, (uint64_t)a2, v16, v17);
  v23 = v3[2];
  v43[0] = v3[1];
  v43[1] = v23;
  v43[2] = v3[3];
  BigString.utf8.getter();
  v24 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v42);
  v26 = v24 - v32;
  if (__OFSUB__(v24, v32))
  {
    __break(1u);
    goto LABEL_9;
  }
  v27 = v30 + v26;
  if (__OFADD__(v30, v26))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = v28;
  if (v27 >= v28)
  {
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v28, v27, 1, 0);
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.IdentifierType and conformance Locale.IdentifierType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Locale.IdentifierType and conformance Locale.IdentifierType;
  if (!lazy protocol witness table cache variable for type Locale.IdentifierType and conformance Locale.IdentifierType)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Locale.IdentifierType, &type metadata for Locale.IdentifierType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.IdentifierType and conformance Locale.IdentifierType);
  }
  return result;
}

uint64_t _JSONKeyedEncodingContainer.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[5];

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v17[3] = &type metadata for _CodingKey;
  v17[4] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v6 = swift_allocObject();
  v17[0] = v6;
  *(_OWORD *)(v6 + 16) = xmmword_18206AAD0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 40) = 0;
  swift_retain();
  v7 = _JSONKeyedEncodingContainer._converted(_:)(v17, v3, v4, v5);
  v9 = v8;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  v10 = *v1;
  v11 = v1[1];
  v12 = *(_QWORD *)(v10 + 144);
  v13 = type metadata accessor for __JSONReferencingEncoder();
  v14 = swift_allocObject();
  swift_retain();
  swift_retain();
  v15 = specialized __JSONReferencingEncoder.init(referencing:key:convertedKey:codingPathNode:wrapping:)(v3, 0x7265707573, 0xE500000000000000, 0, 0, v7, v9, v12, v11, v14);
  a1[3] = v13;
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type __JSONReferencingEncoder and conformance __JSONEncoder, (uint64_t (*)(uint64_t))type metadata accessor for __JSONReferencingEncoder, (uint64_t)&protocol conformance descriptor for __JSONEncoder);
  a1[4] = result;
  *a1 = v15;
  return result;
}

id URLRequest.allowsCellularAccess.setter(char a1, SEL *a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v9;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(void **)(*(_QWORD *)v2 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v6 = swift_allocObject();
    swift_retain();
    v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v6 + 16) = v9;
    *(_QWORD *)v2 = v6;
    swift_release();
  }
  return objc_msgSend(*(id *)(*(_QWORD *)v2 + 16), *a2, a1 & 1);
}

uint64_t Date.FormatStyle.year(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int128 v19;
  __int128 v20;
  unsigned __int128 v21;
  _BYTE v22[74];

  v3 = *a1;
  v4 = *((unsigned __int8 *)a1 + 8);
  v5 = v2[1];
  v19 = *v2;
  v20 = v5;
  v6 = v2[3];
  v21 = v2[2];
  *(_OWORD *)v22 = v6;
  v7 = v2[5];
  *(_OWORD *)&v22[16] = v2[4];
  *(_OWORD *)&v22[32] = v7;
  *(_OWORD *)&v22[48] = v2[6];
  *(_OWORD *)&v22[58] = *(__int128 *)((char *)v2 + 106);
  v8 = v21;
  if ((v21 & 0xFF000000000000) == 0x3000000000000)
  {
    v9 = 0x906030001;
    v10 = 50332931;
    if ((_DWORD)v4 == 255)
    {
      v13 = 0;
      v11 = 0x1000000000000;
      v12 = 0x200000000000000;
    }
    else
    {
      v10 = 50333183;
      v9 = 0x906030100;
      v11 = 0x2000000000000;
      v12 = 0x2000E0000000000;
      v13 = 327680;
    }
    v15 = 0;
    v16 = v10 | v13;
    v8 = (unint64_t)v12 | (unsigned __int128)(v11 | (unint64_t)v9);
    v17 = 3327;
    v14 = 3;
  }
  else
  {
    v14 = v19;
    v15 = *((_QWORD *)&v20 + 1);
    v16 = v20;
    v17 = *(_WORD *)v22;
  }
  *(_OWORD *)(a2 + 66) = *(_OWORD *)&v22[18];
  *(_OWORD *)(a2 + 82) = *(_OWORD *)&v22[34];
  *(_OWORD *)(a2 + 98) = *(_OWORD *)&v22[50];
  *(_QWORD *)(a2 + 114) = *(_QWORD *)&v22[66];
  *(_OWORD *)(a2 + 50) = *(_OWORD *)&v22[2];
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v16 & 0xFFFFFFFFFFFFFF00 | v4;
  *(_QWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 32) = v8;
  *(_WORD *)(a2 + 48) = v17;
  return outlined retain of Date.FormatStyle((uint64_t)&v19);
}

uint64_t URLComponents.debugDescription.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  Swift::Int v43;
  unint64_t v44;
  void (*v45)(char *, _QWORD);
  unint64_t v46;
  unint64_t v47;
  char v48;
  id v49;
  uint64_t result;
  unint64_t v51;
  unint64_t v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  Swift::Int v64;
  unint64_t v65;
  void (*v66)(char *, _QWORD);
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  Swift::Int v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  id v91;
  uint64_t v92;
  id v93;
  id v94;
  void *v95;
  id v96;
  void *v97;
  unsigned __int8 *v98;
  unint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  Swift::String v108;
  Swift::String v109;
  id v110;
  unint64_t v111;
  id v112;
  id v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  Swift::String v122;
  void *v123;
  uint64_t v124;
  unint64_t v125;
  Swift::String v126;
  Swift::String v127;
  void *v128;
  id v129;
  id v130;
  void *v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unsigned __int8 *v142;
  uint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  unint64_t v147;
  _OWORD *v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  char v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _OWORD *v157;
  __int128 v158;
  __int128 v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  Swift::Int v169;
  unint64_t v170;
  void (*v171)(char *, _QWORD);
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  _OWORD *v178;
  __int128 v179;
  __int128 v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  Swift::Int v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  Swift::Int v242;
  unint64_t v243;
  void (*v244)(char *, _QWORD);
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  Swift::Int v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  _OWORD *v261;
  __int128 v262;
  __int128 v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  Swift::Int v271;
  unint64_t v272;
  void (*v273)(char *, _QWORD);
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  _OWORD *v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  uint64_t v288;
  void *v289;
  Swift::String v290;
  Swift::String v291;
  Swift::String v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  char *v299;
  _BYTE *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char *v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  __int128 v314;
  _BYTE v315[32];
  Swift::String v316;
  __int128 v317;
  _OWORD v318[2];
  void *v319;
  unint64_t v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  _OWORD v329[3];
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  _OWORD v338[2];
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  _BYTE v347[26];

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v296 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v296 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Mirror();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v296 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v0[7];
  v345 = v0[6];
  v346 = v12;
  *(_OWORD *)v347 = v0[8];
  *(_OWORD *)&v347[10] = *(__int128 *)((char *)v0 + 138);
  v13 = v0[3];
  v341 = v0[2];
  v342 = v13;
  v14 = v0[5];
  v343 = v0[4];
  v344 = v14;
  v15 = v0[1];
  v339 = *v0;
  v340 = v15;
  outlined retain of URLComponents((uint64_t)&v339);
  URLComponents.url.getter((uint64_t *)&v330);
  if ((_QWORD)v330)
  {
    v17 = v330;
    v16 = v331;
    if (!_foundation_swift_url_feature_enabled())
    {
      v18 = (void *)v17;
      v32 = objc_msgSend((id)v17, sel_description);
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);

      goto LABEL_89;
    }
    v18 = (void *)v17;
    v330 = v17;
    *(_QWORD *)&v331 = v16;
    URL.scheme.getter();
    if (!v19)
      goto LABEL_70;
    v20 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v20._countAndFlagsBits == 1635017060 && v20._object == (void *)0xE400000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v48 & 1) == 0)
        goto LABEL_70;
    }
    swift_retain();
    v49 = (id)v17;
    swift_retain();
    result = _foundation_swift_url_feature_enabled();
    if ((_DWORD)result)
    {
      if (!*((_QWORD *)&v17 + 1))
        goto LABEL_297;
      swift_bridgeObjectRetain();
    }
    else
    {
      v91 = objc_msgSend(v49, sel_relativeString);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v91);

    }
    outlined consume of URL?((void *)v17);
    v92 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v92 >= 129)
    {
      *(_QWORD *)&v330 = 0;
      *((_QWORD *)&v330 + 1) = 0xE000000000000000;
      v93 = v49;
      swift_retain();
      swift_retain();
      result = _foundation_swift_url_feature_enabled();
      if (!(_DWORD)result)
      {
        v100 = objc_msgSend(v93, sel_relativeString);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v100);

        goto LABEL_82;
      }
      if (*((_QWORD *)&v17 + 1))
      {
        swift_bridgeObjectRetain();
LABEL_82:
        outlined consume of URL?((void *)v17);
        v101 = specialized Collection.prefix(_:)(120);
        v103 = v102;
        v105 = v104;
        v107 = v106;
        swift_bridgeObjectRelease();
        v108._countAndFlagsBits = MEMORY[0x186DA4634](v101, v103, v105, v107);
        String.append(_:)(v108);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v109._countAndFlagsBits = 0x202E2E2E20;
        v109._object = (void *)0xE500000000000000;
        String.append(_:)(v109);
        v110 = v93;
        swift_retain();
        swift_retain();
        result = _foundation_swift_url_feature_enabled();
        if (!(_DWORD)result)
        {
          v113 = objc_msgSend(v110, sel_relativeString);
          v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
          v111 = v114;

          goto LABEL_86;
        }
        if (*((_QWORD *)&v17 + 1))
        {
          v112 = *(id *)(*((_QWORD *)&v17 + 1) + 16);
          v111 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 24);
          swift_bridgeObjectRetain();
LABEL_86:
          outlined consume of URL?((void *)v17);
          v115 = specialized BidirectionalCollection.suffix(_:)(8uLL, (uint64_t)v112, v111);
          v117 = v116;
          v119 = v118;
          v121 = v120;
          swift_bridgeObjectRelease();
          v122._countAndFlagsBits = MEMORY[0x186DA4634](v115, v117, v119, v121);
          String.append(_:)(v122);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v95 = (void *)*((_QWORD *)&v330 + 1);
          v33 = (id)v330;
LABEL_87:
          v321 = v17;
          *(_QWORD *)&v322 = v16;
          URL.baseURL.getter((uint64_t *)&v330);
          v123 = (void *)v330;
          if ((_QWORD)v330)
          {
            v125 = *((_QWORD *)&v330 + 1);
            v124 = v331;
            *(_QWORD *)&v330 = 0;
            *((_QWORD *)&v330 + 1) = 0xE000000000000000;
            v126._countAndFlagsBits = (uint64_t)v33;
            v126._object = v95;
            String.append(_:)(v126);
            swift_bridgeObjectRelease();
            v127._countAndFlagsBits = 539831584;
            v127._object = (void *)0xE400000000000000;
            String.append(_:)(v127);
            specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v123, v125, v124);
            outlined consume of URL?(v123);
            outlined consume of URL?((void *)v17);
            outlined release of URLComponents((uint64_t)&v339);
            return v330;
          }
LABEL_89:
          outlined consume of URL?(v18);
          goto LABEL_274;
        }
LABEL_299:
        __break(1u);
        goto LABEL_300;
      }
LABEL_298:
      __break(1u);
      goto LABEL_299;
    }
LABEL_70:
    swift_retain();
    v94 = (id)v17;
    swift_retain();
    result = _foundation_swift_url_feature_enabled();
    if (!(_DWORD)result)
    {
      v96 = objc_msgSend(v94, sel_relativeString);
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      v95 = v97;

      goto LABEL_74;
    }
    if (*((_QWORD *)&v17 + 1))
    {
      v33 = *(id *)(*((_QWORD *)&v17 + 1) + 16);
      v95 = *(void **)(*((_QWORD *)&v17 + 1) + 24);
      swift_bridgeObjectRetain();
LABEL_74:
      outlined consume of URL?((void *)v17);
      goto LABEL_87;
    }
    __break(1u);
LABEL_297:
    __break(1u);
    goto LABEL_298;
  }
  v305 = v7;
  v309 = v11;
  v298 = v2;
  v336 = v345;
  v337 = v346;
  v338[0] = *(_OWORD *)v347;
  *(_OWORD *)((char *)v338 + 10) = *(_OWORD *)&v347[10];
  v332 = v341;
  v333 = v342;
  v334 = v343;
  v335 = v344;
  v330 = v339;
  v331 = v340;
  v21 = v341;
  v299 = v4;
  v300 = (_BYTE *)v339;
  v302 = v8;
  if ((_QWORD)v341)
  {
    v22 = *((_QWORD *)&v340 + 1);
    outlined retain of URLComponents((uint64_t)&v339);
    v23 = v21;
    v24 = v9;
  }
  else
  {
    v24 = v9;
    if (BYTE9(v339) != 1 || !(_QWORD)v339 || (*(_BYTE *)(v339 + 48) & 1) != 0)
    {
      outlined retain of URLComponents((uint64_t)&v339);
      v28 = MEMORY[0x1E0DEE9D8];
      goto LABEL_17;
    }
    outlined retain of URLComponents((uint64_t)&v339);
    outlined retain of URLComponents((uint64_t)&v339);
    v137 = String.subscript.getter();
    v22 = MEMORY[0x186DA4634](v137);
    v23 = v138;
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v339);
  }
  *((_QWORD *)&v318[0] + 1) = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v317 = v22;
  *((_QWORD *)&v317 + 1) = v23;
  v321 = xmmword_182060F40;
  outlined init with take of Any(&v317, &v322);
  swift_bridgeObjectRetain();
  v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v27 = v25[2];
  v26 = v25[3];
  if (v27 >= v26 >> 1)
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v25);
  v25[2] = v27 + 1;
  v28 = (unint64_t)v25;
  v29 = &v25[6 * v27];
  v30 = v321;
  v31 = v323;
  v29[3] = v322;
  v29[4] = v31;
  v29[2] = v30;
LABEL_17:
  outlined retain of URLComponents((uint64_t)&v339);
  v34 = URLComponents._URLComponents.percentEncodedUser.getter();
  v304 = v24;
  if (!v35)
  {
    outlined release of URLComponents((uint64_t)&v339);
    v39 = 0;
    goto LABEL_36;
  }
  v36 = v35;
  v37 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000) == 0)
    v37 = v34 & 0xFFFFFFFFFFFFLL;
  if (v37)
  {
    *(_QWORD *)&v321 = v34;
    *((_QWORD *)&v321 + 1) = v35;
    MEMORY[0x1E0C80A78](v34);
    *(&v296 - 2) = (uint64_t)&v321;
    *(&v296 - 1) = v38;
    v39 = 0;
    v41 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v296 - 4), v40, v36);
    if (v42 == 1)
    {
      v44 = *((_QWORD *)&v321 + 1);
      v43 = v321;
      swift_bridgeObjectRetain();
      v45 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v43, v44, MEMORY[0x1E0DEE9E8]);
      v47 = v46;
      swift_bridgeObjectRelease();
    }
    else
    {
      v45 = (void (*)(char *, _QWORD))v41;
      v47 = v42;
    }
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v339);
    v24 = v304;
    if (!v47)
      goto LABEL_36;
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v339);
    v45 = 0;
    v39 = 0;
    v47 = 0xE000000000000000;
  }
  *((_QWORD *)&v318[0] + 1) = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v317 = v45;
  *((_QWORD *)&v317 + 1) = v47;
  v321 = xmmword_182060F50;
  outlined init with take of Any(&v317, &v322);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v28 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1, (_QWORD *)v28);
  v52 = *(_QWORD *)(v28 + 16);
  v51 = *(_QWORD *)(v28 + 24);
  if (v52 >= v51 >> 1)
    v28 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, (_QWORD *)v28);
  *(_QWORD *)(v28 + 16) = v52 + 1;
  v53 = (_OWORD *)(v28 + 48 * v52);
  v54 = v321;
  v55 = v323;
  v53[3] = v322;
  v53[4] = v55;
  v53[2] = v54;
LABEL_36:
  v56 = v343;
  v301 = v1;
  if ((_QWORD)v343)
  {
    v57 = *((_QWORD *)&v342 + 1);
    v58 = outlined retain of URLComponents((uint64_t)&v339);
    v59 = v56;
    v60 = (unint64_t)v309;
  }
  else
  {
    v60 = (unint64_t)v309;
    if (BYTE11(v339) != 1 || !v300 || (v300[96] & 1) != 0)
      goto LABEL_55;
    outlined retain of URLComponents((uint64_t)&v339);
    v69 = String.subscript.getter();
    v57 = MEMORY[0x186DA4634](v69);
    v59 = v70;
    v24 = v304;
    v58 = swift_bridgeObjectRelease();
  }
  v61 = HIBYTE(v59) & 0xF;
  if ((v59 & 0x2000000000000000) == 0)
    v61 = v57 & 0xFFFFFFFFFFFFLL;
  if (!v61)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v339);
    v66 = 0;
    v68 = 0xE000000000000000;
LABEL_50:
    *((_QWORD *)&v318[0] + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v317 = v66;
    *((_QWORD *)&v317 + 1) = v68;
    v321 = xmmword_182060F60;
    outlined init with take of Any(&v317, &v322);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v71 = (_QWORD *)v28;
    else
      v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1, (_QWORD *)v28);
    v73 = v71[2];
    v72 = v71[3];
    if (v73 >= v72 >> 1)
      v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v72 > 1), v73 + 1, 1, v71);
    v71[2] = v73 + 1;
    v28 = (unint64_t)v71;
    v74 = &v71[6 * v73];
    v75 = v321;
    v76 = v323;
    v74[3] = v322;
    v74[4] = v76;
    v74[2] = v75;
    goto LABEL_55;
  }
  *(_QWORD *)&v321 = v57;
  *((_QWORD *)&v321 + 1) = v59;
  MEMORY[0x1E0C80A78](v58);
  *(&v296 - 2) = (uint64_t)&v321;
  *(&v296 - 1) = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v62 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v296 - 4), v57, v59);
  if (v63 == 1)
  {
    v65 = *((_QWORD *)&v321 + 1);
    v64 = v321;
    swift_bridgeObjectRetain();
    v66 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v64, v65, MEMORY[0x1E0DEE9E8]);
    v68 = v67;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v66 = (void (*)(char *, _QWORD))v62;
    v68 = v63;
    swift_bridgeObjectRelease_n();
  }
  outlined release of URLComponents((uint64_t)&v339);
  v24 = v304;
  if (v68)
    goto LABEL_50;
LABEL_55:
  outlined retain of URLComponents((uint64_t)&v339);
  v77 = URLComponents._URLComponents.encodedHost.getter();
  if (!v78)
  {
    outlined release of URLComponents((uint64_t)&v339);
    goto LABEL_112;
  }
  v79 = v77;
  v80 = v78;
  v81 = HIBYTE(v78) & 0xF;
  v82 = v77 & 0xFFFFFFFFFFFFLL;
  if ((v78 & 0x2000000000000000) != 0)
    v83 = HIBYTE(v78) & 0xF;
  else
    v83 = v77 & 0xFFFFFFFFFFFFLL;
  if (!v83)
  {
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v339);
    v88 = 0;
    v90 = 0xE000000000000000;
    goto LABEL_107;
  }
  if ((v347[24] & 1) != 0)
  {
    *(_QWORD *)&v321 = v77;
    *((_QWORD *)&v321 + 1) = v78;
    MEMORY[0x1E0C80A78](v77);
    *(&v296 - 2) = (uint64_t)&v321;
    *(&v296 - 1) = MEMORY[0x1E0DEE9E8];
    v84 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v296 - 4), v79, v80);
    if (v85 == 1)
    {
      v87 = *((_QWORD *)&v321 + 1);
      v86 = v321;
      swift_bridgeObjectRetain();
      v88 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v86, v87, MEMORY[0x1E0DEE9E8]);
      v90 = v89;
      swift_bridgeObjectRelease();
    }
    else
    {
      v88 = (uint64_t)v84;
      v90 = v85;
    }
    goto LABEL_105;
  }
  if ((v78 & 0x1000000000000000) != 0)
    goto LABEL_293;
  if ((v78 & 0x2000000000000000) != 0)
  {
    *(_QWORD *)&v321 = v77;
    *((_QWORD *)&v321 + 1) = v78 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v317 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((_QWORD *)&v317 + 1) = 0;
    swift_bridgeObjectRetain_n();
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v321, v81, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v317, 0, (unsigned __int8 *)&v321, v81, (uint64_t *)&v314);
    v90 = *((_QWORD *)&v314 + 1);
    v88 = v314;
    swift_release();
  }
  else
  {
    if ((v77 & 0x1000000000000000) != 0)
    {
      v98 = (unsigned __int8 *)((v78 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v98 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      v82 = v293;
    }
    *(_QWORD *)&v321 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((_QWORD *)&v321 + 1) = 0;
    swift_bridgeObjectRetain_n();
    v88 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v98, v82, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v321, 0, v98, v82);
    v90 = v99;
  }
  swift_bridgeObjectRelease();
  if (v90 != 1)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_106;
  }
  while (2)
  {
    *(_QWORD *)&v321 = v79;
    *((_QWORD *)&v321 + 1) = v80;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    v128 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v129 = objc_msgSend(v128, sel__fastCharacterContents);
    v130 = v128;
    if (v129)
    {
      *(_QWORD *)&v321 = v79;
      *((_QWORD *)&v321 + 1) = v80;
      StringProtocol._ephemeralString.getter();
      v131 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v132 = objc_msgSend(v131, sel_length);
      v133 = swift_unknownObjectRelease();
      MEMORY[0x1E0C80A78](v133);
      *((_BYTE *)&v296 - 16) = 0;
      MEMORY[0x1E0C80A78](v134);
      *(&v296 - 2) = (uint64_t)v129;
      *(&v296 - 1) = (uint64_t)v132;
      v88 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v129, (uint64_t)v132, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v135, (uint64_t (*)(uint64_t, _QWORD))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)(&v296 - 4));
      v90 = v136;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v339);
      if (!v90)
      {
LABEL_94:
        v24 = v304;
        goto LABEL_112;
      }
    }
    else
    {
      *(_QWORD *)&v321 = v79;
      *((_QWORD *)&v321 + 1) = v80;
      swift_bridgeObjectRetain();
      v139 = String.init<A>(_:)();
      v141 = v140;
      if ((v140 & 0x1000000000000000) != 0)
      {
        v139 = static String._copying(_:)();
        v295 = v294;
        swift_bridgeObjectRelease();
        v141 = v295;
      }
      if ((v141 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v321 = v139;
        *((_QWORD *)&v321 + 1) = v141 & 0xFFFFFFFFFFFFFFLL;
        *(_QWORD *)&v317 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((_QWORD *)&v317 + 1) = 0;
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v321, HIBYTE(v141) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v317, 0, (unsigned __int8 *)&v321, HIBYTE(v141) & 0xF, (uint64_t *)&v314);
        v90 = *((_QWORD *)&v314 + 1);
        v88 = v314;
        swift_release();
      }
      else
      {
        if ((v139 & 0x1000000000000000) != 0)
        {
          v142 = (unsigned __int8 *)((v141 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v143 = v139 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v142 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }
        *(_QWORD *)&v321 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((_QWORD *)&v321 + 1) = 0;
        v88 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v142, v143, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v321, 0, v142, v143);
        v90 = v144;
      }
      swift_bridgeObjectRelease_n();
LABEL_105:
      swift_bridgeObjectRelease();
LABEL_106:
      outlined release of URLComponents((uint64_t)&v339);
      if (!v90)
        goto LABEL_94;
    }
LABEL_107:
    *((_QWORD *)&v318[0] + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v317 = v88;
    *((_QWORD *)&v317 + 1) = v90;
    v321 = xmmword_182060F70;
    outlined init with take of Any(&v317, &v322);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v24 = v304;
      v145 = (_QWORD *)v28;
    }
    else
    {
      v145 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1, (_QWORD *)v28);
      v24 = v304;
    }
    v147 = v145[2];
    v146 = v145[3];
    if (v147 >= v146 >> 1)
      v145 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v146 > 1), v147 + 1, 1, v145);
    v145[2] = v147 + 1;
    v28 = (unint64_t)v145;
    v148 = &v145[6 * v147];
    v149 = v321;
    v150 = v323;
    v148[3] = v322;
    v148[4] = v150;
    v148[2] = v149;
LABEL_112:
    outlined retain of URLComponents((uint64_t)&v339);
    v151 = URLComponents._URLComponents.port.getter();
    v153 = v152;
    outlined release of URLComponents((uint64_t)&v339);
    if ((v153 & 1) != 0)
    {
      v154 = v28;
      v28 = (unint64_t)v305;
      v160 = v346;
      if ((_QWORD)v346)
      {
LABEL_118:
        v161 = *((_QWORD *)&v345 + 1);
        v162 = outlined retain of URLComponents((uint64_t)&v339);
        v163 = v160;
        goto LABEL_127;
      }
    }
    else
    {
      *((_QWORD *)&v318[0] + 1) = MEMORY[0x1E0DEB418];
      *(_QWORD *)&v317 = v151;
      v321 = xmmword_182060F80;
      outlined init with take of Any(&v317, &v322);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v154 = v28;
      else
        v154 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1, (_QWORD *)v28);
      v156 = *(_QWORD *)(v154 + 16);
      v155 = *(_QWORD *)(v154 + 24);
      v28 = (unint64_t)v305;
      if (v156 >= v155 >> 1)
        v154 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v155 > 1), v156 + 1, 1, (_QWORD *)v154);
      *(_QWORD *)(v154 + 16) = v156 + 1;
      v157 = (_OWORD *)(v154 + 48 * v156);
      v158 = v321;
      v159 = v323;
      v157[3] = v322;
      v157[4] = v159;
      v157[2] = v158;
      v160 = v346;
      if ((_QWORD)v346)
        goto LABEL_118;
    }
    if (BYTE14(v339) == 1 && v300)
    {
      if ((v300[168] & 1) != 0)
      {
        outlined retain of URLComponents((uint64_t)&v339);
        v164 = MEMORY[0x186DA5030](0, 0xE000000000000000);
      }
      else
      {
        outlined retain of URLComponents((uint64_t)&v339);
        v164 = String.subscript.getter();
      }
      v161 = MEMORY[0x186DA4634](v164);
      v163 = v165;
      v162 = swift_bridgeObjectRelease();
      v24 = v304;
    }
    else
    {
      v162 = outlined retain of URLComponents((uint64_t)&v339);
      v161 = 0;
      v163 = 0xE000000000000000;
    }
LABEL_127:
    v166 = HIBYTE(v163) & 0xF;
    if ((v163 & 0x2000000000000000) == 0)
      v166 = v161 & 0xFFFFFFFFFFFFLL;
    if (v166)
    {
      *(_QWORD *)&v321 = v161;
      *((_QWORD *)&v321 + 1) = v163;
      MEMORY[0x1E0C80A78](v162);
      *(&v296 - 2) = (uint64_t)&v321;
      *(&v296 - 1) = MEMORY[0x1E0DEE9E8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v167 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v296 - 4), v161, v163);
      if (v168 == 1)
      {
        v170 = *((_QWORD *)&v321 + 1);
        v169 = v321;
        swift_bridgeObjectRetain();
        v171 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v169, v170, MEMORY[0x1E0DEE9E8]);
        v173 = v172;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        v171 = (void (*)(char *, _QWORD))v167;
        v173 = v168;
        swift_bridgeObjectRelease_n();
      }
      v24 = v304;
      v174 = v301;
      if (!v173)
      {
        outlined release of URLComponents((uint64_t)&v339);
        v171 = 0;
        v173 = 0xE000000000000000;
        goto LABEL_137;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v171 = 0;
      v173 = 0xE000000000000000;
      v174 = v301;
    }
    outlined release of URLComponents((uint64_t)&v339);
LABEL_137:
    *((_QWORD *)&v318[0] + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v317 = v171;
    *((_QWORD *)&v317 + 1) = v173;
    v321 = xmmword_182060F90;
    outlined init with take of Any(&v317, &v322);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_283:
      v154 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v154 + 16) + 1, 1, (_QWORD *)v154);
    v175 = v302;
    v177 = *(_QWORD *)(v154 + 16);
    v176 = *(_QWORD *)(v154 + 24);
    v303 = v39;
    if (v177 >= v176 >> 1)
      v154 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v176 > 1), v177 + 1, 1, (_QWORD *)v154);
    *(_QWORD *)(v154 + 16) = v177 + 1;
    v178 = (_OWORD *)(v154 + 48 * v177);
    v179 = v321;
    v180 = v323;
    v178[3] = v322;
    v178[4] = v180;
    v178[2] = v179;
    v181 = *(_QWORD *)v347;
    if (*(_QWORD *)v347)
    {
      v182 = v28;
      v183 = v24;
      v297 = (_QWORD *)v154;
      v184 = *((_QWORD *)&v346 + 1);
      outlined retain of URLComponents((uint64_t)&v339);
      v185 = v181;
    }
    else
    {
      if (HIBYTE(v339) != 1 || !v300 || (v300[192] & 1) != 0)
        goto LABEL_248;
      v182 = v28;
      v297 = (_QWORD *)v154;
      outlined retain of URLComponents((uint64_t)&v339);
      v174 = v301;
      v175 = v302;
      v183 = v304;
      v230 = String.subscript.getter();
      v184 = MEMORY[0x186DA4634](v230);
      v185 = v231;
      swift_bridgeObjectRelease();
    }
    v186 = v184 & 0xFFFFFFFFFFFFLL;
    if ((v185 & 0x2000000000000000) != 0)
      v186 = HIBYTE(v185) & 0xF;
    if (!v186)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined release of URLComponents((uint64_t)&v339);
      v232 = MEMORY[0x1E0DEE9D8];
      v24 = v183;
LABEL_245:
      *((_QWORD *)&v318[0] + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URLQueryItem]);
      *(_QWORD *)&v317 = v232;
      v321 = xmmword_182060FA0;
      outlined init with take of Any(&v317, &v322);
      v154 = (uint64_t)v297;
      v260 = v297[2];
      v259 = v297[3];
      if (v260 >= v259 >> 1)
        v154 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v259 > 1), v260 + 1, 1, v297);
      v28 = v182;
      *(_QWORD *)(v154 + 16) = v260 + 1;
      v261 = (_OWORD *)(v154 + 48 * v260);
      v262 = v321;
      v263 = v323;
      v261[3] = v322;
      v261[4] = v263;
      v261[2] = v262;
LABEL_248:
      v264 = *(_QWORD *)&v347[16];
      if (*(_QWORD *)&v347[16])
      {
        v265 = *(_QWORD *)&v347[8];
        v266 = outlined retain of URLComponents((uint64_t)&v339);
        v267 = v264;
        goto LABEL_250;
      }
      if (v340 == 1 && v300 && (v300[216] & 1) == 0)
      {
        outlined retain of URLComponents((uint64_t)&v339);
        v174 = v301;
        v276 = String.subscript.getter();
        v265 = MEMORY[0x186DA4634](v276);
        v267 = v277;
        v24 = v304;
        v266 = swift_bridgeObjectRelease();
LABEL_250:
        v268 = HIBYTE(v267) & 0xF;
        if ((v267 & 0x2000000000000000) == 0)
          v268 = v265 & 0xFFFFFFFFFFFFLL;
        if (!v268)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          outlined release of URLComponents((uint64_t)&v339);
          v273 = 0;
          v275 = 0xE000000000000000;
          v175 = v302;
          goto LABEL_262;
        }
        *(_QWORD *)&v321 = v265;
        *((_QWORD *)&v321 + 1) = v267;
        MEMORY[0x1E0C80A78](v266);
        *(&v296 - 2) = (uint64_t)&v321;
        *(&v296 - 1) = MEMORY[0x1E0DEE9E8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v269 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v296 - 4), v265, v267);
        if (v270 == 1)
        {
          v272 = *((_QWORD *)&v321 + 1);
          v271 = v321;
          swift_bridgeObjectRetain();
          v273 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v271, v272, MEMORY[0x1E0DEE9E8]);
          v275 = v274;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
        }
        else
        {
          v273 = (void (*)(char *, _QWORD))v269;
          v275 = v270;
          swift_bridgeObjectRelease_n();
        }
        v174 = v301;
        v175 = v302;
        v24 = v304;
        outlined release of URLComponents((uint64_t)&v339);
        if (v275)
        {
LABEL_262:
          *((_QWORD *)&v318[0] + 1) = MEMORY[0x1E0DEA968];
          *(_QWORD *)&v317 = v273;
          *((_QWORD *)&v317 + 1) = v275;
          v321 = xmmword_182060FB0;
          outlined init with take of Any(&v317, &v322);
          v279 = *(_QWORD *)(v154 + 16);
          v278 = *(_QWORD *)(v154 + 24);
          if (v279 >= v278 >> 1)
            v154 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v278 > 1), v279 + 1, 1, (_QWORD *)v154);
          *(_QWORD *)(v154 + 16) = v279 + 1;
          v280 = (_OWORD *)(v154 + 48 * v279);
          v281 = v321;
          v282 = v323;
          v280[3] = v322;
          v280[4] = v282;
          v280[2] = v281;
        }
      }
      v327 = v345;
      v328 = v346;
      v329[0] = *(_OWORD *)v347;
      *(_OWORD *)((char *)v329 + 10) = *(_OWORD *)&v347[10];
      v323 = v341;
      v324 = v342;
      v325 = v343;
      v326 = v344;
      v321 = v339;
      v322 = v340;
      *(_QWORD *)&v317 = v154;
      v283 = *MEMORY[0x1E0DEDFB8];
      v284 = type metadata accessor for Mirror.DisplayStyle();
      v285 = *(_QWORD *)(v284 - 8);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v285 + 104))(v28, v283, v284);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v285 + 56))(v28, 0, 1, v284);
      (*(void (**)(char *, _QWORD, unint64_t))(v298 + 104))(v299, *MEMORY[0x1E0DEDFE8], v174);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A], &demangling cache variable for type metadata for [(label: String?, value: Any)], MEMORY[0x1E0DEAF50]);
      Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
      v286 = Mirror.children.getter();
      (*(void (**)(unint64_t, uint64_t))(v24 + 8))(v60, v175);
      v319 = 0;
      v320 = 0xE000000000000000;
      swift_retain();
      dispatch thunk of _AnySequenceBox._makeIterator()();
      swift_release();
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (*((_QWORD *)&v323 + 1))
      {
        v313 = v286;
        do
        {
          v317 = v321;
          v318[0] = v322;
          v318[1] = v323;
          v316._countAndFlagsBits = 0;
          v316._object = (void *)0xE000000000000000;
          v287 = (void *)*((_QWORD *)&v321 + 1);
          v288 = v321;
          v314 = v321;
          outlined init with copy of Any((uint64_t)v318, (uint64_t)v315);
          if (v287)
          {
            v289 = v287;
          }
          else
          {
            v288 = 0;
            v289 = (void *)0xE000000000000000;
          }
          swift_bridgeObjectRetain();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v315);
          v290._countAndFlagsBits = v288;
          v290._object = v289;
          String.append(_:)(v290);
          swift_bridgeObjectRelease();
          v291._countAndFlagsBits = 8250;
          v291._object = (void *)0xE200000000000000;
          String.append(_:)(v291);
          _print_unlocked<A, B>(_:_:)();
          v292._countAndFlagsBits = 32;
          v292._object = (void *)0xE100000000000000;
          String.append(_:)(v292);
          String.append(_:)(v316);
          swift_bridgeObjectRelease();
          outlined destroy of (label: String?, value: Any)((uint64_t)&v317);
          dispatch thunk of _AnyIteratorBoxBase.next()();
        }
        while (*((_QWORD *)&v323 + 1));
        v33 = v319;
      }
      else
      {
        v33 = 0;
      }
      swift_release();
      swift_release();
LABEL_274:
      outlined release of URLComponents((uint64_t)&v339);
      return (uint64_t)v33;
    }
    *(_QWORD *)&v317 = MEMORY[0x1E0DEE9D8];
    v310 = v186;
    v311 = v184;
    v187 = (v184 >> 59) & 1;
    if ((v185 & 0x1000000000000000) == 0)
      LOBYTE(v187) = 1;
    v313 = 4 << v187;
    v307 = v185 & 0xFFFFFFFFFFFFFFLL;
    v308 = 4 * v186;
    v306 = (v185 & 0xFFFFFFFFFFFFFFFLL) + 32;
    swift_bridgeObjectRetain();
    v312 = v185;
    swift_bridgeObjectRetain();
    v79 = 0;
    v188 = 0;
    LODWORD(v80) = 1;
    v24 = 15;
    v174 = 15;
    v28 = v182;
    v39 = v303;
    do
    {
      v60 = v24 & 0xC;
      v189 = v24;
      if (v60 == v313)
        v189 = _StringGuts._slowEnsureMatchingEncoding(_:)(v24, v311, v312);
      v154 = v189 >> 16;
      v190 = v311;
      v191 = v312;
      if (v189 >> 16 >= v310)
      {
        __break(1u);
LABEL_277:
        __break(1u);
LABEL_278:
        __break(1u);
LABEL_279:
        __break(1u);
LABEL_280:
        __break(1u);
LABEL_281:
        __break(1u);
LABEL_282:
        __break(1u);
        goto LABEL_283;
      }
      if ((v312 & 0x1000000000000000) != 0)
      {
        v193 = String.UTF8View._foreignSubscript(position:)();
        v190 = v311;
        v191 = v312;
      }
      else if ((v312 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v321 = v311;
        *((_QWORD *)&v321 + 1) = v307;
        v193 = *((_BYTE *)&v321 + v154);
      }
      else
      {
        v192 = v306;
        if ((v311 & 0x1000000000000000) == 0)
        {
          v192 = _StringObject.sharedUTF8.getter();
          v190 = v311;
          v191 = v312;
        }
        v193 = *(_BYTE *)(v192 + v154);
      }
      if (v193 != 38)
      {
        if ((v80 & 1) != 0)
          v194 = v24;
        else
          v194 = v188;
        if (v193 == 61)
        {
          v188 = v194;
          v80 = 0;
        }
        else
        {
          v80 = v80;
        }
        goto LABEL_166;
      }
      if ((v80 & 1) != 0)
      {
        if (v79 < v174 >> 14)
          goto LABEL_278;
        v195 = String.subscript.getter();
        v196 = MEMORY[0x186DA4634](v195);
        v28 = v197;
        v198 = swift_bridgeObjectRelease();
        v174 = 0;
        v199 = 0;
        goto LABEL_185;
      }
      if (v188 >> 14 < v174 >> 14)
        goto LABEL_279;
      v200 = String.subscript.getter();
      v174 = v201;
      v196 = MEMORY[0x186DA4634](v200);
      v28 = v202;
      swift_bridgeObjectRelease();
      if ((v188 & 0xC) == v313)
      {
        v188 = _StringGuts._slowEnsureMatchingEncoding(_:)(v188, v311, v312);
        if ((v312 & 0x1000000000000000) != 0)
        {
LABEL_181:
          if (v310 <= v188 >> 16)
            goto LABEL_282;
          v203 = String.UTF8View._foreignIndex(after:)();
          goto LABEL_183;
        }
      }
      else if ((v312 & 0x1000000000000000) != 0)
      {
        goto LABEL_181;
      }
      v203 = (v188 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_183:
      if (v79 < v203 >> 14)
        goto LABEL_280;
      v204 = String.subscript.getter();
      v174 = MEMORY[0x186DA4634](v204);
      v199 = v205;
      v198 = swift_bridgeObjectRelease();
LABEL_185:
      v206 = HIBYTE(v28) & 0xF;
      if ((v28 & 0x2000000000000000) == 0)
        v206 = v196 & 0xFFFFFFFFFFFFLL;
      if (v206)
      {
        *(_QWORD *)&v321 = v196;
        *((_QWORD *)&v321 + 1) = v28;
        MEMORY[0x1E0C80A78](v198);
        *(&v296 - 2) = (uint64_t)&v321;
        *(&v296 - 1) = MEMORY[0x1E0DEE9E8];
        swift_bridgeObjectRetain();
        v207 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v296 - 4), v196, v28);
        if (v208 == 1)
        {
          v210 = *((_QWORD *)&v321 + 1);
          v209 = v321;
          swift_bridgeObjectRetain();
          v154 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v209, v210, MEMORY[0x1E0DEE9E8]);
          v212 = v211;
          swift_bridgeObjectRelease();
        }
        else
        {
          v154 = (uint64_t)v207;
          v212 = v208;
        }
        swift_bridgeObjectRelease();
        v213 = swift_bridgeObjectRelease();
        if (v212)
        {
          if (!v199)
            goto LABEL_200;
          goto LABEL_194;
        }
      }
      else
      {
        v213 = swift_bridgeObjectRelease();
      }
      v154 = 0;
      v212 = 0xE000000000000000;
      if (!v199)
      {
LABEL_200:
        v219 = 0;
        goto LABEL_204;
      }
LABEL_194:
      v214 = HIBYTE(v199) & 0xF;
      if ((v199 & 0x2000000000000000) == 0)
        v214 = v174 & 0xFFFFFFFFFFFFLL;
      if (v214)
      {
        v303 = v154;
        *(_QWORD *)&v321 = v174;
        *((_QWORD *)&v321 + 1) = v199;
        MEMORY[0x1E0C80A78](v213);
        *(&v296 - 2) = (uint64_t)&v321;
        *(&v296 - 1) = MEMORY[0x1E0DEE9E8];
        swift_bridgeObjectRetain();
        v215 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v296 - 4), v174, v199);
        if (v216 == 1)
        {
          v217 = v321;
          swift_bridgeObjectRetain();
          v174 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v217, *((unint64_t *)&v217 + 1), MEMORY[0x1E0DEE9E8]);
          v219 = v218;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
        }
        else
        {
          v174 = (unint64_t)v215;
          v219 = v216;
          swift_bridgeObjectRelease_n();
        }
        v154 = v303;
      }
      else
      {
        swift_bridgeObjectRelease();
        v174 = 0;
        v219 = 0xE000000000000000;
      }
LABEL_204:
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v220 = *(_QWORD *)(v317 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v220);
      v221 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v220, v154, v212, v174, v219);
      destructiveProjectEnumData for PredicateCodableError(v221, v222);
      v223 = v24;
      if (v60 == v313)
        v223 = _StringGuts._slowEnsureMatchingEncoding(_:)(v24, v311, v312);
      v28 = (unint64_t)v305;
      v190 = v311;
      v191 = v312;
      if ((v312 & 0x1000000000000000) != 0)
      {
        if (v310 <= v223 >> 16)
          goto LABEL_281;
        v224 = String.UTF8View._foreignIndex(after:)();
        v190 = v311;
        v191 = v312;
        v174 = v224;
        v188 = 0;
        v80 = 1;
      }
      else
      {
        v188 = 0;
        v174 = (v223 & 0xFFFFFFFFFFFF0000) + 65540;
        v80 = 1;
      }
LABEL_166:
      if (v60 == v313)
      {
        v24 = _StringGuts._slowEnsureMatchingEncoding(_:)(v24, v190, v191);
        v60 = (unint64_t)v309;
        if ((v312 & 0x1000000000000000) == 0)
        {
LABEL_148:
          v24 = (v24 & 0xFFFFFFFFFFFF0000) + 65540;
          goto LABEL_149;
        }
      }
      else
      {
        v60 = (unint64_t)v309;
        if ((v191 & 0x1000000000000000) == 0)
          goto LABEL_148;
      }
      if (v310 <= v24 >> 16)
        goto LABEL_277;
      v24 = String.UTF8View._foreignIndex(after:)();
LABEL_149:
      v79 = v24 >> 14;
    }
    while (v24 >> 14 != v308);
    if ((v80 & 1) != 0)
    {
      if (v308 >= v174 >> 14)
      {
        v225 = String.subscript.getter();
        v154 = MEMORY[0x186DA4634](v225);
        v174 = v226;
        v227 = swift_bridgeObjectRelease();
        v228 = 0;
        v229 = 0;
        goto LABEL_224;
      }
      __break(1u);
LABEL_288:
      __break(1u);
      goto LABEL_289;
    }
    if (v188 >> 14 < v174 >> 14)
      goto LABEL_288;
    v233 = String.subscript.getter();
    v80 = v234;
    v154 = MEMORY[0x186DA4634](v233);
    v174 = v235;
    result = swift_bridgeObjectRelease();
    if ((v188 & 0xC) == v313)
    {
LABEL_289:
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v188, v311, v312);
      v188 = result;
      if ((v312 & 0x1000000000000000) != 0)
        goto LABEL_290;
LABEL_221:
      v236 = (v188 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_222:
      if (v308 < v236 >> 14)
      {
        __break(1u);
LABEL_293:
        swift_bridgeObjectRetain();
        continue;
      }
      v237 = String.subscript.getter();
      v228 = MEMORY[0x186DA4634](v237);
      v229 = v238;
      v227 = swift_bridgeObjectRelease();
LABEL_224:
      v239 = HIBYTE(v174) & 0xF;
      if ((v174 & 0x2000000000000000) == 0)
        v239 = v154 & 0xFFFFFFFFFFFFLL;
      if (v239)
      {
        *(_QWORD *)&v321 = v154;
        *((_QWORD *)&v321 + 1) = v174;
        MEMORY[0x1E0C80A78](v227);
        *(&v296 - 2) = (uint64_t)&v321;
        *(&v296 - 1) = MEMORY[0x1E0DEE9E8];
        swift_bridgeObjectRetain();
        v240 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v296 - 4), v154, v174);
        if (v241 == 1)
        {
          v243 = *((_QWORD *)&v321 + 1);
          v242 = v321;
          swift_bridgeObjectRetain();
          v244 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v242, v243, MEMORY[0x1E0DEE9E8]);
          v246 = v245;
          swift_bridgeObjectRelease();
        }
        else
        {
          v244 = (void (*)(char *, _QWORD))v240;
          v246 = v241;
        }
        swift_bridgeObjectRelease();
        v247 = swift_bridgeObjectRelease();
        v28 = (unint64_t)v305;
        if (v246)
          goto LABEL_233;
      }
      else
      {
        v247 = swift_bridgeObjectRelease();
      }
      v244 = 0;
      v246 = 0xE000000000000000;
LABEL_233:
      if (v229)
      {
        v248 = HIBYTE(v229) & 0xF;
        if ((v229 & 0x2000000000000000) == 0)
          v248 = v228 & 0xFFFFFFFFFFFFLL;
        if (v248)
        {
          *(_QWORD *)&v321 = v228;
          *((_QWORD *)&v321 + 1) = v229;
          MEMORY[0x1E0C80A78](v247);
          *(&v296 - 2) = (uint64_t)&v321;
          *(&v296 - 1) = MEMORY[0x1E0DEE9E8];
          swift_bridgeObjectRetain();
          v249 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v296 - 4), v228, v229);
          if (v250 == 1)
          {
            v252 = *((_QWORD *)&v321 + 1);
            v251 = v321;
            swift_bridgeObjectRetain();
            v228 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v251, v252, MEMORY[0x1E0DEE9E8]);
            v254 = v253;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }
          else
          {
            v228 = (uint64_t)v249;
            v254 = v250;
            swift_bridgeObjectRelease_n();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v228 = 0;
          v254 = 0xE000000000000000;
        }
      }
      else
      {
        v254 = 0;
      }
      v303 = v39;
      v255 = (_QWORD *)v317;
      v182 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v255 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v255[2] + 1, 1, v255);
        *(_QWORD *)&v317 = v255;
      }
      v256 = v255[2];
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v256);
      v257 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v256, (uint64_t)v244, v246, v228, v254);
      destructiveProjectEnumData for PredicateCodableError(v257, v258);
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v339);
      v232 = v317;
      v174 = v301;
      v175 = v302;
      v24 = v304;
      goto LABEL_245;
    }
    break;
  }
  if ((v312 & 0x1000000000000000) == 0)
    goto LABEL_221;
LABEL_290:
  if (v310 > v188 >> 16)
  {
    v236 = String.UTF8View._foreignIndex(after:)();
    v28 = (unint64_t)v305;
    v60 = (unint64_t)v309;
    goto LABEL_222;
  }
LABEL_300:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ICULegacyNumberFormatter()
{
  return objc_opt_self();
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt64 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt64 v33;
  Swift::UInt64 v34;
  int v35;
  Swift::UInt v36;
  Swift::UInt v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  Swift::UInt v42;
  uint64_t v43;
  int *v44;
  char *v45;
  char *v46;
  int v47;
  Swift::UInt v48;
  Swift::UInt64 v49;
  Swift::UInt v50;
  uint64_t v51;
  Swift::UInt8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  Swift::UInt v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  unint64_t v66;
  unint64_t v67;
  Swift::UInt v68;
  Swift::UInt v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  Swift::UInt v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int64_t v79;
  unint64_t v80;
  unint64_t v81;
  Swift::UInt v82;
  Swift::UInt v83;
  int64_t v84;
  unint64_t v85;
  int64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  Swift::UInt v107;
  Swift::UInt v108;
  Swift::UInt8 v109;
  Swift::UInt8 v110;
  Swift::UInt8 v111;
  Swift::Int v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  int64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t (*v126)(_QWORD);
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int64_t v139;
  Swift::UInt64 *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  char v161;
  char v162;
  char v163;
  _BYTE v164[144];
  _BYTE v165[144];
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  char v176[80];

  v7 = v4;
  v132 = type metadata accessor for FloatingPointRoundingRule();
  v9 = *(_QWORD *)(v132 - 8);
  MEMORY[0x1E0C80A78](v132);
  v128 = (char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v11);
  v131 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a3(0);
  v133 = *(_QWORD *)(v13 - 8);
  v134 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (Swift::UInt64 *)((char *)&v121 - v14);
  v16 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v135 = a2;
  v17 = static _DictionaryStorage.resize(original:capacity:move:)();
  v18 = v17;
  if (!*(_QWORD *)(v16 + 16))
    goto LABEL_164;
  v19 = 1 << *(_BYTE *)(v16 + 32);
  v20 = *(_QWORD *)(v16 + 64);
  v124 = (_QWORD *)(v16 + 64);
  if (v19 < 64)
    v21 = ~(-1 << v19);
  else
    v21 = -1;
  v22 = v21 & v20;
  v122 = v7;
  v123 = (unint64_t)(v19 + 63) >> 6;
  v130 = (char *)(v15 + 2);
  v23 = v17 + 64;
  swift_retain();
  v24 = 0;
  v126 = a3;
  v127 = v16;
  v125 = v18;
  v129 = v9;
  v140 = v15;
  while (1)
  {
    if (v22)
    {
      v138 = (v22 - 1) & v22;
      v27 = __clz(__rbit64(v22)) | (v24 << 6);
    }
    else
    {
      v28 = v24 + 1;
      if (__OFADD__(v24, 1))
        goto LABEL_169;
      if (v28 >= v123)
        goto LABEL_159;
      v29 = v124[v28];
      ++v24;
      if (!v29)
      {
        v24 = v28 + 1;
        if (v28 + 1 >= v123)
          goto LABEL_159;
        v29 = v124[v24];
        if (!v29)
        {
          v30 = v28 + 2;
          if (v30 >= v123)
            goto LABEL_159;
          v29 = v124[v30];
          if (!v29)
          {
            while (1)
            {
              v24 = v30 + 1;
              if (__OFADD__(v30, 1))
                goto LABEL_170;
              if (v24 >= v123)
                break;
              v29 = v124[v24];
              ++v30;
              if (v29)
                goto LABEL_21;
            }
LABEL_159:
            swift_release();
            v7 = v122;
            if ((v135 & 1) != 0)
            {
              v120 = 1 << *(_BYTE *)(v16 + 32);
              if (v120 >= 64)
                bzero(v124, ((unint64_t)(v120 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v124 = -1 << v120;
              *(_QWORD *)(v16 + 16) = 0;
            }
LABEL_164:
            swift_release();
            *v7 = v18;
            return;
          }
          v24 = v30;
        }
      }
LABEL_21:
      v138 = (v29 - 1) & v29;
      v27 = __clz(__rbit64(v29)) + (v24 << 6);
    }
    v31 = *(_QWORD *)(v133 + 72);
    v32 = *(_QWORD *)(v16 + 48) + v31 * v27;
    v139 = v24;
    v137 = v31;
    if ((v135 & 1) != 0)
    {
      outlined init with take of ICUNumberFormatter.Signature(v32, (uint64_t)v15, a3);
      v136 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v27);
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature(v32, (uint64_t)v15, a3);
      v136 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v27);
      swift_retain();
    }
    Hasher.init(_seed:)();
    v168 = v173;
    v169 = v174;
    v170 = v175;
    v166 = v171;
    v167 = v172;
    if (*((_BYTE *)v15 + 8) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v33 = *v140;
      Hasher._combine(_:)(1u);
      if ((v33 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v34 = v33;
      else
        v34 = 0;
      v15 = v140;
      Hasher._combine(_:)(v34);
    }
    outlined init with take of LocalePreferences?((uint64_t)v130, (uint64_t)v176, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
    specialized Optional<A>.hash(into:)();
    v35 = *((unsigned __int8 *)v15 + 73);
    if (v35 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v36 = v35 & 1;
      Hasher._combine(_:)(1u);
      v37 = v36;
      v15 = v140;
      Hasher._combine(_:)(v37);
    }
    v38 = *((unsigned __int16 *)v15 + 37);
    v39 = v38 | (*((unsigned __int8 *)v15 + 76) << 16);
    if (v38 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      v15 = v140;
      Hasher._combine(_:)(v39 & 1);
      Hasher._combine(_:)((v39 >> 8) & 1);
      Hasher._combine(_:)(HIWORD(v39) & 1);
    }
    v40 = v132;
    v41 = *((unsigned __int8 *)v15 + 77);
    if (v41 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v42 = v41 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v42);
    }
    v43 = (uint64_t)v131;
    v44 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    outlined init with copy of FloatingPointRoundingRule?((uint64_t)v140 + v44[9], v43);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v43, 1, v40) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v45 = v128;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v128, v43, v40);
      Hasher._combine(_:)(1u);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v45, v40);
    }
    v46 = (char *)v140 + v44[10];
    v47 = v46[8];
    if (v47 == 255)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v48 = *(_QWORD *)v46;
      Hasher._combine(_:)(1u);
      if ((v47 & 1) != 0)
      {
        Hasher._combine(_:)(1uLL);
        if ((v48 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v49 = v48;
        else
          v49 = 0;
        Hasher._combine(_:)(v49);
      }
      else
      {
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(v48);
      }
      v9 = v129;
    }
    v50 = *((unsigned __int8 *)v140 + v44[11]);
    if (v50 == 3)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v50);
    }
    v51 = v134;
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v15 = v140;
    swift_bridgeObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v15 + *(int *)(v51 + 24), (uint64_t)v164, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v164, (uint64_t)v165, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v165) == 1)
    {
      Hasher._combine(_:)(0);
      goto LABEL_150;
    }
    outlined init with take of LocalePreferences?((uint64_t)v164, (uint64_t)&v146, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v146 == 2)
    {
      v52 = 0;
    }
    else
    {
      v52 = v146 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v52);
    v53 = v147;
    if (!v147)
    {
      Hasher._combine(_:)(0);
      outlined retain of LocalePreferences(&v146);
      v58 = &v146;
      goto LABEL_71;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v53 + 16));
    v54 = *(_QWORD *)(v53 + 16);
    if (v54)
      break;
    outlined init with take of LocalePreferences?((uint64_t)v164, (uint64_t)&v141, &demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v164, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
    v58 = (uint64_t *)&v141;
LABEL_71:
    outlined retain of LocalePreferences(v58);
    if (v148)
      goto LABEL_72;
LABEL_65:
    Hasher._combine(_:)(0);
    if (v149)
      goto LABEL_73;
LABEL_66:
    Hasher._combine(_:)(0);
    v56 = v150;
    if (v150)
      goto LABEL_74;
LABEL_67:
    Hasher._combine(_:)(0);
    v57 = v151;
    if (v151)
      goto LABEL_96;
LABEL_68:
    Hasher._combine(_:)(0);
LABEL_118:
    v87 = v152;
    v88 = v153;
    v90 = v154;
    v89 = v155;
    v91 = v156;
    if (v152)
    {
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v92 = v88;
      v93 = v90;
      v94 = v89;
      v95 = v91;
      v96 = v87;
      _CFObject.hash(into:)();
      if (v88)
        goto LABEL_120;
    }
    else
    {
      Hasher._combine(_:)(0);
      v101 = v91;
      v102 = v88;
      v103 = v90;
      v104 = v89;
      if (v88)
      {
LABEL_120:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        v97 = v88;
        _CFObject.hash(into:)();

        if (v90)
          goto LABEL_121;
        goto LABEL_126;
      }
    }
    Hasher._combine(_:)(0);
    if (v90)
    {
LABEL_121:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v98 = v90;
      _CFObject.hash(into:)();

      if (v89)
        goto LABEL_122;
      goto LABEL_127;
    }
LABEL_126:
    Hasher._combine(_:)(0);
    if (v89)
    {
LABEL_122:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v99 = v89;
      _CFObject.hash(into:)();

      if (v91)
        goto LABEL_123;
      goto LABEL_128;
    }
LABEL_127:
    Hasher._combine(_:)(0);
    if (v91)
    {
LABEL_123:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v100 = v91;
      _CFObject.hash(into:)();

      goto LABEL_129;
    }
LABEL_128:
    Hasher._combine(_:)(0);
    v100 = 0;
LABEL_129:
    v16 = v127;

    v105 = v157;
    if (v105)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v166, v105);
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v18 = v125;
    a3 = v126;
    v9 = v129;
    v106 = v158;
    if (v158)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v166, v106);
      swift_bridgeObjectRelease();
      if (!v159)
        goto LABEL_136;
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!v159)
      {
LABEL_136:
        Hasher._combine(_:)(0);
        goto LABEL_137;
      }
    }
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_137:
    if (v160 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v107 = v160 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v107);
    }
    if (v161 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v108 = v161 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v108);
    }
    if (v162 == 2)
    {
      v109 = 0;
    }
    else
    {
      v109 = v162 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v109);
    if (v163 == 2)
    {
      v110 = 0;
    }
    else
    {
      v111 = v163 & 1;
      Hasher._combine(_:)(1u);
      v110 = v111;
    }
    Hasher._combine(_:)(v110);
    outlined retain of LocalePreferences?((uint64_t)v164, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    outlined retain of LocalePreferences?((uint64_t)v164, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
    v15 = v140;
LABEL_150:
    v112 = Hasher._finalize()();
    v113 = -1 << *(_BYTE *)(v18 + 32);
    v114 = v112 & ~v113;
    v115 = v114 >> 6;
    if (((-1 << v114) & ~*(_QWORD *)(v23 + 8 * (v114 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v114) & ~*(_QWORD *)(v23 + 8 * (v114 >> 6)))) | v114 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v116 = 0;
      v117 = (unint64_t)(63 - v113) >> 6;
      do
      {
        if (++v115 == v117 && (v116 & 1) != 0)
        {
          __break(1u);
          goto LABEL_165;
        }
        v118 = v115 == v117;
        if (v115 == v117)
          v115 = 0;
        v116 |= v118;
        v119 = *(_QWORD *)(v23 + 8 * v115);
      }
      while (v119 == -1);
      v25 = __clz(__rbit64(~v119)) + (v115 << 6);
    }
    v26 = v137;
    *(_QWORD *)(v23 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v15, *(_QWORD *)(v18 + 48) + v26 * v25, a3);
    *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v25) = v136;
    ++*(_QWORD *)(v18 + 16);
    v22 = v138;
    v24 = v139;
  }
  outlined retain of LocalePreferences?((uint64_t)v164, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v164, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v55 = v53 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v55 += 16;
    --v54;
  }
  while (v54);
  swift_bridgeObjectRelease();
  if (!v148)
    goto LABEL_65;
LABEL_72:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v149)
    goto LABEL_66;
LABEL_73:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v56 = v150;
  if (!v150)
    goto LABEL_67;
LABEL_74:
  Hasher._combine(_:)(1u);
  v59 = 0;
  v60 = 0;
  v61 = v56 + 64;
  v62 = 1 << *(_BYTE *)(v56 + 32);
  if (v62 < 64)
    v63 = ~(-1 << v62);
  else
    v63 = -1;
  v64 = v63 & *(_QWORD *)(v56 + 64);
  v65 = (unint64_t)(v62 + 63) >> 6;
  while (2)
  {
    if (v64)
    {
      v66 = __clz(__rbit64(v64));
      v64 &= v64 - 1;
      v67 = v66 | (v60 << 6);
LABEL_79:
      v68 = *(unsigned __int8 *)(*(_QWORD *)(v56 + 48) + v67);
      v69 = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * v67);
      v141 = v166;
      v142 = v167;
      v143 = v168;
      v144 = v169;
      v145 = v170;
      Hasher._combine(_:)(v68);
      Hasher._combine(_:)(v69);
      v59 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  v70 = v60 + 1;
  if (__OFADD__(v60, 1))
  {
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
    goto LABEL_167;
  }
  if (v70 >= v65)
    goto LABEL_95;
  v71 = *(_QWORD *)(v61 + 8 * v70);
  ++v60;
  if (v71)
    goto LABEL_94;
  v60 = v70 + 1;
  if (v70 + 1 >= v65)
    goto LABEL_95;
  v71 = *(_QWORD *)(v61 + 8 * v60);
  if (v71)
    goto LABEL_94;
  v60 = v70 + 2;
  if (v70 + 2 >= v65)
    goto LABEL_95;
  v71 = *(_QWORD *)(v61 + 8 * v60);
  if (v71)
  {
LABEL_94:
    v64 = (v71 - 1) & v71;
    v67 = __clz(__rbit64(v71)) + (v60 << 6);
    goto LABEL_79;
  }
  v72 = v70 + 3;
  if (v72 < v65)
  {
    v71 = *(_QWORD *)(v61 + 8 * v72);
    if (!v71)
    {
      while (1)
      {
        v60 = v72 + 1;
        if (__OFADD__(v72, 1))
          break;
        if (v60 >= v65)
          goto LABEL_95;
        v71 = *(_QWORD *)(v61 + 8 * v60);
        ++v72;
        if (v71)
          goto LABEL_94;
      }
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
    v60 = v72;
    goto LABEL_94;
  }
LABEL_95:
  swift_bridgeObjectRetain();
  Hasher._combine(_:)(v59);
  swift_bridgeObjectRelease();
  v57 = v151;
  if (!v151)
    goto LABEL_68;
LABEL_96:
  Hasher._combine(_:)(1u);
  v73 = 0;
  v74 = 0;
  v75 = v57 + 64;
  v76 = 1 << *(_BYTE *)(v57 + 32);
  if (v76 < 64)
    v77 = ~(-1 << v76);
  else
    v77 = -1;
  v78 = v77 & *(_QWORD *)(v57 + 64);
  v79 = (unint64_t)(v76 + 63) >> 6;
  while (2)
  {
    if (v78)
    {
      v80 = __clz(__rbit64(v78));
      v78 &= v78 - 1;
      v81 = v80 | (v74 << 6);
LABEL_101:
      v82 = *(unsigned __int8 *)(*(_QWORD *)(v57 + 48) + v81);
      v83 = *(_QWORD *)(*(_QWORD *)(v57 + 56) + 8 * v81);
      v141 = v166;
      v142 = v167;
      v143 = v168;
      v144 = v169;
      v145 = v170;
      Hasher._combine(_:)(v82);
      Hasher._combine(_:)(v83);
      v73 ^= Hasher._finalize()();
      continue;
    }
    break;
  }
  v84 = v74 + 1;
  if (__OFADD__(v74, 1))
    goto LABEL_166;
  if (v84 >= v79)
  {
LABEL_117:
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v73);
    swift_bridgeObjectRelease();
    goto LABEL_118;
  }
  v85 = *(_QWORD *)(v75 + 8 * v84);
  ++v74;
  if (v85)
    goto LABEL_116;
  v74 = v84 + 1;
  if (v84 + 1 >= v79)
    goto LABEL_117;
  v85 = *(_QWORD *)(v75 + 8 * v74);
  if (v85)
    goto LABEL_116;
  v74 = v84 + 2;
  if (v84 + 2 >= v79)
    goto LABEL_117;
  v85 = *(_QWORD *)(v75 + 8 * v74);
  if (v85)
  {
LABEL_116:
    v78 = (v85 - 1) & v85;
    v81 = __clz(__rbit64(v85)) + (v74 << 6);
    goto LABEL_101;
  }
  v86 = v84 + 3;
  if (v86 >= v79)
    goto LABEL_117;
  v85 = *(_QWORD *)(v75 + 8 * v86);
  if (v85)
  {
    v74 = v86;
    goto LABEL_116;
  }
  while (1)
  {
    v74 = v86 + 1;
    if (__OFADD__(v86, 1))
      break;
    if (v74 >= v79)
      goto LABEL_117;
    v85 = *(_QWORD *)(v75 + 8 * v74);
    ++v86;
    if (v85)
      goto LABEL_116;
  }
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
}

uint64_t BinaryInteger.formatted<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  _QWORD v19[4];

  v19[2] = a5;
  v19[3] = a1;
  v19[1] = a6;
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, v6, a2, v15);
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 48))(v17, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance ByteCountFormatStyle@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v3;
  uint64_t result;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  ByteCountFormatStyle.Attributed._format(_:doubleValue:)((uint64_t *)&v6, (double)*a1);
  v3 = v6[2];
  v7 = v6[1];
  v8 = v3;
  v9 = v6[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  result = String.init<A>(_:)();
  *a2 = result;
  a2[1] = v5;
  return result;
}

char *specialized static ICUByteCountNumberFormatter.create(for:locale:)(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  _QWORD *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  uint64_t v24;
  _BOOL8 v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *result;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  os_unfair_lock_s *v59;
  void (*v60)(uint64_t, uint64_t);
  int64_t v61;
  void *__src;
  char *__srca;
  uint64_t v64;
  _OWORD v65[9];
  _BYTE v66[28];
  _BYTE v67[144];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  _BYTE v78[45];
  __int128 v79;
  __int128 v80;
  _OWORD v81[7];
  _OWORD v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[2];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 8);
  ObjectType = swift_getObjectType();
  v7 = *(void (**)(uint64_t, uint64_t))(v5 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v60 = v7;
  v8 = ((uint64_t (*)(uint64_t, uint64_t))v7)(ObjectType, v5);
  v10 = v9;
  v11 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  v11(&v83, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)&v83, (uint64_t)v78, &demangling cache variable for type metadata for LocalePreferences?);
  __src = a1;
  *(_QWORD *)&v79 = a1;
  *((_QWORD *)&v79 + 1) = a2;
  *(_QWORD *)&v80 = v8;
  *((_QWORD *)&v80 + 1) = v10;
  outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1)
    swift_once();
  v12 = qword_1EDC34D40;
  v56 = static ICUByteCountNumberFormatter.cache;
  v76 = v81[6];
  v77[0] = v82[0];
  *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)((char *)v82 + 12);
  v72 = v81[2];
  v73 = v81[3];
  v74 = v81[4];
  v75 = v81[5];
  v68 = v79;
  v69 = v80;
  v13 = qword_1EDC34D40 + 16;
  v14 = (os_unfair_lock_s *)(qword_1EDC34D40 + 24);
  v70 = v81[0];
  v71 = v81[1];
  swift_retain_n();
  os_unfair_lock_lock(v14);
  v91 = v76;
  v92[0] = v77[0];
  *(_OWORD *)((char *)v92 + 12) = *(_OWORD *)((char *)v77 + 12);
  v87 = v72;
  v88 = v73;
  v89 = v74;
  v90 = v75;
  v83 = v68;
  v84 = v69;
  v85 = v70;
  v86 = v71;
  v57 = (uint64_t *)v13;
  v15 = (_QWORD *)specialized closure #1 in FormatterCache.formatter(for:creator:)(v13, (uint64_t)&v83);
  v59 = v14;
  v16 = v14;
  v17 = v12;
  os_unfair_lock_unlock(v16);
  swift_release();
  if (v15 != (_QWORD *)1)
    goto LABEL_56;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v60(ObjectType, v5);
  v11(&v83, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)&v83, (uint64_t)v67, &demangling cache variable for type metadata for LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  type metadata accessor for ICUByteCountNumberFormatter();
  v15 = (_QWORD *)swift_allocObject();
  v15[3] = __src;
  v15[4] = a2;
  swift_bridgeObjectRetain();
  v18 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)__src, a2);
  v19 = swift_bridgeObjectRelease();
  LODWORD(v65[0]) = 0;
  if (v18[2] >> 31)
  {
    __break(1u);
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v20 = unumf_openForSkeletonAndLocale();
    swift_release();
    swift_release();
    LOBYTE(v11) = (_BYTE)v57;
    v21 = v59;
    if (v20)
    {
      v15[2] = v20;
    }
    else
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ICUNumberFormatterBase();
      swift_deallocPartialClassInstance();
      v15 = 0;
    }
    swift_retain();
    os_unfair_lock_lock(v59);
    if (v56 >= *(_QWORD *)(*(_QWORD *)(v12 + 16) + 16))
      swift_bridgeObjectRetain();
    else
      *v57 = MEMORY[0x1E0DEE9E0];
    v91 = v76;
    v92[0] = v77[0];
    *(_OWORD *)((char *)v92 + 12) = *(_OWORD *)((char *)v77 + 12);
    v87 = v72;
    v88 = v73;
    v89 = v74;
    v90 = v75;
    v83 = v68;
    v84 = v69;
    v85 = v70;
    v86 = v71;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v64 = *v57;
    v12 = *v57;
    *v57 = 0x8000000000000000;
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(&v83);
    v24 = *(_QWORD *)(v12 + 16);
    v25 = (v23 & 1) == 0;
    v26 = __OFADD__(v24, v25);
    v27 = v24 + v25;
    if (!v26)
    {
      LOBYTE(v11) = v23;
      if (*(_QWORD *)(v12 + 24) < v27)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
        v28 = v64;
        v19 = specialized __RawDictionaryStorage.find<A>(_:)(&v83);
        if ((v11 & 1) == (v29 & 1))
          goto LABEL_17;
        v19 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v28 = v12;
LABEL_17:
        if ((v11 & 1) != 0)
        {
LABEL_18:
          v30 = *(_QWORD *)(v28 + 56);
          v31 = 8 * v19;
          swift_release();
          *(_QWORD *)(v30 + v31) = v15;
LABEL_55:
          *(_QWORD *)(v17 + 16) = v28;
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock(v21);
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of ICUDateIntervalFormatter??(1);
LABEL_56:
          swift_release();
          outlined release of ICUByteCountNumberFormatter.Signature((uint64_t)&v79);
          return (char *)v15;
        }
LABEL_54:
        specialized _NativeDictionary._insert(at:key:value:)(v19, &v83, v15, v28);
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v83);
        goto LABEL_55;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  v58 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUByteCountNumberFormatter.Signature, ICUByteCountNumberFormatter?>);
  v32 = static _DictionaryStorage.copy(original:)();
  v28 = v32;
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_53:
    swift_bridgeObjectRelease();
    v19 = v58;
    v21 = v59;
    if ((v11 & 1) != 0)
      goto LABEL_18;
    goto LABEL_54;
  }
  result = (char *)(v32 + 64);
  __srca = (char *)(v12 + 64);
  v34 = (unint64_t)((1 << *(_BYTE *)(v28 + 32)) + 63) >> 6;
  if (v28 != v12 || result >= &__srca[8 * v34])
    result = (char *)memmove(result, __srca, 8 * v34);
  v35 = 0;
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(v12 + 16);
  v36 = 1 << *(_BYTE *)(v12 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & *(_QWORD *)(v12 + 64);
  v61 = (unint64_t)(v36 + 63) >> 6;
  while (1)
  {
    if (v38)
    {
      v39 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v40 = v39 | (v35 << 6);
      goto LABEL_29;
    }
    v52 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v52 >= v61)
      goto LABEL_53;
    v53 = *(_QWORD *)&__srca[8 * v52];
    ++v35;
    if (!v53)
    {
      v35 = v52 + 1;
      if (v52 + 1 >= v61)
        goto LABEL_53;
      v53 = *(_QWORD *)&__srca[8 * v35];
      if (!v53)
      {
        v35 = v52 + 2;
        if (v52 + 2 >= v61)
          goto LABEL_53;
        v53 = *(_QWORD *)&__srca[8 * v35];
        if (!v53)
        {
          v35 = v52 + 3;
          if (v52 + 3 >= v61)
            goto LABEL_53;
          v53 = *(_QWORD *)&__srca[8 * v35];
          if (!v53)
          {
            v35 = v52 + 4;
            if (v52 + 4 >= v61)
              goto LABEL_53;
            v53 = *(_QWORD *)&__srca[8 * v35];
            if (!v53)
            {
              v35 = v52 + 5;
              if (v52 + 5 >= v61)
                goto LABEL_53;
              v53 = *(_QWORD *)&__srca[8 * v35];
              if (!v53)
              {
                v35 = v52 + 6;
                if (v52 + 6 >= v61)
                  goto LABEL_53;
                v53 = *(_QWORD *)&__srca[8 * v35];
                if (!v53)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_52:
    v38 = (v53 - 1) & v53;
    v40 = __clz(__rbit64(v53)) + (v35 << 6);
LABEL_29:
    v41 = (_OWORD *)(*(_QWORD *)(v12 + 48) + 176 * v40);
    v42 = v41[3];
    v43 = v41[4];
    v44 = v41[6];
    v65[5] = v41[5];
    v65[6] = v44;
    v65[3] = v42;
    v65[4] = v43;
    v45 = v41[7];
    v46 = v41[8];
    v47 = v41[9];
    *(_OWORD *)&v66[12] = *(_OWORD *)((char *)v41 + 156);
    v65[8] = v46;
    *(_OWORD *)v66 = v47;
    v65[7] = v45;
    v49 = v41[1];
    v48 = v41[2];
    v65[0] = *v41;
    v65[1] = v49;
    v65[2] = v48;
    v50 = 8 * v40;
    v51 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v40);
    memmove((void *)(*(_QWORD *)(v28 + 48) + 176 * v40), v41, 0xACuLL);
    *(_QWORD *)(*(_QWORD *)(v28 + 56) + v50) = v51;
    outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)v65);
    result = (char *)swift_retain();
  }
  v54 = v52 + 7;
  if (v54 >= v61)
    goto LABEL_53;
  v55 = v17;
  v53 = *(_QWORD *)&__srca[8 * v54];
  if (v53)
  {
    v35 = v54;
    goto LABEL_52;
  }
  while (1)
  {
    v35 = v54 + 1;
    if (__OFADD__(v54, 1))
      break;
    v17 = v55;
    if (v35 >= v61)
      goto LABEL_53;
    v53 = *(_QWORD *)&__srca[8 * v35];
    ++v54;
    if (v53)
      goto LABEL_52;
  }
LABEL_58:
  __break(1u);
  return result;
}

void ICUNumberFormatterBase.attributedFormatPositions(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1819A0F44()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_allocObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  v2 = swift_retain_n();
  MEMORY[0x1E0C80A78](v2);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v24, (uint64_t *)(v0 - 120));
  v4 = *(_QWORD *)(v0 - 120);
  v3 = *(_QWORD *)(v0 - 112);
  swift_release_n();
  if (!v3)
  {
    swift_release_n();
    return 0;
  }
  type metadata accessor for ICU.FieldPositer();
  inited = swift_initStackObject();
  *(_DWORD *)(v0 - 120) = 0;
  v6 = ufieldpositer_open();
  if (v6)
  {
    *(_QWORD *)(inited + 16) = v6;
    if (*(int *)(v0 - 120) < 1)
    {
      *(_DWORD *)(v0 - 120) = 0;
      unumf_resultGetAllFieldPositions();
      if (*(int *)(v0 - 120) < 1)
      {
        *(_QWORD *)(v0 - 160) = 0;
        v7 = ufieldpositer_next();
        *(_QWORD *)(v0 - 168) = inited;
        if ((v7 & 0x80000000) == 0)
        {
          v8 = v7;
          v9 = *(int *)(v0 - 160);
          v10 = *(int *)(v0 - 156);
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
          v13 = v11[2];
          v12 = v11[3];
          v14 = v13 + 1;
          if (v13 >= v12 >> 1)
          {
            v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
            v14 = v13 + 1;
            v11 = v23;
          }
          v11[2] = v14;
          v15 = &v11[3 * v13];
          *((_DWORD *)v15 + 8) = v8;
          v15[5] = v10;
          v15[6] = v9;
          v16 = ufieldpositer_next();
          if ((v16 & 0x80000000) == 0)
          {
            v17 = v16;
            do
            {
              v18 = *(int *)(v0 - 160);
              v19 = *(int *)(v0 - 156);
              v21 = v11[2];
              v20 = v11[3];
              if (v21 >= v20 >> 1)
                v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v11);
              v11[2] = v21 + 1;
              v22 = &v11[3 * v21];
              *((_DWORD *)v22 + 8) = v17;
              v22[5] = v19;
              v22[6] = v18;
              v17 = ufieldpositer_next();
            }
            while ((v17 & 0x80000000) == 0);
          }
        }
        swift_release_n();
        swift_setDeallocating();
        ufieldpositer_close();
        return v4;
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
    }
    return 0;
  }
  __break(1u);
  swift_release_n();
  result = swift_willThrow();
  __break(1u);
  return result;
}

uint64_t outlined release of ByteCountFormatStyle.Attributed(uint64_t a1)
{
  swift_unknownObjectRelease();
  return a1;
}

uint64_t ByteCountFormatStyle.Units.smallestUnit.getter()
{
  uint64_t *v0;
  uint64_t v1;
  BOOL v2;
  int v4;
  unsigned int v5;

  v1 = *v0;
  if ((unsigned __int16)*v0)
    v2 = (unsigned __int16)*v0 == 0xFFFF;
  else
    v2 = 1;
  if (v2)
    return 0;
  if ((v1 & 1) != 0)
    return 1;
  if ((v1 & 4) != 0)
    v4 = 4;
  else
    v4 = 5;
  if ((~(_BYTE)v1 & 3) != 0)
    v5 = v4;
  else
    v5 = 3;
  if ((v1 & 2) != 0)
    return 2;
  else
    return v5;
}

void sub_1819A1708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1819A1C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

uint64_t _NSSetIntValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  SEL Name;
  IMP Implementation;

  if (!a3)
    return objc_msgSend(a1, "setNilValueForKey:", a4);
  Implementation = method_getImplementation(m);
  Name = method_getName(m);
  return ((uint64_t (*)(void *, SEL, uint64_t))Implementation)(a1, Name, objc_msgSend(a3, "intValue"));
}

uint64_t _NSProgressIPCDebugLog()
{
  if (qword_1ECD09840 != -1)
    dispatch_once(&qword_1ECD09840, &__block_literal_global_90);
  return _MergedGlobals_25_1;
}

NSRect NSUnionRect(NSRect aRect, NSRect bRect)
{
  BOOL v2;
  double v3;
  double v4;
  double v5;

  v2 = bRect.size.width <= 0.0;
  if (bRect.size.height <= 0.0)
    v2 = 1;
  if (aRect.size.width <= 0.0 || aRect.size.height <= 0.0)
  {
    aRect.origin.x = 0.0;
    aRect.origin.y = 0.0;
    aRect.size.width = 0.0;
    aRect.size.height = 0.0;
    if (!v2)
      return bRect;
  }
  else if (!v2)
  {
    v3 = aRect.origin.x + aRect.size.width;
    if (aRect.origin.x >= bRect.origin.x)
      aRect.origin.x = bRect.origin.x;
    v4 = aRect.origin.y + aRect.size.height;
    if (aRect.origin.y >= bRect.origin.y)
      aRect.origin.y = bRect.origin.y;
    v5 = bRect.origin.x + bRect.size.width;
    if (v3 <= v5)
      v3 = v5;
    aRect.size.width = v3 - aRect.origin.x;
    if (v4 <= bRect.origin.y + bRect.size.height)
      v4 = bRect.origin.y + bRect.size.height;
    aRect.size.height = v4 - aRect.origin.y;
  }
  return aRect;
}

void *__cdecl NSReallocateCollectable(void *ptr, NSUInteger size, NSUInteger options)
{
  malloc_zone_t *v5;

  if (!ptr)
    return NSAllocateCollectable(size, options);
  v5 = malloc_zone_from_ptr(ptr);
  return malloc_type_zone_realloc(v5, ptr, size, 0x14DF5F85uLL);
}

void NSKVOForwardInvocation(void *a1, const char *a2, void *a3)
{
  Class Class;
  Class *IndexedIvars;
  const void *v8;
  void *v9;
  const char *Name;
  size_t v11;
  size_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  objc_super __source;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  v8 = (const void *)objc_msgSend(a3, "selector");
  os_unfair_recursive_lock_lock_with_options();
  v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], v8), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  if (v9)
  {
    objc_msgSend(a1, "willChangeValueForKey:", v9);
    strcpy((char *)&__source, "_original_");
    Name = sel_getName((SEL)v8);
    v11 = strlen(Name);
    v12 = v11 + 11;
    MEMORY[0x1E0C80A78](v11);
    v14 = (char *)&v15 - ((v13 + 26) & 0xFFFFFFFFFFFFFFF0);
    strlcpy(v14, (const char *)&__source, v12);
    strlcat(v14, Name, v12);
    objc_msgSend(a3, "setSelector:", sel_registerName(v14));
    objc_msgSend(a3, "invoke");
    objc_msgSend(a1, "didChangeValueForKey:", v9);

  }
  else
  {
    __source.receiver = a1;
    __source.super_class = *IndexedIvars;
    objc_msgSendSuper(&__source, a2, a3);
  }
}

uint64_t NSDataDeallocatorUnmap_block_invoke_3(int a1, void *a2, size_t a3)
{
  uint64_t result;

  if (a2)
    return munmap(a2, a3);
  return result;
}

void protocol witness for Cancellable.cancel() in conformance NSObject.KVOSubscription<A, B, C>()
{
  NSObject.KVOSubscription.cancel()();
}

uint64_t NSObject.KVOSubscription.__deallocating_deinit()
{
  id *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  MEMORY[0x186DA9E78](*(id *)((char *)v0 + *((_QWORD *)*v0 + 22)), -1, -1);
  MEMORY[0x186DA9E78](*(id *)((char *)v0 + *((_QWORD *)*v0 + 23)), -1, -1);

  v1 = (char *)v0 + *((_QWORD *)*v0 + 17);
  v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + *((_QWORD *)*v0 + 18);
  v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_unknownObjectWeakDestroy();
  swift_release();
  return swift_deallocClassInstance();
}

void NSObject.KVOSubscription.cancel()()
{
  _QWORD *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;

  v1 = *v0;
  v2 = *(os_unfair_lock_s **)((char *)v0 + *(_QWORD *)(*v0 + 176));
  os_unfair_lock_lock(v2);
  v3 = (void *)v0[2];
  if (v3)
  {
    v13 = v3;
    os_unfair_lock_unlock(v2);
    v4 = (void *)v0[2];
    v0[2] = 0;

    v5 = (char *)v0 + *(_QWORD *)(*v0 + 144);
    v6 = *(_QWORD *)(v1 + 96);
    v7 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
    v8 = (char *)v0 + *(_QWORD *)(*v0 + 136);
    v9 = *(_QWORD *)(v1 + 88);
    v10 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
    v11 = MEMORY[0x186DA9F5C](&v13[OBJC_IVAR____NSKeyValueObservation_helper]);
    if (v11)
    {
      v12 = (void *)v11;
      NSKeyValueObservation.Helper.invalidate()();

    }
    swift_unknownObjectWeakAssign();

  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
}

id @objc static NSLocale._isoLanguageCodes.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (*a3 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSLocale._isoCountryCodes.getter(uint64_t a1, uint64_t a2)
{
  return @objc static NSLocale._isoLanguageCodes.getter(a1, a2, &one-time initialization token for isoCountries);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for CGPoint);
}

BOOL specialized static CGPoint._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  int v5;

  v3 = objc_retainAutorelease(a1);
  v4 = (const char *)objc_msgSend(v3, sel_objCType);
  type metadata accessor for CGPoint(0);
  v5 = strcmp(v4, "{CGPoint=dd}");
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v5)
  {
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)(a2 + 16) = 0;
    objc_msgSend(v3, sel_getValue_size_, a2, 16);
  }
  return v5 == 0;
}

unint64_t type metadata accessor for NSAttributedStringMarkdownParsingOptions()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSAttributedStringMarkdownParsingOptions;
  if (!lazy cache variable for type metadata for NSAttributedStringMarkdownParsingOptions)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedStringMarkdownParsingOptions);
  }
  return result;
}

id NSAttributedStringMarkdownParsingOptions.init(_:)(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = *((_QWORD *)a1 + 2);
  v5 = a1[24];
  v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v6, sel_setAllowsExtendedAttributes_, v1);
  objc_msgSend(v6, sel_setInterpretedSyntax_, v2);
  objc_msgSend(v6, sel_setFailurePolicy_, v3);
  if (v4)
    v7 = (void *)String._bridgeToObjectiveCImpl()();
  else
    v7 = 0;
  objc_msgSend(v6, sel_setLanguageCode_, v7);

  objc_msgSend(v6, sel_setAppliesSourcePositionAttributes_, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t base witness table accessor for Equatable in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

void type metadata accessor for NSInlinePresentationIntent(uint64_t a1)
{
  type metadata accessor for NSRunLoopMode(a1, &lazy cache variable for type metadata for NSInlinePresentationIntent);
}

uint64_t lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for NSInlinePresentationIntent(255);
    result = MEMORY[0x186DA9D64](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void NSProgress.fileCompletedCount.setter(uint64_t a1, char a2)
{
  NSProgress.throughput.setter(a1, a2, (SEL *)&selRef_setFileCompletedCount_);
}

id NSProgress.fileCompletedCount.getter()
{
  return NSProgress.throughput.getter((SEL *)&selRef_fileCompletedCount);
}

void NSProgress.fileTotalCount.setter(uint64_t a1, char a2)
{
  NSProgress.throughput.setter(a1, a2, (SEL *)&selRef_setFileTotalCount_);
}

id NSProgress.fileTotalCount.getter()
{
  return NSProgress.throughput.getter((SEL *)&selRef_fileTotalCount);
}

void NSProgress.throughput.setter(uint64_t a1, char a2, SEL *a3)
{
  void *v3;
  id v5;

  if ((a2 & 1) != 0)
  {
    objc_msgSend(v3, *a3, 0);
  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, a1);
    objc_msgSend(v3, *a3, v5);

  }
}

id NSProgress.throughput.getter(SEL *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;

  v2 = objc_msgSend(v1, *a1);
  v3 = v2;
  if (!v2)
    return 0;
  v4 = objc_msgSend(v2, sel_integerValue);

  return v4;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _OWORD v20[4];
  uint64_t v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 64);
  v26 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & v2;
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (v5)
  {
    v10 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v11 = v10 | (v8 << 6);
LABEL_22:
    outlined init with copy of AttributedString._AttributeValue(*(_QWORD *)(a1 + 56) + 72 * v11, (uint64_t)v22);
    v20[2] = v23;
    v20[3] = v24;
    v21 = v25;
    v20[0] = v22[0];
    v20[1] = v22[1];
    v15 = *((_QWORD *)&v23 + 1);
    v16 = v24;
    outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v23 + 1), v24);
    result = outlined destroy of AttributedString._AttributeValue((uint64_t)v20);
    if (v16 != 1)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v18 = v9[2];
      v17 = v9[3];
      if (v18 >= v17 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v9[2] = v18 + 1;
      v19 = &v9[2 * v18];
      v19[4] = v15;
      v19[5] = v16;
    }
  }
  v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v12 >= v6)
    goto LABEL_28;
  v13 = *(_QWORD *)(v26 + 8 * v12);
  ++v8;
  if (v13)
    goto LABEL_21;
  v8 = v12 + 1;
  if (v12 + 1 >= v6)
    goto LABEL_28;
  v13 = *(_QWORD *)(v26 + 8 * v8);
  if (v13)
    goto LABEL_21;
  v8 = v12 + 2;
  if (v12 + 2 >= v6)
    goto LABEL_28;
  v13 = *(_QWORD *)(v26 + 8 * v8);
  if (v13)
    goto LABEL_21;
  v8 = v12 + 3;
  if (v12 + 3 >= v6)
    goto LABEL_28;
  v13 = *(_QWORD *)(v26 + 8 * v8);
  if (v13)
  {
LABEL_21:
    v5 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_22;
  }
  v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_28:
    swift_release();
    return (uint64_t)v9;
  }
  v13 = *(_QWORD *)(v26 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_28;
    v13 = *(_QWORD *)(v26 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t i;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  int64_t v31;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v4)
    goto LABEL_7;
LABEL_4:
  v7 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (i = v7 | (v6 << 6); ; i = __clz(__rbit64(v24)) + (v6 << 6))
  {
    v9 = 16 * i;
    v10 = (unint64_t *)(*(_QWORD *)(a1 + 48) + v9);
    v11 = *v10;
    v12 = v10[1];
    v13 = (unint64_t *)(*(_QWORD *)(a1 + 56) + v9);
    v14 = *v13;
    v15 = v13[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = closure #1 in static Locale.identifier(fromComponents:)(v11, v12, v14, v15);
    v18 = v17;
    v20 = v19;
    v22 = v21;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v18)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        v29 = (_QWORD *)result;
      }
      v27 = v29[2];
      v26 = v29[3];
      if (v27 >= v26 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v29);
        v29 = (_QWORD *)result;
      }
      v29[2] = v27 + 1;
      v28 = &v29[4 * v27];
      v28[4] = v16;
      v28[5] = v18;
      v28[6] = v20;
      v28[7] = v22;
      if (v4)
        goto LABEL_4;
    }
    else if (v4)
    {
      goto LABEL_4;
    }
LABEL_7:
    v23 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v23 >= v31)
      goto LABEL_29;
    v24 = *(_QWORD *)(v30 + 8 * v23);
    ++v6;
    if (!v24)
    {
      v6 = v23 + 1;
      if (v23 + 1 >= v31)
        goto LABEL_29;
      v24 = *(_QWORD *)(v30 + 8 * v6);
      if (!v24)
      {
        v6 = v23 + 2;
        if (v23 + 2 >= v31)
          goto LABEL_29;
        v24 = *(_QWORD *)(v30 + 8 * v6);
        if (!v24)
        {
          v6 = v23 + 3;
          if (v23 + 3 >= v31)
            goto LABEL_29;
          v24 = *(_QWORD *)(v30 + 8 * v6);
          if (!v24)
            break;
        }
      }
    }
LABEL_22:
    v4 = (v24 - 1) & v24;
  }
  v25 = v23 + 4;
  if (v25 >= v31)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v29;
  }
  v24 = *(_QWORD *)(v30 + 8 * v25);
  if (v24)
  {
    v6 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    v6 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v6 >= v31)
      goto LABEL_29;
    v24 = *(_QWORD *)(v30 + 8 * v6);
    ++v25;
    if (v24)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[32];
  __int128 v25;
  _OWORD v26[2];
  __int128 v27;
  _OWORD v28[2];
  _QWORD *v29;

  v20 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v4)
    goto LABEL_6;
LABEL_7:
  v9 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v9 < v21)
    {
      v10 = *(_QWORD *)(v20 + 8 * v9);
      ++v6;
      if (v10)
        goto LABEL_22;
      v6 = v9 + 1;
      if (v9 + 1 >= v21)
        goto LABEL_30;
      v10 = *(_QWORD *)(v20 + 8 * v6);
      if (v10)
        goto LABEL_22;
      v6 = v9 + 2;
      if (v9 + 2 >= v21)
        goto LABEL_30;
      v10 = *(_QWORD *)(v20 + 8 * v6);
      if (v10)
        goto LABEL_22;
      v6 = v9 + 3;
      if (v9 + 3 >= v21)
        goto LABEL_30;
      v10 = *(_QWORD *)(v20 + 8 * v6);
      if (v10)
      {
LABEL_22:
        v4 = (v10 - 1) & v10;
        for (i = __clz(__rbit64(v10)) + (v6 << 6); ; i = v7 | (v6 << 6))
        {
          v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
          v14 = *v12;
          v13 = v12[1];
          outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * i, (uint64_t)v28);
          *(_QWORD *)&v27 = v14;
          *((_QWORD *)&v27 + 1) = v13;
          v25 = v27;
          v26[0] = v28[0];
          v26[1] = v28[1];
          v15 = v27;
          outlined init with copy of Any((uint64_t)v26, (uint64_t)v24);
          swift_bridgeObjectRetain();
          if (swift_dynamicCast())
          {
            swift_bridgeObjectRetain();
            outlined destroy of Any?((uint64_t)&v25, &demangling cache variable for type metadata for (key: String, value: Any));
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
              v29 = (_QWORD *)result;
            }
            v17 = v29[2];
            v16 = v29[3];
            if (v17 >= v16 >> 1)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v29);
              v29 = (_QWORD *)result;
            }
            v18 = v29;
            v29[2] = v17 + 1;
            v19 = &v18[4 * v17];
            *((_OWORD *)v19 + 2) = v15;
            v19[6] = v22;
            v19[7] = v23;
            if (!v4)
              goto LABEL_7;
          }
          else
          {
            result = outlined destroy of Any?((uint64_t)&v25, &demangling cache variable for type metadata for (key: String, value: Any));
            if (!v4)
              goto LABEL_7;
          }
LABEL_6:
          v7 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      v11 = v9 + 4;
      if (v11 < v21)
      {
        v10 = *(_QWORD *)(v20 + 8 * v11);
        if (v10)
        {
          v6 = v11;
          goto LABEL_22;
        }
        while (1)
        {
          v6 = v11 + 1;
          if (__OFADD__(v11, 1))
            goto LABEL_32;
          if (v6 >= v21)
            break;
          v10 = *(_QWORD *)(v20 + 8 * v6);
          ++v11;
          if (v10)
            goto LABEL_22;
        }
      }
    }
LABEL_30:
    swift_release();
    return (uint64_t)v29;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;

  result = MEMORY[0x1E0DEE9D8];
  v9 = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v7 = v5 == 0x467463656A627573 && v6 == 0xEB000000006D726FLL;
      if (v7
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || (v5 == 0x6F467463656A626FLL ? (v8 = v6 == 0xEA00000000006D72) : (v8 = 0),
            v8
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || v5 == 0x6973736573736F70 && v6 == 0xEE006D726F466576
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || v5 == 0xD000000000000017 && v6 == 0x8000000182308070
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || v5 == 0x766978656C666572 && v6 == 0xED00006D726F4665
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (swift_getKeyPath())
        {
          MEMORY[0x186DA4AFC]();
          if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

{
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X10 }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t outlined destroy of (key: String, value: Any)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized Rope.extract<A>(from:to:in:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  __n128 v7;
  int v9;
  _QWORD *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;

  v6 = result;
  if (a3)
  {
    v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v7 = 0uLL;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0;
    v50 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if ((result & 0x8000000000000000) == 0 && a2 >= result && a5 >= a2)
    {
      if (result != a2)
      {
        v9 = *(unsigned __int8 *)(a3 + 18);
        v10 = (_QWORD *)(a3 + 24);
        swift_unknownObjectRetain();
        v11 = (unsigned __int16 *)(a3 + 16);
        if (v9)
          specialized closure #2 in Rope._Node.extract<A>(from:to:in:into:)(v11, v10, v6, a2, (unsigned __int16 *)&v44);
        else
          specialized closure #1 in Rope._Node.extract<A>(from:to:in:into:)((uint64_t)v11, v10, v6, a2, &v44);
        swift_unknownObjectRelease();
      }
      v13 = *((_QWORD *)&v48 + 1);
      v14 = v48;
      v15 = v49;
      v48 = 0uLL;
      v49 = 0;
      if (v13)
      {
        if (v14)
        {
          v16 = *((_QWORD *)&v46 + 1);
          v17 = v47;
          *((_QWORD *)&v46 + 1) = 0;
          v47 = 0uLL;
          if ((_QWORD)v17)
          {
            specialized Rope.Builder._appendNow(_:)(v16, v17, *((uint64_t *)&v17 + 1));
            outlined consume of Rope<AttributedString._InternalRun>._Item?(*((uint64_t *)&v46 + 1), v47);
          }
          *((_QWORD *)&v46 + 1) = 0;
          v47 = 0uLL;
LABEL_19:
          v7.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v14, v13, v15);
LABEL_28:
          v24 = v50;
          while (v24[2])
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) != 0)
            {
              v18 = v24[2];
              if (!v18)
                goto LABEL_40;
            }
            else
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
              v24 = (_QWORD *)result;
              v18 = *(_QWORD *)(result + 16);
              if (!v18)
              {
LABEL_40:
                __break(1u);
                goto LABEL_41;
              }
            }
            v19 = v18 - 1;
            v20 = &v24[4 * v19];
            v21 = v20[4];
            v22 = v20[5];
            v23 = v20[6];
            v24[2] = v19;
            v50 = v24;
            if (v21)
            {
              specialized Rope.Builder._insertBeforeTip(_:)(v21, v22, v23);
              goto LABEL_28;
            }
          }
          v25 = *((_QWORD *)&v46 + 1);
          v27 = *((_QWORD *)&v47 + 1);
          v26 = v47;
          *((_QWORD *)&v46 + 1) = 0;
          v47 = 0uLL;
          if (v26)
            v7.n128_f64[0] = specialized Rope.Builder._appendNow(_:)(v25, v26, v27);
          v28 = *((_QWORD *)&v45 + 1);
          v12 = v45;
          v29 = v46;
          v43 = 0;
          MEMORY[0x186DA9E90](&v43, 8, v27, v7);
          for (i = v44; i[2]; v29 = v39)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v31 = i[2];
              if (!v31)
                goto LABEL_37;
            }
            else
            {
              i = specialized _ArrayBuffer._consumeAndCreateNew()(i);
              v31 = i[2];
              if (!v31)
              {
LABEL_37:
                __break(1u);
                break;
              }
            }
            v32 = v31 - 1;
            v33 = &i[4 * v32];
            v34 = v33[4];
            v35 = v33[5];
            v36 = v33[6];
            v37 = v33[7];
            i[2] = v32;
            v12 = specialized static Rope.join(_:_:)(v34, v35, v36, v37, v12, v28, v29);
            v28 = v38;
          }
          v44 = i;
          v40 = *((_QWORD *)&v46 + 1);
          v41 = v47;
          v42 = v48;
          swift_bridgeObjectRelease();
          outlined consume of Rope<AttributedString._InternalRun>._Item?(v40, v41);
          outlined consume of Rope<AttributedString._InternalRun>._Item?(v42, *((uint64_t *)&v42 + 1));
          swift_bridgeObjectRelease();
          return v12;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v14 = *((_QWORD *)&v46 + 1);
      v15 = *((_QWORD *)&v47 + 1);
      v13 = v47;
      *((_QWORD *)&v46 + 1) = 0;
      v47 = 0uLL;
      if (!v13)
        goto LABEL_28;
      goto LABEL_19;
    }
LABEL_41:
    __break(1u);
  }
  else if (!(a2 | result))
  {
    v44 = 0;
    MEMORY[0x186DA9E90](&v44, 8);
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t specialized Rope._remove(at:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t *v3;
  _QWORD *v5;
  __int16 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14[3];
  uint64_t v15[3];
  unint64_t v16;

  if (v3[3] != a2)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v16 = a3;
  if (!*v3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v5 = (_QWORD *)result;
  result = specialized Rope._Node.remove(at:)(v14, v15, (uint64_t *)&v16);
  v6 = result;
  v7 = *v3;
  if (*(_WORD *)(*v3 + 16) != 1)
  {
    if (!*(_WORD *)(*v3 + 16))
    {
      swift_unknownObjectRelease();
      v7 = 0;
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
    }
    goto LABEL_10;
  }
  if (*(_BYTE *)(v7 + 18))
  {
    if (!v7)
    {
LABEL_17:
      __break(1u);
      return result;
    }
    v9 = *(_QWORD *)(v7 + 32);
    v8 = *(_QWORD *)(v7 + 40);
    v10 = *(_QWORD *)(v7 + 24);
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
    *v3 = v10;
    v3[1] = v9;
    v3[2] = v8;
    if (((v16 - 1) & 0xFFFFFF00) == 0)
    {
      v16 = v16 & 0xFFFFFFFFFFFFFF00 | (v16 - 1);
      v7 = v10;
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_10:
  v3[3] = a2 + 1;
  v11 = v14[1];
  v12 = v14[2];
  *v5 = v14[0];
  v5[1] = v11;
  v5[2] = v12;
  if ((v6 & 0x100) == 0)
    return v16;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = specialized Rope._endPath.getter(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v13;
}

_QWORD *specialized Rope.update<A>(at:by:)(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _OWORD v8[3];
  _OWORD v9[3];

  v3 = a2[3];
  if (*result != v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (!*a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = result;
  result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)v9);
  v8[0] = v9[0];
  v8[1] = v9[1];
  v8[2] = v9[2];
  if (__OFADD__(*((_QWORD *)&v9[0] + 1), a3))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  *((_QWORD *)&v8[0] + 1) = *((_QWORD *)&v9[0] + 1) + a3;
  a2[3] = v3 + 1;
  *v6 = v3 + 1;
  if (*a2)
  {
    v6[2] = specialized Rope._Node._finalizeModify(_:)(&v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
LABEL_9:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _OWORD v8[3];
  _OWORD v9[3];

  v3 = a2[3];
  if (*result != v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (!*a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = result;
  result = (_QWORD *)specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)v9);
  v8[0] = v9[0];
  v8[1] = v9[1];
  v8[2] = v9[2];
  if (__OFADD__(*((_QWORD *)&v9[0] + 1), a3))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  *((_QWORD *)&v8[0] + 1) = *((_QWORD *)&v9[0] + 1) + a3;
  a2[3] = v3 + 1;
  *v6 = v3 + 1;
  if (*a2)
  {
    v6[2] = specialized Rope._Node._finalizeModify(_:)(&v7, v8);
    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.extract<A>(from:to:in:into:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v10 = *(unsigned __int16 *)result;
  v11 = a3;
  if (!*(_WORD *)result)
    goto LABEL_15;
  v12 = a3 - *a2;
  if (__OFSUB__(a3, *a2))
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (__OFADD__(v12, 1))
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v12 + 1 < 1)
  {
    v10 = 0;
    v12 = a3;
    v13 = __OFSUB__(a4, a3);
    v14 = a4 - a3;
    if (v13)
      goto LABEL_38;
  }
  else
  {
    if ((_DWORD)v10 == 1)
    {
      v11 = a3 - *a2;
LABEL_15:
      if (!v11)
      {
        v12 = 0;
        v13 = __OFSUB__(a4, a3);
        v14 = a4 - a3;
        if (!v13)
          goto LABEL_17;
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    v15 = a2 + 3;
    v16 = 1;
    while (1)
    {
      v17 = *v15;
      v15 += 3;
      v11 = v12 - v17;
      if (__OFSUB__(v12, v17))
      {
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      if (__OFADD__(v11, 1))
        goto LABEL_69;
      if (v11 + 1 < 1)
        break;
      ++v16;
      v12 = v11;
      if (v10 == v16)
        goto LABEL_15;
    }
    v10 = v16;
    v13 = __OFSUB__(a4, a3);
    v14 = a4 - a3;
    if (v13)
      goto LABEL_38;
  }
LABEL_17:
  result = specialized Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)(v10, v12, v14, 1, (unsigned __int16 *)result, (uint64_t)a2);
  v60 = v18;
  v19 = &a2[3 * v10];
  v20 = *v19;
  v6 = v19[1];
  v7 = v19[2];
  if (v10 == result)
  {
    if (!__OFSUB__(v20, v12))
    {
      v21 = v18 - v12;
      if (!__OFSUB__(v18, v12))
      {
        if (((v21 | v12) & 0x8000000000000000) == 0 && v20 >= v12 && v20 - v12 >= v21)
        {
          if (v21)
          {
            v23 = a5[4];
            v24 = a5[5];
            v25 = a5[6];
            a5[5] = 0;
            a5[6] = 0;
            a5[4] = 0;
            if (v24)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized Rope.Builder._appendNow(_:)(v23, v24, v25);
              result = outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
              a5[4] = v21;
              a5[5] = v6;
              a5[6] = v7;
            }
            else
            {
              a5[4] = v21;
              a5[5] = v6;
              a5[6] = v7;
              swift_bridgeObjectRetain();
              return swift_bridgeObjectRetain();
            }
          }
          return result;
        }
        goto LABEL_78;
      }
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v61 = result;
  if (v12 < 0)
    goto LABEL_79;
  v5 = v20 - v12;
  if (v20 < v12)
    goto LABEL_79;
  if (v20 == v12)
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    goto LABEL_40;
  }
  v26 = a5[4];
  v27 = a5[5];
  v28 = a5[6];
  a5[5] = 0;
  a5[6] = 0;
  a5[4] = 0;
  if (v27)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Rope.Builder._appendNow(_:)(v26, v27, v28);
    result = outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
    a5[4] = v5;
    a5[5] = v6;
    a5[6] = v7;
    goto LABEL_40;
  }
LABEL_39:
  a5[4] = v5;
  a5[5] = v6;
  a5[6] = v7;
  swift_bridgeObjectRetain_n();
  result = swift_bridgeObjectRetain_n();
LABEL_40:
  v29 = v10 + 1;
  v30 = v61;
  if (__OFADD__(v10, 1))
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (v61 < v29)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  v59 = a2;
  if (v29 != v61)
  {
    if (v29 < v61)
    {
      v37 = ~v10 + v61;
      v38 = &a2[3 * v10 + 5];
      while (1)
      {
        v39 = *(v38 - 2);
        if (v39)
        {
          v40 = *(v38 - 1);
          v41 = *v38;
          v42 = a5[4];
          v43 = a5[5];
          v44 = a5[6];
          a5[4] = 0;
          a5[5] = 0;
          a5[6] = 0;
          if (v43)
          {
            v62 = v42;
            v63 = v40;
            v64 = v41;
            v45 = a5[1];
            v46 = a5[2];
            v47 = a5[3];
            a5[1] = 0;
            a5[2] = 0;
            a5[3] = 0;
            if (!v45)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
              v45 = swift_allocObject();
              v47 = 0;
              v46 = 0;
              *(_WORD *)(v45 + 16) = 0;
              *(_BYTE *)(v45 + 18) = 0;
            }
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            result = swift_isUniquelyReferenced_nonNull();
            if ((result & 1) == 0)
            {
              v48 = specialized Rope._Node.copy()(v45);
              v46 = v49;
              v47 = v50;
              result = swift_unknownObjectRelease();
              v45 = v48;
              v30 = v61;
            }
            v13 = __OFADD__(v46, 1);
            v51 = v46 + 1;
            if (v13)
              goto LABEL_70;
            v13 = __OFADD__(v47, v62);
            v52 = v47 + v62;
            if (v13)
              goto LABEL_71;
            v53 = *(unsigned __int16 *)(v45 + 16);
            v54 = (_QWORD *)(v45 + 24 * *(unsigned __int16 *)(v45 + 16));
            v54[3] = v62;
            v54[4] = v43;
            v54[5] = v44;
            if (v53 == 0xFFFF)
              goto LABEL_72;
            v55 = v53 + 1;
            *(_WORD *)(v45 + 16) = v55;
            if (v55 == 15)
            {
              v56 = swift_unknownObjectRetain();
              specialized Rope.Builder._appendNow(_:)(v56, v51, v52);
              v57 = v64;
              swift_bridgeObjectRelease();
              v58 = v63;
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              a5[1] = v45;
              a5[2] = v51;
              a5[3] = v52;
              v57 = v64;
              swift_bridgeObjectRelease();
              v58 = v63;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            result = outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
            a5[4] = v39;
            a5[5] = v58;
            a5[6] = v57;
          }
          else
          {
            a5[4] = v39;
            a5[5] = v40;
            a5[6] = v41;
            swift_bridgeObjectRetain();
            result = swift_bridgeObjectRetain();
          }
        }
        v38 += 3;
        if (!--v37)
          goto LABEL_43;
      }
    }
    goto LABEL_83;
  }
LABEL_43:
  if (v60 < 0 || (v31 = &v59[3 * v30], *v31 < v60))
  {
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    return result;
  }
  if (v60)
  {
    v33 = v31[1];
    v32 = v31[2];
    v34 = a5[4];
    v35 = a5[5];
    v36 = a5[6];
    a5[5] = 0;
    a5[6] = 0;
    a5[4] = 0;
    if (v35)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope.Builder._appendNow(_:)(v34, v35, v36);
      outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
      a5[4] = v60;
      a5[5] = v33;
      a5[6] = v32;
    }
    else
    {
      a5[4] = v60;
      a5[5] = v33;
      a5[6] = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Rope._Node.remove(at:)(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _BOOL4 v28;
  char isUniquelyReferenced_nonNull;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t *v46;
  char v47;
  _BOOL4 v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  __int128 v55;
  _QWORD v56[3];

  v4 = v3;
  result = swift_isUniquelyReferenced_nonNull();
  v9 = *v3;
  if ((result & 1) == 0)
  {
    v9 = specialized Rope._Node.copy()(*v3);
    v11 = v10;
    v13 = v12;
    result = swift_unknownObjectRelease();
    *v4 = v9;
    v4[1] = v11;
    v4[2] = v13;
  }
  v14 = 4 * *(_BYTE *)(v9 + 18);
  v15 = (v14 + 8) & 0x3C;
  v16 = ((unint64_t)*a3 >> v15) & 0xF;
  if (v16 >= *(unsigned __int16 *)(v9 + 16))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (*(_BYTE *)(v9 + 18))
  {
    v53 = a1;
    swift_unknownObjectRetain();
    v17 = specialized Rope._Node.remove(at:)(&v54, v56, a3);
    result = swift_unknownObjectRelease();
    v18 = v56[0];
    v19 = v4[1];
    v20 = __OFSUB__(v19, v56[0]);
    v21 = v19 - v56[0];
    if (!v20)
    {
      v52 = a2;
      v22 = v56[1];
      v4[1] = v21;
      v23 = v4[2];
      v20 = __OFSUB__(v23, v22);
      v24 = v23 - v22;
      if (!v20)
      {
        v4[2] = v24;
        v25 = v54;
        v26 = v55;
        if ((v17 & 1) != 0)
        {
          v50 = v54;
          v51 = v55;
          v45 = (unsigned __int16 *)(*v4 + 16);
          v46 = (uint64_t *)(*v4 + 24);
          swift_unknownObjectRetain();
          v47 = specialized closure #1 in Rope._Node.fixDeficiency(on:)(v45, v46, a3);
          swift_unknownObjectRelease();
          if ((v17 & 0x100) == 0)
          {
            v28 = 0;
            v26 = v51;
            v25 = v50;
            goto LABEL_21;
          }
          v26 = v51;
          v25 = v50;
          if ((v47 & 1) != 0)
          {
LABEL_9:
            v27 = ((unint64_t)*a3 >> v15) & 0xF;
            if (v27 >= *(unsigned __int16 *)(*v4 + 16) - 1)
            {
              v28 = 1;
            }
            else
            {
              v28 = 0;
              *a3 = (((v27 + 1) << v15) | *a3 & ((-15 << v15) - 1)) & ((-256 << (v14 & 0x3C)) | 0xFF);
            }
            goto LABEL_21;
          }
        }
        else if (((v17 >> 8) & 1) != 0)
        {
          goto LABEL_9;
        }
        v28 = 0;
LABEL_21:
        *v53 = v25;
        *(_OWORD *)(v53 + 1) = v26;
        *v52 = v18;
        v52[1] = v22;
        LODWORD(v44) = *(unsigned __int16 *)(*v4 + 16);
        goto LABEL_22;
      }
      goto LABEL_28;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  v30 = *v4;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    v30 = specialized Rope._Node.copy()(*v4);
    v32 = v31;
    v34 = v33;
    swift_unknownObjectRelease();
    *v4 = v30;
    v4[1] = v32;
    v4[2] = v34;
  }
  swift_unknownObjectRetain();
  v35 = specialized Rope._UnsafeHandle._removeChild(at:)(v16, (_WORD *)(v30 + 16), v30 + 24);
  v37 = v36;
  v39 = v38;
  result = swift_unknownObjectRelease();
  v40 = v4[1];
  v20 = __OFSUB__(v40, 1);
  v41 = v40 - 1;
  if (v20)
    goto LABEL_29;
  v4[1] = v41;
  v42 = v4[2];
  v20 = __OFSUB__(v42, v35);
  v43 = v42 - v35;
  if (v20)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  v4[2] = v43;
  *a1 = v35;
  a1[1] = v37;
  a1[2] = v39;
  *a2 = 1;
  a2[1] = v35;
  v44 = *(unsigned __int16 *)(*v4 + 16);
  v28 = v16 == v44;
LABEL_22:
  v48 = v44 < 8;
  if (v28)
    v49 = 256;
  else
    v49 = 0;
  return v49 | v48;
}

unint64_t lazy protocol witness table accessor for type URLError and conformance URLError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLError, &type metadata for URLError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLError, &type metadata for URLError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLError, &type metadata for URLError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLError, &type metadata for URLError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLError, &type metadata for URLError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLError, &type metadata for URLError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }
  return result;
}

void protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance URLError(void *a1@<X0>, _QWORD *a2@<X8>)
{
  specialized _BridgedStoredNSError.init(_bridgedNSError:)(a1, (void **)&NSURLErrorDomain, a2);
}

unint64_t instantiation function for generic protocol witness table for URLError(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type URLError and conformance URLError();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void *Calendar.dateComponents(_:from:to:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  void (*v14)(double *__return_ptr, __int128 *, uint64_t, uint64_t);
  uint64_t v15;
  double v16;
  int v17;
  uint64_t v18;
  void (*v19)(double *__return_ptr, __int128 *, uint64_t, uint64_t);
  double v20;
  double v22;
  double v23;
  double v26;
  double v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v30[266];

  v5 = *a2;
  v6 = a2[1];
  v7 = a2 + 2;
  v9 = *a3;
  v8 = a3[1];
  v10 = a3 + 2;
  v11 = *v4;
  v12 = v4[1];
  if (*a2)
  {
    ObjectType = swift_getObjectType();
    *(_QWORD *)&v29 = v5;
    *((_QWORD *)&v29 + 1) = v6;
    memcpy(v30, v7, sizeof(v30));
    v14 = *(void (**)(double *__return_ptr, __int128 *, uint64_t, uint64_t))(v6 + 176);
    swift_unknownObjectRetain();
    v14(&v27, &v29, ObjectType, v6);
    swift_unknownObjectRelease();
  }
  else
  {
    v15 = swift_getObjectType();
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = v6;
    memcpy(v30, v7, sizeof(v30));
    (*(void (**)(double *__return_ptr, __int128 *, uint64_t, uint64_t))(v12 + 176))(&v27, &v29, v15, v12);
  }
  v16 = v27;
  v17 = v28;
  v18 = swift_getObjectType();
  if (v9)
  {
    *(_QWORD *)&v29 = v9;
    *((_QWORD *)&v29 + 1) = v8;
    memcpy(v30, v10, sizeof(v30));
    v19 = *(void (**)(double *__return_ptr, __int128 *, uint64_t, uint64_t))(v8 + 176);
    swift_unknownObjectRetain();
    v19(&v27, &v29, v18, v8);
    swift_unknownObjectRelease();
  }
  else
  {
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = v8;
    memcpy(v30, v10, sizeof(v30));
    (*(void (**)(double *__return_ptr, __int128 *, uint64_t, uint64_t))(v12 + 176))(&v27, &v29, v18, v12);
  }
  v20 = v27;
  if (((v17 | v28) & 1) != 0)
  {
    *(_QWORD *)&v29 = v11;
    *((_QWORD *)&v29 + 1) = v12;
    v27 = 0.0;
    v28 = 0;
    swift_unknownObjectRetain();
    return (void *)DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v29, (uint64_t *)&v27, 0, 1, 0, 1, 0, 1, (uint64_t)a4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1,
                     0,
                     1);
  }
  else
  {
    *(_QWORD *)&v29 = v11;
    *((_QWORD *)&v29 + 1) = v12;
    if (v16 <= 1.59271755e13)
      v22 = v16;
    else
      v22 = 1.59271755e13;
    v23 = fmax(v22, -2.11845067e11);
    if (v27 > 1.59271755e13)
      v20 = 1.59271755e13;
    v26 = fmax(v20, -2.11845067e11);
    v27 = v23;
    return Calendar.dateComponents(_:from:to:)(a1, &v27, &v26, a4);
  }
}

void Data._copyBytesHelper(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a3)
    Data._Representation.copyBytes(to:from:)(a1, a2, a3, a4, a5);
}

void *Data.InlineData.copyBytes(to:from:)(void *result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (BYTE6(a5) < a2 || BYTE6(a5) < a3)
    __break(1u);
  v7 = a4;
  v8 = a5;
  v9 = BYTE2(a5);
  v10 = BYTE3(a5);
  v11 = BYTE4(a5);
  v6 = a3 - a2;
  v12 = BYTE5(a5);
  if (v6 > 13)
  {
    v6 = 14;
    return memcpy(result, (char *)&v7 + a2, v6);
  }
  if (v6 >= 1)
    return memcpy(result, (char *)&v7 + a2, v6);
  return result;
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.__ivar_destroyer()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for _AttributedStringFromMarkdownCreatorConcrete()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AttributedStringFromMarkdownCreatorConcrete);
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.finalize(withLanguageIdentifier:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  if (a3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v6 = v5;
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v7 = a1;
  _AttributedStringFromMarkdownCreatorConcrete.finalize(withLanguageIdentifier:)((uint64_t)v4, v6);

  return swift_bridgeObjectRelease();
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.finalize(withLanguageIdentifier:)(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v10 = MEMORY[0x1E0DEE9E0];
    v11 = MEMORY[0x1E0DEE9E8];
    v5 = MEMORY[0x1E0DEA968];
    v6 = MEMORY[0x1E0DEA978];
    v3 = result;
    v4 = a2;
    v7 = xmmword_18205FD60;
    v8 = 1;
    v9 = 0;
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v3, 0x6175676E614C534EuLL, 0xEA00000000006567);
    v3 = v10;
    v4 = v11;
    v2 = 1;
    AttributedString.mergeAttributes(_:mergePolicy:)(&v3, &v2);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.append(_:with:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v8 = v7;
  v9 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v10 = a1;
  _AttributedStringFromMarkdownCreatorConcrete.append(_:with:)((uint64_t)v6, v8, v9);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.append(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13[3];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[3];

  swift_bridgeObjectRetain();
  _AttributedStringFromMarkdownCreatorConcrete.processAttributes(_:)(a3, &v14);
  v5 = v14;
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v13, v5, *((uint64_t *)&v5 + 1), (uint64_t *)v21);
  v6 = *(_QWORD *)&v21[0];
  v7 = *(_OWORD **)(v3 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str);
  v8 = v7[2];
  v21[0] = v7[1];
  v21[1] = v8;
  v21[2] = v7[3];
  *(_QWORD *)&v14 = BigString.endIndex.getter();
  *((_QWORD *)&v14 + 1) = v9;
  v15 = v10;
  v16 = v11;
  v17 = v14;
  v18 = v9;
  v19 = v10;
  v20 = v11;
  specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v14, v6);
  return swift_release();
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.init(scope:options:)(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  objc_class *v14;
  objc_super v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *v2;
  v4 = *MEMORY[0x1E0DEEDD8];
  v5 = *a2;
  *((_BYTE *)v2 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes) = 0;
  v6 = v2;
  BigString.init()();
  v16 = 0;
  MEMORY[0x186DA9E90](&v16, 8);
  v7 = v16;
  type metadata accessor for AttributedString.Guts();
  v8 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    v10 = v4 & v3;
    v11 = v18;
    *(_OWORD *)(v8 + 16) = v17;
    *(_OWORD *)(v8 + 32) = v11;
    *(_OWORD *)(v8 + 48) = v19;
    *(_QWORD *)(v8 + 64) = 0;
    *(_QWORD *)(v8 + 72) = 0;
    *(_QWORD *)(v8 + 80) = 0;
    *(_QWORD *)(v8 + 88) = v7;
    *(_QWORD *)((char *)v6 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str) = v8;
    swift_bridgeObjectRelease();
    if (v5)
    {
      v12 = static AttributeScope.scopeDescription.getter(*(_QWORD *)(v10 + 80), *(_QWORD *)(v10 + 88));
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = (void *)MEMORY[0x1E0DEE9E0];
    }
    *(_QWORD *)((char *)v6 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.attributeTable) = v12;

    v14 = (objc_class *)type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete(0, *(_QWORD *)(v10 + 80), *(_QWORD *)(v10 + 88), v13);
    v15.receiver = v6;
    v15.super_class = v14;
    return (uint64_t)objc_msgSendSuper2(&v15, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void storeEnumTagSinglePayload for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t getEnumTagSinglePayload for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

uint64_t type metadata completion function for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox()
{
  JUMPOUT(0x186DA9CBCLL);
}

double _AttributedStringFromMarkdownCreatorConcrete.processAttributes(_:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  BOOL v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  double result;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  int64_t v47;
  _QWORD v48[14];
  _QWORD v49[2];
  _QWORD v50[6];
  _QWORD v51[12];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  _OWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[2];
  __int128 v65;

  v3 = v2;
  v43 = *MEMORY[0x1E0DEEDD8] & *v2;
  v65 = MEMORY[0x1E0DEE9E0];
  v41 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes;
  v42 = (unint64_t)(v4 + 63) >> 6;
  v44 = direct field offset for _AttributedStringFromMarkdownCreatorConcrete.attributeTable;
  swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v46 = (v6 - 1) & v6;
      v47 = v8;
      v9 = __clz(__rbit64(v6)) | (v8 << 6);
      goto LABEL_18;
    }
    v10 = __OFADD__(v8, 1);
    v11 = v8 + 1;
    if (v10)
    {
      __break(1u);
      JUMPOUT(0x1819A6940);
    }
    if (v11 >= v42)
      goto LABEL_67;
    v12 = *(_QWORD *)(v41 + 8 * v11);
    if (!v12)
      break;
LABEL_17:
    v46 = (v12 - 1) & v12;
    v47 = v11;
    v9 = __clz(__rbit64(v12)) + (v11 << 6);
LABEL_18:
    v14 = *(_QWORD *)(a1 + 56);
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v16 = v15[1];
    v62 = *v15;
    v17 = v62;
    v63 = v16;
    outlined init with copy of Any(v14 + 32 * v9, (uint64_t)v64);
    v60[0] = v17;
    v60[1] = v16;
    outlined init with take of Any(v64, v61);
    if ((*((_BYTE *)v3 + v7) & 1) != 0)
    {
      swift_bridgeObjectRetain_n();
    }
    else
    {
      v18 = one-time initialization token for name;
      swift_bridgeObjectRetain_n();
      if (v18 != -1)
        swift_once();
      v19 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
      v20 = qword_1EDC3E450;
      v51[8] = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
      v51[9] = qword_1EDC3E450;
      v21 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v21 != -1)
        swift_once();
      v22 = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
      v23 = qword_1EDC3E4D8;
      v51[10] = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
      v51[11] = qword_1EDC3E4D8;
      v24 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v24 != -1)
        swift_once();
      v52 = static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name;
      v53 = qword_1EDC3E490;
      v25 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v25 != -1)
        swift_once();
      v54 = static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name;
      v55 = qword_1EDC3E4A8;
      v26 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v26 != -1)
        swift_once();
      v56 = static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name;
      v57 = qword_1EDC3E478;
      v27 = one-time initialization token for name;
      swift_bridgeObjectRetain();
      if (v27 != -1)
        swift_once();
      v58 = static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name;
      v59 = qword_1EDC3E180;
      if (v19 == v17 && v20 == v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v22 == v17 && v23 == v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v52 == v17 && v53 == v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v54 == v17 && v55 == v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v56 == v17 && v57 == v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v58 == v17 && v59 == v16
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_arrayDestroy();
        *((_BYTE *)v3 + v7) = 1;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_arrayDestroy();
      }
    }
    v28 = *(_QWORD *)((char *)v3 + v44);
    v50[4] = v17;
    v50[5] = v16;
    outlined init with copy of Any((uint64_t)v61, (uint64_t)v51);
    if (*(_QWORD *)(v28 + 16))
    {
      swift_bridgeObjectRetain();
      v29 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
      if ((v30 & 1) != 0)
      {
        v31 = (uint64_t *)(*(_QWORD *)(v28 + 56) + 16 * v29);
        v33 = *v31;
        v32 = v31[1];
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
      swift_bridgeObjectRelease();
    }
    v33 = 0;
    v32 = 0;
LABEL_56:
    v49[0] = v17;
    v49[1] = v16;
    outlined init with copy of Any((uint64_t)v61, (uint64_t)v50);
    if (v33)
    {
      outlined destroy of (key: String, value: Any)((uint64_t)v49);
      goto LABEL_58;
    }
    swift_bridgeObjectRetain();
    specialized static AttributeScope.scopeDescription.getter();
    v35 = v34;
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)v50, (uint64_t)v48);
    if (*(_QWORD *)(v35 + 16))
    {
      v36 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
      if ((v37 & 1) != 0)
      {
        v38 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 16 * v36 + 8);
        swift_bridgeObjectRelease();
        v32 = v38;
        swift_bridgeObjectRelease();
        outlined destroy of (key: String, value: Any)((uint64_t)v49);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
LABEL_58:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
        v48[0] = *(_QWORD *)(v43 + 88);
        v48[1] = v32;
        type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox();
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of (key: String, value: Any)((uint64_t)v49);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    v6 = v46;
    v8 = v47;
    outlined destroy of (key: String, value: Any)((uint64_t)v60);
  }
  v13 = v11 + 1;
  if (v11 + 1 >= v42)
    goto LABEL_67;
  v12 = *(_QWORD *)(v41 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v11 + 2;
  if (v11 + 2 >= v42)
    goto LABEL_67;
  v12 = *(_QWORD *)(v41 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v11 + 3;
  if (v11 + 3 >= v42)
    goto LABEL_67;
  v12 = *(_QWORD *)(v41 + 8 * v13);
  if (v12)
  {
LABEL_16:
    v11 = v13;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      JUMPOUT(0x1819A6948);
    }
    if (v11 >= v42)
      break;
    v12 = *(_QWORD *)(v41 + 8 * v11);
    ++v13;
    if (v12)
      goto LABEL_17;
  }
LABEL_67:
  swift_release();
  result = *(double *)&v65;
  *a2 = v65;
  return result;
}

uint64_t static MarkdownDecodableAttributedStringKey.markdownName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 24))();
}

unint64_t lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalendarEnumerationError and conformance CalendarEnumerationError;
  if (!lazy protocol witness table cache variable for type CalendarEnumerationError and conformance CalendarEnumerationError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CalendarEnumerationError, &type metadata for CalendarEnumerationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalendarEnumerationError and conformance CalendarEnumerationError);
  }
  return result;
}

uint64_t AttributedStringProtocol.settingAttributes(_:)@<X0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[8];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[3];

  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v11;
  v13 = v11[1];
  (*(void (**)(char *, uint64_t, ValueMetadata *, __n128))(v14 + 16))(v10, v4, a2, v8);
  AttributedString.init<A>(_:)((uint64_t)v10, a2, a3, a4);
  v15 = *a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v16 = *(_OWORD *)(v15 + 32);
    v39[0] = *(_OWORD *)(v15 + 16);
    v39[1] = v16;
    v39[2] = *(_OWORD *)(v15 + 48);
    v17 = *(_QWORD *)(v15 + 64);
    v18 = *(_QWORD *)(v15 + 72);
    v19 = *(_QWORD *)(v15 + 80);
    v20 = *(_QWORD *)(v15 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v39);
    swift_unknownObjectRetain();
    v21 = AttributedString.Guts.init(string:runs:)(v39, v17, v18, v19, v20);
    *a4 = v21;
    swift_release();
    v15 = v21;
  }
  v22 = *(_OWORD *)(v15 + 32);
  v36 = *(_OWORD *)(v15 + 16);
  v37 = v22;
  v38 = *(_OWORD *)(v15 + 48);
  v23 = BigString.startIndex.getter();
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v30 = BigString.endIndex.getter();
  v35[0] = v23;
  v35[1] = v25;
  v35[2] = v27;
  v35[3] = v29;
  v35[4] = v30;
  v35[5] = v31;
  v35[6] = v32;
  v35[7] = v33;
  return AttributedString.Guts.setAttributes(_:in:)(v12, v13);
}

BOOL _bridgeNSErrorToError<A>(_:out:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  int v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v20;

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(a4 + 16))(a1, a3, a4, v14);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3);
  if (v17 == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    v18 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v18(v16, v11, a3);
    v18(a2, v16, a3);
  }
  return v17 != 1;
}

BOOL protocol witness for _TimeZoneProtocol.isDaylightSavingTime(for:) in conformance _TimeZoneAutoupdating(double a1)
{
  return _TimeZoneAutoupdating.isDaylightSavingTime(for:)(*(Foundation::Date *)&a1);
}

uint64_t protocol witness for _LocaleProtocol.doesNotRequireSpecialCaseHandling.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 480))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v1 & 1;
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

unint64_t lazy protocol witness table accessor for type AttributedSubstring and conformance AttributedSubstring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring;
  if (!lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedSubstring, &type metadata for AttributedSubstring);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring;
  if (!lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedSubstring, &type metadata for AttributedSubstring);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring;
  if (!lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributedSubstring, &type metadata for AttributedSubstring);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributedSubstring(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 16) = lazy protocol witness table accessor for type AttributedSubstring and conformance AttributedSubstring();
  result = lazy protocol witness table accessor for type AttributedSubstring and conformance AttributedSubstring();
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

ValueMetadata *type metadata accessor for PresentationIntent()
{
  return &type metadata for PresentationIntent;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent and conformance PresentationIntent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent;
  if (!lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent, &type metadata for PresentationIntent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent;
  if (!lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for PresentationIntent, &type metadata for PresentationIntent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent);
  }
  return result;
}

uint64_t outlined consume of PresentationIntent.Kind(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2 || a3 == 3)
    return swift_bridgeObjectRelease();
  return result;
}

void specialized static PresentationIntent._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, _QWORD *a2)
{
  id v2;
  unint64_t v3;
  char **v4;
  char **v5;
  char **v6;
  _QWORD *v7;
  __int128 v8;
  id v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  void *v55;
  id v56;
  unint64_t v57;
  unint64_t v58;
  id v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v64;

  v2 = a1;
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = &selRef_groupingSeparator;
  v5 = &selRef_groupingSeparator;
  v6 = &selRef_isErrorStatusCode_;
  v64 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (2)
  {
    v9 = v2;
    switch((unint64_t)objc_msgSend(v9, v4[451]))
    {
      case 0uLL:
        v10 = objc_msgSend(v9, v5[39]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        v12 = v64[2];
        v11 = v64[3];
        if (v12 >= v11 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v64);
        v64[2] = v12 + 1;
        v7 = &v64[4 * v12];
        v7[4] = 0;
        v7[5] = 0;
        goto LABEL_4;
      case 1uLL:
        v13 = objc_msgSend(v9, sel_headerLevel);
        v14 = objc_msgSend(v9, (SEL)v5 + 3144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        v16 = v64[2];
        v15 = v64[3];
        if (v16 >= v15 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v64);
        v64[2] = v16 + 1;
        v17 = &v64[4 * v16];
        v17[4] = v13;
        v17[5] = 0;
        *((_BYTE *)v17 + 48) = 0;
        goto LABEL_65;
      case 2uLL:
        v10 = objc_msgSend(v9, (SEL)v5 + 3144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        v19 = v64[2];
        v18 = v64[3];
        if (v19 >= v18 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v64);
        v64[2] = v19 + 1;
        v7 = &v64[4 * v19];
        v8 = xmmword_182068080;
        goto LABEL_3;
      case 3uLL:
        v10 = objc_msgSend(v9, (SEL)v5 + 3144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        v21 = v64[2];
        v20 = v64[3];
        if (v21 >= v20 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v64);
        v64[2] = v21 + 1;
        v7 = &v64[4 * v21];
        v8 = xmmword_182068790;
        goto LABEL_3;
      case 4uLL:
        v22 = objc_msgSend(v9, sel_ordinal);
        v14 = objc_msgSend(v9, (SEL)v5 + 3144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        v24 = v64[2];
        v23 = v64[3];
        if (v24 >= v23 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v64);
        v64[2] = v24 + 1;
        v17 = &v64[4 * v24];
        v17[4] = v22;
        v17[5] = 0;
        v25 = 1;
        goto LABEL_64;
      case 5uLL:
        v26 = objc_msgSend(v9, sel_languageHint);
        if (v26)
        {
          v27 = v26;
          v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v30 = v29;

        }
        else
        {
          v28 = 0;
          v30 = 0;
        }
        v47 = objc_msgSend(v9, (SEL)v5 + 3144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        v49 = v64[2];
        v48 = v64[3];
        if (v49 >= v48 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, v64);
        v64[2] = v49 + 1;
        v50 = &v64[4 * v49];
        v50[4] = v28;
        v50[5] = v30;
        *((_BYTE *)v50 + 48) = 2;
        v50[7] = v47;
        v6 = &selRef_isErrorStatusCode_;
        goto LABEL_5;
      case 6uLL:
        v10 = objc_msgSend(v9, (SEL)v5 + 3144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        v32 = v64[2];
        v31 = v64[3];
        if (v32 >= v31 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v64);
        v64[2] = v32 + 1;
        v7 = &v64[4 * v32];
        v8 = xmmword_1820FDF60;
        goto LABEL_3;
      case 7uLL:
        v10 = objc_msgSend(v9, (SEL)v5 + 3144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        v34 = v64[2];
        v33 = v64[3];
        if (v34 >= v33 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v64);
        v64[2] = v34 + 1;
        v7 = &v64[4 * v34];
        v8 = xmmword_1820FE880;
        goto LABEL_3;
      case 8uLL:
        v35 = objc_msgSend(v9, sel_columnAlignments);
        if (!v35)
        {
          v38 = v3;
          if (v3 >> 62)
            goto LABEL_85;
LABEL_73:
          v51 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v51)
            goto LABEL_74;
LABEL_86:
          swift_bridgeObjectRelease();
          v53 = v3;
LABEL_87:
          v59 = objc_msgSend(v9, v5[39]);
          v6 = &selRef_isErrorStatusCode_;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
          v61 = v64[2];
          v60 = v64[3];
          if (v61 >= v60 >> 1)
            v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v60 > 1), v61 + 1, 1, v64);
          v64[2] = v61 + 1;
          v62 = &v64[4 * v61];
          v62[4] = v53;
          v62[5] = 0;
          *((_BYTE *)v62 + 48) = 3;
          v62[7] = v59;
          v5 = &selRef_groupingSeparator;
LABEL_5:
          v2 = objc_msgSend(v9, v6[453]);

          if (!v2)
          {
            swift_bridgeObjectRelease();
            *a2 = v64;
            return;
          }
          continue;
        }
        v36 = v35;
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();

        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSNumber>);
        v37 = swift_dynamicCastClass();
        if (v37)
        {
          v38 = v37;

          if (v38 >> 62)
            goto LABEL_85;
          goto LABEL_73;
        }
        swift_unknownObjectRelease();
        objc_msgSend(v36, sel_copy);
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        v38 = _bridgeCocoaArray<A>(_:)();

        swift_unknownObjectRelease();
        if (!(v38 >> 62))
          goto LABEL_73;
LABEL_85:
        swift_bridgeObjectRetain();
        v51 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v51)
          goto LABEL_86;
LABEL_74:
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51 & ~(v51 >> 63), 0);
        if ((v51 & 0x8000000000000000) == 0)
        {
          v52 = 0;
          v53 = v3;
          do
          {
            if ((v38 & 0xC000000000000001) != 0)
              v54 = (id)MEMORY[0x186DA53A8](v52, v38);
            else
              v54 = *(id *)(v38 + 8 * v52 + 32);
            v55 = v54;
            v56 = objc_msgSend(v54, sel_integerValue);

            if ((unint64_t)v56 > 2)
              goto LABEL_96;
            v58 = *(_QWORD *)(v3 + 16);
            v57 = *(_QWORD *)(v3 + 24);
            if (v58 >= v57 >> 1)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
            ++v52;
            *(_QWORD *)(v3 + 16) = v58 + 1;
            *(_BYTE *)(v3 + v58 + 32) = (_BYTE)v56;
          }
          while (v51 != v52);
          swift_bridgeObjectRelease();
          v3 = MEMORY[0x1E0DEE9D8];
          v4 = &selRef_groupingSeparator;
          v5 = &selRef_groupingSeparator;
          goto LABEL_87;
        }
        __break(1u);
LABEL_96:
        __break(1u);
        return;
      case 9uLL:
        v10 = objc_msgSend(v9, (SEL)v5 + 3144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        v40 = v64[2];
        v39 = v64[3];
        if (v40 >= v39 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v64);
        v64[2] = v40 + 1;
        v7 = &v64[4 * v40];
        v8 = xmmword_1820FE870;
LABEL_3:
        *((_OWORD *)v7 + 2) = v8;
LABEL_4:
        *((_BYTE *)v7 + 48) = 6;
        v7[7] = v10;
        goto LABEL_5;
      case 0xAuLL:
        v41 = objc_msgSend(v9, "row");
        v14 = objc_msgSend(v9, (SEL)v5 + 3144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        v43 = v64[2];
        v42 = v64[3];
        if (v43 >= v42 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v64);
        v64[2] = v43 + 1;
        v17 = &v64[4 * v43];
        v17[4] = v41;
        v17[5] = 0;
        v25 = 4;
        goto LABEL_64;
      case 0xBuLL:
        v44 = objc_msgSend(v9, sel_column);
        v14 = objc_msgSend(v9, (SEL)v5 + 3144);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        v46 = v64[2];
        v45 = v64[3];
        if (v46 >= v45 >> 1)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v46 + 1, 1, v64);
        v64[2] = v46 + 1;
        v17 = &v64[4 * v46];
        v17[4] = v44;
        v17[5] = 0;
        v25 = 5;
LABEL_64:
        *((_BYTE *)v17 + 48) = v25;
LABEL_65:
        v17[7] = v14;
        v6 = &selRef_isErrorStatusCode_;
        goto LABEL_5;
      default:
        swift_bridgeObjectRelease();

        return;
    }
  }
}

uint64_t destroy for PresentationIntent.IntentType(uint64_t a1)
{
  return outlined consume of PresentationIntent.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

ValueMetadata *type metadata accessor for PresentationIntent.IntentType()
{
  return &type metadata for PresentationIntent.IntentType;
}

uint64_t URLResourceValues.contentModificationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x1E0C998D8], a1);
}

uint64_t _NSSwiftTimeZone.isDaylightSavingTime.getter()
{
  uint64_t v0;
  uint64_t v1;
  __darwin_time_t v2;
  uint64_t ObjectType;
  timespec __tp;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&v2 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  ObjectType = swift_getObjectType();
  __tp.tv_sec = v2;
  LOBYTE(v1) = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v1 + 64))(&__tp, ObjectType, v1);
  swift_unknownObjectRelease();
  return v1 & 1;
}

void *_NSSwiftCalendar.components(_:from:to:options:)@<X0>(int a1@<W0>, const void *a2@<X1>, const void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12[36];
  uint64_t __dst[36];
  __int128 v14;
  _QWORD __src[36];

  memcpy(__dst, a2, 0x11AuLL);
  memcpy(v12, a3, 0x11AuLL);
  v8 = *(_QWORD *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 32));
  v11 = *(_OWORD *)(v8 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 32));
  v14 = v11;
  v9 = _fromNSCalendarUnits(_:)(a1);
  Calendar.dateComponents(_:from:to:)(v9, __dst, v12, __src);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 0x100) != 0)
  {
    __src[28] = __src[32];
    LOBYTE(__src[29]) = __src[33];
  }
  return memcpy(a4, __src, 0x11AuLL);
}

uint64_t AttributedString.init<A>(_:)@<X0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  __int128 v38;
  _BYTE v39[48];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[48];
  char v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD v52[7];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[4];

  if (a2 == &type metadata for AttributedString)
  {
    v26 = *(_QWORD *)a1;
    swift_retain();
  }
  else
  {
    if (a2 == &type metadata for AttributedSubstring)
    {
      v27 = *(_QWORD *)a1;
      v28 = *(_OWORD *)(a1 + 24);
      v40 = *(_OWORD *)(a1 + 8);
      v41 = v28;
      v29 = *(_OWORD *)(a1 + 56);
      v42 = *(_OWORD *)(a1 + 40);
      v43 = v29;
      v30 = *(_OWORD *)(v27 + 32);
      v53 = *(_OWORD *)(v27 + 16);
      v54 = v30;
      v55 = *(_OWORD *)(v27 + 48);
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v57);
      swift_release();
      BigString.init(_:)();
      v31 = *(_QWORD *)(v27 + 64);
      v32 = *(_QWORD *)(v27 + 72);
      v33 = *(_QWORD *)(v27 + 80);
      swift_unknownObjectRetain();
      v18 = specialized Rope.extract<A>(from:to:in:)((unint64_t)v40 >> 11, (unint64_t)v42 >> 11, v31, v32, v33);
      v20 = v34;
      v22 = v35;
      v24 = v36;
      swift_unknownObjectRelease();
      swift_release();
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      v25 = (char *)v52;
    }
    else
    {
      v8 = AttributedStringProtocol.__guts.getter(a2, a3);
      (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a3 + 32))(&v49, a2, a3);
      v38 = v49;
      v9 = v50;
      v10 = v51;
      (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a3 + 40))(&v40, a2, a3);
      v53 = v38;
      *(_QWORD *)&v54 = v9;
      *((_QWORD *)&v54 + 1) = v10;
      v55 = v40;
      v56 = v41;
      v11 = *(_OWORD *)(v8 + 32);
      v57[0] = *(_OWORD *)(v8 + 16);
      v57[1] = v11;
      v57[2] = *(_OWORD *)(v8 + 48);
      BigString.unicodeScalars.getter();
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      swift_release();
      outlined release of Locale((uint64_t)v39);
      outlined release of Locale((uint64_t)&v40);
      v52[0] = v43;
      v52[1] = v44;
      v52[2] = v45;
      v52[3] = v46;
      v12 = v43;
      v13 = v45;
      v14 = *(_OWORD *)(v8 + 32);
      v52[4] = *(_OWORD *)(v8 + 16);
      v52[5] = v14;
      v52[6] = *(_OWORD *)(v8 + 48);
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v47);
      swift_release();
      BigString.init(_:)();
      v15 = *(_QWORD *)(v8 + 64);
      v16 = *(_QWORD *)(v8 + 72);
      v17 = *(_QWORD *)(v8 + 80);
      swift_unknownObjectRetain();
      v18 = specialized Rope.extract<A>(from:to:in:)(v12 >> 11, v13 >> 11, v15, v16, v17);
      v20 = v19;
      v22 = v21;
      v24 = v23;
      swift_unknownObjectRelease();
      swift_release();
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      v25 = &v48;
    }
    v26 = AttributedString.Guts.init(string:runs:)(v25, v18, v20, v22, v24);
    swift_release();
  }
  result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
  *a4 = v26;
  return result;
}

double AttributedString.subscript.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[6];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = *(_OWORD **)v1;
  v4 = *(_OWORD *)(*(_QWORD *)v1 + 32);
  v24 = *(_OWORD *)(*(_QWORD *)v1 + 16);
  v25 = v4;
  v26 = v3[3];
  v16[0] = v3;
  v16[1] = BigString.startIndex.getter();
  v16[2] = v5;
  v16[3] = v6;
  v16[4] = v7;
  v16[5] = BigString.endIndex.getter();
  *(_QWORD *)&v17 = v8;
  *((_QWORD *)&v17 + 1) = v9;
  v18 = v10;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v11 = v3[2];
  v21 = v3[1];
  v22 = v11;
  v23 = v3[3];
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v15);
  outlined release of Locale((uint64_t)v16);
  *(_QWORD *)a1 = v3;
  v12 = v18;
  *(_OWORD *)(a1 + 8) = v17;
  *(_OWORD *)(a1 + 24) = v12;
  result = *(double *)&v19;
  v14 = v20;
  *(_OWORD *)(a1 + 40) = v19;
  *(_OWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t AttributedString.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  BigString.init()();
  v6 = 0;
  MEMORY[0x186DA9E90](&v6, 8);
  v2 = v6;
  type metadata accessor for AttributedString.Guts();
  v3 = swift_allocObject();
  result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    v5 = v8;
    *(_OWORD *)(v3 + 16) = v7;
    *(_OWORD *)(v3 + 32) = v5;
    *(_OWORD *)(v3 + 48) = v9;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = v2;
    *a1 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AttributedString.init<A>(markdown:including:options:baseURL:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[3];
  char v19[8];
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v9 = *(_BYTE *)(a3 + 1);
  v10 = *(_BYTE *)(a3 + 2);
  v11 = *(_QWORD *)(a3 + 8);
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_BYTE *)(a3 + 24);
  v14 = *(void **)a4;
  v15 = *(_QWORD *)(a4 + 8);
  v16 = *(_QWORD *)(a4 + 16);
  v19[0] = 1;
  v19[1] = v9;
  v19[2] = v10;
  v20 = v11;
  v21 = v12;
  v22 = v13;
  v18[0] = v14;
  v18[1] = v15;
  v18[2] = v16;
  static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(&v23, a1, a2, a5, v19, (uint64_t)v18, a5, a6);
  swift_bridgeObjectRelease();
  outlined consume of URL?(v14);
  swift_release();
  result = swift_bridgeObjectRelease();
  if (!v7)
    *a7 = v23;
  return result;
}

uint64_t AttributedString.Runs.Run.subscript.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
  a1[3] = 0;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t AttributedString.Guts._characterInvalidatedAttributes(at:)(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1[8];
  if (v2)
    v3 = v1[10];
  else
    v3 = 0;
  if (result < 0 || (v4 = result, v3 < result))
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v5 = v1[9];
  v6 = v1[11];
  if (!v2 || (v1[10] > result ? (v7 = *(unsigned __int16 *)(v2 + 16) == 0) : (v7 = 1), v7))
  {
    v8 = swift_unknownObjectRetain_n();
    v9 = specialized Rope._endPath.getter(v8);
    result = swift_unknownObjectRelease();
    v10 = 0;
    if (v2)
      goto LABEL_13;
    goto LABEL_14;
  }
  v29 = v1[9];
  v14 = *(unsigned __int8 *)(v2 + 18);
  if (!*(_BYTE *)(v2 + 18))
  {
    result = swift_unknownObjectRetain_n();
    v23 = 0;
    v10 = v2;
    v24 = *(unsigned __int16 *)(v2 + 16);
    if (!*(_WORD *)(v2 + 16))
      goto LABEL_49;
LABEL_40:
    v25 = *(_QWORD *)(v10 + 24);
    v18 = __OFSUB__(v4, v25);
    v4 -= v25;
    if (v18)
      goto LABEL_63;
    if (__OFADD__(v4, 1))
    {
LABEL_64:
      __break(1u);
      return result;
    }
    if (v4 + 1 < 1)
      goto LABEL_51;
    if ((_DWORD)v24 == 1)
      goto LABEL_49;
    v26 = (uint64_t *)(v10 + 48);
    v27 = 1;
    while (1)
    {
      v28 = *v26;
      v26 += 3;
      v18 = __OFSUB__(v4, v28);
      v4 -= v28;
      if (v18)
        break;
      if (__OFADD__(v4, 1))
        goto LABEL_62;
      if (v4 + 1 < 1)
      {
        v24 = v27;
        goto LABEL_53;
      }
      if (v24 == ++v27)
        goto LABEL_49;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  result = swift_unknownObjectRetain_n();
  v10 = v2;
  do
  {
    v16 = *(unsigned __int16 *)(v10 + 16);
    if (*(_WORD *)(v10 + 16))
    {
      v17 = *(_QWORD *)(v10 + 40);
      v18 = __OFSUB__(v4, v17);
      v19 = v4 - v17;
      if (v18)
        goto LABEL_57;
      if (__OFADD__(v19, 1))
        goto LABEL_58;
      if (v19 + 1 < 1)
      {
        v16 = 0;
        goto LABEL_23;
      }
      if ((_DWORD)v16 != 1)
      {
        v20 = (uint64_t *)(v10 + 64);
        v21 = 1;
        while (1)
        {
          v22 = *v20;
          v20 += 3;
          v4 = v19 - v22;
          if (__OFSUB__(v19, v22))
            break;
          if (__OFADD__(v4, 1))
            goto LABEL_55;
          if (v4 + 1 < 1)
          {
            v16 = v21;
            v4 = v19;
            goto LABEL_23;
          }
          ++v21;
          v19 = v4;
          if (v16 == v21)
            goto LABEL_22;
        }
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      v4 = v19;
    }
LABEL_22:
    if (v4)
      goto LABEL_56;
LABEL_23:
    v15 = (4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C;
    v14 = ((-15 << v15) - 1) & v14 | (v16 << v15);
    v10 = *(_QWORD *)(v10 + 24 + 24 * v16);
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
  }
  while (*(_BYTE *)(v10 + 18));
  v23 = v14 & 0xFFFFFFFFFFFFF0FFLL;
  v24 = *(unsigned __int16 *)(v10 + 16);
  if (*(_WORD *)(v10 + 16))
    goto LABEL_40;
LABEL_49:
  if (v4)
  {
    __break(1u);
LABEL_51:
    v24 = 0;
  }
LABEL_53:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v9 = v23 | (v24 << 8);
  v5 = v29;
LABEL_13:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v6, v9, v10, v2, v5);
  result = swift_unknownObjectRelease_n();
LABEL_14:
  if (v6 != v1[11])
    goto LABEL_60;
  if (v10)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = v1[8];
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v9, v11);
    swift_unknownObjectRelease();
  }
  v12 = swift_bridgeObjectRetain();
  v13 = specialized _NativeDictionary.filter(_:)(v12);
  swift_bridgeObjectRelease_n();
  return v13;
}

uint64_t AttributedString.Guts.setAttributes(_:in:)(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  __int128 v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[48];
  _BYTE v13[48];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = v2[2];
  v17 = v2[1];
  v18 = v5;
  v19 = v2[3];
  BigString.unicodeScalars.getter();
  v6 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v12);
  v7 = v2[2];
  v14 = v2[1];
  v15 = v7;
  v16 = v2[3];
  BigString.unicodeScalars.getter();
  v8 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v13);
  v6 >>= 11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v6, v8 >> 11, (v8 >> 11) - v6, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = swift_bridgeObjectRetain();
  v10 = specialized Sequence.compactMap<A>(_:)(v9);
  swift_bridgeObjectRelease();
  AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v6, v8 >> 11, 0, v10);
  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownParsingOptions()
{
  return &type metadata for AttributedString.MarkdownParsingOptions;
}

uint64_t AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6;
  char v7;

  v6 = *a2;
  v7 = *a3;
  *(_BYTE *)a6 = result;
  *(_BYTE *)(a6 + 1) = v6;
  *(_BYTE *)(a6 + 2) = v7;
  *(_QWORD *)(a6 + 8) = a4;
  *(_QWORD *)(a6 + 16) = a5;
  *(_BYTE *)(a6 + 24) = 0;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax()
{
  return &type metadata for AttributedString.MarkdownParsingOptions.InterpretedSyntax;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy()
{
  return &type metadata for AttributedString.MarkdownParsingOptions.FailurePolicy;
}

uint64_t AttributedString.replaceSubrange<A, B>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[4];

  v7 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = (_QWORD *)*v6;
    v9 = *(_OWORD *)(*v6 + 16);
    v10 = *(_OWORD *)(*v6 + 48);
    v32[1] = *(_OWORD *)(*v6 + 32);
    v32[2] = v10;
    v32[0] = v9;
    v11 = v8[8];
    v12 = v8[9];
    v14 = v8[10];
    v13 = v8[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v32);
    swift_unknownObjectRetain();
    *v7 = AttributedString.Guts.init(string:runs:)(v32, v11, v12, v14, v13);
    swift_release();
  }
  v15 = *v7;
  v16 = *(_OWORD *)(*v7 + 32);
  v29 = *(_OWORD *)(*v7 + 16);
  v30 = v16;
  v31 = *(_OWORD *)(v15 + 48);
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v23 = v17;
  v24 = 0;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v22[0] = v25;
  v22[1] = v26;
  v22[2] = v27;
  v22[3] = v28;
  return AttributedString.Guts.replaceSubrange<A>(_:with:)(v22, a2, a4, a6);
}

uint64_t static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7, uint64_t a8)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  void *v17;
  char *v18;
  NSAttributedStringMarkdownParsingOptions *v19;
  id v20;
  char v21;
  NSError *v22;
  NSError *v23;
  NSError *v24;
  void *v27;
  NSError *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33[3];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v27 = *a6;
    v11 = *(_BYTE *)(a5 + 24);
    v12 = *(_QWORD *)(a5 + 8);
    v13 = *(_QWORD *)(a5 + 16);
    v14 = *(_BYTE *)(a5 + 2);
    v15 = *(_BYTE *)(a5 + 1);
    LOBYTE(v29) = *(_BYTE *)a5;
    v16 = (char)v29;
    BYTE1(v29) = v15;
    BYTE2(v29) = v14;
    v30 = v12;
    v31 = v13;
    v32 = v11;
    objc_allocWithZone((Class)type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete(0, a7, a8, a4));
    swift_bridgeObjectRetain();
    v17 = (void *)_AttributedStringFromMarkdownCreatorConcrete.init(scope:options:)(a4, (unsigned __int8 *)&v29);
    type metadata accessor for NSAttributedStringMarkdownParsingOptions();
    LOBYTE(v29) = v16;
    BYTE1(v29) = v15;
    BYTE2(v29) = v14;
    v30 = v12;
    v31 = v13;
    v32 = v11;
    swift_bridgeObjectRetain();
    v18 = v17;
    v19 = (NSAttributedStringMarkdownParsingOptions *)NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)&v29);
    if (v27)
      v20 = v27;
    else
      v20 = 0;
    v29 = 0;
    v21 = _NSAttributedStringFromMarkdownWithCreator(v18, a2, a3 - a2, v19, (uint64_t)v20, &v29);

    v22 = v29;
    if ((v21 & 1) != 0 || !v29)
    {
      *a1 = *(_QWORD *)&v18[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str];
      v15 = v18[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes];
      v24 = v22;
      swift_retain();

    }
    else
    {
      v23 = v29;
      swift_willThrow();

    }
  }
  else
  {
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v33, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)&v29);
    v15 = 0;
    *a1 = v29;
  }
  return v15 & 1;
}

uint64_t static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[2];
  uint64_t v41;
  char v42;
  uint64_t v43;

  v43 = a8;
  v11 = *a5;
  v12 = a5[1];
  v13 = a5[2];
  v15 = *((_QWORD *)a5 + 1);
  v14 = *((_QWORD *)a5 + 2);
  v16 = a5[24];
  v17 = *(void **)a6;
  v27 = *(_QWORD *)(a6 + 8);
  v28 = *(_QWORD *)(a6 + 16);
  swift_bridgeObjectRetain();
  if ((a3 & 0x1000000000000000) != 0)
  {
    a2 = static String._copying(_:)();
    v25 = v22;
    swift_bridgeObjectRelease();
    a3 = v25;
    if ((v25 & 0x2000000000000000) == 0)
    {
LABEL_3:
      if ((a2 & 0x1000000000000000) != 0)
      {
        v18 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v19 = a2 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v18 = _StringObject.sharedUTF8.getter();
      }
      v34 = v11;
      if (v18)
        v20 = v18 + v19;
      else
        v20 = 0;
      v35 = v12;
      v36 = v13;
      v37 = v15;
      v38 = v14;
      v39 = v16;
      v31 = v17;
      v32 = v27;
      v33 = v28;
      v21 = static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(&v41, v18, v20, a4, (uint64_t)&v34, &v31, a7, v43);
      if (!v8)
      {
        LOBYTE(v14) = v21;
        swift_bridgeObjectRelease();
LABEL_14:
        *a1 = v41;
        return v14 & 1;
      }
      goto LABEL_12;
    }
  }
  else if ((a3 & 0x2000000000000000) == 0)
  {
    goto LABEL_3;
  }
  v40[0] = a2;
  v40[1] = a3 & 0xFFFFFFFFFFFFFFLL;
  v34 = v11;
  v35 = v12;
  v36 = v13;
  v37 = v15;
  v38 = v14;
  v39 = v16;
  v31 = v17;
  v32 = v27;
  v33 = v28;
  v23 = static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(&v41, (uint64_t)v40, (uint64_t)v40 + (HIBYTE(a3) & 0xF), a4, (uint64_t)&v34, &v31, a7, v43);
  if (!v8)
  {
    v42 = v23 & 1;
    swift_bridgeObjectRelease();
    LOBYTE(v14) = v42;
    goto LABEL_14;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  return v14 & 1;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute, &type metadata for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, (uint64_t (*)(uint64_t))type metadata accessor for NSInlinePresentationIntent, (uint64_t)&protocol conformance descriptor for NSInlinePresentationIntent);
}

void DateComponents.date.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(__int128 *__return_ptr, uint64_t, uint64_t);
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void (*v27)(__int128 *, uint64_t, uint64_t);
  _QWORD v28[2];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[3];

  v2 = *v1;
  if (!*v1)
  {
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v4 = v1[1];
  v3 = v1[2];
  v5 = (__int128 *)(v1 + 4);
  v6 = v1[3];
  if (v3)
  {
    ObjectType = swift_getObjectType();
    v8 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 48);
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    v8(&v30, ObjectType, v4);
    swift_unknownObjectRelease();
    v29 = v30;
    v28[0] = v3;
    v28[1] = v6;
    v9 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v29, (uint64_t)v28);
    swift_unknownObjectRelease();
    if ((v9 & 1) == 0)
    {
      *(_QWORD *)&v29 = v2;
      *((_QWORD *)&v29 + 1) = v4;
      *(_QWORD *)&v30 = v3;
      *((_QWORD *)&v30 + 1) = v6;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      Calendar.timeZone.setter((uint64_t *)&v30);
      v18 = *((_QWORD *)&v29 + 1);
      v19 = swift_getObjectType();
      *(_QWORD *)&v30 = v2;
      *((_QWORD *)&v30 + 1) = v4;
      v31 = v3;
      v32 = v6;
      *(_OWORD *)((char *)v47 + 10) = *(__int128 *)((char *)v5 + 234);
      v20 = v5[13];
      v45 = v5[12];
      v46 = v20;
      v47[0] = v5[14];
      v21 = v5[9];
      v41 = v5[8];
      v42 = v21;
      v22 = v5[11];
      v43 = v5[10];
      v44 = v22;
      v23 = v5[5];
      v37 = v5[4];
      v38 = v23;
      v24 = v5[7];
      v39 = v5[6];
      v40 = v24;
      v25 = v5[1];
      v33 = *v5;
      v34 = v25;
      v26 = v5[3];
      v35 = v5[2];
      v36 = v26;
      v27 = *(void (**)(__int128 *, uint64_t, uint64_t))(v18 + 176);
      swift_unknownObjectRetain();
      v27(&v30, v19, v18);
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      goto LABEL_9;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
  }
  v10 = swift_getObjectType();
  *(_QWORD *)&v30 = v2;
  *((_QWORD *)&v30 + 1) = v4;
  v31 = v3;
  v32 = v6;
  *(_OWORD *)((char *)v47 + 10) = *(__int128 *)((char *)v5 + 234);
  v11 = v5[13];
  v45 = v5[12];
  v46 = v11;
  v47[0] = v5[14];
  v12 = v5[9];
  v41 = v5[8];
  v42 = v12;
  v13 = v5[11];
  v43 = v5[10];
  v44 = v13;
  v14 = v5[5];
  v37 = v5[4];
  v38 = v14;
  v15 = v5[7];
  v39 = v5[6];
  v40 = v15;
  v16 = v5[1];
  v33 = *v5;
  v34 = v16;
  v17 = v5[3];
  v35 = v5[2];
  v36 = v17;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v4 + 176))(&v30, v10, v4);
LABEL_9:
  swift_unknownObjectRelease();
}

void specialized static AttributeScope.scopeDescription.getter()
{
  void *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::UInt v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  char v38;
  int64_t v39;
  char v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  _QWORD *v60;
  unint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  char v99;
  unint64_t v100;
  uint64_t v101;
  _BOOL8 v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  _QWORD *v126;
  unint64_t v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  unint64_t v150;
  int64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  _QWORD *v162;
  unint64_t v163;
  int64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  unint64_t v168;
  int64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  _QWORD *v180;
  unint64_t v181;
  int64_t v182;
  os_unfair_lock_s *v183;
  uint64_t v184;
  _QWORD *v185;
  int64_t v186;
  int64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  char v195;
  char v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  int64_t v203;

  if (one-time initialization token for _loadedScopeCache != -1)
LABEL_225:
    swift_once();
  v0 = &unk_1EDC3E000;
  v1 = _loadedScopeCache + 16;
  v2 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
  swift_retain();
  os_unfair_lock_lock(v2);
  v3 = v1;
  v4 = 0;
  v5 = specialized closure #1 in static AttributeScope.scopeDescription.getter(v3);
  os_unfair_lock_unlock(v2);
  swift_release();
  if (v5)
    return;
  v6 = 0;
  v7 = MEMORY[0x1E0DEE9E0];
  v200 = MEMORY[0x1E0DEE9E0];
LABEL_4:
  while (2)
  {
    v8 = v6;
    swift_getKeyPath();
    v9 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_release();
    if (v8 == *(_DWORD *)(*(_QWORD *)((char *)&full type metadata for AttributeScopes.FoundationAttributes + v9 + 16)
                         + 20))
    {
      v183 = (os_unfair_lock_s *)*((_QWORD *)v0 + 179);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v183 + 10);
      specialized closure #2 in static AttributeScope.scopeDescription.getter((uint64_t)&v183[4], v7, v200);
      os_unfair_lock_unlock(v183 + 10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
    swift_getKeyPath();
    v10 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_release();
    if (v8 >= *(unsigned int *)(*(_QWORD *)((char *)&full type metadata for AttributeScopes.FoundationAttributes
                                           + v10
                                           + 16)
                               + 20))
    {
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
      goto LABEL_225;
    }
    if (static Metadata.Kind.tuple.getter() == 512)
    {
      MEMORY[0x186DA3B9C](&type metadata for AttributeScopes.FoundationAttributes);
      TupleMetadata.Elements.subscript.getter();
      v11 = TupleMetadata.Elements.Element.metadata.getter();
    }
    else
    {
      TypeMetadata.descriptor.getter();
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_getAtKeyPath();
      swift_release();
      FieldDescriptor.subscript.getter();
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_getAtKeyPath();
      swift_release();
      v11 = MangledTypeReference.standardSubstitution.getter();
      if (!v11)
        v11 = TypeMetadata._resolve(_:)();
    }
    v12 = swift_conformsToProtocol2();
    if (v12)
      v13 = v12;
    else
      v13 = 0;
    if (v12)
      v14 = v11;
    else
      v14 = 0;
    if (v14)
    {
      v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v14, v13);
      v65 = v64;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v198 = v63;
      v67 = v63;
      v39 = v7;
      v69 = specialized __RawDictionaryStorage.find<A>(_:)(v67, v65);
      v70 = *(_QWORD *)(v7 + 16);
      v71 = (v68 & 1) == 0;
      v72 = v70 + v71;
      if (__OFADD__(v70, v71))
      {
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
        goto LABEL_233;
      }
      if (*(_QWORD *)(v7 + 24) < v72)
      {
        v194 = v68;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v72, isUniquelyReferenced_nonNull_native);
        v73 = v198;
        v39 = v7;
        v74 = specialized __RawDictionaryStorage.find<A>(_:)(v198, v65);
        if ((v194 & 1) != (v75 & 1))
          goto LABEL_236;
        v69 = v74;
        if ((v194 & 1) == 0)
          goto LABEL_76;
        goto LABEL_73;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v73 = v198;
        if ((v68 & 1) == 0)
          goto LABEL_76;
LABEL_73:
        v76 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v69);
        *v76 = v14;
        v76[1] = v13;
        goto LABEL_78;
      }
      v196 = v68;
      v189 = v4;
      v193 = v8;
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
      v146 = static _DictionaryStorage.copy(original:)();
      v147 = v146;
      if (!*(_QWORD *)(v7 + 16))
        goto LABEL_178;
      v148 = (void *)(v146 + 64);
      v149 = v7 + 64;
      v150 = (unint64_t)((1 << *(_BYTE *)(v147 + 32)) + 63) >> 6;
      if (v147 != v7 || (unint64_t)v148 >= v149 + 8 * v150)
        memmove(v148, (const void *)(v7 + 64), 8 * v150);
      v151 = 0;
      *(_QWORD *)(v147 + 16) = *(_QWORD *)(v7 + 16);
      v152 = 1 << *(_BYTE *)(v7 + 32);
      if (v152 < 64)
        v153 = ~(-1 << v152);
      else
        v153 = -1;
      v154 = v153 & *(_QWORD *)(v7 + 64);
      v39 = (unint64_t)(v152 + 63) >> 6;
      while (1)
      {
        if (v154)
        {
          v155 = __clz(__rbit64(v154));
          v154 &= v154 - 1;
          v156 = v155 | (v151 << 6);
        }
        else
        {
          v44 = __OFADD__(v151++, 1);
          if (v44)
            goto LABEL_232;
          if (v151 >= v39)
            goto LABEL_178;
          v163 = *(_QWORD *)(v149 + 8 * v151);
          if (!v163)
          {
            v164 = v151 + 1;
            if (v151 + 1 >= v39)
              goto LABEL_178;
            v163 = *(_QWORD *)(v149 + 8 * v164);
            if (!v163)
            {
              v164 = v151 + 2;
              if (v151 + 2 >= v39)
                goto LABEL_178;
              v163 = *(_QWORD *)(v149 + 8 * v164);
              if (!v163)
              {
                v164 = v151 + 3;
                if (v151 + 3 >= v39)
                  goto LABEL_178;
                v163 = *(_QWORD *)(v149 + 8 * v164);
                if (!v163)
                {
                  v164 = v151 + 4;
                  if (v151 + 4 >= v39)
                    goto LABEL_178;
                  v163 = *(_QWORD *)(v149 + 8 * v164);
                  if (!v163)
                  {
                    v164 = v151 + 5;
                    if (v151 + 5 >= v39)
                      goto LABEL_178;
                    v163 = *(_QWORD *)(v149 + 8 * v164);
                    if (!v163)
                    {
                      v164 = v151 + 6;
                      if (v151 + 6 >= v39)
                        goto LABEL_178;
                      v163 = *(_QWORD *)(v149 + 8 * v164);
                      if (!v163)
                      {
                        v164 = v151 + 7;
                        if (v151 + 7 >= v39)
                          goto LABEL_178;
                        v163 = *(_QWORD *)(v149 + 8 * v164);
                        if (!v163)
                        {
                          v164 = v151 + 8;
                          if (v151 + 8 >= v39)
                            goto LABEL_178;
                          v163 = *(_QWORD *)(v149 + 8 * v164);
                          if (!v163)
                          {
                            while (1)
                            {
                              v151 = v164 + 1;
                              if (__OFADD__(v164, 1))
                                goto LABEL_237;
                              if (v151 >= v39)
                                break;
                              v163 = *(_QWORD *)(v149 + 8 * v151);
                              ++v164;
                              if (v163)
                                goto LABEL_173;
                            }
LABEL_178:
                            swift_bridgeObjectRelease();
                            v4 = v189;
                            v8 = v193;
                            v0 = &unk_1EDC3E000;
                            v7 = v147;
                            v73 = v198;
                            if ((v196 & 1) != 0)
                              goto LABEL_73;
LABEL_76:
                            *(_QWORD *)(v7 + 8 * (v69 >> 6) + 64) |= 1 << v69;
                            v77 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v69);
                            *v77 = v73;
                            v77[1] = v65;
                            v78 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v69);
                            *v78 = v14;
                            v78[1] = v13;
                            v79 = *(_QWORD *)(v7 + 16);
                            v44 = __OFADD__(v79, 1);
                            v80 = v79 + 1;
                            if (v44)
                              goto LABEL_227;
                            *(_QWORD *)(v7 + 16) = v80;
                            swift_bridgeObjectRetain();
LABEL_78:
                            v6 = v8 + 1;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            v81 = swift_conformsToProtocol2();
                            if (v81)
                              v82 = v81;
                            else
                              v82 = 0;
                            if (!v81)
                              v14 = 0;
                            if (!v14)
                              goto LABEL_4;
                            v129 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 24))(v14, v82);
                            v131 = v130;
                            v39 = v200;
                            v132 = swift_isUniquelyReferenced_nonNull_native();
                            v199 = v129;
                            v134 = specialized __RawDictionaryStorage.find<A>(_:)(v129, v131);
                            v135 = *(_QWORD *)(v200 + 16);
                            v136 = (v133 & 1) == 0;
                            v137 = v135 + v136;
                            if (__OFADD__(v135, v136))
                              goto LABEL_230;
                            v192 = v7;
                            if (*(_QWORD *)(v200 + 24) < v137)
                            {
                              v195 = v133;
                              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v137, v132);
                              v83 = (_QWORD *)v200;
                              v138 = v199;
                              v39 = v200;
                              v139 = specialized __RawDictionaryStorage.find<A>(_:)(v199, v131);
                              if ((v195 & 1) != (v140 & 1))
                                goto LABEL_236;
                              v134 = v139;
                              if ((v195 & 1) == 0)
                                goto LABEL_139;
                              goto LABEL_136;
                            }
                            if ((v132 & 1) != 0)
                            {
                              v83 = (_QWORD *)v200;
                              v138 = v199;
                              if ((v133 & 1) == 0)
                                goto LABEL_139;
                              goto LABEL_136;
                            }
                            v197 = v133;
                            v190 = v4;
                            v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
                            v165 = static _DictionaryStorage.copy(original:)();
                            v83 = (_QWORD *)v165;
                            if (!*(_QWORD *)(v200 + 16))
                              goto LABEL_216;
                            v166 = (void *)(v165 + 64);
                            v167 = v200 + 64;
                            v168 = (unint64_t)((1 << *((_BYTE *)v83 + 32)) + 63) >> 6;
                            if (v83 != (_QWORD *)v200 || (unint64_t)v166 >= v167 + 8 * v168)
                              memmove(v166, (const void *)(v200 + 64), 8 * v168);
                            v169 = 0;
                            v83[2] = *(_QWORD *)(v200 + 16);
                            v170 = 1 << *(_BYTE *)(v200 + 32);
                            if (v170 < 64)
                              v171 = ~(-1 << v170);
                            else
                              v171 = -1;
                            v172 = v171 & *(_QWORD *)(v200 + 64);
                            v39 = (unint64_t)(v170 + 63) >> 6;
                            while (2)
                            {
                              if (v172)
                              {
                                v173 = __clz(__rbit64(v172));
                                v172 &= v172 - 1;
                                v174 = v173 | (v169 << 6);
LABEL_189:
                                v175 = 16 * v174;
                                v176 = (uint64_t *)(*(_QWORD *)(v200 + 48) + v175);
                                v178 = *v176;
                                v177 = v176[1];
                                v179 = *(_OWORD *)(*(_QWORD *)(v200 + 56) + v175);
                                v180 = (_QWORD *)(v83[6] + v175);
                                *v180 = v178;
                                v180[1] = v177;
                                *(_OWORD *)(v83[7] + v175) = v179;
                                swift_bridgeObjectRetain();
                                continue;
                              }
                              break;
                            }
                            v44 = __OFADD__(v169++, 1);
                            if (v44)
                              goto LABEL_235;
                            if (v169 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v169);
                            if (v181)
                            {
LABEL_211:
                              v172 = (v181 - 1) & v181;
                              v174 = __clz(__rbit64(v181)) + (v169 << 6);
                              goto LABEL_189;
                            }
                            v182 = v169 + 1;
                            if (v169 + 1 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 2;
                            if (v169 + 2 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 3;
                            if (v169 + 3 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 4;
                            if (v169 + 4 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 5;
                            if (v169 + 5 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 6;
                            if (v169 + 6 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 7;
                            if (v169 + 7 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 8;
                            if (v169 + 8 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                            {
LABEL_210:
                              v169 = v182;
                              goto LABEL_211;
                            }
                            while (1)
                            {
                              v169 = v182 + 1;
                              if (__OFADD__(v182, 1))
                                goto LABEL_238;
                              if (v169 >= v39)
                                break;
                              v181 = *(_QWORD *)(v167 + 8 * v169);
                              ++v182;
                              if (v181)
                                goto LABEL_211;
                            }
LABEL_216:
                            swift_bridgeObjectRelease();
                            v4 = v190;
                            v0 = &unk_1EDC3E000;
                            v138 = v199;
                            if ((v197 & 1) != 0)
                            {
LABEL_136:
                              v141 = (uint64_t *)(v83[7] + 16 * v134);
                              *v141 = v14;
                              v141[1] = v82;
                              goto LABEL_141;
                            }
LABEL_139:
                            v83[(v134 >> 6) + 8] |= 1 << v134;
                            v142 = (uint64_t *)(v83[6] + 16 * v134);
                            *v142 = v138;
                            v142[1] = v131;
                            v143 = (uint64_t *)(v83[7] + 16 * v134);
                            *v143 = v14;
                            v143[1] = v82;
                            v144 = v83[2];
                            v44 = __OFADD__(v144, 1);
                            v145 = v144 + 1;
                            if (v44)
                              goto LABEL_231;
                            v83[2] = v145;
                            swift_bridgeObjectRetain();
LABEL_141:
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
LABEL_131:
                            v6 = v8 + 1;
                            v200 = (uint64_t)v83;
                            v7 = v192;
                            goto LABEL_4;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v151 = v164;
          }
LABEL_173:
          v154 = (v163 - 1) & v163;
          v156 = __clz(__rbit64(v163)) + (v151 << 6);
        }
        v157 = 16 * v156;
        v158 = (uint64_t *)(*(_QWORD *)(v7 + 48) + v157);
        v160 = *v158;
        v159 = v158[1];
        v161 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + v157);
        v162 = (_QWORD *)(*(_QWORD *)(v147 + 48) + v157);
        *v162 = v160;
        v162[1] = v159;
        *(_OWORD *)(*(_QWORD *)(v147 + 56) + v157) = v161;
        swift_bridgeObjectRetain();
      }
    }
    v15 = swift_conformsToProtocol2();
    if (v15)
      v16 = v15;
    else
      v16 = 0;
    if (v15)
      v17 = v11;
    else
      v17 = 0;
    v6 = v8 + 1;
    if (!v17)
      continue;
    break;
  }
  v188 = v4;
  static AttributeScope.scopeDescription.getter(v17, v16);
  swift_bridgeObjectRetain();
  v18 = swift_isUniquelyReferenced_nonNull_native();
  v202 = (_QWORD *)v7;
  v19 = swift_bridgeObjectRetain();
  v20 = specialized LazyMapSequence.Iterator.next()(v19);
  if (v21)
  {
    v24 = v20;
    v25 = v21;
    v26 = v22;
    v27 = v23;
    while (1)
    {
      v35 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
      v36 = *(_QWORD *)(v7 + 16);
      v37 = (v34 & 1) == 0;
      v28 = v36 + v37;
      if (__OFADD__(v36, v37))
        goto LABEL_221;
      v38 = v34;
      if (*(_QWORD *)(v7 + 24) >= v28)
      {
        if ((v18 & 1) != 0)
        {
          if ((v34 & 1) != 0)
            goto LABEL_26;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
          v46 = static _DictionaryStorage.copy(original:)();
          v191 = (_QWORD *)v46;
          if (*(_QWORD *)(v7 + 16))
          {
            v47 = v46;
            v48 = (void *)(v46 + 64);
            v49 = (unint64_t)((1 << *(_BYTE *)(v47 + 32)) + 63) >> 6;
            if (v47 != v7 || (unint64_t)v48 >= v7 + 64 + 8 * v49)
              memmove(v48, (const void *)(v7 + 64), 8 * v49);
            v184 = v7 + 64;
            v39 = 0;
            v191[2] = *(_QWORD *)(v7 + 16);
            v50 = 1 << *(_BYTE *)(v7 + 32);
            if (v50 < 64)
              v51 = ~(-1 << v50);
            else
              v51 = -1;
            v52 = v51 & *(_QWORD *)(v7 + 64);
            v186 = (unint64_t)(v50 + 63) >> 6;
            while (1)
            {
              if (v52)
              {
                v53 = __clz(__rbit64(v52));
                v52 &= v52 - 1;
                v54 = v53 | (v39 << 6);
              }
              else
              {
                v44 = __OFADD__(v39++, 1);
                if (v44)
                  goto LABEL_228;
                if (v39 >= v186)
                  break;
                v61 = *(_QWORD *)(v184 + 8 * v39);
                if (!v61)
                {
                  v62 = v39 + 1;
                  if (v39 + 1 >= v186)
                    break;
                  v61 = *(_QWORD *)(v184 + 8 * v62);
                  if (!v61)
                  {
                    v62 = v39 + 2;
                    if (v39 + 2 >= v186)
                      break;
                    v61 = *(_QWORD *)(v184 + 8 * v62);
                    if (!v61)
                    {
                      v62 = v39 + 3;
                      if (v39 + 3 >= v186)
                        break;
                      v61 = *(_QWORD *)(v184 + 8 * v62);
                      if (!v61)
                      {
                        v62 = v39 + 4;
                        if (v39 + 4 >= v186)
                          break;
                        v61 = *(_QWORD *)(v184 + 8 * v62);
                        if (!v61)
                        {
                          v62 = v39 + 5;
                          if (v39 + 5 >= v186)
                            break;
                          v61 = *(_QWORD *)(v184 + 8 * v62);
                          if (!v61)
                          {
                            while (1)
                            {
                              v39 = v62 + 1;
                              if (__OFADD__(v62, 1))
                                break;
                              if (v39 >= v186)
                                goto LABEL_67;
                              v61 = *(_QWORD *)(v184 + 8 * v39);
                              ++v62;
                              if (v61)
                                goto LABEL_62;
                            }
LABEL_233:
                            __break(1u);
                            goto LABEL_234;
                          }
                        }
                      }
                    }
                  }
                  v39 = v62;
                }
LABEL_62:
                v52 = (v61 - 1) & v61;
                v54 = __clz(__rbit64(v61)) + (v39 << 6);
              }
              v55 = 16 * v54;
              v56 = (uint64_t *)(*(_QWORD *)(v7 + 48) + v55);
              v58 = *v56;
              v57 = v56[1];
              v59 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + v55);
              v60 = (_QWORD *)(v191[6] + v55);
              *v60 = v58;
              v60[1] = v57;
              *(_OWORD *)(v191[7] + v55) = v59;
              swift_bridgeObjectRetain();
            }
          }
LABEL_67:
          v28 = swift_release();
          v7 = (uint64_t)v191;
          v202 = v191;
          if ((v38 & 1) != 0)
          {
LABEL_26:
            v28 = swift_bridgeObjectRelease();
            v29 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v35);
            *v29 = v26;
            v29[1] = v27;
            goto LABEL_27;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, v18 & 1);
        v7 = (uint64_t)v202;
        v39 = (int64_t)v202;
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_236;
        v35 = v28;
        if ((v38 & 1) != 0)
          goto LABEL_26;
      }
      *(_QWORD *)(v7 + 8 * (v35 >> 6) + 64) |= 1 << v35;
      v41 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v35);
      *v41 = v24;
      v41[1] = v25;
      v42 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v35);
      *v42 = v26;
      v42[1] = v27;
      v43 = *(_QWORD *)(v7 + 16);
      v44 = __OFADD__(v43, 1);
      v45 = v43 + 1;
      if (v44)
        goto LABEL_223;
      *(_QWORD *)(v7 + 16) = v45;
LABEL_27:
      v24 = specialized LazyMapSequence.Iterator.next()(v28);
      v25 = v30;
      v26 = v31;
      v27 = v32;
      v18 = 1;
      v33 = v7;
      if (!v30)
        goto LABEL_86;
    }
  }
  v33 = v7;
LABEL_86:
  v192 = v33;
  swift_bridgeObjectRelease();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v83 = (_QWORD *)v200;
  v84 = swift_isUniquelyReferenced_nonNull_native();
  v203 = v200;
  v85 = swift_bridgeObjectRetain();
  v86 = specialized LazyMapSequence.Iterator.next()(v85);
  if (!v87)
  {
LABEL_130:
    swift_bridgeObjectRelease();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v188;
    v0 = &unk_1EDC3E000;
    goto LABEL_131;
  }
  v90 = v86;
  v91 = v87;
  v92 = (_QWORD *)v200;
  while (1)
  {
    v201 = v89;
    v96 = v88;
    v97 = v8;
    v98 = v92;
    v100 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v91);
    v101 = v92[2];
    v102 = (v99 & 1) == 0;
    v93 = v101 + v102;
    if (__OFADD__(v101, v102))
      goto LABEL_222;
    v83 = v92;
    v103 = v99;
    if (v92[3] < v93)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v93, v84 & 1);
      v83 = (_QWORD *)v203;
      v39 = v203;
      v93 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v91);
      if ((v103 & 1) != (v104 & 1))
        goto LABEL_236;
      v100 = v93;
LABEL_95:
      v8 = v97;
      v105 = v201;
      if ((v103 & 1) != 0)
        goto LABEL_88;
      goto LABEL_96;
    }
    if ((v84 & 1) != 0)
      goto LABEL_95;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
    v110 = static _DictionaryStorage.copy(original:)();
    v111 = v92;
    v83 = (_QWORD *)v110;
    if (v92[2])
      break;
LABEL_128:
    v8 = v97;
    v93 = swift_release();
    v203 = (int64_t)v83;
    v105 = v201;
    if ((v103 & 1) != 0)
    {
LABEL_88:
      v93 = swift_bridgeObjectRelease();
      v94 = (_QWORD *)(v83[7] + 16 * v100);
      *v94 = v96;
      v94[1] = v105;
      goto LABEL_89;
    }
LABEL_96:
    v83[(v100 >> 6) + 8] |= 1 << v100;
    v106 = (uint64_t *)(v83[6] + 16 * v100);
    *v106 = v90;
    v106[1] = v91;
    v107 = (_QWORD *)(v83[7] + 16 * v100);
    *v107 = v96;
    v107[1] = v105;
    v108 = v83[2];
    v44 = __OFADD__(v108, 1);
    v109 = v108 + 1;
    if (v44)
      goto LABEL_224;
    v83[2] = v109;
LABEL_89:
    v90 = specialized LazyMapSequence.Iterator.next()(v93);
    v91 = v95;
    v84 = 1;
    v92 = v83;
    if (!v95)
      goto LABEL_130;
  }
  v112 = (_QWORD *)(v110 + 64);
  v113 = (unint64_t)((1 << *((_BYTE *)v83 + 32)) + 63) >> 6;
  if (v83 != v92 || v112 >= &v92[v113 + 8])
  {
    memmove(v112, v92 + 8, 8 * v113);
    v111 = v92;
  }
  v185 = v92 + 8;
  v39 = 0;
  v83[2] = v111[2];
  v114 = 1 << *((_BYTE *)v111 + 32);
  if (v114 < 64)
    v115 = ~(-1 << v114);
  else
    v115 = -1;
  v116 = v115 & v111[8];
  v187 = (unint64_t)(v114 + 63) >> 6;
  while (2)
  {
    if (v116)
    {
      v117 = __clz(__rbit64(v116));
      v116 &= v116 - 1;
      v118 = v117 | (v39 << 6);
      v119 = v98;
LABEL_107:
      v120 = 16 * v118;
      v121 = v119[7];
      v122 = (uint64_t *)(v119[6] + v120);
      v124 = *v122;
      v123 = v122[1];
      v125 = *(_OWORD *)(v121 + v120);
      v126 = (_QWORD *)(v83[6] + v120);
      *v126 = v124;
      v126[1] = v123;
      *(_OWORD *)(v83[7] + v120) = v125;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v44 = __OFADD__(v39++, 1);
  if (v44)
    goto LABEL_229;
  v119 = v98;
  if (v39 >= v187)
    goto LABEL_128;
  v127 = v185[v39];
  if (v127)
  {
LABEL_123:
    v116 = (v127 - 1) & v127;
    v118 = __clz(__rbit64(v127)) + (v39 << 6);
    goto LABEL_107;
  }
  v128 = v39 + 1;
  if (v39 + 1 >= v187)
    goto LABEL_128;
  v127 = v185[v128];
  if (v127)
    goto LABEL_122;
  v128 = v39 + 2;
  if (v39 + 2 >= v187)
    goto LABEL_128;
  v127 = v185[v128];
  if (v127)
    goto LABEL_122;
  v128 = v39 + 3;
  if (v39 + 3 >= v187)
    goto LABEL_128;
  v127 = v185[v128];
  if (v127)
    goto LABEL_122;
  v128 = v39 + 4;
  if (v39 + 4 >= v187)
    goto LABEL_128;
  v127 = v185[v128];
  if (v127)
    goto LABEL_122;
  v128 = v39 + 5;
  if (v39 + 5 >= v187)
    goto LABEL_128;
  v127 = v185[v128];
  if (v127)
  {
LABEL_122:
    v39 = v128;
    goto LABEL_123;
  }
  while (1)
  {
    v39 = v128 + 1;
    if (__OFADD__(v128, 1))
      break;
    if (v39 >= v187)
      goto LABEL_128;
    v127 = v185[v39];
    ++v128;
    if (v127)
      goto LABEL_123;
  }
LABEL_234:
  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_237:
  __break(1u);
  os_unfair_lock_unlock((os_unfair_lock_t)v39);
  __break(1u);
LABEL_238:
  __break(1u);
}

{
  void *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::UInt v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  char v38;
  int64_t v39;
  char v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  _QWORD *v60;
  unint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  char v99;
  unint64_t v100;
  uint64_t v101;
  _BOOL8 v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  _QWORD *v126;
  unint64_t v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  unint64_t v150;
  int64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  _QWORD *v162;
  unint64_t v163;
  int64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  unint64_t v168;
  int64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  _QWORD *v180;
  unint64_t v181;
  int64_t v182;
  os_unfair_lock_s *v183;
  uint64_t v184;
  _QWORD *v185;
  int64_t v186;
  int64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  char v195;
  char v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  int64_t v203;

  if (one-time initialization token for _loadedScopeCache != -1)
LABEL_225:
    swift_once();
  v0 = &unk_1EDC3E000;
  v1 = _loadedScopeCache + 16;
  v2 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
  swift_retain();
  os_unfair_lock_lock(v2);
  v3 = v1;
  v4 = 0;
  v5 = specialized closure #1 in static AttributeScope.scopeDescription.getter(v3);
  os_unfair_lock_unlock(v2);
  swift_release();
  if (v5)
    return;
  v6 = 0;
  v7 = MEMORY[0x1E0DEE9E0];
  v200 = MEMORY[0x1E0DEE9E0];
LABEL_4:
  while (2)
  {
    v8 = v6;
    swift_getKeyPath();
    v9 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_release();
    if (v8 == *(_DWORD *)(*(_QWORD *)((char *)&full type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes
                                     + v9
                                     + 16)
                         + 20))
    {
      v183 = (os_unfair_lock_s *)*((_QWORD *)v0 + 179);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v183 + 10);
      specialized closure #2 in static AttributeScope.scopeDescription.getter((uint64_t)&v183[4], v7, v200);
      os_unfair_lock_unlock(v183 + 10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
    swift_getKeyPath();
    v10 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_release();
    if (v8 >= *(unsigned int *)(*(_QWORD *)((char *)&full type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes
                                           + v10
                                           + 16)
                               + 20))
    {
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
      goto LABEL_225;
    }
    if (static Metadata.Kind.tuple.getter() == 512)
    {
      MEMORY[0x186DA3B9C](&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes);
      TupleMetadata.Elements.subscript.getter();
      v11 = TupleMetadata.Elements.Element.metadata.getter();
    }
    else
    {
      TypeMetadata.descriptor.getter();
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_getAtKeyPath();
      swift_release();
      FieldDescriptor.subscript.getter();
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_getAtKeyPath();
      swift_release();
      v11 = MangledTypeReference.standardSubstitution.getter();
      if (!v11)
        v11 = TypeMetadata._resolve(_:)();
    }
    v12 = swift_conformsToProtocol2();
    if (v12)
      v13 = v12;
    else
      v13 = 0;
    if (v12)
      v14 = v11;
    else
      v14 = 0;
    if (v14)
    {
      v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v14, v13);
      v65 = v64;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v198 = v63;
      v67 = v63;
      v39 = v7;
      v69 = specialized __RawDictionaryStorage.find<A>(_:)(v67, v65);
      v70 = *(_QWORD *)(v7 + 16);
      v71 = (v68 & 1) == 0;
      v72 = v70 + v71;
      if (__OFADD__(v70, v71))
      {
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
        goto LABEL_233;
      }
      if (*(_QWORD *)(v7 + 24) < v72)
      {
        v194 = v68;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v72, isUniquelyReferenced_nonNull_native);
        v73 = v198;
        v39 = v7;
        v74 = specialized __RawDictionaryStorage.find<A>(_:)(v198, v65);
        if ((v194 & 1) != (v75 & 1))
          goto LABEL_236;
        v69 = v74;
        if ((v194 & 1) == 0)
          goto LABEL_76;
        goto LABEL_73;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v73 = v198;
        if ((v68 & 1) == 0)
          goto LABEL_76;
LABEL_73:
        v76 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v69);
        *v76 = v14;
        v76[1] = v13;
        goto LABEL_78;
      }
      v196 = v68;
      v189 = v4;
      v193 = v8;
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
      v146 = static _DictionaryStorage.copy(original:)();
      v147 = v146;
      if (!*(_QWORD *)(v7 + 16))
        goto LABEL_178;
      v148 = (void *)(v146 + 64);
      v149 = v7 + 64;
      v150 = (unint64_t)((1 << *(_BYTE *)(v147 + 32)) + 63) >> 6;
      if (v147 != v7 || (unint64_t)v148 >= v149 + 8 * v150)
        memmove(v148, (const void *)(v7 + 64), 8 * v150);
      v151 = 0;
      *(_QWORD *)(v147 + 16) = *(_QWORD *)(v7 + 16);
      v152 = 1 << *(_BYTE *)(v7 + 32);
      if (v152 < 64)
        v153 = ~(-1 << v152);
      else
        v153 = -1;
      v154 = v153 & *(_QWORD *)(v7 + 64);
      v39 = (unint64_t)(v152 + 63) >> 6;
      while (1)
      {
        if (v154)
        {
          v155 = __clz(__rbit64(v154));
          v154 &= v154 - 1;
          v156 = v155 | (v151 << 6);
        }
        else
        {
          v44 = __OFADD__(v151++, 1);
          if (v44)
            goto LABEL_232;
          if (v151 >= v39)
            goto LABEL_178;
          v163 = *(_QWORD *)(v149 + 8 * v151);
          if (!v163)
          {
            v164 = v151 + 1;
            if (v151 + 1 >= v39)
              goto LABEL_178;
            v163 = *(_QWORD *)(v149 + 8 * v164);
            if (!v163)
            {
              v164 = v151 + 2;
              if (v151 + 2 >= v39)
                goto LABEL_178;
              v163 = *(_QWORD *)(v149 + 8 * v164);
              if (!v163)
              {
                v164 = v151 + 3;
                if (v151 + 3 >= v39)
                  goto LABEL_178;
                v163 = *(_QWORD *)(v149 + 8 * v164);
                if (!v163)
                {
                  v164 = v151 + 4;
                  if (v151 + 4 >= v39)
                    goto LABEL_178;
                  v163 = *(_QWORD *)(v149 + 8 * v164);
                  if (!v163)
                  {
                    v164 = v151 + 5;
                    if (v151 + 5 >= v39)
                      goto LABEL_178;
                    v163 = *(_QWORD *)(v149 + 8 * v164);
                    if (!v163)
                    {
                      v164 = v151 + 6;
                      if (v151 + 6 >= v39)
                        goto LABEL_178;
                      v163 = *(_QWORD *)(v149 + 8 * v164);
                      if (!v163)
                      {
                        v164 = v151 + 7;
                        if (v151 + 7 >= v39)
                          goto LABEL_178;
                        v163 = *(_QWORD *)(v149 + 8 * v164);
                        if (!v163)
                        {
                          v164 = v151 + 8;
                          if (v151 + 8 >= v39)
                            goto LABEL_178;
                          v163 = *(_QWORD *)(v149 + 8 * v164);
                          if (!v163)
                          {
                            while (1)
                            {
                              v151 = v164 + 1;
                              if (__OFADD__(v164, 1))
                                goto LABEL_237;
                              if (v151 >= v39)
                                break;
                              v163 = *(_QWORD *)(v149 + 8 * v151);
                              ++v164;
                              if (v163)
                                goto LABEL_173;
                            }
LABEL_178:
                            swift_bridgeObjectRelease();
                            v4 = v189;
                            v8 = v193;
                            v0 = &unk_1EDC3E000;
                            v7 = v147;
                            v73 = v198;
                            if ((v196 & 1) != 0)
                              goto LABEL_73;
LABEL_76:
                            *(_QWORD *)(v7 + 8 * (v69 >> 6) + 64) |= 1 << v69;
                            v77 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v69);
                            *v77 = v73;
                            v77[1] = v65;
                            v78 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v69);
                            *v78 = v14;
                            v78[1] = v13;
                            v79 = *(_QWORD *)(v7 + 16);
                            v44 = __OFADD__(v79, 1);
                            v80 = v79 + 1;
                            if (v44)
                              goto LABEL_227;
                            *(_QWORD *)(v7 + 16) = v80;
                            swift_bridgeObjectRetain();
LABEL_78:
                            v6 = v8 + 1;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            v81 = swift_conformsToProtocol2();
                            if (v81)
                              v82 = v81;
                            else
                              v82 = 0;
                            if (!v81)
                              v14 = 0;
                            if (!v14)
                              goto LABEL_4;
                            v129 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 24))(v14, v82);
                            v131 = v130;
                            v39 = v200;
                            v132 = swift_isUniquelyReferenced_nonNull_native();
                            v199 = v129;
                            v134 = specialized __RawDictionaryStorage.find<A>(_:)(v129, v131);
                            v135 = *(_QWORD *)(v200 + 16);
                            v136 = (v133 & 1) == 0;
                            v137 = v135 + v136;
                            if (__OFADD__(v135, v136))
                              goto LABEL_230;
                            v192 = v7;
                            if (*(_QWORD *)(v200 + 24) < v137)
                            {
                              v195 = v133;
                              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v137, v132);
                              v83 = (_QWORD *)v200;
                              v138 = v199;
                              v39 = v200;
                              v139 = specialized __RawDictionaryStorage.find<A>(_:)(v199, v131);
                              if ((v195 & 1) != (v140 & 1))
                                goto LABEL_236;
                              v134 = v139;
                              if ((v195 & 1) == 0)
                                goto LABEL_139;
                              goto LABEL_136;
                            }
                            if ((v132 & 1) != 0)
                            {
                              v83 = (_QWORD *)v200;
                              v138 = v199;
                              if ((v133 & 1) == 0)
                                goto LABEL_139;
                              goto LABEL_136;
                            }
                            v197 = v133;
                            v190 = v4;
                            v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
                            v165 = static _DictionaryStorage.copy(original:)();
                            v83 = (_QWORD *)v165;
                            if (!*(_QWORD *)(v200 + 16))
                              goto LABEL_216;
                            v166 = (void *)(v165 + 64);
                            v167 = v200 + 64;
                            v168 = (unint64_t)((1 << *((_BYTE *)v83 + 32)) + 63) >> 6;
                            if (v83 != (_QWORD *)v200 || (unint64_t)v166 >= v167 + 8 * v168)
                              memmove(v166, (const void *)(v200 + 64), 8 * v168);
                            v169 = 0;
                            v83[2] = *(_QWORD *)(v200 + 16);
                            v170 = 1 << *(_BYTE *)(v200 + 32);
                            if (v170 < 64)
                              v171 = ~(-1 << v170);
                            else
                              v171 = -1;
                            v172 = v171 & *(_QWORD *)(v200 + 64);
                            v39 = (unint64_t)(v170 + 63) >> 6;
                            while (2)
                            {
                              if (v172)
                              {
                                v173 = __clz(__rbit64(v172));
                                v172 &= v172 - 1;
                                v174 = v173 | (v169 << 6);
LABEL_189:
                                v175 = 16 * v174;
                                v176 = (uint64_t *)(*(_QWORD *)(v200 + 48) + v175);
                                v178 = *v176;
                                v177 = v176[1];
                                v179 = *(_OWORD *)(*(_QWORD *)(v200 + 56) + v175);
                                v180 = (_QWORD *)(v83[6] + v175);
                                *v180 = v178;
                                v180[1] = v177;
                                *(_OWORD *)(v83[7] + v175) = v179;
                                swift_bridgeObjectRetain();
                                continue;
                              }
                              break;
                            }
                            v44 = __OFADD__(v169++, 1);
                            if (v44)
                              goto LABEL_235;
                            if (v169 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v169);
                            if (v181)
                            {
LABEL_211:
                              v172 = (v181 - 1) & v181;
                              v174 = __clz(__rbit64(v181)) + (v169 << 6);
                              goto LABEL_189;
                            }
                            v182 = v169 + 1;
                            if (v169 + 1 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 2;
                            if (v169 + 2 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 3;
                            if (v169 + 3 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 4;
                            if (v169 + 4 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 5;
                            if (v169 + 5 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 6;
                            if (v169 + 6 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 7;
                            if (v169 + 7 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                              goto LABEL_210;
                            v182 = v169 + 8;
                            if (v169 + 8 >= v39)
                              goto LABEL_216;
                            v181 = *(_QWORD *)(v167 + 8 * v182);
                            if (v181)
                            {
LABEL_210:
                              v169 = v182;
                              goto LABEL_211;
                            }
                            while (1)
                            {
                              v169 = v182 + 1;
                              if (__OFADD__(v182, 1))
                                goto LABEL_238;
                              if (v169 >= v39)
                                break;
                              v181 = *(_QWORD *)(v167 + 8 * v169);
                              ++v182;
                              if (v181)
                                goto LABEL_211;
                            }
LABEL_216:
                            swift_bridgeObjectRelease();
                            v4 = v190;
                            v0 = &unk_1EDC3E000;
                            v138 = v199;
                            if ((v197 & 1) != 0)
                            {
LABEL_136:
                              v141 = (uint64_t *)(v83[7] + 16 * v134);
                              *v141 = v14;
                              v141[1] = v82;
                              goto LABEL_141;
                            }
LABEL_139:
                            v83[(v134 >> 6) + 8] |= 1 << v134;
                            v142 = (uint64_t *)(v83[6] + 16 * v134);
                            *v142 = v138;
                            v142[1] = v131;
                            v143 = (uint64_t *)(v83[7] + 16 * v134);
                            *v143 = v14;
                            v143[1] = v82;
                            v144 = v83[2];
                            v44 = __OFADD__(v144, 1);
                            v145 = v144 + 1;
                            if (v44)
                              goto LABEL_231;
                            v83[2] = v145;
                            swift_bridgeObjectRetain();
LABEL_141:
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
LABEL_131:
                            v6 = v8 + 1;
                            v200 = (uint64_t)v83;
                            v7 = v192;
                            goto LABEL_4;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v151 = v164;
          }
LABEL_173:
          v154 = (v163 - 1) & v163;
          v156 = __clz(__rbit64(v163)) + (v151 << 6);
        }
        v157 = 16 * v156;
        v158 = (uint64_t *)(*(_QWORD *)(v7 + 48) + v157);
        v160 = *v158;
        v159 = v158[1];
        v161 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + v157);
        v162 = (_QWORD *)(*(_QWORD *)(v147 + 48) + v157);
        *v162 = v160;
        v162[1] = v159;
        *(_OWORD *)(*(_QWORD *)(v147 + 56) + v157) = v161;
        swift_bridgeObjectRetain();
      }
    }
    v15 = swift_conformsToProtocol2();
    if (v15)
      v16 = v15;
    else
      v16 = 0;
    if (v15)
      v17 = v11;
    else
      v17 = 0;
    v6 = v8 + 1;
    if (!v17)
      continue;
    break;
  }
  v188 = v4;
  static AttributeScope.scopeDescription.getter(v17, v16);
  swift_bridgeObjectRetain();
  v18 = swift_isUniquelyReferenced_nonNull_native();
  v202 = (_QWORD *)v7;
  v19 = swift_bridgeObjectRetain();
  v20 = specialized LazyMapSequence.Iterator.next()(v19);
  if (v21)
  {
    v24 = v20;
    v25 = v21;
    v26 = v22;
    v27 = v23;
    while (1)
    {
      v35 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
      v36 = *(_QWORD *)(v7 + 16);
      v37 = (v34 & 1) == 0;
      v28 = v36 + v37;
      if (__OFADD__(v36, v37))
        goto LABEL_221;
      v38 = v34;
      if (*(_QWORD *)(v7 + 24) >= v28)
      {
        if ((v18 & 1) != 0)
        {
          if ((v34 & 1) != 0)
            goto LABEL_26;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
          v46 = static _DictionaryStorage.copy(original:)();
          v191 = (_QWORD *)v46;
          if (*(_QWORD *)(v7 + 16))
          {
            v47 = v46;
            v48 = (void *)(v46 + 64);
            v49 = (unint64_t)((1 << *(_BYTE *)(v47 + 32)) + 63) >> 6;
            if (v47 != v7 || (unint64_t)v48 >= v7 + 64 + 8 * v49)
              memmove(v48, (const void *)(v7 + 64), 8 * v49);
            v184 = v7 + 64;
            v39 = 0;
            v191[2] = *(_QWORD *)(v7 + 16);
            v50 = 1 << *(_BYTE *)(v7 + 32);
            if (v50 < 64)
              v51 = ~(-1 << v50);
            else
              v51 = -1;
            v52 = v51 & *(_QWORD *)(v7 + 64);
            v186 = (unint64_t)(v50 + 63) >> 6;
            while (1)
            {
              if (v52)
              {
                v53 = __clz(__rbit64(v52));
                v52 &= v52 - 1;
                v54 = v53 | (v39 << 6);
              }
              else
              {
                v44 = __OFADD__(v39++, 1);
                if (v44)
                  goto LABEL_228;
                if (v39 >= v186)
                  break;
                v61 = *(_QWORD *)(v184 + 8 * v39);
                if (!v61)
                {
                  v62 = v39 + 1;
                  if (v39 + 1 >= v186)
                    break;
                  v61 = *(_QWORD *)(v184 + 8 * v62);
                  if (!v61)
                  {
                    v62 = v39 + 2;
                    if (v39 + 2 >= v186)
                      break;
                    v61 = *(_QWORD *)(v184 + 8 * v62);
                    if (!v61)
                    {
                      v62 = v39 + 3;
                      if (v39 + 3 >= v186)
                        break;
                      v61 = *(_QWORD *)(v184 + 8 * v62);
                      if (!v61)
                      {
                        v62 = v39 + 4;
                        if (v39 + 4 >= v186)
                          break;
                        v61 = *(_QWORD *)(v184 + 8 * v62);
                        if (!v61)
                        {
                          v62 = v39 + 5;
                          if (v39 + 5 >= v186)
                            break;
                          v61 = *(_QWORD *)(v184 + 8 * v62);
                          if (!v61)
                          {
                            while (1)
                            {
                              v39 = v62 + 1;
                              if (__OFADD__(v62, 1))
                                break;
                              if (v39 >= v186)
                                goto LABEL_67;
                              v61 = *(_QWORD *)(v184 + 8 * v39);
                              ++v62;
                              if (v61)
                                goto LABEL_62;
                            }
LABEL_233:
                            __break(1u);
                            goto LABEL_234;
                          }
                        }
                      }
                    }
                  }
                  v39 = v62;
                }
LABEL_62:
                v52 = (v61 - 1) & v61;
                v54 = __clz(__rbit64(v61)) + (v39 << 6);
              }
              v55 = 16 * v54;
              v56 = (uint64_t *)(*(_QWORD *)(v7 + 48) + v55);
              v58 = *v56;
              v57 = v56[1];
              v59 = *(_OWORD *)(*(_QWORD *)(v7 + 56) + v55);
              v60 = (_QWORD *)(v191[6] + v55);
              *v60 = v58;
              v60[1] = v57;
              *(_OWORD *)(v191[7] + v55) = v59;
              swift_bridgeObjectRetain();
            }
          }
LABEL_67:
          v28 = swift_release();
          v7 = (uint64_t)v191;
          v202 = v191;
          if ((v38 & 1) != 0)
          {
LABEL_26:
            v28 = swift_bridgeObjectRelease();
            v29 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v35);
            *v29 = v26;
            v29[1] = v27;
            goto LABEL_27;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, v18 & 1);
        v7 = (uint64_t)v202;
        v39 = (int64_t)v202;
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_236;
        v35 = v28;
        if ((v38 & 1) != 0)
          goto LABEL_26;
      }
      *(_QWORD *)(v7 + 8 * (v35 >> 6) + 64) |= 1 << v35;
      v41 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v35);
      *v41 = v24;
      v41[1] = v25;
      v42 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v35);
      *v42 = v26;
      v42[1] = v27;
      v43 = *(_QWORD *)(v7 + 16);
      v44 = __OFADD__(v43, 1);
      v45 = v43 + 1;
      if (v44)
        goto LABEL_223;
      *(_QWORD *)(v7 + 16) = v45;
LABEL_27:
      v24 = specialized LazyMapSequence.Iterator.next()(v28);
      v25 = v30;
      v26 = v31;
      v27 = v32;
      v18 = 1;
      v33 = v7;
      if (!v30)
        goto LABEL_86;
    }
  }
  v33 = v7;
LABEL_86:
  v192 = v33;
  swift_bridgeObjectRelease();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v83 = (_QWORD *)v200;
  v84 = swift_isUniquelyReferenced_nonNull_native();
  v203 = v200;
  v85 = swift_bridgeObjectRetain();
  v86 = specialized LazyMapSequence.Iterator.next()(v85);
  if (!v87)
  {
LABEL_130:
    swift_bridgeObjectRelease();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v188;
    v0 = &unk_1EDC3E000;
    goto LABEL_131;
  }
  v90 = v86;
  v91 = v87;
  v92 = (_QWORD *)v200;
  while (1)
  {
    v201 = v89;
    v96 = v88;
    v97 = v8;
    v98 = v92;
    v100 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v91);
    v101 = v92[2];
    v102 = (v99 & 1) == 0;
    v93 = v101 + v102;
    if (__OFADD__(v101, v102))
      goto LABEL_222;
    v83 = v92;
    v103 = v99;
    if (v92[3] < v93)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v93, v84 & 1);
      v83 = (_QWORD *)v203;
      v39 = v203;
      v93 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v91);
      if ((v103 & 1) != (v104 & 1))
        goto LABEL_236;
      v100 = v93;
LABEL_95:
      v8 = v97;
      v105 = v201;
      if ((v103 & 1) != 0)
        goto LABEL_88;
      goto LABEL_96;
    }
    if ((v84 & 1) != 0)
      goto LABEL_95;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
    v110 = static _DictionaryStorage.copy(original:)();
    v111 = v92;
    v83 = (_QWORD *)v110;
    if (v92[2])
      break;
LABEL_128:
    v8 = v97;
    v93 = swift_release();
    v203 = (int64_t)v83;
    v105 = v201;
    if ((v103 & 1) != 0)
    {
LABEL_88:
      v93 = swift_bridgeObjectRelease();
      v94 = (_QWORD *)(v83[7] + 16 * v100);
      *v94 = v96;
      v94[1] = v105;
      goto LABEL_89;
    }
LABEL_96:
    v83[(v100 >> 6) + 8] |= 1 << v100;
    v106 = (uint64_t *)(v83[6] + 16 * v100);
    *v106 = v90;
    v106[1] = v91;
    v107 = (_QWORD *)(v83[7] + 16 * v100);
    *v107 = v96;
    v107[1] = v105;
    v108 = v83[2];
    v44 = __OFADD__(v108, 1);
    v109 = v108 + 1;
    if (v44)
      goto LABEL_224;
    v83[2] = v109;
LABEL_89:
    v90 = specialized LazyMapSequence.Iterator.next()(v93);
    v91 = v95;
    v84 = 1;
    v92 = v83;
    if (!v95)
      goto LABEL_130;
  }
  v112 = (_QWORD *)(v110 + 64);
  v113 = (unint64_t)((1 << *((_BYTE *)v83 + 32)) + 63) >> 6;
  if (v83 != v92 || v112 >= &v92[v113 + 8])
  {
    memmove(v112, v92 + 8, 8 * v113);
    v111 = v92;
  }
  v185 = v92 + 8;
  v39 = 0;
  v83[2] = v111[2];
  v114 = 1 << *((_BYTE *)v111 + 32);
  if (v114 < 64)
    v115 = ~(-1 << v114);
  else
    v115 = -1;
  v116 = v115 & v111[8];
  v187 = (unint64_t)(v114 + 63) >> 6;
  while (2)
  {
    if (v116)
    {
      v117 = __clz(__rbit64(v116));
      v116 &= v116 - 1;
      v118 = v117 | (v39 << 6);
      v119 = v98;
LABEL_107:
      v120 = 16 * v118;
      v121 = v119[7];
      v122 = (uint64_t *)(v119[6] + v120);
      v124 = *v122;
      v123 = v122[1];
      v125 = *(_OWORD *)(v121 + v120);
      v126 = (_QWORD *)(v83[6] + v120);
      *v126 = v124;
      v126[1] = v123;
      *(_OWORD *)(v83[7] + v120) = v125;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v44 = __OFADD__(v39++, 1);
  if (v44)
    goto LABEL_229;
  v119 = v98;
  if (v39 >= v187)
    goto LABEL_128;
  v127 = v185[v39];
  if (v127)
  {
LABEL_123:
    v116 = (v127 - 1) & v127;
    v118 = __clz(__rbit64(v127)) + (v39 << 6);
    goto LABEL_107;
  }
  v128 = v39 + 1;
  if (v39 + 1 >= v187)
    goto LABEL_128;
  v127 = v185[v128];
  if (v127)
    goto LABEL_122;
  v128 = v39 + 2;
  if (v39 + 2 >= v187)
    goto LABEL_128;
  v127 = v185[v128];
  if (v127)
    goto LABEL_122;
  v128 = v39 + 3;
  if (v39 + 3 >= v187)
    goto LABEL_128;
  v127 = v185[v128];
  if (v127)
    goto LABEL_122;
  v128 = v39 + 4;
  if (v39 + 4 >= v187)
    goto LABEL_128;
  v127 = v185[v128];
  if (v127)
    goto LABEL_122;
  v128 = v39 + 5;
  if (v39 + 5 >= v187)
    goto LABEL_128;
  v127 = v185[v128];
  if (v127)
  {
LABEL_122:
    v39 = v128;
    goto LABEL_123;
  }
  while (1)
  {
    v39 = v128 + 1;
    if (__OFADD__(v128, 1))
      break;
    if (v39 >= v187)
      goto LABEL_128;
    v127 = v185[v39];
    ++v128;
    if (v127)
      goto LABEL_123;
  }
LABEL_234:
  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_237:
  __break(1u);
  os_unfair_lock_unlock((os_unfair_lock_t)v39);
  __break(1u);
LABEL_238:
  __break(1u);
}

{
  void *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  unint64_t *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  Swift::UInt v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  char v45;
  char v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  int v87;
  uint64_t *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  char v110;
  char v111;
  uint64_t *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  _QWORD *v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  _QWORD *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  char v158;
  unint64_t v159;
  uint64_t v160;
  _BOOL8 v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  unint64_t v172;
  int64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  int64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  _QWORD *v185;
  unint64_t v186;
  int64_t v187;
  os_unfair_lock_s *v188;
  uint64_t v189;
  uint64_t v190;
  int64_t v191;
  unint64_t *v192;
  char *__src;
  char *__srca;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  char v203;
  uint64_t v204;
  int64_t v205;
  _QWORD *v206;
  uint64_t v207;

  if (one-time initialization token for _loadedScopeCache != -1)
LABEL_256:
    swift_once();
  v0 = &unk_1EDC3E000;
  v1 = _loadedScopeCache + 16;
  v2 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
  swift_retain();
  os_unfair_lock_lock(v2);
  v3 = specialized closure #1 in static AttributeScope.scopeDescription.getter(v1);
  os_unfair_lock_unlock(v2);
  swift_release();
  if (v3)
    return;
  v4 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _FoundationPlusScope<AttributeScopes.FoundationAttributes>);
  v5 = 0;
  v6 = MEMORY[0x1E0DEE9E0];
  v204 = MEMORY[0x1E0DEE9E0];
LABEL_4:
  while (2)
  {
    v7 = *v4;
    if (*v4 > 0x7FF)
      goto LABEL_7;
    if (v7 == 512)
    {
      swift_getKeyPath();
      v69 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      v9 = (unsigned int *)(*(unint64_t *)((char *)v4 + v69) + 20);
      goto LABEL_8;
    }
    if (!v7)
    {
LABEL_7:
      swift_getKeyPath();
      v8 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      v9 = (unsigned int *)(*(unint64_t *)((char *)v4 + v8) + 36);
LABEL_8:
      v10 = *v9;
      goto LABEL_9;
    }
    v70 = static Metadata.Kind.tuple.getter();
    if (v70 > 0x7FF || v70 != v7)
    {
      if (!v5)
      {
LABEL_249:
        v188 = (os_unfair_lock_s *)*((_QWORD *)v0 + 179);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        os_unfair_lock_lock(v188 + 10);
        specialized closure #2 in static AttributeScope.scopeDescription.getter((uint64_t)&v188[4], v6, v204);
        os_unfair_lock_unlock(v188 + 10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      goto LABEL_10;
    }
    MEMORY[0x186DA3B9C](v4);
    v10 = TupleMetadata.Elements.endIndex.getter();
    if (TupleMetadata.Elements.endIndex.getter() < 0)
    {
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __break(1u);
LABEL_261:
      __break(1u);
LABEL_262:
      __break(1u);
LABEL_263:
      __break(1u);
LABEL_264:
      __break(1u);
LABEL_265:
      __break(1u);
LABEL_266:
      __break(1u);
LABEL_267:
      __break(1u);
      goto LABEL_268;
    }
    v71 = TupleMetadata.Elements.endIndex.getter();
    if (v10 < 0 || v71 < v10)
      goto LABEL_258;
LABEL_9:
    if (v5 == (char *)v10)
      goto LABEL_249;
LABEL_10:
    v11 = *v4;
    if (*v4 > 0x7FF)
      goto LABEL_13;
    if (v11 == 512)
    {
      swift_getKeyPath();
      v72 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      v13 = (unsigned int *)(*(unint64_t *)((char *)v4 + v72) + 20);
      goto LABEL_14;
    }
    if (!v11)
    {
LABEL_13:
      swift_getKeyPath();
      v12 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      v13 = (unsigned int *)(*(unint64_t *)((char *)v4 + v12) + 36);
LABEL_14:
      v10 = *v13;
      goto LABEL_15;
    }
    v73 = static Metadata.Kind.tuple.getter();
    v10 = 0;
    if (v73 <= 0x7FF && v73 == v11)
    {
      MEMORY[0x186DA3B9C](v4);
      v10 = TupleMetadata.Elements.endIndex.getter();
      if (TupleMetadata.Elements.endIndex.getter() < 0)
        goto LABEL_259;
      v74 = TupleMetadata.Elements.endIndex.getter();
      if (v10 < 0 || v74 < v10)
        goto LABEL_260;
    }
LABEL_15:
    if ((unint64_t)v5 >= v10)
    {
      __break(1u);
LABEL_252:
      __break(1u);
LABEL_253:
      __break(1u);
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
      goto LABEL_256;
    }
    v14 = *v4;
    v15 = static Metadata.Kind.tuple.getter();
    if (v14 > 0x7FF)
    {
      if (v15 - 2048 >= 0xFFFFFFFFFFFFF801)
        goto LABEL_23;
      goto LABEL_21;
    }
    if (v15 >= 0x800)
    {
      if (v14)
        goto LABEL_23;
LABEL_21:
      MEMORY[0x186DA3B9C](v4);
      v16 = v5;
      TupleMetadata.Elements.subscript.getter();
      v17 = TupleMetadata.Elements.Element.metadata.getter();
LABEL_25:
      v18 = v17;
      goto LABEL_26;
    }
    if (v14 == v15)
      goto LABEL_21;
LABEL_23:
    TypeMetadata.descriptor.getter();
    swift_getKeyPath();
    dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_getAtKeyPath();
    swift_release();
    v16 = v5;
    FieldDescriptor.subscript.getter();
    swift_getKeyPath();
    dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    swift_getAtKeyPath();
    swift_release();
    v18 = MangledTypeReference.standardSubstitution.getter();
    if (!v18)
    {
      v17 = TypeMetadata._resolve(_:)();
      goto LABEL_25;
    }
LABEL_26:
    v19 = swift_conformsToProtocol2();
    if (v19)
      v20 = v19;
    else
      v20 = 0;
    if (v19)
      v21 = v18;
    else
      v21 = 0;
    if (v21)
    {
      v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v21, v20);
      v77 = v76;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v201 = v75;
      v79 = v75;
      v10 = v6;
      v81 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v77);
      v82 = *(_QWORD *)(v6 + 16);
      v83 = (v80 & 1) == 0;
      v84 = v82 + v83;
      if (__OFADD__(v82, v83))
        goto LABEL_261;
      if (*(_QWORD *)(v6 + 24) < v84)
      {
        v198 = v80;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v84, isUniquelyReferenced_nonNull_native);
        v10 = v6;
        v85 = specialized __RawDictionaryStorage.find<A>(_:)(v201, v77);
        v87 = v86 & 1;
        v80 = v198;
        if ((v198 & 1) != v87)
          goto LABEL_271;
        v81 = v85;
LABEL_106:
        if ((v80 & 1) == 0)
          goto LABEL_193;
LABEL_107:
        v88 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v81);
        *v88 = v21;
        v88[1] = v20;
        goto LABEL_195;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        goto LABEL_106;
      v199 = v80;
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
      v197 = static _DictionaryStorage.copy(original:)();
      if (!*(_QWORD *)(v6 + 16))
        goto LABEL_192;
      v132 = (char *)(v197 + 64);
      __srca = (char *)(v6 + 64);
      v133 = (unint64_t)((1 << *(_BYTE *)(v197 + 32)) + 63) >> 6;
      if (v197 != v6 || v132 >= &__srca[8 * v133])
        memmove(v132, __srca, 8 * v133);
      v10 = 0;
      *(_QWORD *)(v197 + 16) = *(_QWORD *)(v6 + 16);
      v134 = 1 << *(_BYTE *)(v6 + 32);
      if (v134 < 64)
        v135 = ~(-1 << v134);
      else
        v135 = -1;
      v136 = v135 & *(_QWORD *)(v6 + 64);
      v137 = (unint64_t)(v134 + 63) >> 6;
      while (1)
      {
        if (v136)
        {
          v138 = __clz(__rbit64(v136));
          v136 &= v136 - 1;
          v139 = v138 | (v10 << 6);
        }
        else
        {
          v50 = __OFADD__(v10++, 1);
          if (v50)
            goto LABEL_267;
          if (v10 >= v137)
            goto LABEL_192;
          v146 = *(_QWORD *)&__srca[8 * v10];
          if (!v146)
          {
            v147 = v10 + 1;
            if (v10 + 1 >= v137)
              goto LABEL_192;
            v146 = *(_QWORD *)&__srca[8 * v147];
            if (!v146)
            {
              v147 = v10 + 2;
              if (v10 + 2 >= v137)
                goto LABEL_192;
              v146 = *(_QWORD *)&__srca[8 * v147];
              if (!v146)
              {
                v147 = v10 + 3;
                if (v10 + 3 >= v137)
                  goto LABEL_192;
                v146 = *(_QWORD *)&__srca[8 * v147];
                if (!v146)
                {
                  v147 = v10 + 4;
                  if (v10 + 4 >= v137)
                    goto LABEL_192;
                  v146 = *(_QWORD *)&__srca[8 * v147];
                  if (!v146)
                  {
                    v147 = v10 + 5;
                    if (v10 + 5 >= v137)
                      goto LABEL_192;
                    v146 = *(_QWORD *)&__srca[8 * v147];
                    if (!v146)
                    {
                      v147 = v10 + 6;
                      if (v10 + 6 >= v137)
                        goto LABEL_192;
                      v146 = *(_QWORD *)&__srca[8 * v147];
                      if (!v146)
                      {
                        v147 = v10 + 7;
                        if (v10 + 7 >= v137)
                          goto LABEL_192;
                        v146 = *(_QWORD *)&__srca[8 * v147];
                        if (!v146)
                        {
                          v147 = v10 + 8;
                          if (v10 + 8 >= v137)
                            goto LABEL_192;
                          v146 = *(_QWORD *)&__srca[8 * v147];
                          if (!v146)
                          {
                            while (1)
                            {
                              v10 = v147 + 1;
                              if (__OFADD__(v147, 1))
                                goto LABEL_272;
                              if (v10 >= v137)
                                break;
                              v146 = *(_QWORD *)&__srca[8 * v10];
                              ++v147;
                              if (v146)
                                goto LABEL_187;
                            }
LABEL_192:
                            swift_bridgeObjectRelease();
                            v0 = &unk_1EDC3E000;
                            v6 = v197;
                            if ((v199 & 1) != 0)
                              goto LABEL_107;
LABEL_193:
                            *(_QWORD *)(v6 + 8 * (v81 >> 6) + 64) |= 1 << v81;
                            v148 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v81);
                            *v148 = v201;
                            v148[1] = v77;
                            v149 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v81);
                            *v149 = v21;
                            v149[1] = v20;
                            v150 = *(_QWORD *)(v6 + 16);
                            v50 = __OFADD__(v150, 1);
                            v151 = v150 + 1;
                            if (v50)
                              goto LABEL_262;
                            *(_QWORD *)(v6 + 16) = v151;
                            swift_bridgeObjectRetain();
LABEL_195:
                            v5 = v16 + 1;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            v152 = swift_conformsToProtocol2();
                            if (v152)
                              v153 = v152;
                            else
                              v153 = 0;
                            if (!v152)
                              v21 = 0;
                            if (!v21)
                              goto LABEL_4;
                            v196 = v6;
                            __src = v16;
                            v154 = (*(uint64_t (**)(uint64_t, uint64_t))(v153 + 24))(v21, v153);
                            v156 = v155;
                            v10 = v204;
                            v157 = swift_isUniquelyReferenced_nonNull_native();
                            v159 = specialized __RawDictionaryStorage.find<A>(_:)(v154, v156);
                            v160 = *(_QWORD *)(v204 + 16);
                            v161 = (v158 & 1) == 0;
                            v162 = v160 + v161;
                            if (__OFADD__(v160, v161))
                              goto LABEL_265;
                            if (*(_QWORD *)(v204 + 24) < v162)
                            {
                              v202 = v158;
                              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v162, v157);
                              v89 = v204;
                              v10 = v204;
                              v163 = specialized __RawDictionaryStorage.find<A>(_:)(v154, v156);
                              if ((v202 & 1) != (v164 & 1))
                                goto LABEL_271;
                              v159 = v163;
                              if ((v202 & 1) == 0)
                                goto LABEL_208;
                              goto LABEL_205;
                            }
                            if ((v157 & 1) != 0)
                            {
                              v89 = v204;
                              if ((v158 & 1) == 0)
                                goto LABEL_208;
                              goto LABEL_205;
                            }
                            v203 = v158;
                            v200 = v154;
                            v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
                            v170 = static _DictionaryStorage.copy(original:)();
                            v89 = v170;
                            if (!*(_QWORD *)(v204 + 16))
                              goto LABEL_247;
                            v171 = (void *)(v170 + 64);
                            v10 = v204 + 64;
                            v172 = (unint64_t)((1 << *(_BYTE *)(v89 + 32)) + 63) >> 6;
                            if (v89 != v204 || (unint64_t)v171 >= v10 + 8 * v172)
                              memmove(v171, (const void *)(v204 + 64), 8 * v172);
                            v173 = 0;
                            *(_QWORD *)(v89 + 16) = *(_QWORD *)(v204 + 16);
                            v174 = 1 << *(_BYTE *)(v204 + 32);
                            if (v174 < 64)
                              v175 = ~(-1 << v174);
                            else
                              v175 = -1;
                            v176 = v175 & *(_QWORD *)(v204 + 64);
                            v177 = (unint64_t)(v174 + 63) >> 6;
                            while (2)
                            {
                              if (v176)
                              {
                                v178 = __clz(__rbit64(v176));
                                v176 &= v176 - 1;
                                v179 = v178 | (v173 << 6);
LABEL_220:
                                v180 = 16 * v179;
                                v181 = (uint64_t *)(*(_QWORD *)(v204 + 48) + v180);
                                v183 = *v181;
                                v182 = v181[1];
                                v184 = *(_OWORD *)(*(_QWORD *)(v204 + 56) + v180);
                                v185 = (_QWORD *)(*(_QWORD *)(v89 + 48) + v180);
                                *v185 = v183;
                                v185[1] = v182;
                                *(_OWORD *)(*(_QWORD *)(v89 + 56) + v180) = v184;
                                swift_bridgeObjectRetain();
                                continue;
                              }
                              break;
                            }
                            v50 = __OFADD__(v173++, 1);
                            if (v50)
                              goto LABEL_270;
                            if (v173 >= v177)
                              goto LABEL_247;
                            v186 = *(_QWORD *)(v10 + 8 * v173);
                            if (v186)
                            {
LABEL_242:
                              v176 = (v186 - 1) & v186;
                              v179 = __clz(__rbit64(v186)) + (v173 << 6);
                              goto LABEL_220;
                            }
                            v187 = v173 + 1;
                            if (v173 + 1 >= v177)
                              goto LABEL_247;
                            v186 = *(_QWORD *)(v10 + 8 * v187);
                            if (v186)
                              goto LABEL_241;
                            v187 = v173 + 2;
                            if (v173 + 2 >= v177)
                              goto LABEL_247;
                            v186 = *(_QWORD *)(v10 + 8 * v187);
                            if (v186)
                              goto LABEL_241;
                            v187 = v173 + 3;
                            if (v173 + 3 >= v177)
                              goto LABEL_247;
                            v186 = *(_QWORD *)(v10 + 8 * v187);
                            if (v186)
                              goto LABEL_241;
                            v187 = v173 + 4;
                            if (v173 + 4 >= v177)
                              goto LABEL_247;
                            v186 = *(_QWORD *)(v10 + 8 * v187);
                            if (v186)
                              goto LABEL_241;
                            v187 = v173 + 5;
                            if (v173 + 5 >= v177)
                              goto LABEL_247;
                            v186 = *(_QWORD *)(v10 + 8 * v187);
                            if (v186)
                              goto LABEL_241;
                            v187 = v173 + 6;
                            if (v173 + 6 >= v177)
                              goto LABEL_247;
                            v186 = *(_QWORD *)(v10 + 8 * v187);
                            if (v186)
                              goto LABEL_241;
                            v187 = v173 + 7;
                            if (v173 + 7 >= v177)
                              goto LABEL_247;
                            v186 = *(_QWORD *)(v10 + 8 * v187);
                            if (v186)
                              goto LABEL_241;
                            v187 = v173 + 8;
                            if (v173 + 8 >= v177)
                              goto LABEL_247;
                            v186 = *(_QWORD *)(v10 + 8 * v187);
                            if (v186)
                            {
LABEL_241:
                              v173 = v187;
                              goto LABEL_242;
                            }
                            while (1)
                            {
                              v173 = v187 + 1;
                              if (__OFADD__(v187, 1))
                                goto LABEL_273;
                              if (v173 >= v177)
                                break;
                              v186 = *(_QWORD *)(v10 + 8 * v173);
                              ++v187;
                              if (v186)
                                goto LABEL_242;
                            }
LABEL_247:
                            swift_bridgeObjectRelease();
                            v0 = &unk_1EDC3E000;
                            v154 = v200;
                            if ((v203 & 1) != 0)
                            {
LABEL_205:
                              v165 = (uint64_t *)(*(_QWORD *)(v89 + 56) + 16 * v159);
                              *v165 = v21;
                              v165[1] = v153;
                              goto LABEL_210;
                            }
LABEL_208:
                            *(_QWORD *)(v89 + 8 * (v159 >> 6) + 64) |= 1 << v159;
                            v166 = (uint64_t *)(*(_QWORD *)(v89 + 48) + 16 * v159);
                            *v166 = v154;
                            v166[1] = v156;
                            v167 = (uint64_t *)(*(_QWORD *)(v89 + 56) + 16 * v159);
                            *v167 = v21;
                            v167[1] = v153;
                            v168 = *(_QWORD *)(v89 + 16);
                            v50 = __OFADD__(v168, 1);
                            v169 = v168 + 1;
                            if (v50)
                              goto LABEL_266;
                            *(_QWORD *)(v89 + 16) = v169;
                            swift_bridgeObjectRetain();
LABEL_210:
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
LABEL_155:
                            v5 = __src + 1;
                            v204 = v89;
                            v6 = v196;
                            goto LABEL_4;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v10 = v147;
          }
LABEL_187:
          v136 = (v146 - 1) & v146;
          v139 = __clz(__rbit64(v146)) + (v10 << 6);
        }
        v140 = 16 * v139;
        v141 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v140);
        v143 = *v141;
        v142 = v141[1];
        v144 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v140);
        v145 = (_QWORD *)(*(_QWORD *)(v197 + 48) + v140);
        *v145 = v143;
        v145[1] = v142;
        *(_OWORD *)(*(_QWORD *)(v197 + 56) + v140) = v144;
        swift_bridgeObjectRetain();
      }
    }
    v22 = swift_conformsToProtocol2();
    if (v22)
      v23 = v22;
    else
      v23 = 0;
    if (v22)
      v24 = v18;
    else
      v24 = 0;
    v5 = v16 + 1;
    if (!v24)
      continue;
    break;
  }
  __src = v16;
  static AttributeScope.scopeDescription.getter(v24, v23);
  swift_bridgeObjectRetain();
  v25 = swift_isUniquelyReferenced_nonNull_native();
  v206 = (_QWORD *)v6;
  v26 = swift_bridgeObjectRetain();
  v27 = specialized LazyMapSequence.Iterator.next()(v26);
  if (v28)
  {
    v31 = v27;
    v32 = v28;
    v33 = v29;
    v34 = v30;
    while (1)
    {
      v42 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
      v43 = *(_QWORD *)(v6 + 16);
      v44 = (v41 & 1) == 0;
      v35 = v43 + v44;
      if (__OFADD__(v43, v44))
        goto LABEL_252;
      v45 = v41;
      if (*(_QWORD *)(v6 + 24) >= v35)
      {
        if ((v25 & 1) != 0)
        {
          if ((v41 & 1) != 0)
            goto LABEL_42;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
          v52 = static _DictionaryStorage.copy(original:)();
          v195 = (_QWORD *)v52;
          if (*(_QWORD *)(v6 + 16))
          {
            v53 = v52;
            v54 = (void *)(v52 + 64);
            v55 = (unint64_t)((1 << *(_BYTE *)(v53 + 32)) + 63) >> 6;
            if (v53 != v6 || (unint64_t)v54 >= v6 + 64 + 8 * v55)
              memmove(v54, (const void *)(v6 + 64), 8 * v55);
            v189 = v6 + 64;
            v10 = 0;
            v195[2] = *(_QWORD *)(v6 + 16);
            v56 = 1 << *(_BYTE *)(v6 + 32);
            if (v56 < 64)
              v57 = ~(-1 << v56);
            else
              v57 = -1;
            v58 = v57 & *(_QWORD *)(v6 + 64);
            v191 = (unint64_t)(v56 + 63) >> 6;
            while (1)
            {
              if (v58)
              {
                v59 = __clz(__rbit64(v58));
                v58 &= v58 - 1;
                v60 = v59 | (v10 << 6);
              }
              else
              {
                v50 = __OFADD__(v10++, 1);
                if (v50)
                  goto LABEL_263;
                if (v10 >= v191)
                  break;
                v67 = *(_QWORD *)(v189 + 8 * v10);
                if (!v67)
                {
                  v68 = v10 + 1;
                  if (v10 + 1 >= v191)
                    break;
                  v67 = *(_QWORD *)(v189 + 8 * v68);
                  if (!v67)
                  {
                    v68 = v10 + 2;
                    if (v10 + 2 >= v191)
                      break;
                    v67 = *(_QWORD *)(v189 + 8 * v68);
                    if (!v67)
                    {
                      v68 = v10 + 3;
                      if (v10 + 3 >= v191)
                        break;
                      v67 = *(_QWORD *)(v189 + 8 * v68);
                      if (!v67)
                      {
                        v68 = v10 + 4;
                        if (v10 + 4 >= v191)
                          break;
                        v67 = *(_QWORD *)(v189 + 8 * v68);
                        if (!v67)
                        {
                          v68 = v10 + 5;
                          if (v10 + 5 >= v191)
                            break;
                          v67 = *(_QWORD *)(v189 + 8 * v68);
                          if (!v67)
                          {
                            while (1)
                            {
                              v10 = v68 + 1;
                              if (__OFADD__(v68, 1))
                                break;
                              if (v10 >= v191)
                                goto LABEL_83;
                              v67 = *(_QWORD *)(v189 + 8 * v10);
                              ++v68;
                              if (v67)
                                goto LABEL_78;
                            }
LABEL_268:
                            __break(1u);
                            goto LABEL_269;
                          }
                        }
                      }
                    }
                  }
                  v10 = v68;
                }
LABEL_78:
                v58 = (v67 - 1) & v67;
                v60 = __clz(__rbit64(v67)) + (v10 << 6);
              }
              v61 = 16 * v60;
              v62 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v61);
              v64 = *v62;
              v63 = v62[1];
              v65 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v61);
              v66 = (_QWORD *)(v195[6] + v61);
              *v66 = v64;
              v66[1] = v63;
              *(_OWORD *)(v195[7] + v61) = v65;
              swift_bridgeObjectRetain();
            }
          }
LABEL_83:
          v35 = swift_release();
          v6 = (uint64_t)v195;
          v206 = v195;
          if ((v45 & 1) != 0)
          {
LABEL_42:
            v35 = swift_bridgeObjectRelease();
            v36 = (_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * v42);
            *v36 = v33;
            v36[1] = v34;
            goto LABEL_43;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, v25 & 1);
        v6 = (uint64_t)v206;
        v10 = (uint64_t)v206;
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
        if ((v45 & 1) != (v46 & 1))
          goto LABEL_271;
        v42 = v35;
        if ((v45 & 1) != 0)
          goto LABEL_42;
      }
      *(_QWORD *)(v6 + 8 * (v42 >> 6) + 64) |= 1 << v42;
      v47 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v42);
      *v47 = v31;
      v47[1] = v32;
      v48 = (_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * v42);
      *v48 = v33;
      v48[1] = v34;
      v49 = *(_QWORD *)(v6 + 16);
      v50 = __OFADD__(v49, 1);
      v51 = v49 + 1;
      if (v50)
        goto LABEL_254;
      *(_QWORD *)(v6 + 16) = v51;
LABEL_43:
      v31 = specialized LazyMapSequence.Iterator.next()(v35);
      v32 = v37;
      v33 = v38;
      v34 = v39;
      v25 = 1;
      v40 = v6;
      if (!v37)
        goto LABEL_109;
    }
  }
  v40 = v6;
LABEL_109:
  v196 = v40;
  v192 = v4;
  swift_bridgeObjectRelease();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v89 = v204;
  v90 = swift_isUniquelyReferenced_nonNull_native();
  v207 = v204;
  v91 = swift_bridgeObjectRetain();
  v92 = specialized LazyMapSequence.Iterator.next()(v91);
  if (!v93)
  {
LABEL_154:
    swift_bridgeObjectRelease();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v0 = &unk_1EDC3E000;
    v4 = v192;
    goto LABEL_155;
  }
  v96 = v92;
  v97 = v93;
  v98 = v94;
  v99 = v95;
  v100 = v204;
  while (1)
  {
    v107 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v97);
    v108 = *(_QWORD *)(v100 + 16);
    v109 = (v106 & 1) == 0;
    v101 = v108 + v109;
    if (__OFADD__(v108, v109))
      goto LABEL_253;
    v89 = v100;
    v110 = v106;
    if (*(_QWORD *)(v100 + 24) >= v101)
      break;
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v101, v90 & 1);
    v89 = v207;
    v10 = v207;
    v101 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v97);
    if ((v110 & 1) != (v111 & 1))
      goto LABEL_271;
    v107 = v101;
    if ((v110 & 1) != 0)
    {
LABEL_111:
      v101 = swift_bridgeObjectRelease();
      v102 = (_QWORD *)(*(_QWORD *)(v89 + 56) + 16 * v107);
      *v102 = v98;
      v102[1] = v99;
      goto LABEL_112;
    }
LABEL_120:
    *(_QWORD *)(v89 + 8 * (v107 >> 6) + 64) |= 1 << v107;
    v112 = (uint64_t *)(*(_QWORD *)(v89 + 48) + 16 * v107);
    *v112 = v96;
    v112[1] = v97;
    v113 = (_QWORD *)(*(_QWORD *)(v89 + 56) + 16 * v107);
    *v113 = v98;
    v113[1] = v99;
    v114 = *(_QWORD *)(v89 + 16);
    v50 = __OFADD__(v114, 1);
    v115 = v114 + 1;
    if (v50)
      goto LABEL_255;
    *(_QWORD *)(v89 + 16) = v115;
LABEL_112:
    v96 = specialized LazyMapSequence.Iterator.next()(v101);
    v97 = v103;
    v98 = v104;
    v99 = v105;
    v90 = 1;
    v100 = v89;
    if (!v103)
      goto LABEL_154;
  }
  if ((v90 & 1) != 0)
  {
    if ((v106 & 1) != 0)
      goto LABEL_111;
    goto LABEL_120;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
  v116 = static _DictionaryStorage.copy(original:)();
  v89 = v116;
  if (!*(_QWORD *)(v100 + 16))
  {
LABEL_152:
    v101 = swift_release();
    v207 = v89;
    if ((v110 & 1) != 0)
      goto LABEL_111;
    goto LABEL_120;
  }
  v117 = (void *)(v116 + 64);
  v118 = (unint64_t)((1 << *(_BYTE *)(v89 + 32)) + 63) >> 6;
  if (v89 != v100 || (unint64_t)v117 >= v100 + 64 + 8 * v118)
    memmove(v117, (const void *)(v100 + 64), 8 * v118);
  v190 = v100 + 64;
  v10 = 0;
  *(_QWORD *)(v89 + 16) = *(_QWORD *)(v100 + 16);
  v119 = 1 << *(_BYTE *)(v100 + 32);
  if (v119 < 64)
    v120 = ~(-1 << v119);
  else
    v120 = -1;
  v121 = v120 & *(_QWORD *)(v100 + 64);
  v205 = (unint64_t)(v119 + 63) >> 6;
  while (2)
  {
    if (v121)
    {
      v122 = __clz(__rbit64(v121));
      v121 &= v121 - 1;
      v123 = v122 | (v10 << 6);
LABEL_131:
      v124 = 16 * v123;
      v125 = (uint64_t *)(*(_QWORD *)(v100 + 48) + v124);
      v127 = *v125;
      v126 = v125[1];
      v128 = *(_OWORD *)(*(_QWORD *)(v100 + 56) + v124);
      v129 = (_QWORD *)(*(_QWORD *)(v89 + 48) + v124);
      *v129 = v127;
      v129[1] = v126;
      *(_OWORD *)(*(_QWORD *)(v89 + 56) + v124) = v128;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  v50 = __OFADD__(v10++, 1);
  if (v50)
    goto LABEL_264;
  if (v10 >= v205)
    goto LABEL_152;
  v130 = *(_QWORD *)(v190 + 8 * v10);
  if (v130)
  {
LABEL_147:
    v121 = (v130 - 1) & v130;
    v123 = __clz(__rbit64(v130)) + (v10 << 6);
    goto LABEL_131;
  }
  v131 = v10 + 1;
  if (v10 + 1 >= v205)
    goto LABEL_152;
  v130 = *(_QWORD *)(v190 + 8 * v131);
  if (v130)
    goto LABEL_146;
  v131 = v10 + 2;
  if (v10 + 2 >= v205)
    goto LABEL_152;
  v130 = *(_QWORD *)(v190 + 8 * v131);
  if (v130)
    goto LABEL_146;
  v131 = v10 + 3;
  if (v10 + 3 >= v205)
    goto LABEL_152;
  v130 = *(_QWORD *)(v190 + 8 * v131);
  if (v130)
    goto LABEL_146;
  v131 = v10 + 4;
  if (v10 + 4 >= v205)
    goto LABEL_152;
  v130 = *(_QWORD *)(v190 + 8 * v131);
  if (v130)
    goto LABEL_146;
  v131 = v10 + 5;
  if (v10 + 5 >= v205)
    goto LABEL_152;
  v130 = *(_QWORD *)(v190 + 8 * v131);
  if (v130)
  {
LABEL_146:
    v10 = v131;
    goto LABEL_147;
  }
  while (1)
  {
    v10 = v131 + 1;
    if (__OFADD__(v131, 1))
      break;
    if (v10 >= v205)
      goto LABEL_152;
    v130 = *(_QWORD *)(v190 + 8 * v10);
    ++v131;
    if (v130)
      goto LABEL_147;
  }
LABEL_269:
  __break(1u);
LABEL_270:
  __break(1u);
LABEL_271:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_272:
  __break(1u);
  os_unfair_lock_unlock((os_unfair_lock_t)v10);
  __break(1u);
LABEL_273:
  __break(1u);
}

