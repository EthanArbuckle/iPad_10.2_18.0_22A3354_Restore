uint64_t getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v13[152];
  _BYTE v14[152];
  _BYTE v15[152];
  _BYTE v16[152];
  _BYTE v17[152];

  v9 = a1 + 16;
  outlined init with take of LocalePreferences?(a1 + 16, (uint64_t)v16, &demangling cache variable for type metadata for Result<stat, CocoaError>?);
  outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)v17, &demangling cache variable for type metadata for Result<stat, CocoaError>?);
  if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGSgWOg((uint64_t)v17) == 1)
  {
    closure #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(a2, a3, a4, (uint64_t)v15);
    outlined init with take of LocalePreferences?((uint64_t)v15, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
    destructiveProjectEnumData for PredicateCodableError(v14, v10);
    outlined init with take of LocalePreferences?(v9, (uint64_t)v15, &demangling cache variable for type metadata for Result<stat, CocoaError>?);
    outlined init with take of LocalePreferences?((uint64_t)v14, v9, &demangling cache variable for type metadata for Result<stat, CocoaError>?);
    outlined retain of Result<stat, CocoaError>((uint64_t)v13);
    outlined release of Result<stat, CocoaError>?((uint64_t)v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Result<stat, CocoaError>?);
    v11 = v13;
  }
  else
  {
    v11 = v17;
  }
  outlined init with take of LocalePreferences?((uint64_t)v11, a5, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
  return outlined release of Result<stat, CocoaError>?((uint64_t)v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Result<stat, CocoaError>?);
}

uint64_t closure #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  _OWORD *v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t *v40;
  __darwin_ino64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v61;
  char v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  int64_t i;
  uint64_t v70;
  stat v71;
  stat v72;
  __int128 v73;
  timespec st_atimespec;
  __darwin_time_t tv_sec;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  _OWORD v79[2];
  _OWORD v80[2];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  memset(&v71, 0, 28);
  memset(&v71.st_atimespec, 0, 112);
  if (lstat(a1, &v71))
  {
    v65 = a4;
    v7 = MEMORY[0x186DA4118]();
    *(_QWORD *)&v73 = MEMORY[0x1E0DEE9E0];
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v10 = v9;
    v78 = a2;
    *(_QWORD *)&v79[0] = a3;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v72, (uint64_t)v8, v10);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v13 = v12;
    URL.init(_fileManagerFailableFileURLWithPath:)(a2, a3, (uint64_t)&v78);
    if (v78)
    {
      v76 = v78;
      v77 = v79[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      memset(&v72, 0, 40);
    }
    specialized Dictionary.subscript.setter((uint64_t)&v72, (uint64_t)v11, v13);
    v70 = v73;
    swift_bridgeObjectRetain();
    if (v7 == 102)
    {
LABEL_7:
      v15 = 512;
    }
    else
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      {
        *(_QWORD *)&v72.st_dev = 0;
        v72.st_ino = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v72.st_dev = 0xD000000000000014;
        v72.st_ino = 0x8000000182306980;
        LODWORD(v78) = v7;
        v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181C83498);
      }
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v19 = v18;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v20 = (int)POSIXErrorCode.rawValue.getter();
      v21 = objc_allocWithZone((Class)NSError);
      v22 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v23 = objc_msgSend(v21, sel_initWithDomain_code_userInfo_, v22, v20, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v24 = objc_msgSend(v23, sel_domain);
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v27 == v28)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v63 & 1) == 0)
          goto LABEL_66;
      }
      v78 = (uint64_t)v23;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v72, (uint64_t)v17, v19);
      v15 = 4;
      switch(v7)
      {
        case 1:
        case 13:
          v15 = 513;
          break;
        case 2:
          break;
        case 17:
          v15 = 516;
          break;
        case 28:
        case 69:
          v15 = 640;
          break;
        case 30:
          v15 = 642;
          break;
        case 63:
          v15 = 514;
          break;
        default:
          goto LABEL_7;
      }
    }
    v66 = v15;
    if (*(_QWORD *)(v70 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v16 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v16 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v68 = v70 + 64;
    v29 = -1;
    v30 = -1 << *(_BYTE *)(v70 + 32);
    if (-v30 < 64)
      v29 = ~(-1 << -(char)v30);
    v31 = v29 & *(_QWORD *)(v70 + 64);
    v67 = (unint64_t)(63 - v30) >> 6;
    swift_bridgeObjectRetain();
    i = 0;
    if (v31)
      goto LABEL_20;
LABEL_21:
    v36 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
    }
    if (v36 < v67)
    {
      v37 = *(_QWORD *)(v68 + 8 * v36);
      v38 = i + 1;
      if (v37)
        goto LABEL_40;
      v38 = i + 2;
      if (i + 2 >= v67)
        goto LABEL_46;
      v37 = *(_QWORD *)(v68 + 8 * v38);
      if (v37)
        goto LABEL_40;
      v38 = i + 3;
      if (i + 3 >= v67)
        goto LABEL_46;
      v37 = *(_QWORD *)(v68 + 8 * v38);
      if (v37)
        goto LABEL_40;
      v38 = i + 4;
      if (i + 4 >= v67)
        goto LABEL_46;
      v37 = *(_QWORD *)(v68 + 8 * v38);
      if (v37)
        goto LABEL_40;
      v38 = i + 5;
      if (i + 5 >= v67)
        goto LABEL_46;
      v37 = *(_QWORD *)(v68 + 8 * v38);
      if (v37)
        goto LABEL_40;
      v38 = i + 6;
      if (i + 6 >= v67)
        goto LABEL_46;
      v37 = *(_QWORD *)(v68 + 8 * v38);
      if (v37)
      {
LABEL_40:
        v31 = (v37 - 1) & v37;
        v35 = __clz(__rbit64(v37)) + (v38 << 6);
        for (i = v38; ; v35 = v34 | (i << 6))
        {
          v40 = (uint64_t *)(*(_QWORD *)(v70 + 48) + 16 * v35);
          v42 = *v40;
          v41 = v40[1];
          outlined init with copy of AnyHashable(*(_QWORD *)(v70 + 56) + 40 * v35, (uint64_t)&v72.st_uid);
          *(_QWORD *)&v72.st_dev = v42;
          v72.st_ino = v41;
          v73 = *(_OWORD *)&v72.st_uid;
          st_atimespec = v72.st_atimespec;
          tv_sec = v72.st_mtimespec.tv_sec;
          v76 = v42;
          *(_QWORD *)&v77 = v41;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v44 = v76;
          v43 = v77;
          outlined init with take of Any((__int128 *)((char *)&v77 + 8), (_OWORD *)((char *)v79 + 8));
          outlined init with take of Any((_OWORD *)((char *)v79 + 8), v80);
          outlined init with take of Any(v80, &v78);
          v45 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v43);
          v46 = v45;
          if ((v47 & 1) != 0)
          {
            v32 = (uint64_t *)(v16[6] + 16 * v45);
            swift_bridgeObjectRelease();
            *v32 = v44;
            v32[1] = v43;
            v33 = (_OWORD *)(v16[7] + 32 * v46);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
            outlined init with take of Any(&v78, v33);
            if (!v31)
              goto LABEL_21;
          }
          else
          {
            if (v16[2] >= v16[3])
            {
              __break(1u);
LABEL_63:
              __break(1u);
              goto LABEL_64;
            }
            *(_QWORD *)((char *)v16 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v45;
            v48 = (uint64_t *)(v16[6] + 16 * v45);
            *v48 = v44;
            v48[1] = v43;
            outlined init with take of Any(&v78, (_OWORD *)(v16[7] + 32 * v45));
            v49 = v16[2];
            v50 = __OFADD__(v49, 1);
            v51 = v49 + 1;
            if (v50)
              goto LABEL_63;
            v16[2] = v51;
            if (!v31)
              goto LABEL_21;
          }
LABEL_20:
          v34 = __clz(__rbit64(v31));
          v31 &= v31 - 1;
        }
      }
      v39 = i + 7;
      if (i + 7 < v67)
      {
        v37 = *(_QWORD *)(v68 + 8 * v39);
        if (v37)
        {
          v38 = i + 7;
          goto LABEL_40;
        }
        while (1)
        {
          v38 = v39 + 1;
          if (__OFADD__(v39, 1))
            goto LABEL_65;
          if (v38 >= v67)
            break;
          v37 = *(_QWORD *)(v68 + 8 * v38);
          ++v39;
          if (v37)
            goto LABEL_40;
        }
      }
    }
LABEL_46:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v52 = objc_allocWithZone((Class)NSError);
    v53 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v54 = objc_msgSend(v52, sel_initWithDomain_code_userInfo_, v53, v66, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v55 = objc_msgSend(v54, sel_domain);
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v58 = v57;

    if (v56 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v58 != v59)
    {
      v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v61 & 1) != 0)
      {
LABEL_53:
        *(_QWORD *)&v72.st_dev = v54;
        _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi0_((uint64_t)&v72);
        v14 = v65;
        return outlined init with take of LocalePreferences?((uint64_t)&v72, v14, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
      }
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  v72 = v71;
  _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi_((uint64_t)&v72);
  v14 = a4;
  return outlined init with take of LocalePreferences?((uint64_t)&v72, v14, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
}

uint64_t closure #2 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(uint64_t a1, const char *a2, uint64_t a3, unint64_t a4, char a5, char a6)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  __uint32_t v14;
  unsigned int v15;
  unsigned int v16;
  __uint32_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 *v43;
  uint64_t *v44;
  uint64_t *v45;
  __int128 *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _OWORD *v51;
  unint64_t i;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v76;
  char v77;
  Swift::String v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  _OWORD v89[2];
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[152];
  _BYTE v95[152];
  _BYTE v96[152];
  _BYTE v97[160];
  uint64_t v98;

  getter of statAtPath #1 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(a1, a2, a3, a4, (uint64_t)v95);
  outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
  outlined init with take of LocalePreferences?((uint64_t)v96, (uint64_t)v97, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
  if (_ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg((uint64_t)v97) == 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v96, (uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
    v98 = *(_QWORD *)destructiveProjectEnumData for PredicateCodableError(v94, v11);
    lazy protocol witness table accessor for type CocoaError and conformance CocoaError();
    return swift_willThrowTypedImpl();
  }
  outlined init with take of LocalePreferences?((uint64_t)v96, (uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for Result<stat, CocoaError>);
  v14 = *(_DWORD *)(destructiveProjectEnumData for PredicateCodableError(v94, v13) + 116);
  v15 = v14 & 0xFFFFFFFB;
  if ((a5 & 1) != 0)
    v15 = v14 | 4;
  if (a5 != 2)
    v14 = v15;
  v16 = v14 & 0xFFFFFFFD;
  if ((a6 & 1) != 0)
    v16 = v14 | 2;
  if (a6 == 2)
    v17 = v14;
  else
    v17 = v16;
  result = chflags(a2, v17);
  if ((_DWORD)result)
  {
    LODWORD(v18) = MEMORY[0x186DA4118]();
    v84 = MEMORY[0x1E0DEE9E0];
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v21 = v20;
    *(_QWORD *)&v87 = a3;
    *((_QWORD *)&v87 + 1) = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v90, (uint64_t)v19, v21);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v24 = v23;
    URL.init(_fileManagerFailableFileURLWithPath:)(a3, a4, (uint64_t)&v87);
    if ((_QWORD)v87)
    {
      v86 = v88;
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v90 = 0u;
      v91 = 0u;
      v92 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v90, (uint64_t)v22, v24);
    v93 = v84;
    swift_bridgeObjectRetain();
    if ((_DWORD)v18 == 102)
    {
LABEL_17:
      v25 = 512;
    }
    else
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      {
LABEL_77:
        *(_QWORD *)&v90 = 0;
        *((_QWORD *)&v90 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v90 = 0xD000000000000014;
        *((_QWORD *)&v90 + 1) = 0x8000000182306980;
        LODWORD(v87) = v18;
        v78._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v78);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181C83F1CLL);
      }
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v30 = v29;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v31 = (int)POSIXErrorCode.rawValue.getter();
      v32 = objc_allocWithZone((Class)NSError);
      v33 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v34 = objc_msgSend(v32, sel_initWithDomain_code_userInfo_, v33, v31, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v35 = objc_msgSend(v34, sel_domain);
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v38 = v37;

      if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v38 == v39)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v77 & 1) == 0)
        {
LABEL_76:
          __break(1u);
          goto LABEL_77;
        }
      }
      *(_QWORD *)&v87 = v34;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v90, (uint64_t)v28, v30);
      v25 = 4;
      switch((int)v18)
      {
        case 1:
        case 13:
          v25 = 513;
          break;
        case 2:
          break;
        case 17:
          v25 = 516;
          break;
        case 28:
        case 69:
          v25 = 640;
          break;
        case 30:
          v25 = 642;
          break;
        case 63:
          v25 = 514;
          break;
        default:
          goto LABEL_17;
      }
    }
    v26 = v93;
    v79 = v25;
    if (*(_QWORD *)(v93 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v27 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v27 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v81 = v26 + 64;
    v40 = -1;
    v41 = -1 << *(_BYTE *)(v26 + 32);
    if (-v41 < 64)
      v40 = ~(-1 << -(char)v41);
    v42 = v40 & *(_QWORD *)(v26 + 64);
    v43 = &v91;
    v44 = &v86;
    v45 = &v88;
    v80 = (unint64_t)(63 - v41) >> 6;
    swift_bridgeObjectRetain();
    v82 = 0;
    if (v42)
      goto LABEL_30;
LABEL_31:
    v53 = v82 + 1;
    if (__OFADD__(v82, 1))
    {
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    if (v53 < v80)
    {
      v54 = *(_QWORD *)(v81 + 8 * v53);
      v55 = v82 + 1;
      if (v54)
        goto LABEL_50;
      v55 = v82 + 2;
      if (v82 + 2 >= v80)
        goto LABEL_56;
      v54 = *(_QWORD *)(v81 + 8 * v55);
      if (v54)
        goto LABEL_50;
      v55 = v82 + 3;
      if (v82 + 3 >= v80)
        goto LABEL_56;
      v54 = *(_QWORD *)(v81 + 8 * v55);
      if (v54)
        goto LABEL_50;
      v55 = v82 + 4;
      if (v82 + 4 >= v80)
        goto LABEL_56;
      v54 = *(_QWORD *)(v81 + 8 * v55);
      if (v54)
        goto LABEL_50;
      v55 = v82 + 5;
      if (v82 + 5 >= v80)
        goto LABEL_56;
      v54 = *(_QWORD *)(v81 + 8 * v55);
      if (v54)
        goto LABEL_50;
      v55 = v82 + 6;
      if (v82 + 6 >= v80)
        goto LABEL_56;
      v54 = *(_QWORD *)(v81 + 8 * v55);
      if (v54)
      {
LABEL_50:
        v82 = v55;
        v83 = (v54 - 1) & v54;
        for (i = __clz(__rbit64(v54)) + (v55 << 6); ; i = __clz(__rbit64(v42)) | (v82 << 6))
        {
          v57 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * i);
          v59 = *v57;
          v58 = v57[1];
          outlined init with copy of AnyHashable(*(_QWORD *)(v26 + 56) + 40 * i, (uint64_t)v43);
          *(_QWORD *)&v90 = v59;
          *((_QWORD *)&v90 + 1) = v58;
          v85 = v58;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v60 = v59;
          outlined init with take of Any(v44, v45);
          outlined init with take of Any(v45, v89);
          outlined init with take of Any(v89, &v87);
          v61 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v85);
          v18 = v61;
          if ((v62 & 1) != 0)
          {
            v46 = v43;
            v47 = v45;
            v48 = v44;
            v49 = v26;
            v50 = (uint64_t *)(v27[6] + 16 * v61);
            swift_bridgeObjectRelease();
            *v50 = v60;
            v50[1] = v85;
            v26 = v49;
            v44 = v48;
            v45 = v47;
            v43 = v46;
            v51 = (_OWORD *)(v27[7] + 32 * v18);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
            outlined init with take of Any(&v87, v51);
            v42 = v83;
            if (!v83)
              goto LABEL_31;
          }
          else
          {
            if (v27[2] >= v27[3])
            {
              __break(1u);
LABEL_73:
              __break(1u);
              goto LABEL_74;
            }
            *(_QWORD *)((char *)v27 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v61;
            v63 = (uint64_t *)(v27[6] + 16 * v61);
            *v63 = v60;
            v63[1] = v85;
            outlined init with take of Any(&v87, (_OWORD *)(v27[7] + 32 * v61));
            v64 = v27[2];
            v65 = __OFADD__(v64, 1);
            v66 = v64 + 1;
            if (v65)
              goto LABEL_73;
            v27[2] = v66;
            v42 = v83;
            if (!v83)
              goto LABEL_31;
          }
LABEL_30:
          v83 = (v42 - 1) & v42;
        }
      }
      v56 = v82 + 7;
      if (v82 + 7 < v80)
      {
        v54 = *(_QWORD *)(v81 + 8 * v56);
        if (v54)
        {
          v55 = v82 + 7;
          goto LABEL_50;
        }
        while (1)
        {
          v55 = v56 + 1;
          if (__OFADD__(v56, 1))
            goto LABEL_75;
          if (v55 >= v80)
            break;
          v54 = *(_QWORD *)(v81 + 8 * v55);
          ++v56;
          if (v54)
            goto LABEL_50;
        }
      }
    }
LABEL_56:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v67 = objc_allocWithZone((Class)NSError);
    v68 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v69 = objc_msgSend(v67, sel_initWithDomain_code_userInfo_, v68, v79, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v70 = objc_msgSend(v69, sel_domain);
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
    v73 = v72;

    if (v71 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v73 != v74)
    {
      v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v76 & 1) != 0)
        return swift_willThrow();
      __break(1u);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #3 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(const char *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t result;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 *v32;
  uint64_t *v33;
  uint64_t *v34;
  __int128 *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  _OWORD *v40;
  unint64_t i;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v65;
  char v66;
  Swift::String v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _OWORD v78[2];
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;

  if (a2 >= 0x10000)
    goto LABEL_67;
  result = chmod(a1, a2);
  if ((_DWORD)result)
  {
    LODWORD(v4) = MEMORY[0x186DA4118]();
    v73 = MEMORY[0x1E0DEE9E0];
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v10 = v9;
    *(_QWORD *)&v76 = a3;
    *((_QWORD *)&v76 + 1) = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v79, (uint64_t)v8, v10);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v13 = v12;
    URL.init(_fileManagerFailableFileURLWithPath:)(a3, a4, (uint64_t)&v76);
    if ((_QWORD)v76)
    {
      v75 = v77;
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v79 = 0u;
      v80 = 0u;
      v81 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v79, (uint64_t)v11, v13);
    v82 = v73;
    swift_bridgeObjectRetain();
    if ((_DWORD)v4 == 102)
    {
LABEL_7:
      v14 = 512;
    }
    else
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      {
LABEL_68:
        *(_QWORD *)&v79 = 0;
        *((_QWORD *)&v79 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v79 = 0xD000000000000014;
        *((_QWORD *)&v79 + 1) = 0x8000000182306980;
        LODWORD(v76) = v4;
        v67._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v67);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181C8490CLL);
      }
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v19 = v18;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v20 = (int)POSIXErrorCode.rawValue.getter();
      v21 = objc_allocWithZone((Class)NSError);
      v22 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v23 = objc_msgSend(v21, sel_initWithDomain_code_userInfo_, v22, v20, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v24 = objc_msgSend(v23, sel_domain);
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v27 == v28)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v66 & 1) == 0)
        {
LABEL_66:
          __break(1u);
LABEL_67:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          goto LABEL_68;
        }
      }
      *(_QWORD *)&v76 = v23;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v79, (uint64_t)v17, v19);
      v14 = 4;
      switch((int)v4)
      {
        case 1:
        case 13:
          v14 = 513;
          break;
        case 2:
          break;
        case 17:
          v14 = 516;
          break;
        case 28:
        case 69:
          v14 = 640;
          break;
        case 30:
          v14 = 642;
          break;
        case 63:
          v14 = 514;
          break;
        default:
          goto LABEL_7;
      }
    }
    v68 = v14;
    v15 = v82;
    if (*(_QWORD *)(v82 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v16 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v16 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v70 = v15 + 64;
    v29 = -1;
    v30 = -1 << *(_BYTE *)(v15 + 32);
    if (-v30 < 64)
      v29 = ~(-1 << -(char)v30);
    v31 = v29 & *(_QWORD *)(v15 + 64);
    v32 = &v80;
    v33 = &v75;
    v34 = &v77;
    v69 = (unint64_t)(63 - v30) >> 6;
    swift_bridgeObjectRetain();
    v71 = 0;
    if (v31)
      goto LABEL_20;
LABEL_21:
    v42 = v71 + 1;
    if (__OFADD__(v71, 1))
    {
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    if (v42 < v69)
    {
      v43 = *(_QWORD *)(v70 + 8 * v42);
      v44 = v71 + 1;
      if (v43)
        goto LABEL_40;
      v44 = v71 + 2;
      if (v71 + 2 >= v69)
        goto LABEL_46;
      v43 = *(_QWORD *)(v70 + 8 * v44);
      if (v43)
        goto LABEL_40;
      v44 = v71 + 3;
      if (v71 + 3 >= v69)
        goto LABEL_46;
      v43 = *(_QWORD *)(v70 + 8 * v44);
      if (v43)
        goto LABEL_40;
      v44 = v71 + 4;
      if (v71 + 4 >= v69)
        goto LABEL_46;
      v43 = *(_QWORD *)(v70 + 8 * v44);
      if (v43)
        goto LABEL_40;
      v44 = v71 + 5;
      if (v71 + 5 >= v69)
        goto LABEL_46;
      v43 = *(_QWORD *)(v70 + 8 * v44);
      if (v43)
        goto LABEL_40;
      v44 = v71 + 6;
      if (v71 + 6 >= v69)
        goto LABEL_46;
      v43 = *(_QWORD *)(v70 + 8 * v44);
      if (v43)
      {
LABEL_40:
        v71 = v44;
        v72 = (v43 - 1) & v43;
        for (i = __clz(__rbit64(v43)) + (v44 << 6); ; i = __clz(__rbit64(v31)) | (v71 << 6))
        {
          v46 = (uint64_t *)(*(_QWORD *)(v15 + 48) + 16 * i);
          v48 = *v46;
          v47 = v46[1];
          outlined init with copy of AnyHashable(*(_QWORD *)(v15 + 56) + 40 * i, (uint64_t)v32);
          *(_QWORD *)&v79 = v48;
          *((_QWORD *)&v79 + 1) = v47;
          v74 = v47;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v49 = v48;
          outlined init with take of Any(v33, v34);
          outlined init with take of Any(v34, v78);
          outlined init with take of Any(v78, &v76);
          v50 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v74);
          v4 = v50;
          if ((v51 & 1) != 0)
          {
            v35 = v32;
            v36 = v34;
            v37 = v33;
            v38 = v15;
            v39 = (uint64_t *)(v16[6] + 16 * v50);
            swift_bridgeObjectRelease();
            *v39 = v49;
            v39[1] = v74;
            v15 = v38;
            v33 = v37;
            v34 = v36;
            v32 = v35;
            v40 = (_OWORD *)(v16[7] + 32 * v4);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
            outlined init with take of Any(&v76, v40);
            v31 = v72;
            if (!v72)
              goto LABEL_21;
          }
          else
          {
            if (v16[2] >= v16[3])
            {
              __break(1u);
LABEL_63:
              __break(1u);
              goto LABEL_64;
            }
            *(_QWORD *)((char *)v16 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v50;
            v52 = (uint64_t *)(v16[6] + 16 * v50);
            *v52 = v49;
            v52[1] = v74;
            outlined init with take of Any(&v76, (_OWORD *)(v16[7] + 32 * v50));
            v53 = v16[2];
            v54 = __OFADD__(v53, 1);
            v55 = v53 + 1;
            if (v54)
              goto LABEL_63;
            v16[2] = v55;
            v31 = v72;
            if (!v72)
              goto LABEL_21;
          }
LABEL_20:
          v72 = (v31 - 1) & v31;
        }
      }
      v45 = v71 + 7;
      if (v71 + 7 < v69)
      {
        v43 = *(_QWORD *)(v70 + 8 * v45);
        if (v43)
        {
          v44 = v71 + 7;
          goto LABEL_40;
        }
        while (1)
        {
          v44 = v45 + 1;
          if (__OFADD__(v45, 1))
            goto LABEL_65;
          if (v44 >= v69)
            break;
          v43 = *(_QWORD *)(v70 + 8 * v44);
          ++v45;
          if (v43)
            goto LABEL_40;
        }
      }
    }
LABEL_46:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v56 = objc_allocWithZone((Class)NSError);
    v57 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v58 = objc_msgSend(v56, sel_initWithDomain_code_userInfo_, v57, v68, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v59 = objc_msgSend(v58, sel_domain);
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v62 = v61;

    if (v60 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v62 != v63)
    {
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v65 & 1) != 0)
        return swift_willThrow();
      __break(1u);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in closure #4 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(timeval *a1, char *a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t result;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 *v33;
  uint64_t *v34;
  uint64_t *v35;
  __int128 *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  _OWORD *v41;
  unint64_t i;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v66;
  char v67;
  Swift::String v68;
  _QWORD *v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  _OWORD v80[2];
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  result = utimes(a2, a1);
  if ((_DWORD)result)
  {
    v69 = (_QWORD *)a5;
    LODWORD(a5) = MEMORY[0x186DA4118]();
    v75 = MEMORY[0x1E0DEE9E0];
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v11 = v10;
    *(_QWORD *)&v78 = a3;
    *((_QWORD *)&v78 + 1) = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v81, (uint64_t)v9, v11);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v14 = v13;
    URL.init(_fileManagerFailableFileURLWithPath:)(a3, a4, (uint64_t)&v78);
    if ((_QWORD)v78)
    {
      v77 = v79;
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v81 = 0u;
      v82 = 0u;
      v83 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v81, (uint64_t)v12, v14);
    v84 = v75;
    swift_bridgeObjectRetain();
    if ((_DWORD)a5 == 102)
    {
LABEL_6:
      v15 = 512;
    }
    else
    {
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      {
LABEL_66:
        *(_QWORD *)&v81 = 0;
        *((_QWORD *)&v81 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v81 = 0xD000000000000014;
        *((_QWORD *)&v81 + 1) = 0x8000000182306980;
        LODWORD(v78) = a5;
        v68._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181C852C8);
      }
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
      v20 = v19;
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
      v21 = (int)POSIXErrorCode.rawValue.getter();
      v22 = objc_allocWithZone((Class)NSError);
      v23 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v24 = objc_msgSend(v22, sel_initWithDomain_code_userInfo_, v23, v21, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v25 = objc_msgSend(v24, sel_domain);
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v28 == v29)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v67 & 1) == 0)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
      }
      *(_QWORD *)&v78 = v24;
      lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v81, (uint64_t)v18, v20);
      v15 = 4;
      switch((int)a5)
      {
        case 1:
        case 13:
          v15 = 513;
          break;
        case 2:
          break;
        case 17:
          v15 = 516;
          break;
        case 28:
        case 69:
          v15 = 640;
          break;
        case 30:
          v15 = 642;
          break;
        case 63:
          v15 = 514;
          break;
        default:
          goto LABEL_6;
      }
    }
    v16 = v84;
    v70 = v15;
    if (*(_QWORD *)(v84 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v17 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v17 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v72 = v16 + 64;
    v30 = -1;
    v31 = -1 << *(_BYTE *)(v16 + 32);
    if (-v31 < 64)
      v30 = ~(-1 << -(char)v31);
    v32 = v30 & *(_QWORD *)(v16 + 64);
    v33 = &v82;
    v34 = &v77;
    v35 = &v79;
    v71 = (unint64_t)(63 - v31) >> 6;
    swift_bridgeObjectRetain();
    v73 = 0;
    if (v32)
      goto LABEL_19;
LABEL_20:
    v43 = v73 + 1;
    if (__OFADD__(v73, 1))
    {
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    if (v43 < v71)
    {
      v44 = *(_QWORD *)(v72 + 8 * v43);
      v45 = v73 + 1;
      if (v44)
        goto LABEL_39;
      v45 = v73 + 2;
      if (v73 + 2 >= v71)
        goto LABEL_45;
      v44 = *(_QWORD *)(v72 + 8 * v45);
      if (v44)
        goto LABEL_39;
      v45 = v73 + 3;
      if (v73 + 3 >= v71)
        goto LABEL_45;
      v44 = *(_QWORD *)(v72 + 8 * v45);
      if (v44)
        goto LABEL_39;
      v45 = v73 + 4;
      if (v73 + 4 >= v71)
        goto LABEL_45;
      v44 = *(_QWORD *)(v72 + 8 * v45);
      if (v44)
        goto LABEL_39;
      v45 = v73 + 5;
      if (v73 + 5 >= v71)
        goto LABEL_45;
      v44 = *(_QWORD *)(v72 + 8 * v45);
      if (v44)
        goto LABEL_39;
      v45 = v73 + 6;
      if (v73 + 6 >= v71)
        goto LABEL_45;
      v44 = *(_QWORD *)(v72 + 8 * v45);
      if (v44)
      {
LABEL_39:
        v73 = v45;
        v74 = (v44 - 1) & v44;
        for (i = __clz(__rbit64(v44)) + (v45 << 6); ; i = __clz(__rbit64(v32)) | (v73 << 6))
        {
          v47 = (uint64_t *)(*(_QWORD *)(v16 + 48) + 16 * i);
          v49 = *v47;
          v48 = v47[1];
          outlined init with copy of AnyHashable(*(_QWORD *)(v16 + 56) + 40 * i, (uint64_t)v33);
          *(_QWORD *)&v81 = v49;
          *((_QWORD *)&v81 + 1) = v48;
          v76 = v48;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v50 = v49;
          outlined init with take of Any(v34, v35);
          outlined init with take of Any(v35, v80);
          outlined init with take of Any(v80, &v78);
          v51 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v76);
          a5 = v51;
          if ((v52 & 1) != 0)
          {
            v36 = v33;
            v37 = v35;
            v38 = v34;
            v39 = v16;
            v40 = (uint64_t *)(v17[6] + 16 * v51);
            swift_bridgeObjectRelease();
            *v40 = v50;
            v40[1] = v76;
            v16 = v39;
            v34 = v38;
            v35 = v37;
            v33 = v36;
            v41 = (_OWORD *)(v17[7] + 32 * a5);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
            outlined init with take of Any(&v78, v41);
            v32 = v74;
            if (!v74)
              goto LABEL_20;
          }
          else
          {
            if (v17[2] >= v17[3])
            {
              __break(1u);
LABEL_62:
              __break(1u);
              goto LABEL_63;
            }
            *(_QWORD *)((char *)v17 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v51;
            v53 = (uint64_t *)(v17[6] + 16 * v51);
            *v53 = v50;
            v53[1] = v76;
            outlined init with take of Any(&v78, (_OWORD *)(v17[7] + 32 * v51));
            v54 = v17[2];
            v55 = __OFADD__(v54, 1);
            v56 = v54 + 1;
            if (v55)
              goto LABEL_62;
            v17[2] = v56;
            v32 = v74;
            if (!v74)
              goto LABEL_20;
          }
LABEL_19:
          v74 = (v32 - 1) & v32;
        }
      }
      v46 = v73 + 7;
      if (v73 + 7 < v71)
      {
        v44 = *(_QWORD *)(v72 + 8 * v46);
        if (v44)
        {
          v45 = v73 + 7;
          goto LABEL_39;
        }
        while (1)
        {
          v45 = v46 + 1;
          if (__OFADD__(v46, 1))
            goto LABEL_64;
          if (v45 >= v71)
            break;
          v44 = *(_QWORD *)(v72 + 8 * v45);
          ++v46;
          if (v44)
            goto LABEL_39;
        }
      }
    }
LABEL_45:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v57 = objc_allocWithZone((Class)NSError);
    v58 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v59 = objc_msgSend(v57, sel_initWithDomain_code_userInfo_, v58, v70, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v60 = objc_msgSend(v59, sel_domain);
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v63 = v62;

    if (v61 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v63 != v64)
    {
      v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v66 & 1) != 0)
      {
LABEL_52:
        result = swift_willThrow();
        *v69 = v59;
        return result;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_52;
  }
  return result;
}

void specialized _conditionallyBridgeFromObjectiveC_bridgeable<A>(_:_:)(uint64_t a1)
{
  id v2;
  char v3;
  id v4;

  if (!*MEMORY[0x1E0C9AE50])
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*MEMORY[0x1E0C9AE50] != a1)
  {
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 1);
    v3 = static NSObject.== infix(_:_:)();

    if ((v3 & 1) == 0)
    {
      if (*MEMORY[0x1E0C9AE40])
      {
        if (*MEMORY[0x1E0C9AE40] != a1)
        {
          v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0);
          static NSObject.== infix(_:_:)();

        }
        return;
      }
LABEL_10:
      __break(1u);
    }
  }
}

uint64_t specialized _readFileAttributePrimitive(_:as:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  char *v13;
  void (*v14)(char *, __n128);
  uint64_t v15;
  char v16;
  __n128 v17;
  _BOOL4 v18;
  uint64_t (*v20)(char *, uint64_t);
  uint64_t v21;
  __n128 v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __n128 v33;
  char v34;
  uint64_t v35;
  char v36;
  __n128 v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v43;
  char *v44;
  char v45;
  uint64_t v46;
  __n128 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  __int128 v59[2];
  uint64_t v60;
  uint64_t v61[4];
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD v65[2];

  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v62, &demangling cache variable for type metadata for Any?);
  if (!v63)
  {
    v4 = &demangling cache variable for type metadata for Any?;
    v5 = &v62;
    goto LABEL_12;
  }
  outlined init with take of Any(&v62, v65);
  outlined init with copy of Any((uint64_t)v65, (uint64_t)&v62);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) != 0)
  {
    specialized _conditionallyBridgeFromObjectiveC_bridgeable<A>(_:_:)(*(uint64_t *)&v59[0]);
    v2 = v1;
    v3 = v1;

    if (v3 != 2)
      goto LABEL_6;
  }
  outlined init with copy of Any((uint64_t)v65, (uint64_t)&v62);
  if (!swift_dynamicCast())
  {
    outlined init with copy of Any((uint64_t)v65, (uint64_t)v61);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryInteger);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(v59, (uint64_t)&v62);
      v6 = v63;
      v7 = v64;
      v8 = __swift_project_boxed_opaque_existential_1(&v62, v63);
      v9 = *(_QWORD **)(v6 - 8);
      v10 = v9[8];
      v11 = MEMORY[0x1E0C80A78](v8);
      v12 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
      v13 = (char *)&v51 - v12;
      v14 = (void (*)(char *, __n128))v9[2];
      v14((char *)&v51 - v12, v11);
      v15 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v16 = v15;
      v57 = &v51;
      v17 = MEMORY[0x1E0C80A78](v15);
      ((void (*)(char *, char *, uint64_t, __n128))v14)((char *)&v51 - v12, (char *)&v51 - v12, v6, v17);
      v58 = &v51;
      v18 = (v16 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
      v55 = v9;
      v20 = (uint64_t (*)(char *, uint64_t))v9[1];
      v21 = v20((char *)&v51 - v12, v6);
      v56 = &v51;
      v22 = MEMORY[0x1E0C80A78](v21);
      v23 = (char *)&v51 - v12;
      ((void (*)(char *, char *, uint64_t, __n128))v14)((char *)&v51 - v12, (char *)&v51 - v12, v6, v22);
      if (v18)
      {
        *(_QWORD *)&v59[0] = 0x8000000000000000;
        if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
        {
          v24 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if (v24 < 64)
          {
LABEL_25:
            v27 = dispatch thunk of BinaryInteger._lowWord.getter();
            v20(v23, v6);
            if (v27 < *(uint64_t *)&v59[0])
              goto LABEL_50;
            goto LABEL_28;
          }
          goto LABEL_22;
        }
        v25 = dispatch thunk of static BinaryInteger.isSigned.getter();
        v24 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if ((v25 & 1) != 0)
        {
          if (v24 <= 64)
          {
            v53 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16);
            AssociatedTypeWitness = swift_getAssociatedTypeWitness();
            v54 = &v51;
            MEMORY[0x1E0C80A78](AssociatedTypeWitness);
            AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
            v43 = MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
            v51 = (uint64_t)&v51;
            MEMORY[0x1E0C80A78](v43);
            v52 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
            v44 = (char *)&v51 - v52;
            dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
            v45 = dispatch thunk of static Comparable.< infix(_:_:)();
            v46 = v20(v44, v6);
            v47 = MEMORY[0x1E0C80A78](v46);
            v48 = (char *)&v51 - v52;
            ((void (*)(char *, char *, uint64_t, __n128))v55[4])((char *)&v51 - v52, v23, v6, v47);
            if ((v45 & 1) != 0)
            {
              v20(v48, v6);
              goto LABEL_50;
            }
            v49 = *(_QWORD *)&v59[0];
            v50 = dispatch thunk of BinaryInteger._lowWord.getter();
            v20(v48, v6);
            if (v50 < v49)
              goto LABEL_50;
LABEL_28:
            v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
            v29 = MEMORY[0x1E0C80A78](v28);
            ((void (*)(char *, char *, uint64_t, __n128))v14)((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v6, v29);
            if (v28 < 65)
            {
              v32 = dispatch thunk of BinaryInteger.bitWidth.getter();
              v30 = v20((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
              if (v32 == 64)
              {
                v30 = dispatch thunk of static BinaryInteger.isSigned.getter();
                v31 = v30 ^ 1;
              }
              else
              {
                v31 = 0;
              }
            }
            else
            {
              v30 = v20((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
              v31 = 1;
            }
            v33 = MEMORY[0x1E0C80A78](v30);
            ((void (*)(char *, char *, uint64_t, __n128))v14)((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v6, v33);
            if ((v31 & 1) != 0)
            {
              *(_QWORD *)&v59[0] = 0x7FFFFFFFFFFFFFFFLL;
              v34 = dispatch thunk of static BinaryInteger.isSigned.getter();
              v35 = dispatch thunk of BinaryInteger.bitWidth.getter();
              if ((v34 & 1) != 0)
              {
                if (v35 > 64)
                {
                  MEMORY[0x1E0C80A78](v35);
                  lazy protocol witness table accessor for type Int and conformance Int();
                  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                  v36 = dispatch thunk of static Comparable.< infix(_:_:)();
                  v20((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
                  v20((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
                  goto LABEL_41;
                }
              }
              else if (v35 > 63)
              {
                v54 = &v51;
                v61[0] = 0x7FFFFFFFFFFFFFFFLL;
                v37 = MEMORY[0x1E0C80A78](v35);
                v38 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
                v39 = ((uint64_t (*)(char *, char *, uint64_t, __n128))v55[4])(v38, v38, v6, v37);
                MEMORY[0x1E0C80A78](v39);
                lazy protocol witness table accessor for type Int and conformance Int();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                v36 = dispatch thunk of static Comparable.< infix(_:_:)();
                v20(v38, v6);
                v20(v38, v6);
LABEL_41:
                if ((v36 & 1) == 0)
                  goto LABEL_42;
LABEL_50:
                v20(v13, v6);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
                return 2;
              }
              dispatch thunk of BinaryInteger._lowWord.getter();
              v20((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
            }
            else
            {
              v20((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
            }
LABEL_42:
            v40 = dispatch thunk of BinaryInteger._lowWord.getter();
            v20(v13, v6);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
            if (!v40)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
              return 0;
            }
            if (v40 == 1)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
              return 1;
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
            return 2;
          }
LABEL_22:
          MEMORY[0x1E0C80A78](v24);
          lazy protocol witness table accessor for type Int and conformance Int();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          v26 = dispatch thunk of static Comparable.< infix(_:_:)();
          v20((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
          v20(v23, v6);
          if ((v26 & 1) != 0)
            goto LABEL_50;
          goto LABEL_28;
        }
        if (v24 < 64)
          goto LABEL_25;
      }
      v20(v23, v6);
      goto LABEL_28;
    }
    v60 = 0;
    memset(v59, 0, sizeof(v59));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    v4 = (uint64_t *)&demangling cache variable for type metadata for BinaryInteger?;
    v5 = v59;
LABEL_12:
    outlined destroy of Any?((uint64_t)v5, v4);
    return 2;
  }
  v2 = LOBYTE(v59[0]);
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  return v2;
}

uint64_t specialized _FileManagerImpl.moveItem(atPath:toPath:options:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t result;
  uint64_t *v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];

  URL.init(fileURLWithPath:)(a1, a2, (uint64_t)v15);
  v7 = (void *)v15[0];
  v14[0] = v15[0];
  v14[1] = v15[1];
  v14[2] = v15[2];
  URL.init(fileURLWithPath:)(a3, a4, (uint64_t)v13);
  v8 = (void *)v13[0];
  v12[0] = (uint64_t *)v13[0];
  v12[1] = (uint64_t *)v13[1];
  v12[2] = (uint64_t *)v13[2];
  v9 = (void *)MEMORY[0x186DA9F5C](v4);
  if (v9)
  {
    v10 = v9;
    specialized static _FileOperations.moveFile(_:to:with:options:)((uint64_t)v14, v12, v9);

    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t specialized _FileManagerImpl.moveItem(at:to:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  Swift::String v12;
  unsigned __int8 v13;
  char v14;
  Swift::String *v15;
  uint64_t v16;
  Swift::String v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _OWORD *v31;
  unint64_t result;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  _OWORD *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v63;
  char v64;
  id v65;
  Swift::String v66;
  uint64_t countAndFlagsBits;
  unint64_t object;
  _QWORD *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _OWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _OWORD *v87;
  _OWORD *v88;
  uint64_t v89;
  uint64_t *v90;
  _OWORD *v91;
  unint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  unint64_t v101;
  char v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  id v112;
  void *v113;
  id v114;
  void *v115;
  void *v116;
  id v117;
  void *v118;
  Swift::String *v119;
  id v120;
  void *v121;
  void *v122;
  Swift::String v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  Swift::Int v131;
  unint64_t v132;
  void (*v133)(char *, _QWORD);
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  Swift::String v138;
  id v139;
  void *v140;
  void *v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  Swift::String *v145;
  Swift::String v146;
  uint64_t v147;
  uint64_t v148;
  Swift::String v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  unint64_t v154;
  Swift::Int v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  id v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  _OWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  unint64_t v179;
  _OWORD *v180;
  uint64_t v181;
  uint64_t *v182;
  _OWORD *v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  void *v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  id v199;
  uint64_t v200;
  id v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  id v206;
  void *v207;
  id v208;
  void *v209;
  void *v210;
  id v211;
  void *v212;
  id v213;
  unint64_t v214;
  void *v215;
  void *v216;
  Swift::String v217;
  Swift::String v218;
  Swift::String v219;
  Swift::String *v220;
  Swift::String *v221;
  unint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  id v225;
  uint64_t v226;
  uint64_t v227;
  Swift::String *v228;
  id v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  _QWORD *v237;
  _OWORD *v238;
  _OWORD *v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  _OWORD *v243;
  _OWORD *v244;
  uint64_t v245;
  uint64_t *v246;
  _OWORD *v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  uint64_t *v252;
  void *v253;
  uint64_t v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  id v263;
  uint64_t v264;
  id v265;
  id v266;
  id v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v272;
  _BYTE v273[16];
  Swift::String *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  char *v279;
  Swift::String *v280;
  uint64_t v281;
  uint64_t i;
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _BYTE v288[32];
  Swift::String v289;
  _QWORD v290[4];
  _OWORD v291[2];
  Swift::String v292;
  _OWORD *v293;
  uint64_t v294;

  v3 = v2;
  v4 = *(void **)a1;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(_OWORD **)(a1 + 16);
  v8 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  swift_retain();
  v10 = v4;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    v277 = v3;
    v13 = objc_msgSend(v10, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v13 & 1) != 0)
      goto LABEL_10;
    goto LABEL_15;
  }
  v292._countAndFlagsBits = (uint64_t)v10;
  v292._object = v5;
  v293 = v6;
  URL.scheme.getter();
  if (!v11)
  {
    swift_release();
    swift_release();

    goto LABEL_15;
  }
  i = v7;
  v277 = v3;
  v12 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v12._countAndFlagsBits == 1701603686 && v12._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    v7 = i;
    goto LABEL_10;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  v7 = i;
  if ((v14 & 1) == 0)
  {
LABEL_15:
    v18 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v286 = MEMORY[0x1E0DEE9E0];
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v21 = v20;
    v290[0] = v6;
    lazy protocol witness table accessor for type URL and conformance URL();
    v22 = v10;
    swift_retain();
    swift_retain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v292, (uint64_t)v19, v21);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v25 = v24;
    v292._countAndFlagsBits = (uint64_t)v22;
    v292._object = v5;
    v293 = v6;
    v289 = URL.path(percentEncoded:)(0);
    v15 = &v289;
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v292, (uint64_t)v23, v25);
    v26 = v286;
    if (*(_QWORD *)(v286 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v18 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    v27 = *(_QWORD *)(v286 + 64);
    v280 = (Swift::String *)(v286 + 64);
    v28 = -1;
    v29 = -1 << *(_BYTE *)(v286 + 32);
    v277 = ~v29;
    if (-v29 < 64)
      v28 = ~(-1 << -(char)v29);
    v30 = v28 & v27;
    v279 = (char *)((unint64_t)(63 - v29) >> 6);
    v5 = &v293;
    v6 = v288;
    v31 = v290;
    v278 = v18 + 8;
    result = swift_bridgeObjectRetain();
    i = 0;
    v281 = MEMORY[0x1E0DEE9B8] + 8;
    if (v30)
      goto LABEL_22;
LABEL_23:
    v42 = (char *)(i + 1);
    if (__OFADD__(i, 1))
    {
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
      goto LABEL_241;
    }
    if ((uint64_t)v42 < (uint64_t)v279)
    {
      v43 = *(&v280->_countAndFlagsBits + (_QWORD)v42);
      v44 = i + 1;
      if (v43)
        goto LABEL_42;
      v44 = i + 2;
      if (i + 2 < (uint64_t)v279)
      {
        v43 = *(&v280->_countAndFlagsBits + v44);
        if (v43)
          goto LABEL_42;
        v44 = i + 3;
        if (i + 3 < (uint64_t)v279)
        {
          v43 = *(&v280->_countAndFlagsBits + v44);
          if (v43)
            goto LABEL_42;
          v44 = i + 4;
          if (i + 4 < (uint64_t)v279)
          {
            v43 = *(&v280->_countAndFlagsBits + v44);
            if (v43)
              goto LABEL_42;
            v44 = i + 5;
            if (i + 5 < (uint64_t)v279)
            {
              v43 = *(&v280->_countAndFlagsBits + v44);
              if (v43)
                goto LABEL_42;
              v44 = i + 6;
              if (i + 6 < (uint64_t)v279)
              {
                v43 = *(&v280->_countAndFlagsBits + v44);
                if (v43)
                  goto LABEL_42;
                v45 = (char *)(i + 7);
                if (i + 7 < (uint64_t)v279)
                {
                  v43 = *(&v280->_countAndFlagsBits + (_QWORD)v45);
                  if (!v43)
                  {
                    while (1)
                    {
                      v44 = (uint64_t)(v45 + 1);
                      if (__OFADD__(v45, 1))
                        goto LABEL_248;
                      if (v44 >= (uint64_t)v279)
                        goto LABEL_48;
                      v43 = *(&v280->_countAndFlagsBits + v44);
                      ++v45;
                      if (v43)
                        goto LABEL_42;
                    }
                  }
                  v44 = i + 7;
LABEL_42:
                  v294 = (v43 - 1) & v43;
                  v41 = __clz(__rbit64(v43)) + (v44 << 6);
                  for (i = v44; ; v41 = __clz(__rbit64(v30)) | (i << 6))
                  {
                    v46 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * v41);
                    v48 = *v46;
                    v47 = v46[1];
                    outlined init with copy of AnyHashable(*(_QWORD *)(v26 + 56) + 40 * v41, (uint64_t)v5);
                    v292._countAndFlagsBits = v48;
                    v292._object = (void *)v47;
                    v49 = *((_OWORD *)v5 + 1);
                    v283 = *(_OWORD *)v5;
                    v284 = v49;
                    v285 = v5[4];
                    v286 = v48;
                    v287 = v47;
                    swift_bridgeObjectRetain();
                    swift_dynamicCast();
                    v15 = (Swift::String *)v47;
                    outlined init with take of Any(v6, v31);
                    outlined init with take of Any(v31, v291);
                    outlined init with take of Any(v291, &v289);
                    result = specialized __RawDictionaryStorage.find<A>(_:)(v48, v47);
                    v50 = result;
                    if ((v51 & 1) != 0)
                    {
                      v33 = v18[6];
                      v34 = v5;
                      v35 = v18;
                      v36 = v31;
                      v37 = v6;
                      v38 = v26;
                      v39 = (uint64_t *)(v33 + 16 * result);
                      swift_bridgeObjectRelease();
                      *v39 = v48;
                      v39[1] = (uint64_t)v15;
                      v26 = v38;
                      v6 = v37;
                      v31 = v36;
                      v18 = v35;
                      v5 = v34;
                      v40 = (_OWORD *)(v18[7] + 32 * v50);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
                      result = (unint64_t)outlined init with take of Any(&v289, v40);
                      v30 = v294;
                      if (!v294)
                        goto LABEL_23;
                    }
                    else
                    {
                      if (v18[2] >= v18[3])
                      {
                        __break(1u);
LABEL_237:
                        __break(1u);
                        goto LABEL_238;
                      }
                      *(_QWORD *)((char *)v278 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
                      v52 = (uint64_t *)(v18[6] + 16 * result);
                      *v52 = v48;
                      v52[1] = (uint64_t)v15;
                      result = (unint64_t)outlined init with take of Any(&v289, (_OWORD *)(v18[7] + 32 * result));
                      v53 = v18[2];
                      v54 = __OFADD__(v53, 1);
                      v55 = v53 + 1;
                      if (v54)
                        goto LABEL_237;
                      v18[2] = v55;
                      v30 = v294;
                      if (!v294)
                        goto LABEL_23;
                    }
LABEL_22:
                    v294 = (v30 - 1) & v30;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_48:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v56 = objc_allocWithZone((Class)NSError);
    v57 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v58 = objc_msgSend(v56, sel_initWithDomain_code_userInfo_, v57, 262, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v10 = objc_msgSend(v58, sel_domain);
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v9 = v60;

    if (v59 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v9 == v61)
      goto LABEL_232;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return swift_willThrow();
    __break(1u);
LABEL_54:
    v63 = -[Swift::String isFileURL](v15, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v63 & 1) != 0)
      goto LABEL_58;
    goto LABEL_62;
  }
LABEL_10:
  swift_retain();
  v15 = v8;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
    goto LABEL_54;
  v292._countAndFlagsBits = (uint64_t)v15;
  v292._object = (void *)v7;
  v293 = (_OWORD *)v9;
  URL.scheme.getter();
  if (!v16)
  {
    swift_release();
    swift_release();

    goto LABEL_62;
  }
  i = (uint64_t)v5;
  v17 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v17._countAndFlagsBits == 1701603686 && v17._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    v5 = (_QWORD *)i;
    goto LABEL_58;
  }
  v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  v5 = (_QWORD *)i;
  if ((v64 & 1) == 0)
  {
LABEL_62:
    v69 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v286 = MEMORY[0x1E0DEE9E0];
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v72 = v71;
    v289._countAndFlagsBits = (uint64_t)v15;
    v289._object = (void *)v7;
    v290[0] = v9;
    lazy protocol witness table accessor for type URL and conformance URL();
    v73 = v15;
    swift_retain();
    swift_retain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v292, (uint64_t)v70, v72);
    v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v76 = v75;
    v292._countAndFlagsBits = (uint64_t)v73;
    v292._object = (void *)v7;
    v293 = (_OWORD *)v9;
    v289 = URL.path(percentEncoded:)(0);
    v15 = &v292;
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v292, (uint64_t)v74, v76);
    v77 = v286;
    if (*(_QWORD *)(v286 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v69 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    v78 = *(_QWORD *)(v286 + 64);
    v280 = (Swift::String *)(v286 + 64);
    v79 = -1;
    v80 = -1 << *(_BYTE *)(v286 + 32);
    v277 = ~v80;
    if (-v80 < 64)
      v79 = ~(-1 << -(char)v80);
    v81 = v79 & v78;
    v279 = (char *)((unint64_t)(63 - v80) >> 6);
    v82 = &v293;
    v6 = v288;
    v83 = v290;
    v278 = v69 + 8;
    result = swift_bridgeObjectRetain();
    i = 0;
    v281 = MEMORY[0x1E0DEE9B8] + 8;
    if (v81)
      goto LABEL_69;
LABEL_70:
    v93 = (char *)(i + 1);
    if (!__OFADD__(i, 1))
    {
      if ((uint64_t)v93 < (uint64_t)v279)
      {
        v94 = *(&v280->_countAndFlagsBits + (_QWORD)v93);
        v95 = i + 1;
        if (v94)
          goto LABEL_89;
        v95 = i + 2;
        if (i + 2 < (uint64_t)v279)
        {
          v94 = *(&v280->_countAndFlagsBits + v95);
          if (v94)
            goto LABEL_89;
          v95 = i + 3;
          if (i + 3 < (uint64_t)v279)
          {
            v94 = *(&v280->_countAndFlagsBits + v95);
            if (v94)
              goto LABEL_89;
            v95 = i + 4;
            if (i + 4 < (uint64_t)v279)
            {
              v94 = *(&v280->_countAndFlagsBits + v95);
              if (v94)
                goto LABEL_89;
              v95 = i + 5;
              if (i + 5 < (uint64_t)v279)
              {
                v94 = *(&v280->_countAndFlagsBits + v95);
                if (v94)
                  goto LABEL_89;
                v95 = i + 6;
                if (i + 6 < (uint64_t)v279)
                {
                  v94 = *(&v280->_countAndFlagsBits + v95);
                  if (v94)
                    goto LABEL_89;
                  v96 = (char *)(i + 7);
                  if (i + 7 < (uint64_t)v279)
                  {
                    v94 = *(&v280->_countAndFlagsBits + (_QWORD)v96);
                    if (!v94)
                    {
                      while (1)
                      {
                        v95 = (uint64_t)(v96 + 1);
                        if (__OFADD__(v96, 1))
                          goto LABEL_249;
                        if (v95 >= (uint64_t)v279)
                          goto LABEL_95;
                        v94 = *(&v280->_countAndFlagsBits + v95);
                        ++v96;
                        if (v94)
                          goto LABEL_89;
                      }
                    }
                    v95 = i + 7;
LABEL_89:
                    v294 = (v94 - 1) & v94;
                    v92 = __clz(__rbit64(v94)) + (v95 << 6);
                    for (i = v95; ; v92 = __clz(__rbit64(v81)) | (i << 6))
                    {
                      v97 = (uint64_t *)(*(_QWORD *)(v77 + 48) + 16 * v92);
                      v99 = *v97;
                      v98 = v97[1];
                      outlined init with copy of AnyHashable(*(_QWORD *)(v77 + 56) + 40 * v92, (uint64_t)v82);
                      v292._countAndFlagsBits = v99;
                      v292._object = (void *)v98;
                      v100 = *((_OWORD *)v82 + 1);
                      v283 = *(_OWORD *)v82;
                      v284 = v100;
                      v285 = v82[4];
                      v286 = v99;
                      v287 = v98;
                      swift_bridgeObjectRetain();
                      swift_dynamicCast();
                      v15 = (Swift::String *)v98;
                      outlined init with take of Any(v6, v83);
                      outlined init with take of Any(v83, v291);
                      outlined init with take of Any(v291, &v289);
                      result = specialized __RawDictionaryStorage.find<A>(_:)(v99, v98);
                      v101 = result;
                      if ((v102 & 1) != 0)
                      {
                        v84 = v69[6];
                        v85 = v82;
                        v86 = v69;
                        v87 = v83;
                        v88 = v6;
                        v89 = v77;
                        v90 = (uint64_t *)(v84 + 16 * result);
                        swift_bridgeObjectRelease();
                        *v90 = v99;
                        v90[1] = (uint64_t)v15;
                        v77 = v89;
                        v6 = v88;
                        v83 = v87;
                        v69 = v86;
                        v82 = v85;
                        v91 = (_OWORD *)(v69[7] + 32 * v101);
                        __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
                        result = (unint64_t)outlined init with take of Any(&v289, v91);
                        v81 = v294;
                        if (!v294)
                          goto LABEL_70;
                      }
                      else
                      {
                        if (v69[2] >= v69[3])
                          goto LABEL_239;
                        *(_QWORD *)((char *)v278 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
                        v103 = (uint64_t *)(v69[6] + 16 * result);
                        *v103 = v99;
                        v103[1] = (uint64_t)v15;
                        result = (unint64_t)outlined init with take of Any(&v289, (_OWORD *)(v69[7] + 32 * result));
                        v104 = v69[2];
                        v54 = __OFADD__(v104, 1);
                        v105 = v104 + 1;
                        if (v54)
                          goto LABEL_240;
                        v69[2] = v105;
                        v81 = v294;
                        if (!v294)
                          goto LABEL_70;
                      }
LABEL_69:
                      v294 = (v81 - 1) & v81;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_95:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v106 = objc_allocWithZone((Class)NSError);
      v5 = (_QWORD *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v65 = objc_msgSend(v106, sel_initWithDomain_code_userInfo_, v5, 262, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v107 = objc_msgSend(v65, sel_domain);
      v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      v9 = v109;

      if (v108 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v9 == v110)
        goto LABEL_232;
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
        return swift_willThrow();
      __break(1u);
      goto LABEL_101;
    }
LABEL_241:
    __break(1u);
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
    goto LABEL_244;
  }
LABEL_58:
  v65 = v10;
  swift_retain();
  swift_retain();
  i = (uint64_t)v65;
  if (_foundation_swift_url_feature_enabled())
  {
    v280 = v15;
    v292._countAndFlagsBits = (uint64_t)v65;
    v292._object = v5;
    v293 = v6;
    v279 = (char *)v65;
    swift_retain();
    swift_retain();
    v66 = URL.path(percentEncoded:)(1);
    countAndFlagsBits = v66._countAndFlagsBits;
    v292 = v66;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      object = (unint64_t)v66._object;
    }
    else
    {
      object = (unint64_t)v66._object;
      if ((specialized BidirectionalCollection.last.getter(v66._countAndFlagsBits, (unint64_t)v66._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        object = (unint64_t)v292._object;
        countAndFlagsBits = v292._countAndFlagsBits;
      }
    }
    v289._countAndFlagsBits = Set.init(minimumCapacity:)();
    v125 = specialized Set._Variant.insert(_:)(&v286, 0x2FuLL);
    v126 = v289._countAndFlagsBits;
    v127 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0)
      v127 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v127)
    {
      v281 = v9;
      v289._countAndFlagsBits = countAndFlagsBits;
      v289._object = (void *)object;
      MEMORY[0x1E0C80A78](v125);
      v274 = &v289;
      v275 = v126;
      swift_bridgeObjectRetain();
      v128 = v277;
      v129 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v273, countAndFlagsBits, object);
      v277 = v128;
      if (v130 == 1)
      {
        v132 = (unint64_t)v289._object;
        v131 = v289._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v133 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v131, v132, v126);
        v135 = v134;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v136 = v135;
        v137 = (unint64_t)v133;
      }
      else
      {
        v137 = (unint64_t)v129;
        v136 = v130;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v9 = v281;
      v143 = v279;
      if (!v136)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v137 = 0;
        v136 = 0xE000000000000000;
        goto LABEL_120;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v137 = 0;
      v136 = 0xE000000000000000;
      v143 = v279;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_120:
    swift_release();
    swift_release();

    v15 = v280;
    goto LABEL_121;
  }
LABEL_101:
  v112 = objc_msgSend(v65, sel__parameterString);
  if (v112)
  {
    v113 = v112;
    v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
    v116 = v115;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v117 = objc_msgSend(v65, sel_path)) != 0)
    {
      v118 = v117;
      v119 = v15;
      v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
      v281 = (uint64_t)v114;
      v122 = v121;

      v292._countAndFlagsBits = (uint64_t)v120;
      v292._object = v122;
      v15 = v119;
      swift_bridgeObjectRetain();
      v123._countAndFlagsBits = 59;
      v123._object = (void *)0xE100000000000000;
      String.append(_:)(v123);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v124._countAndFlagsBits = v281;
      v124._object = v116;
      String.append(_:)(v124);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      v292._countAndFlagsBits = 59;
      v292._object = (void *)0xE100000000000000;
      v138._countAndFlagsBits = (uint64_t)v114;
      v138._object = v116;
      String.append(_:)(v138);
      swift_release();
      swift_release();

    }
    swift_bridgeObjectRelease();
    v136 = (unint64_t)v292._object;
    v137 = v292._countAndFlagsBits;
  }
  else
  {
    v139 = objc_msgSend(v65, sel_path);
    if (v139)
    {
      v140 = v139;
      v141 = v65;
      v137 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
      v136 = v142;
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();
      swift_release();

      v137 = 0;
      v136 = 0xE000000000000000;
    }
  }
LABEL_121:
  v144 = HIBYTE(v136) & 0xF;
  if ((v136 & 0x2000000000000000) == 0)
    v144 = v137 & 0xFFFFFFFFFFFFLL;
  if (v144)
  {
    i = v137;
    v145 = v15;
    swift_retain();
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      v292._countAndFlagsBits = (uint64_t)v145;
      v292._object = (void *)v7;
      v293 = (_OWORD *)v9;
      v280 = v145;
      swift_retain();
      swift_retain();
      v146 = URL.path(percentEncoded:)(1);
      v292 = v146;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v146._countAndFlagsBits, (unint64_t)v146._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v289._countAndFlagsBits = Set.init(minimumCapacity:)();
      v147 = specialized Set._Variant.insert(_:)(&v286, 0x2FuLL);
      v148 = v289._countAndFlagsBits;
      v149 = v292;
      v150 = ((unint64_t)v292._object >> 56) & 0xF;
      if (((uint64_t)v292._object & 0x2000000000000000) == 0)
        v150 = v292._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (v150)
      {
        v281 = v9;
        v289 = v292;
        MEMORY[0x1E0C80A78](v147);
        v274 = &v289;
        v275 = v148;
        swift_bridgeObjectRetain();
        v151 = v277;
        v152 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((_QWORD *(*)(__int128 *__return_ptr, _QWORD *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v273, v149._countAndFlagsBits, (unint64_t)v149._object);
        v277 = v151;
        if (v153 == 1)
        {
          v154 = v136;
          v156 = (unint64_t)v289._object;
          v155 = v289._countAndFlagsBits;
          swift_bridgeObjectRetain();
          v157 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v155, v156, v148);
          v159 = v158;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v136 = v154;
        }
        else
        {
          v157 = (uint64_t)v152;
          v159 = v153;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v9 = v281;
        v220 = v280;
        if (!v159)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v157 = 0;
          v159 = 0xE000000000000000;
          goto LABEL_186;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v157 = 0;
        v159 = 0xE000000000000000;
        v220 = v280;
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_186:
      swift_release();
      swift_release();
      goto LABEL_187;
    }
LABEL_173:
    v206 = -[Swift::String _parameterString](v145, sel__parameterString);
    if (v206)
    {
      v207 = v206;
      v208 = static String._unconditionallyBridgeFromObjectiveC(_:)(v206);
      v210 = v209;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (v211 = -[Swift::String path](v145, sel_path)) != 0)
      {
        v212 = v211;
        v213 = static String._unconditionallyBridgeFromObjectiveC(_:)(v211);
        v214 = v136;
        v216 = v215;

        v292._countAndFlagsBits = (uint64_t)v213;
        v292._object = v216;
        swift_bridgeObjectRetain();
        v217._countAndFlagsBits = 59;
        v217._object = (void *)0xE100000000000000;
        String.append(_:)(v217);
        v136 = v214;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v218._countAndFlagsBits = (uint64_t)v208;
        v218._object = v210;
        String.append(_:)(v218);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        v292._countAndFlagsBits = 59;
        v292._object = (void *)0xE100000000000000;
        v219._countAndFlagsBits = (uint64_t)v208;
        v219._object = v210;
        String.append(_:)(v219);
        swift_release();
        swift_release();

      }
      swift_bridgeObjectRelease();
      v159 = (unint64_t)v292._object;
      v157 = v292._countAndFlagsBits;
    }
    else
    {
      v221 = (Swift::String *)-[Swift::String path](v145, sel_path);
      if (v221)
      {
        v220 = v221;
        v157 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v221);
        v159 = v222;
        swift_release();
        swift_release();

LABEL_187:
        goto LABEL_188;
      }
      swift_release();
      swift_release();

      v157 = 0;
      v159 = 0xE000000000000000;
    }
LABEL_188:
    v223 = HIBYTE(v159) & 0xF;
    if ((v159 & 0x2000000000000000) == 0)
      v223 = v157 & 0xFFFFFFFFFFFFLL;
    if (v223)
    {
      specialized _FileManagerImpl.moveItem(atPath:toPath:options:)(i, v136, v157, v159);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v224 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v286 = MEMORY[0x1E0DEE9E0];
    v225 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v227 = v226;
    v289._countAndFlagsBits = (uint64_t)v145;
    v289._object = (void *)v7;
    v290[0] = v9;
    lazy protocol witness table accessor for type URL and conformance URL();
    v228 = v145;
    swift_retain();
    swift_retain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v292, (uint64_t)v225, v227);
    v229 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v231 = v230;
    v292._countAndFlagsBits = (uint64_t)v228;
    v292._object = (void *)v7;
    v293 = (_OWORD *)v9;
    v289 = URL.path(percentEncoded:)(0);
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v292, (uint64_t)v229, v231);
    v232 = v286;
    if (*(_QWORD *)(v286 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v224 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    v233 = *(_QWORD *)(v232 + 64);
    v280 = (Swift::String *)(v232 + 64);
    v234 = -1;
    v235 = -1 << *(_BYTE *)(v232 + 32);
    v276 = ~v235;
    if (-v235 < 64)
      v234 = ~(-1 << -(char)v235);
    v236 = v234 & v233;
    v279 = (char *)((unint64_t)(63 - v235) >> 6);
    v237 = &v293;
    v238 = v288;
    v239 = v290;
    v278 = v224 + 8;
    result = swift_bridgeObjectRetain();
    i = 0;
    v281 = MEMORY[0x1E0DEE9B8] + 8;
    if (v236)
      goto LABEL_199;
LABEL_200:
    v249 = i + 1;
    if (!__OFADD__(i, 1))
    {
      if (v249 < (uint64_t)v279)
      {
        v250 = *(&v280->_countAndFlagsBits + v249);
        if (v250)
        {
LABEL_216:
          v294 = (v250 - 1) & v250;
          v248 = __clz(__rbit64(v250)) + (v249 << 6);
          for (i = v249; ; v248 = __clz(__rbit64(v236)) | (i << 6))
          {
            v252 = (uint64_t *)(*(_QWORD *)(v232 + 48) + 16 * v248);
            v254 = *v252;
            v253 = (void *)v252[1];
            outlined init with copy of AnyHashable(*(_QWORD *)(v232 + 56) + 40 * v248, (uint64_t)v237);
            v292._countAndFlagsBits = v254;
            v292._object = v253;
            v255 = *((_OWORD *)v237 + 1);
            v283 = *(_OWORD *)v237;
            v284 = v255;
            v285 = v237[4];
            v286 = v254;
            v287 = (uint64_t)v253;
            swift_bridgeObjectRetain();
            swift_dynamicCast();
            v256 = v286;
            v257 = v287;
            outlined init with take of Any(v238, v239);
            outlined init with take of Any(v239, v291);
            outlined init with take of Any(v291, &v289);
            result = specialized __RawDictionaryStorage.find<A>(_:)(v256, v257);
            v258 = result;
            if ((v259 & 1) != 0)
            {
              v240 = v224[6];
              v241 = v237;
              v242 = v224;
              v243 = v239;
              v244 = v238;
              v245 = v232;
              v246 = (uint64_t *)(v240 + 16 * result);
              swift_bridgeObjectRelease();
              *v246 = v256;
              v246[1] = v257;
              v232 = v245;
              v238 = v244;
              v239 = v243;
              v224 = v242;
              v237 = v241;
              v247 = (_OWORD *)(v224[7] + 32 * v258);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v247);
              result = (unint64_t)outlined init with take of Any(&v289, v247);
              v236 = v294;
              if (!v294)
                goto LABEL_200;
            }
            else
            {
              if (v224[2] >= v224[3])
                goto LABEL_245;
              *(_QWORD *)((char *)v278 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
              v260 = (uint64_t *)(v224[6] + 16 * result);
              *v260 = v256;
              v260[1] = v257;
              result = (unint64_t)outlined init with take of Any(&v289, (_OWORD *)(v224[7] + 32 * result));
              v261 = v224[2];
              v54 = __OFADD__(v261, 1);
              v262 = v261 + 1;
              if (v54)
                goto LABEL_246;
              v224[2] = v262;
              v236 = v294;
              if (!v294)
                goto LABEL_200;
            }
LABEL_199:
            v294 = (v236 - 1) & v236;
          }
        }
        v251 = (char *)(i + 2);
        if (i + 2 < (uint64_t)v279)
        {
          v250 = *(&v280->_countAndFlagsBits + (_QWORD)v251);
          if (v250)
            goto LABEL_215;
          v251 = (char *)(i + 3);
          if (i + 3 < (uint64_t)v279)
          {
            v250 = *(&v280->_countAndFlagsBits + (_QWORD)v251);
            if (v250)
              goto LABEL_215;
            v251 = (char *)(i + 4);
            if (i + 4 < (uint64_t)v279)
            {
              v250 = *(&v280->_countAndFlagsBits + (_QWORD)v251);
              if (v250)
                goto LABEL_215;
              v251 = (char *)(i + 5);
              if (i + 5 < (uint64_t)v279)
              {
                v250 = *(&v280->_countAndFlagsBits + (_QWORD)v251);
                if (v250)
                  goto LABEL_215;
                v251 = (char *)(i + 6);
                if (i + 6 < (uint64_t)v279)
                {
                  v250 = *(&v280->_countAndFlagsBits + (_QWORD)v251);
                  if (!v250)
                  {
                    v251 = (char *)(i + 7);
                    if (i + 7 < (uint64_t)v279)
                    {
                      v250 = *(&v280->_countAndFlagsBits + (_QWORD)v251);
                      if (v250)
                        goto LABEL_215;
                      while (1)
                      {
                        v249 = (uint64_t)(v251 + 1);
                        if (__OFADD__(v251, 1))
                          goto LABEL_251;
                        if (v249 >= (uint64_t)v279)
                          goto LABEL_226;
                        v250 = *(&v280->_countAndFlagsBits + v249);
                        ++v251;
                        if (v250)
                          goto LABEL_216;
                      }
                    }
                    goto LABEL_226;
                  }
LABEL_215:
                  v249 = (uint64_t)v251;
                  goto LABEL_216;
                }
              }
            }
          }
        }
      }
LABEL_226:
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
      v263 = objc_allocWithZone((Class)NSError);
      v264 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v265 = objc_msgSend(v263, sel_initWithDomain_code_userInfo_, v264, 4, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v266 = objc_msgSend(v265, sel_domain);
      v267 = static String._unconditionallyBridgeFromObjectiveC(_:)(v266);
      v269 = v268;

      if (v267 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v269 == v270)
        goto LABEL_232;
      v272 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v272 & 1) == 0)
      {
        __break(1u);
LABEL_232:
        swift_bridgeObjectRelease_n();
      }
      return swift_willThrow();
    }
    goto LABEL_247;
  }
  swift_bridgeObjectRelease();
  v160 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v286 = MEMORY[0x1E0DEE9E0];
  v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v163 = v162;
  v164 = (id)i;
  v289._countAndFlagsBits = i;
  v289._object = v5;
  v290[0] = v6;
  lazy protocol witness table accessor for type URL and conformance URL();
  v165 = v164;
  swift_retain();
  swift_retain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v292, (uint64_t)v161, v163);
  v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v168 = v167;
  v292._countAndFlagsBits = (uint64_t)v165;
  v292._object = v5;
  v293 = v6;
  v289 = URL.path(percentEncoded:)(0);
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v292, (uint64_t)v166, v168);
  v169 = v286;
  if (*(_QWORD *)(v286 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v160 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  v170 = *(_QWORD *)(v169 + 64);
  v279 = (char *)(v169 + 64);
  v171 = -1;
  v172 = -1 << *(_BYTE *)(v169 + 32);
  v276 = ~v172;
  if (-v172 < 64)
    v171 = ~(-1 << -(char)v172);
  v173 = v171 & v170;
  v280 = (Swift::String *)((unint64_t)(63 - v172) >> 6);
  v174 = &v293;
  v175 = v288;
  v136 = (unint64_t)v290;
  v278 = v160 + 8;
  result = swift_bridgeObjectRetain();
  i = 0;
  v281 = MEMORY[0x1E0DEE9B8] + 8;
  if (v173)
    goto LABEL_140;
LABEL_141:
  v185 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v185 < (uint64_t)v280)
    {
      v186 = *(_QWORD *)&v279[8 * v185];
      if (v186)
      {
LABEL_157:
        v294 = (v186 - 1) & v186;
        v184 = __clz(__rbit64(v186)) + (v185 << 6);
        for (i = v185; ; v184 = __clz(__rbit64(v173)) | (i << 6))
        {
          v188 = (uint64_t *)(*(_QWORD *)(v169 + 48) + 16 * v184);
          v190 = *v188;
          v189 = (void *)v188[1];
          outlined init with copy of AnyHashable(*(_QWORD *)(v169 + 56) + 40 * v184, (uint64_t)v174);
          v292._countAndFlagsBits = v190;
          v292._object = v189;
          v191 = *((_OWORD *)v174 + 1);
          v283 = *(_OWORD *)v174;
          v284 = v191;
          v285 = v174[4];
          v286 = v190;
          v287 = (uint64_t)v189;
          swift_bridgeObjectRetain();
          swift_dynamicCast();
          v192 = v286;
          v193 = v287;
          outlined init with take of Any(v175, (_OWORD *)v136);
          outlined init with take of Any((_OWORD *)v136, v291);
          outlined init with take of Any(v291, &v289);
          result = specialized __RawDictionaryStorage.find<A>(_:)(v192, v193);
          v194 = result;
          if ((v195 & 1) != 0)
          {
            v176 = v160[6];
            v177 = v174;
            v178 = v160;
            v179 = v136;
            v180 = v175;
            v181 = v169;
            v182 = (uint64_t *)(v176 + 16 * result);
            swift_bridgeObjectRelease();
            *v182 = v192;
            v182[1] = v193;
            v169 = v181;
            v175 = v180;
            v136 = v179;
            v160 = v178;
            v174 = v177;
            v183 = (_OWORD *)(v160[7] + 32 * v194);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v183);
            result = (unint64_t)outlined init with take of Any(&v289, v183);
            v173 = v294;
            if (!v294)
              goto LABEL_141;
          }
          else
          {
            if (v160[2] >= v160[3])
              goto LABEL_242;
            *(_QWORD *)((char *)v278 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
            v196 = (uint64_t *)(v160[6] + 16 * result);
            *v196 = v192;
            v196[1] = v193;
            result = (unint64_t)outlined init with take of Any(&v289, (_OWORD *)(v160[7] + 32 * result));
            v197 = v160[2];
            v54 = __OFADD__(v197, 1);
            v198 = v197 + 1;
            if (v54)
              goto LABEL_243;
            v160[2] = v198;
            v173 = v294;
            if (!v294)
              goto LABEL_141;
          }
LABEL_140:
          v294 = (v173 - 1) & v173;
        }
      }
      v187 = i + 2;
      if (i + 2 < (uint64_t)v280)
      {
        v186 = *(_QWORD *)&v279[8 * v187];
        if (v186)
          goto LABEL_156;
        v187 = i + 3;
        if (i + 3 >= (uint64_t)v280)
          goto LABEL_167;
        v186 = *(_QWORD *)&v279[8 * v187];
        if (v186)
          goto LABEL_156;
        v187 = i + 4;
        if (i + 4 >= (uint64_t)v280)
          goto LABEL_167;
        v186 = *(_QWORD *)&v279[8 * v187];
        if (v186)
          goto LABEL_156;
        v187 = i + 5;
        if (i + 5 >= (uint64_t)v280)
          goto LABEL_167;
        v186 = *(_QWORD *)&v279[8 * v187];
        if (v186)
          goto LABEL_156;
        v187 = i + 6;
        if (i + 6 >= (uint64_t)v280)
          goto LABEL_167;
        v186 = *(_QWORD *)&v279[8 * v187];
        if (v186)
        {
LABEL_156:
          v185 = v187;
          goto LABEL_157;
        }
        v187 = i + 7;
        if (i + 7 < (uint64_t)v280)
        {
          v186 = *(_QWORD *)&v279[8 * v187];
          if (!v186)
          {
            while (1)
            {
              v185 = v187 + 1;
              if (__OFADD__(v187, 1))
                goto LABEL_250;
              if (v185 >= (uint64_t)v280)
                goto LABEL_167;
              v186 = *(_QWORD *)&v279[8 * v185];
              ++v187;
              if (v186)
                goto LABEL_157;
            }
          }
          goto LABEL_156;
        }
      }
    }
LABEL_167:
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v199 = objc_allocWithZone((Class)NSError);
    v200 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v145 = (Swift::String *)objc_msgSend(v199, sel_initWithDomain_code_userInfo_, v200, 4, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v201 = -[Swift::String domain](v145, sel_domain);
    v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v201);
    v9 = v203;

    if (v202 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v9 == v204)
      goto LABEL_232;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return swift_willThrow();
    __break(1u);
    goto LABEL_173;
  }
LABEL_244:
  __break(1u);
LABEL_245:
  __break(1u);
LABEL_246:
  __break(1u);
LABEL_247:
  __break(1u);
LABEL_248:
  __break(1u);
LABEL_249:
  __break(1u);
LABEL_250:
  __break(1u);
LABEL_251:
  __break(1u);
  return result;
}

unint64_t _s10Foundation15_FileOperationsO010linkOrCopyB033_0F974932CC9FBACA9047618113061023LL_3dst4with8delegateySS_SSSo13NSFileManagerCxtKAA04LinkeF8DelegateAELLRzlFZySPys4Int8VGSgKXEfU_AC04copyB0_2toAG7optionsySS_SSAJSo0mnF7OptionsVtKFZ0fbP0L_V_TG5TA_0(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 **)(v1 + 56));
}

NSFileAttributeType specialized UInt16._fileType.getter(__int16 a1)
{
  unsigned __int16 v1;
  const NSFileAttributeType *v2;

  v1 = S_IFMT.getter() & a1;
  if ((unsigned __int16)S_IFCHR.getter() == v1)
  {
    v2 = &NSFileTypeCharacterSpecial;
  }
  else if ((unsigned __int16)S_IFDIR.getter() == v1)
  {
    v2 = &NSFileTypeDirectory;
  }
  else if ((unsigned __int16)S_IFBLK.getter() == v1)
  {
    v2 = &NSFileTypeBlockSpecial;
  }
  else if ((unsigned __int16)S_IFREG.getter() == v1)
  {
    v2 = &NSFileTypeRegular;
  }
  else if ((unsigned __int16)S_IFLNK.getter() == v1)
  {
    v2 = &NSFileTypeSymbolicLink;
  }
  else if ((unsigned __int16)S_IFSOCK.getter() == v1)
  {
    v2 = &NSFileTypeSocket;
  }
  else
  {
    v2 = &NSFileTypeUnknown;
  }
  return *v2;
}

void *specialized NSFileProtectionType.init(intValue:)(int a1)
{
  int v1;
  void *v2;
  id v3;

  v1 = a1 - 1;
  if ((a1 - 1) > 6 || ((0x4Fu >> v1) & 1) == 0)
    return 0;
  v2 = *off_1E0F44640[v1];
  v3 = v2;
  return v2;
}

uint64_t specialized _FileManagerImpl._extendedAttributes(at:followSymlinks:)(char *a1)
{
  uint64_t v1;
  ssize_t v3;
  size_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t result;
  unint64_t v53;
  int64_t v54;
  char *__src;
  int64_t v56;
  __int128 v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;

  v3 = listxattr(a1, 0, 0, 0);
  if (v3 < 1)
    return 0;
  v4 = v3;
  v5 = (char *)swift_slowAlloc();
  if (listxattr(a1, v5, v4, 0) < 1)
  {
    MEMORY[0x186DA9E78](v5, -1, -1);
    return 0;
  }
  v6 = &v5[v4];
  v65 = MEMORY[0x1E0DEE9E0];
  v64 = v5;
  while (1)
  {
    v8 = String.init(cString:)();
    v9 = v7;
    if ((v8 != 0xD000000000000016 || v7 != 0x800000018230A130)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (v8 != 0xD000000000000014 || v9 != 0x800000018230A150)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (v8 != 0x532E6D6574737973 || v9 != 0xEF79746972756365)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      break;
    }
    if ((v9 & 0x1000000000000000) != 0)
    {
      v10 = String.UTF8View._foreignCount()();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      if ((v9 & 0x2000000000000000) != 0)
        v10 = HIBYTE(v9) & 0xF;
      else
        v10 = v8 & 0xFFFFFFFFFFFFLL;
    }
LABEL_17:
    v5 += v10 + 1;
    if (v5 >= v6)
    {
      MEMORY[0x186DA9E78](v64, -1, -1);
      return v65;
    }
  }
  v11 = _FileManagerImpl._extendedAttribute(_:at:followSymlinks:)(v5, a1, 0);
  if (v1)
  {
    swift_bridgeObjectRelease();
    if ((v9 & 0x1000000000000000) == 0)
    {
LABEL_77:
      swift_bridgeObjectRelease();
      return MEMORY[0x186DA9E78](v64, -1, -1);
    }
LABEL_80:
    String.UTF8View._foreignCount()();
    goto LABEL_77;
  }
  v13 = v12;
  if (v12 >> 60 == 15)
  {
    v14 = v65;
LABEL_68:
    if ((v9 & 0x1000000000000000) != 0)
    {
      v10 = String.UTF8View._foreignCount()();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      if ((v9 & 0x2000000000000000) != 0)
        v10 = HIBYTE(v9) & 0xF;
      else
        v10 = v8 & 0xFFFFFFFFFFFFLL;
    }
    v65 = v14;
    goto LABEL_17;
  }
  v15 = v11;
  swift_bridgeObjectRetain();
  v62 = v15;
  v63 = v13;
  outlined copy of Data?(v15, v13);
  v16 = v65;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
  v20 = *(_QWORD *)(v65 + 16);
  v21 = (v18 & 1) == 0;
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if (*(_QWORD *)(v65 + 24) < v22)
  {
    v58 = v18;
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
    if ((v58 & 1) != (v24 & 1))
      goto LABEL_83;
    v19 = v23;
    v16 = v65;
    v60 = v65;
    if ((v58 & 1) == 0)
      goto LABEL_65;
LABEL_29:
    v25 = *(_QWORD *)(v16 + 56) + 16 * v19;
    outlined consume of Data._Representation(*(_QWORD *)v25, *(_QWORD *)(v25 + 8));
    v26 = v63;
    *(_QWORD *)v25 = v62;
    *(_QWORD *)(v25 + 8) = v63;
    v27 = v62;
LABEL_67:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v27, v26);
    v14 = v60;
    goto LABEL_68;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v60 = v65;
    if ((v18 & 1) != 0)
      goto LABEL_29;
LABEL_65:
    *(_QWORD *)(v16 + 8 * (v19 >> 6) + 64) |= 1 << v19;
    v47 = (uint64_t *)(*(_QWORD *)(v16 + 48) + 16 * v19);
    *v47 = v8;
    v47[1] = v9;
    v48 = (uint64_t *)(*(_QWORD *)(v16 + 56) + 16 * v19);
    v27 = v62;
    *v48 = v62;
    v48[1] = v63;
    v49 = *(_QWORD *)(v16 + 16);
    v50 = __OFADD__(v49, 1);
    v51 = v49 + 1;
    if (v50)
      goto LABEL_79;
    *(_QWORD *)(v16 + 16) = v51;
    swift_bridgeObjectRetain();
    v26 = v63;
    goto LABEL_67;
  }
  v53 = v19;
  v59 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v28 = static _DictionaryStorage.copy(original:)();
  v16 = v28;
  if (!*(_QWORD *)(v65 + 16))
  {
LABEL_64:
    swift_bridgeObjectRelease();
    v19 = v53;
    v60 = v16;
    if ((v59 & 1) != 0)
      goto LABEL_29;
    goto LABEL_65;
  }
  v29 = (char *)(v28 + 64);
  __src = (char *)(v65 + 64);
  v30 = (unint64_t)((1 << *(_BYTE *)(v16 + 32)) + 63) >> 6;
  v61 = v16;
  if (v16 != v65 || v29 >= &__src[8 * v30])
    memmove(v29, __src, 8 * v30);
  v56 = 0;
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v65 + 16);
  v31 = 1 << *(_BYTE *)(v65 + 32);
  if (v31 < 64)
    v32 = ~(-1 << v31);
  else
    v32 = -1;
  v33 = v32 & *(_QWORD *)(v65 + 64);
  v54 = (unint64_t)(v31 + 63) >> 6;
  while (2)
  {
    if (v33)
    {
      v34 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v35 = v34 | (v56 << 6);
      v36 = v65;
LABEL_40:
      v37 = 16 * v35;
      v38 = *(_QWORD *)(v36 + 56);
      v39 = (uint64_t *)(*(_QWORD *)(v36 + 48) + v37);
      v41 = *v39;
      v40 = v39[1];
      v57 = *(_OWORD *)(v38 + v37);
      v42 = (_QWORD *)(*(_QWORD *)(v16 + 48) + v37);
      *v42 = v41;
      v42[1] = v40;
      *(_OWORD *)(*(_QWORD *)(v16 + 56) + v37) = v57;
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v57, *((unint64_t *)&v57 + 1));
      continue;
    }
    break;
  }
  v43 = v56 + 1;
  v36 = v65;
  if (__OFADD__(v56, 1))
  {
    __break(1u);
    goto LABEL_82;
  }
  if (v43 >= v54)
    goto LABEL_64;
  v44 = *(_QWORD *)&__src[8 * v43];
  v45 = v56 + 1;
  if (v44)
    goto LABEL_63;
  v45 = v56 + 2;
  if (v56 + 2 >= v54)
    goto LABEL_64;
  v44 = *(_QWORD *)&__src[8 * v45];
  if (v44)
    goto LABEL_63;
  v45 = v56 + 3;
  if (v56 + 3 >= v54)
    goto LABEL_64;
  v44 = *(_QWORD *)&__src[8 * v45];
  if (v44)
    goto LABEL_63;
  v45 = v56 + 4;
  if (v56 + 4 >= v54)
    goto LABEL_64;
  v44 = *(_QWORD *)&__src[8 * v45];
  if (v44)
    goto LABEL_63;
  v45 = v56 + 5;
  if (v56 + 5 >= v54)
    goto LABEL_64;
  v44 = *(_QWORD *)&__src[8 * v45];
  if (v44)
    goto LABEL_63;
  v45 = v56 + 6;
  if (v56 + 6 >= v54)
    goto LABEL_64;
  v44 = *(_QWORD *)&__src[8 * v45];
  if (v44)
    goto LABEL_63;
  v45 = v56 + 7;
  if (v56 + 7 >= v54)
    goto LABEL_64;
  v44 = *(_QWORD *)&__src[8 * v45];
  if (v44)
  {
LABEL_63:
    v33 = (v44 - 1) & v44;
    v56 = v45;
    v35 = __clz(__rbit64(v44)) + (v45 << 6);
    goto LABEL_40;
  }
  v46 = v56 + 8;
  if (v56 + 8 >= v54)
    goto LABEL_64;
  v44 = *(_QWORD *)&__src[8 * v46];
  if (v44)
  {
    v45 = v56 + 8;
    v36 = v65;
    v16 = v61;
    goto LABEL_63;
  }
  while (1)
  {
    v45 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    v36 = v65;
    v16 = v61;
    if (v45 >= v54)
      goto LABEL_64;
    v44 = *(_QWORD *)&__src[8 * v45];
    ++v46;
    if (v44)
      goto LABEL_63;
  }
LABEL_82:
  __break(1u);
LABEL_83:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(char *a1)
{
  uint64_t v1;

  return closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_BYTE *)(v1 + 33), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_181C88B3C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 160);
  if (v1 != 255)
    outlined consume of Result<stat, CocoaError>(*(id *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), v1 & 1);
  return swift_deallocObject();
}

void outlined consume of Result<stat, CocoaError>(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if ((a19 & 1) != 0)

}

double _ss6ResultOySo4statV10Foundation10CocoaErrorVGSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 144) = -1;
  return result;
}

uint64_t _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOg(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

unint64_t lazy protocol witness table accessor for type CocoaError and conformance CocoaError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CocoaError, &type metadata for CocoaError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CocoaError, &type metadata for CocoaError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CocoaError, &type metadata for CocoaError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CocoaError, &type metadata for CocoaError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CocoaError, &type metadata for CocoaError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CocoaError and conformance CocoaError;
  if (!lazy protocol witness table cache variable for type CocoaError and conformance CocoaError)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for CocoaError, &type metadata for CocoaError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError);
  }
  return result;
}

uint64_t sub_181C88C20()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)()
{
  uint64_t v0;

  return closure #3 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(*(const char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t objectdestroy_9Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t closure #2 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)partial apply()
{
  uint64_t v0;

  return closure #2 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)(*(_QWORD *)(v0 + 16), *(const char **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48), *(_BYTE *)(v0 + 49));
}

uint64_t _ss6ResultOySo4statV10Foundation10CocoaErrorVGSgWOg(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 144);
  if (v1 > 1)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t outlined retain of Result<stat, CocoaError>(uint64_t a1)
{
  outlined copy of Result<stat, CocoaError>(*(id *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_BYTE *)(a1 + 144));
  return a1;
}

id outlined copy of Result<stat, CocoaError>(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if ((a19 & 1) != 0)
    return result;
  return result;
}

void outlined consume of Result<stat, CocoaError>?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19)
{
  if (a19 != 255)
    outlined consume of Result<stat, CocoaError>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19 & 1);
}

uint64_t outlined release of Result<stat, CocoaError>?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 144);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v4);
  return a1;
}

id outlined copy of Result<stat, CocoaError>?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19)
{
  if (a19 != 255)
    return outlined copy of Result<stat, CocoaError>(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19 & 1);
  return result;
}

uint64_t _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi0_(uint64_t result)
{
  *(_BYTE *)(result + 144) = 1;
  return result;
}

uint64_t _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi_(uint64_t result)
{
  *(_BYTE *)(result + 144) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEBBD8], MEMORY[0x1E0DEBB98]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEBBE0], MEMORY[0x1E0DEBB98]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
  }
  return result;
}

uint64_t PredicateExpressions.NotEqual.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.NotEqual.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

void PredicateExpressions.NotEqual.init(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for PredicateExpressions.NotEqual();
}

uint64_t sub_181C88F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 60), v2, v1);
}

uint64_t PredicateExpressions.NotEqual.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v5 = a2[4];
  v6 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v22 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v21 - v12;
  v14 = *a1;
  v23 = v14;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v5 + 16))(&v23, v6, v5, v11);
  if (!v2)
  {
    v16 = v8;
    v23 = v14;
    v17 = v22;
    (*(void (**)(uint64_t *, _QWORD))(a2[5] + 16))(&v23, a2[3]);
    v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    v20 = *(void (**)(char *, uint64_t))(v16 + 8);
    v20(v17, AssociatedTypeWitness);
    v20(v13, AssociatedTypeWitness);
    v15 = v19 ^ 1;
  }
  return v15 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.NotEqual<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.NotEqual.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

void static PredicateExpressions.build_NotEqual<A, B>(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
  type metadata accessor for PredicateExpressions.NotEqual();
}

uint64_t sub_181C89178(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v3 + *(int *)(a1 + 60), v2, v1);
}

uint64_t PredicateExpressions.NotEqual.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(26);
  v0._countAndFlagsBits = 0x6C61757145746F4ELL;
  v0._object = (void *)0xEE00203A73686C28;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x203A736872202CLL;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.NotEqual<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.NotEqual<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[16];

  v13[5] = a5;
  v13[6] = a4;
  v13[9] = a3;
  v13[4] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13[7] = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v13[8] = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[10] = v8;
  v13[11] = v8;
  v13[12] = v9;
  v13[13] = v10;
  v13[14] = v11;
  v13[15] = v12;
  type metadata accessor for PredicateExpressions.NotEqual();
}

uint64_t sub_181C89448(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  *(_QWORD *)(v4 - 200) = v6;
  *(_QWORD *)(v4 - 192) = a1;
  *(_QWORD *)(v4 - 72) = v2;
  v10 = *(_QWORD *)(v4 - 152);
  v11 = v3;
  *(_QWORD *)(v4 - 184) = v8;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  v12 = *(_QWORD *)(v4 - 144);
  v13 = *(_QWORD *)(v4 - 128);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v4 - 184), v12, v13);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(_QWORD *)(v4 - 96));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v14 = *(_QWORD *)(v4 - 192);
  v15 = *(_QWORD *)(v4 - 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 176) + 32))(v15 + *(int *)(v14 + 60), v10, v11);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  v16 = *(_QWORD *)(v4 - 200);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v16 + 16))(*(_QWORD *)(v4 - 168), v15, v14);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.NotEqual<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.NotEqual<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.NotEqual<A, B>(_QWORD *a1)
{
  return PredicateExpressions.NotEqual<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.NotEqual(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181C897AC + 4 * byte_1820FEEF0[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.NotEqual(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays8DurationV10FoundationE16UnitsFormatStyleV4UnitVG_AL01_I0Os5NeverOTg504_ss8d3V10e3E16fgh35V13_getSkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  char *v4;
  char v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v9;
    v4 = (char *)(a1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_BYTE *)(result + v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(_QWORD *a1, uint64_t a2)
{
  _OWORD *v2;
  _OWORD *v3;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  void (*v19)(_OWORD *, _QWORD);
  __int128 v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE v30[48];
  _BYTE v31[48];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[48];
  _BYTE v37[112];
  _BYTE v38[48];
  _BYTE v39[48];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[20];

  v3 = v2;
  v6 = *(_OWORD **)a2;
  v7 = *(_OWORD *)(a2 + 24);
  v40 = *(_OWORD *)(a2 + 8);
  v41 = v7;
  v8 = *(_OWORD *)(a2 + 56);
  v42 = *(_OWORD *)(a2 + 40);
  v43 = v8;
  v9 = v6[1];
  v10 = v6[3];
  v44[17] = v6[2];
  v44[18] = v10;
  v44[16] = v9;
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v30);
  outlined release of Locale((uint64_t)v31);
  v11 = v6[2];
  v44[3] = v6[1];
  v44[4] = v11;
  v29 = v32;
  v44[5] = v6[3];
  v44[6] = v32;
  v27 = v34;
  v44[7] = v33;
  v44[8] = v34;
  v44[9] = v35;
  swift_unknownObjectRetain();
  outlined release of AttributedString.Runs(a2);
  v12 = v2[2];
  v44[13] = v2[1];
  v44[14] = v12;
  v44[15] = v2[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v36);
  v13 = BigSubstring.UnicodeScalarView.isIdentical(to:)();
  outlined release of Locale((uint64_t)v37);
  v14 = v27 >> 11;
  v15 = *a1 >> 11;
  v16 = a1[4] >> 11;
  if ((v13 & 1) != 0)
  {
    outlined retain of AttributedString.Runs(a2);
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v15, v16, (uint64_t)v6, v29 >> 11, v14);
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v15, v16, 0, 0);
LABEL_7:
    swift_unknownObjectRelease();
    return outlined release of AttributedString.Runs(a2);
  }
  outlined retain of AttributedString.Runs(a2);
  v25 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v15, v16);
  v26 = v17;
  v18 = v3[2];
  v44[10] = v3[1];
  v44[11] = v18;
  v44[12] = v3[3];
  BigString.utf8.getter();
  v28 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v38);
  swift_unknownObjectRetain();
  v19 = (void (*)(_OWORD *, _QWORD))BigString.unicodeScalars.modify();
  BigString.UnicodeScalarView.replaceSubrange(_:with:)();
  v19(v44, 0);
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v15, v16, (uint64_t)v6, v29 >> 11, v14);
  v20 = v3[2];
  v44[0] = v3[1];
  v44[1] = v20;
  v44[2] = v3[3];
  BigString.utf8.getter();
  v21 = BigString.UTF8View.count.getter();
  result = outlined release of Locale((uint64_t)v39);
  v23 = v21 - v28;
  if (__OFSUB__(v21, v28))
  {
    __break(1u);
    goto LABEL_9;
  }
  v24 = v26 + v23;
  if (__OFADD__(v26, v23))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = v25;
  if (v24 >= v25)
  {
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v25, v24, 1, 0);
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;

  v9 = result;
  v6 = a2 >> 14;
  if (a2 >> 14 < a3 >> 14)
  {
    v7 = a6 >> 14;
    if (a6 >> 14 >= result >> 14)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        Substring.UnicodeScalarView.formIndex(before:)();
        result = v9;
        if (v6 >= a3 >> 14)
          break;
        if (v7 >= v9 >> 14)
          return 0;
      }
    }
  }
  return result;
}

unint64_t specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, char a5, char a6, unint64_t a7, unint64_t a8, unint64_t a9, unint64_t a10)
{
  unint64_t v11;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v11 = a7;
  v16 = result;
  if ((a6 & 1) != 0)
  {
    v50 = a8;
    v52 = a2;
    v17 = a8;
    v38 = result >> 14;
    v47 = a2 >> 14;
    if (result >> 14 >= a2 >> 14)
    {
LABEL_15:
      v44 = a2;
      if ((a5 & 1) != 0)
        v19 = v17;
      else
        v19 = v11;
      goto LABEL_21;
    }
    v18 = a7 >> 14;
    if (a7 >> 14 < a8 >> 14)
    {
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        result = Substring.UnicodeScalarView.formIndex(before:)();
        v17 = v50;
        if (v38 >= v52 >> 14)
          break;
        if (v18 >= v50 >> 14)
          return 0;
      }
      v11 = a7;
      goto LABEL_15;
    }
    return 0;
  }
  if ((a5 & 1) != 0)
  {
    v44 = a2;
    v47 = a2 >> 14;
    v38 = result >> 14;
    v19 = a7;
  }
  else
  {
    v50 = a8;
    v52 = a2;
    v19 = a8;
    v38 = result >> 14;
    v47 = a2 >> 14;
    if (result >> 14 < a2 >> 14)
    {
      v20 = a7 >> 14;
      if (a7 >> 14 >= a8 >> 14)
        return 0;
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        result = Substring.UnicodeScalarView.formIndex(before:)();
        v19 = v50;
        if (v38 >= v52 >> 14)
          break;
        if (v20 >= v50 >> 14)
          return 0;
      }
      v11 = a7;
    }
    v44 = a2;
  }
  v17 = v11;
LABEL_21:
  v37 = v19 >> 14;
  v45 = a8 >> 14;
  v46 = v16;
  v21 = HIBYTE(a10) & 0xF;
  v22 = (a9 >> 59) & 1;
  if ((a10 & 0x1000000000000000) == 0)
    LOBYTE(v22) = 1;
  if ((a10 & 0x2000000000000000) == 0)
    v21 = a9 & 0xFFFFFFFFFFFFLL;
  v43 = v21;
  v49 = 4 << v22;
  v23 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v23) = 1;
  v48 = 4 << v23;
  if ((a4 & 0x2000000000000000) != 0)
    v24 = HIBYTE(a4) & 0xF;
  else
    v24 = a3 & 0xFFFFFFFFFFFFLL;
  v42 = v24;
  while (1)
  {
    v39 = v17 >> 14;
    v40 = v17;
    v25 = v38;
    if (v38 < v47)
    {
      v25 = v38;
      if (v39 < v45)
      {
        v26 = v46;
        v25 = v38;
        while (1)
        {
          _StringGuts.validateScalarIndex(_:in:)(v17, v11, a8, a9, a10);
          if ((a10 & 0x1000000000000000) != 0)
          {
            v27 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((a10 & 0x2000000000000000) != 0)
            {
              v50 = a9;
              v51 = a10 & 0xFFFFFFFFFFFFFFLL;
            }
            else if ((a9 & 0x1000000000000000) == 0)
            {
              _StringObject.sharedUTF8.getter();
            }
            v27 = _decodeScalar(_:startingAt:)();
          }
          v28 = v27;
          _StringGuts.validateScalarIndex(_:in:)(v26, v46, v44, a3, a4);
          if ((a4 & 0x1000000000000000) != 0)
          {
            result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            if (v28 != (_DWORD)result)
              goto LABEL_89;
          }
          else
          {
            if ((a4 & 0x2000000000000000) != 0)
            {
              v50 = a3;
              v51 = a4 & 0xFFFFFFFFFFFFFFLL;
            }
            else if ((a3 & 0x1000000000000000) == 0)
            {
              _StringObject.sharedUTF8.getter();
            }
            result = _decodeScalar(_:startingAt:)();
            v11 = a7;
            if (v28 != (_DWORD)result)
              goto LABEL_89;
          }
          if ((v17 & 0xC) != v49 && (v17 & 1) != 0)
            break;
          if ((v17 & 0xC) == v49)
          {
            result = _StringGuts._slowEnsureMatchingEncoding(_:)(v17, a9, a10);
            v17 = result;
          }
          if (v43 <= v17 >> 16)
            goto LABEL_94;
          if ((v17 & 1) != 0)
            goto LABEL_57;
          result = _StringGuts.scalarAlignSlow(_:)(v17, a9, a10);
          v17 = v17 & 0xC | result & 0xFFFFFFFFFFFFFFF3 | 1;
          if ((a10 & 0x1000000000000000) != 0)
          {
LABEL_67:
            result = String.UnicodeScalarView._foreignIndex(after:)();
            v17 = result;
            goto LABEL_68;
          }
LABEL_58:
          v29 = v17 >> 16;
          if ((a10 & 0x2000000000000000) != 0)
          {
            v50 = a9;
            v51 = a10 & 0xFFFFFFFFFFFFFFLL;
            v30 = *((unsigned __int8 *)&v50 + v29);
          }
          else
          {
            result = (a10 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((a9 & 0x1000000000000000) == 0)
              result = _StringObject.sharedUTF8.getter();
            v30 = *(unsigned __int8 *)(result + v29);
          }
          v31 = (char)v30;
          v32 = __clz(v30 ^ 0xFF) - 24;
          if (v31 >= 0)
            LOBYTE(v32) = 1;
          v17 = ((v29 + v32) << 16) | 5;
LABEL_68:
          if ((v26 & 0xC) != v48 && (v26 & 1) != 0)
          {
            if (v42 <= v26 >> 16)
              goto LABEL_95;
LABEL_76:
            if ((a4 & 0x1000000000000000) == 0)
              goto LABEL_77;
            goto LABEL_86;
          }
          if ((v26 & 0xC) == v48)
          {
            result = _StringGuts._slowEnsureMatchingEncoding(_:)(v26, a3, a4);
            v26 = result;
          }
          if (v42 <= v26 >> 16)
            goto LABEL_96;
          if ((v26 & 1) != 0)
            goto LABEL_76;
          result = _StringGuts.scalarAlignSlow(_:)(v26, a3, a4);
          v26 = v26 & 0xC | result & 0xFFFFFFFFFFFFFFF3 | 1;
          if ((a4 & 0x1000000000000000) == 0)
          {
LABEL_77:
            v33 = v26 >> 16;
            if ((a4 & 0x2000000000000000) != 0)
            {
              v50 = a3;
              v51 = a4 & 0xFFFFFFFFFFFFFFLL;
              v34 = *((unsigned __int8 *)&v50 + v33);
            }
            else
            {
              result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
              if ((a3 & 0x1000000000000000) == 0)
                result = _StringObject.sharedUTF8.getter();
              v34 = *(unsigned __int8 *)(result + v33);
            }
            v35 = (char)v34;
            v36 = __clz(v34 ^ 0xFF) - 24;
            if (v35 >= 0)
              LOBYTE(v36) = 1;
            v26 = ((v33 + v36) << 16) | 5;
            goto LABEL_87;
          }
LABEL_86:
          result = String.UnicodeScalarView._foreignIndex(after:)();
          v26 = result;
LABEL_87:
          v25 = v26 >> 14;
          if (v26 >> 14 >= v47 || v17 >> 14 >= v45)
            goto LABEL_89;
        }
        if (v43 <= v17 >> 16)
        {
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
          return result;
        }
LABEL_57:
        if ((a10 & 0x1000000000000000) != 0)
          goto LABEL_67;
        goto LABEL_58;
      }
    }
LABEL_89:
    if (v25 == v47)
      break;
    if (v39 == v37)
      return 0;
    result = Substring.UnicodeScalarView.index(_:offsetBy:)();
    v17 = result;
  }
  if (v39 > v17 >> 14)
    goto LABEL_97;
  return v40;
}

void static Duration.UnitsFormatStyle.Unit.seconds.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static Duration.UnitsFormatStyle.UnitWidth.wide.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
}

void static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x536E726574746170;
  else
    return 0x6874646977;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Duration.UnitsFormatStyle.UnitWidth.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.UnitsFormatStyle.UnitWidth.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  int v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.UnitWidth.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration><>.FormatStyle.UnitWidth);
    v14 = 0;
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Measurement<NSUnitDuration><>.FormatStyle.UnitWidth and conformance Measurement<A><>.FormatStyle.UnitWidth, &demangling cache variable for type metadata for Measurement<NSUnitDuration><>.FormatStyle.UnitWidth, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v15;
    v13 = 1;
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v9;
    *(_DWORD *)(a2 + 4) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth.CodingKeys, &unk_1E0F379E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth.CodingKeys, &unk_1E0F379E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth.CodingKeys, &unk_1E0F379E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth.CodingKeys, &unk_1E0F379E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys);
  }
  return result;
}

uint64_t Duration.UnitsFormatStyle.UnitWidth.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.UnitWidth.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v11 = *((_DWORD *)v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = v8;
  v13 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration><>.FormatStyle.UnitWidth);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Measurement<NSUnitDuration><>.FormatStyle.UnitWidth and conformance Measurement<A><>.FormatStyle.UnitWidth, &demangling cache variable for type metadata for Measurement<NSUnitDuration><>.FormatStyle.UnitWidth, (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void Duration.UnitsFormatStyle.UnitWidth.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt32 v1;

  v1 = *((_DWORD *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static Duration.UnitsFormatStyle.UnitWidth.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

Swift::Int Duration.UnitsFormatStyle.UnitWidth.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt32 v2;

  v1 = *v0;
  v2 = *((_DWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.UnitWidth@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.UnitsFormatStyle.UnitWidth.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.UnitWidth(_QWORD *a1)
{
  return Duration.UnitsFormatStyle.UnitWidth.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Duration.UnitsFormatStyle.UnitWidth()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt32 v2;

  v1 = *v0;
  v2 = *((_DWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Duration.UnitsFormatStyle.UnitWidth()
{
  unsigned __int8 *v0;
  Swift::UInt32 v1;

  v1 = *((_DWORD *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.UnitsFormatStyle.UnitWidth()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt32 v2;

  v1 = *v0;
  v2 = *((_DWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Duration.UnitsFormatStyle.UnitWidth(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.Unit._Unit()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.Unit._Unit()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit();
  return RawRepresentable<>.encode(to:)();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Duration.UnitsFormatStyle.Unit._Unit(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Duration.UnitsFormatStyle.Unit._Unit(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Duration.UnitsFormatStyle.Unit._Unit(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Duration.UnitsFormatStyle.Unit._Unit(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Duration.UnitsFormatStyle.Unit._Unit(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Duration.UnitsFormatStyle.Unit._Unit.allCases.getter;
}

void Duration.UnitsFormatStyle.Unit.icuSkeleton.getter()
{
  __asm { BR              X10 }
}

unint64_t sub_181C8ABD8()
{
  Swift::String v0;

  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = 7954788;
  v0._object = (void *)0xE300000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000016;
}

void static Duration.UnitsFormatStyle.Unit.weeks.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Duration.UnitsFormatStyle.Unit.days.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Duration.UnitsFormatStyle.Unit.microseconds.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static Duration.UnitsFormatStyle.Unit.nanoseconds.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

void Duration.UnitsFormatStyle.Unit.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Duration.UnitsFormatStyle.Unit.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  return 1953066613;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.Unit.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1953066613 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.UnitsFormatStyle.Unit.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.Unit.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v7;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit.CodingKeys, &unk_1E0F378D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit.CodingKeys, &unk_1E0F378D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit.CodingKeys, &unk_1E0F378D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit.CodingKeys, &unk_1E0F378D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit._Unit, &type metadata for Duration.UnitsFormatStyle.Unit._Unit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit._Unit, &type metadata for Duration.UnitsFormatStyle.Unit._Unit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit._Unit, &type metadata for Duration.UnitsFormatStyle.Unit._Unit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit._Unit, &type metadata for Duration.UnitsFormatStyle.Unit._Unit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit);
  }
  return result;
}

Swift::Int Duration.UnitsFormatStyle.Unit.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.Unit.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.Unit.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.Unit@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return Duration.UnitsFormatStyle.Unit.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.Unit(_QWORD *a1)
{
  return Duration.UnitsFormatStyle.Unit.encode(to:)(a1);
}

uint64_t static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.show(length:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  return 0x6874676E656CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys, &unk_1E0F37588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys, &unk_1E0F37588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys, &unk_1E0F37588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys, &unk_1E0F37588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys);
  }
  return result;
}

Swift::Int Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingRule.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0) + 24);
  v4 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingRule.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0) + 24);
  v4 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingRule.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0)
                            + 28));
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v6 = v2 + *(int *)(result + 28);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.init<A>(lengthLimits:roundingRule:roundingIncrement:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t result;

  v12 = RangeExpression.clampedLowerAndUpperBounds(_:)(0, 0x7FFFFFFFFFFFFFFFLL, a5);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  if ((v14 & 1) != 0)
    v19 = 0;
  else
    v19 = v12;
  if ((v18 & 1) != 0)
    v20 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v20 = v16;
  v21 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v22 = (char *)a6 + *(int *)(v21 + 28);
  *a6 = v19;
  a6[1] = v20;
  v23 = (char *)a6 + *(int *)(v21 + 24);
  v24 = type metadata accessor for FloatingPointRoundingRule();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, a2, v24);
  *(_QWORD *)v22 = a3;
  v22[8] = a4 & 1;
  return result;
}

uint64_t static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.show(length:rounded:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  char *v14;

  v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v11 = (char *)a5 + *(int *)(v10 + 24);
  v12 = type metadata accessor for FloatingPointRoundingRule();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v11, a2, v12);
  v14 = (char *)a5 + *(int *)(v10 + 28);
  *a5 = a1;
  a5[1] = a1;
  *(_QWORD *)v14 = a3;
  v14[8] = a4 & 1;
  return result;
}

uint64_t static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  char *v8;

  v4 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v5 = (char *)a2 + *(int *)(v4 + 24);
  v6 = type metadata accessor for FloatingPointRoundingRule();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5, a1, v6);
  v8 = (char *)a2 + *(int *)(v4 + 28);
  *a2 = 0;
  a2[1] = 0;
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  return result;
}

void Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hash(into:)()
{
  Swift::UInt *v0;
  uint64_t v1;
  char *v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  v1 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v2 = (char *)v0 + *(int *)(v1 + 28);
  if (v2[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v3 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = v3;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181C8BA6C + 4 * byte_1820FF058[*v0]))(0x4C6D756D696E696DLL, 0xED00006874676E65);
}

uint64_t sub_181C8BA6C()
{
  return 0x4C6D756D6978616DLL;
}

uint64_t sub_181C8BA80()
{
  return 0x676E69646E756F72;
}

unint64_t sub_181C8BAA0()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
    v8[13] = 2;
    type metadata accessor for FloatingPointRoundingRule();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0DED510], (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hashValue.getter()
{
  Swift::UInt *v0;
  uint64_t v1;
  char *v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  v1 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v2 = (char *)v0 + *(int *)(v1 + 28);
  if (v2[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v3 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = v3;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v30 = a2;
  v3 = type metadata accessor for FloatingPointRoundingRule();
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x1E0C80A78](v3);
  v31 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys>);
  v5 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = (uint64_t *)((char *)v10 + *(int *)(v11 + 28));
  *v12 = 0;
  *((_BYTE *)v12 + 8) = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys();
  v34 = v7;
  v13 = (uint64_t)v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v29 = v12;
  v36 = a1;
  v14 = v5;
  v15 = v31;
  v16 = v32;
  v17 = v33;
  v18 = v34;
  v40 = 0;
  *v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v39 = 1;
  v19 = KeyedDecodingContainer.decode(_:forKey:)();
  v28 = v10;
  v10[1] = v19;
  v38 = 2;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0DED510], (uint64_t)&protocol conformance descriptor for FloatingPointRoundingRule);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))((uint64_t)v28 + *(int *)(v8 + 24), v15, v17);
  v37 = 3;
  v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v35);
  v24 = v29;
  v23 = v30;
  *v29 = v20;
  *((_BYTE *)v24 + 8) = v22 & 1;
  v25 = (uint64_t)v28;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v28, v23, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return outlined destroy of ICUNumberFormatter.Signature(v25, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(_QWORD *a1)
{
  return Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2)
{
  Swift::UInt *v2;
  char *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;

  Hasher._combine(_:)(*v2);
  Hasher._combine(_:)(v2[1]);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v4 = (char *)v2 + *(int *)(a2 + 28);
  if (v4[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v5 = *(_QWORD *)v4;
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v6 = v5;
    else
      v6 = 0;
    Hasher._combine(_:)(v6);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2)
{
  Swift::UInt *v2;
  char *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v2);
  Hasher._combine(_:)(v2[1]);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v4 = (char *)v2 + *(int *)(a2 + 28);
  if (v4[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v5 = *(_QWORD *)v4;
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v6 = v5;
    else
      v6 = 0;
    Hasher._combine(_:)(v6);
  }
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;

  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 Duration.UnitsFormatStyle.locale.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.allowedUnits.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Duration.UnitsFormatStyle.allowedUnits.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.allowedUnits.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Duration.UnitsFormatStyle.unitWidth.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 28);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 24);
  *(_DWORD *)(a1 + 4) = v2;
}

uint64_t Duration.UnitsFormatStyle.unitWidth.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(result + 4);
  *(_BYTE *)(v1 + 24) = *(_BYTE *)result;
  *(_DWORD *)(v1 + 28) = v2;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.unitWidth.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.maximumUnitCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t Duration.UnitsFormatStyle.maximumUnitCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.maximumUnitCount.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Duration.UnitsFormatStyle.zeroValueUnitsDisplay.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 48);
}

_QWORD *Duration.UnitsFormatStyle.zeroValueUnitsDisplay.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = *result;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.zeroValueUnitsDisplay.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.fractionalPartDisplay.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Duration.UnitsFormatStyle(0);
  return outlined init with copy of ICUNumberFormatter.Signature(v1 + *(int *)(v3 + 36), a1, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t Duration.UnitsFormatStyle.fractionalPartDisplay.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Duration.UnitsFormatStyle(0);
  return outlined assign with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(a1, v1 + *(int *)(v3 + 36), type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t (*Duration.UnitsFormatStyle.fractionalPartDisplay.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Duration.UnitsFormatStyle(0);
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.valueLengthLimits.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle(0) + 40));
}

uint64_t Duration.UnitsFormatStyle.valueLengthLimits.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for Duration.UnitsFormatStyle(0);
  v8 = v3 + *(int *)(result + 40);
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a2;
  *(_BYTE *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.valueLengthLimits.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Duration.UnitsFormatStyle(0);
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.init<A>(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLengthLimits:fractionalPart:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;

  v15 = *a2;
  v16 = *((_DWORD *)a2 + 1);
  v17 = *a5;
  v18 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v19 = a9 + *(int *)(v18 + 40);
  *(_QWORD *)(a9 + 16) = a1;
  *(_BYTE *)(a9 + 24) = v15;
  *(_DWORD *)(a9 + 28) = v16;
  v20 = a6;
  v21 = a8;
  *(_QWORD *)(a9 + 32) = a3;
  *(_BYTE *)(a9 + 40) = a4 & 1;
  *(_QWORD *)(a9 + 48) = v17;
  outlined init with copy of ICUNumberFormatter.Signature(a7, a9 + *(int *)(v18 + 36), type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  v22 = RangeExpression.clampedLowerAndUpperBounds(_:)(0, 0x7FFFFFFFFFFFFFFFLL, a8);
  if ((v25 & 1) == 0)
  {
    if ((v24 & 1) != 0)
      v23 = 0x7FFFFFFFFFFFFFFFLL;
    if (v23 >= v22)
      goto LABEL_5;
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v24 & 1) == 0)
  {
    v22 = 0;
    if (v23 >= 0)
    {
LABEL_5:
      *(_QWORD *)v19 = v22;
      *(_QWORD *)(v19 + 8) = v23;
      *(_BYTE *)(v19 + 16) = 0;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
LABEL_9:
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_BYTE *)(v19 + 16) = 1;
LABEL_10:
  if (one-time initialization token for cache != -1)
    swift_once();
  v26 = static LocaleCache.cache + 16;
  v27 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v27);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v26, &v32);
  os_unfair_lock_unlock(v27);
  swift_release_n();
  v28 = v32;
  v29 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  outlined destroy of ICUNumberFormatter.Signature(a7, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  *(_QWORD *)a9 = v28;
  *(_QWORD *)(a9 + 8) = v29;
  return result;
}

uint64_t specialized Sequence.min(by:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  char v12;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = result + 56;
  v3 = *(_BYTE *)(result + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(result + 56);
  if (v6)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v6));
    v9 = (v6 - 1) & v6;
    v10 = (unint64_t)(v4 + 63) >> 6;
  }
  else
  {
    LODWORD(v7) = v3 & 0x3F;
    if (v7 <= 6)
      goto LABEL_50;
    v10 = (unint64_t)(v4 + 63) >> 6;
    v20 = *(_QWORD *)(result + 64);
    if (v20)
    {
      v7 = 1;
    }
    else
    {
      if (v7 < 8)
        goto LABEL_50;
      v20 = *(_QWORD *)(result + 72);
      if (v20)
      {
        v7 = 2;
      }
      else
      {
        v20 = *(_QWORD *)(result + 80);
        if (v20)
        {
          v7 = 3;
        }
        else
        {
LABEL_38:
          if (v7 < 9)
            goto LABEL_50;
          v20 = *(_QWORD *)(result + 88);
          if (v20)
          {
            v7 = 4;
          }
          else
          {
            v20 = *(_QWORD *)(result + 96);
            if (!v20)
              goto LABEL_44;
            v7 = 5;
          }
        }
      }
    }
LABEL_31:
    v9 = (v20 - 1) & v20;
    v8 = __clz(__rbit64(v20)) + (v7 << 6);
  }
  v11 = *(_QWORD *)(result + 48);
  v12 = *(_BYTE *)(v11 + v8);
  v13 = v12;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v7 << 6);
      goto LABEL_7;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v17 >= v10)
      goto LABEL_51;
    v18 = *(_QWORD *)(v2 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v10)
        goto LABEL_51;
      v18 = *(_QWORD *)(v2 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v10)
          goto LABEL_51;
        v18 = *(_QWORD *)(v2 + 8 * v7);
        if (!v18)
        {
          v7 = v17 + 3;
          if (v17 + 3 >= v10)
            goto LABEL_51;
          v18 = *(_QWORD *)(v2 + 8 * v7);
          if (!v18)
            break;
        }
      }
    }
LABEL_27:
    v9 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_7:
    v16 = *(unsigned __int8 *)(v11 + v15);
    if (v13 < v16)
      v12 = v16;
    if (v13 <= v16)
      v13 = v16;
  }
  v19 = v17 + 4;
  if (v19 >= v10)
    goto LABEL_51;
  v18 = *(_QWORD *)(v2 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v10)
      goto LABEL_51;
    v18 = *(_QWORD *)(v2 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
  __break(1u);
LABEL_44:
  v21 = 0;
  v22 = 6;
  if (v10 > 6)
    v22 = v10;
  v23 = v22 - 6;
  while (v23 != v21)
  {
    v20 = *(_QWORD *)(result + 104 + 8 * v21++);
    if (v20)
    {
      v7 = v21 + 5;
      goto LABEL_31;
    }
  }
LABEL_50:
  v12 = 8;
LABEL_51:
  *a2 = v12;
  return result;
}

uint64_t specialized getter of mostSignificantUnit #1 in Duration.UnitsFormatStyle._getSkeletons(_:)(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x16_t v9;
  uint8x16_t *v10;
  unint64_t v11;
  uint8x16_t v12;
  uint8x16_t v13;
  uint8x8_t v14;
  uint8x8_t *v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;

  v2 = *a1;
  if ((_DWORD)v2 == 9)
  {
    SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays8DurationV10FoundationE16UnitsFormatStyleV4UnitVG_AL01_I0Os5NeverOTg504_ss8d3V10e3E16fgh35V13_getSkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n(a2);
    v5 = *(_QWORD *)(SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                   + 16);
    if (v5)
    {
      v2 = *(unsigned __int8 *)(SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                              + 32);
      v6 = v5 - 1;
      if (v5 != 1)
      {
        if (v5 < 9)
        {
          v7 = 1;
          goto LABEL_18;
        }
        if (v5 >= 0x21)
        {
          v8 = v6 & 0xFFFFFFFFFFFFFFE0;
          v9 = (uint8x16_t)vdupq_n_s8(v2);
          v10 = (uint8x16_t *)(SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                             + 49);
          v11 = v6 & 0xFFFFFFFFFFFFFFE0;
          v12 = v9;
          do
          {
            v9 = vminq_u8(v10[-1], v9);
            v12 = vminq_u8(*v10, v12);
            v10 += 2;
            v11 -= 32;
          }
          while (v11);
          v13 = vminq_u8(v9, v12);
          v13.i8[0] = vminvq_u8(v13);
          v2 = v13.u32[0];
          if (v6 == v8)
            goto LABEL_23;
          if ((v6 & 0x18) == 0)
          {
            v7 = v8 | 1;
            goto LABEL_18;
          }
        }
        else
        {
          v8 = 0;
        }
        v7 = v6 & 0xFFFFFFFFFFFFFFF8 | 1;
        v14 = (uint8x8_t)vdup_n_s8(v2);
        v15 = (uint8x8_t *)(v8
                          + SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                          + 33);
        v16 = v8 - (v6 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v17 = *v15++;
          v14 = vmin_u8(v17, v14);
          v16 += 8;
        }
        while (v16);
        v14.i8[0] = vminv_u8(v14);
        v2 = v14.u32[0];
        if (v6 == (v6 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_23;
LABEL_18:
        v18 = v5 - v7;
        v19 = (unsigned __int8 *)(v7
                                + SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                                + 32);
        do
        {
          v21 = *v19++;
          v20 = v21;
          if (v21 >= v2)
            v2 = v2;
          else
            v2 = v20;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v2 = 8;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    *a1 = v2;
  }
  return v2;
}

uint64_t closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(uint64_t, uint64_t);
  unsigned int ListPattern;

  v4 = *(_QWORD *)(a4 + 8);
  ObjectType = swift_getObjectType();
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 64);
  swift_unknownObjectRetain();
  v6(ObjectType, v4);
  swift_unknownObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  ListPattern = uatmufmt_getListPattern();
  swift_release();
  return ListPattern;
}

uint64_t Duration.UnitsFormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ICUNumberFormatter.Signature(v1, a1, type metadata accessor for Duration.UnitsFormatStyle);
}

void Duration.UnitsFormatStyle.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  Swift::UInt8 v7;
  void (*v8)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  Swift::UInt32 v42;
  Swift::UInt v43;
  uint64_t v44;
  Swift::UInt *v45;
  uint64_t v46;
  char *v47;
  Swift::UInt64 v48;
  Swift::UInt64 v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  void *v53;
  _BYTE v54[144];
  _BYTE v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  _QWORD v73[18];
  _BYTE v74[144];
  _BYTE v75[152];

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v6(ObjectType, v4) & 1) != 0)
  {
    v7 = 1;
LABEL_5:
    Hasher._combine(_:)(v7);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v8 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v8(v73, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    v7 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55[0] == 2)
  {
    v9 = 0;
  }
  else
  {
    v9 = v55[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  v10 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    v15 = v55;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
    v15 = v54;
LABEL_20:
    outlined retain of LocalePreferences(v15);
    if (!v57)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v58)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v13 = v59;
    if (!v59)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v13);
    swift_bridgeObjectRelease();
    v14 = v60;
    if (!v60)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v13 = v59;
  if (v59)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v14 = v60;
  if (!v60)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v14);
  swift_bridgeObjectRelease();
LABEL_25:
  v16 = v61;
  v17 = v62;
  v19 = v63;
  v18 = v64;
  v20 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v21 = v17;
    v22 = v19;
    v23 = v18;
    v24 = v20;
    v25 = v16;
    _CFObject.hash(into:)();
    v53 = v16;
    if (v17)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v30 = v20;
    v31 = v17;
    v32 = v19;
    v33 = v18;
    v53 = 0;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v26 = v17;
      _CFObject.hash(into:)();

      if (v19)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v27 = v19;
    _CFObject.hash(into:)();

    if (v18)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v20)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v18)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v29 = 0;
LABEL_36:

  v34 = v66;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v34);
    swift_bridgeObjectRelease();
    v35 = v67;
    if (v67)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v68)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v35 = v67;
  if (!v67)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v35);
  swift_bridgeObjectRelease();
  if (!v68)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v71 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v71 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v72 == 2)
  {
    v39 = 0;
  }
  else
  {
    v40 = v72 & 1;
    Hasher._combine(_:)(1u);
    v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  v41 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  v42 = *(_DWORD *)(v2 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + 24));
  Hasher._combine(_:)(v42);
  if ((*(_BYTE *)(v2 + 40) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v43 = *(_QWORD *)(v2 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  Hasher._combine(_:)(*(_QWORD *)(v2 + 48));
  v44 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v45 = (Swift::UInt *)(v2 + *(int *)(v44 + 36));
  Hasher._combine(_:)(*v45);
  Hasher._combine(_:)(v45[1]);
  v46 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v47 = (char *)v45 + *(int *)(v46 + 28);
  if (v47[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v48 = *(_QWORD *)v47;
    Hasher._combine(_:)(1u);
    if ((v48 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v49 = v48;
    else
      v49 = 0;
    Hasher._combine(_:)(v49);
  }
  v50 = v2 + *(int *)(v44 + 40);
  if (*(_BYTE *)(v50 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v52 = *(_QWORD *)v50;
    v51 = *(_QWORD *)(v50 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
    Hasher._combine(_:)(v51);
  }
}

uint64_t Duration.UnitsFormatStyle.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181C8D3AC + 4 * byte_1820FF05C[a1]))(0x656C61636F6CLL, 0xE600000000000000);
}

uint64_t sub_181C8D3AC()
{
  return 0x556465776F6C6C61;
}

uint64_t sub_181C8D3CC()
{
  return 0x7464695774696E75;
}

unint64_t sub_181C8D3E8()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.CodingKeys()
{
  unsigned __int8 *v0;

  return Duration.UnitsFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Duration.UnitsFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.UnitsFormatStyle.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  __int128 *v11;
  char v12;
  __int128 v14;
  char v15;
  char v16;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = *v3;
  v16 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(_QWORD *)&v14 = *((_QWORD *)v3 + 2);
    v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Duration.UnitsFormatStyle.Unit>);
    lazy protocol witness table accessor for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x1E0DEB3B8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v9 = *((_DWORD *)v3 + 7);
    LOBYTE(v14) = *((_BYTE *)v3 + 24);
    DWORD1(v14) = v9;
    v16 = 2;
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(_QWORD *)&v14 = *((_QWORD *)v3 + 6);
    v16 = 4;
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10 = type metadata accessor for Duration.UnitsFormatStyle(0);
    LOBYTE(v14) = 5;
    type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11 = (__int128 *)((char *)v3 + *(int *)(v10 + 40));
    v12 = *((_BYTE *)v11 + 16);
    v14 = *v11;
    v15 = v12;
    v16 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEB880]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Duration.UnitsFormatStyle.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  Swift::UInt8 v5;
  void (*v6)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  uint64_t v39;
  Swift::UInt32 v40;
  Swift::UInt v41;
  uint64_t v42;
  Swift::UInt *v43;
  uint64_t v44;
  char *v45;
  Swift::UInt64 v46;
  Swift::UInt64 v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  _BYTE v52[144];
  _BYTE v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  _QWORD v71[18];
  _BYTE v72[144];
  _BYTE v73[144];
  _BYTE v74[80];

  v1 = v0;
  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if ((v4(ObjectType, v2) & 1) != 0)
  {
    v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v6 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v71, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v73) == 1)
  {
    v5 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v53, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v53[0] == 2)
  {
    v7 = 0;
  }
  else
  {
    v7 = v53[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  v8 = v54;
  if (!v54)
  {
    Hasher._combine(_:)(0);
    v13 = v53;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v52, &demangling cache variable for type metadata for LocalePreferences?);
    v13 = v52;
LABEL_20:
    outlined retain of LocalePreferences(v13);
    if (!v55)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v55)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v56)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v11 = v57;
    if (!v57)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v11);
    swift_bridgeObjectRelease();
    v12 = v58;
    if (!v58)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = v57;
  if (v57)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v12 = v58;
  if (!v58)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v12);
  swift_bridgeObjectRelease();
LABEL_25:
  v15 = v59;
  v14 = v60;
  v17 = v61;
  v16 = v62;
  v18 = v63;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v19 = v14;
    v20 = v17;
    v21 = v16;
    v22 = v18;
    v23 = v15;
    _CFObject.hash(into:)();
    if (v14)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v28 = v18;
    v29 = v14;
    v30 = v17;
    v31 = v16;
    if (v14)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v24 = v14;
      _CFObject.hash(into:)();

      if (v17)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v17)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v25 = v17;
    _CFObject.hash(into:)();

    if (v16)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v18)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v16)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v26 = v16;
  _CFObject.hash(into:)();

  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v27 = v18;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v27 = 0;
LABEL_36:

  v32 = v64;
  if (v32)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v32);
    swift_bridgeObjectRelease();
    v33 = v65;
    if (v65)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v66)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v33 = v65;
  if (!v65)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v33);
  swift_bridgeObjectRelease();
  if (!v66)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v34 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v35 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v69 == 2)
  {
    v36 = 0;
  }
  else
  {
    v36 = v69 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v36);
  if (v70 == 2)
  {
    v37 = 0;
  }
  else
  {
    v38 = v70 & 1;
    Hasher._combine(_:)(1u);
    v37 = v38;
  }
  Hasher._combine(_:)(v37);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  v39 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v74, v39);
  swift_bridgeObjectRelease();
  v40 = *(_DWORD *)(v1 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 24));
  Hasher._combine(_:)(v40);
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v41 = *(_QWORD *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  Hasher._combine(_:)(*(_QWORD *)(v1 + 48));
  v42 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v43 = (Swift::UInt *)(v1 + *(int *)(v42 + 36));
  Hasher._combine(_:)(*v43);
  Hasher._combine(_:)(v43[1]);
  v44 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v45 = (char *)v43 + *(int *)(v44 + 28);
  if (v45[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v46 = *(_QWORD *)v45;
    Hasher._combine(_:)(1u);
    if ((v46 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v47 = v46;
    else
      v47 = 0;
    Hasher._combine(_:)(v47);
  }
  v48 = v1 + *(int *)(v42 + 40);
  if (*(_BYTE *)(v48 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v50 = *(_QWORD *)v48;
    v49 = *(_QWORD *)(v48 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
    Hasher._combine(_:)(v49);
  }
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  __int128 v32;
  char v33;
  char v34;

  v27 = a2;
  v26 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1E0C80A78](v26);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.CodingKeys>);
  v5 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Duration.UnitsFormatStyle(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v10 + 4) = 0;
  v10[40] = 1;
  v12 = &v10[*(int *)(v11 + 40)];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v13 = a1[3];
  v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys();
  v28 = v7;
  v14 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  v31 = v4;
  v15 = v5;
  v16 = v27;
  v34 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  v17 = v28;
  v18 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v19 = (uint64_t)v10;
  v25 = v32;
  *(_OWORD *)v10 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Duration.UnitsFormatStyle.Unit>);
  v34 = 1;
  lazy protocol witness table accessor for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x1E0DEB3D8]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_QWORD *)v10 + 2) = v32;
  v34 = 2;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v20 = DWORD1(v32);
  v10[24] = v32;
  *((_DWORD *)v10 + 7) = v20;
  LOBYTE(v32) = 3;
  *((_QWORD *)v10 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v10[40] = v21 & 1;
  v34 = 4;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  MEMORY[0x30] = v32;
  LOBYTE(v32) = 5;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  v22 = (uint64_t)v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ICUNumberFormatter.Signature(v22, v19 + *(int *)(v8 + 36), type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  v34 = 6;
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEB8B0]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v18);
  v24 = v33;
  *(_OWORD *)v12 = v32;
  v12[16] = v24;
  outlined init with copy of ICUNumberFormatter.Signature(v19, v16, type metadata accessor for Duration.UnitsFormatStyle);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  return outlined destroy of ICUNumberFormatter.Signature(v19, type metadata accessor for Duration.UnitsFormatStyle);
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance Duration.UnitsFormatStyle@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __n128 v6;

  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)a2, type metadata accessor for Duration.UnitsFormatStyle);
  v6 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v6;
  *a2 = v6;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.UnitsFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle(_QWORD *a1)
{
  return Duration.UnitsFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  Swift::UInt8 v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  Swift::UInt32 v42;
  Swift::UInt v43;
  Swift::UInt *v44;
  uint64_t v45;
  char *v46;
  Swift::UInt64 v47;
  Swift::UInt64 v48;
  uint64_t v49;
  Swift::UInt v50;
  Swift::UInt v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  _QWORD v72[18];
  _BYTE v73[144];
  _BYTE v74[144];
  _BYTE v75[80];

  v4 = v2;
  Hasher.init(_seed:)();
  v5 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_57;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v9 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v72, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)&v54, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v54 == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = v54 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  v11 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
LABEL_18:
    outlined retain of LocalePreferences(&v54);
    if (!v56)
      goto LABEL_14;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    goto LABEL_18;
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v57)
      goto LABEL_15;
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 = v58;
    if (!v58)
      goto LABEL_16;
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v57)
    goto LABEL_20;
LABEL_15:
  Hasher._combine(_:)(0);
  v14 = v58;
  if (!v58)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v14);
  swift_bridgeObjectRelease();
LABEL_22:
  v15 = v59;
  v53 = a2;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v17 = v60;
  v16 = v61;
  v19 = v62;
  v18 = v63;
  v20 = v64;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v21 = v16;
    v22 = v19;
    v23 = v18;
    v24 = v20;
    v25 = v17;
    _CFObject.hash(into:)();
    if (v16)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v30 = v20;
    v31 = v16;
    v32 = v19;
    v33 = v18;
    if (v16)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v26 = v16;
      _CFObject.hash(into:)();

      if (v19)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v27 = v19;
    _CFObject.hash(into:)();

    if (v18)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v20)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v18)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v29 = 0;
LABEL_36:

  v34 = v65;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v34);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  a2 = v53;
  v35 = v66;
  if (!v66)
  {
    Hasher._combine(_:)(0);
    if (v67)
      goto LABEL_41;
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_44;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v35);
  swift_bridgeObjectRelease();
  if (!v67)
    goto LABEL_43;
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_44:
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v70 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v70 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v71 == 2)
  {
    v39 = 0;
  }
  else
  {
    v40 = v71 & 1;
    Hasher._combine(_:)(1u);
    v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_57:
  swift_unknownObjectRelease();
  v41 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v75, v41);
  swift_bridgeObjectRelease();
  v42 = *(_DWORD *)(v4 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v4 + 24));
  Hasher._combine(_:)(v42);
  if (*(_BYTE *)(v4 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v43 = *(_QWORD *)(v4 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  Hasher._combine(_:)(*(_QWORD *)(v4 + 48));
  v44 = (Swift::UInt *)(v4 + *(int *)(a2 + 36));
  Hasher._combine(_:)(*v44);
  Hasher._combine(_:)(v44[1]);
  v45 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v46 = (char *)v44 + *(int *)(v45 + 28);
  if (v46[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v47 = *(_QWORD *)v46;
    Hasher._combine(_:)(1u);
    if ((v47 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v48 = v47;
    else
      v48 = 0;
    Hasher._combine(_:)(v48);
  }
  v49 = v4 + *(int *)(a2 + 40);
  if (*(_BYTE *)(v49 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v51 = *(_QWORD *)v49;
    v50 = *(_QWORD *)(v49 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
    Hasher._combine(_:)(v50);
  }
  return Hasher._finalize()();
}

uint64_t static FormatStyle<>.units<A>(allowed:width:maximumUnitCount:zeroValueUnits:valueLengthLimits:fractionalPart:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  char v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[4];
  int v30;

  v26 = a8;
  v27 = a2;
  v13 = a3 & 1;
  v14 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_DWORD *)(a1 + 4);
  v22 = *a4;
  v29[0] = *(_BYTE *)a1;
  v30 = v21;
  v28 = v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16))(v20, a5, a7, v18);
  outlined init with copy of ICUNumberFormatter.Signature(a6, (uint64_t)v16, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  v24 = swift_bridgeObjectRetain();
  return Duration.UnitsFormatStyle.init<A>(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLengthLimits:fractionalPart:)(v24, v29, v27, v13, &v28, (uint64_t)v20, (uint64_t)v16, a7, v26);
}

uint64_t Duration.UnitsFormatStyle.Attributed.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93[3];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[9];
  __int128 v108;
  __int128 v109;
  __int128 v110;

  v3 = Duration.UnitsFormatStyle._getSkeletons(_:)(a1, a2);
  v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_AI16AttributedStringVs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j7VSdAC16mn53VIggnyr_SS8skeleton_AG011measurementF0Sd0J5ValuetAIs5O11OIegnrzr_TRSSAMSdARIggnyr_Tf1cn_nTf4ng_n(v3, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, _BYTE *, double))partial apply for closure #1 in Duration.UnitsFormatStyle.Attributed._formatFields(_:));
  v5 = swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v4 + 16);
  v83 = 0;
  v84 = 0;
  v76 = v4;
  if (v6 == 1)
    goto LABEL_27;
  if (v6 == 2)
  {
    MEMORY[0x1E0C80A78](v5);
    v7 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v8)
      v9 = v7;
    else
      v9 = 0x7D317B202C7D307BLL;
    if (v8)
      v10 = v8;
    else
      v10 = 0xE800000000000000;
    swift_bridgeObjectRelease();
    v83 = v9;
    v84 = v10;
    v96 = 8204667;
    v97 = 0xE300000000000000;
    *(_QWORD *)&v108 = 8204411;
    *((_QWORD *)&v108 + 1) = 0xE300000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    goto LABEL_27;
  }
  MEMORY[0x1E0C80A78](v5);
  v11 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
  if (v12)
    v13 = v11;
  else
    v13 = 0x7D317B202C7D307BLL;
  v14 = 0xE800000000000000;
  if (v12)
    v15 = v12;
  else
    v15 = 0xE800000000000000;
  MEMORY[0x1E0C80A78](v11);
  v16 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
  if (v17)
    v18 = v16;
  else
    v18 = 0x7D317B202C7D307BLL;
  if (v17)
    v14 = v17;
  result = swift_bridgeObjectRelease();
  v83 = v18;
  v84 = v14;
  v20 = v6 - 3;
  if (v6 < 3)
    goto LABEL_49;
  if (v6 == 3)
  {
LABEL_26:
    v21 = swift_bridgeObjectRelease();
    MEMORY[0x1E0C80A78](v21);
    _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    v96 = 8204667;
    v97 = 0xE300000000000000;
    *(_QWORD *)&v108 = 8204411;
    *((_QWORD *)&v108 + 1) = 0xE300000000000000;
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    v4 = v76;
LABEL_27:
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v93, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], &v83);
    v22 = (_OWORD *)v83;
    v23 = *(_QWORD *)(v4 + 16);
    if (!v23)
    {
LABEL_40:
      result = swift_bridgeObjectRelease();
      *a3 = v22;
      return result;
    }
    v77 = v4 + 24;
    while (1)
    {
      if (v23 > *(_QWORD *)(v4 + 16))
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      v28 = *(_OWORD **)(v77 + 8 * v23);
      v29 = v22[1];
      v30 = v22[3];
      v109 = v22[2];
      v110 = v30;
      v108 = v29;
      v31 = BigString.startIndex.getter();
      v33 = v32;
      v35 = v34;
      v37 = v36;
      v38 = BigString.endIndex.getter();
      v83 = (uint64_t)v22;
      v84 = v31;
      v85 = v33;
      v86 = v35;
      v87 = v37;
      v88 = v38;
      v89 = v39;
      v90 = v40;
      v91 = v41;
      v92 = 0;
      lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
      swift_retain_n();
      swift_retain();
      v42 = Substring.init<A>(_:)();
      v44 = v43;
      v46 = v45;
      v48 = v47;
      v83 = 8204411;
      v84 = 0xE300000000000000;
      v49 = Substring.init<A>(_:)();
      if ((v42 ^ v44) < 0x4000 || !((v49 ^ v50) >> 14))
        goto LABEL_46;
      v81 = v28;
      v82 = v23;
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v49, v50, v51, v52, 0, 0, 0, 0, 1, v42, v44, v46, v48);
      v54 = v53;
      swift_bridgeObjectRelease();
      if ((v54 & 1) != 0)
        break;
      v55 = v22;
      swift_bridgeObjectRetain();
      v56 = Substring.UTF8View.distance(from:to:)();
      swift_bridgeObjectRelease();
      v57 = Substring.UTF8View.distance(from:to:)();
      swift_bridgeObjectRelease();
      v59 = v22[1];
      v60 = v22[2];
      v58 = v22 + 1;
      v107[6] = v59;
      v107[7] = v60;
      v107[8] = v58[2];
      if (__OFADD__(v56, (unint64_t)BigString.startIndex.getter() >> 11))
        goto LABEL_42;
      BigString.utf8.getter();
      swift_retain();
      v61 = BigString.UTF8View.index(_:offsetBy:)();
      v78 = v62;
      v79 = v63;
      v80 = v64;
      outlined release of Locale((uint64_t)&v94);
      swift_release();
      v65 = v58[1];
      v107[3] = *v58;
      v107[4] = v65;
      v107[5] = v58[2];
      if (__OFADD__(v57, (unint64_t)BigString.startIndex.getter() >> 11))
        goto LABEL_43;
      BigString.utf8.getter();
      swift_retain();
      v66 = BigString.UTF8View.index(_:offsetBy:)();
      v68 = v67;
      v70 = v69;
      v72 = v71;
      outlined release of Locale((uint64_t)&v95);
      swift_release_n();
      if (v66 >> 10 < v61 >> 10)
        goto LABEL_44;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v22 = v55;
      }
      else
      {
        v24 = v58[1];
        v107[0] = *v58;
        v107[1] = v24;
        v107[2] = v58[2];
        v25 = v55[8];
        v26 = v55[9];
        v74 = v55[11];
        v75 = v55[10];
        type metadata accessor for AttributedString.Guts();
        swift_allocObject();
        outlined retain of Locale((uint64_t)v107);
        swift_unknownObjectRetain();
        v22 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v107, v25, v26, v75, v74);
        swift_release();
      }
      --v23;
      v27 = v22[2];
      v104 = v22[1];
      v105 = v27;
      v106 = v22[3];
      BigString.startIndex.getter();
      BigString.endIndex.getter();
      v96 = v61;
      v97 = v78;
      v98 = v80;
      v99 = v79;
      v100 = v66;
      v101 = v68;
      v102 = v70;
      v103 = v72;
      specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(&v96, v81);
      swift_release();
      v4 = v76;
      if (v82 == 1)
        goto LABEL_40;
    }
    swift_release();
    goto LABEL_48;
  }
  while (v20)
  {
    v96 = 8204667;
    v97 = 0xE300000000000000;
    *(_QWORD *)&v108 = v13;
    *((_QWORD *)&v108 + 1) = v15;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    if (!--v20)
      goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  swift_release();
  swift_bridgeObjectRelease();
LABEL_48:
  result = swift_bridgeObjectRelease();
  __break(1u);
LABEL_49:
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

uint64_t Duration.UnitsFormatStyle.Attributed.locale(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v12;

  v5 = type metadata accessor for Duration.UnitsFormatStyle(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (__int128 *)((char *)&v12 - v9);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v7, type metadata accessor for Duration.UnitsFormatStyle);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v7, (uint64_t)v10, type metadata accessor for Duration.UnitsFormatStyle);
  v12 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *v10 = v12;
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for Duration.UnitsFormatStyle);
  return outlined init with take of ICUNumberFormatter.Signature((uint64_t)v10, a2, type metadata accessor for Duration.UnitsFormatStyle);
}

uint64_t closure #1 in Duration.UnitsFormatStyle.Attributed._formatFields(_:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>, uint64_t a8@<D0>)
{
  char v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t *v69;
  os_unfair_lock_s *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t result;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t i;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141[3];
  __int128 v142[3];
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  ValueMetadata *v151;
  unint64_t v152;
  _BYTE v153[24];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _OWORD v171[6];
  __int128 v172;
  __int128 v173;
  __int128 v174;
  _OWORD v175[3];
  __int128 v176[3];
  _BYTE v177[48];

  v13 = *a3;
  v150 = *a4;
  swift_unknownObjectRetain();
  v14 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(a1, a2, (uint64_t)&v150);
  swift_unknownObjectRelease();
  if (!v14)
    goto LABEL_105;
  v15 = 0x705060403020100uLL >> (8 * v13);
  ICUNumberFormatterBase.attributedFormatPositions(_:)(a8, 0, 0x100000000);
  if (!v17)
  {
    v75 = Duration.UnitsFormatStyle._getSkeletons(_:)(a5, a6);
    MEMORY[0x1E0C80A78](v75);
    v77 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_SSs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j57VSdSSIggnyo_SS8skeleton_AG011measurementF0Sd0H5ValuetSSs5M11OIegnrzr_TRSSAMSdSSIggnyo_Tf1cn_nTf4ng_n(v76, (uint64_t (*)(uint64_t, uint64_t, _BYTE *, double))closure #1 in Duration.UnitsFormatStyle._formatFields(_:)partial apply);
    v78 = swift_bridgeObjectRelease();
    v79 = *(_QWORD *)(v77 + 16);
    v150 = 0uLL;
    v123 = v77;
    v125 = 0x705060403020100uLL >> (8 * v13);
    if (v79 == 2)
    {
      MEMORY[0x1E0C80A78](v78);
      v82 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
      if (v83)
        v84 = v82;
      else
        v84 = 0x7D317B202C7D307BLL;
      if (v83)
        v85 = v83;
      else
        v85 = 0xE800000000000000;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v150 = v84;
      *((_QWORD *)&v150 + 1) = v85;
      v135 = 8204667;
      *(_QWORD *)&v136 = 0xE300000000000000;
      v160 = 8204411;
      v161 = 0xE300000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
LABEL_71:
      if (*((_QWORD *)&v150 + 1))
      {
        v80 = *(_QWORD *)(v77 + 16);
        if (!v80)
          goto LABEL_102;
        goto LABEL_73;
      }
      goto LABEL_106;
    }
    if (v79 == 1)
    {
      *(_QWORD *)&v150 = 8204411;
      *((_QWORD *)&v150 + 1) = 0xE300000000000000;
      v80 = 1;
LABEL_73:
      v127 = v77 + 32;
      while (v80 <= *(_QWORD *)(v77 + 16))
      {
        v132 = v80 - 1;
        v99 = (uint64_t *)(v127 + 16 * (v80 - 1));
        v129 = *v99;
        v131 = v99[1];
        if ((*((_QWORD *)&v150 + 1) & 0x2000000000000000) != 0)
          v100 = HIBYTE(*((_QWORD *)&v150 + 1)) & 0xFLL;
        else
          v100 = v150 & 0xFFFFFFFFFFFFLL;
        v101 = 7;
        if (((*((_QWORD *)&v150 + 1) >> 60) & ((v150 & 0x800000000000000) == 0)) != 0)
          v101 = 11;
        v102 = v101 | (v100 << 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v103 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v102, 8204411, 0xE300000000000000);
        if ((v104 & 1) != 0)
          goto LABEL_98;
        v105 = v103;
        v106 = 4 * v100;
        while (1)
        {
          v15 = v105;
          for (i = 15; i < 0x30000; i = String.index(after:)())
          {
            if (v106 <= v15 >> 14)
              break;
            v109 = String.subscript.getter();
            v111 = v110;
            if (v109 == String.subscript.getter() && v111 == v112)
            {
              swift_bridgeObjectRelease_n();
            }
            else
            {
              v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v108 & 1) == 0)
                break;
            }
            v15 = String.index(after:)();
          }
          if ((i & 0xFFFFFFFFFFFFC000) == 0x30000)
            break;
          if (v105 < 0x4000)
            goto LABEL_98;
          v105 = String.index(_:offsetBy:)();
        }
        swift_bridgeObjectRelease();
        if (v15 >> 14 < v105 >> 14)
          goto LABEL_97;
        v135 = v129;
        *(_QWORD *)&v136 = v131;
        lazy protocol witness table accessor for type String and conformance String();
        String.replaceSubrange<A>(_:with:)();
        swift_bridgeObjectRelease();
        v77 = v123;
        LOBYTE(v15) = v125;
        v80 = v132;
        if (!v132)
        {
          swift_bridgeObjectRelease();
          goto LABEL_95;
        }
      }
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      swift_bridgeObjectRelease();
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      swift_bridgeObjectRelease();
LABEL_95:
      v135 = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)&v136 = MEMORY[0x1E0DEE9E8];
      v151 = &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
      v152 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
      LOBYTE(v150) = v15;
      *(_OWORD *)v153 = xmmword_18205FD60;
      v153[16] = 1;
      *(_QWORD *)&v154 = 0;
      specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v150, 0xD000000000000021, 0x8000000182309B80);
      v113 = v135;
      v114 = v136;
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(&v150, v113, v114, (uint64_t *)&v160);
      result = swift_release();
      *a7 = v160;
      return result;
    }
    MEMORY[0x1E0C80A78](v78);
    v86 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v87)
      v15 = v86;
    else
      v15 = 0x7D317B202C7D307BLL;
    v88 = 0xE800000000000000;
    if (v87)
      v89 = v87;
    else
      v89 = 0xE800000000000000;
    MEMORY[0x1E0C80A78](v86);
    v90 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v91)
      v92 = v90;
    else
      v92 = 0x7D317B202C7D307BLL;
    if (v91)
      v88 = v91;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v150 = v92;
    *((_QWORD *)&v150 + 1) = v88;
    v93 = v79 - 3;
    if (v79 >= 3)
    {
      if (v79 != 3)
      {
        while (v93)
        {
          v135 = 8204667;
          *(_QWORD *)&v136 = 0xE300000000000000;
          v160 = v15;
          v161 = v89;
          if (!*((_QWORD *)&v150 + 1))
            goto LABEL_104;
          lazy protocol witness table accessor for type String and conformance String();
          lazy protocol witness table accessor for type String and conformance String();
          RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
          if (!--v93)
            goto LABEL_65;
        }
        goto LABEL_100;
      }
LABEL_65:
      v94 = swift_bridgeObjectRelease();
      v135 = 8204667;
      *(_QWORD *)&v136 = 0xE300000000000000;
      MEMORY[0x1E0C80A78](v94);
      v95 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
      v97 = 0x7D317B202C7D307BLL;
      if (v96)
      {
        v97 = v95;
        v98 = v96;
      }
      else
      {
        v98 = 0xE800000000000000;
      }
      v160 = v97;
      v161 = v98;
      if (!*((_QWORD *)&v150 + 1))
        goto LABEL_107;
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
      swift_bridgeObjectRelease();
      v135 = 8204667;
      *(_QWORD *)&v136 = 0xE300000000000000;
      v160 = 8204411;
      v161 = 0xE300000000000000;
      v77 = v123;
      if (!*((_QWORD *)&v150 + 1))
        goto LABEL_108;
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
      LOBYTE(v15) = v125;
      goto LABEL_71;
    }
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v19 = v16;
  v20 = v17;
  v21 = v18;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v142, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], v141);
  specialized AttributedString.subscript.setter(v15);
  v15 = *(_QWORD *)(v21 + 16);
  if (v15)
  {
    v22 = v19;
    v23 = v141[0];
    lazy protocol witness table accessor for type String and conformance String();
    v24 = v21 + 48;
    v124 = v22;
    v120 = v20;
    while (1)
    {
      v133 = *(_DWORD *)(v24 - 16) == 11;
      v135 = v22;
      *(_QWORD *)&v136 = v20;
      swift_bridgeObjectRetain();
      v25 = String.Index.init<A>(utf16Offset:in:)();
      v135 = v22;
      *(_QWORD *)&v136 = v20;
      swift_bridgeObjectRetain();
      v26 = String.Index.init<A>(utf16Offset:in:)();
      if (v26 >> 14 < v25 >> 14)
        goto LABEL_99;
      v27 = v26;
      v28 = *(_OWORD *)(v23 + 32);
      v175[0] = *(_OWORD *)(v23 + 16);
      v175[1] = v28;
      v175[2] = *(_OWORD *)(v23 + 48);
      if ((v25 & 0xC) == 8)
      {
        BigString.utf16.getter();
        v29 = BigString.UTF16View.count.getter();
        swift_retain();
        outlined retain of Locale((uint64_t)v175);
        outlined release of Locale((uint64_t)&v143);
        if (v29 >= (uint64_t)(v25 >> 16))
        {
          BigString.utf16.getter();
          BigString.startIndex.getter();
          v30 = BigString.UTF16View.index(_:offsetBy:)();
          v32 = v31;
          v34 = v33;
          v36 = v35;
          outlined release of Locale((uint64_t)&v144);
          if ((unsigned __int16)v25 >> 14)
          {
            BigString.utf8.getter();
            v37 = BigString.UTF8View.index(_:offsetBy:)();
            v128 = v39;
            v130 = v38;
            v126 = v40;
            outlined release of Locale((uint64_t)&v145);
            outlined release of Locale((uint64_t)v175);
          }
          else
          {
            v126 = v34;
            v128 = v36;
            v130 = v32;
            outlined release of Locale((uint64_t)v175);
            v37 = v30;
          }
          v20 = v120;
LABEL_16:
          v45 = (_OWORD *)(v23 + 16);
          v46 = *(_OWORD *)(v23 + 32);
          v172 = *(_OWORD *)(v23 + 16);
          v173 = v46;
          v174 = *(_OWORD *)(v23 + 48);
          if ((v27 & 0xC) == 8)
          {
            BigString.utf16.getter();
            v47 = BigString.UTF16View.count.getter();
            v176[0] = v172;
            v176[1] = v173;
            v176[2] = v174;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v176, (uint64_t)v177);
            outlined retain of Locale((uint64_t)v177);
            outlined release of Locale((uint64_t)&v146);
            if (v47 < (uint64_t)(v27 >> 16))
            {
              outlined release of Locale((uint64_t)&v172);
LABEL_26:
              swift_release();
              v22 = v124;
              goto LABEL_6;
            }
            v119 = v37;
            v53 = (unsigned __int16)v27 >> 14;
            BigString.utf16.getter();
            BigString.startIndex.getter();
            v117 = BigString.UTF16View.index(_:offsetBy:)();
            v55 = v54;
            v57 = v56;
            v52 = v58;
            outlined release of Locale((uint64_t)&v147);
            if (v53)
            {
              BigString.utf8.getter();
              v48 = BigString.UTF8View.index(_:offsetBy:)();
              v121 = v60;
              v122 = v59;
              v52 = v61;
              outlined release of Locale((uint64_t)&v148);
            }
            else
            {
              v121 = v57;
              v122 = v55;
              v48 = v117;
            }
            outlined release of Locale((uint64_t)&v172);
            v37 = v119;
          }
          else
          {
            v48 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
            v121 = v50;
            v122 = v49;
            v52 = v51;
            if ((unint64_t)BigString.endIndex.getter() >> 10 < v48 >> 10)
              goto LABEL_26;
          }
          v62 = *(_OWORD *)(v23 + 32);
          v171[3] = *v45;
          v171[4] = v62;
          v171[5] = *(_OWORD *)(v23 + 48);
          if (v37 >> 10 >= (unint64_t)BigString.startIndex.getter() >> 10)
          {
            v63 = BigString.endIndex.getter();
            swift_release();
            if (v63 >> 10 < v48 >> 10)
            {
              v22 = v124;
              goto LABEL_6;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              v64 = *(_OWORD *)(v23 + 32);
              v171[0] = *v45;
              v171[1] = v64;
              v171[2] = *(_OWORD *)(v23 + 48);
              v65 = *(_QWORD *)(v23 + 64);
              v66 = *(_QWORD *)(v23 + 72);
              v118 = *(_QWORD *)(v23 + 80);
              v115 = *(_QWORD *)(v23 + 88);
              type metadata accessor for AttributedString.Guts();
              swift_allocObject();
              outlined retain of Locale((uint64_t)v171);
              swift_unknownObjectRetain();
              v67 = AttributedString.Guts.init(string:runs:)(v171, v65, v66, v118, v115);
              swift_release();
              v23 = v67;
            }
            v68 = *(_OWORD *)(v23 + 32);
            v168 = *(_OWORD *)(v23 + 16);
            v169 = v68;
            v170 = *(_OWORD *)(v23 + 48);
            BigString.startIndex.getter();
            BigString.endIndex.getter();
            v160 = v37;
            v161 = v130;
            v162 = v126;
            v163 = v128;
            v164 = v48;
            v165 = v122;
            v166 = v121;
            v167 = v52;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            swift_release();
            outlined release of Locale((uint64_t)&v149);
            outlined release of Locale((uint64_t)&v150);
            v136 = *(_OWORD *)&v153[8];
            v137 = v154;
            v138 = v155;
            v139 = v156;
            v135 = v23;
            if (one-time initialization token for currentIdentity != -1)
              swift_once();
            v69 = (uint64_t *)(static AttributedString.currentIdentity + 16);
            v70 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
            swift_retain();
            os_unfair_lock_lock(v70);
            closure #1 in static AttributedString._nextModifyIdentity.getter(v69, &v134);
            os_unfair_lock_unlock(v70);
            swift_release();
            v71 = v134;
            v140 = v134;
            BigString.init()();
            v134 = 0;
            MEMORY[0x186DA9E90](&v134, 8);
            v72 = v134;
            type metadata accessor for AttributedString.Guts();
            v73 = swift_allocObject();
            if ((BigString.isEmpty.getter() & 1) == 0)
              goto LABEL_101;
            v74 = v158;
            *(_OWORD *)(v73 + 16) = v157;
            *(_OWORD *)(v73 + 32) = v74;
            *(_OWORD *)(v73 + 48) = v159;
            *(_QWORD *)(v73 + 64) = 0;
            *(_QWORD *)(v73 + 72) = 0;
            *(_QWORD *)(v73 + 80) = 0;
            *(_QWORD *)(v73 + 88) = v72;
            swift_release();
            specialized AttributedSubstring.subscript.setter(v133);
            if (v140 != v71)
              goto LABEL_109;
            v23 = v135;
          }
          goto LABEL_26;
        }
        outlined release of Locale((uint64_t)v175);
        swift_release();
      }
      else
      {
        v37 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
        v128 = v42;
        v130 = v41;
        v44 = v43;
        if ((unint64_t)BigString.endIndex.getter() >> 10 >= v37 >> 10)
        {
          v126 = v44;
          swift_retain();
          goto LABEL_16;
        }
      }
LABEL_6:
      v24 += 24;
      if (!--v15)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v141[0];
LABEL_41:
  result = swift_release();
  *a7 = v23;
  return result;
}

void Duration.UnitsFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  Swift::UInt8 v7;
  void (*v8)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  Swift::UInt32 v42;
  Swift::UInt v43;
  uint64_t v44;
  Swift::UInt *v45;
  uint64_t v46;
  char *v47;
  Swift::UInt64 v48;
  Swift::UInt64 v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  void *v53;
  _BYTE v54[144];
  _BYTE v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  _QWORD v73[18];
  _BYTE v74[144];
  _BYTE v75[152];

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v6(ObjectType, v4) & 1) != 0)
  {
    v7 = 1;
LABEL_5:
    Hasher._combine(_:)(v7);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v8 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v8(v73, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    v7 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55[0] == 2)
  {
    v9 = 0;
  }
  else
  {
    v9 = v55[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  v10 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    v15 = v55;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
    v15 = v54;
LABEL_20:
    outlined retain of LocalePreferences(v15);
    if (!v57)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v58)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v13 = v59;
    if (!v59)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v13);
    swift_bridgeObjectRelease();
    v14 = v60;
    if (!v60)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v13 = v59;
  if (v59)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v14 = v60;
  if (!v60)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v14);
  swift_bridgeObjectRelease();
LABEL_25:
  v16 = v61;
  v17 = v62;
  v19 = v63;
  v18 = v64;
  v20 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v21 = v17;
    v22 = v19;
    v23 = v18;
    v24 = v20;
    v25 = v16;
    _CFObject.hash(into:)();
    v53 = v16;
    if (v17)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v30 = v20;
    v31 = v17;
    v32 = v19;
    v33 = v18;
    v53 = 0;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v26 = v17;
      _CFObject.hash(into:)();

      if (v19)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v27 = v19;
    _CFObject.hash(into:)();

    if (v18)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v20)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v18)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v29 = 0;
LABEL_36:

  v34 = v66;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v34);
    swift_bridgeObjectRelease();
    v35 = v67;
    if (v67)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v68)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v35 = v67;
  if (!v67)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v35);
  swift_bridgeObjectRelease();
  if (!v68)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v71 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v71 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v72 == 2)
  {
    v39 = 0;
  }
  else
  {
    v40 = v72 & 1;
    Hasher._combine(_:)(1u);
    v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  v41 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  v42 = *(_DWORD *)(v2 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + 24));
  Hasher._combine(_:)(v42);
  if (*(_BYTE *)(v2 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v43 = *(_QWORD *)(v2 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  Hasher._combine(_:)(*(_QWORD *)(v2 + 48));
  v44 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v45 = (Swift::UInt *)(v2 + *(int *)(v44 + 36));
  Hasher._combine(_:)(*v45);
  Hasher._combine(_:)(v45[1]);
  v46 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v47 = (char *)v45 + *(int *)(v46 + 28);
  if (v47[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v48 = *(_QWORD *)v47;
    Hasher._combine(_:)(1u);
    if ((v48 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v49 = v48;
    else
      v49 = 0;
    Hasher._combine(_:)(v49);
  }
  v50 = v2 + *(int *)(v44 + 40);
  if (*(_BYTE *)(v50 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v52 = *(_QWORD *)v50;
    v51 = *(_QWORD *)(v50 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
    Hasher._combine(_:)(v51);
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.Attributed.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.Attributed.CodingKeys()
{
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Duration.UnitsFormatStyle.Attributed.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.Attributed.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Duration.UnitsFormatStyle(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int Duration.UnitsFormatStyle.Attributed.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  Swift::UInt8 v5;
  void (*v6)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  uint64_t v39;
  Swift::UInt32 v40;
  Swift::UInt v41;
  uint64_t v42;
  Swift::UInt *v43;
  uint64_t v44;
  char *v45;
  Swift::UInt64 v46;
  Swift::UInt64 v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  _BYTE v52[144];
  _BYTE v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  _QWORD v71[18];
  _BYTE v72[144];
  _BYTE v73[144];
  _BYTE v74[80];

  v1 = v0;
  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if ((v4(ObjectType, v2) & 1) != 0)
  {
    v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v6 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v71, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v73) == 1)
  {
    v5 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v53, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v53[0] == 2)
  {
    v7 = 0;
  }
  else
  {
    v7 = v53[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  v8 = v54;
  if (!v54)
  {
    Hasher._combine(_:)(0);
    v13 = v53;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v52, &demangling cache variable for type metadata for LocalePreferences?);
    v13 = v52;
LABEL_20:
    outlined retain of LocalePreferences(v13);
    if (!v55)
      goto LABEL_14;
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v55)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v56)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v11 = v57;
    if (!v57)
      goto LABEL_16;
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v11);
    swift_bridgeObjectRelease();
    v12 = v58;
    if (!v58)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = v57;
  if (v57)
    goto LABEL_23;
LABEL_16:
  Hasher._combine(_:)(0);
  v12 = v58;
  if (!v58)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v12);
  swift_bridgeObjectRelease();
LABEL_25:
  v15 = v59;
  v14 = v60;
  v17 = v61;
  v16 = v62;
  v18 = v63;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v19 = v14;
    v20 = v17;
    v21 = v16;
    v22 = v18;
    v23 = v15;
    _CFObject.hash(into:)();
    if (v14)
      goto LABEL_27;
  }
  else
  {
    Hasher._combine(_:)(0);
    v28 = v18;
    v29 = v14;
    v30 = v17;
    v31 = v16;
    if (v14)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v24 = v14;
      _CFObject.hash(into:)();

      if (v17)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v17)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v25 = v17;
    _CFObject.hash(into:)();

    if (v16)
      goto LABEL_29;
LABEL_34:
    Hasher._combine(_:)(0);
    if (v18)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v16)
    goto LABEL_34;
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v26 = v16;
  _CFObject.hash(into:)();

  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v27 = v18;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  v27 = 0;
LABEL_36:

  v32 = v64;
  if (v32)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v32);
    swift_bridgeObjectRelease();
    v33 = v65;
    if (v65)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    if (v66)
      goto LABEL_39;
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v33 = v65;
  if (!v65)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v33);
  swift_bridgeObjectRelease();
  if (!v66)
    goto LABEL_42;
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v34 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v35 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v69 == 2)
  {
    v36 = 0;
  }
  else
  {
    v36 = v69 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v36);
  if (v70 == 2)
  {
    v37 = 0;
  }
  else
  {
    v38 = v70 & 1;
    Hasher._combine(_:)(1u);
    v37 = v38;
  }
  Hasher._combine(_:)(v37);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  v39 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v74, v39);
  swift_bridgeObjectRelease();
  v40 = *(_DWORD *)(v1 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 24));
  Hasher._combine(_:)(v40);
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v41 = *(_QWORD *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  Hasher._combine(_:)(*(_QWORD *)(v1 + 48));
  v42 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v43 = (Swift::UInt *)(v1 + *(int *)(v42 + 36));
  Hasher._combine(_:)(*v43);
  Hasher._combine(_:)(v43[1]);
  v44 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v45 = (char *)v43 + *(int *)(v44 + 28);
  if (v45[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v46 = *(_QWORD *)v45;
    Hasher._combine(_:)(1u);
    if ((v46 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v47 = v46;
    else
      v47 = 0;
    Hasher._combine(_:)(v47);
  }
  v48 = v1 + *(int *)(v42 + 40);
  if (*(_BYTE *)(v48 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v50 = *(_QWORD *)v48;
    v49 = *(_QWORD *)(v48 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
    Hasher._combine(_:)(v49);
  }
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.Attributed.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v4 = type metadata accessor for Duration.UnitsFormatStyle(0);
  MEMORY[0x1E0C80A78](v4);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.Attributed.CodingKeys>);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Duration.UnitsFormatStyle.Attributed(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of ICUNumberFormatter.Signature(v15, (uint64_t)v11, type metadata accessor for Duration.UnitsFormatStyle);
    outlined init with take of ICUNumberFormatter.Signature((uint64_t)v11, v13, type metadata accessor for Duration.UnitsFormatStyle.Attributed);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return Duration.UnitsFormatStyle.Attributed.format(_:)(*a1, a1[1], a2);
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v12;

  v5 = type metadata accessor for Duration.UnitsFormatStyle(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (__int128 *)((char *)&v12 - v9);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v7, type metadata accessor for Duration.UnitsFormatStyle);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v7, (uint64_t)v10, type metadata accessor for Duration.UnitsFormatStyle);
  v12 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *v10 = v12;
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for Duration.UnitsFormatStyle);
  return outlined init with take of ICUNumberFormatter.Signature((uint64_t)v10, a2, type metadata accessor for Duration.UnitsFormatStyle);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.UnitsFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.Attributed(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.Attributed.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Duration.UnitsFormatStyle(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.UnitsFormatStyle.Attributed()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  Swift::UInt8 v5;
  void (*v6)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt v33;
  Swift::UInt v34;
  Swift::UInt8 v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  uint64_t v38;
  Swift::UInt32 v39;
  Swift::UInt v40;
  uint64_t v41;
  Swift::UInt *v42;
  uint64_t v43;
  char *v44;
  Swift::UInt64 v45;
  Swift::UInt64 v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  _QWORD v69[18];
  _BYTE v70[144];
  _BYTE v71[144];
  _BYTE v72[80];

  v1 = v0;
  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if ((v4(ObjectType, v2) & 1) != 0)
  {
    v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_55;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v6 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v69, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v70, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)v71, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v71) == 1)
  {
    v5 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)&v51, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v51 == 2)
  {
    v7 = 0;
  }
  else
  {
    v7 = v51 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  v8 = v52;
  if (!v52)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v51);
    if (!v53)
      goto LABEL_14;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    goto LABEL_19;
  outlined retain of LocalePreferences?((uint64_t)v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v53)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v54)
      goto LABEL_15;
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    v11 = v55;
    if (!v55)
      goto LABEL_16;
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v72, v11);
    swift_bridgeObjectRelease();
    v12 = v56;
    if (!v56)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = v55;
  if (v55)
    goto LABEL_22;
LABEL_16:
  Hasher._combine(_:)(0);
  v12 = v56;
  if (!v56)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v72, v12);
  swift_bridgeObjectRelease();
LABEL_24:
  v14 = v57;
  v13 = v58;
  v16 = v59;
  v15 = v60;
  v17 = v61;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v18 = v13;
    v19 = v16;
    v20 = v15;
    v21 = v17;
    v22 = v14;
    _CFObject.hash(into:)();
    if (v13)
      goto LABEL_26;
  }
  else
  {
    Hasher._combine(_:)(0);
    v27 = v17;
    v28 = v13;
    v29 = v16;
    v30 = v15;
    if (v13)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v23 = v13;
      _CFObject.hash(into:)();

      if (v16)
        goto LABEL_27;
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v16)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v24 = v16;
    _CFObject.hash(into:)();

    if (v15)
      goto LABEL_28;
LABEL_33:
    Hasher._combine(_:)(0);
    if (v17)
      goto LABEL_29;
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v15)
    goto LABEL_33;
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v25 = v15;
  _CFObject.hash(into:)();

  if (v17)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v26 = v17;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  v26 = 0;
LABEL_35:

  v31 = v62;
  if (v31)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v72, v31);
    swift_bridgeObjectRelease();
    v32 = v63;
    if (v63)
      goto LABEL_37;
LABEL_40:
    Hasher._combine(_:)(0);
    if (v64)
      goto LABEL_38;
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  v32 = v63;
  if (!v63)
    goto LABEL_40;
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v72, v32);
  swift_bridgeObjectRelease();
  if (!v64)
    goto LABEL_41;
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v33 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v33);
  }
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v34 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }
  if (v67 == 2)
  {
    v35 = 0;
  }
  else
  {
    v35 = v67 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v35);
  if (v68 == 2)
  {
    v36 = 0;
  }
  else
  {
    v37 = v68 & 1;
    Hasher._combine(_:)(1u);
    v36 = v37;
  }
  Hasher._combine(_:)(v36);
  outlined retain of LocalePreferences?((uint64_t)v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  v38 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v72, v38);
  swift_bridgeObjectRelease();
  v39 = *(_DWORD *)(v1 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 24));
  Hasher._combine(_:)(v39);
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v40 = *(_QWORD *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  Hasher._combine(_:)(*(_QWORD *)(v1 + 48));
  v41 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v42 = (Swift::UInt *)(v1 + *(int *)(v41 + 36));
  Hasher._combine(_:)(*v42);
  Hasher._combine(_:)(v42[1]);
  v43 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v44 = (char *)v42 + *(int *)(v43 + 28);
  if (v44[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v45 = *(_QWORD *)v44;
    Hasher._combine(_:)(1u);
    if ((v45 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v46 = v45;
    else
      v46 = 0;
    Hasher._combine(_:)(v46);
  }
  v47 = v1 + *(int *)(v41 + 40);
  if (*(_BYTE *)(v47 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v49 = *(_QWORD *)v47;
    v48 = *(_QWORD *)(v47 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
    Hasher._combine(_:)(v48);
  }
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.Attributed.subscript.getter()
{
  return swift_getAtKeyPath();
}

uint64_t Duration.UnitsFormatStyle.Attributed.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEC880] + v3 + 8) - 8) + 8))(a1);
}

void (*Duration.UnitsFormatStyle.Attributed.subscript.modify(_QWORD *a1, _QWORD *a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x38uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a2 + 8);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  v5[6] = malloc(v8);
  swift_getAtKeyPath();
  return Measurement<>.AttributedStyle.subscript.modify;
}

uint64_t Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(uint64_t a1, uint64_t a2)
{
  return Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(a1, a2, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEE7A0]);
}

uint64_t Duration.UnitsFormatStyle.discreteInput(before:)(uint64_t a1, uint64_t a2)
{
  return Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(a1, a2, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEE7A0]);
}

uint64_t Duration.UnitsFormatStyle.Attributed.discreteInput(after:)(uint64_t a1, uint64_t a2)
{
  return Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(a1, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEE798]);
}

uint64_t Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v5 = Duration.UnitsFormatStyle.bound(for:countingDown:)(a1, a2, a3);
  v7 = v6;
  if ((v8 & 1) != 0)
  {
    v9 = Duration.init(secondsComponent:attosecondsComponent:)();
    return a4(v5, v7, v9, v10);
  }
  return v5;
}

uint64_t Duration.UnitsFormatStyle.discreteInput(after:)(uint64_t a1, uint64_t a2)
{
  return Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(a1, a2, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEE798]);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.UnitsFormatStyle.Attributed(a1, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEE7A0], a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.UnitsFormatStyle.Attributed(a1, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEE798], a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, int a2@<W3>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = Duration.UnitsFormatStyle.bound(for:countingDown:)(*a1, a1[1], a2);
  v7 = result;
  v9 = v8;
  if ((v10 & 1) != 0)
  {
    v11 = Duration.init(secondsComponent:attosecondsComponent:)();
    result = a3(v7, v9, v11, v12);
    v7 = result;
    v9 = v13;
  }
  *(_QWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = v9;
  *(_BYTE *)(a4 + 16) = 0;
  return result;
}

uint64_t Duration.UnitsFormatStyle.bound(for:countingDown:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD, _QWORD, _QWORD);
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD, _QWORD);
  void (*v26)(_QWORD, _QWORD, _QWORD);
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v7 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v3 + 16);
  v40 = a1;
  v14 = a1;
  v15 = (void (*)(_QWORD, _QWORD, _QWORD))a2;
  v16 = a3;
  v17 = Duration.UnitsFormatStyle.interval(for:countingDown:allowedUnits:)(v14, a2, a3, v13);
  v19 = v18;
  v21 = v20;
  v38 = v9;
  v39 = v7;
  if ((v20 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DED4D8], v41);
  }
  else
  {
    v22 = type metadata accessor for Duration.UnitsFormatStyle(0);
    outlined init with copy of ICUNumberFormatter.Signature(v3 + *(int *)(v22 + 36), (uint64_t)v9, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, &v9[*(int *)(v7 + 24)], v41);
  }
  v23 = v16 & 1;
  v24 = static Duration.bound(for:in:countingDown:roundingRule:)(v40, v15, v17, v19, v23, (uint64_t)v12);
  v26 = v25;
  v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27(v12, v41);
  if ((v21 & 1) != 0)
  {
    v28 = swift_bridgeObjectRetain();
    v29 = specialized _NativeSet.filter(_:)(v28);
    v30 = Duration.UnitsFormatStyle.interval(for:countingDown:allowedUnits:)(v24, (uint64_t)v26, v23, v29);
    v32 = v31;
    swift_release();
    v33 = v3 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle(0) + 36);
    v34 = (uint64_t)v38;
    outlined init with copy of ICUNumberFormatter.Signature(v33, (uint64_t)v38, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    v35 = v34 + *(int *)(v39 + 24);
    v24 = static Duration.bound(for:in:countingDown:roundingRule:)(v24, v26, v30, v32, v23, v35);
    v27((char *)v35, v41);
  }
  return v24;
}

uint64_t Duration.UnitsFormatStyle.interval(for:countingDown:allowedUnits:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  Swift::Int v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  _BYTE *v33;
  uint64_t v34;
  void (*v35)(_BYTE *);
  uint64_t v36;
  char v37;
  void (*v38)(uint64_t, uint64_t);
  _BYTE *v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  int v148;
  char v149;
  void (*v150)(uint64_t, uint64_t);
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  _BOOL4 v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  _BYTE *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  double v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  double v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char v262;
  _BYTE v263[12];
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  _BYTE *v274;
  int v275;
  uint64_t v276;
  int v277;
  _BYTE *v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  void (*v287)(uint64_t, uint64_t);
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _BYTE *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  _QWORD v307[2];

  v275 = a3;
  v7 = type metadata accessor for Duration.UnitsFormatStyle(0);
  MEMORY[0x1E0C80A78](v7);
  v278 = &v263[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9);
  v303 = &v263[-v10];
  v292 = type metadata accessor for FloatingPointRoundingRule();
  v276 = *(_QWORD *)(v292 - 8);
  MEMORY[0x1E0C80A78](v292);
  v274 = &v263[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12);
  v14 = &v263[-v13];
  v15 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1E0C80A78](v15);
  v300 = (uint64_t)&v263[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v17);
  v19 = &v263[-v18];
  swift_bridgeObjectRetain();
  v20 = specialized _ArrayProtocol.filter(_:)((Swift::Int)&outlined read-only object #0 of static Duration.UnitsFormatStyle.Unit._Unit.allCases.getter, a4);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v20 + 16);
  v293 = a2;
  v302 = a1;
  v289 = v15;
  v304 = v7;
  if (v21)
  {
    v307[0] = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    v22 = 0;
    v23 = v307[0];
    v24 = *(_QWORD *)(v307[0] + 16);
    do
    {
      v25 = *(_BYTE *)(v20 + v22 + 32);
      v307[0] = v23;
      v26 = *(_QWORD *)(v23 + 24);
      if (v24 + v22 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v24 + v22 + 1, 1);
        v23 = v307[0];
      }
      *(_QWORD *)(v23 + 16) = v24 + v22 + 1;
      *(_BYTE *)(v23 + v24 + v22++ + 32) = v25;
    }
    while (v21 != v22);
    v27 = v23;
    swift_bridgeObjectRelease();
    v28 = v27;
    a2 = v293;
    a1 = v302;
    v15 = v289;
    v7 = v304;
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
      goto LABEL_7;
LABEL_12:
    swift_bridgeObjectRelease();
    return -1000000000000000000;
  }
  swift_bridgeObjectRelease();
  v28 = MEMORY[0x1E0DEE9D8];
  v29 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v29)
    goto LABEL_12;
LABEL_7:
  v288 = v28;
  v294 = *(char *)(v29 + v28 + 31);
  v307[0] = a1;
  v307[1] = a2;
  v30 = v284;
  v31 = *(_QWORD *)(v284 + 32);
  v32 = *(_BYTE *)(v284 + 40) == 0;
  v286 = v29;
  if (!v32)
    v31 = v29;
  v301 = v31;
  v305 = v284 + *(int *)(v7 + 36);
  outlined init with copy of ICUNumberFormatter.Signature(v305, (uint64_t)v19, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  v33 = &v19[*(int *)(v15 + 24)];
  v34 = v276;
  v35 = *(void (**)(_BYTE *))(v276 + 104);
  v268 = *MEMORY[0x1E0DED4E8];
  v36 = v292;
  v35(v14);
  v37 = static FloatingPointRoundingRule.== infix(_:_:)();
  v38 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v38((uint64_t)v14, v36);
  v38((uint64_t)v33, v36);
  v39 = v303;
  outlined init with copy of ICUNumberFormatter.Signature(v30, (uint64_t)v303, type metadata accessor for Duration.UnitsFormatStyle);
  if ((v37 & 1) != 0)
  {
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v39, type metadata accessor for Duration.UnitsFormatStyle);
    v270 = *MEMORY[0x1E0DED4F0];
    v277 = 1;
    v40 = v289;
  }
  else
  {
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)&v39[*(int *)(v304 + 36)], (uint64_t)v19, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    v40 = v289;
    v42 = (uint64_t)v39;
    v43 = &v19[*(int *)(v289 + 24)];
    v270 = *MEMORY[0x1E0DED4F0];
    v35(v14);
    v277 = static FloatingPointRoundingRule.== infix(_:_:)();
    v38((uint64_t)v14, v36);
    outlined destroy of ICUNumberFormatter.Signature(v42, type metadata accessor for Duration.UnitsFormatStyle);
    v38((uint64_t)v43, v36);
  }
  v287 = v38;
  v44 = 0;
  v280 = 0;
  v282 = 0;
  v281 = 0;
  v45 = v294;
  v267 = *MEMORY[0x1E0DED500];
  v266 = *MEMORY[0x1E0DED508];
  v265 = *MEMORY[0x1E0DED4D8];
  v272 = 3 * (v294 - 5) + 3;
  v271 = v272 ^ 0x7FFFFFFFFFFFFFFFLL;
  v264 = *MEMORY[0x1E0DED4E0];
  v269 = (char)(v294 - 5);
  v279 = 1;
  v273 = (v294 - 5);
  result = v288;
  while (1)
  {
    v48 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
LABEL_207:
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
      __break(1u);
LABEL_218:
      __break(1u);
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
      goto LABEL_221;
    }
    if (v301 < 1)
      goto LABEL_194;
    v49 = (_BYTE *)*(char *)(result + v44 + 32);
    v298 = v44;
    v291 = v301 - 1;
    if (v49 < 5)
    {
      static Duration.interval(fractionalSecondsLength:)(0);
      v306 = qword_1820FFE48[(_QWORD)v49];
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v50 = static Duration.* infix<A>(_:_:)();
    }
    else
    {
      if (((_BYTE)v49 - 5) >= 3u)
        goto LABEL_216;
      v50 = static Duration.interval(fractionalSecondsLength:)(3 * ((_BYTE)v49 - 5) + 3);
    }
    v295 = v51;
    v296 = v50;
    result = *(_QWORD *)(v305 + 8);
    v52 = v305 + *(int *)(v40 + 28);
    v53 = *(_BYTE *)(v52 + 8);
    v297 = v48;
    v290 = v52;
    if (v45 < 5)
    {
      static Duration.interval(fractionalSecondsLength:)(result);
      v306 = qword_1820FFE48[v45];
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v55 = static Duration.* infix<A>(_:_:)();
      v57 = v58;
      if ((v53 & 1) != 0)
        goto LABEL_34;
      goto LABEL_32;
    }
    if (v273 >= 3)
      goto LABEL_215;
    v54 = v271;
    if (v271 >= result)
      v54 = result;
    result = v272 + v54;
    if (__OFADD__(v272, v54))
      goto LABEL_197;
    result = static Duration.interval(fractionalSecondsLength:)(result);
    v55 = result;
    v57 = v56;
    if ((v53 & 1) == 0)
    {
      if (v269 >= 3)
        goto LABEL_218;
LABEL_32:
      v59 = static Duration.* infix(_:_:)();
      v61 = v60;
      if ((static Duration.< infix(_:_:)() & 1) == 0)
      {
        v55 = v59;
        v57 = v61;
      }
    }
LABEL_34:
    outlined init with copy of ICUNumberFormatter.Signature(v305, v300, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    v62 = *(int *)(v40 + 24);
    static Duration.zero.getter();
    v63 = static Duration.< infix(_:_:)();
    v304 = v62;
    if ((v63 & 1) != 0)
    {
      v64 = static Duration.zero.getter();
      v55 = MEMORY[0x186DA6158](v64);
      v57 = v65;
    }
    static Duration.zero.getter();
    v66 = a1;
    v67 = a2;
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v68 = static Duration.zero.getter();
      v66 = MEMORY[0x186DA6158](v68);
      v67 = v69;
    }
    v303 = v49;
    v70 = Duration.components.getter();
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v71 = static Duration.zero.getter();
      MEMORY[0x186DA6158](v71);
    }
    result = Duration.components.getter();
    v73 = v72;
    if (!result)
    {
      v306 = v72;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v76 = static Duration./ infix<A>(_:_:)();
      v78 = v81;
      v306 = v73;
      v82 = static Duration.* infix<A>(_:_:)();
LABEL_49:
      v87 = v82;
      v88 = v83;
      v75 = v302;
      goto LABEL_58;
    }
    if (!v72)
    {
      v84 = result;
      if (v70 == 0x8000000000000000 && result == -1)
        goto LABEL_213;
      v85 = v70 / result;
      v76 = Duration.init(secondsComponent:attosecondsComponent:)();
      result = v84 * v85;
      if ((unsigned __int128)(v84 * (__int128)v85) >> 64 != (v84 * v85) >> 63)
        goto LABEL_199;
      v78 = v86;
      v82 = Duration.init(secondsComponent:attosecondsComponent:)();
      goto LABEL_49;
    }
    v74 = static Duration.< infix(_:_:)();
    v75 = v302;
    if ((v74 & 1) != 0)
    {
      v76 = static Duration.zero.getter();
      v78 = v77;
      v79 = static Duration.zero.getter();
    }
    else
    {
      result = static Duration./ infix(_:_:)();
      if ((~*(_QWORD *)&v89 & 0x7FF0000000000000) == 0)
        goto LABEL_200;
      if (v89 <= -1.0)
        goto LABEL_201;
      if (v89 >= 1.84467441e19)
        goto LABEL_202;
      v90 = (unint64_t)v89;
      v306 = (unint64_t)v89;
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      v91 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x186DA6158](v66, v67, v91, v92);
      result = static Duration./ infix(_:_:)();
      if ((~*(_QWORD *)&v93 & 0x7FF0000000000000) == 0)
        goto LABEL_203;
      if (v93 <= -9.22337204e18)
        goto LABEL_204;
      if (v93 >= 9.22337204e18)
        goto LABEL_205;
      v94 = (uint64_t)v93;
      v299 = (uint64_t)v93;
      Duration.init(secondsComponent:attosecondsComponent:)();
      v306 = v90;
      v95 = static Duration.* infix<A>(_:_:)();
      v97 = v96;
      Duration.init(secondsComponent:attosecondsComponent:)();
      v285 = v90;
      v306 = v94;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v75 = v302;
      v98 = static Duration.* infix<A>(_:_:)();
      v100 = MEMORY[0x186DA614C](v95, v97, v98, v99);
      v306 = v285;
      v78 = v101;
      v102 = static Duration.* infix<A>(_:_:)();
      v104 = v103;
      v306 = v299;
      a2 = v293;
      v105 = static Duration.* infix<A>(_:_:)();
      v107 = v106;
      v108 = v104;
      v76 = v100;
      v79 = MEMORY[0x186DA614C](v102, v108, v105, v107);
    }
    v87 = v79;
    v88 = v80;
LABEL_58:
    static Duration.zero.getter();
    v109 = static Duration.< infix(_:_:)() & 1;
    static Duration.zero.getter();
    if (v109 != (static Duration.< infix(_:_:)() & 1))
    {
      v110 = static Duration.zero.getter();
      v87 = MEMORY[0x186DA6158](v110);
      v88 = v111;
      v112 = static Duration.zero.getter();
      v76 = MEMORY[0x186DA6158](v112);
      v78 = v113;
    }
    static Duration.zero.getter();
    v114 = v87;
    v115 = v88;
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v116 = static Duration.zero.getter();
      v114 = MEMORY[0x186DA6158](v116);
      v115 = v117;
    }
    v299 = v78;
    static Duration.zero.getter();
    v118 = static Duration.< infix(_:_:)();
    v119 = v75;
    v120 = a2;
    if ((v118 & 1) != 0)
    {
      v121 = static Duration.zero.getter();
      v119 = MEMORY[0x186DA6158](v121);
      v120 = v122;
    }
    MEMORY[0x186DA6158](v114, v115, v119, v120);
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v123 = static Duration.zero.getter();
      MEMORY[0x186DA6158](v123);
    }
    v304 += v300;
    static Duration.zero.getter();
    if ((static Duration.== infix(_:_:)() & 1) != 0)
    {
      v306 = 2;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v124 = v299;
      static Duration./ infix<A>(_:_:)();
      v306 = 2;
      v125 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x186DA6158](v76, v124, v125, v126);
      static Duration.zero.getter();
      static Duration.== infix(_:_:)();
      v127 = a2;
      v287(v304, v292);
      goto LABEL_85;
    }
    static Duration.zero.getter();
    v128 = static Duration.< infix(_:_:)();
    v285 = v76;
    if ((v128 & 1) != 0)
    {
      v129 = static Duration.zero.getter();
      v55 = MEMORY[0x186DA6158](v129);
      v57 = v130;
    }
    v131 = MEMORY[0x186DA614C](v87, v88, v55, v57);
    v133 = v132;
    static Duration.zero.getter();
    v134 = v131;
    v135 = v133;
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v136 = static Duration.zero.getter();
      v134 = MEMORY[0x186DA6158](v136);
      v135 = v137;
    }
    static Duration.zero.getter();
    v138 = static Duration.< infix(_:_:)();
    v139 = v75;
    v140 = a2;
    if ((v138 & 1) != 0)
    {
      v141 = static Duration.zero.getter();
      v139 = MEMORY[0x186DA6158](v141);
      v140 = v142;
    }
    MEMORY[0x186DA6158](v134, v135, v139, v140);
    static Duration.zero.getter();
    v143 = static Duration.< infix(_:_:)();
    v283 = v133;
    if ((v143 & 1) != 0)
    {
      v144 = static Duration.zero.getter();
      MEMORY[0x186DA6158](v144);
    }
    v145 = v292;
    v146 = v276;
    v147 = v274;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v276 + 16))(v274, v304, v292);
    v148 = (*(uint64_t (**)(_BYTE *, uint64_t))(v146 + 88))(v147, v145);
    if (v148 == v270)
    {
      v149 = static Duration.< infix(_:_:)();
      if ((v149 & 1) != 0)
        v75 = v87;
      else
        v75 = v131;
      if ((v149 & 1) != 0)
        v127 = v88;
      else
        v127 = v283;
      v150 = v287;
      goto LABEL_84;
    }
    v150 = v287;
    if (v148 == v268)
    {
      v75 = v87;
      v127 = v88;
      if ((static Duration.< infix(_:_:)() & 1) == 0)
      {
        v167 = static Duration.== infix(_:_:)();
        v75 = v131;
        v127 = v283;
        if ((v167 & 1) != 0)
        {
          v306 = 2;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          v168 = v285;
          v169 = v299;
          static Duration./ infix<A>(_:_:)();
          v306 = 2;
          v170 = static Duration.* infix<A>(_:_:)();
          MEMORY[0x186DA6158](v168, v169, v170, v171);
          static Duration.zero.getter();
          v172 = static Duration.== infix(_:_:)();
          if ((v172 & 1) != 0)
            v75 = v87;
          else
            v75 = v131;
          if ((v172 & 1) != 0)
            v127 = v88;
          else
            v127 = v283;
        }
      }
      goto LABEL_84;
    }
    if (v148 == v267)
    {
      v176 = v283;
      v177 = static Duration.< infix(_:_:)();
      if ((v177 & 1) != 0)
        v75 = v87;
      else
        v75 = v131;
      if ((v177 & 1) != 0)
        v127 = v88;
      else
        v127 = v176;
      goto LABEL_84;
    }
    if (v148 == v266)
    {
      v261 = v283;
      v262 = static Duration.< infix(_:_:)();
      if ((v262 & 1) != 0)
        v75 = v131;
      else
        v75 = v87;
      if ((v262 & 1) != 0)
        v127 = v261;
      else
        v127 = v88;
      goto LABEL_84;
    }
    v75 = v87;
    v127 = v88;
    if (v148 != v265)
    {
      v75 = v131;
      v127 = v283;
      if (v148 != v264)
        break;
    }
LABEL_84:
    v306 = 2;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    v151 = v285;
    v152 = v299;
    static Duration./ infix<A>(_:_:)();
    v306 = 2;
    v153 = static Duration.* infix<A>(_:_:)();
    MEMORY[0x186DA6158](v151, v152, v153, v154);
    static Duration.zero.getter();
    static Duration.== infix(_:_:)();
    static Duration.== infix(_:_:)();
    a2 = v293;
    v150(v304, v292);
LABEL_85:
    v45 = v294;
    v155 = v303;
    if ((_DWORD)v303 == (_DWORD)v294)
      goto LABEL_90;
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v156 = static Duration.zero.getter();
      MEMORY[0x186DA6158](v156);
    }
    result = static Duration.< infix(_:_:)();
    if ((result & 1) != 0)
      goto LABEL_89;
    static Duration.zero.getter();
    if ((static Duration.< infix(_:_:)() & 1) != 0)
    {
      v173 = static Duration.zero.getter();
      MEMORY[0x186DA6158](v173);
    }
    if ((static Duration.== infix(_:_:)() & 1) != 0)
    {
      static Duration.zero.getter();
      result = static Duration.< infix(_:_:)();
      if (((result ^ v275) & 1) == 0)
      {
LABEL_89:
        if (v301 == 1)
        {
LABEL_90:
          result = *(_QWORD *)(v305 + 8);
          v157 = *(_BYTE *)(v290 + 8);
          if (v155 < 5)
          {
            static Duration.interval(fractionalSecondsLength:)(result);
            v306 = qword_1820FFE48[(_QWORD)v155];
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            v160 = static Duration.* infix<A>(_:_:)();
            v162 = v163;
            if ((v157 & 1) == 0)
              goto LABEL_99;
          }
          else
          {
            if (((_BYTE)v155 - 5) >= 3u)
              goto LABEL_217;
            v158 = 3 * ((_BYTE)v155 - 5) + 3;
            v159 = v158 ^ 0x7FFFFFFFFFFFFFFFLL;
            if ((v158 ^ 0x7FFFFFFFFFFFFFFFLL) >= result)
              v159 = *(_QWORD *)(v305 + 8);
            result = v158 + v159;
            if (__OFADD__(v158, v159))
              goto LABEL_198;
            result = static Duration.interval(fractionalSecondsLength:)(result);
            v160 = result;
            v162 = v161;
            if ((v157 & 1) == 0)
            {
              if (((_BYTE)v303 - 5) >= 3u)
                goto LABEL_219;
LABEL_99:
              v164 = static Duration.* infix(_:_:)();
              v166 = v165;
              if ((static Duration.< infix(_:_:)() & 1) == 0)
              {
                v160 = v164;
                v162 = v166;
              }
            }
          }
        }
        else
        {
          if (v155 < 5)
          {
            static Duration.interval(fractionalSecondsLength:)(0);
            v306 = qword_1820FFE48[(_QWORD)v155];
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            v174 = static Duration.* infix<A>(_:_:)();
          }
          else
          {
            if (((_BYTE)v155 - 5) >= 3u)
              goto LABEL_220;
            v174 = static Duration.interval(fractionalSecondsLength:)(3 * ((_BYTE)v155 - 5) + 3);
          }
          v160 = v174;
          v162 = v175;
        }
        if ((v277 & 1) != 0
          && (static Duration.zero.getter(), ((static Duration.< infix(_:_:)() ^ v275) & 1) == 0))
        {
          static Duration.zero.getter();
          if ((static Duration.< infix(_:_:)() & 1) != 0)
          {
            v178 = static Duration.zero.getter();
            MEMORY[0x186DA6158](v178);
          }
          v179 = (_DWORD)v303 != v45;
          v306 = 2;
          lazy protocol witness table accessor for type Int and conformance Int();
          v180 = static Duration./ infix<A>(_:_:)();
          MEMORY[0x186DA614C](v296, v295, v180, v181);
          v182 = v179 & ~static Duration.< infix(_:_:)();
          if (v301 != 1)
            v182 = 0;
          v280 = v182;
        }
        else
        {
          v280 = 0;
        }
        static Duration.zero.getter();
        v183 = (_BYTE *)v160;
        v184 = v162;
        if ((static Duration.< infix(_:_:)() & 1) != 0)
        {
          v185 = static Duration.zero.getter();
          v183 = (_BYTE *)MEMORY[0x186DA6158](v185);
          v184 = v186;
        }
        static Duration.zero.getter();
        v187 = v75;
        v188 = v127;
        if ((static Duration.< infix(_:_:)() & 1) != 0)
        {
          v189 = static Duration.zero.getter();
          v187 = MEMORY[0x186DA6158](v189);
          v188 = v190;
        }
        v281 = v162;
        v282 = v160;
        v191 = Duration.components.getter();
        static Duration.zero.getter();
        if ((static Duration.< infix(_:_:)() & 1) != 0)
        {
          v192 = static Duration.zero.getter();
          MEMORY[0x186DA6158](v192);
        }
        v304 = v184;
        result = Duration.components.getter();
        v194 = v193;
        if (result)
        {
          if (v193)
          {
            if ((static Duration.< infix(_:_:)() & 1) != 0)
            {
              v195 = static Duration.zero.getter();
              v197 = v196;
              v198 = static Duration.zero.getter();
              goto LABEL_150;
            }
            result = static Duration./ infix(_:_:)();
            if ((~*(_QWORD *)&v241 & 0x7FF0000000000000) == 0)
              goto LABEL_207;
            if (v241 <= -1.0)
              goto LABEL_208;
            if (v241 >= 1.84467441e19)
              goto LABEL_209;
            v303 = v183;
            v242 = (unint64_t)v241;
            v306 = (unint64_t)v241;
            lazy protocol witness table accessor for type UInt64 and conformance UInt64();
            v243 = static Duration.* infix<A>(_:_:)();
            MEMORY[0x186DA6158](v187, v188, v243, v244);
            result = static Duration./ infix(_:_:)();
            if ((~*(_QWORD *)&v245 & 0x7FF0000000000000) == 0)
              goto LABEL_210;
            if (v245 <= -9.22337204e18)
              goto LABEL_211;
            if (v245 >= 9.22337204e18)
              goto LABEL_212;
            v246 = (uint64_t)v245;
            v299 = (uint64_t)v245;
            Duration.init(secondsComponent:attosecondsComponent:)();
            v306 = v242;
            v296 = static Duration.* infix<A>(_:_:)();
            v248 = v247;
            Duration.init(secondsComponent:attosecondsComponent:)();
            v306 = v246;
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            v249 = static Duration.* infix<A>(_:_:)();
            v251 = MEMORY[0x186DA614C](v296, v248, v249, v250);
            v197 = v252;
            v306 = v242;
            v253 = static Duration.* infix<A>(_:_:)();
            v255 = v254;
            v306 = v299;
            v256 = static Duration.* infix<A>(_:_:)();
            v258 = v257;
            v259 = v255;
            v195 = v251;
            v204 = MEMORY[0x186DA614C](v253, v259, v256, v258);
            v205 = v260;
            v183 = v303;
LABEL_151:
            static Duration.zero.getter();
            v206 = static Duration.< infix(_:_:)() & 1;
            static Duration.zero.getter();
            if (v206 == (static Duration.< infix(_:_:)() & 1))
            {
              v210 = v195;
            }
            else
            {
              v207 = static Duration.zero.getter();
              v204 = MEMORY[0x186DA6158](v207);
              v205 = v208;
              v209 = static Duration.zero.getter();
              v210 = MEMORY[0x186DA6158](v209);
              v197 = v211;
            }
            static Duration.zero.getter();
            v212 = static Duration.< infix(_:_:)();
            v213 = v204;
            v214 = v205;
            v215 = v304;
            if ((v212 & 1) != 0)
            {
              v216 = static Duration.zero.getter();
              v213 = MEMORY[0x186DA6158](v216);
              v214 = v217;
            }
            static Duration.zero.getter();
            v218 = static Duration.< infix(_:_:)();
            v219 = v75;
            v220 = v127;
            if ((v218 & 1) != 0)
            {
              v221 = static Duration.zero.getter();
              v219 = MEMORY[0x186DA6158](v221);
              v220 = v222;
            }
            MEMORY[0x186DA6158](v213, v214, v219, v220);
            static Duration.zero.getter();
            if ((static Duration.< infix(_:_:)() & 1) != 0)
            {
              v223 = static Duration.zero.getter();
              MEMORY[0x186DA6158](v223);
            }
            static Duration.zero.getter();
            if ((static Duration.== infix(_:_:)() & 1) != 0)
            {
              v306 = 2;
              lazy protocol witness table accessor for type Int64 and conformance Int64();
              static Duration./ infix<A>(_:_:)();
              v306 = 2;
              v224 = static Duration.* infix<A>(_:_:)();
              MEMORY[0x186DA6158](v210, v197, v224, v225);
              static Duration.zero.getter();
              static Duration.== infix(_:_:)();
              v204 = v75;
              v205 = v127;
            }
            else
            {
              static Duration.zero.getter();
              if ((static Duration.< infix(_:_:)() & 1) != 0)
              {
                v226 = static Duration.zero.getter();
                v183 = (_BYTE *)MEMORY[0x186DA6158](v226);
                v215 = v227;
              }
              v228 = MEMORY[0x186DA614C](v204, v205, v183, v215);
              v230 = v229;
              static Duration.zero.getter();
              if ((static Duration.< infix(_:_:)() & 1) != 0)
              {
                v231 = static Duration.zero.getter();
                v228 = MEMORY[0x186DA6158](v231);
                v230 = v232;
              }
              static Duration.zero.getter();
              if ((static Duration.< infix(_:_:)() & 1) != 0)
              {
                v233 = static Duration.zero.getter();
                v75 = MEMORY[0x186DA6158](v233);
                v127 = v234;
              }
              MEMORY[0x186DA6158](v228, v230, v75, v127);
              static Duration.zero.getter();
              if ((static Duration.< infix(_:_:)() & 1) != 0)
              {
                v235 = static Duration.zero.getter();
                MEMORY[0x186DA6158](v235);
              }
              v306 = 2;
              lazy protocol witness table accessor for type Int64 and conformance Int64();
              static Duration./ infix<A>(_:_:)();
              v306 = 2;
              v236 = static Duration.* infix<A>(_:_:)();
              MEMORY[0x186DA6158](v210, v197, v236, v237);
              static Duration.zero.getter();
              static Duration.== infix(_:_:)();
              static Duration.== infix(_:_:)();
            }
            a1 = v302;
            v238 = (uint64_t)v278;
            v40 = v289;
            MEMORY[0x186DA6170](v307, v204, v205);
            static Duration.zero.getter();
            v239 = static Duration.== infix(_:_:)();
            outlined init with copy of ICUNumberFormatter.Signature(v284, v238, type metadata accessor for Duration.UnitsFormatStyle);
            a2 = v293;
            v45 = v294;
            if ((v239 & 1) != 0)
            {
              v240 = *(_QWORD *)(v238 + 48);
              outlined destroy of ICUNumberFormatter.Signature(v238, type metadata accessor for Duration.UnitsFormatStyle);
              v46 = v297;
              if (v240 < 1)
              {
                v279 = 0;
LABEL_176:
                result = v288;
                v47 = v298;
                goto LABEL_16;
              }
            }
            else
            {
              outlined destroy of ICUNumberFormatter.Signature(v238, type metadata accessor for Duration.UnitsFormatStyle);
              v46 = v297;
            }
            v279 = 0;
            v301 = v291;
            goto LABEL_176;
          }
          v201 = result;
          if (v191 == 0x8000000000000000 && result == -1)
            goto LABEL_214;
          v202 = v191 / result;
          v195 = Duration.init(secondsComponent:attosecondsComponent:)();
          result = v201 * v202;
          if ((unsigned __int128)(v201 * (__int128)v202) >> 64 != (v201 * v202) >> 63)
            goto LABEL_206;
          v197 = v203;
          v198 = Duration.init(secondsComponent:attosecondsComponent:)();
        }
        else
        {
          v306 = v193;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          v195 = static Duration./ infix<A>(_:_:)();
          v197 = v200;
          v306 = v194;
          v198 = static Duration.* infix<A>(_:_:)();
        }
LABEL_150:
        v204 = v198;
        v205 = v199;
        goto LABEL_151;
      }
    }
    a1 = v302;
    v40 = v289;
    result = v288;
    v46 = v297;
    v47 = v298;
LABEL_16:
    v44 = v47 + 1;
    if (v46 == v286)
      goto LABEL_194;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_194:
  result = swift_bridgeObjectRelease();
  if ((v279 & 1) == 0)
    return v282;
LABEL_221:
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *__dst)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  size_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t result;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;

  v22 = __src;
  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a3 - (_QWORD)a2;
  v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (_QWORD)a2))
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (__dst != a2 || a3 <= (unint64_t)__dst)
        memmove(__dst, a2, a3 - (_QWORD)a2);
      v14 = &v4[v9];
      v20 = &v4[v9];
      v22 = v6;
      if (v7 < v6 && (unsigned __int8 *)a3 != v6)
      {
        v15 = (unsigned __int8 *)(a3 - 1);
        while (1)
        {
          v16 = v15 + 1;
          v17 = v6 - 1;
          v18 = *(v6 - 1);
          if (*(v14 - 1) >= v18)
          {
            v20 = v14 - 1;
            if (v16 < v14 || v15 >= v14 || v16 != v14)
              *v15 = *(v14 - 1);
            --v14;
            if (v6 <= v7)
              goto LABEL_38;
          }
          else
          {
            if (v16 != v6 || v15 >= v6)
              *v15 = v18;
            v22 = --v6;
            if (v17 <= v7)
              goto LABEL_38;
          }
          --v15;
          if (v14 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst)
      memmove(__dst, __src, v8);
    v10 = &v4[v8];
    v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      do
      {
        v11 = *v6;
        v12 = *v4;
        if (v11 >= v12)
        {
          if (v7 != v4)
            *v7 = v12;
          v21 = ++v4;
          v13 = v6;
        }
        else
        {
          v13 = v6 + 1;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
            *v7 = v11;
        }
        ++v7;
        if (v4 >= v10)
          break;
        v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      v22 = v7;
    }
LABEL_38:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  char v7;
  double *v8;
  char v9;

  if (*a1 != *a2)
    return 0;
  if (a1[1] != a2[1])
    return 0;
  v4 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  if ((static FloatingPointRoundingRule.== infix(_:_:)() & 1) == 0)
    return 0;
  v5 = *(int *)(v4 + 28);
  v6 = (double *)((char *)a1 + v5);
  v7 = *((_BYTE *)a1 + v5 + 8);
  v8 = (double *)((char *)a2 + v5);
  v9 = *((_BYTE *)a2 + v5 + 8);
  if ((v7 & 1) != 0)
  {
    if ((v9 & 1) == 0)
      return 0;
  }
  else
  {
    if (*v6 != *v8)
      v9 = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys, &unk_1E0F37790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys, &unk_1E0F37790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys, &unk_1E0F37790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys, &unk_1E0F37790);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys);
  }
  return result;
}

BOOL specialized static Duration.UnitsFormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v4;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v4 = *a1;
  v13 = *a2;
  v14 = v4;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) == 0
    || (specialized static Set.== infix(_:_:)(*((_QWORD *)a1 + 2), *((_QWORD *)a2 + 2)) & 1) == 0)
  {
    return 0;
  }
  if (*((unsigned __int8 *)a1 + 24) != *((unsigned __int8 *)a2 + 24) || *((_DWORD *)a1 + 7) != *((_DWORD *)a2 + 7))
    return 0;
  v7 = *((_BYTE *)a2 + 40);
  if ((*((_BYTE *)a1 + 40) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 40))
      return 0;
  }
  else
  {
    if (*((_QWORD *)a1 + 4) != *((_QWORD *)a2 + 4))
      v7 = 1;
    if ((v7 & 1) != 0)
      return 0;
  }
  if (*((_QWORD *)a1 + 6) != *((_QWORD *)a2 + 6))
    return 0;
  v8 = type metadata accessor for Duration.UnitsFormatStyle(0);
  if ((specialized static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.== infix(_:_:)((__int128 *)((char *)a1 + *(int *)(v8 + 36)), (__int128 *)((char *)a2 + *(int *)(v8 + 36))) & 1) == 0)return 0;
  v9 = *(int *)(v8 + 40);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = *((_BYTE *)a1 + v9 + 16);
  v12 = (uint64_t)a2 + v9;
  if ((v11 & 1) == 0)
    return (*(_BYTE *)(v12 + 16) & 1) == 0 && *v10 == *(_QWORD *)v12 && v10[1] == *(_QWORD *)(v12 + 8);
  return (*(_BYTE *)(v12 + 16) & 1) != 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_AI16AttributedStringVs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j7VSdAC16mn53VIggnyr_SS8skeleton_AG011measurementF0Sd0J5ValuetAIs5O11OIegnrzr_TRSSAMSdARIggnyr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t, _BYTE *, double))
{
  int64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v14[8];
  double v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v17;
    v6 = (_QWORD *)(a1 + 56);
    do
    {
      v7 = *(v6 - 3);
      v8 = *(v6 - 2);
      v9 = *(double *)v6;
      v14[0] = *((_BYTE *)v6 - 8);
      v15 = v9;
      swift_bridgeObjectRetain();
      a2(&v16, v7, v8, v14, v9);
      swift_bridgeObjectRelease();
      v17 = v3;
      v11 = *(_QWORD *)(v3 + 16);
      v10 = *(_QWORD *)(v3 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v3 = v17;
      }
      v12 = v16;
      *(_QWORD *)(v3 + 16) = v11 + 1;
      *(_QWORD *)(v3 + 8 * v11 + 32) = v12;
      v6 += 4;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_SSs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j57VSdSSIggnyo_SS8skeleton_AG011measurementF0Sd0H5ValuetSSs5M11OIegnrzr_TRSSAMSdSSIggnyo_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _BYTE *, double))
{
  int64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE v17[8];
  double v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v19;
    v5 = (_QWORD *)(a1 + 56);
    do
    {
      v7 = *(v5 - 3);
      v6 = *(v5 - 2);
      v8 = *(double *)v5;
      v17[0] = *((_BYTE *)v5 - 8);
      v18 = v8;
      swift_bridgeObjectRetain();
      v9 = a2(v7, v6, v17, v8);
      v11 = v10;
      swift_bridgeObjectRelease();
      v19 = v3;
      v13 = *(_QWORD *)(v3 + 16);
      v12 = *(_QWORD *)(v3 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v3 = v19;
      }
      *(_QWORD *)(v3 + 16) = v13 + 1;
      v14 = v3 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v11;
      v5 += 4;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t partial apply for closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.CodingKeys, &unk_1E0F37700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.CodingKeys, &unk_1E0F37700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.CodingKeys, &unk_1E0F37700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.CodingKeys, &unk_1E0F37700);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth, &type metadata for Duration.UnitsFormatStyle.UnitWidth);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth, &type metadata for Duration.UnitsFormatStyle.UnitWidth);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.UnitWidth, &type metadata for Duration.UnitsFormatStyle.UnitWidth);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy, &type metadata for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy, &type metadata for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy, &type metadata for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<Duration.UnitsFormatStyle.Unit>);
    v8 = a2();
    result = MEMORY[0x186DA9D64](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v8 = a2;
    result = MEMORY[0x186DA9D64](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in Duration.UnitsFormatStyle.Attributed._formatFields(_:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>, uint64_t a5@<D0>)
{
  uint64_t v5;

  return closure #1 in Duration.UnitsFormatStyle.Attributed._formatFields(_:)(a1, a2, a3, *(__int128 **)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), a4, a5);
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed.CodingKeys, &unk_1E0F37640);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed.CodingKeys, &unk_1E0F37640);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed.CodingKeys, &unk_1E0F37640);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed.CodingKeys, &unk_1E0F37640);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.Attributed(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.UnitsFormatStyle.Attributed);
}

Swift::Int specialized _ArrayProtocol.filter(_:)(Swift::Int result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::Int v17;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    v5 = result + 32;
    v6 = a2 + 56;
    v7 = MEMORY[0x1E0DEE9D8];
    v17 = result + 32;
    while (1)
    {
      v8 = v4 <= v2 ? v2 : v4;
      while (1)
      {
        if (v4 == v8)
        {
          __break(1u);
          return result;
        }
        v9 = v4++;
        if (*(_QWORD *)(a2 + 16))
        {
          v10 = *(unsigned __int8 *)(v5 + v9);
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v10);
          result = Hasher._finalize()();
          v11 = -1 << *(_BYTE *)(a2 + 32);
          v12 = result & ~v11;
          if (((*(_QWORD *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
            break;
        }
LABEL_6:
        if (v4 == v2)
          return v7;
      }
      v13 = *(_QWORD *)(a2 + 48);
      if (*(unsigned __int8 *)(v13 + v12) != (_DWORD)v10)
        break;
LABEL_14:
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
      v16 = *(_QWORD *)(v7 + 16);
      v15 = *(_QWORD *)(v7 + 24);
      if (v16 >= v15 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      *(_QWORD *)(v7 + 16) = v16 + 1;
      *(_BYTE *)(v7 + v16 + 32) = v10;
      v5 = v17;
      if (v4 == v2)
        return v7;
    }
    v14 = ~v11;
    while (1)
    {
      v12 = (v12 + 1) & v14;
      if (((*(_QWORD *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_6;
      if (*(unsigned __int8 *)(v13 + v12) == (_DWORD)v10)
        goto LABEL_14;
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

{
  unint64_t v2;
  unint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = 0;
    v4 = result + 32;
    v5 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v6 = v3 <= v2 ? v2 : v3;
      while (1)
      {
        if (v3 == v6)
        {
          __break(1u);
          return result;
        }
        v7 = *(unsigned __int8 *)(v4 + v3++);
        v8 = v7 - 1;
        if ((v7 - 1) <= 0xA && ((0x63Fu >> v8) & 1) != 0)
        {
          v9 = *(_QWORD *)(a2 + 40);
          if (*(_QWORD *)(v9 + 16))
          {
            v10 = qword_182102C48[v8];
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v10);
            result = Hasher._finalize()();
            v11 = -1 << *(_BYTE *)(v9 + 32);
            v12 = result & ~v11;
            if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
              break;
          }
        }
LABEL_6:
        if (v3 == v2)
          return v5;
      }
      v13 = *(_QWORD *)(v9 + 48);
      if (v10 != *(unsigned __int8 *)(v13 + v12))
        break;
LABEL_16:
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1);
      v16 = *(_QWORD *)(v5 + 16);
      v15 = *(_QWORD *)(v5 + 24);
      if (v16 >= v15 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      *(_QWORD *)(v5 + 16) = v16 + 1;
      *(_BYTE *)(v5 + v16 + 32) = v7;
      if (v3 == v2)
        return v5;
    }
    v14 = ~v11;
    while (1)
    {
      v12 = (v12 + 1) & v14;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_6;
      if (v10 == *(unsigned __int8 *)(v13 + v12))
        goto LABEL_16;
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized Duration.UnitsFormatStyle.UnitWidth.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6874646977 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x536E726574746170 && a2 == 0xEC000000656C7974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4C6D756D696E696DLL && a2 == 0xED00006874676E65;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4C6D756D6978616DLL && a2 == 0xED00006874676E65
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E69646E756F72 && a2 == 0xEC000000656C7552
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000182306430)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized Duration.UnitsFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x556465776F6C6C61 && a2 == 0xEC0000007374696ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7464695774696E75 && a2 == 0xE900000000000068
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000018230A1C0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000018230A1E0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000018230A200
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000018230A220)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t base witness table accessor for Equatable in Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle.Attributed(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, type metadata accessor for Duration.UnitsFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, type metadata accessor for Duration.UnitsFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed);
  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, type metadata accessor for Duration.UnitsFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in Duration.UnitsFormatStyle.Attributed()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, type metadata accessor for Duration.UnitsFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed);
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle.Attributed(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, type metadata accessor for Duration.UnitsFormatStyle.Attributed, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Attributed);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_181C96990()
{
  return Duration.UnitsFormatStyle.Attributed.subscript.getter();
}

uint64_t sub_181C969B4(uint64_t a1)
{
  swift_retain();
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  return swift_release();
}

uint64_t sub_181C969F8()
{
  return 8;
}

_QWORD *sub_181C96A04(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Duration.UnitsFormatStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *(_QWORD *)a1 = v5;
    v3 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v8 = a2[1];
    v9 = a2[2];
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v8;
    v10 = a2[3];
    v11 = a2[4];
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    v12 = *(int *)(a3 + 36);
    v13 = a1 + v12;
    v14 = (uint64_t)a2 + v12;
    *(_OWORD *)(a1 + v12) = *(_OWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
    v16 = *(int *)(v15 + 24);
    v26 = v14 + v16;
    v27 = v13 + v16;
    v17 = type metadata accessor for FloatingPointRoundingRule();
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v18(v27, v26, v17);
    v19 = *(int *)(v15 + 28);
    v20 = v13 + v19;
    v21 = v14 + v19;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
    v22 = *(int *)(a3 + 40);
    v23 = v3 + v22;
    v24 = (uint64_t)a2 + v22;
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  }
  return v3;
}

uint64_t assignWithCopy for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v7 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(int *)(a3 + 36);
  v9 = (_QWORD *)(a1 + v8);
  v10 = a2 + v8;
  *v9 = *(_QWORD *)(a2 + v8);
  v9[1] = *(_QWORD *)(a2 + v8 + 8);
  v11 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v12 = *(int *)(v11 + 24);
  v13 = (char *)v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = *(int *)(v11 + 28);
  v17 = (char *)v9 + v16;
  v18 = (uint64_t *)(v10 + v16);
  v19 = *v18;
  v17[8] = *((_BYTE *)v18 + 8);
  *(_QWORD *)v17 = v19;
  v20 = *(int *)(a3 + 40);
  v21 = a1 + v20;
  v22 = a2 + v20;
  LOBYTE(v19) = *(_BYTE *)(v22 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_BYTE *)(v21 + 16) = v19;
  return a1;
}

uint64_t initializeWithTake for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v11 = *(int *)(v10 + 24);
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = *(int *)(v10 + 28);
  v16 = v8 + v15;
  v17 = v9 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = *(int *)(a3 + 40);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  return a1;
}

uint64_t assignWithTake for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v12 = *(int *)(v11 + 24);
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = *(int *)(v11 + 28);
  v17 = v9 + v16;
  v18 = v10 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = *(int *)(a3 + 40);
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C96E70(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_181C96EF8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle.UnitWidth(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[8])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.UnitWidth(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 28);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
  }
  return v4;
}

uint64_t destroy for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *initializeWithCopy for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  return a1;
}

_QWORD *assignWithCopy for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v13;
  return a1;
}

_OWORD *initializeWithTake for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  return a1;
}

_OWORD *assignWithTake for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C97314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C97360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t initializeBufferWithCopyOfBuffer for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    *(_QWORD *)a1 = v6;
    a1 = v6 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = v4;
    v8 = a2[1];
    v9 = a2[2];
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v8;
    v10 = a2[3];
    v11 = a2[4];
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    v12 = *(int *)(v4 + 36);
    v13 = a1 + v12;
    v14 = (uint64_t)a2 + v12;
    *(_OWORD *)(a1 + v12) = *(_OWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
    v16 = *(int *)(v15 + 24);
    v26 = v14 + v16;
    v27 = v13 + v16;
    v17 = type metadata accessor for FloatingPointRoundingRule();
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v18(v27, v26, v17);
    v19 = *(int *)(v15 + 28);
    v20 = v13 + v19;
    v21 = v14 + v19;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
    v22 = *(int *)(v7 + 40);
    v23 = a1 + v22;
    v24 = (uint64_t)a2 + v22;
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  }
  return a1;
}

uint64_t destroy for Duration.UnitsFormatStyle.Attributed(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle(0) + 36);
  v3 = v2 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0) + 24);
  v4 = type metadata accessor for FloatingPointRoundingRule();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t initializeWithCopy for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v21 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v5 = *(int *)(v21 + 36);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_OWORD *)(a1 + v5) = *(_OWORD *)(a2 + v5);
  v8 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v9 = *(int *)(v8 + 24);
  v10 = v6 + v9;
  v11 = v7 + v9;
  v12 = type metadata accessor for FloatingPointRoundingRule();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  v14 = *(int *)(v8 + 28);
  v15 = v6 + v14;
  v16 = v7 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = *(int *)(v21 + 40);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
  return a1;
}

uint64_t assignWithCopy for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v7 = *(int *)(v6 + 36);
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = *(_QWORD *)(a2 + v7 + 8);
  v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v11 = *(int *)(v10 + 24);
  v12 = (char *)v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = *(int *)(v10 + 28);
  v16 = (char *)v8 + v15;
  v17 = (uint64_t *)(v9 + v15);
  v18 = *v17;
  v16[8] = *((_BYTE *)v17 + 8);
  *(_QWORD *)v16 = v18;
  v19 = *(int *)(v6 + 40);
  v20 = a1 + v19;
  v21 = a2 + v19;
  LOBYTE(v18) = *(_BYTE *)(v21 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_BYTE *)(v20 + 16) = v18;
  return a1;
}

uint64_t initializeWithTake for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v6 = *(int *)(v5 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  v9 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v10 = *(int *)(v9 + 24);
  v11 = v7 + v10;
  v12 = v8 + v10;
  v13 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = *(int *)(v9 + 28);
  v15 = v7 + v14;
  v16 = v8 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = *(int *)(v5 + 40);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
  return a1;
}

uint64_t assignWithTake for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v7 = *(int *)(v6 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v11 = *(int *)(v10 + 24);
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = *(int *)(v10 + 28);
  v16 = v8 + v15;
  v17 = v9 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = *(int *)(v6 + 40);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle.Attributed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C979AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Duration.UnitsFormatStyle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.Attributed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C979F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Duration.UnitsFormatStyle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for Duration.UnitsFormatStyle.Attributed()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Duration.UnitsFormatStyle(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.Attributed.CodingKeys()
{
  return &unk_1E0F37640;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_181C97B8C + 4 * byte_1820FF068[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_181C97BC0 + 4 * byte_1820FF063[v4]))();
}

uint64_t sub_181C97BC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C97BC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C97BD0);
  return result;
}

uint64_t sub_181C97BDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C97BE4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_181C97BE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C97BF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.CodingKeys()
{
  return &unk_1E0F37700;
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181C97C58 + 4 * byte_1820FF072[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181C97C8C + 4 * byte_1820FF06D[v4]))();
}

uint64_t sub_181C97C8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C97C94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C97C9CLL);
  return result;
}

uint64_t sub_181C97CA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C97CB0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181C97CB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C97CBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  return &unk_1E0F37790;
}

void *type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  return &unk_1E0F37588;
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.Unit(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_181C97D34 + 4 * byte_1820FF07C[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_181C97D68 + 4 * byte_1820FF077[v4]))();
}

uint64_t sub_181C97D68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C97D70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C97D78);
  return result;
}

uint64_t sub_181C97D84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C97D8CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_181C97D90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C97D98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Duration.UnitsFormatStyle.Unit._Unit()
{
  return &type metadata for Duration.UnitsFormatStyle.Unit._Unit;
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.Attributed.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181C97DF4 + 4 * byte_1820FF081[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181C97E14 + 4 * byte_1820FF086[v4]))();
}

_BYTE *sub_181C97DF4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181C97E14(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181C97E1C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181C97E24(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181C97E2C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181C97E34(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  return &unk_1E0F378D8;
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.UnitWidth.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181C97E9C + 4 * byte_1820FF090[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C97ED0 + 4 * byte_1820FF08B[v4]))();
}

uint64_t sub_181C97ED0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C97ED8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181C97EE0);
  return result;
}

uint64_t sub_181C97EEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181C97EF4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181C97EF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C97F00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  return &unk_1E0F379E8;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Duration.UnitsFormatStyle.Unit._Unit()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Duration.UnitsFormatStyle.Unit._Unit] and conformance [A], &demangling cache variable for type metadata for [Duration.UnitsFormatStyle.Unit._Unit], MEMORY[0x1E0DEAF50]);
}

id POSIXError._nsError.getter()
{
  id *v0;

  return *v0;
}

void __swiftcall POSIXError.init(_nsError:)(Foundation::POSIXError *__return_ptr retstr, NSError *_nsError)
{
  NSString *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v4 = -[NSError domain](_nsError, sel_domain);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain")) && v7 == v8)
    goto LABEL_7;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_bridgeObjectRelease_n();
  }
  retstr->_nsError.super.isa = (Class)_nsError;
}

id static POSIXError.errorDomain.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
}

uint64_t POSIXError.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

id protocol witness for static CustomNSError.errorDomain.getter in conformance POSIXError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
}

uint64_t static POSIXError.EPERM.getter()
{
  return 1;
}

uint64_t static POSIXError.ENOENT.getter()
{
  return 2;
}

uint64_t static POSIXError.ESRCH.getter()
{
  return 3;
}

uint64_t static POSIXError.EINTR.getter()
{
  return 4;
}

uint64_t static POSIXError.EIO.getter()
{
  return 5;
}

uint64_t static POSIXError.ENXIO.getter()
{
  return 6;
}

uint64_t static POSIXError.E2BIG.getter()
{
  return 7;
}

uint64_t static POSIXError.ENOEXEC.getter()
{
  return 8;
}

uint64_t static POSIXError.EBADF.getter()
{
  return 9;
}

uint64_t static POSIXError.ECHILD.getter()
{
  return 10;
}

uint64_t static POSIXError.EDEADLK.getter()
{
  return 11;
}

uint64_t static POSIXError.ENOMEM.getter()
{
  return 12;
}

uint64_t static POSIXError.EACCES.getter()
{
  return 13;
}

uint64_t static POSIXError.EFAULT.getter()
{
  return 14;
}

uint64_t static POSIXError.ENOTBLK.getter()
{
  return 15;
}

uint64_t static POSIXError.EBUSY.getter()
{
  return 16;
}

uint64_t static POSIXError.EEXIST.getter()
{
  return 17;
}

uint64_t static POSIXError.EXDEV.getter()
{
  return 18;
}

uint64_t static POSIXError.ENODEV.getter()
{
  return 19;
}

uint64_t static POSIXError.ENOTDIR.getter()
{
  return 20;
}

uint64_t static POSIXError.EISDIR.getter()
{
  return 21;
}

uint64_t static POSIXError.EINVAL.getter()
{
  return 22;
}

uint64_t static POSIXError.ENFILE.getter()
{
  return 23;
}

uint64_t static POSIXError.EMFILE.getter()
{
  return 24;
}

uint64_t static POSIXError.ENOTTY.getter()
{
  return 25;
}

uint64_t static POSIXError.ETXTBSY.getter()
{
  return 26;
}

uint64_t static POSIXError.EFBIG.getter()
{
  return 27;
}

uint64_t static POSIXError.ENOSPC.getter()
{
  return 28;
}

uint64_t static POSIXError.ESPIPE.getter()
{
  return 29;
}

uint64_t static POSIXError.EROFS.getter()
{
  return 30;
}

uint64_t static POSIXError.EMLINK.getter()
{
  return 31;
}

uint64_t static POSIXError.EPIPE.getter()
{
  return 32;
}

uint64_t static POSIXError.EDOM.getter()
{
  return 33;
}

uint64_t static POSIXError.ERANGE.getter()
{
  return 34;
}

uint64_t static POSIXError.EAGAIN.getter()
{
  return 35;
}

uint64_t static POSIXError.EINPROGRESS.getter()
{
  return 36;
}

uint64_t static POSIXError.EALREADY.getter()
{
  return 37;
}

uint64_t static POSIXError.ENOTSOCK.getter()
{
  return 38;
}

uint64_t static POSIXError.EDESTADDRREQ.getter()
{
  return 39;
}

uint64_t static POSIXError.EMSGSIZE.getter()
{
  return 40;
}

uint64_t static POSIXError.EPROTOTYPE.getter()
{
  return 41;
}

uint64_t static POSIXError.ENOPROTOOPT.getter()
{
  return 42;
}

uint64_t static POSIXError.EPROTONOSUPPORT.getter()
{
  return 43;
}

uint64_t static POSIXError.ESOCKTNOSUPPORT.getter()
{
  return 44;
}

uint64_t static POSIXError.ENOTSUP.getter()
{
  return 45;
}

uint64_t static POSIXError.EPFNOSUPPORT.getter()
{
  return 46;
}

uint64_t static POSIXError.EAFNOSUPPORT.getter()
{
  return 47;
}

uint64_t static POSIXError.EADDRINUSE.getter()
{
  return 48;
}

uint64_t static POSIXError.EADDRNOTAVAIL.getter()
{
  return 49;
}

uint64_t static POSIXError.ENETDOWN.getter()
{
  return 50;
}

uint64_t static POSIXError.ENETUNREACH.getter()
{
  return 51;
}

uint64_t static POSIXError.ENETRESET.getter()
{
  return 52;
}

uint64_t static POSIXError.ECONNABORTED.getter()
{
  return 53;
}

uint64_t static POSIXError.ECONNRESET.getter()
{
  return 54;
}

uint64_t static POSIXError.ENOBUFS.getter()
{
  return 55;
}

uint64_t static POSIXError.EISCONN.getter()
{
  return 56;
}

uint64_t static POSIXError.ENOTCONN.getter()
{
  return 57;
}

uint64_t static POSIXError.ESHUTDOWN.getter()
{
  return 58;
}

uint64_t static POSIXError.ETOOMANYREFS.getter()
{
  return 59;
}

uint64_t static POSIXError.ETIMEDOUT.getter()
{
  return 60;
}

uint64_t static POSIXError.ECONNREFUSED.getter()
{
  return 61;
}

uint64_t static POSIXError.ELOOP.getter()
{
  return 62;
}

uint64_t static POSIXError.ENAMETOOLONG.getter()
{
  return 63;
}

uint64_t static POSIXError.EHOSTDOWN.getter()
{
  return 64;
}

uint64_t static POSIXError.EHOSTUNREACH.getter()
{
  return 65;
}

uint64_t static POSIXError.ENOTEMPTY.getter()
{
  return 66;
}

uint64_t static POSIXError.EPROCLIM.getter()
{
  return 67;
}

uint64_t static POSIXError.EUSERS.getter()
{
  return 68;
}

uint64_t static POSIXError.EDQUOT.getter()
{
  return 69;
}

uint64_t static POSIXError.ESTALE.getter()
{
  return 70;
}

uint64_t static POSIXError.EREMOTE.getter()
{
  return 71;
}

uint64_t static POSIXError.EBADRPC.getter()
{
  return 72;
}

uint64_t static POSIXError.ERPCMISMATCH.getter()
{
  return 73;
}

uint64_t static POSIXError.EPROGUNAVAIL.getter()
{
  return 74;
}

uint64_t static POSIXError.EPROGMISMATCH.getter()
{
  return 75;
}

uint64_t static POSIXError.EPROCUNAVAIL.getter()
{
  return 76;
}

uint64_t static POSIXError.ENOLCK.getter()
{
  return 77;
}

uint64_t static POSIXError.ENOSYS.getter()
{
  return 78;
}

uint64_t static POSIXError.EFTYPE.getter()
{
  return 79;
}

uint64_t static POSIXError.EAUTH.getter()
{
  return 80;
}

uint64_t static POSIXError.ENEEDAUTH.getter()
{
  return 81;
}

uint64_t static POSIXError.EPWROFF.getter()
{
  return 82;
}

uint64_t static POSIXError.EDEVERR.getter()
{
  return 83;
}

uint64_t static POSIXError.EOVERFLOW.getter()
{
  return 84;
}

uint64_t static POSIXError.EBADEXEC.getter()
{
  return 85;
}

uint64_t static POSIXError.EBADARCH.getter()
{
  return 86;
}

uint64_t static POSIXError.ESHLIBVERS.getter()
{
  return 87;
}

uint64_t static POSIXError.EBADMACHO.getter()
{
  return 88;
}

uint64_t static POSIXError.ECANCELED.getter()
{
  return 89;
}

uint64_t static POSIXError.EIDRM.getter()
{
  return 90;
}

uint64_t static POSIXError.ENOMSG.getter()
{
  return 91;
}

uint64_t static POSIXError.EILSEQ.getter()
{
  return 92;
}

uint64_t static POSIXError.ENOATTR.getter()
{
  return 93;
}

uint64_t static POSIXError.EBADMSG.getter()
{
  return 94;
}

uint64_t static POSIXError.EMULTIHOP.getter()
{
  return 95;
}

uint64_t static POSIXError.ENODATA.getter()
{
  return 96;
}

uint64_t static POSIXError.ENOLINK.getter()
{
  return 97;
}

uint64_t static POSIXError.ENOSR.getter()
{
  return 98;
}

uint64_t static POSIXError.ENOSTR.getter()
{
  return 99;
}

uint64_t static POSIXError.EPROTO.getter()
{
  return 100;
}

uint64_t static POSIXError.ETIME.getter()
{
  return 101;
}

uint64_t static POSIXError.ENOPOLICY.getter()
{
  return 103;
}

uint64_t static POSIXError.ENOTRECOVERABLE.getter()
{
  return 104;
}

uint64_t static POSIXError.EOWNERDEAD.getter()
{
  return 105;
}

uint64_t static POSIXError.EQFULL.getter()
{
  return 106;
}

unint64_t lazy protocol witness table accessor for type POSIXErrorCode and conformance POSIXErrorCode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode;
  if (!lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for POSIXErrorCode, MEMORY[0x1E0DF2028]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode;
  if (!lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DF2038], MEMORY[0x1E0DF2028]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode;
  if (!lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DF2030], MEMORY[0x1E0DF2028]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for POSIXError(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  a1[2] = lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  result = lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for POSIXError(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for POSIXErrorCode(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type POSIXErrorCode and conformance POSIXErrorCode();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized numericCast<A, B>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t, __n128);
  uint64_t v18;
  char v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  char *v29;
  char v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v6);
  v36 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v37 = (char *)&v34 - v9;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v34 - v11;
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v34 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v17((char *)&v34 - v15, a1, a2, v14);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0
    || (v18 = swift_getAssociatedConformanceWitness(),
        MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, v18),
        dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)(),
        v19 = dispatch thunk of static Comparable.>= infix(_:_:)(),
        result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, a2),
        (v19 & 1) != 0))
  {
    v35 = AssociatedTypeWitness;
    v38 = v5;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      ((void (*)(char *, char *, uint64_t))v17)(v37, v16, a2);
      v39 = -1;
      v21 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v22 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v21 & 1) != 0)
      {
        if (v22 <= 64)
        {
          v23 = v35;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          MEMORY[0x186DA5E34](&unk_18206D478, 256, v23, AssociatedConformanceWitness);
          dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
          v25 = v37;
          LOBYTE(v23) = dispatch thunk of static Comparable.> infix(_:_:)();
          v26 = v38;
          v27 = *(void (**)(char *, uint64_t))(v38 + 8);
          v27(v12, a2);
          v28 = v36;
          (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v36, v25, a2);
          if ((v23 & 1) != 0)
            dispatch thunk of BinaryInteger._lowWord.getter();
          v27(v28, a2);
          goto LABEL_13;
        }
      }
      else if (v22 <= 64)
      {
LABEL_12:
        v32 = v37;
        dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v32, a2);
        goto LABEL_13;
      }
      lazy protocol witness table accessor for type UInt and conformance UInt();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v29 = v37;
      v30 = dispatch thunk of static Comparable.< infix(_:_:)();
      v31 = *(void (**)(char *, uint64_t))(v38 + 8);
      v31(v12, a2);
      v31(v29, a2);
      if ((v30 & 1) != 0)
      {
        __break(1u);
        goto LABEL_12;
      }
    }
LABEL_13:
    v33 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v16, a2);
    return v33;
  }
  __break(1u);
  return result;
}

void protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance MachError(void *a1@<X0>, _QWORD *a2@<X8>)
{
  specialized _BridgedStoredNSError.init(_bridgedNSError:)(a1, (void **)&NSMachErrorDomain, a2);
}

void specialized _BridgedStoredNSError.init(_bridgedNSError:)(void *a1@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = a1;
  v6 = objc_msgSend(a1, sel_domain);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = *a2;
  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)(v10) && v9 == v11)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {

      v4 = 0;
LABEL_12:
      *a3 = v4;
      return;
    }
  }
  v14 = objc_msgSend(v4, sel_domain);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)(v10) && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
    goto LABEL_12;
  __break(1u);
}

uint64_t _BridgedStoredNSError.init(_bridgedNSError:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;

  v8 = objc_msgSend(a1, sel_domain);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  if (v9 == (id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 16))(a2) && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
  {
LABEL_8:
    (*(void (**)(void *, uint64_t, uint64_t))(a3 + 72))(a1, a2, a3);
    v15 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, v15, 1, a2);
  }

  v15 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, v15, 1, a2);
}

id _BridgedStoredNSError.errorCode.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = (void *)(*(uint64_t (**)(void))(a2 + 64))();
  v3 = objc_msgSend(v2, sel_code);

  return v3;
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance MachError()
{
  _QWORD *v0;

  return specialized _BridgedStoredNSError.errorUserInfo.getter(*v0);
}

void _BridgedStoredNSError.errorUserInfo.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  __int128 v50;
  _OWORD v51[2];
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v2 = MEMORY[0x1E0DEE9E0];
  v54 = MEMORY[0x1E0DEE9E0];
  v3 = (void *)(*(uint64_t (**)(void))(a2 + 64))();
  v4 = objc_msgSend(v3, sel_userInfo);

  if (!v4)
    goto LABEL_21;
  swift_unknownObjectRetain();
  v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!v5)
  {
    v6 = objc_msgSend(v4, sel_count);
    if (v6)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v2 = static _DictionaryStorage.allocate(capacity:)();
    }
    v7 = *(_QWORD **)(v2 + 48);
    v8 = *(_QWORD *)(v2 + 56);
    swift_retain();
    v9 = (int64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v7, v8, v4, (uint64_t)v6);
    if (v9 < 0 || (uint64_t)v6 < v9)
      goto LABEL_50;
    *(_QWORD *)(v2 + 16) = v9;
    if (!v9)
    {
LABEL_19:
      swift_release();
      goto LABEL_20;
    }
    v10 = v9 - 1;
    v11 = v2 + 64;
    while (1)
    {
      if (((*(_QWORD *)(v11 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
        goto LABEL_11;
      v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
      v17 = *v16;
      v18 = v16[1];
      swift_bridgeObjectRetain();
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18);
      v21 = v20;
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        v22 = *(_QWORD *)(v2 + 16);
        v23 = __OFSUB__(v22, 1);
        v24 = v22 - 1;
        if (v23)
          goto LABEL_49;
        *(_QWORD *)(v2 + 16) = v24;
        goto LABEL_11;
      }
      *(_QWORD *)(v11 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (v10 < (uint64_t)v19)
      {
        *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v19) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v10);
        v12 = *(_QWORD *)(v2 + 56);
        v13 = (_OWORD *)(v12 + 32 * v10);
        v14 = v13[1];
        v15 = (_OWORD *)(v12 + 32 * v19);
        *v15 = *v13;
        v15[1] = v14;
LABEL_11:
        if (--v10 < 0)
          goto LABEL_19;
      }
      else
      {
        if (v19 == v10)
          goto LABEL_11;
        v25 = *(_QWORD *)(v2 + 48);
        v26 = (uint64_t *)(v25 + 16 * v19);
        v27 = (uint64_t *)(v25 + 16 * v10);
        v28 = *v26;
        v29 = v26[1];
        v30 = v27[1];
        *v26 = *v27;
        v26[1] = v30;
        *v27 = v28;
        v27[1] = v29;
        v31 = *(_QWORD *)(v2 + 56);
        v32 = (_OWORD *)(v31 + 32 * v19);
        v33 = (_OWORD *)(v31 + 32 * v10);
        outlined init with take of Any(v32, &v52);
        outlined init with take of Any(v33, v32);
        outlined init with take of Any(&v52, v33);
        if (v10 < 0)
          goto LABEL_19;
      }
    }
  }
  v2 = v5;
LABEL_20:

LABEL_21:
  v34 = 0;
  v35 = v2 + 64;
  v36 = 1 << *(_BYTE *)(v2 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & *(_QWORD *)(v2 + 64);
  v39 = (unint64_t)(v36 + 63) >> 6;
  if (!v38)
    goto LABEL_28;
LABEL_26:
  v41 = __clz(__rbit64(v38));
  v38 &= v38 - 1;
  v42 = v41 | (v34 << 6);
LABEL_27:
  v43 = *(_QWORD *)(v2 + 56);
  v44 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v42);
  v45 = v44[1];
  *(_QWORD *)&v50 = *v44;
  *((_QWORD *)&v50 + 1) = v45;
  outlined init with copy of Any(v43 + 32 * v42, (uint64_t)v51);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: Any)?((uint64_t)&v50, (uint64_t)&v52);
    v49 = *((_QWORD *)&v52 + 1);
    if (!*((_QWORD *)&v52 + 1))
    {
      swift_release();
      return;
    }
    v40 = v52;
    outlined init with take of Any(&v53, &v50);
    specialized Dictionary.subscript.setter((uint64_t)&v50, v40, v49);
    if (v38)
      goto LABEL_26;
LABEL_28:
    v46 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v46 < v39)
    {
      v47 = *(_QWORD *)(v35 + 8 * v46);
      if (v47)
        goto LABEL_31;
      v48 = v34 + 2;
      ++v34;
      if (v46 + 1 < v39)
      {
        v47 = *(_QWORD *)(v35 + 8 * v48);
        if (v47)
          goto LABEL_34;
        v34 = v46 + 1;
        if (v46 + 2 < v39)
        {
          v47 = *(_QWORD *)(v35 + 8 * (v46 + 2));
          if (v47)
          {
            v46 += 2;
            goto LABEL_31;
          }
          v48 = v46 + 3;
          v34 = v46 + 2;
          if (v46 + 3 < v39)
          {
            v47 = *(_QWORD *)(v35 + 8 * v48);
            if (!v47)
            {
              while (1)
              {
                v46 = v48 + 1;
                if (__OFADD__(v48, 1))
                  goto LABEL_51;
                if (v46 >= v39)
                {
                  v34 = v39 - 1;
                  goto LABEL_45;
                }
                v47 = *(_QWORD *)(v35 + 8 * v46);
                ++v48;
                if (v47)
                  goto LABEL_31;
              }
            }
LABEL_34:
            v46 = v48;
LABEL_31:
            v38 = (v47 - 1) & v47;
            v42 = __clz(__rbit64(v47)) + (v46 << 6);
            v34 = v46;
            goto LABEL_27;
          }
        }
      }
    }
LABEL_45:
    v38 = 0;
    memset(v51, 0, sizeof(v51));
    v50 = 0u;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
}

void _BridgedStoredNSError.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;

  v3 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  NSObject.hash(into:)();

}

uint64_t _BridgedStoredNSError._getEmbeddedNSError()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

id static _BridgedStoredNSError.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;
  void *v8;
  id v9;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  v7 = (void *)v6(a3, a4);
  v8 = (void *)v6(a3, a4);
  v9 = objc_msgSend(v7, sel_isEqual_, v8);

  return v9;
}

uint64_t _BridgedStoredNSError.userInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 32))();
}

uint64_t _BridgedStoredNSError.code.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  id v16;

  v15 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for Optional();
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v15 - v9;
  v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 64))(a1, a2, v8);
  v12 = objc_msgSend(v11, sel_code);

  swift_getAssociatedConformanceWitness();
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    v16 = v12;
    lazy protocol witness table accessor for type Int and conformance Int();
  }
  else
  {
    v16 = v12;
    lazy protocol witness table accessor for type UInt and conformance UInt();
  }
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  dispatch thunk of RawRepresentable.init(rawValue:)();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v15, v10, AssociatedTypeWitness);
  __break(1u);
  return result;
}

void protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance POSIXError(void *a1@<X0>, _QWORD *a2@<X8>)
{
  specialized _BridgedStoredNSError.init(_bridgedNSError:)(a1, (void **)&NSPOSIXErrorDomain, a2);
}

uint64_t RecoverableError.attemptRecovery(optionIndex:resultHandler:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v6;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 32))(a1, a4, a5);
  return a2(v6 & 1);
}

id NSError._domain.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, sel_domain);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id NSError._code.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_code);
}

id NSError._userInfo.getter()
{
  void *v0;
  id result;

  result = objc_msgSend(v0, sel_userInfo);
  if (!result)
    __break(1u);
  return result;
}

id protocol witness for Error._domain.getter in conformance NSError()
{
  id *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*v0, sel_domain);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id protocol witness for Error._userInfo.getter in conformance NSError()
{
  id *v0;
  id result;

  result = objc_msgSend(*v0, sel_userInfo);
  if (!result)
    __break(1u);
  return result;
}

__CFString *CFErrorRef._domain.getter()
{
  __CFError *v0;
  __CFString *result;
  __CFString *v2;
  id v3;

  result = (id)CFErrorGetDomain(v0);
  if (result)
  {
    v2 = result;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return (__CFString *)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFIndex CFErrorRef._code.getter()
{
  __CFError *v0;

  return CFErrorGetCode(v0);
}

uint64_t CFErrorRef._userInfo.getter()
{
  __CFError *v0;
  uint64_t v1;
  CFDictionaryRef v3;

  v3 = CFErrorCopyUserInfo(v0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CFDictionaryRef?);
  v1 = Optional._bridgeToObjectiveC()();

  return v1;
}

uint64_t CFErrorRef._getEmbeddedNSError()()
{
  return swift_unknownObjectRetain();
}

uint64_t _BridgedNSError._domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t _BridgedNSError._code.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  char *v33;
  char v34;
  char *i;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t result;
  char v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t AssociatedConformanceWitness;
  char *v47;
  char v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  int64_t v60;

  swift_getAssociatedTypeWitness();
  v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v53 = (char *)&v51 - v1;
  v2 = swift_checkMetadataState();
  MEMORY[0x1E0C80A78](v2);
  v52 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v55 = (char *)&v51 - v5;
  MEMORY[0x1E0C80A78](v6);
  v58 = (char *)&v51 - v7;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v51 - v9;
  MEMORY[0x1E0C80A78](v11);
  v57 = (char *)&v51 - v12;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v51 - v14;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v51 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v51 - v20;
  v23 = v22;
  dispatch thunk of RawRepresentable.rawValue.getter();
  v24 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v25 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v25(v18, v21, v2);
  v56 = v23;
  if ((v24 & 1) == 0)
  {
    v27 = *(void (**)(char *, uint64_t))(v23 + 8);
    v28 = v18;
    goto LABEL_7;
  }
  v26 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v27 = *(void (**)(char *, uint64_t))(v23 + 8);
  v27(v18, v2);
  if (v26 <= 64)
    goto LABEL_8;
  v25(v15, v21, v2);
  v60 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    v41 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v41 & 1) != 0)
    {
      if (v42 <= 64)
        goto LABEL_30;
LABEL_24:
      lazy protocol witness table accessor for type Int and conformance Int();
      v43 = v57;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v44 = dispatch thunk of static Comparable.< infix(_:_:)();
      v27(v43, v2);
      v27(v15, v2);
      if ((v44 & 1) != 0)
        goto LABEL_29;
LABEL_8:
      v29 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v25(v10, v21, v2);
      if (v29 < 65)
      {
        v36 = dispatch thunk of BinaryInteger.bitWidth.getter();
        v27(v10, v2);
        if (v36 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
          goto LABEL_21;
      }
      else
      {
        v27(v10, v2);
      }
      v30 = v58;
      v25(v58, v21, v2);
      v60 = 0x7FFFFFFFFFFFFFFFLL;
      v31 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v32 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v31 & 1) != 0)
      {
        if (v32 > 64)
        {
          lazy protocol witness table accessor for type Int and conformance Int();
          v33 = v57;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          v34 = dispatch thunk of static Comparable.< infix(_:_:)();
          v27(v33, v2);
          for (i = v30; ; i = v38)
          {
            v27(i, v2);
            if ((v34 & 1) == 0)
              break;
LABEL_18:
            __break(1u);
LABEL_19:
            v59 = 0x7FFFFFFFFFFFFFFFLL;
            v38 = v57;
            (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v57, v30, v2);
            lazy protocol witness table accessor for type Int and conformance Int();
            v30 = v55;
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            v34 = dispatch thunk of static Comparable.< infix(_:_:)();
            v27(v30, v2);
          }
          goto LABEL_21;
        }
      }
      else if (v32 > 63)
      {
        goto LABEL_19;
      }
      v37 = dispatch thunk of BinaryInteger._lowWord.getter();
      v27(v30, v2);
      if (v60 < v37)
        goto LABEL_18;
LABEL_21:
      v39 = dispatch thunk of BinaryInteger._lowWord.getter();
      v27(v21, v2);
      return v39;
    }
    if (v42 < 64)
      goto LABEL_28;
    v28 = v15;
LABEL_7:
    v27(v28, v2);
    goto LABEL_8;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    goto LABEL_24;
LABEL_28:
  v45 = dispatch thunk of BinaryInteger._lowWord.getter();
  v27(v15, v2);
  if (v45 >= v60)
    goto LABEL_8;
LABEL_29:
  while (1)
  {
    __break(1u);
LABEL_30:
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x186DA5E34](&unk_18206D478, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    v47 = v57;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v48 = dispatch thunk of static Comparable.< infix(_:_:)();
    v27(v47, v2);
    AssociatedTypeWitness = (uint64_t)v52;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v52, v15, v2);
    if ((v48 & 1) != 0)
      break;
    v49 = v60;
    v50 = dispatch thunk of BinaryInteger._lowWord.getter();
    v27((char *)AssociatedTypeWitness, v2);
    if (v50 >= v49)
      goto LABEL_8;
  }
  result = ((uint64_t (*)(uint64_t, uint64_t))v27)(AssociatedTypeWitness, v2);
  __break(1u);
  return result;
}

uint64_t _BridgedNSError.init(_bridgedNSError:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  v26 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = type metadata accessor for Optional();
  v24 = *(_QWORD *)(v8 - 8);
  v25 = v8;
  *(_QWORD *)&v9 = MEMORY[0x1E0C80A78](v8).n128_u64[0];
  v11 = (char *)&v23 - v10;
  v12 = objc_msgSend(a1, sel_domain, v9);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  if (v13 == (id)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3) && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      v19 = *(_QWORD *)(a2 - 8);
      goto LABEL_10;
    }
  }
  v27 = objc_msgSend(a1, sel_code);
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  dispatch thunk of RawRepresentable.init(rawValue:)();
  v19 = *(_QWORD *)(a2 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, a2))
  {
    v21 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v26, v11, a2);
    v20 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1, a2);
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v25);
LABEL_10:
  v20 = 1;
  v21 = v26;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1, a2);
}

void _BridgedNSError.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::UInt v3;

  v3 = MEMORY[0x186DA5E70](a2, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8));
  Hasher._combine(_:)(v3);
}

uint64_t _SwiftNewtypeWrapper<>._bridgeToObjectiveC()()
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;

  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a2, v4);
  v5 = a1;
  return dispatch thunk of RawRepresentable.init(rawValue:)();
}

BOOL static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  void (*v11)(uint64_t, uint64_t, __n128);
  id v12;
  _BOOL8 v13;
  _QWORD v15[2];

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v15 - v9;
  v11 = *(void (**)(uint64_t, uint64_t, __n128))(v7 + 8);
  v11(a2, v6, v8);
  v15[1] = a1;
  v12 = a1;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 48))(v10, 1, a3) != 1;
  ((void (*)(char *, uint64_t))v11)(v10, v6);
  return v13;
}

uint64_t static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];

  v6 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v14 - v7;
  if (a1)
  {
    v9 = (uint64_t)a1;
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1)
      swift_once();
    v9 = _nilObjCError;
    v10 = (id)_nilObjCError;
  }
  v14[1] = v9;
  v11 = a1;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  v12 = *(_QWORD *)(a2 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, a2);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v8, a2);
  __break(1u);
  return result;
}

Foundation::ErrorUserInfoKey __swiftcall ErrorUserInfoKey.init(rawValue:)(Foundation::ErrorUserInfoKey rawValue)
{
  Foundation::ErrorUserInfoKey *v1;

  *v1 = rawValue;
  return rawValue;
}

uint64_t ErrorUserInfoKey.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ErrorUserInfoKey.rawValue.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ErrorUserInfoKey.rawValue.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance ErrorUserInfoKey@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ErrorUserInfoKey@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ErrorUserInfoKey(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ErrorUserInfoKey()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  v0 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ErrorUserInfoKey()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ErrorUserInfoKey()
{
  Swift::Int v0;

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance ErrorUserInfoKey()
{
  lazy protocol witness table accessor for type ErrorUserInfoKey and conformance ErrorUserInfoKey();
  lazy protocol witness table accessor for type ErrorUserInfoKey and conformance ErrorUserInfoKey();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

id one-time initialization function for underlyingErrorKey()
{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSUnderlyingError"));
  static ErrorUserInfoKey.underlyingErrorKey = (uint64_t)result;
  unk_1EDC43B50 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.underlyingErrorKey.getter@<X0>(_QWORD *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for underlyingErrorKey, &static ErrorUserInfoKey.underlyingErrorKey, &qword_1EDC43B50, a1);
}

id one-time initialization function for localizedDescriptionKey()
{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedDescription"));
  static ErrorUserInfoKey.localizedDescriptionKey = (uint64_t)result;
  unk_1EDC43B60 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.localizedDescriptionKey.getter@<X0>(_QWORD *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for localizedDescriptionKey, &static ErrorUserInfoKey.localizedDescriptionKey, &qword_1EDC43B60, a1);
}

id one-time initialization function for localizedFailureReasonErrorKey()
{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedFailureReason"));
  static ErrorUserInfoKey.localizedFailureReasonErrorKey = (uint64_t)result;
  unk_1EDC43B70 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.localizedFailureReasonErrorKey.getter@<X0>(_QWORD *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for localizedFailureReasonErrorKey, &static ErrorUserInfoKey.localizedFailureReasonErrorKey, &qword_1EDC43B70, a1);
}

id one-time initialization function for localizedRecoverySuggestionErrorKey()
{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedRecoverySuggestion"));
  static ErrorUserInfoKey.localizedRecoverySuggestionErrorKey = (uint64_t)result;
  unk_1EDC43B80 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.localizedRecoverySuggestionErrorKey.getter@<X0>(_QWORD *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for localizedRecoverySuggestionErrorKey, &static ErrorUserInfoKey.localizedRecoverySuggestionErrorKey, &qword_1EDC43B80, a1);
}

id one-time initialization function for localizedRecoveryOptionsErrorKey()
{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSLocalizedRecoveryOptions"));
  static ErrorUserInfoKey.localizedRecoveryOptionsErrorKey = (uint64_t)result;
  unk_1EDC43B90 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.localizedRecoveryOptionsErrorKey.getter@<X0>(_QWORD *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for localizedRecoveryOptionsErrorKey, &static ErrorUserInfoKey.localizedRecoveryOptionsErrorKey, &qword_1EDC43B90, a1);
}

id one-time initialization function for recoveryAttempterErrorKey()
{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSRecoveryAttempter"));
  static ErrorUserInfoKey.recoveryAttempterErrorKey = (uint64_t)result;
  unk_1EDC43BA0 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.recoveryAttempterErrorKey.getter@<X0>(_QWORD *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for recoveryAttempterErrorKey, &static ErrorUserInfoKey.recoveryAttempterErrorKey, &qword_1EDC43BA0, a1);
}

id one-time initialization function for helpAnchorErrorKey()
{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSHelpAnchor"));
  static ErrorUserInfoKey.helpAnchorErrorKey = (uint64_t)result;
  unk_1EDC43BB0 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.helpAnchorErrorKey.getter@<X0>(_QWORD *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for helpAnchorErrorKey, &static ErrorUserInfoKey.helpAnchorErrorKey, &qword_1EDC43BB0, a1);
}

id one-time initialization function for stringEncodingErrorKey()
{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSStringEncoding"));
  static ErrorUserInfoKey.stringEncodingErrorKey = (uint64_t)result;
  unk_1EDC43BC0 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.stringEncodingErrorKey.getter@<X0>(_QWORD *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for stringEncodingErrorKey, &static ErrorUserInfoKey.stringEncodingErrorKey, &qword_1EDC43BC0, a1);
}

id one-time initialization function for NSURLErrorKey()
{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  static ErrorUserInfoKey.NSURLErrorKey = (uint64_t)result;
  unk_1EDC43BD0 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.NSURLErrorKey.getter@<X0>(_QWORD *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for NSURLErrorKey, &static ErrorUserInfoKey.NSURLErrorKey, &qword_1EDC43BD0, a1);
}

id one-time initialization function for filePathErrorKey()
{
  id result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  static ErrorUserInfoKey.filePathErrorKey = (uint64_t)result;
  unk_1EDC43BE0 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.filePathErrorKey.getter@<X0>(_QWORD *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for filePathErrorKey, &static ErrorUserInfoKey.filePathErrorKey, &qword_1EDC43BE0, a1);
}

uint64_t static ErrorUserInfoKey.underlyingErrorKey.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;

  if (*a1 != -1)
    swift_once();
  v7 = *a3;
  *a4 = *a2;
  a4[1] = v7;
  return swift_bridgeObjectRetain();
}

void protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance CocoaError(void *a1@<X0>, _QWORD *a2@<X8>)
{
  specialized _BridgedStoredNSError.init(_bridgedNSError:)(a1, (void **)&NSCocoaErrorDomain, a2);
}

uint64_t sub_181C9AEE4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_181C9AF08()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for __NSErrorRecoveryAttempter()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type ErrorUserInfoKey and conformance ErrorUserInfoKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ErrorUserInfoKey, &type metadata for ErrorUserInfoKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ErrorUserInfoKey, &type metadata for ErrorUserInfoKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ErrorUserInfoKey, &type metadata for ErrorUserInfoKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ErrorUserInfoKey, &type metadata for ErrorUserInfoKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for ErrorUserInfoKey, &type metadata for ErrorUserInfoKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }
  return result;
}

uint64_t dispatch thunk of RecoverableError.recoveryOptions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of RecoverableError.attemptRecovery(optionIndex:resultHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of RecoverableError.attemptRecovery(optionIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of _ObjectiveCBridgeableError.init(_bridgedNSError:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static _BridgedNSError._nsErrorDomain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _BridgedStoredNSError._nsError.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of _BridgedStoredNSError.init(_nsError:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

ValueMetadata *type metadata accessor for ErrorUserInfoKey()
{
  return &type metadata for ErrorUserInfoKey;
}

uint64_t sub_181C9B058()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

id partial apply for closure #1 in __NSErrorRecoveryAttempter.attemptRecovery(fromError:optionIndex:delegate:didRecoverSelector:contextInfo:)(char a1)
{
  uint64_t v1;

  return __NSErrorPerformRecoverySelector(*(id *)(v1 + 16), *(SEL *)(v1 + 24), a1 & 1, *(_QWORD *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for _GenericObjCError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181C9B1A0 + 4 * asc_1820FFFA0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181C9B1C0 + 4 * byte_1820FFFA5[v4]))();
}

_BYTE *sub_181C9B1A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181C9B1C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181C9B1C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181C9B1D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181C9B1D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181C9B1E0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for _GenericObjCError()
{
  return &type metadata for _GenericObjCError;
}

uint64_t _LocaleProtocol.regionCode.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 376))(&v5);
  v2 = v6;
  if (!v6)
    return 0;
  v3 = v5;
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(v3, v2);
  return v3;
}

uint64_t _LocaleProtocol.doesNotRequireSpecialCaseHandling.getter(uint64_t a1, uint64_t a2)
{
  char v2;

  (*(void (**)(void))(a2 + 64))();
  v2 = specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t _LocaleProtocol.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of _LocaleProtocol.init(identifier:prefs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of _LocaleProtocol.init(name:prefs:disableBundleMatching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of _LocaleProtocol.init(components:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of _LocaleProtocol.copy(newCalendarIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of _LocaleProtocol.isAutoupdating.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of _LocaleProtocol.isBridged.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of _LocaleProtocol.identifierDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of _LocaleProtocol.languageCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of _LocaleProtocol.countryCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of _LocaleProtocol.scriptCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of _LocaleProtocol.variantCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of _LocaleProtocol.calendarIdentifierDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of _LocaleProtocol.currencyCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of _LocaleProtocol.currencySymbolDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of _LocaleProtocol.collationIdentifierDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of _LocaleProtocol.collatorIdentifierDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 144))();
}

uint64_t dispatch thunk of _LocaleProtocol.languageCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of _LocaleProtocol.scriptCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of _LocaleProtocol.variantCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of _LocaleProtocol.regionCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of _LocaleProtocol.exemplarCharacterSet.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of _LocaleProtocol.calendar.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of _LocaleProtocol.calendarIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of _LocaleProtocol.collationIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of _LocaleProtocol.usesMetricSystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of _LocaleProtocol.decimalSeparator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of _LocaleProtocol.groupingSeparator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of _LocaleProtocol.currencySymbol.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of _LocaleProtocol.currencyCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

uint64_t dispatch thunk of _LocaleProtocol.collatorIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 256))();
}

uint64_t dispatch thunk of _LocaleProtocol.quotationBeginDelimiter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 264))();
}

uint64_t dispatch thunk of _LocaleProtocol.quotationEndDelimiter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 272))();
}

uint64_t dispatch thunk of _LocaleProtocol.alternateQuotationBeginDelimiter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 280))();
}

uint64_t dispatch thunk of _LocaleProtocol.alternateQuotationEndDelimiter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 288))();
}

uint64_t dispatch thunk of _LocaleProtocol.measurementSystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 296))();
}

uint64_t dispatch thunk of _LocaleProtocol.currency.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 304))();
}

uint64_t dispatch thunk of _LocaleProtocol.numberingSystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 312))();
}

uint64_t dispatch thunk of _LocaleProtocol.availableNumberingSystems.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 320))();
}

uint64_t dispatch thunk of _LocaleProtocol.firstDayOfWeek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 328))();
}

uint64_t dispatch thunk of _LocaleProtocol.weekendRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 336))();
}

uint64_t dispatch thunk of _LocaleProtocol.minimumDaysInFirstWeek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 344))();
}

uint64_t dispatch thunk of _LocaleProtocol.language.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 352))();
}

uint64_t dispatch thunk of _LocaleProtocol.hourCycle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 360))();
}

uint64_t dispatch thunk of _LocaleProtocol.collation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 368))();
}

uint64_t dispatch thunk of _LocaleProtocol.region.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 376))();
}

uint64_t dispatch thunk of _LocaleProtocol.timeZone.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 384))();
}

uint64_t dispatch thunk of _LocaleProtocol.subdivision.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 392))();
}

uint64_t dispatch thunk of _LocaleProtocol.variant.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 400))();
}

uint64_t dispatch thunk of _LocaleProtocol.temperatureUnit.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 408))();
}

uint64_t dispatch thunk of _LocaleProtocol.identifier(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 416))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceHourCycle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 424))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceFirstWeekday(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 432))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceMinDaysInFirstWeek(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 440))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceMeasurementSystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 448))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceTemperatureUnit.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 456))();
}

uint64_t dispatch thunk of _LocaleProtocol.prefs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 464))();
}

uint64_t dispatch thunk of _LocaleProtocol.identifierCapturingPreferences.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 472))();
}

uint64_t dispatch thunk of _LocaleProtocol.doesNotRequireSpecialCaseHandling.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 480))();
}

uint64_t dispatch thunk of _LocaleProtocol.pref(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 488))();
}

uint64_t dispatch thunk of _LocaleProtocol.bridgeToNSLocale()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 496))();
}

uint64_t dispatch thunk of _LocaleProtocol.customDateFormat(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 504))();
}

id NSNotificationCenter.Publisher.center.getter()
{
  id *v0;

  return *v0;
}

id NSNotificationCenter.Publisher.name.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

uint64_t NSNotificationCenter.Publisher.object.getter()
{
  return swift_unknownObjectRetain();
}

void Notification.Subscription.customMirror.getter(os_unfair_lock_s *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  os_unfair_lock_t v21[3];
  uint64_t v22;

  v2 = v1;
  v21[1] = a1;
  v21[2] = *(os_unfair_lock_t *)v1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = *(os_unfair_lock_t *)(v1 + 16);
  os_unfair_lock_lock(v21[0]);
  v22 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_182065BC0;
  *(_QWORD *)(v10 + 32) = 0x7265746E6563;
  *(_QWORD *)(v10 + 40) = 0xE600000000000000;
  v11 = *(void **)(v1 + 40);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSNotificationCenter?);
  *(_QWORD *)(v10 + 48) = v11;
  *(_QWORD *)(v10 + 72) = v12;
  *(_QWORD *)(v10 + 80) = 1701667182;
  *(_QWORD *)(v10 + 88) = 0xE400000000000000;
  v13 = *(void **)(v1 + 48);
  type metadata accessor for NSNotificationName(0);
  *(_QWORD *)(v10 + 96) = v13;
  *(_QWORD *)(v10 + 120) = v14;
  *(_QWORD *)(v10 + 128) = 0x7463656A626FLL;
  *(_QWORD *)(v10 + 136) = 0xE600000000000000;
  v15 = *(_QWORD *)(v2 + 56);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
  *(_QWORD *)(v10 + 144) = v15;
  *(_QWORD *)(v10 + 168) = v16;
  *(_QWORD *)(v10 + 176) = 0x646E616D6564;
  v17 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v10 + 216) = MEMORY[0x1E0C95D60];
  *(_QWORD *)(v10 + 184) = 0xE600000000000000;
  *(_QWORD *)(v10 + 192) = v17;
  v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v9, 1, 1, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEDFE8], v3);
  swift_unknownObjectRetain();
  swift_retain();
  v19 = v11;
  v20 = v13;
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(v21[0]);
}

void Notification.Subscription.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = 0xD00000000000001BLL;
  a1[1] = 0x800000018230A340;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Notification.Subscription<A>()
{
  return 0xD00000000000001BLL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Notification.Subscription<A>(os_unfair_lock_s *a1@<X8>)
{
  Notification.Subscription.customMirror.getter(a1);
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Notification.Subscription<A>(_QWORD *a1@<X8>)
{
  Notification.Subscription.playgroundDescription.getter(a1);
}

uint64_t assignWithTake for NSNotificationCenter.Publisher(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_181C9B804()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_181C9B828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void specialized closure #1 in Data.withBufferView<A>(_:)(_BYTE *a1, uint64_t a2, char **a3, char *a4, Swift::Int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  if (a1)
  {
    v7 = a2 - (_QWORD)a1;
    if (v7 >= 0)
    {
      closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(a1, v7, a3, a4, a5, a6, a7);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t _s10Foundation4DataV14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_AA23LocalizedStringResourceV_Tg50102_s10Foundation19PropertyListDecoderC30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4b7V_xAA10de4Vys5f45VGKXExAOKXExSS05UTF16Q0VKXEtKlFZxAOKXEfU_AA23ghI5V_Tg5AIxs5Error_pRi_zRi0_zlyAKIsgyrzo_AA0lmN0CXMTAIxsAM_pRi_zRi0_zlyAKIsgyrzo_SS05UTF16E0VxsAM_pRi_zRi0_zlyAKIsggrzo_AOXDXMTTf1nnc_n@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, _QWORD *(*a4)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t)@<X5>, void (*a5)(id)@<X7>, uint64_t a6@<X8>)
{
  uint64_t v6;

  if (result)
  {
    v6 = a2 - result;
    if (v6 >= 0)
      return specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(result, v6, a3, a4, a5, a6);
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _CalendarBridged.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(uint64_t *a1, uint64_t *a2, void *a3, char a4, void *a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t result;
  char v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v111;
  char v112;
  __int128 v113;
  __int128 v114;
  char v115;

  v7 = *a1;
  v8 = a1[1];
  v9 = *a2;
  v10 = a2[1];
  if (one-time initialization token for cache != -1)
    swift_once();
  v11 = *(void **)(v6 + 16);
  swift_retain();
  v12 = objc_msgSend(v11, sel_calendarIdentifier);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996C8]);
  v15 = v14;
  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_17:

    v29 = 0;
    goto LABEL_18;
  }
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99698]);
  v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v21 == v22)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_35;
  }
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
  {
LABEL_35:

    v29 = 1;
    goto LABEL_18;
  }
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996A0]);
  v27 = v26;
  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
LABEL_38:

    v29 = 2;
    goto LABEL_18;
  }
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
    goto LABEL_38;
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996A8]);
  v44 = v43;
  if (v42 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v44 == v45)
  {
    swift_bridgeObjectRelease_n();
LABEL_43:

    v29 = 3;
    goto LABEL_18;
  }
  v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v46 & 1) != 0)
    goto LABEL_43;
  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996B8]);
  v49 = v48;
  if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v49 == v50)
  {
    swift_bridgeObjectRelease_n();
LABEL_48:

    v29 = 4;
    goto LABEL_18;
  }
  v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) != 0)
    goto LABEL_48;
  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996B0]);
  v54 = v53;
  if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v54 == v55)
  {
    swift_bridgeObjectRelease_n();
LABEL_53:

    v29 = 5;
    goto LABEL_18;
  }
  v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v56 & 1) != 0)
    goto LABEL_53;
  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996D0]);
  v59 = v58;
  if (v57 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v59 == v60)
  {
    swift_bridgeObjectRelease_n();
LABEL_58:

    v29 = 6;
    goto LABEL_18;
  }
  v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v61 & 1) != 0)
    goto LABEL_58;
  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996D8]);
  v64 = v63;
  if (v62 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v64 == v65)
  {
    swift_bridgeObjectRelease_n();
LABEL_63:

    v29 = 7;
    goto LABEL_18;
  }
  v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v66 & 1) != 0)
    goto LABEL_63;
  v67 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996E0]);
  v69 = v68;
  if (v67 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v69 == v70)
  {
    swift_bridgeObjectRelease_n();
LABEL_68:

    v29 = 8;
    goto LABEL_18;
  }
  v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v71 & 1) != 0)
    goto LABEL_68;
  v72 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996E8]);
  v74 = v73;
  if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v74 == v75)
  {
    swift_bridgeObjectRelease_n();
LABEL_73:

    v29 = 9;
    goto LABEL_18;
  }
  v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v76 & 1) != 0)
    goto LABEL_73;
  v77 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996F0]);
  v79 = v78;
  if (v77 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v79 == v80)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v81 & 1) == 0)
      goto LABEL_80;
  }

  v29 = 10;
  while (1)
  {
LABEL_18:
    v115 = v29;
    v30 = v7;
    if (!v7)
    {
      v32 = objc_msgSend(v11, sel_locale);
      if (v32)
      {
        v12 = v32;
        type metadata accessor for _NSSwiftLocale();
        v33 = swift_dynamicCastClass();
        if (v33)
        {
          v30 = *(_QWORD *)(v33 + OBJC_IVAR____NSSwiftLocale_locale);
          v8 = *(_QWORD *)(v33 + OBJC_IVAR____NSSwiftLocale_locale + 8);
          swift_unknownObjectRetain();

        }
        else
        {
          type metadata accessor for _LocaleBridged();
          v30 = swift_allocObject();
          *(_QWORD *)(v30 + 16) = v12;
          v8 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, 255, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged, (uint64_t)&protocol conformance descriptor for _LocaleBridged);
        }
      }
      else
      {
        v30 = 0;
        v8 = 0;
      }
    }
    *(_QWORD *)&v114 = v30;
    *((_QWORD *)&v114 + 1) = v8;
    if (v9)
    {
      swift_unknownObjectRetain();
      v31 = v9;
      goto LABEL_29;
    }
    swift_unknownObjectRetain();
    v34 = objc_msgSend(v11, sel_timeZone);
    if (v34)
      break;
    __break(1u);
LABEL_80:
    v82 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99708]);
    v84 = v83;
    if (v82 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v84 == v85)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_84;
    }
    v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v86 & 1) != 0)
    {
LABEL_84:

      v29 = 11;
    }
    else
    {
      v87 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99710]);
      v89 = v88;
      if (v87 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v89 == v90)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_89;
      }
      v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v91 & 1) != 0)
      {
LABEL_89:

        v29 = 12;
      }
      else
      {
        v92 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99718]);
        v94 = v93;
        if (v92 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v94 == v95)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_94;
        }
        v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v96 & 1) != 0)
        {
LABEL_94:

          v29 = 13;
        }
        else
        {
          v97 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C996F8]);
          v99 = v98;
          if (v97 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v99 == v100)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_99;
          }
          v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v101 & 1) != 0)
          {
LABEL_99:

            v29 = 14;
          }
          else
          {
            v102 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E0C99700]);
            v104 = v103;
            if (v102 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v104 == v105)
            {

              swift_bridgeObjectRelease_n();
            }
            else
            {
              v106 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              if ((v106 & 1) == 0)
              {
                __break(1u);
                return result;
              }
            }
            v29 = 15;
          }
        }
      }
    }
  }
  v35 = v34;
  type metadata accessor for _NSSwiftTimeZone();
  v36 = swift_dynamicCastClass();
  if (v36)
  {
    v31 = *(_QWORD *)(v36 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    v10 = *(_QWORD *)(v36 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    swift_unknownObjectRetain();

  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = v35;
    v10 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, 255, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
  }
LABEL_29:
  *(_QWORD *)&v113 = v31;
  *((_QWORD *)&v113 + 1) = v10;
  swift_unknownObjectRetain();
  v37 = a3;
  if ((a4 & 1) != 0)
    v37 = objc_msgSend(v11, sel_firstWeekday);
  v38 = a5;
  if ((a6 & 1) != 0)
    v38 = objc_msgSend(v11, sel_minimumDaysInFirstWeek);
  v111 = 0;
  v112 = 1;
  v39 = CalendarCache.fixed(identifier:locale:timeZone:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(&v115, &v114, &v113, (uint64_t)v37, 0, (uint64_t)v38, 0, &v111);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v39;
}

void _CalendarBridged.locale.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*(id *)(v1 + 16), sel_locale);
  if (v3)
  {
    v4 = v3;
    type metadata accessor for _NSSwiftLocale();
    v5 = swift_dynamicCastClass();
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + OBJC_IVAR____NSSwiftLocale_locale);
      v7 = *(_QWORD *)(v5 + OBJC_IVAR____NSSwiftLocale_locale + 8);
      swift_unknownObjectRetain();

    }
    else
    {
      type metadata accessor for _LocaleBridged();
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v4;
      v7 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, 255, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged, (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *a1 = v6;
  a1[1] = v7;
}

id _CalendarBridged.localeIdentifier.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_locale);
  if (v1)
  {
    type metadata accessor for _NSSwiftLocale();
    v2 = swift_dynamicCastClass();
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + OBJC_IVAR____NSSwiftLocale_locale + 8);
      swift_unknownObjectRetain();

    }
    else
    {
      type metadata accessor for _LocaleBridged();
      *(_QWORD *)(swift_allocObject() + 16) = v1;
      v3 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, 255, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleBridged, (uint64_t)&protocol conformance descriptor for _LocaleBridged);
    }
    ObjectType = swift_getObjectType();
    v1 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
    swift_unknownObjectRelease();
  }
  return v1;
}

unint64_t _CalendarBridged.minimumRange(of:)(unsigned __int8 *a1)
{
  uint64_t v1;
  Swift::UInt v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *a1;
  v3 = *(void **)(v1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v4 = static _SetStorage.allocate(capacity:)();
  v5 = v4 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  result = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v4 + 32);
  v8 = result & ~v7;
  v9 = v8 >> 6;
  v10 = *(_QWORD *)(v4 + 56 + 8 * (v8 >> 6));
  v11 = 1 << v8;
  v12 = *(_QWORD *)(v4 + 48);
  if (((1 << v8) & v10) != 0)
  {
    if (*(unsigned __int8 *)(v12 + v8) == (_DWORD)v2)
      goto LABEL_12;
    v13 = ~v7;
    v8 = (v8 + 1) & v13;
    v9 = v8 >> 6;
    v10 = *(_QWORD *)(v5 + 8 * (v8 >> 6));
    v11 = 1 << v8;
    if ((v10 & (1 << v8)) != 0)
    {
      if (*(unsigned __int8 *)(v12 + v8) == (_DWORD)v2)
        goto LABEL_12;
      v8 = (v8 + 1) & v13;
      v9 = v8 >> 6;
      v10 = *(_QWORD *)(v5 + 8 * (v8 >> 6));
      v11 = 1 << v8;
      if ((v10 & (1 << v8)) != 0)
      {
        if (*(unsigned __int8 *)(v12 + v8) == (_DWORD)v2)
          goto LABEL_12;
        v8 = (v8 + 1) & v13;
        v9 = v8 >> 6;
        v10 = *(_QWORD *)(v5 + 8 * (v8 >> 6));
        v11 = 1 << v8;
        if ((v10 & (1 << v8)) != 0)
        {
          while (*(unsigned __int8 *)(v12 + v8) != (_DWORD)v2)
          {
            v8 = (v8 + 1) & v13;
            v9 = v8 >> 6;
            v10 = *(_QWORD *)(v5 + 8 * (v8 >> 6));
            v11 = 1 << v8;
            if ((v10 & (1 << v8)) == 0)
              goto LABEL_10;
          }
          goto LABEL_12;
        }
      }
    }
  }
LABEL_10:
  *(_QWORD *)(v5 + 8 * v9) = v11 | v10;
  *(_BYTE *)(v12 + v8) = v2;
  v14 = *(_QWORD *)(v4 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    goto LABEL_52;
  *(_QWORD *)(v4 + 16) = v16;
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v17 = (_QWORD *)result;
  v18 = 0;
  v19 = result + 64;
  do
  {
    v20 = outlined read-only object #0 of _CalendarBridged.minimumRange(of:)[v18 + 32];
    if (v20 == 18)
      break;
    v21 = *(_QWORD *)&outlined read-only object #0 of _CalendarBridged.minimumRange(of:)[v18 + 40];
    result = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.minimumRange(of:)[v18 + 32]);
    if ((v22 & 1) != 0)
      goto LABEL_49;
    *(_QWORD *)(v19 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v17[6] + result) = v20;
    *(_QWORD *)(v17[7] + 8 * result) = v21;
    v23 = v17[2];
    v15 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v15)
      goto LABEL_50;
    v17[2] = v24;
    v18 += 16;
  }
  while (v18 != 256);
  v25 = 0;
  v26 = 0;
  v27 = 1 << *(_BYTE *)(v4 + 32);
  v28 = *(_QWORD *)(v4 + 56);
  v29 = -1;
  if (v27 < 64)
    v29 = ~(-1 << v27);
  v30 = v29 & v28;
  v31 = (unint64_t)(v27 + 63) >> 6;
  if ((v29 & v28) == 0)
    goto LABEL_22;
LABEL_20:
  v32 = __clz(__rbit64(v30));
  v30 &= v30 - 1;
  v33 = v32 | (v25 << 6);
  if (v17[2])
  {
    while (1)
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v33));
      if ((v37 & 1) == 0)
        break;
      v38 = *(_QWORD *)(v17[7] + 8 * result);
      if ((v38 & ~v26) == 0)
        v38 = 0;
      v26 |= v38;
      if (v30)
        goto LABEL_20;
LABEL_22:
      v34 = v25 + 1;
      if (__OFADD__(v25, 1))
        goto LABEL_48;
      if (v34 >= v31)
      {
LABEL_41:
        swift_release();
        swift_release();
        result = (unint64_t)objc_msgSend(v3, sel_minimumRangeOfUnit_, v26);
        if (result == 0x7FFFFFFFFFFFFFFFLL)
          return 0;
        if (__OFADD__(result, v39))
          goto LABEL_53;
        return result;
      }
      v35 = *(_QWORD *)(v5 + 8 * v34);
      ++v25;
      if (!v35)
      {
        v25 = v34 + 1;
        if (v34 + 1 >= v31)
          goto LABEL_41;
        v35 = *(_QWORD *)(v5 + 8 * v25);
        if (!v35)
        {
          v25 = v34 + 2;
          if (v34 + 2 >= v31)
            goto LABEL_41;
          v35 = *(_QWORD *)(v5 + 8 * v25);
          if (!v35)
          {
            v36 = v34 + 3;
            if (v36 >= v31)
              goto LABEL_41;
            v35 = *(_QWORD *)(v5 + 8 * v36);
            if (!v35)
            {
              while (1)
              {
                v25 = v36 + 1;
                if (__OFADD__(v36, 1))
                  goto LABEL_51;
                if (v25 >= v31)
                  goto LABEL_41;
                v35 = *(_QWORD *)(v5 + 8 * v25);
                ++v36;
                if (v35)
                  goto LABEL_35;
              }
            }
            v25 = v36;
          }
        }
      }
LABEL_35:
      v30 = (v35 - 1) & v35;
      v33 = __clz(__rbit64(v35)) + (v25 << 6);
      if (!v17[2])
        goto LABEL_46;
    }
  }
  else
  {
LABEL_46:
    __break(1u);
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

unint64_t _CalendarBridged.maximumRange(of:)(unsigned __int8 *a1)
{
  uint64_t v1;
  Swift::UInt v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *a1;
  v3 = *(void **)(v1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v4 = static _SetStorage.allocate(capacity:)();
  v5 = v4 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  result = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v4 + 32);
  v8 = result & ~v7;
  v9 = v8 >> 6;
  v10 = *(_QWORD *)(v4 + 56 + 8 * (v8 >> 6));
  v11 = 1 << v8;
  v12 = *(_QWORD *)(v4 + 48);
  if (((1 << v8) & v10) != 0)
  {
    if (*(unsigned __int8 *)(v12 + v8) == (_DWORD)v2)
      goto LABEL_12;
    v13 = ~v7;
    v8 = (v8 + 1) & v13;
    v9 = v8 >> 6;
    v10 = *(_QWORD *)(v5 + 8 * (v8 >> 6));
    v11 = 1 << v8;
    if ((v10 & (1 << v8)) != 0)
    {
      if (*(unsigned __int8 *)(v12 + v8) == (_DWORD)v2)
        goto LABEL_12;
      v8 = (v8 + 1) & v13;
      v9 = v8 >> 6;
      v10 = *(_QWORD *)(v5 + 8 * (v8 >> 6));
      v11 = 1 << v8;
      if ((v10 & (1 << v8)) != 0)
      {
        if (*(unsigned __int8 *)(v12 + v8) == (_DWORD)v2)
          goto LABEL_12;
        v8 = (v8 + 1) & v13;
        v9 = v8 >> 6;
        v10 = *(_QWORD *)(v5 + 8 * (v8 >> 6));
        v11 = 1 << v8;
        if ((v10 & (1 << v8)) != 0)
        {
          while (*(unsigned __int8 *)(v12 + v8) != (_DWORD)v2)
          {
            v8 = (v8 + 1) & v13;
            v9 = v8 >> 6;
            v10 = *(_QWORD *)(v5 + 8 * (v8 >> 6));
            v11 = 1 << v8;
            if ((v10 & (1 << v8)) == 0)
              goto LABEL_10;
          }
          goto LABEL_12;
        }
      }
    }
  }
LABEL_10:
  *(_QWORD *)(v5 + 8 * v9) = v11 | v10;
  *(_BYTE *)(v12 + v8) = v2;
  v14 = *(_QWORD *)(v4 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    goto LABEL_54;
  *(_QWORD *)(v4 + 16) = v16;
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v17 = (_QWORD *)result;
  v18 = 0;
  v19 = result + 64;
  do
  {
    v20 = outlined read-only object #0 of _CalendarBridged.maximumRange(of:)[v18 + 32];
    if (v20 == 18)
      break;
    v21 = *(_QWORD *)&outlined read-only object #0 of _CalendarBridged.maximumRange(of:)[v18 + 40];
    result = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.maximumRange(of:)[v18 + 32]);
    if ((v22 & 1) != 0)
      goto LABEL_51;
    *(_QWORD *)(v19 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v17[6] + result) = v20;
    *(_QWORD *)(v17[7] + 8 * result) = v21;
    v23 = v17[2];
    v15 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v15)
      goto LABEL_52;
    v17[2] = v24;
    v18 += 16;
  }
  while (v18 != 256);
  v25 = 0;
  v26 = 0;
  v27 = 1 << *(_BYTE *)(v4 + 32);
  v28 = *(_QWORD *)(v4 + 56);
  v29 = -1;
  if (v27 < 64)
    v29 = ~(-1 << v27);
  v30 = v29 & v28;
  v31 = (unint64_t)(v27 + 63) >> 6;
  if ((v29 & v28) == 0)
    goto LABEL_22;
LABEL_20:
  v32 = __clz(__rbit64(v30));
  v30 &= v30 - 1;
  v33 = v32 | (v25 << 6);
  if (v17[2])
  {
    while (1)
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v33));
      if ((v37 & 1) == 0)
        break;
      v38 = *(_QWORD *)(v17[7] + 8 * result);
      if ((v38 & ~v26) == 0)
        v38 = 0;
      v26 |= v38;
      if (v30)
        goto LABEL_20;
LABEL_22:
      v34 = v25 + 1;
      if (__OFADD__(v25, 1))
        goto LABEL_50;
      if (v34 >= v31)
      {
LABEL_43:
        swift_release();
        swift_release();
        result = (unint64_t)objc_msgSend(v3, sel_maximumRangeOfUnit_, v26);
        if (result == 0x7FFFFFFFFFFFFFFFLL)
          return 0;
        if (__OFADD__(result, v39))
          goto LABEL_55;
        return result;
      }
      v35 = *(_QWORD *)(v5 + 8 * v34);
      ++v25;
      if (!v35)
      {
        v25 = v34 + 1;
        if (v34 + 1 >= v31)
          goto LABEL_43;
        v35 = *(_QWORD *)(v5 + 8 * v25);
        if (!v35)
        {
          v25 = v34 + 2;
          if (v34 + 2 >= v31)
            goto LABEL_43;
          v35 = *(_QWORD *)(v5 + 8 * v25);
          if (!v35)
          {
            v25 = v34 + 3;
            if (v34 + 3 >= v31)
              goto LABEL_43;
            v35 = *(_QWORD *)(v5 + 8 * v25);
            if (!v35)
            {
              v36 = v34 + 4;
              if (v36 >= v31)
                goto LABEL_43;
              v35 = *(_QWORD *)(v5 + 8 * v36);
              if (!v35)
              {
                while (1)
                {
                  v25 = v36 + 1;
                  if (__OFADD__(v36, 1))
                    goto LABEL_53;
                  if (v25 >= v31)
                    goto LABEL_43;
                  v35 = *(_QWORD *)(v5 + 8 * v25);
                  ++v36;
                  if (v35)
                    goto LABEL_37;
                }
              }
              v25 = v36;
            }
          }
        }
      }
LABEL_37:
      v30 = (v35 - 1) & v35;
      v33 = __clz(__rbit64(v35)) + (v25 << 6);
      if (!v17[2])
        goto LABEL_48;
    }
  }
  else
  {
LABEL_48:
    __break(1u);
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

void _CalendarBridged.range(of:in:for:)(unsigned __int8 *a1, unsigned __int8 *a2, double *a3)
{
  uint64_t v3;
  Swift::UInt v4;
  Swift::UInt v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t i;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t j;
  int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  unint64_t v72;
  int64_t v73;
  unint64_t v74;
  int64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  Swift::UInt v84;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  v7 = *(void **)(v3 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v8 = static _SetStorage.allocate(capacity:)();
  v9 = v8 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  v13 = v12 >> 6;
  v14 = *(_QWORD *)(v8 + 56 + 8 * (v12 >> 6));
  v15 = 1 << v12;
  v16 = *(_QWORD *)(v8 + 48);
  if (((1 << v12) & v14) == 0)
    goto LABEL_10;
  if (*(unsigned __int8 *)(v16 + v12) == (_DWORD)v4)
    goto LABEL_12;
  v17 = ~v11;
  v12 = (v12 + 1) & v17;
  v13 = v12 >> 6;
  v14 = *(_QWORD *)(v9 + 8 * (v12 >> 6));
  v15 = 1 << v12;
  if ((v14 & (1 << v12)) == 0)
    goto LABEL_10;
  if (*(unsigned __int8 *)(v16 + v12) == (_DWORD)v4)
    goto LABEL_12;
  v12 = (v12 + 1) & v17;
  v13 = v12 >> 6;
  v14 = *(_QWORD *)(v9 + 8 * (v12 >> 6));
  v15 = 1 << v12;
  if ((v14 & (1 << v12)) == 0)
    goto LABEL_10;
  if (*(unsigned __int8 *)(v16 + v12) == (_DWORD)v4)
    goto LABEL_12;
  v12 = (v12 + 1) & v17;
  v13 = v12 >> 6;
  v14 = *(_QWORD *)(v9 + 8 * (v12 >> 6));
  v15 = 1 << v12;
  if ((v14 & (1 << v12)) != 0)
  {
    while (*(unsigned __int8 *)(v16 + v12) != (_DWORD)v4)
    {
      v12 = (v12 + 1) & v17;
      v13 = v12 >> 6;
      v14 = *(_QWORD *)(v9 + 8 * (v12 >> 6));
      v15 = 1 << v12;
      if ((v14 & (1 << v12)) == 0)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    *(_QWORD *)(v9 + 8 * v13) = v15 | v14;
    *(_BYTE *)(v16 + v12) = v4;
    v18 = *(_QWORD *)(v8 + 16);
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_96;
    *(_QWORD *)(v8 + 16) = v20;
  }
LABEL_12:
  v84 = v5;
  v83 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  v21 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  for (i = 0; i != 256; i += 16)
  {
    v23 = outlined read-only object #0 of _CalendarBridged.range(of:in:for:)[i + 32];
    if (v23 == 18)
      break;
    v24 = *(_QWORD *)&outlined read-only object #0 of _CalendarBridged.range(of:in:for:)[i + 40];
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.range(of:in:for:)[i + 32]);
    if ((v26 & 1) != 0)
      goto LABEL_89;
    *(_QWORD *)((char *)v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v25;
    *(_BYTE *)(v21[6] + v25) = v23;
    *(_QWORD *)(v21[7] + 8 * v25) = v24;
    v27 = v21[2];
    v19 = __OFADD__(v27, 1);
    v28 = v27 + 1;
    if (v19)
      goto LABEL_90;
    v21[2] = v28;
  }
  v29 = 0;
  v30 = 0;
  v31 = 1 << *(_BYTE *)(v8 + 32);
  v32 = *(_QWORD *)(v8 + 56);
  v33 = -1;
  if (v31 < 64)
    v33 = ~(-1 << v31);
  v34 = v33 & v32;
  v35 = (unint64_t)(v31 + 63) >> 6;
  if ((v33 & v32) == 0)
    goto LABEL_22;
LABEL_20:
  v36 = __clz(__rbit64(v34));
  v34 &= v34 - 1;
  v37 = v36 | (v29 << 6);
  if (v21[2])
  {
    while (1)
    {
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v8 + 48) + v37));
      if ((v42 & 1) == 0)
        goto LABEL_85;
      v43 = *(_QWORD *)(v21[7] + 8 * v41);
      if ((v43 & ~v30) == 0)
        v43 = 0;
      v30 |= v43;
      if (v34)
        goto LABEL_20;
LABEL_22:
      v38 = v29 + 1;
      if (__OFADD__(v29, 1))
        goto LABEL_88;
      if (v38 >= v35)
        break;
      v39 = *(_QWORD *)(v9 + 8 * v38);
      ++v29;
      if (!v39)
      {
        v29 = v38 + 1;
        if (v38 + 1 >= v35)
          break;
        v39 = *(_QWORD *)(v9 + 8 * v29);
        if (!v39)
        {
          v29 = v38 + 2;
          if (v38 + 2 >= v35)
            break;
          v39 = *(_QWORD *)(v9 + 8 * v29);
          if (!v39)
          {
            v40 = v38 + 3;
            if (v40 >= v35)
              break;
            v39 = *(_QWORD *)(v9 + 8 * v40);
            if (!v39)
            {
              while (1)
              {
                v29 = v40 + 1;
                if (__OFADD__(v40, 1))
                  goto LABEL_94;
                if (v29 >= v35)
                  goto LABEL_41;
                v39 = *(_QWORD *)(v9 + 8 * v29);
                ++v40;
                if (v39)
                  goto LABEL_35;
              }
            }
            v29 = v40;
          }
        }
      }
LABEL_35:
      v34 = (v39 - 1) & v39;
      v37 = __clz(__rbit64(v39)) + (v29 << 6);
      if (!v21[2])
        goto LABEL_84;
    }
LABEL_41:
    swift_release();
    swift_release();
    v44 = static _SetStorage.allocate(capacity:)();
    v45 = v44 + 56;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v84);
    v46 = Hasher._finalize()();
    v47 = -1 << *(_BYTE *)(v44 + 32);
    v48 = v46 & ~v47;
    v49 = v48 >> 6;
    v50 = *(_QWORD *)(v44 + 56 + 8 * (v48 >> 6));
    v51 = 1 << v48;
    v52 = *(_QWORD *)(v44 + 48);
    if (((1 << v48) & v50) == 0)
      goto LABEL_50;
    if (*(unsigned __int8 *)(v52 + v48) == (_DWORD)v84)
      goto LABEL_52;
    v53 = ~v47;
    v48 = (v48 + 1) & v53;
    v49 = v48 >> 6;
    v50 = *(_QWORD *)(v45 + 8 * (v48 >> 6));
    v51 = 1 << v48;
    if ((v50 & (1 << v48)) == 0)
      goto LABEL_50;
    if (*(unsigned __int8 *)(v52 + v48) == (_DWORD)v84)
      goto LABEL_52;
    v48 = (v48 + 1) & v53;
    v49 = v48 >> 6;
    v50 = *(_QWORD *)(v45 + 8 * (v48 >> 6));
    v51 = 1 << v48;
    if ((v50 & (1 << v48)) == 0)
      goto LABEL_50;
    if (*(unsigned __int8 *)(v52 + v48) == (_DWORD)v84)
      goto LABEL_52;
    v48 = (v48 + 1) & v53;
    v49 = v48 >> 6;
    v50 = *(_QWORD *)(v45 + 8 * (v48 >> 6));
    v51 = 1 << v48;
    if ((v50 & (1 << v48)) != 0)
    {
      while (*(unsigned __int8 *)(v52 + v48) != (_DWORD)v84)
      {
        v48 = (v48 + 1) & v53;
        v49 = v48 >> 6;
        v50 = *(_QWORD *)(v45 + 8 * (v48 >> 6));
        v51 = 1 << v48;
        if ((v50 & (1 << v48)) == 0)
          goto LABEL_50;
      }
    }
    else
    {
LABEL_50:
      *(_QWORD *)(v45 + 8 * v49) = v51 | v50;
      *(_BYTE *)(v52 + v48) = v84;
      v54 = *(_QWORD *)(v44 + 16);
      v19 = __OFADD__(v54, 1);
      v55 = v54 + 1;
      if (v19)
        goto LABEL_97;
      *(_QWORD *)(v44 + 16) = v55;
    }
LABEL_52:
    v56 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (j = 0; j != 256; j += 16)
    {
      v58 = outlined read-only object #1 of _CalendarBridged.range(of:in:for:)[j + 32];
      if (v58 == 18)
        break;
      v59 = *(_QWORD *)&outlined read-only object #1 of _CalendarBridged.range(of:in:for:)[j + 40];
      v60 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #1 of _CalendarBridged.range(of:in:for:)[j + 32]);
      if ((v61 & 1) != 0)
        goto LABEL_92;
      *(_QWORD *)((char *)v56 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v60;
      *(_BYTE *)(v56[6] + v60) = v58;
      *(_QWORD *)(v56[7] + 8 * v60) = v59;
      v62 = v56[2];
      v19 = __OFADD__(v62, 1);
      v63 = v62 + 1;
      if (v19)
        goto LABEL_93;
      v56[2] = v63;
    }
    v64 = 0;
    v65 = 0;
    v66 = 1 << *(_BYTE *)(v44 + 32);
    v67 = *(_QWORD *)(v44 + 56);
    v68 = -1;
    if (v66 < 64)
      v68 = ~(-1 << v66);
    v69 = v68 & v67;
    v70 = (unint64_t)(v66 + 63) >> 6;
    if ((v68 & v67) == 0)
      goto LABEL_62;
LABEL_60:
    v71 = __clz(__rbit64(v69));
    v69 &= v69 - 1;
    v72 = v71 | (v64 << 6);
    if (v56[2])
    {
      while (1)
      {
        v76 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v44 + 48) + v72));
        if ((v77 & 1) == 0)
          goto LABEL_87;
        v78 = *(_QWORD *)(v56[7] + 8 * v76);
        if ((v78 & ~v65) == 0)
          v78 = 0;
        v65 |= v78;
        if (v69)
          goto LABEL_60;
LABEL_62:
        v73 = v64 + 1;
        if (__OFADD__(v64, 1))
          goto LABEL_91;
        if (v73 >= v70)
        {
LABEL_81:
          swift_release();
          swift_release();
          v79 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v6);
          v80 = objc_msgSend(v83, sel_rangeOfUnit_inUnit_forDate_, v30, v65, v79);
          v82 = v81;

          if (v80 != (id)0x7FFFFFFFFFFFFFFFLL && __OFADD__(v80, v82))
            goto LABEL_98;
          return;
        }
        v74 = *(_QWORD *)(v45 + 8 * v73);
        ++v64;
        if (!v74)
        {
          v64 = v73 + 1;
          if (v73 + 1 >= v70)
            goto LABEL_81;
          v74 = *(_QWORD *)(v45 + 8 * v64);
          if (!v74)
          {
            v64 = v73 + 2;
            if (v73 + 2 >= v70)
              goto LABEL_81;
            v74 = *(_QWORD *)(v45 + 8 * v64);
            if (!v74)
            {
              v75 = v73 + 3;
              if (v75 >= v70)
                goto LABEL_81;
              v74 = *(_QWORD *)(v45 + 8 * v75);
              if (!v74)
              {
                while (1)
                {
                  v64 = v75 + 1;
                  if (__OFADD__(v75, 1))
                    goto LABEL_95;
                  if (v64 >= v70)
                    goto LABEL_81;
                  v74 = *(_QWORD *)(v45 + 8 * v64);
                  ++v75;
                  if (v74)
                    goto LABEL_75;
                }
              }
              v64 = v75;
            }
          }
        }
LABEL_75:
        v69 = (v74 - 1) & v74;
        v72 = __clz(__rbit64(v74)) + (v64 << 6);
        if (!v56[2])
          goto LABEL_86;
      }
    }
    goto LABEL_86;
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
}

Foundation::DateInterval_optional __swiftcall _CalendarBridged.dateInterval(of:for:)(Foundation::Calendar::Component of, Foundation::Date a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  double v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t i;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  id v47;
  unsigned int v48;
  id v49;
  Swift::Bool v50;
  Swift::Double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  id v57[9];
  double v58[2];
  Foundation::DateInterval_optional result;

  v5 = v3;
  v58[1] = *(double *)MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)of;
  v7 = *v2;
  v58[0] = 0.0;
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, 0.0);
  v9 = *(void **)(v4 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v10 = static _SetStorage.allocate(capacity:)();
  v11 = v10 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v14 >> 6;
  v16 = *(_QWORD *)(v10 + 56 + 8 * (v14 >> 6));
  v17 = 1 << v14;
  v18 = *(_QWORD *)(v10 + 48);
  if (((1 << v14) & v16) == 0)
    goto LABEL_10;
  if (*(unsigned __int8 *)(v18 + v14) == (_DWORD)v6)
    goto LABEL_12;
  v19 = ~v13;
  v14 = (v14 + 1) & v19;
  v15 = v14 >> 6;
  v16 = *(_QWORD *)(v11 + 8 * (v14 >> 6));
  v17 = 1 << v14;
  if ((v16 & (1 << v14)) == 0)
    goto LABEL_10;
  if (*(unsigned __int8 *)(v18 + v14) == (_DWORD)v6)
    goto LABEL_12;
  v14 = (v14 + 1) & v19;
  v15 = v14 >> 6;
  v16 = *(_QWORD *)(v11 + 8 * (v14 >> 6));
  v17 = 1 << v14;
  if ((v16 & (1 << v14)) == 0)
    goto LABEL_10;
  if (*(unsigned __int8 *)(v18 + v14) == (_DWORD)v6)
    goto LABEL_12;
  v14 = (v14 + 1) & v19;
  v15 = v14 >> 6;
  v16 = *(_QWORD *)(v11 + 8 * (v14 >> 6));
  v17 = 1 << v14;
  if ((v16 & (1 << v14)) == 0)
  {
LABEL_10:
    *(_QWORD *)(v11 + 8 * v15) = v17 | v16;
    *(_BYTE *)(v18 + v14) = v6;
    v20 = *(_QWORD *)(v10 + 16);
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_53;
    *(_QWORD *)(v10 + 16) = v22;
    goto LABEL_12;
  }
  while (*(unsigned __int8 *)(v18 + v14) != (_DWORD)v6)
  {
    v14 = (v14 + 1) & v19;
    v15 = v14 >> 6;
    v16 = *(_QWORD *)(v11 + 8 * (v14 >> 6));
    v17 = 1 << v14;
    if ((v16 & (1 << v14)) == 0)
      goto LABEL_10;
  }
LABEL_12:
  v55 = v9;
  v56 = v5;
  v23 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  v24 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  for (i = 0; i != 256; i += 16)
  {
    v26 = outlined read-only object #0 of _CalendarBridged.dateInterval(of:for:)[i + 32];
    if (v26 == 18)
      break;
    v27 = *(_QWORD *)&outlined read-only object #0 of _CalendarBridged.dateInterval(of:for:)[i + 40];
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.dateInterval(of:for:)[i + 32]);
    if ((v29 & 1) != 0)
      goto LABEL_50;
    *(_QWORD *)((char *)v24 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v28;
    *(_BYTE *)(v24[6] + v28) = v26;
    *(_QWORD *)(v24[7] + 8 * v28) = v27;
    v30 = v24[2];
    v21 = __OFADD__(v30, 1);
    v31 = v30 + 1;
    if (v21)
      goto LABEL_51;
    v24[2] = v31;
  }
  v32 = 0;
  v33 = 0;
  v34 = 1 << *(_BYTE *)(v10 + 32);
  v35 = *(_QWORD *)(v10 + 56);
  v36 = -1;
  if (v34 < 64)
    v36 = ~(-1 << v34);
  v37 = v36 & v35;
  v38 = (unint64_t)(v34 + 63) >> 6;
  if ((v36 & v35) == 0)
    goto LABEL_22;
LABEL_20:
  v39 = __clz(__rbit64(v37));
  v37 &= v37 - 1;
  v40 = v39 | (v32 << 6);
  if (!v24[2])
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  while (1)
  {
    v44 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v10 + 48) + v40));
    if ((v45 & 1) == 0)
      goto LABEL_48;
    v46 = *(_QWORD *)(v24[7] + 8 * v44);
    if ((v46 & ~v33) == 0)
      v46 = 0;
    v33 |= v46;
    if (v37)
      goto LABEL_20;
LABEL_22:
    v41 = v32 + 1;
    if (__OFADD__(v32, 1))
      goto LABEL_49;
    if (v41 >= v38)
      break;
    v42 = *(_QWORD *)(v11 + 8 * v41);
    ++v32;
    if (!v42)
    {
      v32 = v41 + 1;
      if (v41 + 1 >= v38)
        break;
      v42 = *(_QWORD *)(v11 + 8 * v32);
      if (!v42)
      {
        v32 = v41 + 2;
        if (v41 + 2 >= v38)
          break;
        v42 = *(_QWORD *)(v11 + 8 * v32);
        if (!v42)
        {
          v43 = v41 + 3;
          if (v43 >= v38)
            break;
          v42 = *(_QWORD *)(v11 + 8 * v43);
          if (!v42)
          {
            while (1)
            {
              v32 = v43 + 1;
              if (__OFADD__(v43, 1))
                break;
              if (v32 >= v38)
                goto LABEL_41;
              v42 = *(_QWORD *)(v11 + 8 * v32);
              ++v43;
              if (v42)
                goto LABEL_35;
            }
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
          }
          v32 = v43;
        }
      }
    }
LABEL_35:
    v37 = (v42 - 1) & v42;
    v40 = __clz(__rbit64(v42)) + (v32 << 6);
    if (!v24[2])
      goto LABEL_47;
  }
LABEL_41:
  swift_release();
  swift_release();
  v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v7);
  v57[0] = v8;
  v48 = objc_msgSend(v55, sel_rangeOfUnit_startDate_interval_forDate_, v33, v57, v58, v47);

  v49 = v57[0];
  if (v48)
  {
    if (v49)
    {
      objc_msgSend(v49, sel_timeIntervalSinceReferenceDate);
      v54 = v53;

      v51 = v58[0];
      if (v58[0] < 0.0)
        goto LABEL_54;
      *(_QWORD *)v56 = v54;
      *(Swift::Double *)(v56 + 8) = v51;
      *(_BYTE *)(v56 + 16) = 0;
    }
    else
    {
      *(_QWORD *)v56 = 0;
      *(_QWORD *)(v56 + 8) = 0;
      *(_BYTE *)(v56 + 16) = 1;
    }
  }
  else
  {

    *(_QWORD *)v56 = 0;
    *(_QWORD *)(v56 + 8) = 0;
    *(_BYTE *)(v56 + 16) = 1;
  }
  result.value.duration = v52;
  result.value.start._time = v51;
  result.is_nil = v50;
  return result;
}

Swift::Int_optional __swiftcall _CalendarBridged.ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  double *v3;
  uint64_t v4;
  Swift::UInt v5;
  Swift::UInt v6;
  double v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Bool v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  unint64_t v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  Swift::UInt v77;
  Swift::Int_optional result;

  v5 = *(unsigned __int8 *)of;
  v6 = *(unsigned __int8 *)in;
  v7 = *v3;
  v8 = *(void **)(v4 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v9 = static _SetStorage.allocate(capacity:)();
  v10 = v9 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  v11 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v9 + 32);
  v14 = v11 & ~v13;
  v15 = v14 >> 6;
  v16 = *(_QWORD *)(v9 + 56 + 8 * (v14 >> 6));
  v17 = 1 << v14;
  v18 = *(_QWORD *)(v9 + 48);
  if (((1 << v14) & v16) == 0)
    goto LABEL_10;
  if (*(unsigned __int8 *)(v18 + v14) == (_DWORD)v5)
    goto LABEL_12;
  v19 = ~v13;
  v14 = (v14 + 1) & v19;
  v15 = v14 >> 6;
  v16 = *(_QWORD *)(v10 + 8 * (v14 >> 6));
  v17 = 1 << v14;
  if ((v16 & (1 << v14)) == 0)
    goto LABEL_10;
  if (*(unsigned __int8 *)(v18 + v14) == (_DWORD)v5)
    goto LABEL_12;
  v14 = (v14 + 1) & v19;
  v15 = v14 >> 6;
  v16 = *(_QWORD *)(v10 + 8 * (v14 >> 6));
  v17 = 1 << v14;
  if ((v16 & (1 << v14)) == 0)
    goto LABEL_10;
  if (*(unsigned __int8 *)(v18 + v14) == (_DWORD)v5)
    goto LABEL_12;
  v14 = (v14 + 1) & v19;
  v15 = v14 >> 6;
  v16 = *(_QWORD *)(v10 + 8 * (v14 >> 6));
  v17 = 1 << v14;
  if ((v16 & (1 << v14)) != 0)
  {
    while (*(unsigned __int8 *)(v18 + v14) != (_DWORD)v5)
    {
      v14 = (v14 + 1) & v19;
      v15 = v14 >> 6;
      v16 = *(_QWORD *)(v10 + 8 * (v14 >> 6));
      v17 = 1 << v14;
      if ((v16 & (1 << v14)) == 0)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    *(_QWORD *)(v10 + 8 * v15) = v17 | v16;
    *(_BYTE *)(v18 + v14) = v5;
    v20 = *(_QWORD *)(v9 + 16);
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_100;
    *(_QWORD *)(v9 + 16) = v22;
  }
LABEL_12:
  v77 = v6;
  v76 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  v11 = static _DictionaryStorage.allocate(capacity:)();
  v23 = (_QWORD *)v11;
  v24 = 0;
  v25 = v11 + 64;
  do
  {
    v26 = outlined read-only object #0 of _CalendarBridged.ordinality(of:in:for:)[v24 + 32];
    if (v26 == 18)
      break;
    v27 = *(_QWORD *)&outlined read-only object #0 of _CalendarBridged.ordinality(of:in:for:)[v24 + 40];
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.ordinality(of:in:for:)[v24 + 32]);
    if (v12)
      goto LABEL_94;
    *(_QWORD *)(v25 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(_BYTE *)(v23[6] + v11) = v26;
    *(_QWORD *)(v23[7] + 8 * v11) = v27;
    v28 = v23[2];
    v21 = __OFADD__(v28, 1);
    v29 = v28 + 1;
    if (v21)
      goto LABEL_95;
    v23[2] = v29;
    v24 += 16;
  }
  while (v24 != 256);
  v30 = 0;
  v31 = 0;
  v32 = 1 << *(_BYTE *)(v9 + 32);
  v33 = *(_QWORD *)(v9 + 56);
  v34 = -1;
  if (v32 < 64)
    v34 = ~(-1 << v32);
  v35 = v34 & v33;
  v36 = (unint64_t)(v32 + 63) >> 6;
  if ((v34 & v33) == 0)
    goto LABEL_22;
LABEL_20:
  v37 = __clz(__rbit64(v35));
  v35 &= v35 - 1;
  v38 = v37 | (v30 << 6);
  if (v23[2])
  {
    while (1)
    {
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + v38));
      if (!v12)
        goto LABEL_89;
      v42 = *(_QWORD *)(v23[7] + 8 * v11);
      if ((v42 & ~v31) == 0)
        v42 = 0;
      v31 |= v42;
      if (v35)
        goto LABEL_20;
LABEL_22:
      v39 = v30 + 1;
      if (__OFADD__(v30, 1))
        goto LABEL_92;
      if (v39 >= v36)
        break;
      v40 = *(_QWORD *)(v10 + 8 * v39);
      ++v30;
      if (!v40)
      {
        v30 = v39 + 1;
        if (v39 + 1 >= v36)
          break;
        v40 = *(_QWORD *)(v10 + 8 * v30);
        if (!v40)
        {
          v30 = v39 + 2;
          if (v39 + 2 >= v36)
            break;
          v40 = *(_QWORD *)(v10 + 8 * v30);
          if (!v40)
          {
            v30 = v39 + 3;
            if (v39 + 3 >= v36)
              break;
            v40 = *(_QWORD *)(v10 + 8 * v30);
            if (!v40)
            {
              v41 = v39 + 4;
              if (v41 >= v36)
                break;
              v40 = *(_QWORD *)(v10 + 8 * v41);
              if (!v40)
              {
                while (1)
                {
                  v30 = v41 + 1;
                  if (__OFADD__(v41, 1))
                    goto LABEL_98;
                  if (v30 >= v36)
                    goto LABEL_43;
                  v40 = *(_QWORD *)(v10 + 8 * v30);
                  ++v41;
                  if (v40)
                    goto LABEL_37;
                }
              }
              v30 = v41;
            }
          }
        }
      }
LABEL_37:
      v35 = (v40 - 1) & v40;
      v38 = __clz(__rbit64(v40)) + (v30 << 6);
      if (!v23[2])
        goto LABEL_88;
    }
LABEL_43:
    swift_release();
    swift_release();
    v43 = static _SetStorage.allocate(capacity:)();
    v44 = v43 + 56;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v77);
    v11 = Hasher._finalize()();
    v45 = -1 << *(_BYTE *)(v43 + 32);
    v46 = v11 & ~v45;
    v47 = v46 >> 6;
    v48 = *(_QWORD *)(v43 + 56 + 8 * (v46 >> 6));
    v49 = 1 << v46;
    v50 = *(_QWORD *)(v43 + 48);
    if (((1 << v46) & v48) == 0)
      goto LABEL_52;
    if (*(unsigned __int8 *)(v50 + v46) == (_DWORD)v77)
      goto LABEL_54;
    v51 = ~v45;
    v46 = (v46 + 1) & v51;
    v47 = v46 >> 6;
    v48 = *(_QWORD *)(v44 + 8 * (v46 >> 6));
    v49 = 1 << v46;
    if ((v48 & (1 << v46)) == 0)
      goto LABEL_52;
    if (*(unsigned __int8 *)(v50 + v46) == (_DWORD)v77)
      goto LABEL_54;
    v46 = (v46 + 1) & v51;
    v47 = v46 >> 6;
    v48 = *(_QWORD *)(v44 + 8 * (v46 >> 6));
    v49 = 1 << v46;
    if ((v48 & (1 << v46)) == 0)
      goto LABEL_52;
    if (*(unsigned __int8 *)(v50 + v46) == (_DWORD)v77)
      goto LABEL_54;
    v46 = (v46 + 1) & v51;
    v47 = v46 >> 6;
    v48 = *(_QWORD *)(v44 + 8 * (v46 >> 6));
    v49 = 1 << v46;
    if ((v48 & (1 << v46)) != 0)
    {
      while (*(unsigned __int8 *)(v50 + v46) != (_DWORD)v77)
      {
        v46 = (v46 + 1) & v51;
        v47 = v46 >> 6;
        v48 = *(_QWORD *)(v44 + 8 * (v46 >> 6));
        v49 = 1 << v46;
        if ((v48 & (1 << v46)) == 0)
          goto LABEL_52;
      }
    }
    else
    {
LABEL_52:
      *(_QWORD *)(v44 + 8 * v47) = v49 | v48;
      *(_BYTE *)(v50 + v46) = v77;
      v52 = *(_QWORD *)(v43 + 16);
      v21 = __OFADD__(v52, 1);
      v53 = v52 + 1;
      if (v21)
        goto LABEL_101;
      *(_QWORD *)(v43 + 16) = v53;
    }
LABEL_54:
    v11 = static _DictionaryStorage.allocate(capacity:)();
    v54 = (_QWORD *)v11;
    v55 = 0;
    v56 = v11 + 64;
    do
    {
      v57 = outlined read-only object #1 of _CalendarBridged.ordinality(of:in:for:)[v55 + 32];
      if (v57 == 18)
        break;
      v58 = *(_QWORD *)&outlined read-only object #1 of _CalendarBridged.ordinality(of:in:for:)[v55 + 40];
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #1 of _CalendarBridged.ordinality(of:in:for:)[v55 + 32]);
      if (v12)
        goto LABEL_96;
      *(_QWORD *)(v56 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(_BYTE *)(v54[6] + v11) = v57;
      *(_QWORD *)(v54[7] + 8 * v11) = v58;
      v59 = v54[2];
      v21 = __OFADD__(v59, 1);
      v60 = v59 + 1;
      if (v21)
        goto LABEL_97;
      v54[2] = v60;
      v55 += 16;
    }
    while (v55 != 256);
    v61 = 0;
    v62 = 0;
    v63 = 1 << *(_BYTE *)(v43 + 32);
    v64 = *(_QWORD *)(v43 + 56);
    v65 = -1;
    if (v63 < 64)
      v65 = ~(-1 << v63);
    v66 = v65 & v64;
    v67 = (unint64_t)(v63 + 63) >> 6;
    if ((v65 & v64) == 0)
      goto LABEL_64;
LABEL_62:
    v68 = __clz(__rbit64(v66));
    v66 &= v66 - 1;
    v69 = v68 | (v61 << 6);
    if (v54[2])
    {
      while (1)
      {
        v11 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v43 + 48) + v69));
        if (!v12)
          goto LABEL_91;
        v73 = *(_QWORD *)(v54[7] + 8 * v11);
        if ((v73 & ~v62) == 0)
          v73 = 0;
        v62 |= v73;
        if (v66)
          goto LABEL_62;
LABEL_64:
        v70 = v61 + 1;
        if (__OFADD__(v61, 1))
          goto LABEL_93;
        if (v70 >= v67)
        {
LABEL_85:
          swift_release();
          swift_release();
          v74 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v7);
          v75 = objc_msgSend(v76, sel_ordinalityOfUnit_inUnit_forDate_, v31, v62, v74);

          v12 = v75 == (id)0x7FFFFFFFFFFFFFFFLL;
          if (v75 == (id)0x7FFFFFFFFFFFFFFFLL)
            v11 = 0;
          else
            v11 = (unint64_t)v75;
          goto LABEL_102;
        }
        v71 = *(_QWORD *)(v44 + 8 * v70);
        ++v61;
        if (!v71)
        {
          v61 = v70 + 1;
          if (v70 + 1 >= v67)
            goto LABEL_85;
          v71 = *(_QWORD *)(v44 + 8 * v61);
          if (!v71)
          {
            v61 = v70 + 2;
            if (v70 + 2 >= v67)
              goto LABEL_85;
            v71 = *(_QWORD *)(v44 + 8 * v61);
            if (!v71)
            {
              v61 = v70 + 3;
              if (v70 + 3 >= v67)
                goto LABEL_85;
              v71 = *(_QWORD *)(v44 + 8 * v61);
              if (!v71)
              {
                v72 = v70 + 4;
                if (v72 >= v67)
                  goto LABEL_85;
                v71 = *(_QWORD *)(v44 + 8 * v72);
                if (!v71)
                {
                  while (1)
                  {
                    v61 = v72 + 1;
                    if (__OFADD__(v72, 1))
                      goto LABEL_99;
                    if (v61 >= v67)
                      goto LABEL_85;
                    v71 = *(_QWORD *)(v44 + 8 * v61);
                    ++v72;
                    if (v71)
                      goto LABEL_79;
                  }
                }
                v61 = v72;
              }
            }
          }
        }
LABEL_79:
        v66 = (v71 - 1) & v71;
        v69 = __clz(__rbit64(v71)) + (v61 << 6);
        if (!v54[2])
          goto LABEL_90;
      }
    }
    goto LABEL_90;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  result.value = v11;
  result.is_nil = v12;
  return result;
}

void _CalendarBridged.date(byAdding:to:wrappingComponents:)(void *__src@<X0>, double *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double v8;
  void *v9;
  Class isa;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[282];

  memcpy(v15, __src, sizeof(v15));
  v8 = *a2;
  v9 = *(void **)(v4 + 16);
  isa = DateComponents._bridgeToObjectiveC()().super.isa;
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v8);
  v12 = objc_msgSend(v9, sel_dateByAddingComponents_toDate_options_, isa, v11, a3 & 1);

  if (v12)
  {
    objc_msgSend(v12, sel_timeIntervalSinceReferenceDate);
    v14 = v13;

  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)a4 = v14;
  *(_BYTE *)(a4 + 8) = v12 == 0;
}

void _CalendarBridged.date(from:)(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[282];

  memcpy(v9, __src, sizeof(v9));
  v4 = *(void **)(v2 + 16);
  isa = DateComponents._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(v4, sel_dateFromComponents_, isa);

  if (v6)
  {
    objc_msgSend(v6, sel_timeIntervalSinceReferenceDate);
    v8 = v7;

  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)a2 = v8;
  *(_BYTE *)(a2 + 8) = v6 == 0;
}

unint64_t _CalendarBridged.dateComponents(_:from:)@<X0>(_QWORD *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  double v5;
  void *v6;
  uint64_t v7;
  unint64_t result;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  _BYTE v36[288];
  _BYTE v37[288];
  uint64_t v38[36];
  __int128 __src[18];
  __int128 __dst[18];

  v5 = *a2;
  v6 = *(void **)(v3 + 16);
  *(_QWORD *)&__dst[0] = *a1;
  v7 = Calendar.ComponentSet.set.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = (_QWORD *)result;
  v10 = 0;
  v11 = result + 64;
  do
  {
    v12 = outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:)[v10 + 32];
    if (v12 == 18)
      break;
    v13 = *(_QWORD *)&outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:)[v10 + 40];
    result = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:)[v10 + 32]);
    if ((v14 & 1) != 0)
      goto LABEL_38;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v9[6] + result) = v12;
    *(_QWORD *)(v9[7] + 8 * result) = v13;
    v15 = v9[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_39;
    v9[2] = v17;
    v10 += 16;
  }
  while (v10 != 256);
  v18 = 0;
  v19 = 0;
  v20 = v7 + 56;
  v21 = 1 << *(_BYTE *)(v7 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & *(_QWORD *)(v7 + 56);
  v24 = (unint64_t)(v21 + 63) >> 6;
  if (!v23)
    goto LABEL_11;
LABEL_9:
  v25 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  v26 = v25 | (v18 << 6);
  if (v9[2])
  {
    while (1)
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v7 + 48) + v26));
      if ((v30 & 1) == 0)
        break;
      v31 = *(_QWORD *)(v9[7] + 8 * result);
      if ((v31 & ~v19) == 0)
        v31 = 0;
      v19 |= v31;
      if (v23)
        goto LABEL_9;
LABEL_11:
      v27 = v18 + 1;
      if (__OFADD__(v18, 1))
        goto LABEL_37;
      if (v27 >= v24)
      {
LABEL_30:
        swift_bridgeObjectRelease();
        swift_release();
        v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v5);
        v33 = objc_msgSend(v6, sel_components_fromDate_, v19, v32);

        if (v33)
        {
          __dst[0] = 0uLL;
          __src[0] = 0uLL;
          v34 = v33;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)__src, 0, 1, 0, 1, 0, 1, (uint64_t)v37, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1);
          destructiveProjectEnumData for PredicateCodableError(v37, v35);
          outlined init with take of DateComponents?((uint64_t)v37, (uint64_t)v36);
          static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v34, (uint64_t)v36);
          outlined init with take of DateComponents?((uint64_t)v36, (uint64_t)v38);
          outlined init with take of DateComponents?((uint64_t)v38, (uint64_t)__src);
          result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src);
          if ((_DWORD)result == 1)
            goto LABEL_41;

          memcpy(__dst, __src, 0x11AuLL);
        }
        else
        {
          __src[0] = 0uLL;
          v38[1] = 0;
          v38[0] = 0;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, v38, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1);
        }
        return (unint64_t)memcpy(a3, __dst, 0x11AuLL);
      }
      v28 = *(_QWORD *)(v20 + 8 * v27);
      ++v18;
      if (!v28)
      {
        v18 = v27 + 1;
        if (v27 + 1 >= v24)
          goto LABEL_30;
        v28 = *(_QWORD *)(v20 + 8 * v18);
        if (!v28)
        {
          v18 = v27 + 2;
          if (v27 + 2 >= v24)
            goto LABEL_30;
          v28 = *(_QWORD *)(v20 + 8 * v18);
          if (!v28)
          {
            v29 = v27 + 3;
            if (v29 >= v24)
              goto LABEL_30;
            v28 = *(_QWORD *)(v20 + 8 * v29);
            if (!v28)
            {
              while (1)
              {
                v18 = v29 + 1;
                if (__OFADD__(v29, 1))
                  goto LABEL_40;
                if (v18 >= v24)
                  goto LABEL_30;
                v28 = *(_QWORD *)(v20 + 8 * v18);
                ++v29;
                if (v28)
                  goto LABEL_24;
              }
            }
            v18 = v29;
          }
        }
      }
LABEL_24:
      v23 = (v28 - 1) & v28;
      v26 = __clz(__rbit64(v28)) + (v18 << 6);
      if (!v9[2])
        goto LABEL_35;
    }
  }
  else
  {
LABEL_35:
    __break(1u);
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void _CalendarBridged.dateComponents(_:from:in:)(double *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v3;
  double v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t ObjectType;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t i;
  int v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  _BYTE v46[288];
  _BYTE v47[288];
  uint64_t v48[36];
  __int128 __src[18];
  __int128 __dst[18];

  v5 = *a1;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(void **)(v3 + 16);
  v8 = objc_msgSend(v7, sel_timeZone);
  if (v8)
  {
    v9 = v8;
    v45 = a3;
    type metadata accessor for _NSSwiftTimeZone();
    v10 = swift_dynamicCastClass();
    if (v10)
    {
      v44 = *(_QWORD *)(v10 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      swift_unknownObjectRetain();

    }
    else
    {
      type metadata accessor for _TimeZoneBridged();
      *(_QWORD *)(swift_allocObject() + 16) = v9;
      v44 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, 255, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    }
    ObjectType = swift_getObjectType();
    v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 120))(ObjectType, v6);
    objc_msgSend(v7, sel_setTimeZone_, v12);

    *(_QWORD *)&__dst[0] = 0xFFFFLL;
    v13 = Calendar.ComponentSet.set.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
    v14 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = 0; i != 256; i += 16)
    {
      v16 = outlined read-only object #1 of _CalendarBridged.dateComponents(_:from:in:)[i + 32];
      if (v16 == 18)
        break;
      v17 = *(_QWORD *)&outlined read-only object #1 of _CalendarBridged.dateComponents(_:from:in:)[i + 40];
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #1 of _CalendarBridged.dateComponents(_:from:in:)[i + 32]);
      if ((v19 & 1) != 0)
        goto LABEL_44;
      *(_QWORD *)((char *)v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v18;
      *(_BYTE *)(v14[6] + v18) = v16;
      *(_QWORD *)(v14[7] + 8 * v18) = v17;
      v20 = v14[2];
      v21 = __OFADD__(v20, 1);
      v22 = v20 + 1;
      if (v21)
        goto LABEL_45;
      v14[2] = v22;
    }
    v23 = 0;
    v24 = 0;
    v25 = v13 + 56;
    v26 = 1 << *(_BYTE *)(v13 + 32);
    v27 = -1;
    if (v26 < 64)
      v27 = ~(-1 << v26);
    v28 = v27 & *(_QWORD *)(v13 + 56);
    v29 = (unint64_t)(v26 + 63) >> 6;
    if (!v28)
      goto LABEL_15;
LABEL_13:
    v30 = __clz(__rbit64(v28));
    v28 &= v28 - 1;
    v31 = v30 | (v23 << 6);
    if (v14[2])
    {
      while (1)
      {
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v13 + 48) + v31));
        if ((v36 & 1) == 0)
          break;
        v37 = *(_QWORD *)(v14[7] + 8 * v35);
        if ((v37 & ~v24) == 0)
          v37 = 0;
        v24 |= v37;
        if (v28)
          goto LABEL_13;
LABEL_15:
        v32 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_43;
        if (v32 >= v29)
        {
LABEL_36:
          swift_bridgeObjectRelease();
          swift_release();
          v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v5);
          v39 = objc_msgSend(v7, sel_components_fromDate_, v24, v38);

          if (v39)
          {
            __dst[0] = 0uLL;
            __src[0] = 0uLL;
            v40 = v39;
            DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)__src, 0, 1, 0, 1, 0, 1, (uint64_t)v47, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
              0,
              1,
              0,
              1,
              0,
              1,
              0,
              1,
              0,
              1,
              0,
              1);
            destructiveProjectEnumData for PredicateCodableError(v47, v41);
            outlined init with take of DateComponents?((uint64_t)v47, (uint64_t)v46);
            static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v40, (uint64_t)v46);
            outlined init with take of DateComponents?((uint64_t)v46, (uint64_t)v48);
            outlined init with take of DateComponents?((uint64_t)v48, (uint64_t)__src);
            if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src) == 1)
              goto LABEL_48;

            memcpy(__dst, __src, 0x11AuLL);
          }
          else
          {
            __src[0] = 0uLL;
            v48[1] = 0;
            v48[0] = 0;
            DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, v48, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
              0,
              1,
              0,
              1,
              0,
              1,
              0,
              1,
              0,
              1,
              0,
              1);
          }
          memcpy(v45, __dst, 0x11AuLL);
          v42 = swift_getObjectType();
          v43 = (void *)(*(uint64_t (**)(uint64_t))(v44 + 120))(v42);
          objc_msgSend(v7, sel_setTimeZone_, v43);
          swift_unknownObjectRelease();

          return;
        }
        v33 = *(_QWORD *)(v25 + 8 * v32);
        ++v23;
        if (!v33)
        {
          v23 = v32 + 1;
          if (v32 + 1 >= v29)
            goto LABEL_36;
          v33 = *(_QWORD *)(v25 + 8 * v23);
          if (!v33)
          {
            v23 = v32 + 2;
            if (v32 + 2 >= v29)
              goto LABEL_36;
            v33 = *(_QWORD *)(v25 + 8 * v23);
            if (!v33)
            {
              v23 = v32 + 3;
              if (v32 + 3 >= v29)
                goto LABEL_36;
              v33 = *(_QWORD *)(v25 + 8 * v23);
              if (!v33)
              {
                v34 = v32 + 4;
                if (v34 >= v29)
                  goto LABEL_36;
                v33 = *(_QWORD *)(v25 + 8 * v34);
                if (!v33)
                {
                  while (1)
                  {
                    v23 = v34 + 1;
                    if (__OFADD__(v34, 1))
                      goto LABEL_46;
                    if (v23 >= v29)
                      goto LABEL_36;
                    v33 = *(_QWORD *)(v25 + 8 * v23);
                    ++v34;
                    if (v33)
                      goto LABEL_30;
                  }
                }
                v23 = v34;
              }
            }
          }
        }
LABEL_30:
        v28 = (v33 - 1) & v33;
        v31 = __clz(__rbit64(v33)) + (v23 << 6);
        if (!v14[2])
          goto LABEL_41;
      }
    }
    else
    {
LABEL_41:
      __break(1u);
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
  }
  __break(1u);
LABEL_48:
  __break(1u);
}

unint64_t _CalendarBridged.dateComponents(_:from:to:)@<X0>(_QWORD *a1@<X0>, double *a2@<X1>, double *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4;
  double v6;
  double v7;
  void *v8;
  uint64_t v9;
  unint64_t result;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  char v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  _BYTE v39[288];
  _BYTE v40[288];
  uint64_t v41[36];
  __int128 __src[18];
  __int128 __dst[18];

  v6 = *a2;
  v7 = *a3;
  v8 = *(void **)(v4 + 16);
  *(_QWORD *)&__dst[0] = *a1;
  v9 = Calendar.ComponentSet.set.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v11 = (_QWORD *)result;
  v12 = 0;
  v13 = result + 64;
  do
  {
    v14 = outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:to:)[v12 + 32];
    if (v14 == 18)
      break;
    v15 = *(_QWORD *)&outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:to:)[v12 + 40];
    result = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:to:)[v12 + 32]);
    if ((v16 & 1) != 0)
      goto LABEL_40;
    *(_QWORD *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v11[6] + result) = v14;
    *(_QWORD *)(v11[7] + 8 * result) = v15;
    v17 = v11[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_41;
    v11[2] = v19;
    v12 += 16;
  }
  while (v12 != 256);
  v20 = 0;
  v21 = 0;
  v22 = v9 + 56;
  v23 = 1 << *(_BYTE *)(v9 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & *(_QWORD *)(v9 + 56);
  v26 = (unint64_t)(v23 + 63) >> 6;
  if (!v25)
    goto LABEL_11;
LABEL_9:
  v27 = __clz(__rbit64(v25));
  v25 &= v25 - 1;
  v28 = v27 | (v20 << 6);
  if (v11[2])
  {
    while (1)
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + v28));
      if ((v32 & 1) == 0)
        break;
      v33 = *(_QWORD *)(v11[7] + 8 * result);
      if ((v33 & ~v21) == 0)
        v33 = 0;
      v21 |= v33;
      if (v25)
        goto LABEL_9;
LABEL_11:
      v29 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_39;
      if (v29 >= v26)
      {
LABEL_32:
        swift_bridgeObjectRelease();
        swift_release();
        v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v6);
        v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v7);
        v36 = objc_msgSend(v8, sel_components_fromDate_toDate_options_, v21, v34, v35, 0);

        if (v36)
        {
          __dst[0] = 0uLL;
          __src[0] = 0uLL;
          v37 = v36;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)__src, 0, 1, 0, 1, 0, 1, (uint64_t)v40, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1);
          destructiveProjectEnumData for PredicateCodableError(v40, v38);
          outlined init with take of DateComponents?((uint64_t)v40, (uint64_t)v39);
          static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v37, (uint64_t)v39);
          outlined init with take of DateComponents?((uint64_t)v39, (uint64_t)v41);
          outlined init with take of DateComponents?((uint64_t)v41, (uint64_t)__src);
          result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src);
          if ((_DWORD)result == 1)
            goto LABEL_43;

          memcpy(__dst, __src, 0x11AuLL);
        }
        else
        {
          __src[0] = 0uLL;
          v41[1] = 0;
          v41[0] = 0;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, v41, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1);
        }
        return (unint64_t)memcpy(a4, __dst, 0x11AuLL);
      }
      v30 = *(_QWORD *)(v22 + 8 * v29);
      ++v20;
      if (!v30)
      {
        v20 = v29 + 1;
        if (v29 + 1 >= v26)
          goto LABEL_32;
        v30 = *(_QWORD *)(v22 + 8 * v20);
        if (!v30)
        {
          v20 = v29 + 2;
          if (v29 + 2 >= v26)
            goto LABEL_32;
          v30 = *(_QWORD *)(v22 + 8 * v20);
          if (!v30)
          {
            v20 = v29 + 3;
            if (v29 + 3 >= v26)
              goto LABEL_32;
            v30 = *(_QWORD *)(v22 + 8 * v20);
            if (!v30)
            {
              v31 = v29 + 4;
              if (v31 >= v26)
                goto LABEL_32;
              v30 = *(_QWORD *)(v22 + 8 * v31);
              if (!v30)
              {
                while (1)
                {
                  v20 = v31 + 1;
                  if (__OFADD__(v31, 1))
                    goto LABEL_42;
                  if (v20 >= v26)
                    goto LABEL_32;
                  v30 = *(_QWORD *)(v22 + 8 * v20);
                  ++v31;
                  if (v30)
                    goto LABEL_26;
                }
              }
              v20 = v31;
            }
          }
        }
      }
LABEL_26:
      v25 = (v30 - 1) & v30;
      v28 = __clz(__rbit64(v30)) + (v20 << 6);
      if (!v11[2])
        goto LABEL_37;
    }
  }
  else
  {
LABEL_37:
    __break(1u);
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _CalendarBridged()
{
  return objc_opt_self();
}

void protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarBridged()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _CalendarProtocol.identifier.getter in conformance _CalendarBridged(_BYTE *a1@<X8>)
{
  uint64_t v1;
  id v3;
  char v4;

  v3 = objc_msgSend(*(id *)(v1 + 16), sel_calendarIdentifier);
  static Calendar._fromNSCalendarIdentifier(_:)(v3, &v4);

  if (v4 == 16)
    __break(1u);
  else
    *a1 = v4;
}

void protocol witness for _CalendarProtocol.timeZone.getter in conformance _CalendarBridged(uint64_t *a1@<X8>)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*(id *)(v1 + 16), sel_timeZone);
  if (v3)
  {
    v4 = v3;
    type metadata accessor for _NSSwiftTimeZone();
    v5 = swift_dynamicCastClass();
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      v7 = *(_QWORD *)(v5 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      swift_unknownObjectRetain();

    }
    else
    {
      type metadata accessor for _TimeZoneBridged();
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v4;
      v7 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, 255, (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged, (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
    }
    *a1 = v6;
    a1[1] = v7;
  }
  else
  {
    __break(1u);
  }
}

id protocol witness for _CalendarProtocol.firstWeekday.getter in conformance _CalendarBridged()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_firstWeekday);
}

id protocol witness for _CalendarProtocol.minimumDaysInFirstWeek.getter in conformance _CalendarBridged()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_minimumDaysInFirstWeek);
}

uint64_t protocol witness for _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:) in conformance _CalendarBridged(uint64_t *a1, uint64_t *a2, void *a3, char a4, void *a5, char a6)
{
  return _CalendarBridged.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(a1, a2, a3, a4 & 1, a5, a6 & 1);
}

unint64_t protocol witness for _CalendarProtocol.minimumRange(of:) in conformance _CalendarBridged(unsigned __int8 *a1)
{
  return _CalendarBridged.minimumRange(of:)(a1);
}

unint64_t protocol witness for _CalendarProtocol.maximumRange(of:) in conformance _CalendarBridged(unsigned __int8 *a1)
{
  return _CalendarBridged.maximumRange(of:)(a1);
}

void protocol witness for _CalendarProtocol.range(of:in:for:) in conformance _CalendarBridged(unsigned __int8 *a1, unsigned __int8 *a2, double *a3)
{
  _CalendarBridged.range(of:in:for:)(a1, a2, a3);
}

unint64_t protocol witness for _CalendarProtocol.ordinality(of:in:for:) in conformance _CalendarBridged(Foundation::Calendar::Component a1, Foundation::Calendar::Component a2, double a3)
{
  return (unint64_t)_CalendarBridged.ordinality(of:in:for:)(a1, a2, *(Foundation::Date *)&a3);
}

id protocol witness for _CalendarProtocol.isDateInWeekend(_:) in conformance _CalendarBridged(double *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(v1 + 16);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  v4 = objc_msgSend(v2, sel_isDateInWeekend_, v3);

  return v4;
}

uint64_t protocol witness for _CalendarProtocol.bridgeToNSCalendar() in conformance _CalendarBridged()
{
  uint64_t v0;
  uint64_t v2;

  objc_msgSend(*(id *)(v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSCalendar();
  swift_dynamicCast();
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _CalendarBridged()
{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;
  void *v4;
  Swift::String v5;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_debugDescription);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  v5._countAndFlagsBits = (uint64_t)v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0x2064656764697262;
}

uint64_t instantiation function for generic protocol witness table for _CalendarBridged(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged, a2, (uint64_t (*)(uint64_t))type metadata accessor for _CalendarBridged, (uint64_t)&protocol conformance descriptor for _CalendarBridged);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t type metadata accessor for NSCalendar()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSCalendar;
  if (!lazy cache variable for type metadata for NSCalendar)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSCalendar);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x186DA9D64](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Platform()
{
  return &type metadata for Platform;
}

Swift::Int one-time initialization function for _pageSize()
{
  Swift::Int result;

  result = _platform_shims_vm_size();
  if (result < 0)
    __break(1u);
  else
    _pageSize = result;
  return result;
}

unint64_t _getSVUID()()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  size_t v4;
  _BYTE v5[37];
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  _BYTE v24[28];
  __int128 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _DWORD v33[7];
  uint64_t v34;
  __int16 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int16 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int16 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  v6 = 0;
  v7 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v21 = 0;
  v34 = 0;
  v35 = 0;
  v40 = 0;
  v47 = 0;
  v8 = 0u;
  v9 = 0u;
  v10 = 0;
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v19 = 0;
  v20 = 0;
  v18 = 0u;
  v23 = 0u;
  memset(v24, 0, sizeof(v24));
  v25 = 0u;
  v22 = 0;
  v26 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  memset(v33, 0, sizeof(v33));
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v41 = 0u;
  v43 = 0;
  v42 = 0;
  v44 = 0u;
  v45 = 0u;
  v46 = 0;
  v48 = 0u;
  v50 = 0;
  v49 = 0;
  v51 = 0u;
  v52 = 0u;
  v4 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_182065BC0;
  *(_QWORD *)(v0 + 32) = 0xE00000001;
  *(_DWORD *)(v0 + 40) = 1;
  *(_DWORD *)(v0 + 44) = getpid();
  v1 = sysctl((int *)(v0 + 32), 4u, v5, &v4, 0, 0);
  swift_bridgeObjectRelease();
  if (v1)
    v2 = 0;
  else
    v2 = v33[3];
  return v2 | ((unint64_t)(v1 != 0) << 32);
}

unint64_t one-time initialization function for _canChangeUIDs()
{
  uid_t v0;
  uid_t v1;
  unint64_t result;
  Swift::Bool v3;

  v0 = geteuid();
  v1 = getuid();
  result = _getSVUID()();
  v3 = (result & 0x100000000) != 0 || v0 != (_DWORD)result;
  if (v1 != v0)
    v3 = 1;
  if (!v1)
    v3 = 1;
  _canChangeUIDs = v3;
  return result;
}

uint64_t one-time initialization function for _cachedUGIDs()
{
  uint64_t result;
  uid_t v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v1 = 0;
  if (pthread_getugid_np(&v1[1], v1))
  {
    v1[1] = geteuid();
    result = getegid();
  }
  else
  {
    result = v1[0];
  }
  _cachedUGIDs._0 = v1[1];
  _cachedUGIDs._1 = result;
  return result;
}

unint64_t specialized static Platform.getUGIDs(allowEffectiveRootUID:)(char a1)
{
  uint64_t v2;
  Swift::UInt32 v3;
  uid_t v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (one-time initialization token for _canChangeUIDs != -1)
    swift_once();
  if (_canChangeUIDs)
  {
    *(_QWORD *)v5 = 0;
    if (pthread_getugid_np(&v5[1], v5))
    {
      v5[1] = geteuid();
      v2 = getegid();
      v3 = v5[1];
      if ((a1 & 1) != 0)
        return v3 | (unint64_t)(v2 << 32);
    }
    else
    {
      v2 = v5[0];
      v3 = v5[1];
      if ((a1 & 1) != 0)
        return v3 | (unint64_t)(v2 << 32);
    }
    goto LABEL_12;
  }
  if (one-time initialization token for _cachedUGIDs != -1)
    swift_once();
  v3 = _cachedUGIDs._0;
  v2 = _cachedUGIDs._1;
  if ((a1 & 1) == 0)
  {
LABEL_12:
    if (!v3)
      v3 = getuid();
  }
  return v3 | (unint64_t)(v2 << 32);
}

void *specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v15;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = *(void **)(*(_QWORD *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v9 = swift_allocObject();
    swift_retain();
    v10 = v8;
    objc_msgSend(v10, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v9 + 16) = v15;
    *(_QWORD *)a1 = v9;
    swift_release();
  }
  v11 = *(void **)(*(_QWORD *)a1 + 16);
  if (a2)
    v12 = a2;
  else
    v12 = 0;
  v13 = v11;
  objc_msgSend(v13, *a5, v12);

  return outlined consume of URL?(a2);
}

void specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = *(void **)(*(_QWORD *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v5 = swift_allocObject();
    swift_retain();
    v6 = v4;
    objc_msgSend(v6, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v5 + 16) = v9;
    *(_QWORD *)a1 = v5;
    swift_release();
  }
  v7 = *(id *)(*(_QWORD *)a1 + 16);
  if (a2)
  {
    swift_bridgeObjectRetain();
    v8 = (void *)_NativeDictionary.bridged()();
  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v7, sel_setAllHTTPHeaderFields_, v8);
  swift_bridgeObjectRelease();

}

void specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = *(void **)(*(_QWORD *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v5 = swift_allocObject();
    swift_retain();
    v6 = v4;
    objc_msgSend(v6, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v5 + 16) = v7;
    *(_QWORD *)a1 = v5;
    swift_release();
  }
  objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_setHTTPBodyStream_, a2);

}

void *URLRequest.url.setter(uint64_t a1)
{
  return URLRequest.url.setter(a1, (SEL *)&selRef_setURL_);
}

void *(*URLRequest.url.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;

  *(_QWORD *)(a1 + 24) = v1;
  v3 = *(id *)(*(_QWORD *)v1 + 16);
  v4 = objc_msgSend(v3, "URL");
  if (v4)
  {
    v5 = v4;
    URL.init(reference:)(v4, &v9);

    v6 = v9;
    v7 = v10;
  }
  else
  {

    v6 = 0;
    v7 = 0uLL;
  }
  *(_QWORD *)a1 = v6;
  *(_OWORD *)(a1 + 8) = v7;
  return URLRequest.url.modify;
}

void *URLRequest.url.modify(uint64_t *a1, char a2)
{
  return URLRequest.url.modify(a1, a2, (SEL *)&selRef_setURL_);
}

id URLRequest.cachePolicy.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_cachePolicy);
}

id (*URLRequest.cachePolicy.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_cachePolicy);
  return URLRequest.cachePolicy.modify;
}

id URLRequest.cachePolicy.modify(uint64_t *a1)
{
  return URLRequest.cachePolicy.setter(*a1);
}

id URLRequest.timeoutInterval.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_timeoutInterval);
}

id (*URLRequest.timeoutInterval.modify(_QWORD *a1))(double *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_timeoutInterval);
  *a1 = v3;
  return URLRequest.timeoutInterval.modify;
}

id URLRequest.timeoutInterval.modify(double *a1)
{
  return URLRequest.timeoutInterval.setter(*a1);
}

void URLRequest.mainDocumentURL.getter(uint64_t a1@<X8>)
{
  URLRequest.url.getter((SEL *)&selRef_mainDocumentURL, a1);
}

void *URLRequest.mainDocumentURL.setter(uint64_t a1)
{
  return URLRequest.url.setter(a1, (SEL *)&selRef_setMainDocumentURL_);
}

void *URLRequest.url.setter(uint64_t a1, SEL *a2)
{
  uint64_t v2;

  return specialized URLRequest._applyMutation<A>(_:)(v2, *(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2);
}

void *(*URLRequest.mainDocumentURL.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;

  *(_QWORD *)(a1 + 24) = v1;
  v3 = *(id *)(*(_QWORD *)v1 + 16);
  v4 = objc_msgSend(v3, sel_mainDocumentURL);
  if (v4)
  {
    v5 = v4;
    URL.init(reference:)(v4, &v9);

    v6 = v9;
    v7 = v10;
  }
  else
  {

    v6 = 0;
    v7 = 0uLL;
  }
  *(_QWORD *)a1 = v6;
  *(_OWORD *)(a1 + 8) = v7;
  return URLRequest.mainDocumentURL.modify;
}

void *URLRequest.mainDocumentURL.modify(uint64_t *a1, char a2)
{
  return URLRequest.url.modify(a1, a2, (SEL *)&selRef_setMainDocumentURL_);
}

void *URLRequest.url.modify(uint64_t *a1, char a2, SEL *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)*a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  if ((a2 & 1) == 0)
    return specialized URLRequest._applyMutation<A>(_:)(a1[3], v4, v5, v6, a3);
  outlined copy of URL?(*a1);
  specialized URLRequest._applyMutation<A>(_:)(v7, v4, v5, v6, a3);
  return outlined consume of URL?(v4);
}

id URLRequest.networkServiceType.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_networkServiceType);
}

id URLRequest.networkServiceType.setter(uint64_t a1)
{
  return URLRequest.cachePolicy.setter(a1, (SEL *)&selRef_setNetworkServiceType_);
}

id (*URLRequest.networkServiceType.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_networkServiceType);
  return URLRequest.networkServiceType.modify;
}

id URLRequest.networkServiceType.modify(uint64_t *a1)
{
  return URLRequest.networkServiceType.setter(*a1);
}

id URLRequest.allowsCellularAccess.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_allowsCellularAccess);
}

id URLRequest.allowsCellularAccess.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAllowsCellularAccess_);
}

id (*URLRequest.allowsCellularAccess.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_allowsCellularAccess);
  return URLRequest.allowsCellularAccess.modify;
}

id URLRequest.allowsCellularAccess.modify(uint64_t a1)
{
  return URLRequest.allowsCellularAccess.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.allowsExpensiveNetworkAccess.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_allowsExpensiveNetworkAccess);
}

id URLRequest.allowsExpensiveNetworkAccess.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAllowsExpensiveNetworkAccess_);
}

id (*URLRequest.allowsExpensiveNetworkAccess.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_allowsExpensiveNetworkAccess);
  return URLRequest.allowsExpensiveNetworkAccess.modify;
}

id URLRequest.allowsExpensiveNetworkAccess.modify(uint64_t a1)
{
  return URLRequest.allowsExpensiveNetworkAccess.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.allowsConstrainedNetworkAccess.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_allowsConstrainedNetworkAccess);
}

id URLRequest.allowsConstrainedNetworkAccess.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAllowsConstrainedNetworkAccess_);
}

id (*URLRequest.allowsConstrainedNetworkAccess.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_allowsConstrainedNetworkAccess);
  return URLRequest.allowsConstrainedNetworkAccess.modify;
}

id URLRequest.allowsConstrainedNetworkAccess.modify(uint64_t a1)
{
  return URLRequest.allowsConstrainedNetworkAccess.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.assumesHTTP3Capable.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_assumesHTTP3Capable);
}

id URLRequest.assumesHTTP3Capable.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAssumesHTTP3Capable_);
}

id (*URLRequest.assumesHTTP3Capable.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_assumesHTTP3Capable);
  return URLRequest.assumesHTTP3Capable.modify;
}

id URLRequest.assumesHTTP3Capable.modify(uint64_t a1)
{
  return URLRequest.assumesHTTP3Capable.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.attribution.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_attribution);
}

id URLRequest.attribution.setter(uint64_t a1)
{
  return URLRequest.cachePolicy.setter(a1, (SEL *)&selRef_setAttribution_);
}

id (*URLRequest.attribution.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_attribution);
  return URLRequest.attribution.modify;
}

id URLRequest.attribution.modify(uint64_t *a1)
{
  return URLRequest.attribution.setter(*a1);
}

id URLRequest.requiresDNSSECValidation.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_requiresDNSSECValidation);
}

id URLRequest.requiresDNSSECValidation.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setRequiresDNSSECValidation_);
}

id (*URLRequest.requiresDNSSECValidation.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_requiresDNSSECValidation);
  return URLRequest.requiresDNSSECValidation.modify;
}

id URLRequest.requiresDNSSECValidation.modify(uint64_t a1)
{
  return URLRequest.requiresDNSSECValidation.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.allowsPersistentDNS.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_allowsPersistentDNS);
}

id URLRequest.allowsPersistentDNS.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAllowsPersistentDNS_);
}

id (*URLRequest.allowsPersistentDNS.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_allowsPersistentDNS);
  return URLRequest.allowsPersistentDNS.modify;
}

id URLRequest.allowsPersistentDNS.modify(uint64_t a1)
{
  return URLRequest.allowsPersistentDNS.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.httpMethod.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  v2 = objc_msgSend(v1, sel_HTTPMethod);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void key path getter for URLRequest.httpMethod : URLRequest(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(void **)(*(_QWORD *)a1 + 16);
  swift_retain();
  v4 = v3;
  v5 = objc_msgSend(v4, sel_HTTPMethod);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;
  swift_release();

  *a2 = v6;
  a2[1] = v8;
}

uint64_t (*URLRequest.httpMethod.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  a1[2] = v1;
  v3 = *(id *)(*(_QWORD *)v1 + 16);
  v4 = objc_msgSend(v3, sel_HTTPMethod);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  *a1 = v5;
  a1[1] = v7;
  return URLRequest.httpMethod.modify;
}

uint64_t URLRequest.httpMethod.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  if ((a2 & 1) == 0)
    return specialized URLRequest._applyMutation<A>(_:)(a1[2], *a1, a1[1]);
  swift_bridgeObjectRetain();
  specialized URLRequest._applyMutation<A>(_:)(v4, v3, v2);
  return swift_bridgeObjectRelease();
}

void key path getter for URLRequest.allHTTPHeaderFields : URLRequest(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = *(id *)(*(_QWORD *)a1 + 16);
  swift_retain();
  v4 = objc_msgSend(v3, sel_allHTTPHeaderFields);
  if (v4)
  {
    v5 = v4;
    v6 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4);
    swift_release();

  }
  else
  {
    swift_release();

    v6 = 0;
  }
  *a2 = v6;
}

uint64_t URLRequest.allHTTPHeaderFields.modify(_QWORD *a1)
{
  uint64_t v1;
  _OWORD *v3;
  id v4;
  id v5;
  void *v6;
  _QWORD *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 6) = v1;
  v4 = *(id *)(*(_QWORD *)v1 + 16);
  v5 = objc_msgSend(v4, sel_allHTTPHeaderFields);
  if (!v5)
  {
    v7 = 0;
LABEL_43:

    *((_QWORD *)v3 + 4) = v7;
    return (uint64_t)URLRequest.allHTTPHeaderFields.modify;
  }
  v6 = v5;
  if (MEMORY[0x1E0DEE9B8] + 8 != MEMORY[0x1E0DEA968])
  {
    swift_unknownObjectRetain();
    v7 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (!v7)
    {
      v10 = objc_msgSend(v6, sel_count);
      v11 = v6;
      if (v10)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
        v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
      v41 = (char *)v7[6];
      v42 = v7[7];
      swift_retain();
      v43 = v42;
      v6 = v11;
      result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v41, v43, v11, (uint64_t)v10);
      if (result < 0)
        goto LABEL_47;
      v44 = result;
      if ((uint64_t)v10 < result)
        goto LABEL_47;
      v7[2] = result;
      if (result)
      {
        v68 = v11;
        v69 = v4;
        v45 = v7 + 8;
        while (2)
        {
          v47 = v44--;
          while (((1 << v44) & v45[v44 >> 6]) == 0)
          {
            v48 = (uint64_t *)(v7[6] + 16 * v44);
            v49 = *v48;
            v50 = v48[1];
            swift_bridgeObjectRetain();
            v51 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
            v53 = v52;
            swift_bridgeObjectRelease();
            if ((v53 & 1) != 0)
            {
              swift_arrayDestroy();
              result = swift_arrayDestroy();
              v66 = v7[2];
              v39 = __OFSUB__(v66, 1);
              v67 = v66 - 1;
              if (v39)
                goto LABEL_45;
              v7[2] = v67;
              break;
            }
            *(_QWORD *)((char *)v45 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v51;
            if (v47 <= (uint64_t)v51)
            {
              v46 = 16 * v51;
              *(_OWORD *)(v7[6] + v46) = *(_OWORD *)(v7[6] + 16 * v44);
              *(_OWORD *)(v7[7] + v46) = *(_OWORD *)(v7[7] + 16 * v44);
              break;
            }
            if (v51 == v44)
              break;
            v54 = v7[6];
            v55 = (uint64_t *)(v54 + 16 * v51);
            v56 = (uint64_t *)(v54 + 16 * v44);
            v57 = *v55;
            v58 = v55[1];
            v59 = v56[1];
            *v55 = *v56;
            v55[1] = v59;
            *v56 = v57;
            v56[1] = v58;
            v60 = v7[7];
            v61 = (uint64_t *)(v60 + 16 * v51);
            v62 = (uint64_t *)(v60 + 16 * v44);
            v63 = *v61;
            v64 = v61[1];
            v65 = v62[1];
            *v61 = *v62;
            v61[1] = v65;
            *v62 = v63;
            v62[1] = v64;
          }
          if (v47 >= 2)
            continue;
          break;
        }
LABEL_40:
        v6 = v68;
        v4 = v69;
      }
LABEL_41:
      swift_release();
    }
LABEL_42:

    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  v7 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v7)
    goto LABEL_42;
  v8 = objc_msgSend(v6, sel_count);
  v9 = v6;
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v12 = (_QWORD *)v7[6];
  v13 = v7[7];
  swift_retain();
  v14 = v13;
  v6 = v9;
  result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v12, v14, v9, (uint64_t)v8);
  if ((result & 0x8000000000000000) == 0)
  {
    v16 = result;
    if ((uint64_t)v8 >= result)
    {
      v7[2] = result;
      if (result)
      {
        v68 = v9;
        v69 = v4;
        v17 = v7 + 8;
        while (2)
        {
          v22 = v16--;
          while (1)
          {
            if (((1 << v16) & v17[v16 >> 6]) != 0)
              goto LABEL_16;
            v23 = (uint64_t *)(v7[6] + 16 * v16);
            v24 = *v23;
            v25 = v23[1];
            swift_bridgeObjectRetain();
            v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
            v28 = v27;
            swift_bridgeObjectRelease();
            if ((v28 & 1) != 0)
              break;
            *(_QWORD *)((char *)v17 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
            if (v22 <= (uint64_t)v26)
            {
              *(_OWORD *)(v7[6] + 16 * v26) = *(_OWORD *)(v7[6] + 16 * v16);
              v18 = v7[7];
              v19 = (_OWORD *)(v18 + 32 * v16);
              v20 = v19[1];
              v21 = (_OWORD *)(v18 + 32 * v26);
              *v21 = *v19;
              v21[1] = v20;
              goto LABEL_16;
            }
            if (v26 == v16)
              goto LABEL_16;
            v29 = v7[6];
            v30 = (uint64_t *)(v29 + 16 * v26);
            v31 = (uint64_t *)(v29 + 16 * v16);
            v32 = *v30;
            v33 = v30[1];
            v34 = v31[1];
            *v30 = *v31;
            v30[1] = v34;
            *v31 = v32;
            v31[1] = v33;
            v35 = v7[7];
            v36 = (_OWORD *)(v35 + 32 * v26);
            v37 = (_OWORD *)(v35 + 32 * v16);
            outlined init with take of Any(v36, v3);
            outlined init with take of Any(v37, v36);
            outlined init with take of Any(v3, v37);
          }
          swift_arrayDestroy();
          result = swift_arrayDestroy();
          v38 = v7[2];
          v39 = __OFSUB__(v38, 1);
          v40 = v38 - 1;
          if (!v39)
          {
            v7[2] = v40;
LABEL_16:
            if (v22 < 2)
              goto LABEL_40;
            continue;
          }
          break;
        }
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      goto LABEL_41;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

void URLRequest.allHTTPHeaderFields.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = v2[6];
      v5 = *(void **)(*(_QWORD *)v4 + 16);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
      v6 = swift_allocObject();
      swift_retain();
      v7 = v5;
      objc_msgSend(v7, sel_copy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
      swift_dynamicCast();
      v8 = v2[5];
      swift_release();

      *(_QWORD *)(v6 + 16) = v8;
      *(_QWORD *)v4 = v6;
      swift_release();
    }
    v9 = *(void **)(*(_QWORD *)v2[6] + 16);
    if (v3)
    {
      swift_bridgeObjectRetain();
      v10 = v9;
      v11 = (void *)_NativeDictionary.bridged()();
    }
    else
    {
      v20 = v9;
      v11 = 0;
    }
    objc_msgSend(v9, sel_setAllHTTPHeaderFields_, v11);

    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v12 = v2[6];
      v13 = *(void **)(*(_QWORD *)v12 + 16);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
      v14 = swift_allocObject();
      swift_retain();
      v15 = v13;
      objc_msgSend(v15, sel_copy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
      swift_dynamicCast();
      v16 = v2[5];
      swift_release();

      *(_QWORD *)(v14 + 16) = v16;
      *(_QWORD *)v12 = v14;
      swift_release();
    }
    v17 = *(void **)(*(_QWORD *)v2[6] + 16);
    v18 = v17;
    if (v3)
    {
      swift_bridgeObjectRetain();
      v19 = (void *)_NativeDictionary.bridged()();
    }
    else
    {
      v19 = 0;
    }
    objc_msgSend(v17, sel_setAllHTTPHeaderFields_, v19);

  }
  swift_bridgeObjectRelease();
  free(v2);
}

id URLRequest.httpBody.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  id v4;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  v2 = objc_msgSend(v1, sel_HTTPBody);
  if (v2)
  {
    v3 = v2;
    v4 = specialized Data.init(referencing:)(v3);

  }
  else
  {

    return 0;
  }
  return v4;
}

void key path getter for URLRequest.httpBody : URLRequest(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(id *)(*(_QWORD *)a1 + 16);
  swift_retain();
  v4 = objc_msgSend(v3, sel_HTTPBody);
  if (v4)
  {
    v5 = v4;
    v6 = specialized Data.init(referencing:)(v5);
    v8 = v7;
    swift_release();

  }
  else
  {
    swift_release();

    v6 = 0;
    v8 = 0xF000000000000000;
  }
  *a2 = v6;
  a2[1] = v8;
}

void closure #1 in URLRequest.httpBody.setter(id a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15)
    __asm { BR              X10 }
  objc_msgSend(a1, sel_setHTTPBody_, 0);

}

uint64_t (*URLRequest.httpBody.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;

  a1[2] = v1;
  v3 = *(id *)(*(_QWORD *)v1 + 16);
  v4 = objc_msgSend(v3, sel_HTTPBody);
  if (v4)
  {
    v5 = v4;
    v6 = specialized Data.init(referencing:)(v5);
    v8 = v7;

  }
  else
  {

    v6 = 0;
    v8 = 0xF000000000000000;
  }
  *a1 = v6;
  a1[1] = v8;
  return URLRequest.httpBody.modify;
}

uint64_t URLRequest.httpBody.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((a2 & 1) == 0)
    return specialized URLRequest._applyMutation<A>(_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined copy of Data?(*(_QWORD *)a1, v3);
  specialized URLRequest._applyMutation<A>(_:)(v4, v2, v3);
  return outlined consume of Data?(v2, v3);
}

id URLRequest.httpBodyStream.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_HTTPBodyStream);
}

void URLRequest.httpBodyStream.setter(void *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(void **)(*(_QWORD *)v1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    v4 = swift_allocObject();
    swift_retain();
    v5 = v3;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(_QWORD *)(v4 + 16) = v6;
    *(_QWORD *)v1 = v4;
    swift_release();
  }
  objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_setHTTPBodyStream_, a1);

}

void (*URLRequest.httpBodyStream.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_HTTPBodyStream);
  return URLRequest.httpBodyStream.modify;
}

void URLRequest.httpBodyStream.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v4 = v2;
    specialized URLRequest._applyMutation<A>(_:)(v3, v2);

  }
  else
  {
    specialized URLRequest._applyMutation<A>(_:)(*(_QWORD *)(a1 + 8), *(void **)a1);
  }
}

id URLRequest.httpShouldHandleCookies.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_HTTPShouldHandleCookies);
}

id URLRequest.httpShouldHandleCookies.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setHTTPShouldHandleCookies_);
}

id (*URLRequest.httpShouldHandleCookies.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_HTTPShouldHandleCookies);
  return URLRequest.httpShouldHandleCookies.modify;
}

id URLRequest.httpShouldHandleCookies.modify(uint64_t a1)
{
  return URLRequest.httpShouldHandleCookies.setter(*(_BYTE *)(a1 + 8));
}

id URLRequest.httpShouldUsePipelining.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_HTTPShouldUsePipelining);
}

id (*URLRequest.httpShouldUsePipelining.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_HTTPShouldUsePipelining);
  return URLRequest.httpShouldUsePipelining.modify;
}

id URLRequest.httpShouldUsePipelining.modify(uint64_t a1)
{
  return URLRequest.httpShouldUsePipelining.setter(*(_BYTE *)(a1 + 8));
}

void URLRequest.hash(into:)()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)v0 + 16);
  swift_retain();
  v2 = v1;
  NSObject.hash(into:)();
  swift_release();

}

id static URLRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_isEqual_, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

Swift::Int URLRequest.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(id *)(v1 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URLRequest()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(id *)(v1 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t URLRequest.debugDescription.getter()
{
  return URLRequest.description.getter();
}

uint64_t URLRequest.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  id v22;
  uint64_t v23;
  unsigned __int8 v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  id v95;
  id v96;
  id v97;
  id v98;
  unint64_t v99;
  unint64_t v100;
  id v101;
  uint64_t v102;
  unsigned __int8 v103;
  uint64_t v104;
  unsigned __int8 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;

  v115 = type metadata accessor for Mirror.AncestorRepresentation();
  v113 = *(_QWORD *)(v115 - 8);
  MEMORY[0x1E0C80A78](v115);
  v116 = (char *)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v4);
  v114 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1821005C0;
  *(_OWORD *)(v7 + 32) = xmmword_1821005D0;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(_QWORD *)(v7 + 72) = v8;
  v9 = *(id *)(v6 + 16);
  swift_retain();
  v10 = objc_msgSend(v9, "URL");
  if (v10)
  {
    v11 = v10;
    URL.init(reference:)(v10, &v117);

    v12 = v117;
    v13 = v118;
  }
  else
  {

    v12 = 0;
    v13 = 0uLL;
  }
  *(_QWORD *)(v7 + 48) = v12;
  *(_OWORD *)(v7 + 56) = v13;
  swift_release();
  *(_OWORD *)(v7 + 80) = xmmword_1821005E0;
  v14 = objc_msgSend(*(id *)(v6 + 16), sel_cachePolicy);
  *(_QWORD *)(v7 + 120) = MEMORY[0x1E0DEBB98];
  *(_QWORD *)(v7 + 96) = v14;
  *(_OWORD *)(v7 + 128) = xmmword_1821005F0;
  objc_msgSend(*(id *)(v6 + 16), sel_timeoutInterval);
  *(_QWORD *)(v7 + 168) = MEMORY[0x1E0DEB070];
  *(_QWORD *)(v7 + 144) = v15;
  *(_OWORD *)(v7 + 176) = xmmword_182100600;
  *(_QWORD *)(v7 + 216) = v8;
  v16 = *(void **)(v6 + 16);
  swift_retain();
  v17 = v16;
  v18 = objc_msgSend(v17, sel_mainDocumentURL);
  if (v18)
  {
    v19 = v18;
    URL.init(reference:)(v18, &v117);

    v20 = v117;
    v21 = v118;
  }
  else
  {

    v20 = 0;
    v21 = 0uLL;
  }
  *(_QWORD *)(v7 + 192) = v20;
  *(_OWORD *)(v7 + 200) = v21;
  swift_release();
  *(_QWORD *)(v7 + 224) = 0xD000000000000012;
  *(_QWORD *)(v7 + 232) = 0x800000018230A3C0;
  v22 = objc_msgSend(*(id *)(v6 + 16), sel_networkServiceType);
  type metadata accessor for NSURLRequestNetworkServiceType(0);
  *(_QWORD *)(v7 + 240) = v22;
  *(_QWORD *)(v7 + 264) = v23;
  *(_QWORD *)(v7 + 272) = 0xD000000000000014;
  *(_QWORD *)(v7 + 280) = 0x800000018230A3E0;
  v24 = objc_msgSend(*(id *)(v6 + 16), sel_allowsCellularAccess);
  *(_QWORD *)(v7 + 312) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(v7 + 288) = v24;
  *(_OWORD *)(v7 + 320) = xmmword_182100610;
  v25 = *(void **)(v6 + 16);
  swift_retain();
  v26 = v25;
  v27 = objc_msgSend(v26, sel_HTTPMethod);
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;
  swift_release();

  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v7 + 336) = v28;
  *(_QWORD *)(v7 + 344) = v30;
  *(_QWORD *)(v7 + 360) = v31;
  *(_QWORD *)(v7 + 368) = 0xD000000000000013;
  *(_QWORD *)(v7 + 376) = 0x800000018230A400;
  v32 = *(void **)(v6 + 16);
  swift_retain();
  v33 = v32;
  v34 = objc_msgSend(v33, sel_allHTTPHeaderFields);
  if (!v34)
  {
    swift_release();

    v37 = 0;
LABEL_48:
    *(_QWORD *)(v7 + 408) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]?);
    *(_QWORD *)(v7 + 384) = v37;
    *(_OWORD *)(v7 + 416) = xmmword_182100620;
    v94 = *(void **)(v6 + 16);
    swift_retain();
    v95 = v94;
    v96 = objc_msgSend(v95, sel_HTTPBody);
    if (v96)
    {
      v97 = v96;
      v98 = specialized Data.init(referencing:)(v97);
      v100 = v99;
      swift_release();

    }
    else
    {
      swift_release();

      v98 = 0;
      v100 = 0xF000000000000000;
    }
    *(_QWORD *)(v7 + 456) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    *(_QWORD *)(v7 + 432) = v98;
    *(_QWORD *)(v7 + 440) = v100;
    *(_OWORD *)(v7 + 464) = xmmword_182100630;
    v101 = objc_msgSend(*(id *)(v6 + 16), sel_HTTPBodyStream);
    v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSInputStream?);
    *(_QWORD *)(v7 + 480) = v101;
    *(_QWORD *)(v7 + 504) = v102;
    *(_QWORD *)(v7 + 512) = 0xD000000000000017;
    *(_QWORD *)(v7 + 520) = 0x800000018230A420;
    v103 = objc_msgSend(*(id *)(v6 + 16), sel_HTTPShouldHandleCookies);
    v104 = MEMORY[0x1E0DEAFA0];
    *(_QWORD *)(v7 + 552) = MEMORY[0x1E0DEAFA0];
    *(_BYTE *)(v7 + 528) = v103;
    *(_QWORD *)(v7 + 560) = 0xD000000000000017;
    *(_QWORD *)(v7 + 568) = 0x800000018230A440;
    v105 = objc_msgSend(*(id *)(v6 + 16), sel_HTTPShouldUsePipelining);
    *(_QWORD *)(v7 + 600) = v104;
    *(_BYTE *)(v7 + 576) = v105;
    v117 = v6;
    v119 = v7;
    v106 = *MEMORY[0x1E0DEDFB8];
    v107 = type metadata accessor for Mirror.DisplayStyle();
    v108 = *(_QWORD *)(v107 - 8);
    v109 = v114;
    (*(void (**)(char *, uint64_t, uint64_t))(v108 + 104))(v114, v106, v107);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v109, 0, 1, v107);
    (*(void (**)(char *, _QWORD, uint64_t))(v113 + 104))(v116, *MEMORY[0x1E0DEDFE8], v115);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
    lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
    return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
  }
  v35 = v34;
  v36 = MEMORY[0x1E0DEE9B8];
  if (MEMORY[0x1E0DEE9B8] + 8 != MEMORY[0x1E0DEA968])
  {
    swift_unknownObjectRetain();
    v37 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v37)
      goto LABEL_47;
    v39 = objc_msgSend(v35, sel_count);
    v40 = a1;
    if (v39)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
      v37 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v37 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v69 = (char *)v37[6];
    v70 = v37[7];
    swift_retain();
    result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v69, v70, v35, (uint64_t)v39);
    if (result < 0 || (uint64_t)v39 < result)
      goto LABEL_55;
    v37[2] = result;
    if (!result)
      goto LABEL_46;
    v111 = v40;
    v71 = result - 1;
    v72 = v37 + 8;
    while (1)
    {
      if (((*(_QWORD *)((char *)v72 + (((unint64_t)v71 >> 3) & 0xFFFFFFFFFFFFF8)) >> v71) & 1) != 0)
        goto LABEL_38;
      v74 = (uint64_t *)(v37[6] + 16 * v71);
      v75 = *v74;
      v76 = v74[1];
      swift_bridgeObjectRetain();
      v77 = specialized __RawDictionaryStorage.find<A>(_:)(v75, v76);
      v79 = v78;
      swift_bridgeObjectRelease();
      if ((v79 & 1) != 0)
      {
        swift_arrayDestroy();
        result = swift_arrayDestroy();
        v80 = v37[2];
        v54 = __OFSUB__(v80, 1);
        v81 = v80 - 1;
        if (v54)
          goto LABEL_53;
        v37[2] = v81;
        goto LABEL_38;
      }
      *(_QWORD *)((char *)v72 + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v77;
      if (v71 < (uint64_t)v77)
      {
        v73 = 16 * v77;
        *(_OWORD *)(v37[6] + v73) = *(_OWORD *)(v37[6] + 16 * v71);
        *(_OWORD *)(v37[7] + v73) = *(_OWORD *)(v37[7] + 16 * v71);
LABEL_38:
        if (--v71 < 0)
          goto LABEL_46;
      }
      else
      {
        if (v77 == v71)
          goto LABEL_38;
        v82 = v37[6];
        v83 = (uint64_t *)(v82 + 16 * v77);
        v84 = (uint64_t *)(v82 + 16 * v71);
        v85 = *v83;
        v86 = v83[1];
        v87 = v84[1];
        *v83 = *v84;
        v83[1] = v87;
        *v84 = v85;
        v84[1] = v86;
        v88 = v37[7];
        v89 = (uint64_t *)(v88 + 16 * v77);
        v90 = (uint64_t *)(v88 + 16 * v71);
        v91 = *v89;
        v92 = v89[1];
        v93 = v90[1];
        *v89 = *v90;
        v89[1] = v93;
        *v90 = v91;
        v90[1] = v92;
        if (v71 < 0)
          goto LABEL_46;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  v37 = (_QWORD *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v37)
  {
LABEL_47:
    swift_release();

    goto LABEL_48;
  }
  v38 = objc_msgSend(v35, sel_count);
  v111 = a1;
  if (v38)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v37 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v37 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v42 = (_QWORD *)v37[6];
  v41 = v37[7];
  swift_retain();
  result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v42, v41, v35, (uint64_t)v38);
  if (result < 0 || (uint64_t)v38 < result)
    goto LABEL_54;
  v37[2] = result;
  if (!result)
  {
LABEL_46:
    swift_release();
    goto LABEL_47;
  }
  v44 = v36;
  v45 = result - 1;
  v46 = v37 + 8;
  v112 = v44 + 8;
  while (1)
  {
    while (((*(_QWORD *)((char *)v46 + (((unint64_t)v45 >> 3) & 0xFFFFFFFFFFFFF8)) >> v45) & 1) != 0)
    {
LABEL_28:
      if (--v45 < 0)
        goto LABEL_46;
    }
    v47 = (uint64_t *)(v37[6] + 16 * v45);
    v48 = *v47;
    v49 = v47[1];
    swift_bridgeObjectRetain();
    v50 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v49);
    v52 = v51;
    swift_bridgeObjectRelease();
    if ((v52 & 1) != 0)
      break;
    *(_QWORD *)((char *)v46 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v50;
    if (v45 < (uint64_t)v50)
    {
      *(_OWORD *)(v37[6] + 16 * v50) = *(_OWORD *)(v37[6] + 16 * v45);
      v56 = v37[7];
      v57 = (_OWORD *)(v56 + 32 * v45);
      v58 = v57[1];
      v59 = (_OWORD *)(v56 + 32 * v50);
      *v59 = *v57;
      v59[1] = v58;
      goto LABEL_28;
    }
    if (v50 == v45)
      goto LABEL_28;
    v60 = v37[6];
    v61 = (uint64_t *)(v60 + 16 * v50);
    v62 = (uint64_t *)(v60 + 16 * v45);
    v63 = *v61;
    v64 = v61[1];
    v65 = v62[1];
    *v61 = *v62;
    v61[1] = v65;
    *v62 = v63;
    v62[1] = v64;
    v66 = v37[7];
    v67 = (_OWORD *)(v66 + 32 * v50);
    v68 = (_OWORD *)(v66 + 32 * v45);
    outlined init with take of Any(v67, &v117);
    outlined init with take of Any(v68, v67);
    outlined init with take of Any(&v117, v68);
    if (v45 < 0)
      goto LABEL_46;
  }
  swift_arrayDestroy();
  result = swift_arrayDestroy();
  v53 = v37[2];
  v54 = __OFSUB__(v53, 1);
  v55 = v53 - 1;
  if (!v54)
  {
    v37[2] = v55;
    goto LABEL_28;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLRequest()
{
  return URLRequest.description.getter();
}

uint64_t static URLRequest._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURLRequest);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance URLRequest()
{
  uint64_t v0;
  uint64_t v2;

  objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  return v2;
}

uint64_t NSURLRequest._toCustomAnyHashable()()
{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  void *v4;

  objc_msgSend(v0, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
  v1 = swift_allocObject();
  objc_msgSend(v4, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  *(_QWORD *)(v1 + 16) = v3;

  lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLRequest()
{
  id *v0;
  id v1;

  v1 = *v0;
  NSURLRequest._toCustomAnyHashable()();

}

void specialized static URLRequest._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  swift_release();
  objc_msgSend(a1, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
  v4 = swift_allocObject();
  objc_msgSend(v6, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  *(_QWORD *)(v4 + 16) = v5;

  *a2 = v4;
}

uint64_t specialized static URLRequest._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;
  void *v7;

  swift_release();
  objc_msgSend(a1, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
  v4 = swift_allocObject();
  objc_msgSend(v7, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  *(_QWORD *)(v4 + 16) = v6;

  *a2 = v4;
  return 1;
}

unint64_t lazy protocol witness table accessor for type URLRequest and conformance URLRequest()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLRequest, &type metadata for URLRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLRequest, &type metadata for URLRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLRequest, &type metadata for URLRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLRequest, &type metadata for URLRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLRequest, &type metadata for URLRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for URLRequest(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  a1[2] = lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  a1[3] = lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  result = lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  a1[4] = result;
  return result;
}

double sub_181CA2574@<D0>(uint64_t a1@<X8>)
{
  return keypath_getTm((void (*)(__int128 *__return_ptr))URLRequest.url.getter, a1);
}

void *sub_181CA2580(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (SEL *)&selRef_setURL_);
}

id sub_181CA258C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_1Tm(a1, (SEL *)&selRef_cachePolicy, a2);
}

id sub_181CA2598(uint64_t *a1)
{
  return URLRequest.cachePolicy.setter(*a1);
}

id sub_181CA25BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_timeoutInterval);
  *a2 = v4;
  return result;
}

id sub_181CA25F0(double *a1)
{
  return URLRequest.timeoutInterval.setter(*a1);
}

double sub_181CA2614@<D0>(uint64_t a1@<X8>)
{
  return keypath_getTm((void (*)(__int128 *__return_ptr))URLRequest.mainDocumentURL.getter, a1);
}

double keypath_getTm@<D0>(void (*a1)(__int128 *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v5;
  uint64_t v6;

  a1(&v5);
  v3 = v6;
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

void *sub_181CA2668(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (SEL *)&selRef_setMainDocumentURL_);
}

void *keypath_setTm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = (void *)*a1;
  v8 = a1[1];
  v9 = a1[2];
  outlined copy of URL?(*a1);
  return specialized URLRequest._applyMutation<A>(_:)(a2, v7, v8, v9, a5);
}

id sub_181CA26D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_1Tm(a1, (SEL *)&selRef_networkServiceType, a2);
}

id sub_181CA26E0(uint64_t *a1)
{
  return URLRequest.networkServiceType.setter(*a1);
}

id sub_181CA2704@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_allowsCellularAccess, a2);
}

id sub_181CA2710(char *a1)
{
  return URLRequest.allowsCellularAccess.setter(*a1);
}

id sub_181CA2734@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_allowsExpensiveNetworkAccess, a2);
}

id sub_181CA2740(char *a1)
{
  return URLRequest.allowsExpensiveNetworkAccess.setter(*a1);
}

id sub_181CA2764@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_allowsConstrainedNetworkAccess, a2);
}

id sub_181CA2770(char *a1)
{
  return URLRequest.allowsConstrainedNetworkAccess.setter(*a1);
}

id sub_181CA2794@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_assumesHTTP3Capable, a2);
}

id sub_181CA27A0(char *a1)
{
  return URLRequest.assumesHTTP3Capable.setter(*a1);
}

id sub_181CA27C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_1Tm(a1, (SEL *)&selRef_attribution, a2);
}

id keypath_get_1Tm@<X0>(uint64_t a1@<X0>, SEL *a2@<X3>, _QWORD *a3@<X8>)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), *a2);
  *a3 = result;
  return result;
}

id sub_181CA2800(uint64_t *a1)
{
  return URLRequest.attribution.setter(*a1);
}

id sub_181CA2824@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_requiresDNSSECValidation, a2);
}

id sub_181CA2830(char *a1)
{
  return URLRequest.requiresDNSSECValidation.setter(*a1);
}

id sub_181CA2854@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_allowsPersistentDNS, a2);
}

id sub_181CA2860(char *a1)
{
  return URLRequest.allowsPersistentDNS.setter(*a1);
}

uint64_t sub_181CA2888(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  return specialized URLRequest._applyMutation<A>(_:)(a2, v3, v4);
}

void sub_181CA28C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  swift_bridgeObjectRetain();
  specialized URLRequest._applyMutation<A>(_:)(a2, v3);
}

uint64_t sub_181CA28FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  outlined copy of Data?(*a1, v4);
  return specialized URLRequest._applyMutation<A>(_:)(a2, v3, v4);
}

id sub_181CA293C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_HTTPBodyStream);
  *a2 = result;
  return result;
}

void sub_181CA2978(id *a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = *a1;
  v4 = *a1;
  specialized URLRequest._applyMutation<A>(_:)(a2, v3);
}

id sub_181CA29A4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_HTTPShouldHandleCookies, a2);
}

id sub_181CA29B0(char *a1)
{
  return URLRequest.httpShouldHandleCookies.setter(*a1);
}

id sub_181CA29D4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, (SEL *)&selRef_HTTPShouldUsePipelining, a2);
}

id keypath_get_9Tm@<X0>(uint64_t a1@<X0>, SEL *a2@<X3>, _BYTE *a3@<X8>)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), *a2);
  *a3 = (_BYTE)result;
  return result;
}

id sub_181CA2A10(char *a1)
{
  return URLRequest.httpShouldUsePipelining.setter(*a1);
}

void _BPlistEncodingFormat.Writer.serializePlist(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(a1, v3);
  *(_BYTE *)(v1 + 8) = 8 - (__clz(v3[0]) >> 3);
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)"bplist00", 8);
  _BPlistEncodingFormat.Writer.append(_:)(a1);
  __asm { BR              X14 }
}

uint64_t sub_181CA2AD8@<X0>(uint64_t a1@<X8>, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__src, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v45;
  _QWORD v46[18];

  v29 = BYTE6(v27) + a1;
  if (__OFADD__(BYTE6(v27), a1))
    goto LABEL_27;
  if ((v29 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181CA2D50);
  }
  v30 = __clz(v29) >> 3;
  v31 = (8 - v30);
  v32 = *v28;
  v33 = *(_QWORD *)(*v28 + 16);
  if (v33)
  {
    v45 = BYTE6(v27) + a1;
    swift_bridgeObjectRetain();
    for (i = 0; i != v33; ++i)
    {
      v46[0] = bswap64(*(_QWORD *)(v32 + 8 * i + 32));
      if ((_DWORD)v30 != 8)
      {
        v35 = v28[4];
        v36 = 0x2000 - v35;
        if (__OFSUB__(0x2000, v35))
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          JUMPOUT(0x181CA2CF8);
        }
        if (v36 >= v31)
          v37 = (8 - v30);
        else
          v37 = 0x2000 - v35;
        if (v36 >= v31)
        {
          v38 = v28[2];
          if (!v38)
            __break(1u);
          memmove((void *)(v38 + v35), (char *)&v46[1] - v31, (8 - v30));
          if (__OFADD__(v35, v37))
            goto LABEL_26;
          v28[4] = v35 + v37;
        }
        else
        {
          if (v35 > 0)
          {
            Data._Representation.append(contentsOf:)();
            v28[4] = 0;
          }
          Data._Representation.append(contentsOf:)();
        }
      }
    }
    swift_bridgeObjectRelease();
    v39 = *(_QWORD *)(*v28 + 16);
    v29 = v45;
  }
  else
  {
    v39 = 0;
  }
  v40 = *((_BYTE *)v28 + 8);
  WORD2(v46[0]) = 0;
  LODWORD(v46[0]) = 0;
  BYTE6(v46[0]) = 8 - v30;
  HIBYTE(v46[0]) = v40;
  v46[1] = bswap64(v39);
  v46[2] = 0;
  v46[3] = bswap64(v29);
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)v46, 32);
  if ((uint64_t)v28[4] >= 1)
  {
    Data._Representation.append(contentsOf:)();
    v28[4] = 0;
  }
  v41 = v28[5];
  v42 = v28[6];
  v43 = v28[2];
  outlined copy of Data._Representation(v41, v42);
  if (v43)
    MEMORY[0x186DA9E78](v43, -1, -1);
  return v41;
}

uint64_t specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v9 = v8;
  v46 = a8;
  v47 = a5;
  v49 = a6;
  v48 = a4;
  v14 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v43 - v18;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v43 - v21;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v22, a1, a7);
    swift_dynamicCast();
    v23 = *(_QWORD *)(v9 + 88);
    v24 = *(_QWORD *)(v23 + 16);
    v25 = *(_QWORD *)(v23 + 24);
    v26 = *(_QWORD *)(v23 + 32);
    *(_QWORD *)(v23 + 16) = v51;
    *(_QWORD *)(v23 + 24) = 0;
    *(_QWORD *)(v23 + 32) = 0;
    v27 = *(_BYTE *)(v23 + 40);
    *(_BYTE *)(v23 + 40) = 112;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v24, v25, v26, v27);
    swift_retain();
    v28 = specialized Set._Variant.insert(_:)(&v53, v23);
    v29 = v53;
    if ((v28 & 1) != 0)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      v30 = swift_allocObject();
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0;
      *(_QWORD *)(v30 + 16) = 2;
      *(_BYTE *)(v30 + 40) = -112;
      *(_QWORD *)(v30 + 48) = -1;
      swift_release();
      *(_QWORD *)(v9 + 88) = v30;
    }
  }
  else
  {
    v31 = a1;
    v44 = a2;
    v45 = a3;
    v32 = v48;
    v33 = v49;
    if (swift_dynamicCastMetatype())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v31, a7);
      swift_dynamicCast();
      v34 = v51;
      v35 = v52;
      v29 = _BPlistEncodingFormat.data(_:)(v51, v52);
      outlined consume of Data._Representation(v34, v35);
    }
    else
    {
      v36 = swift_conformsToProtocol2();
      if (v36)
        v37 = a7;
      else
        v37 = 0;
      if (v37)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v31, a7);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Encodable]);
        swift_dynamicCast();
        v29 = specialized __PlistEncoderBPlist.wrap<A>(_:for:_:)(v51, v44, v45, v32, v47, v33);
        swift_bridgeObjectRelease();
      }
      else
      {
        MEMORY[0x1E0C80A78](v36);
        v38 = v45;
        v39 = v46;
        *(&v43 - 4) = a7;
        *(&v43 - 3) = v39;
        *(&v43 - 2) = v31;
        v29 = v9;
        v40 = v50;
        v41 = specialized __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)((void (*)(_QWORD *))partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:), (uint64_t)(&v43 - 6), v44, v38, v32, v47, v33);
        if (!v40)
          return v41;
      }
    }
  }
  return v29;
}

uint64_t __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v45 = a7;
  v8 = v7;
  v43 = a6;
  v44 = a5;
  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v41 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v41 - v20;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, unint64_t, unint64_t))(v13 + 16))(v21, a1, a4);
    swift_dynamicCast();
    v22 = *(_QWORD *)(v8 + 88);
    v23 = *(_QWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 24);
    v25 = *(_QWORD *)(v22 + 32);
    *(_QWORD *)(v22 + 16) = v47;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)(v22 + 32) = 0;
    v26 = *(_BYTE *)(v22 + 40);
    *(_BYTE *)(v22 + 40) = 112;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v23, v24, v25, v26);
    swift_retain();
    v27 = specialized Set._Variant.insert(_:)(&v49, v22);
    v28 = v49;
    if ((v27 & 1) != 0)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      v29 = swift_allocObject();
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0;
      *(_QWORD *)(v29 + 16) = 2;
      *(_BYTE *)(v29 + 40) = -112;
      *(_QWORD *)(v29 + 48) = -1;
      swift_release();
      *(_QWORD *)(v8 + 88) = v29;
    }
  }
  else
  {
    v30 = a1;
    v41 = a2;
    v42 = a3;
    v32 = v44;
    v31 = v45;
    if (swift_dynamicCastMetatype())
    {
      (*(void (**)(char *, unint64_t, unint64_t))(v13 + 16))(v18, v30, a4);
      swift_dynamicCast();
      v33 = v47;
      v34 = v48;
      v28 = _BPlistEncodingFormat.data(_:)(v47, v48);
      outlined consume of Data._Representation(v33, v34);
    }
    else
    {
      v35 = swift_conformsToProtocol2();
      if (v35)
        v36 = a4;
      else
        v36 = 0;
      if (v36)
      {
        (*(void (**)(char *, unint64_t, unint64_t))(v13 + 16))(v15, v30, a4);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Encodable]);
        swift_dynamicCast();
        v28 = __PlistEncoderBPlist.wrap<A>(_:for:_:)(v47, v41, v42, v32, v31);
        swift_bridgeObjectRelease();
      }
      else
      {
        MEMORY[0x1E0C80A78](v35);
        *(&v41 - 6) = a4;
        *(&v41 - 5) = v32;
        v37 = v42;
        *(&v41 - 4) = v43;
        *(&v41 - 3) = (unint64_t)v31;
        *(&v41 - 2) = v30;
        v28 = v8;
        v38 = v46;
        v39 = __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)((void (*)(_QWORD *))partial apply for closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:), (uint64_t)(&v41 - 8), v41, v37, v32, (uint64_t)v31);
        if (!v38)
          return v39;
      }
    }
  }
  return v28;
}

BOOL __PlistEncoderBPlist.canEncodeNewValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16) == *(_QWORD *)(v0 + 48);
}

uint64_t __PlistEncoderBPlist.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  if (((*(uint64_t (**)(void))(*v3 + 240))() & 1) != 0)
  {
    v6 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E0DEE9D8]);
    v8 = v7;
    v10 = v9;
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v6;
    *(_QWORD *)(v11 + 24) = v8;
    *(_QWORD *)(v11 + 32) = v10;
    *(_BYTE *)(v11 + 40) = 96;
    *(_QWORD *)(v11 + 48) = -1;
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_5:
    v14 = type metadata accessor for _PlistKeyedEncodingContainerBPlist(0, a2, a3, v12);
    swift_retain();
    swift_retain();
    MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistKeyedEncodingContainerBPlist<A>, v14);
    return KeyedEncodingContainer.init<A>(_:)();
  }
  result = specialized BidirectionalCollection.last.getter(v3[2]);
  if (result)
  {
    if ((*(_BYTE *)(result + 40) & 0xF0) == 0x60)
      goto LABEL_5;
    result = swift_release();
  }
  __break(1u);
  return result;
}

uint64_t __PlistEncoderBPlist.unkeyedContainer()@<X0>(uint64_t **a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = v1;
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) != 0)
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
      v4 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x1E0DEE9D8]);
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = v4;
    *(_BYTE *)(v5 + 40) = 80;
    *(_QWORD *)(v5 + 48) = -1;
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    goto LABEL_7;
  }
  result = specialized BidirectionalCollection.last.getter(v1[2]);
  if (result)
  {
    v5 = result;
    if ((*(_BYTE *)(result + 40) & 0xF0) == 0x50)
    {
LABEL_7:
      v7 = v2[5];
      a1[3] = (uint64_t *)&unk_1E0F29358;
      a1[4] = (uint64_t *)lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist();
      *a1 = v2;
      a1[1] = (uint64_t *)v5;
      a1[2] = (uint64_t *)v7;
      swift_retain();
      return swift_retain();
    }
    result = swift_release();
  }
  __break(1u);
  return result;
}

uint64_t __PlistEncoderBPlist.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistEncoderBPlist()
{
  return objc_opt_self();
}

uint64_t protocol witness for Encoder.userInfo.getter in conformance __PlistEncoderBPlist()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance __PlistEncoderBPlist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __PlistEncoderBPlist.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance __PlistEncoderBPlist@<X0>(uint64_t **a1@<X8>)
{
  return __PlistEncoderBPlist.unkeyedContainer()(a1);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __PlistEncoderBPlist@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  a1[3] = type metadata accessor for __PlistEncoderBPlist();
  a1[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist, v4, (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist, (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
  *a1 = v3;
  return swift_retain();
}

uint64_t _PlistKeyedEncodingContainerBPlist.encodeNil(forKey:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  unsigned __int8 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;

  v2 = *v0;
  v1 = v0[1];
  v23 = *(_QWORD *)(*v0 + 56);
  swift_retain();
  v3 = dispatch thunk of CodingKey.stringValue.getter();
  v26 = v4;
  if ((specialized Sequence.allSatisfy(_:)(v3, v4) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = (id)String.hashValue.getter();
    v6 = 1;
  }
  else
  {
    v7 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    v5 = objc_msgSend(v7, sel_hash);
    swift_unknownObjectRelease();
    v6 = 0;
  }
  v8 = *(_QWORD *)(v2 + 88);
  v9 = v2;
  v10 = *(_QWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v8 + 32);
  v13 = v26;
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v13;
  *(_QWORD *)(v8 + 32) = v5;
  v14 = *(_BYTE *)(v8 + 40);
  *(_BYTE *)(v8 + 40) = v6;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v3, v13, (uint64_t)v5, v6);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v10, v11, v12, v14);
  swift_retain();
  v15 = specialized Set._Variant.insert(_:)(&v24, v8);
  v16 = v24;
  if ((v15 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 16) = 2;
    *(_BYTE *)(v17 + 40) = -112;
    *(_QWORD *)(v17 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v9 + 88) = v17;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v1 + 40) & 0xF0) == 0x60)
  {
    v24 = *(_QWORD *)(v1 + 16);
    v25 = *(_OWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 16) = 2;
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    *(_BYTE *)(v1 + 40) = -112;
    swift_retain();
    swift_retain();
    specialized OrderedDictionary.subscript.setter(v23, v16);
    v19 = *(_QWORD *)(v1 + 16);
    v20 = *(_QWORD *)(v1 + 24);
    v21 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 16) = v24;
    *(_OWORD *)(v1 + 24) = v25;
    v22 = *(_BYTE *)(v1 + 40);
    *(_BYTE *)(v1 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v19, v20, v21, v22);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  unsigned __int8 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;

  v3 = *v1;
  v2 = v1[1];
  v4 = 16;
  if ((a1 & 1) != 0)
    v4 = 8;
  v25 = *(_QWORD *)(v3 + v4 + 56);
  swift_retain();
  v5 = dispatch thunk of CodingKey.stringValue.getter();
  v28 = v6;
  if ((specialized Sequence.allSatisfy(_:)(v5, v6) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v7 = (id)String.hashValue.getter();
    v8 = 1;
  }
  else
  {
    v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    v7 = objc_msgSend(v9, sel_hash);
    swift_unknownObjectRelease();
    v8 = 0;
  }
  v10 = *(_QWORD *)(v3 + 88);
  v11 = v3;
  v12 = *(_QWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v10 + 24);
  v14 = *(_QWORD *)(v10 + 32);
  v15 = v28;
  *(_QWORD *)(v10 + 16) = v5;
  *(_QWORD *)(v10 + 24) = v15;
  *(_QWORD *)(v10 + 32) = v7;
  v16 = *(_BYTE *)(v10 + 40);
  *(_BYTE *)(v10 + 40) = v8;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v5, v15, (uint64_t)v7, v8);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v12, v13, v14, v16);
  swift_retain();
  v17 = specialized Set._Variant.insert(_:)(&v26, v10);
  v18 = v26;
  if ((v17 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 16) = 2;
    *(_BYTE *)(v19 + 40) = -112;
    *(_QWORD *)(v19 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v11 + 88) = v19;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v2 + 40) & 0xF0) == 0x60)
  {
    v26 = *(_QWORD *)(v2 + 16);
    v27 = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 16) = 2;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_BYTE *)(v2 + 40) = -112;
    swift_retain();
    swift_retain();
    specialized OrderedDictionary.subscript.setter(v25, v18);
    v21 = *(_QWORD *)(v2 + 16);
    v22 = *(_QWORD *)(v2 + 24);
    v23 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 16) = v26;
    *(_OWORD *)(v2 + 24) = v27;
    v24 = *(_BYTE *)(v2 + 40);
    *(_BYTE *)(v2 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v21, v22, v23, v24);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  unsigned __int8 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;

  v6 = *v4;
  v5 = v4[1];
  a4();
  v7 = dispatch thunk of CodingKey.stringValue.getter();
  v30 = v8;
  if ((specialized Sequence.allSatisfy(_:)(v7, v8) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v9 = (id)String.hashValue.getter();
    v10 = 1;
  }
  else
  {
    v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    v9 = objc_msgSend(v11, sel_hash);
    swift_unknownObjectRelease();
    v10 = 0;
  }
  v12 = *(_QWORD *)(v6 + 88);
  v13 = v6;
  v14 = *(_QWORD *)(v12 + 16);
  v15 = *(_QWORD *)(v12 + 24);
  v16 = *(_QWORD *)(v12 + 32);
  v17 = v30;
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v17;
  *(_QWORD *)(v12 + 32) = v9;
  v18 = *(_BYTE *)(v12 + 40);
  *(_BYTE *)(v12 + 40) = v10;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v7, v17, (uint64_t)v9, v10);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v14, v15, v16, v18);
  swift_retain();
  v19 = specialized Set._Variant.insert(_:)(&v28, v12);
  v20 = v28;
  if ((v19 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 16) = 2;
    *(_BYTE *)(v21 + 40) = -112;
    *(_QWORD *)(v21 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v13 + 88) = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v5 + 40) & 0xF0) == 0x60)
  {
    v28 = *(_QWORD *)(v5 + 16);
    v29 = *(_OWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 16) = 2;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_BYTE *)(v5 + 40) = -112;
    swift_retain();
    v23 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v23, v20);
    v24 = *(_QWORD *)(v5 + 16);
    v25 = *(_QWORD *)(v5 + 24);
    v26 = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v5 + 16) = v28;
    *(_OWORD *)(v5 + 24) = v29;
    v27 = *(_BYTE *)(v5 + 40);
    *(_BYTE *)(v5 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v24, v25, v26, v27);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(unint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  id v6;
  unsigned __int8 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  unsigned __int8 v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v5 = *v2;
  v40 = v2[1];
  if ((specialized Sequence.allSatisfy(_:)(a1, a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v6 = (id)String.hashValue.getter();
    v7 = 1;
  }
  else
  {
    v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    v6 = objc_msgSend(v8, sel_hash);
    swift_unknownObjectRelease();
    v7 = 0;
  }
  v9 = *(_QWORD *)(v5 + 88);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  v12 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = v6;
  v13 = *(_BYTE *)(v9 + 40);
  *(_BYTE *)(v9 + 40) = v7;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(a1, a2, (uint64_t)v6, v7);
  v14 = v5;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v10, v11, v12, v13);
  swift_retain();
  if ((specialized Set._Variant.insert(_:)(&v38, v9) & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 16) = 2;
    *(_BYTE *)(v15 + 40) = -112;
    *(_QWORD *)(v15 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v5 + 88) = v15;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v16 = dispatch thunk of CodingKey.stringValue.getter();
  v18 = v17;
  if ((specialized Sequence.allSatisfy(_:)(v16, v17) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v19 = (id)String.hashValue.getter();
    v20 = 1;
  }
  else
  {
    v21 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    v19 = objc_msgSend(v21, sel_hash);
    swift_unknownObjectRelease();
    v20 = 0;
  }
  v22 = *(_QWORD *)(v14 + 88);
  v23 = *(_QWORD *)(v22 + 16);
  v24 = *(_QWORD *)(v22 + 24);
  v37 = v14;
  v25 = *(_QWORD *)(v22 + 32);
  *(_QWORD *)(v22 + 16) = v16;
  *(_QWORD *)(v22 + 24) = v18;
  *(_QWORD *)(v22 + 32) = v19;
  v26 = *(_BYTE *)(v22 + 40);
  *(_BYTE *)(v22 + 40) = v20;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v16, v18, (uint64_t)v19, v20);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v23, v24, v25, v26);
  swift_retain();
  v27 = specialized Set._Variant.insert(_:)(&v38, v22);
  v28 = v38;
  if ((v27 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 24) = 0;
    *(_QWORD *)(v29 + 32) = 0;
    *(_QWORD *)(v29 + 16) = 2;
    *(_BYTE *)(v29 + 40) = -112;
    *(_QWORD *)(v29 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v37 + 88) = v29;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v30 = v40;
  result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v30 + 40) & 0xF0) == 0x60)
  {
    v38 = *(_QWORD *)(v30 + 16);
    v39 = *(_OWORD *)(v30 + 24);
    *(_QWORD *)(v30 + 16) = 2;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_BYTE *)(v30 + 40) = -112;
    swift_retain();
    v32 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v32, v28);
    v33 = *(_QWORD *)(v30 + 16);
    v34 = *(_QWORD *)(v30 + 24);
    v35 = *(_QWORD *)(v30 + 32);
    *(_QWORD *)(v30 + 16) = v38;
    *(_OWORD *)(v30 + 24) = v39;
    v36 = *(_BYTE *)(v30 + 40);
    *(_BYTE *)(v30 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v33, v34, v35, v36);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(float a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  unsigned __int8 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;

  v3 = *v1;
  v2 = v1[1];
  specialized _BPlistEncodingFormat.number<A>(from:)(a1);
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v27 = v5;
  if ((specialized Sequence.allSatisfy(_:)(v4, v5) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v6 = (id)String.hashValue.getter();
    v7 = 1;
  }
  else
  {
    v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    v6 = objc_msgSend(v8, sel_hash);
    swift_unknownObjectRelease();
    v7 = 0;
  }
  v9 = *(_QWORD *)(v3 + 88);
  v10 = v3;
  v11 = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = *(_QWORD *)(v9 + 32);
  v14 = v27;
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = v14;
  *(_QWORD *)(v9 + 32) = v6;
  v15 = *(_BYTE *)(v9 + 40);
  *(_BYTE *)(v9 + 40) = v7;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v4, v14, (uint64_t)v6, v7);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v11, v12, v13, v15);
  swift_retain();
  v16 = specialized Set._Variant.insert(_:)(&v25, v9);
  v17 = v25;
  if ((v16 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 16) = 2;
    *(_BYTE *)(v18 + 40) = -112;
    *(_QWORD *)(v18 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v10 + 88) = v18;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v2 + 40) & 0xF0) == 0x60)
  {
    v25 = *(_QWORD *)(v2 + 16);
    v26 = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 16) = 2;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_BYTE *)(v2 + 40) = -112;
    swift_retain();
    v20 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v20, v17);
    v21 = *(_QWORD *)(v2 + 16);
    v22 = *(_QWORD *)(v2 + 24);
    v23 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 16) = v25;
    *(_OWORD *)(v2 + 24) = v26;
    v24 = *(_BYTE *)(v2 + 40);
    *(_BYTE *)(v2 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v21, v22, v23, v24);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(double a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  unsigned __int8 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;

  v3 = *v1;
  v2 = v1[1];
  specialized _BPlistEncodingFormat.number<A>(from:)(a1);
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v27 = v5;
  if ((specialized Sequence.allSatisfy(_:)(v4, v5) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v6 = (id)String.hashValue.getter();
    v7 = 1;
  }
  else
  {
    v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    v6 = objc_msgSend(v8, sel_hash);
    swift_unknownObjectRelease();
    v7 = 0;
  }
  v9 = *(_QWORD *)(v3 + 88);
  v10 = v3;
  v11 = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = *(_QWORD *)(v9 + 32);
  v14 = v27;
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = v14;
  *(_QWORD *)(v9 + 32) = v6;
  v15 = *(_BYTE *)(v9 + 40);
  *(_BYTE *)(v9 + 40) = v7;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v4, v14, (uint64_t)v6, v7);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v11, v12, v13, v15);
  swift_retain();
  v16 = specialized Set._Variant.insert(_:)(&v25, v9);
  v17 = v25;
  if ((v16 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 16) = 2;
    *(_BYTE *)(v18 + 40) = -112;
    *(_QWORD *)(v18 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v10 + 88) = v18;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v2 + 40) & 0xF0) == 0x60)
  {
    v25 = *(_QWORD *)(v2 + 16);
    v26 = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 16) = 2;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_BYTE *)(v2 + 40) = -112;
    swift_retain();
    v20 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v20, v17);
    v21 = *(_QWORD *)(v2 + 16);
    v22 = *(_QWORD *)(v2 + 24);
    v23 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 16) = v25;
    *(_OWORD *)(v2 + 24) = v26;
    v24 = *(_BYTE *)(v2 + 40);
    *(_BYTE *)(v2 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v21, v22, v23, v24);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode<A>(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  id v31;
  unsigned __int8 v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;

  v53 = a4;
  v54 = a5;
  v52 = a1;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v50 - v12;
  v50 = a2;
  v51 = v5;
  v14 = *(_QWORD *)(*v5 + 40);
  v15 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v50 - v12, a2, v8, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v8);
  v16 = *(_QWORD **)(a3 + 24);
  swift_retain();
  v17 = v57;
  v18 = __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(v52, v14, (unint64_t)v13, v53, v8, v54, v16);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return swift_release();
  }
  v19 = v10;
  v20 = v51;
  if (v18)
  {
    v53 = v18;
  }
  else
  {
    v57 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E0DEE9D8]);
    v53 = v22;
    v54 = v21;
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v23 = swift_allocObject();
    v24 = v54;
    *(_QWORD *)(v23 + 16) = v57;
    *(_QWORD *)(v23 + 24) = v24;
    *(_QWORD *)(v23 + 32) = v53;
    *(_BYTE *)(v23 + 40) = 96;
    v53 = v23;
    *(_QWORD *)(v23 + 48) = -1;
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v9);
  swift_release();
  v26 = *v20;
  v25 = v20[1];
  v27 = dispatch thunk of CodingKey.stringValue.getter();
  v29 = v28;
  v30 = specialized Sequence.allSatisfy(_:)(v27, v28);
  v57 = 0;
  if ((v30 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v31 = (id)String.hashValue.getter();
    v32 = 1;
  }
  else
  {
    v33 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    v31 = objc_msgSend(v33, sel_hash);
    swift_unknownObjectRelease();
    v32 = 0;
  }
  v34 = *(_QWORD *)(v26 + 88);
  v35 = *(_QWORD *)(v34 + 16);
  v36 = *(_QWORD *)(v34 + 24);
  v37 = v26;
  v38 = *(_QWORD *)(v34 + 32);
  *(_QWORD *)(v34 + 16) = v27;
  *(_QWORD *)(v34 + 24) = v29;
  *(_QWORD *)(v34 + 32) = v31;
  v39 = v29;
  v40 = *(_BYTE *)(v34 + 40);
  *(_BYTE *)(v34 + 40) = v32;
  v54 = v39;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v27, v39, (uint64_t)v31, v32);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v35, v36, v38, v40);
  swift_retain();
  v41 = specialized Set._Variant.insert(_:)(&v55, v34);
  v42 = v55;
  if ((v41 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v43 = swift_allocObject();
    *(_QWORD *)(v43 + 24) = 0;
    *(_QWORD *)(v43 + 32) = 0;
    *(_QWORD *)(v43 + 16) = 2;
    *(_BYTE *)(v43 + 40) = -112;
    *(_QWORD *)(v43 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v37 + 88) = v43;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v25 + 40) & 0xF0) == 0x60)
  {
    v55 = *(_QWORD *)(v25 + 16);
    v56 = *(_OWORD *)(v25 + 24);
    *(_QWORD *)(v25 + 16) = 2;
    *(_QWORD *)(v25 + 24) = 0;
    *(_QWORD *)(v25 + 32) = 0;
    *(_BYTE *)(v25 + 40) = -112;
    swift_retain();
    v45 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v45, v42);
    v46 = *(_QWORD *)(v25 + 16);
    v47 = *(_QWORD *)(v25 + 24);
    v48 = *(_QWORD *)(v25 + 32);
    *(_QWORD *)(v25 + 16) = v55;
    *(_OWORD *)(v25 + 24) = v56;
    v49 = *(_BYTE *)(v25 + 40);
    *(_BYTE *)(v25 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v46, v47, v48, v49);
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  id v23;
  unsigned __int8 v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t result;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *boxed_opaque_existential_1;
  void (*v68)(char *, uint64_t);
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  __int128 v86;

  v7 = v6;
  v75 = a5;
  v76 = a6;
  v77 = a4;
  v10 = *(_QWORD *)(a3 + 16);
  v80 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](a1);
  v74 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v79 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v81 = (char *)&v73 - v16;
  v17 = *v7;
  v18 = *(_QWORD *)(a3 + 24);
  v78 = a2;
  v73 = v18;
  v19 = dispatch thunk of CodingKey.stringValue.getter();
  v21 = v20;
  v22 = specialized Sequence.allSatisfy(_:)(v19, v20);
  v82 = v13;
  v83 = v12;
  v84 = v7;
  if ((v22 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v23 = (id)String.hashValue.getter();
    v24 = 1;
  }
  else
  {
    v25 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    v23 = objc_msgSend(v25, sel_hash);
    swift_unknownObjectRelease();
    v24 = 0;
  }
  v26 = *(_QWORD *)(v17 + 88);
  v28 = *(_QWORD *)(v26 + 16);
  v27 = *(_QWORD *)(v26 + 24);
  v29 = *(_QWORD *)(v26 + 32);
  *(_QWORD *)(v26 + 16) = v19;
  *(_QWORD *)(v26 + 24) = v21;
  *(_QWORD *)(v26 + 32) = v23;
  v30 = *(_BYTE *)(v26 + 40);
  *(_BYTE *)(v26 + 40) = v24;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v19, v21, (uint64_t)v23, v24);
  v31 = v28;
  v32 = v17;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v31, v27, v29, v30);
  swift_retain();
  v33 = specialized Set._Variant.insert(_:)(&v85, v26);
  v34 = v85;
  if ((v33 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 24) = 0;
    *(_QWORD *)(v35 + 32) = 0;
    *(_QWORD *)(v35 + 16) = 2;
    *(_BYTE *)(v35 + 40) = -112;
    *(_QWORD *)(v35 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v17 + 88) = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v36 = v84;
  result = swift_bridgeObjectRelease();
  v38 = v36[1];
  v39 = *(_BYTE *)(v38 + 40);
  if ((v39 & 0xF0) != 0x60)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v41 = *(_QWORD *)(v38 + 24);
  v40 = *(_QWORD *)(v38 + 32);
  v42 = *(_QWORD *)(v38 + 16);
  swift_retain();
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v42, v41, v40, v39);
  v43 = specialized OrderedDictionary.subscript.getter(v34, v42, v41, v40);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v42, v41, v40, v39);
  swift_release();
  if (v43)
  {
    if ((*(_BYTE *)(v43 + 40) & 0xF0) == 0x60)
    {
LABEL_13:
      v53 = v36[2];
      v54 = v80;
      v55 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v81, v78, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v55, 0, 1, v10);
      v57 = v82;
      v56 = v83;
      v58 = v79;
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v79, v55, v83);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v58, 1, v10) == 1)
      {
        v59 = *(void (**)(char *, uint64_t))(v57 + 8);
        swift_retain();
        v59(v55, v56);
        v59(v58, v56);
        swift_retain();
LABEL_21:
        v85 = v32;
        *(_QWORD *)&v86 = v43;
        *((_QWORD *)&v86 + 1) = v53;
        v72 = type metadata accessor for _PlistKeyedEncodingContainerBPlist(0, v77, v75, v60);
        swift_retain();
        swift_retain();
        swift_retain();
        MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistKeyedEncodingContainerBPlist<A>, v72);
        KeyedEncodingContainer.init<A>(_:)();
        swift_release();
        swift_release();
        swift_release();
        return swift_release();
      }
      v84 = (uint64_t *)v34;
      v61 = v55;
      v62 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
      v63 = v58;
      v64 = v74;
      v62(v74, v63, v10);
      v65 = (uint64_t *)swift_allocObject();
      v66 = v73;
      v65[5] = v10;
      v65[6] = v66;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v65 + 2);
      v62((char *)boxed_opaque_existential_1, v64, v10);
      v68 = *(void (**)(char *, uint64_t))(v57 + 8);
      swift_retain();
      v68(v61, v56);
      v65[7] = v53;
      if (v53 >> 62)
      {
        if (v53 >> 62 != 1)
        {
          v71 = 1;
          goto LABEL_20;
        }
        v69 = (uint64_t *)((v53 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v69 = (uint64_t *)(v53 + 64);
      }
      v70 = *v69;
      result = swift_retain();
      v71 = v70 + 1;
      if (!__OFADD__(v70, 1))
      {
LABEL_20:
        v65[8] = v71;
        v53 = (unint64_t)v65;
        goto LABEL_21;
      }
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
  }
  v44 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E0DEE9D8]);
  v46 = v45;
  v48 = v47;
  type metadata accessor for _BPlistEncodingFormat.Reference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v44;
  *(_QWORD *)(result + 24) = v46;
  *(_QWORD *)(result + 32) = v48;
  *(_BYTE *)(result + 40) = 96;
  *(_QWORD *)(result + 48) = -1;
  if ((*(_BYTE *)(v38 + 40) & 0xF0) == 0x60)
  {
    v43 = result;
    v85 = *(_QWORD *)(v38 + 16);
    v86 = *(_OWORD *)(v38 + 24);
    *(_QWORD *)(v38 + 16) = 2;
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(v38 + 32) = 0;
    *(_BYTE *)(v38 + 40) = -112;
    swift_retain_n();
    swift_retain();
    specialized OrderedDictionary.subscript.setter(v43, v34);
    v49 = *(_QWORD *)(v38 + 16);
    v50 = *(_QWORD *)(v38 + 24);
    v51 = *(_QWORD *)(v38 + 32);
    *(_QWORD *)(v38 + 16) = v85;
    *(_OWORD *)(v38 + 24) = v86;
    v52 = *(_BYTE *)(v38 + 40);
    *(_BYTE *)(v38 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v49, v50, v51, v52);
    swift_release();
    goto LABEL_13;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  id v21;
  unsigned __int8 v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t result;
  char *v36;
  unsigned __int8 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD, _QWORD);
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  void (*v53)(_QWORD, _QWORD);
  void (*v54)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  __int128 v74;

  v4 = v3;
  v65 = a3;
  v7 = *(_QWORD *)(a2 + 16);
  v67 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v64 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v71 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v63 - v13;
  v15 = *v4;
  v16 = *(_QWORD *)(a2 + 24);
  v66 = a1;
  v63 = v16;
  v17 = dispatch thunk of CodingKey.stringValue.getter();
  v19 = v18;
  v20 = specialized Sequence.allSatisfy(_:)(v17, v18);
  v69 = v10;
  v70 = v9;
  v68 = v14;
  v72 = v4;
  if ((v20 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v21 = (id)String.hashValue.getter();
    v22 = 1;
  }
  else
  {
    v23 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    v21 = objc_msgSend(v23, sel_hash);
    swift_unknownObjectRelease();
    v22 = 0;
  }
  v24 = *(_QWORD *)(v15 + 88);
  v26 = *(_QWORD *)(v24 + 16);
  v25 = *(_QWORD *)(v24 + 24);
  v27 = *(_QWORD *)(v24 + 32);
  *(_QWORD *)(v24 + 16) = v17;
  *(_QWORD *)(v24 + 24) = v19;
  *(_QWORD *)(v24 + 32) = v21;
  v28 = *(_BYTE *)(v24 + 40);
  *(_BYTE *)(v24 + 40) = v22;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v17, v19, (uint64_t)v21, v22);
  v29 = v28;
  v30 = v15;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v26, v25, v27, v29);
  swift_retain();
  v31 = specialized Set._Variant.insert(_:)(&v73, v24);
  v32 = v73;
  if ((v31 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 24) = 0;
    *(_QWORD *)(v33 + 32) = 0;
    *(_QWORD *)(v33 + 16) = 2;
    *(_BYTE *)(v33 + 40) = -112;
    *(_QWORD *)(v33 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v15 + 88) = v33;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v34 = v72;
  result = swift_bridgeObjectRelease();
  v36 = (char *)v34[1];
  v37 = v36[40];
  if ((v37 & 0xF0) == 0x60)
  {
    v39 = *((_QWORD *)v36 + 3);
    v38 = *((_QWORD *)v36 + 4);
    v40 = *((_QWORD *)v36 + 2);
    swift_retain();
    outlined copy of _BPlistEncodingFormat.Reference.Backing(v40, v39, v38, v37);
    v41 = specialized OrderedDictionary.subscript.getter(v32, v40, v39, v38);
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v40, v39, v38, v37);
    swift_release();
    if (v41)
    {
      v42 = (void (*)(_QWORD, _QWORD))v71;
      if ((*(_BYTE *)(v41 + 40) & 0xF0) == 0x50)
        goto LABEL_14;
      __break(1u);
    }
    v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v42 = (void (*)(_QWORD, _QWORD))v71;
    if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
      goto LABEL_25;
    while (1)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      result = swift_allocObject();
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 16) = v43;
      *(_BYTE *)(result + 40) = 80;
      *(_QWORD *)(result + 48) = -1;
      if ((v36[40] & 0xF0) != 0x60)
        goto LABEL_27;
      v41 = result;
      v73 = *((_QWORD *)v36 + 2);
      v74 = *(_OWORD *)(v36 + 24);
      *((_QWORD *)v36 + 2) = 2;
      *((_QWORD *)v36 + 3) = 0;
      *((_QWORD *)v36 + 4) = 0;
      v36[40] = -112;
      swift_retain_n();
      swift_retain();
      specialized OrderedDictionary.subscript.setter(v41, v32);
      v44 = *((_QWORD *)v36 + 2);
      v45 = *((_QWORD *)v36 + 3);
      v46 = *((_QWORD *)v36 + 4);
      *((_QWORD *)v36 + 2) = v73;
      *(_OWORD *)(v36 + 24) = v74;
      v47 = v36[40];
      v36[40] = 96;
      outlined consume of _BPlistEncodingFormat.Reference.Backing(v44, v45, v46, v47);
      swift_release();
LABEL_14:
      v48 = v34[2];
      v49 = v67;
      v50 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v68, v66, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v50, 0, 1, v7);
      v34 = (_QWORD *)v69;
      v51 = v70;
      (*(void (**)(void (*)(_QWORD, _QWORD), char *, uint64_t))(v69 + 16))(v42, v50, v70);
      if ((*(unsigned int (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v49 + 48))(v42, 1, v7) == 1)break;
      v72 = (_QWORD *)v32;
      v53 = v42;
      v54 = *(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v49 + 32);
      v55 = v50;
      v36 = v64;
      v54(v64, v53, v7);
      v56 = (uint64_t *)swift_allocObject();
      v57 = v63;
      v56[5] = v7;
      v56[6] = v57;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v56 + 2);
      v54((char *)boxed_opaque_existential_1, (void (*)(_QWORD, _QWORD))v36, v7);
      v42 = (void (*)(_QWORD, _QWORD))v34[1];
      v7 = v30;
      swift_retain();
      v42(v55, v51);
      v56[7] = v48;
      if (v48 >> 62)
      {
        if (v48 >> 62 != 1)
        {
          v61 = 1;
LABEL_21:
          v56[8] = v61;
          v48 = (unint64_t)v56;
LABEL_22:
          v62 = v65;
          v65[3] = (uint64_t)&unk_1E0F29358;
          v62[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist();
          result = swift_release();
          *v62 = v30;
          v62[1] = v41;
          v62[2] = v48;
          return result;
        }
        v59 = (uint64_t *)((v48 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v59 = (uint64_t *)(v48 + 64);
      }
      v32 = (uint64_t)v72;
      v60 = *v59;
      swift_retain();
      v61 = v60 + 1;
      if (!__OFADD__(v60, 1))
        goto LABEL_21;
      __break(1u);
LABEL_25:
      v43 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x1E0DEE9D8]);
    }
    v52 = (void (*)(char *, uint64_t))v34[1];
    swift_retain();
    v52(v50, v51);
    v52((char *)v42, v51);
    swift_retain();
    goto LABEL_22;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  v5 = *(_QWORD *)(v4 + 40);
  v6 = type metadata accessor for __PlistReferencingEncoderBPlist();
  v7 = swift_allocObject();
  swift_retain();
  swift_retain();
  v8 = swift_retain();
  v9 = specialized __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(v8, 0x7265707573, 0xE500000000000000, 0, 0, v5, v3, v7);
  a1[3] = v6;
  result = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type __PlistReferencingEncoderBPlist and conformance __PlistEncoderBPlist, 255, (uint64_t (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderBPlist, (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
  a1[4] = result;
  *a1 = v9;
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.superEncoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v19 = a1;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  v10 = v3[1];
  v12 = *(_QWORD *)(v11 + 40);
  v13 = type metadata accessor for __PlistReferencingEncoderBPlist();
  v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v19, v6);
  v15 = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  v16 = specialized __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(v11, (uint64_t)v9, v12, v10, v14, v6, v15);
  a3[3] = v13;
  result = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type __PlistReferencingEncoderBPlist and conformance __PlistEncoderBPlist, 255, (uint64_t (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderBPlist, (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
  a3[4] = result;
  *a3 = v16;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>()
{
  return _PlistKeyedEncodingContainerBPlist.encodeNil(forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>(char a1)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>(unint64_t a1, unint64_t a2)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>(double a1)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>(float a1)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return _PlistKeyedEncodingContainerBPlist.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _PlistKeyedEncodingContainerBPlist.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

uint64_t _BPlistEncodingFormat.Reference.insert(_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t result;
  uint64_t v6;

  if ((*(_BYTE *)(v0 + 40) & 0xF0) == 0x50)
  {
    v6 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = 0;
    *(_QWORD *)(v0 + 16) = 2;
    *(_BYTE *)(v0 + 40) = -112;
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    v1 = *(_QWORD *)(v0 + 16);
    v2 = *(_QWORD *)(v0 + 24);
    v3 = *(_QWORD *)(v0 + 32);
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = 0;
    *(_QWORD *)(v0 + 16) = v6;
    v4 = *(_BYTE *)(v0 + 40);
    *(_BYTE *)(v0 + 40) = 80;
    return outlined consume of _BPlistEncodingFormat.Reference.Backing(v1, v2, v3, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _PlistUnkeyedEncodingContainerBPlist.encode(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  id v6;
  unsigned __int8 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *v2;
  if ((specialized Sequence.allSatisfy(_:)(a1, a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v6 = (id)String.hashValue.getter();
    v7 = 1;
  }
  else
  {
    v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    v6 = objc_msgSend(v8, sel_hash);
    swift_unknownObjectRelease();
    v7 = 0;
  }
  v9 = *(_QWORD *)(v5 + 88);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  v12 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = v6;
  v13 = *(_BYTE *)(v9 + 40);
  *(_BYTE *)(v9 + 40) = v7;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(a1, a2, (uint64_t)v6, v7);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v10, v11, v12, v13);
  swift_retain();
  if ((specialized Set._Variant.insert(_:)(&v16, v9) & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 16) = 2;
    *(_BYTE *)(v14 + 40) = -112;
    *(_QWORD *)(v14 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v5 + 88) = v14;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  _BPlistEncodingFormat.Reference.insert(_:)();
  return swift_release();
}

uint64_t _PlistUnkeyedEncodingContainerBPlist.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = v4;
  v6 = v3;
  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v3;
  result = (*(uint64_t (**)(char *, __n128))(v9 + 16))(v12, v10);
  v15 = *(_QWORD *)(v13 + 40);
  v16 = v6[1];
  v17 = *(unsigned __int8 *)(v16 + 40) >> 4;
  if (v17 == 6)
  {
    v18 = v16 + 32;
  }
  else
  {
    if (v17 != 5)
    {
      __break(1u);
      return result;
    }
    v18 = v16 + 16;
  }
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 16);
  swift_retain();
  v20 = specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)((uint64_t)v12, v15, v19, 0, 0, 2, a2, a3);
  if (v5)
  {
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  }
  else
  {
    if (!v20)
    {
      v21 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E0DEE9D8]);
      v23 = v22;
      v27 = v24;
      type metadata accessor for _BPlistEncodingFormat.Reference();
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = v21;
      *(_QWORD *)(v25 + 24) = v23;
      *(_QWORD *)(v25 + 32) = v27;
      *(_BYTE *)(v25 + 40) = 96;
      *(_QWORD *)(v25 + 48) = -1;
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a2);
    _BPlistEncodingFormat.Reference.insert(_:)();
    return swift_release();
  }
}

void _PlistUnkeyedEncodingContainerBPlist.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v4 = v3;
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(unsigned __int8 *)(v7 + 40) >> 4;
  if (v8 == 6)
  {
    v9 = v7 + 32;
  }
  else
  {
    if (v8 != 5)
      goto LABEL_13;
    v9 = v7 + 16;
  }
  v10 = *(_QWORD *)(*(_QWORD *)v9 + 16);
  v11 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E0DEE9D8]);
  v13 = v12;
  v15 = v14;
  type metadata accessor for _BPlistEncodingFormat.Reference();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v11;
  *(_QWORD *)(v16 + 24) = v13;
  *(_QWORD *)(v16 + 32) = v15;
  *(_BYTE *)(v16 + 40) = 96;
  *(_QWORD *)(v16 + 48) = -1;
  _BPlistEncodingFormat.Reference.insert(_:)();
  v17 = *(_QWORD *)(v4 + 16);
  v18 = (_QWORD *)swift_allocObject();
  v18[5] = &type metadata for _CodingKey;
  v18[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v19 = swift_allocObject();
  v18[2] = v19;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 16) = v10;
  *(_BYTE *)(v19 + 40) = 2;
  v18[7] = v17;
  if (!(v17 >> 62))
  {
    v22 = (uint64_t *)(v17 + 64);
    goto LABEL_9;
  }
  v21 = 0;
  if (v17 >> 62 == 1)
  {
    v22 = (uint64_t *)((v17 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_9:
    v21 = *v22;
    swift_retain();
  }
  if (!__OFADD__(v21, 1))
  {
    v18[8] = v21 + 1;
    v23 = type metadata accessor for _PlistKeyedEncodingContainerBPlist(0, a2, a3, v20);
    swift_retain();
    MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistKeyedEncodingContainerBPlist<A>, v23);
    KeyedEncodingContainer.init<A>(_:)();
    return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

void _PlistUnkeyedEncodingContainerBPlist.nestedUnkeyedContainer()(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v2 = v1;
  v4 = v1[1];
  v5 = *(unsigned __int8 *)(v4 + 40) >> 4;
  if (v5 == 6)
  {
    v6 = v4 + 32;
  }
  else
  {
    if (v5 != 5)
      goto LABEL_15;
    v6 = v4 + 16;
  }
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
    v8 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for _BPlistEncodingFormat.Reference();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v8;
  *(_BYTE *)(v9 + 40) = 80;
  *(_QWORD *)(v9 + 48) = -1;
  _BPlistEncodingFormat.Reference.insert(_:)();
  v10 = *v2;
  v11 = v2[2];
  v12 = (_QWORD *)swift_allocObject();
  v12[5] = &type metadata for _CodingKey;
  v12[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v13 = swift_allocObject();
  v12[2] = v13;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = v7;
  *(_BYTE *)(v13 + 40) = 2;
  v12[7] = v11;
  if (!(v11 >> 62))
  {
    v15 = (uint64_t *)(v11 + 64);
    goto LABEL_11;
  }
  v14 = 0;
  if (v11 >> 62 == 1)
  {
    v15 = (uint64_t *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_11:
    v14 = *v15;
    swift_retain();
  }
  if (!__OFADD__(v14, 1))
  {
    v12[8] = v14 + 1;
    a1[3] = &unk_1E0F29358;
    a1[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist();
    *a1 = v10;
    a1[1] = v9;
    a1[2] = v12;
    swift_retain();
    return;
  }
  __break(1u);
LABEL_15:
  __break(1u);
}

void _PlistUnkeyedEncodingContainerBPlist.superEncoder()(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *v1;
  v3 = v1[1];
  v5 = *(unsigned __int8 *)(v3 + 40) >> 4;
  if (v5 == 6)
  {
    v6 = v3 + 32;
    goto LABEL_5;
  }
  if (v5 == 5)
  {
    v6 = v3 + 16;
LABEL_5:
    v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
    v8 = *(_QWORD *)(v4 + 40);
    v9 = type metadata accessor for __PlistReferencingEncoderBPlist();
    swift_allocObject();
    swift_retain();
    swift_retain();
    v10 = swift_retain();
    v11 = __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(v10, v7, v8, v3);
    a1[3] = v9;
    a1[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type __PlistReferencingEncoderBPlist and conformance __PlistEncoderBPlist, 255, (uint64_t (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderBPlist, (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
    *a1 = v11;
    return;
  }
  __break(1u);
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _PlistUnkeyedEncodingContainerBPlist()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v1 + 40) >> 4;
  if (v2 == 6)
  {
    v3 = v1 + 32;
    return *(_QWORD *)(*(_QWORD *)v3 + 16);
  }
  if (v2 == 5)
  {
    v3 = v1 + 16;
    return *(_QWORD *)(*(_QWORD *)v3 + 16);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _PlistUnkeyedEncodingContainerBPlist()
{
  swift_retain();
  _BPlistEncodingFormat.Reference.insert(_:)();
  return swift_release();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist()
{
  swift_retain();
  _BPlistEncodingFormat.Reference.insert(_:)();
  return swift_release();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(unint64_t a1, unint64_t a2)
{
  return _PlistUnkeyedEncodingContainerBPlist.encode(_:)(a1, a2);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(double a1)
{
  specialized _BPlistEncodingFormat.number<A>(from:)(a1);
  _BPlistEncodingFormat.Reference.insert(_:)();
  return swift_release();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(float a1)
{
  specialized _BPlistEncodingFormat.number<A>(from:)(a1);
  _BPlistEncodingFormat.Reference.insert(_:)();
  return swift_release();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  _BPlistEncodingFormat.Reference.insert(_:)();
  return swift_release();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _PlistUnkeyedEncodingContainerBPlist.encode<A>(_:)(a1, a2, a3);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderBPlist.encode(_:)(Swift::Bool a1)
{
  uint64_t v1;

  if (((*(uint64_t (**)(void))(*(_QWORD *)v1 + 240))() & 1) != 0)
  {
    swift_retain_n();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderBPlist.encode(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  id v5;
  unsigned __int8 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v1 + 240))() & 1) != 0)
  {
    if ((specialized Sequence.allSatisfy(_:)(countAndFlagsBits, (unint64_t)object) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      v5 = (id)String.hashValue.getter();
      v6 = 1;
    }
    else
    {
      v7 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      v5 = objc_msgSend(v7, sel_hash);
      swift_unknownObjectRelease();
      v6 = 0;
    }
    v8 = *(_QWORD *)(v2 + 88);
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 24);
    v11 = *(_QWORD *)(v8 + 32);
    *(_QWORD *)(v8 + 16) = countAndFlagsBits;
    *(_QWORD *)(v8 + 24) = object;
    *(_QWORD *)(v8 + 32) = v5;
    v12 = *(_BYTE *)(v8 + 40);
    *(_BYTE *)(v8 + 40) = v6;
    outlined copy of _BPlistEncodingFormat.Reference.Backing(countAndFlagsBits, (unint64_t)object, (uint64_t)v5, v6);
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v9, v10, v11, v12);
    swift_retain();
    if ((specialized Set._Variant.insert(_:)(&v14, v8) & 1) != 0)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = 2;
      *(_BYTE *)(v13 + 40) = -112;
      *(_QWORD *)(v13 + 48) = -1;
      swift_bridgeObjectRelease();
      swift_release();
      *(_QWORD *)(v2 + 88) = v13;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t __PlistEncoderBPlist.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = v4;
  result = (*(uint64_t (**)(void))(*v3 + 240))();
  if ((result & 1) != 0)
  {
    v10 = v3[5];
    swift_retain();
    v11 = specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1, v10, 0, 0, 0, 255, a2, a3);
    if (!v5)
    {
      if (!v11)
      {
        v12 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E0DEE9D8]);
        v14 = v13;
        v16 = v15;
        type metadata accessor for _BPlistEncodingFormat.Reference();
        v17 = swift_allocObject();
        *(_QWORD *)(v17 + 16) = v12;
        *(_QWORD *)(v17 + 24) = v14;
        *(_QWORD *)(v17 + 32) = v16;
        *(_BYTE *)(v17 + 40) = 96;
        *(_QWORD *)(v17 + 48) = -1;
      }
      swift_release();
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance __PlistEncoderBPlist()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_retain();
  v2 = _CodingPathNode.path.getter(v1);
  swift_release();
  return v2;
}

uint64_t protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __PlistEncoderBPlist()
{
  uint64_t v0;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v0 + 240))();
  if ((result & 1) != 0)
  {
    swift_retain_n();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(Swift::Bool a1)
{
  __PlistEncoderBPlist.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(uint64_t a1, uint64_t a2)
{
  __PlistEncoderBPlist.encode(_:)(*(Swift::String *)&a1);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 240))();
  if ((result & 1) != 0)
  {
    specialized _BPlistEncodingFormat.number<A>(from:)(a1);
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 240))();
  if ((result & 1) != 0)
  {
    specialized _BPlistEncodingFormat.number<A>(from:)(a1);
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v4 + 240))();
  if ((result & 1) != 0)
  {
    a4(a1);
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist()
{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __PlistEncoderBPlist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __PlistEncoderBPlist.encode<A>(_:)(a1, a2, a3);
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(unsigned __int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = a1;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v8 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 2;
    *(_BYTE *)(v11 + 40) = -112;
    *(_QWORD *)(v11 + 48) = -1;
    swift_release();
    *(_QWORD *)(v2 + 32) = v11;
  }
  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = a1;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v8 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 2;
    *(_BYTE *)(v11 + 40) = -112;
    *(_QWORD *)(v11 + 48) = -1;
    swift_release();
    *(_QWORD *)(v2 + 32) = v11;
  }
  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(__int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = a1;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v8 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 2;
    *(_BYTE *)(v11 + 40) = -112;
    *(_QWORD *)(v11 + 48) = -1;
    swift_release();
    *(_QWORD *)(v2 + 32) = v11;
  }
  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = a1;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v8 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 2;
    *(_BYTE *)(v11 + 40) = -112;
    *(_QWORD *)(v11 + 48) = -1;
    swift_release();
    *(_QWORD *)(v2 + 32) = v11;
  }
  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  v6 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v7 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v4, v6, v7);
  swift_retain();
  v8 = specialized Set._Variant.insert(_:)(&v12, v3);
  v9 = v12;
  if ((v8 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 16) = 2;
    *(_BYTE *)(v10 + 40) = -112;
    *(_QWORD *)(v10 + 48) = -1;
    swift_release();
    *(_QWORD *)(v2 + 32) = v10;
  }
  return v9;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  v6 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v7 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 16;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v4, v6, v7);
  swift_retain();
  v8 = specialized Set._Variant.insert(_:)(&v12, v3);
  v9 = v12;
  if ((v8 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 16) = 2;
    *(_BYTE *)(v10 + 40) = -112;
    *(_QWORD *)(v10 + 48) = -1;
    swift_release();
    *(_QWORD *)(v2 + 32) = v10;
  }
  return v9;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = a1;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v8 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 2;
    *(_BYTE *)(v11 + 40) = -112;
    *(_QWORD *)(v11 + 48) = -1;
    swift_release();
    *(_QWORD *)(v2 + 32) = v11;
  }
  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = a1;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v8 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 2;
    *(_BYTE *)(v11 + 40) = -112;
    *(_QWORD *)(v11 + 48) = -1;
    swift_release();
    *(_QWORD *)(v2 + 32) = v11;
  }
  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = *(_QWORD *)(v3 + 32);
  *(double *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v7 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 48;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v4, v5, v6, v7);
  swift_retain();
  v8 = specialized Set._Variant.insert(_:)(&v12, v3);
  v9 = v12;
  if ((v8 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 16) = 2;
    *(_BYTE *)(v10 + 40) = -112;
    *(_QWORD *)(v10 + 48) = -1;
    swift_release();
    *(_QWORD *)(v2 + 32) = v10;
  }
  return v9;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 16) = LODWORD(a1);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v7 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(v3 + 40) = 64;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v4, v5, v6, v7);
  swift_retain();
  v8 = specialized Set._Variant.insert(_:)(&v12, v3);
  v9 = v12;
  if ((v8 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 16) = 2;
    *(_BYTE *)(v10 + 40) = -112;
    *(_QWORD *)(v10 + 48) = -1;
    swift_release();
    *(_QWORD *)(v2 + 32) = v10;
  }
  return v9;
}

uint64_t _BPlistEncodingFormat.data(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = v2;
  v4 = *(_QWORD *)(v2 + 32);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = 0;
  v8 = *(_BYTE *)(v4 + 40);
  *(_BYTE *)(v4 + 40) = 0x80;
  outlined copy of Data._Representation(a1, a2);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  v9 = specialized Set._Variant.insert(_:)(&v13, v4);
  v10 = v13;
  if ((v9 & 1) != 0)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 2;
    *(_BYTE *)(v11 + 40) = -112;
    *(_QWORD *)(v11 + 48) = -1;
    swift_release();
    *(_QWORD *)(v3 + 32) = v11;
  }
  return v10;
}

uint64_t specialized __PlistEncoderBPlist.wrap<A>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  id v39;
  unsigned __int8 v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t result;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  __int128 v87[3];
  uint64_t v88;

  v88 = a4;
  v10 = ~a6;
  v67 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16);
  v11 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E0DEE9D8]);
  v13 = v12;
  v15 = v14;
  type metadata accessor for _BPlistEncodingFormat.Reference();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 24) = v13;
  v72 = (_QWORD *)(v16 + 24);
  *(_QWORD *)(v16 + 16) = v11;
  *(_QWORD *)(v16 + 32) = v15;
  *(_BYTE *)(v16 + 40) = 96;
  *(_QWORD *)(v16 + 48) = -1;
  swift_retain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  v74 = v16;
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  v68 = v6 + 16;
  specialized ContiguousArray._endMutation()();
  if (!v10)
  {
    swift_retain();
    v17 = (_QWORD *)a2;
    v20 = v88;
    v19 = a3;
    goto LABEL_11;
  }
  v17 = (_QWORD *)swift_allocObject();
  v17[5] = &type metadata for _CodingKey;
  v17[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v18 = swift_allocObject();
  v17[2] = v18;
  v19 = a3;
  v20 = v88;
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = v20;
  *(_QWORD *)(v18 + 32) = a5;
  *(_BYTE *)(v18 + 40) = a6;
  v17[7] = a2;
  if (a2 >> 62)
  {
    if (a2 >> 62 != 1)
    {
      v22 = 0;
      goto LABEL_9;
    }
    v21 = (uint64_t *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v21 = (uint64_t *)(a2 + 64);
  }
  v22 = *v21;
  swift_retain();
LABEL_9:
  if (__OFADD__(v22, 1))
    goto LABEL_63;
  v17[8] = v22 + 1;
LABEL_11:
  outlined copy of _CodingKey?(v19, v20, a5, a6);
  v23 = swift_bridgeObjectRetain();
  v24 = specialized _copyCollectionToContiguousArray<A>(_:)(v23);
  swift_bridgeObjectRelease();
  v85 = v24;
  specialized MutableCollection<>.sort(by:)(&v85);
  if (v76)
  {
LABEL_65:
    result = swift_release();
    __break(1u);
    return result;
  }
  v25 = 0;
  v26 = v85[2];
  v70 = v85;
  v69 = v85 + 4;
  v73 = v17;
  v71 = v26;
  if (!v26)
    goto LABEL_16;
LABEL_13:
  if ((v25 & 0x8000000000000000) != 0)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v25 >= v70[2])
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  outlined init with copy of (key: String, value: Encodable)((uint64_t)&v69[7 * v25], (uint64_t)&v81);
  v27 = v25 + 1;
  while (1)
  {
    outlined init with take of (key: String, value: Encodable)?((uint64_t)&v81, (uint64_t)&v85);
    v28 = v86;
    if (!v86)
      break;
    v77 = v27;
    v29 = (unint64_t)v85;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v87, (uint64_t)&v81);
    if ((v28 & 0x2000000000000000) != 0)
      v30 = HIBYTE(v28) & 0xF;
    else
      v30 = v29 & 0xFFFFFFFFFFFFLL;
    v31 = (v29 >> 59) & 1;
    if ((v28 & 0x1000000000000000) == 0)
      LOBYTE(v31) = 1;
    v32 = 4 << v31;
    v88 = v28 & 0xFFFFFFFFFFFFFFLL;
    v33 = 15;
    do
    {
      while (1)
      {
        if (4 * v30 == v33 >> 14)
        {
          swift_bridgeObjectRetain();
          v39 = (id)String.hashValue.getter();
          v40 = 1;
          goto LABEL_45;
        }
        v34 = v33 & 0xC;
        v35 = v33;
        if (v34 == v32)
          v35 = _StringGuts._slowEnsureMatchingEncoding(_:)(v33, v29, v28);
        v36 = v35 >> 16;
        if (v35 >> 16 >= v30)
        {
          __break(1u);
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        if ((v28 & 0x1000000000000000) == 0)
          break;
        v38 = String.UTF8View._foreignSubscript(position:)();
        if (v34 == v32)
          goto LABEL_34;
LABEL_37:
        if ((v28 & 0x1000000000000000) != 0)
          goto LABEL_38;
LABEL_24:
        v33 = (v33 & 0xFFFFFFFFFFFF0000) + 65540;
        if (v38 < 0)
          goto LABEL_44;
      }
      if ((v28 & 0x2000000000000000) != 0)
      {
        v79 = v29;
        *(_QWORD *)&v80 = v88;
        v38 = *((_BYTE *)&v79 + v36);
        if (v34 == v32)
          goto LABEL_34;
        goto LABEL_37;
      }
      v37 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v29 & 0x1000000000000000) == 0)
        v37 = _StringObject.sharedUTF8.getter();
      v38 = *(_BYTE *)(v37 + v36);
      if (v34 != v32)
        goto LABEL_37;
LABEL_34:
      v33 = _StringGuts._slowEnsureMatchingEncoding(_:)(v33, v29, v28);
      if ((v28 & 0x1000000000000000) == 0)
        goto LABEL_24;
LABEL_38:
      if (v30 <= v33 >> 16)
        goto LABEL_60;
      v33 = String.UTF8View._foreignIndex(after:)();
    }
    while ((v38 & 0x80) == 0);
LABEL_44:
    v41 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    v39 = objc_msgSend(v41, sel_hash);
    swift_unknownObjectRelease();
    v40 = 0;
LABEL_45:
    v42 = *(_QWORD *)(v75 + 88);
    v43 = *(_QWORD *)(v42 + 16);
    v44 = *(_QWORD *)(v42 + 24);
    v45 = *(_QWORD *)(v42 + 32);
    *(_QWORD *)(v42 + 16) = v29;
    *(_QWORD *)(v42 + 24) = v28;
    *(_QWORD *)(v42 + 32) = v39;
    v46 = *(_BYTE *)(v42 + 40);
    *(_BYTE *)(v42 + 40) = v40;
    outlined copy of _BPlistEncodingFormat.Reference.Backing(v29, v28, (uint64_t)v39, v40);
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v43, v44, v45, v46);
    swift_retain();
    v47 = specialized Set._Variant.insert(_:)((uint64_t *)&v79, v42);
    v48 = v79;
    if ((v47 & 1) != 0)
    {
      v49 = swift_allocObject();
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0;
      *(_QWORD *)(v49 + 16) = 2;
      *(_BYTE *)(v49 + 40) = -112;
      *(_QWORD *)(v49 + 48) = -1;
      swift_bridgeObjectRelease();
      swift_release();
      *(_QWORD *)(v75 + 88) = v49;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v51 = *((_QWORD *)&v82 + 1);
    v50 = v83;
    v52 = __swift_project_boxed_opaque_existential_1(&v81, *((uint64_t *)&v82 + 1));
    if (!specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(v52, v73, v29, v28, 0, 0, v51, v50))
    {
      v53 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E0DEE9D8]);
      v55 = v54;
      v57 = v56;
      v58 = swift_allocObject();
      *(_QWORD *)(v58 + 16) = v53;
      *(_QWORD *)(v58 + 24) = v55;
      *(_QWORD *)(v58 + 32) = v57;
      *(_BYTE *)(v58 + 40) = 96;
      *(_QWORD *)(v58 + 48) = -1;
    }
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v74 + 40) & 0xF0) != 0x60)
      goto LABEL_64;
    v79 = *(_QWORD *)(v74 + 16);
    v80 = *(_OWORD *)(v74 + 24);
    *(_QWORD *)(v74 + 16) = 2;
    *v72 = 0;
    v72[1] = 0;
    *(_BYTE *)(v74 + 40) = -112;
    swift_retain();
    v59 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v59, v48);
    v60 = *(_QWORD *)(v74 + 16);
    v61 = *(_QWORD *)(v74 + 24);
    v62 = *(_QWORD *)(v74 + 32);
    *(_QWORD *)(v74 + 16) = v79;
    *(_OWORD *)(v74 + 24) = v80;
    v63 = *(_BYTE *)(v74 + 40);
    *(_BYTE *)(v74 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v60, v61, v62, v63);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v81);
    v26 = v71;
    v25 = v77;
    if (v77 != v71)
      goto LABEL_13;
LABEL_16:
    v84 = 0;
    v82 = 0u;
    v83 = 0u;
    v27 = v26;
    v81 = 0u;
  }
  swift_release();
  if (v67 >= *(_QWORD *)(*(_QWORD *)v68 + 16))
  {
    swift_release();
    swift_release();
    return 0;
  }
  else
  {
    v64 = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    if (!v64)
      v64 = specialized ContiguousArray.remove(at:)(*(_QWORD *)(*(_QWORD *)v68 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    v65 = v64;
    swift_release();
    swift_release();
  }
  return v65;
}

uint64_t __PlistEncoderBPlist.wrap<A>(_:for:_:)(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  void (*v21)(char *, unint64_t, __int128 *);
  char *v22;
  uint64_t v23;
  void (*v24)(char *, __int128 *);
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  id v50;
  unsigned __int8 v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t result;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  __int128 *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v90 = a5;
  v99 = a3;
  v92 = a1;
  v100 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v89 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = (__int128 *)type metadata accessor for Optional();
  v9 = *((_QWORD *)v96 - 1);
  MEMORY[0x1E0C80A78](v96);
  v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v95 = (char *)&v86 - v13;
  v98 = v5;
  v87 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 16);
  v14 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E0DEE9D8]);
  v16 = v15;
  v18 = v17;
  v91 = type metadata accessor for _BPlistEncodingFormat.Reference();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 24) = v16;
  v93 = (_QWORD *)(v19 + 24);
  *(_QWORD *)(v19 + 16) = v14;
  *(_QWORD *)(v19 + 32) = v18;
  *(_BYTE *)(v19 + 40) = 96;
  *(_QWORD *)(v19 + 48) = -1;
  swift_retain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  v97 = v19;
  v20 = v96;
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  v88 = v5 + 16;
  specialized ContiguousArray._endMutation()();
  v110 = v9;
  v21 = *(void (**)(char *, unint64_t, __int128 *))(v9 + 16);
  v22 = v95;
  v21(v95, v99, v20);
  v21(v11, (unint64_t)v22, v20);
  v23 = v100;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v11, 1, a4) == 1)
  {
    v24 = *(void (**)(char *, __int128 *))(v110 + 8);
    v24(v22, v20);
    v24(v11, v20);
    swift_retain();
    v25 = v98;
    goto LABEL_10;
  }
  v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v27 = v89;
  v26(v89, v11, a4);
  v28 = (uint64_t *)swift_allocObject();
  v29 = v90;
  v28[5] = a4;
  v28[6] = (uint64_t)v29;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28 + 2);
  v26((char *)boxed_opaque_existential_1, v27, a4);
  (*(void (**)(char *, __int128 *))(v110 + 8))(v22, v20);
  v28[7] = a2;
  if (!(a2 >> 62))
  {
    v31 = (uint64_t *)(a2 + 64);
    v25 = v98;
LABEL_8:
    v32 = *v31;
    swift_retain();
    v85 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    goto LABEL_9;
  }
  v25 = v98;
  if (a2 >> 62 == 1)
  {
    v31 = (uint64_t *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_8;
  }
  v85 = 1;
LABEL_9:
  v28[8] = v85;
  a2 = (unint64_t)v28;
LABEL_10:
  v33 = swift_bridgeObjectRetain();
  v34 = specialized _copyCollectionToContiguousArray<A>(_:)(v33);
  swift_bridgeObjectRelease();
  v107 = v34;
  v35 = v94;
  specialized MutableCollection<>.sort(by:)(&v107);
  if (!v35)
  {
    v36 = 0;
    v37 = v107[2];
    v90 = v107;
    v89 = (char *)(v107 + 4);
    v96 = (__int128 *)&v109;
    v94 = v25 + 80;
    v95 = (char *)a2;
    v92 = v37;
    if (!v37)
      goto LABEL_12;
    while (1)
    {
      if ((v36 & 0x8000000000000000) != 0)
        goto LABEL_67;
      if (v36 >= v90[2])
        goto LABEL_68;
      outlined init with copy of (key: String, value: Encodable)((uint64_t)&v89[56 * v36], (uint64_t)&v103);
      v38 = v36 + 1;
      while (2)
      {
        outlined init with take of (key: String, value: Encodable)?((uint64_t)&v103, (uint64_t)&v107);
        v39 = v108;
        if (!v108)
        {
          swift_release();
          v81 = v88;
          if (v87 >= *(_QWORD *)(*(_QWORD *)v88 + 16))
          {
            swift_release();
            swift_release();
            return 0;
          }
          else
          {
            v82 = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
            if (!v82)
              v82 = specialized ContiguousArray.remove(at:)(*(_QWORD *)(*(_QWORD *)v81 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
            v40 = v82;
            swift_release();
            swift_release();
          }
          return v40;
        }
        v99 = v38;
        v100 = 0;
        v40 = (unint64_t)v107;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v96, (uint64_t)&v103);
        if ((v39 & 0x2000000000000000) != 0)
          v41 = HIBYTE(v39) & 0xF;
        else
          v41 = v40 & 0xFFFFFFFFFFFFLL;
        v42 = (v40 >> 59) & 1;
        if ((v39 & 0x1000000000000000) == 0)
          LOBYTE(v42) = 1;
        v43 = 4 << v42;
        v110 = v39 & 0xFFFFFFFFFFFFFFLL;
        v44 = 15;
        do
        {
          while (1)
          {
            if (4 * v41 == v44 >> 14)
            {
              swift_bridgeObjectRetain();
              v50 = (id)String.hashValue.getter();
              v51 = 1;
              goto LABEL_44;
            }
            v45 = v44 & 0xC;
            v46 = v44;
            if (v45 == v43)
              v46 = _StringGuts._slowEnsureMatchingEncoding(_:)(v44, v40, v39);
            v47 = v46 >> 16;
            if (v46 >> 16 >= v41)
              goto LABEL_65;
            if ((v39 & 0x1000000000000000) == 0)
              break;
            v49 = String.UTF8View._foreignSubscript(position:)();
            if (v45 == v43)
              goto LABEL_40;
LABEL_35:
            if ((v39 & 0x1000000000000000) != 0)
              goto LABEL_36;
LABEL_23:
            v44 = (v44 & 0xFFFFFFFFFFFF0000) + 65540;
            if (v49 < 0)
              goto LABEL_43;
          }
          if ((v39 & 0x2000000000000000) != 0)
          {
            v101 = v40;
            *(_QWORD *)&v102 = v110;
            v49 = *((_BYTE *)&v101 + v47);
            if (v45 == v43)
              goto LABEL_40;
            goto LABEL_35;
          }
          v48 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v40 & 0x1000000000000000) == 0)
            v48 = _StringObject.sharedUTF8.getter();
          v49 = *(_BYTE *)(v48 + v47);
          if (v45 != v43)
            goto LABEL_35;
LABEL_40:
          v44 = _StringGuts._slowEnsureMatchingEncoding(_:)(v44, v40, v39);
          if ((v39 & 0x1000000000000000) == 0)
            goto LABEL_23;
LABEL_36:
          if (v41 <= v44 >> 16)
            goto LABEL_66;
          v44 = String.UTF8View._foreignIndex(after:)();
        }
        while ((v49 & 0x80) == 0);
LABEL_43:
        v52 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRetain();
        v50 = objc_msgSend(v52, sel_hash);
        swift_unknownObjectRelease();
        v51 = 0;
LABEL_44:
        v53 = v98;
        v54 = *(_QWORD *)(v98 + 88);
        v55 = *(_QWORD *)(v54 + 16);
        v56 = *(_QWORD *)(v54 + 24);
        v57 = *(_QWORD *)(v54 + 32);
        *(_QWORD *)(v54 + 16) = v40;
        *(_QWORD *)(v54 + 24) = v39;
        *(_QWORD *)(v54 + 32) = v50;
        v58 = *(_BYTE *)(v54 + 40);
        *(_BYTE *)(v54 + 40) = v51;
        outlined copy of _BPlistEncodingFormat.Reference.Backing(v40, v39, (uint64_t)v50, v51);
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v55, v56, v57, v58);
        swift_retain();
        v59 = specialized Set._Variant.insert(_:)((uint64_t *)&v101, v54);
        v60 = v101;
        v61 = (unint64_t)v95;
        if ((v59 & 1) != 0)
        {
          v62 = swift_allocObject();
          *(_QWORD *)(v62 + 24) = 0;
          *(_QWORD *)(v62 + 32) = 0;
          *(_QWORD *)(v62 + 16) = 2;
          *(_BYTE *)(v62 + 40) = -112;
          *(_QWORD *)(v62 + 48) = -1;
          swift_bridgeObjectRelease();
          swift_release();
          *(_QWORD *)(v53 + 88) = v62;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v63 = v97;
        v65 = *((_QWORD *)&v104 + 1);
        v64 = v105;
        v66 = __swift_project_boxed_opaque_existential_1(&v103, *((uint64_t *)&v104 + 1));
        v67 = v100;
        v68 = specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)((uint64_t)v66, v61, v40, v39, 0, 0, v65, v64);
        if (v67)
        {
          swift_bridgeObjectRelease();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
          swift_release();
          v83 = v88;
          if (v87 < *(_QWORD *)(*(_QWORD *)v88 + 16))
          {
            if (!specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew()))
              specialized ContiguousArray.remove(at:)(*(_QWORD *)(*(_QWORD *)v83 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
            swift_release();
          }
          swift_willThrow();
          swift_release();
          swift_release();
          return v40;
        }
        if (!v68)
        {
          v69 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E0DEE9D8]);
          v71 = v70;
          v73 = v72;
          v74 = swift_allocObject();
          *(_QWORD *)(v74 + 16) = v69;
          *(_QWORD *)(v74 + 24) = v71;
          *(_QWORD *)(v74 + 32) = v73;
          *(_BYTE *)(v74 + 40) = 96;
          *(_QWORD *)(v74 + 48) = -1;
        }
        swift_bridgeObjectRelease();
        if ((*(_BYTE *)(v63 + 40) & 0xF0) != 0x60)
          goto LABEL_69;
        v101 = *(_QWORD *)(v63 + 16);
        v102 = *(_OWORD *)(v63 + 24);
        *(_QWORD *)(v63 + 16) = 2;
        v75 = v93;
        *v93 = 0;
        v75[1] = 0;
        *(_BYTE *)(v63 + 40) = -112;
        swift_retain();
        v76 = swift_retain();
        specialized OrderedDictionary.subscript.setter(v76, v60);
        v77 = *(_QWORD *)(v63 + 16);
        v78 = *(_QWORD *)(v63 + 24);
        v79 = *(_QWORD *)(v63 + 32);
        *(_QWORD *)(v63 + 16) = v101;
        *(_OWORD *)(v63 + 24) = v102;
        v80 = *(_BYTE *)(v63 + 40);
        *(_BYTE *)(v63 + 40) = 96;
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v77, v78, v79, v80);
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
        v37 = v92;
        v36 = v99;
        if (v99 == v92)
        {
LABEL_12:
          v106 = 0;
          v104 = 0u;
          v105 = 0u;
          v38 = v37;
          v103 = 0u;
          continue;
        }
        break;
      }
    }
  }
LABEL_70:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  v4[3] = type metadata accessor for __PlistEncoderBPlist();
  v4[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist, v2, (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist, (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
  v4[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  v4[3] = type metadata accessor for __PlistEncoderBPlist();
  v4[4] = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist, v2, (uint64_t (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist, (uint64_t)&protocol conformance descriptor for __PlistEncoderBPlist);
  v4[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t specialized __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)(void (*a1)(_QWORD *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v15)(_QWORD *);
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD *);
  unint64_t v30;

  v9 = v7;
  v15 = a1;
  v16 = v9 + 2;
  v30 = *(_QWORD *)(v9[2] + 16);
  if (a7 != -1)
  {
    v29 = a1;
    v28 = v8;
    v17 = (_QWORD *)swift_allocObject();
    v17[5] = &type metadata for _CodingKey;
    v17[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v18 = swift_allocObject();
    v17[2] = v18;
    *(_QWORD *)(v18 + 16) = a4;
    *(_QWORD *)(v18 + 24) = a5;
    *(_QWORD *)(v18 + 32) = a6;
    *(_BYTE *)(v18 + 40) = a7;
    v17[7] = a3;
    v27 = a4;
    v19 = a5;
    if (a3 >> 62)
    {
      if (a3 >> 62 != 1)
      {
        v24 = a6;
        v23 = 1;
LABEL_10:
        v17[8] = v23;
        v21 = v9[5];
        v22 = v9[6];
        v9[5] = v17;
        v16 = v9 + 2;
LABEL_11:
        outlined copy of _CodingKey?(v27, v19, v24, a7);
        v8 = v28;
        goto LABEL_12;
      }
      v20 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v20 = (uint64_t *)(a3 + 64);
    }
    v24 = a6;
    v25 = *v20;
    swift_retain();
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      return 0;
    }
    goto LABEL_10;
  }
  v21 = v9[5];
  v22 = v9[6];
  v9[5] = a3;
  if (!(a3 >> 62))
  {
    v27 = a4;
    v28 = v8;
    v19 = a5;
    v24 = a6;
    v29 = a1;
    v23 = *(_QWORD *)(a3 + 64);
    swift_retain();
    goto LABEL_11;
  }
  if (a3 >> 62 == 1)
  {
    v29 = a1;
    v23 = *(_QWORD *)(a3 + 32);
    swift_retain();
LABEL_12:
    swift_retain();
    v15 = v29;
    goto LABEL_13;
  }
  v23 = 0;
LABEL_13:
  v9[6] = v23;
  v15(v9);
  if (v8)
  {
    v9[5] = v21;
    swift_retain();
    swift_release();
    v9[6] = v22;
    swift_release();
    swift_release();
    if (v30 < *(_QWORD *)(v9[2] + 16))
    {
      if (!specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew()))
        specialized ContiguousArray.remove(at:)(*(_QWORD *)(*v16 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      swift_release();
    }
    return swift_willThrow();
  }
  v9[5] = v21;
  swift_retain();
  swift_release();
  v9[6] = v22;
  swift_release();
  swift_release();
  if (v30 >= *(_QWORD *)(v9[2] + 16))
    return 0;
  result = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
  if (!result)
    return specialized ContiguousArray.remove(at:)(*(_QWORD *)(*v16 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
  return result;
}

uint64_t __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)(void (*a1)(_QWORD *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD *);
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v47 = a1;
  v7 = v6;
  v45 = a6;
  v46 = a2;
  v50 = a3;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v44 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v42 - v18;
  v20 = v7[2];
  v43 = v7 + 2;
  v49 = *(_QWORD *)(v20 + 16);
  v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
  v21((char *)&v42 - v18, a4, v12, v17);
  ((void (*)(char *, char *, uint64_t))v21)(v15, v19, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, a5) != 1)
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v29 = v44;
    v28(v44, v15, a5);
    v30 = (uint64_t *)swift_allocObject();
    v31 = v45;
    v30[5] = a5;
    v30[6] = v31;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30 + 2);
    v28((char *)boxed_opaque_existential_1, v29, a5);
    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    v34 = v50;
    v30[7] = v50;
    v35 = v34 >> 62;
    if (v34 >> 62)
    {
      if ((_DWORD)v35 != 1)
      {
        v27 = 1;
        if (!__OFSUB__((_DWORD)v35, 1))
          goto LABEL_12;
        goto LABEL_27;
      }
      v36 = (uint64_t *)((v34 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v36 = (uint64_t *)(v34 + 64);
    }
    v37 = *v36;
    result = swift_retain();
    v38 = __OFADD__(v37, 1);
    v27 = v37 + 1;
    if (!v38)
    {
LABEL_12:
      v30[8] = v27;
      v24 = v7[5];
      v23 = v7[6];
      v7[5] = v30;
      goto LABEL_13;
    }
LABEL_27:
    __break(1u);
    return result;
  }
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v19, v12);
  v22(v15, v12);
  v24 = v7[5];
  v23 = v7[6];
  v25 = v50;
  v26 = v50 >> 62;
  v7[5] = v50;
  if (v25 >> 62)
  {
    if ((_DWORD)v26 != 1)
    {
      v27 = 0;
      goto LABEL_14;
    }
    v27 = *(_QWORD *)(v25 + 32);
    swift_retain();
  }
  else
  {
    v27 = *(_QWORD *)(v25 + 64);
    swift_retain();
  }
LABEL_13:
  swift_retain();
LABEL_14:
  v7[6] = v27;
  v39 = v48;
  v47(v7);
  if (v39)
  {
    v7[5] = v24;
    swift_retain();
    swift_release();
    v7[6] = v23;
    swift_release();
    swift_release();
    if (v49 < *(_QWORD *)(v7[2] + 16))
    {
      v40 = v43;
      if (!specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew()))
        specialized ContiguousArray.remove(at:)(*(_QWORD *)(*v40 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      swift_release();
    }
    return swift_willThrow();
  }
  else
  {
    v7[5] = v24;
    swift_retain();
    swift_release();
    v7[6] = v23;
    swift_release();
    swift_release();
    if (v49 >= *(_QWORD *)(v7[2] + 16))
    {
      return 0;
    }
    else
    {
      v41 = v43;
      result = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      if (!result)
        return specialized ContiguousArray.remove(at:)(*(_QWORD *)(*v41 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    }
  }
  return result;
}

uint64_t __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;

  *(_QWORD *)(v4 + 96) = a1;
  *(_QWORD *)(v4 + 104) = a4;
  *(_QWORD *)(v4 + 112) = a2;
  *(_QWORD *)(v4 + 120) = 0;
  v8 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v9 = (_QWORD *)swift_allocObject();
  v9[5] = &type metadata for _CodingKey;
  v9[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  result = swift_allocObject();
  v9[2] = result;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 40) = 2;
  v11 = a3 >> 62;
  v9[7] = a3;
  if (a3 >> 62)
  {
    v12 = 0;
    if ((_DWORD)v11 != 1)
      goto LABEL_6;
    v13 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v13 = (uint64_t *)(a3 + 64);
  }
  v12 = *v13;
  result = swift_retain();
LABEL_6:
  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    v9[8] = v12 + 1;
    if ((_DWORD)v11)
    {
      if ((_DWORD)v11 == 1)
      {
        v14 = *(_QWORD *)(a3 + 32);
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRetain();
        v14 = 0;
      }
    }
    else
    {
      v14 = *(_QWORD *)(a3 + 64);
      swift_bridgeObjectRetain();
      swift_release();
    }
    *(_QWORD *)(v4 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v4 + 24) = v8;
    *(_QWORD *)(v4 + 32) = v7;
    *(_QWORD *)(v4 + 40) = v9;
    *(_QWORD *)(v4 + 48) = v14;
    specialized _BPlistEncodingFormat.init()((uint64_t *)v16);
    v15 = v16[1];
    *(_OWORD *)(v4 + 56) = v16[0];
    *(_OWORD *)(v4 + 72) = v15;
    *(_QWORD *)(v4 + 88) = v17;
    return v4;
  }
  return result;
}

BOOL __PlistReferencingEncoderBPlist.canEncodeNewValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0[2] + 16);
  v2 = v0[5];
  swift_retain();
  v3 = _CodingPathNode.path.getter(v2);
  swift_release();
  v4 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v0[12] + 40);
  swift_retain();
  v6 = _CodingPathNode.path.getter(v5);
  swift_release();
  v7 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRelease();
  return v1 == v4 + ~v7;
}

uint64_t __PlistReferencingEncoderBPlist.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  return outlined consume of __JSONReferencingEncoder.Reference(*(_QWORD *)(v0 + 104));
}

uint64_t __PlistReferencingEncoderBPlist.deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  unsigned __int8 v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;

  v1 = v0;
  v3 = v0[2];
  v2 = v0 + 2;
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 == 1)
  {
    v5 = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    if (!v5)
      v5 = specialized ContiguousArray.remove(at:)(*(_QWORD *)(*v2 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    v6 = v5;
  }
  else
  {
    if (v4)
      goto LABEL_25;
    v7 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E0DEE9D8]);
    v9 = v8;
    v11 = v10;
    type metadata accessor for _BPlistEncodingFormat.Reference();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v7;
    *(_QWORD *)(v6 + 24) = v9;
    *(_QWORD *)(v6 + 32) = v11;
    *(_BYTE *)(v6 + 40) = 96;
    *(_QWORD *)(v6 + 48) = -1;
  }
  v12 = v1[13];
  v13 = v1[14];
  v14 = v1[15];
  if (v12 < 0)
  {
    v20 = v12 & 0x7FFFFFFFFFFFFFFFLL;
    v21 = v1[12];
    if ((specialized Sequence.allSatisfy(_:)(v1[14], v1[15]) & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRetain_n();
      v22 = (id)String.hashValue.getter();
      v23 = 1;
    }
    else
    {
      v24 = (void *)String._bridgeToObjectiveCImpl()();
      swift_retain();
      swift_bridgeObjectRetain_n();
      v22 = objc_msgSend(v24, sel_hash);
      swift_unknownObjectRelease();
      v23 = 0;
    }
    v25 = *(_QWORD *)(v21 + 88);
    v37 = *(_QWORD *)(v25 + 16);
    v38 = v21;
    v26 = *(_QWORD *)(v25 + 24);
    v27 = *(_QWORD *)(v25 + 32);
    *(_QWORD *)(v25 + 16) = v13;
    *(_QWORD *)(v25 + 24) = v14;
    *(_QWORD *)(v25 + 32) = v22;
    v28 = *(_BYTE *)(v25 + 40);
    *(_BYTE *)(v25 + 40) = v23;
    outlined copy of _BPlistEncodingFormat.Reference.Backing(v13, v14, (uint64_t)v22, v23);
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v37, v26, v27, v28);
    swift_retain();
    v29 = specialized Set._Variant.insert(_:)(&v39, v25);
    v30 = v39;
    if ((v29 & 1) != 0)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      v31 = swift_allocObject();
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0;
      *(_QWORD *)(v31 + 16) = 2;
      *(_BYTE *)(v31 + 40) = -112;
      *(_QWORD *)(v31 + 48) = -1;
      swift_bridgeObjectRelease();
      swift_release();
      *(_QWORD *)(v38 + 88) = v31;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v20 + 40) & 0xF0) == 0x60)
    {
      v39 = *(_QWORD *)(v20 + 16);
      v40 = *(_OWORD *)(v20 + 24);
      *(_QWORD *)(v20 + 16) = 2;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0;
      *(_BYTE *)(v20 + 40) = -112;
      swift_retain();
      swift_retain();
      specialized OrderedDictionary.subscript.setter(v6, v30);
      v32 = *(_QWORD *)(v20 + 16);
      v33 = *(_QWORD *)(v20 + 24);
      v34 = *(_QWORD *)(v20 + 32);
      *(_QWORD *)(v20 + 16) = v39;
      *(_OWORD *)(v20 + 24) = v40;
      v35 = *(_BYTE *)(v20 + 40);
      *(_BYTE *)(v20 + 40) = 96;
      outlined consume of _BPlistEncodingFormat.Reference.Backing(v32, v33, v34, v35);
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_20;
    }
  }
  else
  {
    if ((*(_BYTE *)(v12 + 40) & 0xF0) == 0x50)
    {
      v39 = *(_QWORD *)(v12 + 16);
      v15 = v39;
      *(_QWORD *)(v12 + 16) = 2;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      *(_BYTE *)(v12 + 40) = -112;
      if (*(_QWORD *)(v15 + 16) < v13)
      {
        __break(1u);
      }
      else if ((v13 & 0x8000000000000000) == 0)
      {
        outlined copy of __JSONReferencingEncoder.Reference(v12);
        swift_retain();
        specialized ContiguousArray.replaceSubrange<A>(_:with:)(v13, v13, v6);
        v16 = *(_QWORD *)(v12 + 16);
        v17 = *(_QWORD *)(v12 + 24);
        v18 = *(_QWORD *)(v12 + 32);
        *(_QWORD *)(v12 + 16) = v39;
        v19 = *(_BYTE *)(v12 + 40);
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        *(_BYTE *)(v12 + 40) = 80;
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v16, v17, v18, v19);
        swift_release();
        outlined consume of __JSONReferencingEncoder.Reference(v12);
LABEL_20:
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined consume of __JSONReferencingEncoder.Reference(v1[13]);
        return (uint64_t)v1;
      }
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
LABEL_25:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __PlistReferencingEncoderBPlist.__deallocating_deinit()
{
  __PlistReferencingEncoderBPlist.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistReferencingEncoderBPlist()
{
  return objc_opt_self();
}

uint64_t specialized OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;

  v3 = v2;
  v7 = *v2;
  v6 = v2[1];
  v8 = *(_QWORD *)(v6 + 16);
  swift_retain();
  if (v7)
  {
    swift_retain();
    v9 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a2, v6 + 32, v8, (_QWORD *)(v7 + 16), v7 + 32);
    v11 = v10;
    v13 = v12;
  }
  else
  {
    v9 = specialized Collection<>.firstIndex(of:)(a2, v6 + 32, v8);
    v11 = v14;
    v13 = 0;
  }
  swift_release();
  swift_release();
  if ((v11 & 1) != 0)
  {
    if (!a1)
      return swift_release();
    swift_retain();
    specialized OrderedSet._appendNew(_:in:)();
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
LABEL_13:
    specialized ContiguousArray._endMutation()();
    swift_release_n();
    return swift_release();
  }
  if (!a1)
  {
    specialized OrderedSet._removeExistingMember(at:in:)(v9, v13);
    swift_release();
    specialized ContiguousArray.remove(at:)(v9, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    swift_release();
    return swift_release();
  }
  v15 = v3[2];
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  v3[2] = v15;
  if ((result & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v9 < *(_QWORD *)(v15 + 16))
  {
    swift_retain();
    swift_release();
    *(_QWORD *)(v15 + 8 * v9 + 32) = a1;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.subscript.getter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v6 = a3 + 32;
  v7 = *(_QWORD *)(a3 + 16);
  if (a2)
  {
    v8 = (_QWORD *)(a2 + 16);
    v9 = a2 + 32;
    swift_retain();
    a1 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v6, v7, v8, v9);
    v7 = v10;
    result = swift_release();
    if ((v7 & 1) != 0)
      return 0;
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_16;
LABEL_4:
    __break(1u);
  }
  if (!v7)
    return 0;
  v12 = a3;
  v13 = swift_retain();
  v14 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v13, a1);
  result = swift_release();
  if ((v14 & 1) != 0)
  {
    a1 = 0;
    goto LABEL_16;
  }
  if (v7 == 1)
    return 0;
  v15 = swift_retain();
  v16 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v15, a1);
  result = swift_release();
  if ((v16 & 1) == 0)
  {
    v17 = 0;
    v18 = v7 - 2;
    v19 = v12 + 48;
    while (v18 != v17)
    {
      v7 = *(_QWORD *)(v19 + 8 * v17);
      v20 = swift_retain();
      v21 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v20, a1);
      result = swift_release();
      ++v17;
      if ((v21 & 1) != 0)
      {
        a1 = v17 + 1;
        if (v17 + 1 < 0)
          goto LABEL_4;
        goto LABEL_16;
      }
    }
    return 0;
  }
  a1 = 1;
LABEL_16:
  if (a1 < *(_QWORD *)(a4 + 16))
    return swift_retain();
  __break(1u);
  return result;
}

uint64_t _BPlistEncodingFormat.Reference.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of _BPlistEncodingFormat.Reference.Backing(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _BPlistEncodingFormat.Reference()
{
  return objc_opt_self();
}

uint64_t destroy for _BPlistEncodingFormat.Reference.Backing(uint64_t a1)
{
  return outlined consume of _BPlistEncodingFormat.Reference.Backing(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t outlined consume of _BPlistEncodingFormat.Reference.Backing(uint64_t result, unint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  switch(a4 >> 4)
  {
    case 0:
      result = swift_bridgeObjectRelease();
      break;
    case 5:
      goto LABEL_4;
    case 6:
      swift_release();
      swift_release();
LABEL_4:
      result = swift_release();
      break;
    case 8:
      result = outlined consume of Data._Representation(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for _BPlistEncodingFormat.Reference.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _BPlistEncodingFormat.Reference.Backing(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _BPlistEncodingFormat.Reference.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _BPlistEncodingFormat.Reference.Backing(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _BPlistEncodingFormat.Reference.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _BPlistEncodingFormat.Reference.Backing(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x77 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 119);
  v3 = ((*(unsigned __int8 *)(a1 + 24) >> 4) & 0xFFFFFF8F | (16 * ((*(unsigned __int8 *)(a1 + 24) >> 1) & 7))) ^ 0x7F;
  if (v3 >= 0x76)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _BPlistEncodingFormat.Reference.Backing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x76)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 119;
    if (a3 >= 0x77)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x77)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 2 * (((-a2 >> 4) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for _BPlistEncodingFormat.Reference.Backing(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 24);
  if (v1 <= 0x8F)
    return v1 >> 4;
  else
    return (*(_DWORD *)a1 + 9);
}

uint64_t destructiveProjectEnumData for _BPlistEncodingFormat.Reference.Backing(uint64_t result)
{
  *(_BYTE *)(result + 24) &= 0xFu;
  return result;
}

uint64_t destructiveInjectEnumTag for _BPlistEncodingFormat.Reference.Backing(uint64_t result, unsigned int a2)
{
  if (a2 < 9)
  {
    *(_BYTE *)(result + 24) = *(_BYTE *)(result + 24) & 1 | (16 * a2);
  }
  else
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 9;
    *(_BYTE *)(result + 24) = -112;
  }
  return result;
}

ValueMetadata *type metadata accessor for _BPlistEncodingFormat.Reference.Backing()
{
  return &type metadata for _BPlistEncodingFormat.Reference.Backing;
}

void *type metadata accessor for __PlistReferencingEncoderBPlist.Reference()
{
  return &unk_1E0F288C8;
}

uint64_t destroy for _BPlistEncodingFormat()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeWithCopy for _BPlistEncodingFormat(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _BPlistEncodingFormat(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _BPlistEncodingFormat(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _BPlistEncodingFormat(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _BPlistEncodingFormat(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _BPlistEncodingFormat()
{
  return &type metadata for _BPlistEncodingFormat;
}

void *type metadata accessor for _PlistEncodingStorageBPlist()
{
  return &unk_1E0F27800;
}

_UNKNOWN **associated type witness table accessor for PlistEncodingFormat.Writer : PlistWriting in _BPlistEncodingFormat()
{
  return &protocol witness table for _BPlistEncodingFormat.Writer;
}

_UNKNOWN **associated type witness table accessor for PlistWriting.Reference : PlistEncodingReference in _BPlistEncodingFormat.Writer()
{
  return &protocol witness table for _BPlistEncodingFormat.Reference;
}

uint64_t _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(result + 16);
  v4 = *(_QWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 32);
  v6 = *(unsigned __int8 *)(result + 40);
  if (v6 >> 4 == 6)
  {
    v13 = *a2;
    *(_QWORD *)(result + 48) = *a2;
    v8 = __OFADD__(v13, 1);
    v14 = v13 + 1;
    if (v8)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    *a2 = v14;
    v15 = *(_QWORD *)(v4 + 16);
    if (!v15)
    {
      outlined copy of _BPlistEncodingFormat.Reference.Backing(v3, v4, v5, v6);
      swift_retain();
      swift_retain();
      swift_retain();
      v18 = *(_QWORD *)(v5 + 16);
      if (!v18)
      {
LABEL_25:
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v3, v4, v5, v6);
        swift_release();
        swift_release();
        return swift_release();
      }
LABEL_21:
      swift_retain();
      swift_retain();
      result = swift_retain();
      v21 = 0;
      while (v21 < *(_QWORD *)(v5 + 16))
      {
        ++v21;
        v22 = swift_retain();
        _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(v22, a2);
        result = swift_release();
        if (v18 == v21)
        {
          swift_release();
          swift_release();
          swift_release();
          goto LABEL_25;
        }
      }
      goto LABEL_28;
    }
    swift_retain();
    swift_retain();
    outlined copy of _BPlistEncodingFormat.Reference.Backing(v3, v4, v5, v6);
    swift_retain();
    swift_retain();
    result = swift_retain();
    v16 = 0;
    while (v16 < *(_QWORD *)(v4 + 16))
    {
      ++v16;
      v17 = swift_retain();
      _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(v17, a2);
      result = swift_release();
      if (v15 == v16)
      {
        swift_release();
        swift_release();
        v18 = *(_QWORD *)(v5 + 16);
        if (v18)
          goto LABEL_21;
        goto LABEL_25;
      }
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v6 >> 4 == 5)
  {
    v7 = *a2;
    *(_QWORD *)(result + 48) = *a2;
    v8 = __OFADD__(v7, 1);
    v9 = v7 + 1;
    if (v8)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    *a2 = v9;
    v10 = *(_QWORD *)(v3 + 16);
    if (v10)
    {
      result = swift_retain();
      v11 = 0;
      while (v11 < *(_QWORD *)(v3 + 16))
      {
        ++v11;
        v12 = swift_retain();
        _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(v12, a2);
        result = swift_release();
        if (v10 == v11)
          return outlined consume of _BPlistEncodingFormat.Reference.Backing(v3, v4, v5, v6);
      }
      __break(1u);
      goto LABEL_27;
    }
  }
  else if (*(_QWORD *)(result + 48) == -1)
  {
    v19 = *a2;
    *(_QWORD *)(result + 48) = *a2;
    v8 = __OFADD__(v19, 1);
    v20 = v19 + 1;
    if (v8)
    {
LABEL_31:
      __break(1u);
      return result;
    }
    *a2 = v20;
  }
  return result;
}

uint64_t _BPlistEncodingFormat.Writer.append(_:)(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 48) == *(_QWORD *)(*(_QWORD *)v1 + 16))
    __asm { BR              X14 }
  return result;
}

void _BPlistEncodingFormat.Writer.write(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 < 1)
    return;
  v3 = v2;
  v4 = *(_QWORD *)(v2 + 32);
  if ((unint64_t)a2 < 0x2000)
  {
    v5 = 0x2000 - v4;
    if (__OFSUB__(0x2000, v4))
    {
      __break(1u);
    }
    else
    {
      if (v5 >= a2)
        v6 = a2;
      else
        v6 = 0x2000 - v4;
      if (v5 < a2)
        goto LABEL_8;
      if (!*(_QWORD *)(v3 + 16))
      {
LABEL_17:
        __break(1u);
        return;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      if (!__OFADD__(v4, v6))
      {
        *(_QWORD *)(v3 + 32) = v4 + v6;
        return;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_8:
  if (v4 >= 1)
  {
    Data._Representation.append(contentsOf:)();
    *(_QWORD *)(v3 + 32) = 0;
  }
  Data._Representation.append(contentsOf:)();
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.append(_:isASCII:)(Swift::String _, Swift::Bool isASCII)
{
  unint64_t v2;
  Swift::String v3;

  if (!isASCII)
  {
    v3._countAndFlagsBits = 2415919360;
    String.data(using:allowLossyConversion:)(&v3._countAndFlagsBits, 0, _._countAndFlagsBits, (unint64_t)_._object);
    if (v2 >> 60 != 15)
      __asm { BR              X11 }
    __break(1u);
    JUMPOUT(0x181CAA43CLL);
  }
  v3 = _;
  swift_bridgeObjectRetain();
  specialized String.withUTF8<A>(_:)(&v3._countAndFlagsBits);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.append(_:)(Swift::UInt64 a1)
{
  _QWORD v2[2];

  v2[1] = *MEMORY[0x1E0C80C00];
  _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 4);
  v2[0] = 0;
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)v2, 8);
  v2[0] = bswap64(a1);
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)v2, 8);
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.append(_:)(Swift::Int64 a1)
{
  uint64_t v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a1 <= 0xFF)
  {
    _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 0);
    LOBYTE(v3[0]) = a1;
    v2 = 1;
  }
  else if ((unint64_t)a1 >> 16)
  {
    if (HIDWORD(a1))
    {
      _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 3);
      v3[0] = bswap64(a1);
      v2 = 8;
    }
    else
    {
      _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 2);
      LODWORD(v3[0]) = bswap32(a1);
      v2 = 4;
    }
  }
  else
  {
    _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 1);
    LOWORD(v3[0]) = bswap32(a1) >> 16;
    v2 = 2;
  }
  _BPlistEncodingFormat.Writer.write(_:)((uint64_t)v3, v2);
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.appendTrue()()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1 == 0x2000)
  {
    Data._Representation.append(contentsOf:)();
    v1 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(v0 + 16) + v1) = 9;
  v2 = __OFADD__(v1, 1);
  v3 = v1 + 1;
  if (v2)
    __break(1u);
  else
    *(_QWORD *)(v0 + 32) = v3;
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.appendFalse()()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1 == 0x2000)
  {
    Data._Representation.append(contentsOf:)();
    v1 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(v0 + 16) + v1) = 8;
  v2 = __OFADD__(v1, 1);
  v3 = v1 + 1;
  if (v2)
    __break(1u);
  else
    *(_QWORD *)(v0 + 32) = v3;
}

void _BPlistEncodingFormat.Writer.append(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_181CAA6A8()
{
  uint64_t v0;
  uint64_t v1;

  _BPlistEncodingFormat.Writer.append(_:count:)(5, BYTE6(v0));
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v1, v0);
}

void _BPlistEncodingFormat.Writer.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t j;
  Swift::Int64 v15;
  _DWORD v16[8];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(a3 + 16);
  _BPlistEncodingFormat.Writer.append(_:count:)(9, v15);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
    if ((v7 & 0x8000000000000000) != 0 || HIDWORD(v7))
    {
      swift_retain();
      goto LABEL_36;
    }
    swift_retain();
    swift_retain();
    v8 = 0;
    while (1)
    {
      v9 = v3[8];
      v16[0] = bswap32(v7);
      _BPlistEncodingFormat.Writer.write(_:)((uint64_t)&v16[1] - v9, v9);
      if (v6 - 1 == v8)
        break;
      v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8 * v8 + 40) + 48);
      if ((v7 & 0x8000000000000000) == 0)
      {
        ++v8;
        if (!HIDWORD(v7))
          continue;
      }
      while (1)
      {
LABEL_37:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_35:
        swift_retain();
        swift_retain();
LABEL_36:
        swift_retain();
      }
    }
    swift_release();
    swift_release();
  }
  if (v15)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 48);
    if ((v10 & 0x8000000000000000) != 0 || HIDWORD(v10))
      goto LABEL_35;
    swift_retain();
    swift_retain();
    swift_retain();
    v11 = 0;
    while (1)
    {
      v12 = v3[8];
      v16[0] = bswap32(v10);
      _BPlistEncodingFormat.Writer.write(_:)((uint64_t)&v16[1] - v12, v12);
      if (v15 - 1 == v11)
        break;
      v10 = *(_QWORD *)(*(_QWORD *)(a3 + 8 * v11 + 40) + 48);
      if ((v10 & 0x8000000000000000) == 0)
      {
        ++v11;
        if (!HIDWORD(v10))
          continue;
      }
      goto LABEL_37;
    }
    swift_release();
    swift_release();
    swift_release();
  }
  if (!v6)
  {
    if (!v15)
      return;
    goto LABEL_27;
  }
  swift_retain();
  swift_retain();
  for (i = 0; i != v6; ++i)
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 + 8 * i + 32) + 48) == *(_QWORD *)(*(_QWORD *)v3 + 16))
      __asm { BR              X12 }
  }
  swift_release();
  swift_release();
  if (v15)
  {
LABEL_27:
    swift_retain();
    swift_retain();
    swift_retain();
    for (j = 0; j != v15; ++j)
    {
      if (*(_QWORD *)(*(_QWORD *)(a3 + 8 * j + 32) + 48) == *(_QWORD *)(*(_QWORD *)v3 + 16))
        __asm { BR              X12 }
    }
    swift_release();
    swift_release();
    swift_release();
  }
}

void _BPlistEncodingFormat.Writer.append(_:)(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  Swift::Int64 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int64 v9;
  __int128 v10;
  uint64_t v11;

  v2 = v1;
  v11 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  _BPlistEncodingFormat.Writer.append(_:count:)(8, v4);
  v9 = v4;
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
    if ((v5 & 0x8000000000000000) != 0)
    {
      swift_retain();
      while (1)
      {
LABEL_16:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_17:
        swift_retain();
      }
    }
    if (HIDWORD(v5))
      goto LABEL_17;
    swift_retain();
    v6 = 0;
    while (1)
    {
      v7 = v2[8];
      LODWORD(v10) = bswap32(v5);
      _BPlistEncodingFormat.Writer.write(_:)((uint64_t)&v10 - v7 + 4, v7);
      if (v9 - 1 == v6)
        break;
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * v6 + 40) + 48);
      if ((v5 & 0x8000000000000000) == 0)
      {
        ++v6;
        if (!HIDWORD(v5))
          continue;
      }
      goto LABEL_16;
    }
    swift_release();
    swift_retain();
    v8 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32 + 8 * v8) + 48) == *(_QWORD *)(*(_QWORD *)v2 + 16))
        __asm { BR              X12 }
      ++v8;
    }
    while (v8 != v9);
    swift_release();
  }
}

void _BPlistEncodingFormat.Writer.append(_:count:)(char a1, Swift::Int64 a2)
{
  uint64_t v2;
  char v4;
  char v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = byte_182100E2E[a1];
  if (a2 > 14)
  {
    v5 = v4 | 0xF;
    v6 = *(_QWORD *)(v2 + 32);
    if (v6 != 0x2000)
    {
      *(_BYTE *)(*(_QWORD *)(v2 + 16) + v6) = v5;
      v7 = __OFADD__(v6, 1);
      v8 = v6 + 1;
      if (!v7)
      {
        *(_QWORD *)(v2 + 32) = v8;
LABEL_8:
        _BPlistEncodingFormat.Writer.append(_:)(a2);
        return;
      }
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if (a2 < 0)
  {
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v5 = v4 | a2;
  v9 = *(_QWORD *)(v2 + 32);
  if (v9 == 0x2000)
  {
LABEL_7:
    Data._Representation.append(contentsOf:)();
    **(_BYTE **)(v2 + 16) = v5;
    *(_QWORD *)(v2 + 32) = 1;
    if (a2 >= 15)
      goto LABEL_8;
    return;
  }
  *(_BYTE *)(*(_QWORD *)(v2 + 16) + v9) = v5;
  v7 = __OFADD__(v9, 1);
  v10 = v9 + 1;
  if (v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *(_QWORD *)(v2 + 32) = v10;
}

void _BPlistEncodingFormat.Writer.write(_:subtype:)(char a1, char a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = byte_182100E2E[a1] | a2;
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 == 0x2000)
  {
    Data._Representation.append(contentsOf:)();
    v4 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(v2 + 16) + v4) = v3;
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    *(_QWORD *)(v2 + 32) = v6;
}

void _BPlistEncodingFormat.Reference.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  Swift::UInt64 v5;
  Swift::UInt32 v7;
  Swift::String v8;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(unsigned __int8 *)(v1 + 40);
  switch(v4 >> 4)
  {
    case 0u:
      Hasher._combine(_:)(*(_QWORD *)(v1 + 32));
      break;
    case 1u:
    case 2u:
      v5 = *(_QWORD *)(v1 + 16);
      goto LABEL_6;
    case 3u:
    case 7u:
      if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v5 = *(_QWORD *)(v1 + 16);
      else
        v5 = 0;
LABEL_6:
      Hasher._combine(_:)(v5);
      break;
    case 4u:
      if ((v2 & 0x7FFFFF) == 0 && (*(_QWORD *)(v1 + 16) & 0x7F800000) == 0)
        v7 = 0;
      else
        v7 = *(_QWORD *)(v1 + 16);
      Hasher._combine(_:)(v7);
      break;
    case 8u:
      Data.hash(into:)(a1, v2, v3);
      break;
    default:
      outlined copy of _BPlistEncodingFormat.Reference.Backing(v2, v3, *(_QWORD *)(v1 + 32), v4);
      _StringGuts.grow(_:)(79);
      v8._object = (void *)0x800000018230A590;
      v8._countAndFlagsBits = 0xD00000000000004DLL;
      String.append(_:)(v8);
      _print_unlocked<A, B>(_:_:)();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _BPlistEncodingFormat.Reference()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _BPlistEncodingFormat.Reference(uint64_t a1)
{
  _BPlistEncodingFormat.Reference.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _BPlistEncodingFormat.Reference()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _BPlistEncodingFormat.Reference(uint64_t *a1, uint64_t *a2)
{
  return specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(*a1, *a2);
}

uint64_t base witness table accessor for Equatable in _BPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type _BPlistEncodingFormat.Reference and conformance _BPlistEncodingFormat.Reference, a2, (uint64_t (*)(uint64_t))type metadata accessor for _BPlistEncodingFormat.Reference, (uint64_t)&protocol conformance descriptor for _BPlistEncodingFormat.Reference);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[7];
  _QWORD v21[8];

  if (a3 != a2)
  {
    v5 = a3;
    v7 = result;
    v8 = 56 * a3;
LABEL_6:
    v9 = v7;
    v10 = v8;
    while (1)
    {
      v11 = *a4 + v10;
      outlined init with copy of (key: String, value: Encodable)(v11, (uint64_t)v21);
      outlined init with copy of (key: String, value: Encodable)(v11 - 56, (uint64_t)v20);
      if (v21[0] == v20[0] && v21[1] == v20[1])
      {
        outlined destroy of (key: String, value: Encodable)((uint64_t)v20);
        result = outlined destroy of (key: String, value: Encodable)((uint64_t)v21);
LABEL_5:
        ++v5;
        v8 += 56;
        if (v5 == a2)
          return result;
        goto LABEL_6;
      }
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined destroy of (key: String, value: Encodable)((uint64_t)v20);
      result = outlined destroy of (key: String, value: Encodable)((uint64_t)v21);
      if ((v13 & 1) == 0)
        goto LABEL_5;
      if (!*a4)
        break;
      v14 = *a4 + v10;
      v15 = *(_QWORD *)(v14 + 48);
      v17 = *(_OWORD *)(v14 + 16);
      v16 = *(_OWORD *)(v14 + 32);
      v18 = *(_OWORD *)v14;
      v19 = *(_OWORD *)(v14 - 40);
      *(_OWORD *)v14 = *(_OWORD *)(v14 - 56);
      *(_OWORD *)(v14 + 16) = v19;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(v14 - 24);
      *(_QWORD *)(v14 + 48) = *(_QWORD *)(v14 - 8);
      *(_OWORD *)(v14 - 56) = v18;
      *(_OWORD *)(v14 - 40) = v17;
      *(_OWORD *)(v14 - 24) = v16;
      v10 -= 56;
      ++v9;
      *(_QWORD *)(v14 - 8) = v15;
      if (v5 == v9)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized OrderedSet._appendNew(_:in:)()
{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  swift_retain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  result = specialized ContiguousArray._endMutation()();
  v2 = *(_QWORD *)(v0[1] + 16);
  if (*v0)
  {
    if (MEMORY[0x186DA3CD4](*(_QWORD *)(*v0 + 16) & 0x3FLL) >= v2)
    {
      result = swift_isUniquelyReferenced_native();
      v3 = *v0;
      if ((result & 1) == 0)
      {
        if (!v3)
        {
LABEL_12:
          __break(1u);
          return result;
        }
        v3 = _HashTable.copy()();
        result = swift_release();
        *v0 = v3;
      }
      if (v3)
        return _HashTable.UnsafeHandle.subscript.setter();
      __break(1u);
      goto LABEL_12;
    }
    return specialized OrderedSet._regenerateHashTable()();
  }
  if ((unint64_t)v2 >= 0x10)
    return specialized OrderedSet._regenerateHashTable()();
  return result;
}

uint64_t specialized OrderedSet._regenerateHashTable()()
{
  uint64_t *v0;
  Swift::Int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v1 = v0[1];
  if (*v0)
  {
    v2 = *(_QWORD *)(*v0 + 24) & 0x3FLL;
    v3 = *(_QWORD *)(v1 + 16);
    if (v2)
      goto LABEL_7;
  }
  else
  {
    v2 = 0;
    v3 = *(_QWORD *)(v1 + 16);
  }
  if (v3 < 0x10)
  {
    v4 = 0;
    goto LABEL_11;
  }
LABEL_7:
  v5 = MEMORY[0x186DA3CF8](v3);
  if (v2 <= v5)
    v6 = v5;
  else
    v6 = v2;
  v4 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v1, v6, 0, v2);
LABEL_11:
  result = swift_release();
  *v0 = v4;
  return result;
}

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(Swift::Int a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = MEMORY[0x186DA3CF8](*(_QWORD *)(a1 + 16));
  v9 = 0;
  if ((a3 & 1) != 0)
    v10 = 0;
  else
    v10 = a2;
  if (v10 <= v8)
    v10 = v8;
  if (v10 <= a4)
    v11 = a4;
  else
    v11 = v10;
  if (v11 >= 5)
  {
    v9 = MEMORY[0x186DA3D04]();
    specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(a1, (_QWORD *)(v9 + 16), v9 + 32);
  }
  return v9;
}

Swift::Int specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(Swift::Int result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = 0;
    while (1)
    {
      Hasher.init(_seed:)();
      swift_retain();
      _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v16);
      result = Hasher._finalize()();
      v7 = 1 << *a2;
      v8 = __OFSUB__(v7, 1);
      v9 = v7 - 1;
      if (v8)
        break;
      v10 = v9 & result;
      v11 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      v13 = v12;
      v15 = v14;
      swift_release();
      v16[0] = a2;
      v16[1] = a3;
      v16[2] = v10;
      v17 = v11;
      v18 = v13;
      v19 = v15;
      v20 = 0;
      while (v17)
        _HashTable.BucketIterator.advance()();
      result = _HashTable.BucketIterator.currentValue.setter();
      if (++v6 == v3)
        return result;
    }
    __break(1u);
  }
  return result;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  Swift::Int result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;

  Hasher.init(_seed:)();
  _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)&v27);
  result = Hasher._finalize()();
  v9 = 1 << *a4;
  v10 = __OFSUB__(v9, 1);
  v11 = v9 - 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    v12 = v11 & result;
    v13 = _HashTable.UnsafeHandle._startIterator(bucket:)();
    *(_QWORD *)&v27 = a4;
    *((_QWORD *)&v27 + 1) = a5;
    *(_QWORD *)&v28 = v12;
    *((_QWORD *)&v28 + 1) = v13;
    *(_QWORD *)&v29 = v14;
    *((_QWORD *)&v29 + 1) = v15;
    v30 = 0;
    v16 = _HashTable.BucketIterator.currentValue.getter();
    v23 = v27;
    v24 = v28;
    v25 = v29;
    v26 = v30;
    if ((v17 & 1) == 0)
    {
      v18 = swift_retain();
      v19 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v18, a1);
      swift_release();
      if ((v19 & 1) == 0)
      {
        do
        {
          _HashTable.BucketIterator.advance()();
          v31 = v23;
          v32 = v24;
          v33 = v25;
          v34 = v26;
          v16 = _HashTable.BucketIterator.currentValue.getter();
          if ((v20 & 1) != 0)
            break;
          v21 = swift_retain();
          v22 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v21, a1);
          swift_release();
        }
        while ((v22 & 1) == 0);
      }
    }
    return v16;
  }
  return result;
}

uint64_t specialized OrderedSet._reserveCapacity(_:persistent:)(uint64_t result, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (result < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v3 = v2;
  v5 = result;
  specialized ContiguousArray.reserveCapacity(_:)();
  v7 = *v2;
  v6 = v2[1];
  if (*v2)
  {
    v8 = *(_QWORD *)(v7 + 16) & 0x3FLL;
    v9 = MEMORY[0x186DA3CF8](v5);
    if ((a2 & 1) != 0)
    {
      v10 = v9;
      if (v8 >= v9)
        goto LABEL_14;
    }
    else
    {
      v10 = *(_QWORD *)(v7 + 24) & 0x3FLL;
      if (v8 >= v9)
        goto LABEL_14;
    }
LABEL_10:
    if (v10 <= v9)
      v11 = v9;
    else
      v11 = v10;
    goto LABEL_24;
  }
  v9 = MEMORY[0x186DA3CF8](v5);
  v8 = 0;
  if ((a2 & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  if (v9 > 0)
    goto LABEL_10;
LABEL_14:
  if (v10 <= v9)
    v12 = v9;
  else
    v12 = v10;
  result = MEMORY[0x186DA3CF8](*(_QWORD *)(v6 + 16));
  if (result <= v12)
    v13 = v12;
  else
    v13 = result;
  if (v13 < v8)
  {
    if (v10 <= v13)
      v11 = v13;
    else
      v11 = v10;
LABEL_24:
    v14 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v6, v11, 0, v10);
    result = swift_release();
    *v3 = v14;
    return result;
  }
  if (!v7 || (result = swift_isUniquelyReferenced_native(), (_DWORD)result))
  {
    v15 = *v3;
    if (*v3)
      goto LABEL_29;
LABEL_33:
    if (!v10)
      return result;
    __break(1u);
    goto LABEL_35;
  }
  result = *v3;
  if (!*v3)
  {
LABEL_36:
    __break(1u);
    return result;
  }
  v15 = _HashTable.copy()();
  result = swift_release();
  *v3 = v15;
  if (!v15)
    goto LABEL_33;
LABEL_29:
  if ((*(_QWORD *)(v15 + 24) & 0x3FLL) != v10)
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(v15 + 24) & 0xFFFFFFFFFFFFFFC0 | v10 & 0x3F;
  return result;
}

unint64_t specialized OrderedSet._removeExistingMember(at:in:)(int64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(v2[1] + 16);
  if (!*v2)
  {
    if (!v4)
      goto LABEL_16;
    return specialized ContiguousArray.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
  }
  if ((*(_QWORD *)(*v2 + 16) & 0x3FLL) == (*(_QWORD *)(*v2 + 24) & 0x3FLL))
  {
    if (!v4)
      goto LABEL_16;
  }
  else if (v4 <= static _HashTable.minimumCapacity(forScale:)())
  {
LABEL_16:
    v9 = specialized ContiguousArray.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    specialized OrderedSet._regenerateHashTable()();
    return v9;
  }
  result = swift_isUniquelyReferenced_native();
  v7 = *v2;
  if ((result & 1) == 0)
  {
    if (!v7)
      goto LABEL_21;
    v7 = _HashTable.copy()();
    result = swift_release();
    *v2 = v7;
  }
  if (v7)
  {
    swift_retain();
    result = specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(a2, (_QWORD *)(v7 + 16), v7 + 32, (uint64_t)v2);
    v8 = a1 + 1;
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (v8 >= a1)
    {
      specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(a1, v8, v2[1], (_QWORD *)(v7 + 16), v7 + 32);
      swift_release();
      return specialized ContiguousArray.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    }
    __break(1u);
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v5 + 24 * a1;
    v9 = *(_OWORD *)(v7 + 32);
    v8 = (_BYTE *)(v7 + 32);
    v10 = v8[16];
    v11 = v6 - 1;
    *(_OWORD *)a2 = v9;
    *(_BYTE *)(a2 + 16) = v10;
    v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      result = (uint64_t)memmove(v8, v8 + 24, 24 * v12);
      *(_QWORD *)(v5 + 16) = v11;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1)
{
  return specialized ContiguousArray.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v5 = *v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = a2(v5);
    *v2 = v5;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v7 - 1;
    v9 = v7 - 1 - a1;
    if (v9 >= 0)
    {
      v10 = v5 + 8 * a1;
      v11 = *(_QWORD *)(v10 + 32);
      memmove((void *)(v10 + 32), (const void *)(v10 + 40), 8 * v9);
      *(_QWORD *)(v5 + 16) = v8;
      specialized ContiguousArray._endMutation()();
      return v11;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  char v22[72];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v6 = a1;
  *(_QWORD *)&v23 = a2;
  *((_QWORD *)&v23 + 1) = a3;
  v24 = a1;
  v25 = _HashTable.UnsafeHandle._startIterator(bucket:)();
  v26 = v7;
  v27 = v8;
  v28 = 0;
  _HashTable.BucketIterator.advance()();
  v9 = v25;
  if (!v25)
    return _HashTable.UnsafeHandle.subscript.setter();
  v10 = v28;
  v11 = v26;
  v12 = v27;
  v13 = v24;
  v14 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)();
  v15 = v23;
  v16 = v14;
  while (1)
  {
    v29 = v15;
    v30 = v13;
    v31 = v9;
    v32 = v11;
    v33 = v12;
    v34 = v10 & 1;
    result = _HashTable.BucketIterator.currentValue.getter();
    if ((v18 & 1) != 0)
      break;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      break;
    }
    if (result >= *(_QWORD *)(*(_QWORD *)(a4 + 8) + 16))
      goto LABEL_16;
    Hasher.init(_seed:)();
    swift_retain();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v22);
    v19 = Hasher._finalize()();
    result = swift_release();
    v20 = 1 << *a2;
    if (__OFSUB__(v20, 1))
      goto LABEL_17;
    v21 = (v20 - 1) & v19;
    if (v6 >= v16)
    {
      if (v21 < v16)
        goto LABEL_3;
    }
    else if (v21 >= v16)
    {
      goto LABEL_13;
    }
    if (v6 >= v21)
    {
LABEL_13:
      _HashTable.BucketIterator.currentValue.getter();
      _HashTable.UnsafeHandle.subscript.setter();
      v6 = v13;
    }
LABEL_3:
    _HashTable.BucketIterator.advance()();
    v15 = v23;
    v13 = v24;
    v9 = v25;
    v11 = v26;
    v12 = v27;
    v10 = v28;
    if (!v25)
      return _HashTable.UnsafeHandle.subscript.setter();
  }
  __break(1u);
  return result;
}

void specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  Swift::Int v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  Swift::Int v56;
  __int128 v57;
  uint64_t v58;
  char v59;

  v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v6 >= 1)
  {
    v10 = *(_QWORD *)(a3 + 16);
    v11 = v10 - v6;
    if ((uint64_t)v10 < v6)
      ++v11;
    if (a1 < v11 >> 1)
    {
      if (MEMORY[0x186DA3CD4](*a4 & 0x3FLL) / 3 > a1)
      {
        if (a1 < 0)
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        if (v10 < a1)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        if (a1)
        {
          swift_retain();
          v12 = 0;
          while (1)
          {
            Hasher.init(_seed:)();
            swift_retain();
            _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)&v50);
            v13 = Hasher._finalize()();
            v14 = 1 << *a4;
            v15 = __OFSUB__(v14, 1);
            v16 = v14 - 1;
            if (v15)
              break;
            v17 = v16 & v13;
            v18 = _HashTable.UnsafeHandle._startIterator(bucket:)();
            *(_QWORD *)&v50 = a4;
            *((_QWORD *)&v50 + 1) = a5;
            v51 = v17;
            *(_QWORD *)&v52 = v18;
            *((_QWORD *)&v52 + 1) = v19;
            v53 = v20;
            v54 = 0;
            if (v18)
            {
              v21 = 0;
              v22 = a4;
              v23 = a5;
              do
              {
                *(_QWORD *)&v55 = v22;
                *((_QWORD *)&v55 + 1) = v23;
                v56 = v17;
                *(_QWORD *)&v57 = v18;
                *((_QWORD *)&v57 + 1) = v19;
                v58 = v20;
                v59 = v21 & 1;
                v24 = _HashTable.BucketIterator.currentValue.getter();
                if ((v25 & 1) == 0 && v24 == v12)
                  break;
                _HashTable.BucketIterator.advance()();
                v23 = *((_QWORD *)&v50 + 1);
                v22 = (_QWORD *)v50;
                v17 = v51;
                v19 = *((_QWORD *)&v52 + 1);
                v18 = v52;
                v20 = v53;
                v21 = v54;
              }
              while ((_QWORD)v52);
            }
            if (__OFADD__(v12, v6))
              goto LABEL_56;
            ++v12;
            _HashTable.BucketIterator.currentValue.setter();
            swift_release();
            if (v12 == a1)
            {
              swift_release();
              goto LABEL_20;
            }
          }
          __break(1u);
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
        goto LABEL_20;
      }
      *(_QWORD *)&v55 = a4;
      *((_QWORD *)&v55 + 1) = a5;
      v56 = 0;
      *(_QWORD *)&v57 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      *((_QWORD *)&v57 + 1) = v30;
      v58 = v31;
      v59 = 0;
      v50 = v55;
      v51 = 0;
      v52 = v57;
      v53 = v58;
      v54 = v59;
      v32 = _HashTable.BucketIterator.currentValue.getter();
      if ((v33 & 1) != 0 || v32 >= a1)
      {
LABEL_32:
        _HashTable.BucketIterator.advance()();
LABEL_20:
        v26 = a4[1];
        if (__OFSUB__(v26 >> 6, v6))
        {
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        v27 = 1 << *a4;
        v15 = __OFSUB__(v27, 1);
        v28 = v27 - 1;
        if (v15)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        v29 = (v28 & (((v26 >> 6) - v6) >> 63)) + (v26 >> 6) - v6;
        if (v29 < v28)
          v28 = 0;
        a4[1] = a4[1] & 0x3FLL | ((v29 - v28) << 6);
        return;
      }
      if (!__OFADD__(v32, v6))
      {
        _HashTable.BucketIterator.currentValue.setter();
        goto LABEL_32;
      }
      __break(1u);
LABEL_38:
      *(_QWORD *)&v55 = a4;
      *((_QWORD *)&v55 + 1) = a5;
      v56 = 0;
      *(_QWORD *)&v57 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      *((_QWORD *)&v57 + 1) = v34;
      v58 = v35;
      v59 = 0;
      v50 = v55;
      v51 = 0;
      v52 = v57;
      v53 = v58;
      v54 = v59;
      v36 = _HashTable.BucketIterator.currentValue.getter();
      if ((v37 & 1) == 0 && v36 >= v5)
      {
        if (__OFSUB__(v36, v6))
        {
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        _HashTable.BucketIterator.currentValue.setter();
      }
      _HashTable.BucketIterator.advance()();
      return;
    }
    v5 = a2;
    if (__OFSUB__(v10, a2))
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if ((uint64_t)(v10 - a2) >= MEMORY[0x186DA3CD4](*a4 & 0x3FLL) / 3)
      goto LABEL_38;
    if ((uint64_t)v10 < v5)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    if (v5 < 0)
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v10 != v5)
    {
      if (v10 <= v5)
      {
LABEL_68:
        __break(1u);
        return;
      }
      swift_retain();
      while (1)
      {
        Hasher.init(_seed:)();
        swift_retain();
        _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)&v50);
        v38 = Hasher._finalize()();
        v39 = 1 << *a4;
        v15 = __OFSUB__(v39, 1);
        v40 = v39 - 1;
        if (v15)
          goto LABEL_58;
        v41 = v40 & v38;
        v42 = _HashTable.UnsafeHandle._startIterator(bucket:)();
        *(_QWORD *)&v50 = a4;
        *((_QWORD *)&v50 + 1) = a5;
        v51 = v41;
        *(_QWORD *)&v52 = v42;
        *((_QWORD *)&v52 + 1) = v43;
        v53 = v44;
        v54 = 0;
        if (v42)
        {
          v45 = 0;
          v46 = a4;
          v47 = a5;
          do
          {
            *(_QWORD *)&v55 = v46;
            *((_QWORD *)&v55 + 1) = v47;
            v56 = v41;
            *(_QWORD *)&v57 = v42;
            *((_QWORD *)&v57 + 1) = v43;
            v58 = v44;
            v59 = v45 & 1;
            v48 = _HashTable.BucketIterator.currentValue.getter();
            if ((v49 & 1) == 0 && v48 == v5)
              break;
            _HashTable.BucketIterator.advance()();
            v47 = *((_QWORD *)&v50 + 1);
            v46 = (_QWORD *)v50;
            v41 = v51;
            v43 = *((_QWORD *)&v52 + 1);
            v42 = v52;
            v44 = v53;
            v45 = v54;
          }
          while ((_QWORD)v52);
        }
        if (__OFSUB__(v5, v6))
          goto LABEL_59;
        ++v5;
        _HashTable.BucketIterator.currentValue.setter();
        swift_release();
        if (v5 == v10)
        {
          swift_release();
          return;
        }
      }
    }
  }
}

uint64_t specialized ContiguousArray._customRemoveLast()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
    v3 = result;
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v6 = v5 - 1;
    v7 = v3 + 24 * v6;
    v8 = *(_BYTE *)(v7 + 48);
    *(_OWORD *)a1 = *(_OWORD *)(v7 + 32);
    *(_BYTE *)(a1 + 16) = v8;
    *(_QWORD *)(v3 + 16) = v6;
    *v1 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized ContiguousArray._customRemoveLast()()
{
  return specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
}

uint64_t specialized ContiguousArray._customRemoveLast()(uint64_t (*a1)(uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if ((result & 1) == 0)
  {
    result = a1(v3);
    v3 = result;
    *v1 = result;
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v6 = v5 - 1;
    v7 = *(_QWORD *)(v3 + 8 * v6 + 32);
    *(_QWORD *)(v3 + 16) = v6;
    specialized ContiguousArray._endMutation()();
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *boxed_opaque_existential_1;
  void (*v37)(char *, uint64_t);
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[5];
  _OWORD v52[2];
  uint64_t v53;

  v49 = a6;
  v51[3] = &type metadata for _CodingKey;
  v46 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v51[4] = v46;
  v15 = swift_allocObject();
  v51[0] = v15;
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)(v15 + 32) = a4;
  *(_BYTE *)(v15 + 40) = a5;
  *(_QWORD *)(a8 + 96) = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  _CodingKey.stringValue.getter(a2, a3, a4, a5);
  v50 = a7;
  *(_QWORD *)(a8 + 104) = a7 | 0x8000000000000000;
  *(_QWORD *)(a8 + 112) = v16;
  *(_QWORD *)(a8 + 120) = v17;
  swift_release();
  v18 = *(_QWORD *)(a1 + 32);
  v47 = *(_QWORD *)(a1 + 24);
  v48 = v18;
  v19 = __swift_project_boxed_opaque_existential_1(v51, (uint64_t)&type metadata for _CodingKey);
  v20 = type metadata accessor for Optional();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  initializeWithCopy for _CodingKey((uint64_t)v23, (uint64_t)v19);
  v24 = storeEnumTagSinglePayload for _CodingKey((uint64_t)v23, 0, 1u);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v27);
  (*(void (**)(char *, char *, uint64_t, __n128))(v21 + 16))(v23, v23, v20, v28);
  if (getEnumTagSinglePayload for _CodingKey((uint64_t)v23, 1u) == 1)
  {
    v29 = *(void (**)(char *, uint64_t))(v21 + 8);
    v30 = v48;
    swift_bridgeObjectRetain();
    v29(v23, v20);
    v29(v23, v20);
    v31 = v49;
    swift_retain();
    swift_release();
    swift_release();
    v32 = v31 >> 62;
    v33 = (uint64_t *)v31;
    if (v31 >> 62)
    {
LABEL_3:
      if ((_DWORD)v32 != 1)
      {
        v39 = 0;
LABEL_14:
        v43 = v47;
        *(_QWORD *)(a8 + 16) = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(a8 + 24) = v43;
        *(_QWORD *)(a8 + 32) = v30;
        *(_QWORD *)(a8 + 40) = v33;
        *(_QWORD *)(a8 + 48) = v39;
        specialized _BPlistEncodingFormat.init()((uint64_t *)v52);
        v44 = v52[1];
        *(_OWORD *)(a8 + 56) = v52[0];
        *(_OWORD *)(a8 + 72) = v44;
        *(_QWORD *)(a8 + 88) = v53;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
        return a8;
      }
      v34 = (uint64_t *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      v39 = *v34;
      swift_release();
      goto LABEL_14;
    }
LABEL_12:
    v34 = (uint64_t *)(v31 + 64);
    goto LABEL_13;
  }
  __swift_memcpy25_8((uint64_t)v26, (uint64_t)v23);
  v33 = (uint64_t *)swift_allocObject();
  v35 = v46;
  v33[5] = (uint64_t)&type metadata for _CodingKey;
  v33[6] = v35;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33 + 2);
  __swift_memcpy25_8((uint64_t)boxed_opaque_existential_1, (uint64_t)v26);
  v37 = *(void (**)(char *, uint64_t))(v21 + 8);
  v30 = v48;
  swift_bridgeObjectRetain();
  v37(v23, v20);
  v31 = v49;
  v33[7] = v49;
  v32 = v31 >> 62;
  if (v31 >> 62)
  {
    if ((_DWORD)v32 != 1)
    {
      v42 = 1;
LABEL_11:
      v33[8] = v42;
      swift_release();
      swift_release();
      if ((_DWORD)v32)
        goto LABEL_3;
      goto LABEL_12;
    }
    v38 = (uint64_t *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v38 = (uint64_t *)(v31 + 64);
  }
  v40 = *v38;
  result = swift_retain();
  v42 = v40 + 1;
  if (!__OFADD__(v40, 1))
    goto LABEL_11;
  __break(1u);
  return result;
}

uint64_t specialized __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t, __n128);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t *v40;
  void (*v41)(char *, uint64_t);
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[3];
  __int128 v56;
  _OWORD v57[2];
  uint64_t v58;

  v52 = a3;
  *(_QWORD *)&v56 = a6;
  *((_QWORD *)&v56 + 1) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v55);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a2, a6);
  *(_QWORD *)(a5 + 96) = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  v13 = dispatch thunk of CodingKey.stringValue.getter();
  v54 = a4;
  *(_QWORD *)(a5 + 104) = a4 | 0x8000000000000000;
  *(_QWORD *)(a5 + 112) = v13;
  *(_QWORD *)(a5 + 120) = v14;
  swift_release();
  v49 = *(_QWORD *)(a1 + 24);
  v53 = a1;
  v51 = *(_QWORD *)(a1 + 32);
  v48 = v56;
  v15 = v56;
  v16 = __swift_project_boxed_opaque_existential_1(v55, v56);
  v17 = type metadata accessor for Optional();
  v18 = *(_QWORD **)(v17 - 8);
  v19 = v18[8];
  v20 = MEMORY[0x1E0C80A78](v17);
  v21 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v22 = (char *)&v48 - v21;
  v23 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v23 + 16))((char *)&v48 - v21, v16, v15, v20);
  v24 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))((char *)&v48 - v21, 0, 1, v15);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v48 - v21;
  v30 = (void (*)(char *, char *, uint64_t, __n128))v18[2];
  v50 = v17;
  v30((char *)&v48 - v21, (char *)&v48 - v21, v17, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))((char *)&v48 - v21, 1, v15) == 1)
  {
    v31 = (void (*)(char *, uint64_t))v18[1];
    v32 = v51;
    swift_bridgeObjectRetain();
    v33 = v50;
    v31(v22, v50);
    v31(v29, v33);
    v34 = v52;
    swift_retain();
    swift_release();
    swift_release();
    v35 = v34 >> 62;
    v36 = v34;
    v37 = v34;
    if (v34 >> 62)
    {
LABEL_3:
      if ((_DWORD)v35 != 1)
      {
        v43 = 0;
LABEL_16:
        v46 = v49;
        *(_QWORD *)(a5 + 16) = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(a5 + 24) = v46;
        *(_QWORD *)(a5 + 32) = v32;
        *(_QWORD *)(a5 + 40) = v36;
        *(_QWORD *)(a5 + 48) = v43;
        specialized _BPlistEncodingFormat.init()((uint64_t *)v57);
        v47 = v57[1];
        *(_OWORD *)(a5 + 56) = v57[0];
        *(_OWORD *)(a5 + 72) = v47;
        *(_QWORD *)(a5 + 88) = v58;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
        return a5;
      }
      v38 = (uint64_t *)((v37 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_15:
      v43 = *v38;
      swift_release();
      goto LABEL_16;
    }
LABEL_14:
    v38 = (uint64_t *)(v37 + 64);
    goto LABEL_15;
  }
  v39 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v39(v26, (char *)&v48 - v21, v15);
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 40) = v48;
  v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v36 + 16));
  v39((char *)v40, v26, v15);
  v41 = (void (*)(char *, uint64_t))v18[1];
  v32 = v51;
  swift_bridgeObjectRetain();
  v41(v22, v50);
  v37 = v52;
  *(_QWORD *)(v36 + 56) = v52;
  v35 = v37 >> 62;
  if (!(v37 >> 62))
  {
    v42 = (uint64_t *)(v37 + 64);
    goto LABEL_10;
  }
  if ((_DWORD)v35 == 1)
  {
    v42 = (uint64_t *)((v37 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_10:
    v44 = *v42;
    swift_retain();
    goto LABEL_12;
  }
  v44 = 0;
LABEL_12:
  result = v53;
  if (!__OFADD__(v44, 1))
  {
    *(_QWORD *)(v36 + 64) = v44 + 1;
    swift_release();
    swift_release();
    if ((_DWORD)v35)
      goto LABEL_3;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  BOOL v11;
  char v13;
  BOOL v15;

  v2 = *(double *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(double *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(unsigned __int8 *)(a2 + 40);
  switch(v5 >> 4)
  {
    case 0u:
      if (v9 >= 0x10)
        goto LABEL_30;
      if ((v5 & 1) != 0)
      {
        if ((v9 & 1) == 0)
          goto LABEL_30;
        if (*(_QWORD *)&v2 == *(_QWORD *)&v6 && v3 == v7)
          v10 = 1;
        else
          v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined copy of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v2, v3, v4, v5);
        outlined copy of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      }
      else
      {
        if ((v9 & 1) != 0)
          goto LABEL_30;
        type metadata accessor for NSObject();
        String._bridgeToObjectiveCImpl()();
        String._bridgeToObjectiveCImpl()();
        outlined copy of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v2, v3, v4, v5);
        outlined copy of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
        v10 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v2, v3, v4, v5);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      return v10 & 1;
    case 1u:
      if ((v9 & 0xF0) == 0x10)
        goto LABEL_7;
      goto LABEL_30;
    case 2u:
      if ((v9 & 0xF0) == 0x20)
        goto LABEL_7;
      goto LABEL_30;
    case 3u:
      if ((v9 & 0xF0) != 0x30)
        goto LABEL_30;
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(_QWORD *)(a1 + 16), v3, v4, v5);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      if (v2 == v6)
      {
        v10 = 1;
      }
      else if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
      {
LABEL_31:
        v10 = 0;
      }
      else
      {
        v15 = (~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0;
        if ((*(_QWORD *)&v6 & 0xFFFFFFFFFFFFFLL) == 0)
          v15 = 0;
        v10 = (*(_QWORD *)&v2 & 0xFFFFFFFFFFFFFLL) != 0 && v15;
      }
      return v10 & 1;
    case 4u:
      if ((v9 & 0xF0) != 0x40)
        goto LABEL_30;
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(_QWORD *)(a1 + 16), v3, v4, v5);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      v11 = (~LODWORD(v6) & 0x7F800000) == 0;
      if ((LODWORD(v6) & 0x7FFFFF) == 0)
        v11 = 0;
      v13 = (~LODWORD(v2) & 0x7F800000) == 0 && (LODWORD(v2) & 0x7FFFFF) != 0 && v11;
      if (*(float *)&v2 == *(float *)&v6)
        v10 = 1;
      else
        v10 = v13;
      return v10 & 1;
    case 7u:
      if ((v9 & 0xF0) != 0x70)
        goto LABEL_30;
LABEL_7:
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(_QWORD *)(a1 + 16), v3, v4, v5);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      v10 = v2 == v6;
      return v10 & 1;
    case 8u:
      if ((v9 & 0xF0) == 0x80)
        __asm { BR              X9 }
      goto LABEL_30;
    default:
LABEL_30:
      outlined copy of _BPlistEncodingFormat.Reference.Backing(*(_QWORD *)(a1 + 16), v3, v4, v5);
      outlined copy of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v2, v3, v4, v5);
      outlined consume of _BPlistEncodingFormat.Reference.Backing(*(uint64_t *)&v6, v7, v8, v9);
      goto LABEL_31;
  }
}

uint64_t specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  Swift::Int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Swift::Int v28;

  v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
  {
    v26 = MEMORY[0x1E0DEE9D8];
    v2 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x1E0DEE9D8]);
    specialized _copyCollectionToContiguousArray<A>(_:)(v26);
  }
  v27 = 0;
  v28 = (Swift::Int)v2;
  v3 = *(_QWORD *)(a1 + 16);
  specialized OrderedSet._reserveCapacity(_:persistent:)(v3, 0);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 32 + 16 * v4);
      v7 = *(_QWORD *)(v28 + 16);
      if (v27)
      {
        swift_retain();
        swift_retain();
        swift_retain();
        specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v6, v28 + 32, v7, (_QWORD *)(v27 + 16), v27 + 32);
        v9 = v8;
        v5 = v10;
        result = swift_release();
        if ((v9 & 1) == 0)
          goto LABEL_39;
      }
      else
      {
        if (!v7)
        {
          swift_retain();
          swift_retain();
LABEL_19:
          v5 = 0;
          goto LABEL_20;
        }
        swift_retain();
        swift_retain();
        v12 = swift_retain();
        v13 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v12, v6);
        result = swift_release();
        if ((v13 & 1) != 0)
          goto LABEL_39;
        if (v7 == 1)
          goto LABEL_19;
        v14 = swift_retain();
        v15 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v14, v6);
        result = swift_release();
        if ((v15 & 1) != 0)
        {
LABEL_39:
          __break(1u);
          return result;
        }
        v5 = v7 - 2;
        v16 = v28 + 48;
        while (v5)
        {
          v16 += 8;
          v17 = swift_retain();
          v18 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v17, v6);
          result = swift_release();
          --v5;
          if ((v18 & 1) != 0)
            goto LABEL_39;
        }
      }
LABEL_20:
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v19 = v27;
      v20 = *(_QWORD *)(v28 + 16);
      if (v27)
      {
        if (MEMORY[0x186DA3CD4](*(_QWORD *)(v27 + 16) & 0x3FLL) >= (uint64_t)v20)
        {
          if ((swift_isUniquelyReferenced_native() & 1) == 0)
          {
            v25 = _HashTable.copy()();
            swift_release();
            v27 = v25;
            v19 = v25;
            if (!v25)
            {
              __break(1u);
LABEL_36:
              swift_bridgeObjectRelease();
              return v5;
            }
          }
          _HashTable.UnsafeHandle.subscript.setter();
          v5 = v19;
        }
        else
        {
          v21 = *(_QWORD *)(v27 + 24) & 0x3FLL;
          if (v20 > 0xF || v21 != 0)
          {
LABEL_29:
            v23 = MEMORY[0x186DA3CF8](v20);
            if (v21 <= v23)
              v24 = v23;
            else
              v24 = v21;
            v5 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v28, v24, 0, v21);
            swift_release();
            v27 = v5;
            goto LABEL_6;
          }
          swift_release();
          v5 = 0;
          v27 = 0;
        }
      }
      else
      {
        v21 = 0;
        v5 = 0;
        if (v20 > 0xF)
          goto LABEL_29;
      }
LABEL_6:
      ++v4;
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      swift_release();
      swift_release();
      if (v4 == v3)
        goto LABEL_36;
    }
  }
  return 0;
}

uint64_t partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1);
}

{
  uint64_t v1;

  return specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined init with copy of (key: String, value: Encodable)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_181CB0BA0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_181CB0BD0()
{
  uint64_t v0;

  outlined consume of _CodingKey(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t outlined destroy of (key: String, value: Encodable)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1);
}

uint64_t specialized _BPlistEncodingFormat.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  type metadata accessor for _BPlistEncodingFormat.Reference();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 2;
  *(_BYTE *)(v2 + 40) = -112;
  *(_QWORD *)(v2 + 48) = -1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 40) = -112;
  *(_QWORD *)(v3 + 48) = -1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 1;
  *(_BYTE *)(v4 + 40) = -112;
  *(_QWORD *)(v4 + 48) = -1;
  result = swift_allocObject();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 2;
  *(_BYTE *)(result + 40) = -112;
  *(_QWORD *)(result + 48) = -1;
  *a1 = v2;
  a1[1] = v3;
  v6 = MEMORY[0x1E0DEE9E8];
  a1[2] = v4;
  a1[3] = v6;
  a1[4] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist;
  if (!lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _PlistUnkeyedEncodingContainerBPlist, &unk_1E0F29358);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist);
  }
  return result;
}

uint64_t type metadata accessor for _PlistKeyedEncodingContainerBPlist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PlistKeyedEncodingContainerBPlist);
}

void *type metadata accessor for _PlistUnkeyedEncodingContainerBPlist()
{
  return &unk_1E0F29358;
}

uint64_t destroy for _BPlistEncodingFormat.Writer(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for _BPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v3, v4);
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v4;
  return a1;
}

uint64_t assignWithCopy for _BPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v5, v4);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v4;
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

uint64_t assignWithTake for _BPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for _BPlistEncodingFormat.Writer()
{
  return &type metadata for _BPlistEncodingFormat.Writer;
}

uint64_t IntegerFormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  char v41;
  char *v42;
  _BOOL4 v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  char *v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  char *v71;
  char *v72;
  uint64_t v73;
  BOOL v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t AssociatedConformanceWitness;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE v116[144];
  uint64_t v117;

  v3 = v2;
  v112 = a1;
  v117 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v101 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v102 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v100 = (char *)&v95 - v8;
  v107 = v5;
  v99 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16);
  v96 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v96);
  v95 = (char *)&v95 - v9;
  v108 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v10);
  v97 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v98 = (char *)&v95 - v13;
  MEMORY[0x1E0C80A78](v14);
  v110 = (char *)&v95 - v15;
  MEMORY[0x1E0C80A78](v16);
  v103 = (char *)&v95 - v17;
  MEMORY[0x1E0C80A78](v18);
  v111 = (char *)&v95 - v19;
  MEMORY[0x1E0C80A78](v20);
  v109 = (char *)&v95 - v21;
  MEMORY[0x1E0C80A78](v22);
  v105 = (char *)&v95 - v23;
  MEMORY[0x1E0C80A78](v24);
  v104 = (char *)&v95 - v25;
  v26 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v95 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = v3 + *(int *)(a2 + 36);
  v29 = *(_QWORD *)(v3 + 8);
  ObjectType = swift_getObjectType();
  v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 472);
  swift_unknownObjectRetain();
  v32 = v31(ObjectType, v29);
  v34 = v33;
  swift_unknownObjectRelease();
  v35 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v29 + 464);
  swift_unknownObjectRetain();
  v35(&v114, ObjectType, v29);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)&v114, (uint64_t)v116, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature(v106, (uint64_t)v28, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  v36 = (uint64_t *)&v28[*(int *)(v26 + 20)];
  *v36 = v32;
  v36[1] = v34;
  outlined init with take of LocalePreferences?((uint64_t)v116, (uint64_t)&v28[*(int *)(v26 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
  v37 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v28);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v28, type metadata accessor for ICUNumberFormatter.Signature);
  if (!v37)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v111, v112, v6);
    return String.init<A>(_:radix:uppercase:)();
  }
  v106 = v37;
  v38 = v108;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v108 + 16);
  v40 = v104;
  v39(v104, v112, v6);
  v41 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v42 = v105;
  v39(v105, (uint64_t)v40, v6);
  v43 = (v41 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
  v44 = v110;
  v45 = *(void (**)(char *, uint64_t))(v38 + 8);
  v45(v42, v6);
  v46 = v109;
  v39(v109, (uint64_t)v40, v6);
  if (!v43)
  {
    v45(v46, v6);
    goto LABEL_12;
  }
  v114 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    v47 = v109;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v69 = v111;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v70 = dispatch thunk of static Comparable.< infix(_:_:)();
      v71 = v69;
      v44 = v110;
      v45(v71, v6);
      v45(v47, v6);
      if ((v70 & 1) != 0)
        goto LABEL_43;
    }
    else
    {
      v48 = dispatch thunk of BinaryInteger._lowWord.getter();
      v45(v47, v6);
      if (v48 < v114)
        goto LABEL_43;
    }
LABEL_12:
    v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v50 = v103;
    v39(v103, (uint64_t)v40, v6);
    if (v49 >= 65)
    {
      v45(v50, v6);
      v39(v44, (uint64_t)v40, v6);
LABEL_14:
      v114 = 0x7FFFFFFFFFFFFFFFLL;
      v51 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v51 & 1) != 0)
      {
        if (v52 > 64)
        {
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          v53 = v111;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          v54 = v110;
          v55 = dispatch thunk of static Comparable.< infix(_:_:)();
          v45(v53, v6);
          v56 = v54;
          goto LABEL_36;
        }
      }
      else if (v52 > 63)
      {
        v113 = 0x7FFFFFFFFFFFFFFFLL;
        v75 = v111;
        (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v111, v110, v6);
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        v76 = v98;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v55 = dispatch thunk of static Comparable.< infix(_:_:)();
        v45(v76, v6);
        v56 = v75;
LABEL_36:
        v45(v56, v6);
        if ((v55 & 1) != 0)
          goto LABEL_43;
LABEL_29:
        dispatch thunk of BinaryInteger._lowWord.getter();
        v45(v40, v6);
        type metadata accessor for ICUNumberFormatterBase.FormatResult();
        swift_initStackObject();
        ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
        v66 = swift_retain_n();
        MEMORY[0x1E0C80A78](v66);
        swift_retain();
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v95 - 8), &v114);
        v67 = v114;
        v68 = v115;
        swift_release();
        goto LABEL_44;
      }
      v64 = v110;
      dispatch thunk of BinaryInteger._lowWord.getter();
      v65 = v64;
LABEL_28:
      v45(v65, v6);
      goto LABEL_29;
    }
    v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v45(v50, v6);
    if (v57 == 64)
    {
      v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v39(v44, (uint64_t)v40, v6);
      if ((v58 & 1) == 0)
        goto LABEL_14;
    }
    else
    {
      v39(v44, (uint64_t)v40, v6);
    }
    v65 = v44;
    goto LABEL_28;
  }
  v59 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v60 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v59 & 1) != 0)
  {
    if (v60 > 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v61 = v111;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v62 = v109;
      v63 = dispatch thunk of static Comparable.< infix(_:_:)();
      v45(v61, v6);
      v45(v62, v6);
      v44 = v110;
      if ((v63 & 1) != 0)
        goto LABEL_43;
      goto LABEL_12;
    }
    v77 = v96;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x186DA5E34](&unk_18206D478, 256, v77, AssociatedConformanceWitness);
    v79 = v111;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v80 = v109;
    LOBYTE(v77) = dispatch thunk of static Comparable.< infix(_:_:)();
    v45(v79, v6);
    v81 = v97;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v97, v80, v6);
    if ((v77 & 1) != 0)
    {
      v45(v81, v6);
      goto LABEL_43;
    }
    v82 = v81;
    v83 = v114;
    v84 = dispatch thunk of BinaryInteger._lowWord.getter();
    v45(v82, v6);
    v74 = v84 < v83;
  }
  else
  {
    if (v60 >= 64)
    {
      v45(v109, v6);
      v44 = v110;
      goto LABEL_12;
    }
    v72 = v109;
    v73 = dispatch thunk of BinaryInteger._lowWord.getter();
    v45(v72, v6);
    v74 = v73 < v114;
  }
  v44 = v110;
  if (!v74)
    goto LABEL_12;
LABEL_43:
  v45(v40, v6);
  v85 = (uint64_t)v100;
  dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
  v86 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v87 = v102;
  v88 = swift_getAssociatedConformanceWitness();
  v89 = numericStringRepresentationForBinaryInteger<A>(words:isSigned:)(v85, v86 & 1, v87, *(_QWORD *)(*(_QWORD *)(v88 + 8) + 8));
  v91 = v90;
  (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v85, v87);
  v92 = *(_QWORD *)(v106 + 16);
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v92, v89, v91);
  v93 = swift_retain_n();
  MEMORY[0x1E0C80A78](v93);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v95 - 8), &v114);
  v67 = v114;
  v68 = v115;
  swift_release();
  swift_bridgeObjectRelease();
LABEL_44:
  swift_release_n();
  if (!v68)
  {
    v39(v111, v112, v6);
    return String.init<A>(_:radix:uppercase:)();
  }
  return v67;
}

uint64_t IntegerFormatStyle.Currency.format(_:)(uint64_t a1, uint64_t a2)
{
  return IntegerFormatStyle.Currency.format(_:)(a1, a2, (void (*)(_QWORD, __n128))type metadata accessor for ICUCurrencyNumberFormatter, (uint64_t (*)(uint64_t, uint64_t, uint64_t))static ICUCurrencyNumberFormatter.create<A>(for:));
}

uint64_t IntegerFormatStyle.Percent.format(_:)(uint64_t a1, uint64_t a2)
{
  return IntegerFormatStyle.Currency.format(_:)(a1, a2, (void (*)(_QWORD, __n128))type metadata accessor for ICUPercentNumberFormatter, static ICUPercentNumberFormatter.create<A>(for:));
}

uint64_t IntegerFormatStyle.Currency.format(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, __n128), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char v35;
  _BOOL4 v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char *v48;
  char v49;
  char *v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  char *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  char *v62;
  uint64_t v63;
  BOOL v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t AssociatedConformanceWitness;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v92 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v93 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v91 = (char *)&v84 - v11;
  v88 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 16);
  v87 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v87);
  v86 = (char *)&v84 - v12;
  v13 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v14);
  v89 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v90 = (char *)&v84 - v17;
  MEMORY[0x1E0C80A78](v18);
  v95 = (char *)&v84 - v19;
  MEMORY[0x1E0C80A78](v20);
  v98 = (char *)&v84 - v21;
  MEMORY[0x1E0C80A78](v22);
  v99 = (char *)&v84 - v23;
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v84 - v25;
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v84 - v28;
  v31 = MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v84 - v32;
  a3(0, v31);
  v97 = a4(v4, v9, v8);
  if (!v97)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v99, a1, v9);
    return String.init<A>(_:radix:uppercase:)();
  }
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v94 = a1;
  v34(v33, a1, v9);
  v35 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v96 = v34;
  v34(v29, (uint64_t)v33, v9);
  v36 = (v35 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
  v37 = v98;
  v85 = v13;
  v38 = *(void (**)(char *, uint64_t))(v13 + 8);
  v38(v29, v9);
  v39 = (void (*)(char *, char *, uint64_t))v96;
  v96(v26, (uint64_t)v33, v9);
  if (!v36)
  {
    v38(v26, v9);
    v43 = v94;
    v41 = v95;
    v44 = v97;
    goto LABEL_12;
  }
  v101 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    v40 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v41 = v95;
    if (v40 >= 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v60 = v99;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v61 = dispatch thunk of static Comparable.< infix(_:_:)();
      v62 = v60;
      v37 = v98;
      v38(v62, v9);
      v38(v26, v9);
      v43 = v94;
      v44 = v97;
      if ((v61 & 1) != 0)
        goto LABEL_42;
    }
    else
    {
      v42 = dispatch thunk of BinaryInteger._lowWord.getter();
      v38(v26, v9);
      v43 = v94;
      v44 = v97;
      if (v42 < v101)
        goto LABEL_42;
    }
LABEL_12:
    v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v39(v37, v33, v9);
    if (v45 < 65)
    {
      v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v38(v37, v9);
      if (v51 != 64)
      {
        v39(v41, v33, v9);
        goto LABEL_27;
      }
      v52 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v39(v41, v33, v9);
      if ((v52 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v38(v37, v9);
      v39(v41, v33, v9);
    }
    v101 = 0x7FFFFFFFFFFFFFFFLL;
    v46 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v47 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v46 & 1) != 0)
    {
      if (v47 > 64)
      {
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        v48 = v99;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v49 = dispatch thunk of static Comparable.< infix(_:_:)();
        v38(v48, v9);
        v50 = v41;
        goto LABEL_35;
      }
    }
    else if (v47 > 63)
    {
      v100 = 0x7FFFFFFFFFFFFFFFLL;
      v65 = v99;
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v99, v41, v9);
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v66 = v90;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v49 = dispatch thunk of static Comparable.< infix(_:_:)();
      v38(v66, v9);
      v50 = v65;
LABEL_35:
      v38(v50, v9);
      if ((v49 & 1) != 0)
        goto LABEL_42;
LABEL_28:
      dispatch thunk of BinaryInteger._lowWord.getter();
      v38(v33, v9);
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      v57 = swift_retain_n();
      MEMORY[0x1E0C80A78](v57);
      swift_retain();
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v84 - 8), &v101);
      v58 = v101;
      v59 = v102;
      swift_release();
      goto LABEL_43;
    }
    dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_27:
    v38(v41, v9);
    goto LABEL_28;
  }
  v53 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v54 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v53 & 1) != 0)
  {
    if (v54 > 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v55 = v99;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v56 = dispatch thunk of static Comparable.< infix(_:_:)();
      v38(v55, v9);
      v38(v26, v9);
      v43 = v94;
      v41 = v95;
      v44 = v97;
      v37 = v98;
      if ((v56 & 1) != 0)
        goto LABEL_42;
      goto LABEL_12;
    }
    v67 = v87;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x186DA5E34](&unk_18206D478, 256, v67, AssociatedConformanceWitness);
    v69 = v99;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    LOBYTE(v67) = dispatch thunk of static Comparable.< infix(_:_:)();
    v38(v69, v9);
    v70 = v89;
    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v89, v26, v9);
    if ((v67 & 1) != 0)
    {
      v38(v70, v9);
      v43 = v94;
      v44 = v97;
      goto LABEL_42;
    }
    v71 = v101;
    v72 = dispatch thunk of BinaryInteger._lowWord.getter();
    v38(v70, v9);
    v64 = v72 < v71;
    v43 = v94;
    v41 = v95;
  }
  else
  {
    v41 = v95;
    if (v54 >= 64)
    {
      v38(v26, v9);
      v43 = v94;
      v44 = v97;
      v37 = v98;
      goto LABEL_12;
    }
    v63 = dispatch thunk of BinaryInteger._lowWord.getter();
    v38(v26, v9);
    v64 = v63 < v101;
    v43 = v94;
  }
  v44 = v97;
  v37 = v98;
  if (!v64)
    goto LABEL_12;
LABEL_42:
  v38(v33, v9);
  v73 = (uint64_t)v91;
  dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
  v74 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v75 = v93;
  v76 = swift_getAssociatedConformanceWitness();
  v77 = numericStringRepresentationForBinaryInteger<A>(words:isSigned:)(v73, v74 & 1, v75, *(_QWORD *)(*(_QWORD *)(v76 + 8) + 8));
  v79 = v78;
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v73, v75);
  v80 = *(_QWORD *)(v44 + 16);
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v80, v77, v79);
  v81 = swift_retain_n();
  MEMORY[0x1E0C80A78](v81);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v84 - 8), &v101);
  v58 = v101;
  v59 = v102;
  swift_release();
  swift_bridgeObjectRelease();
LABEL_43:
  v82 = v96;
  swift_release_n();
  if (!v59)
  {
    v82(v99, v43, v9);
    return String.init<A>(_:radix:uppercase:)();
  }
  return v58;
}

uint64_t IntegerFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;

  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 IntegerFormatStyle.locale.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*IntegerFormatStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 IntegerFormatStyle.init(locale:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  char *v7;
  int *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  __n128 result;
  __n128 v13;

  v7 = (char *)a5 + *(int *)(type metadata accessor for IntegerFormatStyle(0, a2, a3, a4) + 36);
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = 0;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_DWORD *)v7 + 18) = 131584;
  *((_WORD *)v7 + 38) = 512;
  v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v9 = &v7[v8[9]];
  v10 = type metadata accessor for FloatingPointRoundingRule();
  v13 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = &v7[v8[10]];
  *(_QWORD *)v11 = 0;
  v11[8] = -1;
  v7[v8[11]] = 3;
  result = v13;
  *a5 = v13;
  return result;
}

uint64_t IntegerFormatStyle.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.attributed.getter(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v3, a1);
  type metadata accessor for IntegerFormatStyle.Attributed.Style(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v5);
  return swift_storeEnumTagMultiPayload();
}

uint64_t static IntegerFormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static IntegerFormatStyle.== infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle);
}

uint64_t IntegerFormatStyle.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x697463656C6C6F63;
  else
    return 0x656C61636F6CLL;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IntegerFormatStyle<A>.CodingKeys()
{
  char *v0;

  return PredicateExpressions.KeyPath<>.CodingKeys.hashValue.getter(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.CodingKeys(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD))PredicateExpressions.KeyPath<>.CodingKeys.hash(into:));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntegerFormatStyle<A>.CodingKeys()
{
  char *v0;

  return IntegerFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NSDecimal.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t IntegerFormatStyle.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for IntegerFormatStyle.CodingKeys, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.CodingKeys);
}

Swift::Int IntegerFormatStyle.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.hash(into:));
}

uint64_t IntegerFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  char v38;

  v32 = a4;
  v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v7);
  v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for IntegerFormatStyle.CodingKeys(255, a2, a3, v9);
  v35 = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.CodingKeys, v10);
  v34 = type metadata accessor for KeyedDecodingContainer();
  v30 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v12 = (char *)&v29 - v11;
  v14 = type metadata accessor for IntegerFormatStyle(0, a2, a3, v13);
  v29 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (_OWORD *)((char *)&v29 - v15);
  v18 = (char *)&v29 + *(int *)(v17 + 36) - v15;
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  *((_QWORD *)v18 + 4) = 0;
  *((_QWORD *)v18 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v18 + 7) = 0;
  *((_QWORD *)v18 + 8) = 0;
  *((_QWORD *)v18 + 6) = 0;
  *((_DWORD *)v18 + 18) = 131584;
  *((_WORD *)v18 + 38) = 512;
  v19 = &v18[v7[9]];
  v20 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = &v18[v7[10]];
  *(_QWORD *)v21 = 0;
  v21[8] = -1;
  v18[v7[11]] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v33 = v12;
  v22 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of ICUNumberFormatter.Signature((uint64_t)v18, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }
  else
  {
    v23 = v30;
    v24 = (uint64_t)v31;
    v36 = v14;
    v25 = v32;
    v38 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *v16 = v37;
    LOBYTE(v37) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, type metadata accessor for NumberFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v33, v34);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v24, (uint64_t)v18);
    v26 = v29;
    v27 = v36;
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v29 + 16))(v25, v16, v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v26 + 8))(v16, v27);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return IntegerFormatStyle.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>(_QWORD *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  return static IntegerFormatStyle.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t (*IntegerFormatStyle.Percent.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 IntegerFormatStyle.Percent.init(locale:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  char *v7;
  int *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  __n128 result;
  __n128 v13;

  v7 = (char *)a5 + *(int *)(type metadata accessor for IntegerFormatStyle.Percent(0, a2, a3, a4) + 36);
  v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v9 = &v7[v8[9]];
  v10 = type metadata accessor for FloatingPointRoundingRule();
  v13 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)v7 = 0x3FF0000000000000;
  v7[8] = 0;
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = 0;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_DWORD *)v7 + 18) = 131584;
  *((_WORD *)v7 + 38) = 512;
  v11 = &v7[v8[10]];
  *(_QWORD *)v11 = 0;
  v11[8] = -1;
  v7[v8[11]] = 3;
  result = v13;
  *a5 = v13;
  return result;
}

uint64_t IntegerFormatStyle.Percent.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.attributed.getter(a1, a2);
}

uint64_t IntegerFormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t result;

  v6 = *a1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 36) + 73) = v6;
  return result;
}

uint64_t IntegerFormatStyle.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int16 v6;
  int v7;
  int v8;
  uint64_t result;
  __int16 v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  if (v7)
    v10 = 256;
  else
    v10 = 0;
  v11 = a3 + *(int *)(a2 + 36);
  *(_BYTE *)(v11 + 76) = v8 != 0;
  *(_WORD *)(v11 + 74) = v10 | v6;
  return result;
}

uint64_t IntegerFormatStyle.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t result;

  v6 = *a1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 36) + 77) = v6;
  return result;
}

uint64_t IntegerFormatStyle.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a5, v5, a4);
  v11 = a5 + *(int *)(a4 + 36);
  v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of FloatingPointRoundingRule?(v13);
  v14 = type metadata accessor for FloatingPointRoundingRule();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((a3 & 1) == 0)
  {
    v17 = v11 + *(int *)(v12 + 40);
    *(_QWORD *)v17 = a2;
    *(_BYTE *)(v17 + 8) = 0;
  }
  return result;
}

uint64_t IntegerFormatStyle.scale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;

  v4 = v3;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v4, a1);
  v9 = a2 + *(int *)(a1 + 36);
  *(double *)v9 = a3;
  *(_BYTE *)(v9 + 8) = 0;
  return result;
}

uint64_t IntegerFormatStyle.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t result;

  v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v7 = a3 + *(int *)(a2 + 36);
  result = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  *(_BYTE *)(v7 + *(int *)(result + 44)) = v6;
  return result;
}

void IntegerFormatStyle.hash(into:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t, uint64_t);
  Swift::UInt8 v14;
  void (*v15)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  uint64_t v58;
  Swift::UInt64 v59;
  Swift::UInt64 v60;
  int v61;
  Swift::UInt v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  Swift::UInt v67;
  int *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  Swift::UInt v73;
  Swift::UInt64 v74;
  Swift::UInt v75;
  void *v76;
  id v77;
  void *v78;
  uint64_t v79;
  void *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[144];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  _QWORD v104[18];
  _BYTE v105[144];
  _BYTE v106[152];

  v3 = v2;
  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  v82 = v6;
  v83 = v7;
  MEMORY[0x1E0C80A78](v6);
  v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v9);
  v84 = (uint64_t)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v2[1];
  ObjectType = swift_getObjectType();
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v104, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v104, (uint64_t)v105, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v106, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
    {
      v14 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v86[0] == 2)
    {
      v17 = 0;
    }
    else
    {
      v17 = v86[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v17);
    v18 = v87;
    v79 = a2;
    if (v87)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v20 = v18 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v20 += 16;
          --v19;
        }
        while (v19);
        swift_bridgeObjectRelease();
        if (!v88)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v89)
            goto LABEL_15;
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v89)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v21 = v90;
          if (!v90)
            goto LABEL_16;
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v21 = v90;
        if (!v90)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          v22 = v91;
          if (!v91)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v22);
          swift_bridgeObjectRelease();
LABEL_25:
          v24 = v93;
          v26 = v94;
          v25 = v95;
          v27 = v96;
          v76 = v96;
          v77 = v92;
          if (v92)
          {
            v80 = v2;
            v28 = v92;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v29 = v24;
            v30 = v26;
            v31 = v25;
            v32 = v27;
            v33 = v28;
            v3 = v80;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
            v34 = v27;
            v35 = v24;
            v36 = v26;
            v37 = v25;
          }
          v80 = v25;
          v38 = v3;
          if (v24)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v39 = v24;
            v40 = v24;
            v41 = v26;
            v42 = v40;
            _CFObject.hash(into:)();

            v26 = v41;
            v78 = v41;
            if (v41)
            {
LABEL_30:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v43 = v26;
              _CFObject.hash(into:)();

              goto LABEL_33;
            }
          }
          else
          {
            v39 = 0;
            Hasher._combine(_:)(0);
            v78 = v26;
            if (v26)
              goto LABEL_30;
          }
          Hasher._combine(_:)(0);
LABEL_33:
          v44 = v80;
          v45 = v39;
          v3 = v38;
          v46 = v76;
          if (v80)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v47 = v44;
            _CFObject.hash(into:)();

            if (v46)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v48 = v46;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v46)
              goto LABEL_35;
          }
          Hasher._combine(_:)(0);
          v48 = 0;
LABEL_38:
          v49 = v80;
          v50 = v78;

          v51 = v97;
          if (v51)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v51);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          a2 = v79;
          v52 = v98;
          if (v98)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
            if (v99)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              v16 = v82;
              if (v100 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                v53 = v100 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v53);
              }
              if (v101 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                v54 = v101 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v54);
              }
              if (v102 == 2)
              {
                v55 = 0;
              }
              else
              {
                v55 = v102 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v55);
              if (v103 == 2)
              {
                v56 = 0;
              }
              else
              {
                v57 = v103 & 1;
                Hasher._combine(_:)(1u);
                v56 = v57;
              }
              Hasher._combine(_:)(v56);
              outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_59;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v99)
              goto LABEL_43;
          }
          Hasher._combine(_:)(0);
          goto LABEL_46;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v21);
        swift_bridgeObjectRelease();
        v22 = v91;
        if (!v91)
          goto LABEL_17;
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
      v23 = v85;
    }
    else
    {
      Hasher._combine(_:)(0);
      v23 = v86;
    }
    outlined retain of LocalePreferences(v23);
    if (!v88)
      goto LABEL_14;
    goto LABEL_21;
  }
  v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  v16 = v82;
LABEL_59:
  v58 = (uint64_t)v3 + *(int *)(a2 + 36);
  if ((*(_BYTE *)(v58 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v59 = *(_QWORD *)v58;
    Hasher._combine(_:)(1u);
    if ((v59 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v60 = v59;
    else
      v60 = 0;
    Hasher._combine(_:)(v60);
  }
  outlined init with take of LocalePreferences?(v58 + 16, (uint64_t)v106, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v61 = *(unsigned __int8 *)(v58 + 73);
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v62 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v62);
  }
  v63 = *(unsigned __int16 *)(v58 + 74);
  v64 = v63 | (*(unsigned __int8 *)(v58 + 76) << 16);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64 & 1);
    Hasher._combine(_:)((v64 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v64) & 1);
  }
  v65 = v83;
  v66 = *(unsigned __int8 *)(v58 + 77);
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v67 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v67);
  }
  v68 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v69 = v84;
  outlined init with copy of FloatingPointRoundingRule?(v58 + v68[9], v84);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v69, 1, v16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v70 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v81, v84, v16);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v70, v16);
  }
  v71 = v58 + v68[10];
  v72 = *(unsigned __int8 *)(v71 + 8);
  if (v72 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v73 = *(_QWORD *)v71;
    Hasher._combine(_:)(1u);
    if ((v72 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v74 = v73;
      else
        v74 = 0;
      Hasher._combine(_:)(v74);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v73);
    }
  }
  v75 = *(unsigned __int8 *)(v58 + v68[11]);
  if (v75 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v75);
  }
}

uint64_t static IntegerFormatStyle.Percent.== infix(_:_:)(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static IntegerFormatStyle.== infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Percent);
}

uint64_t static IntegerFormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  __int128 v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;

  v10 = *a1;
  v13 = *a2;
  v14 = v10;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) == 0)
    return 0;
  v11 = a5(0, a3, a4);
  return static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + *(int *)(v11 + 36), (char *)a2 + *(int *)(v11 + 36));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Percent.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.CodingKeys(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD))IntegerFormatStyle.Percent.CodingKeys.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v4;
  _BYTE v8[72];

  Hasher.init(_seed:)();
  a4(v8, *v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Percent.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Percent.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Percent.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Percent.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t IntegerFormatStyle.Percent.encode(to:)(_QWORD *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for IntegerFormatStyle.Percent.CodingKeys, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent.CodingKeys);
}

uint64_t IntegerFormatStyle.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD), uint64_t a4)
{
  __int128 *v4;
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];
  __int128 v16;
  char v17;

  v6 = v4;
  v8 = a3(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  MEMORY[0x186DA9D64](a4, v8);
  v9 = type metadata accessor for KeyedEncodingContainer();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v15 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = *v6;
  v17 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  v13 = v15[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    LOBYTE(v16) = 1;
    type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, type metadata accessor for NumberFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int IntegerFormatStyle.Percent.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Percent.hash(into:));
}

uint64_t IntegerFormatStyle.Percent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  char v38;

  v32 = a4;
  v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v7);
  v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for IntegerFormatStyle.Percent.CodingKeys(255, a2, a3, v9);
  v35 = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Percent.CodingKeys, v10);
  v34 = type metadata accessor for KeyedDecodingContainer();
  v30 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v12 = (char *)&v29 - v11;
  v14 = type metadata accessor for IntegerFormatStyle.Percent(0, a2, a3, v13);
  v29 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (_OWORD *)((char *)&v29 - v15);
  v18 = (char *)&v29 + *(int *)(v17 + 36) - v15;
  v19 = &v18[v7[9]];
  v20 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(_QWORD *)v18 = 0x3FF0000000000000;
  v18[8] = 0;
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  *((_QWORD *)v18 + 4) = 0;
  *((_QWORD *)v18 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v18 + 7) = 0;
  *((_QWORD *)v18 + 8) = 0;
  *((_QWORD *)v18 + 6) = 0;
  *((_DWORD *)v18 + 18) = 131584;
  *((_WORD *)v18 + 38) = 512;
  v21 = &v18[v7[10]];
  *(_QWORD *)v21 = 0;
  v21[8] = -1;
  v18[v7[11]] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v33 = v12;
  v22 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of ICUNumberFormatter.Signature((uint64_t)v18, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }
  else
  {
    v23 = v30;
    v24 = (uint64_t)v31;
    v36 = v14;
    v25 = v32;
    v38 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *v16 = v37;
    LOBYTE(v37) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, type metadata accessor for NumberFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v33, v34);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v24, (uint64_t)v18);
    v26 = v29;
    v27 = v36;
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v29 + 16))(v25, v16, v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v26 + 8))(v16, v27);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>.Percent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return IntegerFormatStyle.Percent.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>.Percent(_QWORD *a1, uint64_t a2)
{
  return IntegerFormatStyle.Percent.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Percent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Percent.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Percent(__int128 *a1, __int128 *a2, uint64_t a3)
{
  return static IntegerFormatStyle.Percent.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t (*IntegerFormatStyle.Currency.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t IntegerFormatStyle.Currency.currencyCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IntegerFormatStyle.Currency.init(code:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  *(_OWORD *)a6 = *a3;
  *(_QWORD *)(a6 + 16) = a1;
  *(_QWORD *)(a6 + 24) = a2;
  v6 = a6 + *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, a4, a5, a4) + 40);
  v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v8 = v6 + v7[9];
  v9 = type metadata accessor for FloatingPointRoundingRule();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0x1FFFFFFFELL;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_WORD *)(v6 + 72) = 512;
  *(_DWORD *)(v6 + 74) = 2;
  *(_BYTE *)(v6 + 78) = 2;
  v11 = v6 + v7[10];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = -1;
  *(_BYTE *)(v6 + v7[11]) = 1;
  *(_BYTE *)(v6 + v7[12]) = 3;
  return result;
}

uint64_t IntegerFormatStyle.Currency.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.attributed.getter(a1, a2);
}

uint64_t IntegerFormatStyle.Currency.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t result;

  v6 = *a1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 40) + 73) = v6;
  return result;
}

__n128 IntegerFormatStyle.Currency.precision(_:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __n128 result;
  __n128 v10;
  __int128 v11;
  __int128 v12;

  v11 = a1[1];
  v12 = *a1;
  v10 = (__n128)a1[2];
  v6 = *((_QWORD *)a1 + 6);
  v7 = *((_BYTE *)a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v8 = a3 + *(int *)(a2 + 40);
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  result = v10;
  *(__n128 *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 64) = v6;
  *(_BYTE *)(v8 + 72) = v7;
  return result;
}

uint64_t IntegerFormatStyle.Currency.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;

  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  if (v7)
    v11 = 256;
  else
    v11 = 0;
  v12 = v11 | v6;
  if (v8)
    v13 = 0x10000;
  else
    v13 = 0;
  if (v9)
    v14 = 0x1000000;
  else
    v14 = 0;
  *(_DWORD *)(a3 + *(int *)(a2 + 40) + 74) = v12 | v13 | v14;
  return result;
}

uint64_t IntegerFormatStyle.Currency.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t result;

  v6 = *a1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  *(_BYTE *)(a3 + *(int *)(a2 + 40) + 78) = v6;
  return result;
}

uint64_t IntegerFormatStyle.Currency.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a5, v5, a4);
  v11 = a5 + *(int *)(a4 + 40);
  v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of FloatingPointRoundingRule?(v13);
  v14 = type metadata accessor for FloatingPointRoundingRule();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((a3 & 1) == 0)
  {
    v17 = v11 + *(int *)(v12 + 40);
    *(_QWORD *)v17 = a2;
    *(_BYTE *)(v17 + 8) = 0;
  }
  return result;
}

uint64_t IntegerFormatStyle.Currency.scale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;

  v4 = v3;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v4, a1);
  v9 = a2 + *(int *)(a1 + 40);
  *(double *)v9 = a3;
  *(_BYTE *)(v9 + 8) = 0;
  return result;
}

uint64_t IntegerFormatStyle.Currency.presentation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t result;

  v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v7 = a3 + *(int *)(a2 + 40);
  result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  *(_BYTE *)(v7 + *(int *)(result + 44)) = v6;
  return result;
}

uint64_t IntegerFormatStyle.Currency.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t result;

  v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v7 = a3 + *(int *)(a2 + 40);
  result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  *(_BYTE *)(v7 + *(int *)(result + 48)) = v6;
  return result;
}

void IntegerFormatStyle.Currency.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t (*v14)(uint64_t, uint64_t);
  Swift::UInt8 v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  char *v38;
  char *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  void *v46;
  void *v47;
  char *v48;
  id v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::UInt v54;
  Swift::UInt v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::UInt8 v58;
  uint64_t v59;
  Swift::UInt64 v60;
  Swift::UInt64 v61;
  uint64_t v62;
  int v63;
  Swift::UInt v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  Swift::UInt v68;
  int *v69;
  char *v70;
  uint64_t v71;
  int v72;
  Swift::UInt v73;
  Swift::UInt64 v74;
  Swift::UInt v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[144];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  char *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  _QWORD v104[18];
  _BYTE v105[144];
  _BYTE v106[152];

  v3 = v2;
  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  v83 = v6;
  v84 = v7;
  MEMORY[0x1E0C80A78](v6);
  v82 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 48);
  swift_unknownObjectRetain();
  if ((v14(ObjectType, v12) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v12 + 64))(ObjectType, v12);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 464);
    swift_unknownObjectRetain();
    v16(v104, ObjectType, v12);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v104, (uint64_t)v105, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v106, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
    {
      v15 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v86, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v86[0] == 2)
    {
      v18 = 0;
    }
    else
    {
      v18 = v86[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v18);
    v19 = v87;
    v80 = a2;
    if (v87)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v19 + 16));
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        if (!v88)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v89)
            goto LABEL_15;
          goto LABEL_21;
        }
LABEL_20:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v89)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          v22 = v90;
          if (!v90)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_23;
          }
LABEL_22:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v22);
          swift_bridgeObjectRelease();
LABEL_23:
          v24 = v91;
          v76 = v2;
          if (v91)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v24);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          v25 = v93;
          v27 = v94;
          v26 = v95;
          v28 = v96;
          v77 = v96;
          v78 = v92;
          if (v92)
          {
            v81 = v11;
            v29 = v92;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v30 = v25;
            v31 = v27;
            v32 = v26;
            v33 = v28;
            v34 = v29;
            v11 = v81;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
            v35 = v28;
            v36 = v25;
            v37 = v27;
            v38 = v26;
          }
          v3 = v76;
          v81 = v26;
          v39 = v11;
          if (v25)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v40 = v25;
            v41 = v25;
            v42 = v27;
            v43 = v41;
            _CFObject.hash(into:)();

            v27 = v42;
            v79 = v42;
            if (v42)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v44 = v27;
              _CFObject.hash(into:)();

              goto LABEL_34;
            }
          }
          else
          {
            v40 = 0;
            Hasher._combine(_:)(0);
            v79 = v27;
            if (v27)
              goto LABEL_31;
          }
          Hasher._combine(_:)(0);
LABEL_34:
          v45 = v81;
          v46 = v40;
          v11 = v39;
          v47 = v77;
          if (v81)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v48 = v45;
            _CFObject.hash(into:)();

            if (v47)
            {
LABEL_36:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v49 = v47;
              _CFObject.hash(into:)();

              goto LABEL_39;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v47)
              goto LABEL_36;
          }
          Hasher._combine(_:)(0);
          v49 = 0;
LABEL_39:
          v50 = v81;
          v51 = v79;

          v52 = v97;
          if (v52)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v52);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          a2 = v80;
          v53 = v98;
          if (v98)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v53);
            swift_bridgeObjectRelease();
            if (v99)
            {
LABEL_44:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_47:
              v17 = v83;
              if (v100 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                v54 = v100 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v54);
              }
              if (v101 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                v55 = v101 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v55);
              }
              if (v102 == 2)
              {
                v56 = 0;
              }
              else
              {
                v56 = v102 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v56);
              if (v103 == 2)
              {
                v57 = 0;
              }
              else
              {
                v58 = v103 & 1;
                Hasher._combine(_:)(1u);
                v57 = v58;
              }
              Hasher._combine(_:)(v57);
              outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_60;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v99)
              goto LABEL_44;
          }
          Hasher._combine(_:)(0);
          goto LABEL_47;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v22 = v90;
        if (!v90)
          goto LABEL_16;
        goto LABEL_22;
      }
      outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
      v23 = v85;
    }
    else
    {
      Hasher._combine(_:)(0);
      v23 = v86;
    }
    outlined retain of LocalePreferences(v23);
    if (!v88)
      goto LABEL_14;
    goto LABEL_20;
  }
  v15 = 1;
LABEL_5:
  Hasher._combine(_:)(v15);
  swift_unknownObjectRelease();
  v17 = v83;
LABEL_60:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v59 = v3 + *(int *)(a2 + 40);
  if ((*(_BYTE *)(v59 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v60 = *(_QWORD *)v59;
    Hasher._combine(_:)(1u);
    if ((v60 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v61 = v60;
    else
      v61 = 0;
    Hasher._combine(_:)(v61);
  }
  v62 = v84;
  outlined init with take of LocalePreferences?(v59 + 16, (uint64_t)v106, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v63 = *(unsigned __int8 *)(v59 + 73);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v64 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64);
  }
  v65 = *(unsigned int *)(v59 + 74);
  if (*(_DWORD *)(v59 + 74) == 2)
  {
    LOBYTE(v66) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v65 & 1);
    Hasher._combine(_:)((v65 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v65) & 1);
    v66 = BYTE3(v65) & 1;
  }
  Hasher._combine(_:)(v66);
  v67 = *(unsigned __int8 *)(v59 + 78);
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v68 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v68);
  }
  v69 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v59 + v69[9], (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v11, 1, v17) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v70 = v82;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v82, v11, v17);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v70, v17);
  }
  v71 = v59 + v69[10];
  v72 = *(unsigned __int8 *)(v71 + 8);
  if (v72 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v73 = *(_QWORD *)v71;
    Hasher._combine(_:)(1u);
    if ((v72 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v74 = v73;
      else
        v74 = 0;
      Hasher._combine(_:)(v74);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v73);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v59 + v69[11]));
  v75 = *(unsigned __int8 *)(v59 + v69[12]);
  if (v75 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v75);
  }
}

uint64_t static IntegerFormatStyle.Currency.== infix(_:_:)(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;

  v8 = *a1;
  v13 = *a2;
  v14 = v8;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) == 0)
    return 0;
  v9 = *((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2) && *((_QWORD *)a1 + 3) == v9;
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 0;
  v11 = type metadata accessor for IntegerFormatStyle.Currency(0, a3, a4, v9);
  return static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + *(int *)(v11 + 40), (char *)a2 + *(int *)(v11 + 40));
}

uint64_t IntegerFormatStyle.Currency.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x656C61636F6CLL;
  if (a1 == 1)
    return 0x79636E6572727563;
  return 0x697463656C6C6F63;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD))IntegerFormatStyle.Currency.CodingKeys.hash(into:));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntegerFormatStyle<A>.Currency.CodingKeys()
{
  char *v0;

  return IntegerFormatStyle.Currency.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NSDecimal.FormatStyle.Currency.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Currency.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Currency.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t IntegerFormatStyle.Currency.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  char v15;

  v5 = type metadata accessor for IntegerFormatStyle.Currency.CodingKeys(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency.CodingKeys, v5);
  v6 = type metadata accessor for KeyedEncodingContainer();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v10 = (__int128 *)v13[0];
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = *v10;
  v15 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  v11 = v13[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 2;
    type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, type metadata accessor for CurrencyFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int IntegerFormatStyle.Currency.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Currency.hash(into:));
}

uint64_t IntegerFormatStyle.Currency.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  char v32;

  v23 = a4;
  v27 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1E0C80A78](v27);
  v26 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IntegerFormatStyle.Currency.CodingKeys(255, a2, a3, v8);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency.CodingKeys, v9);
  v28 = type metadata accessor for KeyedDecodingContainer();
  v25 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v11 = (char *)&v23 - v10;
  v24 = type metadata accessor for IntegerFormatStyle.Currency(0, a2, a3, v12);
  v13 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v15 = (char *)&v23 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v29 = v11;
  v16 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v18 = v24;
  v17 = v25;
  v30 = v13;
  v19 = (uint64_t)v26;
  v32 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)v15 = v31;
  LOBYTE(v31) = 1;
  *((_QWORD *)v15 + 2) = KeyedDecodingContainer.decode(_:forKey:)();
  *((_QWORD *)v15 + 3) = v20;
  LOBYTE(v31) = 2;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, type metadata accessor for CurrencyFormatStyleConfiguration.Collection, (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v29, v28);
  outlined init with take of ICUNumberFormatter.Signature(v19, (uint64_t)&v15[*(int *)(v18 + 40)], type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v21 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v23, v15, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v15, v18);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>.Currency@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return IntegerFormatStyle.Currency.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>.Currency(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return IntegerFormatStyle.Currency.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Currency.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Currency(__int128 *a1, __int128 *a2, uint64_t a3)
{
  return static IntegerFormatStyle.Currency.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance IntegerFormatStyle<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = IntegerFormatStyle.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance IntegerFormatStyle<A>.Percent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = IntegerFormatStyle.Percent.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance IntegerFormatStyle<A>.Currency@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = IntegerFormatStyle.Currency.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t IntegerFormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.parseStrategy.getter(a1, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>, a2);
}

uint64_t IntegerFormatStyle.Currency.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  __int128 *v12;
  void (*v13)(__int128 *, uint64_t, uint64_t, __n128);
  uint64_t v14;
  int *v15;
  uint64_t v16;
  void (*v17)(__int128 *, uint64_t);
  __int128 v19;

  v5 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (__int128 *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v8 + 16);
  v13(v12, v2, a1, v10);
  ((void (*)(uint64_t, __int128 *, uint64_t))v13)(a2, v12, a1);
  v14 = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, a1);
  v15 = (int *)type metadata accessor for IntegerParseStrategy(0, a1, v14, *(_QWORD *)(a1 + 24));
  *(_BYTE *)(a2 + v15[11]) = 1;
  v16 = v15[13];
  v19 = *v12;
  *(_OWORD *)(a2 + v16) = v19;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v12 + *(int *)(a1 + 40), (uint64_t)v7, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v17 = *(void (**)(__int128 *, uint64_t))(v8 + 8);
  swift_unknownObjectRetain();
  v17(v12, a1);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of ICUNumberFormatter.Signature((uint64_t)v7, a2 + v15[12], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t IntegerFormatStyle.Percent.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.parseStrategy.getter(a1, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent, a2);
}

uint64_t IntegerFormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  void (*v10)(_OWORD *, __n128);
  uint64_t v11;
  int *v12;
  uint64_t v14;

  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (_OWORD *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void (**)(_OWORD *, __n128))(v9 + 16);
  v10(v8, v6);
  ((void (*)(uint64_t, _OWORD *, uint64_t))v10)(a3, v8, a1);
  v11 = MEMORY[0x186DA9D64](a2, a1);
  v12 = (int *)type metadata accessor for IntegerParseStrategy(0, a1, v11, *(_QWORD *)(a1 + 24));
  *(_BYTE *)(a3 + v12[11]) = 1;
  *(_OWORD *)(a3 + v12[13]) = *v8;
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v8 + *(int *)(a1 + 36), a3 + v12[12], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t static FormatStyle.currency<A>(code:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  uint64_t v22;

  v10 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v10 != -1)
    swift_once();
  v11 = static LocaleCache.cache + 16;
  v12 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v12);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v11, &v22);
  os_unfair_lock_unlock(v12);
  swift_release_n();
  v13 = v22;
  v14 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating, (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *a5 = v13;
  a5[1] = v14;
  a5[2] = a1;
  a5[3] = a2;
  v16 = (char *)a5 + *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, a3, a4, v15) + 40);
  v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v18 = &v16[v17[9]];
  v19 = type metadata accessor for FloatingPointRoundingRule();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  *((_QWORD *)v16 + 2) = 0;
  *((_QWORD *)v16 + 3) = 0;
  *((_QWORD *)v16 + 4) = 0;
  *((_QWORD *)v16 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v16 + 7) = 0;
  *((_QWORD *)v16 + 8) = 0;
  *((_QWORD *)v16 + 6) = 0;
  *((_WORD *)v16 + 36) = 512;
  *(_DWORD *)(v16 + 74) = 2;
  v16[78] = 2;
  v21 = &v16[v17[10]];
  *(_QWORD *)v21 = 0;
  v21[8] = -1;
  v16[v17[11]] = 1;
  v16[v17[12]] = 3;
  return result;
}

uint64_t IntegerFormatStyle.Attributed.Style.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a1;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = type metadata accessor for IntegerFormatStyle.Currency(0, v6, v7, a4);
  v34 = *(_QWORD *)(v8 - 8);
  v35 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v33 - v9;
  v12 = type metadata accessor for IntegerFormatStyle.Percent(0, v6, v7, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v33 - v14;
  v17 = type metadata accessor for IntegerFormatStyle(0, v6, v7, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v33 - v19;
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))(v24, v4, a2, v22);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v24, v12);
      v27 = v36;
      Hasher._combine(_:)(1uLL);
      IntegerFormatStyle.hash(into:)(v27, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    else
    {
      v31 = v34;
      v30 = v35;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v10, v24, v35);
      v32 = v36;
      Hasher._combine(_:)(2uLL);
      IntegerFormatStyle.Currency.hash(into:)(v32, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v10, v30);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v24, v17);
    v29 = v36;
    Hasher._combine(_:)(0);
    IntegerFormatStyle.hash(into:)(v29, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
}

uint64_t static IntegerFormatStyle.Attributed.Style.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t TupleTypeMetadata2;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t, __n128);
  int EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  __int128 v37;
  void (*v38)(__int128 *, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(__int128 *, uint64_t);
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;

  v62 = a1;
  v63 = a2;
  v6 = type metadata accessor for IntegerFormatStyle.Currency(0, a3, a4, a4);
  v57 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  MEMORY[0x1E0C80A78](v6);
  v54 = (char *)&v52 - v7;
  v9 = type metadata accessor for IntegerFormatStyle.Percent(0, a3, a4, v8);
  v55 = *(_QWORD *)(v9 - 8);
  v56 = v9;
  MEMORY[0x1E0C80A78](v9);
  v53 = (char *)&v52 - v10;
  v12 = type metadata accessor for IntegerFormatStyle(0, a3, a4, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (__int128 *)((char *)&v52 - v14);
  v17 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0, a3, a4, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v59 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v52 - v21;
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v52 - v24;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v61 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v27 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v29 = (char *)&v52 - v28;
  v31 = (char *)&v52 + *(int *)(v30 + 48) - v28;
  v60 = v18;
  v32 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16);
  v32((char *)&v52 - v28, v62, v17, v27);
  ((void (*)(char *, uint64_t, uint64_t))v32)(v31, v63, v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      ((void (*)(char *, char *, uint64_t))v32)(v22, v29, v17);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v34 = v55;
        v35 = v56;
        v36 = (__int128 *)v53;
        (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v53, v31, v56);
        v37 = *(_OWORD *)v22;
        v64 = *v36;
        v65 = v37;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v65, (uint64_t)&v64) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(&v22[*(int *)(v35 + 36)], (char *)v36 + *(int *)(v35 + 36)) & 1) != 0)
        {
          v38 = *(void (**)(__int128 *, uint64_t))(v34 + 8);
          v38(v36, v35);
          v39 = v22;
LABEL_16:
          v44 = v35;
LABEL_26:
          v38((__int128 *)v39, v44);
          v45 = 1;
LABEL_29:
          v46 = v60;
          goto LABEL_30;
        }
        v47 = *(void (**)(__int128 *, uint64_t))(v34 + 8);
        v47(v36, v35);
        v48 = v22;
LABEL_22:
        v49 = v35;
        goto LABEL_28;
      }
      (*(void (**)(char *, uint64_t))(v55 + 8))(v22, v56);
    }
    else
    {
      v40 = v59;
      ((void (*)(char *, char *, uint64_t))v32)(v59, v29, v17);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v41 = v57;
        v35 = v58;
        v42 = v54;
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v54, v31, v58);
        v43 = *(_OWORD *)v40;
        v64 = *(_OWORD *)v42;
        v65 = v43;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v65, (uint64_t)&v64) & 1) != 0
          && (*((_QWORD *)v40 + 2) == *((_QWORD *)v42 + 2) && *((_QWORD *)v40 + 3) == *((_QWORD *)v42 + 3)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && specialized static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)((uint64_t)&v40[*(int *)(v35 + 40)], (uint64_t)&v42[*(int *)(v35 + 40)]))
        {
          v38 = *(void (**)(__int128 *, uint64_t))(v41 + 8);
          v38((__int128 *)v42, v35);
          v39 = v40;
          goto LABEL_16;
        }
        v47 = *(void (**)(__int128 *, uint64_t))(v41 + 8);
        v47((__int128 *)v42, v35);
        v48 = v40;
        goto LABEL_22;
      }
      (*(void (**)(char *, uint64_t))(v57 + 8))(v40, v58);
    }
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v32)(v25, v29, v17);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(__int128 *, char *, uint64_t))(v13 + 32))(v15, v31, v12);
      v50 = *(_OWORD *)v25;
      v64 = *v15;
      v65 = v50;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v65, (uint64_t)&v64) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(&v25[*(int *)(v12 + 36)], (char *)v15 + *(int *)(v12 + 36)) & 1) != 0)
      {
        v38 = *(void (**)(__int128 *, uint64_t))(v13 + 8);
        v38(v15, v12);
        v39 = v25;
        v44 = v12;
        goto LABEL_26;
      }
      v47 = *(void (**)(__int128 *, uint64_t))(v13 + 8);
      v47(v15, v12);
      v48 = v25;
      v49 = v12;
LABEL_28:
      v47((__int128 *)v48, v49);
      v45 = 0;
      goto LABEL_29;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v25, v12);
  }
  v45 = 0;
  v46 = v61;
  v17 = TupleTypeMetadata2;
LABEL_30:
  (*(void (**)(char *, uint64_t))(v46 + 8))(v29, v17);
  return v45;
}

uint64_t IntegerFormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x72656765746E69 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t IntegerFormatStyle.Attributed.Style.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x72656765746E69;
  if (a1 == 1)
    return 0x746E6563726570;
  return 0x79636E6572727563;
}

uint64_t IntegerFormatStyle.Attributed.Style.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int EnumCaseMultiPayload;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  char v79;

  v75 = a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v8 = type metadata accessor for IntegerFormatStyle.Attributed.Style.CurrencyCodingKeys(255, v5, v6, a4);
  v66 = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys, v8);
  v67 = v8;
  v72 = type metadata accessor for KeyedEncodingContainer();
  v50 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v70 = (char *)&v49 - v9;
  v71 = type metadata accessor for IntegerFormatStyle.Currency(0, v5, v6, v10);
  v69 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v68 = (char *)&v49 - v11;
  v13 = type metadata accessor for IntegerFormatStyle.Attributed.Style.PercentCodingKeys(255, v5, v6, v12);
  v58 = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys, v13);
  v59 = v13;
  v65 = type metadata accessor for KeyedEncodingContainer();
  v63 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v62 = (char *)&v49 - v14;
  v64 = type metadata accessor for IntegerFormatStyle.Percent(0, v5, v6, v15);
  v61 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v60 = (char *)&v49 - v16;
  v18 = type metadata accessor for IntegerFormatStyle.Attributed.Style.IntegerCodingKeys(255, v5, v6, v17);
  v19 = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys, v18);
  v53 = v18;
  v52 = v19;
  v57 = type metadata accessor for KeyedEncodingContainer();
  v51 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v55 = (char *)&v49 - v20;
  v56 = type metadata accessor for IntegerFormatStyle(0, v5, v6, v21);
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v73 = (char *)&v49 - v22;
  v23 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for IntegerFormatStyle.Attributed.Style.CodingKeys(255, v5, v6, v27);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.CodingKeys, v28);
  v29 = type metadata accessor for KeyedEncodingContainer();
  v74 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v49 - v30;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v76, v75);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v33 = v31;
    if (EnumCaseMultiPayload == 1)
    {
      v35 = v60;
      v34 = v61;
      v36 = v26;
      v37 = v64;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v60, v36, v64);
      v78 = 1;
      v38 = v62;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Percent, v37);
      v39 = v65;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v40 = v63;
    }
    else
    {
      v35 = v68;
      v34 = v69;
      v47 = v26;
      v37 = v71;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v68, v47, v71);
      v79 = 2;
      v38 = v70;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, v37);
      v39 = v72;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v40 = v50;
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v37);
  }
  else
  {
    v41 = v51;
    v42 = v54;
    v43 = v26;
    v44 = v56;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v73, v43, v56);
    v77 = 0;
    v45 = v55;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>, v44);
    v46 = v57;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v33 = v31;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v45, v46);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v73, v44);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v33, v29);
}

Swift::Int IntegerFormatStyle.Attributed.Style.hashValue.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  Hasher.init(_seed:)();
  IntegerFormatStyle.Attributed.Style.hash(into:)((uint64_t)v5, a1, v2, v3);
  return Hasher._finalize()();
}

uint64_t IntegerFormatStyle.Attributed.Style.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;

  v97 = a5;
  v93 = type metadata accessor for IntegerFormatStyle.Attributed.Style.CurrencyCodingKeys(255, a2, a3, a4);
  v91 = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys, v93);
  v85 = type metadata accessor for KeyedDecodingContainer();
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v94 = (char *)&v75 - v8;
  v10 = type metadata accessor for IntegerFormatStyle.Attributed.Style.PercentCodingKeys(255, a2, a3, v9);
  v89 = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys, v10);
  v90 = v10;
  v83 = type metadata accessor for KeyedDecodingContainer();
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v92 = (char *)&v75 - v11;
  v13 = type metadata accessor for IntegerFormatStyle.Attributed.Style.IntegerCodingKeys(255, a2, a3, v12);
  v14 = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys, v13);
  v87 = v13;
  v86 = v14;
  v81 = type metadata accessor for KeyedDecodingContainer();
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v88 = (char *)&v75 - v15;
  v17 = type metadata accessor for IntegerFormatStyle.Attributed.Style.CodingKeys(255, a2, a3, v16);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.CodingKeys, v17);
  v101 = type metadata accessor for KeyedDecodingContainer();
  v96 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v19 = (char *)&v75 - v18;
  v98 = a3;
  v99 = a2;
  v95 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0, a2, a3, v20);
  v100 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v75 - v24;
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v75 - v27;
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v75 - v30;
  v32 = a1;
  v33 = a1[3];
  v102 = v32;
  __swift_project_boxed_opaque_existential_1(v32, v33);
  v34 = v103;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v34)
    goto LABEL_11;
  v75 = v28;
  v76 = v25;
  v77 = v22;
  v35 = v98;
  v78 = v31;
  v37 = v96;
  v36 = v97;
  v103 = 0;
  v79 = v19;
  v38 = KeyedDecodingContainer.allKeys.getter();
  v39 = _ArrayBuffer.requestNativeBuffer()();
  if (!v39)
  {
    v108 = v38;
    v40 = type metadata accessor for Array();
    MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v40);
    v39 = _copyCollectionToContiguousArray<A>(_:)();
  }
  v41 = v39;
  swift_bridgeObjectRelease();
  v42 = v37;
  v43 = v100;
  v44 = (2 * *(_QWORD *)(v41 + 16)) | 1;
  v104 = v41;
  v105 = v41 + 32;
  v106 = 0;
  v107 = v44;
  v45 = type metadata accessor for ArraySlice();
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEBF88], v45);
  Collection<>.popFirst()();
  v46 = v99;
  if (v108 == 3 || v106 != v107 >> 1)
  {
    v56 = type metadata accessor for DecodingError();
    swift_allocError();
    v58 = v57;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v58 = v95;
    v59 = v101;
    v60 = v79;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v56 - 8) + 104))(v58, *MEMORY[0x1E0DEC450], v56);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v60, v59);
LABEL_11:
    v61 = (uint64_t)v102;
    return __swift_destroy_boxed_opaque_existential_1(v61);
  }
  if (!(_BYTE)v108)
  {
    LOBYTE(v108) = 0;
    v63 = v88;
    v48 = v101;
    v49 = v79;
    v64 = v103;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    if (!v64)
    {
      v66 = type metadata accessor for IntegerFormatStyle(0, v46, v35, v65);
      MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>, v66);
      v53 = v75;
      v67 = v81;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v63, v67);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v79, v101);
      v55 = v95;
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (v108 != 1)
  {
    LOBYTE(v108) = 2;
    v68 = v94;
    v48 = v101;
    v49 = v79;
    v69 = v103;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    if (!v69)
    {
      v71 = type metadata accessor for IntegerFormatStyle.Currency(0, v46, v35, v70);
      MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, v71);
      v53 = v77;
      v72 = v85;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v68, v72);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v79, v101);
      v55 = v95;
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  LOBYTE(v108) = 1;
  v47 = v92;
  v48 = v101;
  v49 = v79;
  v50 = v103;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v50)
  {
LABEL_16:
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v49, v48);
    v61 = (uint64_t)v102;
    return __swift_destroy_boxed_opaque_existential_1(v61);
  }
  v52 = type metadata accessor for IntegerFormatStyle.Percent(0, v46, v35, v51);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Percent, v52);
  v53 = v76;
  v54 = v83;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v47, v54);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v79, v101);
  v55 = v95;
LABEL_18:
  swift_storeEnumTagMultiPayload();
  v73 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v74 = v78;
  v73(v78, v53, v55);
  v73(v36, v74, v55);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys(char *a1, char *a2)
{
  return static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
  unsigned __int8 *v0;

  return FloatingPointParseStrategy.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  FloatingPointParseStrategy.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD))FloatingPointParseStrategy.CodingKeys.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v4;
  _BYTE v8[72];

  Hasher.init(_seed:)();
  a4(v8, *v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
  char *v0;

  return IntegerFormatStyle.Attributed.Style.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = IntegerFormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = default argument 1 of _typeName(_:qualified:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>.Attributed.Style@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return IntegerFormatStyle.Attributed.Style.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>.Attributed.Style(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return IntegerFormatStyle.Attributed.Style.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Attributed.Style.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static IntegerFormatStyle.Attributed.Style.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t IntegerFormatStyle.Attributed.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, __n128);
  _BOOL4 v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  char *v58;
  char v59;
  char *v60;
  char v61;
  uint64_t v62;
  char *v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t AssociatedConformanceWitness;
  char *v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int EnumCaseMultiPayload;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t ObjectType;
  uint64_t (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t result;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  void (*v133)(char *, char *, uint64_t);
  uint64_t v134[18];
  __int128 v135[9];

  v125 = a4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = type metadata accessor for IntegerFormatStyle.Percent(0, v5, v6, a3);
  v115 = *(_QWORD *)(v7 - 8);
  v116 = v7;
  MEMORY[0x1E0C80A78](v7);
  v114 = (char *)&v105 - v8;
  v112 = type metadata accessor for IntegerFormatStyle.Currency(0, v5, v6, v9);
  v110 = *(_QWORD *)(v112 - 8);
  MEMORY[0x1E0C80A78](v112);
  v109 = (char *)&v105 - v10;
  v111 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1E0C80A78](v111);
  v113 = (uint64_t)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for IntegerFormatStyle(0, v5, v6, v12);
  v120 = *(_QWORD *)(v131 - 8);
  MEMORY[0x1E0C80A78](v131);
  v14 = (char *)&v105 - v13;
  v16 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0, v5, v6, v15);
  v126 = *(_QWORD *)(v16 - 8);
  v127 = v16;
  MEMORY[0x1E0C80A78](v16);
  v128 = (char *)&v105 - v17;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v118 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v119 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v117 = (char *)&v105 - v19;
  v108 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  v20 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v20);
  v105 = (char *)&v105 - v21;
  MEMORY[0x1E0C80A78](v22);
  v106 = (char *)&v105 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v107 = (char *)&v105 - v25;
  MEMORY[0x1E0C80A78](v26);
  v124 = (char *)&v105 - v27;
  MEMORY[0x1E0C80A78](v28);
  v122 = (char *)&v105 - v29;
  MEMORY[0x1E0C80A78](v30);
  v123 = (char *)&v105 - v31;
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v105 - v33;
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)&v105 - v36;
  v39 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v105 - v40;
  v130 = v42;
  v43 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v42 + 16);
  v121 = (char *)a1;
  v43((char *)&v105 - v40, a1, v5, v39);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  v133 = (void (*)(char *, char *, uint64_t))v43;
  ((void (*)(char *, char *, uint64_t))v43)(v37, v41, v5);
  v132 = v14;
  v44 = (a1 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
  v45 = *(void (**)(char *, uint64_t))(v130 + 8);
  v45(v37, v5);
  v133(v34, v41, v5);
  if (!v44)
  {
    v45(v34, v5);
    v50 = v131;
    v47 = v124;
    goto LABEL_10;
  }
  *(_QWORD *)&v135[0] = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    v46 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v47 = v124;
    if (v46 >= 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v48 = v123;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v49 = dispatch thunk of static Comparable.< infix(_:_:)();
      v45(v48, v5);
      v45(v34, v5);
      v50 = v131;
      if ((v49 & 1) != 0)
        goto LABEL_36;
LABEL_10:
      v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v52 = v122;
      v53 = v133;
      v133(v122, v41, v5);
      if (v51 < 65)
      {
        v54 = dispatch thunk of BinaryInteger.bitWidth.getter();
        v45(v52, v5);
        if (v54 != 64)
        {
          v53(v47, v41, v5);
          goto LABEL_24;
        }
        v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
        v53(v47, v41, v5);
        if ((v55 & 1) != 0)
        {
LABEL_24:
          v45(v47, v5);
          goto LABEL_25;
        }
      }
      else
      {
        v45(v52, v5);
        v53(v47, v41, v5);
      }
      *(_QWORD *)&v135[0] = 0x7FFFFFFFFFFFFFFFLL;
      v56 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v56 & 1) != 0)
      {
        if (v57 > 64)
        {
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          v58 = v123;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          v59 = dispatch thunk of static Comparable.< infix(_:_:)();
          v45(v58, v5);
          v60 = v47;
          goto LABEL_31;
        }
      }
      else if (v57 > 63)
      {
        v134[0] = 0x7FFFFFFFFFFFFFFFLL;
        v69 = v123;
        (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v123, v47, v5);
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        v70 = v107;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v59 = dispatch thunk of static Comparable.< infix(_:_:)();
        v45(v70, v5);
        v60 = v69;
LABEL_31:
        v45(v60, v5);
        if ((v59 & 1) != 0)
          goto LABEL_36;
LABEL_25:
        v65 = dispatch thunk of BinaryInteger._lowWord.getter();
        v45(v41, v5);
        v66 = 0;
        v67 = 0;
        goto LABEL_37;
      }
      dispatch thunk of BinaryInteger._lowWord.getter();
      goto LABEL_24;
    }
LABEL_28:
    v68 = dispatch thunk of BinaryInteger._lowWord.getter();
    v45(v34, v5);
    v50 = v131;
    if (v68 < *(uint64_t *)&v135[0])
      goto LABEL_36;
    goto LABEL_10;
  }
  v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v61 & 1) == 0)
  {
    v47 = v124;
    if (v62 >= 64)
    {
      v45(v34, v5);
      v50 = v131;
      goto LABEL_10;
    }
    goto LABEL_28;
  }
  if (v62 > 64)
  {
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    v63 = v123;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v64 = dispatch thunk of static Comparable.< infix(_:_:)();
    v45(v63, v5);
    v45(v34, v5);
    v50 = v131;
    v47 = v124;
    if ((v64 & 1) != 0)
      goto LABEL_36;
    goto LABEL_10;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186DA5E34](&unk_18206D478, 256, v20, AssociatedConformanceWitness);
  v72 = v123;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  v73 = dispatch thunk of static Comparable.< infix(_:_:)();
  v45(v72, v5);
  v74 = v106;
  (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v106, v34, v5);
  v50 = v131;
  if ((v73 & 1) != 0)
  {
    v45(v74, v5);
  }
  else
  {
    v75 = *(_QWORD *)&v135[0];
    v76 = dispatch thunk of BinaryInteger._lowWord.getter();
    v45(v74, v5);
    v47 = v124;
    if (v76 >= v75)
      goto LABEL_10;
  }
LABEL_36:
  v45(v41, v5);
  v77 = (uint64_t)v117;
  dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
  v78 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v79 = v119;
  v80 = swift_getAssociatedConformanceWitness();
  v65 = numericStringRepresentationForBinaryInteger<A>(words:isSigned:)(v77, v78 & 1, v79, *(_QWORD *)(*(_QWORD *)(v80 + 8) + 8));
  v66 = v81;
  (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v77, v79);
  v67 = 3;
LABEL_37:
  v82 = (uint64_t)v128;
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v128, v129, v127);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v84 = v132;
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v86 = v114;
      v85 = v115;
      v87 = v116;
      (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v114, v82, v116);
      type metadata accessor for ICUPercentNumberFormatter();
      if (static ICUPercentNumberFormatter.create<A>(for:)((uint64_t)v86, v5, v6))
        goto LABEL_44;
    }
    else
    {
      v86 = v109;
      v85 = v110;
      v87 = v112;
      (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v109, v82, v112);
      type metadata accessor for ICUCurrencyNumberFormatter();
      if (static ICUCurrencyNumberFormatter.create<A>(for:)(v86, v5, v6))
      {
LABEL_44:
        ICUNumberFormatter.attributedFormat(_:)(v65, v66, v67 << 32);
        swift_release();
        outlined consume of ICUNumberFormatterBase.Value(v65, v66, 0, v67);
        return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v86, v87);
      }
    }
    (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v87);
    v102 = v65;
    v103 = v66;
    v104 = v67;
  }
  else
  {
    v129 = v67;
    v130 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v120 + 32))(v132, v82, v50);
    v128 = &v84[*(int *)(v50 + 36)];
    v88 = *((_QWORD *)v84 + 1);
    ObjectType = swift_getObjectType();
    v90 = *(uint64_t (**)(uint64_t, uint64_t))(v88 + 472);
    swift_unknownObjectRetain();
    v91 = v90(ObjectType, v88);
    v93 = v92;
    swift_unknownObjectRelease();
    v94 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v88 + 464);
    swift_unknownObjectRetain();
    v94(v134, ObjectType, v88);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v134, (uint64_t)v135, &demangling cache variable for type metadata for LocalePreferences?);
    v95 = v113;
    outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v128, v113, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    v96 = v111;
    v97 = (uint64_t *)(v95 + *(int *)(v111 + 20));
    *v97 = v91;
    v97[1] = v93;
    outlined init with take of LocalePreferences?((uint64_t)v135, v95 + *(int *)(v96 + 24), &demangling cache variable for type metadata for LocalePreferences?);
    v98 = specialized static ICUNumberFormatter._create(with:)(v95);
    outlined destroy of ICUNumberFormatter.Signature(v95, type metadata accessor for ICUNumberFormatter.Signature);
    if (v98)
    {
      v100 = v129;
      v99 = v130;
      ICUNumberFormatter.attributedFormat(_:)(v130, v66, v129 << 32);
      swift_release();
      outlined consume of ICUNumberFormatterBase.Value(v99, v66, 0, v100);
      return (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v132, v131);
    }
    (*(void (**)(char *, uint64_t))(v120 + 8))(v132, v131);
    v104 = v129;
    v102 = v130;
    v103 = v66;
  }
  outlined consume of ICUNumberFormatterBase.Value(v102, v103, 0, v104);
  v133(v123, v121, v5);
  String.init<A>(_:radix:uppercase:)();
  BigString.init(_:)();
  result = AttributedString.init(_:attributes:)(v135, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], v134);
  *v125 = v134[0];
  return result;
}

uint64_t IntegerFormatStyle.Attributed.locale(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = type metadata accessor for IntegerFormatStyle.Percent(0, v7, v8, a3);
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t *)((char *)&v42 - v10);
  v13 = type metadata accessor for IntegerFormatStyle.Currency(0, v7, v8, v12);
  v44 = *(_QWORD *)(v13 - 8);
  v45 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (uint64_t *)((char *)&v42 - v14);
  v17 = type metadata accessor for IntegerFormatStyle(0, v7, v8, v16);
  v42 = *(_QWORD *)(v17 - 8);
  v43 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (uint64_t *)((char *)&v42 - v18);
  v21 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0, v7, v8, v20);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v42 - v24;
  v27 = *a1;
  v26 = a1[1];
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(a2 - 8) + 16);
  v49 = a4;
  v29 = a4;
  v30 = v48;
  v28(v29, v48, a2, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v30, v21);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v33 = v46;
      v32 = v47;
      (*(void (**)(_QWORD *, char *, uint64_t))(v46 + 32))(v11, v25, v47);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *v11 = v27;
      v11[1] = v26;
      v34 = v49;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v49, v21);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v33 + 16))(v34, v11, v32);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_QWORD *, uint64_t))(v33 + 8))(v11, v32);
    }
    else
    {
      v40 = v44;
      v39 = v45;
      (*(void (**)(_QWORD *, char *, uint64_t))(v44 + 32))(v15, v25, v45);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *v15 = v27;
      v15[1] = v26;
      v41 = v49;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v49, v21);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v40 + 16))(v41, v15, v39);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_QWORD *, uint64_t))(v40 + 8))(v15, v39);
    }
  }
  else
  {
    v37 = v42;
    v36 = v43;
    (*(void (**)(_QWORD *, char *, uint64_t))(v42 + 32))(v19, v25, v43);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *v19 = v27;
    v19[1] = v26;
    v38 = v49;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v49, v21);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v37 + 16))(v38, v19, v36);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v37 + 8))(v19, v36);
  }
}

uint64_t IntegerFormatStyle.Attributed.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = type metadata accessor for IntegerFormatStyle.Currency(0, v5, v6, a4);
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v33 - v8;
  v11 = type metadata accessor for IntegerFormatStyle.Percent(0, v5, v6, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v33 - v13;
  v16 = type metadata accessor for IntegerFormatStyle(0, v5, v6, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v33 - v18;
  v21 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0, v5, v6, v20);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v33 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))((char *)&v33 - v23, v4, v21, v22);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v24, v11);
      v27 = v36;
      Hasher._combine(_:)(1uLL);
      IntegerFormatStyle.hash(into:)(v27, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
    else
    {
      v31 = v34;
      v30 = v35;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v9, v24, v35);
      v32 = v36;
      Hasher._combine(_:)(2uLL);
      IntegerFormatStyle.Currency.hash(into:)(v32, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v9, v30);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v24, v16);
    v29 = v36;
    Hasher._combine(_:)(0);
    IntegerFormatStyle.hash(into:)(v29, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
}

uint64_t IntegerFormatStyle.Attributed.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x656C797473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.Attributed.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = IntegerFormatStyle.Attributed.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.CodingKeys(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t IntegerFormatStyle.Attributed.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = type metadata accessor for IntegerFormatStyle.Attributed.CodingKeys(255, v5, v6, a4);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.CodingKeys, v7);
  v8 = type metadata accessor for KeyedEncodingContainer();
  v14 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v14 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0, v5, v6, v11);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style, v12);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v10, v8);
}

Swift::Int IntegerFormatStyle.Attributed.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Attributed.hash(into:));
}

Swift::Int IntegerFormatStyle.hashValue.getter(uint64_t a1, void (*a2)(_BYTE *, uint64_t))
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  a2(v5, a1);
  return Hasher._finalize()();
}

uint64_t IntegerFormatStyle.Attributed.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v28 = a5;
  v29 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0, a2, a3, a4);
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v30 = (char *)&v24 - v8;
  v10 = type metadata accessor for IntegerFormatStyle.Attributed.CodingKeys(255, a2, a3, v9);
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.CodingKeys, v10);
  v31 = type metadata accessor for KeyedDecodingContainer();
  v25 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v12 = (char *)&v24 - v11;
  v24 = type metadata accessor for IntegerFormatStyle.Attributed(0, a2, a3, v13);
  v14 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v16 = (char *)&v24 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v26 = v12;
  v17 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    v32 = v14;
    v18 = v25;
    v20 = v27;
    v19 = v28;
    v21 = v29;
    MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed.Style, v29);
    v22 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v31);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v16, v30, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v19, v16, v24);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>.Attributed@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return IntegerFormatStyle.Attributed.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>.Attributed(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return IntegerFormatStyle.Attributed.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(_BYTE *, uint64_t))IntegerFormatStyle.Attributed.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  _BYTE v7[72];

  Hasher.init(_seed:)();
  a4(v7, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static IntegerFormatStyle.Attributed.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t IntegerFormatStyle.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, 0, a7);
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance IntegerFormatStyle<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance IntegerFormatStyle<A>(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>, a1);
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t IntegerFormatStyle.Percent.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, 1, a7);
}

uint64_t IntegerFormatStyle.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W7>, uint64_t *a8@<X8>)
{
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t *v25;
  void (*v26)(_OWORD *, uint64_t, uint64_t, __n128);
  uint64_t v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;

  v39 = a7;
  v37 = a1;
  v41 = a4;
  v42 = a5;
  v40 = a3;
  v38 = a2;
  v43 = a8;
  v9 = *(_QWORD *)(a6 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (_OWORD *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x186DA9D64](v14, v13, v10);
  v16 = (int *)type metadata accessor for IntegerParseStrategy(0, a6, v15, *(_QWORD *)(a6 + 24));
  v17 = *((_QWORD *)v16 - 1);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v34 - v18;
  v20 = *(_QWORD *)(a6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v22 = type metadata accessor for Optional();
  v34 = *(_QWORD *)(v22 - 8);
  v35 = v22;
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v34 - v24);
  v26 = *(void (**)(_OWORD *, uint64_t, uint64_t, __n128))(v9 + 16);
  v26(v12, v36, a6, v23);
  ((void (*)(char *, _OWORD *, uint64_t))v26)(v19, v12, a6);
  v19[v16[11]] = 0;
  *(_OWORD *)&v19[v16[13]] = *v12;
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v12 + *(int *)(a6 + 36), (uint64_t)&v19[v16[12]], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  swift_storeEnumTagMultiPayload();
  IntegerParseStrategy.parse(_:startingAt:in:)(v37, v38, v40, v42, v16, v25);
  (*(void (**)(char *, int *))(v17 + 8))(v19, v16);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v25, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v34 + 8))(v25, v35);
    v27 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v43, 1, 1, v27);
  }
  else
  {
    v29 = *v25;
    v30 = (char *)v25 + *(int *)(TupleTypeMetadata2 + 48);
    v31 = swift_getTupleTypeMetadata2();
    v32 = v43;
    v33 = (char *)v43 + *(int *)(v31 + 48);
    *v43 = v29;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v33, v30, v20);
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v32, 0, 1, v31);
  }
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance IntegerFormatStyle<A>.Percent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.Percent.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance IntegerFormatStyle<A>.Percent(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Percent, a1);
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t IntegerFormatStyle.Currency.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t *v25;
  void (*v26)(char *, __int128 *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(__int128 *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;

  v49 = a4;
  v50 = a5;
  v48 = a3;
  v45 = a1;
  v46 = a2;
  v51 = a7;
  v44 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v44);
  v41 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a6 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (__int128 *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, a6, v11);
  v15 = (int *)type metadata accessor for IntegerParseStrategy(0, a6, v14, *(_QWORD *)(a6 + 24));
  v42 = *((_QWORD *)v15 - 1);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v39 - v19;
  v47 = *(_QWORD *)(a6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v22 = type metadata accessor for Optional();
  v39 = *(_QWORD *)(v22 - 8);
  v40 = v22;
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v39 - v24);
  v26 = *(void (**)(char *, __int128 *, uint64_t))(v9 + 16);
  ((void (*)(__int128 *, _QWORD, uint64_t, __n128))v26)(v13, v43, a6, v23);
  v26(v17, v13, a6);
  v17[v15[11]] = 0;
  v27 = v15[13];
  v43 = *v13;
  *(_OWORD *)&v17[v27] = v43;
  v28 = v41;
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v13 + *(int *)(a6 + 40), v41, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  v29 = *(void (**)(__int128 *, uint64_t))(v9 + 8);
  swift_unknownObjectRetain();
  v29(v13, a6);
  swift_storeEnumTagMultiPayload();
  outlined init with take of ICUNumberFormatter.Signature(v28, (uint64_t)&v17[v15[12]], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  v30 = v42;
  (*(void (**)(char *, char *, int *))(v42 + 32))(v20, v17, v15);
  IntegerParseStrategy.parse(_:startingAt:in:)(v45, v46, v48, v50, v15, v25);
  (*(void (**)(char *, int *))(v30 + 8))(v20, v15);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v25, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v25, v40);
    v31 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v51, 1, 1, v31);
  }
  else
  {
    v33 = *v25;
    v34 = (char *)v25 + *(int *)(TupleTypeMetadata2 + 48);
    v35 = v47;
    v36 = swift_getTupleTypeMetadata2();
    v37 = v51;
    v38 = (char *)v51 + *(int *)(v36 + 48);
    *v51 = v33;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v38, v34, v35);
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v37, 0, 1, v36);
  }
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance IntegerFormatStyle<A>.Currency@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.Currency.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance IntegerFormatStyle<A>.Currency(uint64_t a1)
{
  MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, a1);
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t static RegexComponent<>.localizedInteger(locale:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 v10;

  v4 = (char *)a2
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>)
              + 36);
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v6 = &v4[v5[9]];
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = &v4[v5[10]];
  *(_QWORD *)v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;
  return swift_unknownObjectRetain();
}

uint64_t static RegexComponent<>.localizedIntegerPercentage(locale:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 v10;

  v4 = (char *)a2
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent)
              + 36);
  v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v6 = &v4[v5[9]];
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)v4 = 0x3FF0000000000000;
  v4[8] = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  v8 = &v4[v5[10]];
  *(_QWORD *)v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;
  return swift_unknownObjectRetain();
}

uint64_t static RegexComponent<>.localizedIntegerCurrency(code:locale:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a3 = *a2;
  *(_QWORD *)(a3 + 16) = v4;
  *(_QWORD *)(a3 + 24) = v5;
  v6 = a3
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
              + 40);
  v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v8 = v6 + v7[9];
  v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0x1FFFFFFFELL;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_WORD *)(v6 + 72) = 512;
  *(_DWORD *)(v6 + 74) = 2;
  *(_BYTE *)(v6 + 78) = 2;
  v10 = v6 + v7[10];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = -1;
  *(_BYTE *)(v6 + v7[11]) = 1;
  *(_BYTE *)(v6 + v7[12]) = 3;
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed.Style);
}

uint64_t outlined destroy of FloatingPointRoundingRule?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for IntegerFormatStyle.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle.CodingKeys);
}

uint64_t type metadata accessor for IntegerFormatStyle.Percent.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle.Percent.CodingKeys);
}

uint64_t type metadata accessor for IntegerFormatStyle.Currency.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle.Currency.CodingKeys);
}

uint64_t outlined consume of ICUNumberFormatterBase.Value(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 == 3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed.CodingKeys);
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed);
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Percent()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Currency()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>);
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Percent(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent);
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Currency(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Currency);
}

void associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in IntegerFormatStyle<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Currency(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Percent(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Percent);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Attributed(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Attributed);
}

void base witness table accessor for RegexComponent in IntegerFormatStyle<A>()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for RegexComponent in IntegerFormatStyle<A>.Percent()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for RegexComponent in IntegerFormatStyle<A>.Currency()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t getEnumTagSinglePayload for IntegerFormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for IntegerFormatStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    v3 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = v5;
    a1[1] = v6;
    v7 = *(int *)(a3 + 36);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v8[8] = *((_BYTE *)a2 + v7 + 8);
    *(_QWORD *)v8 = *(_QWORD *)((char *)a2 + v7);
    *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
    v10 = *(_OWORD *)((char *)a2 + v7 + 48);
    v11 = *(_OWORD *)((char *)a2 + v7 + 16);
    *((_OWORD *)v8 + 2) = *(_OWORD *)((char *)a2 + v7 + 32);
    *((_OWORD *)v8 + 3) = v10;
    *((_OWORD *)v8 + 1) = v11;
    v8[73] = *((_BYTE *)a2 + v7 + 73);
    LOWORD(v7) = *(_WORD *)((char *)a2 + v7 + 74);
    v8[76] = v9[76];
    *((_WORD *)v8 + 37) = v7;
    v8[77] = v9[77];
    v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v13 = v12[9];
    v14 = &v8[v13];
    v15 = &v9[v13];
    v16 = type metadata accessor for FloatingPointRoundingRule();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    if (v18(v15, 1, v16))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v20 = v12[10];
    v21 = &v8[v20];
    v22 = &v9[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v8[v12[11]] = v9[v12[11]];
  }
  return v3;
}

_QWORD *assignWithCopy for IntegerFormatStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  LOBYTE(v7) = *((_BYTE *)a2 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v8[8] = v7;
  v10 = *((_OWORD *)v9 + 1);
  v11 = *((_OWORD *)v9 + 2);
  v12 = *((_OWORD *)v9 + 3);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
  *((_OWORD *)v8 + 2) = v11;
  *((_OWORD *)v8 + 3) = v12;
  *((_OWORD *)v8 + 1) = v10;
  v8[73] = v9[73];
  LOWORD(v7) = *((_WORD *)v9 + 37);
  v8[76] = v9[76];
  *((_WORD *)v8 + 37) = v7;
  v8[77] = v9[77];
  v13 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v14 = v13[9];
  v15 = &v8[v14];
  v16 = &v9[v14];
  v17 = type metadata accessor for FloatingPointRoundingRule();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = v13[10];
  v24 = &v8[v23];
  v25 = &v9[v23];
  v26 = *(_QWORD *)v25;
  v24[8] = v25[8];
  *(_QWORD *)v24 = v26;
  v8[v13[11]] = v9[v13[11]];
  return a1;
}

_OWORD *initializeWithTake for IntegerFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  *a1 = *a2;
  v4 = *(int *)(a3 + 36);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v5[8] = *((_BYTE *)a2 + v4 + 8);
  *(_QWORD *)v5 = *(_QWORD *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a2 + v4 + 57);
  v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *((_OWORD *)v5 + 2) = *(_OWORD *)((char *)a2 + v4 + 32);
  *((_OWORD *)v5 + 3) = v7;
  *((_OWORD *)v5 + 1) = v8;
  v5[73] = *((_BYTE *)a2 + v4 + 73);
  LOWORD(v4) = *(_WORD *)((char *)a2 + v4 + 74);
  v5[76] = v6[76];
  *((_WORD *)v5 + 37) = v4;
  v5[77] = v6[77];
  v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v10 = v9[9];
  v11 = &v5[v10];
  v12 = &v6[v10];
  v13 = type metadata accessor for FloatingPointRoundingRule();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = v9[10];
  v17 = &v5[v16];
  v18 = &v6[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v5[v9[11]] = v6[v9[11]];
  return a1;
}

_QWORD *assignWithTake for IntegerFormatStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = v6;
  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)((char *)a2 + v7);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  v10 = *(_OWORD *)((char *)a2 + v7 + 32);
  *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
  *((_OWORD *)v8 + 2) = v10;
  *((_OWORD *)v8 + 3) = *(_OWORD *)((char *)a2 + v7 + 48);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
  v8[73] = *((_BYTE *)a2 + v7 + 73);
  v8[76] = *((_BYTE *)a2 + v7 + 76);
  *((_WORD *)v8 + 37) = *(_WORD *)((char *)a2 + v7 + 74);
  v8[77] = *((_BYTE *)a2 + v7 + 77);
  v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v12 = v11[9];
  v13 = &v8[v12];
  v14 = &v9[v12];
  v15 = type metadata accessor for FloatingPointRoundingRule();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  v21 = v11[10];
  v22 = &v8[v21];
  v23 = &v9[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v8[v11[11]] = v9[v11[11]];
  return a1;
}

uint64_t getEnumTagSinglePayload for IntegerFormatStyle.Percent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Percent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for IntegerFormatStyle.Currency(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *__dst;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    v3 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    v7 = a2[2];
    *a1 = v5;
    a1[1] = v6;
    v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    v9 = *(int *)(a3 + 40);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *(_QWORD *)v10 = *(_QWORD *)((char *)a2 + v9);
    v10[8] = *((_BYTE *)a2 + v9 + 8);
    v12 = *(_OWORD *)((char *)a2 + v9 + 32);
    *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
    *((_OWORD *)v10 + 2) = v12;
    *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
    *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
    v10[73] = *((_BYTE *)a2 + v9 + 73);
    *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
    v10[78] = *((_BYTE *)a2 + v9 + 78);
    v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    v14 = v13[9];
    __dst = &v10[v14];
    v15 = &v11[v14];
    v16 = type metadata accessor for FloatingPointRoundingRule();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v20 = v13[10];
    v21 = &v10[v20];
    v22 = &v11[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v10[v13[11]] = v11[v13[11]];
    v10[v13[12]] = v11[v13[12]];
  }
  return v3;
}

uint64_t destroy for IntegerFormatStyle.Currency(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = v4 + *(int *)(type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0) + 36);
  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t initializeWithCopy for IntegerFormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(int *)(a3 + 40);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_QWORD *)v6 = *(_QWORD *)(a2 + v5);
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(a2 + v5 + 8);
  v8 = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + v5 + 48);
  *(_OWORD *)(v6 + 57) = *(_OWORD *)(a2 + v5 + 57);
  *(_BYTE *)(v6 + 73) = *(_BYTE *)(a2 + v5 + 73);
  *(_DWORD *)(v6 + 74) = *(_DWORD *)(a2 + v5 + 74);
  *(_BYTE *)(v6 + 78) = *(_BYTE *)(a2 + v5 + 78);
  v9 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v10 = v9[9];
  v11 = (void *)(v6 + v10);
  v12 = (const void *)(v7 + v10);
  v13 = type metadata accessor for FloatingPointRoundingRule();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = v9[10];
  v18 = v6 + v17;
  v19 = v7 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(v6 + v9[11]) = *(_BYTE *)(v7 + v9[11]);
  *(_BYTE *)(v6 + v9[12]) = *(_BYTE *)(v7 + v9[12]);
  return a1;
}

_QWORD *assignWithCopy for IntegerFormatStyle.Currency(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 40);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = *(_QWORD *)((char *)a2 + v7);
  v8[8] = v9[8];
  *(_QWORD *)v8 = v10;
  v11 = *((_OWORD *)v9 + 1);
  v12 = *((_OWORD *)v9 + 2);
  v13 = *((_OWORD *)v9 + 3);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
  *((_OWORD *)v8 + 2) = v12;
  *((_OWORD *)v8 + 3) = v13;
  *((_OWORD *)v8 + 1) = v11;
  v8[73] = v9[73];
  *(_DWORD *)(v8 + 74) = *(_DWORD *)(v9 + 74);
  v8[78] = v9[78];
  v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v15 = v14[9];
  v16 = &v8[v15];
  v17 = &v9[v15];
  v18 = type metadata accessor for FloatingPointRoundingRule();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_7:
  v24 = v14[10];
  v25 = &v8[v24];
  v26 = &v9[v24];
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  v8[v14[11]] = v9[v14[11]];
  v8[v14[12]] = v9[v14[12]];
  return a1;
}

_OWORD *initializeWithTake for IntegerFormatStyle.Currency(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 40);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v6[8] = *((_BYTE *)a2 + v5 + 8);
  *(_QWORD *)v6 = *(_QWORD *)((char *)a2 + v5);
  *(_OWORD *)(v6 + 57) = *(_OWORD *)((char *)a2 + v5 + 57);
  v8 = *(_OWORD *)((char *)a2 + v5 + 48);
  v9 = *(_OWORD *)((char *)a2 + v5 + 16);
  *((_OWORD *)v6 + 2) = *(_OWORD *)((char *)a2 + v5 + 32);
  *((_OWORD *)v6 + 3) = v8;
  *((_OWORD *)v6 + 1) = v9;
  v6[73] = *((_BYTE *)a2 + v5 + 73);
  *(_DWORD *)(v6 + 74) = *(_DWORD *)((char *)a2 + v5 + 74);
  v6[78] = *((_BYTE *)a2 + v5 + 78);
  v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v11 = v10[9];
  v12 = &v6[v11];
  v13 = &v7[v11];
  v14 = type metadata accessor for FloatingPointRoundingRule();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = v10[10];
  v18 = &v6[v17];
  v19 = &v7[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v6[v10[11]] = v7[v10[11]];
  v6[v10[12]] = v7[v10[12]];
  return a1;
}

_QWORD *assignWithTake for IntegerFormatStyle.Currency(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  v7 = a2[2];
  v8 = a2[3];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 40);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  *(_QWORD *)v10 = *(_QWORD *)((char *)a2 + v9);
  v10[8] = *((_BYTE *)a2 + v9 + 8);
  v12 = *(_OWORD *)((char *)a2 + v9 + 32);
  *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
  *((_OWORD *)v10 + 2) = v12;
  *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
  *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
  v10[73] = *((_BYTE *)a2 + v9 + 73);
  *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
  v10[78] = *((_BYTE *)a2 + v9 + 78);
  v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v14 = v13[9];
  v15 = &v10[v14];
  v16 = &v11[v14];
  v17 = type metadata accessor for FloatingPointRoundingRule();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = v13[10];
  v24 = &v10[v23];
  v25 = &v11[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  v10[v13[11]] = v11[v13[11]];
  v10[v13[12]] = v11[v13[12]];
  return a1;
}

uint64_t getEnumTagSinglePayload for IntegerFormatStyle.Currency()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181CBA734(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 40)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Currency()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_181CBA7BC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 40)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for IntegerFormatStyle.Attributed.Style(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(const void *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int (*v38)(const void *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__dst;

  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v8 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for IntegerFormatStyle.Attributed.Style(0, v7, v6, a4) - 8)
                 + 80);
  if ((v8 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v23 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v23;
      v24 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, v7, v6, v10) + 40);
      v25 = a1 + v24;
      v26 = (uint64_t)a2 + v24;
      *(_QWORD *)v25 = *(uint64_t *)((char *)a2 + v24);
      *(_BYTE *)(v25 + 8) = *((_BYTE *)a2 + v24 + 8);
      v27 = *(_OWORD *)((char *)a2 + v24 + 32);
      *(_OWORD *)(v25 + 16) = *(_OWORD *)((char *)a2 + v24 + 16);
      *(_OWORD *)(v25 + 32) = v27;
      *(_OWORD *)(v25 + 48) = *(_OWORD *)((char *)a2 + v24 + 48);
      *(_OWORD *)(v25 + 57) = *(_OWORD *)((char *)a2 + v24 + 57);
      *(_BYTE *)(v25 + 73) = *((_BYTE *)a2 + v24 + 73);
      *(_DWORD *)(v25 + 74) = *(_DWORD *)((char *)a2 + v24 + 74);
      *(_BYTE *)(v25 + 78) = *((_BYTE *)a2 + v24 + 78);
      v28 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v29 = v28[9];
      __dst = (void *)(v25 + v29);
      v30 = (const void *)(v26 + v29);
      v31 = type metadata accessor for FloatingPointRoundingRule();
      v32 = *(_QWORD *)(v31 - 8);
      v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v33(v30, 1, v31))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(__dst, v30, v31);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
      }
      v40 = v28[10];
      v41 = v25 + v40;
      v42 = v26 + v40;
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(_BYTE *)(v25 + v28[11]) = *(_BYTE *)(v26 + v28[11]);
      *(_BYTE *)(v25 + v28[12]) = *(_BYTE *)(v26 + v28[12]);
      goto LABEL_16;
    }
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v11 = *(int *)(type metadata accessor for IntegerFormatStyle.Percent(0, v7, v6, v10) + 36);
      v12 = a1 + v11;
      v13 = (uint64_t)a2 + v11;
      *(_QWORD *)v12 = *(uint64_t *)((char *)a2 + v11);
      *(_BYTE *)(v12 + 8) = *((_BYTE *)a2 + v11 + 8);
      v14 = *(_OWORD *)((char *)a2 + v11 + 32);
      *(_OWORD *)(v12 + 16) = *(_OWORD *)((char *)a2 + v11 + 16);
      *(_OWORD *)(v12 + 32) = v14;
      *(_OWORD *)(v12 + 48) = *(_OWORD *)((char *)a2 + v11 + 48);
      *(_OWORD *)(v12 + 57) = *(_OWORD *)((char *)a2 + v11 + 57);
      *(_BYTE *)(v12 + 73) = *((_BYTE *)a2 + v11 + 73);
      *(_WORD *)(v12 + 74) = *(_WORD *)((char *)a2 + v11 + 74);
      *(_BYTE *)(v12 + 76) = *((_BYTE *)a2 + v11 + 76);
      *(_BYTE *)(v12 + 77) = *((_BYTE *)a2 + v11 + 77);
      v15 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v16 = v15[9];
      v17 = (void *)(v12 + v16);
      v18 = (const void *)(v13 + v16);
      v19 = type metadata accessor for FloatingPointRoundingRule();
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
      swift_unknownObjectRetain();
      if (v21(v18, 1, v19))
        goto LABEL_10;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v35 = *(int *)(type metadata accessor for IntegerFormatStyle(0, v7, v6, v10) + 36);
      v12 = a1 + v35;
      v13 = (uint64_t)a2 + v35;
      *(_QWORD *)v12 = *(uint64_t *)((char *)a2 + v35);
      *(_BYTE *)(v12 + 8) = *((_BYTE *)a2 + v35 + 8);
      v36 = *(_OWORD *)((char *)a2 + v35 + 32);
      *(_OWORD *)(v12 + 16) = *(_OWORD *)((char *)a2 + v35 + 16);
      *(_OWORD *)(v12 + 32) = v36;
      *(_OWORD *)(v12 + 48) = *(_OWORD *)((char *)a2 + v35 + 48);
      *(_OWORD *)(v12 + 57) = *(_OWORD *)((char *)a2 + v35 + 57);
      *(_BYTE *)(v12 + 73) = *((_BYTE *)a2 + v35 + 73);
      *(_WORD *)(v12 + 74) = *(_WORD *)((char *)a2 + v35 + 74);
      *(_BYTE *)(v12 + 76) = *((_BYTE *)a2 + v35 + 76);
      *(_BYTE *)(v12 + 77) = *((_BYTE *)a2 + v35 + 77);
      v15 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v37 = v15[9];
      v17 = (void *)(v12 + v37);
      v18 = (const void *)(v13 + v37);
      v19 = type metadata accessor for FloatingPointRoundingRule();
      v20 = *(_QWORD *)(v19 - 8);
      v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
      swift_unknownObjectRetain();
      if (v38(v18, 1, v19))
      {
LABEL_10:
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
LABEL_15:
        v43 = v15[10];
        v44 = v12 + v43;
        v45 = v13 + v43;
        *(_QWORD *)v44 = *(_QWORD *)v45;
        *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
        *(_BYTE *)(v12 + v15[11]) = *(_BYTE *)(v13 + v15[11]);
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    goto LABEL_15;
  }
  v22 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v22 + ((v8 + 16) & ~(unint64_t)v8);
  swift_retain();
  return a1;
}

uint64_t destroy for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  type metadata accessor for IntegerFormatStyle.Attributed.Style(0, v6, v5, a4);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v11 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, v6, v5, v10) + 40);
    v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if ((_DWORD)result == 1)
    {
      swift_unknownObjectRelease();
      v9 = type metadata accessor for IntegerFormatStyle.Percent(0, v6, v5, v13);
    }
    else
    {
      if ((_DWORD)result)
        return result;
      swift_unknownObjectRelease();
      v9 = type metadata accessor for IntegerFormatStyle(0, v6, v5, v8);
    }
    v11 = *(int *)(v9 + 36);
    v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  v14 = a1 + *(int *)(v12 + 36) + v11;
  v15 = type metadata accessor for FloatingPointRoundingRule();
  v16 = *(_QWORD *)(v15 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  return result;
}

uint64_t initializeWithCopy for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int *v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(const void *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unsigned int (*v37)(const void *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  type metadata accessor for IntegerFormatStyle.Attributed.Style(0, v7, v6, a4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v10 = *(int *)(type metadata accessor for IntegerFormatStyle.Percent(0, v7, v6, v9) + 36);
      v11 = a1 + v10;
      v12 = a2 + v10;
      *(_QWORD *)v11 = *(_QWORD *)(a2 + v10);
      *(_BYTE *)(v11 + 8) = *(_BYTE *)(a2 + v10 + 8);
      v13 = *(_OWORD *)(a2 + v10 + 32);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)(a2 + v10 + 16);
      *(_OWORD *)(v11 + 32) = v13;
      *(_OWORD *)(v11 + 48) = *(_OWORD *)(a2 + v10 + 48);
      *(_OWORD *)(v11 + 57) = *(_OWORD *)(a2 + v10 + 57);
      *(_BYTE *)(v11 + 73) = *(_BYTE *)(a2 + v10 + 73);
      *(_WORD *)(v11 + 74) = *(_WORD *)(a2 + v10 + 74);
      *(_BYTE *)(v11 + 76) = *(_BYTE *)(a2 + v10 + 76);
      *(_BYTE *)(v11 + 77) = *(_BYTE *)(a2 + v10 + 77);
      v14 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v15 = v14[9];
      v16 = (void *)(v11 + v15);
      v17 = (const void *)(v12 + v15);
      v18 = type metadata accessor for FloatingPointRoundingRule();
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
      swift_unknownObjectRetain();
      if (v20(v17, 1, v18))
        goto LABEL_8;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v34 = *(int *)(type metadata accessor for IntegerFormatStyle(0, v7, v6, v9) + 36);
      v11 = a1 + v34;
      v12 = a2 + v34;
      *(_QWORD *)v11 = *(_QWORD *)(a2 + v34);
      *(_BYTE *)(v11 + 8) = *(_BYTE *)(a2 + v34 + 8);
      v35 = *(_OWORD *)(a2 + v34 + 32);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)(a2 + v34 + 16);
      *(_OWORD *)(v11 + 32) = v35;
      *(_OWORD *)(v11 + 48) = *(_OWORD *)(a2 + v34 + 48);
      *(_OWORD *)(v11 + 57) = *(_OWORD *)(a2 + v34 + 57);
      *(_BYTE *)(v11 + 73) = *(_BYTE *)(a2 + v34 + 73);
      *(_WORD *)(v11 + 74) = *(_WORD *)(a2 + v34 + 74);
      *(_BYTE *)(v11 + 76) = *(_BYTE *)(a2 + v34 + 76);
      *(_BYTE *)(v11 + 77) = *(_BYTE *)(a2 + v34 + 77);
      v14 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v36 = v14[9];
      v16 = (void *)(v11 + v36);
      v17 = (const void *)(v12 + v36);
      v18 = type metadata accessor for FloatingPointRoundingRule();
      v19 = *(_QWORD *)(v18 - 8);
      v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
      swift_unknownObjectRetain();
      if (v37(v17, 1, v18))
      {
LABEL_8:
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
LABEL_13:
        v45 = v14[10];
        v46 = v11 + v45;
        v47 = v12 + v45;
        *(_QWORD *)v46 = *(_QWORD *)v47;
        *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
        v48 = v14[11];
        v43 = (_BYTE *)(v11 + v48);
        v44 = (_BYTE *)(v12 + v48);
        goto LABEL_14;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    goto LABEL_13;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v21 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v21;
  v22 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, v7, v6, v9) + 40);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_QWORD *)v23 = *(_QWORD *)(a2 + v22);
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(a2 + v22 + 8);
  v25 = *(_OWORD *)(a2 + v22 + 32);
  *(_OWORD *)(v23 + 16) = *(_OWORD *)(a2 + v22 + 16);
  *(_OWORD *)(v23 + 32) = v25;
  *(_OWORD *)(v23 + 48) = *(_OWORD *)(a2 + v22 + 48);
  *(_OWORD *)(v23 + 57) = *(_OWORD *)(a2 + v22 + 57);
  *(_BYTE *)(v23 + 73) = *(_BYTE *)(a2 + v22 + 73);
  *(_DWORD *)(v23 + 74) = *(_DWORD *)(a2 + v22 + 74);
  *(_BYTE *)(v23 + 78) = *(_BYTE *)(a2 + v22 + 78);
  v26 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v27 = v26[9];
  v28 = (void *)(v23 + v27);
  v29 = (const void *)(v24 + v27);
  v30 = type metadata accessor for FloatingPointRoundingRule();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v32(v29, 1, v30))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  v39 = v26[10];
  v40 = v23 + v39;
  v41 = v24 + v39;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  *(_BYTE *)(v23 + v26[11]) = *(_BYTE *)(v24 + v26[11]);
  v42 = v26[12];
  v43 = (_BYTE *)(v23 + v42);
  v44 = (_BYTE *)(v24 + v42);
LABEL_14:
  *v43 = *v44;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int *v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(const void *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void *__dst;

  if (a1 != a2)
  {
    v7 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v8 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0, v7, v6, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v12 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, v7, v6, v10) + 40);
      v13 = a1 + v12;
      v14 = a2 + v12;
      LOBYTE(v12) = *(_BYTE *)(a2 + v12 + 8);
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *(_BYTE *)(v13 + 8) = v12;
      v15 = *(_OWORD *)(v14 + 57);
      v17 = *(_OWORD *)(v14 + 32);
      v16 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
      *(_OWORD *)(v13 + 32) = v17;
      *(_OWORD *)(v13 + 48) = v16;
      *(_OWORD *)(v13 + 57) = v15;
      *(_BYTE *)(v13 + 73) = *(_BYTE *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(_BYTE *)(v13 + 78) = *(_BYTE *)(v14 + 78);
      v18 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v19 = v18[9];
      __dst = (void *)(v13 + v19);
      v20 = (const void *)(v14 + v19);
      v21 = type metadata accessor for FloatingPointRoundingRule();
      v22 = *(_QWORD *)(v21 - 8);
      v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v23(v20, 1, v21))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(__dst, v20, v21);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
      }
      v46 = v18[10];
      v47 = v13 + v46;
      v48 = (uint64_t *)(v14 + v46);
      v49 = *v48;
      *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
      *(_QWORD *)v47 = v49;
      *(_BYTE *)(v13 + v18[11]) = *(_BYTE *)(v14 + v18[11]);
      v50 = v18[12];
      v44 = (_BYTE *)(v13 + v50);
      v45 = (_BYTE *)(v14 + v50);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1)
        v11 = type metadata accessor for IntegerFormatStyle.Percent(0, v7, v6, v10);
      else
        v11 = type metadata accessor for IntegerFormatStyle(0, v7, v6, v10);
      v25 = *(int *)(v11 + 36);
      v26 = a1 + v25;
      v27 = a2 + v25;
      LOBYTE(v25) = *(_BYTE *)(a2 + v25 + 8);
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_BYTE *)(v26 + 8) = v25;
      v28 = *(_OWORD *)(v27 + 57);
      v30 = *(_OWORD *)(v27 + 32);
      v29 = *(_OWORD *)(v27 + 48);
      *(_OWORD *)(v26 + 16) = *(_OWORD *)(v27 + 16);
      *(_OWORD *)(v26 + 32) = v30;
      *(_OWORD *)(v26 + 48) = v29;
      *(_OWORD *)(v26 + 57) = v28;
      *(_BYTE *)(v26 + 73) = *(_BYTE *)(v27 + 73);
      LOWORD(v25) = *(_WORD *)(v27 + 74);
      *(_BYTE *)(v26 + 76) = *(_BYTE *)(v27 + 76);
      *(_WORD *)(v26 + 74) = v25;
      *(_BYTE *)(v26 + 77) = *(_BYTE *)(v27 + 77);
      v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v32 = v31[9];
      v33 = (void *)(v26 + v32);
      v34 = (const void *)(v27 + v32);
      v35 = type metadata accessor for FloatingPointRoundingRule();
      v36 = *(_QWORD *)(v35 - 8);
      v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
      swift_unknownObjectRetain();
      if (v37(v34, 1, v35))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      v39 = v31[10];
      v40 = v26 + v39;
      v41 = (uint64_t *)(v27 + v39);
      v42 = *v41;
      *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
      *(_QWORD *)v40 = v42;
      v43 = v31[11];
      v44 = (_BYTE *)(v26 + v43);
      v45 = (_BYTE *)(v27 + v43);
    }
    *v44 = *v45;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for IntegerFormatStyle.Attributed(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v7 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  type metadata accessor for IntegerFormatStyle.Attributed.Style(0, v7, v6, a4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    v12 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, v7, v6, v9) + 40);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    *(_QWORD *)v13 = *(_QWORD *)((char *)a2 + v12);
    v13[8] = *((_BYTE *)a2 + v12 + 8);
    v15 = *(_OWORD *)((char *)a2 + v12 + 32);
    *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)a2 + v12 + 16);
    *((_OWORD *)v13 + 2) = v15;
    *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)a2 + v12 + 48);
    *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)a2 + v12 + 57);
    v13[73] = *((_BYTE *)a2 + v12 + 73);
    *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)a2 + v12 + 74);
    v13[78] = *((_BYTE *)a2 + v12 + 78);
    v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    v17 = v16[9];
    v18 = &v13[v17];
    v19 = &v14[v17];
    v20 = type metadata accessor for FloatingPointRoundingRule();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v40 = v16[10];
    v41 = &v13[v40];
    v42 = &v14[v40];
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    v13[v16[11]] = v14[v16[11]];
    v43 = v16[12];
    v38 = &v13[v43];
    v39 = &v14[v43];
  }
  else
  {
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
      v10 = type metadata accessor for IntegerFormatStyle.Percent(0, v7, v6, v9);
    else
      v10 = type metadata accessor for IntegerFormatStyle(0, v7, v6, v9);
    v23 = *(int *)(v10 + 36);
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    *(_QWORD *)v24 = *(_QWORD *)((char *)a2 + v23);
    v24[8] = *((_BYTE *)a2 + v23 + 8);
    v26 = *(_OWORD *)((char *)a2 + v23 + 32);
    *((_OWORD *)v24 + 1) = *(_OWORD *)((char *)a2 + v23 + 16);
    *((_OWORD *)v24 + 2) = v26;
    *((_OWORD *)v24 + 3) = *(_OWORD *)((char *)a2 + v23 + 48);
    *(_OWORD *)(v24 + 57) = *(_OWORD *)((char *)a2 + v23 + 57);
    v24[73] = *((_BYTE *)a2 + v23 + 73);
    *((_WORD *)v24 + 37) = *(_WORD *)((char *)a2 + v23 + 74);
    v24[76] = *((_BYTE *)a2 + v23 + 76);
    v24[77] = *((_BYTE *)a2 + v23 + 77);
    v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v28 = v27[9];
    v29 = &v24[v28];
    v30 = &v25[v28];
    v31 = type metadata accessor for FloatingPointRoundingRule();
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v34 = v27[10];
    v35 = &v24[v34];
    v36 = &v25[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    v37 = v27[11];
    v38 = &v24[v37];
    v39 = &v25[v37];
  }
  *v38 = *v39;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for IntegerFormatStyle.Attributed(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;

  if (a1 != a2)
  {
    v7 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v8 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0, v7, v6, a4);
    (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      v13 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, v7, v6, v10) + 40);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      *(_QWORD *)v14 = *(_QWORD *)((char *)a2 + v13);
      v14[8] = *((_BYTE *)a2 + v13 + 8);
      v16 = *(_OWORD *)((char *)a2 + v13 + 32);
      *((_OWORD *)v14 + 1) = *(_OWORD *)((char *)a2 + v13 + 16);
      *((_OWORD *)v14 + 2) = v16;
      *((_OWORD *)v14 + 3) = *(_OWORD *)((char *)a2 + v13 + 48);
      *(_OWORD *)(v14 + 57) = *(_OWORD *)((char *)a2 + v13 + 57);
      v14[73] = *((_BYTE *)a2 + v13 + 73);
      *(_DWORD *)(v14 + 74) = *(_DWORD *)((char *)a2 + v13 + 74);
      v14[78] = *((_BYTE *)a2 + v13 + 78);
      v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v18 = v17[9];
      v19 = &v14[v18];
      v20 = &v15[v18];
      v21 = type metadata accessor for FloatingPointRoundingRule();
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      v41 = v17[10];
      v42 = &v14[v41];
      v43 = &v15[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      v14[v17[11]] = v15[v17[11]];
      v44 = v17[12];
      v39 = &v14[v44];
      v40 = &v15[v44];
    }
    else
    {
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
        v11 = type metadata accessor for IntegerFormatStyle.Percent(0, v7, v6, v10);
      else
        v11 = type metadata accessor for IntegerFormatStyle(0, v7, v6, v10);
      v24 = *(int *)(v11 + 36);
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      *(_QWORD *)v25 = *(_QWORD *)((char *)a2 + v24);
      v25[8] = *((_BYTE *)a2 + v24 + 8);
      v27 = *(_OWORD *)((char *)a2 + v24 + 32);
      *((_OWORD *)v25 + 1) = *(_OWORD *)((char *)a2 + v24 + 16);
      *((_OWORD *)v25 + 2) = v27;
      *((_OWORD *)v25 + 3) = *(_OWORD *)((char *)a2 + v24 + 48);
      *(_OWORD *)(v25 + 57) = *(_OWORD *)((char *)a2 + v24 + 57);
      v25[73] = *((_BYTE *)a2 + v24 + 73);
      *((_WORD *)v25 + 37) = *(_WORD *)((char *)a2 + v24 + 74);
      v25[76] = *((_BYTE *)a2 + v24 + 76);
      v25[77] = *((_BYTE *)a2 + v24 + 77);
      v28 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v29 = v28[9];
      v30 = &v25[v29];
      v31 = &v26[v29];
      v32 = type metadata accessor for FloatingPointRoundingRule();
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      v35 = v28[10];
      v36 = &v25[v35];
      v37 = &v26[v35];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      v38 = v28[11];
      v39 = &v25[v38];
      v40 = &v26[v38];
    }
    *v39 = *v40;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for IntegerFormatStyle.Attributed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181CBBC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Attributed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181CBBC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for IntegerFormatStyle.Attributed.Style(0, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a2, v6);
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Percent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181CBBD20 + 4 * byte_182100E55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181CBBD54 + 4 * byte_182100E50[v4]))();
}

uint64_t sub_181CBBD54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CBBD5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181CBBD64);
  return result;
}

uint64_t sub_181CBBD70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181CBBD78);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181CBBD7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CBBD84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata completion function for IntegerFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  result = type metadata accessor for IntegerFormatStyle(319, v4, v5, a4);
  if (v8 <= 0x3F)
  {
    result = type metadata accessor for IntegerFormatStyle.Percent(319, v4, v5, v7);
    if (v10 <= 0x3F)
    {
      result = type metadata accessor for IntegerFormatStyle.Currency(319, v4, v5, v9);
      if (v11 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IntegerFormatStyle.Attributed.Style(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int *v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(const void *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unsigned int (*v36)(const void *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v21 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v21;
      v22 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v8)+ 40);
      v23 = a1 + v22;
      v24 = (uint64_t)a2 + v22;
      *(_QWORD *)v23 = *(uint64_t *)((char *)a2 + v22);
      *(_BYTE *)(v23 + 8) = *((_BYTE *)a2 + v22 + 8);
      v25 = *(_OWORD *)((char *)a2 + v22 + 32);
      *(_OWORD *)(v23 + 16) = *(_OWORD *)((char *)a2 + v22 + 16);
      *(_OWORD *)(v23 + 32) = v25;
      *(_OWORD *)(v23 + 48) = *(_OWORD *)((char *)a2 + v22 + 48);
      *(_OWORD *)(v23 + 57) = *(_OWORD *)((char *)a2 + v22 + 57);
      *(_BYTE *)(v23 + 73) = *((_BYTE *)a2 + v22 + 73);
      *(_DWORD *)(v23 + 74) = *(_DWORD *)((char *)a2 + v22 + 74);
      *(_BYTE *)(v23 + 78) = *((_BYTE *)a2 + v22 + 78);
      v26 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v27 = v26[9];
      __dst = (void *)(v23 + v27);
      v28 = (const void *)(v24 + v27);
      v29 = type metadata accessor for FloatingPointRoundingRule();
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v31(v28, 1, v29))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(__dst, v28, v29);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
      }
      v38 = v26[10];
      v39 = v23 + v38;
      v40 = v24 + v38;
      *(_QWORD *)v39 = *(_QWORD *)v40;
      *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
      *(_BYTE *)(v23 + v26[11]) = *(_BYTE *)(v24 + v26[11]);
      *(_BYTE *)(v23 + v26[12]) = *(_BYTE *)(v24 + v26[12]);
      goto LABEL_16;
    }
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v9 = *(int *)(type metadata accessor for IntegerFormatStyle.Percent(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v8)+ 36);
      v10 = a1 + v9;
      v11 = (uint64_t)a2 + v9;
      *(_QWORD *)v10 = *(uint64_t *)((char *)a2 + v9);
      *(_BYTE *)(v10 + 8) = *((_BYTE *)a2 + v9 + 8);
      v12 = *(_OWORD *)((char *)a2 + v9 + 32);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)((char *)a2 + v9 + 16);
      *(_OWORD *)(v10 + 32) = v12;
      *(_OWORD *)(v10 + 48) = *(_OWORD *)((char *)a2 + v9 + 48);
      *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
      *(_BYTE *)(v10 + 73) = *((_BYTE *)a2 + v9 + 73);
      *(_WORD *)(v10 + 74) = *(_WORD *)((char *)a2 + v9 + 74);
      *(_BYTE *)(v10 + 76) = *((_BYTE *)a2 + v9 + 76);
      *(_BYTE *)(v10 + 77) = *((_BYTE *)a2 + v9 + 77);
      v13 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v14 = v13[9];
      v15 = (void *)(v10 + v14);
      v16 = (const void *)(v11 + v14);
      v17 = type metadata accessor for FloatingPointRoundingRule();
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
      swift_unknownObjectRetain();
      if (v19(v16, 1, v17))
        goto LABEL_10;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v33 = *(int *)(type metadata accessor for IntegerFormatStyle(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v8)
                   + 36);
      v10 = a1 + v33;
      v11 = (uint64_t)a2 + v33;
      *(_QWORD *)v10 = *(uint64_t *)((char *)a2 + v33);
      *(_BYTE *)(v10 + 8) = *((_BYTE *)a2 + v33 + 8);
      v34 = *(_OWORD *)((char *)a2 + v33 + 32);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)((char *)a2 + v33 + 16);
      *(_OWORD *)(v10 + 32) = v34;
      *(_OWORD *)(v10 + 48) = *(_OWORD *)((char *)a2 + v33 + 48);
      *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v33 + 57);
      *(_BYTE *)(v10 + 73) = *((_BYTE *)a2 + v33 + 73);
      *(_WORD *)(v10 + 74) = *(_WORD *)((char *)a2 + v33 + 74);
      *(_BYTE *)(v10 + 76) = *((_BYTE *)a2 + v33 + 76);
      *(_BYTE *)(v10 + 77) = *((_BYTE *)a2 + v33 + 77);
      v13 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v35 = v13[9];
      v15 = (void *)(v10 + v35);
      v16 = (const void *)(v11 + v35);
      v17 = type metadata accessor for FloatingPointRoundingRule();
      v18 = *(_QWORD *)(v17 - 8);
      v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
      swift_unknownObjectRetain();
      if (v36(v16, 1, v17))
      {
LABEL_10:
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
LABEL_15:
        v41 = v13[10];
        v42 = v10 + v41;
        v43 = v11 + v41;
        *(_QWORD *)v42 = *(_QWORD *)v43;
        *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
        *(_BYTE *)(v10 + v13[11]) = *(_BYTE *)(v11 + v13[11]);
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    goto LABEL_15;
  }
  v20 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t destroy for IntegerFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v8 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v7)+ 40);
    v9 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if ((_DWORD)result == 1)
    {
      swift_unknownObjectRelease();
      v6 = type metadata accessor for IntegerFormatStyle.Percent(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v10);
    }
    else
    {
      if ((_DWORD)result)
        return result;
      swift_unknownObjectRelease();
      v6 = type metadata accessor for IntegerFormatStyle(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v5);
    }
    v8 = *(int *)(v6 + 36);
    v9 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  v11 = a1 + *(int *)(v9 + 36) + v8;
  v12 = type metadata accessor for FloatingPointRoundingRule();
  v13 = *(_QWORD *)(v12 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  return result;
}

uint64_t initializeWithCopy for IntegerFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int *v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int *v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(const void *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__dst;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v8 = *(int *)(type metadata accessor for IntegerFormatStyle.Percent(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7)+ 36);
      v9 = a1 + v8;
      v10 = a2 + v8;
      *(_QWORD *)v9 = *(_QWORD *)(a2 + v8);
      *(_BYTE *)(v9 + 8) = *(_BYTE *)(a2 + v8 + 8);
      v11 = *(_OWORD *)(a2 + v8 + 32);
      *(_OWORD *)(v9 + 16) = *(_OWORD *)(a2 + v8 + 16);
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)(v9 + 48) = *(_OWORD *)(a2 + v8 + 48);
      *(_OWORD *)(v9 + 57) = *(_OWORD *)(a2 + v8 + 57);
      *(_BYTE *)(v9 + 73) = *(_BYTE *)(a2 + v8 + 73);
      *(_WORD *)(v9 + 74) = *(_WORD *)(a2 + v8 + 74);
      *(_BYTE *)(v9 + 76) = *(_BYTE *)(a2 + v8 + 76);
      *(_BYTE *)(v9 + 77) = *(_BYTE *)(a2 + v8 + 77);
      v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v13 = v12[9];
      v14 = (void *)(v9 + v13);
      v15 = (const void *)(v10 + v13);
      v16 = type metadata accessor for FloatingPointRoundingRule();
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
      swift_unknownObjectRetain();
      if (v18(v15, 1, v16))
        goto LABEL_8;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v31 = *(int *)(type metadata accessor for IntegerFormatStyle(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7)
                   + 36);
      v9 = a1 + v31;
      v10 = a2 + v31;
      *(_QWORD *)v9 = *(_QWORD *)(a2 + v31);
      *(_BYTE *)(v9 + 8) = *(_BYTE *)(a2 + v31 + 8);
      v32 = *(_OWORD *)(a2 + v31 + 32);
      *(_OWORD *)(v9 + 16) = *(_OWORD *)(a2 + v31 + 16);
      *(_OWORD *)(v9 + 32) = v32;
      *(_OWORD *)(v9 + 48) = *(_OWORD *)(a2 + v31 + 48);
      *(_OWORD *)(v9 + 57) = *(_OWORD *)(a2 + v31 + 57);
      *(_BYTE *)(v9 + 73) = *(_BYTE *)(a2 + v31 + 73);
      *(_WORD *)(v9 + 74) = *(_WORD *)(a2 + v31 + 74);
      *(_BYTE *)(v9 + 76) = *(_BYTE *)(a2 + v31 + 76);
      *(_BYTE *)(v9 + 77) = *(_BYTE *)(a2 + v31 + 77);
      v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v33 = v12[9];
      v14 = (void *)(v9 + v33);
      v15 = (const void *)(v10 + v33);
      v16 = type metadata accessor for FloatingPointRoundingRule();
      v17 = *(_QWORD *)(v16 - 8);
      v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
      swift_unknownObjectRetain();
      if (v34(v15, 1, v16))
      {
LABEL_8:
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
LABEL_13:
        v42 = v12[10];
        v43 = v9 + v42;
        v44 = v10 + v42;
        *(_QWORD *)v43 = *(_QWORD *)v44;
        *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
        v45 = v12[11];
        v40 = (_BYTE *)(v9 + v45);
        v41 = (_BYTE *)(v10 + v45);
        goto LABEL_14;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    goto LABEL_13;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v19;
  v20 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7)+ 40);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(a2 + v20 + 8);
  v23 = *(_OWORD *)(a2 + v20 + 32);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)(a2 + v20 + 16);
  *(_OWORD *)(v21 + 32) = v23;
  *(_OWORD *)(v21 + 48) = *(_OWORD *)(a2 + v20 + 48);
  *(_OWORD *)(v21 + 57) = *(_OWORD *)(a2 + v20 + 57);
  *(_BYTE *)(v21 + 73) = *(_BYTE *)(a2 + v20 + 73);
  *(_DWORD *)(v21 + 74) = *(_DWORD *)(a2 + v20 + 74);
  *(_BYTE *)(v21 + 78) = *(_BYTE *)(a2 + v20 + 78);
  v24 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  v25 = v24[9];
  __dst = (void *)(v21 + v25);
  v26 = (const void *)(v22 + v25);
  v27 = type metadata accessor for FloatingPointRoundingRule();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v29(v26, 1, v27))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(__dst, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
  }
  v36 = v24[10];
  v37 = v21 + v36;
  v38 = v22 + v36;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  *(_BYTE *)(v21 + v24[11]) = *(_BYTE *)(v22 + v24[11]);
  v39 = v24[12];
  v40 = (_BYTE *)(v21 + v39);
  v41 = (_BYTE *)(v22 + v39);
LABEL_14:
  *v40 = *v41;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for IntegerFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void *__dst;

  if (a1 != a2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v9 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7)+ 40);
      v10 = a1 + v9;
      v11 = a2 + v9;
      LOBYTE(v9) = *(_BYTE *)(a2 + v9 + 8);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_BYTE *)(v10 + 8) = v9;
      v12 = *(_OWORD *)(v11 + 57);
      v14 = *(_OWORD *)(v11 + 32);
      v13 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
      *(_OWORD *)(v10 + 32) = v14;
      *(_OWORD *)(v10 + 48) = v13;
      *(_OWORD *)(v10 + 57) = v12;
      *(_BYTE *)(v10 + 73) = *(_BYTE *)(v11 + 73);
      *(_DWORD *)(v10 + 74) = *(_DWORD *)(v11 + 74);
      *(_BYTE *)(v10 + 78) = *(_BYTE *)(v11 + 78);
      v15 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v16 = v15[9];
      __dst = (void *)(v10 + v16);
      v17 = (const void *)(v11 + v16);
      v18 = type metadata accessor for FloatingPointRoundingRule();
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v20(v17, 1, v18))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(__dst, v17, v18);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
      }
      v43 = v15[10];
      v44 = v10 + v43;
      v45 = (uint64_t *)(v11 + v43);
      v46 = *v45;
      *(_BYTE *)(v44 + 8) = *((_BYTE *)v45 + 8);
      *(_QWORD *)v44 = v46;
      *(_BYTE *)(v10 + v15[11]) = *(_BYTE *)(v11 + v15[11]);
      v47 = v15[12];
      v41 = (_BYTE *)(v10 + v47);
      v42 = (_BYTE *)(v11 + v47);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1)
        v8 = type metadata accessor for IntegerFormatStyle.Percent(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
      else
        v8 = type metadata accessor for IntegerFormatStyle(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
      v22 = *(int *)(v8 + 36);
      v23 = a1 + v22;
      v24 = a2 + v22;
      LOBYTE(v22) = *(_BYTE *)(a2 + v22 + 8);
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *(_BYTE *)(v23 + 8) = v22;
      v25 = *(_OWORD *)(v24 + 57);
      v27 = *(_OWORD *)(v24 + 32);
      v26 = *(_OWORD *)(v24 + 48);
      *(_OWORD *)(v23 + 16) = *(_OWORD *)(v24 + 16);
      *(_OWORD *)(v23 + 32) = v27;
      *(_OWORD *)(v23 + 48) = v26;
      *(_OWORD *)(v23 + 57) = v25;
      *(_BYTE *)(v23 + 73) = *(_BYTE *)(v24 + 73);
      LOWORD(v22) = *(_WORD *)(v24 + 74);
      *(_BYTE *)(v23 + 76) = *(_BYTE *)(v24 + 76);
      *(_WORD *)(v23 + 74) = v22;
      *(_BYTE *)(v23 + 77) = *(_BYTE *)(v24 + 77);
      v28 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v29 = v28[9];
      v30 = (void *)(v23 + v29);
      v31 = (const void *)(v24 + v29);
      v32 = type metadata accessor for FloatingPointRoundingRule();
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
      swift_unknownObjectRetain();
      if (v34(v31, 1, v32))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      v36 = v28[10];
      v37 = v23 + v36;
      v38 = (uint64_t *)(v24 + v36);
      v39 = *v38;
      *(_BYTE *)(v37 + 8) = *((_BYTE *)v38 + 8);
      *(_QWORD *)v37 = v39;
      v40 = v28[11];
      v41 = (_BYTE *)(v23 + v40);
      v42 = (_BYTE *)(v24 + v40);
    }
    *v41 = *v42;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for IntegerFormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7)+ 40);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    *(_QWORD *)v11 = *(_QWORD *)((char *)a2 + v10);
    v11[8] = *((_BYTE *)a2 + v10 + 8);
    v13 = *(_OWORD *)((char *)a2 + v10 + 32);
    *((_OWORD *)v11 + 1) = *(_OWORD *)((char *)a2 + v10 + 16);
    *((_OWORD *)v11 + 2) = v13;
    *((_OWORD *)v11 + 3) = *(_OWORD *)((char *)a2 + v10 + 48);
    *(_OWORD *)(v11 + 57) = *(_OWORD *)((char *)a2 + v10 + 57);
    v11[73] = *((_BYTE *)a2 + v10 + 73);
    *(_DWORD *)(v11 + 74) = *(_DWORD *)((char *)a2 + v10 + 74);
    v11[78] = *((_BYTE *)a2 + v10 + 78);
    v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    v15 = v14[9];
    v16 = &v11[v15];
    v17 = &v12[v15];
    v18 = type metadata accessor for FloatingPointRoundingRule();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v38 = v14[10];
    v39 = &v11[v38];
    v40 = &v12[v38];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v11[v14[11]] = v12[v14[11]];
    v41 = v14[12];
    v36 = &v11[v41];
    v37 = &v12[v41];
  }
  else
  {
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
      v8 = type metadata accessor for IntegerFormatStyle.Percent(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
    else
      v8 = type metadata accessor for IntegerFormatStyle(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
    v21 = *(int *)(v8 + 36);
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    *(_QWORD *)v22 = *(_QWORD *)((char *)a2 + v21);
    v22[8] = *((_BYTE *)a2 + v21 + 8);
    v24 = *(_OWORD *)((char *)a2 + v21 + 32);
    *((_OWORD *)v22 + 1) = *(_OWORD *)((char *)a2 + v21 + 16);
    *((_OWORD *)v22 + 2) = v24;
    *((_OWORD *)v22 + 3) = *(_OWORD *)((char *)a2 + v21 + 48);
    *(_OWORD *)(v22 + 57) = *(_OWORD *)((char *)a2 + v21 + 57);
    v22[73] = *((_BYTE *)a2 + v21 + 73);
    *((_WORD *)v22 + 37) = *(_WORD *)((char *)a2 + v21 + 74);
    v22[76] = *((_BYTE *)a2 + v21 + 76);
    v22[77] = *((_BYTE *)a2 + v21 + 77);
    v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    v26 = v25[9];
    v27 = &v22[v26];
    v28 = &v23[v26];
    v29 = type metadata accessor for FloatingPointRoundingRule();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = v25[10];
    v33 = &v22[v32];
    v34 = &v23[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = v25[11];
    v36 = &v22[v35];
    v37 = &v23[v35];
  }
  *v36 = *v37;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for IntegerFormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  if (a1 != a2)
  {
    (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      v10 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7)+ 40);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      *(_QWORD *)v11 = *(_QWORD *)((char *)a2 + v10);
      v11[8] = *((_BYTE *)a2 + v10 + 8);
      v13 = *(_OWORD *)((char *)a2 + v10 + 32);
      *((_OWORD *)v11 + 1) = *(_OWORD *)((char *)a2 + v10 + 16);
      *((_OWORD *)v11 + 2) = v13;
      *((_OWORD *)v11 + 3) = *(_OWORD *)((char *)a2 + v10 + 48);
      *(_OWORD *)(v11 + 57) = *(_OWORD *)((char *)a2 + v10 + 57);
      v11[73] = *((_BYTE *)a2 + v10 + 73);
      *(_DWORD *)(v11 + 74) = *(_DWORD *)((char *)a2 + v10 + 74);
      v11[78] = *((_BYTE *)a2 + v10 + 78);
      v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      v15 = v14[9];
      v16 = &v11[v15];
      v17 = &v12[v15];
      v18 = type metadata accessor for FloatingPointRoundingRule();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v38 = v14[10];
      v39 = &v11[v38];
      v40 = &v12[v38];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      v11[v14[11]] = v12[v14[11]];
      v41 = v14[12];
      v36 = &v11[v41];
      v37 = &v12[v41];
    }
    else
    {
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
        v8 = type metadata accessor for IntegerFormatStyle.Percent(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
      else
        v8 = type metadata accessor for IntegerFormatStyle(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
      v21 = *(int *)(v8 + 36);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      *(_QWORD *)v22 = *(_QWORD *)((char *)a2 + v21);
      v22[8] = *((_BYTE *)a2 + v21 + 8);
      v24 = *(_OWORD *)((char *)a2 + v21 + 32);
      *((_OWORD *)v22 + 1) = *(_OWORD *)((char *)a2 + v21 + 16);
      *((_OWORD *)v22 + 2) = v24;
      *((_OWORD *)v22 + 3) = *(_OWORD *)((char *)a2 + v21 + 48);
      *(_OWORD *)(v22 + 57) = *(_OWORD *)((char *)a2 + v21 + 57);
      v22[73] = *((_BYTE *)a2 + v21 + 73);
      *((_WORD *)v22 + 37) = *(_WORD *)((char *)a2 + v21 + 74);
      v22[76] = *((_BYTE *)a2 + v21 + 76);
      v22[77] = *((_BYTE *)a2 + v21 + 77);
      v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      v26 = v25[9];
      v27 = &v22[v26];
      v28 = &v23[v26];
      v29 = type metadata accessor for FloatingPointRoundingRule();
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      v32 = v25[10];
      v33 = &v22[v32];
      v34 = &v23[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      v33[8] = v34[8];
      v35 = v25[11];
      v36 = &v22[v35];
      v37 = &v23[v35];
    }
    *v36 = *v37;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Percent.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Currency.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Currency.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Currency.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Percent.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Percent.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style.CurrencyCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed.Style.CurrencyCodingKeys);
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style.PercentCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed.Style.PercentCodingKeys);
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style.IntegerCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed.Style.IntegerCodingKeys);
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerFormatStyle.Attributed.Style.CodingKeys);
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Currency.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181CBD268 + 4 * byte_182100E5F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181CBD29C + 4 * byte_182100E5A[v4]))();
}

uint64_t sub_181CBD29C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CBD2A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181CBD2ACLL);
  return result;
}

uint64_t sub_181CBD2B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181CBD2C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181CBD2C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CBD2CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Attributed.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181CBD318 + 4 * byte_182100E64[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181CBD338 + 4 * byte_182100E69[v4]))();
}

_BYTE *sub_181CBD318(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181CBD338(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181CBD340(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181CBD348(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181CBD350(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181CBD358(_DWORD *result)
{
  *result = 0;
  return result;
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

void base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t FormatStyle.locale(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t dispatch thunk of FormatStyle.format(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of FormatStyle.locale(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance URL.FormatStyle@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v2 = v1[9];
  v3 = v1[11];
  v29 = v1[10];
  v30 = v3;
  v4 = v1[11];
  v31 = v1[12];
  v5 = v1[5];
  v6 = v1[7];
  v25 = v1[6];
  v7 = v25;
  v26 = v6;
  v8 = v1[7];
  v9 = v1[9];
  v27 = v1[8];
  v10 = v27;
  v28 = v9;
  v11 = v1[1];
  v12 = v1[3];
  v21 = v1[2];
  v13 = v21;
  v22 = v12;
  v14 = v1[3];
  v15 = v1[5];
  v23 = v1[4];
  v16 = v23;
  v24 = v15;
  v17 = v1[1];
  v20[0] = *v1;
  v18 = v20[0];
  v20[1] = v17;
  a1[10] = v29;
  a1[11] = v4;
  a1[12] = v1[12];
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v2;
  a1[2] = v13;
  a1[3] = v14;
  a1[4] = v16;
  a1[5] = v5;
  *a1 = v18;
  a1[1] = v11;
  return outlined retain of URL.FormatStyle((uint64_t)v20);
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.ISO8601FormatStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 1);
  v3 = *(_BYTE *)(v1 + 2);
  v4 = *(_BYTE *)(v1 + 3);
  v5 = *(_BYTE *)(v1 + 4);
  v7 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_BYTE *)(a1 + 4) = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  swift_retain();
  return swift_unknownObjectRetain();
}

uint64_t URLParseInfo.port.getter()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  char v16;

  if ((*(_BYTE *)(v0 + 144) & 1) != 0)
    return 0;
  v2 = String.subscript.getter();
  v6 = v5;
  if (!((v2 ^ v3) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v7 = v2;
  v8 = v3;
  v9 = v4;
  v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v2, v3, v4, v5, 10);
  if ((v11 & 0x100) != 0)
  {
    v12 = specialized _parseInteger<A, B>(ascii:radix:)(v7, v8, v9, v6, 10);
    v16 = v15;
    swift_bridgeObjectRelease();
    v14 = v16 & 1;
  }
  else
  {
    v12 = v10;
    v13 = v11;
    swift_bridgeObjectRelease();
    v14 = v13 & 1;
  }
  if (v14)
    return 0;
  else
    return v12;
}

uint64_t URLParseInfo.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for URLParseInfo()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of static UIDNAHook.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of static UIDNAHook.decode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t storeEnumTagSinglePayload for URLParserKind(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181CBD6F4 + 4 * asc_182101E20[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181CBD714 + 4 * byte_182101E25[v4]))();
}

_BYTE *sub_181CBD6F4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181CBD714(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181CBD71C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181CBD724(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181CBD72C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181CBD734(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for URLParserKind()
{
  return &type metadata for URLParserKind;
}

unint64_t lazy protocol witness table accessor for type URLParserKind and conformance URLParserKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type URLParserKind and conformance URLParserKind;
  if (!lazy protocol witness table cache variable for type URLParserKind and conformance URLParserKind)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for URLParserKind, &type metadata for URLParserKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLParserKind and conformance URLParserKind);
  }
  return result;
}

uint64_t specialized static RFC3986Parser.percentEncodeHost<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  char v53;
  void *v54;
  unsigned __int16 *v55;
  id v56;
  void *v57;
  id v58;
  char v59;
  char v60;
  unint64_t v61;
  void *v62;
  unsigned __int16 *v63;
  id v64;
  void *v65;
  id v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  Swift::String v76;
  Swift::String v77;
  BOOL v78;
  uint64_t result;
  BOOL v80;
  unsigned __int16 *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char v88;
  void *v89;
  unsigned __int16 *v90;
  id v91;
  void *v92;
  id v93;
  char v94;
  _BYTE v95[16];
  unint64_t *v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned __int16 *v102;
  unsigned __int16 *v103;
  unsigned __int16 *v104;
  unint64_t v105;
  unsigned __int16 *v106;
  unsigned __int16 *v107;
  unint64_t v108;

  if (!a4)
    return 0;
  v6 = a1 >> 14;
  v7 = a2 >> 14;
  if (a1 >> 14 == a2 >> 14)
    return 0;
  swift_bridgeObjectRetain();
  v11 = Substring.UTF8View.subscript.getter();
  if (v11 != 91)
    goto LABEL_15;
  if (__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1))
  {
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  Substring.UTF8View.index(_:offsetBy:)();
  v11 = Substring.UTF8View.subscript.getter();
  if (v11 != 93)
  {
LABEL_15:
    v105 = a1;
    v106 = (unsigned __int16 *)a2;
    v107 = (unsigned __int16 *)a3;
    v108 = a4;
    MEMORY[0x1E0C80A78](v11);
    v96 = &v105;
    v97 = 4;
    swift_bridgeObjectRetain();
    v8 = (uint64_t)_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v95, a1, a2, a3, a4);
    v29 = v28;
    swift_bridgeObjectRelease();
    if (!v29)
    {
      v30 = v105;
      v31 = (unint64_t)v106;
      v32 = (unint64_t)v107;
      v33 = v108;
      swift_bridgeObjectRetain();
      v8 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v30, v31, v32, v33, 4u);
      swift_bridgeObjectRelease();
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() != 91)
  {
LABEL_68:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_69;
  }
  if (__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1))
    goto LABEL_57;
  Substring.UTF8View.index(_:offsetBy:)();
  v12 = Substring.UTF8View.subscript.getter();
  swift_bridgeObjectRelease();
  if (v12 != 93)
  {
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  swift_bridgeObjectRetain();
  v13 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2, a3, a4);
  if ((v14 & 1) == 0)
  {
    v15 = v13;
    if (!__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1))
    {
      v104 = (unsigned __int16 *)(v15 >> 14);
      if (v15 >> 14 <= (unint64_t)Substring.UTF8View.index(_:offsetBy:)() >> 14)
      {
        v16 = Substring.subscript.getter();
        v18 = v17;
        v105 = v16;
        v106 = v19;
        v107 = v20;
        v108 = v17;
        MEMORY[0x1E0C80A78](v16);
        v96 = &v105;
        v97 = 8;
        v24 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v95, v22, v23, v21, v18);
        if (v25)
        {
          v26 = (uint64_t)v24;
          v27 = v25;
        }
        else
        {
          v68 = v105;
          v69 = (unint64_t)v106;
          v70 = v108;
          v103 = v107;
          swift_bridgeObjectRetain();
          v26 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v68, v69, (unint64_t)v103, v70, 8u);
          v27 = v71;
          swift_bridgeObjectRelease();
        }
        if ((unint64_t)v104 >= v6)
        {
          v72 = Substring.subscript.getter();
          v73 = MEMORY[0x186DA4634](v72);
          v75 = v74;
          swift_bridgeObjectRelease();
          v105 = v73;
          v106 = v75;
          v76._countAndFlagsBits = v26;
          v76._object = v27;
          String.append(_:)(v76);
          swift_bridgeObjectRelease();
          v77._countAndFlagsBits = 93;
          v77._object = (void *)0xE100000000000000;
          String.append(_:)(v77);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return v105;
        }
        goto LABEL_64;
      }
      goto LABEL_61;
    }
    goto LABEL_59;
  }
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() == 91)
  {
    if (__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1))
    {
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    Substring.UTF8View.index(_:offsetBy:)();
    v34 = Substring.UTF8View.subscript.getter();
    swift_bridgeObjectRelease();
    if (v34 != 93)
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    swift_bridgeObjectRetain();
    v35 = Substring.UTF8View.index(after:)();
    if (__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1))
    {
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    if ((unint64_t)Substring.UTF8View.index(_:offsetBy:)() >> 14 < v35 >> 14)
    {
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    v36 = Substring.subscript.getter();
    v38 = v37;
    v40 = v39;
    v42 = v41;
    v43 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2, a3, a4);
    if ((v44 & 1) != 0)
    {
      v60 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v36, v38, v40, v42, 2u, 0);
      if (v60 == 2)
      {
        v105 = v36;
        v106 = (unsigned __int16 *)v38;
        v107 = (unsigned __int16 *)v40;
        v108 = v42;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        StringProtocol._ephemeralString.getter();
        v103 = (unsigned __int16 *)v38;
        v104 = (unsigned __int16 *)v40;
        v61 = v42;
        v62 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v63 = (unsigned __int16 *)objc_msgSend(v62, sel__fastCharacterContents);
        v64 = v62;
        if (!v63)
        {
          swift_bridgeObjectRetain();
          v78 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, (unint64_t)v103, (unint64_t)v104, v61, 2u, 0);
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
        v105 = v36;
        v106 = v103;
        v107 = v104;
        v108 = v61;
        StringProtocol._ephemeralString.getter();
        v65 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v66 = objc_msgSend(v65, sel_length);
        swift_unknownObjectRelease();
        v60 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v63, (uint64_t)v66, 2u, 0);
      }
      v67 = v60;
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    v45 = v43;
    v104 = (unsigned __int16 *)v40;
    if (v7 == (unint64_t)Substring.UTF8View.index(after:)() >> 14)
      goto LABEL_33;
    if (Substring.UTF8View.subscript.getter() != 50)
      goto LABEL_33;
    v46 = Substring.UTF8View.index(after:)();
    if (v7 == v46 >> 14)
      goto LABEL_33;
    v47 = v46;
    if (Substring.UTF8View.subscript.getter() != 53)
      goto LABEL_33;
    v100 = v47;
    if (v45 >> 14 < v36 >> 14)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v48 = Substring.subscript.getter();
    v50 = v49;
    v101 = v48;
    v102 = v51;
    v103 = v52;
    v53 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v48, (unint64_t)v51, (unint64_t)v52, v49, 2u, 0);
    v99 = 0;
    if (v53 == 2)
    {
      v105 = v101;
      v106 = v102;
      v107 = v103;
      v108 = v50;
      v98 = v50;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      v54 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v55 = (unsigned __int16 *)objc_msgSend(v54, sel__fastCharacterContents);
      v56 = v54;
      if (!v55)
      {
        swift_bridgeObjectRetain();
        v80 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v101, (unint64_t)v102, (unint64_t)v103, v98, 2u, 0);
        swift_bridgeObjectRelease_n();
        if (!v80)
          goto LABEL_33;
LABEL_49:
        swift_bridgeObjectRetain();
        if (v38 >> 14 < (unint64_t)Substring.index(after:)() >> 14)
        {
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        v81 = (unsigned __int16 *)v42;
        v82 = Substring.subscript.getter();
        v84 = v83;
        v86 = v85;
        v104 = (unsigned __int16 *)v87;
        v88 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v82, v83, v85, v87, 8u, 1);
        if (v88 != 2)
        {
          v94 = v88;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          if ((v94 & 1) != 0)
            goto LABEL_39;
          goto LABEL_45;
        }
        v103 = v81;
        v105 = v82;
        v106 = (unsigned __int16 *)v84;
        v107 = (unsigned __int16 *)v86;
        v108 = (unint64_t)v104;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        StringProtocol._ephemeralString.getter();
        v89 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v90 = (unsigned __int16 *)objc_msgSend(v89, sel__fastCharacterContents);
        v91 = v89;
        v102 = v90;
        if (v90)
        {
          v105 = v82;
          v106 = (unsigned __int16 *)v84;
          v107 = (unsigned __int16 *)v86;
          v108 = (unint64_t)v104;
          StringProtocol._ephemeralString.getter();
          v92 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v93 = objc_msgSend(v92, sel_length);
          swift_unknownObjectRelease();
          v67 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v102, (uint64_t)v93, 8u, 1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_38:
          swift_bridgeObjectRelease();
          if (v67)
          {
LABEL_39:
            v105 = a1;
            v106 = (unsigned __int16 *)a2;
            v107 = (unsigned __int16 *)a3;
            v108 = a4;
            lazy protocol witness table accessor for type Substring and conformance Substring();
            v8 = String.init<A>(_:)();
LABEL_17:
            swift_bridgeObjectRelease();
            return v8;
          }
LABEL_45:
          swift_bridgeObjectRelease_n();
          return 0;
        }
        swift_bridgeObjectRetain();
        v78 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v82, v84, v86, (unint64_t)v104, 8u, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_44:
        swift_bridgeObjectRelease_n();
        if (v78)
          goto LABEL_39;
        goto LABEL_45;
      }
      v105 = v101;
      v106 = v102;
      v107 = v103;
      v108 = v98;
      v103 = v55;
      StringProtocol._ephemeralString.getter();
      v57 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v58 = objc_msgSend(v57, sel_length);
      swift_unknownObjectRelease();
      v53 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v103, (uint64_t)v58, 2u, 0);
    }
    v59 = v53;
    swift_bridgeObjectRelease();
    if ((v59 & 1) == 0)
    {
LABEL_33:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return 0;
    }
    goto LABEL_49;
  }
LABEL_69:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t one-time initialization function for schemesToPercentEncodeHost()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v0 = 0;
  v5 = Set.init(minimumCapacity:)();
  do
  {
    v1 = *(_QWORD *)((char *)&outlined read-only object #0 of one-time initialization function for schemesToPercentEncodeHost
                   + v0
                   + 32);
    v2 = *(_QWORD *)((char *)&outlined read-only object #0 of one-time initialization function for schemesToPercentEncodeHost
                   + v0
                   + 40);
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v4, v1, v2);
    swift_bridgeObjectRelease();
    v0 += 16;
  }
  while (v0 != 208);
  result = swift_arrayDestroy();
  static RFC3986Parser.schemesToPercentEncodeHost = v5;
  return result;
}

unint64_t convert #1 (_:) in static RFC3986Parser.parse(urlString:)(unint64_t result, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    return 0;
  v6 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(a4 + 24);
  if ((v7 & 0x1000000000000000) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v8 = v6 & 0xFFFFFFFFFFFFLL;
      if (v8 >= result)
      {
        v9 = (result << 16) | 4;
        if ((v7 & 0x1000000000000000) == 0)
          goto LABEL_8;
LABEL_18:
        v11 = MEMORY[0x186DA485C](15, a2, v6);
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  result = MEMORY[0x186DA485C](15, result, v6);
  v9 = result;
  v6 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(a4 + 24);
  if ((v7 & 0x1000000000000000) != 0)
    goto LABEL_18;
LABEL_8:
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v10 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v10 = v6 & 0xFFFFFFFFFFFFLL;
  if (v10 >= a2)
  {
    v11 = (a2 << 16) | 4;
LABEL_13:
    if (v11 >> 14 >= v9 >> 14)
      return v9;
    __break(1u);
    return 0;
  }
LABEL_22:
  __break(1u);
  return result;
}

unint64_t UInt8.allowedURLComponents.getter(char a1)
{
  char v1;
  char v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;

  v1 = a1 - 33;
  if ((a1 - 33) < 0xFu && ((0x7FE9u >> v1) & 1) != 0)
    return byte_182101F66[v1];
  v2 = a1 - 58;
  v3 = (a1 - 58);
  if (v3 > 0xF5)
    return 255;
  if (v3 < 7 && ((0x6Bu >> v2) & 1) != 0)
    return 0xF0C0D276D2F6D2uLL >> (8 * v2);
  if (a1 == 126)
    v4 = -2;
  else
    v4 = 0;
  if ((a1 - 123) <= 0xE5u)
    v5 = v4;
  else
    v5 = 255;
  if (a1 == 95)
    v6 = 254;
  else
    v6 = v5;
  if ((a1 - 91) <= 0xE5u)
    return v6;
  else
    return 255;
}

uint64_t specialized static RFC3986Parser.parseAuthority(_:into:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v7 = a2;
  v8 = a2;
  if (a2 == result)
    goto LABEL_25;
  v9 = result;
  v10 = a2 - 1;
  if (*(_BYTE *)(a3 + a2 - 1) != 64)
  {
    if (v10 == result)
    {
LABEL_7:
      v8 = result;
      if (result != a2)
        goto LABEL_17;
LABEL_24:
      if (v8 > v7)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
LABEL_25:
      result = specialized Collection<>.firstIndex(of:)(0x3Au, v8, v7, a3);
      if ((v17 & 1) == 0)
      {
        v16 = result + 1;
        if (result + 1 == v7)
        {
          v7 = result;
          goto LABEL_30;
        }
        if (result + 1 > v7)
        {
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
LABEL_29:
        *(_QWORD *)(a5 + 96) = v16;
        *(_QWORD *)(a5 + 104) = v7;
        v7 = result;
        *(_BYTE *)(a5 + 112) = 0;
      }
LABEL_30:
      if (v7 >= v8)
      {
        *(_QWORD *)(a5 + 72) = v8;
        *(_QWORD *)(a5 + 80) = v7;
        *(_BYTE *)(a5 + 88) = 0;
        *(_BYTE *)(a5 + 186) = specialized Sequence<>.contains(_:)(0x25u, v8, v7, a3);
        return 1;
      }
      __break(1u);
      goto LABEL_34;
    }
    v11 = a2;
    while (*(_BYTE *)(a3 - 2 + v11) != 64)
    {
      if (result + 1 == --v11)
        goto LABEL_7;
    }
    v10 = v11 - 2;
  }
  if (v10 < result)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  result = specialized Collection<>.firstIndex(of:)(0x3Au, result, v10, a3);
  if ((v12 & 1) != 0)
  {
    *(_QWORD *)(a5 + 24) = v9;
    *(_QWORD *)(a5 + 32) = v10;
    v13 = (_BYTE *)(a5 + 40);
  }
  else
  {
    if (result < v9)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    *(_QWORD *)(a5 + 24) = v9;
    *(_QWORD *)(a5 + 32) = result;
    *(_BYTE *)(a5 + 40) = 0;
    if (v10 < result + 1)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    *(_QWORD *)(a5 + 48) = result + 1;
    *(_QWORD *)(a5 + 56) = v10;
    v13 = (_BYTE *)(a5 + 64);
  }
  *v13 = 0;
  v8 = v10 + 1;
  if (v8 == v7)
    goto LABEL_24;
LABEL_17:
  if (*(_BYTE *)(a3 + v8) != 91)
    goto LABEL_24;
  if (v8 <= v7)
  {
    result = specialized Collection<>.firstIndex(of:)(0x5Du, v8, v7, a3);
    if ((v14 & 1) == 0)
    {
      v15 = result;
      *(_BYTE *)(a5 + 185) = 1;
      if (++result == v7)
        goto LABEL_30;
      if (*(_BYTE *)(a3 + result) != 58)
        return 0;
      v16 = v15 + 2;
      if (v16 <= v7)
        goto LABEL_29;
      __break(1u);
    }
    goto LABEL_24;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t specialized static RFC3986Parser.parse(urlString:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  unint64_t v34;
  char *v35;
  int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int64_t v42;
  unsigned int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  char v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  char v62;
  int v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  char *v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  unsigned __int8 *v107;
  int v108;
  unint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  char v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  char v121;
  char v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  __int128 v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  __int128 v136;
  unint64_t v137;
  char v138;
  char v139;
  unint64_t v140;
  unint64_t v141;
  char v142;
  __int128 v143;
  char v144;
  __int128 v145;
  char v146;
  __int128 v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  char v151;
  int64_t v152;
  uint64_t v153;
  char v154;
  __int128 v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  char v159;
  __int16 v160;
  char v161;
  char v162;
  char v163;
  char v164;
  char v165;
  char v166;
  char v167;
  char v168;
  unint64_t v169;
  uint64_t v170;
  unsigned __int8 v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  __int128 v175;
  char v176;
  char *v177;
  uint64_t v178;
  char v179;
  unint64_t v180;
  unint64_t v181;
  char v182;
  _QWORD *v183;
  _QWORD *v184;
  char v185;
  __int128 v186;
  char v187;
  unint64_t v188;
  unint64_t v189;
  char v190;
  __int16 v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char v197;
  __int128 v198;
  char v199;
  __int128 v200;
  char v201;
  __int128 v202;
  char v203;
  unint64_t v204;
  unint64_t v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  __int128 v210;
  char v211;
  unint64_t v212;
  unint64_t v213;
  char v214;
  __int16 v215;
  char v216;
  char v217;
  char v218;
  char v219;
  char v220;
  char v221;
  char v222;
  char v223;
  char v224;

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  swift_bridgeObjectRetain();
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_75;
  if ((a2 & 0x2000000000000000) != 0)
    goto LABEL_76;
LABEL_3:
  v11 = &v195;
  if ((a1 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = a1 & 0xFFFFFFFFFFFFLL;
    goto LABEL_5;
  }
  while (1)
  {
    v103 = _StringObject.sharedUTF8.getter();
    v11 = &v195;
    v12 = (unsigned __int8 *)v103;
    v13 = v104;
LABEL_5:
    v14 = 1;
    LOBYTE(v169) = 1;
    LOBYTE(v140) = 1;
    LOBYTE(v193) = 1;
    v224 = 1;
    v223 = 1;
    v222 = 1;
    v221 = 1;
    v220 = 1;
    v196 = 0;
    v195 = 0;
    v197 = 1;
    v198 = 0uLL;
    v199 = 1;
    v200 = 0uLL;
    v201 = 1;
    v202 = 0uLL;
    v203 = 1;
    v205 = 0;
    v204 = 0;
    v206 = 1;
    v208 = 0;
    v207 = 0;
    v209 = 1;
    v210 = 0uLL;
    v211 = 1;
    v213 = 0;
    v212 = 0;
    v214 = 1;
    v215 = 0;
    v216 = 0;
    if (!v13)
    {
      v128 = 0;
      v138 = 0;
      v139 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v20 = 0;
      v24 = 0;
      v19 = 0;
      v4 = 0;
      v134 = 0;
      v135 = 0;
      v219 = 1;
      v218 = 1;
      v217 = 1;
      v168 = 1;
      v167 = 1;
      v166 = 0;
      v25 = 0uLL;
      v136 = 0u;
      v165 = 1;
      v26 = 1;
      v18 = 1;
      v164 = 1;
      v27 = 1;
      v28 = 1;
      v29 = 1;
      v30 = 1;
LABEL_15:
      v130 = v25;
      v132 = v25;
      v129 = v25;
      goto LABEL_129;
    }
    v15 = *v12;
    if (v15 - 35 <= 0x3A
      && (v16 = 0x500000030801001, ((1 << (v15 - 35)) & 0x500000030801001) != 0))
    {
LABEL_8:
      v17 = 0;
    }
    else
    {
      v34 = 1;
      v16 = 0x500000030001001;
      v17 = 1;
      while (1)
      {
        if (v13 == v17)
        {
          v17 = v13;
          goto LABEL_9;
        }
        v40 = v12[v17++];
        v9 = (v40 - 35);
        if (v9 <= 0x3A)
        {
          if (((1 << v9) & 0x500000030001001) != 0)
            goto LABEL_8;
          if (v9 == 23)
            break;
        }
      }
      v41 = v17 - 1;
      if (v17 - 1 < 0)
        goto LABEL_153;
      v195 = 0;
      v196 = v17 - 1;
      v197 = 0;
      if (v13 == v17)
      {
        if (v15 >= 0x41)
        {
          v14 = 1;
          if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(0, v41, (uint64_t)v12, 1u, 0))
          {
            v23 = v41;
            v128 = 0;
            v138 = 0;
            v139 = 0;
            v21 = 0;
            v30 = 0;
            v22 = 0;
            v20 = 0;
            v24 = 0;
            v134 = 0;
            v135 = 0;
            v219 = 0;
            v218 = 1;
            v217 = 1;
            v168 = 1;
            v167 = 1;
            v25 = 0uLL;
            v136 = 0u;
            v166 = 0;
            v26 = 1;
            v18 = 1;
            v165 = 1;
            v27 = 1;
            v28 = 1;
            v164 = 1;
            v29 = 1;
            v19 = v13;
            v4 = v13;
            goto LABEL_15;
          }
        }
        goto LABEL_141;
      }
      if (v15 < 0x41)
        goto LABEL_141;
      v48 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(0, v17 - 1, (uint64_t)v12, 1u, 0);
      v11 = &v195;
      if (!v48)
        goto LABEL_141;
    }
LABEL_9:
    v18 = 1;
    if (v17 == v13)
      v19 = 0;
    else
      v19 = v17;
    if (v19 + 1 == v13)
    {
      v20 = 0;
      v126 = 0;
      goto LABEL_25;
    }
    v16 = v12[v19];
    if ((_DWORD)v16 != 47 || v12[v19 + 1] != 47)
    {
      v126 = 0;
      v20 = 0;
      goto LABEL_25;
    }
    v31 = v19 + 2;
    v16 = v13;
    if (v19 + 2 == v13)
      goto LABEL_23;
    v32 = v12[v31];
    v33 = v32 > 0x3F || ((1 << v32) & 0x8000800800000000) == 0;
    v16 = v19 + 2;
    if (!v33)
      goto LABEL_23;
    v42 = v19 + 3;
    while (v13 != v42)
    {
      v43 = v12[v42++];
      v44 = v43 > 0x3F;
      v45 = (1 << v43) & 0x8000800800000000;
      if (!v44 && v45 != 0)
      {
        v47 = v42 - 1;
        goto LABEL_73;
      }
    }
    v47 = v13;
LABEL_73:
    if (v47 >= v31)
    {
      v16 = v19 + 2;
      if (v31 == v47)
      {
LABEL_23:
        v126 = 0;
        v20 = 0;
        *(_QWORD *)&v202 = v19 + 2;
        *((_QWORD *)&v202 + 1) = v16;
        v19 = v16;
        v203 = 0;
        goto LABEL_25;
      }
      v19 = v47;
      if ((specialized static RFC3986Parser.parseAuthority(_:into:)(v31, v47, (uint64_t)v12, v13, (uint64_t)&v195) & 1) == 0)
        goto LABEL_141;
      v20 = v204;
      v126 = v205;
      if ((v206 & 1) != 0)
      {
        v18 = 1;
        v11 = &v195;
        goto LABEL_25;
      }
      if (v204 == v205)
      {
        v18 = 0;
        v126 = v204;
        v11 = &v195;
        goto LABEL_25;
      }
      v16 = v196;
      if (v12[v204] - 58 < 0xFFFFFFF6)
      {
LABEL_188:
        if (v196 - v195 == 11)
          v106 = v197;
        else
          v106 = 1;
        if ((v106 & 1) == 0
          && (((0x3FFE000000000uLL >> ((*v12 - 1) >> 1)) & 0x20) + *v12) == 97
          && (((0x3FFE000000000uLL >> ((v12[1] - 1) >> 1)) & 0x20) + v12[1]) == 100
          && (((0x3FFE000000000uLL >> ((v12[2] - 1) >> 1)) & 0x20) + v12[2]) == 100
          && (((0x3FFE000000000uLL >> ((v12[3] - 1) >> 1)) & 0x20) + v12[3]) == 114
          && (((0x3FFE000000000uLL >> ((v12[4] - 1) >> 1)) & 0x20) + v12[4]) == 101
          && (((0x3FFE000000000uLL >> ((v12[5] - 1) >> 1)) & 0x20) + v12[5]) == 115
          && (((0x3FFE000000000uLL >> ((v12[6] - 1) >> 1)) & 0x20) + v12[6]) == 115
          && (((0x3FFE000000000uLL >> ((v12[7] - 1) >> 1)) & 0x20) + v12[7]) == 98
          && (((0x3FFE000000000uLL >> ((v12[8] - 1) >> 1)) & 0x20) + v12[8]) == 111
          && (((0x3FFE000000000uLL >> ((v12[9] - 1) >> 1)) & 0x20) + v12[9]) == 111)
        {
          v16 = 0x3FFE000000000;
          if ((((0x3FFE000000000uLL >> ((v12[10] - 1) >> 1)) & 0x20) + v12[10]) == 107)
            goto LABEL_212;
        }
        goto LABEL_141;
      }
      v109 = v204 + 1;
      if (v204 + 1 != v205)
      {
        while (v12[v109] - 58 >= 0xFFFFFFF6)
        {
          if (v205 == ++v109)
            goto LABEL_212;
        }
        goto LABEL_188;
      }
LABEL_212:
      v18 = 0;
      v11 = &v195;
LABEL_25:
      if (v19 == v13)
      {
        LOBYTE(v2) = 0;
        v207 = v13;
        v208 = v13;
        v4 = v13;
LABEL_27:
        v128 = v2;
        v21 = 0;
        v22 = v195;
        v23 = v196;
        v30 = v197;
        v136 = v198;
        v29 = v199;
        v28 = v201;
        v130 = v202;
        v132 = v200;
        v27 = v203;
        v129 = v210;
        v26 = v211;
        v135 = v212;
        v134 = v213;
        v14 = v214;
        v139 = v215;
        v138 = HIBYTE(v215);
        v219 = v197;
        v218 = v199;
        v217 = v201;
        v168 = v203;
        v167 = v18;
        v166 = 0;
        v165 = v211;
        v164 = v214;
        v24 = v126;
LABEL_129:
        v121 = v14 & 1;
        v116 = v26 & 1;
        v65 = v21 & 1;
        v66 = v18 & 1;
        v67 = v27 & 1;
        v68 = v28 & 1;
        v69 = v29 & 1;
        v125 = *(_QWORD *)(v7 + 24);
        v127 = *(_QWORD *)(v7 + 16);
        v70 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v22, v23, v30 & 1, v7);
        v123 = v71;
        v124 = v70;
        v122 = v72;
        v137 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v136, *((unint64_t *)&v136 + 1), v69, v7);
        v120 = v73;
        v119 = v74;
        v133 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v132, *((unint64_t *)&v132 + 1), v68, v7);
        v118 = v75;
        v117 = v76;
        v131 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v130, *((unint64_t *)&v130 + 1), v67, v7);
        v115 = v77;
        v114 = v78;
        v79 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v20, v24, v66, v7);
        v112 = v80;
        v113 = v79;
        v111 = v81;
        v82 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v19, v4, v65, v7);
        v84 = v83;
        v110 = v85;
        v86 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v129, *((unint64_t *)&v129 + 1), v116, v7);
        v88 = v87;
        v90 = v89;
        v91 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v135, v134, v121, v7);
        v93 = v92;
        v95 = v94;
        type metadata accessor for URLParseInfo();
        v96 = swift_allocObject();
        *(_QWORD *)(v96 + 16) = v127;
        *(_QWORD *)(v96 + 24) = v125;
        *(_QWORD *)(v96 + 32) = v124;
        *(_QWORD *)(v96 + 40) = v123;
        *(_BYTE *)(v96 + 48) = v122 & 1;
        *(_QWORD *)(v96 + 56) = v137;
        *(_QWORD *)(v96 + 64) = v120;
        *(_BYTE *)(v96 + 72) = v119 & 1;
        *(_QWORD *)(v96 + 80) = v133;
        *(_QWORD *)(v96 + 88) = v118;
        *(_BYTE *)(v96 + 96) = v117 & 1;
        *(_QWORD *)(v96 + 104) = v131;
        *(_QWORD *)(v96 + 112) = v115;
        *(_BYTE *)(v96 + 120) = v114 & 1;
        *(_QWORD *)(v96 + 128) = v113;
        *(_QWORD *)(v96 + 136) = v112;
        *(_BYTE *)(v96 + 144) = v111 & 1;
        *(_QWORD *)(v96 + 152) = v82;
        *(_QWORD *)(v96 + 160) = v84;
        *(_BYTE *)(v96 + 168) = v110 & 1;
        *(_QWORD *)(v96 + 176) = v86;
        *(_QWORD *)(v96 + 184) = v88;
        *(_BYTE *)(v96 + 192) = v90 & 1;
        *(_QWORD *)(v96 + 200) = v91;
        *(_QWORD *)(v96 + 208) = v93;
        *(_BYTE *)(v96 + 216) = v95 & 1;
        *(_BYTE *)(v96 + 217) = v139;
        *(_BYTE *)(v96 + 218) = v138;
        *(_BYTE *)(v96 + 219) = v128 & 1;
        swift_bridgeObjectRetain();
        swift_release();
        return v96;
      }
      v9 = v12[v19];
      if ((_DWORD)v9 == 35 || (_DWORD)v9 == 63)
      {
        v2 = 0;
        v207 = v19;
        v208 = v19;
        v209 = 0;
        v4 = v19;
        v216 = 0;
      }
      else
      {
        LODWORD(v10) = 0;
        v39 = v13 - 1;
        v4 = v19;
        while (1)
        {
          v16 = v4;
          v10 = (_QWORD *)(((_DWORD)v9 == 37) | v10);
          if (v39 == v4)
            break;
          LODWORD(v9) = v12[++v4];
          if ((_DWORD)v9 == 35 || (_DWORD)v9 == 63)
            goto LABEL_56;
        }
        v4 = v13;
LABEL_56:
        if (v4 < v19)
        {
          __break(1u);
          goto LABEL_58;
        }
        v207 = v19;
        v208 = v4;
        v209 = 0;
        v2 = (unint64_t)v10;
        v9 = v10 & 1;
        v216 = v10 & 1;
        if (v39 == v16)
          goto LABEL_27;
      }
      v3 = &v195;
      v34 = (unint64_t)&v213;
      v35 = &v214;
      v36 = v12[v4];
      if (v36 == 35)
      {
        if (v13 >= v4 + 1)
        {
          v212 = v4 + 1;
          goto LABEL_59;
        }
      }
      else
      {
        if (v36 != 63)
        {
LABEL_60:
          v22 = v195;
          v23 = v196;
          v30 = v197;
          v136 = v198;
          v29 = v199;
          v28 = v201;
          v130 = v202;
          v132 = v200;
          v27 = v203;
          v18 = v206;
          v21 = v209;
          v129 = v210;
          v26 = v211;
          v135 = v212;
          v134 = v213;
          v139 = v215 & 1;
          v138 = HIBYTE(v215) & 1;
          v14 = v214;
          v24 = v126;
          v128 = v2;
          goto LABEL_129;
        }
        v17 = v4 + 1;
        if (v13 >= v4 + 1)
        {
          v37 = specialized Collection<>.firstIndex(of:)(0x23u, v4 + 1, v13, (uint64_t)v12);
          if ((v38 & 1) == 0)
          {
            if (v37 >= v17)
            {
              *(_QWORD *)&v210 = v4 + 1;
              *((_QWORD *)&v210 + 1) = v37;
              v211 = 0;
              v11 = &v195;
              if (v13 >= v37 + 1)
              {
                v212 = v37 + 1;
                v34 = (unint64_t)&v213;
LABEL_59:
                *(_QWORD *)v34 = v13;
                *v35 = 0;
                goto LABEL_60;
              }
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
              while (1)
              {
                v183 = v11;
                v184 = (_QWORD *)v16;
                v185 = 0;
                v192 = v10 & 1;
                if (v34 == v9)
                  break;
                LODWORD(v58) = *((unsigned __int8 *)&v193 + v16);
                v11 = (unint64_t *)v16;
LABEL_100:
                v3 = &v169;
                v59 = (uint64_t *)&v189;
                v60 = &v190;
                if ((_DWORD)v58 == 35)
                {
                  v58 = (char *)v11 + 1;
                  if (v4 >= (uint64_t)v11 + 1)
                  {
LABEL_122:
                    v188 = (unint64_t)v58;
                    goto LABEL_127;
                  }
                  goto LABEL_147;
                }
                if ((_DWORD)v58 != 63)
                  goto LABEL_128;
                a2 = (unint64_t)v11 + 1;
                if (v4 < (uint64_t)v11 + 1)
                {
                  __break(1u);
LABEL_147:
                  __break(1u);
                  goto LABEL_148;
                }
                v61 = specialized Collection<>.firstIndex(of:)(0x23u, (uint64_t)v11 + 1, v4, (uint64_t)&v193);
                if ((v62 & 1) != 0)
                  goto LABEL_126;
                if (v61 < (uint64_t)a2)
                  goto LABEL_150;
                *(_QWORD *)&v186 = a2;
                *((_QWORD *)&v186 + 1) = v61;
                v187 = 0;
                v58 = (char *)(v61 + 1);
                if (v4 >= v61 + 1)
                  goto LABEL_122;
                __break(1u);
LABEL_107:
                LOBYTE(v10) = 0;
                v34 = v4 - 1;
                v16 = (uint64_t)v11;
                while (1)
                {
                  v9 = v16;
                  LOBYTE(v10) = ((_DWORD)v58 == 37) | v10;
                  if (v34 == v16)
                    break;
                  LODWORD(v58) = *((unsigned __int8 *)&v193 + ++v16);
                  if ((_DWORD)v58 == 35 || (_DWORD)v58 == 63)
                    goto LABEL_124;
                }
                v16 = v4;
LABEL_124:
                if (v16 < (uint64_t)v11)
                {
                  __break(1u);
LABEL_126:
                  v59 = (uint64_t *)(v3 + 19);
                  v60 = (char *)(v3 + 20);
                  *(_QWORD *)&v186 = a2;
LABEL_127:
                  *v59 = v4;
                  *v60 = 0;
LABEL_128:
                  v22 = v169;
                  v23 = v170;
                  v30 = v171;
                  v136 = *(_OWORD *)(v2 + 24);
                  v29 = v174;
                  v28 = v176;
                  v130 = *(_OWORD *)(v2 + 72);
                  v132 = v175;
                  v27 = v179;
                  v20 = v180;
                  v24 = v181;
                  v18 = v182;
                  v19 = (int64_t)v183;
                  v4 = (uint64_t)v184;
                  v21 = v185;
                  v129 = v186;
                  v26 = v187;
                  v135 = v188;
                  v134 = v189;
                  v139 = v191 & 1;
                  v138 = HIBYTE(v191) & 1;
                  v128 = v192 & 1;
                  v14 = v190;
                  goto LABEL_129;
                }
              }
              v19 = (int64_t)v11;
              v57 = (char)v10;
              v4 = v16;
              goto LABEL_94;
            }
LABEL_151:
            __break(1u);
            goto LABEL_152;
          }
LABEL_58:
          v34 = (unint64_t)(v3 + 19);
          v35 = (char *)(v3 + 20);
          *(_QWORD *)&v210 = v17;
          goto LABEL_59;
        }
LABEL_148:
        __break(1u);
      }
      __break(1u);
LABEL_150:
      __break(1u);
      goto LABEL_151;
    }
    __break(1u);
LABEL_75:
    a1 = static String._copying(_:)();
    v2 = (unint64_t)v49;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 16) = a1;
    *(_QWORD *)(v7 + 24) = v2;
    a2 = v2;
    if ((v2 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_76:
    v2 = (unint64_t)&v169;
    v193 = a1;
    v194 = a2 & 0xFFFFFFFFFFFFFFLL;
    v4 = HIBYTE(a2) & 0xF;
    v224 = 1;
    v223 = 1;
    v222 = 1;
    v221 = 1;
    v220 = 1;
    v219 = 1;
    v218 = 1;
    v217 = 1;
    v169 = 0;
    v170 = 0;
    v171 = 1;
    v173 = 0;
    v172 = 0;
    v174 = 1;
    v175 = 0uLL;
    v176 = 1;
    v178 = 0;
    v177 = 0;
    v179 = 1;
    v181 = 0;
    v180 = 0;
    v182 = 1;
    v184 = 0;
    v183 = 0;
    v185 = 1;
    v186 = 0uLL;
    v187 = 1;
    v189 = 0;
    v188 = 0;
    v190 = 1;
    v191 = 0;
    v192 = 0;
    if (!v4)
    {
      v168 = 1;
      v167 = 1;
      v166 = 1;
      v165 = 1;
      v164 = 1;
      v163 = 0;
      v162 = 1;
      v140 = 0;
      v141 = 0;
      v142 = 1;
      v143 = 0uLL;
      v144 = 1;
      v145 = 0uLL;
      v146 = 1;
      v147 = 0uLL;
      v148 = 1;
      v149 = 0;
      v150 = 0;
      v151 = 1;
      v152 = 0;
      v153 = 0;
LABEL_96:
      v154 = v163;
      v155 = 0uLL;
      v156 = v162;
      v157 = 0;
      v158 = 0;
      v159 = 1;
      v160 = 0;
      v161 = 0;
      destructiveProjectEnumData for PredicateCodableError(&v140, v8);
      outlined init with take of URLBufferParseInfo?((uint64_t)&v140, (uint64_t)&v195);
      outlined init with take of URLBufferParseInfo?((uint64_t)&v195, (uint64_t)&v140);
      v22 = v140;
      v23 = v141;
      v30 = v142;
      v136 = v143;
      v29 = v144;
      v28 = v146;
      v130 = v147;
      v132 = v145;
      v27 = v148;
      v20 = v149;
      v24 = v150;
      v18 = v151;
      v19 = v152;
      v4 = v153;
      v21 = v154;
      v129 = v155;
      v26 = v156;
      v135 = v157;
      v134 = v158;
      v139 = v160 & 1;
      v138 = HIBYTE(v160) & 1;
      v128 = v161 & 1;
      v14 = v159;
      goto LABEL_129;
    }
    v50 = a1;
    if (a1 - 35 <= 0x3A
      && (v34 = 1 << (a1 - 35), v16 = 0x500000030801001, (v34 & 0x500000030801001) != 0))
    {
LABEL_79:
      v51 = 0;
    }
    else
    {
      v34 = 1;
      v16 = (uint64_t)&v193;
      v9 = 0x500000030001001;
      v51 = 1;
      while (1)
      {
        if (v4 == v51)
        {
          v51 = HIBYTE(a2) & 0xF;
          goto LABEL_80;
        }
        v63 = *((unsigned __int8 *)&v193 + v51++);
        v64 = (v63 - 35);
        if (v64 <= 0x3A)
        {
          if (((1 << v64) & 0x500000030001001) != 0)
            goto LABEL_79;
          if (v64 == 23)
            break;
        }
      }
      a2 = v51 - 1;
      v169 = 0;
      v170 = v51 - 1;
      v171 = 0;
      if (v4 == v51)
      {
        if (v50 >= 0x41
          && specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(0, a2, (uint64_t)&v193, 1u, 0))
        {
          v168 = 0;
          v167 = 1;
          v166 = 1;
          v165 = 1;
          v164 = 1;
          v163 = 0;
          v162 = 1;
          v140 = 0;
          v141 = v51 - 1;
          v142 = 0;
          v143 = 0uLL;
          v144 = 1;
          v145 = 0uLL;
          v146 = 1;
          v147 = 0uLL;
          v148 = 1;
          v149 = 0;
          v150 = 0;
          v151 = 1;
          v152 = v4;
          v153 = v4;
          goto LABEL_96;
        }
        goto LABEL_141;
      }
      if (v50 < 0x41
        || !specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(0, v51 - 1, (uint64_t)&v193, 1u, 0))
      {
        goto LABEL_141;
      }
    }
LABEL_80:
    if (v51 == v4)
      v11 = 0;
    else
      v11 = (unint64_t *)v51;
    if ((unint64_t *)((char *)v11 + 1) == (unint64_t *)v4)
      goto LABEL_92;
    v34 = (unint64_t)&v193;
    v16 = *((unsigned __int8 *)&v193 + (_QWORD)v11);
    if ((_DWORD)v16 != 47 || *((_BYTE *)&v193 + (_QWORD)v11 + 1) != 47)
      goto LABEL_92;
    v52 = (uint64_t)v11 + 2;
    v16 = v4;
    if ((unint64_t *)((char *)v11 + 2) == (unint64_t *)v4)
      goto LABEL_91;
    v53 = *((unsigned __int8 *)&v193 + v52);
    v44 = v53 > 0x3F;
    v54 = 1 << v53;
    v34 = 0x8000800800000000;
    v55 = v54 & 0x8000800800000000;
    v56 = v44 || v55 == 0;
    v16 = (uint64_t)v11 + 2;
    if (!v56)
      goto LABEL_91;
    v98 = (char *)v11 + 3;
    v9 = 1;
    while ((char *)v4 != v98)
    {
      v99 = *((unsigned __int8 *)&v193 + (_QWORD)v98++);
      v44 = v99 > 0x3F;
      v100 = (1 << v99) & 0x8000800800000000;
      if (!v44 && v100 != 0)
      {
        v102 = (uint64_t)(v98 - 1);
        goto LABEL_143;
      }
    }
    v102 = v4;
LABEL_143:
    if (v102 >= v52)
      break;
    __break(1u);
  }
  v16 = (uint64_t)v11 + 2;
  if (v52 == v102)
  {
LABEL_91:
    v177 = (char *)v11 + 2;
    v178 = v16;
    v11 = (unint64_t *)v16;
    v179 = 0;
    goto LABEL_92;
  }
  a2 = v102;
  if ((specialized static RFC3986Parser.parseAuthority(_:into:)(v52, v102, (uint64_t)&v193, v4, (uint64_t)&v169) & 1) != 0)
  {
    if ((v182 & 1) != 0 || (v9 = v180, v180 == v181))
    {
LABEL_167:
      v11 = (unint64_t *)a2;
      goto LABEL_92;
    }
    v16 = v170;
    v34 = v171;
    if (*((unsigned __int8 *)&v193 + v180) - 58 >= 0xFFFFFFF6)
    {
      if (v180 + 1 == v181)
        goto LABEL_167;
      v9 = ~v180 + v181;
      v107 = (unsigned __int8 *)&v193 + v180 + 1;
      while (1)
      {
        v108 = *v107++;
        if ((v108 - 58) < 0xFFFFFFF6)
          break;
        if (!--v9)
          goto LABEL_167;
      }
    }
    v105 = v170 - v169 == 11 ? v171 : 1;
    if ((v105 & 1) == 0
      && (((0x3FFE000000000uLL >> ((v193 - 1) >> 1)) & 0x20) + v193) == 97)
    {
      v11 = (unint64_t *)a2;
      if ((((0x3FFE000000000uLL >> ((BYTE1(v193) - 1) >> 1)) & 0x20) + BYTE1(v193)) == 100
        && (((0x3FFE000000000uLL >> ((BYTE2(v193) - 1) >> 1)) & 0x20) + BYTE2(v193)) == 100
        && (((0x3FFE000000000uLL >> ((BYTE3(v193) - 1) >> 1)) & 0x20) + BYTE3(v193)) == 114
        && (((0x3FFE000000000uLL >> ((BYTE4(v193) - 1) >> 1)) & 0x20) + BYTE4(v193)) == 101
        && (((0x3FFE000000000uLL >> ((BYTE5(v193) - 1) >> 1)) & 0x20) + BYTE5(v193)) == 115
        && (((0x3FFE000000000uLL >> ((BYTE6(v193) - 1) >> 1)) & 0x20) + BYTE6(v193)) == 115
        && (((0x3FFE000000000uLL >> ((HIBYTE(v193) - 1) >> 1)) & 0x20) + HIBYTE(v193)) == 98
        && (((0x3FFE000000000uLL >> ((v194 - 1) >> 1)) & 0x20) + v194) == 111
        && (((0x3FFE000000000uLL >> ((BYTE1(v194) - 1) >> 1)) & 0x20) + BYTE1(v194)) == 111)
      {
        v16 = 0x3FFE000000000;
        v34 = (0x3FFE000000000uLL >> ((BYTE2(v194) - 1) >> 1)) & 0x20;
        if ((v34 + BYTE2(v194)) == 107)
        {
LABEL_92:
          if (v11 != (unint64_t *)v4)
          {
            LODWORD(v58) = *((unsigned __int8 *)&v193 + (_QWORD)v11);
            if ((_DWORD)v58 != 35 && (_DWORD)v58 != 63)
              goto LABEL_107;
            v183 = v11;
            v184 = v11;
            v185 = 0;
            v192 = 0;
            goto LABEL_100;
          }
          v19 = (int64_t)v11;
          v57 = 0;
          v183 = (_QWORD *)v4;
          v184 = (_QWORD *)v4;
LABEL_94:
          v128 = v57;
          v21 = 0;
          v22 = v169;
          v23 = v170;
          v30 = v171;
          v136 = *(_OWORD *)(v2 + 24);
          v29 = v174;
          v28 = v176;
          v130 = *(_OWORD *)(v2 + 72);
          v132 = v175;
          v27 = v179;
          v20 = v180;
          v24 = v181;
          v18 = v182;
          v129 = v186;
          v26 = v187;
          v134 = v189;
          v135 = v188;
          v14 = v190;
          v138 = HIBYTE(v191);
          v139 = v191;
          LOBYTE(v140) = v171;
          v168 = v174;
          v167 = v176;
          v166 = v179;
          v165 = v182;
          v164 = 0;
          v163 = v187;
          v162 = v190;
          goto LABEL_129;
        }
      }
    }
  }
LABEL_141:
  swift_release();
  return 0;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5H7VGXEfU_10Foundation0nO0VXMtAQ15URLComponentSet01_qrstuvW0LLVSbTf1nnc_nTf4xndnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned __int8 a6, char a7)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  char *v24;
  unsigned __int8 v25;

  v11 = a2;
  v12 = result;
  v13 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v13) = 1;
  v14 = 4 << v13;
  v15 = a2 & 0xC;
  if (v15 == 4 << v13)
  {
    v17 = a6;
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a6 = v17;
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v16 = a2 >> 16;
      if (v15 != v14)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v25 = a6;
  v18 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v18 = HIBYTE(a5) & 0xF;
  if (v18 < a2 >> 16)
    goto LABEL_31;
  result = String.UTF8View._foreignDistance(from:to:)();
  v16 = result;
  a6 = v25;
  if (v15 == v14)
  {
LABEL_14:
    v19 = a6;
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a4, a5);
    a6 = v19;
    v11 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v14)
  {
    v20 = a6;
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a6 = v20;
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v11 >> 16);
    goto LABEL_21;
  }
  v21 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v21 = a4 & 0xFFFFFFFFFFFFLL;
  if (v21 < v11 >> 16)
    goto LABEL_29;
  if (v21 < a3 >> 16)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    return result;
  }
  v22 = a6;
  result = String.UTF8View._foreignDistance(from:to:)();
  a6 = v22;
LABEL_21:
  if (__OFADD__(v16, result))
  {
    __break(1u);
    goto LABEL_28;
  }
  v23 = result;
  if (v16 + result < v16)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v12)
    v24 = (char *)(v12 + v16);
  else
    v24 = 0;
  return specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v24, v23, a6, a7 & 1);
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5, char a6)
{
  uint64_t v6;
  _QWORD *v13;
  char v14;
  uint64_t result;
  _QWORD v16[2];

  if ((a4 & 0x1000000000000000) != 0)
    return 2;
  if ((a4 & 0x2000000000000000) != 0)
  {
    v16[0] = a3;
    v16[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v14 = a6 & 1;
    v13 = v16;
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0)
      v13 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v13 = (_QWORD *)_StringObject.sharedUTF8.getter();
    v14 = a6 & 1;
  }
  result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5H7VGXEfU_10Foundation0nO0VXMtAQ15URLComponentSet01_qrstuvW0LLVSbTf1nnc_nTf4xndnn_n((uint64_t)v13, a1, a2, a3, a4, a5, v14);
  if (!v6)
    return result & 1;
  return result;
}

uint64_t specialized static RFC3986Parser.validate(parseInfo:)(_BYTE *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  void *v10;
  unsigned __int16 *v11;
  id v12;
  void *v13;
  id v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  void *v24;
  unsigned __int16 *v25;
  id v26;
  void *v27;
  id v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  void *v62;
  unsigned __int16 *v63;
  void *v64;
  unsigned __int16 *v65;
  id v66;
  void *v67;
  id v68;
  BOOL v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char v74;
  void *v75;
  unsigned __int16 *v76;
  id v77;
  void *v78;
  id v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char v88;
  void *v89;
  unsigned __int16 *v90;
  id v91;
  void *v92;
  id v93;
  char v94;
  uint64_t v95;
  int v96;
  BOOL v97;
  char v98;
  void *v99;
  unsigned __int16 *v100;
  id v101;
  void *v102;
  id v103;
  BOOL v104;
  BOOL v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char v113;
  void *v114;
  unsigned __int16 *v115;
  id v116;
  void *v117;
  id v118;
  BOOL v119;
  BOOL v120;
  BOOL v121;
  char v122;
  char v123;
  unint64_t v124;
  void *v125;
  unsigned __int16 *v126;
  id v127;
  void *v128;
  id v129;
  uint64_t result;
  char v131;
  BOOL v132;
  BOOL v133;
  char v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char v142;
  void *v143;
  unsigned __int16 *v144;
  id v145;
  void *v146;
  id v147;
  char v148;
  unint64_t v149;
  unint64_t v150;

  if ((a1[72] & 1) != 0)
    goto LABEL_6;
  v2 = String.subscript.getter();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v2, v3, v5, v7, 2u, 1);
  if (v9 == 2)
  {
    lazy protocol witness table accessor for type Substring and conformance Substring();
    StringProtocol._ephemeralString.getter();
    v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    v12 = v10;
    if (!v11)
    {
      swift_bridgeObjectRetain();
      v97 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v2, v4, v6, v8, 2u, 1);
      swift_bridgeObjectRelease_n();
      if (!v97)
        return 0;
      goto LABEL_6;
    }
    StringProtocol._ephemeralString.getter();
    v13 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v13, sel_length);
    swift_unknownObjectRelease();
    v9 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, (uint64_t)v14, 2u, 1);
  }
  v15 = v9;
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
    return 0;
LABEL_6:
  if ((a1[96] & 1) == 0)
  {
    v16 = String.subscript.getter();
    v18 = v17;
    v20 = v19;
    v22 = v21;
    v23 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v16, v17, v19, v21, 2u, 1);
    if (v23 != 2)
      goto LABEL_10;
    lazy protocol witness table accessor for type Substring and conformance Substring();
    StringProtocol._ephemeralString.getter();
    v24 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v25 = (unsigned __int16 *)objc_msgSend(v24, sel__fastCharacterContents);
    v26 = v24;
    if (v25)
    {
      StringProtocol._ephemeralString.getter();
      v27 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v28 = objc_msgSend(v27, sel_length);
      swift_unknownObjectRelease();
      v23 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v25, (uint64_t)v28, 2u, 1);
LABEL_10:
      v29 = v23;
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
        return 0;
      goto LABEL_11;
    }
    swift_bridgeObjectRetain();
    v120 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v16, v18, v20, v22, 2u, 1);
    swift_bridgeObjectRelease_n();
    if (!v120)
      return 0;
  }
LABEL_11:
  if ((a1[120] & 1) != 0)
    goto LABEL_12;
  v34 = String.subscript.getter();
  v36 = v34;
  v37 = v35;
  v39 = v38;
  v41 = v40;
  if ((a1[217] & 1) != 0)
    goto LABEL_15;
  if ((v34 ^ v35) < 0x4000)
    goto LABEL_66;
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() != 91)
  {
    swift_bridgeObjectRelease();
    goto LABEL_66;
  }
  if (__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1))
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  Substring.UTF8View.index(_:offsetBy:)();
  v96 = Substring.UTF8View.subscript.getter();
  swift_bridgeObjectRelease();
  if (v96 != 93)
  {
LABEL_66:
    v123 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v36, v37, v39, v41, 4u, 1);
    if (v123 == 2)
    {
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      v124 = v41;
      v125 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v126 = (unsigned __int16 *)objc_msgSend(v125, sel__fastCharacterContents);
      v127 = v125;
      if (!v126)
      {
        swift_bridgeObjectRetain();
        v131 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v37, v39, v124, 4u, 1);
        goto LABEL_74;
      }
      StringProtocol._ephemeralString.getter();
      v128 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v129 = objc_msgSend(v128, sel_length);
      swift_unknownObjectRelease();
      v121 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v126, (uint64_t)v129, 4u, 1);
    }
    else
    {
      v121 = v123;
    }
LABEL_70:
    swift_bridgeObjectRelease();
    if (!v121)
      return 0;
LABEL_12:
    if ((a1[168] & 1) != 0)
      v30 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v30 = String.subscript.getter();
    v70 = v30;
    v71 = v31;
    v72 = v32;
    v73 = v33;
    v74 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v30, v31, v32, v33, 0x10u, 1);
    if (v74 == 2)
    {
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      v75 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v76 = (unsigned __int16 *)objc_msgSend(v75, sel__fastCharacterContents);
      v77 = v75;
      if (!v76)
      {
        swift_bridgeObjectRetain();
        v105 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v70, v71, v72, v73, 0x10u, 1);
        swift_bridgeObjectRelease_n();
        if (!v105)
          return 0;
        goto LABEL_35;
      }
      StringProtocol._ephemeralString.getter();
      v78 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v79 = objc_msgSend(v78, sel_length);
      swift_unknownObjectRelease();
      v74 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v76, (uint64_t)v79, 0x10u, 1);
    }
    v80 = v74;
    swift_bridgeObjectRelease();
    if ((v80 & 1) == 0)
      return 0;
LABEL_35:
    if ((a1[192] & 1) == 0)
    {
      v81 = String.subscript.getter();
      v83 = v82;
      v85 = v84;
      v87 = v86;
      v88 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v81, v82, v84, v86, 0x40u, 1);
      if (v88 != 2)
        goto LABEL_39;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      v89 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v90 = (unsigned __int16 *)objc_msgSend(v89, sel__fastCharacterContents);
      v91 = v89;
      if (v90)
      {
        StringProtocol._ephemeralString.getter();
        v92 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v93 = objc_msgSend(v92, sel_length);
        swift_unknownObjectRelease();
        v88 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v90, (uint64_t)v93, 0x40u, 1);
LABEL_39:
        v94 = v88;
        swift_bridgeObjectRelease();
        if ((v94 & 1) == 0)
          return 0;
        goto LABEL_40;
      }
      swift_bridgeObjectRetain();
      v132 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v81, v83, v85, v87, 0x40u, 1);
      swift_bridgeObjectRelease_n();
      if (!v132)
        return 0;
    }
LABEL_40:
    if ((a1[216] & 1) != 0)
      return 1;
    v106 = String.subscript.getter();
    v108 = v107;
    v110 = v109;
    v112 = v111;
    v113 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v106, v107, v109, v111, 0x40u, 1);
    if (v113 == 2)
    {
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      v114 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v115 = (unsigned __int16 *)objc_msgSend(v114, sel__fastCharacterContents);
      v116 = v114;
      if (v115)
      {
        StringProtocol._ephemeralString.getter();
        v117 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v118 = objc_msgSend(v117, sel_length);
        swift_unknownObjectRelease();
        v95 = 1;
        v119 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v115, (uint64_t)v118, 0x40u, 1);
        swift_bridgeObjectRelease();
        if (v119)
          return v95;
      }
      else
      {
        swift_bridgeObjectRetain();
        v95 = 1;
        v133 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v106, v108, v110, v112, 0x40u, 1);
        swift_bridgeObjectRelease_n();
        if (v133)
          return v95;
      }
    }
    else
    {
      v122 = v113;
      swift_bridgeObjectRelease();
      if ((v122 & 1) != 0)
        return 1;
    }
    return 0;
  }
LABEL_15:
  v150 = v37 >> 14;
  if (v37 >> 14 == v36 >> 14)
  {
    __break(1u);
    goto LABEL_94;
  }
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() == 91)
  {
    if (!__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1))
    {
      Substring.UTF8View.index(_:offsetBy:)();
      v42 = Substring.UTF8View.subscript.getter();
      swift_bridgeObjectRelease();
      if (v42 == 93)
      {
        swift_bridgeObjectRetain();
        v43 = Substring.UTF8View.index(after:)();
        if (!__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1))
        {
          if ((unint64_t)Substring.UTF8View.index(_:offsetBy:)() >> 14 >= v43 >> 14)
          {
            v44 = Substring.subscript.getter();
            v46 = v45;
            v48 = v47;
            v50 = v49;
            v51 = specialized Collection<>.firstIndex(of:)(0x25u, v36, v37, v39, v41);
            if ((v52 & 1) != 0)
            {
              v98 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v44, v46, v48, v50, 2u, 0);
              if (v98 == 2)
              {
                lazy protocol witness table accessor for type Substring and conformance Substring();
                StringProtocol._ephemeralString.getter();
                v99 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v100 = (unsigned __int16 *)objc_msgSend(v99, sel__fastCharacterContents);
                v101 = v99;
                if (v100)
                {
                  StringProtocol._ephemeralString.getter();
                  v102 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  v103 = objc_msgSend(v102, sel_length);
                  swift_unknownObjectRelease();
                  v104 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v100, (uint64_t)v103, 2u, 0);
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  swift_bridgeObjectRetain();
                  v104 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v44, v46, v48, v50, 2u, 0);
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();
                }
                v95 = 0;
                if (!v104)
                  return v95;
                goto LABEL_12;
              }
              v121 = v98;
              goto LABEL_62;
            }
            v53 = v51;
            if (v150 == (unint64_t)Substring.UTF8View.index(after:)() >> 14
              || Substring.UTF8View.subscript.getter() != 50
              || v150 == (unint64_t)Substring.UTF8View.index(after:)() >> 14
              || Substring.UTF8View.subscript.getter() != 53)
            {
              goto LABEL_52;
            }
            if (v53 >> 14 >= v44 >> 14)
            {
              v149 = v46;
              v54 = Substring.subscript.getter();
              v56 = v55;
              v58 = v57;
              v60 = v59;
              v61 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v54, v55, v57, v59, 2u, 0);
              if (v61 == 2)
              {
                lazy protocol witness table accessor for type Substring and conformance Substring();
                StringProtocol._ephemeralString.getter();
                v62 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v63 = (unsigned __int16 *)objc_msgSend(v62, sel__fastCharacterContents);
                v64 = v62;
                v65 = v63;
                v66 = v64;
                if (v65)
                {
                  StringProtocol._ephemeralString.getter();
                  v67 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  v68 = objc_msgSend(v67, sel_length);
                  swift_unknownObjectRelease();
                  v69 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v65, (uint64_t)v68, 2u, 0);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  swift_bridgeObjectRetain();
                  v69 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v54, v56, v58, v60, 2u, 0);
                  swift_bridgeObjectRelease_n();
                }
                if (v69)
                {
LABEL_87:
                  swift_bridgeObjectRetain();
                  if (v149 >> 14 >= (unint64_t)Substring.index(after:)() >> 14)
                  {
                    v135 = Substring.subscript.getter();
                    v137 = v136;
                    v139 = v138;
                    v141 = v140;
                    v142 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v135, v136, v138, v140, 8u, 1);
                    if (v142 == 2)
                    {
                      lazy protocol witness table accessor for type Substring and conformance Substring();
                      StringProtocol._ephemeralString.getter();
                      v143 = (void *)String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      v144 = (unsigned __int16 *)objc_msgSend(v143, sel__fastCharacterContents);
                      v145 = v143;
                      if (v144)
                      {
                        StringProtocol._ephemeralString.getter();
                        v146 = (void *)String._bridgeToObjectiveCImpl()();
                        swift_bridgeObjectRelease();
                        v147 = objc_msgSend(v146, sel_length);
                        swift_unknownObjectRelease();
                        v121 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v144, (uint64_t)v147, 8u, 1);
                        swift_bridgeObjectRelease_n();
LABEL_62:
                        swift_bridgeObjectRelease_n();
                        goto LABEL_70;
                      }
                      swift_bridgeObjectRetain();
                      v131 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v135, v137, v139, v141, 8u, 1);
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease_n();
                    }
                    else
                    {
                      v148 = v142;
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease();
                      v131 = v148 & 1;
                    }
LABEL_74:
                    swift_bridgeObjectRelease_n();
                    if ((v131 & 1) == 0)
                      return 0;
                    goto LABEL_12;
                  }
                  goto LABEL_100;
                }
              }
              else
              {
                v134 = v61;
                swift_bridgeObjectRelease();
                if ((v134 & 1) != 0)
                  goto LABEL_87;
              }
LABEL_52:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              return 0;
            }
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
            goto LABEL_101;
          }
          goto LABEL_97;
        }
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
LABEL_101:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t specialized static RFC3986Parser.invalidComponents(of:)(_BYTE *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  unsigned __int16 *v12;
  id v13;
  void *v14;
  uint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  unsigned __int16 *v28;
  id v29;
  void *v30;
  id v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  int v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unsigned __int16 *v58;
  id v59;
  void *v60;
  id v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  void *v73;
  unsigned __int16 *v74;
  id v75;
  void *v76;
  id v77;
  BOOL v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  void *v89;
  unsigned __int16 *v90;
  id v91;
  void *v92;
  id v93;
  BOOL v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  void *v104;
  unsigned __int16 *v105;
  id v106;
  void *v107;
  id v108;
  char v109;
  uint64_t result;
  BOOL v111;
  char v112;
  void *v113;
  unsigned __int16 *v114;
  id v115;
  void *v116;
  id v117;
  BOOL v118;
  char v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char v129;
  void *v130;
  unsigned __int16 *v131;
  void *v132;
  unsigned __int16 *v133;
  id v134;
  void *v135;
  uint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char v145;
  void *v146;
  unsigned __int16 *v147;
  id v148;
  void *v149;
  id v150;
  char v151;
  BOOL v152;
  unint64_t v153;
  unsigned int v154;
  unint64_t v155;

  if ((a1[72] & 1) != 0)
  {
    v2 = 0;
    goto LABEL_13;
  }
  v3 = String.subscript.getter();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v3, v4, v6, v8, 2u, 1);
  if (v10 == 2)
  {
    lazy protocol witness table accessor for type Substring and conformance Substring();
    StringProtocol._ephemeralString.getter();
    v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents);
    v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v15 = (uint64_t)objc_msgSend(v14, sel_length);
      swift_unknownObjectRelease();
      LOBYTE(v15) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, v15, 2u, 1);
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
        v2 = 0;
      else
        v2 = 2;
      goto LABEL_13;
    }
    swift_bridgeObjectRetain();
    v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v3, v5, v7, v9, 2u, 1);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v16 = v10;
    swift_bridgeObjectRelease();
    v17 = v16 & 1;
  }
  if ((v17 & 1) != 0)
    v2 = 0;
  else
    v2 = 2;
LABEL_13:
  if ((a1[96] & 1) == 0)
  {
    v18 = String.subscript.getter();
    v20 = v19;
    v22 = v21;
    v24 = v23;
    v25 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v18, v19, v21, v23, 2u, 1);
    if (v25 == 2)
    {
      v26 = v2;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      v27 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v28 = (unsigned __int16 *)objc_msgSend(v27, sel__fastCharacterContents);
      v29 = v27;
      if (v28)
      {
        StringProtocol._ephemeralString.getter();
        v30 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v31 = objc_msgSend(v30, sel_length);
        swift_unknownObjectRelease();
        v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v28, (uint64_t)v31, 2u, 1);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v18, v20, v22, v24, 2u, 1);
        swift_bridgeObjectRelease_n();
      }
      v2 = v26;
      if (v32)
        goto LABEL_19;
      goto LABEL_18;
    }
    v33 = v25;
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0)
LABEL_18:
      v2 = v2 | 4;
  }
LABEL_19:
  if ((a1[120] & 1) != 0)
    goto LABEL_47;
  v34 = String.subscript.getter();
  v36 = v34;
  v37 = v35;
  v39 = v38;
  v41 = v40;
  if ((a1[217] & 1) != 0)
    goto LABEL_21;
  if ((v34 ^ v35) < 0x4000)
    goto LABEL_77;
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() != 91)
  {
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }
  if (__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1))
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  Substring.UTF8View.index(_:offsetBy:)();
  v53 = Substring.UTF8View.subscript.getter();
  swift_bridgeObjectRelease();
  if (v53 != 93)
  {
LABEL_77:
    v112 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v36, v37, v39, v41, 4u, 1);
    if (v112 == 2)
    {
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      v113 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v114 = (unsigned __int16 *)objc_msgSend(v113, sel__fastCharacterContents);
      v115 = v113;
      if (v114)
      {
        StringProtocol._ephemeralString.getter();
        v116 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v117 = objc_msgSend(v116, sel_length);
        swift_unknownObjectRelease();
        v118 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v114, (uint64_t)v117, 4u, 1);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        v118 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v37, v39, v41, 4u, 1);
        swift_bridgeObjectRelease_n();
      }
      if (!v118)
        goto LABEL_46;
    }
    else
    {
      v119 = v112;
      swift_bridgeObjectRelease();
      if ((v119 & 1) == 0)
        goto LABEL_46;
    }
LABEL_47:
    if ((a1[168] & 1) != 0)
      v63 = MEMORY[0x186DA5030](0, 0xE000000000000000);
    else
      v63 = String.subscript.getter();
    v67 = v63;
    v68 = v64;
    v69 = v65;
    v70 = v66;
    v71 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v63, v64, v65, v66, 0x10u, 1);
    if (v71 == 2)
    {
      v72 = v2;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      v73 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v74 = (unsigned __int16 *)objc_msgSend(v73, sel__fastCharacterContents);
      v75 = v73;
      if (v74)
      {
        StringProtocol._ephemeralString.getter();
        v76 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v77 = objc_msgSend(v76, sel_length);
        swift_unknownObjectRelease();
        v78 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v74, (uint64_t)v77, 0x10u, 1);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        v78 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v67, v68, v69, v70, 0x10u, 1);
        swift_bridgeObjectRelease_n();
      }
      v2 = v72;
      if (v78)
      {
LABEL_55:
        if ((a1[192] & 1) != 0)
          goto LABEL_61;
        v80 = String.subscript.getter();
        v82 = v81;
        v84 = v83;
        v86 = v85;
        v87 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v80, v81, v83, v85, 0x40u, 1);
        if (v87 == 2)
        {
          v88 = v2;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          StringProtocol._ephemeralString.getter();
          v89 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v90 = (unsigned __int16 *)objc_msgSend(v89, sel__fastCharacterContents);
          v91 = v89;
          if (v90)
          {
            StringProtocol._ephemeralString.getter();
            v92 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v93 = objc_msgSend(v92, sel_length);
            swift_unknownObjectRelease();
            v94 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v90, (uint64_t)v93, 0x40u, 1);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRetain();
            v94 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v80, v82, v84, v86, 0x40u, 1);
            swift_bridgeObjectRelease_n();
          }
          v2 = v88;
          if (v94)
          {
LABEL_61:
            if ((a1[216] & 1) == 0)
            {
              v96 = String.subscript.getter();
              v98 = v97;
              v100 = v99;
              v102 = v101;
              v103 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v96, v97, v99, v101, 0x40u, 1);
              if (v103 == 2)
              {
                lazy protocol witness table accessor for type Substring and conformance Substring();
                StringProtocol._ephemeralString.getter();
                v104 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v105 = (unsigned __int16 *)objc_msgSend(v104, sel__fastCharacterContents);
                v106 = v104;
                if (!v105)
                {
                  swift_bridgeObjectRetain();
                  v111 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v96, v98, v100, v102, 0x40u, 1);
                  swift_bridgeObjectRelease_n();
                  if (v111)
                    return v2;
                  return v2 | 0xFFFFFF80;
                }
                StringProtocol._ephemeralString.getter();
                v107 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v108 = objc_msgSend(v107, sel_length);
                swift_unknownObjectRelease();
                v103 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v105, (uint64_t)v108, 0x40u, 1);
              }
              v109 = v103;
              swift_bridgeObjectRelease();
              if ((v109 & 1) == 0)
                return v2 | 0xFFFFFF80;
            }
            return v2;
          }
        }
        else
        {
          v95 = v87;
          swift_bridgeObjectRelease();
          if ((v95 & 1) != 0)
            goto LABEL_61;
        }
        v2 = v2 | 0x40;
        goto LABEL_61;
      }
    }
    else
    {
      v79 = v71;
      swift_bridgeObjectRelease();
      if ((v79 & 1) != 0)
        goto LABEL_55;
    }
    v2 = v2 | 0x20;
    goto LABEL_55;
  }
LABEL_21:
  v153 = v37 >> 14;
  if (v37 >> 14 == v36 >> 14)
  {
    __break(1u);
    goto LABEL_104;
  }
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() == 91)
  {
    if (!__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1))
    {
      Substring.UTF8View.index(_:offsetBy:)();
      v42 = Substring.UTF8View.subscript.getter();
      swift_bridgeObjectRelease();
      if (v42 == 93)
      {
        swift_bridgeObjectRetain();
        v43 = Substring.UTF8View.index(after:)();
        if (!__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1))
        {
          if ((unint64_t)Substring.UTF8View.index(_:offsetBy:)() >> 14 >= v43 >> 14)
          {
            v154 = v2;
            v44 = Substring.subscript.getter();
            v46 = v45;
            v48 = v47;
            v155 = v49;
            v50 = specialized Collection<>.firstIndex(of:)(0x25u, v36, v37, v39, v41);
            if ((v51 & 1) != 0)
            {
              v54 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v44, v46, v48, v155, 2u, 0);
              if (v54 != 2)
              {
                v62 = v54;
LABEL_44:
                swift_bridgeObjectRelease_n();
LABEL_45:
                swift_bridgeObjectRelease();
                v2 = v154;
                if (v62)
                  goto LABEL_47;
                goto LABEL_46;
              }
              v55 = v48;
              lazy protocol witness table accessor for type Substring and conformance Substring();
              StringProtocol._ephemeralString.getter();
              v56 = v46;
              v57 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v58 = (unsigned __int16 *)objc_msgSend(v57, sel__fastCharacterContents);
              v59 = v57;
              if (v58)
              {
                StringProtocol._ephemeralString.getter();
                v60 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v61 = objc_msgSend(v60, sel_length);
                swift_unknownObjectRelease();
                v62 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v58, (uint64_t)v61, 2u, 0);
                swift_bridgeObjectRelease_n();
                goto LABEL_45;
              }
              swift_bridgeObjectRetain();
              v120 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v44, v56, v55, v155, 2u, 0);
              swift_bridgeObjectRelease_n();
              goto LABEL_86;
            }
            v52 = v50;
            if (v153 == (unint64_t)Substring.UTF8View.index(after:)() >> 14
              || Substring.UTF8View.subscript.getter() != 50
              || v153 == (unint64_t)Substring.UTF8View.index(after:)() >> 14
              || Substring.UTF8View.subscript.getter() != 53)
            {
              goto LABEL_31;
            }
            if (v52 >> 14 >= v44 >> 14)
            {
              v121 = v46;
              v122 = Substring.subscript.getter();
              v124 = v123;
              v126 = v125;
              v128 = v127;
              v129 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v122, v123, v125, v127, 2u, 0);
              if (v129 == 2)
              {
                lazy protocol witness table accessor for type Substring and conformance Substring();
                StringProtocol._ephemeralString.getter();
                v130 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v131 = (unsigned __int16 *)objc_msgSend(v130, sel__fastCharacterContents);
                v132 = v130;
                v133 = v131;
                v134 = v132;
                if (v133)
                {
                  StringProtocol._ephemeralString.getter();
                  v135 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  v136 = (uint64_t)objc_msgSend(v135, sel_length);
                  swift_unknownObjectRelease();
                  LOBYTE(v136) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v133, v136, 2u, 0);
                  swift_bridgeObjectRelease();
                  v121 = v46;
                  if ((v136 & 1) == 0)
                  {
LABEL_31:
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease_n();
                    LODWORD(v2) = v154;
LABEL_46:
                    v2 = v2 | 8;
                    goto LABEL_47;
                  }
                }
                else
                {
                  swift_bridgeObjectRetain();
                  v152 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v122, v124, v126, v128, 2u, 0);
                  swift_bridgeObjectRelease_n();
                  v121 = v46;
                  if (!v152)
                    goto LABEL_31;
                }
              }
              else
              {
                v137 = v129;
                swift_bridgeObjectRelease();
                if ((v137 & 1) == 0)
                  goto LABEL_31;
              }
              swift_bridgeObjectRetain();
              if (v121 >> 14 >= (unint64_t)Substring.index(after:)() >> 14)
              {
                v138 = Substring.subscript.getter();
                v140 = v139;
                v142 = v141;
                v144 = v143;
                v145 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v138, v139, v141, v143, 8u, 1);
                if (v145 == 2)
                {
                  lazy protocol witness table accessor for type Substring and conformance Substring();
                  StringProtocol._ephemeralString.getter();
                  v146 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  v147 = (unsigned __int16 *)objc_msgSend(v146, sel__fastCharacterContents);
                  v148 = v146;
                  if (v147)
                  {
                    StringProtocol._ephemeralString.getter();
                    v149 = (void *)String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    v150 = objc_msgSend(v149, sel_length);
                    swift_unknownObjectRelease();
                    v62 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v147, (uint64_t)v150, 8u, 1);
                    swift_bridgeObjectRelease_n();
                    goto LABEL_44;
                  }
                  swift_bridgeObjectRetain();
                  v120 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v138, v140, v142, v144, 8u, 1);
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  v151 = v145;
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  v120 = v151 & 1;
                }
LABEL_86:
                swift_bridgeObjectRelease_n();
                v2 = v154;
                if ((v120 & 1) == 0)
                  goto LABEL_46;
                goto LABEL_47;
              }
              goto LABEL_110;
            }
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
            goto LABEL_111;
          }
          goto LABEL_107;
        }
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
        goto LABEL_108;
      }
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
LABEL_111:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

Swift::Int specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  void *v30;
  unint64_t countAndFlagsBits;
  void *object;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  Swift::String v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  unint64_t v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  Swift::String v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  char v78;
  int v79;
  unint64_t v80;
  char v81;
  char v82;
  Swift::String v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  Swift::String v91;
  uint64_t v92;
  void *v93;
  void *v94;
  Swift::String v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  Swift::String v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  Swift::String v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  void *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  unint64_t v127;
  unint64_t v128;
  void *v129;
  unint64_t v130;
  unint64_t v131;
  void *v132;
  Swift::String v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  Swift::String v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  void *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  void *v149;
  unint64_t v150;
  void *v151;
  unint64_t v152;
  unint64_t v153;
  void *v154;
  Swift::String v155;
  unint64_t v156;
  Swift::Int result;
  void *v158;
  id v159;
  id v160;
  void *v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  char v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unsigned __int8 *v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  uint64_t v181;
  Swift::String v182;
  void *v183;
  unsigned __int16 *v184;
  id v185;
  void *v186;
  id v187;
  char v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  _QWORD v192[4];
  _BYTE v193[16];
  Swift::String *v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  Swift::String v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;

  v4 = 0;
  v5 = (_BYTE *)specialized static RFC3986Parser.parse(urlString:)(a1, a2);
  if (!v5)
    return v4;
  v6 = v5;
  if ((a3 & 1) == 0)
  {
    if ((specialized static RFC3986Parser.validate(parseInfo:)(v5) & 1) == 0)
    {
      swift_release();
      return 0;
    }
    return (Swift::Int)v6;
  }
  v7 = specialized static RFC3986Parser.invalidComponents(of:)(v5);
  if (v7)
  {
    v8 = v7;
    v206 = 0;
    v207 = 0xE000000000000000;
    if ((v6[48] & 1) == 0)
    {
      v9 = String.subscript.getter();
      v10 = MEMORY[0x186DA4634](v9);
      v12 = v11;
      swift_bridgeObjectRelease();
      v203._countAndFlagsBits = v10;
      v203._object = v12;
      v13._countAndFlagsBits = 58;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = v10;
      v14._object = v12;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
    }
    v15 = v8;
    if (v6[72] == 1)
    {
      if (v6[96] == 1 && v6[120] == 1 && (v6[144] & 1) != 0)
        goto LABEL_35;
      v16 = 12079;
      v17 = 0xE200000000000000;
    }
    else
    {
      v18._countAndFlagsBits = 12079;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v19 = String.subscript.getter();
      v23 = v22;
      if ((v15 & 2) != 0)
      {
        if ((v19 ^ v20) >> 14)
        {
          v203._countAndFlagsBits = v19;
          v203._object = (void *)v20;
          v204 = v21;
          v205 = v22;
          MEMORY[0x1E0C80A78](v19);
          v194 = &v203;
          v195 = 2;
          v29 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v193, v28, v27, v26, v23);
          if (v30)
          {
            v24 = (uint64_t)v29;
            v25 = v30;
          }
          else
          {
            countAndFlagsBits = v203._countAndFlagsBits;
            object = v203._object;
            v33 = v204;
            v34 = v205;
            swift_bridgeObjectRetain();
            v24 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(countAndFlagsBits, (unint64_t)object, v33, v34, 2u);
            v25 = v35;
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v24 = 0;
          v25 = (void *)0xE000000000000000;
        }
        v36._countAndFlagsBits = v24;
        v36._object = v25;
        String.append(_:)(v36);
      }
      else
      {
        v203._countAndFlagsBits = v19;
        v203._object = (void *)v20;
        v204 = v21;
        v205 = v22;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        String.append<A>(contentsOf:)();
      }
      swift_bridgeObjectRelease();
      if ((v6[96] & 1) == 0)
      {
        v37 = String.subscript.getter();
        v41 = v40;
        if ((v15 & 4) != 0)
        {
          v201 = 58;
          v202 = 0xE100000000000000;
          if ((v37 ^ v38) >> 14)
          {
            v203._countAndFlagsBits = v37;
            v203._object = (void *)v38;
            v204 = v39;
            v205 = v40;
            MEMORY[0x1E0C80A78](v37);
            v194 = &v203;
            v195 = 2;
            v50 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v193, v49, v48, v47, v41);
            if (v51)
            {
              v45 = (uint64_t)v50;
              v46 = v51;
            }
            else
            {
              v52 = v203._countAndFlagsBits;
              v53 = v203._object;
              v54 = v204;
              v55 = v205;
              swift_bridgeObjectRetain();
              v45 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v52, (unint64_t)v53, v54, v55, 2u);
              v46 = v56;
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            v45 = 0;
            v46 = (void *)0xE000000000000000;
          }
          v57._countAndFlagsBits = v45;
          v57._object = v46;
          String.append(_:)(v57);
          swift_bridgeObjectRelease();
          v43 = v201;
          v44 = v202;
        }
        else
        {
          v203._countAndFlagsBits = 58;
          v203._object = (void *)0xE100000000000000;
          v42._countAndFlagsBits = MEMORY[0x186DA4634](v37, v38, v39, v40);
          String.append(_:)(v42);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v43 = v203._countAndFlagsBits;
          v44 = (unint64_t)v203._object;
        }
        v58 = v44;
        String.append(_:)(*(Swift::String *)&v43);
        swift_bridgeObjectRelease();
      }
      v16 = 64;
      v17 = 0xE100000000000000;
    }
    String.append(_:)(*(Swift::String *)&v16);
LABEL_35:
    if ((v6[120] & 1) != 0)
      goto LABEL_39;
    v59 = String.subscript.getter();
    v63 = v59;
    v64 = v60;
    v65 = v61;
    v66 = v62;
    if ((v15 & 8) == 0)
    {
      v203._countAndFlagsBits = v59;
      v203._object = (void *)v60;
      v204 = v61;
      v205 = v62;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      String.append<A>(contentsOf:)();
      goto LABEL_38;
    }
    v79 = v6[217];
    v198 = v15;
    if (v79 == 1)
    {
      v80 = v59 ^ v60;
      goto LABEL_62;
    }
    if ((v6[48] & 1) != 0)
    {
      v196 = 0;
      v197 = 0;
      v84 = 0;
    }
    else
    {
      v85 = String.subscript.getter();
      v196 = v86;
      v197 = v85;
      v84 = v87;
    }
    v80 = v63 ^ v64;
    if ((v63 ^ v64) >= 0x4000)
    {
      swift_bridgeObjectRetain();
      if (Substring.UTF8View.subscript.getter() == 91)
      {
        if (__OFSUB__(specialized Collection.count.getter(v63, v64, v65, v66), 1))
        {
          __break(1u);
          goto LABEL_153;
        }
        Substring.UTF8View.index(_:offsetBy:)();
        v88 = Substring.UTF8View.subscript.getter();
        swift_bridgeObjectRelease();
        if (v88 == 93)
        {
          swift_bridgeObjectRelease();
          goto LABEL_64;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    if (v84)
    {
      v89 = one-time initialization token for schemesToPercentEncodeHost;
      swift_bridgeObjectRetain();
      if (v89 != -1)
        swift_once();
      v90 = static RFC3986Parser.schemesToPercentEncodeHost;
      v91 = Substring.lowercased()();
      LOBYTE(v90) = specialized Set.contains(_:)(v91._countAndFlagsBits, (uint64_t)v91._object, v90);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((v90 & 1) != 0)
      {
LABEL_62:
        if (!(v80 >> 14))
        {
          swift_bridgeObjectRelease();
          v92 = 0;
          v93 = (void *)0xE000000000000000;
          goto LABEL_65;
        }
LABEL_64:
        swift_bridgeObjectRetain();
        v92 = specialized static RFC3986Parser.percentEncodeHost<A>(_:)(v63, v64, v65, v66);
        v93 = v94;
        swift_bridgeObjectRelease_n();
        if (!v93)
        {
LABEL_114:
          swift_release();
LABEL_141:
          swift_bridgeObjectRelease();
          return 0;
        }
LABEL_65:
        v95._countAndFlagsBits = v92;
        v95._object = v93;
        String.append(_:)(v95);
        swift_bridgeObjectRelease();
        v15 = v198;
        if ((v6[144] & 1) == 0)
          goto LABEL_40;
        goto LABEL_66;
      }
    }
    v84 = MEMORY[0x186DA4634](v63, v64, v65, v66);
    v63 = v123;
    swift_bridgeObjectRelease();
    v124 = v84 & 0xFFFFFFFFFFFFLL;
    if ((v63 & 0x2000000000000000) != 0)
      v125 = HIBYTE(v63) & 0xF;
    else
      v125 = v84 & 0xFFFFFFFFFFFFLL;
    if (!v125)
    {
      swift_bridgeObjectRelease();
      v64 = 0;
      v66 = 0xE000000000000000;
      v15 = v198;
      goto LABEL_116;
    }
    if ((v63 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      v15 = v198;
      goto LABEL_112;
    }
    if ((v63 & 0x2000000000000000) != 0)
    {
      v203._countAndFlagsBits = v84;
      v203._object = (void *)(v63 & 0xFFFFFFFFFFFFFFLL);
      v201 = (uint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      v202 = 0;
      swift_bridgeObjectRetain_n();
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v203, HIBYTE(v63) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v201, 1, (unsigned __int8 *)&v203, HIBYTE(v63) & 0xF, (uint64_t *)&v199);
      v64 = v199;
      v66 = v200;
      swift_release();
      v15 = v198;
      goto LABEL_111;
    }
    if ((v84 & 0x1000000000000000) == 0)
      goto LABEL_158;
    v126 = (unsigned __int8 *)((v63 & 0xFFFFFFFFFFFFFFFLL) + 32);
    while (1)
    {
      v15 = v198;
      v203._countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      v203._object = 0;
      swift_bridgeObjectRetain_n();
      v64 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v126, v124, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v203, 1, v126, v124);
      v66 = v127;
LABEL_111:
      swift_bridgeObjectRelease();
      if (v66 != 1)
      {
        swift_bridgeObjectRelease_n();
        if (!v66)
          goto LABEL_114;
        goto LABEL_116;
      }
LABEL_112:
      v203._countAndFlagsBits = v84;
      v203._object = (void *)v63;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      v158 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v159 = objc_msgSend(v158, sel__fastCharacterContents, v196, v197);
      v160 = v158;
      if (v159)
      {
        v203._countAndFlagsBits = v84;
        v203._object = (void *)v63;
        StringProtocol._ephemeralString.getter();
        v161 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v162 = objc_msgSend(v161, sel_length);
        v163 = swift_unknownObjectRelease();
        v84 = (uint64_t)&v196;
        v164 = MEMORY[0x1E0C80A78](v163);
        LOBYTE(v194) = 1;
        MEMORY[0x1E0C80A78](v164);
        v192[2] = v159;
        v192[3] = v162;
        v64 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v159, (uint64_t)v162, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:), 0, (uint64_t (*)(_QWORD))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), v165, partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), (uint64_t)v192);
        v66 = v166;
        swift_bridgeObjectRelease_n();
        if (!v66)
          goto LABEL_114;
        goto LABEL_116;
      }
      v203._countAndFlagsBits = v84;
      v203._object = (void *)v63;
      swift_bridgeObjectRetain();
      v175 = String.init<A>(_:)();
      v176 = v174;
      if ((v174 & 0x1000000000000000) != 0)
      {
        v175 = static String._copying(_:)();
        v191 = v190;
        swift_bridgeObjectRelease();
        v176 = v191;
        if ((v191 & 0x2000000000000000) != 0)
        {
LABEL_164:
          v203._countAndFlagsBits = v175;
          v203._object = (void *)(v176 & 0xFFFFFFFFFFFFFFLL);
          v201 = (uint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
          v202 = 0;
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v203, HIBYTE(v176) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v201, 1, (unsigned __int8 *)&v203, HIBYTE(v176) & 0xF, (uint64_t *)&v199);
          v64 = v199;
          v66 = v200;
          swift_release();
          goto LABEL_165;
        }
      }
      else if ((v174 & 0x2000000000000000) != 0)
      {
        goto LABEL_164;
      }
      if ((v175 & 0x1000000000000000) != 0)
      {
        v177 = (unsigned __int8 *)((v176 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v178 = v175 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v177 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      v203._countAndFlagsBits = (uint64_t)@nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      v203._object = 0;
      v64 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v177, v178, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v203, 1, v177, v178);
      v66 = v179;
LABEL_165:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if (!v66)
        goto LABEL_114;
LABEL_116:
      v167 = specialized Collection.first.getter(v64, v66);
      if ((v167 & 0x1FF) != 0x5B)
        goto LABEL_142;
      if ((v66 & 0x1000000000000000) != 0)
      {
LABEL_153:
        result = String.UTF8View._foreignCount()();
        if (__OFSUB__(result, 1))
        {
          __break(1u);
          return result;
        }
        v169 = (v64 >> 59) & 1;
        v167 = MEMORY[0x186DA485C](15, result - 1, v64, v66);
        v15 = v198;
LABEL_122:
        if ((v167 & 0xC) != 4 << v169)
          goto LABEL_123;
        goto LABEL_156;
      }
      v168 = HIBYTE(v66) & 0xF;
      if ((v66 & 0x2000000000000000) == 0)
        v168 = v64 & 0xFFFFFFFFFFFFLL;
      if (v168)
      {
        v167 = (v168 << 16) - 65532;
        LOBYTE(v169) = 1;
        goto LABEL_122;
      }
      __break(1u);
LABEL_156:
      v167 = _StringGuts._slowEnsureMatchingEncoding(_:)(v167, v64, v66);
LABEL_123:
      v170 = HIBYTE(v66) & 0xF;
      if ((v66 & 0x2000000000000000) == 0)
        v170 = v64 & 0xFFFFFFFFFFFFLL;
      v171 = v167 >> 16;
      if (v167 >> 16 < v170)
      {
        if ((v66 & 0x1000000000000000) != 0)
        {
          v173 = String.UTF8View._foreignSubscript(position:)();
        }
        else if ((v66 & 0x2000000000000000) != 0)
        {
          v203._countAndFlagsBits = v64;
          v203._object = (void *)(v66 & 0xFFFFFFFFFFFFFFLL);
          v173 = *((_BYTE *)&v203._countAndFlagsBits + v171);
        }
        else
        {
          if ((v64 & 0x1000000000000000) != 0)
            v172 = (v66 & 0xFFFFFFFFFFFFFFFLL) + 32;
          else
            v172 = _StringObject.sharedUTF8.getter();
          v173 = *(_BYTE *)(v172 + v171);
        }
        if (v173 == 93)
        {
          if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v64, v66) & 1) == 0)
          {
LABEL_140:
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_141;
          }
        }
        else
        {
LABEL_142:
          if ((v66 & 0x1000000000000000) != 0)
          {
            v203._countAndFlagsBits = v64;
            v203._object = (void *)v66;
            lazy protocol witness table accessor for type String and conformance String();
            StringProtocol._ephemeralString.getter();
            v183 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v184 = (unsigned __int16 *)objc_msgSend(v183, sel__fastCharacterContents);
            v185 = v183;
            if (v184)
            {
              v203._countAndFlagsBits = v64;
              v203._object = (void *)v66;
              StringProtocol._ephemeralString.getter();
              v186 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v187 = objc_msgSend(v186, sel_length);
              swift_unknownObjectRelease();
              v188 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v184, (uint64_t)v187, 4u, 1);
            }
            else
            {
              v188 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v64, v66, 4u, 1);
            }
            v15 = v198;
            if ((v188 & 1) == 0)
              goto LABEL_140;
          }
          else
          {
            if ((v66 & 0x2000000000000000) != 0)
            {
              v181 = HIBYTE(v66) & 0xF;
              v203._countAndFlagsBits = v64;
              v203._object = (void *)(v66 & 0xFFFFFFFFFFFFFFLL);
              v180 = (char *)&v203;
            }
            else if ((v64 & 0x1000000000000000) != 0)
            {
              v180 = (char *)((v66 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v181 = v64 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v180 = (char *)_StringObject.sharedUTF8.getter();
            }
            if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v180, v181, 4u, 1))goto LABEL_140;
          }
        }
        v182._countAndFlagsBits = v64;
        v182._object = (void *)v66;
        String.append(_:)(v182);
LABEL_38:
        swift_bridgeObjectRelease();
LABEL_39:
        if ((v6[144] & 1) == 0)
        {
LABEL_40:
          v67 = String.subscript.getter();
          v71 = v70;
          if ((v67 ^ v68) >= 0x4000)
          {
            v72 = v67;
            v73 = v68;
            v74 = v69;
            v75 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v67, v68, v69, v70, 10);
            if ((v76 & 0x100) != 0)
            {
              v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized _parseInteger<A, B>(ascii:radix:)(v72, v73, v74, v71, 10);
              v82 = v81;
              swift_bridgeObjectRelease();
              if ((v82 & 1) != 0)
                goto LABEL_66;
            }
            else
            {
              v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v75;
              v78 = v76;
              swift_bridgeObjectRelease();
              if ((v78 & 1) != 0)
                goto LABEL_66;
            }
            v203._countAndFlagsBits = 58;
            v203._object = (void *)0xE100000000000000;
            v201 = (uint64_t)v77;
            v83._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v83);
            swift_bridgeObjectRelease();
            String.append(_:)(v203);
          }
          swift_bridgeObjectRelease();
        }
LABEL_66:
        if ((v6[168] & 1) != 0)
          v96 = MEMORY[0x186DA5030](0, 0xE000000000000000);
        else
          v96 = String.subscript.getter();
        v100 = v96;
        v101 = v97;
        v102 = v98;
        v103 = v99;
        if ((v15 & 0x20) != 0)
        {
          if ((v96 ^ v97) >> 14)
          {
            swift_bridgeObjectRetain();
            v104 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v100, v101, v102, v103);
            v105 = v106;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            swift_bridgeObjectRelease();
            v104 = 0;
            v105 = (void *)0xE000000000000000;
          }
          v107._countAndFlagsBits = v104;
          v107._object = v105;
          String.append(_:)(v107);
        }
        else
        {
          v203._countAndFlagsBits = v96;
          v203._object = (void *)v97;
          v204 = v98;
          v205 = v99;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          String.append<A>(contentsOf:)();
        }
        swift_bridgeObjectRelease();
        if ((v6[192] & 1) == 0)
        {
          v108 = String.subscript.getter();
          v112 = v111;
          if ((v15 & 0x40) != 0)
          {
            v201 = 63;
            v202 = 0xE100000000000000;
            if ((v108 ^ v109) >> 14)
            {
              v203._countAndFlagsBits = v108;
              v203._object = (void *)v109;
              v204 = v110;
              v205 = v111;
              MEMORY[0x1E0C80A78](v108);
              v194 = &v203;
              v195 = 64;
              v121 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v193, v120, v119, v118, v112);
              if (v122)
              {
                v116 = (uint64_t)v121;
                v117 = v122;
              }
              else
              {
                v128 = v203._countAndFlagsBits;
                v129 = v203._object;
                v130 = v204;
                v131 = v205;
                swift_bridgeObjectRetain();
                v116 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v128, (unint64_t)v129, v130, v131, 0x40u);
                v117 = v132;
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              v116 = 0;
              v117 = (void *)0xE000000000000000;
            }
            v133._countAndFlagsBits = v116;
            v133._object = v117;
            String.append(_:)(v133);
            swift_bridgeObjectRelease();
            v114 = v201;
            v115 = v202;
          }
          else
          {
            v203._countAndFlagsBits = 63;
            v203._object = (void *)0xE100000000000000;
            v113._countAndFlagsBits = MEMORY[0x186DA4634](v108, v109, v110, v111);
            String.append(_:)(v113);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v114 = v203._countAndFlagsBits;
            v115 = (unint64_t)v203._object;
          }
          v134 = v115;
          String.append(_:)(*(Swift::String *)&v114);
          swift_bridgeObjectRelease();
        }
        if ((v6[216] & 1) == 0)
        {
          v135 = String.subscript.getter();
          v139 = v138;
          if (v15 < 0)
          {
            v201 = 35;
            v202 = 0xE100000000000000;
            if ((v135 ^ v136) >> 14)
            {
              v203._countAndFlagsBits = v135;
              v203._object = (void *)v136;
              v204 = v137;
              v205 = v138;
              MEMORY[0x1E0C80A78](v135);
              v194 = &v203;
              v195 = 64;
              v148 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v193, v147, v146, v145, v139);
              if (v149)
              {
                v143 = (uint64_t)v148;
                v144 = v149;
              }
              else
              {
                v150 = v203._countAndFlagsBits;
                v151 = v203._object;
                v152 = v204;
                v153 = v205;
                swift_bridgeObjectRetain();
                v143 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v150, (unint64_t)v151, v152, v153, 0x40u);
                v144 = v154;
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              v143 = 0;
              v144 = (void *)0xE000000000000000;
            }
            v155._countAndFlagsBits = v143;
            v155._object = v144;
            String.append(_:)(v155);
            swift_bridgeObjectRelease();
            v141 = v201;
            v142 = v202;
          }
          else
          {
            v203._countAndFlagsBits = 35;
            v203._object = (void *)0xE100000000000000;
            v140._countAndFlagsBits = MEMORY[0x186DA4634](v135, v136, v137, v138);
            String.append(_:)(v140);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v141 = v203._countAndFlagsBits;
            v142 = (unint64_t)v203._object;
          }
          v156 = v142;
          String.append(_:)(*(Swift::String *)&v141);
          swift_bridgeObjectRelease();
        }
        v4 = specialized static RFC3986Parser.parse(urlString:)(v206, v207);
        swift_bridgeObjectRelease();
        swift_release();
        return v4;
      }
      __break(1u);
LABEL_158:
      v126 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      v124 = v189;
    }
  }
  return (Swift::Int)v6;
}

uint64_t sub_181CC2DF4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of URLBufferParseInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLBufferParseInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

__n128 __swift_memcpy188_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_OWORD *)(a1 + 172) = *(__int128 *)((char *)a2 + 172);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for URLBufferParseInfo(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 188))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 185);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for URLBufferParseInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 184) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 188) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 188) = 0;
    if (a2)
      *(_BYTE *)(result + 185) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for URLBufferParseInfo()
{
  return &unk_1E0F20988;
}

BOOL specialized UErrorCode.checkSuccessAndLogError(_:)(UErrorCode a1)
{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD00000000000001ELL, 0x800000018230A700);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000017, 0x800000018230A830);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000027, 0x800000018230A800);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000024, 0x800000018230A7D0);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD00000000000002CLL, 0x800000018230A7A0);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000032, 0x800000018230A760);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD000000000000012, 0x800000018230A740);
}

{
  return specialized UErrorCode.checkSuccessAndLogError(_:)(a1, 0xD00000000000001FLL, 0x800000018230A720);
}

BOOL specialized UErrorCode.checkSuccessAndLogError(_:)(UErrorCode a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v14;

  if (a1 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static ICUError.logger);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v14 = v10;
      *(_DWORD *)v9 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2080;
      v11 = ICUError.debugDescription.getter(a1);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1817D9000, v7, v8, "%s. Error: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186DA9E78](v10, -1, -1);
      MEMORY[0x186DA9E78](v9, -1, -1);
    }

  }
  return a1 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t specialized _withResizingUCharBuffer(initialSize:_:)(uint64_t isStackAllocationSafe)
{
  return specialized _withResizingUCharBuffer(initialSize:_:)(isStackAllocationSafe);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  if ((isStackAllocationSafe & 0x80000000) != 0)
    __break(1u);
  if ((int)isStackAllocationSafe < 513
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v5[-1] - v1, v5);
    return v5[0];
  }
  else
  {
    v3 = swift_slowAlloc();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v3, v5);
    MEMORY[0x186DA9E78](v3, -1, -1);
    return v5[0];
  }
}

char *specialized withVaList<A>(_:_:)(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  type metadata accessor for __VaListBuilder();
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = 8;
  v4[3] = 0;
  v5 = v4 + 3;
  v4[4] = 0;
  v4[5] = 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = 0;
    v8 = a1 + 32;
    while (1)
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v8 + 40 * v7, (uint64_t)v26);
      v9 = v27;
      v10 = v28;
      __swift_project_boxed_opaque_existential_1(v26, v27);
      result = (char *)MEMORY[0x186DA5FA8](v9, v10);
      v12 = *v5;
      v13 = *((_QWORD *)result + 2);
      v14 = __OFADD__(*v5, v13);
      v15 = *v5 + v13;
      if (v14)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return result;
      }
      v16 = result;
      v17 = v4[4];
      if (v17 >= v15)
        goto LABEL_18;
      if (v17 + 0x4000000000000000 < 0)
        goto LABEL_29;
      v18 = (char *)v4[5];
      if (2 * v17 > v15)
        v15 = 2 * v17;
      v4[4] = v15;
      if ((unint64_t)(v15 - 0x1000000000000000) >> 61 != 7)
        goto LABEL_30;
      result = (char *)swift_slowAlloc();
      v4[5] = result;
      if (v18)
        break;
LABEL_19:
      if (!result)
        goto LABEL_32;
      v20 = *((_QWORD *)v16 + 2);
      if (v20)
      {
        v21 = (uint64_t *)(v16 + 32);
        v22 = *v5;
        while (1)
        {
          v23 = *v21++;
          *(_QWORD *)&result[8 * v22] = v23;
          v22 = *v5 + 1;
          if (__OFADD__(*v5, 1))
            break;
          *v5 = v22;
          if (!--v20)
            goto LABEL_3;
        }
        __break(1u);
        goto LABEL_28;
      }
LABEL_3:
      ++v7;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      if (v7 == v6)
        goto LABEL_25;
    }
    if (result != v18 || result >= &v18[8 * v12])
      memmove(result, v18, 8 * v12);
    __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
    result = (char *)v4[5];
    goto LABEL_19;
  }
LABEL_25:
  result = (char *)__VaListBuilder.va_list()();
  if (*(_QWORD *)(a3 + 16) >> 31)
    goto LABEL_31;
  *a2 = u_vformatMessage();
  swift_bridgeObjectRelease();
  return (char *)swift_release();
}

uint64_t _withFixedUCharBuffer(size:defaultIsError:_:)(uint64_t isStackAllocationSafe, unsigned __int8 a2, uint64_t (*a3)(uint64_t, uint64_t, int *))
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[4];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((isStackAllocationSafe & 0x80000000) != 0)
    __break(1u);
  v5 = isStackAllocationSafe;
  if ((int)isStackAllocationSafe <= 512
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    v6 = MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v8 = &v16[-v7];
    v17 = 0;
    v9 = ((uint64_t (*)(_BYTE *, uint64_t, int *, __n128))a3)(&v16[-v7], v5, &v17, v6);
    if ((v9 & 0x100000000) != 0 || v17 > 0)
      return 0;
    v10 = (int)v9 <= (int)v5 && ((v17 == -127) & a2) == 0;
    if (!v10 || (int)v9 <= 0)
      return 0;
    else
      return specialized String.init(_utf16:)((uint64_t)v8, v9);
  }
  else
  {
    v12 = swift_slowAlloc();
    v17 = 0;
    v13 = a3(v12, v5, &v17);
    if ((v13 & 0x100000000) != 0 || v17 > 0)
    {
      v15 = 0;
    }
    else
    {
      v15 = 0;
      if ((int)v13 <= (int)v5 && ((v17 == -127) & a2) == 0 && (int)v13 > 0)
        v15 = specialized String.init(_utf16:)(v12, v13);
    }
    MEMORY[0x186DA9E78](v12, -1, -1);
  }
  return v15;
}

const char *ICUError.debugDescription.getter(UErrorCode a1)
{
  const char *result;
  uint64_t v2;
  Swift::String v3;

  result = u_errorName(a1);
  if (result)
  {
    result = (const char *)MEMORY[0x186DA4658]();
    if (!v2)
    {
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      return (const char *)0xD000000000000012;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static ICUError.logger);
  __swift_project_value_buffer(v0, (uint64_t)static ICUError.logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static _CalendarGregorian.logger);
  __swift_project_value_buffer(v0, (uint64_t)static _CalendarGregorian.logger);
  return Logger.init(subsystem:category:)();
}

const char *protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICUError()
{
  UErrorCode *v0;

  return ICUError.debugDescription.getter(*v0);
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(a1, a2, a3, a4, a5, MEMORY[0x1E0DE6828], a6);
}

{
  return specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(a1, a2, a3, a4, a5, MEMORY[0x1E0DE6820], a6);
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t, int *, double)@<X6>, uint64_t *a7@<X8>)
{
  double v12;
  uint64_t isStackAllocationSafe;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  if (!a1)
LABEL_24:
    __break(1u);
  v12 = (double)a4;
  isStackAllocationSafe = a6(*(_QWORD *)(a3 + 16), a5, a1, a2, &v29, (double)a4);
  if (v29 != 15)
  {
    if (v29 > 0 || (int)isStackAllocationSafe <= 0)
    {
      result = swift_release();
      *a7 = 0;
      a7[1] = 0;
      return result;
    }
    v18 = specialized String.init(_utf16:)(a1, isStackAllocationSafe);
    v19 = v23;
    goto LABEL_17;
  }
  v14 = (isStackAllocationSafe + 1);
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if ((v14 & 0x80000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((int)v14 < 513
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v16 = (char *)&v28 - v15;
    v28 = 0;
    v17 = a6(*(_QWORD *)(a3 + 16), a5, (uint64_t)&v28 - v15, v14, &v28, v12);
    v18 = 0;
    v19 = 0;
    if (v28 <= 0 && v17 > 0)
    {
      v18 = specialized String.init(_utf16:)((uint64_t)v16, v17);
      v19 = v20;
    }
LABEL_17:
    result = swift_release();
    *a7 = v18;
    a7[1] = v19;
    return result;
  }
  v24 = swift_slowAlloc();
  v28 = 0;
  v25 = a6(*(_QWORD *)(a3 + 16), a5, v24, v14, &v28, v12);
  v26 = 0;
  v27 = 0;
  if (v28 <= 0 && v25 > 0)
    v26 = specialized String.init(_utf16:)(v24, v25);
  *a7 = v26;
  a7[1] = v27;
  MEMORY[0x186DA9E78](v24, -1, -1);
  return swift_release();
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t isStackAllocationSafe;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  if (!a1)
LABEL_27:
    __break(1u);
  closure #1 in ICUListFormatter.format(strings:)(a1, a2, (uint64_t)&v27, a3, a4, a5, a6);
  if ((isStackAllocationSafe & 0x100000000) != 0)
  {
LABEL_15:
    swift_release();
    *a7 = 0;
    a7[1] = 0;
    return swift_bridgeObjectRelease();
  }
  if (v27 != 15)
  {
    if (v27 <= 0 && (int)isStackAllocationSafe > 0)
    {
      v18 = specialized String.init(_utf16:)(a1, isStackAllocationSafe);
      v19 = v21;
LABEL_17:
      swift_release();
      *a7 = v18;
      a7[1] = v19;
      return swift_bridgeObjectRelease();
    }
    goto LABEL_15;
  }
  v14 = (isStackAllocationSafe + 1);
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if ((v14 & 0x80000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if ((int)v14 < 513
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v16 = (char *)&v26 - v15;
    v26 = 0;
    closure #1 in ICUListFormatter.format(strings:)((uint64_t)&v26 - v15, v14, (uint64_t)&v26, a3, a4, a5, a6);
    v18 = 0;
    if ((v17 & 0x100000000) != 0)
    {
      v19 = 0;
    }
    else
    {
      v19 = 0;
      if (v26 <= 0 && (int)v17 > 0)
      {
        v18 = specialized String.init(_utf16:)((uint64_t)v16, v17);
        v19 = v20;
      }
    }
    goto LABEL_17;
  }
  v23 = swift_slowAlloc();
  v26 = 0;
  closure #1 in ICUListFormatter.format(strings:)(v23, v14, (uint64_t)&v26, a3, a4, a5, a6);
  if ((v24 & 0x100000000) != 0 || v26 > 0 || (int)v24 <= 0)
  {
    *a7 = 0;
    a7[1] = 0;
  }
  else
  {
    *a7 = specialized String.init(_utf16:)(v23, v24);
    a7[1] = v25;
  }
  MEMORY[0x186DA9E78](v23, -1, -1);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t *a3@<X8>)
{
  int BestPatternWithOptions;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  if (!a1)
LABEL_7:
    __break(1u);
  if (*(_QWORD *)(a2 + 16) >> 31)
  {
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_7;
  }
  BestPatternWithOptions = udatpg_getBestPatternWithOptions();
  if (BestPatternWithOptions <= 0)
  {
    result = swift_bridgeObjectRelease();
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = specialized String.init(_utf16:)(a1, BestPatternWithOptions);
    v8 = v7;
    result = swift_bridgeObjectRelease();
    *a3 = v6;
    a3[1] = v8;
  }
  return result;
}

uint64_t specialized closure #1 in _withResizingCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  if (!a1)
    goto LABEL_10;
  if (!a2)
    goto LABEL_11;
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    __break(1u);
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  v6 = ucasemap_utf8ToTitle();
  if (v6 <= 0)
  {
    result = swift_release();
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    *(_BYTE *)(a1 + v6) = 0;
    v7 = MEMORY[0x186DA4658](a1);
    v9 = v8;
    result = swift_release();
    *a4 = v7;
    a4[1] = v9;
  }
  return result;
}

uint64_t specialized _withResizingUCharBuffer(initialSize:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  if ((a1 & 0x80000000) != 0)
    __break(1u);
  swift_retain_n();
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if ((int)a1 < 513 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v12 = (char *)&v17[-1] - v11;
    swift_retain();
    swift_bridgeObjectRetain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v12, a1, a2, a3, a4, a5, v17);
    v13 = v17[0];
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  else
  {
    v14 = swift_slowAlloc();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v14, a1, a2, a3, a4, a5, v17);
    MEMORY[0x186DA9E78](v14, -1, -1);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v17[0];
  }
  return v13;
}

uint64_t specialized _withFixedUCharBuffer(size:defaultIsError:_:)(uint64_t isStackAllocationSafe, unsigned __int8 a2)
{
  int v3;
  uint64_t v4;
  char *v5;
  int DisplayKeywordValue;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((isStackAllocationSafe & 0x80000000) != 0)
    __break(1u);
  v3 = isStackAllocationSafe;
  if ((int)isStackAllocationSafe < 513
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v5 = (char *)&v11 - v4;
    HIDWORD(v11) = 0;
    String.utf8CString.getter();
    String.utf8CString.getter();
    String.utf8CString.getter();
    DisplayKeywordValue = uloc_getDisplayKeywordValue();
    swift_release();
    swift_release();
    swift_release();
    if (SHIDWORD(v11) <= 0)
    {
      v7 = 0;
      if (((HIDWORD(v11) == -127) & a2) != 1 && DisplayKeywordValue <= v3 && DisplayKeywordValue > 0)
        return specialized String.init(_utf16:)((uint64_t)v5, DisplayKeywordValue);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v8 = swift_slowAlloc();
    String.utf8CString.getter();
    String.utf8CString.getter();
    String.utf8CString.getter();
    v9 = uloc_getDisplayKeywordValue();
    swift_release();
    swift_release();
    swift_release();
    v7 = 0;
    if (v9 <= v3 && v9 > 0)
      v7 = specialized String.init(_utf16:)(v8, v9);
    MEMORY[0x186DA9E78](v8, -1, -1);
  }
  return v7;
}

{
  int v3;
  uint64_t v4;
  char *v5;
  int v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((isStackAllocationSafe & 0x80000000) != 0)
    __break(1u);
  v3 = isStackAllocationSafe;
  if ((int)isStackAllocationSafe < 513
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v5 = (char *)&v13 - v4;
    HIDWORD(v13) = 0;
    String.utf8CString.getter();
    v6 = ucurr_forLocale();
    swift_release();
    if (SHIDWORD(v13) > 0)
      return 0;
    v7 = ((HIDWORD(v13) == -127) & a2) != 1 && v6 <= v3;
    if (!v7 || v6 <= 0)
      return 0;
    else
      return specialized String.init(_utf16:)((uint64_t)v5, v6);
  }
  else
  {
    v9 = swift_slowAlloc();
    String.utf8CString.getter();
    v10 = ucurr_forLocale();
    swift_release();
    v11 = 0;
    if (v10 <= v3 && v10 > 0)
      v11 = specialized String.init(_utf16:)(v9, v10);
    MEMORY[0x186DA9E78](v9, -1, -1);
  }
  return v11;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t isStackAllocationSafe, __int128 *a2)
{
  int v2;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int Script;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = isStackAllocationSafe + 1;
  if (__OFADD__((_DWORD)isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v2 < 0)
    goto LABEL_15;
  if (v2 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v5 = (char *)&v17 - v4;
    v18 = 0;
    v6 = a2[3];
    v21 = a2[2];
    v22 = v6;
    v7 = a2[5];
    v23 = a2[4];
    v24 = v7;
    v8 = a2[1];
    v19 = *a2;
    v20 = v8;
    Locale.Language.maximalIdentifier.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    Script = uloc_getScript();
    swift_release();
    v10 = 0;
    if (v18 <= 0 && Script > 0)
    {
      v5[Script] = 0;
      return MEMORY[0x186DA4658](v5);
    }
  }
  else
  {
    v11 = swift_slowAlloc();
    v18 = 0;
    v12 = a2[3];
    v21 = a2[2];
    v22 = v12;
    v13 = a2[5];
    v23 = a2[4];
    v24 = v13;
    v14 = a2[1];
    v19 = *a2;
    v20 = v14;
    Locale.Language.maximalIdentifier.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v15 = uloc_getScript();
    swift_release();
    v10 = 0;
    if (v15 > 0)
    {
      *(_BYTE *)(v11 + v15) = 0;
      v10 = MEMORY[0x186DA4658](v11);
    }
    MEMORY[0x186DA9E78](v11, -1, -1);
  }
  return v10;
}

uint64_t specialized _withFixedUCharBuffer(size:defaultIsError:_:)(uint64_t isStackAllocationSafe, unsigned __int8 a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[20];

  v15[19] = *MEMORY[0x1E0C80C00];
  if ((isStackAllocationSafe & 0x80000000) != 0)
    __break(1u);
  v5 = isStackAllocationSafe;
  if ((int)isStackAllocationSafe < 513
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v7 = (char *)v15 - v6;
    v15[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18205C850;
    v9 = MEMORY[0x1E0DEB100];
    *(_QWORD *)(inited + 56) = MEMORY[0x1E0DEB070];
    *(_QWORD *)(inited + 64) = v9;
    *(_QWORD *)(inited + 32) = 0x4024000000000000;
    swift_bridgeObjectRetain();
    specialized withVaList<A>(_:_:)(inited, v15, a3);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
    swift_arrayDestroy();
    if (SHIDWORD(v15[0]) <= 0)
    {
      v10 = 0;
      if (((HIDWORD(v15[0]) == -127) & a2) != 1 && SLODWORD(v15[0]) <= v5 && SLODWORD(v15[0]) > 0)
        return specialized String.init(_utf16:)((uint64_t)v7, LODWORD(v15[0]));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v11 = swift_slowAlloc();
    v15[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v12 = swift_initStackObject();
    *(_OWORD *)(v12 + 16) = xmmword_18205C850;
    v13 = MEMORY[0x1E0DEB100];
    *(_QWORD *)(v12 + 56) = MEMORY[0x1E0DEB070];
    *(_QWORD *)(v12 + 64) = v13;
    *(_QWORD *)(v12 + 32) = 0x4024000000000000;
    swift_bridgeObjectRetain();
    specialized withVaList<A>(_:_:)(v12, v15, a3);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
    swift_arrayDestroy();
    if (SHIDWORD(v15[0]) <= 0)
    {
      v10 = 0;
      if (((HIDWORD(v15[0]) == -127) & a2) != 1 && SLODWORD(v15[0]) <= v5 && SLODWORD(v15[0]) > 0)
        v10 = specialized String.init(_utf16:)(v11, LODWORD(v15[0]));
    }
    else
    {
      v10 = 0;
    }
    MEMORY[0x186DA9E78](v11, -1, -1);
  }
  return v10;
}

ValueMetadata *type metadata accessor for ICUError()
{
  return &type metadata for ICUError;
}

ValueMetadata *type metadata accessor for ICU()
{
  return &type metadata for ICU;
}

id @objc static NSTimeZone._resetSystemTimeZone()()
{
  return specialized static NSTimeZone._resetSystemTimeZone()();
}

id @objc static NSTimeZone._abbreviationDictionary()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = static TimeZoneCache.cache + 16;
  v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.timeZoneAbbreviations()(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return (id)_NativeDictionary.bridged()();
}

uint64_t @objc static NSTimeZone._setAbbreviationDictionary(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3);
  if (one-time initialization token for cache != -1)
    v3 = swift_once();
  v4 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1E0C80A78](v3);
  swift_retain_n();
  os_unfair_lock_lock(v4 + 36);
  partial apply for closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)((uint64_t)&v4[4]);
  os_unfair_lock_unlock(v4 + 36);
  swift_bridgeObjectRelease();
  return swift_release_n();
}

id @objc static NSTimeZone._knownTimeZoneIdentifiers()()
{
  if (one-time initialization token for icuTZIdentifiers != -1)
    swift_once();
  swift_bridgeObjectRetain();
  return (id)_ContiguousArrayBuffer._asCocoaArray()();
}

id @objc static NSTimeZone._timeZoneDataVersion()()
{
  uint64_t v0;
  void *v1;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v0 = MEMORY[0x186DAA1FC](&v3);
  if (v0 && v3 <= 0)
    MEMORY[0x186DA4658](v0);
  v1 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t _NSSwiftTimeZone.nextDaylightSavingTimeTransition.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  timespec __tp;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  ObjectType = swift_getObjectType();
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  (*(void (**)(timespec *, uint64_t, uint64_t))(v1 + 80))(&__tp, ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for _NSSwiftTimeZone.State(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for _NSSwiftTimeZone.State(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *(_QWORD *)a2;
      outlined copy of Data._Representation(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      outlined consume of Data._Representation(v7, v8);
      return a1;
    }
    outlined destroy of Data((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  outlined copy of Data._Representation(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  destroy for Data();
  return a1;
}

uint64_t *assignWithTake for _NSSwiftTimeZone.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v6, v4);
      return a1;
    }
    outlined destroy of Data((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for _NSSwiftTimeZone.State(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _NSSwiftTimeZone.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = a2 - 12;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(a1, *(_QWORD *)(v1 + 16));
}

id specialized static NSTimeZone._resetSystemTimeZone()()
{
  uint64_t *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  objc_class *v4;
  char *v5;
  uint64_t v6;
  __int128 v8;
  objc_super v9;
  __int128 v10;

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (uint64_t *)(static TimeZoneCache.cache + 16);
  v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.reset()(v0, &v10);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  v8 = v10;
  if (one-time initialization token for cache != -1)
    swift_once();
  v2 = static CalendarCache.cache + 16;
  v3 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in CalendarCache.reset()(v2);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  if (!(_QWORD)v8)
    return 0;
  v4 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  v5 = (char *)objc_allocWithZone(v4);
  *(_OWORD *)&v5[OBJC_IVAR____NSSwiftTimeZone_timeZone] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 32) = 0;
  *(_OWORD *)(v6 + 16) = xmmword_1820E9CE0;
  *(_QWORD *)&v5[OBJC_IVAR____NSSwiftTimeZone_lock] = v6;
  v9.receiver = v5;
  v9.super_class = v4;
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t _AsyncBytesBuffer.init(capacity:)()
{
  uint64_t result;

  type metadata accessor for _AsyncBytesBuffer.Storage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t type metadata accessor for _AsyncBytesBuffer.Storage()
{
  uint64_t result;

  result = type metadata singleton initialization cache for _AsyncBytesBuffer.Storage;
  if (!type metadata singleton initialization cache for _AsyncBytesBuffer.Storage)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t _AsyncBytesBuffer.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 24) = v5;
    *v5 = v0;
    v5[1] = NSURLSession.AsyncBytes.Iterator.next();
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    v3 = *v2;
    *(_QWORD *)(v1 + 8) = v2 + 1;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
}

uint64_t IOActor.read(from:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t IOActor.read(from:into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
    v2 = *(_QWORD *)(v0 + 32) - v1;
  else
    v2 = 0;
  NSFileHandle.read(upToCount:)(v2);
  if (v3 >> 60 != 15)
    __asm { BR              X10 }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t one-time initialization function for default()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for IOActor();
  v0 = swift_allocObject();
  result = swift_defaultActor_initialize();
  static IOActor.default = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for URL.UnicodeLookalikeTable();
  result = swift_initStaticObject();
  static URL.UnicodeLookalikeTable.default = result;
  return result;
}

uint64_t IOActor.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance IOActor()
{
  uint64_t v0;

  return v0;
}

uint64_t _AsyncBytesBuffer.Storage.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t _AsyncBytesBuffer.nextPointer.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _AsyncBytesBuffer.nextPointer.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_AsyncBytesBuffer.nextPointer.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t _AsyncBytesBuffer.endPointer.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _AsyncBytesBuffer.endPointer.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_AsyncBytesBuffer.endPointer.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t _AsyncBytesBuffer.reloadBufferAndNext()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 64);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(*(_QWORD *)(v0 + 32));
  if (!v1)
    *(_BYTE *)(*(_QWORD *)(v0 + 24) + 32) = 1;
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(unsigned __int8 **)(v2 + 8);
  if (v3 == *(unsigned __int8 **)(v2 + 16))
  {
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v6;
    *v6 = v0;
    v6[1] = _AsyncBytesBuffer.reloadBufferAndNext();
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    v4 = *v3;
    *(_QWORD *)(v2 + 8) = v3 + 1;
    *(_WORD *)(v0 + 88) = v4;
    return swift_task_switch();
  }
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 88) | (*(unsigned __int8 *)(v0 + 89) << 8));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(*(_QWORD *)(v0 + 32));
  *(_BYTE *)(v1 + 32) = 1;
  swift_willThrow();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void _AsyncBytesBuffer.reloadBufferAndNext()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  void (*v5)(_QWORD);

  if (**(_QWORD **)(v0 + 16))
  {
    type metadata accessor for _AsyncBytesBuffer.Storage();
    swift_unknownObjectRetain();
    v1 = swift_dynamicCastClassUnconditional();
    *(_QWORD *)(v0 + 24) = v1;
    if (*(_BYTE *)(v1 + 32) == 1)
    {
      swift_release();
      (*(void (**)(uint64_t))(v0 + 8))(256);
      return;
    }
    static Task<>.checkCancellation()();
    *(_QWORD *)(*(_QWORD *)(v0 + 16) + 8) = v1 + 33;
    v2 = swift_dynamicCastClassUnconditional();
    v3 = *(int **)(v2 + 16);
    *(_QWORD *)(v0 + 32) = v3;
    *(_QWORD *)(v0 + 40) = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v5 = (void (*)(_QWORD))((char *)v3 + *v3);
      swift_retain();
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 48) = v4;
      *v4 = v0;
      v4[1] = _AsyncBytesBuffer.reloadBufferAndNext();
      v5(*(_QWORD *)(v0 + 16));
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t _AsyncBytesBuffer.reloadBufferAndNext()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 64) = a1;
  return swift_task_switch();
}

uint64_t _AsyncBytesBuffer.reloadBufferAndNext()(__int16 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    *(_BYTE *)(v4 + 89) = HIBYTE(a1) & 1;
    *(_BYTE *)(v4 + 88) = a1;
  }
  return swift_task_switch();
}

uint64_t NSFileHandle.AsyncBytes.makeAsyncIterator()()
{
  void **v0;
  void *v1;
  uint64_t v2;
  id v3;
  unsigned int v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *v0;
  type metadata accessor for _AsyncBytesBuffer.Storage();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 32) = 0;
  v3 = v1;
  v4 = objc_msgSend(v3, sel_fileDescriptor);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = v3;
  v7 = swift_dynamicCastClassUnconditional();
  v8 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v7 + 16) = &async function pointer to partial apply for closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:);
  *(_QWORD *)(v7 + 24) = v5;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v8);

  return v2;
}

uint64_t NSFileHandle.AsyncBytes.Iterator.buffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NSFileHandle.AsyncBytes.Iterator.buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*NSFileHandle.AsyncBytes.Iterator.buffer.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)(v3 + 200) = a2;
  *(_QWORD *)(v3 + 144) = a1;
  *(_QWORD *)(v3 + 152) = a3;
  return swift_task_switch();
}

void closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)()
{
  uint64_t v0;
  _QWORD *v1;
  int v2;
  uint64_t v3;
  const void *v4;
  size_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = *(_QWORD **)(v0 + 144);
  if (*v1)
  {
    v2 = *(_DWORD *)(v0 + 200);
    type metadata accessor for _AsyncBytesBuffer.Storage();
    v3 = swift_dynamicCastClassUnconditional();
    *(_QWORD *)(v0 + 160) = v3;
    v1[1] = v3 + 33;
    v4 = (const void *)swift_dynamicCastClassUnconditional();
    v5 = _swift_stdlib_malloc_size(v4);
    *(_QWORD *)(v0 + 168) = v5;
    if (v2 < 0)
    {
      v6 = v5;
      if (one-time initialization token for default != -1)
        swift_once();
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 184) = v7;
      *v7 = v0;
      v7[1] = closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:);
      v8 = *(_QWORD *)(v0 + 152);
      v7[3] = v3 + 33;
      v7[4] = v3 + v6;
      v7[2] = v8;
    }
    else if (one-time initialization token for default != -1)
    {
      swift_once();
    }
    swift_task_switch();
  }
  else
  {
    __break(1u);
  }
}

unint64_t closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)()
{
  uint64_t v0;
  ssize_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  do
  {
    v1 = read(*(_DWORD *)(v0 + 200), (void *)(*(_QWORD *)(v0 + 160) + 33), *(_QWORD *)(v0 + 168) - 33);
    if ((v1 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(v0 + 176) = v1;
      return swift_task_switch();
    }
    v2 = MEMORY[0x186DA4118]();
  }
  while (MEMORY[0x186DA4118]() == 4);
  v3 = *(unsigned int *)(v0 + 200);
  v4 = swift_slowAlloc();
  if (MEMORY[0x186DA413C](v3, 50, v4) == -1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
    v22 = v2;
    v23 = objc_allocWithZone((Class)NSError);
    v24 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_initWithDomain_code_userInfo_, v24, v22, _NativeDictionary.bridged()());
    goto LABEL_9;
  }
  v5 = static String._fromUTF8Repairing(_:)();
  v7 = v6;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSPOSIXErrorDomain"));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 40) = v9;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v10 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, v0 + 96);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  swift_retain();
  result = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  if ((v14 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v10[(result >> 6) + 8] |= 1 << result;
    v15 = (uint64_t *)(v10[6] + 16 * result);
    *v15 = v11;
    v15[1] = v12;
    result = (unint64_t)outlined init with take of Any((_OWORD *)(v0 + 112), (_OWORD *)(v10[7] + 32 * result));
    v16 = v10[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (!v17)
    {
      v19 = v2;
      v10[2] = v18;
      swift_bridgeObjectRelease();
      swift_release();
      v20 = objc_allocWithZone((Class)NSError);
      v21 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      objc_msgSend(v20, sel_initWithDomain_code_userInfo_, v21, v19, _NativeDictionary.bridged()());
LABEL_9:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_willThrow();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 144) + 16) = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 8) + *(_QWORD *)(v0 + 176);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 144) + 16) = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 8) + *(_QWORD *)(v0 + 192);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 192) = a1;
  return swift_task_switch();
}

uint64_t sub_181CC7ACC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_DWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply;
  *(_DWORD *)(v6 + 200) = v4;
  *(_QWORD *)(v6 + 144) = a1;
  *(_QWORD *)(v6 + 152) = v5;
  return swift_task_switch();
}

uint64_t NSFileHandle.AsyncBytes.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSFileHandle.AsyncBytes.Iterator(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSFileHandle.AsyncBytes.Iterator()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char v3;
  _BYTE *v4;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(char **)(v1 + 8);
  if (v2 == *(char **)(v1 + 16))
  {
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v6;
    *v6 = v0;
    v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    v3 = *v2;
    *(_QWORD *)(v1 + 8) = v2 + 1;
    v4 = *(_BYTE **)(v0 + 16);
    *v4 = v3;
    v4[1] = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t _sSo12NSFileHandleC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSFileHandleC10FoundationE10AsyncBytesV8IteratorV_Tgq5Tu
                                                + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSFileHandleC10FoundationE10AsyncBytesV8IteratorV_Tgq5Tu);
  v7 = (_QWORD *)swift_task_alloc();
  v4[4] = v7;
  *v7 = v4;
  v7[1] = _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v9(a2, a3);
}

void protocol witness for AsyncSequence.makeAsyncIterator() in conformance NSFileHandle.AsyncBytes(uint64_t *a1@<X8>)
{
  id *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = NSFileHandle.AsyncBytes.makeAsyncIterator()();
  v5 = v4;
  v7 = v6;

  *a1 = v3;
  a1[1] = v5;
  a1[2] = v7;
}

id NSFileHandle.bytes.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;

  *a1 = v1;
  return v1;
}

unint64_t lazy protocol witness table accessor for type NSFileHandle.AsyncBytes.Iterator and conformance NSFileHandle.AsyncBytes.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSFileHandle.AsyncBytes.Iterator and conformance NSFileHandle.AsyncBytes.Iterator;
  if (!lazy protocol witness table cache variable for type NSFileHandle.AsyncBytes.Iterator and conformance NSFileHandle.AsyncBytes.Iterator)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSFileHandle.AsyncBytes.Iterator, &type metadata for NSFileHandle.AsyncBytes.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSFileHandle.AsyncBytes.Iterator and conformance NSFileHandle.AsyncBytes.Iterator);
  }
  return result;
}

uint64_t type metadata accessor for IOActor()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for _AsyncBytesBuffer()
{
  return &type metadata for _AsyncBytesBuffer;
}

uint64_t type metadata completion function for _AsyncBytesBuffer.Storage()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for _AsyncBytesBuffer.Storage()
{
  return type metadata accessor for _AsyncBytesBuffer.Storage();
}

ValueMetadata *type metadata accessor for NSFileHandle.AsyncBytes()
{
  return &type metadata for NSFileHandle.AsyncBytes;
}

ValueMetadata *type metadata accessor for NSFileHandle.AsyncBytes.Iterator()
{
  return &type metadata for NSFileHandle.AsyncBytes.Iterator;
}

_QWORD *destroy for _AsyncBytesBuffer.Header(_QWORD *result)
{
  if (*result)
    return (_QWORD *)swift_release();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _AsyncBytesBuffer.Header(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for _AsyncBytesBuffer.Header(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  if (!*(_QWORD *)a1)
  {
    if (v4)
    {
      v6 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  swift_retain();
  swift_release();
LABEL_8:
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t assignWithTake for _AsyncBytesBuffer.Header(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  if (!*(_QWORD *)a1)
  {
    if (v4)
    {
      v6 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  swift_release();
LABEL_8:
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for _AsyncBytesBuffer.Header(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _AsyncBytesBuffer.Header(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _AsyncBytesBuffer.Header()
{
  return &type metadata for _AsyncBytesBuffer.Header;
}

void __swiftcall parseError(_:exampleFormattedString:)(Foundation::CocoaError *__return_ptr retstr, Swift::String _, Swift::String_optional exampleFormattedString)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD v36[2];
  __int128 v37;

  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  if (exampleFormattedString.value._object)
  {
    v6 = exampleFormattedString.value._object;
    v7 = exampleFormattedString.value._countAndFlagsBits;
    v36[0] = 0;
    v36[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(88);
    v8._countAndFlagsBits = 0x7020746F6E6E6143;
    v8._object = (void *)0xED00002065737261;
    String.append(_:)(v8);
    v9._countAndFlagsBits = countAndFlagsBits;
    v9._object = object;
    String.append(_:)(v9);
    v10._object = (void *)0x80000001823067D0;
    v10._countAndFlagsBits = 0xD000000000000046;
    String.append(_:)(v10);
    v11 = v7;
    v12 = v6;
  }
  else
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v36, "Cannot parse ");
    HIWORD(v36[1]) = -4864;
    v11 = countAndFlagsBits;
    v12 = object;
  }
  String.append(_:)(*(Swift::String *)&v11);
  v13._countAndFlagsBits = 46;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14 = v36[0];
  v15 = v36[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18205C850;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSDebugDescription"));
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 40) = v17;
  *(_QWORD *)(inited + 48) = v14;
  *(_QWORD *)(inited + 56) = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v18 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)v36);
  v19 = v36[0];
  v20 = v36[1];
  swift_retain();
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
  if ((v22 & 1) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v18[(v21 >> 6) + 8] |= 1 << v21;
  v23 = (uint64_t *)(v18[6] + 16 * v21);
  *v23 = v19;
  v23[1] = v20;
  outlined init with take of Any(&v37, (_OWORD *)(v18[7] + 32 * v21));
  v24 = v18[2];
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v18[2] = v26;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v27 = objc_allocWithZone((Class)NSError);
  v28 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(v27, sel_initWithDomain_code_userInfo_, v28, 2048, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v30 = objc_msgSend(v29, sel_domain);
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  if (v31 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) || v33 != v34)
  {
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
      goto LABEL_10;
LABEL_13:
    __break(1u);
    JUMPOUT(0x181CC834CLL);
  }
  swift_bridgeObjectRelease_n();
LABEL_10:
  retstr->_nsError.super.isa = (Class)v29;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSEnumerator()
{
  void **v0;
  void *v1;
  uint64_t v2;

  v1 = *v0;
  v2 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);

  return v2;
}

uint64_t initializeWithCopy for NSFastEnumerationIterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSFastEnumerationIterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  return a1;
}

__n128 __swift_memcpy217_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for NSFastEnumerationIterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSFastEnumerationIterator(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 217))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NSFastEnumerationIterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 216) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 217) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 217) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void StringProtocol.localizedCapitalized.getter(uint64_t a1)
{
  uint64_t v1;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  os_unfair_lock_s *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  os_unfair_lock_s *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  os_unfair_lock_s *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_unfair_lock_s *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  Swift::String v71;
  Swift::String v72;
  _QWORD v73[3];
  os_unfair_lock_s *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  os_unfair_lock_s *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  os_unfair_lock_s *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;

  v3 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1, v3);
  v6 = String.init<A>(_:)();
  v8 = v7;
  if (one-time initialization token for cache != -1)
LABEL_27:
    swift_once();
  v87 = static LocaleCache.cache;
  v9 = LocaleCache.current.getter();
  v11 = v10;
  ObjectType = swift_getObjectType();
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 64);
  swift_unknownObjectRetain();
  v14 = v13(ObjectType, v11);
  v16 = v15;
  swift_unknownObjectRelease();
  v17 = specialized static ICU.CaseMap.caseMappingForLocale(_:)(v14, v16);
  swift_bridgeObjectRelease();
  v85 = v17;
  if (!v17)
  {
    v87 = v6;
    v88 = v8;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    String._capitalized()();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return;
  }
  v73[1] = v9;
  v86 = 0;
  v91 = 0;
  v92 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  v18 = String.subscript.getter();
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v73[2] = v8;
  swift_bridgeObjectRelease();
  v25 = MEMORY[0x186DA5030](46, 0xE100000000000000);
  v76 = v26;
  v77 = v25;
  v75 = v27;
  v82 = v28;
  v29 = (os_unfair_lock_s *)(v18 >> 14);
  v79 = v24;
  v80 = (unint64_t)v20 >> 14;
  if (v18 >> 14 < (unint64_t)v20 >> 14)
  {
    swift_bridgeObjectRetain();
    v83 = v22;
    v84 = v18;
    v30 = Substring.subscript.getter();
    v32 = v31;
    v34 = v33;
    v36 = v35;
    swift_bridgeObjectRelease();
    if ((v30 ^ v32) < 0x4000 || (v77 ^ v76) < 0x4000)
    {
      v8 = v29;
LABEL_19:
      swift_bridgeObjectRelease();
      v29 = v8;
    }
    else
    {
      v6 = v84;
      v74 = v20;
      while (1)
      {
        v37 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v77, v76, v75, v82, 0, 0, 0, 0, 0, v30, v32, v34, v36);
        v39 = v38;
        v41 = v40;
        swift_bridgeObjectRelease();
        if ((v41 & 1) != 0)
          break;
        v81 = (os_unfair_lock_s *)(v39 >> 14);
        if (v37 >> 14 == v39 >> 14)
          break;
        if (v37 >> 14 < (unint64_t)v29)
        {
          __break(1u);
          goto LABEL_27;
        }
        v78 = v39;
        v42 = Substring.subscript.getter();
        v44 = v43;
        v46 = v45;
        v48 = v47;
        v49 = *(os_unfair_lock_s **)(v85 + 24);
        MEMORY[0x1E0C80A78](v42);
        v20 = v49 + 4;
        swift_retain();
        os_unfair_lock_lock(v49 + 4);
        v50 = v86;
        partial apply for closure #1 in ICU.CaseMap.titlecase(_:)(&v87);
        v86 = v50;
        if (v50)
          goto LABEL_29;
        countAndFlagsBits = v87;
        object = v88;
        os_unfair_lock_unlock(v49 + 4);
        swift_release();
        if (!object)
        {
          v87 = v42;
          v88 = v44;
          v89 = v46;
          v90 = v48;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          swift_bridgeObjectRetain_n();
          String.init<A>(_:)();
          v53 = String._capitalized()();
          countAndFlagsBits = v53._countAndFlagsBits;
          object = v53._object;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v20 = v74;
        v54 = v78;
        v55._countAndFlagsBits = countAndFlagsBits;
        v55._object = object;
        String.append(_:)(v55);
        swift_bridgeObjectRelease();
        v56._countAndFlagsBits = 46;
        v56._object = (void *)0xE100000000000000;
        String.append(_:)(v56);
        swift_bridgeObjectRelease();
        v8 = v81;
        if ((unint64_t)v81 >= v80)
        {
          v29 = v81;
          break;
        }
        swift_bridgeObjectRetain();
        v30 = Substring.subscript.getter();
        v32 = v57;
        v34 = v58;
        v36 = v59;
        swift_bridgeObjectRelease();
        v6 = v54;
        v29 = v8;
        if ((v30 ^ v32) < 0x4000)
          goto LABEL_19;
      }
    }
  }
  if (v80 < (unint64_t)v29)
  {
    __break(1u);
LABEL_29:
    os_unfair_lock_unlock(v20);
    __break(1u);
    goto LABEL_30;
  }
  v60 = Substring.subscript.getter();
  v62 = v61;
  v64 = v63;
  v66 = v65;
  v67 = *(os_unfair_lock_s **)(v85 + 24);
  MEMORY[0x1E0C80A78](v60);
  v8 = v67 + 4;
  swift_retain();
  os_unfair_lock_lock(v67 + 4);
  v68 = v86;
  partial apply for closure #1 in ICU.CaseMap.titlecase(_:)(&v87);
  if (v68)
  {
LABEL_30:
    os_unfair_lock_unlock(v8);
    __break(1u);
    return;
  }
  v70 = v87;
  v69 = v88;
  os_unfair_lock_unlock(v67 + 4);
  swift_release();
  if (!v69)
  {
    v87 = v60;
    v88 = v62;
    v89 = v64;
    v90 = v66;
    lazy protocol witness table accessor for type Substring and conformance Substring();
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    v71 = String._capitalized()();
    v70 = v71._countAndFlagsBits;
    v69 = v71._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v72._countAndFlagsBits = v70;
  v72._object = v69;
  String.append(_:)(v72);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void StringProtocol.capitalized(with:)(uint64_t a1, uint64_t a2)
{
  __n128 v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_unfair_lock_s *v50;
  uint64_t v51;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v54;
  unint64_t v55;
  Swift::String v56;
  Swift::String v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_unfair_lock_s *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  os_unfair_lock_s *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;

  v3 = MEMORY[0x1E0C80A78](a1);
  v5 = (os_unfair_lock_s *)((char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *v6;
  v7 = v6[1];
  (*(void (**)(os_unfair_lock_s *, uint64_t, uint64_t, __n128))(v9 + 16))(v5, v10, a2, v3);
  v11 = String.init<A>(_:)();
  v13 = v12;
  if (v8)
  {
    ObjectType = swift_getObjectType();
    v5 = *(os_unfair_lock_s **)(v7 + 64);
    swift_unknownObjectRetain();
    v15 = ((uint64_t (*)(uint64_t, uint64_t))v5)(ObjectType, v7);
    v17 = v16;
    swift_unknownObjectRelease();
  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v18 = specialized static ICU.CaseMap.caseMappingForLocale(_:)(v15, v17);
  swift_bridgeObjectRelease();
  v86 = v18;
  if (!v18)
  {
    v88 = v11;
    v89 = v13;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    String._capitalized()();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return;
  }
  v92 = 0;
  v93 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  v19 = String.subscript.getter();
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_bridgeObjectRelease();
  v26 = MEMORY[0x186DA5030](46, 0xE100000000000000);
  v77 = v27;
  v78 = v26;
  v76 = v28;
  v83 = v29;
  v30 = (os_unfair_lock_s *)(v19 >> 14);
  v80 = v25;
  v81 = v21 >> 14;
  v74 = v13;
  if (v19 >> 14 >= v21 >> 14)
  {
    v87 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v84 = v21;
    v85 = v19;
    v19 = v23;
    v31 = Substring.subscript.getter();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((v31 ^ v33) < 0x4000 || (v78 ^ v77) < 0x4000)
    {
      v87 = 0;
      v5 = v30;
LABEL_21:
      swift_bridgeObjectRelease();
      v30 = v5;
    }
    else
    {
      v87 = 0;
      v75 = v19;
      while (1)
      {
        v38 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v78, v77, v76, v83, 0, 0, 0, 0, 0, v31, v33, v35, v37);
        v40 = v39;
        v42 = v41;
        swift_bridgeObjectRelease();
        if ((v42 & 1) != 0)
          break;
        v82 = (os_unfair_lock_s *)(v40 >> 14);
        if (v38 >> 14 == v40 >> 14)
          break;
        if (v38 >> 14 < (unint64_t)v30)
        {
          __break(1u);
          goto LABEL_30;
        }
        v79 = v40;
        v43 = Substring.subscript.getter();
        v45 = v44;
        v47 = v46;
        v49 = v48;
        v50 = *(os_unfair_lock_s **)(v86 + 24);
        MEMORY[0x1E0C80A78](v43);
        v19 = (unint64_t)&v50[4];
        swift_retain();
        os_unfair_lock_lock(v50 + 4);
        v51 = v87;
        partial apply for closure #1 in ICU.CaseMap.titlecase(_:)(&v88);
        v87 = v51;
        if (v51)
          goto LABEL_31;
        countAndFlagsBits = v88;
        object = v89;
        os_unfair_lock_unlock(v50 + 4);
        swift_release();
        if (!object)
        {
          v88 = v43;
          v89 = v45;
          v90 = v47;
          v91 = v49;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          swift_bridgeObjectRetain_n();
          String.init<A>(_:)();
          v54 = String._capitalized()();
          countAndFlagsBits = v54._countAndFlagsBits;
          object = v54._object;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v19 = v85;
        v55 = v75;
        v56._countAndFlagsBits = countAndFlagsBits;
        v56._object = object;
        String.append(_:)(v56);
        swift_bridgeObjectRelease();
        v57._countAndFlagsBits = 46;
        v57._object = (void *)0xE100000000000000;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v5 = v82;
        if ((unint64_t)v82 >= v81)
        {
          v30 = v82;
          goto LABEL_23;
        }
        swift_bridgeObjectRetain();
        v19 = v55;
        v31 = Substring.subscript.getter();
        v33 = v58;
        v35 = v59;
        v37 = v60;
        swift_bridgeObjectRelease();
        v30 = v5;
        if ((v31 ^ v33) < 0x4000)
          goto LABEL_21;
      }
    }
    v19 = v85;
  }
LABEL_23:
  if (v81 < (unint64_t)v30)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    os_unfair_lock_unlock((os_unfair_lock_t)v19);
    __break(1u);
    goto LABEL_32;
  }
  v61 = Substring.subscript.getter();
  v63 = v62;
  v65 = v64;
  v67 = v66;
  v68 = *(os_unfair_lock_s **)(v86 + 24);
  MEMORY[0x1E0C80A78](v61);
  v5 = v68 + 4;
  swift_retain();
  os_unfair_lock_lock(v68 + 4);
  v69 = v87;
  partial apply for closure #1 in ICU.CaseMap.titlecase(_:)(&v88);
  if (v69)
  {
LABEL_32:
    os_unfair_lock_unlock(v5);
    __break(1u);
    return;
  }
  v71 = v88;
  v70 = v89;
  os_unfair_lock_unlock(v68 + 4);
  swift_release();
  if (!v70)
  {
    v88 = v61;
    v89 = v63;
    v90 = v65;
    v91 = v67;
    lazy protocol witness table accessor for type Substring and conformance Substring();
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    v72 = String._capitalized()();
    v71 = v72._countAndFlagsBits;
    v70 = v72._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v73._countAndFlagsBits = v71;
  v73._object = v70;
  String.append(_:)(v73);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t StringProtocol.localizedLowercase.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.localizedLowercase.getter(a1, a2, (uint64_t (*)(uint64_t, uint64_t))ICU.CaseMap.lowercase(_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA610]);
}

uint64_t StringProtocol.lowercased(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.lowercased(with:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))ICU.CaseMap.lowercase(_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA610]);
}

uint64_t partial apply for closure #1 in ICU.CaseMap.titlecase(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in ICU.CaseMap.titlecase(_:)(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t _LocaleAutoupdating.firstDayOfWeek.getter()
{
  uint64_t *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v7[3];
  _OWORD v8[9];

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (uint64_t *)(static LocaleCache.cache + 16);
  v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.current.getter(v0, v8);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (*(_QWORD *)&v8[0])
  {
    v2 = *((_QWORD *)&v8[0] + 1);
LABEL_7:
    swift_release();
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 328))(ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  LocaleCache.preferences()(v8);
  v4 = v3;
  swift_retain();
  os_unfair_lock_lock(v1);
  closure #2 in LocaleCache.current.getter(v0, (uint64_t)v8, v4 & 1, v7);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (v7[0])
  {
    v2 = v7[1];
    outlined release of LocalePreferences(v8);
    goto LABEL_7;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _LocaleAutoupdating.prefs.getter()
{
  uint64_t *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v7[3];
  _OWORD v8[9];

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (uint64_t *)(static LocaleCache.cache + 16);
  v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.current.getter(v0, v8);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (*(_QWORD *)&v8[0])
  {
    v2 = *((_QWORD *)&v8[0] + 1);
LABEL_7:
    swift_release();
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 464))(ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  LocaleCache.preferences()(v8);
  v4 = v3;
  swift_retain();
  os_unfair_lock_lock(v1);
  closure #2 in LocaleCache.current.getter(v0, (uint64_t)v8, v4 & 1, v7);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (v7[0])
  {
    v2 = v7[1];
    outlined release of LocalePreferences(v8);
    goto LABEL_7;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for _LocaleProtocol.init(identifier:prefs:) in conformance _LocaleAutoupdating()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _LocaleProtocol.init(name:prefs:disableBundleMatching:) in conformance _LocaleAutoupdating()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _LocaleProtocol.init(components:) in conformance _LocaleAutoupdating()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v5 = v4;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 72))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.languageCodeDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v5 = v4;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 80))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.countryCodeDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v5 = v4;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 88))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.scriptCodeDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v5 = v4;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 96))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.variantCodeDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v5 = v4;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 104))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.calendarIdentifierDisplayName(for:) in conformance _LocaleAutoupdating(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  char v7;
  uint64_t v8;

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v8 = static LocaleCache.cache;
  LocaleCache.current.getter();
  v3 = v2;
  ObjectType = swift_getObjectType();
  v7 = v1;
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 112))(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t protocol witness for _LocaleProtocol.currencyCodeDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v5 = v4;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 120))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbolDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v5 = v4;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 128))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifierDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v5 = v4;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 136))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.collatorIdentifierDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v5 = v4;
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 144))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.scriptCode.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 160))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.variantCode.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 168))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.regionCode.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 176))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.exemplarCharacterSet.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 184))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.calendar.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 192))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifier.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 208))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.usesMetricSystem.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v1 & 1;
}

uint64_t protocol witness for _LocaleProtocol.groupingSeparator.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 232))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbol.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 240))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencyCode.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 248))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.collatorIdentifier.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 256))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.quotationBeginDelimiter.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 264))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.quotationEndDelimiter.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 272))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationBeginDelimiter.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 280))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationEndDelimiter.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 288))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currency.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 304))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.numberingSystem.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 312))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.availableNumberingSystems.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 320))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.firstDayOfWeek.getter in conformance _LocaleAutoupdating()
{
  return _LocaleAutoupdating.firstDayOfWeek.getter();
}

uint64_t protocol witness for _LocaleProtocol.weekendRange.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 336))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.collation.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 368))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.timeZone.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 384))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.subdivision.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 392))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.variant.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 400))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.temperatureUnit.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 408))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.forceHourCycle.getter in conformance _LocaleAutoupdating()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  if (one-time initialization token for cache != -1)
    swift_once();
  LocaleCache.current.getter();
  v1 = v0;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 424))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.forceMinDaysInFirstWeek(_:) in conformance _LocaleAutoupdating(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  char v7;
  uint64_t v8;

  v1 = *a1;
  if (one-time initialization token for cache != -1)
    swift_once();
  v8 = static LocaleCache.cache;
  LocaleCache.current.getter();
  v3 = v2;
  ObjectType = swift_getObjectType();
  v7 = v1;
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 440))(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t specialized _LocaleAutoupdating.minimumDaysInFirstWeek.getter()
{
  uint64_t *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t result;
  uint64_t v8[3];
  _OWORD v9[9];

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (uint64_t *)(static LocaleCache.cache + 16);
  v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.current.getter(v0, v9);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (*(_QWORD *)&v9[0])
  {
    v2 = *((_QWORD *)&v9[0] + 1);
LABEL_7:
    swift_release();
    ObjectType = swift_getObjectType();
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 344))(ObjectType, v2);
    swift_unknownObjectRelease();
    return v6;
  }
  LocaleCache.preferences()(v9);
  v4 = v3;
  swift_retain();
  os_unfair_lock_lock(v1);
  closure #2 in LocaleCache.current.getter(v0, (uint64_t)v9, v4 & 1, v8);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (v8[0])
  {
    v2 = v8[1];
    outlined release of LocalePreferences(v9);
    goto LABEL_7;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void LockedState.withLock<A>(_:)(void (*a1)(char *))
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  os_unfair_lock_s *v6;

  v3 = *v1;
  v4 = **v1;
  v5 = (char *)*v1 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + v4 + 16);
  v6 = (os_unfair_lock_s *)((char *)v3 + ((*(unsigned int *)(v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  a1(v5);
  os_unfair_lock_unlock(v6);
}

uint64_t LockedState.withLockExtendingLifetimeOfState<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  os_unfair_lock_s *v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  v10 = **v3;
  v11 = (char *)*v3 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + v10 + 16);
  v12 = (os_unfair_lock_s *)((char *)v9 + ((*(unsigned int *)(v10 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v12);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  a1(v11);
  os_unfair_lock_unlock(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t LockedState.init(initialState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  type metadata accessor for LockedState._Buffer(0, a2, a3, a4);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + ((*(unsigned int *)(*(_QWORD *)v8 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  v9 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v8 + 16), a1, a2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  *a5 = v8;
  return result;
}

void LockedState<A>.lock()()
{
  os_unfair_lock_s **v0;

  os_unfair_lock_lock(*v0 + 4);
}

uint64_t LockedState<A>.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *a1 = result;
  return result;
}

void LockedState.withLockUnchecked<A>(_:)(void (*a1)(char *))
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  os_unfair_lock_s *v6;

  v3 = *v1;
  v4 = **v1;
  v5 = (char *)*v1 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + v4 + 16);
  v6 = (os_unfair_lock_s *)((char *)v3 + ((*(unsigned int *)(v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  a1(v5);
  os_unfair_lock_unlock(v6);
}

void LockedState<A>.unlock()()
{
  os_unfair_lock_s **v0;

  os_unfair_lock_unlock(*v0 + 4);
}

void LockedState<A>.withLock<A>(_:)(void (*a1)(void))
{
  os_unfair_lock_s **v1;
  os_unfair_lock_s *v3;

  v3 = *v1 + 4;
  os_unfair_lock_lock(v3);
  a1();
  os_unfair_lock_unlock(v3);
}

uint64_t type metadata accessor for LockedState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LockedState);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RegexPatternCache.Key()
{
  uint64_t v0;
  Swift::UInt8 v1;

  v1 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance RegexPatternCache.Key()
{
  uint64_t v0;
  Swift::UInt8 v1;

  v1 = *(_BYTE *)(v0 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RegexPatternCache.Key()
{
  uint64_t v0;
  Swift::UInt8 v1;

  v1 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RegexPatternCache.Key(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  char v5;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return v2 ^ v3 ^ 1u;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v5 & 1) != 0)
    return v2 ^ v3 ^ 1u;
  return result;
}

uint64_t closure #1 in RegexPatternCache.regex(for:caseInsensitive:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, void (*a6)(char *, uint64_t, uint64_t, uint64_t)@<X5>, int a7@<W6>, char *a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t result;
  unint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  char *v49;
  int v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v62;
  uint64_t v63;

  v55 = a7;
  v60 = a5;
  v61 = (void (*)(char *, uint64_t, uint64_t, uint64_t))a6;
  v58 = a8;
  v54 = type metadata accessor for RegexWordBoundaryKind();
  v52 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v51 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1E0C80A78](v13);
  v56 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v49 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v49 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v59 = (char *)&v49 - v22;
  MEMORY[0x1E0C80A78](v23);
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v49 - v26;
  v28 = *a1;
  v29 = *(_QWORD *)(*a1 + 16);
  v57 = a1;
  v62 = a2;
  v53 = v30;
  if (v29)
  {
    swift_bridgeObjectRetain();
    v50 = a4;
    v31 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
    if ((v32 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v17, *(_QWORD *)(v28 + 56) + *(_QWORD *)(v19 + 72) * v31, v18);
      v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
      v33(v17, 0, 1, v18);
    }
    else
    {
      v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
      v33(v17, 1, 1, v18);
    }
    swift_bridgeObjectRelease();
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18);
    LOBYTE(a4) = v50;
    if (v34 != 1)
    {
      v47 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
      v47(v27, v17, v18);
      v48 = v58;
      v47(v58, v27, v18);
      return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v33)(v48, 0, 1, v18);
    }
  }
  else
  {
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v33)(v17, 1, 1, v18, v25);
  }
  outlined destroy of Regex<AnyRegexOutput>?((uint64_t)v17);
  swift_bridgeObjectRetain();
  v35 = v59;
  v36 = v63;
  result = Regex<A>.init(_:)();
  v38 = v62;
  if (!v36)
  {
    v61 = v33;
    v63 = a3;
    v39 = v51;
    MEMORY[0x186DA3BE4](result);
    v40 = v53;
    Regex.wordBoundaryKind(_:)();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v54);
    v41 = *(void (**)(char *, uint64_t))(v19 + 8);
    v41(v35, v18);
    if ((v55 & 1) != 0)
    {
      v42 = v49;
      Regex.ignoresCase(_:)();
      v41(v40, v18);
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v40, v42, v18);
    }
    v43 = (uint64_t)v56;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v56, v40, v18);
    v44 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v61;
    v61((char *)v43, 0, 1, v18);
    v45 = v63;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter(v43, v38, v45, a4 & 1);
    v46 = v58;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v58, v40, v18);
    return v44((uint64_t)v46, 0, 1, v18);
  }
  return result;
}

uint64_t outlined destroy of Regex<AnyRegexOutput>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for RegexPatternCache()
{
  return &type metadata for RegexPatternCache;
}

ValueMetadata *type metadata accessor for RegexPatternCache.Key()
{
  return &type metadata for RegexPatternCache.Key;
}

unint64_t lazy protocol witness table accessor for type RegexPatternCache.Key and conformance RegexPatternCache.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegexPatternCache.Key and conformance RegexPatternCache.Key;
  if (!lazy protocol witness table cache variable for type RegexPatternCache.Key and conformance RegexPatternCache.Key)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for RegexPatternCache.Key, &type metadata for RegexPatternCache.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegexPatternCache.Key and conformance RegexPatternCache.Key);
  }
  return result;
}

__n128 protocol witness for DataProtocol.regions.getter in conformance UnsafeRawBufferPointer@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in UnsafeRawBufferPointer()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<UnsafeRawBufferPointer> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<UnsafeRawBufferPointer>, MEMORY[0x1E0DEC640]);
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
    v2 = lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in UnsafeRawBufferPointer()
{
  return &protocol witness table for UnsafeRawBufferPointer;
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element.Collection.SubSequence : ContiguousBytes in UnsafeRawBufferPointer()
{
  return lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>, (uint64_t)&protocol witness table for UnsafeRawBufferPointer);
}

unint64_t instantiation function for generic protocol witness table for UnsafeRawBufferPointer(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> UnsafeBufferPointer<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<UnsafeBufferPointer<UInt8>> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<UnsafeBufferPointer<UInt8>>, MEMORY[0x1E0DEC640]);
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeBufferPointer<UInt8>>);
    v2 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance <A> UnsafeBufferPointer<A>, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>, (uint64_t)&protocol conformance descriptor for <A> UnsafeBufferPointer<A>);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in <A> UnsafeBufferPointer<A>()
{
  return &protocol witness table for <A> UnsafeBufferPointer<A>;
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element : DataProtocol in <A> UnsafeBufferPointer<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance <A> UnsafeBufferPointer<A>, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>, (uint64_t)&protocol conformance descriptor for <A> UnsafeBufferPointer<A>);
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element.Collection.SubSequence : ContiguousBytes in <A> UnsafeBufferPointer<A>()
{
  return lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<UnsafeBufferPointer<UInt8>>, (uint64_t)&protocol witness table for <A> UnsafeBufferPointer<A>);
}

uint64_t lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3;
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> Slice<A>, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> UnsafeBufferPointer<A>(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance UnsafeBufferPointer<A>, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>, MEMORY[0x1E0DEA5E0]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

id specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = objc_msgSend(v3, sel_length);
  if (a1 < 0 || (uint64_t)result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = objc_msgSend(v3, sel_length);
  if (a3 < 0 || (uint64_t)result < a3)
    goto LABEL_17;
  v8 = a3 - a1;
  if (a2 >= 1)
  {
    if (v8 < 0 || v8 >= a2)
      goto LABEL_12;
    return 0;
  }
  if (v8 <= 0 && v8 > a2)
    return 0;
LABEL_12:
  v10 = __OFADD__(a1, a2);
  v9 = a1 + a2;
  if (v10)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = objc_msgSend(v3, sel_length);
  if ((v9 & 0x8000000000000000) == 0 && (uint64_t)result >= v9)
    return (id)v9;
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v6 = a6 + a5;
  if (__OFADD__(a6, a5))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v6 < a3 || a3 < a6 || result < a6 || v6 < result)
    goto LABEL_19;
  v7 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (a2 >= 1)
  {
    if (v7 < 0 || v7 >= (unint64_t)a2)
      goto LABEL_14;
    return 0;
  }
  if (v7 <= 0 && v7 > a2)
    return 0;
LABEL_14:
  v8 = __OFADD__(result, a2);
  result += a2;
  if (v8)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    return result;
  }
  if (result < a6 || v6 < result)
    goto LABEL_22;
  return result;
}

__n128 DispatchData.Region.regions.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  return result;
}

uint64_t DispatchData.Region.subscript.getter(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v7;

  v3 = v1[1];
  v2 = v1[2];
  v4 = __OFADD__(v2, v3);
  v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 > result || v5 < result)
    goto LABEL_9;
  v4 = __OFSUB__(result, v2);
  v7 = result - v2;
  if (!v4)
    return *(unsigned __int8 *)(*v1 + v7);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t DispatchData.Region.startIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t DispatchData.Region.endIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  result = v2 + v1;
  if (__OFADD__(v2, v1))
    __break(1u);
  return result;
}

uint64_t DispatchData.Region.withUnsafeBytes<A>(_:)(uint64_t (*a1)(void))
{
  return a1();
}

__n128 protocol witness for DataProtocol.regions.getter in conformance DispatchData.Region@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  return result;
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance DispatchData.Region(uint64_t (*a1)(void))
{
  return DispatchData.Region.withUnsafeBytes<A>(_:)(a1);
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance DispatchData.Region@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v6 = __OFADD__(v4, v5);
  v7 = v4 + v5;
  if (v6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= v4 && v3 < v7)
  {
    *a2 = v3;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance DispatchData.Region(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v5 = __OFADD__(v3, v4);
  v6 = v3 + v4;
  if (v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v2 >= v3 && v2 < v6)
  {
    *result = v2;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance DispatchData.Region(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

void protocol witness for Collection.endIndex.getter in conformance DispatchData.Region(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = __OFADD__(v3, v2);
  v5 = v3 + v2;
  if (v4)
    __break(1u);
  else
    *a1 = v5;
}

_BYTE *protocol witness for Collection.subscript.read in conformance DispatchData.Region(_BYTE *result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;
  uint64_t v9;

  v4 = v2[1];
  v3 = v2[2];
  v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v6 = *a2;
  if (*a2 < v3 || v5 < v6)
    goto LABEL_9;
  v8 = __OFSUB__(v6, v3);
  v9 = v6 - v3;
  if (!v8)
  {
    *result = *(_BYTE *)(*v2 + v9);
    return destructiveProjectEnumData for PredicateCodableError;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance DispatchData.Region@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v2[1];
  v4 = v2[2];
  v5 = v4 + v3;
  if (__OFADD__(v4, v3))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v5 < v4)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v6 = *result;
  if (*result < v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = result[1];
  if (v5 >= v7)
  {
    a2[2] = *v2;
    a2[3] = v3;
    a2[4] = v4;
    *a2 = v6;
    a2[1] = v7;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance DispatchData.Region(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  v4 = __OFADD__(v2, v3);
  v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
  }
  else if (v5 >= v2)
  {
    *a1 = v2;
    a1[1] = v5;
    return;
  }
  __break(1u);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance DispatchData.Region()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _BOOL8 result;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  v3 = __OFADD__(v1, v2);
  v4 = v1 + v2;
  if (!v3)
    return v1 == v4;
  __break(1u);
  return result;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance DispatchData.Region@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  v7 = __OFADD__(v5, v6);
  v8 = v5 + v6;
  if (v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 >= v5 && v8 >= v4)
  {
    *a3 = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance DispatchData.Region@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;
  char v7;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4, v4[1], v4[2]);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance DispatchData.Region(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v4, v3);
  v6 = v4 + v3;
  if (v5)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = *result;
  v8 = *a2;
  if (v6 < *a2 || v8 < v4 || v7 < v4 || v6 < v7)
    goto LABEL_15;
  result = (uint64_t *)(v8 - v7);
  if (__OFSUB__(v8, v7))
LABEL_16:
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance DispatchData.Region@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = v4 + v3;
  if (__OFADD__(v4, v3))
  {
    __break(1u);
  }
  else
  {
    v6 = *result;
    if (*result >= v4 && v6 < v5)
    {
      *a2 = v6 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance DispatchData.Region(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  v4 = v2 + v3;
  if (__OFADD__(v2, v3))
  {
    __break(1u);
  }
  else
  {
    v5 = *result;
    if (*result >= v2 && v5 < v4)
    {
      *result = v5 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance DispatchData.Region@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = v2;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance DispatchData.Region()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  v3 = __OFADD__(v1, v2);
  v4 = v1 + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  result = v4 - v1;
  if (v4 < v1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (__OFSUB__(v4, v1))
LABEL_7:
    __break(1u);
  return result;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance DispatchData.Region()
{
  uint64_t v0;

  return specialized _copyCollectionToContiguousArray<A>(_:)(*(_QWORD **)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance DispatchData.Region(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t DispatchData.regions.getter()
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  DispatchData.enumerateBytes(_:)();
  return v1;
}

uint64_t closure #1 in DispatchData.regions.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v9 = (_QWORD *)*a5;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a5 = (uint64_t)v9;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    v9 = (_QWORD *)result;
    *a5 = result;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    v9 = (_QWORD *)result;
  }
  v9[2] = v12 + 1;
  v13 = &v9[3 * v12];
  v13[4] = a1;
  v13[5] = a2;
  v13[6] = a3;
  *a5 = (uint64_t)v9;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in DispatchData.Region()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<DispatchData.Region> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<DispatchData.Region>, MEMORY[0x1E0DEC640]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in DispatchData.Region()
{
  return lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region, (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in DispatchData.Region()
{
  return &protocol witness table for DispatchData.Region;
}

unint64_t lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<DispatchData.Region>);
    v2 = &protocol witness table for DispatchData.Region;
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for DispatchData.Region(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in DispatchData.Region()
{
  return lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region, MEMORY[0x1E0DEDE40]);
}

uint64_t lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<DispatchData.Region>);
    v8 = a2();
    result = MEMORY[0x186DA9D64](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in DispatchData.Region()
{
  return lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region, MEMORY[0x1E0DEDE28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in DispatchData.Region()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<DispatchData.Region>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in DispatchData.Region()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<DispatchData.Region> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<DispatchData.Region>, MEMORY[0x1E0DEC908]);
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in DispatchData()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [DispatchData.Region] and conformance [A], &demangling cache variable for type metadata for [DispatchData.Region], MEMORY[0x1E0DEAF20]);
}

unint64_t lazy protocol witness table accessor for type Slice<DispatchData> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Slice<DispatchData> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<DispatchData> and conformance <> Slice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<DispatchData>);
    v2 = lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, (uint64_t)&protocol conformance descriptor for DispatchData);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<DispatchData> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance DispatchData@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  v3 = MEMORY[0x1E0DEE9D8];
  result = DispatchData.enumerateBytes(_:)();
  *a1 = v3;
  return result;
}

uint64_t instantiation function for generic protocol witness table for DispatchData(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData, MEMORY[0x1E0DEF668]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for DispatchData.Region()
{
  return &type metadata for DispatchData.Region;
}

ValueMetadata *type metadata accessor for DispatchData.Region.Storage()
{
  return &type metadata for DispatchData.Region.Storage;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = 0;
  v4 = a3 - result;
  if (a3 > result)
  {
    while ((unint64_t)(~result + a3) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++v3)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_32;
  }
  if (a3 < result)
  {
    v5 = ~a3 + result;
    if (v5 >= (result ^ 0x8000000000000000))
      v5 = result ^ 0x8000000000000000;
    v6 = 0x8000000000000000;
    if (v5 < 0x8000000000000000)
      v6 = v5;
    while ((v5 & 0x8000000000000000) == 0)
    {
      if ((result ^ 0x8000000000000000) == v6)
        goto LABEL_34;
      if (v4 == --v3)
      {
LABEL_13:
        if (a2 > 0)
        {
          if ((v3 & 0x8000000000000000) == 0)
            goto LABEL_19;
          goto LABEL_20;
        }
        if (v3 >= 1)
          goto LABEL_26;
        goto LABEL_24;
      }
    }
    goto LABEL_33;
  }
  if (a2 > 0)
  {
LABEL_19:
    if (v3 >= (unint64_t)a2)
    {
LABEL_20:
      v7 = result ^ 0x7FFFFFFFFFFFFFFFLL;
      v8 = a2 - 1;
      while (v7 > v8)
      {
        ++result;
        if (!--a2)
          return result;
      }
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    return 0;
  }
LABEL_24:
  if (v3 > a2)
    return 0;
LABEL_26:
  if ((a2 & 0x8000000000000000) == 0)
    return result;
  v9 = 0;
  while ((result ^ 0x8000000000000000) > ~a2)
  {
    if (--v9 <= a2)
    {
      result += v9;
      return result;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t _CalendarProtocol.localeIdentifier.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  _QWORD v6[2];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 32))(v6);
  if (!v6[0])
    return 0;
  v2 = v6[1];
  ObjectType = swift_getObjectType();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  swift_unknownObjectRelease();
  return v4;
}

void _CalendarProtocol.gregorianStartDate.getter(uint64_t a1@<X8>)
{
  protocol witness for _TimeZoneProtocol.nextDaylightSavingTimeTransition(after:) in conformance _TimeZoneGMTICU(a1);
}

uint64_t _CalendarProtocol.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;

  v4 = 0;
  v5 = 0xE000000000000000;
  (*(void (**)(char *__return_ptr))(a2 + 24))(&v3);
  _print_unlocked<A, B>(_:_:)();
  return v4;
}

uint64_t dispatch thunk of _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(a10 + 16))(a1, a2, a3, a4, a5 & 1, a6, a7 & 1);
}

uint64_t dispatch thunk of _CalendarProtocol.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of _CalendarProtocol.locale.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of _CalendarProtocol.localeIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _CalendarProtocol.preferredFirstWeekday.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of _CalendarProtocol.minimumDaysInFirstWeek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of _CalendarProtocol.preferredMinimumDaysInFirstweek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of _CalendarProtocol.gregorianStartDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of _CalendarProtocol.isAutoupdating.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of _CalendarProtocol.isBridged.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(a8 + 112))(a1, a2, a3, a4 & 1, a5, a6 & 1);
}

uint64_t dispatch thunk of _CalendarProtocol.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of _CalendarProtocol.minimumRange(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of _CalendarProtocol.maximumRange(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of _CalendarProtocol.range(of:in:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 144))();
}

uint64_t dispatch thunk of _CalendarProtocol.ordinality(of:in:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 152))();
}

uint64_t dispatch thunk of _CalendarProtocol.dateInterval(of:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 160))();
}

uint64_t dispatch thunk of _CalendarProtocol.isDateInWeekend(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t dispatch thunk of _CalendarProtocol.date(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of _CalendarProtocol.dateComponents(_:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 184))();
}

uint64_t dispatch thunk of _CalendarProtocol.dateComponents(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 192))();
}

uint64_t dispatch thunk of _CalendarProtocol.date(byAdding:to:wrappingComponents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 200))();
}

uint64_t dispatch thunk of _CalendarProtocol.dateComponents(_:from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 208))();
}

uint64_t protocol witness for _CalendarProtocol.localeIdentifier.getter in conformance _CalendarGregorian()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  if (!*(_QWORD *)(v0 + 80))
    return 0;
  v1 = *(_QWORD *)(v0 + 88);
  ObjectType = swift_getObjectType();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  swift_unknownObjectRetain();
  v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t specialized _CalendarProtocol.localeIdentifier.getter()
{
  os_unfair_lock_s *v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];
  _QWORD v8[2];

  if (one-time initialization token for cache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v7);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  v1 = v7[1];
  ObjectType = swift_getObjectType();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v1 + 32))(v8, ObjectType, v1);
  swift_unknownObjectRelease();
  if (!v8[0])
    return 0;
  v3 = v8[1];
  v4 = swift_getObjectType();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(v4, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t NSUUID._toCustomAnyHashable()()
{
  void *v0;
  __int128 v2;

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v0, (uint64_t)&v2);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  return AnyHashable.init<A>(_:)();
}

uint64_t closure #1 in __NSConcreteUUID.debugDescription.getter@<X0>(void *a1@<X1>, _QWORD *a2@<X8>)
{
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  Swift::String v12;
  uint64_t result;

  v4._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<__NSConcreteUUID>);
  lazy protocol witness table accessor for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>();
  v6._countAndFlagsBits = _Pointer.debugDescription.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 8254;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8 = objc_msgSend(a1, sel_UUIDString);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12._countAndFlagsBits = (uint64_t)v9;
  v12._object = v11;
  String.append(_:)(v12);
  result = swift_bridgeObjectRelease();
  *a2 = 60;
  a2[1] = 0xE100000000000000;
  return result;
}

id __NSConcreteUUID.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for __NSConcreteUUID();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t instantiation function for generic protocol witness table for UUID(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type UUID and conformance UUID();
  a1[2] = lazy protocol witness table accessor for type UUID and conformance UUID();
  a1[3] = lazy protocol witness table accessor for type UUID and conformance UUID();
  result = lazy protocol witness table accessor for type UUID and conformance UUID();
  a1[4] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UnsafePointer<__NSConcreteUUID>);
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEA560], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>);
  }
  return result;
}

uint64_t NSComparisonResult.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t NSComparisonResult.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[4];

  v3 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSComparisonResult@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v5;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSComparisonResult(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void static CocoaError.fileNoSuchFileError.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static CocoaError.fileLockingError.getter(_QWORD *a1@<X8>)
{
  *a1 = 255;
}

void static CocoaError.fileReadUnknownError.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static CocoaError.fileReadNoPermissionError.getter(_QWORD *a1@<X8>)
{
  *a1 = 257;
}

void static CocoaError.fileReadInvalidFileNameError.getter(_QWORD *a1@<X8>)
{
  *a1 = 258;
}

void static CocoaError.fileReadCorruptFileError.getter(_QWORD *a1@<X8>)
{
  *a1 = 259;
}

void static CocoaError.fileReadNoSuchFileError.getter(_QWORD *a1@<X8>)
{
  *a1 = 260;
}

void static CocoaError.fileReadInapplicableStringEncodingError.getter(_QWORD *a1@<X8>)
{
  *a1 = 261;
}

void static CocoaError.fileReadUnsupportedSchemeError.getter(_QWORD *a1@<X8>)
{
  *a1 = 262;
}

void static CocoaError.fileReadTooLargeError.getter(_QWORD *a1@<X8>)
{
  *a1 = 263;
}

void static CocoaError.fileReadUnknownStringEncodingError.getter(_QWORD *a1@<X8>)
{
  *a1 = 264;
}

void static CocoaError.fileWriteUnknownError.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

void static CocoaError.fileWriteNoPermissionError.getter(_QWORD *a1@<X8>)
{
  *a1 = 513;
}

void static CocoaError.fileWriteInvalidFileNameError.getter(_QWORD *a1@<X8>)
{
  *a1 = 514;
}

void static CocoaError.fileWriteFileExistsError.getter(_QWORD *a1@<X8>)
{
  *a1 = 516;
}

void static CocoaError.fileWriteInapplicableStringEncodingError.getter(_QWORD *a1@<X8>)
{
  *a1 = 517;
}

void static CocoaError.fileWriteUnsupportedSchemeError.getter(_QWORD *a1@<X8>)
{
  *a1 = 518;
}

void static CocoaError.fileWriteOutOfSpaceError.getter(_QWORD *a1@<X8>)
{
  *a1 = 640;
}

void static CocoaError.fileWriteVolumeReadOnlyError.getter(_QWORD *a1@<X8>)
{
  *a1 = 642;
}

void static CocoaError.fileManagerUnmountUnknownError.getter(_QWORD *a1@<X8>)
{
  *a1 = 768;
}

void static CocoaError.fileManagerUnmountBusyError.getter(_QWORD *a1@<X8>)
{
  *a1 = 769;
}

void static CocoaError.keyValueValidationError.getter(_QWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static CocoaError.formattingError.getter(_QWORD *a1@<X8>)
{
  *a1 = 2048;
}

void static CocoaError.userCancelledError.getter(_QWORD *a1@<X8>)
{
  *a1 = 3072;
}

void static CocoaError.featureUnsupportedError.getter(_QWORD *a1@<X8>)
{
  *a1 = 3328;
}

void static CocoaError.executableNotLoadableError.getter(_QWORD *a1@<X8>)
{
  *a1 = 3584;
}

void static CocoaError.executableArchitectureMismatchError.getter(_QWORD *a1@<X8>)
{
  *a1 = 3585;
}

void static CocoaError.executableRuntimeMismatchError.getter(_QWORD *a1@<X8>)
{
  *a1 = 3586;
}

void static CocoaError.executableLoadError.getter(_QWORD *a1@<X8>)
{
  *a1 = 3587;
}

void static CocoaError.executableLinkError.getter(_QWORD *a1@<X8>)
{
  *a1 = 3588;
}

void static CocoaError.propertyListReadCorruptError.getter(_QWORD *a1@<X8>)
{
  *a1 = 3840;
}

void static CocoaError.propertyListReadUnknownVersionError.getter(_QWORD *a1@<X8>)
{
  *a1 = 3841;
}

void static CocoaError.propertyListReadStreamError.getter(_QWORD *a1@<X8>)
{
  *a1 = 3842;
}

void static CocoaError.propertyListWriteStreamError.getter(_QWORD *a1@<X8>)
{
  *a1 = 3851;
}

void static CocoaError.propertyListWriteInvalidError.getter(_QWORD *a1@<X8>)
{
  *a1 = 3852;
}

void static CocoaError.ubiquitousFileUnavailableError.getter(_QWORD *a1@<X8>)
{
  *a1 = 4353;
}

void static CocoaError.ubiquitousFileNotUploadedDueToQuotaError.getter(_QWORD *a1@<X8>)
{
  *a1 = 4354;
}

void static CocoaError.userActivityHandoffFailedError.getter(_QWORD *a1@<X8>)
{
  *a1 = 4608;
}

void static CocoaError.userActivityConnectionUnavailableError.getter(_QWORD *a1@<X8>)
{
  *a1 = 4609;
}

void static CocoaError.userActivityRemoteApplicationTimedOutError.getter(_QWORD *a1@<X8>)
{
  *a1 = 4610;
}

void static CocoaError.userActivityHandoffUserInfoTooLargeError.getter(_QWORD *a1@<X8>)
{
  *a1 = 4611;
}

void static CocoaError.coderReadCorruptError.getter(_QWORD *a1@<X8>)
{
  *a1 = 4864;
}

void static CocoaError.coderValueNotFoundError.getter(_QWORD *a1@<X8>)
{
  *a1 = 4865;
}

uint64_t static TimeZone.tryParseGMTName(_:)()
{
  return specialized static TimeZone.tryParseGMTName(_:)();
}

void _TimeZoneGMT.__allocating_init(identifier:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_QWORD *_TimeZoneGMT.init(secondsFromGMT:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = specialized static TimeZone.nameForSecondsFromGMT(_:)(a1);
  if (v4)
  {
    v1[3] = v3;
    v1[4] = v4;
    v1[2] = a1;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v1;
}

Swift::tuple_rawOffset_Int_daylightSavingOffset_Double __swiftcall _TimeZoneGMT.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)(Foundation::Date a1, Foundation::TimeZone::DaylightSavingTimePolicy repeatedTimePolicy, Foundation::TimeZone::DaylightSavingTimePolicy skippedTimePolicy)
{
  uint64_t v3;
  Swift::Int v4;
  double v5;
  Swift::tuple_rawOffset_Int_daylightSavingOffset_Double result;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = 0.0;
  result.daylightSavingOffset = v5;
  result.rawOffset = v4;
  return result;
}

uint64_t _TimeZoneGMT.debugDescription.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x7366666F20746D67;
}

uint64_t _TimeZoneGMT.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimeZoneGMT()
{
  Swift::String v0;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x7366666F20746D67;
}

uint64_t specialized static _TimeZoneGMT.abbreviation(for:)(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if ((unint64_t)(a1 - 64801) < 0xFFFFFFFFFFFE05BFLL)
    return 0;
  result = 5524807;
  if (a1 >= 0)
    v3 = a1;
  else
    v3 = -a1;
  if (v3 > 0xDF1 || (unsigned __int16)(v3 + 30) % 0xE10u >= 0x3C)
  {
    if (a1 >= 0)
      v4 = 43;
    else
      v4 = 45;
    v5 = 0xE100000000000000;
    String.append(_:)(*(Swift::String *)&v4);
    if (v3 >= 0x8C82)
      String.UnicodeScalarView.append(_:)();
    String.UnicodeScalarView.append(_:)();
    result = 5524807;
    if ((unsigned __int16)(v3 + 30) % 0xE10u >= 0x3C)
    {
      String.UnicodeScalarView.append(_:)();
      String.UnicodeScalarView.append(_:)();
      String.UnicodeScalarView.append(_:)();
      return 5524807;
    }
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneGMT(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _TimeZoneGMT and conformance _TimeZoneGMT();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneGMT and conformance _TimeZoneGMT()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TimeZoneGMT and conformance _TimeZoneGMT;
  if (!lazy protocol witness table cache variable for type _TimeZoneGMT and conformance _TimeZoneGMT)
  {
    v1 = type metadata accessor for _TimeZoneGMT();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for _TimeZoneGMT, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneGMT and conformance _TimeZoneGMT);
  }
  return result;
}

uint64_t type metadata accessor for _TimeZoneGMT()
{
  return objc_opt_self();
}

uint64_t method lookup function for _TimeZoneGMT()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _TimeZoneGMT.__allocating_init(identifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of _TimeZoneGMT.__allocating_init(secondsFromGMT:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t destroy for _FileManagerImpl()
{
  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for _FileManagerImpl(uint64_t a1)
{
  swift_unknownObjectWeakCopyInit();
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for _FileManagerImpl(uint64_t a1)
{
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for _FileManagerImpl(uint64_t a1)
{
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for _FileManagerImpl(uint64_t a1)
{
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for _FileManagerImpl()
{
  return &type metadata for _FileManagerImpl;
}

Swift::Bool __swiftcall _FileManagerImpl.contentsEqual(atPath:andPath:)(Swift::String atPath, Swift::String andPath)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t object;
  id countAndFlagsBits;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  int v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  void *v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::Bool v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  _QWORD v82[3];
  Swift::String v83;
  int v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  id v88;
  Swift::String v89;
  uint64_t v90;
  Swift::String v91;
  stat_optional v92;
  stat_optional v93;
  int v94;
  unsigned __int16 v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  unsigned __int16 v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;

  v4 = v2;
  v89 = andPath;
  object = (unint64_t)atPath._object;
  countAndFlagsBits = (id)atPath._countAndFlagsBits;
  v104 = *MEMORY[0x1E0C80C00];
  v7 = MEMORY[0x186DA9F5C]();
  if (!v7)
    goto LABEL_71;
  v8 = (void *)v7;
  v9._countAndFlagsBits = (uint64_t)countAndFlagsBits;
  v9._object = (void *)object;
  NSFileManager._fileStat(_:)(&v92, v9);

  outlined init with take of stat?((uint64_t)&v92, (uint64_t)&v99);
  if (_sSo4statVSgWOg((uint64_t)&v99) == 1)
    goto LABEL_5;
  v10 = v99;
  LODWORD(v3) = v100;
  v11 = v101;
  v12 = v102;
  v13 = v103;
  v14 = MEMORY[0x186DA9F5C](v4);
  if (!v14)
    goto LABEL_71;
  v15 = (void *)v14;
  NSFileManager._fileStat(_:)(&v93, v89);

  outlined init with take of stat?((uint64_t)&v93, (uint64_t)&v94);
  if (_sSo4statVSgWOg((uint64_t)&v94) == 1)
    goto LABEL_5;
  v88 = countAndFlagsBits;
  countAndFlagsBits = (id)object;
  object = v97;
  v18 = v98;
  if (v10 == v94 && v11 == v96)
  {
    v16 = 1;
    return v16 & 1;
  }
  v19 = v95;
  v20 = S_IFMT.getter() & v3;
  if (v20 != (S_IFMT.getter() & v19))
    goto LABEL_5;
  v21 = S_IFMT.getter() & v3;
  if (v21 == (unsigned __int16)S_IFBLK.getter() || v21 == (unsigned __int16)S_IFCHR.getter())
  {
    v16 = v12 == (_DWORD)object;
    return v16 & 1;
  }
  v22 = S_IFMT.getter() & v3;
  if (v22 == (unsigned __int16)S_IFREG.getter())
  {
    if (v13 == v18)
    {
      v23 = MEMORY[0x186DA9F5C](v4);
      if (v23)
      {
        v24 = (void *)v23;
        MEMORY[0x1E0C80A78](v23);
        v82[2] = v4;
        v83 = v89;
        v16 = specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)((uint64_t)v88, (unint64_t)countAndFlagsBits, (void (*)(_BYTE *))partial apply for closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:), (uint64_t)v82);

        return v16 & 1;
      }
LABEL_71:
      v84 = 0;
      for (v83._object = (void *)48; ; v83._object = (void *)294)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_73:
        v91._countAndFlagsBits = 0;
        v91._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(34);
        swift_bridgeObjectRelease();
        v91._countAndFlagsBits = 0xD000000000000014;
        v91._object = (void *)0x800000018230AD40;
        LOWORD(v90) = v3;
        lazy protocol witness table accessor for type UInt16 and conformance UInt16();
        v79._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v79);
        swift_bridgeObjectRelease();
        v80._countAndFlagsBits = 0x6C696620726F6620;
        v80._object = (void *)0xEA00000000002065;
        String.append(_:)(v80);
        v81._countAndFlagsBits = (uint64_t)countAndFlagsBits;
        v81._object = (void *)object;
        String.append(_:)(v81);
        v84 = 0;
      }
    }
    goto LABEL_5;
  }
  v25 = S_IFMT.getter() & v3;
  object = (unint64_t)countAndFlagsBits;
  if (v25 != (unsigned __int16)S_IFLNK.getter())
  {
    v40 = S_IFMT.getter() & v3;
    countAndFlagsBits = v88;
    if (v40 != (unsigned __int16)S_IFDIR.getter())
      goto LABEL_73;
    v41 = (void *)MEMORY[0x186DA9F5C](v4);
    if (!v41)
      goto LABEL_71;
    v42 = v41;
    v91._countAndFlagsBits = 0;
    v43 = objc_msgSend(v41, sel_contentsOfDirectoryAtPath_error_, String._bridgeToObjectiveCImpl()(), &v91);

    swift_unknownObjectRelease();
    v3 = v91._countAndFlagsBits;
    if (v43)
    {
      v44 = type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      v87 = v44;
      if (swift_dynamicCastClass())
      {
        swift_retain();

      }
      countAndFlagsBits = (id)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v45 = (_QWORD *)swift_dynamicCastClass();
      if (!v45)
      {
        swift_unknownObjectRelease();
        objc_msgSend(v43, sel_copy);
        v46 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        v45 = (_QWORD *)specialized _arrayForceCast<A, B>(_:)(v46);
        swift_bridgeObjectRelease();
      }
      v47 = (id)v3;

      v48 = MEMORY[0x186DA9F5C](v4);
      if (!v48)
        goto LABEL_71;
      v49 = (void *)v48;
      v50 = String._bridgeToObjectiveCImpl()();
      v91._countAndFlagsBits = 0;
      v51 = objc_msgSend(v49, sel_contentsOfDirectoryAtPath_error_, v50, &v91);

      swift_unknownObjectRelease();
      v52 = (void *)v91._countAndFlagsBits;
      if (v51)
      {
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();

        }
        v53 = swift_dynamicCastClass();
        if (!v53)
        {
          swift_unknownObjectRelease();
          objc_msgSend(v51, sel_copy);
          v54 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          v53 = specialized _arrayForceCast<A, B>(_:)(v54);
          swift_bridgeObjectRelease();
        }
        v55 = v52;

        v56 = Set.init(minimumCapacity:)();
        v90 = v56;
        v57 = *(_QWORD *)(v53 + 16);
        if (v57)
        {
          v58 = v45;
          v59 = (unint64_t *)(v53 + 40);
          do
          {
            v60 = *(v59 - 1);
            v61 = *v59;
            swift_bridgeObjectRetain();
            specialized Set._Variant.insert(_:)((unint64_t *)&v91, v60, v61);
            swift_bridgeObjectRelease();
            v59 += 2;
            --v57;
          }
          while (v57);
          swift_bridgeObjectRelease();
          v62 = v90;
          v45 = v58;
        }
        else
        {
          v65 = v56;
          swift_bridgeObjectRelease();
          v62 = v65;
        }
        v66 = v45[2];
        if (v66 == *(_QWORD *)(v62 + 16))
        {
          if (!v66)
          {
LABEL_69:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v16 = 1;
            return v16 & 1;
          }
          v67 = v45[4];
          v68 = (void *)v45[5];
          swift_bridgeObjectRetain();
          if ((specialized Set.contains(_:)(v67, (uint64_t)v68, v62) & 1) != 0)
          {
            v69 = 0;
            v70 = (void **)(v45 + 7);
            v85 = v66 - 1;
            v86 = v45;
            while (1)
            {
              v71 = v62;
              v91._countAndFlagsBits = (uint64_t)v88;
              v91._object = (void *)object;
              swift_bridgeObjectRetain();
              v72._countAndFlagsBits = 47;
              v72._object = (void *)0xE100000000000000;
              String.append(_:)(v72);
              v73._countAndFlagsBits = v67;
              v73._object = v68;
              String.append(_:)(v73);
              v74 = v91._object;
              v87 = v91._countAndFlagsBits;
              v91 = v89;
              swift_bridgeObjectRetain();
              v75._countAndFlagsBits = 47;
              v75._object = (void *)0xE100000000000000;
              String.append(_:)(v75);
              v76._countAndFlagsBits = v67;
              v76._object = v68;
              String.append(_:)(v76);
              swift_bridgeObjectRelease();
              v77._countAndFlagsBits = v87;
              v77._object = v74;
              v78 = _FileManagerImpl.contentsEqual(atPath:andPath:)(v77, v91);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (!v78)
                break;
              if (v85 == v69)
                goto LABEL_69;
              if ((unint64_t)++v69 >= v86[2])
                __break(1u);
              v62 = v71;
              v67 = (uint64_t)*(v70 - 1);
              v68 = *v70;
              swift_bridgeObjectRetain();
              v70 += 2;
              if ((specialized Set.contains(_:)(v67, (uint64_t)v68, v71) & 1) == 0)
                goto LABEL_67;
            }
          }
          else
          {
LABEL_67:
            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      v63 = (id)v91._countAndFlagsBits;
      swift_bridgeObjectRelease();
      if (!v63)
        goto LABEL_51;
LABEL_50:
      swift_willThrow();

      goto LABEL_5;
    }
    if (!v91._countAndFlagsBits)
      goto LABEL_51;
LABEL_44:
    v63 = (id)v91._countAndFlagsBits;
    goto LABEL_50;
  }
  v26 = (void *)MEMORY[0x186DA9F5C](v4);
  if (!v26)
    goto LABEL_71;
  v91._countAndFlagsBits = 0;
  countAndFlagsBits = objc_msgSend(v26, sel_destinationOfSymbolicLinkAtPath_error_, String._bridgeToObjectiveCImpl()(), &v91);

  swift_unknownObjectRelease();
  v27 = (void *)v91._countAndFlagsBits;
  if (!countAndFlagsBits)
  {
    if (!v91._countAndFlagsBits)
      goto LABEL_51;
    goto LABEL_44;
  }
  v3 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(countAndFlagsBits);
  v29 = v28;
  v30 = v27;

  v31 = MEMORY[0x186DA9F5C](v4);
  if (!v31)
    goto LABEL_71;
  v32 = (void *)v31;
  v33 = String._bridgeToObjectiveCImpl()();
  v91._countAndFlagsBits = 0;
  v34 = objc_msgSend(v32, sel_destinationOfSymbolicLinkAtPath_error_, v33, &v91);

  swift_unknownObjectRelease();
  v35 = (void *)v91._countAndFlagsBits;
  if (!v34)
  {
    v64 = (id)v91._countAndFlagsBits;
    swift_bridgeObjectRelease();
    if (v64)
    {
      swift_willThrow();

LABEL_5:
      v16 = 0;
      return v16 & 1;
    }
LABEL_51:
    if (one-time initialization token for _nilObjCError != -1)
      swift_once();
    swift_willThrow();
    goto LABEL_5;
  }
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v38 = v37;
  v39 = v35;

  if ((id)v3 == v36 && v29 == v38)
  {
    swift_bridgeObjectRelease_n();
    v16 = 1;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v16 & 1;
}

uint64_t specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(char *), uint64_t a4)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t ObjectType;
  uint64_t isStackAllocationSafe;
  unsigned __int8 v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  unsigned __int8 v17;
  char *v18;
  _QWORD v19[132];

  v6 = v4;
  v19[131] = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager())
    return specialized String.withFileSystemRepresentation<A>(_:)(a3, a4, a1, a2);
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v13 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v19, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v13 & 1) != 0)
      v14 = (char *)v19;
    else
      v14 = 0;
    result = a3(v14);
    if (v5)
      return swift_willThrow();
  }
  else
  {
    v16 = swift_slowAlloc();
    v17 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v16, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v17 & 1) != 0)
      v18 = (char *)v16;
    else
      v18 = 0;
    a3(v18);
    return MEMORY[0x186DA9E78](v16, -1, -1);
  }
  return result;
}

uint64_t specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)(uint64_t a1, unint64_t a2, void (*a3)(char *), uint64_t a4)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t ObjectType;
  uint64_t isStackAllocationSafe;
  unsigned __int8 v13;
  char *v14;
  uint64_t v16;
  unsigned __int8 v17;
  char *v18;
  _QWORD v19[134];

  v6 = v4;
  v19[133] = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager())
    return specialized String.withFileSystemRepresentation<A>(_:)(a3, a4, a1, a2);
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v13 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v19, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v13 & 1) != 0)
      v14 = (char *)v19;
    else
      v14 = 0;
    a3(v14);
    if (v5)
      return swift_willThrow();
    else
      return v19[131];
  }
  else
  {
    v16 = swift_slowAlloc();
    v17 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v16, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v17 & 1) != 0)
      v18 = (char *)v16;
    else
      v18 = 0;
    a3(v18);
    if (v5)
    {
      return MEMORY[0x186DA9E78](v16, -1, -1);
    }
    else
    {
      MEMORY[0x186DA9E78](v16, -1, -1);
      return v19[132];
    }
  }
}

{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t ObjectType;
  uint64_t isStackAllocationSafe;
  unsigned __int8 v13;
  char *v14;
  uint64_t v16;
  unsigned __int8 v17;
  char *v18;
  _QWORD v19[136];

  v6 = v4;
  v19[135] = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager())
    return specialized String.withFileSystemRepresentation<A>(_:)(a3, a4, a1, a2);
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v13 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v19, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v13 & 1) != 0)
      v14 = (char *)v19;
    else
      v14 = 0;
    a3(v14);
    if (v5)
      return swift_willThrow();
    else
      return v19[131];
  }
  else
  {
    v16 = swift_slowAlloc();
    v17 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v16, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v17 & 1) != 0)
      v18 = (char *)v16;
    else
      v18 = 0;
    a3(v18);
    if (v5)
    {
      return MEMORY[0x186DA9E78](v16, -1, -1);
    }
    else
    {
      MEMORY[0x186DA9E78](v16, -1, -1);
      return v19[133];
    }
  }
}

uint64_t specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)(uint64_t a1, unint64_t a2, void (*a3)(_BYTE *), uint64_t a4)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t ObjectType;
  uint64_t isStackAllocationSafe;
  unsigned __int8 v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  _BYTE *v18;
  _BYTE v20[1048];
  uint64_t v21;

  v6 = v4;
  v21 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager())
  {
    v15 = specialized String.withFileSystemRepresentation<A>(_:)(a3, a4, a1, a2);
  }
  else
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
    {
      MEMORY[0x1E0C80A78](isStackAllocationSafe);
      v13 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v20, 1026, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease();
      if ((v13 & 1) != 0)
        v14 = v20;
      else
        v14 = 0;
      a3(v14);
      if (v5)
        v15 = swift_willThrow();
      else
        v15 = v20[1046];
    }
    else
    {
      v16 = swift_slowAlloc();
      v17 = objc_msgSend(v6, sel_getFileSystemRepresentation_maxLength_withPath_, v16, 1026, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease();
      if ((v17 & 1) != 0)
        v18 = (_BYTE *)v16;
      else
        v18 = 0;
      a3(v18);
      if (v5)
      {
        v15 = MEMORY[0x186DA9E78](v16, -1, -1);
      }
      else
      {
        MEMORY[0x186DA9E78](v16, -1, -1);
        v15 = v20[1047];
      }
    }
  }
  return v15 & 1;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  char v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  __int128 *v98;
  __int128 v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _OWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char v142;
  unint64_t v143;
  int v144;
  char v145;
  char v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  __int128 *v151;
  __int128 v152;
  char *v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  _OWORD *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  __int128 v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  __int128 v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  char v262;
  char v263;
  char v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  uint64_t v328;

  v2 = a1;
  v3 = *(_OWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 176);
  v313 = *(_OWORD *)(a1 + 160);
  v314 = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v6 = v5;
  v7 = *(_OWORD *)(a1 + 112);
  v8 = *(_OWORD *)(a1 + 128);
  v309 = *(_OWORD *)(a1 + 96);
  v310 = v7;
  v10 = *(_OWORD *)(a1 + 112);
  v9 = *(_OWORD *)(a1 + 128);
  v312 = *(_OWORD *)(a1 + 144);
  v311 = v9;
  v11 = *(_OWORD *)(a1 + 16);
  v12 = *(_OWORD *)(a1 + 48);
  v305 = *(_OWORD *)(a1 + 32);
  v306 = v12;
  v13 = *(_OWORD *)(a1 + 64);
  v308 = v5;
  v307 = v13;
  v14 = *(_OWORD *)a1;
  v304 = v11;
  v303 = v14;
  v15 = *(_OWORD *)(v1 + 144);
  v16 = *(_OWORD *)(v1 + 176);
  v326 = *(_OWORD *)(v1 + 160);
  v327 = v16;
  v17 = *(_OWORD *)(v1 + 80);
  v18 = v17;
  v19 = *(_OWORD *)(v1 + 112);
  v20 = *(_OWORD *)(v1 + 128);
  v322 = *(_OWORD *)(v1 + 96);
  v323 = v19;
  v22 = *(_OWORD *)(v1 + 112);
  v21 = *(_OWORD *)(v1 + 128);
  v325 = *(_OWORD *)(v1 + 144);
  v324 = v21;
  v23 = *(_OWORD *)(v1 + 16);
  v24 = *(_OWORD *)(v1 + 48);
  v318 = *(_OWORD *)(v1 + 32);
  v319 = v24;
  v25 = *(_OWORD *)(v1 + 64);
  v321 = v17;
  v320 = v25;
  v26 = *(_OWORD *)v1;
  v317 = v23;
  v316 = v26;
  v27 = *(_OWORD *)(v1 + 176);
  v251 = v326;
  v252 = v27;
  v247 = v322;
  v248 = v22;
  v250 = v15;
  v249 = v20;
  v28 = *(_OWORD *)(v1 + 16);
  v29 = *(_OWORD *)(v1 + 48);
  v243 = *(_OWORD *)(v1 + 32);
  v244 = v29;
  v30 = *(_OWORD *)(v1 + 64);
  v246 = v18;
  v245 = v30;
  v31 = *(_OWORD *)v1;
  v242 = v28;
  v241 = v31;
  v32 = *(_OWORD *)(a1 + 176);
  v231 = v313;
  v232 = v32;
  v315 = *(_QWORD *)(a1 + 192);
  v328 = *(_QWORD *)(v1 + 192);
  v34 = *(_QWORD *)(v1 + 8);
  v33 = *(_QWORD *)(v1 + 16);
  v35 = *(_QWORD *)(v1 + 24);
  v36 = *(_QWORD *)(v1 + 32);
  v37 = *(_QWORD *)(v1 + 40);
  v38 = *(_QWORD *)(v1 + 48);
  v39 = *(_QWORD *)(v1 + 56);
  v40 = *(_QWORD *)(v1 + 64);
  v177 = *(_QWORD *)(v1 + 72);
  v253 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)&v254 = v34;
  v174 = v33;
  *((_QWORD *)&v254 + 1) = v33;
  v165 = v35;
  v255 = v35;
  v256 = v36;
  v164 = v37;
  v257 = v37;
  v258 = v38;
  v259 = v39;
  v168 = v40;
  v260 = v40;
  v42 = *(_QWORD *)(a1 + 8);
  v41 = *(_QWORD *)(a1 + 16);
  v43 = *(_QWORD *)(a1 + 24);
  v44 = *(_QWORD *)(a1 + 32);
  v46 = *(_QWORD *)(a1 + 40);
  v45 = *(_QWORD *)(a1 + 48);
  v47 = *(_QWORD *)(a1 + 56);
  v48 = *(_QWORD *)(a1 + 64);
  v176 = *(_QWORD *)(a1 + 72);
  v49 = *(_QWORD *)(a1 + 192);
  v227 = v309;
  v228 = v10;
  v229 = v8;
  v230 = v3;
  v50 = *(_OWORD *)(a1 + 16);
  v51 = *(_OWORD *)(a1 + 48);
  v223 = *(_OWORD *)(a1 + 32);
  v224 = v51;
  v225 = *(_OWORD *)(a1 + 64);
  v226 = v6;
  v221 = *(_OWORD *)a1;
  v222 = v50;
  v233 = v49;
  *(_QWORD *)&v234 = v42;
  v187 = v41;
  *((_QWORD *)&v234 + 1) = v41;
  v235 = v43;
  v236 = v44;
  v237 = v46;
  v238 = v45;
  v239 = v47;
  v240 = v48;
  outlined retain of AttributedString.Runs(v1);
  outlined retain of AttributedString.Runs(v2);
  v287 = v326;
  v288 = v327;
  v289 = v328;
  v283 = v322;
  v284 = v323;
  v286 = v325;
  v285 = v324;
  v279 = v318;
  v280 = v319;
  v282 = v321;
  v281 = v320;
  v278 = v317;
  v277 = v316;
  v300 = v313;
  v301 = v314;
  v302 = v315;
  v296 = v309;
  v297 = v310;
  v299 = v312;
  v298 = v311;
  v292 = v305;
  v293 = v306;
  v295 = v308;
  v294 = v307;
  v166 = v2;
  v167 = v34;
  v163 = v34;
  v52 = v34;
  v53 = v48;
  v291 = v304;
  v290 = v303;
  while (1)
  {
    v189 = v46;
    v179 = v53;
    if (v52 == v177)
    {
      v218 = v287;
      v219 = v288;
      v220 = v289;
      v214 = v283;
      v215 = v284;
      v216 = v285;
      v217 = v286;
      v210 = v279;
      v211 = v280;
      v212 = v281;
      v213 = v282;
      v208 = v277;
      v209 = v278;
      v54 = v187;
      if (v42 == v176)
      {
        v161 = 0;
        v207 = v302;
        v205 = v300;
        v206 = v301;
        v201 = v296;
        v202 = v297;
        v203 = v298;
        v204 = v299;
        v197 = v292;
        v198 = v293;
        v199 = v294;
        v200 = v295;
        v195 = v290;
        v196 = v291;
        goto LABEL_220;
      }
      v173 = 0;
      v185 = 0;
      v186 = 0;
      v175 = 0;
      v178 = v177;
      goto LABEL_108;
    }
    result = (uint64_t)AttributedString.Runs.subscript.getter(&v254, &v195);
    v56 = v167;
    if (v167 < v163 || v167 >= v177)
      goto LABEL_245;
    v185 = v196;
    v186 = v198;
    v57 = *(_QWORD *)(*(_QWORD *)v169 + 64);
    v58 = *(_QWORD *)(*(_QWORD *)v169 + 72);
    v59 = *(_QWORD *)(*(_QWORD *)v169 + 88);
    v171 = *(_QWORD *)(*(_QWORD *)v169 + 80);
    v173 = *((_QWORD *)&v195 + 1);
    v175 = v195;
    v183 = *(_OWORD **)v169;
    if (v36 == 1 || v174 != v59)
    {
      if (v57)
        v63 = *(_QWORD *)(*(_QWORD *)v169 + 72);
      else
        v63 = 0;
      if (v167 < 0 || v63 < v167)
        goto LABEL_254;
      if (v57)
      {
        v61 = *(_QWORD *)(*(_QWORD *)v169 + 88);
        v64 = *(unsigned __int8 *)(v57 + 18);
        if (*(_WORD *)(v57 + 16) && v167 < v58)
        {
          if (*(_BYTE *)(v57 + 18))
          {
            swift_unknownObjectRetain_n();
            outlined retain of AttributedString.Runs(v169);
            result = swift_unknownObjectRetain();
            v68 = v57;
            while (1)
            {
              v70 = *(unsigned __int16 *)(v68 + 16);
              if (!*(_WORD *)(v68 + 16))
                break;
              v71 = *(_QWORD *)(v68 + 32);
              v72 = v56 - v71;
              if (__OFSUB__(v56, v71))
                goto LABEL_241;
              if (__OFADD__(v72, 1))
                goto LABEL_242;
              if (v72 + 1 <= 0)
              {
                v70 = 0;
                goto LABEL_29;
              }
              if ((_DWORD)v70 == 1)
              {
                v56 -= v71;
                break;
              }
              v73 = *(_QWORD *)(v68 + 56);
              v74 = __OFSUB__(v72, v73);
              v75 = v72 - v73;
              if (v74)
                goto LABEL_252;
              if (__OFADD__(v75, 1))
                goto LABEL_253;
              if (v75 + 1 < 1)
              {
                v70 = 1;
                v56 = v72;
                goto LABEL_29;
              }
              if ((_DWORD)v70 == 2)
              {
                v56 = v75;
                break;
              }
              v76 = (_QWORD *)(v68 + 80);
              v77 = 2;
              while (1)
              {
                if (v70 == v77)
                  goto LABEL_232;
                v56 = v75 - *v76;
                if (__OFSUB__(v75, *v76))
                {
LABEL_233:
                  __break(1u);
LABEL_234:
                  __break(1u);
                  goto LABEL_235;
                }
                if (__OFADD__(v56, 1))
                  goto LABEL_234;
                if (v56 + 1 < 1)
                  break;
                ++v77;
                v76 += 3;
                v75 = v56;
                if (v70 == v77)
                  goto LABEL_28;
              }
              v70 = v77;
              v56 = v75;
LABEL_29:
              v69 = (4 * *(_BYTE *)(v68 + 18) + 8) & 0x3C;
              v64 = ((-15 << v69) - 1) & v64 | (v70 << v69);
              v36 = *(_QWORD *)(v68 + 24 + 24 * v70);
              swift_unknownObjectRetain();
              result = swift_unknownObjectRelease();
              v68 = v36;
              if (!*(_BYTE *)(v36 + 18))
                goto LABEL_52;
            }
LABEL_28:
            if (!v56)
              goto LABEL_29;
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
LABEL_240:
            __break(1u);
LABEL_241:
            __break(1u);
LABEL_242:
            __break(1u);
LABEL_243:
            __break(1u);
LABEL_244:
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
LABEL_249:
            __break(1u);
LABEL_250:
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
LABEL_254:
            __break(1u);
LABEL_255:
            __break(1u);
            goto LABEL_256;
          }
          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs(v169);
          result = swift_unknownObjectRetain();
          v64 = 0;
          v36 = v57;
LABEL_52:
          v78 = *(unsigned __int16 *)(v36 + 16);
          if (*(_WORD *)(v36 + 16))
          {
            v79 = v56 - 1;
            if (__OFSUB__(v56, 1))
              goto LABEL_264;
            if (__OFADD__(v79, 1))
              goto LABEL_265;
            if (v56 <= 0)
            {
              v78 = 0;
            }
            else
            {
              if ((_DWORD)v78 == 1)
                goto LABEL_72;
              v74 = __OFSUB__(v79, 1);
              v79 = v56 - 2;
              if (v74)
                goto LABEL_268;
              if (__OFADD__(v79, 1))
                goto LABEL_269;
              if (v56 - 1 < 1)
              {
                v78 = 1;
              }
              else
              {
                if ((_DWORD)v78 == 2)
                  goto LABEL_72;
                v80 = 0;
                v81 = v78 - 2;
                if (v79 >= v78 - 3)
                  v82 = v78 - 3;
                else
                  v82 = v56 - 2;
                if (v82 >= v56 + 0x7FFFFFFFFFFFFFFELL)
                  v82 = v56 + 0x7FFFFFFFFFFFFFFELL;
                while (1)
                {
                  if (v81 <= v82)
                    goto LABEL_261;
                  if (v56 + 0x7FFFFFFFFFFFFFFELL == v80)
                    goto LABEL_262;
                  if (v79 == v80)
                    break;
                  if (v81 == ++v80)
                  {
                    v79 -= v80;
                    goto LABEL_72;
                  }
                }
                v78 = v56;
              }
            }
          }
          else
          {
            v79 = v56;
LABEL_72:
            if (v79)
              goto LABEL_263;
          }
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v60 = v64 & 0xFFFFFFFFFFFFF0FFLL | (v78 << 8);
        }
        else
        {
          swift_unknownObjectRetain_n();
          outlined retain of AttributedString.Runs(v169);
          v66 = *(unsigned __int16 *)(v57 + 16);
          v67 = *(_BYTE *)(v57 + 18);
          swift_unknownObjectRelease_n();
          v36 = 0;
          v60 = ((-15 << ((4 * v67 + 8) & 0x3C)) - 1) & v64 | (unint64_t)(v66 << ((4 * v67 + 8) & 0x3C));
        }
        swift_unknownObjectRetain();
        v59 = v61;
        v62 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v61, v60, v36, v57, v58, v171);
        result = swift_unknownObjectRelease_n();
      }
      else
      {
        result = outlined retain of AttributedString.Runs(v169);
        v60 = 0;
        v36 = 0;
        v62 = 0;
        v61 = v59;
      }
    }
    else if (v168 == 2)
    {
      v60 = v165;
      if (v57)
      {
        outlined retain of AttributedString.Runs(v169);
        swift_unknownObjectRetain();
        v61 = v174;
        result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v174, v165, v36, v57, v58, v171);
        v62 = result;
      }
      else
      {
        result = outlined retain of AttributedString.Runs(v169);
        v62 = 0;
        v61 = v174;
      }
    }
    else
    {
      v62 = v164 >> 11;
      outlined retain of AttributedString.Runs(v169);
      result = swift_unknownObjectRetain();
      v61 = v174;
      v60 = v165;
    }
    *(_QWORD *)&v195 = v61;
    *((_QWORD *)&v195 + 1) = v60;
    *(_QWORD *)&v196 = v36;
    if (__OFADD__(v167, 1))
      goto LABEL_246;
    if (v61 != v59)
      goto LABEL_247;
    v178 = v167 + 1;
    v180 = v43;
    if (v36)
    {
      v83 = v60;
      v84 = *(_QWORD *)(v36 + 24 * ((v60 >> ((4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v83 = v60;
      v84 = specialized Rope._Node.subscript.getter(v60, v57);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v74 = __OFADD__(v62, v84);
    v85 = v62 + v84;
    if (v74)
      goto LABEL_248;
    v86 = v59;
    if (v57)
    {
      v87 = ((-15 << ((4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v57 + 18) | ((unint64_t)*(unsigned __int16 *)(v57 + 16) << ((4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C));
      result = swift_unknownObjectRetain();
    }
    else
    {
      v87 = 0;
    }
    if (v83 >= v87)
      goto LABEL_249;
    if (v36
      && (v88 = (4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C,
          v89 = ((v83 >> v88) & 0xF) + 1,
          v89 < *(unsigned __int16 *)(v36 + 16)))
    {
      v90 = (v89 << v88) | ((-15 << v88) - 1) & v83;
      swift_unknownObjectRelease_n();
    }
    else
    {
      v91 = *(unsigned __int8 *)(v57 + 18);
      v92 = (4 * v91 + 8) & 0x3C;
      v191 = (v83 >> v92) & 0xF;
      if (v91)
      {
        swift_unknownObjectRetain();
        v93 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v57 + 24, &v191, (uint64_t)&v195, v57, v91);
        swift_unknownObjectRelease();
        if ((v93 & 1) == 0)
          goto LABEL_98;
        swift_unknownObjectRelease_n();
        v90 = *((_QWORD *)&v195 + 1);
      }
      else
      {
        v94 = ((v83 >> v92) & 0xF) + 1;
        if (v94 >= *(unsigned __int16 *)(v57 + 16))
        {
LABEL_98:
          if (v57)
          {
            v96 = *(unsigned __int8 *)(v57 + 18);
            v97 = *(unsigned __int16 *)(v57 + 16);
            swift_unknownObjectRelease_n();
            v90 = ((-15 << ((4 * v96 + 8) & 0x3C)) - 1) & v96 | (unint64_t)(v97 << ((4 * v96 + 8) & 0x3C));
          }
          else
          {
            v90 = 0;
          }
          v95 = v168;
          *(_QWORD *)&v195 = v86;
          *((_QWORD *)&v195 + 1) = v90;
          *(_QWORD *)&v196 = 0;
          goto LABEL_102;
        }
        v90 = (v94 << v92) | ((-15 << v92) - 1) & v83;
        *((_QWORD *)&v195 + 1) = v90;
        swift_unknownObjectRelease_n();
        *(_QWORD *)&v196 = v57;
      }
    }
    v95 = v168;
LABEL_102:
    v165 = v90;
    v174 = v195;
    v36 = v196;
    v98 = v183 + 1;
    if (v95 == 2)
    {
      v99 = v183[2];
      v274 = *v98;
      v275 = v99;
      v276 = v183[3];
      v100 = &v262;
      BigString.utf8.getter();
      BigString.startIndex.getter();
      v101 = BigString.UTF8View.index(_:offsetBy:)();
      v103 = v102;
      v105 = v104;
      v107 = v106;
      v2 = v166;
    }
    else
    {
      v108 = v183[2];
      v271 = *v98;
      v272 = v108;
      v273 = v183[3];
      BigString.utf8.getter();
      result = v164;
      v2 = v166;
      if (__OFSUB__(v85, v164 >> 11))
        goto LABEL_255;
      v100 = &v261;
      v101 = BigString.UTF8View.index(_:offsetBy:)();
      v103 = v109;
      v105 = v110;
      v107 = v111;
    }
    outlined release of Locale((uint64_t)v100);
    outlined release of AttributedString.Runs(v169);
    *(_QWORD *)&v254 = v167 + 1;
    *((_QWORD *)&v254 + 1) = v174;
    v255 = v165;
    v256 = v36;
    v257 = v101;
    v258 = v103;
    v259 = v105;
    v168 = v107;
    v260 = v107;
    v218 = v326;
    v219 = v327;
    v220 = v328;
    v214 = v322;
    v215 = v323;
    v216 = v324;
    v217 = v325;
    v210 = v318;
    v211 = v319;
    v212 = v320;
    v213 = v321;
    v208 = v316;
    v209 = v317;
    if (v42 == v176)
    {
      v205 = v300;
      v206 = v301;
      v207 = v302;
      v201 = v296;
      v202 = v297;
      v203 = v298;
      v204 = v299;
      v197 = v292;
      v198 = v293;
      v199 = v294;
      v200 = v295;
      v195 = v290;
      v196 = v291;
      if (v175)
      {
LABEL_218:
        outlined release of AttributedString.Runs((uint64_t)&v195);
        outlined release of AttributedString.Runs((uint64_t)&v208);
        v162 = v175;
        goto LABEL_222;
      }
      v161 = 0;
LABEL_220:
      outlined release of AttributedString.Runs((uint64_t)&v195);
      outlined release of AttributedString.Runs((uint64_t)&v208);
      if (!v161)
        return 1;
      v162 = v161;
LABEL_222:
      outlined consume of AttributedString.Runs.Run?(v162);
      return 0;
    }
    v164 = v101;
    ++v167;
    v54 = v187;
    v46 = v189;
    v43 = v180;
LABEL_108:
    result = (uint64_t)AttributedString.Runs.subscript.getter(&v234, &v191);
    if (v42 >= v176)
    {
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
      goto LABEL_238;
    }
    v112 = v46;
    v182 = v193;
    v170 = v192;
    v184 = v194;
    v172 = v191;
    v113 = *(_OWORD **)v2;
    v114 = *(_QWORD *)(*(_QWORD *)v2 + 64);
    v115 = *(_QWORD *)(*(_QWORD *)v2 + 72);
    v181 = *(_QWORD *)(*(_QWORD *)v2 + 80);
    v188 = *(_QWORD *)(*(_QWORD *)v2 + 88);
    if (v44 == 1 || v54 != *(_QWORD *)(*(_QWORD *)v2 + 88))
    {
      if (v114)
        v117 = *(_QWORD *)(*(_QWORD *)v2 + 72);
      else
        v117 = 0;
      if (v42 < 0 || v117 < v42)
        goto LABEL_250;
      if (!v114)
      {
        result = outlined retain of AttributedString.Runs(v2);
        v129 = v188;
        v43 = 0;
        v44 = 0;
        v116 = 0;
        v54 = v188;
        goto LABEL_180;
      }
      v118 = *(unsigned __int8 *)(v114 + 18);
      if (!*(_WORD *)(v114 + 16) || v42 >= v115)
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs(v2);
        v130 = *(unsigned __int16 *)(v114 + 16);
        v131 = *(_BYTE *)(v114 + 18);
        swift_unknownObjectRelease_n();
        v44 = 0;
        v43 = ((-15 << ((4 * v131 + 8) & 0x3C)) - 1) & v118 | (unint64_t)(v130 << ((4 * v131 + 8) & 0x3C));
LABEL_179:
        swift_unknownObjectRetain();
        v54 = v188;
        v116 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v188, v43, v44, v114, v115, v181);
        result = swift_unknownObjectRelease_n();
        v129 = v188;
        goto LABEL_180;
      }
      if (*(_BYTE *)(v114 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs(v2);
        result = swift_unknownObjectRetain();
        v119 = v42;
        v120 = v114;
        while (1)
        {
          v122 = *(unsigned __int16 *)(v120 + 16);
          if (*(_WORD *)(v120 + 16))
          {
            v123 = *(_QWORD *)(v120 + 32);
            v124 = v119 - v123;
            if (__OFSUB__(v119, v123))
              goto LABEL_230;
            if (__OFADD__(v124, 1))
              goto LABEL_231;
            if (v124 + 1 <= 0)
            {
              v122 = 0;
              goto LABEL_126;
            }
            if ((_DWORD)v122 == 1)
            {
              v119 -= v123;
            }
            else
            {
              v125 = *(_QWORD *)(v120 + 56);
              v74 = __OFSUB__(v124, v125);
              v126 = v124 - v125;
              if (v74)
                goto LABEL_243;
              if (__OFADD__(v126, 1))
                goto LABEL_244;
              if (v126 + 1 < 1)
              {
                v122 = 1;
                v119 = v124;
                goto LABEL_126;
              }
              if ((_DWORD)v122 != 2)
              {
                v127 = (_QWORD *)(v120 + 80);
                v128 = 2;
                while (v122 != v128)
                {
                  v119 = v126 - *v127;
                  if (__OFSUB__(v126, *v127))
                    goto LABEL_227;
                  if (__OFADD__(v119, 1))
                    goto LABEL_228;
                  if (v119 + 1 < 1)
                  {
                    v122 = v128;
                    v119 = v126;
                    goto LABEL_126;
                  }
                  ++v128;
                  v127 += 3;
                  v126 = v119;
                  if (v122 == v128)
                    goto LABEL_125;
                }
                __break(1u);
LABEL_227:
                __break(1u);
LABEL_228:
                __break(1u);
LABEL_229:
                __break(1u);
LABEL_230:
                __break(1u);
LABEL_231:
                __break(1u);
LABEL_232:
                __break(1u);
                goto LABEL_233;
              }
              v119 = v126;
            }
          }
LABEL_125:
          if (v119)
            goto LABEL_229;
LABEL_126:
          v121 = (4 * *(_BYTE *)(v120 + 18) + 8) & 0x3C;
          v118 = ((-15 << v121) - 1) & v118 | (v122 << v121);
          v44 = *(_QWORD *)(v120 + 24 + 24 * v122);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v120 = v44;
          if (!*(_BYTE *)(v44 + 18))
            goto LABEL_153;
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs(v2);
      result = swift_unknownObjectRetain();
      v118 = 0;
      v119 = v42;
      v44 = v114;
LABEL_153:
      v132 = *(unsigned __int16 *)(v44 + 16);
      if (*(_WORD *)(v44 + 16))
      {
        v133 = v119 - 1;
        if (__OFSUB__(v119, 1))
          goto LABEL_259;
        if (__OFADD__(v133, 1))
          goto LABEL_260;
        if (v119 <= 0)
        {
          v132 = 0;
          goto LABEL_178;
        }
        if ((_DWORD)v132 != 1)
        {
          v74 = __OFSUB__(v133, 1);
          v133 = v119 - 2;
          if (v74)
            goto LABEL_266;
          if (__OFADD__(v133, 1))
            goto LABEL_267;
          if (v119 - 1 >= 1)
          {
            if ((_DWORD)v132 != 2)
            {
              v134 = 0;
              v135 = v132 - 2;
              if (v133 >= v132 - 3)
                v136 = v132 - 3;
              else
                v136 = v119 - 2;
              if (v136 >= v119 + 0x7FFFFFFFFFFFFFFELL)
                v136 = v119 + 0x7FFFFFFFFFFFFFFELL;
              while (v135 > v136)
              {
                if (v119 + 0x7FFFFFFFFFFFFFFELL == v134)
                  goto LABEL_257;
                if (v133 == v134)
                {
                  v132 = v119;
                  goto LABEL_178;
                }
                if (v135 == ++v134)
                {
                  v133 -= v134;
                  goto LABEL_173;
                }
              }
LABEL_256:
              __break(1u);
LABEL_257:
              __break(1u);
LABEL_258:
              __break(1u);
LABEL_259:
              __break(1u);
LABEL_260:
              __break(1u);
LABEL_261:
              __break(1u);
LABEL_262:
              __break(1u);
LABEL_263:
              __break(1u);
LABEL_264:
              __break(1u);
LABEL_265:
              __break(1u);
LABEL_266:
              __break(1u);
LABEL_267:
              __break(1u);
LABEL_268:
              __break(1u);
LABEL_269:
              __break(1u);
              return result;
            }
            goto LABEL_173;
          }
          v132 = 1;
LABEL_178:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v43 = v118 & 0xFFFFFFFFFFFFF0FFLL | (v132 << 8);
          goto LABEL_179;
        }
      }
      else
      {
        v133 = v119;
      }
LABEL_173:
      if (v133)
        goto LABEL_258;
      goto LABEL_178;
    }
    if (v179 == 2)
    {
      if (v114)
      {
        outlined retain of AttributedString.Runs(v2);
        swift_unknownObjectRetain();
        result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v54, v43, v44, v114, v115, v181);
        v116 = result;
      }
      else
      {
        result = outlined retain of AttributedString.Runs(v2);
        v116 = 0;
      }
    }
    else
    {
      v116 = v112 >> 11;
      outlined retain of AttributedString.Runs(v2);
      result = swift_unknownObjectRetain();
    }
    v129 = v188;
LABEL_180:
    v191 = v54;
    v192 = v43;
    v193 = v44;
    v74 = __OFADD__(v42, 1);
    v137 = v42 + 1;
    if (v74)
      goto LABEL_236;
    if (v54 != v129)
      goto LABEL_237;
    v138 = v137;
    if (v44)
    {
      v139 = *(_QWORD *)(v44 + 24 * ((v43 >> ((4 * *(_BYTE *)(v44 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      v139 = specialized Rope._Node.subscript.getter(v43, v114);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v140 = v116 + v139;
    if (__OFADD__(v116, v139))
      goto LABEL_239;
    if (v114)
    {
      v141 = ((-15 << ((4 * *(_BYTE *)(v114 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v114 + 18) | ((unint64_t)*(unsigned __int16 *)(v114 + 16) << ((4 * *(_BYTE *)(v114 + 18) + 8) & 0x3C));
      result = swift_unknownObjectRetain();
    }
    else
    {
      v141 = 0;
    }
    v42 = v138;
    if (v43 >= v141)
      goto LABEL_240;
    if (v44)
    {
      v142 = (4 * *(_BYTE *)(v44 + 18) + 8) & 0x3C;
      v143 = ((v43 >> v142) & 0xF) + 1;
      if (v143 < *(unsigned __int16 *)(v44 + 16))
      {
        v43 = (v143 << v142) | ((-15 << v142) - 1) & v43;
        swift_unknownObjectRelease_n();
LABEL_198:
        v148 = v189;
        goto LABEL_203;
      }
    }
    v144 = *(unsigned __int8 *)(v114 + 18);
    v145 = (4 * v144 + 8) & 0x3C;
    v190 = (v43 >> v145) & 0xF;
    if (v144)
    {
      swift_unknownObjectRetain();
      v146 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v114 + 24, (uint64_t *)&v190, (uint64_t)&v191, v114, v144);
      swift_unknownObjectRelease();
      if ((v146 & 1) != 0)
      {
        swift_unknownObjectRelease_n();
        v43 = v192;
        goto LABEL_198;
      }
    }
    else
    {
      v147 = ((v43 >> v145) & 0xF) + 1;
      if (v147 < *(unsigned __int16 *)(v114 + 16))
      {
        v43 = (v147 << v145) | ((-15 << v145) - 1) & v43;
        v192 = v43;
        swift_unknownObjectRelease_n();
        v193 = v114;
        goto LABEL_198;
      }
    }
    if (v114)
    {
      v149 = *(unsigned __int8 *)(v114 + 18);
      v150 = *(unsigned __int16 *)(v114 + 16);
      swift_unknownObjectRelease_n();
      v43 = ((-15 << ((4 * v149 + 8) & 0x3C)) - 1) & v149 | (unint64_t)(v150 << ((4 * v149 + 8) & 0x3C));
    }
    else
    {
      v43 = 0;
    }
    v148 = v189;
    v191 = v188;
    v192 = v43;
    v193 = 0;
LABEL_203:
    v187 = v191;
    v44 = v193;
    v151 = v113 + 1;
    if (v179 == 2)
    {
      v152 = v113[2];
      v268 = *v151;
      v269 = v152;
      v270 = v113[3];
      v153 = &v264;
      BigString.utf8.getter();
      BigString.startIndex.getter();
    }
    else
    {
      v154 = v113[2];
      v265 = *v151;
      v266 = v154;
      v267 = v113[3];
      result = BigString.utf8.getter();
      if (__OFSUB__(v140, v148 >> 11))
        goto LABEL_251;
      v153 = &v263;
    }
    v46 = BigString.UTF8View.index(_:offsetBy:)();
    v156 = v155;
    v158 = v157;
    v53 = v159;
    outlined release of Locale((uint64_t)v153);
    outlined release of AttributedString.Runs(v166);
    *(_QWORD *)&v234 = v42;
    *((_QWORD *)&v234 + 1) = v187;
    v235 = v43;
    v236 = v44;
    v237 = v46;
    v238 = v156;
    v239 = v158;
    v240 = v53;
    v205 = v313;
    v206 = v314;
    v207 = v315;
    v201 = v309;
    v202 = v310;
    v203 = v311;
    v204 = v312;
    v197 = v305;
    v198 = v306;
    v199 = v307;
    v200 = v308;
    v195 = v303;
    v196 = v304;
    if (!v175)
    {
      v161 = v172;
      goto LABEL_220;
    }
    if (!v172)
      goto LABEL_218;
    if ((v186 >> 11) - (v185 >> 11) != (v184 >> 11) - (v182 >> 11)
      || (specialized static Dictionary<>.== infix(_:_:)(v175, v172) & 1) == 0)
    {
      break;
    }
    v160 = specialized static Set.== infix(_:_:)(v173, v170);
    outlined consume of AttributedString.Runs.Run?(v172);
    outlined consume of AttributedString.Runs.Run?(v175);
    if ((v160 & 1) == 0)
      goto LABEL_214;
    v287 = v218;
    v288 = v219;
    v289 = v220;
    v283 = v214;
    v284 = v215;
    v286 = v217;
    v285 = v216;
    v279 = v210;
    v280 = v211;
    v282 = v213;
    v281 = v212;
    v278 = v209;
    v277 = v208;
    v300 = v205;
    v301 = v206;
    v302 = v207;
    v296 = v201;
    v297 = v202;
    v299 = v204;
    v298 = v203;
    v292 = v197;
    v293 = v198;
    v295 = v200;
    v294 = v199;
    v291 = v196;
    v290 = v195;
    v52 = v178;
    v2 = v166;
  }
  outlined consume of AttributedString.Runs.Run?(v172);
  outlined consume of AttributedString.Runs.Run?(v175);
LABEL_214:
  outlined release of AttributedString.Runs((uint64_t)&v195);
  outlined release of AttributedString.Runs((uint64_t)&v208);
  return 0;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  if ((a4 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a4) & 0xF;
  else
    v7 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a2) & 0xF;
  else
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (v9 < v7)
  {
    if ((a4 & 0x1000000000000000) != 0)
    {
      v11 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v11 = _decodeScalar(_:startingAt:)();
    }
    v13 = v11;
    if (v10 >= v8)
    {
      v17 = 0;
      goto LABEL_28;
    }
    v14 = v12 + v9;
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_16:
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v15 = _decodeScalar(_:startingAt:)();
      goto LABEL_20;
    }
LABEL_25:
    v15 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
LABEL_20:
    v17 = 0;
    if (v9 < v7)
    {
      v10 += v16;
      v9 = v14;
      if (v13 == v15)
        continue;
    }
    goto LABEL_28;
  }
  if (v10 < v8)
  {
    v13 = 0;
    v14 = v9;
    if ((a2 & 0x1000000000000000) == 0)
      goto LABEL_16;
    goto LABEL_25;
  }
  v17 = 1;
LABEL_28:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  char v27[48];
  char v28[48];
  char v29[48];
  char v30[48];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v3 = v1[1];
  v4 = a1[1];
  v5 = v1[5] >> 10;
  v23 = a1[5] >> 10;
  v19 = (__int128 *)(*v1 + 16);
  v6 = (__int128 *)(*a1 + 16);
  outlined retain of AttributedString.Runs((uint64_t)v1);
  v21 = (uint64_t)a1;
  v7 = (uint64_t)a1;
  v8 = v5;
  result = outlined retain of AttributedString.Runs(v7);
  v26 = v3;
  v22 = v4 >> 10;
  while (1)
  {
    v25 = v26 >> 10;
    if (v26 >> 10 == v8)
    {
      v10 = v4 >> 10;
      v11 = v23;
      if (v4 >> 10 == v23)
      {
        v18 = 1;
        goto LABEL_17;
      }
      v24 = 0;
    }
    else
    {
      if (v26 >> 10 < v3 >> 10 || v26 >> 10 >= v8)
        goto LABEL_21;
      v12 = v19[1];
      v40 = *v19;
      v41 = v12;
      v42 = v19[2];
      BigString.unicodeScalars.getter();
      v24 = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v27);
      v13 = v19[1];
      v37 = *v19;
      v38 = v13;
      v39 = v19[2];
      BigString.unicodeScalars.getter();
      outlined retain of AttributedString.Runs(v20);
      v14 = BigString.UnicodeScalarView.index(after:)();
      outlined release of Locale((uint64_t)v28);
      result = outlined release of AttributedString.Runs(v20);
      v26 = v14;
      if (v8 < v14 >> 10)
        goto LABEL_22;
      v10 = v4 >> 10;
      v11 = v23;
      if (v4 >> 10 == v23)
      {
LABEL_14:
        swift_release();
        swift_release();
        return 0;
      }
    }
    if (v10 < v22 || v10 >= v11)
      break;
    v15 = v6[1];
    v34 = *v6;
    v35 = v15;
    v36 = v6[2];
    BigString.unicodeScalars.getter();
    v16 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v29);
    v17 = v6[1];
    v31 = *v6;
    v32 = v17;
    v33 = v6[2];
    BigString.unicodeScalars.getter();
    outlined retain of AttributedString.Runs(v21);
    v4 = BigString.UnicodeScalarView.index(after:)();
    outlined release of Locale((uint64_t)v30);
    result = outlined release of AttributedString.Runs(v21);
    if (v11 < v4 >> 10)
      goto LABEL_20;
    if (v25 == v8)
    {
      v18 = 0;
LABEL_17:
      swift_release();
      swift_release();
      return v18;
    }
    if (v24 != v16)
      goto LABEL_14;
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

void __swiftcall NSFileManager._fileStat(_:)(stat_optional *__return_ptr retstr, Swift::String a2)
{
  void *v2;
  void *v3;
  unint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t ObjectType;
  uint64_t v8;
  const char *v9;
  unsigned __int8 v10;
  Swift::Int isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  const char *v17;
  unsigned __int8 v18;
  char v19;
  char v20;
  _BYTE v21[1040];
  uint64_t v22;
  stat v23;
  _BYTE v24[152];
  stat v25;
  uint64_t v26;

  v3 = v2;
  object = (unint64_t)a2._object;
  countAndFlagsBits = a2._countAndFlagsBits;
  v26 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager())
  {
    if ((object & 0x1000000000000000) != 0)
    {
      isStackAllocationSafe = String.UTF8View._foreignCount()();
    }
    else if ((object & 0x2000000000000000) != 0)
    {
      isStackAllocationSafe = HIBYTE(object) & 0xF;
    }
    else
    {
      isStackAllocationSafe = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    v12 = 3 * isStackAllocationSafe;
    if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 == (3 * isStackAllocationSafe) >> 63)
    {
      if (v12 >= -1)
      {
        v13 = v12 + 1;
        if (v12 < 1024
          || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1E0C80A78](isStackAllocationSafe);
          v9 = (char *)&v22 - v14;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v9, v13, 1, countAndFlagsBits, object);
          v16 = v15;
          swift_bridgeObjectRelease();
          if ((v16 & 1) != 0)
            goto LABEL_15;
          goto LABEL_14;
        }
        v17 = (const char *)swift_slowAlloc();
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v17, v13, 1, countAndFlagsBits, object);
        v20 = v19;
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_22;
LABEL_21:
        memset(&v23, 0, 28);
        memset(&v23.st_atimespec, 0, 112);
        if (!lstat(v17, &v23))
        {
          v25 = v23;
          _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi_((uint64_t)&v25);
          goto LABEL_23;
        }
LABEL_22:
        _sSo4statVSgWOi0_((uint64_t)&v25);
LABEL_23:
        outlined init with take of stat?((uint64_t)&v25, (uint64_t)v24);
        MEMORY[0x186DA9E78](v17, -1, -1);
        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  v8 = swift_stdlib_isStackAllocationSafe();
  if ((v8 & 1) == 0)
  {
    v17 = (const char *)swift_slowAlloc();
    v18 = objc_msgSend(v3, sel_getFileSystemRepresentation_maxLength_withPath_, v17, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v18 & 1) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  MEMORY[0x1E0C80A78](v8);
  v9 = v21;
  v10 = objc_msgSend(v3, sel_getFileSystemRepresentation_maxLength_withPath_, v21, 1026, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if ((v10 & 1) == 0)
    goto LABEL_15;
LABEL_14:
  memset(&v23, 0, 28);
  memset(&v23.st_atimespec, 0, 112);
  if (!lstat(v9, &v23))
  {
    v25 = v23;
    _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi_((uint64_t)&v25);
    goto LABEL_16;
  }
LABEL_15:
  _sSo4statVSgWOi0_((uint64_t)&v25);
LABEL_16:
  outlined init with take of stat?((uint64_t)&v25, (uint64_t)v24);
LABEL_24:
  outlined init with take of stat?((uint64_t)v24, (uint64_t)&v25);
  outlined init with take of stat?((uint64_t)&v25, (uint64_t)retstr);
}

unint64_t _openFD #1 (_:) in _FileManagerImpl.contentsEqual(atPath:andPath:)()
{
  int v0;
  unsigned int v1;
  int st_mode;
  int v3;
  unsigned __int8 v4;
  stat v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  memset(&v6, 0, 28);
  memset(&v6.st_atimespec, 0, 112);
  v0 = open(_:_:_:)();
  if ((v0 & 0x80000000) == 0)
  {
    v1 = v0;
    if ((fstat(v0, &v6) & 0x80000000) == 0)
    {
      st_mode = v6.st_mode;
      v3 = S_IFMT.getter() & st_mode;
      if (v3 != (unsigned __int16)S_IFDIR.getter())
      {
        v4 = 0;
        goto LABEL_6;
      }
    }
    close(v1);
  }
  v1 = 0;
  v4 = 1;
LABEL_6:
  LOBYTE(v6.st_dev) = v4;
  return v1 | ((unint64_t)v4 << 32);
}

unint64_t closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  int v9;
  uint64_t v10;
  void *v11;
  char v12;
  _DWORD v13[6];

  if (!result
    || (result = _openFD #1 (_:) in _FileManagerImpl.contentsEqual(atPath:andPath:)(), (result & 0x100000000) != 0))
  {
    *a5 = 0;
  }
  else
  {
    v9 = result;
    v10 = MEMORY[0x186DA9F5C](a2);
    if (v10)
    {
      v11 = (void *)v10;
      MEMORY[0x1E0C80A78](v10);
      v13[4] = v9;
      v12 = specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)(a3, a4, (void (*)(_BYTE *))partial apply for closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:), (uint64_t)v13);

      *a5 = v12 & 1;
      return close(v9);
    }
    else
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

unint64_t closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  void *v3;
  unint64_t v6;
  uint64_t isStackAllocationSafe;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!result
    || (result = _openFD #1 (_:) in _FileManagerImpl.contentsEqual(atPath:andPath:)(), (result & 0x100000000) != 0))
  {
    *a3 = 0;
    return result;
  }
  v6 = result;
  MEMORY[0x186DA4130](a2, 48, 1);
  MEMORY[0x186DA4130](v6, 48, 1);
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    v8 = (char *)&v10;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    closure #1 in closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)(&v9, 0x2000uLL, 0x2000, a2, v6, (BOOL *)&v10 + 7);
    if (!v3)
    {
      *a3 = HIBYTE(v10);
      return close(v6);
    }
    swift_willThrow();

    __break(1u);
  }
  else
  {
    v8 = (char *)swift_slowAlloc();
    closure #1 in closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)(v8, 0x2000uLL, 0x2000, a2, v6, a3);
    if (!v3)
    {
      MEMORY[0x186DA9E78](v8, -1, -1);
      return close(v6);
    }
  }

  result = MEMORY[0x186DA9E78](v8, -1, -1);
  __break(1u);
  return result;
}

void closure #1 in closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)(char *a1@<X0>, size_t a2@<X1>, int64_t a3@<X2>, int a4@<W3>, int a5@<W4>, BOOL *a6@<X8>)
{
  uint64_t isStackAllocationSafe;
  char *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  ssize_t v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned __int8 *v22;
  ssize_t v23;
  int64_t v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  _BOOL4 v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  uint64_t v36;

  v34 = a5;
  v35 = a4;
  v36 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((a2 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_55;
    }
    if (a2)
      bzero(a1, a2);
  }
  if (a3 < 0)
    goto LABEL_56;
  if (a3 > 1024)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if (!(_DWORD)isStackAllocationSafe)
    {
      v22 = (unsigned __int8 *)swift_slowAlloc();
      bzero(v22, a3);
      if (a1)
      {
        while (1)
        {
          v23 = read(v35, a1, a3);
          if (v23 <= 0)
            break;
          if (read(v34, v22, a3) == v23)
          {
            v24 = a3;
            v25 = a1;
            v26 = v22;
            while (1)
            {
              if (!v25 || &a1[a2] == v25)
              {
                v28 = 0;
                v27 = 1;
              }
              else
              {
                v27 = 0;
                v29 = *v25++;
                v28 = v29;
              }
              v30 = v22 && v24 == 0;
              v31 = v30;
              if (!v26 || v31)
                break;
              v32 = *v26++;
              if (v28 != v32)
                v27 = 1;
              --v24;
              if (v27 == 1)
                goto LABEL_50;
            }
            if ((v27 & 1) != 0)
              continue;
          }
LABEL_50:
          v33 = 0;
LABEL_51:
          *a6 = v33;
          MEMORY[0x186DA9E78](v22, -1, -1);
          return;
        }
        v33 = v23 > -2;
        goto LABEL_51;
      }
LABEL_58:
      __break(1u);
      return;
    }
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v11 = (char *)&v34 - ((a3 + 15) & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_11;
  }
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v34 - v12;
  if (!a3)
    goto LABEL_12;
  if (a3 < 1)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
  }
LABEL_11:
  bzero(v11, a3);
LABEL_12:
  if (!a1)
  {
    __break(1u);
    goto LABEL_58;
  }
  v13 = (unsigned __int8 *)&v11[a3];
  while (1)
  {
    v14 = read(v35, a1, a3);
    if (v14 <= 0)
      break;
    if (read(v34, v11, a3) != v14)
      goto LABEL_27;
    v15 = a1;
    v16 = (unsigned __int8 *)v11;
    while (v15 && &a1[a2] != v15)
    {
      v17 = 0;
      v19 = *v15++;
      v18 = v19;
      if (v16 == v13)
        goto LABEL_26;
LABEL_22:
      v20 = *v16++;
      if (v18 != v20)
        v17 = 1;
      if (v17 == 1)
        goto LABEL_27;
    }
    v18 = 0;
    v17 = 1;
    if (v16 != v13)
      goto LABEL_22;
LABEL_26:
    if ((v17 & 1) == 0)
    {
LABEL_27:
      v21 = 0;
      goto LABEL_28;
    }
  }
  v21 = v14 > -2;
LABEL_28:
  *a6 = v21;
}

uint64_t outlined init with take of stat?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for stat?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UInt16 and conformance UInt16()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt16 and conformance UInt16;
  if (!lazy protocol witness table cache variable for type UInt16 and conformance UInt16)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEE0A0], MEMORY[0x1E0DEE068]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt16 and conformance UInt16);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt16 and conformance UInt16;
  if (!lazy protocol witness table cache variable for type UInt16 and conformance UInt16)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEE0B0], MEMORY[0x1E0DEE068]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt16 and conformance UInt16);
  }
  return result;
}

unint64_t partial apply for closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

unint64_t type metadata accessor for NSFileManager()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSFileManager;
  if (!lazy cache variable for type metadata for NSFileManager)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSFileManager);
  }
  return result;
}

unint64_t partial apply for closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)@<X0>(unint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)(a1, *(unsigned int *)(v2 + 16), a2);
}

double _sSo4statVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 144) = 1;
  return result;
}

uint64_t UUID.debugDescription.getter()
{
  return UUID.uuidString.getter();
}

uint64_t UUID.description.getter()
{
  return UUID.uuidString.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UUID()
{
  Hasher.init(_seed:)();
  UUID.hash(into:)();
  return Hasher._finalize()();
}

uint64_t UUID.customMirror.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  __int128 v13;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v0;
  v12[1] = MEMORY[0x1E0DEE9D8];
  v8 = *MEMORY[0x1E0DEDFB8];
  v9 = type metadata accessor for Mirror.DisplayStyle();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance UUID()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  __int128 v13;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v0;
  v12[1] = MEMORY[0x1E0DEE9D8];
  v8 = *MEMORY[0x1E0DEDFB8];
  v9 = type metadata accessor for Mirror.DisplayStyle();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t UUID.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  UUID.uuidString.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance UUID(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v4;
  __int128 v5;

  v2 = *a1;
  v4 = *a2;
  v5 = v2;
  return (specialized static UUID.< infix(_:_:)(&v4, &v5) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance UUID(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v4;
  __int128 v5;

  v2 = *a1;
  v4 = *a2;
  v5 = v2;
  return (specialized static UUID.< infix(_:_:)(&v5, &v4) & 1) == 0;
}

unint64_t protocol witness for static Comparable.> infix(_:_:) in conformance UUID(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v4;
  __int128 v5;

  v2 = *a1;
  v4 = *a2;
  v5 = v2;
  return specialized static UUID.< infix(_:_:)(&v4, &v5) & 1;
}

unint64_t specialized static UUID.< infix(_:_:)(__int128 *a1, __int128 *a2)
{
  unint64_t v2;
  __int128 v3;
  uint64_t i;
  unint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v2 = 0;
  v9 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v7 = *a2;
  v8 = v3;
  for (i = 15; i != -1; --i)
  {
    v5 = *((unsigned __int8 *)&v8 + i) - (unint64_t)*((unsigned __int8 *)&v7 + i);
    v2 = v2 & ((uint64_t)((v5 - 1) & ~v5) >> 8) | v5;
  }
  return v2 >> 63;
}

Swift::String_optional __swiftcall ICU.CaseMap.lowercase(_:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  Swift::String_optional result;

  v1 = ICU.CaseMap.lowercase(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, MEMORY[0x1E0DE5E40]);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

uint64_t ICU.CaseMap.__deallocating_deinit()
{
  ucasemap_close();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in ICU.CaseMap.titlecase(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v10[3] = a4;
  v10[0] = a1;
  v10[1] = a2;
  v10[2] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = specialized Substring.withUTF8<A>(_:)(v10);
  v8 = v7;
  swift_release();
  *a5 = v6;
  a5[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t specialized Substring.withUTF8<A>(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[56];
  uint64_t v16;
  uint64_t v17[3];

  v2 = v1;
  v17[2] = *MEMORY[0x1E0C80C00];
  v4 = a1[3];
  if ((v4 & 0x1000000000000000) != 0)
  {
    Substring._slowMakeContiguousUTF8()();
    v4 = a1[3];
  }
  v6 = a1[1];
  v5 = a1[2];
  v7 = *a1 >> 16;
  v8 = v6 >> 16;
  if ((v4 & 0x2000000000000000) != 0)
  {
    v17[0] = v5;
    v17[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    swift_retain_n();
    v13 = swift_bridgeObjectRetain();
    MEMORY[0x1E0C80A78](v13);
    specialized closure #1 in _withResizingCharBuffer(initialSize:_:)((uint64_t)v15, (uint64_t)v17 + v7, v8 - v7, &v16);
    if (!v1)
    {
      v12 = v16;
      goto LABEL_10;
    }
  }
  else
  {
    if ((v5 & 0x1000000000000000) != 0)
    {
      v9 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else
    {
      v9 = _StringObject.sharedUTF8.getter();
      if (!v9)
      {
        swift_retain_n();
        swift_bridgeObjectRetain();
        __break(1u);
      }
    }
    v10 = v9 + v7;
    swift_retain_n();
    v11 = swift_bridgeObjectRetain();
    MEMORY[0x1E0C80A78](v11);
    specialized closure #1 in _withResizingCharBuffer(initialSize:_:)((uint64_t)v15, v10, v8 - v7, v17);
    if (!v2)
    {
      v12 = v17[0];
LABEL_10:
      swift_bridgeObjectRelease();
      swift_release();
      return v12;
    }
  }
  result = swift_willThrow();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4DateV21ComponentsFormatStyleV5FieldVG_AL6OptionOs5NeverOTg5015_s10Foundation4e19V27AnchoredRelativegh75V12usableFields33_C066C46DD7A4458BFE9B19CA47B7E7FELLSayAC010ComponentseF0V5i2V6J59OGyFAmKcfu_33_7a8e0f6e267ccb9df6f8247fecae9d92AkMTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v15 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v15;
  result = specialized Set.startIndex.getter(a1);
  v5 = result;
  v7 = v6;
  v9 = v8 & 1;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v7)
      goto LABEL_14;
    v10 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v5);
    v12 = *(_QWORD *)(v15 + 16);
    v11 = *(_QWORD *)(v15 + 24);
    if (v12 >= v11 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    *(_QWORD *)(v15 + 16) = v12 + 1;
    *(_BYTE *)(v15 + v12 + 32) = v10;
    result = specialized _NativeSet.index(after:)(v5, v7, v9 & 1, a1);
    v5 = result;
    v7 = v13;
    v9 = v14 & 1;
    if (!--v1)
    {
      outlined consume of Set<Calendar.Component>.Index._Variant(result, v13, v14 & 1);
      return v2;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

double specialized BinaryFloatingPoint.rounded<A>(increment:rule:)(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  double v11;
  int v12;
  double v13;
  uint64_t v15;
  double v16;

  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 != 0.0)
  {
    v11 = a3 / a2;
    v16 = v11;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, a1, v6, v8);
    v12 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
    if (v12 == *MEMORY[0x1E0DED4F0])
    {
      v13 = round(v11);
    }
    else if (v12 == *MEMORY[0x1E0DED4E8])
    {
      v13 = rint(v11);
    }
    else
    {
      if (v12 == *MEMORY[0x1E0DED500])
        goto LABEL_7;
      if (v12 == *MEMORY[0x1E0DED508])
        goto LABEL_9;
      if (v12 == *MEMORY[0x1E0DED4D8])
      {
        v13 = trunc(v11);
        return v13 * a2;
      }
      if (v12 != *MEMORY[0x1E0DED4E0])
      {
        Double._roundSlowPath(_:)();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        v13 = v16;
        return v13 * a2;
      }
      if ((*(_QWORD *)&v11 & 0x8000000000000000) != 0)
LABEL_9:
        v13 = floor(v11);
      else
LABEL_7:
        v13 = ceil(v11);
    }
    return v13 * a2;
  }
  return a3;
}

double Date.AnchoredRelativeFormatStyle.anchor.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 48);
  *a1 = result;
  return result;
}

double Date.AnchoredRelativeFormatStyle.anchor.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 48) = *a1;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.anchor.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Date.AnchoredRelativeFormatStyle.presentation.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Date.AnchoredRelativeFormatStyle.presentation.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.presentation.modify(uint64_t a1))(uint64_t result)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1;
  return Measurement<>.AttributedStyle<>.ByteCount.style.modify;
}

void Date.AnchoredRelativeFormatStyle.unitsStyle.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *Date.AnchoredRelativeFormatStyle.unitsStyle.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

_BYTE *(*Date.AnchoredRelativeFormatStyle.unitsStyle.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 1);
  return Date.AnchoredRelativeFormatStyle.unitsStyle.modify;
}

_BYTE *Date.AnchoredRelativeFormatStyle.unitsStyle.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 1) = result[8];
  return result;
}

void Date.AnchoredRelativeFormatStyle.capitalizationContext.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *Date.AnchoredRelativeFormatStyle.capitalizationContext.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

_BYTE *(*Date.AnchoredRelativeFormatStyle.capitalizationContext.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 2);
  return Date.AnchoredRelativeFormatStyle.capitalizationContext.modify;
}

_BYTE *Date.AnchoredRelativeFormatStyle.capitalizationContext.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 2) = result[8];
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 Date.AnchoredRelativeFormatStyle.locale.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.locale.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  swift_unknownObjectRetain();
  return Date.AnchoredRelativeFormatStyle.locale.modify;
}

uint64_t Date.AnchoredRelativeFormatStyle.locale.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1[1];
  v2 = a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(v2 + 8) = v4;
    *(_QWORD *)(v2 + 16) = v3;
    return swift_unknownObjectRelease();
  }
  else
  {
    result = swift_unknownObjectRelease();
    *(_QWORD *)(v2 + 8) = v4;
    *(_QWORD *)(v2 + 16) = v3;
  }
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Date.AnchoredRelativeFormatStyle.calendar.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.calendar.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  return Measurement<>.AttributedStyle<>.ByteCount.locale.modify;
}

uint64_t Date.AnchoredRelativeFormatStyle.allowedFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Date.AnchoredRelativeFormatStyle.allowedFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.allowedFields.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return Date.RelativeFormatStyle.allowedFields.modify;
}

__n128 Date.AnchoredRelativeFormatStyle.init(anchor:presentation:unitsStyle:locale:calendar:capitalizationContext:)@<Q0>(uint64_t *a1@<X0>, char *a2@<X1>, char *a3@<X2>, __int128 *a4@<X3>, __n128 *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  __n128 result;
  char v24;
  __n128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;

  v8 = *a1;
  v25 = *a5;
  v26 = *a4;
  v9 = 7;
  v24 = *a6;
  v10 = *a3;
  v11 = *a2;
  v28 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0);
  v12 = v28;
  v13 = *(_QWORD *)(v28 + 16);
  v14 = &byte_1E0F2E9D0;
  do
  {
    v16 = *v14++;
    v15 = v16;
    v28 = v12;
    v17 = *(_QWORD *)(v12 + 24);
    if (v13 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v13 + 1, 1);
      v12 = v28;
    }
    *(_QWORD *)(v12 + 16) = v13 + 1;
    *(_BYTE *)(v12 + v13++ + 32) = v15;
    --v9;
  }
  while (v9);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
  v18 = Set.init(minimumCapacity:)();
  v28 = v18;
  v19 = *(_QWORD *)(v12 + 16);
  if (v19)
  {
    for (i = 0; i != v19; ++i)
    {
      v21 = v12 + i;
      specialized Set._Variant.insert(_:)(&v27, *(unsigned __int8 *)(v21 + 32));
    }
    swift_bridgeObjectRelease();
    v22 = v28;
  }
  else
  {
    v22 = v18;
    swift_bridgeObjectRelease();
  }
  *(_BYTE *)a7 = v11;
  *(_BYTE *)(a7 + 1) = v10;
  *(_BYTE *)(a7 + 2) = v24;
  *(_OWORD *)(a7 + 8) = v26;
  result = v25;
  *(__n128 *)(a7 + 24) = v25;
  *(_QWORD *)(a7 + 40) = v22;
  *(_QWORD *)(a7 + 48) = v8;
  return result;
}

double Date.AnchoredRelativeFormatStyle.init(anchor:allowedFields:presentation:unitsStyle:locale:calendar:capitalizationContext:)@<D0>(double *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, char *a4@<X3>, _OWORD *a5@<X4>, _OWORD *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  double result;
  char v9;
  char v10;

  result = *a1;
  v9 = *a4;
  v10 = *a7;
  *(_BYTE *)a8 = *a3;
  *(_BYTE *)(a8 + 1) = v9;
  *(_BYTE *)(a8 + 2) = v10;
  *(_OWORD *)(a8 + 8) = *a5;
  *(_OWORD *)(a8 + 24) = *a6;
  *(_QWORD *)(a8 + 40) = a2;
  *(double *)(a8 + 48) = result;
  return result;
}

Swift::String __swiftcall Date.AnchoredRelativeFormatStyle.format(_:)(Foundation::Date a1)
{
  Foundation::Date *v1;
  Foundation::Date *v2;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v5;
  Swift::String result;

  v5 = Date.RelativeFormatStyle._format(_:refDate:)(*(Foundation::Date *)&v1->_time, v2[6]);
  object = v5._object;
  countAndFlagsBits = v5._countAndFlagsBits;
  result._object = object;
  result._countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_WORD *)(v2 + 1);
  v4 = *(_QWORD *)(v2 + 40);
  v5 = *(_QWORD *)(v2 + 48);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_WORD *)(a2 + 1) = v3;
  *(_OWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 48) = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

void Date.AnchoredRelativeFormatStyle.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v3;
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t);
  Swift::UInt8 v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  Swift::UInt64 v49;
  void *v50;
  void *v51;
  void *v52;
  Swift::UInt64 v53;
  uint64_t v54;
  _BYTE v55[144];
  char v56[8];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  _QWORD v74[18];
  _BYTE v75[144];
  _BYTE v76[152];

  v3 = v1[1];
  v4 = v1[2];
  v5 = *((_QWORD *)v1 + 2);
  v54 = *((_QWORD *)v1 + 4);
  v6 = *((_QWORD *)v1 + 5);
  v7 = *((_QWORD *)v1 + 6);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  ObjectType = swift_getObjectType();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if ((v9(ObjectType, v5) & 1) != 0)
  {
    v10 = 1;
LABEL_5:
    Hasher._combine(_:)(v10);
    swift_unknownObjectRelease();
    v12 = v54;
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v11(v74, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75);
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v76) == 1)
  {
    v10 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v56);
  Hasher._combine(_:)(1u);
  if (v56[0] == 2)
  {
    v13 = 0;
  }
  else
  {
    v13 = v56[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  v14 = v57;
  if (!v57)
  {
    Hasher._combine(_:)(0);
    v18 = v56;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v14 + 16));
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v55);
    v18 = v55;
LABEL_19:
    outlined retain of LocalePreferences(v18);
    if (!v58)
      goto LABEL_14;
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v59)
      goto LABEL_15;
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 = v60;
    if (!v60)
      goto LABEL_16;
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v59)
    goto LABEL_21;
LABEL_15:
  Hasher._combine(_:)(0);
  v17 = v60;
  if (!v60)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v17);
  swift_bridgeObjectRelease();
LABEL_23:
  v19 = v61;
  v53 = v7;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v20 = v62;
  v21 = v63;
  v22 = v64;
  v23 = v65;
  v24 = v66;
  v50 = v64;
  v51 = v66;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v25 = v21;
    v26 = v22;
    v27 = v23;
    v28 = v23;
    v29 = v24;
    v30 = v20;
    _CFObject.hash(into:)();
    v52 = v20;
    if (v21)
    {
LABEL_28:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v31 = v21;
      _CFObject.hash(into:)();

      goto LABEL_31;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    v32 = v24;
    v33 = v21;
    v34 = v22;
    v27 = v23;
    v35 = v23;
    v52 = 0;
    if (v21)
      goto LABEL_28;
  }
  Hasher._combine(_:)(0);
LABEL_31:
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v36 = v50;
    _CFObject.hash(into:)();

    if (v27)
      goto LABEL_33;
LABEL_36:
    Hasher._combine(_:)(0);
    v38 = v51;
    if (v51)
      goto LABEL_34;
    goto LABEL_37;
  }
  Hasher._combine(_:)(0);
  if (!v27)
    goto LABEL_36;
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v37 = v27;
  _CFObject.hash(into:)();

  v38 = v51;
  if (v51)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v39 = v38;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v39 = 0;
LABEL_38:

  v40 = v67;
  if (v40)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v40);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v7 = v53;
  v41 = v68;
  if (!v68)
  {
    Hasher._combine(_:)(0);
    if (v69)
      goto LABEL_43;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  if (!v69)
    goto LABEL_45;
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  v12 = v54;
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v42 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v43 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  if (v72 == 2)
  {
    v44 = 0;
  }
  else
  {
    v44 = v72 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v44);
  if (v73 == 2)
  {
    v45 = 0;
  }
  else
  {
    v46 = v73 & 1;
    Hasher._combine(_:)(1u);
    v45 = v46;
  }
  Hasher._combine(_:)(v45);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  v47 = swift_getObjectType();
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 120);
  swift_unknownObjectRetain();
  v48(a1, v47, v12);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v6);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v49 = v7;
  else
    v49 = 0;
  Hasher._combine(_:)(v49);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F68636E61;
  else
    return 0x79745372656E6E69;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.AnchoredRelativeFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Date.AnchoredRelativeFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.AnchoredRelativeFormatStyle.encode(to:)(_QWORD *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AnchoredRelativeFormatStyle.CodingKeys>);
  v14 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  v8 = *(_WORD *)(v2 + 1);
  v9 = *((_QWORD *)v2 + 5);
  v10 = *((_QWORD *)v2 + 6);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = v7;
  *(_WORD *)((char *)&v16 + 1) = v8;
  v17 = *(_OWORD *)(v2 + 8);
  v18 = *(_OWORD *)(v2 + 24);
  v19 = v9;
  v15 = 0;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  v11 = v13[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    v16 = v10;
    v15 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v4);
}

Swift::Int Date.AnchoredRelativeFormatStyle.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  uint64_t v44;
  void (*v45)(_BYTE *, uint64_t, uint64_t);
  Swift::UInt64 v46;
  void *v48;
  Swift::UInt64 v49;
  uint64_t v50;
  _BYTE v51[144];
  char v52[8];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  _QWORD v70[18];
  _BYTE v71[144];
  _BYTE v72[144];
  _BYTE v73[80];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_QWORD *)v0 + 2);
  v50 = *((_QWORD *)v0 + 4);
  v5 = *((_QWORD *)v0 + 5);
  v6 = *((_QWORD *)v0 + 6);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if ((v8(ObjectType, v4) & 1) != 0)
  {
    v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease();
    v11 = v50;
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v70, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)v71);
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v72) == 1)
  {
    v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v52);
  Hasher._combine(_:)(1u);
  if (v52[0] == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v52[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  v13 = v53;
  if (!v53)
  {
    Hasher._combine(_:)(0);
    v17 = v52;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v13 + 16));
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v51);
    v17 = v51;
LABEL_19:
    outlined retain of LocalePreferences(v17);
    if (!v54)
      goto LABEL_14;
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v71, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v55)
      goto LABEL_15;
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 = v56;
    if (!v56)
      goto LABEL_16;
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v55)
    goto LABEL_21;
LABEL_15:
  Hasher._combine(_:)(0);
  v16 = v56;
  if (!v56)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v73, v16);
  swift_bridgeObjectRelease();
LABEL_23:
  v18 = v57;
  v49 = v6;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v73, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v19 = v58;
  v20 = v59;
  v22 = v60;
  v21 = v61;
  v23 = v62;
  if (v58)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v24 = v20;
    v25 = v22;
    v26 = v21;
    v27 = v23;
    v28 = v19;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v29 = v23;
    v30 = v20;
    v31 = v22;
    v32 = v21;
  }
  v48 = v19;
  if (v20)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v33 = v20;
    _CFObject.hash(into:)();

    if (v22)
      goto LABEL_31;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v22)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v34 = v22;
      _CFObject.hash(into:)();

      if (v21)
        goto LABEL_32;
LABEL_36:
      Hasher._combine(_:)(0);
      if (v23)
        goto LABEL_33;
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (!v21)
    goto LABEL_36;
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v35 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v36 = v23;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v36 = 0;
LABEL_38:

  v37 = v63;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v73, v37);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v6 = v49;
  v38 = v64;
  if (!v64)
  {
    Hasher._combine(_:)(0);
    if (v65)
      goto LABEL_43;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v73, v38);
  swift_bridgeObjectRelease();
  if (!v65)
    goto LABEL_45;
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  v11 = v50;
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v40 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v68 == 2)
  {
    v41 = 0;
  }
  else
  {
    v41 = v68 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v41);
  if (v69 == 2)
  {
    v42 = 0;
  }
  else
  {
    v43 = v69 & 1;
    Hasher._combine(_:)(1u);
    v42 = v43;
  }
  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?((uint64_t)v71, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v71, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  v44 = swift_getObjectType();
  v45 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 120);
  swift_unknownObjectRetain();
  v45(v73, v44, v11);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v73, v5);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v46 = v6;
  else
    v46 = 0;
  Hasher._combine(_:)(v46);
  return Hasher._finalize()();
}

uint64_t Date.AnchoredRelativeFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  char v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AnchoredRelativeFormatStyle.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v22 = 0;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v21 = v17;
  v12 = BYTE2(v17);
  v13 = BYTE1(v17);
  v15 = v19;
  v16 = v18;
  v9 = v20;
  v22 = 1;
  lazy protocol witness table accessor for type Date and conformance Date();
  v14 = v16;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v10 = v17;
  *(_BYTE *)a2 = v21;
  *(_BYTE *)(a2 + 1) = v13;
  *(_BYTE *)(a2 + 2) = v12;
  *(_OWORD *)(a2 + 8) = v16;
  *(_OWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.AnchoredRelativeFormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.AnchoredRelativeFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.AnchoredRelativeFormatStyle(_QWORD *a1)
{
  return Date.AnchoredRelativeFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.AnchoredRelativeFormatStyle()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  Swift::UInt8 v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t, uint64_t);
  Swift::UInt64 v45;
  void *v47;
  Swift::UInt64 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  _QWORD v68[18];
  _BYTE v69[144];
  _BYTE v70[144];
  _BYTE v71[80];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_QWORD *)v0 + 2);
  v49 = *((_QWORD *)v0 + 4);
  v5 = *((_QWORD *)v0 + 5);
  v6 = *((_QWORD *)v0 + 6);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if ((v8(ObjectType, v4) & 1) != 0)
  {
    v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease();
    v11 = v49;
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v68, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v70);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v70) == 1)
  {
    v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)&v50);
  Hasher._combine(_:)(1u);
  if (v50 == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v50 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  v13 = v51;
  if (!v51)
  {
    Hasher._combine(_:)(0);
LABEL_18:
    outlined retain of LocalePreferences(&v50);
    if (!v52)
      goto LABEL_14;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v13 + 16));
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    goto LABEL_18;
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v53)
      goto LABEL_15;
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 = v54;
    if (!v54)
      goto LABEL_16;
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v53)
    goto LABEL_20;
LABEL_15:
  Hasher._combine(_:)(0);
  v16 = v54;
  if (!v54)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v16);
  swift_bridgeObjectRelease();
LABEL_22:
  v17 = v55;
  v48 = v6;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v18 = v56;
  v19 = v57;
  v21 = v58;
  v20 = v59;
  v22 = v60;
  if (v56)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v23 = v19;
    v24 = v21;
    v25 = v20;
    v26 = v22;
    v27 = v18;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v28 = v22;
    v29 = v19;
    v30 = v21;
    v31 = v20;
  }
  v47 = v18;
  if (v19)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v32 = v19;
    _CFObject.hash(into:)();

    if (v21)
      goto LABEL_30;
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v21)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v33 = v21;
      _CFObject.hash(into:)();

      if (v20)
        goto LABEL_31;
LABEL_35:
      Hasher._combine(_:)(0);
      if (v22)
        goto LABEL_32;
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (!v20)
    goto LABEL_35;
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v34 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v35 = v22;
    _CFObject.hash(into:)();

    goto LABEL_37;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  v35 = 0;
LABEL_37:

  v36 = v61;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v6 = v48;
  v37 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    if (v63)
      goto LABEL_42;
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v37);
  swift_bridgeObjectRelease();
  if (!v63)
    goto LABEL_44;
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  v11 = v49;
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v39 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v66 == 2)
  {
    v40 = 0;
  }
  else
  {
    v40 = v66 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v67 == 2)
  {
    v41 = 0;
  }
  else
  {
    v42 = v67 & 1;
    Hasher._combine(_:)(1u);
    v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_58:
  v43 = swift_getObjectType();
  v44 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 120);
  swift_unknownObjectRetain();
  v44(v71, v43, v11);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v71, v5);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v45 = v6;
  else
    v45 = 0;
  Hasher._combine(_:)(v45);
  return Hasher._finalize()();
}

Foundation::Date_optional __swiftcall Date.AnchoredRelativeFormatStyle.discreteInput(before:)(Foundation::Date before)
{
  double *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  double v5;
  __int16 v6;
  uint64_t v7;
  double v8;
  __int128 v9;
  char v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  double v21;
  double v22;
  unsigned __int8 v23;
  Foundation::Date_optional result;

  v4 = v2;
  v5 = *v1;
  v6 = *(_WORD *)(v3 + 1);
  v7 = *((_QWORD *)v3 + 5);
  v8 = *((double *)v3 + 6);
  v16 = *v3;
  v17 = v6;
  v9 = *(_OWORD *)(v3 + 24);
  v18 = *(_OWORD *)(v3 + 8);
  v19 = v9;
  v20 = v7;
  v21 = v8;
  v14 = v8;
  v15 = v5;
  v10 = Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(&v15, &v14, 1, v8 < v5, (uint64_t)&v22);
  v11 = v23;
  if (v23 == 2)
  {
    v12 = 0.0;
  }
  else
  {
    v12 = v22;
    if ((v23 & 1) != 0)
    {
      v13 = 0.0 - v22;
      if (0.0 - v22 < INFINITY)
        *(_QWORD *)&v13 += (*(uint64_t *)&v13 >> 63) | 1;
      v12 = -v13;
    }
  }
  *(double *)v4 = v12;
  *(_BYTE *)(v4 + 8) = v11 == 2;
  result.value = *(Foundation::Date *)&v12;
  result.is_nil = v10;
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)@<X0>(double *a1@<X0>, double *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double v14;
  __int16 v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  unsigned int v23;
  double v24;
  double v25;
  double v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  Swift::Int v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double *v43;
  unsigned __int8 v44;
  int v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  unsigned int v57;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v59;
  double time;
  double v61;
  double v62;
  uint64_t v63;
  double v64;
  void (*v65)(_OWORD *__return_ptr, double *, double *, uint64_t, _QWORD);
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int v71;
  int v72;
  unsigned __int8 *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(double *, double *, _OWORD *, uint64_t, _QWORD);
  uint64_t v79;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  double v92;
  void (*v93)(double *__return_ptr, double *, double *, _QWORD, uint64_t, _QWORD);
  double *v94;
  double v95;
  double v96;
  uint64_t ObjectType;
  unint64_t v98;
  uint64_t (*v99)(double *, double *, _OWORD *, uint64_t, _QWORD);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  Swift::Int v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  _BOOL4 v110;
  uint64_t v111;
  char v112;
  double v113;
  uint64_t v114;
  Swift::Int_optional v115;
  _BYTE *v116;
  void (*v117)(Foundation::Date *__return_ptr, double *, double *, _QWORD, uint64_t, _QWORD);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  double *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(double *, double *, _OWORD *, uint64_t, _QWORD);
  uint64_t v133;
  int v134;
  _BYTE *v135;
  unint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  char v140;
  double v141;
  double v142[36];
  double v143[36];
  double v144;
  char v145;
  Foundation::Date v146;
  char v147;
  _OWORD v148[19];
  _QWORD v149[36];
  char v150;
  __int16 v151;
  __int128 v152;
  double v153;
  double v154;
  uint64_t v155;
  Swift::Int_optional v156;

  v134 = a4;
  LODWORD(v133) = a3;
  v9 = type metadata accessor for FloatingPointRoundingRule();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = *a2;
  v15 = *(_WORD *)(v5 + 1);
  v17 = *((double *)v5 + 3);
  v16 = *((double *)v5 + 4);
  v18 = *((_QWORD *)v5 + 5);
  v150 = *v5;
  v151 = v15;
  v152 = *(_OWORD *)(v5 + 8);
  v153 = v17;
  v154 = v16;
  v155 = v18;
  v19 = one-time initialization token for sortedAllowedComponents;
  v137 = v152;
  v138 = v16;
  swift_unknownObjectRetain();
  v139 = v17;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v19 != -1)
    goto LABEL_156;
  while (2)
  {
    v20 = swift_bridgeObjectRetain();
    v21 = specialized _ArrayProtocol.filter(_:)(v20, (uint64_t)&v150);
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v21 + 16);
    if (!v22)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      result = swift_bridgeObjectRelease();
      *(_QWORD *)a5 = 0;
      *(_BYTE *)(a5 + 8) = 2;
      return result;
    }
    v129 = (double *)a5;
    v23 = *(unsigned __int8 *)(v22 + v21 + 31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DED4F0], v9);
    v24 = specialized BinaryFloatingPoint.rounded<A>(increment:rule:)((uint64_t)v12, 1.0, v13 - v14);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v25 = v14 + v24;
    swift_unknownObjectRetain();
    v26 = v139;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v27 = swift_bridgeObjectRetain();
    v28 = specialized _ArrayProtocol.filter(_:)(v27, (uint64_t)&v150);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
    v29 = Set.init(minimumCapacity:)();
    v149[0] = v29;
    v30 = *(_QWORD *)(v28 + 16);
    if (v30)
    {
      for (i = 0; i != v30; ++i)
      {
        v32 = v28 + i;
        specialized Set._Variant.insert(_:)(v148, *(unsigned __int8 *)(v32 + 32));
      }
      swift_bridgeObjectRelease();
      v33 = v149[0];
    }
    else
    {
      v33 = v29;
      swift_bridgeObjectRelease();
    }
    *(double *)v149 = v26;
    *(double *)&v149[1] = v138;
    v143[0] = v25;
    v142[0] = v14;
    swift_unknownObjectRetain();
    Calendar.dateComponents(_:from:to:)(v33, v143, v142, v148);
    swift_unknownObjectRelease();
    memcpy(v149, v148, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)v149);
    v35 = swift_bridgeObjectRetain();
    v36 = specialized Sequence.compactMap<A>(_:)(v35);
    v131 = 0;
    outlined release of DateComponents((uint64_t)v149);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v36 + 16))
    {
      v37 = *(unsigned __int8 *)(v36 + 32);
      v38 = *(_QWORD *)(v36 + 40);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v38 = 0;
      v37 = 18;
    }
    if (v37 == 18)
    {
      v38 = 0;
      v39 = v23;
    }
    else
    {
      v39 = v37;
    }
    if ((v39 - 4) > 2u)
    {
      LOBYTE(v144) = v39;
      v142[0] = v14;
      v146._time = v25;
      v143[0] = v26;
      v143[1] = v138;
      swift_unknownObjectRetain();
      static Date.RelativeFormatStyle._alignedComponentValue(component:for:reference:calendar:allowedComponents:)(&v144, v142, &v146._time, (uint64_t *)v143, v33, (uint64_t)v148);
    }
    else
    {
      v142[0] = v25;
      v146._time = v14;
      v143[0] = v26;
      v143[1] = v138;
      LOBYTE(v144) = v39;
      swift_unknownObjectRetain();
      static Date.RelativeFormatStyle._roundedLargestComponentValue(refDate:for:calendar:allowedComponents:largestAllowedComponent:)((uint64_t *)v142, &v146._time, v143, v33, (unsigned __int8 *)&v144, v148);
    }
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v149);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    if (LOBYTE(v148[0]) == 18)
      v41 = v38;
    else
      v41 = *((_QWORD *)&v148[0] + 1);
    if (LOBYTE(v148[0]) == 18)
      v42 = v39;
    else
      v42 = LODWORD(v148[0]);
    v43 = v129;
    v44 = 0;
    v45 = 1;
    switch((char)v42)
    {
      case 1:
        goto LABEL_29;
      case 2:
        v44 = 1;
        goto LABEL_29;
      case 3:
        v44 = v42;
        goto LABEL_29;
      case 4:
      case 5:
      case 6:
        v45 = 0;
        v44 = v42;
        goto LABEL_29;
      case 10:
      case 11:
        v44 = 2;
LABEL_29:
        v135 = (char *)&v148[16] + 8;
        v46 = v138;
        LODWORD(v132) = v45;
        if ((v134 & 1) == 0)
          goto LABEL_43;
        v47 = v41;
        if (v41 < 0)
        {
          v47 = -v41;
          if (__OFSUB__(0, v41))
            goto LABEL_162;
        }
        if (v47 != 1)
        {
LABEL_43:
          LOBYTE(v59) = v133;
          goto LABEL_44;
        }
        v130 = v41;
        v136 = v42;
        v48 = swift_bridgeObjectRetain();
        v49 = v131;
        v50 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4DateV21ComponentsFormatStyleV5FieldVG_AL6OptionOs5NeverOTg5015_s10Foundation4e19V27AnchoredRelativegh75V12usableFields33_C066C46DD7A4458BFE9B19CA47B7E7FELLSayAC010ComponentseF0V5i2V6J59OGyFAmKcfu_33_7a8e0f6e267ccb9df6f8247fecae9d92AkMTf3nnnpk_nTf1cn_n(v48);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v148[0] = v50;
        swift_bridgeObjectRetain();
        specialized MutableCollection<>.sort(by:)((uint64_t *)v148);
        if (v49)
          goto LABEL_171;
        v131 = 0;
        swift_bridgeObjectRelease();
        v51 = *(_QWORD *)(*(_QWORD *)&v148[0] + 16);
        if (v51)
        {
          v52 = (unsigned __int8 *)(*(_QWORD *)&v148[0] + 32);
          v53 = MEMORY[0x1E0DEE9D8];
          do
          {
            v57 = *v52++;
            v56 = v57;
            if (v57 > v44)
            {
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)&v148[0] = v53;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v53 + 16) + 1, 1);
                v53 = *(_QWORD *)&v148[0];
              }
              v55 = *(_QWORD *)(v53 + 16);
              v54 = *(_QWORD *)(v53 + 24);
              if (v55 >= v54 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
                v53 = *(_QWORD *)&v148[0];
              }
              *(_QWORD *)(v53 + 16) = v55 + 1;
              *(_BYTE *)(v53 + v55 + 32) = v56;
            }
            --v51;
          }
          while (v51);
        }
        else
        {
          v53 = MEMORY[0x1E0DEE9D8];
        }
        swift_release();
        if (!*(_QWORD *)(v53 + 16))
        {
          swift_release();
          v43 = v129;
          v41 = v130;
          v46 = v138;
          v26 = v139;
          LOBYTE(v59) = v133;
          v42 = v136;
          goto LABEL_44;
        }
        v75 = *(unsigned __int8 *)(v53 + 32);
        swift_release();
        LODWORD(v132) = v75 < 4;
        v43 = v129;
        v46 = v138;
        v26 = v139;
        v42 = v136;
        if ((_DWORD)v75 == v44)
          goto LABEL_77;
        LOBYTE(v143[0]) = 0x60504030A0201uLL >> (8 * v75);
        LOBYTE(v142[0]) = v136;
        v95 = 1.59271755e13;
        if (v14 <= 1.59271755e13)
          v95 = v14;
        v96 = fmax(v95, -2.11845067e11);
        ObjectType = swift_getObjectType();
        *(double *)v148 = v96;
        v59 = v75;
        v98 = v42;
        v99 = *(uint64_t (**)(double *, double *, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)&v46 + 144);
        swift_unknownObjectRetain();
        v128 = ObjectType;
        v100 = v99(v143, v142, v148, ObjectType, *(_QWORD *)&v46);
        v102 = v101;
        v104 = v103;
        swift_unknownObjectRelease();
        if ((v104 & 1) != 0)
        {
          v44 = v59;
          LOBYTE(v59) = v133;
          v42 = v98;
          v41 = v130;
          goto LABEL_44;
        }
        v126 = v59;
        v127 = v100;
        *(double *)v148 = v26;
        *((double *)v148 + 1) = v46;
        LOBYTE(v146._time) = v98;
        if ((v133 & 1) != 0)
          v105 = 1;
        else
          v105 = -1;
        v142[0] = v14;
        v40 = (unint64_t)Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v146, v105, (Foundation::Date)v40, (Swift::Bool)v142);
        if ((LOBYTE(v143[1]) & 1) != 0)
        {
          v42 = v98;
          v44 = v126;
LABEL_77:
          LOBYTE(v59) = v133;
          v41 = v130;
          goto LABEL_44;
        }
        v106 = v102 - v127;
        if (__OFSUB__(v102, v127))
          goto LABEL_163;
        v107 = v106 + 1;
        if (__OFADD__(v106, 1))
          goto LABEL_164;
        v124 = v106 + 1;
        v125 = v102 - v127;
        if (v107 < 0)
          goto LABEL_165;
        v108 = v143[0];
        v109 = -v130;
        v110 = __OFSUB__(0, v130);
        LODWORD(v136) = v110;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        v111 = 0;
        v127 = 0x60504030A0201uLL >> (8 * v126);
        v112 = 1;
        v113 = v138;
        v114 = v107;
        break;
      default:
        goto LABEL_169;
    }
    while (1)
    {
      if ((v136 & 1) != 0)
        goto LABEL_158;
      v115.value = v109 * v114;
      if ((unsigned __int128)(v109 * (__int128)v114) >> 64 != (v109 * v114) >> 63)
        goto LABEL_159;
      memset(v148, 0, 40);
      BYTE8(v148[2]) = 1;
      *(_QWORD *)&v148[3] = 0;
      BYTE8(v148[3]) = 1;
      *(_QWORD *)&v148[4] = 0;
      BYTE8(v148[4]) = 1;
      *(_QWORD *)&v148[5] = 0;
      BYTE8(v148[5]) = 1;
      *(_QWORD *)&v148[6] = 0;
      BYTE8(v148[6]) = 1;
      *(_QWORD *)&v148[7] = 0;
      BYTE8(v148[7]) = 1;
      *(_QWORD *)&v148[8] = 0;
      BYTE8(v148[8]) = 1;
      *(_QWORD *)&v148[9] = 0;
      BYTE8(v148[9]) = 1;
      *(_QWORD *)&v148[10] = 0;
      BYTE8(v148[10]) = 1;
      *(_QWORD *)&v148[11] = 0;
      BYTE8(v148[11]) = 1;
      *(_QWORD *)&v148[12] = 0;
      BYTE8(v148[12]) = 1;
      *(_QWORD *)&v148[13] = 0;
      BYTE8(v148[13]) = 1;
      *(_QWORD *)&v148[14] = 0;
      BYTE8(v148[14]) = 1;
      *(_QWORD *)&v148[15] = 0;
      BYTE8(v148[15]) = 1;
      v116 = v135;
      *v135 = 1;
      *(_QWORD *)&v148[16] = 0;
      *(_QWORD *)&v148[17] = 0;
      v116[16] = 1;
      BYTE9(v148[17]) = 2;
      LOBYTE(v142[0]) = v127;
      v115.is_nil = 0;
      DateComponents.setValue(_:for:)(v115, (Foundation::Calendar::Component)v142);
      memcpy(v143, v148, 0x11AuLL);
      memcpy(v142, v148, 0x11AuLL);
      v144 = v96;
      v117 = *(void (**)(Foundation::Date *__return_ptr, double *, double *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)&v113 + 200);
      swift_unknownObjectRetain();
      v117(&v146, v142, &v144, 0, v128, *(_QWORD *)&v113);
      outlined release of DateComponents((uint64_t)v143);
      swift_unknownObjectRelease();
      if ((v147 & 1) == 0)
        break;
LABEL_134:
      v118 = v107;
      if ((v112 & 1) == 0)
      {
        v118 = v111 - 1;
        if (v111 < 1)
          goto LABEL_161;
      }
      if (!v118)
        goto LABEL_137;
      v112 = 0;
      v111 = v118;
      v114 = v118 - 1;
      if (v111 < 1)
        goto LABEL_160;
    }
    if ((v133 & 1) != 0)
    {
      if (v108 >= v146._time)
        goto LABEL_138;
      goto LABEL_134;
    }
    if (v146._time < v108 || v13 >= v146._time)
      goto LABEL_134;
LABEL_138:
    if ((v112 & 1) != 0)
      goto LABEL_141;
    if (!v111)
    {
LABEL_137:
      swift_bridgeObjectRelease();
      v26 = v139;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v43 = v129;
      v119 = v130;
      v46 = v138;
      LOBYTE(v59) = v133;
      v120 = v125;
      goto LABEL_152;
    }
    v107 = v111 - 1;
LABEL_141:
    v46 = v138;
    v26 = v139;
    v142[0] = v139;
    v142[1] = v138;
    v140 = 0x60504030A0201uLL >> (8 * v126);
    if ((unsigned __int128)(v109 * (__int128)v107) >> 64 != (v109 * v107) >> 63)
      goto LABEL_167;
    v141 = v14;
    Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v140, v109 * v107, v146, (Swift::Bool)&v141);
    v43 = v129;
    if ((v145 & 1) != 0)
      goto LABEL_170;
    v121 = v144;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    LODWORD(v59) = v133;
    if ((v133 & 1) == 0)
    {
LABEL_146:
      v119 = v130;
      if (v121 >= v108 && v13 < v121)
        goto LABEL_148;
      goto LABEL_168;
    }
    v119 = v130;
    if (v108 < v121)
    {
      __break(1u);
      goto LABEL_146;
    }
LABEL_148:
    LODWORD(v122) = (v107 < v124) & ~(_DWORD)v59;
    if (v108 < v121)
      v122 = v122;
    else
      v122 = 0;
    v120 = v107 + v122;
LABEL_152:
    if ((unsigned __int128)(v119 * (__int128)v120) >> 64 != (v119 * v120) >> 63)
      goto LABEL_166;
    v42 = 0x60504030A0201uLL >> (8 * v126);
    v44 = v126;
    v41 = v119 * v120;
LABEL_44:
    *(double *)v148 = v26;
    *((double *)v148 + 1) = v46;
    LOBYTE(v142[0]) = v42;
    if (__OFSUB__(0, v41))
    {
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      swift_release();
      __break(1u);
      JUMPOUT(0x181CD4D90);
    }
    v143[0] = v14;
    *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)v142, -v41, (Foundation::Date)v40, (Swift::Bool)v143);
    v136 = v42;
    if ((_DWORD)v132)
    {
      time = v146._time;
      v44 = 1;
      if ((v147 & 1) == 0)
      {
        v142[0] = v146._time;
        LOBYTE(v144) = v42;
        *(double *)v148 = v26;
        *((double *)v148 + 1) = v46;
        Date.aligned(to:of:in:)((v59 & 1) == 0, (char *)&v144, (uint64_t)v148, (uint64_t)v143);
        time = v143[0];
        v44 = LOBYTE(v143[1]);
      }
      *(_QWORD *)&v143[0] = 0x2000;
      v61 = 1.59271755e13;
      if (v14 <= 1.59271755e13)
        v61 = v14;
      v62 = fmax(v61, -2.11845067e11);
      v63 = swift_getObjectType();
      v142[0] = v62;
      v64 = v46;
      v65 = *(void (**)(_OWORD *__return_ptr, double *, double *, uint64_t, _QWORD))(*(_QWORD *)&v46 + 192);
      swift_unknownObjectRetain();
      v65(v148, v143, v142, v63, *(_QWORD *)&v64);
      outlined release of DateComponents((uint64_t)v148);
      result = swift_unknownObjectRelease();
      if ((BYTE8(v148[10]) & 1) != 0)
      {
        v66 = 0;
        if ((v59 & 1) == 0)
          goto LABEL_52;
LABEL_69:
        v46 = v138;
        LOBYTE(v42) = v136;
        if ((v44 & 1) == 0)
LABEL_70:
          time = (double)v66 * 0.000000001 + time;
LABEL_71:
        if ((v44 & 1) != 0)
        {
LABEL_72:
          *v43 = 0.0;
          v74 = 2;
          goto LABEL_107;
        }
LABEL_73:
        v73 = (unsigned __int8 *)&outlined read-only object #0 of Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:);
        goto LABEL_80;
      }
      v66 = *(_QWORD *)&v148[10];
      if ((v59 & 1) != 0)
        goto LABEL_69;
LABEL_52:
      v46 = v138;
      LOBYTE(v42) = v136;
      if ((v44 & 1) != 0)
        goto LABEL_71;
      v67 = __OFADD__(v66, -1000000000);
      v66 -= 1000000000;
      if (!v67)
        goto LABEL_70;
      __break(1u);
    }
    if ((v147 & 1) != 0)
      goto LABEL_72;
    time = v146._time;
    v68 = *(_QWORD *)(static ICURelativeDateFormatter.sortedAllowedComponents + 16);
    if (!v68)
      goto LABEL_73;
    v69 = (unsigned __int8 *)(static ICURelativeDateFormatter.sortedAllowedComponents + 32);
    do
    {
      v72 = *v69++;
      v71 = v72;
      if (v72 == 6)
      {
        if (v44 < 6u)
          goto LABEL_67;
      }
      else if (v71 == 5 && v44 < 5u)
      {
LABEL_67:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
        v73 = (unsigned __int8 *)swift_allocObject();
        *((_OWORD *)v73 + 1) = xmmword_18205F0D0;
        v73[32] = v71;
        v73[33] = 13;
        goto LABEL_80;
      }
      --v68;
    }
    while (v68);
    v73 = (unsigned __int8 *)&outlined read-only object #0 of Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:);
LABEL_80:
    v76 = -1;
    if ((v59 & 1) == 0)
      v76 = 1;
    v133 = v76;
    v77 = *((_QWORD *)v73 + 2);
    if (v77)
    {
      v137 = swift_getObjectType();
      v78 = *(uint64_t (**)(double *, double *, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)&v46 + 144);
      v10 = 1;
      if (((v59 ^ v134) & 1) != 0)
        v79 = 1;
      else
        v79 = -1;
      v131 = v79;
      v132 = v78;
      if (v14 <= 1.59271755e13)
        v80 = v14;
      else
        v80 = 1.59271755e13;
      v81 = fmax(v80, -2.11845067e11);
      swift_bridgeObjectRetain();
      v82 = 0;
      v130 = (uint64_t)v73;
      while (1)
      {
        a5 = v73[v82 + 32];
        v83 = v77;
        v84 = (_DWORD)a5 != 13 || v77 == 1;
        LOBYTE(v143[0]) = v73[v82 + 32];
        if (v84)
          v85 = v133;
        else
          v85 = v131;
        LOBYTE(v142[0]) = v42;
        *(double *)v148 = v81;
        swift_unknownObjectRetain();
        v86 = v132(v143, v142, v148, v137, *(_QWORD *)&v46);
        v12 = v87;
        v9 = v88;
        swift_unknownObjectRelease();
        if ((v9 & 1) != 0)
        {
LABEL_108:
          result = swift_bridgeObjectRelease_n();
          v94 = v129;
          *v129 = time;
          *((_BYTE *)v94 + 8) = 1;
          return result;
        }
        v89 = (uint64_t)&v12[-v86];
        if (__OFSUB__(v12, v86))
          break;
        v90 = v85 * v89;
        if ((unsigned __int128)(v85 * (__int128)v89) >> 64 != (v85 * v89) >> 63)
          goto LABEL_155;
        memset(v148, 0, 40);
        BYTE8(v148[2]) = 1;
        *(_QWORD *)&v148[3] = 0;
        BYTE8(v148[3]) = 1;
        *(_QWORD *)&v148[4] = 0;
        BYTE8(v148[4]) = 1;
        *(_QWORD *)&v148[5] = 0;
        BYTE8(v148[5]) = 1;
        *(_QWORD *)&v148[6] = 0;
        BYTE8(v148[6]) = 1;
        *(_QWORD *)&v148[7] = 0;
        BYTE8(v148[7]) = 1;
        *(_QWORD *)&v148[8] = 0;
        BYTE8(v148[8]) = 1;
        *(_QWORD *)&v148[9] = 0;
        BYTE8(v148[9]) = 1;
        *(_QWORD *)&v148[10] = 0;
        BYTE8(v148[10]) = 1;
        *(_QWORD *)&v148[11] = 0;
        BYTE8(v148[11]) = 1;
        *(_QWORD *)&v148[12] = 0;
        BYTE8(v148[12]) = 1;
        *(_QWORD *)&v148[13] = 0;
        BYTE8(v148[13]) = 1;
        *(_QWORD *)&v148[14] = 0;
        BYTE8(v148[14]) = 1;
        *(_QWORD *)&v148[15] = 0;
        BYTE8(v148[15]) = 1;
        v91 = v135;
        *v135 = 1;
        *(_QWORD *)&v148[16] = 0;
        *(_QWORD *)&v148[17] = 0;
        v91[16] = 1;
        BYTE9(v148[17]) = 2;
        if ((a5 - 14) <= 2)
          goto LABEL_108;
        v156.value = v90 / 2;
        LOBYTE(v143[0]) = a5;
        v156.is_nil = 0;
        DateComponents.setValue(_:for:)(v156, (Foundation::Calendar::Component)v143);
        memcpy(v143, v148, 0x11AuLL);
        v92 = time <= 1.59271755e13 ? time : 1.59271755e13;
        memcpy(v142, v148, 0x11AuLL);
        v141 = fmax(v92, -2.11845067e11);
        v46 = v138;
        v93 = *(void (**)(double *__return_ptr, double *, double *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)&v138 + 200);
        swift_unknownObjectRetain();
        v93(&v144, v142, &v141, 0, v137, *(_QWORD *)&v46);
        outlined release of DateComponents((uint64_t)v143);
        swift_unknownObjectRelease();
        if ((v145 & 1) != 0)
          goto LABEL_108;
        ++v82;
        time = v144;
        v77 = v83;
        LOBYTE(v42) = v136;
        v73 = (unsigned __int8 *)v130;
        if (v83 == v82)
        {
          swift_bridgeObjectRelease();
          v43 = v129;
          goto LABEL_106;
        }
      }
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      swift_once();
      continue;
    }
    break;
  }
LABEL_106:
  result = swift_bridgeObjectRelease();
  v74 = v134 & ((v13 >= v14) ^ (time < v14));
  *v43 = time;
LABEL_107:
  *((_BYTE *)v43 + 8) = v74;
  return result;
}

Foundation::Date_optional __swiftcall Date.AnchoredRelativeFormatStyle.discreteInput(after:)(Foundation::Date after)
{
  double *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  double v5;
  __int16 v6;
  uint64_t v7;
  double v8;
  __int128 v9;
  char v10;
  int v11;
  double v12;
  double v13;
  double v14;
  char v15;
  __int16 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  double v20;
  double v21;
  unsigned __int8 v22;
  Foundation::Date_optional result;

  v4 = v2;
  v5 = *v1;
  v6 = *(_WORD *)(v3 + 1);
  v7 = *((_QWORD *)v3 + 5);
  v8 = *((double *)v3 + 6);
  v15 = *v3;
  v16 = v6;
  v9 = *(_OWORD *)(v3 + 24);
  v17 = *(_OWORD *)(v3 + 8);
  v18 = v9;
  v19 = v7;
  v20 = v8;
  v13 = v8;
  v14 = v5;
  v10 = Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(&v14, &v13, 0, v5 < v8, (uint64_t)&v21);
  v11 = v22;
  if (v22 == 2)
  {
    v12 = 0.0;
  }
  else
  {
    v12 = v21;
    if ((v22 & 1) != 0)
    {
      v12 = v21 + 0.0;
      if (v21 + 0.0 < INFINITY)
        *(_QWORD *)&v12 += (*(uint64_t *)&v12 >> 63) | 1;
    }
  }
  *(double *)v4 = v12;
  *(_BYTE *)(v4 + 8) = v11 == 2;
  result.value = *(Foundation::Date *)&v12;
  result.is_nil = v10;
  return result;
}

Foundation::Date_optional __swiftcall Date.AnchoredRelativeFormatStyle.input(before:)(Foundation::Date before)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  Foundation::Date_optional result;

  v4 = *v1;
  v5 = *(double *)(v3 + 48);
  v6 = 0.0 - *v1;
  if (v6 < INFINITY)
    *(_QWORD *)&v6 = ((COERCE__INT64(0.0 - *v1) >> 63) | 1) + COERCE__INT64(0.0 - *v1);
  v7 = (v4 + 978307200.0) * -1000.0 + 0.0;
  if (v7 < INFINITY)
    *(_QWORD *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
  v8 = 0.0 - v5;
  if (0.0 - v5 < INFINITY)
    *(_QWORD *)&v8 = ((COERCE__INT64(0.0 - v5) >> 63) | 1) + COERCE__INT64(0.0 - v5);
  v9 = (v5 + 978307200.0) * -1000.0 + 0.0;
  if (v9 < INFINITY)
    *(_QWORD *)&v9 += (*(uint64_t *)&v9 >> 63) | 1;
  v10 = fabs(v5 + v8);
  v11 = vabdd_f64(v4, -978307200.0 - v7 / 1000.0);
  v12 = fabs(v4 + v6);
  v13 = vabdd_f64(v5, -978307200.0 - v9 / 1000.0);
  v14 = v4 - (v12 + v11 + v10 + v13 + v12 + v11 + v10 + v13);
  v15 = v14;
  if (v14 >= v4)
    v15 = 0.0;
  *(double *)v2 = v15;
  *(_BYTE *)(v2 + 8) = v14 >= v4;
  result.value = *(Foundation::Date *)&v4;
  result.is_nil = (char)v1;
  return result;
}

Foundation::Date_optional __swiftcall Date.AnchoredRelativeFormatStyle.input(after:)(Foundation::Date after)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  Foundation::Date_optional result;

  v4 = *v1;
  v5 = *(double *)(v3 + 48);
  v6 = 0.0 - *v1;
  if (v6 < INFINITY)
    *(_QWORD *)&v6 = ((COERCE__INT64(0.0 - *v1) >> 63) | 1) + COERCE__INT64(0.0 - *v1);
  v7 = (v4 + 978307200.0) * -1000.0 + 0.0;
  if (v7 < INFINITY)
    *(_QWORD *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
  v8 = 0.0 - v5;
  if (0.0 - v5 < INFINITY)
    *(_QWORD *)&v8 = ((COERCE__INT64(0.0 - v5) >> 63) | 1) + COERCE__INT64(0.0 - v5);
  v9 = (v5 + 978307200.0) * -1000.0 + 0.0;
  if (v9 < INFINITY)
    *(_QWORD *)&v9 += (*(uint64_t *)&v9 >> 63) | 1;
  v10 = fabs(v5 + v8);
  v11 = vabdd_f64(v4, -978307200.0 - v7 / 1000.0);
  v12 = fabs(v4 + v6);
  v13 = vabdd_f64(v5, -978307200.0 - v9 / 1000.0);
  v14 = v4 + v12 + v11 + v10 + v13 + v12 + v11 + v10 + v13;
  v15 = v14;
  if (v4 >= v14)
    v15 = 0.0;
  *(double *)v2 = v15;
  *(_BYTE *)(v2 + 8) = v4 >= v14;
  result.value = *(Foundation::Date *)&v4;
  result.is_nil = (char)v1;
  return result;
}

_QWORD *Date.aligned(to:of:in:)@<X0>(char a1@<W0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double *v4;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t ObjectType;
  _QWORD *result;
  char v12;
  double v13;
  double v14;
  char v15;
  double v16;
  double v17;
  char v18;

  v7 = *(_QWORD *)(a3 + 8);
  v8 = *v4;
  if (*v4 > 1.59271755e13)
    v8 = 1.59271755e13;
  v15 = *a2;
  v9 = fmax(v8, -2.11845067e11);
  ObjectType = swift_getObjectType();
  v14 = v9;
  result = (*(_QWORD *(**)(double *__return_ptr, char *, double *, uint64_t, uint64_t))(v7 + 160))(&v16, &v15, &v14, ObjectType, v7);
  v12 = v18;
  if ((v18 & 1) != 0)
  {
    *(_QWORD *)a4 = 0;
  }
  else if ((a1 & 1) != 0)
  {
    v13 = 0.0 - v17;
    if (0.0 - v17 < INFINITY)
      *(_QWORD *)&v13 += (*(uint64_t *)&v13 >> 63) | 1;
    *(double *)a4 = v16 - v13;
  }
  else
  {
    *(double *)a4 = v16;
  }
  *(_BYTE *)(a4 + 8) = v12;
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.AnchoredRelativeFormatStyle@<X0>(Foundation::Date *a1@<X0>, Swift::String *a2@<X8>)
{
  Foundation::Date *v2;
  uint64_t result;
  Swift::String v5;

  v5 = Date.RelativeFormatStyle._format(_:refDate:)(*(Foundation::Date *)&a1->_time, v2[6]);
  result = v5._countAndFlagsBits;
  *a2 = v5;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.AnchoredRelativeFormatStyle@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_WORD *)(v2 + 1);
  v4 = *(_QWORD *)(v2 + 40);
  v5 = *(_QWORD *)(v2 + 48);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_WORD *)(a2 + 1) = v3;
  *(_OWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 48) = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t specialized static Date.AnchoredRelativeFormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  result = 0;
  if (((*a1 ^ *a2) & 1) == 0 && a1[1] == a2[1] && a1[2] == a2[2])
  {
    v4 = *((_QWORD *)a1 + 5);
    v5 = *((double *)a1 + 6);
    v13 = *(_OWORD *)(a2 + 24);
    v14 = *(_OWORD *)(a1 + 24);
    v6 = *((_QWORD *)a2 + 5);
    v7 = *((double *)a2 + 6);
    v9 = *((_QWORD *)a2 + 1);
    v8 = *((_QWORD *)a2 + 2);
    v11 = *((_QWORD *)a1 + 1);
    v10 = *((_QWORD *)a1 + 2);
    *(_QWORD *)&v16 = v11;
    *((_QWORD *)&v16 + 1) = v10;
    *(_QWORD *)&v15 = v9;
    *((_QWORD *)&v15 + 1) = v8;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Locale.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15) & 1) != 0
      && (v15 = v13, v16 = v14, (specialized static Calendar.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15) & 1) != 0))
    {
      v12 = specialized static Set.== infix(_:_:)(v4, v6);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v12 & (v5 == v7);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AnchoredRelativeFormatStyle.CodingKeys, &unk_1E0F2ED00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AnchoredRelativeFormatStyle.CodingKeys, &unk_1E0F2ED00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AnchoredRelativeFormatStyle.CodingKeys, &unk_1E0F2ED00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AnchoredRelativeFormatStyle.CodingKeys, &unk_1E0F2ED00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AnchoredRelativeFormatStyle, &type metadata for Date.AnchoredRelativeFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AnchoredRelativeFormatStyle, &type metadata for Date.AnchoredRelativeFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AnchoredRelativeFormatStyle, &type metadata for Date.AnchoredRelativeFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AnchoredRelativeFormatStyle, &type metadata for Date.AnchoredRelativeFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.AnchoredRelativeFormatStyle, &type metadata for Date.AnchoredRelativeFormatStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.AnchoredRelativeFormatStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.AnchoredRelativeFormatStyle(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle();
  result = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle();
  a1[3] = result;
  return result;
}

_BYTE *sub_181CD5D64@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_181CD5D70(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_181CD5D7C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 1);
  return result;
}

_BYTE *sub_181CD5D88(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 1) = *result;
  return result;
}

uint64_t sub_181CD5D94@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 2);
  return result;
}

_BYTE *sub_181CD5DA0(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 2) = *result;
  return result;
}

uint64_t sub_181CD5DAC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 8);
  return swift_unknownObjectRetain();
}

__n128 sub_181CD5DBC(__n128 *a1, uint64_t a2)
{
  __n128 result;
  __n128 v4;

  v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v4;
  *(__n128 *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_181CD5E04@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 24);
  return swift_unknownObjectRetain();
}

__n128 sub_181CD5E14(__n128 *a1, uint64_t a2)
{
  __n128 result;
  __n128 v4;

  v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  result = v4;
  *(__n128 *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_181CD5E5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_181CD5E68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 40) = v3;
  return result;
}

uint64_t initializeWithCopy for Date.AnchoredRelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.AnchoredRelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for Date.AnchoredRelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.AnchoredRelativeFormatStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.AnchoredRelativeFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.AnchoredRelativeFormatStyle()
{
  return &type metadata for Date.AnchoredRelativeFormatStyle;
}

uint64_t storeEnumTagSinglePayload for Date.AnchoredRelativeFormatStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_181CD6110 + 4 * byte_1821029F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181CD6144 + 4 * asc_1821029F0[v4]))();
}

uint64_t sub_181CD6144(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CD614C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181CD6154);
  return result;
}

uint64_t sub_181CD6160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181CD6168);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_181CD616C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CD6174(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  return &unk_1E0F2ED00;
}

uint64_t specialized Date.AnchoredRelativeFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x79745372656E6E69 && a2 == 0xEA0000000000656CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F68636E61 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void NSUndoManager.registerUndo<A>(withTarget:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  _QWORD *v9;
  void *v10;
  _QWORD v11[6];

  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a4;
  v9[3] = a2;
  v9[4] = a3;
  v11[4] = partial apply for closure #1 in NSUndoManager.registerUndo<A>(withTarget:handler:);
  v11[5] = v9;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> ();
  v11[3] = &block_descriptor_14;
  v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_registerUndoWithTarget_handler_, a1, v10);
  _Block_release(v10);
}

uint64_t closure #1 in NSUndoManager.registerUndo<A>(withTarget:handler:)(uint64_t a1, void (*a2)())
{
  _BYTE v4[32];

  outlined init with copy of Any(a1, (uint64_t)v4);
  swift_dynamicCast();
  a2();
  return swift_unknownObjectRelease();
}

uint64_t sub_181CD6934()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSUndoManager.registerUndo<A>(withTarget:handler:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in NSUndoManager.registerUndo<A>(withTarget:handler:)(a1, *(void (**)())(v1 + 24));
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(_QWORD *);
  _QWORD v5[4];

  v3 = *(void (**)(_QWORD *))(a1 + 32);
  v5[3] = swift_getObjectType();
  v5[0] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  v3(v5);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t getEnumTagSinglePayload for NSDecimal.DecimalParseResult(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NSDecimal.DecimalParseResult(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

uint64_t getEnumTag for NSDecimal.DecimalParseResult(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for NSDecimal.DecimalParseResult(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    *(_BYTE *)(result + 32) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NSDecimal.DecimalParseResult()
{
  return &type metadata for NSDecimal.DecimalParseResult;
}

uint64_t dispatch thunk of ParseableFormatStyle.parseStrategy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t __DataStorage.__allocating_init(immutableReference:offset:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t result;

  v3 = objc_retainAutorelease(a1);
  v4 = objc_msgSend(v3, sel_bytes);
  v5 = objc_msgSend(v3, sel_length);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 48) = destructiveProjectEnumData for PredicateCodableError;
  *(_QWORD *)(result + 56) = v6;
  return result;
}

uint64_t __DataStorage.__allocating_init(mutableReference:offset:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t result;

  v3 = objc_retainAutorelease(a1);
  v4 = objc_msgSend(v3, sel_mutableBytes);
  v5 = objc_msgSend(v3, sel_length);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 48) = destructiveProjectEnumData for PredicateCodableError;
  *(_QWORD *)(result + 56) = v6;
  return result;
}

uint64_t __DataStorage.__allocating_init(customReference:offset:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t result;

  v3 = objc_retainAutorelease(a1);
  v4 = objc_msgSend(v3, sel_bytes);
  v5 = objc_msgSend(v3, sel_length);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 48) = destructiveProjectEnumData for PredicateCodableError;
  *(_QWORD *)(result + 56) = v6;
  return result;
}

uint64_t __DataStorage.__allocating_init(customMutableReference:offset:)(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t result;

  v3 = objc_retainAutorelease(a1);
  v4 = objc_msgSend(v3, sel_mutableBytes);
  v5 = objc_msgSend(v3, sel_length);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 48) = destructiveProjectEnumData for PredicateCodableError;
  *(_QWORD *)(result + 56) = v6;
  return result;
}

id __NSSwiftData.init(base64Encoded:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  v5 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for __NSSwiftData();
  v7 = objc_msgSendSuper2(&v9, sel_initWithBase64EncodedString_options_, v6, a3);
  swift_unknownObjectRelease();
  if (v7)

  return v7;
}

void __NSSwiftData.init(base64Encoded:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing) = 0;
  v3 = v2 + OBJC_IVAR____TtC10Foundation13__NSSwiftData__range;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 16) = 1;
  __asm { BR              X10 }
}

id sub_181CD6F34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,objc_super a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  objc_class *v41;
  id v42;
  id v43;
  uint64_t v45;
  __int16 v46;
  char v47;
  char v48;
  char v49;
  char v50;
  objc_super v51;

  v45 = v37;
  v46 = v36;
  v47 = BYTE2(v36);
  v48 = BYTE3(v36);
  v49 = BYTE4(v36);
  v50 = BYTE5(v36);
  v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D50]), sel_initWithBytes_length_, &v45, BYTE6(v36));
  v41 = (objc_class *)type metadata accessor for __NSSwiftData();
  v51.receiver = v39;
  v51.super_class = v41;
  v42 = objc_msgSendSuper2(&v51, sel_initWithBase64EncodedData_options_, v40, v38);
  outlined consume of Data._Representation(v37, v36);
  v43 = v42;

  if (v43)
  return v43;
}

id @objc __NSSwiftData.init(bytes:length:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  char *v8;
  objc_super v10;

  *(_QWORD *)&a1[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  v8 = &a1[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v10.receiver = a1;
  v10.super_class = (Class)type metadata accessor for __NSSwiftData();
  return objc_msgSendSuper2(&v10, *a5, a3, a4);
}

id __NSSwiftData.init(bytesNoCopy:length:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v8;
  void *v9;
  objc_class *v10;
  id v11;
  _QWORD v13[6];
  objc_super v14;

  *(_QWORD *)&v4[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  v8 = &v4[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  if (a3)
  {
    v13[4] = a3;
    v13[5] = a4;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 1107296256;
    v13[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ();
    v13[3] = &block_descriptor_15;
    v9 = _Block_copy(v13);
    swift_retain();
    swift_release();
  }
  else
  {
    v9 = 0;
  }
  v10 = (objc_class *)type metadata accessor for __NSSwiftData();
  v14.receiver = v4;
  v14.super_class = v10;
  v11 = objc_msgSendSuper2(&v14, sel_initWithBytesNoCopy_length_deallocator_, a1, a2, v9);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(a3);
  _Block_release(v9);
  return v11;
}

id __NSSwiftData.init(contentsOfFile:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  objc_super v11;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x1E0C80C00];
  *(_QWORD *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  v5 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v12[0] = 0;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for __NSSwiftData();
  v7 = objc_msgSendSuper2(&v11, sel_initWithContentsOfFile_options_error_, v6, a3, v12);
  swift_unknownObjectRelease();
  if (v7)
  {
    v8 = v12[0];
  }
  else
  {
    if (v12[0])
    {
      v12[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v9 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v7;
}

id __NSSwiftData.init(contentsOf:options:)(void **a1, uint64_t a2)
{
  char *v2;
  void *v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  objc_super v10;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = *a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  v5 = &v2[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  swift_release();
  swift_release();
  v11[0] = 0;
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for __NSSwiftData();
  v6 = objc_msgSendSuper2(&v10, sel_initWithContentsOfURL_options_error_, v4, a2, v11);

  if (v6)
  {
    v7 = v11[0];
  }
  else
  {
    if (v11[0])
    {
      v11[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v8 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v6;
}

id __NSSwiftData.init(contentsOfMappedFile:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  char *v3;
  char *v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  v5 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for __NSSwiftData();
  v7 = objc_msgSendSuper2(&v9, *a3, v6);
  swift_unknownObjectRelease();
  if (v7)

  return v7;
}

id @objc __NSSwiftData.init(contentsOfMappedFile:)(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v5;
  uint64_t v6;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  return __NSSwiftData.init(contentsOfMappedFile:)((uint64_t)v5, v6, a4);
}

id __NSSwiftData.init(contentsOf:)(void **a1)
{
  char *v1;
  void *v2;
  char *v3;
  id v4;
  objc_super v6;

  v2 = *a1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  v3 = &v1[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 1;
  swift_release();
  swift_release();
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for __NSSwiftData();
  v4 = objc_msgSendSuper2(&v6, sel_initWithContentsOfURL_, v2);

  if (v4)
  return v4;
}

id __NSSwiftData.init(contentsOfFile:error:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  char *v3;
  char *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  objc_super v11;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x1E0C80C00];
  *(_QWORD *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  v5 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  if (a2)
  {
    v6 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v12[0] = 0;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for __NSSwiftData();
  v7 = objc_msgSendSuper2(&v11, *a3, v6, v12);

  if (v7)
  {
    v8 = v12[0];
  }
  else
  {
    if (v12[0])
    {
      v12[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1)
        swift_once();
      v9 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v7;
}

id @objc __NSSwiftData.init(contentsOfFile:error:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, SEL *a5)
{
  id v6;
  uint64_t v7;

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  return __NSSwiftData.init(contentsOfFile:error:)((uint64_t)v6, v7, a5);
}

id __NSSwiftData.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for __NSSwiftData();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static Data._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id result;
  uint64_t v5;

  outlined consume of Data?(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  result = specialized Data.init(referencing:)(a1);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Data(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  unint64_t v5;
  unint64_t v6;

  if (a1)
  {
    v3 = a1;
    v4 = specialized Data.init(referencing:)(v3);
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0xC000000000000000;
  }
  *a2 = v4;
  a2[1] = v6;
}

NSData __swiftcall Data.InlineSlice.bridgedReference()()
{
  NSData result;
  Class isa;

  isa = result.super.isa;
  result.super.isa = (Class)SLODWORD(result.super.isa);
  if ((uint64_t)isa >> 32 >= SLODWORD(result.super.isa))
    return (NSData)__DataStorage.bridgedReference(_:)(SLODWORD(result.super.isa), (uint64_t)isa >> 32);
  __break(1u);
  return result;
}

NSData __swiftcall Data.LargeSlice.bridgedReference()()
{
  uint64_t v0;

  return (NSData)__DataStorage.bridgedReference(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t NSData._toCustomAnyHashable()()
{
  void *v0;
  id v1;

  v1 = v0;
  specialized Data.init(referencing:)(v1);

  lazy protocol witness table accessor for type Data and conformance Data();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSData()
{
  id *v0;
  id v1;

  v1 = *v0;
  specialized Data.init(referencing:)(v1);

  lazy protocol witness table accessor for type Data and conformance Data();
  AnyHashable.init<A>(_:)();

}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

uint64_t sub_181CD7DA0()
{
  uint64_t v0;

  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for Data(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Data and conformance Data();
  a1[2] = lazy protocol witness table accessor for type Data and conformance Data();
  a1[3] = lazy protocol witness table accessor for type Data and conformance Data();
  result = lazy protocol witness table accessor for type Data and conformance Data();
  a1[4] = result;
  return result;
}

{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Data and conformance Data();
  a1[2] = lazy protocol witness table accessor for type Data and conformance Data();
  result = lazy protocol witness table accessor for type Data and conformance Data();
  a1[3] = result;
  return result;
}

uint64_t sub_181CD7F10()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t AsyncCharacterSequence.AsyncIterator.remaining.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v3, v5);
}

uint64_t AsyncCharacterSequence.AsyncIterator.remaining.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v4, a1, v6);
}

uint64_t (*AsyncCharacterSequence.AsyncIterator.remaining.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AsyncCharacterSequence.AsyncIterator.accumulator.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AsyncCharacterSequence.AsyncIterator.accumulator.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*AsyncCharacterSequence.AsyncIterator.accumulator.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AsyncCharacterSequence.AsyncIterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = v1;
  return swift_task_switch();
}

uint64_t AsyncCharacterSequence.AsyncIterator.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_QWORD *)(v4 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v4 + 64) = v6;
  v7 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v4 + 72) = v7;
  *(_DWORD *)(v4 + 176) = *(_DWORD *)(type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator(0, v6, v7, a4)+ 36);
  v8 = 1;
  do
  {
    v14 = (char *)(*(_QWORD *)(v4 + 56) + *(int *)(v4 + 176));
    if ((v14[1] & 1) != 0)
    {
      *(_QWORD *)(v4 + 112) = swift_getAssociatedTypeWitness();
      *(_QWORD *)(v4 + 120) = swift_getAssociatedConformanceWitness();
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v4 + 128) = v19;
      *v19 = v4;
      v19[1] = AsyncCharacterSequence.AsyncIterator.next();
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }
    v15 = *v14;
    *(_WORD *)v14 = 256;
    if ((v15 & 0xE0) == 0xC0)
      goto LABEL_24;
    if ((v15 & 0xF0) == 0xE0)
    {
      v8 = 2;
LABEL_24:
      *(_BYTE *)(v4 + 184) = v15;
      *(_WORD *)(v4 + 185) = 0;
      *(_BYTE *)(v4 + 187) = 0;
      *(_QWORD *)(v4 + 80) = v8;
      *(_QWORD *)(v4 + 88) = 0;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v4 + 96) = v20;
      *v20 = v4;
      v20[1] = AsyncCharacterSequence.AsyncIterator.next();
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }
    if ((v15 & 0xF8) == 0xF0)
    {
      v8 = 3;
      goto LABEL_24;
    }
    if ((v15 & 0x80) == 0)
    {
      *(_BYTE *)(v4 + 184) = v15;
      *(_WORD *)(v4 + 185) = 0;
      *(_BYTE *)(v4 + 187) = 0;
      v16 = static String._fromUTF8Repairing(_:)();
      if ((v17 & 0x2000000000000000) != 0)
        v18 = HIBYTE(v17) & 0xF;
      else
        v18 = v16 & 0xFFFFFFFFFFFFLL;
      if (!v18)
        goto LABEL_31;
      if ((v17 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v17 & 0x2000000000000000) != 0)
        {
          *(_QWORD *)(v4 + 16) = v16;
          *(_QWORD *)(v4 + 24) = v17 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((v16 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      swift_bridgeObjectRelease();
    }
    v9 = (uint64_t *)(*(_QWORD *)(v4 + 56) + *(int *)(*(_QWORD *)(v4 + 48) + 36));
    v10 = v9[1];
    *(_QWORD *)(v4 + 32) = *v9;
    *(_QWORD *)(v4 + 40) = v10;
    String.UnicodeScalarView.append(_:)();
    v11 = *(_QWORD *)(v4 + 32);
    v12 = *(_QWORD *)(v4 + 40);
    *v9 = v11;
    v9[1] = v12;
    swift_bridgeObjectRetain();
    v13 = String.count.getter();
    swift_bridgeObjectRelease();
  }
  while (v13 < 2);
  v22 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v22 = v11 & 0xFFFFFFFFFFFFLL;
  if (!v22)
  {
    __break(1u);
    goto LABEL_40;
  }
  result = specialized Collection.first.getter(v11, v12);
  if (v23)
    goto LABEL_36;
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease();
  v24 = (uint64_t *)(*(_QWORD *)(v4 + 56) + *(int *)(*(_QWORD *)(v4 + 48) + 36));
  v26 = *v24;
  v25 = v24[1];
  swift_bridgeObjectRetain();
  v27 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v27 <= 0)
  {
    v29 = 0;
    v30 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v29, v30);
  }
  v28 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0)
    v28 = v26 & 0xFFFFFFFFFFFFLL;
  if (!v28)
LABEL_40:
    __break(1u);
  result = specialized Collection.first.getter(v26, v25);
  if (v23)
  {
LABEL_36:
    v29 = result;
    v30 = v23;
    specialized RangeReplaceableCollection.removeFirst(_:)(1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v29, v30);
  }
  __break(1u);
  return result;
}

uint64_t AsyncCharacterSequence.AsyncIterator.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;

  v1 = *(_BYTE *)(v0 + 192);
  if ((*(_BYTE *)(v0 + 193) & 1) == 0)
  {
    if ((v1 & 0xC0) == 0x80)
    {
      v2 = *(_QWORD *)(v0 + 80);
      v3 = *(_QWORD *)(v0 + 88) + 1;
      *(_BYTE *)(v0 + 184 + v3) = v1;
      if (v3 != v2)
        goto LABEL_55;
    }
    else
    {
      v4 = (_BYTE *)(*(_QWORD *)(v0 + 56) + *(int *)(v0 + 176));
      *v4 = v1;
      v4[1] = 0;
    }
  }
  v5 = static String._fromUTF8Repairing(_:)();
  v7 = v6;
  v8 = (v6 & 0x2000000000000000) == 0;
  if ((v6 & 0x2000000000000000) != 0)
    v9 = HIBYTE(v6) & 0xF;
  else
    v9 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v9)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    v25 = (uint64_t *)(*(_QWORD *)(v0 + 56) + *(int *)(*(_QWORD *)(v0 + 48) + 36));
    v27 = *v25;
    v26 = v25[1];
    swift_bridgeObjectRetain();
    v28 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v28 > 0)
    {
      v29 = HIBYTE(v26) & 0xF;
      if ((v26 & 0x2000000000000000) == 0)
        v29 = v27 & 0xFFFFFFFFFFFFLL;
      if (!v29)
      {
        __break(1u);
        goto LABEL_58;
      }
      result = specialized Collection.first.getter(v27, v26);
      if (v31)
        goto LABEL_48;
      __break(1u);
    }
    v32 = 0;
    v33 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v32, v33);
  }
  v10 = v5;
  while (1)
  {
    if ((v7 & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if (v8)
      {
        if ((v10 & 0x1000000000000000) == 0)
          _StringObject.sharedUTF8.getter();
      }
      else
      {
        *(_QWORD *)(v0 + 16) = v10;
        *(_QWORD *)(v0 + 24) = v7 & 0xFFFFFFFFFFFFFFLL;
      }
      _decodeScalar(_:startingAt:)();
    }
    swift_bridgeObjectRelease();
    v11 = (uint64_t *)(*(_QWORD *)(v0 + 56) + *(int *)(*(_QWORD *)(v0 + 48) + 36));
    v12 = v11[1];
    *(_QWORD *)(v0 + 32) = *v11;
    *(_QWORD *)(v0 + 40) = v12;
    String.UnicodeScalarView.append(_:)();
    v13 = *(_QWORD *)(v0 + 32);
    v14 = *(_QWORD *)(v0 + 40);
    *v11 = v13;
    v11[1] = v14;
    swift_bridgeObjectRetain();
    v15 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v15 > 1)
      goto LABEL_44;
    v16 = (char *)(*(_QWORD *)(v0 + 56) + *(int *)(v0 + 176));
    if ((v16[1] & 1) != 0)
    {
LABEL_50:
      *(_QWORD *)(v0 + 112) = swift_getAssociatedTypeWitness();
      *(_QWORD *)(v0 + 120) = swift_getAssociatedConformanceWitness();
      v35 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 128) = v35;
      *v35 = v0;
      v35[1] = AsyncCharacterSequence.AsyncIterator.next();
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }
    v17 = *v16;
    *(_WORD *)v16 = 256;
    if ((v17 & 0xE0) == 0xC0)
    {
LABEL_51:
      v36 = 1;
LABEL_54:
      v3 = 0;
      *(_QWORD *)(v0 + 80) = v36;
      *(_BYTE *)(v0 + 184) = v17;
      *(_WORD *)(v0 + 185) = 0;
      *(_BYTE *)(v0 + 187) = 0;
LABEL_55:
      *(_QWORD *)(v0 + 88) = v3;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v37 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 96) = v37;
      *v37 = v0;
      v37[1] = AsyncCharacterSequence.AsyncIterator.next();
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }
    if ((v17 & 0xF0) == 0xE0)
    {
LABEL_52:
      v36 = 2;
      goto LABEL_54;
    }
    if ((v17 & 0xF8) == 0xF0)
    {
LABEL_53:
      v36 = 3;
      goto LABEL_54;
    }
    if (v17 < 0)
      break;
LABEL_23:
    *(_BYTE *)(v0 + 184) = v17;
    *(_WORD *)(v0 + 185) = 0;
    *(_BYTE *)(v0 + 187) = 0;
    v18 = static String._fromUTF8Repairing(_:)();
    v10 = v18;
    v7 = v19;
    v8 = (v19 & 0x2000000000000000) == 0;
    if ((v19 & 0x2000000000000000) != 0)
      v20 = HIBYTE(v19) & 0xF;
    else
      v20 = v18 & 0xFFFFFFFFFFFFLL;
    if (!v20)
      goto LABEL_37;
  }
  while (1)
  {
    v21 = (uint64_t *)(*(_QWORD *)(v0 + 56) + *(int *)(*(_QWORD *)(v0 + 48) + 36));
    v22 = v21[1];
    *(_QWORD *)(v0 + 32) = *v21;
    *(_QWORD *)(v0 + 40) = v22;
    String.UnicodeScalarView.append(_:)();
    v13 = *(_QWORD *)(v0 + 32);
    v14 = *(_QWORD *)(v0 + 40);
    *v21 = v13;
    v21[1] = v14;
    swift_bridgeObjectRetain();
    v23 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v23 >= 2)
      break;
    v24 = (char *)(*(_QWORD *)(v0 + 56) + *(int *)(v0 + 176));
    if ((v24[1] & 1) != 0)
      goto LABEL_50;
    v17 = *v24;
    *(_WORD *)v24 = 256;
    if ((v17 & 0xE0) == 0xC0)
      goto LABEL_51;
    if ((v17 & 0xF0) == 0xE0)
      goto LABEL_52;
    if ((v17 & 0xF8) == 0xF0)
      goto LABEL_53;
    if ((v17 & 0x80) == 0)
      goto LABEL_23;
  }
LABEL_44:
  v34 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v34 = v13 & 0xFFFFFFFFFFFFLL;
  if (!v34)
LABEL_58:
    __break(1u);
  result = specialized Collection.first.getter(v13, v14);
  if (v31)
  {
LABEL_48:
    v32 = result;
    v33 = v31;
    specialized RangeReplaceableCollection.removeFirst(_:)(1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v32, v33);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v1 = *(_BYTE *)(v0 + 190);
  if ((*(_BYTE *)(v0 + 191) & 1) != 0)
    goto LABEL_2;
  if ((*(_BYTE *)(v0 + 190) & 0x80) == 0)
    goto LABEL_9;
  if ((v1 & 0xE0) == 0xC0)
  {
    v21 = 1;
LABEL_46:
    *(_BYTE *)(v0 + 180) = v1;
    *(_WORD *)(v0 + 181) = 0;
    *(_BYTE *)(v0 + 183) = 0;
    *(_QWORD *)(v0 + 144) = v21;
    *(_QWORD *)(v0 + 152) = 0;
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v26;
    *v26 = v0;
    v26[1] = AsyncCharacterSequence.AsyncIterator.next();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  if ((v1 & 0xF0) == 0xE0)
  {
    v21 = 2;
    goto LABEL_46;
  }
  if ((v1 & 0xF8) == 0xF0)
  {
    v21 = 3;
    goto LABEL_46;
  }
  while (1)
  {
LABEL_9:
    v11 = (uint64_t *)(*(_QWORD *)(v0 + 56) + *(int *)(*(_QWORD *)(v0 + 48) + 36));
    v12 = v11[1];
    *(_QWORD *)(v0 + 32) = *v11;
    *(_QWORD *)(v0 + 40) = v12;
    String.UnicodeScalarView.append(_:)();
    v13 = *(_QWORD *)(v0 + 32);
    v14 = *(_QWORD *)(v0 + 40);
    *v11 = v13;
    v11[1] = v14;
    swift_bridgeObjectRetain();
    v15 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v15 >= 2)
    {
      v22 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0)
        v22 = v13 & 0xFFFFFFFFFFFFLL;
      if (v22)
      {
        result = specialized Collection.first.getter(v13, v14);
        if (!v8)
        {
          __break(1u);
LABEL_39:
          *(_QWORD *)(v0 + 112) = swift_getAssociatedTypeWitness();
          *(_QWORD *)(v0 + 120) = swift_getAssociatedConformanceWitness();
          v23 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 128) = v23;
          *v23 = v0;
          v23[1] = AsyncCharacterSequence.AsyncIterator.next();
          return dispatch thunk of AsyncIteratorProtocol.next()();
        }
LABEL_7:
        v9 = result;
        v10 = v8;
        specialized RangeReplaceableCollection.removeFirst(_:)(1);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v9, v10);
      }
LABEL_51:
      __break(1u);
    }
    v16 = (char *)(*(_QWORD *)(v0 + 56) + *(int *)(v0 + 176));
    if ((v16[1] & 1) != 0)
      goto LABEL_39;
    v17 = *v16;
    *(_WORD *)v16 = 256;
    if ((v17 & 0xE0) == 0xC0)
    {
      v24 = 1;
      goto LABEL_43;
    }
    if ((v17 & 0xF0) == 0xE0)
    {
      v24 = 2;
      goto LABEL_43;
    }
    if ((v17 & 0xF8) == 0xF0)
      break;
    if ((v17 & 0x80) == 0)
    {
      *(_BYTE *)(v0 + 184) = v17;
      *(_WORD *)(v0 + 185) = 0;
      *(_BYTE *)(v0 + 187) = 0;
      v18 = static String._fromUTF8Repairing(_:)();
      if ((v19 & 0x2000000000000000) != 0)
        v20 = HIBYTE(v19) & 0xF;
      else
        v20 = v18 & 0xFFFFFFFFFFFFLL;
      if (!v20)
      {
        swift_bridgeObjectRelease();
LABEL_2:
        v2 = (uint64_t *)(*(_QWORD *)(v0 + 56) + *(int *)(*(_QWORD *)(v0 + 48) + 36));
        v4 = *v2;
        v3 = v2[1];
        swift_bridgeObjectRetain();
        v5 = String.count.getter();
        swift_bridgeObjectRelease();
        if (v5 < 1)
        {
          v9 = 0;
          v10 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v9, v10);
        }
        v6 = HIBYTE(v3) & 0xF;
        if ((v3 & 0x2000000000000000) == 0)
          v6 = v4 & 0xFFFFFFFFFFFFLL;
        if (v6)
        {
          result = specialized Collection.first.getter(v4, v3);
          if (!v8)
          {
            __break(1u);
            return result;
          }
          goto LABEL_7;
        }
        __break(1u);
        goto LABEL_51;
      }
      if ((v19 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v19 & 0x2000000000000000) != 0)
        {
          *(_QWORD *)(v0 + 16) = v18;
          *(_QWORD *)(v0 + 24) = v19 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((v18 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      swift_bridgeObjectRelease();
    }
  }
  v24 = 3;
LABEL_43:
  *(_BYTE *)(v0 + 184) = v17;
  *(_WORD *)(v0 + 185) = 0;
  *(_BYTE *)(v0 + 187) = 0;
  *(_QWORD *)(v0 + 80) = v24;
  *(_QWORD *)(v0 + 88) = 0;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v25 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v25;
  *v25 = v0;
  v25[1] = AsyncCharacterSequence.AsyncIterator.next();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_BYTE *)(v0 + 188);
  if ((*(_BYTE *)(v0 + 189) & 1) == 0)
  {
    if ((v1 & 0xC0) == 0x80)
    {
      v2 = *(_QWORD *)(v0 + 144);
      v3 = *(_QWORD *)(v0 + 152) + 1;
      *(_BYTE *)(v0 + 180 + v3) = v1;
      if (v3 != v2)
      {
        *(_QWORD *)(v0 + 152) = v3;
        v4 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 160) = v4;
        *v4 = v0;
        v4[1] = AsyncCharacterSequence.AsyncIterator.next();
        return dispatch thunk of AsyncIteratorProtocol.next()();
      }
    }
    else
    {
      v5 = (_BYTE *)(*(_QWORD *)(v0 + 56) + *(int *)(v0 + 176));
      *v5 = v1;
      v5[1] = 0;
    }
  }
  v6 = static String._fromUTF8Repairing(_:)();
  v8 = specialized Collection.first.getter(v6, v7);
  swift_bridgeObjectRelease();
  if ((v8 & 0x100000000) != 0)
    goto LABEL_38;
  v9 = 1;
  while (1)
  {
    v10 = (uint64_t *)(*(_QWORD *)(v0 + 56) + *(int *)(*(_QWORD *)(v0 + 48) + 36));
    v11 = v10[1];
    *(_QWORD *)(v0 + 32) = *v10;
    *(_QWORD *)(v0 + 40) = v11;
    String.UnicodeScalarView.append(_:)();
    v12 = *(_QWORD *)(v0 + 32);
    v13 = *(_QWORD *)(v0 + 40);
    *v10 = v12;
    v10[1] = v13;
    swift_bridgeObjectRetain();
    v14 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v14 >= 2)
    {
      v20 = HIBYTE(v13) & 0xF;
      if ((v13 & 0x2000000000000000) == 0)
        v20 = v12 & 0xFFFFFFFFFFFFLL;
      if (v20)
      {
        result = specialized Collection.first.getter(v12, v13);
        if (!v22)
        {
          __break(1u);
LABEL_32:
          *(_QWORD *)(v0 + 112) = swift_getAssociatedTypeWitness();
          *(_QWORD *)(v0 + 120) = swift_getAssociatedConformanceWitness();
          v23 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 128) = v23;
          *v23 = v0;
          v23[1] = AsyncCharacterSequence.AsyncIterator.next();
          return dispatch thunk of AsyncIteratorProtocol.next()();
        }
LABEL_43:
        v30 = result;
        v31 = v22;
        specialized RangeReplaceableCollection.removeFirst(_:)(1);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v30, v31);
      }
LABEL_47:
      __break(1u);
    }
    v15 = (char *)(*(_QWORD *)(v0 + 56) + *(int *)(v0 + 176));
    if ((v15[1] & 1) != 0)
      goto LABEL_32;
    v16 = *v15;
    *(_WORD *)v15 = 256;
    if ((v16 & 0xE0) == 0xC0)
      goto LABEL_35;
    if ((v16 & 0xF0) == 0xE0)
    {
      v9 = 2;
      goto LABEL_35;
    }
    if ((v16 & 0xF8) == 0xF0)
      break;
    if ((v16 & 0x80) == 0)
    {
      *(_BYTE *)(v0 + 184) = v16;
      *(_WORD *)(v0 + 185) = 0;
      *(_BYTE *)(v0 + 187) = 0;
      v17 = static String._fromUTF8Repairing(_:)();
      if ((v18 & 0x2000000000000000) != 0)
        v19 = HIBYTE(v18) & 0xF;
      else
        v19 = v17 & 0xFFFFFFFFFFFFLL;
      if (!v19)
      {
        swift_bridgeObjectRelease();
LABEL_38:
        v25 = (uint64_t *)(*(_QWORD *)(v0 + 56) + *(int *)(*(_QWORD *)(v0 + 48) + 36));
        v27 = *v25;
        v26 = v25[1];
        swift_bridgeObjectRetain();
        v28 = String.count.getter();
        swift_bridgeObjectRelease();
        if (v28 < 1)
        {
          v30 = 0;
          v31 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v30, v31);
        }
        v29 = HIBYTE(v26) & 0xF;
        if ((v26 & 0x2000000000000000) == 0)
          v29 = v27 & 0xFFFFFFFFFFFFLL;
        if (v29)
        {
          result = specialized Collection.first.getter(v27, v26);
          if (!v22)
          {
            __break(1u);
            return result;
          }
          goto LABEL_43;
        }
        __break(1u);
        goto LABEL_47;
      }
      if ((v18 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v18 & 0x2000000000000000) != 0)
        {
          *(_QWORD *)(v0 + 16) = v17;
          *(_QWORD *)(v0 + 24) = v18 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((v17 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      swift_bridgeObjectRelease();
    }
  }
  v9 = 3;
LABEL_35:
  *(_BYTE *)(v0 + 184) = v16;
  *(_WORD *)(v0 + 185) = 0;
  *(_BYTE *)(v0 + 187) = 0;
  *(_QWORD *)(v0 + 80) = v9;
  *(_QWORD *)(v0 + 88) = 0;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v24 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v24;
  *v24 = v0;
  v24[1] = AsyncCharacterSequence.AsyncIterator.next();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = v2;
  v3[6] = a2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v14;
  _QWORD *v15;

  v6 = *(_QWORD *)(v4 + 40);
  v5 = *(_QWORD *)(v4 + 48);
  v7 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v4 + 56) = v7;
  v8 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v4 + 64) = v8;
  v9 = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator(0, v7, v8, a4);
  *(_QWORD *)(v4 + 72) = v9;
  v10 = *(int *)(v9 + 36);
  *(_DWORD *)(v4 + 120) = v10;
  v11 = (char *)(v6 + v10);
  if ((v11[1] & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v4 + 88) = v12;
    *v12 = v4;
    v12[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  else
  {
    v14 = *v11;
    *(_WORD *)v11 = 256;
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v4 + 80) = v15;
    *v15 = v4;
    v15[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    return AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(v14, *(_QWORD *)(v4 + 72));
  }
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 104) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 104) = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t *v18;
  char v19;
  _QWORD *v20;

  if ((*(_QWORD *)(v0 + 104) & 0x100000000) != 0)
    goto LABEL_8;
  v1 = (uint64_t *)(*(_QWORD *)(v0 + 40) + *(int *)(*(_QWORD *)(v0 + 48) + 36));
  v2 = v1[1];
  *(_QWORD *)(v0 + 16) = *v1;
  *(_QWORD *)(v0 + 24) = v2;
  String.UnicodeScalarView.append(_:)();
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  *v1 = v4;
  v1[1] = v3;
  swift_bridgeObjectRetain();
  v5 = String.count.getter();
  result = swift_bridgeObjectRelease();
  if (v5 >= 2)
  {
    v7 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v7 = v4 & 0xFFFFFFFFFFFFLL;
    if (!v7)
      goto LABEL_20;
    result = specialized Collection.first.getter(v4, v3);
    if (v8)
    {
LABEL_13:
      v14 = result;
      v15 = v8;
      specialized RangeReplaceableCollection.removeFirst(_:)(1);
LABEL_17:
      v18 = *(uint64_t **)(v0 + 32);
      *v18 = v14;
      v18[1] = v15;
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    __break(1u);
LABEL_8:
    v9 = (uint64_t *)(*(_QWORD *)(v0 + 40) + *(int *)(*(_QWORD *)(v0 + 48) + 36));
    v10 = *v9;
    v11 = v9[1];
    swift_bridgeObjectRetain();
    v12 = String.count.getter();
    result = swift_bridgeObjectRelease();
    if (v12 < 1)
    {
      v14 = 0;
      v15 = 0;
      goto LABEL_17;
    }
    v13 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v13 = v10 & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      result = specialized Collection.first.getter(v10, v11);
      if (v8)
        goto LABEL_13;
      goto LABEL_21;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  v16 = (char *)(*(_QWORD *)(v0 + 40) + *(int *)(v0 + 120));
  if ((v16[1] & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v17;
    *v17 = v0;
    v17[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  else
  {
    v19 = *v16;
    *(_WORD *)v16 = 256;
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v20;
    *v20 = v0;
    v20[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    return AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(v19, *(_QWORD *)(v0 + 72));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  char *v20;
  _QWORD *v21;
  char v22;
  _QWORD *v23;

  LOBYTE(v1) = *(_BYTE *)(v0 + 124);
  if ((*(_BYTE *)(v0 + 125) & 1) != 0)
  {
    v2 = (uint64_t *)(*(_QWORD *)(v0 + 40) + *(int *)(*(_QWORD *)(v0 + 48) + 36));
    v3 = *v2;
    v4 = v2[1];
    swift_bridgeObjectRetain();
    v1 = String.count.getter();
    result = swift_bridgeObjectRelease();
    if (v1 <= 0)
    {
      v14 = 0;
      v15 = 0;
      goto LABEL_16;
    }
    v6 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v6 = v3 & 0xFFFFFFFFFFFFLL;
    if (!v6)
    {
      __break(1u);
      goto LABEL_23;
    }
    result = specialized Collection.first.getter(v3, v4);
    if (v7)
    {
LABEL_14:
      v14 = result;
      v15 = v7;
      specialized RangeReplaceableCollection.removeFirst(_:)(1);
LABEL_16:
      v16 = *(uint64_t **)(v0 + 32);
      *v16 = v14;
      v16[1] = v15;
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    __break(1u);
  }
  if ((v1 & 0x80) != 0)
  {
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v17;
    *v17 = v0;
    v17[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    v18 = *(_QWORD *)(v0 + 72);
    v19 = v1;
    return AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(v19, v18);
  }
  v8 = (uint64_t *)(*(_QWORD *)(v0 + 40) + *(int *)(*(_QWORD *)(v0 + 48) + 36));
  v9 = v8[1];
  *(_QWORD *)(v0 + 16) = *v8;
  *(_QWORD *)(v0 + 24) = v9;
  String.UnicodeScalarView.append(_:)();
  v10 = *(_QWORD *)(v0 + 16);
  v11 = *(_QWORD *)(v0 + 24);
  *v8 = v10;
  v8[1] = v11;
  swift_bridgeObjectRetain();
  v12 = String.count.getter();
  result = swift_bridgeObjectRelease();
  if (v12 <= 1)
  {
    v20 = (char *)(*(_QWORD *)(v0 + 40) + *(int *)(v0 + 120));
    if ((v20[1] & 1) != 0)
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v21 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 88) = v21;
      *v21 = v0;
      v21[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }
    v22 = *v20;
    *(_WORD *)v20 = 256;
    v23 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v23;
    *v23 = v0;
    v23[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    v18 = *(_QWORD *)(v0 + 72);
    v19 = v22;
    return AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(v19, v18);
  }
  v13 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    result = specialized Collection.first.getter(v10, v11);
    if (v7)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t AsyncCharacterSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, __n128))(v7 + 16))((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v8 = *(_QWORD *)(a1 + 24);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  *(_WORD *)(a2 + *(int *)(type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator(0, v4, v8, v9) + 36)) = 256;
  result = type metadata accessor for AsyncCharacterSequence.AsyncIterator(0, v4, v8, v10);
  v12 = (_QWORD *)(a2 + *(int *)(result + 36));
  *v12 = 0;
  v12[1] = 0xE000000000000000;
  return result;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncCharacterSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  AsyncCharacterSequence.makeAsyncIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t AsyncSequence<>.characters.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t specialized RangeReplaceableCollection.removeFirst(_:)(uint64_t result)
{
  char v1;

  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      result = String.index(_:offsetBy:limitedBy:)();
      if ((v1 & 1) == 0)
        return String.removeSubrange(_:)();
    }
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncCharacterSequence.AsyncIterator);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncCharacterSequence<A>()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t getEnumTagSinglePayload for AsyncCharacterSequence(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_181CDA110 + 4 * byte_182102D90[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AsyncCharacterSequence(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for AsyncCharacterSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncCharacterSequence);
}

uint64_t type metadata completion function for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncCharacterSequence.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + 9;
  v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || ((v6 + 9) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_WORD *)((char *)a1 + v6) = *(_WORD *)((char *)a2 + v6);
    v11 = (_QWORD *)(((unint64_t)a1 + v7) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)a2 + v7) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v12;
    v11[1] = v12[1];
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AsyncCharacterSequence.AsyncIterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  *(_WORD *)(v6 + a1) = *(_WORD *)(v6 + a2);
  v6 += 9;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  *(_WORD *)(v6 + a1) = *(_WORD *)(v6 + a2);
  v6 += 9;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  *(_WORD *)(v6 + a1) = *(_WORD *)(v6 + a2);
  *(_OWORD *)((v6 + 9 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v6 + 9 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  *(_WORD *)(v6 + a1) = *(_WORD *)(v6 + a2);
  v6 += 9;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncCharacterSequence.AsyncIterator(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((v7 + 9) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)(((a1 + v7 + 9) & 0xFFFFFFFFFFFFF8) + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void storeEnumTagSinglePayload for AsyncCharacterSequence.AsyncIterator(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if ((((_DWORD)v8 + 9) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X11 }
  }
  if ((((_DWORD)v8 + 9) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((v8 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_181CDA980()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x181CDAA60);
}

void sub_181CDA988()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x181CDA990);
  JUMPOUT(0x181CDAA60);
}

void sub_181CDA9F8()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x181CDAA60);
}

void sub_181CDAA1C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x181CDAA60);
}

void sub_181CDAA24()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x181CDAA60);
}

void sub_181CDAA2C(uint64_t a1, size_t a2, unsigned int a3)
{
  int v3;
  char *v4;
  unsigned int v5;
  uint64_t v6;

  *(_WORD *)&v4[v6] = 0;
  if (v5)
  {
    if (a3 < 0x7FFFFFFF)
      JUMPOUT(0x181CDAA00);
    if (a3 >= v5)
      JUMPOUT(0x181CDAA38);
    if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v3 = a2;
      else
        v3 = 4;
      bzero(v4, a2);
      __asm { BR              X10 }
    }
  }
  JUMPOUT(0x181CDAA60);
}

void sub_181CDAA74()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x181CDAA60);
}

void sub_181CDAA84()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x181CDAA60);
}

void sub_181CDAA8C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x181CDAA60);
}

Swift::String_optional __swiftcall ICU.Enumerator.Elements.Iterator.next()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  if (uenum_next())
  {
    v0 = String.init(cString:)();
  }
  else
  {
    v0 = 0;
    v1 = 0;
  }
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

uint64_t ICU.Enumerator.__deallocating_deinit()
{
  uenum_close();
  return swift_deallocClassInstance();
}

Swift::String __swiftcall Date.VerbatimFormatStyle.format(_:)(Foundation::Date a1)
{
  double *v1;
  __int128 *v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  Swift::String result;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[24];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _OWORD v29[2];
  char v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  v4 = *((_QWORD *)v2 + 6);
  v5 = *((_QWORD *)v2 + 7);
  v6 = v2[1];
  v19 = *v2;
  v20 = v6;
  v21 = v19;
  v7 = v2[2];
  v22 = v6;
  *(_OWORD *)v23 = v7;
  *(_QWORD *)&v23[16] = v4;
  v24 = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v21, (uint64_t)v29);
  v21 = v29[0];
  v22 = v29[1];
  v23[0] = v30;
  *(_OWORD *)&v23[8] = v31;
  LOBYTE(v24) = v32;
  v25 = v33;
  v26 = v34;
  v27 = v35;
  v28 = v36;
  v8 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v8
    || (v9 = swift_retain_n(),
        MEMORY[0x1E0C80A78](v9),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v18, (uint64_t *)v29),
        v11 = (void *)*((_QWORD *)&v29[0] + 1),
        v10 = *(id *)&v29[0],
        swift_release_n(),
        !v11))
  {
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v3);
    v13 = objc_msgSend(v12, sel_description);

    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v11 = v14;

  }
  v15 = (uint64_t)v10;
  v16 = v11;
  result._object = v16;
  result._countAndFlagsBits = v15;
  return result;
}

uint64_t Date.VerbatimFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v4 = *(_QWORD *)(v2 + 48);
  v3 = *(_QWORD *)(v2 + 56);
  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = *a1;
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;

  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 Date.VerbatimFormatStyle.timeZone.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*Date.VerbatimFormatStyle.timeZone.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.VerbatimFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

__n128 Date.VerbatimFormatStyle.calendar.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_unknownObjectRelease();
  result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*Date.VerbatimFormatStyle.calendar.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.VerbatimFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.locale.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*Date.VerbatimFormatStyle.locale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 Date.VerbatimFormatStyle.init(format:locale:timeZone:calendar:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X1>, _OWORD *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;

  v5 = *a1;
  v6 = a1[1];
  v7 = *a4;
  *(_OWORD *)a5 = *a3;
  *(_OWORD *)(a5 + 16) = v7;
  result = *a2;
  *(__n128 *)(a5 + 32) = *a2;
  *(_QWORD *)(a5 + 48) = v5;
  *(_QWORD *)(a5 + 56) = v6;
  return result;
}

uint64_t Date.VerbatimFormatStyle.attributed.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v6 = *(_OWORD *)(v1 + 16);
  v7[0] = *(_OWORD *)v1;
  v7[1] = v6;
  v7[2] = *(_OWORD *)(v1 + 32);
  v8 = v3;
  v9 = v4;
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)v7);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, a1);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.VerbatimFormatStyle.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181CDAF7C + 4 * byte_182102EE0[*v0]))(0x656E6F5A656D6974, 0xE800000000000000);
}

uint64_t sub_181CDAF7C()
{
  return 0x7261646E656C6163;
}

uint64_t sub_181CDAF90()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_181CDAFA4()
{
  return 0x615074616D726F66;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.VerbatimFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Date.VerbatimFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.VerbatimFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.VerbatimFormatStyle.CodingKeys()
{
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.VerbatimFormatStyle.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  Swift::UInt8 v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  Swift::UInt v43;
  Swift::UInt v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  Swift::UInt8 v47;
  _BYTE v48[144];
  _BYTE v49[8];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  _QWORD v67[18];
  _BYTE v68[144];
  _BYTE v69[152];

  v3 = v1[1];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  ObjectType = swift_getObjectType();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 112);
  swift_unknownObjectRetain();
  v8(a1, ObjectType, v3);
  swift_unknownObjectRelease();
  v9 = swift_getObjectType();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 120);
  swift_unknownObjectRetain();
  v10(a1, v9, v4);
  swift_unknownObjectRelease();
  if (!v5)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  v11 = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain_n();
  if ((v12(v11, v6) & 1) != 0)
  {
    v13 = 1;
LABEL_7:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(v11, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v14(v67, v11, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v68);
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v69) == 1)
  {
    v13 = 0;
    goto LABEL_7;
  }
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v49);
  Hasher._combine(_:)(1u);
  if (v49[0] == 2)
  {
    v16 = 0;
  }
  else
  {
    v16 = v49[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v16);
  v17 = v50;
  if (!v50)
  {
    Hasher._combine(_:)(0);
    v22 = v49;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v17 + 16));
  v18 = *(_QWORD *)(v17 + 16);
  if (!v18)
  {
    outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v48);
    v22 = v48;
LABEL_23:
    outlined retain of LocalePreferences(v22);
    if (!v51)
      goto LABEL_17;
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v68, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v19 = v17 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v19 += 16;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  if (!v51)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v52)
      goto LABEL_18;
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v20 = v53;
    if (!v53)
      goto LABEL_19;
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v20);
    swift_bridgeObjectRelease();
    v21 = v54;
    if (!v54)
      goto LABEL_20;
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v20 = v53;
  if (v53)
    goto LABEL_26;
LABEL_19:
  Hasher._combine(_:)(0);
  v21 = v54;
  if (!v54)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v21);
  swift_bridgeObjectRelease();
LABEL_28:
  v23 = v55;
  v24 = v56;
  v26 = v57;
  v25 = v58;
  v27 = v59;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v28 = v24;
    v29 = v26;
    v30 = v25;
    v31 = v27;
    v32 = v23;
    _CFObject.hash(into:)();
    if (v24)
      goto LABEL_30;
  }
  else
  {
    Hasher._combine(_:)(0);
    v37 = v27;
    v38 = v24;
    v39 = v26;
    v40 = v25;
    if (v24)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v33 = v24;
      _CFObject.hash(into:)();

      if (v26)
        goto LABEL_31;
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v26)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v34 = v26;
    _CFObject.hash(into:)();

    if (v25)
      goto LABEL_32;
LABEL_37:
    Hasher._combine(_:)(0);
    if (v27)
      goto LABEL_33;
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v25)
    goto LABEL_37;
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v35 = v25;
  _CFObject.hash(into:)();

  if (v27)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v36 = v27;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  v36 = 0;
LABEL_39:

  v41 = v60;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v41);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v42 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    if (v62)
      goto LABEL_44;
LABEL_46:
    Hasher._combine(_:)(0);
    goto LABEL_47;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v42);
  swift_bridgeObjectRelease();
  if (!v62)
    goto LABEL_46;
LABEL_44:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_47:
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v43 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v44 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v44);
  }
  if (v65 == 2)
  {
    v45 = 0;
  }
  else
  {
    v45 = v65 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v45);
  if (v66 == 2)
  {
    v46 = 0;
  }
  else
  {
    v47 = v66 & 1;
    Hasher._combine(_:)(1u);
    v46 = v47;
  }
  Hasher._combine(_:)(v46);
  outlined retain of LocalePreferences?((uint64_t)v68, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v68, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t Date.VerbatimFormatStyle.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.VerbatimFormatStyle.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v3[1];
  v9 = *((_QWORD *)v3 + 4);
  v14 = *((_QWORD *)v3 + 5);
  v15 = *((_QWORD *)v3 + 6);
  v16 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = *v3;
  v19 = 0;
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10 = v14;
    v11 = v16;
    v18 = v17;
    v19 = 1;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v18 = v11;
    *((_QWORD *)&v18 + 1) = v10;
    v19 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Date.VerbatimFormatStyle.hashValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(_BYTE *, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(_BYTE *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  Swift::UInt8 v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  _BYTE v46[144];
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  _QWORD v65[18];
  _BYTE v66[144];
  _BYTE v67[144];
  _BYTE v68[80];

  v1 = v0[1];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  v6 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112);
  swift_unknownObjectRetain();
  v6(v68, ObjectType, v1);
  swift_unknownObjectRelease();
  v7 = swift_getObjectType();
  v8 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 120);
  swift_unknownObjectRetain();
  v8(v68, v7, v2);
  swift_unknownObjectRelease();
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  v9 = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if ((v10(v9, v4) & 1) != 0)
  {
    v11 = 1;
LABEL_7:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v9, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v12(v65, v9, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66);
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v67) == 1)
  {
    v11 = 0;
    goto LABEL_7;
  }
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v47);
  Hasher._combine(_:)(1u);
  if (v47[0] == 2)
  {
    v14 = 0;
  }
  else
  {
    v14 = v47[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  v15 = v48;
  if (!v48)
  {
    Hasher._combine(_:)(0);
    v20 = v47;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v15 + 16));
  v16 = *(_QWORD *)(v15 + 16);
  if (!v16)
  {
    outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v46);
    v20 = v46;
LABEL_23:
    outlined retain of LocalePreferences(v20);
    if (!v49)
      goto LABEL_17;
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v50)
      goto LABEL_18;
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v50)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v18 = v51;
    if (!v51)
      goto LABEL_19;
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v18);
    swift_bridgeObjectRelease();
    v19 = v52;
    if (!v52)
      goto LABEL_20;
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v18 = v51;
  if (v51)
    goto LABEL_26;
LABEL_19:
  Hasher._combine(_:)(0);
  v19 = v52;
  if (!v52)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v19);
  swift_bridgeObjectRelease();
LABEL_28:
  v21 = v53;
  v22 = v54;
  v24 = v55;
  v23 = v56;
  v25 = v57;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v26 = v22;
    v27 = v24;
    v28 = v23;
    v29 = v25;
    v30 = v21;
    _CFObject.hash(into:)();
    if (v22)
      goto LABEL_30;
  }
  else
  {
    Hasher._combine(_:)(0);
    v35 = v25;
    v36 = v22;
    v37 = v24;
    v38 = v23;
    if (v22)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v31 = v22;
      _CFObject.hash(into:)();

      if (v24)
        goto LABEL_31;
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v24)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v32 = v24;
    _CFObject.hash(into:)();

    if (v23)
      goto LABEL_32;
LABEL_37:
    Hasher._combine(_:)(0);
    if (v25)
      goto LABEL_33;
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v23)
    goto LABEL_37;
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v33 = v23;
  _CFObject.hash(into:)();

  if (v25)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v34 = v25;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  v34 = 0;
LABEL_39:

  v39 = v58;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v39);
    swift_bridgeObjectRelease();
    v40 = v59;
    if (v59)
      goto LABEL_41;
LABEL_44:
    Hasher._combine(_:)(0);
    if (v60)
      goto LABEL_42;
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(0);
  v40 = v59;
  if (!v59)
    goto LABEL_44;
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v40);
  swift_bridgeObjectRelease();
  if (!v60)
    goto LABEL_45;
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v42 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }
  if (v63 == 2)
  {
    v43 = 0;
  }
  else
  {
    v43 = v63 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v43);
  if (v64 == 2)
  {
    v44 = 0;
  }
  else
  {
    v45 = v64 & 1;
    Hasher._combine(_:)(1u);
    v44 = v45;
  }
  Hasher._combine(_:)(v44);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t Date.VerbatimFormatStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.VerbatimFormatStyle.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v26 = 0;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v24 = v25;
    v26 = 1;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    swift_unknownObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v23 = v25;
    v26 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    v10 = v23;
    swift_unknownObjectRetain();
    v22 = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v21 = v10;
    v20 = *((_QWORD *)&v25 + 1);
    v11 = v25;
    LOBYTE(v25) = 3;
    swift_unknownObjectRetain();
    v12 = KeyedDecodingContainer.decode(_:forKey:)();
    v14 = v13;
    v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16 = v12;
    v15(v8, v5);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v17 = v23;
    *(_OWORD *)a2 = v24;
    *(_OWORD *)(a2 + 16) = v17;
    v18 = v20;
    *(_QWORD *)(a2 + 32) = v11;
    *(_QWORD *)(a2 + 40) = v18;
    *(_QWORD *)(a2 + 48) = v16;
    *(_QWORD *)(a2 + 56) = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.VerbatimFormatStyle@<X0>(Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  uint64_t result;
  Swift::String v4;

  v4 = Date.VerbatimFormatStyle.format(_:)(a2);
  result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.VerbatimFormatStyle@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v4 = *(_QWORD *)(v2 + 48);
  v3 = *(_QWORD *)(v2 + 56);
  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = *a1;
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.VerbatimFormatStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.VerbatimFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.VerbatimFormatStyle(_QWORD *a1)
{
  return Date.VerbatimFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.VerbatimFormatStyle()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(_BYTE *, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(_BYTE *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  Swift::UInt8 v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt v40;
  Swift::UInt v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  _QWORD v63[18];
  _BYTE v64[144];
  _BYTE v65[144];
  _BYTE v66[80];

  v1 = v0[1];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  v6 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112);
  swift_unknownObjectRetain();
  v6(v66, ObjectType, v1);
  swift_unknownObjectRelease();
  v7 = swift_getObjectType();
  v8 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 120);
  swift_unknownObjectRetain();
  v8(v66, v7, v2);
  swift_unknownObjectRelease();
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  v9 = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if ((v10(v9, v4) & 1) != 0)
  {
    v11 = 1;
LABEL_7:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v9, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v12(v63, v9, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v65);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v65) == 1)
  {
    v11 = 0;
    goto LABEL_7;
  }
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)&v45);
  Hasher._combine(_:)(1u);
  if (v45 == 2)
  {
    v14 = 0;
  }
  else
  {
    v14 = v45 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  v15 = v46;
  if (!v46)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v45);
    if (!v47)
      goto LABEL_17;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v15 + 16));
  v16 = *(_QWORD *)(v15 + 16);
  if (!v16)
    goto LABEL_22;
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v48)
      goto LABEL_18;
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v18 = v49;
    if (!v49)
      goto LABEL_19;
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v66, v18);
    swift_bridgeObjectRelease();
    v19 = v50;
    if (!v50)
      goto LABEL_20;
    goto LABEL_26;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v18 = v49;
  if (v49)
    goto LABEL_25;
LABEL_19:
  Hasher._combine(_:)(0);
  v19 = v50;
  if (!v50)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v66, v19);
  swift_bridgeObjectRelease();
LABEL_27:
  v20 = v51;
  v21 = v52;
  v23 = v53;
  v22 = v54;
  v24 = v55;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v25 = v21;
    v26 = v23;
    v27 = v22;
    v28 = v24;
    v29 = v20;
    _CFObject.hash(into:)();
    if (v21)
      goto LABEL_29;
  }
  else
  {
    Hasher._combine(_:)(0);
    v34 = v24;
    v35 = v21;
    v36 = v23;
    v37 = v22;
    if (v21)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v30 = v21;
      _CFObject.hash(into:)();

      if (v23)
        goto LABEL_30;
      goto LABEL_35;
    }
  }
  Hasher._combine(_:)(0);
  if (v23)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v31 = v23;
    _CFObject.hash(into:)();

    if (v22)
      goto LABEL_31;
LABEL_36:
    Hasher._combine(_:)(0);
    if (v24)
      goto LABEL_32;
    goto LABEL_37;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  if (!v22)
    goto LABEL_36;
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v32 = v22;
  _CFObject.hash(into:)();

  if (v24)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v33 = v24;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  v33 = 0;
LABEL_38:

  v38 = v56;
  if (v38)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v66, v38);
    swift_bridgeObjectRelease();
    v39 = v57;
    if (v57)
      goto LABEL_40;
LABEL_43:
    Hasher._combine(_:)(0);
    if (v58)
      goto LABEL_41;
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(0);
  v39 = v57;
  if (!v57)
    goto LABEL_43;
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v66, v39);
  swift_bridgeObjectRelease();
  if (!v58)
    goto LABEL_44;
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v41 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v61 == 2)
  {
    v42 = 0;
  }
  else
  {
    v42 = v61 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v42);
  if (v62 == 2)
  {
    v43 = 0;
  }
  else
  {
    v44 = v62 & 1;
    Hasher._combine(_:)(1u);
    v43 = v44;
  }
  Hasher._combine(_:)(v43);
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t static FormatStyle<>.verbatim(_:locale:timeZone:calendar:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v5 = *a1;
  v6 = a1[1];
  v8 = *a4;
  *(_OWORD *)a5 = *a3;
  *(_OWORD *)(a5 + 16) = v8;
  *(_OWORD *)(a5 + 32) = *a2;
  *(_QWORD *)(a5 + 48) = v5;
  *(_QWORD *)(a5 + 56) = v6;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v6;

  v2 = *((_QWORD *)v1 + 6);
  v3 = *((_QWORD *)v1 + 7);
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xC1CD27E440000000;
  v4 = *v1;
  v6 = v1[1];
  *(_OWORD *)(a1 + 16) = v1[2];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 72) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance Date.VerbatimFormatStyle@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v6;

  v2 = *((_QWORD *)v1 + 6);
  v3 = *((_QWORD *)v1 + 7);
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xC1CD27E440000000;
  v4 = *v1;
  v6 = v1[1];
  *(_OWORD *)(a1 + 16) = v1[2];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 72) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.Attributed.subscript.getter()
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t key path getter for Date.VerbatimFormatStyle.Attributed.subscript<A>(dynamicMember:) : <A>Date.VerbatimFormatStyle.AttributedA(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  Date.VerbatimFormatStyle.Attributed.subscript.getter(v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t Date.VerbatimFormatStyle.Attributed.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEC880] + v3 + 8) - 8) + 8))(a1);
}

void (*Date.VerbatimFormatStyle.Attributed.subscript.modify(_QWORD *a1, _QWORD *a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v5 = malloc(0x78uLL);
  *a1 = v5;
  v5[8] = a2;
  v5[9] = v2;
  v6 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a2 + 8);
  v5[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[11] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[12] = malloc(v8);
  v5[13] = malloc(v8);
  v5[14] = malloc(v8);
  v9 = *(_QWORD *)(v2 + 48);
  v10 = *(_QWORD *)(v2 + 56);
  v12 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)v2;
  *((_OWORD *)v5 + 1) = v12;
  *((_OWORD *)v5 + 2) = *(_OWORD *)(v2 + 32);
  v5[6] = v9;
  v5[7] = v10;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return Date.VerbatimFormatStyle.Attributed.subscript.modify;
}

void Date.VerbatimFormatStyle.Attributed.subscript.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 104), v3[14], v3[10]);
  v5 = (void *)v3[13];
  v6 = (void *)v3[14];
  v8 = v3[11];
  v7 = (void *)v3[12];
  v9 = v3[10];
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }
  else
  {
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t Date.VerbatimFormatStyle.Attributed.format(_:)@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Foundation::Date v8;
  uint64_t countAndFlagsBits;
  void *object;
  _QWORD *rawValue;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t *v41;
  os_unfair_lock_s *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t result;
  id v48;
  id v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  char *v60;
  uint64_t v61;
  uint64_t v62[2];
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[56];
  _BYTE v66[24];
  char v67;
  uint64_t v68;
  __int128 v69[3];
  char v70[48];
  __int128 v71[2];
  char v72;
  _BYTE v73[24];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[4];
  Swift::tuple_String_OpaquePointer_optional v92;

  v4 = *a1;
  v5 = *(_QWORD *)(v2 + 48);
  v6 = *(_QWORD *)(v2 + 56);
  v59 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)v65 = *(_OWORD *)v2;
  *(_OWORD *)&v65[16] = v59;
  *(_OWORD *)&v65[32] = *(_OWORD *)(v2 + 32);
  *(_QWORD *)&v65[48] = v5;
  *(_QWORD *)v66 = v6;
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain_n();
  ICUDateFormatter.DateFormatInfo.init(_:)(v65, (uint64_t)v71);
  *(_OWORD *)v65 = v71[0];
  *(_OWORD *)&v65[16] = v71[1];
  v65[32] = v72;
  *(_OWORD *)&v65[40] = *(_OWORD *)v73;
  v66[0] = v73[16];
  *(_OWORD *)&v66[8] = v74;
  v67 = v75;
  v68 = *((_QWORD *)&v75 + 1);
  v7 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)v65);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = a2;
  if (!v7)
    goto LABEL_20;
  *(double *)v71 = v4;
  v92 = ICUDateFormatter.attributedFormat(_:)(v8);
  if (!v92.value._0._object)
  {
    swift_release();
LABEL_20:
    v48 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D68]), sel_initWithTimeIntervalSinceReferenceDate_, v4);
    v49 = objc_msgSend(v48, sel_description);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    BigString.init(_:)();
    result = AttributedString.init(_:attributes:)(v71, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v65);
    v12 = *(_QWORD *)v65;
    goto LABEL_21;
  }
  countAndFlagsBits = v92.value._0._countAndFlagsBits;
  object = v92.value._0._object;
  rawValue = v92.value._1._rawValue;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v69, MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9E8], (uint64_t *)v71);
  v12 = *(_QWORD *)&v71[0];
  v13 = rawValue[2];
  v54 = object;
  if (!v13)
  {
LABEL_18:
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
LABEL_21:
    *v50 = v12;
    return result;
  }
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type String and conformance String();
  v14 = 0;
  v15 = (char *)(rawValue + 6);
  v53 = countAndFlagsBits;
  while (1)
  {
    v16 = *((unsigned int *)v15 - 4);
    v60 = v15;
    *(_QWORD *)v65 = countAndFlagsBits;
    *(_QWORD *)&v65[8] = v54;
    swift_bridgeObjectRetain();
    v17 = String.Index.init<A>(utf16Offset:in:)();
    *(_QWORD *)v65 = countAndFlagsBits;
    *(_QWORD *)&v65[8] = v54;
    swift_bridgeObjectRetain();
    v18 = String.Index.init<A>(utf16Offset:in:)();
    if (v18 >> 14 < v17 >> 14)
      break;
    v19 = v18;
    v57 = v14;
    v58 = v13;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v17, v19, (_OWORD *)v12, (unint64_t *)v65);
    v20 = *(_QWORD *)&v65[24];
    if (*(_QWORD *)&v65[24] == 2)
      goto LABEL_24;
    v21 = *(_QWORD *)v65;
    v55 = *(_QWORD *)&v65[16];
    v56 = *(_QWORD *)&v65[8];
    v23 = *(_QWORD *)&v65[40];
    v22 = *(_QWORD *)&v65[32];
    v25 = *(_QWORD *)&v65[48];
    v24 = *(_QWORD *)v66;
    v26 = MEMORY[0x1E0DEE9E0];
    v63 = MEMORY[0x1E0DEE9E0];
    v27 = MEMORY[0x1E0DEE9E8];
    v64 = MEMORY[0x1E0DEE9E8];
    AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(udateFormatField:)(v16, v65);
    if (v65[0] == 17)
    {
      v28 = v27;
      v29 = v26;
    }
    else
    {
      specialized AttributeContainer.subscript.setter(v65[0]);
      v29 = v63;
      v28 = v64;
    }
    v62[0] = v29;
    v62[1] = v28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v30 = *(_OWORD *)(v12 + 32);
      v91[0] = *(_OWORD *)(v12 + 16);
      v91[1] = v30;
      v91[2] = *(_OWORD *)(v12 + 48);
      v31 = *(_QWORD *)(v12 + 64);
      v32 = *(_QWORD *)(v12 + 72);
      v51 = v21;
      v52 = v24;
      v33 = v22;
      v34 = v25;
      v35 = *(_QWORD *)(v12 + 80);
      v36 = *(_QWORD *)(v12 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v91);
      swift_unknownObjectRetain();
      v37 = v35;
      v25 = v34;
      v22 = v33;
      v38 = v36;
      v21 = v51;
      v24 = v52;
      v39 = AttributedString.Guts.init(string:runs:)(v91, v31, v32, v37, v38);
      swift_release();
      v12 = v39;
    }
    v40 = *(_OWORD *)(v12 + 32);
    v88 = *(_OWORD *)(v12 + 16);
    v89 = v40;
    v90 = *(_OWORD *)(v12 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    v80 = v21;
    v81 = v56;
    v82 = v55;
    v83 = v20;
    v84 = v22;
    v85 = v23;
    v86 = v25;
    v87 = v24;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v70);
    outlined release of Locale((uint64_t)v71);
    *(_OWORD *)&v65[8] = *(_OWORD *)&v73[8];
    *(_OWORD *)&v65[24] = v74;
    *(_OWORD *)&v65[40] = v75;
    *(_OWORD *)v66 = v76;
    *(_QWORD *)v65 = v12;
    if (one-time initialization token for currentIdentity != -1)
      swift_once();
    v41 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v42 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v42);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v41, &v61);
    v14 = v57;
    os_unfair_lock_unlock(v42);
    swift_release();
    v43 = v61;
    *(_QWORD *)&v66[16] = v61;
    BigString.init()();
    v61 = 0;
    MEMORY[0x186DA9E90](&v61, 8);
    v44 = v61;
    type metadata accessor for AttributedString.Guts();
    v45 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0)
      goto LABEL_23;
    v46 = v78;
    *(_OWORD *)(v45 + 16) = v77;
    *(_OWORD *)(v45 + 32) = v46;
    *(_OWORD *)(v45 + 48) = v79;
    *(_QWORD *)(v45 + 64) = 0;
    *(_QWORD *)(v45 + 72) = 0;
    *(_QWORD *)(v45 + 80) = 0;
    *(_QWORD *)(v45 + 88) = v44;
    swift_release();
    LOBYTE(v61) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)(v62, (char *)&v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)&v66[16] != v43)
      goto LABEL_25;
    v15 = v60 + 24;
    v12 = *(_QWORD *)v65;
    swift_release();
    v13 = v58 - 1;
    countAndFlagsBits = v53;
    if (v58 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Date.VerbatimFormatStyle.Attributed.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v4 = *(_QWORD *)(v2 + 48);
  v3 = *(_QWORD *)(v2 + 56);
  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = *a1;
  *(_QWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  Swift::UInt8 v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  Swift::UInt v45;
  Swift::UInt v46;
  Swift::UInt8 v47;
  Swift::UInt8 v48;
  Swift::UInt8 v49;
  void *v50;
  void *v51;
  void *v52;
  _BYTE v53[144];
  _BYTE v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  _QWORD v72[18];
  _BYTE v73[144];
  _BYTE v74[152];

  v3 = v1[1];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  ObjectType = swift_getObjectType();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v8(a1, ObjectType, v3);
  swift_unknownObjectRelease();
  v9 = swift_getObjectType();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 120);
  swift_unknownObjectRetain();
  v10(a1, v9, v4);
  swift_unknownObjectRelease();
  if (!v5)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  v11 = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain_n();
  if ((v12(v11, v6) & 1) != 0)
  {
    v13 = 1;
LABEL_7:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(v11, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v14 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v14(v72, v11, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73);
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    v13 = 0;
    goto LABEL_7;
  }
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v54);
  Hasher._combine(_:)(1u);
  if (v54[0] == 2)
  {
    v16 = 0;
  }
  else
  {
    v16 = v54[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v16);
  v17 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
    v22 = v54;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v17 + 16));
  v18 = *(_QWORD *)(v17 + 16);
  if (!v18)
  {
    outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v53);
    v22 = v53;
LABEL_23:
    outlined retain of LocalePreferences(v22);
    if (!v56)
      goto LABEL_17;
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v19 = v17 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v19 += 16;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v57)
      goto LABEL_18;
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v20 = v58;
    if (!v58)
      goto LABEL_19;
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v20);
    swift_bridgeObjectRelease();
    v21 = v59;
    if (!v59)
      goto LABEL_20;
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v20 = v58;
  if (v58)
    goto LABEL_26;
LABEL_19:
  Hasher._combine(_:)(0);
  v21 = v59;
  if (!v59)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v21);
  swift_bridgeObjectRelease();
LABEL_28:
  v23 = v60;
  v24 = v61;
  v26 = v62;
  v25 = v63;
  v27 = v64;
  v50 = v62;
  v51 = v64;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v28 = v24;
    v29 = v26;
    v30 = v25;
    v31 = v25;
    v32 = v27;
    v33 = v23;
    _CFObject.hash(into:)();
    v52 = v23;
    if (v24)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      v34 = v24;
      _CFObject.hash(into:)();

      goto LABEL_33;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    v35 = v27;
    v36 = v24;
    v37 = v26;
    v30 = v25;
    v38 = v25;
    v52 = 0;
    if (v24)
      goto LABEL_30;
  }
  Hasher._combine(_:)(0);
LABEL_33:
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v39 = v50;
    _CFObject.hash(into:)();

    if (v30)
      goto LABEL_35;
LABEL_38:
    Hasher._combine(_:)(0);
    v41 = v51;
    if (v51)
      goto LABEL_36;
    goto LABEL_39;
  }
  Hasher._combine(_:)(0);
  if (!v30)
    goto LABEL_38;
LABEL_35:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v40 = v30;
  _CFObject.hash(into:)();

  v41 = v51;
  if (v51)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v42 = v41;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
  v42 = 0;
LABEL_40:

  v43 = v65;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v43);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v44 = v66;
  if (!v66)
  {
    Hasher._combine(_:)(0);
    if (v67)
      goto LABEL_45;
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v44);
  swift_bridgeObjectRelease();
  if (!v67)
    goto LABEL_47;
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v45 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v45);
  }
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v46 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v46);
  }
  if (v70 == 2)
  {
    v47 = 0;
  }
  else
  {
    v47 = v70 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v47);
  if (v71 == 2)
  {
    v48 = 0;
  }
  else
  {
    v49 = v71 & 1;
    Hasher._combine(_:)(1u);
    v48 = v49;
  }
  Hasher._combine(_:)(v48);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t static Date.VerbatimFormatStyle.Attributed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v9[3];
  uint64_t v10;
  uint64_t v11;
  __int128 v12[3];
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  v12[2] = *(_OWORD *)(a1 + 32);
  v13 = v2;
  v14 = v3;
  v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a2 + 32);
  v10 = v4;
  v11 = v5;
  return specialized static Date.VerbatimFormatStyle.== infix(_:_:)(v12, v9) & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.VerbatimFormatStyle.Attributed.CodingKeys()
{
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.VerbatimFormatStyle.Attributed.CodingKeys()
{
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Date.VerbatimFormatStyle.Attributed.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _OWORD v12[4];
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.VerbatimFormatStyle.Attributed.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = *(_OWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 48);
  v8 = *(_QWORD *)(v2 + 56);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = *(_OWORD *)(v2 + 16);
  v12[1] = *(_OWORD *)v2;
  v12[2] = v10;
  v12[3] = v12[0];
  v13 = v9;
  v14 = v8;
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Date.VerbatimFormatStyle.Attributed.hashValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(_BYTE *, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(_BYTE *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  Swift::UInt8 v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  Swift::UInt v43;
  Swift::UInt v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  Swift::UInt8 v47;
  void *v48;
  void *v49;
  void *v50;
  _BYTE v51[144];
  _BYTE v52[8];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  _QWORD v70[18];
  _BYTE v71[144];
  _BYTE v72[144];
  _BYTE v73[80];

  v1 = v0[1];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  v6 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v6(v73, ObjectType, v1);
  swift_unknownObjectRelease();
  v7 = swift_getObjectType();
  v8 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 120);
  swift_unknownObjectRetain();
  v8(v73, v7, v2);
  swift_unknownObjectRelease();
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  v9 = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if ((v10(v9, v4) & 1) != 0)
  {
    v11 = 1;
LABEL_7:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v9, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v12(v70, v9, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)v71);
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v72) == 1)
  {
    v11 = 0;
    goto LABEL_7;
  }
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v52);
  Hasher._combine(_:)(1u);
  if (v52[0] == 2)
  {
    v14 = 0;
  }
  else
  {
    v14 = v52[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  v15 = v53;
  if (!v53)
  {
    Hasher._combine(_:)(0);
    v20 = v52;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v15 + 16));
  v16 = *(_QWORD *)(v15 + 16);
  if (!v16)
  {
    outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v51);
    v20 = v51;
LABEL_23:
    outlined retain of LocalePreferences(v20);
    if (!v54)
      goto LABEL_17;
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v71, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v55)
      goto LABEL_18;
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v55)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v18 = v56;
    if (!v56)
      goto LABEL_19;
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v73, v18);
    swift_bridgeObjectRelease();
    v19 = v57;
    if (!v57)
      goto LABEL_20;
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v18 = v56;
  if (v56)
    goto LABEL_26;
LABEL_19:
  Hasher._combine(_:)(0);
  v19 = v57;
  if (!v57)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v73, v19);
  swift_bridgeObjectRelease();
LABEL_28:
  v21 = v58;
  v22 = v59;
  v23 = v60;
  v24 = v61;
  v25 = v62;
  v48 = v60;
  v49 = v62;
  if (v58)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v26 = v22;
    v27 = v23;
    v28 = v24;
    v29 = v24;
    v30 = v25;
    v31 = v21;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v32 = v25;
    v33 = v22;
    v34 = v23;
    v28 = v24;
    v35 = v24;
  }
  v50 = v21;
  if (v22)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v36 = v22;
    _CFObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (v48)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v37 = v48;
    _CFObject.hash(into:)();

    if (v28)
      goto LABEL_36;
LABEL_39:
    Hasher._combine(_:)(0);
    v39 = v49;
    if (v49)
      goto LABEL_37;
    goto LABEL_40;
  }
  Hasher._combine(_:)(0);
  if (!v28)
    goto LABEL_39;
LABEL_36:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v38 = v28;
  _CFObject.hash(into:)();

  v39 = v49;
  if (v49)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v40 = v39;
    _CFObject.hash(into:)();

    goto LABEL_41;
  }
LABEL_40:
  Hasher._combine(_:)(0);
  v40 = 0;
LABEL_41:

  v41 = v63;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v73, v41);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v42 = v64;
  if (!v64)
  {
    Hasher._combine(_:)(0);
    if (v65)
      goto LABEL_46;
LABEL_48:
    Hasher._combine(_:)(0);
    goto LABEL_49;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v73, v42);
  swift_bridgeObjectRelease();
  if (!v65)
    goto LABEL_48;
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_49:
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v43 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v44 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v44);
  }
  if (v68 == 2)
  {
    v45 = 0;
  }
  else
  {
    v45 = v68 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v45);
  if (v69 == 2)
  {
    v46 = 0;
  }
  else
  {
    v47 = v69 & 1;
    Hasher._combine(_:)(1u);
    v46 = v47;
  }
  Hasher._combine(_:)(v46);
  outlined retain of LocalePreferences?((uint64_t)v71, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v71, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t Date.VerbatimFormatStyle.Attributed.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.VerbatimFormatStyle.Attributed.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v15;
    v10 = v16;
    v12 = v14[1];
    v11 = v14[2];
    *(_OWORD *)a2 = v14[0];
    *(_OWORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(_QWORD *)(a2 + 48) = v9;
    *(_QWORD *)(a2 + 56) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.VerbatimFormatStyle.Attributed@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.VerbatimFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.VerbatimFormatStyle.Attributed(_QWORD *a1)
{
  return Date.VerbatimFormatStyle.Attributed.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.VerbatimFormatStyle.Attributed()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(_BYTE *, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(_BYTE *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  Swift::UInt8 v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  _QWORD v68[18];
  _BYTE v69[144];
  _BYTE v70[144];
  _BYTE v71[80];

  v1 = v0[1];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  Hasher.init(_seed:)();
  ObjectType = swift_getObjectType();
  v6 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v6(v71, ObjectType, v1);
  swift_unknownObjectRelease();
  v7 = swift_getObjectType();
  v8 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 120);
  swift_unknownObjectRetain();
  v8(v71, v7, v2);
  swift_unknownObjectRelease();
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  v9 = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if ((v10(v9, v4) & 1) != 0)
  {
    v11 = 1;
LABEL_7:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v9, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v12(v68, v9, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v70);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v70) == 1)
  {
    v11 = 0;
    goto LABEL_7;
  }
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)&v50);
  Hasher._combine(_:)(1u);
  if (v50 == 2)
  {
    v14 = 0;
  }
  else
  {
    v14 = v50 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  v15 = v51;
  if (!v51)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v50);
    if (!v52)
      goto LABEL_17;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v15 + 16));
  v16 = *(_QWORD *)(v15 + 16);
  if (!v16)
    goto LABEL_22;
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v53)
      goto LABEL_18;
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v53)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    v18 = v54;
    if (!v54)
      goto LABEL_19;
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v18);
    swift_bridgeObjectRelease();
    v19 = v55;
    if (!v55)
      goto LABEL_20;
    goto LABEL_26;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v18 = v54;
  if (v54)
    goto LABEL_25;
LABEL_19:
  Hasher._combine(_:)(0);
  v19 = v55;
  if (!v55)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v19);
  swift_bridgeObjectRelease();
LABEL_27:
  v20 = v56;
  v21 = v57;
  v22 = v58;
  v23 = v59;
  v24 = v60;
  v47 = v58;
  v48 = v60;
  if (v56)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v25 = v21;
    v26 = v22;
    v27 = v23;
    v28 = v23;
    v29 = v24;
    v30 = v20;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    v31 = v24;
    v32 = v21;
    v33 = v22;
    v27 = v23;
    v34 = v23;
  }
  v49 = v20;
  if (v21)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v35 = v21;
    _CFObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (v47)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v36 = v47;
    _CFObject.hash(into:)();

    if (v27)
      goto LABEL_35;
LABEL_38:
    Hasher._combine(_:)(0);
    v38 = v48;
    if (v48)
      goto LABEL_36;
    goto LABEL_39;
  }
  Hasher._combine(_:)(0);
  if (!v27)
    goto LABEL_38;
LABEL_35:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v37 = v27;
  _CFObject.hash(into:)();

  v38 = v48;
  if (v48)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v39 = v38;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
  v39 = 0;
LABEL_40:

  v40 = v61;
  if (v40)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v40);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v41 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    if (v63)
      goto LABEL_45;
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v41);
  swift_bridgeObjectRelease();
  if (!v63)
    goto LABEL_47;
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v42 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }
  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v43 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  if (v66 == 2)
  {
    v44 = 0;
  }
  else
  {
    v44 = v66 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v44);
  if (v67 == 2)
  {
    v45 = 0;
  }
  else
  {
    v46 = v67 & 1;
    Hasher._combine(_:)(1u);
    v45 = v46;
  }
  Hasher._combine(_:)(v45);
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.VerbatimFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v9[3];
  uint64_t v10;
  uint64_t v11;
  __int128 v12[3];
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  v12[2] = *(_OWORD *)(a1 + 32);
  v13 = v2;
  v14 = v3;
  v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a2 + 32);
  v10 = v4;
  v11 = v5;
  return specialized static Date.VerbatimFormatStyle.== infix(_:_:)(v12, v9) & 1;
}

uint64_t Date.VerbatimFormatStyle.attributedStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = v3;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

void Date.VerbatimFormatStyle.consuming(_:startingAt:in:)(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  int v18;

  if (a1 >> 14 >= a2 >> 14)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v3 = Date.ParseStrategy.formatter.getter();
  if (v3)
  {
    v4 = v3;
    v5 = String.subscript.getter();
    if ((v5 ^ v6) < 0x4000
      || (*(_BYTE *)(v4 + 24) & 1) == 0
      && (Substring.subscript.getter(), v7 = Character.isWhitespace.getter(), swift_bridgeObjectRelease(), (v7 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
LABEL_15:
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    lazy protocol witness table accessor for type Substring and conformance Substring();
    swift_bridgeObjectRetain();
    v8 = String.init<A>(_:)();
    v10 = v9;
    udat_getCalendar();
    ucal_clone();
    swift_bridgeObjectRetain();
    v11 = specialized _copyCollectionToContiguousArray<A>(_:)(v8, v10);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type String and conformance String();
    v12 = String.Index.utf16Offset<A>(in:)();
    if (v12 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else
    {
      v13 = v12;
      if (v12 <= 0x7FFFFFFF)
      {
        v18 = v12;
        if (!(v11[2] >> 31))
        {
          udat_parseCalendar();
          swift_release();
          if (v13 != v18)
          {
            ucal_getMillis();
            v15 = v14 / 1000.0 + -978307200.0;
            ucal_close();
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type Substring and conformance Substring();
            v16 = String.Index.init<A>(utf16Offset:in:)();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_release();
            *(_QWORD *)a3 = v16;
            *(double *)(a3 + 8) = v15;
            *(_BYTE *)(a3 + 16) = 0;
            return;
          }
          ucal_close();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
LABEL_19:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
LABEL_16:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance Date.VerbatimFormatStyle(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  Date.VerbatimFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance Date.VerbatimFormatStyle()
{
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
  return CustomConsumingRegexComponent.regex.getter();
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.discreteInput(before:)(Foundation::Date before)
{
  _QWORD *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  Foundation::Date v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  double v10;
  double v11;
  Swift::Double time;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unsigned __int8 v19;
  Foundation::Date_optional result;

  v4 = v2;
  *(Foundation::Date *)&v5._time = (Foundation::Date)*v1;
  v6 = *((_QWORD *)v3 + 6);
  v7 = *((_QWORD *)v3 + 7);
  v8 = v3[1];
  v13 = *v3;
  v14 = v8;
  v15 = v3[2];
  v16 = v6;
  v17 = v7;
  time = v5._time;
  result = (Foundation::Date_optional)Date.VerbatimFormatStyle.bound(for:isLower:)(v5, (Swift::Bool)&time);
  v9 = v19;
  if (v19 == 2)
  {
    v10 = 0.0;
  }
  else
  {
    v10 = v18;
    if ((v19 & 1) != 0)
    {
      v11 = 0.0 - v18;
      if (0.0 - v18 < INFINITY)
        *(_QWORD *)&v11 += (*(uint64_t *)&v11 >> 63) | 1;
      v10 = -v11;
    }
  }
  *(double *)v4 = v10;
  *(_BYTE *)(v4 + 8) = v9 == 2;
  result.value = *(Foundation::Date *)&v10;
  return result;
}

Swift::tuple_bound_Foundation_Date_includedInRangeOfInput_Bool_optional __swiftcall Date.VerbatimFormatStyle.bound(for:isLower:)(Foundation::Date a1, Swift::Bool isLower)
{
  char v2;
  uint64_t v3;
  _OWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  os_unfair_lock_s *v12;
  char v13;
  Swift::Double v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[4];
  __int128 v23;
  __int128 v24;
  Swift::tuple_bound_Foundation_Date_includedInRangeOfInput_Bool_optional result;

  v5 = v2;
  v6 = v3;
  v7 = *(_QWORD *)isLower;
  v8 = v4[3];
  v22[2] = v4[2];
  v22[3] = v8;
  v9 = v4[1];
  v22[0] = *v4;
  v22[1] = v9;
  v20 = v22[0];
  v21 = v9;
  v23 = *v4;
  v24 = v9;
  outlined retain of Locale((uint64_t)&v24);
  outlined retain of Locale((uint64_t)&v23);
  Calendar.timeZone.setter((uint64_t *)&v20);
  v20 = v21;
  v19 = v7;
  v10 = one-time initialization token for updateScheduleCache;
  swift_unknownObjectRetain();
  if (v10 != -1)
    swift_once();
  v11 = (uint64_t *)(static ICUDateFormatter.DateFormatInfo.updateScheduleCache + 16);
  v12 = (os_unfair_lock_s *)(static ICUDateFormatter.DateFormatInfo.updateScheduleCache + 24);
  swift_retain();
  os_unfair_lock_lock(v12);
  closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)(v11, (uint64_t)v22, (uint64_t)&v17);
  os_unfair_lock_unlock(v12);
  swift_release();
  v15 = v17;
  v16 = v18;
  Calendar.bound(for:isLower:updateSchedule:)((double *)&v19, v5 & 1, &v15, v6);
  swift_unknownObjectRelease();
  v13 = swift_unknownObjectRelease();
  result.value.bound._time = v14;
  result.value.includedInRangeOfInput = v13;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.discreteInput(after:)(Foundation::Date after)
{
  _QWORD *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  Foundation::Date v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  double v10;
  Swift::Double time;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unsigned __int8 v18;
  Foundation::Date_optional result;

  v4 = v2;
  *(Foundation::Date *)&v5._time = (Foundation::Date)*v1;
  v6 = *((_QWORD *)v3 + 6);
  v7 = *((_QWORD *)v3 + 7);
  v8 = v3[1];
  v12 = *v3;
  v13 = v8;
  v14 = v3[2];
  v15 = v6;
  v16 = v7;
  time = v5._time;
  result = (Foundation::Date_optional)Date.VerbatimFormatStyle.bound(for:isLower:)(v5, (Swift::Bool)&time);
  v9 = v18;
  if (v18 == 2)
  {
    v10 = 0.0;
  }
  else
  {
    v10 = v17;
    if ((v18 & 1) != 0)
    {
      v10 = v17 + 0.0;
      if (v17 + 0.0 < INFINITY)
        *(_QWORD *)&v10 += (*(uint64_t *)&v10 >> 63) | 1;
    }
  }
  *(double *)v4 = v10;
  *(_BYTE *)(v4 + 8) = v9 == 2;
  result.value = *(Foundation::Date *)&v10;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.input(before:)(Foundation::Date before)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  Swift::Bool v5;
  Swift::Double v6;
  BOOL v7;
  double v8;
  char v9;
  double v10;
  double v11;
  Foundation::Date_optional result;

  v3 = v2;
  v10 = *v1;
  v4 = v10;
  v9 = 1;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  v6 = v11;
  v7 = v11 >= v4;
  v8 = v11;
  if (v11 >= v4)
    v8 = 0.0;
  *(double *)v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.input(after:)(Foundation::Date after)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  Swift::Bool v5;
  Swift::Double v6;
  BOOL v7;
  double v8;
  char v9;
  double v10;
  double v11;
  Foundation::Date_optional result;

  v3 = v2;
  v10 = *v1;
  v4 = v10;
  v9 = 0;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  v6 = v11;
  v7 = v4 >= v11;
  v8 = v11;
  if (v4 >= v11)
    v8 = 0.0;
  *(double *)v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

double protocol witness for DiscreteFormatStyle.input(before:) in conformance Date.VerbatimFormatStyle(double a1)
{
  double result;

  *(_QWORD *)&result = (unint64_t)Date.VerbatimFormatStyle.input(before:)(*(Foundation::Date *)&a1);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(after:) in conformance Date.VerbatimFormatStyle(double a1)
{
  double result;

  *(_QWORD *)&result = (unint64_t)Date.VerbatimFormatStyle.input(after:)(*(Foundation::Date *)&a1);
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.Attributed.discreteInput(before:)(Foundation::Date before)
{
  uint64_t *v1;
  char v2;
  Swift::Double v3;
  Foundation::Date_optional result;

  v2 = Date.VerbatimFormatStyle.Attributed.discreteInput(before:)(v1, (uint64_t (*)(uint64_t *))Date.VerbatimFormatStyle.discreteInput(before:));
  result.value = *(Foundation::Date *)&v3;
  result.is_nil = v2;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.Attributed.discreteInput(after:)(Foundation::Date after)
{
  uint64_t *v1;
  char v2;
  Swift::Double v3;
  Foundation::Date_optional result;

  v2 = Date.VerbatimFormatStyle.Attributed.discreteInput(before:)(v1, (uint64_t (*)(uint64_t *))Date.VerbatimFormatStyle.discreteInput(after:));
  result.value = *(Foundation::Date *)&v3;
  result.is_nil = v2;
  return result;
}

uint64_t Date.VerbatimFormatStyle.Attributed.discreteInput(before:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *((_QWORD *)v2 + 6);
  v5 = *((_QWORD *)v2 + 7);
  v6 = v2[1];
  v9 = *v2;
  v10 = v6;
  v11 = v2[2];
  v12 = v4;
  v13 = v5;
  v8 = v3;
  return a2(&v8);
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.Attributed.input(before:)(Foundation::Date before)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  Swift::Bool v5;
  Swift::Double v6;
  BOOL v7;
  double v8;
  char v9;
  double v10;
  double v11;
  Foundation::Date_optional result;

  v3 = v2;
  v10 = *v1;
  v4 = v10;
  v9 = 1;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  v6 = v11;
  v7 = v11 >= v4;
  v8 = v11;
  if (v11 >= v4)
    v8 = 0.0;
  *(double *)v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.Attributed.input(after:)(Foundation::Date after)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  Swift::Bool v5;
  Swift::Double v6;
  BOOL v7;
  double v8;
  char v9;
  double v10;
  double v11;
  Foundation::Date_optional result;

  v3 = v2;
  v10 = *v1;
  v4 = v10;
  v9 = 0;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  v6 = v11;
  v7 = v4 >= v11;
  v8 = v11;
  if (v4 >= v11)
    v8 = 0.0;
  *(double *)v3 = v8;
  *(_BYTE *)(v3 + 8) = v7;
  result.value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.VerbatimFormatStyle.Attributed(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.VerbatimFormatStyle.Attributed(a1, a2, a3, (uint64_t (*)(uint64_t *))Date.VerbatimFormatStyle.discreteInput(before:));
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Date.VerbatimFormatStyle.Attributed(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.VerbatimFormatStyle.Attributed(a1, a2, a3, (uint64_t (*)(uint64_t *))Date.VerbatimFormatStyle.discreteInput(after:));
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.VerbatimFormatStyle.Attributed(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a1;
  v6 = *((_QWORD *)v4 + 6);
  v7 = *((_QWORD *)v4 + 7);
  v8 = v4[1];
  v11 = *v4;
  v12 = v8;
  v13 = v4[2];
  v14 = v6;
  v15 = v7;
  v10 = v5;
  return a4(&v10);
}

double protocol witness for DiscreteFormatStyle.input(before:) in conformance Date.VerbatimFormatStyle.Attributed(double a1)
{
  double result;

  *(_QWORD *)&result = (unint64_t)Date.VerbatimFormatStyle.Attributed.input(before:)(*(Foundation::Date *)&a1);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(after:) in conformance Date.VerbatimFormatStyle.Attributed(double a1)
{
  double result;

  *(_QWORD *)&result = (unint64_t)Date.VerbatimFormatStyle.Attributed.input(after:)(*(Foundation::Date *)&a1);
  return result;
}

uint64_t specialized static Date.VerbatimFormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  v4 = *((_QWORD *)a1 + 6);
  v5 = *((_QWORD *)a1 + 7);
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  v8 = *((_QWORD *)a2 + 6);
  v9 = *((_QWORD *)a2 + 7);
  v10 = *a1;
  v13 = a2[1];
  v14 = a1[1];
  v15 = *a2;
  v16 = v10;
  if ((specialized static TimeZone.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15) & 1) == 0)
    return 0;
  v15 = v13;
  v16 = v14;
  if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15) & 1) == 0)
    return 0;
  if (v2)
  {
    *(_QWORD *)&v16 = v2;
    *((_QWORD *)&v16 + 1) = v3;
    if (v6)
    {
      *(_QWORD *)&v15 = v6;
      *((_QWORD *)&v15 + 1) = v7;
      swift_unknownObjectRetain_n();
      v11 = specialized static Locale.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if ((v11 & 1) != 0)
        goto LABEL_8;
      return 0;
    }
    swift_unknownObjectRetain();
LABEL_12:
    swift_unknownObjectRelease();
    return 0;
  }
  if (v6)
    goto LABEL_12;
LABEL_8:
  if (v4 == v8 && v5 == v9)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.CodingKeys, &unk_1E0F2E5B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.CodingKeys, &unk_1E0F2E5B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.CodingKeys, &unk_1E0F2E5B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.CodingKeys, &unk_1E0F2E5B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys);
  }
  return result;
}

uint64_t specialized Date.VerbatimFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x615074616D726F66 && a2 == 0xED00006E72657474)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed.CodingKeys, &unk_1E0F2E478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed.CodingKeys, &unk_1E0F2E478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed.CodingKeys, &unk_1E0F2E478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed.CodingKeys, &unk_1E0F2E478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
}

unint64_t lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ParseStrategy, &type metadata for Date.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ParseStrategy, &type metadata for Date.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ParseStrategy, &type metadata for Date.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ParseStrategy, &type metadata for Date.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ParseStrategy, &type metadata for Date.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ParseStrategy, &type metadata for Date.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.ParseStrategy, &type metadata for Date.ParseStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle.Attributed(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
}

unint64_t lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed, &type metadata for Date.VerbatimFormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed, &type metadata for Date.VerbatimFormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed, &type metadata for Date.VerbatimFormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed, &type metadata for Date.VerbatimFormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for Date.VerbatimFormatStyle.Attributed, &type metadata for Date.VerbatimFormatStyle.Attributed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle.Attributed(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_181CE03F0(uint64_t a1)
{
  swift_retain();
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  return swift_release();
}

uint64_t sub_181CE0434()
{
  return 8;
}

_QWORD *sub_181CE0440(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for Date.VerbatimFormatStyle()
{
  return &type metadata for Date.VerbatimFormatStyle;
}

uint64_t destroy for Date.VerbatimFormatStyle()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Date.VerbatimFormatStyle(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Date.VerbatimFormatStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[5] = v6;
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Date.VerbatimFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.VerbatimFormatStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.VerbatimFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.VerbatimFormatStyle.Attributed()
{
  return &type metadata for Date.VerbatimFormatStyle.Attributed;
}

uint64_t storeEnumTagSinglePayload for Date.VerbatimFormatStyle.Attributed.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_181CE0708 + 4 * byte_182102EE4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_181CE0728 + 4 * byte_182102EE9[v4]))();
}

_BYTE *sub_181CE0708(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_181CE0728(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181CE0730(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181CE0738(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_181CE0740(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_181CE0748(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Date.VerbatimFormatStyle.Attributed.CodingKeys()
{
  return &unk_1E0F2E478;
}

uint64_t storeEnumTagSinglePayload for Date.VerbatimFormatStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181CE07B0 + 4 * byte_182102EF3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181CE07E4 + 4 * byte_182102EEE[v4]))();
}

uint64_t sub_181CE07E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CE07EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181CE07F4);
  return result;
}

uint64_t sub_181CE0800(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181CE0808);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_181CE080C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CE0814(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.VerbatimFormatStyle.CodingKeys()
{
  return &unk_1E0F2E5B8;
}

uint64_t specialized closure #1 in Data.init(capacity:initializingWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
  {
    v15 = 0;
    v16 = a3;
    v17 = 0;
    closure #1 in String.data(using:allowLossyConversion:)((uint64_t)&v15, a4, a5, a6);
    if (!v7)
    {
      result = swift_bridgeObjectRelease();
      if (!v17)
      {
        *a7 = 0;
        return result;
      }
      goto LABEL_13;
    }
LABEL_9:
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  v15 = a1;
  v16 = a3;
  v17 = 0;
  result = closure #1 in String.data(using:allowLossyConversion:)((uint64_t)&v15, a4, a5, a6);
  if (v7)
    goto LABEL_9;
  v12 = a2 - a1;
  v13 = v17;
  v14 = v12 - v17;
  if (v12 >= v17)
  {
    if (v12 == v17)
    {
LABEL_7:
      result = swift_bridgeObjectRelease();
      *a7 = v13;
      return result;
    }
    if (v14 >= 1)
    {
      bzero((void *)(a1 + v17), v14);
      goto LABEL_7;
    }
    goto LABEL_14;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

void specialized Data.init(capacity:initializingWith:)(uint64_t a1)
{
  swift_bridgeObjectRetain_n();
  specialized Data.init(count:)(a1);
  __asm { BR              X10 }
}

uint64_t sub_181CE0BA0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v8 = v3;
  LOWORD(v9) = v1;
  BYTE2(v9) = BYTE2(v1);
  HIBYTE(v9) = BYTE3(v1);
  v10 = BYTE4(v1);
  v11 = BYTE5(v1);
  v12 = BYTE6(v1);
  swift_bridgeObjectRetain();
  specialized closure #1 in Data.init(capacity:initializingWith:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v1), v6, v5, v0, v4, &v13);
  if (v2)
    return swift_bridgeObjectRelease_n();
  v14 = v8;
  v15 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  if (v12 < v13)
  {
    __break(1u);
    JUMPOUT(0x181CE0FCCLL);
  }
  Data._Representation.replaceSubrange(_:with:count:)();
  swift_bridgeObjectRelease_n();
  return v14;
}

void PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.CollectionIndexSubscript, a7);
}

uint64_t PredicateExpressions.CollectionIndexSubscript.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t);
  char *v42;
  char *v43;
  void (*v44)(uint64_t *, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  Swift::String v49;
  char *v50;
  Swift::String v51;
  Swift::String v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t AssociatedTypeWitness;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(char *, uint64_t);

  v59 = a3;
  v5 = a2[5];
  v64 = (void (*)(char *, uint64_t))a2[3];
  v65 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v60 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v61 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v62 = (char *)v56 - v8;
  MEMORY[0x1E0C80A78](v9);
  v66 = (char *)v56 - v10;
  v11 = a2[4];
  v12 = a2[2];
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(void (**)(char *, uint64_t))(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v56 - v19;
  v21 = *a1;
  v67 = v21;
  v22 = v69;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v11 + 16))(&v67, v12, v11, v18);
  if (!v22)
  {
    v57 = v16;
    v58 = v20;
    v69 = v14;
    v24 = v13;
    v25 = AssociatedTypeWitness;
    v67 = v21;
    v26 = v66;
    (*(void (**)(uint64_t *, _QWORD))(v65 + 16))(&v67, v64);
    v27 = a2[6];
    v28 = v62;
    v29 = v58;
    dispatch thunk of Collection.startIndex.getter();
    v65 = v27;
    v30 = v25;
    v31 = v24;
    v56[1] = swift_getAssociatedConformanceWitness();
    v32 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v33 = v60;
    v64 = *(void (**)(char *, uint64_t))(v60 + 8);
    v64(v28, v30);
    v34 = v61;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v61, v26, v30);
    v35 = v69;
    v36 = v57;
    v37 = v29;
    v38 = v31;
    (*((void (**)(char *, char *, uint64_t))v69 + 2))(v57, v37, v31);
    if ((v32 & 1) != 0)
    {
      dispatch thunk of Collection.endIndex.getter();
      v39 = dispatch thunk of static Comparable.< infix(_:_:)();
      v40 = v64;
      v64(v28, v30);
      v41 = (void (*)(char *, uint64_t))*((_QWORD *)v35 + 1);
      v41(v36, v38);
      v40(v34, v30);
      v42 = v58;
      if ((v39 & 1) != 0)
      {
        v43 = v66;
        v44 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
        v46 = v45;
        v47 = swift_getAssociatedTypeWitness();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v59, v46, v47);
        v44(&v67, 0);
        v40(v43, v30);
        return ((uint64_t (*)(char *, uint64_t))v41)(v58, v38);
      }
      v69 = v41;
    }
    else
    {
      v69 = (void (*)(char *, uint64_t))*((_QWORD *)v35 + 1);
      v69(v36, v31);
      v40 = v64;
      v64(v34, v30);
      v42 = v58;
    }
    v67 = 0;
    v68 = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v48._countAndFlagsBits = 0x207865646E49;
    v48._object = (void *)0xE600000000000000;
    String.append(_:)(v48);
    _print_unlocked<A, B>(_:_:)();
    v49._object = (void *)0x800000018230AEF0;
    v49._countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v49);
    v50 = v62;
    dispatch thunk of Collection.startIndex.getter();
    _print_unlocked<A, B>(_:_:)();
    v40(v50, v30);
    v51._countAndFlagsBits = 0x203C2E2E20;
    v51._object = (void *)0xE500000000000000;
    String.append(_:)(v51);
    dispatch thunk of Collection.endIndex.getter();
    _print_unlocked<A, B>(_:_:)();
    v40(v50, v30);
    v52._countAndFlagsBits = 41;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    v54 = v67;
    v53 = v68;
    lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
    swift_allocError();
    *(_QWORD *)v55 = v54;
    *(_QWORD *)(v55 + 8) = v53;
    *(_BYTE *)(v55 + 16) = 2;
    swift_willThrow();
    v40(v66, v30);
    return ((uint64_t (*)(char *, uint64_t))v69)(v42, v38);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.CollectionIndexSubscript<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_subscript<A, B>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  static PredicateExpressions.build_subscript<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.CollectionIndexSubscript, a7);
}

{
  static PredicateExpressions.build_subscript<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.CollectionRangeSubscript, a7);
}

uint64_t PredicateExpressions.CollectionIndexSubscript.description.getter(uint64_t a1)
{
  return PredicateExpressions.CollectionIndexSubscript.description.getter(a1, (void *)0x800000018230AF30, 0x3A7865646E69202CLL);
}

uint64_t PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.CollectionIndexSubscript<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD, _QWORD *, __n128);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v37 = a5;
  v38 = a4;
  v41 = a3;
  v36 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v39 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v40 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v13;
  v43[0] = v13;
  v43[1] = v14;
  v43[2] = v15;
  v44 = v16;
  v45 = v17;
  v19 = v18(0, v43, v11);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v32 - v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v23 = (uint64_t)v46;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v23)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v33 = v20;
  v34 = v19;
  v46 = a1;
  v24 = v39;
  v25 = a2;
  v35 = v22;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v44);
  v26 = v40;
  v27 = v42;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v35, v26, v27);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v44);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v28 = v34;
  v29 = v35;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v35[*(int *)(v34 + 60)], v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  v30 = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v37, v29, v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v29, v28);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.CollectionIndexSubscript<>.init(from:), a5, a6);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(_QWORD *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.CollectionIndexSubscript.index.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

void PredicateExpressions.CollectionRangeSubscript.init(wrapped:range:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.CollectionRangeSubscript, a7);
}

void PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void (*a7)(_QWORD, _QWORD *)@<X7>, uint64_t a8@<X8>)
{
  _QWORD v14[5];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a8, a1);
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a6;
  a7(0, v14);
  JUMPOUT(0x181CE16B4);
}

uint64_t PredicateExpressions.CollectionRangeSubscript.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  void (*v29)(uint64_t *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char v58;
  char *v59;
  uint64_t (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t (*v64)(char *, uint64_t);
  char *v65;
  char *v66;
  char *v67;
  Swift::String v68;
  uint64_t v69;
  Swift::String v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  Swift::String v73;
  Swift::String v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  Swift::String v79;
  Swift::String v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  Swift::String v83;
  Swift::String v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  void (*v96)(char *, char *, uint64_t);
  char *v97;
  uint64_t AssociatedConformanceWitness;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  void (*v108)(char *, uint64_t);

  v94 = a3;
  v5 = a2[6];
  v6 = a2[4];
  v104 = a2[2];
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v96 = *(void (**)(char *, char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v100 = (char *)&v88 - v8;
  v102 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v101 = type metadata accessor for Range();
  v99 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v95 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v97 = (char *)&v88 - v11;
  MEMORY[0x1E0C80A78](v12);
  v103 = (char *)&v88 - v13;
  v14 = swift_checkMetadataState();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v88 - v19;
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v88 - v23;
  v25 = *a1;
  v106 = v25;
  v26 = v105;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v6 + 16))(&v106, v104, v6, v22);
  if (!v26)
  {
    v91 = v17;
    v92 = v20;
    v104 = v15;
    v105 = v24;
    v93 = AssociatedTypeWitness;
    v28 = v101;
    v106 = v25;
    v29 = *(void (**)(uint64_t *, uint64_t))(a2[5] + 16);
    v30 = a2[3];
    v31 = v103;
    v29(&v106, v30);
    v90 = 0;
    v32 = v100;
    v33 = v105;
    dispatch thunk of Collection.startIndex.getter();
    v34 = v93;
    v35 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v108 = (void (*)(char *, uint64_t))*((_QWORD *)v96 + 1);
    v108(v32, v34);
    v36 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
    v37 = v97;
    v38 = v31;
    v39 = v28;
    v36(v97, v38, v28);
    v40 = v104;
    v41 = v92;
    v42 = v33;
    v43 = v14;
    v44 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
    v44(v92, v42, v43);
    if ((v35 & 1) != 0)
    {
      v89 = v44;
      v96 = v36;
      v45 = v100;
      dispatch thunk of Collection.endIndex.getter();
      v46 = dispatch thunk of static Comparable.<= infix(_:_:)();
      v108(v45, v34);
      v47 = v43;
      v104 = *(_QWORD *)(v40 + 8);
      ((void (*)(char *, uint64_t))v104)(v41, v43);
      v99 = *(_QWORD *)(v99 + 8);
      ((void (*)(char *, uint64_t))v99)(v37, v39);
      if ((v46 & 1) != 0)
      {
        v48 = v103;
        v49 = &v103[*(int *)(v39 + 36)];
        v50 = v100;
        v51 = v105;
        dispatch thunk of Collection.startIndex.getter();
        v97 = v49;
        v52 = dispatch thunk of static Comparable.>= infix(_:_:)();
        v53 = v108;
        v108(v50, v34);
        v54 = v95;
        v96(v95, v48, v39);
        v55 = v91;
        v89(v91, v51, v47);
        if ((v52 & 1) != 0)
        {
          v56 = v47;
          v57 = v100;
          dispatch thunk of Collection.endIndex.getter();
          v58 = dispatch thunk of static Comparable.<= infix(_:_:)();
          v53(v57, v34);
          v59 = v55;
          v60 = (uint64_t (*)(char *, uint64_t))v104;
          ((void (*)(char *, uint64_t))v104)(v59, v56);
          v61 = v39;
          v62 = v39;
          v63 = (void (*)(char *, uint64_t))v99;
          ((void (*)(char *, uint64_t))v99)(v95, v61);
          if ((v58 & 1) != 0)
          {
            v64 = v60;
            v65 = v103;
            v66 = v105;
            dispatch thunk of Collection.subscript.getter();
            v63(v65, v62);
            return v64(v66, v56);
          }
        }
        else
        {
          ((void (*)(char *, uint64_t))v104)(v55, v47);
          ((void (*)(char *, uint64_t))v99)(v54, v39);
          v56 = v47;
          v57 = v100;
        }
        v106 = 0;
        v107 = 0xE000000000000000;
        _StringGuts.grow(_:)(70);
        v79._countAndFlagsBits = 0x207865646E49;
        v79._object = (void *)0xE600000000000000;
        String.append(_:)(v79);
        _print_unlocked<A, B>(_:_:)();
        v80._object = (void *)0x800000018230AEF0;
        v80._countAndFlagsBits = 0xD000000000000034;
        String.append(_:)(v80);
        v81 = v53;
        v82 = v105;
        dispatch thunk of Collection.startIndex.getter();
        _print_unlocked<A, B>(_:_:)();
        v81(v57, v34);
        v83._countAndFlagsBits = 0x202E2E2E20;
        v83._object = (void *)0xE500000000000000;
        String.append(_:)(v83);
        dispatch thunk of Collection.endIndex.getter();
        _print_unlocked<A, B>(_:_:)();
        v81(v57, v34);
        v84._countAndFlagsBits = 41;
        v84._object = (void *)0xE100000000000000;
        String.append(_:)(v84);
        v86 = v106;
        v85 = v107;
        lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
        swift_allocError();
        *(_QWORD *)v87 = v86;
        *(_QWORD *)(v87 + 8) = v85;
        *(_BYTE *)(v87 + 16) = 2;
        swift_willThrow();
        ((void (*)(char *, uint64_t))v99)(v103, v101);
        v78 = v82;
        return ((uint64_t (*)(char *, uint64_t))v104)(v78, v56);
      }
      v56 = v43;
      v67 = v105;
    }
    else
    {
      v104 = *(_QWORD *)(v40 + 8);
      ((void (*)(char *, uint64_t))v104)(v41, v43);
      v99 = *(_QWORD *)(v99 + 8);
      ((void (*)(char *, uint64_t))v99)(v37, v39);
      v56 = v43;
      v67 = v105;
    }
    v106 = 0;
    v107 = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v68._countAndFlagsBits = 0x207865646E49;
    v68._object = (void *)0xE600000000000000;
    String.append(_:)(v68);
    v69 = v93;
    _print_unlocked<A, B>(_:_:)();
    v70._object = (void *)0x800000018230AEF0;
    v70._countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v70);
    v71 = v100;
    dispatch thunk of Collection.startIndex.getter();
    _print_unlocked<A, B>(_:_:)();
    v72 = v108;
    v108(v71, v69);
    v73._countAndFlagsBits = 0x202E2E2E20;
    v73._object = (void *)0xE500000000000000;
    String.append(_:)(v73);
    dispatch thunk of Collection.endIndex.getter();
    _print_unlocked<A, B>(_:_:)();
    v72(v71, v69);
    v74._countAndFlagsBits = 41;
    v74._object = (void *)0xE100000000000000;
    String.append(_:)(v74);
    v76 = v106;
    v75 = v107;
    lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
    swift_allocError();
    *(_QWORD *)v77 = v76;
    *(_QWORD *)(v77 + 8) = v75;
    *(_BYTE *)(v77 + 16) = 2;
    swift_willThrow();
    ((void (*)(char *, uint64_t))v99)(v103, v101);
    v78 = v67;
    return ((uint64_t (*)(char *, uint64_t))v104)(v78, v56);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.CollectionRangeSubscript<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.CollectionRangeSubscript.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_subscript<A, B>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void (*a7)(_QWORD, _QWORD *)@<X7>, uint64_t a8@<X8>)
{
  _QWORD v14[5];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a8, a1);
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a6;
  a7(0, v14);
  JUMPOUT(0x181CE1FA0);
}

uint64_t PredicateExpressions.CollectionRangeSubscript.description.getter(uint64_t a1)
{
  return PredicateExpressions.CollectionIndexSubscript.description.getter(a1, (void *)0x800000018230AF60, 0x3A65676E6172202CLL);
}

uint64_t PredicateExpressions.CollectionIndexSubscript.description.getter(uint64_t a1, void *a2, uint64_t a3)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  _StringGuts.grow(_:)(48);
  v5._countAndFlagsBits = 0xD000000000000022;
  v5._object = a2;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = a3;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t PredicateExpressions.CollectionRangeSubscript<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.CollectionRangeSubscript<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionRangeSubscript<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.CollectionRangeSubscript<>.init(from:), a5, a6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD), uint64_t a5, uint64_t a6)
{
  return a4(a1, a2[2], a2[3], a2[4], *(_QWORD *)(a3 - 8), a6, a2[5], *(_QWORD *)(a3 - 24));
}

uint64_t PredicateExpressions.CollectionContainsCollection.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.CollectionContainsCollection.other.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 76));
}

void PredicateExpressions.CollectionContainsCollection.init(base:other:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for PredicateExpressions.CollectionContainsCollection();
}

uint64_t sub_181CE2578(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 76), v2, v1);
}

uint64_t PredicateExpressions.CollectionContainsCollection.evaluate(_:)(uint64_t *a1, _QWORD *a2)
{
  char v2;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = a2[5];
  v24 = a2[3];
  v25 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v23 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v26 = (char *)&v22 - v7;
  v8 = a2[4];
  v9 = a2[2];
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v22 - v13;
  v15 = *a1;
  v28 = v15;
  v16 = v27;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v8 + 16))(&v28, v9, v8, v12);
  if (!v16)
  {
    v27 = v11;
    v17 = v10;
    v19 = v22;
    v18 = v23;
    v28 = v15;
    v20 = v26;
    (*(void (**)(uint64_t *, uint64_t))(v25 + 16))(&v28, v24);
    v2 = Collection<>.contains<A>(_:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v17);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.CollectionContainsCollection<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = PredicateExpressions.CollectionContainsCollection.evaluate(_:)(a1, a2);
  if (!v3)
    *a3 = result & 1;
  return result;
}

void static PredicateExpressions.build_contains<A, B>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
  type metadata accessor for PredicateExpressions.CollectionContainsCollection();
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
  type metadata accessor for PredicateExpressions.StringContainsRegex();
}

{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
  type metadata accessor for PredicateExpressions.SequenceContains();
}

uint64_t sub_181CE2818(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v3 + *(int *)(a1 + 76), v2, v1);
}

uint64_t PredicateExpressions.CollectionContainsCollection.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(49);
  v0._object = (void *)0x800000018230AF90;
  v0._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3A726568746F202CLL;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.CollectionContainsCollection<>.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.CollectionContainsCollection<>.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[15];
  __n128 v15;
  uint64_t v16;

  v14[5] = a5;
  v14[6] = a4;
  v14[9] = a3;
  v14[4] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14[7] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v14[8] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[10] = v9;
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v15 = v7;
  v16 = v13;
  type metadata accessor for PredicateExpressions.CollectionContainsCollection();
}

uint64_t sub_181CE2AF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v9 = *(_QWORD *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_QWORD *)(v4 - 216) = v6;
  *(_QWORD *)(v4 - 208) = a1;
  *(_QWORD *)(v4 - 72) = v3;
  *(_QWORD *)(v4 - 200) = v8;
  v10 = v2;
  v11 = *(_QWORD *)(v4 - 168);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(_QWORD *)(v4 - 112));
  v12 = *(_QWORD *)(v4 - 160);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v13 = *(_QWORD *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 32))(v13, v12, *(_QWORD *)(v4 - 144));
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(_QWORD *)(v4 - 112));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  v14 = *(_QWORD *)(v4 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 192) + 32))(v13 + *(int *)(v14 + 76), v11, v10);
  __swift_destroy_boxed_opaque_existential_1(v4 - 136);
  v15 = *(_QWORD *)(v4 - 216);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v15 + 16))(*(_QWORD *)(v4 - 184), v13, v14);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionIndexSubscript<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.CollectionIndexSubscript<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionIndexSubscript<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionIndexSubscript<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionRangeSubscript<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.CollectionRangeSubscript<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionRangeSubscript<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.CollectionRangeSubscript<A, B>);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  PredicateExpressions.CollectionContainsCollection<>.init(from:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(_QWORD *a1)
{
  return PredicateExpressions.CollectionContainsCollection<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.CollectionIndexSubscript(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181CE2EA4 + 4 * byte_1821033B0[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.CollectionIndexSubscript(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.CollectionRangeSubscript<A, B>(_QWORD *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1);
}

uint64_t one-time initialization function for idnaTranscoder()
{
  uint64_t result;
  uint64_t v1;
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = 0;
  result = MEMORY[0x186DAA4D8](60, &v2);
  if (v2 <= 0)
    v1 = result;
  else
    v1 = 0;
  static UIDNAHookICU.idnaTranscoder = v1;
  byte_1EDC3E6C0 = v2 > 0;
  return result;
}

uint64_t closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (**a3)(uint64_t, uint64_t, uint64_t)@<X2>, char a4@<W3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t isStackAllocationSafe;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD v27[257];
  uint64_t v28;
  int v29;
  __int16 v30;
  _WORD v31[11];

  *(_QWORD *)&v31[7] = *MEMORY[0x1E0C80C00];
  if (a2 > 2048)
    goto LABEL_6;
  v12 = result;
  v13 = *a3;
  v14 = one-time initialization token for idnaTranscoder;
  swift_retain();
  if (v14 != -1)
    swift_once();
  if ((byte_1EDC3E6C0 & 1) != 0)
  {
    result = swift_release();
LABEL_6:
    v15 = 0;
    v16 = 0;
LABEL_30:
    *a7 = v15;
    a7[1] = v16;
    return result;
  }
  v28 = static UIDNAHookICU.idnaTranscoder;
  isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    result = MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v30 = 16;
    *(_QWORD *)v31 = 0;
    *(_QWORD *)&v31[3] = 0;
    v29 = 0;
    if (v12)
    {
      v27[256] = v18;
      if (a2 >= (uint64_t)0xFFFFFFFF80000000)
      {
        v19 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, __int16 *, int *))v13)(v28, v12, a2, v27, 2048, &v30, &v29);
        if (v29 <= 0)
        {
          v15 = 0;
          if ((a4 & 1) != 0)
            v23 = -1;
          else
            v23 = -64;
          v16 = 0;
          if ((*(_DWORD *)&v31[1] & v23) == 0 && v19 > 0)
          {
            v15 = closure #2 in closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v27, v19, a5, a6);
            v16 = v24;
          }
        }
        else
        {
          v15 = 0;
          v16 = 0;
        }
LABEL_29:
        result = swift_release();
        goto LABEL_30;
      }
      __break(1u);
      goto LABEL_32;
    }
    __break(1u);
  }
  else
  {
    result = swift_slowAlloc();
    v30 = 16;
    *(_QWORD *)v31 = 0;
    *(_QWORD *)&v31[3] = 0;
    v29 = 0;
    if (v12)
    {
      if (a2 >= (uint64_t)0xFFFFFFFF80000000)
      {
        v20 = v12;
        v21 = result;
        v22 = v13(v28, v20, a2);
        v15 = 0;
        if ((a4 & 1) != 0)
          v25 = -1;
        else
          v25 = -64;
        v16 = 0;
        if ((*(_DWORD *)&v31[1] & v25) == 0 && v22 > 0)
        {
          v15 = closure #2 in closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)(v21, v22, a5, a6);
          v16 = v26;
        }
        MEMORY[0x186DA9E78](v21, -1, -1);
        goto LABEL_29;
      }
LABEL_32:
      __break(1u);
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)(uint64_t result, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  if (a2 != a4 || !a2)
    return static String._tryFromUTF8(_:)();
  v4 = (unsigned __int8 *)result;
  v6 = a2;
  v7 = a2 & ~(a2 >> 63);
  while (v7)
  {
    v8 = *a3;
    v9 = *v4;
    if (v8 == v9 || v9 == (((0x3FFE000000000uLL >> ((v8 - 1) >> 1)) & 0x20) + v8))
    {
      --v7;
      ++a3;
      ++v4;
      if (--v6)
        continue;
    }
    return static String._tryFromUTF8(_:)();
  }
  __break(1u);
  return result;
}

BOOL closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(int a1, char a2)
{
  int v2;

  if ((a2 & 1) != 0)
    v2 = -1;
  else
    v2 = -64;
  return (v2 & a1) == 0;
}

uint64_t closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(uint64_t result, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  if (a2 != a4)
    return specialized String.init(_utf16:)(result, a2);
  if (!a2)
  {
LABEL_10:
    result = (uint64_t)a3;
    return specialized String.init(_utf16:)(result, a2);
  }
  v4 = (unsigned __int16 *)result;
  v5 = a3;
  v6 = a2;
  v7 = a2 & ~(a2 >> 63);
  while (v7)
  {
    v8 = *v5;
    v9 = *v4;
    if (v8 != v9 && (v8 > 0x7F || v9 != (((0x3FFE000000000uLL >> ((v8 - 1) >> 1)) & 0x20) + v8)))
      return specialized String.init(_utf16:)(result, a2);
    --v7;
    ++v5;
    ++v4;
    if (!--v6)
      goto LABEL_10;
  }
  __break(1u);
  return result;
}

id NSProgress.estimatedTimeRemaining.getter()
{
  void *v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  result = objc_msgSend(v0, sel_estimatedTimeRemaining);
  v2 = result;
  if (result)
  {
    objc_msgSend(result, sel_doubleValue);
    v4 = v3;

    return (id)v4;
  }
  return result;
}

void key path getter for NSProgress.estimatedTimeRemaining : NSProgress(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, sel_estimatedTimeRemaining);
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, sel_doubleValue);
    v6 = v5;

  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = v4 == 0;
}

void key path setter for NSProgress.estimatedTimeRemaining : NSProgress(uint64_t a1, id *a2)
{
  id v2;
  id v3;

  v2 = *a2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    objc_msgSend(*a2, sel_setEstimatedTimeRemaining_, 0);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, *(double *)a1);
    objc_msgSend(v2, sel_setEstimatedTimeRemaining_, v3);

  }
}

void NSProgress.estimatedTimeRemaining.setter(uint64_t a1, char a2)
{
  void *v2;
  id v3;

  if ((a2 & 1) != 0)
  {
    objc_msgSend(v2, sel_setEstimatedTimeRemaining_, 0);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, *(double *)&a1);
    objc_msgSend(v2, sel_setEstimatedTimeRemaining_, v3);

  }
}

void (*NSProgress.estimatedTimeRemaining.modify(uint64_t a1))(uint64_t a1)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = objc_msgSend(v1, sel_estimatedTimeRemaining);
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, sel_doubleValue);
    v6 = v5;

  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v4 == 0;
  return NSProgress.estimatedTimeRemaining.modify;
}

void NSProgress.estimatedTimeRemaining.modify(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 16);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 16), sel_setEstimatedTimeRemaining_, 0);
  }
  else
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, *(double *)a1);
    objc_msgSend(v1, sel_setEstimatedTimeRemaining_, v2);

  }
}

id NSProgress.throughput.getter()
{
  return NSProgress.throughput.getter((SEL *)&selRef_throughput);
}

void NSProgress.throughput.setter(uint64_t a1, char a2)
{
  NSProgress.throughput.setter(a1, a2, (SEL *)&selRef_setThroughput_);
}

void (*NSProgress.throughput.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  void *v1;
  id v3;
  void *v4;
  id v5;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = objc_msgSend(v1, sel_throughput);
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, sel_integerValue);

  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4 == 0;
  return NSProgress.throughput.modify;
}

void NSProgress.throughput.modify(uint64_t a1, uint64_t a2)
{
  NSProgress.throughput.modify(a1, a2, (SEL *)&selRef_setThroughput_);
}

void (*NSProgress.fileTotalCount.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  void *v1;
  id v3;
  void *v4;
  id v5;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = objc_msgSend(v1, sel_fileTotalCount);
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, sel_integerValue);

  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4 == 0;
  return NSProgress.fileTotalCount.modify;
}

void NSProgress.fileTotalCount.modify(uint64_t a1, uint64_t a2)
{
  NSProgress.throughput.modify(a1, a2, (SEL *)&selRef_setFileTotalCount_);
}

void key path getter for NSProgress.throughput : NSProgress(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4;
  void *v5;
  id v6;

  v4 = objc_msgSend(*a1, *a2);
  v5 = v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, sel_integerValue);

  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = v5 == 0;
}

void key path setter for NSProgress.throughput : NSProgress(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  id v6;
  id v7;

  v6 = *a2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    objc_msgSend(*a2, *a5, 0);
  }
  else
  {
    v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, *(_QWORD *)a1);
    objc_msgSend(v6, *a5, v7);

  }
}

void (*NSProgress.fileCompletedCount.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  void *v1;
  id v3;
  void *v4;
  id v5;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = objc_msgSend(v1, sel_fileCompletedCount);
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, sel_integerValue);

  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4 == 0;
  return NSProgress.fileCompletedCount.modify;
}

void NSProgress.fileCompletedCount.modify(uint64_t a1, uint64_t a2)
{
  NSProgress.throughput.modify(a1, a2, (SEL *)&selRef_setFileCompletedCount_);
}

void NSProgress.throughput.modify(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v4;
  id v5;

  v4 = *(void **)(a1 + 16);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 16), *a3, 0);
  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, *(_QWORD *)a1);
    objc_msgSend(v4, *a3, v5);

  }
}

id NSProgress.performAsCurrent<A>(withPendingUnitCount:using:)(uint64_t a1, void (*a2)(id))
{
  void *v2;

  a2(objc_msgSend(v2, sel_becomeCurrentWithPendingUnitCount_, a1));
  return objc_msgSend(v2, sel_resignCurrent);
}

void sub_181CE3C4C(id *a1@<X0>, uint64_t a2@<X8>)
{
  key path getter for NSProgress.throughput : NSProgress(a1, (SEL *)&selRef_throughput, a2);
}

void sub_181CE3C68(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  key path setter for NSProgress.throughput : NSProgress(a1, a2, a3, a4, (SEL *)&selRef_setThroughput_);
}

void sub_181CE3C84(id *a1@<X0>, uint64_t a2@<X8>)
{
  key path getter for NSProgress.throughput : NSProgress(a1, (SEL *)&selRef_fileTotalCount, a2);
}

void sub_181CE3CA0(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  key path setter for NSProgress.throughput : NSProgress(a1, a2, a3, a4, (SEL *)&selRef_setFileTotalCount_);
}

void sub_181CE3CBC(id *a1@<X0>, uint64_t a2@<X8>)
{
  key path getter for NSProgress.throughput : NSProgress(a1, (SEL *)&selRef_fileCompletedCount, a2);
}

void sub_181CE3CD8(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  key path setter for NSProgress.throughput : NSProgress(a1, a2, a3, a4, (SEL *)&selRef_setFileCompletedCount_);
}

id protocol witness for ExpressibleByDictionaryLiteral.init(dictionaryLiteral:) in conformance NSDictionary@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = NSDictionary.init(dictionaryLiteral:)(a1);
  *a2 = result;
  return result;
}

uint64_t specialized static Dictionary._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 *v41;
  __int128 *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _BYTE v48[40];

  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  result = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  v5 = result;
  if (result)
  {
LABEL_26:
    *a2 = v5;
    return result;
  }
  v6 = objc_msgSend(a1, sel_count);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, AnyHashable>);
    v5 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9E0];
  }
  v7 = *(char **)(v5 + 48);
  v8 = *(_QWORD *)(v5 + 56);
  swift_retain();
  result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v7, v8, a1, (uint64_t)v6);
  if ((result & 0x8000000000000000) == 0 && (uint64_t)v6 >= result)
  {
    *(_QWORD *)(v5 + 16) = result;
    if (result)
    {
      v9 = result - 1;
      v10 = v5 + 64;
      while (1)
      {
        if (((*(_QWORD *)(v10 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
          goto LABEL_10;
        outlined init with copy of AnyHashable(*(_QWORD *)(v5 + 48) + 40 * v9, (uint64_t)v48);
        v22 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v5 + 40));
        result = outlined destroy of AnyHashable((uint64_t)v48);
        v23 = -1 << *(_BYTE *)(v5 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
        {
          v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v27 = 0;
          v28 = (unint64_t)(63 - v23) >> 6;
          do
          {
            if (++v25 == v28 && (v27 & 1) != 0)
            {
              __break(1u);
              goto LABEL_27;
            }
            v29 = v25 == v28;
            if (v25 == v28)
              v25 = 0;
            v27 |= v29;
            v30 = *(_QWORD *)(v10 + 8 * v25);
          }
          while (v30 == -1);
          v26 = __clz(__rbit64(~v30)) + (v25 << 6);
        }
        *(_QWORD *)(v10 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
        if (v9 < (uint64_t)v26)
        {
          v11 = *(_QWORD *)(v5 + 48);
          v12 = 40 * v26;
          v13 = v11 + v12;
          v14 = (__int128 *)(v11 + 40 * v9);
          v15 = *v14;
          v16 = v14[1];
          *(_QWORD *)(v13 + 32) = *((_QWORD *)v14 + 4);
          *(_OWORD *)v13 = v15;
          *(_OWORD *)(v13 + 16) = v16;
          v17 = *(_QWORD *)(v5 + 56);
          v18 = v17 + v12;
          v19 = (__int128 *)(v17 + 40 * v9);
          v20 = *v19;
          v21 = v19[1];
          *(_QWORD *)(v18 + 32) = *((_QWORD *)v19 + 4);
          *(_OWORD *)v18 = v20;
          *(_OWORD *)(v18 + 16) = v21;
LABEL_10:
          if (--v9 < 0)
            break;
        }
        else
        {
          if (v26 == v9)
            goto LABEL_10;
          v31 = *(_QWORD *)(v5 + 48);
          v32 = 40 * v26;
          v33 = (__int128 *)(v31 + v32);
          v34 = (__int128 *)(v31 + 40 * v9);
          v35 = *v33;
          v36 = v33[1];
          v37 = *((_QWORD *)v33 + 4);
          v38 = *((_QWORD *)v34 + 4);
          v39 = v34[1];
          *v33 = *v34;
          v33[1] = v39;
          *((_QWORD *)v33 + 4) = v38;
          *((_QWORD *)v34 + 4) = v37;
          *v34 = v35;
          v34[1] = v36;
          v40 = *(_QWORD *)(v5 + 56);
          v41 = (__int128 *)(v40 + v32);
          v42 = (__int128 *)(v40 + 40 * v9);
          v43 = *v41;
          v44 = v41[1];
          v45 = *((_QWORD *)v41 + 4);
          v46 = *((_QWORD *)v42 + 4);
          v47 = v42[1];
          *v41 = *v42;
          v41[1] = v47;
          *((_QWORD *)v41 + 4) = v46;
          *((_QWORD *)v42 + 4) = v45;
          *v42 = v43;
          v42[1] = v44;
          if (v9 < 0)
            break;
        }
      }
    }
    result = swift_release();
    goto LABEL_26;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  _QWORD v27[2];
  _BYTE v28[32];
  _BYTE v29[32];

  v27[0] = *(_QWORD *)(a6 - 8);
  v27[1] = a7;
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v27 - v14;
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v27 - v22;
  outlined init with copy of Any(v24, (uint64_t)v29);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v28);
  result = swift_dynamicCast();
  if (*(_QWORD *)(*a4 + 16) >= a4[1])
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v23, a5);
    v26 = v27[0];
    (*(void (**)(char *, char *, uint64_t))(v27[0] + 16))(v12, v15, a6);
    _NativeDictionary._unsafeInsertNew(key:value:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v15, a6);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, a5);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(_QWORD *, _QWORD *, uint64_t);
  _QWORD v9[4];
  _QWORD v10[4];

  v7 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(a1 + 32);
  v10[3] = swift_getObjectType();
  v10[0] = a2;
  v9[3] = swift_getObjectType();
  v9[0] = a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v7(v10, v9, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t NSDictionary._toCustomAnyHashable()()
{
  void *v0;
  uint64_t result;
  uint64_t v2;

  v2 = 0;
  result = specialized static Dictionary._forceBridgeFromObjectiveC(_:result:)(v0, &v2);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : AnyHashable]);
    lazy protocol witness table accessor for type [AnyHashable : AnyHashable] and conformance <> [A : B]();
    return AnyHashable.init<A>(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSDictionary()
{
  void **v0;
  void *v1;
  uint64_t v2;

  v1 = *v0;
  v2 = 0;
  specialized static Dictionary._forceBridgeFromObjectiveC(_:result:)(v1, &v2);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : AnyHashable]);
    lazy protocol witness table accessor for type [AnyHashable : AnyHashable] and conformance <> [A : B]();
    AnyHashable.init<A>(_:)();

  }
  else
  {
    __break(1u);
  }
}

_OWORD *NSDictionary.Iterator.deinit()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[12];
  _OWORD v9[2];

  v1 = v0[12];
  v8[10] = v0[11];
  v8[11] = v1;
  v9[0] = v0[13];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v0 + 217);
  v2 = v0[8];
  v8[6] = v0[7];
  v8[7] = v2;
  v3 = v0[10];
  v8[8] = v0[9];
  v8[9] = v3;
  v4 = v0[4];
  v8[2] = v0[3];
  v8[3] = v4;
  v5 = v0[6];
  v8[4] = v0[5];
  v8[5] = v5;
  v6 = v0[2];
  v8[0] = v0[1];
  v8[1] = v6;
  outlined release of Locale((uint64_t)v8);
  return v0;
}

_OWORD *protocol witness for IteratorProtocol.next() in conformance NSDictionary.Iterator@<X0>(_OWORD *a1@<X8>)
{
  return NSDictionary.Iterator.next()(a1);
}

void protocol witness for Sequence.makeIterator() in conformance NSDictionary(_QWORD *a1@<X8>)
{
  void **v1;
  void *v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[12];
  _OWORD v13[2];

  v3 = *v1;
  type metadata accessor for NSDictionary.Iterator();
  v4 = (_OWORD *)swift_allocObject();
  v5 = swift_unknownObjectRetain();
  NSFastEnumerationIterator.init(_:)(v5, (uint64_t)v12);
  v6 = v12[11];
  v4[11] = v12[10];
  v4[12] = v6;
  v4[13] = v13[0];
  *(_OWORD *)((char *)v4 + 217) = *(_OWORD *)((char *)v13 + 9);
  v7 = v12[7];
  v4[7] = v12[6];
  v4[8] = v7;
  v8 = v12[9];
  v4[9] = v12[8];
  v4[10] = v8;
  v9 = v12[3];
  v4[3] = v12[2];
  v4[4] = v9;
  v10 = v12[5];
  v4[5] = v12[4];
  v4[6] = v10;
  v11 = v12[1];
  v4[1] = v12[0];
  v4[2] = v11;

  *a1 = v4;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSDictionary()
{
  void **v0;
  void *v1;
  uint64_t v2;

  v1 = *v0;
  v2 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);

  return v2;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance NSDictionary(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

double NSDictionary.subscript.getter@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  void *v2;
  id v4;
  double result;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v4 = objc_msgSend(v2, sel_objectForKey_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

id NSDictionary.init(dictionary:)(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel___swiftInitWithDictionary_NSDictionary_, a1);
}

int64_t NSDictionary.init(dictionary:)(void *a1)
{
  void *v1;
  int64_t result;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  result = (int64_t)objc_msgSend(a1, sel_count);
  if ((unint64_t)(result - 0x1000000000000000) >> 61 == 7)
  {
    v4 = result;
    v5 = 8 * result;
    if (8 * result + 0x4000000000000000 >= 0)
    {
      v6 = swift_slowAlloc();
      v7 = v6 + v5;
      objc_msgSend(a1, sel__getObjects_andKeys_count_, v6, v7, v4);
      v8 = objc_msgSend(v1, sel_initWithObjects_forKeys_count_, v6, v7, v4);
      MEMORY[0x186DA9E78](v6, -1, -1);
      return (int64_t)v8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

int64_t @objc NSDictionary.init(dictionary:)(uint64_t a1, uint64_t a2, void *a3)
{
  return NSDictionary.init(dictionary:)(a3);
}

uint64_t NSDictionary.customMirror.getter()
{
  void *v0;

  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  swift_unknownObjectRetain();
  if (!static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)())
    objc_msgSend(v0, sel_copyWithZone_, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSObject : Swift.AnyObject]);
  return Mirror.init(reflecting:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance NSDictionary()
{
  return NSDictionary.customMirror.getter();
}

uint64_t sub_181CE4734()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(a1, a2, a3, *(_QWORD **)(v3 + 40), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

uint64_t sub_181CE4750()
{
  return swift_deallocObject();
}

uint64_t sub_181CE4760()
{
  return swift_deallocObject();
}

uint64_t sub_181CE4770()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type NSDictionary.Iterator and conformance NSDictionary.Iterator()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSDictionary.Iterator and conformance NSDictionary.Iterator;
  if (!lazy protocol witness table cache variable for type NSDictionary.Iterator and conformance NSDictionary.Iterator)
  {
    v1 = type metadata accessor for NSDictionary.Iterator();
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for NSDictionary.Iterator, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDictionary.Iterator and conformance NSDictionary.Iterator);
  }
  return result;
}

uint64_t method lookup function for NSDictionary.Iterator()
{
  return swift_lookUpClassMethod();
}

char *specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(char *result, uint64_t a2, id a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2)
  {
    v8 = result;
    result = (char *)objc_msgSend(a3, sel__getObjects_andKeys_count_, a2, result, a4);
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (!a4)
        return (char *)a4;
      result = (char *)a5(0);
      v9 = v8 - 8;
      v10 = a4;
      do
      {
        if (v10 > a4)
        {
          __break(1u);
          goto LABEL_13;
        }
        v11 = v10 - 1;
        v12 = 8 * v10;
        v18 = *(_QWORD *)&v9[8 * v10];
        swift_unknownObjectRetain();
        result = (char *)swift_dynamicCast();
        *(_QWORD *)&v9[v12] = v17;
        v10 = v11;
      }
      while (v11);
      v13 = a2 - 32;
      v14 = 32 * a4;
      v15 = a4;
      while (v15 <= a4)
      {
        v16 = v15 - 1;
        v18 = *(_QWORD *)(v13 + 8 * v15 + 24);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        result = (char *)outlined init with take of Any(&v17, (_OWORD *)(v13 + v14));
        v14 -= 32;
        v15 = v16;
        if (!v16)
          return (char *)a4;
      }
LABEL_13:
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t PredicateCodableConfiguration.allowType(_:identifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  return PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(a1, a2, a3, 1);
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t i;
  BOOL v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  int64_t v27;
  uint64_t v30;
  int64_t v31;
  _QWORD v32[7];
  char v33;
  uint64_t v34;

  v26 = a2 + 64;
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v27 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v30 = (v5 - 1) & v5;
  v31 = v7;
  for (i = __clz(__rbit64(v5)) | (v7 << 6); ; i = __clz(__rbit64(v11)) + (v10 << 6))
  {
    v13 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v14 = v13[1];
    v15 = *(_QWORD *)(a2 + 56) + 48 * i;
    v16 = *(_QWORD *)v15;
    v17 = *(_QWORD *)(v15 + 8);
    v19 = *(_QWORD *)(v15 + 16);
    v18 = *(_QWORD *)(v15 + 24);
    v20 = *(_QWORD *)(v15 + 32);
    v21 = *(_BYTE *)(v15 + 40);
    v22 = *v13;
    v32[0] = *v13;
    v32[1] = v14;
    v32[2] = v16;
    v32[3] = v17;
    v32[4] = v19;
    v32[5] = v18;
    v32[6] = v20;
    v33 = v21;
    swift_bridgeObjectRetain();
    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v16, v17, v19, v18, v20, v21);
    v23 = v34;
    v24 = a1(v32);
    if (v23)
    {
      swift_bridgeObjectRelease();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v16, v17, v19, v18, v20, v21);
      return swift_release();
    }
    v34 = 0;
    if ((v24 & 1) != 0)
    {
      result = swift_release();
      goto LABEL_29;
    }
    swift_bridgeObjectRelease();
    result = outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v16, v17, v19, v18, v20, v21);
    v5 = v30;
    v7 = v31;
    if (v30)
      goto LABEL_4;
LABEL_5:
    v9 = __OFADD__(v7, 1);
    v10 = v7 + 1;
    if (v9)
      break;
    if (v10 >= v27)
      goto LABEL_28;
    v11 = *(_QWORD *)(v26 + 8 * v10);
    if (!v11)
    {
      v12 = v10 + 1;
      if (v10 + 1 >= v27)
        goto LABEL_28;
      v11 = *(_QWORD *)(v26 + 8 * v12);
      if (v11)
        goto LABEL_16;
      v12 = v10 + 2;
      if (v10 + 2 >= v27)
        goto LABEL_28;
      v11 = *(_QWORD *)(v26 + 8 * v12);
      if (v11)
        goto LABEL_16;
      v12 = v10 + 3;
      if (v10 + 3 >= v27)
        goto LABEL_28;
      v11 = *(_QWORD *)(v26 + 8 * v12);
      if (v11)
      {
LABEL_16:
        v10 = v12;
        goto LABEL_17;
      }
      v12 = v10 + 4;
      if (v10 + 4 < v27)
      {
        v11 = *(_QWORD *)(v26 + 8 * v12);
        if (!v11)
        {
          while (1)
          {
            v10 = v12 + 1;
            if (__OFADD__(v12, 1))
              goto LABEL_31;
            if (v10 >= v27)
              goto LABEL_28;
            v11 = *(_QWORD *)(v26 + 8 * v10);
            ++v12;
            if (v11)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      result = swift_release();
      v22 = 0;
      v14 = 0;
      v16 = 0;
      v17 = 0;
      v19 = 0;
      v18 = 0;
      v20 = 0;
      v21 = 0;
LABEL_29:
      *(_QWORD *)a3 = v22;
      *(_QWORD *)(a3 + 8) = v14;
      *(_QWORD *)(a3 + 16) = v16;
      *(_QWORD *)(a3 + 24) = v17;
      *(_QWORD *)(a3 + 32) = v19;
      *(_QWORD *)(a3 + 40) = v18;
      *(_QWORD *)(a3 + 48) = v20;
      *(_BYTE *)(a3 + 56) = v21;
      return result;
    }
LABEL_17:
    v30 = (v11 - 1) & v11;
    v31 = v10;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t PredicateCodableConfiguration._keyPath(for:rootType:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *v3;
  if (!*(_QWORD *)(v4 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v10 = *(_QWORD *)(v4 + 56) + 48 * v8;
  v11 = *(_QWORD *)v10;
  v12 = *(uint64_t (**)(uint64_t))(v10 + 8);
  v14 = *(_QWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v10 + 24);
  v15 = *(_QWORD *)(v10 + 32);
  v16 = *(unsigned __int8 *)(v10 + 40);
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(*(_QWORD *)v10, (uint64_t)v12, v14, v13, v15, *(_BYTE *)(v10 + 40));
  swift_bridgeObjectRelease();
  if (v16 == 1)
  {
    v17 = *a3;
    if ((unint64_t)*a3 >= 0x800 || (unint64_t)(v17 - 512) < 3 || !v17)
    {
      swift_retain();
      if (TypeMetadata.descriptor.getter() == v11)
      {
        v19 = Type.genericArguments.getter();
        v20 = v12(v19);
        if (v20)
        {
          v21 = v20;
          swift_retain();
          AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
          swift_release();
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v11, (uint64_t)v12, v14, v13, v15, 1);
          return v21;
        }
      }
      swift_release();
    }
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v11, (uint64_t)v12, v14, v13, v15, 1);
    return 0;
  }
  return v11;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PredicateCodableConfiguration.AllowListType(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)a1 == *(_QWORD *)a2;
  if ((*(_BYTE *)(a2 + 8) & 1) == 0)
    v2 = 0;
  v3 = *(_QWORD *)a1 == *(_QWORD *)a2;
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v3 = 0;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    return v2;
  else
    return v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  _BYTE v4[48];
  _BYTE v5[48];

  outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a1, (uint64_t)v4);
  outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a2, (uint64_t)v5);
  return specialized static PredicateCodableConfiguration.AllowListKeyPath.== infix(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

Foundation::PredicateCodableConfiguration __swiftcall PredicateCodableConfiguration.init()()
{
  uint64_t v0;
  uint64_t v1;
  Foundation::PredicateCodableConfiguration result;

  v1 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)v0 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 8) = v1;
  *(_BYTE *)(v0 + 16) = 1;
  return result;
}

uint64_t PredicateCodableConfiguration.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  int64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[2];
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;

  v1 = *v0;
  v2 = v0[1];
  v3 = *(_QWORD *)(v2 + 16);
  v93 = *v0;
  if (v3)
  {
    v105 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v105;
    result = specialized Dictionary.startIndex.getter(v2);
    v7 = result;
    v8 = 0;
    v9 = v2 + 64;
    v10 = *(_BYTE *)(v2 + 32);
    v95 = v3;
    v97 = v6;
    v99 = v2 + 64;
    while (1)
    {
      if (v7 < 0 || v7 >= 1 << v10)
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
        return result;
      }
      v13 = (unint64_t)v7 >> 6;
      if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0)
        goto LABEL_52;
      if (*(_DWORD *)(v2 + 36) != v6)
        goto LABEL_53;
      v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v7);
      v15 = *v14;
      v16 = (void *)v14[1];
      v17 = *(_QWORD *)(v2 + 56) + 16 * v7;
      v103 = 0;
      v104 = 0xE000000000000000;
      if ((*(_BYTE *)(v17 + 8) & 1) != 0)
      {
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease();
        strcpy((char *)v102, "partial type '");
        HIBYTE(v102[1]) = -18;
        swift_getKeyPath();
        dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        swift_getAtKeyPath();
        swift_release();
        v18._countAndFlagsBits = String.init(cString:)();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 39;
        v19._object = (void *)0xE100000000000000;
        String.append(_:)(v19);
        v20 = v102[0];
        v21 = v102[1];
      }
      else
      {
        swift_bridgeObjectRetain();
        v22._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 39;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        v21 = 0xE600000000000000;
        v20 = 0x272065707974;
      }
      v24 = v21;
      String.append(_:)(*(Swift::String *)&v20);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 10272;
      v25._object = (void *)0xE200000000000000;
      String.append(_:)(v25);
      v26._countAndFlagsBits = v15;
      v26._object = v16;
      String.append(_:)(v26);
      v27._countAndFlagsBits = 41;
      v27._object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      result = swift_bridgeObjectRelease();
      v28 = v103;
      v29 = v104;
      v105 = v4;
      v31 = *(_QWORD *)(v4 + 16);
      v30 = *(_QWORD *)(v4 + 24);
      if (v31 >= v30 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        v4 = v105;
      }
      *(_QWORD *)(v4 + 16) = v31 + 1;
      v32 = v4 + 16 * v31;
      *(_QWORD *)(v32 + 32) = v28;
      *(_QWORD *)(v32 + 40) = v29;
      v10 = *(_BYTE *)(v2 + 32);
      v11 = 1 << v10;
      if (v7 >= 1 << v10)
        goto LABEL_54;
      v9 = v2 + 64;
      v33 = *(_QWORD *)(v99 + 8 * v13);
      if ((v33 & (1 << v7)) == 0)
        goto LABEL_55;
      v6 = v97;
      if (*(_DWORD *)(v2 + 36) != v97)
        goto LABEL_56;
      v34 = v33 & (-2 << (v7 & 0x3F));
      if (v34)
      {
        v11 = __clz(__rbit64(v34)) | v7 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v35 = v13 + 1;
        v36 = (v11 + 63) >> 6;
        if (v13 + 1 < v36)
        {
          v37 = *(_QWORD *)(v99 + 8 * v35);
          v12 = v95;
          if (v37)
          {
LABEL_24:
            v11 = __clz(__rbit64(v37)) + (v35 << 6);
          }
          else
          {
            while (v36 - 2 != v13)
            {
              v37 = *(_QWORD *)(v2 + 80 + 8 * v13++);
              if (v37)
              {
                v35 = v13 + 1;
                goto LABEL_24;
              }
            }
          }
          goto LABEL_5;
        }
      }
      v12 = v95;
LABEL_5:
      ++v8;
      v7 = v11;
      if (v8 == v12)
      {
        swift_bridgeObjectRelease();
        v1 = v93;
        break;
      }
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v89 = BidirectionalCollection<>.joined(separator:)();
  v39 = v38;
  swift_bridgeObjectRelease();
  v40 = *(_QWORD *)(v1 + 16);
  if (v40)
  {
    v87 = v39;
    v105 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
    v41 = v105;
    result = specialized Dictionary.startIndex.getter(v1);
    v43 = result;
    v44 = 0;
    v45 = v1 + 64;
    v46 = *(_BYTE *)(v1 + 32);
    v88 = v1 + 80;
    v90 = v40;
    v91 = v42;
    v92 = v1 + 64;
    while ((v43 & 0x8000000000000000) == 0 && v43 < 1 << v46)
    {
      v49 = (unint64_t)v43 >> 6;
      if ((*(_QWORD *)(v45 + 8 * ((unint64_t)v43 >> 6)) & (1 << v43)) == 0)
        goto LABEL_58;
      if (*(_DWORD *)(v1 + 36) != v42)
        goto LABEL_59;
      v94 = v44;
      v50 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v43);
      v51 = *v50;
      v52 = (void *)v50[1];
      v53 = *(_QWORD *)(v1 + 56) + 48 * v43;
      v54 = *(_QWORD *)v53;
      v55 = *(_QWORD *)(v53 + 8);
      v56 = *(_QWORD *)(v53 + 24);
      v100 = v41;
      v101 = *(_QWORD *)(v53 + 16);
      v57 = *(void **)(v53 + 32);
      v58 = *(_BYTE *)(v53 + 40);
      v103 = 0;
      v104 = 0xE000000000000000;
      v96 = v51;
      v98 = v55;
      if ((v58 & 1) != 0)
      {
        v102[0] = 92;
        v102[1] = 0xE100000000000000;
        swift_getKeyPath();
        swift_bridgeObjectRetain();
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v54, v55, v101, v56, (uint64_t)v57, 1);
        dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        swift_getAtKeyPath();
        swift_release();
        v59._countAndFlagsBits = String.init(cString:)();
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._countAndFlagsBits = 46;
        v60._object = (void *)0xE100000000000000;
        String.append(_:)(v60);
        v61._countAndFlagsBits = v56;
        v61._object = v57;
        String.append(_:)(v61);
        v62 = 92;
        v63 = 0xE100000000000000;
      }
      else
      {
        swift_bridgeObjectRetain();
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v54, v55, v101, v56, (uint64_t)v57, 0);
        v62 = AnyKeyPath.debugDescription.getter();
        v63 = v64;
      }
      v65 = v63;
      String.append(_:)(*(Swift::String *)&v62);
      swift_bridgeObjectRelease();
      v66._countAndFlagsBits = 10272;
      v66._object = (void *)0xE200000000000000;
      String.append(_:)(v66);
      v67._countAndFlagsBits = v96;
      v67._object = v52;
      String.append(_:)(v67);
      v68._countAndFlagsBits = 41;
      v68._object = (void *)0xE100000000000000;
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      result = outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v54, v98, v101, v56, (uint64_t)v57, v58);
      v69 = v103;
      v70 = v104;
      v41 = v100;
      v105 = v100;
      v72 = *(_QWORD *)(v100 + 16);
      v71 = *(_QWORD *)(v100 + 24);
      if (v72 >= v71 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1);
        v41 = v105;
      }
      *(_QWORD *)(v41 + 16) = v72 + 1;
      v73 = v41 + 16 * v72;
      *(_QWORD *)(v73 + 32) = v69;
      *(_QWORD *)(v73 + 40) = v70;
      v1 = v93;
      v46 = *(_BYTE *)(v93 + 32);
      v47 = 1 << v46;
      if (v43 >= 1 << v46)
        goto LABEL_60;
      v45 = v92;
      v74 = *(_QWORD *)(v92 + 8 * v49);
      if ((v74 & (1 << v43)) == 0)
        goto LABEL_61;
      v42 = v91;
      if (*(_DWORD *)(v93 + 36) != v91)
        goto LABEL_62;
      v75 = v74 & (-2 << (v43 & 0x3F));
      if (v75)
      {
        v47 = __clz(__rbit64(v75)) | v43 & 0xFFFFFFFFFFFFFFC0;
        v48 = v90;
      }
      else
      {
        v76 = v49 + 1;
        v77 = (v47 + 63) >> 6;
        v48 = v90;
        if (v49 + 1 < v77)
        {
          v78 = *(_QWORD *)(v92 + 8 * v76);
          if (v78)
          {
LABEL_48:
            v47 = __clz(__rbit64(v78)) + (v76 << 6);
          }
          else
          {
            while (v77 - 2 != v49)
            {
              v78 = *(_QWORD *)(v88 + 8 * v49++);
              if (v78)
              {
                v76 = v49 + 1;
                goto LABEL_48;
              }
            }
          }
        }
      }
      v44 = v94 + 1;
      v43 = v47;
      if (v94 + 1 == v48)
      {
        swift_bridgeObjectRelease();
        v39 = v87;
        goto LABEL_50;
      }
    }
    goto LABEL_57;
  }
LABEL_50:
  v79 = BidirectionalCollection<>.joined(separator:)();
  v81 = v80;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(72);
  v82._countAndFlagsBits = 0xD00000000000002DLL;
  v82._object = (void *)0x800000018230B030;
  String.append(_:)(v82);
  v83._countAndFlagsBits = v89;
  v83._object = v39;
  String.append(_:)(v83);
  swift_bridgeObjectRelease();
  v84._object = (void *)0x800000018230B060;
  v84._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v84);
  v85._countAndFlagsBits = v79;
  v85._object = v81;
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  v86._countAndFlagsBits = 10589;
  v86._object = (void *)0xE200000000000000;
  String.append(_:)(v86);
  return 0;
}

uint64_t PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  char v28;
  unint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  char v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;
  int64_t v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  Swift::String v99;
  Swift::String v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v106;
  uint64_t v107;
  void *__src;
  char *__srca;
  uint64_t v111;

  v6 = v4;
  if (a3)
  {
    v8 = a3;
  }
  else
  {
    a2 = _typeName(_:qualified:)();
    v8 = v9;
  }
  v10 = *(_QWORD *)(v4 + 8);
  v106 = v10 + 64;
  v11 = 1 << *(_BYTE *)(v10 + 32);
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v10 + 64);
  __src = (void *)((unint64_t)(v11 + 63) >> 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = 0;
  while (1)
  {
    do
    {
      if (v13)
      {
        v16 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v17 = v16 | (v14 << 6);
        goto LABEL_27;
      }
      v18 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      if (v18 >= (uint64_t)__src)
        goto LABEL_74;
      v19 = *(_QWORD *)(v106 + 8 * v18);
      ++v14;
      if (v19)
        goto LABEL_26;
      v14 = v18 + 1;
      if (v18 + 1 >= (uint64_t)__src)
        goto LABEL_74;
      v19 = *(_QWORD *)(v106 + 8 * v14);
      if (v19)
        goto LABEL_26;
      v14 = v18 + 2;
      if (v18 + 2 >= (uint64_t)__src)
        goto LABEL_74;
      v19 = *(_QWORD *)(v106 + 8 * v14);
      if (v19)
        goto LABEL_26;
      v20 = v18 + 3;
      if (v20 >= (uint64_t)__src)
      {
LABEL_74:
        swift_release();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v111 = *(_QWORD *)(v6 + 8);
        v5 = v111;
        *(_QWORD *)(v6 + 8) = 0x8000000000000000;
        v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)v8);
        v58 = *(_QWORD *)(v111 + 16);
        v59 = (v57 & 1) == 0;
        v60 = v58 + v59;
        if (!__OFADD__(v58, v59))
        {
          LOBYTE(v10) = v57;
          if (*(_QWORD *)(v111 + 24) < v60)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, isUniquelyReferenced_nonNull_native);
            v61 = v111;
            v62 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)v8);
            if ((v10 & 1) != (v63 & 1))
              goto LABEL_127;
            v13 = v62;
            v64 = a1;
            if ((v10 & 1) == 0)
              goto LABEL_118;
            goto LABEL_81;
          }
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v61 = v111;
            v64 = a1;
            if ((v57 & 1) == 0)
              goto LABEL_118;
            goto LABEL_81;
          }
LABEL_85:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
          v66 = static _DictionaryStorage.copy(original:)();
          v61 = v66;
          if (!*(_QWORD *)(v5 + 16))
            goto LABEL_117;
          v67 = (char *)(v66 + 64);
          v107 = v61;
          __srca = (char *)(v5 + 64);
          v68 = (unint64_t)((1 << *(_BYTE *)(v61 + 32)) + 63) >> 6;
          if (v61 != v5 || v67 >= &__srca[8 * v68])
            memmove(v67, __srca, 8 * v68);
          v69 = 0;
          *(_QWORD *)(v61 + 16) = *(_QWORD *)(v5 + 16);
          v70 = 1 << *(_BYTE *)(v5 + 32);
          v71 = -1;
          if (v70 < 64)
            v71 = ~(-1 << v70);
          v72 = v71 & *(_QWORD *)(v5 + 64);
          v73 = (unint64_t)(v70 + 63) >> 6;
          while (1)
          {
            if (v72)
            {
              v74 = __clz(__rbit64(v72));
              v72 &= v72 - 1;
              v75 = v74 | (v69 << 6);
            }
            else
            {
              v84 = v69 + 1;
              if (__OFADD__(v69, 1))
              {
LABEL_121:
                __break(1u);
                goto LABEL_122;
              }
              if (v84 >= v73)
                goto LABEL_117;
              v85 = *(_QWORD *)&__srca[8 * v84];
              ++v69;
              if (!v85)
              {
                v69 = v84 + 1;
                if (v84 + 1 >= v73)
                  goto LABEL_117;
                v85 = *(_QWORD *)&__srca[8 * v69];
                if (!v85)
                {
                  v69 = v84 + 2;
                  if (v84 + 2 >= v73)
                    goto LABEL_117;
                  v85 = *(_QWORD *)&__srca[8 * v69];
                  if (!v85)
                  {
                    v69 = v84 + 3;
                    if (v84 + 3 >= v73)
                      goto LABEL_117;
                    v85 = *(_QWORD *)&__srca[8 * v69];
                    if (!v85)
                    {
                      v69 = v84 + 4;
                      if (v84 + 4 >= v73)
                        goto LABEL_117;
                      v85 = *(_QWORD *)&__srca[8 * v69];
                      if (!v85)
                      {
                        v69 = v84 + 5;
                        if (v84 + 5 >= v73)
                          goto LABEL_117;
                        v85 = *(_QWORD *)&__srca[8 * v69];
                        if (!v85)
                        {
                          v69 = v84 + 6;
                          if (v84 + 6 >= v73)
                            goto LABEL_117;
                          v85 = *(_QWORD *)&__srca[8 * v69];
                          if (!v85)
                          {
                            v86 = v84 + 7;
                            if (v86 >= v73)
                              goto LABEL_117;
                            v85 = *(_QWORD *)&__srca[8 * v86];
                            if (!v85)
                            {
                              while (1)
                              {
                                v69 = v86 + 1;
                                if (__OFADD__(v86, 1))
                                  goto LABEL_123;
                                v61 = v107;
                                if (v69 >= v73)
                                  break;
                                v85 = *(_QWORD *)&__srca[8 * v69];
                                ++v86;
                                if (v85)
                                  goto LABEL_116;
                              }
LABEL_117:
                              swift_bridgeObjectRelease();
                              v64 = a1;
                              if ((v10 & 1) == 0)
                              {
LABEL_118:
                                specialized _NativeDictionary._insert(at:key:value:)(v13, a2, (uint64_t)v8, v64, 0, (_QWORD *)v61);
                                swift_bridgeObjectRetain();
                                goto LABEL_119;
                              }
LABEL_81:
                              v65 = *(_QWORD *)(v61 + 56) + 16 * v13;
                              *(_QWORD *)v65 = v64;
                              *(_BYTE *)(v65 + 8) = 0;
LABEL_119:
                              *(_QWORD *)(v6 + 8) = v61;
                              swift_bridgeObjectRelease();
                              return swift_bridgeObjectRelease();
                            }
                            v69 = v86;
                            v61 = v107;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_116:
              v72 = (v85 - 1) & v85;
              v75 = __clz(__rbit64(v85)) + (v69 << 6);
            }
            v76 = 16 * v75;
            v77 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v76);
            v79 = *v77;
            v78 = v77[1];
            v80 = *(_QWORD *)(v5 + 56) + v76;
            v81 = *(_QWORD *)v80;
            LOBYTE(v80) = *(_BYTE *)(v80 + 8);
            v82 = (_QWORD *)(*(_QWORD *)(v61 + 48) + v76);
            *v82 = v79;
            v82[1] = v78;
            v83 = *(_QWORD *)(v61 + 56) + v76;
            *(_QWORD *)v83 = v81;
            *(_BYTE *)(v83 + 8) = v80;
            swift_bridgeObjectRetain();
          }
        }
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      v19 = *(_QWORD *)(v106 + 8 * v20);
      if (!v19)
      {
        while (1)
        {
          v14 = v20 + 1;
          if (__OFADD__(v20, 1))
            goto LABEL_83;
          if (v14 >= (uint64_t)__src)
            goto LABEL_74;
          v19 = *(_QWORD *)(v106 + 8 * v14);
          ++v20;
          if (v19)
            goto LABEL_26;
        }
      }
      v14 = v20;
LABEL_26:
      v13 = (v19 - 1) & v19;
      v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
      v21 = 16 * v17;
      v22 = (uint64_t *)(*(_QWORD *)(v10 + 48) + v21);
      v23 = *v22;
      v24 = v22[1];
      v25 = *(_QWORD *)(v10 + 56) + v21;
      v5 = *(_QWORD *)v25;
      v26 = *(_BYTE *)(v25 + 8);
      v27 = *v22 == a2 && v24 == (_QWORD)v8;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if ((v26 & 1) != 0)
          goto LABEL_124;
        if (v5 != a1)
        {
          _StringGuts.grow(_:)(57);
          v94._countAndFlagsBits = 0xD000000000000014;
          v94._object = (void *)0x800000018230B0B0;
          String.append(_:)(v94);
          v95._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v95);
          swift_bridgeObjectRelease();
          v96._countAndFlagsBits = 0x2720646E612027;
          v96._object = (void *)0xE700000000000000;
          String.append(_:)(v96);
          v97._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v97);
          swift_bridgeObjectRelease();
          v98._object = (void *)0x800000018230B0D0;
          v98._countAndFlagsBits = 0xD000000000000017;
          String.append(_:)(v98);
          v99._countAndFlagsBits = a2;
          v99._object = v8;
          String.append(_:)(v99);
          v100._countAndFlagsBits = 39;
          v100._object = (void *)0xE100000000000000;
          String.append(_:)(v100);
          goto LABEL_126;
        }
LABEL_73:
        swift_bridgeObjectRelease();
        return swift_release();
      }
      if (v5 == a1)
        v28 = v26;
      else
        v28 = 1;
    }
    while ((v28 & 1) != 0);
    if ((a4 & 1) == 0)
      goto LABEL_73;
    v5 = *(_QWORD *)(v6 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
    v31 = v30;
    swift_bridgeObjectRelease();
    if ((v31 & 1) != 0)
      break;
LABEL_10:
    swift_bridgeObjectRelease();
  }
  v32 = swift_isUniquelyReferenced_nonNull_native();
  v33 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(v6 + 8) = 0x8000000000000000;
  if ((v32 & 1) != 0)
  {
    v15 = v33;
LABEL_9:
    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v29, v15);
    v5 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)(v6 + 8) = v15;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  v34 = static _DictionaryStorage.copy(original:)();
  v15 = v34;
  if (!*(_QWORD *)(v33 + 16))
  {
LABEL_70:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v35 = (char *)(v34 + 64);
  v36 = (char *)(v33 + 64);
  v37 = (unint64_t)((1 << *(_BYTE *)(v15 + 32)) + 63) >> 6;
  v101 = v33 + 64;
  if (v15 != v33 || v35 >= &v36[8 * v37])
    memmove(v35, v36, 8 * v37);
  v38 = 0;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v33 + 16);
  v39 = 1 << *(_BYTE *)(v33 + 32);
  if (v39 < 64)
    v40 = ~(-1 << v39);
  else
    v40 = -1;
  v41 = v40 & *(_QWORD *)(v33 + 64);
  v102 = (unint64_t)(v39 + 63) >> 6;
  while (2)
  {
    if (v41)
    {
      v103 = (v41 - 1) & v41;
      v104 = v38;
      v42 = __clz(__rbit64(v41)) | (v38 << 6);
LABEL_48:
      v43 = 16 * v42;
      v44 = (uint64_t *)(*(_QWORD *)(v33 + 48) + v43);
      v46 = *v44;
      v45 = v44[1];
      v47 = *(_QWORD *)(v33 + 56) + v43;
      v48 = *(_QWORD *)v47;
      LOBYTE(v47) = *(_BYTE *)(v47 + 8);
      v49 = (_QWORD *)(*(_QWORD *)(v15 + 48) + v43);
      *v49 = v46;
      v49[1] = v45;
      v50 = *(_QWORD *)(v15 + 56) + v43;
      *(_QWORD *)v50 = v48;
      *(_BYTE *)(v50 + 8) = v47;
      swift_bridgeObjectRetain();
      v41 = v103;
      v38 = v104;
      continue;
    }
    break;
  }
  v51 = v38 + 1;
  if (__OFADD__(v38, 1))
  {
    __break(1u);
    goto LABEL_121;
  }
  if (v51 >= v102)
    goto LABEL_70;
  v52 = *(_QWORD *)(v101 + 8 * v51);
  v53 = v38 + 1;
  if (v52)
    goto LABEL_69;
  v53 = v38 + 2;
  if (v38 + 2 >= v102)
    goto LABEL_70;
  v52 = *(_QWORD *)(v101 + 8 * v53);
  if (v52)
    goto LABEL_69;
  v53 = v38 + 3;
  if (v38 + 3 >= v102)
    goto LABEL_70;
  v52 = *(_QWORD *)(v101 + 8 * v53);
  if (v52)
    goto LABEL_69;
  v53 = v38 + 4;
  if (v38 + 4 >= v102)
    goto LABEL_70;
  v52 = *(_QWORD *)(v101 + 8 * v53);
  if (v52)
    goto LABEL_69;
  v53 = v38 + 5;
  if (v38 + 5 >= v102)
    goto LABEL_70;
  v52 = *(_QWORD *)(v101 + 8 * v53);
  if (v52)
    goto LABEL_69;
  v53 = v38 + 6;
  if (v38 + 6 >= v102)
    goto LABEL_70;
  v52 = *(_QWORD *)(v101 + 8 * v53);
  if (v52)
  {
LABEL_69:
    v103 = (v52 - 1) & v52;
    v104 = v53;
    v42 = __clz(__rbit64(v52)) + (v53 << 6);
    goto LABEL_48;
  }
  v54 = v38 + 7;
  if (v38 + 7 >= v102)
    goto LABEL_70;
  v52 = *(_QWORD *)(v101 + 8 * v54);
  if (v52)
  {
    v53 = v38 + 7;
    goto LABEL_69;
  }
  while (1)
  {
    v53 = v54 + 1;
    if (__OFADD__(v54, 1))
      break;
    if (v53 >= v102)
      goto LABEL_70;
    v52 = *(_QWORD *)(v101 + 8 * v53);
    ++v54;
    if (v52)
      goto LABEL_69;
  }
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  _StringGuts.grow(_:)(75);
  v87._countAndFlagsBits = 0xD000000000000021;
  v87._object = (void *)0x800000018230B130;
  String.append(_:)(v87);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  swift_getAtKeyPath();
  swift_release();
  v88._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v88);
  swift_bridgeObjectRelease();
  v89._countAndFlagsBits = 0x797420646E612027;
  v89._object = (void *)0xEC00000027206570;
  String.append(_:)(v89);
  v90._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v90);
  swift_bridgeObjectRelease();
  v91._object = (void *)0x800000018230B0D0;
  v91._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v91);
  v92._countAndFlagsBits = a2;
  v92._object = v8;
  String.append(_:)(v92);
  v93._countAndFlagsBits = 39;
  v93._object = (void *)0xE100000000000000;
  String.append(_:)(v93);
LABEL_126:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_127:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t PredicateCodableConfiguration.disallowType(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = swift_bridgeObjectRetain();
  v4 = specialized _NativeDictionary.filter(_:)(v3, a1);
  result = swift_bridgeObjectRelease_n();
  *(_QWORD *)(v1 + 8) = v4;
  return result;
}

uint64_t *PredicateCodableConfiguration.disallowPartialType(_:)(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  if ((unint64_t)*result > 0x7FF || ((unint64_t)(v2 - 512) >= 3 ? (v3 = v2 == 0) : (v3 = 1), v3))
  {
    v4 = TypeMetadata.descriptor.getter();
    v5 = swift_bridgeObjectRetain();
    v6 = specialized _NativeDictionary.filter(_:)(v5, v4);
    result = (uint64_t *)swift_bridgeObjectRelease_n();
    *(_QWORD *)(v1 + 8) = v6;
  }
  return result;
}

uint64_t PredicateCodableConfiguration.disallowKeyPath(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v2 = v1;
  AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
  swift_retain();
  v4 = swift_bridgeObjectRetain();
  v5 = specialized _NativeDictionary.filter(_:)(v4, a1);
  swift_bridgeObjectRelease_n();
  result = swift_release();
  *v2 = v5;
  return result;
}

uint64_t PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t countAndFlagsBits;
  uint64_t *object;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v33;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  int64_t v66;
  unint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v73;
  uint64_t v74;
  _BOOL8 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  _QWORD *v96;
  uint64_t v97;
  int64_t v98;
  unint64_t v99;
  int64_t v100;
  int64_t v101;
  Swift::String v102;
  Swift::String v103;
  Swift::String v104;
  Swift::String v105;
  Swift::String v106;
  Swift::String v107;
  Swift::String v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t i;
  uint64_t *v139;
  void *v140;
  uint64_t v142;
  uint64_t v143;
  int64_t v144;
  void *__src;
  char *__srca;
  uint64_t v147;
  int64_t v148;
  uint64_t v149;
  unint64_t v150;
  Swift::String v151;
  uint64_t v152;
  _QWORD v153[5];
  char v154;

  v11 = a5;
  v12 = a4;
  v153[0] = a1;
  v153[1] = a6;
  v153[2] = a7;
  v153[3] = a4;
  v153[4] = a5;
  v154 = 1;
  v15 = *v7;
  v143 = v15 + 64;
  v16 = 1 << *(_BYTE *)(v15 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & *(_QWORD *)(v15 + 64);
  __src = (void *)((unint64_t)(v16 + 63) >> 6);
  swift_retain();
  v140 = (void *)v11;
  swift_bridgeObjectRetain();
  v147 = v15;
  swift_bridgeObjectRetain();
  countAndFlagsBits = a2;
  object = (uint64_t *)a3;
  v149 = 0;
  v151._countAndFlagsBits = a2;
  v151._object = (void *)a3;
  for (i = v12; ; v12 = i)
  {
    while (1)
    {
      do
      {
        if (v18)
        {
          v21 = __clz(__rbit64(v18));
          v18 &= v18 - 1;
          v22 = v21 | (v149 << 6);
          goto LABEL_21;
        }
        v23 = v149 + 1;
        if (__OFADD__(v149, 1))
        {
          __break(1u);
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }
        if (v23 >= (uint64_t)__src)
          goto LABEL_86;
        v24 = *(_QWORD *)(v143 + 8 * v23);
        v25 = v149 + 1;
        if (v24)
          goto LABEL_20;
        v25 = v149 + 2;
        if (v149 + 2 >= (uint64_t)__src)
          goto LABEL_86;
        v24 = *(_QWORD *)(v143 + 8 * v25);
        if (v24)
          goto LABEL_20;
        v25 = v149 + 3;
        if (v149 + 3 >= (uint64_t)__src)
          goto LABEL_86;
        v24 = *(_QWORD *)(v143 + 8 * v25);
        if (v24)
          goto LABEL_20;
        v26 = v149 + 4;
        if (v149 + 4 >= (uint64_t)__src)
        {
LABEL_86:
          swift_release();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v9 = v139;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v152 = *v139;
          v8 = *v139;
          *v139 = 0x8000000000000000;
          a3 = specialized __RawDictionaryStorage.find<A>(_:)(v151._countAndFlagsBits, (uint64_t)v151._object);
          v74 = *(_QWORD *)(v8 + 16);
          v75 = (v73 & 1) == 0;
          v76 = v74 + v75;
          if (!__OFADD__(v74, v75))
          {
            v11 = v73;
            if (*(_QWORD *)(v8 + 24) < v76)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v76, isUniquelyReferenced_nonNull_native);
              v77 = v152;
              v78 = specialized __RawDictionaryStorage.find<A>(_:)(v151._countAndFlagsBits, (uint64_t)v151._object);
              if ((v11 & 1) != (v79 & 1))
                goto LABEL_139;
              a3 = v78;
              if ((v11 & 1) == 0)
                goto LABEL_130;
              goto LABEL_93;
            }
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v77 = v8;
              if ((v73 & 1) == 0)
                goto LABEL_130;
              goto LABEL_93;
            }
LABEL_97:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
            v80 = static _DictionaryStorage.copy(original:)();
            v77 = v80;
            if (!*(_QWORD *)(v8 + 16))
              goto LABEL_129;
            v81 = (char *)(v80 + 64);
            __srca = (char *)(v8 + 64);
            v82 = (unint64_t)((1 << *(_BYTE *)(v77 + 32)) + 63) >> 6;
            v142 = v77;
            if (v77 != v8 || v81 >= &__srca[8 * v82])
              memmove(v81, __srca, 8 * v82);
            *(_QWORD *)(v77 + 16) = *(_QWORD *)(v8 + 16);
            v83 = 1 << *(_BYTE *)(v8 + 32);
            v84 = -1;
            if (v83 < 64)
              v84 = ~(-1 << v83);
            v148 = 0;
            v150 = v84 & *(_QWORD *)(v8 + 64);
            v144 = (unint64_t)(v83 + 63) >> 6;
            while (1)
            {
              v9 = v139;
              if (v150)
              {
                v85 = __clz(__rbit64(v150));
                v150 &= v150 - 1;
                v86 = v85 | (v148 << 6);
              }
              else
              {
                v98 = v148 + 1;
                if (__OFADD__(v148, 1))
                {
LABEL_133:
                  __break(1u);
                  goto LABEL_134;
                }
                if (v98 >= v144)
                  goto LABEL_129;
                v99 = *(_QWORD *)&__srca[8 * v98];
                v100 = v148 + 1;
                if (!v99)
                {
                  v100 = v148 + 2;
                  if (v148 + 2 >= v144)
                    goto LABEL_129;
                  v99 = *(_QWORD *)&__srca[8 * v100];
                  if (!v99)
                  {
                    v100 = v148 + 3;
                    if (v148 + 3 >= v144)
                      goto LABEL_129;
                    v99 = *(_QWORD *)&__srca[8 * v100];
                    if (!v99)
                    {
                      v100 = v148 + 4;
                      if (v148 + 4 >= v144)
                        goto LABEL_129;
                      v99 = *(_QWORD *)&__srca[8 * v100];
                      if (!v99)
                      {
                        v100 = v148 + 5;
                        if (v148 + 5 >= v144)
                          goto LABEL_129;
                        v99 = *(_QWORD *)&__srca[8 * v100];
                        if (!v99)
                        {
                          v100 = v148 + 6;
                          if (v148 + 6 >= v144)
                            goto LABEL_129;
                          v99 = *(_QWORD *)&__srca[8 * v100];
                          if (!v99)
                          {
                            v100 = v148 + 7;
                            if (v148 + 7 >= v144)
                              goto LABEL_129;
                            v99 = *(_QWORD *)&__srca[8 * v100];
                            if (!v99)
                            {
                              v101 = v148 + 8;
                              if (v148 + 8 >= v144)
                                goto LABEL_129;
                              v99 = *(_QWORD *)&__srca[8 * v101];
                              if (!v99)
                              {
                                while (1)
                                {
                                  v100 = v101 + 1;
                                  if (__OFADD__(v101, 1))
                                    goto LABEL_135;
                                  v77 = v142;
                                  v9 = v139;
                                  if (v100 >= v144)
                                    break;
                                  v99 = *(_QWORD *)&__srca[8 * v100];
                                  ++v101;
                                  if (v99)
                                    goto LABEL_128;
                                }
LABEL_129:
                                swift_bridgeObjectRelease();
                                if ((v11 & 1) == 0)
                                {
LABEL_130:
                                  specialized _NativeDictionary._insert(at:key:value:)(a3, v151._countAndFlagsBits, (uint64_t)v151._object, (uint64_t)v153, (_QWORD *)v77);
                                  swift_bridgeObjectRetain();
                                  goto LABEL_131;
                                }
LABEL_93:
                                outlined assign with take of PredicateCodableConfiguration.AllowListKeyPath((uint64_t)v153, *(_QWORD *)(v77 + 56) + 48 * a3);
LABEL_131:
                                *v9 = v77;
                                swift_bridgeObjectRelease();
                                swift_release();
                                swift_bridgeObjectRelease();
                                return swift_bridgeObjectRelease();
                              }
                              v100 = v148 + 8;
                              v77 = v142;
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_128:
                v148 = v100;
                v150 = (v99 - 1) & v99;
                v86 = __clz(__rbit64(v99)) + (v100 << 6);
              }
              v87 = 16 * v86;
              v88 = *(_QWORD *)(v8 + 56);
              v89 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v86);
              v90 = v89[1];
              v91 = 48 * v86;
              v92 = *(_QWORD *)(v88 + v91);
              v93 = *(_QWORD *)(v88 + v91 + 8);
              v94 = *(_QWORD *)(v88 + v91 + 16);
              v12 = *(_QWORD *)(v88 + v91 + 24);
              v10 = *(void **)(v88 + v91 + 32);
              v95 = *(_BYTE *)(v88 + v91 + 40);
              v96 = (_QWORD *)(*(_QWORD *)(v77 + 48) + v87);
              *v96 = *v89;
              v96[1] = v90;
              v97 = *(_QWORD *)(v77 + 56) + v91;
              *(_QWORD *)v97 = v92;
              *(_QWORD *)(v97 + 8) = v93;
              *(_QWORD *)(v97 + 16) = v94;
              *(_QWORD *)(v97 + 24) = v12;
              *(_QWORD *)(v97 + 32) = v10;
              *(_BYTE *)(v97 + 40) = v95;
              swift_bridgeObjectRetain();
              outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v92, v93, v94, v12, (uint64_t)v10, v95);
            }
          }
LABEL_96:
          __break(1u);
          goto LABEL_97;
        }
        v24 = *(_QWORD *)(v143 + 8 * v26);
        if (!v24)
        {
          while (1)
          {
            v25 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_95;
            if (v25 >= (uint64_t)__src)
              goto LABEL_86;
            v24 = *(_QWORD *)(v143 + 8 * v25);
            ++v26;
            if (v24)
              goto LABEL_20;
          }
        }
        v25 = v149 + 4;
LABEL_20:
        v18 = (v24 - 1) & v24;
        v149 = v25;
        v22 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_21:
        v27 = (uint64_t *)(*(_QWORD *)(v147 + 48) + 16 * v22);
        v28 = *v27;
        v9 = (uint64_t *)v27[1];
        v29 = *(_QWORD *)(v147 + 56) + 48 * v22;
        a3 = *(_QWORD *)v29;
        v8 = *(_QWORD *)(v29 + 8);
        v30 = *(_QWORD *)(v29 + 16);
        v11 = *(_QWORD *)(v29 + 24);
        v10 = *(void **)(v29 + 32);
        v31 = *(unsigned __int8 *)(v29 + 40);
        if (*v27 != countAndFlagsBits || v9 != object)
        {
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          object = (uint64_t *)v151._object;
          countAndFlagsBits = v151._countAndFlagsBits;
          if ((v33 & 1) == 0)
            continue;
        }
        if ((v31 & 1) == 0)
        {
          outlined copy of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 0);
          swift_retain();
          _StringGuts.grow(_:)(57);
          v114._object = (void *)0x800000018230B0B0;
          v114._countAndFlagsBits = 0xD000000000000014;
          String.append(_:)(v114);
          v115._countAndFlagsBits = AnyKeyPath.debugDescription.getter();
          String.append(_:)(v115);
          swift_bridgeObjectRelease();
          v116._countAndFlagsBits = 0x2720646E612027;
          v116._object = (void *)0xE700000000000000;
          String.append(_:)(v116);
          swift_getKeyPath();
          dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          swift_getAtKeyPath();
          swift_release();
          v117._countAndFlagsBits = String.init(cString:)();
          String.append(_:)(v117);
          swift_bridgeObjectRelease();
          v118._countAndFlagsBits = 46;
          v118._object = (void *)0xE100000000000000;
          String.append(_:)(v118);
          v119._countAndFlagsBits = v12;
          v119._object = v140;
          String.append(_:)(v119);
          v120._countAndFlagsBits = 92;
          v120._object = (void *)0xE100000000000000;
          String.append(_:)(v120);
          swift_bridgeObjectRelease();
          v121._countAndFlagsBits = 0xD000000000000017;
          v121._object = (void *)0x800000018230B0D0;
          String.append(_:)(v121);
          String.append(_:)(v151);
          v122._countAndFlagsBits = 39;
          v122._object = (void *)0xE100000000000000;
          String.append(_:)(v122);
          goto LABEL_138;
        }
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
        if (a3 != a1)
          goto LABEL_136;
        if (v11 == v12 && v10 == v140)
        {
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v12, (uint64_t)v140, 1);
        }
        else
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_136;
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
        }
        swift_bridgeObjectRelease();
        return swift_release();
      }
      while (!v31);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
      swift_bridgeObjectRetain();
      swift_release();
      if (a3 != a1)
      {
        outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
      if (v11 == v12 && v10 == v140)
        break;
      v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v35 & 1) != 0)
        goto LABEL_37;
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
LABEL_29:
      swift_bridgeObjectRelease();
      object = (uint64_t *)v151._object;
      countAndFlagsBits = v151._countAndFlagsBits;
    }
    swift_bridgeObjectRelease();
LABEL_37:
    v12 = (uint64_t)v139;
    swift_bridgeObjectRetain();
    v137 = specialized __RawDictionaryStorage.find<A>(_:)(v28, (uint64_t)v9);
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((v37 & 1) != 0)
      break;
    swift_bridgeObjectRelease();
LABEL_42:
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(a3, v8, v30, v11, (uint64_t)v10, 1);
    object = (uint64_t *)v151._object;
    countAndFlagsBits = v151._countAndFlagsBits;
  }
  v38 = swift_isUniquelyReferenced_nonNull_native();
  v39 = *v139;
  *v139 = 0x8000000000000000;
  if ((v38 & 1) != 0)
  {
    v40 = v39;
LABEL_40:
    swift_bridgeObjectRelease();
    v41 = *(_QWORD *)(v40 + 56) + 48 * v137;
    v42 = *(_QWORD *)v41;
    v133 = *(_QWORD *)(v41 + 16);
    v135 = *(_QWORD *)(v41 + 8);
    v129 = *(_QWORD *)(v41 + 32);
    v131 = *(_QWORD *)(v41 + 24);
    v127 = *(_BYTE *)(v41 + 40);
    specialized _NativeDictionary._delete(at:)(v137, v40);
    *v139 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v42, v135, v133, v131, v129, v127);
    goto LABEL_42;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
  v43 = static _DictionaryStorage.copy(original:)();
  v126 = v43;
  if (!*(_QWORD *)(v39 + 16))
  {
LABEL_75:
    swift_bridgeObjectRelease();
    v40 = v126;
    goto LABEL_40;
  }
  v44 = v43;
  v45 = (char *)(v43 + 64);
  v46 = (char *)(v39 + 64);
  v47 = (unint64_t)((1 << *(_BYTE *)(v44 + 32)) + 63) >> 6;
  v123 = v39 + 64;
  if (v44 != v39 || v45 >= &v46[8 * v47])
  {
    memmove(v45, v46, 8 * v47);
    v44 = v126;
  }
  v48 = 0;
  *(_QWORD *)(v44 + 16) = *(_QWORD *)(v39 + 16);
  v49 = 1 << *(_BYTE *)(v39 + 32);
  if (v49 < 64)
    v50 = ~(-1 << v49);
  else
    v50 = -1;
  v51 = v50 & *(_QWORD *)(v39 + 64);
  v124 = (unint64_t)(v49 + 63) >> 6;
  v125 = v39;
  while (2)
  {
    if (v51)
    {
      v134 = v48;
      v136 = (v51 - 1) & v51;
      v52 = __clz(__rbit64(v51)) | (v48 << 6);
      v54 = v125;
      v53 = v126;
LABEL_52:
      v55 = 16 * v52;
      v56 = (uint64_t *)(*(_QWORD *)(v54 + 48) + 16 * v52);
      v58 = *v56;
      v57 = v56[1];
      v59 = 48 * v52;
      v60 = *(_QWORD *)(v54 + 56) + v59;
      v12 = *(_QWORD *)v60;
      v61 = *(_QWORD *)(v60 + 8);
      v62 = *(_QWORD *)(v60 + 16);
      v130 = *(_QWORD *)(v60 + 32);
      v132 = *(_QWORD *)(v60 + 24);
      v63 = *(_BYTE *)(v60 + 40);
      v128 = v63;
      v64 = (_QWORD *)(*(_QWORD *)(v53 + 48) + v55);
      *v64 = v58;
      v64[1] = v57;
      v65 = *(_QWORD *)(v53 + 56) + v59;
      *(_QWORD *)v65 = v12;
      *(_QWORD *)(v65 + 8) = v61;
      *(_QWORD *)(v65 + 16) = v62;
      *(_QWORD *)(v65 + 24) = v132;
      *(_QWORD *)(v65 + 32) = v130;
      *(_BYTE *)(v65 + 40) = v63;
      swift_bridgeObjectRetain();
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v12, v61, v62, v132, v130, v128);
      v48 = v134;
      v51 = v136;
      continue;
    }
    break;
  }
  v66 = v48 + 1;
  v54 = v125;
  v53 = v126;
  if (__OFADD__(v48, 1))
  {
    __break(1u);
    goto LABEL_133;
  }
  if (v66 >= v124)
    goto LABEL_75;
  v67 = *(_QWORD *)(v123 + 8 * v66);
  v68 = v48 + 1;
  if (v67)
    goto LABEL_74;
  v68 = v48 + 2;
  if (v48 + 2 >= v124)
    goto LABEL_75;
  v67 = *(_QWORD *)(v123 + 8 * v68);
  if (v67)
    goto LABEL_74;
  v68 = v48 + 3;
  if (v48 + 3 >= v124)
    goto LABEL_75;
  v67 = *(_QWORD *)(v123 + 8 * v68);
  if (v67)
    goto LABEL_74;
  v68 = v48 + 4;
  if (v48 + 4 >= v124)
    goto LABEL_75;
  v67 = *(_QWORD *)(v123 + 8 * v68);
  if (v67)
    goto LABEL_74;
  v68 = v48 + 5;
  if (v48 + 5 >= v124)
    goto LABEL_75;
  v67 = *(_QWORD *)(v123 + 8 * v68);
  if (v67)
    goto LABEL_74;
  v68 = v48 + 6;
  if (v48 + 6 >= v124)
    goto LABEL_75;
  v67 = *(_QWORD *)(v123 + 8 * v68);
  if (v67)
  {
LABEL_74:
    v134 = v68;
    v136 = (v67 - 1) & v67;
    v52 = __clz(__rbit64(v67)) + (v68 << 6);
    goto LABEL_52;
  }
  v69 = v48 + 7;
  if (v48 + 7 >= v124)
    goto LABEL_75;
  v67 = *(_QWORD *)(v123 + 8 * v69);
  if (v67)
  {
    v68 = v48 + 7;
    v54 = v125;
    v53 = v126;
    goto LABEL_74;
  }
  v54 = v125;
  v53 = v126;
  while (1)
  {
    v68 = v69 + 1;
    if (__OFADD__(v69, 1))
      break;
    if (v68 >= v124)
      goto LABEL_75;
    v67 = *(_QWORD *)(v123 + 8 * v68);
    ++v69;
    if (v67)
      goto LABEL_74;
  }
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  _StringGuts.grow(_:)(57);
  v102._object = (void *)0x800000018230B0B0;
  v102._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v102);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  swift_getAtKeyPath();
  swift_release();
  v103._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v103);
  swift_bridgeObjectRelease();
  v104._countAndFlagsBits = 46;
  v104._object = (void *)0xE100000000000000;
  String.append(_:)(v104);
  v105._countAndFlagsBits = v11;
  v105._object = v10;
  String.append(_:)(v105);
  v106._countAndFlagsBits = 92;
  v106._object = (void *)0xE100000000000000;
  String.append(_:)(v106);
  swift_bridgeObjectRelease();
  v107._countAndFlagsBits = 0x2720646E612027;
  v107._object = (void *)0xE700000000000000;
  String.append(_:)(v107);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  swift_getAtKeyPath();
  swift_release();
  v108._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v108);
  swift_bridgeObjectRelease();
  v109._countAndFlagsBits = 46;
  v109._object = (void *)0xE100000000000000;
  String.append(_:)(v109);
  v110._countAndFlagsBits = v12;
  v110._object = v140;
  String.append(_:)(v110);
  v111._countAndFlagsBits = 92;
  v111._object = (void *)0xE100000000000000;
  String.append(_:)(v111);
  swift_bridgeObjectRelease();
  v112._countAndFlagsBits = 0xD000000000000017;
  v112._object = (void *)0x800000018230B0D0;
  String.append(_:)(v112);
  String.append(_:)(v151);
  v113._countAndFlagsBits = 39;
  v113._object = (void *)0xE100000000000000;
  String.append(_:)(v113);
LABEL_138:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_139:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t PredicateCodableConfiguration.allowKeyPathsForPropertiesProvided<A>(by:recursive:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v6 = result;
  v7 = 0;
  v8 = result + 64;
  v9 = 1 << *(_BYTE *)(result + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(result + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
      goto LABEL_21;
    }
    v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v15 >= v12)
      return swift_release();
    v16 = *(_QWORD *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      v7 = v15 + 1;
      if (v15 + 1 >= v12)
        return swift_release();
      v16 = *(_QWORD *)(v8 + 8 * v7);
      if (!v16)
      {
        v7 = v15 + 2;
        if (v15 + 2 >= v12)
          return swift_release();
        v16 = *(_QWORD *)(v8 + 8 * v7);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_21:
    v18 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    v19 = *v18;
    v20 = (void *)v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v14);
    swift_retain();
    swift_bridgeObjectRetain();
    PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v21, v19, v20);
    swift_bridgeObjectRelease();
    if ((a2 & 1) != 0)
    {
      dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
      v23 = v22;
      v24 = swift_conformsToProtocol2();
      if (v24)
        v25 = v24;
      else
        v25 = 0;
      if (v24)
        v26 = v23;
      else
        v26 = 0;
      if (v26)
        PredicateCodableConfiguration.allowKeyPathsForPropertiesProvided<A>(by:recursive:)(v26, 1, v26, v25);
    }
    result = swift_release();
  }
  v17 = v15 + 3;
  if (v17 >= v12)
    return swift_release();
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v12)
      return swift_release();
    v16 = *(_QWORD *)(v8 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t PredicateCodableConfiguration.disallowKeyPathsForPropertiesProvided<A>(by:recursive:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = v4;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v8 = result;
  v9 = 0;
  v27 = result + 64;
  v10 = 1 << *(_BYTE *)(result + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(result + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_18;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v9 >= v13)
      return swift_release();
    v17 = *(_QWORD *)(v27 + 8 * v9);
    if (!v17)
      break;
LABEL_17:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_18:
    v19 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15);
    swift_retain();
    AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
    swift_retain();
    v20 = swift_bridgeObjectRetain();
    v21 = specialized _NativeDictionary.filter(_:)(v20, v19);
    swift_bridgeObjectRelease_n();
    swift_release();
    *v5 = v21;
    if ((a2 & 1) != 0)
    {
      dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
      v23 = v22;
      v24 = swift_conformsToProtocol2();
      if (v24)
        v25 = v24;
      else
        v25 = 0;
      if (v24)
        v26 = v23;
      else
        v26 = 0;
      if (v26)
        PredicateCodableConfiguration.disallowKeyPathsForPropertiesProvided<A>(by:recursive:)(v26, 1, v26, v25);
    }
    result = swift_release();
  }
  v18 = v9 + 1;
  if (v9 + 1 >= v13)
    return swift_release();
  v17 = *(_QWORD *)(v27 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v9 + 2;
  if (v9 + 2 >= v13)
    return swift_release();
  v17 = *(_QWORD *)(v27 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v9 + 3;
  if (v9 + 3 >= v13)
    return swift_release();
  v17 = *(_QWORD *)(v27 + 8 * v18);
  if (v17)
  {
LABEL_16:
    v9 = v18;
    goto LABEL_17;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      return swift_release();
    v17 = *(_QWORD *)(v27 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_17;
  }
LABEL_33:
  __break(1u);
  return result;
}

Swift::Void __swiftcall PredicateCodableConfiguration.allow(_:)(Foundation::PredicateCodableConfiguration a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;

  v1 = *((_QWORD *)a1.allowedKeyPaths._rawValue + 1);
  v39 = *(_QWORD *)a1.allowedKeyPaths._rawValue;
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_22;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v10 >= v6)
      goto LABEL_24;
    v11 = *(_QWORD *)(v2 + 8 * v10);
    ++v7;
    if (v11)
      goto LABEL_21;
    v7 = v10 + 1;
    if (v10 + 1 >= v6)
      goto LABEL_24;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    if (v11)
      goto LABEL_21;
    v7 = v10 + 2;
    if (v10 + 2 >= v6)
      goto LABEL_24;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    if (v11)
      goto LABEL_21;
    v12 = v10 + 3;
    if (v12 >= v6)
    {
LABEL_24:
      swift_release();
      v37 = v39 + 64;
      v19 = 1 << *(_BYTE *)(v39 + 32);
      v20 = -1;
      if (v19 < 64)
        v20 = ~(-1 << v19);
      v21 = v20 & *(_QWORD *)(v39 + 64);
      v38 = (unint64_t)(v19 + 63) >> 6;
      swift_bridgeObjectRetain();
      v22 = 0;
      if (v21)
        goto LABEL_29;
LABEL_30:
      v25 = v22 + 1;
      if (!__OFADD__(v22, 1))
      {
        if (v25 < v38)
        {
          v26 = *(_QWORD *)(v37 + 8 * v25);
          ++v22;
          if (v26)
            goto LABEL_43;
          v22 = v25 + 1;
          if (v25 + 1 < v38)
          {
            v26 = *(_QWORD *)(v37 + 8 * v22);
            if (v26)
              goto LABEL_43;
            v22 = v25 + 2;
            if (v25 + 2 < v38)
            {
              v26 = *(_QWORD *)(v37 + 8 * v22);
              if (v26)
                goto LABEL_43;
              v27 = v25 + 3;
              if (v27 < v38)
              {
                v26 = *(_QWORD *)(v37 + 8 * v27);
                if (!v26)
                {
                  while (1)
                  {
                    v22 = v27 + 1;
                    if (__OFADD__(v27, 1))
                      goto LABEL_51;
                    if (v22 >= v38)
                      goto LABEL_47;
                    v26 = *(_QWORD *)(v37 + 8 * v22);
                    ++v27;
                    if (v26)
                      goto LABEL_43;
                  }
                }
                v22 = v27;
LABEL_43:
                v21 = (v26 - 1) & v26;
                for (i = __clz(__rbit64(v26)) + (v22 << 6); ; i = v23 | (v22 << 6))
                {
                  v28 = (uint64_t *)(*(_QWORD *)(v39 + 48) + 16 * i);
                  v30 = *v28;
                  v29 = (void *)v28[1];
                  v31 = *(_QWORD *)(v39 + 56) + 48 * i;
                  v33 = *(_QWORD *)v31;
                  v32 = *(_QWORD *)(v31 + 8);
                  v34 = *(_QWORD *)(v31 + 16);
                  v35 = *(_QWORD *)(v31 + 24);
                  v36 = *(_QWORD *)(v31 + 32);
                  if ((*(_BYTE *)(v31 + 40) & 1) != 0)
                  {
                    swift_bridgeObjectRetain();
                    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v33, v32, v34, v35, v36, 1);
                    swift_retain();
                    swift_bridgeObjectRetain();
                    PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v33, v30, (unint64_t)v29, v35, v36, v32, v34);
                    swift_bridgeObjectRelease();
                    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v33, v32, v34, v35, v36, 1);
                    swift_release();
                    swift_bridgeObjectRelease();
                    if (!v21)
                      goto LABEL_30;
                  }
                  else
                  {
                    swift_bridgeObjectRetain();
                    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v33, v32, v34, v35, v36, 0);
                    PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v33, v30, v29);
                    swift_bridgeObjectRelease();
                    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v33, v32, v34, v35, v36, 0);
                    if (!v21)
                      goto LABEL_30;
                  }
LABEL_29:
                  v23 = __clz(__rbit64(v21));
                  v21 &= v21 - 1;
                }
              }
            }
          }
        }
LABEL_47:
        swift_release();
        return;
      }
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v11 = *(_QWORD *)(v2 + 8 * v12);
    if (!v11)
      break;
    v7 = v12;
LABEL_21:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_22:
    v13 = 16 * v9;
    v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + v13);
    v16 = *v14;
    v15 = (void *)v14[1];
    v17 = *(_QWORD *)(v1 + 56) + v13;
    v18 = *(_QWORD *)v17;
    if ((*(_BYTE *)(v17 + 8) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      PredicateCodableConfiguration._allowPartialType(_:identifier:)(v18, v16, v15);
    }
    else
    {
      swift_bridgeObjectRetain();
      PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v18, v16, v15, 1);
    }
    swift_bridgeObjectRelease();
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_24;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
}

uint64_t closure #1 in PredicateCodableConfiguration._identifier(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    return 0;
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 16);
  type metadata accessor for AnyKeyPath();
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v8, v7, v6, v5, v4, 0);
  swift_retain();
  v9 = MEMORY[0x186DA51E0](v8, a2);
  swift_release();
  outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v8, v7, v6, v5, v4, 0);
  return v9 & 1;
}

_QWORD *key path getter for Collection.first : Substring@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((result[1] ^ *result) >= 0x4000)
  {
    swift_bridgeObjectRetain();
    v3 = Substring.subscript.getter();
    v4 = v5;
    result = (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t key path getter for Collection.first : String@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain();
  v7 = a2(v5, v6);
  v9 = v8;
  result = swift_bridgeObjectRelease();
  *a3 = v7;
  a3[1] = v9;
  return result;
}

_QWORD *key path getter for BidirectionalCollection.last : Substring@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((result[1] ^ *result) >= 0x4000)
  {
    swift_bridgeObjectRetain();
    Substring.index(before:)();
    v3 = Substring.subscript.getter();
    v4 = v5;
    result = (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

{
  if (!a2)
    return 0;
  if (a2 < 1)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](result);
    return swift_getKeyPath();
  }
  return result;
}

uint64_t closure #2 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

uint64_t key path getter for Collection.isEmpty : <A>[A]@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for Array();
  MEMORY[0x186DA9D64](MEMORY[0x1E0DEAF50], v2);
  result = Collection.isEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t closure #3 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

uint64_t closure #4 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

uint64_t key path getter for Collection.first : <A>[A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for Array();
  v8 = MEMORY[0x186DA9D64](a4, v7);
  return a5(v7, v8);
}

uint64_t *closure #5 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t *result, uint64_t a2)
{
  return closure #5 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    if (a2 < 1)
    {
      __break(1u);
      return result;
    }
    v2 = *result;
    v3 = swift_conformsToProtocol2();
    if (v3)
      v4 = v2;
    else
      v4 = 0;
    if (v4)
    {
      MEMORY[0x1E0C80A78](v3);
      return (uint64_t *)swift_getKeyPath();
    }
  }
  return 0;
}

uint64_t *closure #6 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t *result, uint64_t a2)
{
  return closure #5 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

uint64_t *closure #7 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t *result, uint64_t a2)
{
  return closure #7 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 < 0)
  {
    __break(1u);
  }
  else if (a2 == 2)
  {
    v2 = *result;
    v3 = swift_conformsToProtocol2();
    if (v3)
      v4 = v2;
    else
      v4 = 0;
    if (v4)
    {
      MEMORY[0x1E0C80A78](v3);
      return (uint64_t *)swift_getKeyPath();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t *closure #8 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t *result, uint64_t a2)
{
  return closure #7 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

uint64_t static PredicateCodableConfiguration.standardConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  if (one-time initialization token for standardConfiguration != -1)
    swift_once();
  v2 = qword_1EDC3C640;
  v3 = byte_1EDC3C648;
  *(_QWORD *)a1 = static PredicateCodableConfiguration.standardConfiguration;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for CodingUserInfoKey();
  v35 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 64;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v11 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v34 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v10;
      do
      {
        v14 = v7;
        v15 = v12;
        v16 = v12 * v9;
        v17 = v13;
        v33(v6, *(_QWORD *)(a2 + 48) + v12 * v9, v4);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v7 = v14;
            if (v15 * a1 < v16
              || (v12 = v15, *(_QWORD *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v12 = v15;
              v13 = v17;
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v22 = *(_QWORD *)(a2 + 56);
            v23 = (_OWORD *)(v22 + 32 * a1);
            v24 = (_OWORD *)(v22 + 32 * v9);
            if (a1 != v9 || (a1 = v9, v23 >= v24 + 2))
            {
              v25 = v24[1];
              *v23 = *v24;
              v23[1] = v25;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v7 = v14;
        v12 = v15;
LABEL_5:
        v9 = (v9 + 1) & v13;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v26 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for CombineIdentifier();
  v30 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = -1 << *(_BYTE *)(a2 + 32);
  v8 = (a1 + 1) & ~v7;
  if (((1 << v8) & *(_QWORD *)(a2 + 64 + 8 * (v8 >> 6))) != 0)
  {
    v9 = ~v7;
    v31 = a2 + 64;
    v10 = _HashTable.previousHole(before:)();
    v11 = v31;
    if ((*(_QWORD *)(v31 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
    {
      v12 = (v10 + 1) & v9;
      v13 = *(_QWORD *)(v30 + 72);
      v29 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
      do
      {
        v14 = v13 * v8;
        v29(v6, *(_QWORD *)(a2 + 48) + v13 * v8, v4);
        lazy protocol witness table accessor for type CombineIdentifier and conformance CombineIdentifier();
        v15 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v4);
        v16 = v15 & v9;
        if (a1 >= (uint64_t)v12)
        {
          if (v16 >= v12 && a1 >= (uint64_t)v16)
          {
LABEL_17:
            if (v13 * a1 < v14
              || *(_QWORD *)(a2 + 48) + v13 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v14 + v13))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v13 * a1 != v14)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 16 * a1);
            v21 = (_OWORD *)(v19 + 16 * v8);
            v11 = v31;
            if (a1 != v8 || (a1 = v8, v20 >= v21 + 1))
            {
              *v20 = *v21;
              a1 = v8;
            }
            goto LABEL_5;
          }
        }
        else if (v16 >= v12 || a1 >= (uint64_t)v16)
        {
          goto LABEL_17;
        }
        v11 = v31;
LABEL_5:
        v8 = (v8 + 1) & v9;
      }
      while (((*(_QWORD *)(v11 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
    }
    v22 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v23 = *v22;
    v24 = (-1 << a1) - 1;
  }
  else
  {
    v22 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  size_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t result;
  char v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;
  Swift::Int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  int64_t v90;
  unint64_t v91;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  char v103;
  Swift::Int v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  BOOL v110;
  uint64_t v111;
  _QWORD v112[2];
  int64_t v113;
  unint64_t *v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  uint64_t v118;

  v3 = isStackAllocationSafe;
  v118 = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  v113 = (unint64_t)((1 << v4) + 63) >> 6;
  v5 = 8 * v113;
  v117 = isStackAllocationSafe;
  if ((v4 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v114 = (unint64_t *)swift_slowAlloc();
      bzero(v114, v5);
      v28 = 0;
      v29 = v3 + 64;
      v30 = 1 << *(_BYTE *)(v3 + 32);
      if (v30 < 64)
        v31 = ~(-1 << v30);
      else
        v31 = -1;
      v32 = v31 & *(_QWORD *)(v3 + 64);
      v115 = 0;
      v116 = (unint64_t)(v30 + 63) >> 6;
      while (1)
      {
        while (1)
        {
          if (v32)
          {
            v33 = __clz(__rbit64(v32));
            v32 &= v32 - 1;
            v34 = v33 | (v28 << 6);
          }
          else
          {
            v35 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_154;
            if (v35 >= v116)
              goto LABEL_80;
            v36 = *(_QWORD *)(v29 + 8 * v35);
            ++v28;
            if (!v36)
            {
              v28 = v35 + 1;
              if (v35 + 1 >= v116)
                goto LABEL_80;
              v36 = *(_QWORD *)(v29 + 8 * v28);
              if (!v36)
              {
                v28 = v35 + 2;
                if (v35 + 2 >= v116)
                  goto LABEL_80;
                v36 = *(_QWORD *)(v29 + 8 * v28);
                if (!v36)
                {
                  v28 = v35 + 3;
                  if (v35 + 3 >= v116)
                    goto LABEL_80;
                  v36 = *(_QWORD *)(v29 + 8 * v28);
                  if (!v36)
                  {
                    v37 = v35 + 4;
                    if (v37 >= v116)
                      goto LABEL_80;
                    v36 = *(_QWORD *)(v29 + 8 * v37);
                    if (!v36)
                    {
                      while (1)
                      {
                        v28 = v37 + 1;
                        if (__OFADD__(v37, 1))
                          goto LABEL_158;
                        if (v28 >= v116)
                          break;
                        v36 = *(_QWORD *)(v29 + 8 * v28);
                        ++v37;
                        if (v36)
                          goto LABEL_65;
                      }
LABEL_80:
                      v49 = v115;
                      if (!v115)
                      {
                        v3 = MEMORY[0x1E0DEE9E0];
                        goto LABEL_150;
                      }
                      if (v115 == *(_QWORD *)(v3 + 16))
                      {
                        swift_retain();
                        goto LABEL_150;
                      }
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
                      v81 = static _DictionaryStorage.allocate(capacity:)();
                      v82 = 0;
                      v83 = *v114;
                      v84 = v81 + 64;
                      while (1)
                      {
                        v115 = v49;
                        if (v83)
                        {
                          v89 = __clz(__rbit64(v83));
                          v83 &= v83 - 1;
                          v90 = v82;
                          v91 = v89 | (v82 << 6);
                        }
                        else
                        {
                          v92 = v82 + 1;
                          if (__OFADD__(v82, 1))
                            goto LABEL_157;
                          if (v92 >= v113)
                            goto LABEL_149;
                          v93 = v114[v92];
                          v94 = v82 + 1;
                          if (!v93)
                          {
                            v94 = v82 + 2;
                            if (v82 + 2 >= v113)
                              goto LABEL_149;
                            v93 = v114[v94];
                            if (!v93)
                            {
                              v94 = v82 + 3;
                              if (v82 + 3 >= v113)
                                goto LABEL_149;
                              v93 = v114[v94];
                              if (!v93)
                              {
                                v94 = v82 + 4;
                                if (v82 + 4 >= v113)
                                  goto LABEL_149;
                                v93 = v114[v94];
                                if (!v93)
                                {
                                  v94 = v82 + 5;
                                  if (v82 + 5 >= v113)
                                    goto LABEL_149;
                                  v93 = v114[v94];
                                  if (!v93)
                                  {
                                    v95 = v82 + 6;
                                    if (v82 + 6 >= v113)
                                      goto LABEL_149;
                                    v93 = v114[v95];
                                    if (!v93)
                                    {
                                      while (1)
                                      {
                                        v94 = v95 + 1;
                                        if (__OFADD__(v95, 1))
                                          goto LABEL_161;
                                        if (v94 >= v113)
                                          break;
                                        v93 = v114[v94];
                                        ++v95;
                                        if (v93)
                                          goto LABEL_139;
                                      }
LABEL_149:
                                      v3 = v81;
LABEL_150:
                                      MEMORY[0x186DA9E78](v114, -1, -1);
                                      return v3;
                                    }
                                    v94 = v82 + 6;
                                  }
                                }
                              }
                            }
                          }
LABEL_139:
                          v83 = (v93 - 1) & v93;
                          v90 = v94;
                          v91 = __clz(__rbit64(v93)) + (v94 << 6);
                        }
                        v96 = 16 * v91;
                        v97 = *(_QWORD *)(v3 + 56);
                        v98 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v96);
                        v100 = *v98;
                        v99 = v98[1];
                        v101 = (uint64_t *)(v97 + v96);
                        v102 = *v101;
                        v103 = *((_BYTE *)v101 + 8);
                        Hasher.init(_seed:)();
                        swift_bridgeObjectRetain();
                        String.hash(into:)();
                        v104 = Hasher._finalize()();
                        v105 = -1 << *(_BYTE *)(v81 + 32);
                        v106 = v104 & ~v105;
                        v107 = v106 >> 6;
                        if (((-1 << v106) & ~*(_QWORD *)(v84 + 8 * (v106 >> 6))) != 0)
                        {
                          v85 = __clz(__rbit64((-1 << v106) & ~*(_QWORD *)(v84 + 8 * (v106 >> 6)))) | v106 & 0x7FFFFFFFFFFFFFC0;
                        }
                        else
                        {
                          v108 = 0;
                          v109 = (unint64_t)(63 - v105) >> 6;
                          do
                          {
                            if (++v107 == v109 && (v108 & 1) != 0)
                              goto LABEL_153;
                            v110 = v107 == v109;
                            if (v107 == v109)
                              v107 = 0;
                            v108 |= v110;
                            v111 = *(_QWORD *)(v84 + 8 * v107);
                          }
                          while (v111 == -1);
                          v85 = __clz(__rbit64(~v111)) + (v107 << 6);
                        }
                        *(_QWORD *)(v84 + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v85;
                        v86 = 16 * v85;
                        v87 = (_QWORD *)(*(_QWORD *)(v81 + 48) + v86);
                        *v87 = v100;
                        v87[1] = v99;
                        v88 = *(_QWORD *)(v81 + 56) + v86;
                        *(_QWORD *)v88 = v102;
                        *(_BYTE *)(v88 + 8) = v103;
                        ++*(_QWORD *)(v81 + 16);
                        v49 = v115 - 1;
                        v3 = v117;
                        v82 = v90;
                        if (v115 == 1)
                          goto LABEL_149;
                      }
                    }
                    v28 = v37;
                  }
                }
              }
            }
LABEL_65:
            v32 = (v36 - 1) & v36;
            v34 = __clz(__rbit64(v36)) + (v28 << 6);
          }
          v38 = *(_QWORD *)(v3 + 56) + 16 * v34;
          v39 = *(uint64_t **)v38;
          if (*(_BYTE *)(v38 + 8) == 1)
            break;
          if (v39 != a2)
            goto LABEL_77;
        }
        v40 = *a2;
        if ((unint64_t)*a2 >= 0x800)
          goto LABEL_73;
        if ((unint64_t)(v40 - 513) < 2)
        {
          swift_getKeyPath();
          v41 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          v48 = v47;
          swift_release();
          if ((v48 & 1) != 0)
            goto LABEL_165;
          goto LABEL_76;
        }
        if (v40)
        {
          if (v40 == 512)
          {
            swift_getKeyPath();
            v41 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
            v43 = v42;
            result = swift_release();
            if ((v43 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            goto LABEL_76;
          }
LABEL_77:
          *(unint64_t *)((char *)v114 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
          v26 = __OFADD__(v115++, 1);
          if (v26)
          {
            __break(1u);
            goto LABEL_80;
          }
        }
        else
        {
LABEL_73:
          swift_getKeyPath();
          v41 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          v46 = v45;
          swift_release();
          if ((v46 & 1) != 0)
            goto LABEL_163;
LABEL_76:
          v3 = v117;
          if (*(uint64_t **)((char *)a2 + v41) != v39)
            goto LABEL_77;
        }
      }
    }
  }
  v112[1] = v112;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v114 = (_QWORD *)((char *)v112 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v114, v5);
  v6 = 0;
  v7 = v3 + 64;
  v8 = 1 << *(_BYTE *)(v3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v3 + 64);
  v115 = 0;
  v116 = (unint64_t)(v8 + 63) >> 6;
  do
  {
    do
    {
      while (1)
      {
        if (v10)
        {
          v11 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
          v12 = v11 | (v6 << 6);
        }
        else
        {
          v13 = v6 + 1;
          if (__OFADD__(v6, 1))
            goto LABEL_152;
          if (v13 >= v116)
            goto LABEL_39;
          v14 = *(_QWORD *)(v7 + 8 * v13);
          ++v6;
          if (!v14)
          {
            v6 = v13 + 1;
            if (v13 + 1 >= v116)
              goto LABEL_39;
            v14 = *(_QWORD *)(v7 + 8 * v6);
            if (!v14)
            {
              v6 = v13 + 2;
              if (v13 + 2 >= v116)
                goto LABEL_39;
              v14 = *(_QWORD *)(v7 + 8 * v6);
              if (!v14)
              {
                v6 = v13 + 3;
                if (v13 + 3 >= v116)
                  goto LABEL_39;
                v14 = *(_QWORD *)(v7 + 8 * v6);
                if (!v14)
                {
                  v15 = v13 + 4;
                  if (v15 >= v116)
                    goto LABEL_39;
                  v14 = *(_QWORD *)(v7 + 8 * v15);
                  if (!v14)
                  {
                    while (1)
                    {
                      v6 = v15 + 1;
                      if (__OFADD__(v15, 1))
                        break;
                      if (v6 >= v116)
                        goto LABEL_39;
                      v14 = *(_QWORD *)(v7 + 8 * v6);
                      ++v15;
                      if (v14)
                        goto LABEL_24;
                    }
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
                    goto LABEL_159;
                  }
                  v6 = v15;
                }
              }
            }
          }
LABEL_24:
          v10 = (v14 - 1) & v14;
          v12 = __clz(__rbit64(v14)) + (v6 << 6);
        }
        v16 = *(_QWORD *)(v3 + 56) + 16 * v12;
        v17 = *(uint64_t **)v16;
        if (*(_BYTE *)(v16 + 8) == 1)
          break;
        if (v17 != a2)
          goto LABEL_36;
      }
      v18 = *a2;
      if ((unint64_t)*a2 >= 0x800)
      {
LABEL_32:
        swift_getKeyPath();
        v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        v23 = v22;
        swift_release();
        if ((v23 & 1) != 0)
          goto LABEL_160;
        goto LABEL_35;
      }
      if ((unint64_t)(v18 - 513) < 2)
      {
        swift_getKeyPath();
        v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        v25 = v24;
        swift_release();
        if ((v25 & 1) != 0)
          goto LABEL_162;
      }
      else
      {
        if (!v18)
          goto LABEL_32;
        if (v18 != 512)
          break;
        swift_getKeyPath();
        v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        v21 = v20;
        swift_release();
        if ((v21 & 1) != 0)
          goto LABEL_164;
      }
LABEL_35:
      v3 = v117;
    }
    while (*(uint64_t **)((char *)a2 + v19) == v17);
LABEL_36:
    *(unint64_t *)((char *)v114 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v26 = __OFADD__(v115++, 1);
  }
  while (!v26);
  __break(1u);
LABEL_39:
  v27 = v115;
  if (!v115)
    return MEMORY[0x1E0DEE9E0];
  if (v115 == *(_QWORD *)(v3 + 16))
  {
    swift_retain();
    return v3;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  v50 = static _DictionaryStorage.allocate(capacity:)();
  v51 = 0;
  v52 = *v114;
  v53 = v50 + 64;
LABEL_86:
  v115 = v27;
  if (v52)
  {
    v58 = __clz(__rbit64(v52));
    v52 &= v52 - 1;
    v59 = v51;
    v60 = v58 | (v51 << 6);
    goto LABEL_106;
  }
  v61 = v51 + 1;
  if (__OFADD__(v51, 1))
    goto LABEL_155;
  if (v61 < v113)
  {
    v62 = v114[v61];
    v63 = v51 + 1;
    if (!v62)
    {
      v63 = v51 + 2;
      if (v51 + 2 >= v113)
        return v50;
      v62 = v114[v63];
      if (!v62)
      {
        v63 = v51 + 3;
        if (v51 + 3 >= v113)
          return v50;
        v62 = v114[v63];
        if (!v62)
        {
          v63 = v51 + 4;
          if (v51 + 4 >= v113)
            return v50;
          v62 = v114[v63];
          if (!v62)
          {
            v63 = v51 + 5;
            if (v51 + 5 >= v113)
              return v50;
            v62 = v114[v63];
            if (!v62)
            {
              v64 = v51 + 6;
              if (v51 + 6 >= v113)
                return v50;
              v62 = v114[v64];
              if (!v62)
              {
                while (1)
                {
                  v63 = v64 + 1;
                  if (__OFADD__(v64, 1))
                    break;
                  if (v63 >= v113)
                    return v50;
                  v62 = v114[v63];
                  ++v64;
                  if (v62)
                    goto LABEL_105;
                }
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
              }
              v63 = v51 + 6;
            }
          }
        }
      }
    }
LABEL_105:
    v52 = (v62 - 1) & v62;
    v59 = v63;
    v60 = __clz(__rbit64(v62)) + (v63 << 6);
LABEL_106:
    v65 = 16 * v60;
    v66 = *(_QWORD *)(v3 + 56);
    v67 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v65);
    v69 = *v67;
    v68 = v67[1];
    v70 = (uint64_t *)(v66 + v65);
    v71 = *v70;
    v72 = *((_BYTE *)v70 + 8);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v73 = Hasher._finalize()();
    v74 = -1 << *(_BYTE *)(v50 + 32);
    v75 = v73 & ~v74;
    v76 = v75 >> 6;
    if (((-1 << v75) & ~*(_QWORD *)(v53 + 8 * (v75 >> 6))) != 0)
    {
      v54 = __clz(__rbit64((-1 << v75) & ~*(_QWORD *)(v53 + 8 * (v75 >> 6)))) | v75 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_85;
    }
    v77 = 0;
    v78 = (unint64_t)(63 - v74) >> 6;
    while (++v76 != v78 || (v77 & 1) == 0)
    {
      v79 = v76 == v78;
      if (v76 == v78)
        v76 = 0;
      v77 |= v79;
      v80 = *(_QWORD *)(v53 + 8 * v76);
      if (v80 != -1)
      {
        v54 = __clz(__rbit64(~v80)) + (v76 << 6);
LABEL_85:
        *(_QWORD *)(v53 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v54;
        v55 = 16 * v54;
        v56 = (_QWORD *)(*(_QWORD *)(v50 + 48) + v55);
        *v56 = v69;
        v56[1] = v68;
        v57 = *(_QWORD *)(v50 + 56) + v55;
        *(_QWORD *)v57 = v71;
        *(_BYTE *)(v57 + 8) = v72;
        ++*(_QWORD *)(v50 + 16);
        v27 = v115 - 1;
        v3 = v117;
        v51 = v59;
        if (v115 == 1)
          return v50;
        goto LABEL_86;
      }
    }
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  return v50;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  size_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *DynamicType;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t result;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  unint64_t v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  Swift::Int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  int64_t v95;
  unint64_t v96;
  int64_t v97;
  unint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  Swift::Int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  BOOL v114;
  uint64_t v115;
  _QWORD v116[2];
  int64_t v117;
  unint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[3];
  uint64_t v125;
  uint64_t v126;

  v2 = a2;
  v3 = isStackAllocationSafe;
  v126 = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  v117 = (unint64_t)((1 << v4) + 63) >> 6;
  v5 = 8 * v117;
  v122 = a2;
  v123 = isStackAllocationSafe;
  if ((v4 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v118 = (unint64_t *)swift_slowAlloc();
      bzero(v118, v5);
      v31 = 0;
      v32 = *(_QWORD *)(v3 + 64);
      v119 = 0;
      v120 = v3 + 64;
      v33 = 1 << *(_BYTE *)(v3 + 32);
      if (v33 < 64)
        v34 = ~(-1 << v33);
      else
        v34 = -1;
      v35 = v34 & v32;
      v121 = (unint64_t)(v33 + 63) >> 6;
      v36 = MEMORY[0x1E0D842A8];
      while (1)
      {
        while (1)
        {
          if (v35)
          {
            v37 = __clz(__rbit64(v35));
            v35 &= v35 - 1;
            v38 = v37 | (v31 << 6);
          }
          else
          {
            v39 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_156;
            if (v39 >= v121)
              goto LABEL_82;
            v40 = *(_QWORD *)(v120 + 8 * v39);
            ++v31;
            if (!v40)
            {
              v31 = v39 + 1;
              if (v39 + 1 >= v121)
                goto LABEL_82;
              v40 = *(_QWORD *)(v120 + 8 * v31);
              if (!v40)
              {
                v31 = v39 + 2;
                if (v39 + 2 >= v121)
                  goto LABEL_82;
                v40 = *(_QWORD *)(v120 + 8 * v31);
                if (!v40)
                {
                  v31 = v39 + 3;
                  if (v39 + 3 >= v121)
                    goto LABEL_82;
                  v40 = *(_QWORD *)(v120 + 8 * v31);
                  if (!v40)
                  {
                    v41 = v39 + 4;
                    if (v41 >= v121)
                      goto LABEL_82;
                    v40 = *(_QWORD *)(v120 + 8 * v41);
                    if (!v40)
                    {
                      while (1)
                      {
                        v31 = v41 + 1;
                        if (__OFADD__(v41, 1))
                          goto LABEL_161;
                        if (v31 >= v121)
                          break;
                        v40 = *(_QWORD *)(v120 + 8 * v31);
                        ++v41;
                        if (v40)
                          goto LABEL_66;
                      }
LABEL_82:
                      v55 = v119;
                      if (!v119)
                      {
                        v3 = MEMORY[0x1E0DEE9E0];
                        goto LABEL_152;
                      }
                      if (v119 == *(_QWORD *)(v3 + 16))
                      {
                        swift_retain();
                        goto LABEL_152;
                      }
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
                      v86 = static _DictionaryStorage.allocate(capacity:)();
                      v87 = 0;
                      v88 = *v118;
                      v89 = v86 + 64;
                      while (1)
                      {
                        v119 = v55;
                        if (v88)
                        {
                          v94 = __clz(__rbit64(v88));
                          v88 &= v88 - 1;
                          v95 = v87;
                          v96 = v94 | (v87 << 6);
                        }
                        else
                        {
                          v97 = v87 + 1;
                          if (__OFADD__(v87, 1))
                            goto LABEL_160;
                          if (v97 >= v117)
                            goto LABEL_151;
                          v98 = v118[v97];
                          v99 = v87 + 1;
                          if (!v98)
                          {
                            v99 = v87 + 2;
                            if (v87 + 2 >= v117)
                              goto LABEL_151;
                            v98 = v118[v99];
                            if (!v98)
                            {
                              v99 = v87 + 3;
                              if (v87 + 3 >= v117)
                                goto LABEL_151;
                              v98 = v118[v99];
                              if (!v98)
                              {
                                v99 = v87 + 4;
                                if (v87 + 4 >= v117)
                                  goto LABEL_151;
                                v98 = v118[v99];
                                if (!v98)
                                {
                                  v99 = v87 + 5;
                                  if (v87 + 5 >= v117)
                                    goto LABEL_151;
                                  v98 = v118[v99];
                                  if (!v98)
                                  {
                                    v100 = v87 + 6;
                                    if (v87 + 6 >= v117)
                                      goto LABEL_151;
                                    v98 = v118[v100];
                                    if (!v98)
                                    {
                                      while (1)
                                      {
                                        v99 = v100 + 1;
                                        if (__OFADD__(v100, 1))
                                          goto LABEL_165;
                                        if (v99 >= v117)
                                          break;
                                        v98 = v118[v99];
                                        ++v100;
                                        if (v98)
                                          goto LABEL_141;
                                      }
LABEL_151:
                                      v3 = v86;
LABEL_152:
                                      MEMORY[0x186DA9E78](v118, -1, -1);
                                      return v3;
                                    }
                                    v99 = v87 + 6;
                                  }
                                }
                              }
                            }
                          }
LABEL_141:
                          v88 = (v98 - 1) & v98;
                          v95 = v99;
                          v96 = __clz(__rbit64(v98)) + (v99 << 6);
                        }
                        v101 = 16 * v96;
                        v102 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v101);
                        v104 = *v102;
                        v103 = v102[1];
                        v105 = *(_QWORD *)(v3 + 56) + v101;
                        v106 = *(_QWORD *)v105;
                        v107 = *(_BYTE *)(v105 + 8);
                        Hasher.init(_seed:)();
                        swift_bridgeObjectRetain();
                        String.hash(into:)();
                        v108 = Hasher._finalize()();
                        v109 = -1 << *(_BYTE *)(v86 + 32);
                        v110 = v108 & ~v109;
                        v111 = v110 >> 6;
                        if (((-1 << v110) & ~*(_QWORD *)(v89 + 8 * (v110 >> 6))) != 0)
                        {
                          v90 = __clz(__rbit64((-1 << v110) & ~*(_QWORD *)(v89 + 8 * (v110 >> 6)))) | v110 & 0x7FFFFFFFFFFFFFC0;
                        }
                        else
                        {
                          v112 = 0;
                          v113 = (unint64_t)(63 - v109) >> 6;
                          do
                          {
                            if (++v111 == v113 && (v112 & 1) != 0)
                              goto LABEL_155;
                            v114 = v111 == v113;
                            if (v111 == v113)
                              v111 = 0;
                            v112 |= v114;
                            v115 = *(_QWORD *)(v89 + 8 * v111);
                          }
                          while (v115 == -1);
                          v90 = __clz(__rbit64(~v115)) + (v111 << 6);
                        }
                        *(_QWORD *)(v89 + ((v90 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v90;
                        v91 = 16 * v90;
                        v92 = (_QWORD *)(*(_QWORD *)(v86 + 48) + v91);
                        *v92 = v104;
                        v92[1] = v103;
                        v93 = *(_QWORD *)(v86 + 56) + v91;
                        *(_QWORD *)v93 = v106;
                        *(_BYTE *)(v93 + 8) = v107;
                        ++*(_QWORD *)(v86 + 16);
                        v55 = v119 - 1;
                        v3 = v123;
                        v87 = v95;
                        if (v119 == 1)
                          goto LABEL_151;
                      }
                    }
                    v31 = v41;
                  }
                }
              }
            }
LABEL_66:
            v35 = (v40 - 1) & v40;
            v38 = __clz(__rbit64(v40)) + (v31 << 6);
          }
          v42 = *(_QWORD *)(v3 + 56) + 16 * v38;
          v43 = *(_QWORD *)v42;
          if ((*(_BYTE *)(v42 + 8) & 1) == 0)
            break;
          if (v43 != v2)
          {
LABEL_78:
            *(unint64_t *)((char *)v118 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v38;
            v29 = __OFADD__(v119++, 1);
            if (v29)
              goto LABEL_162;
          }
        }
        v125 = v36;
        v124[0] = v43;
        __swift_project_boxed_opaque_existential_1(v124, v36);
        DynamicType = (uint64_t *)swift_getDynamicType();
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
        v45 = *DynamicType;
        if ((unint64_t)*DynamicType < 0x800)
        {
          if ((unint64_t)(v45 - 513) < 2)
          {
            swift_getKeyPath();
            v46 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
            v53 = v52;
            swift_release();
            if ((v53 & 1) != 0)
              goto LABEL_169;
            goto LABEL_77;
          }
          if (v45)
          {
            if (v45 != 512)
            {
              swift_bridgeObjectRelease();
              v2 = v122;
              goto LABEL_78;
            }
            swift_getKeyPath();
            v46 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
            v48 = v47;
            result = swift_release();
            if ((v48 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            goto LABEL_77;
          }
        }
        swift_getKeyPath();
        v46 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        v51 = v50;
        swift_release();
        if ((v51 & 1) != 0)
          goto LABEL_167;
LABEL_77:
        v54 = *(uint64_t *)((char *)DynamicType + v46);
        swift_bridgeObjectRelease();
        v2 = v122;
        v3 = v123;
        if (v54 != v122)
          goto LABEL_78;
      }
    }
  }
  v116[1] = v116;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v118 = (_QWORD *)((char *)v116 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v118, v5);
  v6 = 0;
  v7 = *(_QWORD *)(v3 + 64);
  v119 = 0;
  v120 = v3 + 64;
  v8 = 1 << *(_BYTE *)(v3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v121 = (unint64_t)(v8 + 63) >> 6;
  v11 = MEMORY[0x1E0D842A8];
  while (v10)
  {
    v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v13 = v12 | (v6 << 6);
LABEL_25:
    v17 = *(_QWORD *)(v3 + 56) + 16 * v13;
    v18 = *(_QWORD *)v17;
    if ((*(_BYTE *)(v17 + 8) & 1) != 0)
    {
      if (v18 != v2)
      {
LABEL_36:
        *(unint64_t *)((char *)v118 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        v29 = __OFADD__(v119++, 1);
        if (v29)
          goto LABEL_159;
      }
    }
    else
    {
      v125 = v11;
      v124[0] = v18;
      __swift_project_boxed_opaque_existential_1(v124, v11);
      v19 = (uint64_t *)swift_getDynamicType();
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
      v20 = *v19;
      if ((unint64_t)*v19 < 0x800)
      {
        if ((unint64_t)(v20 - 513) < 2)
        {
          swift_getKeyPath();
          v21 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          v27 = v26;
          swift_release();
          if ((v27 & 1) != 0)
            goto LABEL_166;
          goto LABEL_35;
        }
        if (v20)
        {
          if (v20 != 512)
          {
            swift_bridgeObjectRelease();
            v2 = v122;
            goto LABEL_36;
          }
          swift_getKeyPath();
          v21 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          v23 = v22;
          swift_release();
          if ((v23 & 1) != 0)
            goto LABEL_168;
          goto LABEL_35;
        }
      }
      swift_getKeyPath();
      v21 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      v25 = v24;
      swift_release();
      if ((v25 & 1) != 0)
        goto LABEL_164;
LABEL_35:
      v28 = *(uint64_t *)((char *)v19 + v21);
      swift_bridgeObjectRelease();
      v2 = v122;
      v3 = v123;
      if (v28 != v122)
        goto LABEL_36;
    }
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_154;
  if (v14 < v121)
  {
    v15 = *(_QWORD *)(v120 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v121)
        goto LABEL_40;
      v15 = *(_QWORD *)(v120 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v121)
          goto LABEL_40;
        v15 = *(_QWORD *)(v120 + 8 * v6);
        if (!v15)
        {
          v6 = v14 + 3;
          if (v14 + 3 >= v121)
            goto LABEL_40;
          v15 = *(_QWORD *)(v120 + 8 * v6);
          if (!v15)
          {
            v16 = v14 + 4;
            if (v16 >= v121)
              goto LABEL_40;
            v15 = *(_QWORD *)(v120 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v6 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_158;
                if (v6 >= v121)
                  goto LABEL_40;
                v15 = *(_QWORD *)(v120 + 8 * v6);
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v6 = v16;
          }
        }
      }
    }
LABEL_24:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_25;
  }
LABEL_40:
  v30 = v119;
  if (!v119)
    return MEMORY[0x1E0DEE9E0];
  if (v119 == *(_QWORD *)(v3 + 16))
  {
    swift_retain();
    return v3;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  v56 = static _DictionaryStorage.allocate(capacity:)();
  v57 = 0;
  v58 = *v118;
  v59 = v56 + 64;
LABEL_88:
  v119 = v30;
  if (v58)
  {
    v64 = __clz(__rbit64(v58));
    v58 &= v58 - 1;
    v65 = v57;
    v66 = v64 | (v57 << 6);
    goto LABEL_108;
  }
  v67 = v57 + 1;
  if (__OFADD__(v57, 1))
    goto LABEL_157;
  if (v67 < v117)
  {
    v68 = v118[v67];
    v69 = v57 + 1;
    if (!v68)
    {
      v69 = v57 + 2;
      if (v57 + 2 >= v117)
        return v56;
      v68 = v118[v69];
      if (!v68)
      {
        v69 = v57 + 3;
        if (v57 + 3 >= v117)
          return v56;
        v68 = v118[v69];
        if (!v68)
        {
          v69 = v57 + 4;
          if (v57 + 4 >= v117)
            return v56;
          v68 = v118[v69];
          if (!v68)
          {
            v69 = v57 + 5;
            if (v57 + 5 >= v117)
              return v56;
            v68 = v118[v69];
            if (!v68)
            {
              v70 = v57 + 6;
              if (v57 + 6 >= v117)
                return v56;
              v68 = v118[v70];
              if (!v68)
              {
                while (1)
                {
                  v69 = v70 + 1;
                  if (__OFADD__(v70, 1))
                    break;
                  if (v69 >= v117)
                    return v56;
                  v68 = v118[v69];
                  ++v70;
                  if (v68)
                    goto LABEL_107;
                }
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
              }
              v69 = v57 + 6;
            }
          }
        }
      }
    }
LABEL_107:
    v58 = (v68 - 1) & v68;
    v65 = v69;
    v66 = __clz(__rbit64(v68)) + (v69 << 6);
LABEL_108:
    v71 = 16 * v66;
    v72 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v71);
    v74 = *v72;
    v73 = v72[1];
    v75 = *(_QWORD *)(v3 + 56) + v71;
    v76 = *(_QWORD *)v75;
    v77 = *(_BYTE *)(v75 + 8);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v78 = Hasher._finalize()();
    v79 = -1 << *(_BYTE *)(v56 + 32);
    v80 = v78 & ~v79;
    v81 = v80 >> 6;
    if (((-1 << v80) & ~*(_QWORD *)(v59 + 8 * (v80 >> 6))) != 0)
    {
      v60 = __clz(__rbit64((-1 << v80) & ~*(_QWORD *)(v59 + 8 * (v80 >> 6)))) | v80 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_87;
    }
    v82 = 0;
    v83 = (unint64_t)(63 - v79) >> 6;
    while (++v81 != v83 || (v82 & 1) == 0)
    {
      v84 = v81 == v83;
      if (v81 == v83)
        v81 = 0;
      v82 |= v84;
      v85 = *(_QWORD *)(v59 + 8 * v81);
      if (v85 != -1)
      {
        v60 = __clz(__rbit64(~v85)) + (v81 << 6);
LABEL_87:
        *(_QWORD *)(v59 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v60;
        v61 = 16 * v60;
        v62 = (_QWORD *)(*(_QWORD *)(v56 + 48) + v61);
        *v62 = v74;
        v62[1] = v73;
        v63 = *(_QWORD *)(v56 + 56) + v61;
        *(_QWORD *)v63 = v76;
        *(_BYTE *)(v63 + 8) = v77;
        ++*(_QWORD *)(v56 + 16);
        v30 = v119 - 1;
        v3 = v123;
        v57 = v65;
        if (v119 == 1)
          return v56;
        goto LABEL_88;
      }
    }
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
    goto LABEL_163;
  }
  return v56;
}

uint64_t outlined assign with take of PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  assignWithTake for PredicateCodableConfiguration.AllowListKeyPath(a2, a1);
  return a2;
}

uint64_t specialized PredicateCodableConfiguration._identifier(for:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _BYTE v34[64];
  _QWORD v35[7];
  char v36;

  v3 = *a2;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(_QWORD *))partial apply for closure #1 in PredicateCodableConfiguration._identifier(for:), v3, (uint64_t)v34);
  swift_bridgeObjectRelease();
  outlined init with take of (key: String, value: PredicateCodableConfiguration.AllowListKeyPath)?((uint64_t)v34, (uint64_t)v35);
  if (v35[1])
  {
    v4 = v35[0];
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v35[2], v35[3], v35[4], v35[5], v35[6], v36);
    return v4;
  }
  v5 = *(_QWORD *)dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
  if (v5 < 0x800 && v5 - 512 >= 3 && v5 != 0)
    return 0;
  v28 = a1;
  v31 = TypeMetadata.descriptor.getter();
  v32 = v3 + 64;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v3 + 64);
  v33 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v11 = 0;
  v30 = v3;
  while (v9)
  {
    v18 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v19 = v18 | (v11 << 6);
LABEL_41:
    v27 = *(_QWORD *)(v3 + 56) + 48 * v19;
    if (*(_BYTE *)(v27 + 40) == 1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v19);
      v14 = *(_QWORD *)v27;
      v13 = *(uint64_t (**)(uint64_t))(v27 + 8);
      v15 = *(_QWORD *)(v27 + 16);
      v16 = *(_QWORD *)(v27 + 24);
      v17 = *(_QWORD *)(v27 + 32);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(*(_QWORD *)v27, (uint64_t)v13, v15, v16, v17, 1);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v14, (uint64_t)v13, v15, v16, v17, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v31 == v14)
      {
        v29 = v12;
        v23 = Type.genericArguments.getter();
        v24 = v13(v23);
        if (v24)
        {
          v25 = v24;
          type metadata accessor for AnyKeyPath();
          v26 = MEMORY[0x186DA51E0](v25, v28);
          swift_release();
          swift_release();
          if ((v26 & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v14, (uint64_t)v13, v15, v16, v17, 1);
            return v29;
          }
          swift_bridgeObjectRelease();
          v3 = v30;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          v3 = v30;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      result = outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v14, (uint64_t)v13, v15, v16, v17, 1);
    }
  }
  v20 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v20 >= v33)
    goto LABEL_43;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  ++v11;
  if (v21)
    goto LABEL_40;
  v11 = v20 + 1;
  if (v20 + 1 >= v33)
    goto LABEL_43;
  v21 = *(_QWORD *)(v32 + 8 * v11);
  if (v21)
    goto LABEL_40;
  v11 = v20 + 2;
  if (v20 + 2 >= v33)
    goto LABEL_43;
  v21 = *(_QWORD *)(v32 + 8 * v11);
  if (v21)
    goto LABEL_40;
  v11 = v20 + 3;
  if (v20 + 3 >= v33)
    goto LABEL_43;
  v21 = *(_QWORD *)(v32 + 8 * v11);
  if (v21)
    goto LABEL_40;
  v11 = v20 + 4;
  if (v20 + 4 >= v33)
    goto LABEL_43;
  v21 = *(_QWORD *)(v32 + 8 * v11);
  if (v21)
    goto LABEL_40;
  v11 = v20 + 5;
  if (v20 + 5 >= v33)
    goto LABEL_43;
  v21 = *(_QWORD *)(v32 + 8 * v11);
  if (v21)
  {
LABEL_40:
    v9 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v11 << 6);
    goto LABEL_41;
  }
  v22 = v20 + 6;
  if (v22 >= v33)
  {
LABEL_43:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  v21 = *(_QWORD *)(v32 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_40;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v33)
      goto LABEL_43;
    v21 = *(_QWORD *)(v32 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_40;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t specialized static PredicateCodableConfiguration.AllowListKeyPath.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v10[5];
  char v11;
  _QWORD v12[5];
  char v13;

  outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a1, (uint64_t)v12);
  v4 = v12[0];
  if ((v13 & 1) == 0)
  {
    outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a2, (uint64_t)v10);
    if ((v11 & 1) == 0)
    {
      v8 = v10[0];
      type metadata accessor for AnyKeyPath();
      outlined retain of PredicateCodableConfiguration.AllowListKeyPath(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PredicateCodableConfiguration.AllowListKeyPath);
      outlined retain of PredicateCodableConfiguration.AllowListKeyPath(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of PredicateCodableConfiguration.AllowListKeyPath);
      v7 = MEMORY[0x186DA51E0](v4, v8);
      outlined retain of PredicateCodableConfiguration.AllowListKeyPath(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of PredicateCodableConfiguration.AllowListKeyPath);
      outlined retain of PredicateCodableConfiguration.AllowListKeyPath(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of PredicateCodableConfiguration.AllowListKeyPath);
      return v7 & 1;
    }
    goto LABEL_8;
  }
  v5 = v12[3];
  v6 = v12[4];
  outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a2, (uint64_t)v10);
  if (v11 != 1 || v4 != v10[0])
  {
LABEL_8:
    v7 = 0;
    return v7 & 1;
  }
  if (v5 == v10[3] && v6 == v10[4])
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  return v7 & 1;
}

uint64_t dispatch thunk of static PredicateCodableKeyPathProviding.predicateCodableKeyPaths.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for PredicateCodableConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PredicateCodableConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PredicateCodableConfiguration(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateCodableConfiguration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PredicateCodableConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1)
{
  return outlined consume of PredicateCodableConfiguration.AllowListKeyPath(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PredicateCodableConfiguration.AllowListKeyPath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t destructiveInjectEnumTag for PredicateCodableConfiguration.AllowListKeyPath(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2 & 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type CombineIdentifier and conformance CombineIdentifier()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier;
  if (!lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier)
  {
    v1 = type metadata accessor for CombineIdentifier();
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0C95670], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier);
  }
  return result;
}

uint64_t partial apply for closure #1 in PredicateCodableConfiguration._identifier(for:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PredicateCodableConfiguration._identifier(for:)(a1, v1) & 1;
}

uint64_t outlined init with take of (key: String, value: PredicateCodableConfiguration.AllowListKeyPath)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: PredicateCodableConfiguration.AllowListKeyPath)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_181CEC51C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for Collection.first : String(a1, (uint64_t (*)(uint64_t, uint64_t))specialized Collection.first.getter, a2);
}

uint64_t sub_181CEC584@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for Collection.first : String(a1, (uint64_t (*)(uint64_t, uint64_t))specialized BidirectionalCollection.last.getter, a2);
}

uint64_t sub_181CEC5A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_181CEC5B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = MEMORY[0x186DA43A0](*a1, *(_QWORD *)(a3 + a2 - 24), *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  *a4 = result & 1;
  return result;
}

uint64_t sub_181CEC5E8()
{
  return 24;
}

__n128 sub_181CEC5F4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_181CEC608@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = MEMORY[0x186DA4394](*a1, *(_QWORD *)(a3 + a2 - 24), *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  *a4 = result;
  return result;
}

uint64_t sub_181CEC63C()
{
  return 24;
}

__n128 sub_181CEC648(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_181CEC65C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_181CEC664@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = Set.isEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_181CEC698()
{
  return 16;
}

__n128 sub_181CEC6A4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_181CEC6B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Set.count.getter();
  *a1 = result;
  return result;
}

uint64_t sub_181CEC6E0()
{
  return 16;
}

__n128 sub_181CEC6EC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_181CEC6F8()
{
  type metadata accessor for Array();
  JUMPOUT(0x186DA9D64);
}

uint64_t sub_181CEC720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Collection.first : <A>[A](a1, a2, a3, MEMORY[0x1E0DEAF20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEA360]);
}

uint64_t sub_181CEC744()
{
  return 8;
}

_QWORD *sub_181CEC750(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_181CEC75C()
{
  type metadata accessor for Array();
  JUMPOUT(0x186DA9D64);
}

uint64_t sub_181CEC784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Collection.first : <A>[A](a1, a2, a3, MEMORY[0x1E0DEAF50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB620]);
}

uint64_t sub_181CEC7A8()
{
  return 8;
}

uint64_t sub_181CEC7B8()
{
  return 8;
}

uint64_t sub_181CEC7C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = MEMORY[0x186DA4B5C](*a1, *(_QWORD *)(a3 + a2 - 8));
  *a4 = result;
  return result;
}

uint64_t sub_181CEC7F4()
{
  return 8;
}

Swift::String __swiftcall BinaryInteger.formatted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  int *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  Swift::String result;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  v5 = type metadata accessor for IntegerFormatStyle(0, v0, v1, v2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v24 - v7);
  if (one-time initialization token for cache != -1)
    swift_once();
  v9 = static LocaleCache.cache + 16;
  v10 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v9, &v25);
  os_unfair_lock_unlock(v10);
  swift_release_n();
  v11 = v25;
  v12 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  v13 = (char *)v8 + *(int *)(v5 + 36);
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 5) = 0x1FFFFFFFELL;
  *((_QWORD *)v13 + 7) = 0;
  *((_QWORD *)v13 + 8) = 0;
  *((_QWORD *)v13 + 6) = 0;
  *((_DWORD *)v13 + 18) = 131584;
  *((_WORD *)v13 + 38) = 512;
  v14 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  v15 = &v13[v14[9]];
  v16 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = &v13[v14[10]];
  *(_QWORD *)v17 = 0;
  v17[8] = -1;
  v13[v14[11]] = 3;
  *v8 = v11;
  v8[1] = v12;
  v18 = IntegerFormatStyle.format(_:)(v4, v5);
  v20 = v19;
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  v21 = v18;
  v22 = v20;
  result._object = v22;
  result._countAndFlagsBits = v21;
  return result;
}

uint64_t BinaryInteger.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(v5, a3, a5);
}

uint64_t BinaryInteger.init<A>(_:strategy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[4];
  uint64_t v26;

  v25[2] = a7;
  v25[3] = a5;
  v25[0] = a8;
  v25[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v25 - v19;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(a6 + 48);
  v26 = a1;
  v21(a1, a4, a6, v18);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
    v22 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v26, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v20, AssociatedTypeWitness);
    dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
    v24 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v26, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v20, AssociatedTypeWitness);
  }
}

uint64_t BinaryInteger.init<A>(_:strategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 48))(a1, a4, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t BinaryInteger.init(_:format:lenient:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return BinaryInteger.init(_:format:lenient:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>, a7, 0);
}

{
  return BinaryInteger.init(_:format:lenient:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Percent, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>.Percent, a7, 1);
}

uint64_t BinaryInteger.init(_:format:lenient:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10)
{
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  void (*v30)(_OWORD *, uint64_t, uint64_t, __n128);
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD v36[3];
  void *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v41 = a1;
  v38 = a4;
  v37 = a2;
  v36[1] = a9;
  v40 = a10;
  v14 = a7(0, a5, a6);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (_OWORD *)((char *)v36 - v17);
  v19 = MEMORY[0x186DA9D64](a8, v14, v16);
  v36[2] = a6;
  v20 = (int *)type metadata accessor for IntegerParseStrategy(0, v14, v19, a6);
  v39 = *((_QWORD *)v20 - 1);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v36 - v21;
  v36[0] = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (char *)v36 - v28;
  v43 = v15;
  v30 = *(void (**)(_OWORD *, uint64_t, uint64_t, __n128))(v15 + 16);
  v44 = a3;
  v31 = a3;
  v32 = v37;
  v30(v18, v31, v14, v27);
  ((void (*)(char *, _OWORD *, uint64_t))v30)(v22, v18, v14);
  v22[v20[11]] = v38;
  *(_OWORD *)&v22[v20[13]] = *v18;
  outlined init with take of ICUNumberFormatter.Signature((uint64_t)v18 + *(int *)(v14 + 36), (uint64_t)&v22[v20[12]], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  swift_storeEnumTagMultiPayload();
  v33 = v42;
  IntegerParseStrategy.parse(_:)(v41, v32, (uint64_t)v20, (uint64_t)v29);
  if (v33)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v14);
    return (*(uint64_t (**)(char *, int *))(v39 + 8))(v22, v20);
  }
  else
  {
    (*(void (**)(char *, int *))(v39 + 8))(v22, v20);
    swift_bridgeObjectRelease();
    v35 = v36[0];
    (*(void (**)(char *, char *, uint64_t))(v36[0] + 16))(v25, v29, a5);
    dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v29, a5);
  }
}

uint64_t BinaryInteger.init(_:format:lenient:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, __int128 *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  void (*v30)(__int128 *, uint64_t, uint64_t, __n128);
  void *v31;
  uint64_t v32;
  void (*v33)(__int128 *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;

  v50 = a1;
  LODWORD(v48) = a4;
  v52 = a3;
  v47 = a2;
  v43 = a7;
  v49 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1E0C80A78](v49);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for IntegerFormatStyle.Currency(0, a5, a6, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (__int128 *)((char *)&v40 - v15);
  v17 = MEMORY[0x186DA9D64](&protocol conformance descriptor for IntegerFormatStyle<A>.Currency, v12, v14);
  v44 = a6;
  v18 = (int *)type metadata accessor for IntegerParseStrategy(0, v12, v17, a6);
  v46 = *((_QWORD *)v18 - 1);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v40 - v22;
  v45 = a5;
  v42 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v24);
  v41 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v40 - v28;
  v30 = *(void (**)(__int128 *, uint64_t, uint64_t, __n128))(v13 + 16);
  v30(v16, (uint64_t)v52, v12, v27);
  ((void (*)(char *, __int128 *, uint64_t))v30)(v20, v16, v12);
  v31 = v47;
  v20[v18[11]] = v48;
  v32 = v18[13];
  v48 = *v16;
  *(_OWORD *)&v20[v32] = v48;
  outlined init with copy of CurrencyFormatStyleConfiguration.Collection((uint64_t)v16 + *(int *)(v12 + 40), (uint64_t)v10);
  v33 = *(void (**)(__int128 *, uint64_t))(v13 + 8);
  swift_unknownObjectRetain();
  v33(v16, v12);
  swift_storeEnumTagMultiPayload();
  v34 = (uint64_t)v10;
  v35 = v46;
  outlined init with take of ICUNumberFormatter.Signature(v34, (uint64_t)&v20[v18[12]], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  (*(void (**)(char *, char *, int *))(v35 + 32))(v23, v20, v18);
  v36 = v51;
  IntegerParseStrategy.parse(_:)(v50, v31, (uint64_t)v18, (uint64_t)v29);
  if (v36)
  {
    swift_bridgeObjectRelease();
    v33(v52, v12);
    return (*(uint64_t (**)(char *, int *))(v35 + 8))(v23, v18);
  }
  else
  {
    (*(void (**)(char *, int *))(v35 + 8))(v23, v18);
    swift_bridgeObjectRelease();
    v38 = v42;
    v39 = v45;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v41, v29, v45);
    dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
    v33(v52, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v29, v39);
  }
}

uint64_t outlined init with copy of CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PredicateExpressions.IntDivision.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

void PredicateExpressions.IntDivision.init(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.IntDivision, a7);
}

uint64_t PredicateExpressions.IntDivision.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntDivision.evaluate(_:)(a1, a2, MEMORY[0x1E0DEBD80], a3);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.IntDivision<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntDivision.evaluate(_:)(a1, a2, a3);
}

void PredicateExpressions.IntRemainder.init(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.IntRemainder, a7);
}

uint64_t PredicateExpressions.IntRemainder.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntDivision.evaluate(_:)(a1, a2, MEMORY[0x1E0DEBD90], a3);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.IntRemainder<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntRemainder.evaluate(_:)(a1, a2, a3);
}

void PredicateExpressions.FloatDivision.init(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.FloatDivision, a7);
}

uint64_t PredicateExpressions.FloatDivision.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntDivision.evaluate(_:)(a1, a2, MEMORY[0x1E0DEA108], a3);
}

uint64_t PredicateExpressions.IntDivision.evaluate(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, void (*a3)(char *, char *, uint64_t, _QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t, _QWORD);
  char *v20;
  void (*v21)(char *, uint64_t);
  _QWORD v22[2];
  void (*v23)(char *, char *, uint64_t, _QWORD);
  char *v24;
  uint64_t v25;

  v22[1] = a4;
  v23 = a3;
  v7 = a2[4];
  v8 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v24 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v22 - v14;
  v16 = *a1;
  v25 = v16;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v7 + 16))(&v25, v8, v7, v13);
  if (!v4)
  {
    v18 = v10;
    v19 = v23;
    v25 = v16;
    v20 = v24;
    (*(void (**)(uint64_t *, _QWORD))(a2[5] + 16))(&v25, a2[3]);
    v19(v15, v20, AssociatedTypeWitness, a2[6]);
    v21 = *(void (**)(char *, uint64_t))(v18 + 8);
    v21(v20, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, uint64_t))v21)(v15, AssociatedTypeWitness);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.FloatDivision<A, B>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.FloatDivision.evaluate(_:)(a1, a2, a3);
}

void static PredicateExpressions.build_Division<A, B>(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  static PredicateExpressions.build_subscript<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.IntDivision, a7);
}

{
  static PredicateExpressions.build_subscript<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.FloatDivision, a7);
}

void static PredicateExpressions.build_Remainder<A, B>(lhs:rhs:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  static PredicateExpressions.build_subscript<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD *))type metadata accessor for PredicateExpressions.IntRemainder, a7);
}

uint64_t PredicateExpressions.FloatDivision.description.getter(int a1)
{
  return PredicateExpressions.FloatDivision.description.getter(a1, 31, 0xD000000000000013, (void *)0x800000018230BAE0);
}

uint64_t PredicateExpressions.IntDivision.description.getter(int a1)
{
  return PredicateExpressions.FloatDivision.description.getter(a1, 29, 0xD000000000000011, (void *)0x800000018230BB00);
}

uint64_t PredicateExpressions.IntRemainder.description.getter(int a1)
{
  return PredicateExpressions.FloatDivision.description.getter(a1, 30, 0xD000000000000012, (void *)0x800000018230BB20);
}

uint64_t PredicateExpressions.FloatDivision.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(a2);
  v6._countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._countAndFlagsBits = 0x203A736872202CLL;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t PredicateExpressions.FloatDivision<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.FloatDivision<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.FloatDivision<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.FloatDivision<>.init(from:), a5, a6);
}

uint64_t PredicateExpressions.IntRemainder<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.IntRemainder<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.IntRemainder<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.IntRemainder<>.init(from:), a5, a6);
}

uint64_t PredicateExpressions.IntDivision<>.encode(to:)(_QWORD *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.IntDivision<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.FloatDivision<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.FloatDivision<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.FloatDivision<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.FloatDivision<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.IntRemainder<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.IntRemainder<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.IntRemainder<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.IntRemainder<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.IntDivision<A, B>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PredicateExpressions.IntDivision<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.IntDivision<A, B>, (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.IntDivision<A, B>);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.IntDivision<A, B>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))PredicateExpressions.IntDivision<>.init(from:), a5, a6);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.IntDivision<A, B>(_QWORD *a1)
{
  return PredicateExpressions.IntDivision<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.IntDivision(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_181CED8CC + 4 * byte_182103F08[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.IntDivision(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.FloatDivision<A, B>(_QWORD *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.IntDivision<A, B>(a1);
}

uint64_t AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result > 0xB)
    *a2 = 2;
  else
    *a2 = byte_182104320[(int)result];
  return result;
}

void specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, __int128 *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t isStackAllocationSafe;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char v17;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _OWORD *v32;
  __int128 *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _OWORD *v75;
  char *v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  int64_t v84;
  int64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v105;
  const char *v106;
  uint64_t v107;
  char *v108;
  __int128 *v109;
  _QWORD *v110;
  int64_t v111;
  int64_t v112;
  uint64_t v113;
  int64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD v120[2];
  uint64_t v121;
  _OWORD v122[2];
  _OWORD v123[2];
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;

  v6 = v5;
  v10 = a2;
  v11 = a1;
  v127 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_113;
  if ((a2 & 0x2000000000000000) != 0)
    isStackAllocationSafe = HIBYTE(a2) & 0xF;
  else
    isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
LABEL_5:
  v13 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
  if (v13 < -1)
    goto LABEL_115;
  v14 = v13 + 1;
  if (v13 >= 1024)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v25 = (const char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v25, v14, 1, v11, v10);
      v27 = v26;
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
        closure #1 in static _FileOperations.removeFile(_:with:)(v25, a3, (unint64_t)a4, a5);
        goto LABEL_105;
      }
      *(_QWORD *)&v116 = MEMORY[0x1E0DEE9E0];
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v67 = v66;
      v121 = a3;
      *(_QWORD *)&v122[0] = a4;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v124, (uint64_t)v65, v67);
      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v11 = v69;
      URL.init(_fileManagerFailableFileURLWithPath:)(a3, (unint64_t)a4, (uint64_t)&v121);
      if (v121)
      {
        v119 = v121;
        v120[0] = v122[0];
        lazy protocol witness table accessor for type URL and conformance URL();
        AnyHashable.init<A>(_:)();
      }
      else
      {
        v124 = 0u;
        v125 = 0u;
        v126 = 0;
      }
      specialized Dictionary.subscript.setter((uint64_t)&v124, (uint64_t)v68, v11);
      v70 = v116;
      a3 = *(_QWORD *)(v116 + 16);
      v109 = a5;
      v108 = a4;
      v106 = v25;
      if (a3)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v6 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
      v71 = *(_QWORD *)(v70 + 64);
      v111 = v70 + 64;
      v72 = -1;
      v73 = -1 << *(_BYTE *)(v70 + 32);
      v107 = ~v73;
      if (-v73 < 64)
        v72 = ~(-1 << -(char)v73);
      v74 = v72 & v71;
      v112 = (unint64_t)(63 - v73) >> 6;
      a4 = (char *)&v125;
      v75 = (_OWORD *)((char *)v120 + 8);
      a5 = (_OWORD *)((char *)v122 + 8);
      v110 = v6 + 8;
      swift_bridgeObjectRetain();
      v114 = 0;
      v10 = 40;
      v113 = MEMORY[0x1E0DEE9B8] + 8;
      while (1)
      {
        if (v74)
        {
          v115 = (v74 - 1) & v74;
          v81 = __clz(__rbit64(v74)) | (v114 << 6);
        }
        else
        {
          v82 = v114 + 1;
          if (__OFADD__(v114, 1))
            goto LABEL_112;
          if (v82 >= v112)
            goto LABEL_97;
          v83 = *(_QWORD *)(v111 + 8 * v82);
          v84 = v114 + 1;
          if (!v83)
          {
            v84 = v114 + 2;
            if (v114 + 2 >= v112)
              goto LABEL_97;
            v83 = *(_QWORD *)(v111 + 8 * v84);
            if (!v83)
            {
              v84 = v114 + 3;
              if (v114 + 3 >= v112)
                goto LABEL_97;
              v83 = *(_QWORD *)(v111 + 8 * v84);
              if (!v83)
              {
                v84 = v114 + 4;
                if (v114 + 4 >= v112)
                  goto LABEL_97;
                v83 = *(_QWORD *)(v111 + 8 * v84);
                if (!v83)
                {
                  v84 = v114 + 5;
                  if (v114 + 5 >= v112)
                    goto LABEL_97;
                  v83 = *(_QWORD *)(v111 + 8 * v84);
                  if (!v83)
                  {
                    v84 = v114 + 6;
                    if (v114 + 6 >= v112)
                      goto LABEL_97;
                    v83 = *(_QWORD *)(v111 + 8 * v84);
                    if (!v83)
                    {
                      v85 = v114 + 7;
                      if (v114 + 7 >= v112)
                        goto LABEL_97;
                      v83 = *(_QWORD *)(v111 + 8 * v85);
                      if (!v83)
                      {
                        while (1)
                        {
                          v84 = v85 + 1;
                          if (__OFADD__(v85, 1))
                            goto LABEL_117;
                          if (v84 >= v112)
                            break;
                          v83 = *(_QWORD *)(v111 + 8 * v84);
                          ++v85;
                          if (v83)
                            goto LABEL_92;
                        }
LABEL_97:
                        outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                        swift_bridgeObjectRelease();
                        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                        v96 = objc_allocWithZone((Class)NSError);
                        v97 = String._bridgeToObjectiveCImpl()();
                        swift_bridgeObjectRelease();
                        v98 = objc_msgSend(v96, sel_initWithDomain_code_userInfo_, v97, 4, _NativeDictionary.bridged()());
                        swift_unknownObjectRelease();
                        swift_unknownObjectRelease();
                        v99 = objc_msgSend(v98, sel_domain);
                        v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
                        v102 = v101;

                        if (v100 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                          && v102 == v103)
                        {
LABEL_103:
                          swift_bridgeObjectRelease_n();
                          a5 = v109;
                          v25 = v106;
                        }
                        else
                        {
                          v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          a5 = v109;
                          v25 = v106;
                          if ((v105 & 1) == 0)
                          {
                            __break(1u);
                            goto LABEL_103;
                          }
                        }
                        swift_willThrow();
LABEL_105:
                        MEMORY[0x186DA9E78](v25, -1, -1);
                        goto LABEL_106;
                      }
                      v84 = v114 + 7;
                    }
                  }
                }
              }
            }
          }
LABEL_92:
          v115 = (v83 - 1) & v83;
          v81 = __clz(__rbit64(v83)) + (v84 << 6);
          v114 = v84;
        }
        v86 = (uint64_t *)(*(_QWORD *)(v70 + 48) + 16 * v81);
        v88 = *v86;
        v87 = v86[1];
        outlined init with copy of AnyHashable(*(_QWORD *)(v70 + 56) + 40 * v81, (uint64_t)a4);
        *(_QWORD *)&v124 = v88;
        *((_QWORD *)&v124 + 1) = v87;
        v89 = *((_OWORD *)a4 + 1);
        v116 = *(_OWORD *)a4;
        v117 = v89;
        v118 = *((_QWORD *)a4 + 4);
        v119 = v88;
        *(_QWORD *)&v120[0] = v87;
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        a3 = v119;
        v90 = *(_QWORD *)&v120[0];
        outlined init with take of Any(v75, a5);
        outlined init with take of Any(a5, v123);
        outlined init with take of Any(v123, &v121);
        v91 = specialized __RawDictionaryStorage.find<A>(_:)(a3, v90);
        v11 = v91;
        if ((v92 & 1) != 0)
        {
          v76 = a4;
          v77 = a5;
          v78 = v75;
          v79 = v70;
          v80 = (uint64_t *)(v6[6] + 16 * v91);
          swift_bridgeObjectRelease();
          *v80 = a3;
          v80[1] = v90;
          v70 = v79;
          v75 = v78;
          a5 = v77;
          a4 = v76;
          v10 = 40;
          a3 = v6[7] + 32 * v11;
          __swift_destroy_boxed_opaque_existential_1(a3);
          outlined init with take of Any(&v121, (_OWORD *)a3);
        }
        else
        {
          if (v6[2] >= v6[3])
            goto LABEL_110;
          *(_QWORD *)((char *)v110 + ((v91 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v91;
          v93 = (uint64_t *)(v6[6] + 16 * v91);
          *v93 = a3;
          v93[1] = v90;
          outlined init with take of Any(&v121, (_OWORD *)(v6[7] + 32 * v91));
          v94 = v6[2];
          v53 = __OFADD__(v94, 1);
          v95 = v94 + 1;
          if (v53)
            goto LABEL_111;
          v6[2] = v95;
        }
        v74 = v115;
      }
    }
  }
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  v16 = (char *)&v106 - v15;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v16, v14, 1, v11, v10);
  v18 = v17;
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    closure #1 in static _FileOperations.removeFile(_:with:)(v16, a3, (unint64_t)a4, a5);
    if (v6)
      goto LABEL_59;
    goto LABEL_106;
  }
  *(_QWORD *)&v116 = MEMORY[0x1E0DEE9E0];
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
  v21 = v20;
  v121 = a3;
  *(_QWORD *)&v122[0] = a4;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  specialized Dictionary.subscript.setter((uint64_t)&v124, (uint64_t)v19, v21);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
  v24 = v23;
  URL.init(_fileManagerFailableFileURLWithPath:)(a3, (unint64_t)a4, (uint64_t)&v121);
  if (v121)
  {
    v119 = v121;
    v120[0] = v122[0];
    lazy protocol witness table accessor for type URL and conformance URL();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    v124 = 0u;
    v125 = 0u;
    v126 = 0;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v124, (uint64_t)v22, v24);
  v11 = v116;
  a3 = *(_QWORD *)(v116 + 16);
  v109 = a5;
  v108 = a4;
  v106 = (const char *)&v106;
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v28 = *(_QWORD *)(v11 + 64);
  v112 = v11 + 64;
  v29 = -1;
  v30 = -1 << *(_BYTE *)(v11 + 32);
  v107 = ~v30;
  if (-v30 < 64)
    v29 = ~(-1 << -(char)v30);
  v31 = v29 & v28;
  v111 = (unint64_t)(63 - v30) >> 6;
  a5 = &v125;
  a4 = (char *)v120 + 8;
  v32 = (_OWORD *)((char *)v122 + 8);
  v110 = v6 + 8;
  swift_bridgeObjectRetain();
  v114 = 0;
  v10 = 40;
  v113 = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    if (v31)
    {
      v115 = (v31 - 1) & v31;
      v38 = __clz(__rbit64(v31)) | (v114 << 6);
      goto LABEL_47;
    }
    v39 = v114 + 1;
    if (__OFADD__(v114, 1))
      goto LABEL_109;
    if (v39 >= v111)
      break;
    v40 = *(_QWORD *)(v112 + 8 * v39);
    v41 = v114 + 1;
    if (!v40)
    {
      v41 = v114 + 2;
      if (v114 + 2 >= v111)
        break;
      v40 = *(_QWORD *)(v112 + 8 * v41);
      if (!v40)
      {
        v41 = v114 + 3;
        if (v114 + 3 >= v111)
          break;
        v40 = *(_QWORD *)(v112 + 8 * v41);
        if (!v40)
        {
          v41 = v114 + 4;
          if (v114 + 4 >= v111)
            break;
          v40 = *(_QWORD *)(v112 + 8 * v41);
          if (!v40)
          {
            v41 = v114 + 5;
            if (v114 + 5 >= v111)
              break;
            v40 = *(_QWORD *)(v112 + 8 * v41);
            if (!v40)
            {
              v41 = v114 + 6;
              if (v114 + 6 >= v111)
                break;
              v40 = *(_QWORD *)(v112 + 8 * v41);
              if (!v40)
              {
                v42 = v114 + 7;
                if (v114 + 7 >= v111)
                  break;
                v40 = *(_QWORD *)(v112 + 8 * v42);
                if (!v40)
                {
                  while (1)
                  {
                    v41 = v42 + 1;
                    if (__OFADD__(v42, 1))
                      break;
                    if (v41 >= v111)
                      goto LABEL_51;
                    v40 = *(_QWORD *)(v112 + 8 * v41);
                    ++v42;
                    if (v40)
                      goto LABEL_46;
                  }
LABEL_116:
                  __break(1u);
LABEL_117:
                  __break(1u);
                }
                v41 = v114 + 7;
              }
            }
          }
        }
      }
    }
LABEL_46:
    v115 = (v40 - 1) & v40;
    v38 = __clz(__rbit64(v40)) + (v41 << 6);
    v114 = v41;
LABEL_47:
    v43 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v38);
    v45 = *v43;
    v44 = v43[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(v11 + 56) + 40 * v38, (uint64_t)a5);
    *(_QWORD *)&v124 = v45;
    *((_QWORD *)&v124 + 1) = v44;
    v46 = a5[1];
    v116 = *a5;
    v117 = v46;
    v118 = *((_QWORD *)a5 + 4);
    v119 = v45;
    *(_QWORD *)&v120[0] = v44;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v47 = v119;
    v48 = *(_QWORD *)&v120[0];
    outlined init with take of Any(a4, v32);
    outlined init with take of Any(v32, v123);
    outlined init with take of Any(v123, &v121);
    v49 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v48);
    a3 = v49;
    if ((v50 & 1) != 0)
    {
      v33 = a5;
      v34 = v32;
      v35 = a4;
      v36 = v11;
      v37 = (uint64_t *)(v6[6] + 16 * v49);
      swift_bridgeObjectRelease();
      *v37 = v47;
      v37[1] = v48;
      v11 = v36;
      a4 = v35;
      v32 = v34;
      a5 = v33;
      v10 = 40;
      a3 = v6[7] + 32 * a3;
      __swift_destroy_boxed_opaque_existential_1(a3);
      outlined init with take of Any(&v121, (_OWORD *)a3);
    }
    else
    {
      if (v6[2] >= v6[3])
      {
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        isStackAllocationSafe = String.UTF8View._foreignCount()();
        goto LABEL_5;
      }
      *(_QWORD *)((char *)v110 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
      v51 = (uint64_t *)(v6[6] + 16 * v49);
      *v51 = v47;
      v51[1] = v48;
      outlined init with take of Any(&v121, (_OWORD *)(v6[7] + 32 * v49));
      v52 = v6[2];
      v53 = __OFADD__(v52, 1);
      v54 = v52 + 1;
      if (v53)
        goto LABEL_108;
      v6[2] = v54;
    }
    v31 = v115;
  }
LABEL_51:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v55 = objc_allocWithZone((Class)NSError);
  v56 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v57 = objc_msgSend(v55, sel_initWithDomain_code_userInfo_, v56, 4, _NativeDictionary.bridged()(), v106, v107, v108);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v58 = objc_msgSend(v57, sel_domain);
  v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
  v61 = v60;

  if (v59 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v61 == v62)
  {
LABEL_57:
    swift_bridgeObjectRelease_n();
    a5 = v109;
  }
  else
  {
    v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a5 = v109;
    if ((v64 & 1) == 0)
    {
      __break(1u);
      goto LABEL_57;
    }
  }
  swift_willThrow();
LABEL_59:
  swift_willThrow();
LABEL_106:
  swift_bridgeObjectRelease();

}

uint64_t _sSS10FoundationE28withFileSystemRepresentationyxxSPys4Int8VGSgKXEKlFyt_Tg5031_s10Foundation3URLV34withUnsafecd22RepresentationyxxSPys4F25VGSgKXEKlFxAHKXEfU_yt_Tg5AFxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n(uint64_t a1, unint64_t a2, uint64_t (*a3)(char *))
{
  uint64_t v3;
  Swift::Int isStackAllocationSafe;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  char v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  v8 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if (v8 < -1)
    goto LABEL_21;
  v9 = v8 + 1;
  if (v8 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v11 = (char *)v20 - v10;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v11, v9, 1, a1, a2);
    v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      v14 = 0;
    else
      v14 = v11;
    result = a3(v14);
    if (v3)
      return swift_willThrow();
  }
  else
  {
    v16 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v16, v9, 1, a1, a2);
    v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
      v19 = 0;
    else
      v19 = v16;
    a3((char *)v19);
    return MEMORY[0x186DA9E78](v16, -1, -1);
  }
  return result;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2, std::error_code *a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t *a9, char *a10, uint64_t a11, uint64_t a12, void *a13, int a14)
{
  uint64_t v14;
  id v15;
  unint64_t cat;
  uint64_t v23;
  Swift::Int isStackAllocationSafe;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__fs::filesystem::path *v34;
  char v35;
  char v36;
  std::__fs::filesystem::path *v37;
  std::__fs::filesystem::path *v38;
  void *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  std::__fs::filesystem::path *v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__fs::filesystem::path *v59;
  char v60;
  char v61;
  std::__fs::filesystem::path *v62;
  uint64_t v63;
  std::__fs::filesystem::path *v64;
  char v65;
  id v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  std::__fs::filesystem::path *v86;
  std::__fs::filesystem::path *v87;
  std::error_code *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  id v96;
  id v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  std::__fs::filesystem::path *v113;
  std::error_code *v114;
  uint64_t v115;
  char v116;
  char v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  char *v135;
  uint64_t v136;
  std::__fs::filesystem::path *v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;

  LODWORD(v15) = v14;
  cat = a2;
  v23 = a1;
  v142 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  v25 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_80;
  }
  if (v25 < -1)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    v30 = String.UTF8View._foreignCount()();
    goto LABEL_14;
  }
  v135 = a8;
  v136 = v14;
  v141 = a4;
  v138 = a7 & 1;
  LODWORD(v15) = a14;
  a4 = a13;
  v139 = a5;
  v140 = a12;
  a8 = a10;
  v26 = v25 + 1;
  v133 = a11;
  v134 = a9;
  if (v25 >= 1024)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      v51 = (std::__fs::filesystem::path *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      v137 = v51;
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v51, v26, 1, v23, cat);
      v53 = v52;
      swift_bridgeObjectRelease();
      if ((v53 & 1) != 0)
      {
        v74 = a6;
        static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
        v75 = objc_allocWithZone((Class)NSError);
        v76 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v77 = objc_msgSend(v75, sel_initWithDomain_code_userInfo_, v76, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v78 = objc_msgSend(v77, sel_domain);
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
        v81 = v80;

        if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v81 == v82)
        {
          swift_bridgeObjectRelease_n();
          a6 = v74;
          v64 = v137;
        }
        else
        {
          v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a6 = v74;
          v64 = v137;
          if ((v92 & 1) == 0)
          {
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
        }
        swift_willThrow();
        v40 = v139;
        v39 = v141;
        v41 = v138;
LABEL_76:
        MEMORY[0x186DA9E78](v64, -1, -1);
        goto LABEL_77;
      }
      a7 = *(_QWORD *)&a3->__val_;
      cat = (unint64_t)a3->__cat_;
      if ((cat & 0x1000000000000000) == 0)
      {
        if ((cat & 0x2000000000000000) != 0)
          v54 = HIBYTE(cat) & 0xF;
        else
          v54 = a7 & 0xFFFFFFFFFFFFLL;
LABEL_29:
        v55 = 3 * v54;
        if ((unsigned __int128)(v54 * (__int128)3) >> 64 != (3 * v54) >> 63)
        {
          __break(1u);
LABEL_87:
          __break(1u);
          goto LABEL_88;
        }
        if (v55 < -1)
        {
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        v56 = v55 + 1;
        outlined copy of PathOrURL(v141, v139, a6, v138);
        swift_bridgeObjectRetain();
        v57 = swift_bridgeObjectRetain();
        if (v55 >= 1024)
        {
          v57 = swift_stdlib_isStackAllocationSafe();
          if ((v57 & 1) == 0)
          {
            v110 = swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, v110, v56, 1, a7, cat);
            v112 = v111;
            swift_bridgeObjectRelease();
            if ((v112 & 1) != 0)
            {
              v115 = v110;
              v118 = a6;
              static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
              v119 = objc_allocWithZone((Class)NSError);
              v120 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v121 = objc_msgSend(v119, sel_initWithDomain_code_userInfo_, v120, 514, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              v122 = objc_msgSend(v121, sel_domain);
              v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
              v125 = v124;

              if (v123 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                && v125 == v126)
              {
                swift_bridgeObjectRelease_n();
                v64 = v137;
              }
              else
              {
                v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v64 = v137;
                if ((v127 & 1) == 0)
                  goto LABEL_92;
              }
              swift_willThrow();
              a6 = v118;
              v40 = v139;
              v39 = v141;
              v41 = v138;
            }
            else
            {
              v130 = (uint64_t)a8;
              v113 = (std::__fs::filesystem::path *)v110;
              v64 = v137;
              v114 = a3;
              v39 = v141;
              v40 = v139;
              v115 = v110;
              v41 = v138;
              closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v113, v137, v114, v141, v139, a6, v138, v135, v134, v130, v133, v140, (uint64_t)a4, (int)v15);
            }
            MEMORY[0x186DA9E78](v115, -1, -1);
            goto LABEL_75;
          }
        }
        v131 = (uint64_t)&v131;
        MEMORY[0x1E0C80A78](v57);
        v59 = (std::__fs::filesystem::path *)((char *)&v131 - v58);
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v59, v56, 1, a7, cat);
        v61 = v60;
        swift_bridgeObjectRelease();
        if ((v61 & 1) != 0)
        {
          v93 = a6;
          static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
          v94 = objc_allocWithZone((Class)NSError);
          v95 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          v96 = objc_msgSend(v94, sel_initWithDomain_code_userInfo_, v95, 514, _NativeDictionary.bridged()(), v131);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v97 = objc_msgSend(v96, sel_domain);
          v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
          v100 = v99;

          if (v98 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
            && v100 == v101)
          {
            swift_bridgeObjectRelease_n();
            v64 = v137;
          }
          else
          {
            v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v64 = v137;
            if ((v116 & 1) == 0)
            {
LABEL_90:
              __break(1u);
              goto LABEL_91;
            }
          }
          swift_willThrow();
          a6 = v93;
          v40 = v139;
          v39 = v141;
          v41 = v138;
        }
        else
        {
          v129 = (uint64_t)a8;
          v62 = v59;
          v63 = v136;
          v64 = v137;
          v39 = v141;
          v40 = v139;
          v41 = v138;
          closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v62, v137, a3, v141, v139, a6, v138, v135, v134, v129, v133, v140, (uint64_t)a4, (int)v15);
          if (!v63)
            goto LABEL_75;
        }
        swift_willThrow();
LABEL_75:
        outlined consume of PathOrURL(v39, v40, a6, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_76;
      }
LABEL_85:
      v54 = String.UTF8View._foreignCount()();
      goto LABEL_29;
    }
  }
  v137 = (std::__fs::filesystem::path *)&v131;
  MEMORY[0x1E0C80A78](isStackAllocationSafe);
  a7 = (uint64_t)&v131 - v27;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, a7, v26, 1, v23, cat);
  v29 = v28;
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
  {
    a4 = (void *)a6;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v43 = objc_allocWithZone((Class)NSError);
    v44 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v43, sel_initWithDomain_code_userInfo_, v44, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v45 = objc_msgSend(v15, sel_domain);
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v48 = v47;

    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    a7 = v50;
    if (v46 == v49 && v48 == v50)
    {
      swift_bridgeObjectRelease_n();
      a6 = (uint64_t)a4;
    }
    else
    {
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a6 = (uint64_t)a4;
      if ((v65 & 1) == 0)
      {
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
    }
    swift_willThrow();
    v40 = v139;
    v39 = v141;
    v41 = v138;
LABEL_68:
    swift_willThrow();
    goto LABEL_77;
  }
  v23 = *(_QWORD *)&a3->__val_;
  cat = (unint64_t)a3->__cat_;
  v132 = a6;
  if ((cat & 0x1000000000000000) != 0)
    goto LABEL_81;
  if ((cat & 0x2000000000000000) != 0)
    v30 = HIBYTE(cat) & 0xF;
  else
    v30 = v23 & 0xFFFFFFFFFFFFLL;
LABEL_14:
  a6 = 3 * v30;
  if ((unsigned __int128)(v30 * (__int128)3) >> 64 != (3 * v30) >> 63)
  {
    __break(1u);
    goto LABEL_83;
  }
  if (a6 < -1)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  v31 = a6 + 1;
  outlined copy of PathOrURL(v141, v139, v132, v138);
  swift_bridgeObjectRetain();
  v32 = swift_bridgeObjectRetain();
  if (a6 < 1024 || (v32 = swift_stdlib_isStackAllocationSafe(), (v32 & 1) != 0))
  {
    v131 = (uint64_t)&v131;
    MEMORY[0x1E0C80A78](v32);
    v34 = (std::__fs::filesystem::path *)((char *)&v131 - v33);
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v34, v31, 1, v23, cat);
    v36 = v35;
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
      v37 = v34;
      v38 = (std::__fs::filesystem::path *)a7;
      v39 = v141;
      v40 = v139;
      a6 = v132;
      v41 = v138;
      v42 = v136;
      closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v37, v38, a3, v141, v139, v132, v138, v135, v134, (uint64_t)a8, v133, v140, (uint64_t)a4, (int)v15);
      if (!v42)
        goto LABEL_47;
      goto LABEL_50;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v66 = objc_allocWithZone((Class)NSError);
    v67 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v68 = objc_msgSend(v66, sel_initWithDomain_code_userInfo_, v67, 514, _NativeDictionary.bridged()(), v131);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v69 = objc_msgSend(v68, sel_domain);
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    v72 = v71;

    if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v72 == v73)
    {
      swift_bridgeObjectRelease_n();
      a6 = v132;
      v39 = v141;
LABEL_49:
      swift_willThrow();
      v40 = v139;
      v41 = v138;
LABEL_50:
      swift_willThrow();
LABEL_67:
      outlined consume of PathOrURL(v39, v40, a6, v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_68;
    }
    v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a6 = v132;
    v39 = v141;
    if ((v91 & 1) != 0)
      goto LABEL_49;
    goto LABEL_87;
  }
  v83 = swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, v83, v31, 1, v23, cat);
  v85 = v84;
  swift_bridgeObjectRelease();
  if ((v85 & 1) != 0)
  {
    v89 = v83;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
    v102 = objc_allocWithZone((Class)NSError);
    v103 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v104 = objc_msgSend(v102, sel_initWithDomain_code_userInfo_, v103, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v105 = objc_msgSend(v104, sel_domain);
    v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
    v108 = v107;

    if (v106 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v108 == v109)
    {
      swift_bridgeObjectRelease_n();
      v39 = v141;
    }
    else
    {
      v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v39 = v141;
      if ((v117 & 1) == 0)
      {
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
      }
    }
    swift_willThrow();
    a6 = v132;
    v40 = v139;
    v41 = v138;
LABEL_66:
    MEMORY[0x186DA9E78](v89, -1, -1);
    goto LABEL_67;
  }
  v86 = (std::__fs::filesystem::path *)v83;
  v87 = (std::__fs::filesystem::path *)a7;
  v88 = a3;
  v39 = v141;
  v40 = v139;
  v89 = v83;
  a6 = v132;
  v41 = v138;
  v90 = v136;
  closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v86, v87, v88, v141, v139, v132, v138, v135, v134, (uint64_t)a8, v133, v140, (uint64_t)a4, (int)v15);
  if (v90)
    goto LABEL_66;
  MEMORY[0x186DA9E78](v89, -1, -1);
LABEL_47:
  outlined consume of PathOrURL(v39, v40, a6, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_77:
  outlined consume of PathOrURL(v39, v40, a6, v41);
  return swift_bridgeObjectRelease();
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v8;
  _OWORD *v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char v15;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  _OWORD *v22;
  const char *v23;
  char v24;
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 *v70;
  __int128 *v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  uint64_t v81;
  _OWORD *v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v99;
  const char *v101;
  uint64_t v102;
  __int128 *v103;
  _QWORD *v104;
  char *v105;
  int64_t v106;
  int64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  _OWORD *v116;
  _OWORD v117[2];
  uint64_t v118;
  _OWORD v119[2];
  _OWORD v120[2];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;

  v5 = v4;
  v8 = a2;
  v9 = (_OWORD *)a1;
  v125 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_115;
  if ((a2 & 0x2000000000000000) != 0)
    isStackAllocationSafe = HIBYTE(a2) & 0xF;
  else
    isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  while (1)
  {
    v11 = 3 * isStackAllocationSafe;
    if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
    {
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (v11 < -1)
      goto LABEL_117;
    v12 = v11 + 1;
    if (v11 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
    {
      v103 = a4;
      MEMORY[0x1E0C80A78](isStackAllocationSafe);
      v14 = (char *)&v101 - v13;
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v12, 1, (uint64_t)v9, v8);
      v16 = v15;
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
      {
        closure #1 in _FileManagerImpl.subpathsOfDirectory(atPath:)(v14, a3, (unint64_t)v103, &v111);
        if (!v5)
        {
          a3 = v111;
          swift_bridgeObjectRelease();
          return a3;
        }
LABEL_60:
        swift_willThrow();
        goto LABEL_107;
      }
      *(_QWORD *)&v113 = MEMORY[0x1E0DEE9E0];
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
      v19 = v18;
      v20 = (unint64_t)v103;
      v118 = a3;
      *(_QWORD *)&v119[0] = v103;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      specialized Dictionary.subscript.setter((uint64_t)&v121, (uint64_t)v17, v19);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
      v9 = v22;
      URL.init(_fileManagerFailableFileURLWithPath:)(a3, v20, (uint64_t)&v118);
      if (v118)
      {
        v116 = (_OWORD *)v118;
        v117[0] = v119[0];
        lazy protocol witness table accessor for type URL and conformance URL();
        AnyHashable.init<A>(_:)();
      }
      else
      {
        v121 = 0u;
        v122 = 0u;
        *(_QWORD *)&v123 = 0;
      }
      a3 = (uint64_t)&v121;
      specialized Dictionary.subscript.setter((uint64_t)&v121, (uint64_t)v21, (uint64_t)v9);
      v105 = (char *)v113;
      v26 = *(_QWORD *)(v113 + 16);
      v101 = (const char *)&v101;
      if (v26)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v5 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      }
      v27 = v105;
      v28 = *((_QWORD *)v105 + 8);
      v107 = (int64_t)(v105 + 64);
      v29 = -1;
      v30 = -1 << v105[32];
      v102 = ~v30;
      if (-v30 < 64)
        v29 = ~(-1 << -(char)v30);
      v8 = v29 & v28;
      v106 = (unint64_t)(63 - v30) >> 6;
      a4 = &v122;
      v109 = (uint64_t)v117 + 8;
      v104 = v5 + 8;
      swift_bridgeObjectRetain();
      v110 = 0;
      v108 = MEMORY[0x1E0DEE9B8] + 8;
      if (v8)
      {
        while (1)
        {
          while (1)
          {
            v32 = __clz(__rbit64(v8));
            v8 &= v8 - 1;
            v33 = v32 | (v110 << 6);
LABEL_47:
            v38 = (_QWORD *)(*((_QWORD *)v27 + 6) + 16 * v33);
            v40 = (_OWORD *)*v38;
            v39 = v38[1];
            outlined init with copy of AnyHashable(*((_QWORD *)v27 + 7) + 40 * v33, (uint64_t)&v122);
            *(_QWORD *)&v121 = v40;
            *((_QWORD *)&v121 + 1) = v39;
            v113 = v122;
            v114 = v123;
            v115 = v124;
            v116 = v40;
            *(_QWORD *)&v117[0] = v39;
            swift_bridgeObjectRetain();
            v41 = (_OWORD *)v109;
            swift_dynamicCast();
            v9 = v116;
            v42 = *(_QWORD *)&v117[0];
            outlined init with take of Any(v41, (_OWORD *)((char *)v119 + 8));
            outlined init with take of Any((_OWORD *)((char *)v119 + 8), v120);
            outlined init with take of Any(v120, &v118);
            v43 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9, v42);
            a3 = v43;
            if ((v44 & 1) == 0)
              break;
            v31 = (_QWORD *)(v5[6] + 16 * v43);
            swift_bridgeObjectRelease();
            *v31 = v9;
            v31[1] = v42;
            v27 = v105;
            a3 = v5[7] + 32 * a3;
            __swift_destroy_boxed_opaque_existential_1(a3);
            outlined init with take of Any(&v118, (_OWORD *)a3);
            if (!v8)
              goto LABEL_27;
          }
          if (v5[2] >= v5[3])
            break;
          *(_QWORD *)((char *)v104 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
          v45 = (_QWORD *)(v5[6] + 16 * v43);
          *v45 = v9;
          v45[1] = v42;
          outlined init with take of Any(&v118, (_OWORD *)(v5[7] + 32 * v43));
          v46 = v5[2];
          v47 = __OFADD__(v46, 1);
          v48 = v46 + 1;
          if (v47)
            goto LABEL_110;
          v5[2] = v48;
          if (!v8)
            goto LABEL_27;
        }
        __break(1u);
LABEL_110:
        __break(1u);
      }
      else
      {
LABEL_27:
        v34 = v110 + 1;
        if (!__OFADD__(v110, 1))
        {
          if (v34 >= v106)
            goto LABEL_52;
          v35 = *(_QWORD *)(v107 + 8 * v34);
          v36 = v110 + 1;
          if (!v35)
          {
            v36 = v110 + 2;
            if (v110 + 2 >= v106)
              goto LABEL_52;
            v35 = *(_QWORD *)(v107 + 8 * v36);
            if (!v35)
            {
              v36 = v110 + 3;
              if (v110 + 3 >= v106)
                goto LABEL_52;
              v35 = *(_QWORD *)(v107 + 8 * v36);
              if (!v35)
              {
                v36 = v110 + 4;
                if (v110 + 4 >= v106)
                  goto LABEL_52;
                v35 = *(_QWORD *)(v107 + 8 * v36);
                if (!v35)
                {
                  v36 = v110 + 5;
                  if (v110 + 5 >= v106)
                    goto LABEL_52;
                  v35 = *(_QWORD *)(v107 + 8 * v36);
                  if (!v35)
                  {
                    v36 = v110 + 6;
                    if (v110 + 6 >= v106)
                      goto LABEL_52;
                    v35 = *(_QWORD *)(v107 + 8 * v36);
                    if (!v35)
                    {
                      v37 = v110 + 7;
                      if (v110 + 7 < v106)
                      {
                        v35 = *(_QWORD *)(v107 + 8 * v37);
                        if (v35)
                        {
                          v36 = v110 + 7;
                          goto LABEL_46;
                        }
                        while (1)
                        {
                          v36 = v37 + 1;
                          if (__OFADD__(v37, 1))
                            break;
                          if (v36 >= v106)
                            goto LABEL_52;
                          v35 = *(_QWORD *)(v107 + 8 * v36);
                          ++v37;
                          if (v35)
                            goto LABEL_46;
                        }
LABEL_118:
                        __break(1u);
                        goto LABEL_119;
                      }
LABEL_52:
                      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
                      swift_bridgeObjectRelease();
                      a3 = (uint64_t)CFSTR("NSCocoaErrorDomain");
                      static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
                      v49 = objc_allocWithZone((Class)NSError);
                      v50 = String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      v51 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, 4, _NativeDictionary.bridged()(), v101, v102);
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      v52 = objc_msgSend(v51, sel_domain);
                      v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
                      v55 = v54;

                      if (v53 != static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"))
                        || v55 != v56)
                      {
                        a3 = v56;
                        v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v58 & 1) != 0)
                        {
LABEL_59:
                          swift_willThrow();
                          goto LABEL_60;
                        }
                        __break(1u);
                      }
                      swift_bridgeObjectRelease_n();
                      goto LABEL_59;
                    }
                  }
                }
              }
            }
          }
LABEL_46:
          v8 = (v35 - 1) & v35;
          v33 = __clz(__rbit64(v35)) + (v36 << 6);
          v110 = v36;
          goto LABEL_47;
        }
      }
      __break(1u);
      goto LABEL_112;
    }
    v23 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v23, v12, 1, (uint64_t)v9, v8);
    v25 = v24;
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      closure #1 in _FileManagerImpl.subpathsOfDirectory(atPath:)(v23, a3, (unint64_t)a4, &v112);
      if (v5)
        goto LABEL_106;
      MEMORY[0x186DA9E78](v23, -1, -1);
      swift_bridgeObjectRelease();
      return v112;
    }
    *(_QWORD *)&v113 = MEMORY[0x1E0DEE9E0];
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSFilePath"));
    v61 = v60;
    v118 = a3;
    *(_QWORD *)&v119[0] = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    specialized Dictionary.subscript.setter((uint64_t)&v121, (uint64_t)v59, v61);
    v8 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSURL"));
    v63 = v62;
    URL.init(_fileManagerFailableFileURLWithPath:)(a3, (unint64_t)a4, (uint64_t)&v118);
    if (v118)
    {
      v116 = (_OWORD *)v118;
      v117[0] = v119[0];
      lazy protocol witness table accessor for type URL and conformance URL();
      AnyHashable.init<A>(_:)();
    }
    else
    {
      v121 = 0u;
      v122 = 0u;
      *(_QWORD *)&v123 = 0;
    }
    a3 = (uint64_t)&v121;
    specialized Dictionary.subscript.setter((uint64_t)&v121, v8, v63);
    v64 = v113;
    v65 = *(_QWORD *)(v113 + 16);
    v103 = a4;
    v101 = v23;
    if (v65)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      v5 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    }
    v66 = *(_QWORD *)(v64 + 64);
    v106 = v64 + 64;
    v67 = -1;
    v68 = -1 << *(_BYTE *)(v64 + 32);
    v102 = ~v68;
    if (-v68 < 64)
      v67 = ~(-1 << -(char)v68);
    v69 = v67 & v66;
    v107 = (unint64_t)(63 - v68) >> 6;
    v70 = &v122;
    a4 = (_OWORD *)((char *)v117 + 8);
    v9 = (_OWORD *)((char *)v119 + 8);
    v104 = v5 + 8;
    swift_bridgeObjectRetain();
    v109 = 0;
    v108 = MEMORY[0x1E0DEE9B8] + 8;
    v105 = (char *)v119 + 8;
    if (!v69)
      break;
    while (1)
    {
      while (1)
      {
        v110 = (v69 - 1) & v69;
        v75 = __clz(__rbit64(v69)) | (v109 << 6);
LABEL_93:
        v80 = (_QWORD *)(*(_QWORD *)(v64 + 48) + 16 * v75);
        v82 = (_OWORD *)*v80;
        v81 = v80[1];
        outlined init with copy of AnyHashable(*(_QWORD *)(v64 + 56) + 40 * v75, (uint64_t)v70);
        *(_QWORD *)&v121 = v82;
        *((_QWORD *)&v121 + 1) = v81;
        v83 = v70[1];
        v113 = *v70;
        v114 = v83;
        v115 = *((_QWORD *)v70 + 4);
        v116 = v82;
        *(_QWORD *)&v117[0] = v81;
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        v84 = (uint64_t)v116;
        v8 = *(_QWORD *)&v117[0];
        outlined init with take of Any(a4, v9);
        outlined init with take of Any(v9, v120);
        outlined init with take of Any(v120, &v118);
        v85 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v8);
        a3 = v85;
        if ((v86 & 1) == 0)
          break;
        v71 = v70;
        v72 = a4;
        v73 = v64;
        v74 = (uint64_t *)(v5[6] + 16 * v85);
        swift_bridgeObjectRelease();
        *v74 = v84;
        v74[1] = v8;
        v64 = v73;
        a4 = v72;
        v70 = v71;
        v9 = v105;
        a3 = v5[7] + 32 * a3;
        __swift_destroy_boxed_opaque_existential_1(a3);
        outlined init with take of Any(&v118, (_OWORD *)a3);
        v69 = v110;
        if (!v110)
          goto LABEL_73;
      }
      if (v5[2] >= v5[3])
        break;
      *(_QWORD *)((char *)v104 + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v85;
      v87 = (uint64_t *)(v5[6] + 16 * v85);
      *v87 = v84;
      v87[1] = v8;
      outlined init with take of Any(&v118, (_OWORD *)(v5[7] + 32 * v85));
      v88 = v5[2];
      v47 = __OFADD__(v88, 1);
      v89 = v88 + 1;
      if (v47)
        goto LABEL_113;
      v5[2] = v89;
      v69 = v110;
      if (!v110)
        goto LABEL_73;
    }
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
LABEL_73:
  v76 = v109 + 1;
  if (__OFADD__(v109, 1))
    goto LABEL_114;
  if (v76 >= v107)
    goto LABEL_98;
  v77 = *(_QWORD *)(v106 + 8 * v76);
  v78 = v109 + 1;
  if (v77)
    goto LABEL_92;
  v78 = v109 + 2;
  if (v109 + 2 >= v107)
    goto LABEL_98;
  v77 = *(_QWORD *)(v106 + 8 * v78);
  if (v77)
    goto LABEL_92;
  v78 = v109 + 3;
  if (v109 + 3 >= v107)
    goto LABEL_98;
  v77 = *(_QWORD *)(v106 + 8 * v78);
  if (v77)
    goto LABEL_92;
  v78 = v109 + 4;
  if (v109 + 4 >= v107)
    goto LABEL_98;
  v77 = *(_QWORD *)(v106 + 8 * v78);
  if (v77)
    goto LABEL_92;
  v78 = v109 + 5;
  if (v109 + 5 >= v107)
    goto LABEL_98;
  v77 = *(_QWORD *)(v106 + 8 * v78);
  if (v77)
    goto LABEL_92;
  v78 = v109 + 6;
  if (v109 + 6 >= v107)
    goto LABEL_98;
  v77 = *(_QWORD *)(v106 + 8 * v78);
  if (v77)
  {
LABEL_92:
    v109 = v78;
    v110 = (v77 - 1) & v77;
    v75 = __clz(__rbit64(v77)) + (v78 << 6);
    goto LABEL_93;
  }
  v79 = (char *)(v109 + 7);
  if (v109 + 7 < v107)
  {
    v77 = *(_QWORD *)(v106 + 8 * (_QWORD)v79);
    if (v77)
    {
      v78 = v109 + 7;
      goto LABEL_92;
    }
    while (1)
    {
      v78 = (uint64_t)(v79 + 1);
      if (__OFADD__(v79, 1))
        break;
      if (v78 >= v107)
        goto LABEL_98;
      v77 = *(_QWORD *)(v106 + 8 * v78);
      ++v79;
      if (v77)
        goto LABEL_92;
    }
LABEL_119:
    __break(1u);
  }
LABEL_98:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  a3 = (uint64_t)CFSTR("NSCocoaErrorDomain");
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain"));
  v90 = objc_allocWithZone((Class)NSError);
  v91 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v92 = objc_msgSend(v90, sel_initWithDomain_code_userInfo_, v91, 4, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v93 = objc_msgSend(v92, sel_domain);
  v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
  v96 = v95;

  if (v94 == static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("NSCocoaErrorDomain")) && v96 == v97)
  {
LABEL_104:
    swift_bridgeObjectRelease_n();
    v23 = v101;
  }
  else
  {
    a3 = v97;
    v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v101;
    if ((v99 & 1) == 0)
    {
      __break(1u);
      goto LABEL_104;
    }
  }
  swift_willThrow();
LABEL_106:
  MEMORY[0x186DA9E78](v23, -1, -1);
LABEL_107:
  swift_bridgeObjectRelease();
  return a3;
}

size_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2)
{
  return specialized String.withFileSystemRepresentation<A>(_:)(a1, a2, 0x401uLL);
}

{
  return specialized String.withFileSystemRepresentation<A>(_:)(a1, a2, 0x100uLL);
}

size_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2, size_t a3)
{
  Swift::Int isStackAllocationSafe;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char v11;
  char v12;
  size_t v13;
  const char *v14;
  char v15;
  char v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  v7 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_19:
    __break(1u);
  }
  if (v7 < -1)
    goto LABEL_19;
  v8 = v7 + 1;
  if (v7 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v10 = (char *)v18 - v9;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v10, v8, 1, a1, a2);
    v12 = v11;
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
      return 0;
    else
      return strnlen(v10, a3);
  }
  else
  {
    v14 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v8, 1, a1, a2);
    v16 = v15;
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      v13 = 0;
    else
      v13 = strnlen(v14, a3);
    MEMORY[0x186DA9E78](v14, -1, -1);
  }
  return v13;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int isStackAllocationSafe;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  v5 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_19:
    __break(1u);
  }
  if (v5 < -1)
    goto LABEL_19;
  v6 = v5 + 1;
  if (v5 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v8 = (char *)v16 - v7;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v8, v6, 1, a1, a2);
    v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return 0xFFFFFFFFLL;
    else
      return foundation_sandbox_check_path();
  }
  else
  {
    v12 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v12, v6, 1, a1, a2);
    v14 = v13;
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      v11 = 0xFFFFFFFFLL;
    else
      v11 = foundation_sandbox_check_path();
    MEMORY[0x186DA9E78](v12, -1, -1);
  }
  return v11;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  Swift::Int isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  size_t v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  v10 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }
  if (v10 < -1)
    goto LABEL_23;
  v11 = v10 + 1;
  if (v10 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v13 = (char *)&v20 - v12;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v13, v11, 1, a1, a2);
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
    {
      a3 = 0;
    }
    else
    {
      closure #1 in String._resolvingSymlinksInPath()((uint64_t)v13, a3, a4, (size_t *)&v21);
      if (v4)
        swift_willThrow();
      else
        a3 = v21;
    }
  }
  else
  {
    v16 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v16, v11, 1, a1, a2);
    v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      a3 = 0;
    }
    else
    {
      closure #1 in String._resolvingSymlinksInPath()(v16, a3, a4, v22);
      if (!v4)
        a3 = v22[0];
    }
    MEMORY[0x186DA9E78](v16, -1, -1);
  }
  swift_bridgeObjectRelease();
  return a3;
}

uint64_t String.withFileSystemRepresentation<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Swift::Int isStackAllocationSafe;
  uint64_t v18;
  void (*v19)(char *);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  char *v25;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v36 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v33 - v14;
  if ((v16 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a3 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a3) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a2 & 0xFFFFFFFFFFFFLL;
  }
  v18 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if (v18 < -1)
    goto LABEL_21;
  v35 = a4;
  v19 = a1;
  v20 = v18 + 1;
  if (v18 <= 1023 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    v34 = a5;
    v37 = &v33;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v22 = (char *)&v33 - v21;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v22, v20, 1, a2, a3);
    v24 = v23;
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
      v25 = 0;
    else
      v25 = v22;
    v19(v25);
    if (v5)
    {
      return swift_willThrow();
    }
    else
    {
      v27 = v35;
      v28 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      v28(v15, v12, v35);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v34, v15, v27);
    }
  }
  else
  {
    v29 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v29, v20, 1, a2, a3);
    v31 = v30;
    swift_bridgeObjectRelease();
    if ((v31 & 1) != 0)
      v32 = 0;
    else
      v32 = v29;
    v19((char *)v32);
    return MEMORY[0x186DA9E78](v29, -1, -1);
  }
}

Swift::String __swiftcall String._trimmingWhitespace()()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  v2 = v1;
  v3 = v0;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection._trimmingCharacters(while:)(v3, v2);
  swift_bridgeObjectRelease();
  v4 = String.init(_:)();
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

size_t specialized UnsafeMutableBufferPointer.initialize<A>(from:)(char **a1, char *__src, int64_t a3, char *__dst, int64_t a5)
{
  char *v6;
  size_t v8;
  char *v9;
  size_t result;

  v6 = __src;
  if (!a3 || !a5)
  {
    v8 = 0;
    v9 = &__src[a3];
    if (!__src)
      v9 = 0;
    goto LABEL_12;
  }
  if (a3 >= a5)
    v8 = a5;
  else
    v8 = a3;
  if ((v8 & 0x8000000000000000) == 0 && (&__dst[v8] <= __src || &__src[v8] <= __dst))
  {
    memcpy(__dst, __src, v8);
    v9 = &v6[a3];
    v6 += v8;
LABEL_12:
    *a1 = v6;
    a1[1] = v9;
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t String.init(_utf16:count:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
    return specialized String.init(_utf16:)(result, a3);
  __break(1u);
  return result;
}

uint64_t String._decomposed(_:into:nullTerminated:)(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  char v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[2];

  v11 = a1 & 1;
  swift_bridgeObjectRetain();
  if ((a6 & 0x1000000000000000) != 0)
  {
    a5 = static String._copying(_:)();
    v16 = v15;
    swift_bridgeObjectRelease();
    a6 = v16;
    if ((v16 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_7:
    v13 = HIBYTE(a6) & 0xF;
    v20[0] = a5;
    v20[1] = a6 & 0xFFFFFFFFFFFFFFLL;
    v14 = a4 & 1;
    v12 = (unsigned __int8 *)v20;
    goto LABEL_8;
  }
  if ((a6 & 0x2000000000000000) != 0)
    goto LABEL_7;
LABEL_3:
  if ((a5 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = a5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v13 = v19;
  }
  v14 = a4 & 1;
LABEL_8:
  v17 = specialized UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v11, a2, a3, v14, v12, v13);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(char a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned __int8 *v42;
  int v43;
  unsigned int v44;
  unsigned __int8 v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  void (*v55)(_BYTE *, uint64_t);
  _BYTE *v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  void (*v72)(_QWORD *, _QWORD);
  char *v73;
  int v74;
  char *v75;
  char v76;
  uint64_t *v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE v80[12];
  int v81;
  _QWORD *v82;
  _BYTE *v83;
  uint64_t v84;
  _DWORD *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char **v97;
  uint64_t v98;
  uint64_t *v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  unsigned __int8 v104;
  _QWORD v105[2];
  int v106;
  _UNKNOWN **v107;
  int v108;
  _UNKNOWN **v109;
  int v110;
  _UNKNOWN **v111;
  int v112;
  _UNKNOWN **v113;
  int v114;
  _UNKNOWN **v115;
  int v116;
  _UNKNOWN **v117;
  int v118;
  _UNKNOWN **v119;
  int v120;
  _UNKNOWN **v121;
  int v122;
  _UNKNOWN **v123;
  int v124;
  _UNKNOWN **v125;
  int v126;
  _UNKNOWN **v127;
  int v128;
  _UNKNOWN **v129;
  int v130;
  _UNKNOWN **v131;
  uint64_t v132;

  v7 = v6;
  v81 = a4;
  v98 = a2;
  v132 = *MEMORY[0x1E0C80C00];
  v12 = type metadata accessor for Unicode._NFD();
  MEMORY[0x1E0C80A78](v12);
  v83 = &v80[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for Unicode.CanonicalCombiningClass();
  v91 = *(_QWORD *)(v14 - 8);
  v92 = v14;
  MEMORY[0x1E0C80A78](v14);
  v90 = &v80[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16);
  v89 = &v80[-v17];
  v18 = type metadata accessor for Unicode.Scalar.Properties();
  v87 = *(_QWORD *)(v18 - 8);
  v88 = v18;
  MEMORY[0x1E0C80A78](v18);
  v86 = &v80[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v99 = (uint64_t *)swift_allocObject();
  v99[2] = 0;
  v20 = swift_allocObject();
  v21 = a3;
  v22 = v20;
  *(_QWORD *)(v20 + 16) = MEMORY[0x1E0DEE9D8];
  v97 = (char **)(v20 + 16);
  if (a5)
    v23 = (char *)&a5[a6];
  else
    v23 = 0;
  if (a3 < 1)
  {
    v24 = 0;
    LOBYTE(v29) = 1;
    v30 = v99;
LABEL_9:
    v31 = v29;
    v32 = v24;
    v33 = v21;
    specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v22, v98, (uint64_t)v30, v21);
    if (!v7)
    {
      if (a5 && a5 != (unsigned __int8 *)v23)
      {
LABEL_12:
        v30 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        swift_allocError();
        *v34 = 0;
LABEL_91:
        swift_willThrow();
        goto LABEL_92;
      }
      if ((v31 & 1) != 0)
      {
        if ((v81 & 1) != 0)
        {
          v77 = v30;
          v78 = v30[2];
          if (v78 < v33)
          {
            *(_BYTE *)(v98 + v78) = 0;
            swift_release();
            v30 = (uint64_t *)(v78 + 1);
            v77[2] = (uint64_t)v30;
            goto LABEL_93;
          }
          goto LABEL_12;
        }
        swift_release();
        v30 = (uint64_t *)v30[2];
LABEL_93:
        swift_release();
        return (uint64_t)v30;
      }
      swift_release();
      swift_release();
      v30 = (uint64_t *)(v32 + 1);
      if (!__OFADD__(v32, 1))
        return (uint64_t)v30;
      __break(1u);
    }
LABEL_92:
    swift_release();
    goto LABEL_93;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 24;
  if ((a1 & 1) == 0)
    v28 = 10;
  v84 = v20;
  v85 = &v105[v28];
  v82 = &v105[v28 + 1];
  v29 = 1;
  v30 = v99;
  v95 = v21;
  v96 = v23;
  while (1)
  {
    v103 = v25;
    v104 = v26;
    if (v26)
    {
      if ((v25 & 0x80) == 0)
      {
        v102 = v29;
        lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser();
        v70 = v25;
        v71 = v24;
        v72 = (void (*)(_QWORD *, _QWORD))Locale.Language.components.modify();
        specialized RangeReplaceableCollection.remove(at:)(0);
        v30 = v99;
        v72(v105, 0);
        v29 = v102;
        v24 = v71;
        v21 = v95;
        v44 = (v70 + 1);
        goto LABEL_49;
      }
      if (!a5)
        goto LABEL_37;
      v42 = a5;
      if (a5 == (unsigned __int8 *)v23)
        goto LABEL_37;
    }
    else
    {
      if (!a5 || a5 == (unsigned __int8 *)v23)
        goto LABEL_9;
      v41 = (char)*a5++;
      v42 = a5;
      v43 = v41;
      if ((v41 & 0x80000000) == 0)
      {
        v44 = v43 + 1;
        goto LABEL_49;
      }
      v25 = v25 & 0xFFFFFF00 | v43;
      v26 = 8;
      if (a5 == (unsigned __int8 *)v23)
        goto LABEL_37;
    }
    a5 = v42 + 1;
    v25 = ((-255 << v26) - 1) & v25 | (*v42 << v26);
    v45 = v26 + 8;
    if ((v26 + 8) < 0x20u)
    {
      if (a5 == (unsigned __int8 *)v23)
        goto LABEL_33;
      a5 = v42 + 2;
      v25 = ((-255 << v45) - 1) & v25 | (v42[1] << v45);
      v45 = v26 + 16;
      if ((v26 + 16) <= 0x1Fu)
      {
        if (a5 == (unsigned __int8 *)v23)
          goto LABEL_33;
        a5 = v42 + 3;
        v25 = ((-255 << v45) - 1) & v25 | (v42[2] << v45);
        v45 = v26 + 24;
        if ((v26 + 24) <= 0x1Fu)
        {
          if (a5 == (unsigned __int8 *)v23)
            goto LABEL_33;
          a5 = v42 + 4;
          v25 = ((-255 << v45) - 1) & v25 | (v42[3] << v45);
          v45 = v26 + 32;
          if (v26 >= 0xE0u)
          {
            if (a5 == (unsigned __int8 *)v23
              || (v25 = ((-255 << v26) - 1) & v25 | (v42[4] << v26), v45 = v26 + 40, (v26 + 40) < 0x20u))
            {
LABEL_33:
              v26 = v45;
              a5 = (unsigned __int8 *)v23;
              if (!v45)
              {
                a5 = (unsigned __int8 *)v23;
                goto LABEL_9;
              }
              goto LABEL_37;
            }
            a5 = v42 + 5;
          }
        }
      }
    }
    v26 = v45;
LABEL_37:
    if ((v25 & 0xC0E0) == 0x80C0)
    {
      if ((v25 & 0x1E) == 0)
        goto LABEL_84;
      v46 = 16;
    }
    else if ((v25 & 0xC0C0F0) == 0x8080E0)
    {
      if ((v25 & 0x200F) == 0 || (v25 & 0x200F) == 0x200D)
        goto LABEL_84;
      v46 = 24;
    }
    else
    {
      if ((v25 & 0xC0C0C0F8) != 0x808080F0 || (v25 & 0x3007) == 0 || __rev16(v25 & 0x3007) > 0x400)
      {
LABEL_84:
        Unicode.UTF8.ForwardParser._invalidLength()();
        v30 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        swift_allocError();
        v76 = 2;
LABEL_90:
        *v75 = v76;
        goto LABEL_91;
      }
      v46 = 32;
    }
    v103 = (unint64_t)v25 >> v46;
    v104 = v26 - v46;
    v44 = ((1 << (v46 >> 1) << (v46 >> 1)) - 1) & (v25 + 16843009);
LABEL_49:
    v47 = 4 - (__clz(v44) >> 3);
    switch(v47)
    {
      case 1:
        v48 = v44 - 1;
        break;
      case 2:
        v48 = (((v44 - 257) & 0x1F) << 6) | ((v44 - 257) >> 8) & 0x3F;
        break;
      case 3:
        v48 = ((v44 - 65793) >> 2) & 0xFC0 | ((v44 - 65793) >> 16) & 0x3F | (((v44 - 65793) & 0xF) << 12);
        break;
      default:
        v48 = ((v44 - 16843009) >> 10) & 0xFC0 | ((v44 - 16843009) >> 24) & 0x3F | ((((v44 - 16843009) >> 8) & 0x3F) << 12) & 0xFFE3FFFF | (((v44 - 16843009) & 7) << 18);
        break;
    }
    v49 = v48 != 0;
    if (!v48)
      v24 = v27;
    if (!((v48 == 0) | v29 & 1))
    {
      v30 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
      lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
      swift_allocError();
      v76 = 1;
      goto LABEL_90;
    }
    v102 = v29;
    v100 = v103;
    v101 = v104;
    if (v48 < 0x80)
    {
      v59 = v7;
      v60 = v22;
      v61 = v22;
      v62 = v98;
      v63 = v21;
      specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v61, v98, (uint64_t)v30, v21);
      if (v59)
        goto LABEL_92;
      v64 = v30[2];
      v40 = v102;
      if (v64 >= v63)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
        v30 = (uint64_t *)swift_allocError();
        *v79 = 0;
        swift_willThrow();
        swift_release();
        goto LABEL_93;
      }
      v21 = v63;
      *(_BYTE *)(v62 + v64) = v48;
      v30[2] = v64 + 1;
      v22 = v60;
      v7 = 0;
      v23 = v96;
      goto LABEL_16;
    }
    v93 = a5;
    v94 = v24;
    v50 = v7;
    v51 = v22;
    v52 = v86;
    Unicode.Scalar.properties.getter();
    v53 = v89;
    Unicode.Scalar.Properties.canonicalCombiningClass.getter();
    (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v52, v88);
    v54 = v90;
    static Unicode.CanonicalCombiningClass.notReordered.getter();
    LOBYTE(v52) = static Unicode.CanonicalCombiningClass.== infix(_:_:)();
    v55 = *(void (**)(_BYTE *, uint64_t))(v91 + 8);
    v56 = v54;
    v57 = v92;
    v55(v56, v92);
    result = ((uint64_t (*)(_BYTE *, uint64_t))v55)(v53, v57);
    if ((v52 & 1) != 0)
    {
      v22 = v51;
      v30 = v99;
      result = specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v51, v98, (uint64_t)v99, v95);
      v7 = v50;
      if (v50)
        goto LABEL_92;
    }
    else
    {
      v22 = v51;
      v7 = v50;
    }
    LODWORD(v105[0]) = 2;
    v105[1] = &__CFUniCharDecimalDigitCharacterSetBitmap;
    v106 = 15;
    v107 = &__CFUniCharLetterCharacterSetBitmap_0;
    v108 = 2;
    v109 = &__CFUniCharLowercaseLetterCharacterSetBitmap_1;
    v110 = 2;
    v111 = &__CFUniCharUppercaseLetterCharacterSetBitmap_1;
    v112 = 15;
    v113 = &__CFUniCharNonBaseCharacterSetBitmap_0;
    v114 = 3;
    v115 = &__CFUniCharCanonicalDecomposableCharacterSetBitmap_0;
    v116 = 15;
    v117 = &__CFUniCharAlphanumericCharacterSetBitmap_0;
    v118 = 2;
    v119 = &__CFUniCharPunctuationCharacterSetBitmap_0;
    v120 = 15;
    v121 = &__CFUniCharLegalCharacterSetBitmap_0;
    v122 = 1;
    v123 = &__CFUniCharTitlecaseLetterCharacterSetBitmap_0;
    v124 = 2;
    v125 = &__CFUniCharSymbolAndOperatorCharacterSetBitmap_0;
    v126 = 2;
    v127 = &__CFUniCharCompatibilityDecomposableCharacterSetBitmap_0;
    v128 = 2;
    v129 = &__CFUniCharHfsPlusDecomposableCharacterSetBitmap_0;
    v130 = 2;
    v131 = &__CFUniCharStrongRightToLeftCharacterSetBitmap_0;
    a5 = v93;
    v24 = v94;
    if (BYTE2(v48) >= *v85)
    {
LABEL_71:
      v66 = *v97;
      v67 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v66 + 2) + 1, 1, v66);
      v69 = *((_QWORD *)v66 + 2);
      v68 = *((_QWORD *)v66 + 3);
      v21 = v95;
      v40 = v102;
      v26 = v101;
      if (v69 >= v68 >> 1)
      {
        v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v66);
        v26 = v101;
        v40 = v102;
        v21 = v95;
        v66 = v73;
      }
      *((_QWORD *)v66 + 2) = v69 + 1;
      *(_DWORD *)&v66[4 * v69 + 32] = v48;
      v23 = v96;
      *v97 = v66;
      v7 = v67;
      v22 = v84;
      v30 = v99;
      goto LABEL_17;
    }
    if (!*v82)
      break;
    v65 = *(_QWORD *)(*v82 + 8 * BYTE2(v48));
    if (!v65 || ((*(unsigned __int8 *)(v65 + ((unsigned __int16)v48 >> 3)) >> (v48 & 7)) & 1) == 0)
      goto LABEL_71;
    v35 = (v48 & 0x3F) << 8;
    if (v48 >= 0x800)
    {
      v74 = (v35 | (v48 >> 6) & 0x3F) << 8;
      if (HIWORD(v48))
      {
        v36 = ((v74 | (v48 >> 12) & 0x3F) << 8) | (v48 >> 18);
        v37 = -2122219023;
      }
      else
      {
        v36 = v74 | (v48 >> 12);
        v37 = 8487393;
      }
    }
    else
    {
      v36 = v35 | (v48 >> 6);
      v37 = 33217;
    }
    v105[0] = ((v36 + v37) + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8
                                                                          * (4 - (__clz(v36 + v37) >> 3))));
    v38 = MEMORY[0x186DA46D0](v105);
    v39 = (uint64_t)v83;
    MEMORY[0x186DA473C](v38);
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v39);
    v30 = v99;
    v21 = v95;
    v23 = v96;
    v40 = v102;
LABEL_16:
    v26 = v101;
LABEL_17:
    v29 = v49 & v40;
    v27 = v30[2];
    v25 = v100;
    if (v27 >= v21)
      goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t *specialized UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(char a1, uint64_t a2, uint64_t a3, int a4, unsigned __int16 *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  unsigned int v31;
  unsigned __int16 *v32;
  int v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t *result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  char v73;
  char *v74;
  int v75;
  _QWORD *v76;
  _DWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int16 *v86;
  uint64_t v87;
  uint64_t v88;
  char **v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unsigned __int8 v97;
  _QWORD v98[2];
  int v99;
  _UNKNOWN **v100;
  int v101;
  _UNKNOWN **v102;
  int v103;
  _UNKNOWN **v104;
  int v105;
  _UNKNOWN **v106;
  int v107;
  _UNKNOWN **v108;
  int v109;
  _UNKNOWN **v110;
  int v111;
  _UNKNOWN **v112;
  int v113;
  _UNKNOWN **v114;
  int v115;
  _UNKNOWN **v116;
  int v117;
  _UNKNOWN **v118;
  int v119;
  _UNKNOWN **v120;
  int v121;
  _UNKNOWN **v122;
  int v123;
  _UNKNOWN **v124;
  uint64_t v125;

  v7 = v6;
  v75 = a4;
  v90 = a2;
  v125 = *MEMORY[0x1E0C80C00];
  v12 = type metadata accessor for Unicode._NFD();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Unicode.CanonicalCombiningClass();
  v83 = *(_QWORD *)(v15 - 8);
  v84 = v15;
  MEMORY[0x1E0C80A78](v15);
  v82 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v81 = (char *)&v74 - v18;
  v19 = type metadata accessor for Unicode.Scalar.Properties();
  v79 = *(_QWORD *)(v19 - 8);
  v80 = v19;
  MEMORY[0x1E0C80A78](v19);
  v78 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = (uint64_t *)swift_allocObject();
  v91[2] = 0;
  v21 = swift_allocObject();
  v22 = a3;
  v92 = v21;
  *(_QWORD *)(v21 + 16) = MEMORY[0x1E0DEE9D8];
  v89 = (char **)(v21 + 16);
  if (a5)
    v23 = &a5[a6];
  else
    v23 = 0;
  v86 = v23;
  if (v22 < 1)
  {
    v24 = 0;
    LOBYTE(v29) = 1;
    v30 = v91;
LABEL_58:
    v65 = v29;
    v66 = v90;
    v67 = v22;
    specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v92, v90, (uint64_t)v30, v22);
    if (v7)
    {
LABEL_69:
      swift_release();
      swift_release();
      return v30;
    }
    v68 = v67;
    if (a5 && a5 != v86)
    {
LABEL_61:
      v30 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      swift_allocError();
      *v69 = 0;
LABEL_68:
      swift_willThrow();
      goto LABEL_69;
    }
    if ((v65 & 1) == 0)
    {
      swift_release();
      swift_release();
      v30 = (uint64_t *)(v24 + 1);
      if (!__OFADD__(v24, 1))
        return v30;
      __break(1u);
      goto LABEL_69;
    }
    if ((v75 & 1) != 0)
    {
      v70 = v30;
      v71 = v30[2];
      if (v71 >= v68)
        goto LABEL_61;
      *(_BYTE *)(v66 + v71) = 0;
      swift_release();
      v30 = (uint64_t *)(v71 + 1);
      v70[2] = (uint64_t)v30;
    }
    else
    {
      swift_release();
      v30 = (uint64_t *)v30[2];
    }
    swift_release();
    return v30;
  }
  v74 = v14;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 24;
  if ((a1 & 1) == 0)
    v28 = 10;
  v77 = &v98[v28];
  v76 = &v98[v28 + 1];
  v29 = 1;
  v30 = v91;
  v87 = v22;
  while (1)
  {
    v95 = v29;
    v96 = v26;
    v97 = v27;
    if ((_BYTE)v27)
    {
      if ((v26 & 0xF800) != 0xD800)
      {
        LOWORD(v31) = v26;
        v61 = v22;
        lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
        result = (uint64_t *)Locale.Language.components.modify();
        v63 = *(_BYTE *)(v62 + 4);
        if (!v63)
          goto LABEL_79;
        *(_DWORD *)v62 = *(unsigned __int16 *)(v62 + 2);
        *(_BYTE *)(v62 + 4) = v63 - 16;
        ((void (*)(_QWORD *, _QWORD))result)(v98, 0);
        v31 = (unsigned __int16)v31;
        LOBYTE(v29) = v95;
        v26 = v96;
        v34 = v97;
        v30 = v91;
        v22 = v61;
        goto LABEL_26;
      }
      if (!a5)
        goto LABEL_24;
      v32 = a5;
      if (a5 == v23)
        goto LABEL_24;
    }
    else
    {
      if (!a5 || a5 == v23)
        goto LABEL_58;
      v31 = *a5;
      v32 = a5 + 1;
      if ((v31 & 0xF800) != 0xD800)
      {
        v34 = 0;
        ++a5;
        goto LABEL_26;
      }
      v26 = v26 & 0xFFFF0000 | v31;
      v27 = 16;
      ++a5;
      if (v32 == v23)
        goto LABEL_24;
    }
    a5 = v32 + 1;
    v26 = (*v32 << v27) | ((-65535 << v27) - 1) & v26;
    v33 = v27 + 16;
    if ((v27 + 16) >= 0x20u)
      goto LABEL_23;
    if (a5 == v23)
      goto LABEL_20;
    a5 = v32 + 2;
    v26 = (v32[1] << v33) | ((-65535 << v33) - 1) & v26;
    v33 = v27 + 32;
    if (v27 < 0xE0u)
    {
LABEL_23:
      v27 = v33;
    }
    else if (a5 == v23
           || (a5 = v32 + 3,
               v26 = (v32[2] << v27) | ((-65535 << v27) - 1) & v26,
               v33 = v27 + 48,
               v27 += 48,
               v27 < 0x20u))
    {
LABEL_20:
      v27 = v33;
      if (!(_BYTE)v33)
        goto LABEL_58;
    }
LABEL_24:
    if ((v26 & 0xFC00FC00) != 0xDC00D800)
    {
      v30 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      swift_allocError();
      v73 = 2;
      goto LABEL_67;
    }
    v34 = (v27 - 32);
    v31 = (HIWORD(v26) & 0x3FF | ((v26 & 0x3FF) << 10)) + 0x10000;
    v26 = 0;
LABEL_26:
    v35 = v31 != 0;
    if (!v31)
      v24 = v25;
    if (!((v31 == 0) | v29 & 1))
    {
      v30 = &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
      swift_allocError();
      v73 = 1;
LABEL_67:
      *v72 = v73;
      goto LABEL_68;
    }
    v93 = v34;
    v94 = v26;
    if (v31 < 0x80)
    {
      v44 = v90;
      v45 = v7;
      v46 = v22;
      specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v92, v90, (uint64_t)v30, v22);
      if (v45)
        goto LABEL_69;
      v47 = v30[2];
      v26 = v94;
      v48 = v95;
      v27 = v93;
      if (v47 >= v46)
        goto LABEL_61;
      v22 = v46;
      *(_BYTE *)(v44 + v47) = v31;
      v30[2] = v47 + 1;
      v7 = 0;
      goto LABEL_9;
    }
    v88 = v24;
    v36 = v7;
    v37 = v78;
    Unicode.Scalar.properties.getter();
    v38 = v81;
    Unicode.Scalar.Properties.canonicalCombiningClass.getter();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v37, v80);
    v39 = v82;
    static Unicode.CanonicalCombiningClass.notReordered.getter();
    LOBYTE(v37) = static Unicode.CanonicalCombiningClass.== infix(_:_:)();
    v40 = *(void (**)(char *, uint64_t))(v83 + 8);
    v41 = v39;
    v42 = v84;
    v40(v41, v84);
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t))v40)(v38, v42);
    if ((v37 & 1) != 0)
    {
      v30 = v91;
      result = (uint64_t *)specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(v92, v90, (uint64_t)v91, v87);
      v7 = v36;
      if (v36)
        goto LABEL_69;
    }
    else
    {
      v7 = v36;
    }
    LODWORD(v98[0]) = 2;
    v49 = HIWORD(v31);
    v98[1] = &__CFUniCharDecimalDigitCharacterSetBitmap;
    v99 = 15;
    v100 = &__CFUniCharLetterCharacterSetBitmap_0;
    v101 = 2;
    v102 = &__CFUniCharLowercaseLetterCharacterSetBitmap_1;
    v103 = 2;
    v104 = &__CFUniCharUppercaseLetterCharacterSetBitmap_1;
    v105 = 15;
    v106 = &__CFUniCharNonBaseCharacterSetBitmap_0;
    v107 = 3;
    v108 = &__CFUniCharCanonicalDecomposableCharacterSetBitmap_0;
    v109 = 15;
    v110 = &__CFUniCharAlphanumericCharacterSetBitmap_0;
    v111 = 2;
    v112 = &__CFUniCharPunctuationCharacterSetBitmap_0;
    v113 = 15;
    v114 = &__CFUniCharLegalCharacterSetBitmap_0;
    v115 = 1;
    v116 = &__CFUniCharTitlecaseLetterCharacterSetBitmap_0;
    v117 = 2;
    v118 = &__CFUniCharSymbolAndOperatorCharacterSetBitmap_0;
    v119 = 2;
    v120 = &__CFUniCharCompatibilityDecomposableCharacterSetBitmap_0;
    v121 = 2;
    v122 = &__CFUniCharHfsPlusDecomposableCharacterSetBitmap_0;
    v123 = 2;
    v124 = &__CFUniCharStrongRightToLeftCharacterSetBitmap_0;
    v24 = v88;
    v23 = v86;
    if (v49 >= *v77)
    {
LABEL_44:
      v56 = *v89;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v85 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v56 + 2) + 1, 1, v56);
      v59 = *((_QWORD *)v56 + 2);
      v58 = *((_QWORD *)v56 + 3);
      v22 = v87;
      v26 = v94;
      v48 = v95;
      v27 = v93;
      if (v59 >= v58 >> 1)
      {
        v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v56);
        v27 = v93;
        v26 = v94;
        v48 = v95;
        v22 = v87;
        v56 = v60;
      }
      *((_QWORD *)v56 + 2) = v59 + 1;
      *(_DWORD *)&v56[4 * v59 + 32] = v31;
      *v89 = v56;
      v7 = v85;
      v30 = v91;
      goto LABEL_9;
    }
    if (!*v76)
      break;
    v50 = *(_QWORD *)(*v76 + 8 * v49);
    if (!v50 || ((*(unsigned __int8 *)(v50 + ((unsigned __int16)v31 >> 3)) >> (v31 & 7)) & 1) == 0)
      goto LABEL_44;
    v51 = (v31 & 0x3F) << 8;
    if (v31 >= 0x800)
    {
      v64 = (v51 | (v31 >> 6) & 0x3F) << 8;
      if ((_DWORD)v49)
      {
        v52 = (v31 >> 18) | ((v64 | (v31 >> 12) & 0x3F) << 8);
        v53 = -2122219023;
      }
      else
      {
        v52 = v64 | (v31 >> 12);
        v53 = 8487393;
      }
    }
    else
    {
      v52 = v51 | (v31 >> 6);
      v53 = 33217;
    }
    v98[0] = ((v52 + v53) + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8
                                                                         * (4 - (__clz(v52 + v53) >> 3))));
    v54 = MEMORY[0x186DA46D0](v98);
    v55 = (uint64_t)v74;
    MEMORY[0x186DA473C](v54);
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)(v55);
    v30 = v91;
    v22 = v87;
    v26 = v94;
    v48 = v95;
    v27 = v93;
LABEL_9:
    v29 = v35 & v48;
    v25 = v30[2];
    if (v25 >= v22)
      goto LABEL_58;
  }
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

uint64_t String.withMutableFileSystemRepresentation<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Swift::Int isStackAllocationSafe;
  uint64_t v18;
  void (*v19)(char *);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  char *v25;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v36 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v33 - v14;
  if ((v16 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a3 & 0x2000000000000000) != 0)
  {
    isStackAllocationSafe = HIBYTE(a3) & 0xF;
  }
  else
  {
    isStackAllocationSafe = a2 & 0xFFFFFFFFFFFFLL;
  }
  v18 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if (v18 < -1)
    goto LABEL_21;
  v35 = a4;
  v19 = a1;
  v20 = v18 + 1;
  if (v18 <= 1023 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    v34 = a5;
    v37 = &v33;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v22 = (char *)&v33 - v21;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v22, v20, 1, a2, a3);
    v24 = v23;
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
      v25 = 0;
    else
      v25 = v22;
    v19(v25);
    if (v5)
    {
      return swift_willThrow();
    }
    else
    {
      v27 = v35;
      v28 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      v28(v15, v12, v35);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v34, v15, v27);
    }
  }
  else
  {
    v29 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v29, v20, 1, a2, a3);
    v31 = v30;
    swift_bridgeObjectRelease();
    if ((v31 & 1) != 0)
      v32 = 0;
    else
      v32 = v29;
    v19((char *)v32);
    return MEMORY[0x186DA9E78](v29, -1, -1);
  }
}

void specialized MutableCollection<>.sort(by:)(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v4[0] = (uint64_t)(v2 + 32);
  v4[1] = v3;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v4);
  *a1 = v2;
}

BOOL NSString.__swiftFillFileSystemRepresentation(pointer:maxLength:)(char *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v6;
  id v7;
  unsigned __int16 *v8;
  _BOOL8 v9;
  id v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  id v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v22;
  char *v23;
  char *v24;
  int64_t v26;
  char *v29[2];

  v3 = v2;
  v6 = (void *)MEMORY[0x186DA82AC]();
  v7 = objc_retainAutorelease(v3);
  v8 = (unsigned __int16 *)objc_msgSend(v7, sel__fastCharacterContents);
  if (!v8)
  {
    if (objc_msgSend(v7, sel_fastestEncoding) != (id)1
      || (v10 = objc_retainAutorelease(v7), (v11 = (char *)objc_msgSend(v10, sel__fastCStringContents_, 0)) == 0))
    {
LABEL_15:
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)a1, a2, 1, (uint64_t)v17, v18);
      v20 = v19;
      swift_bridgeObjectRelease();
      v9 = (v20 & 1) == 0;
      goto LABEL_16;
    }
    v12 = v11;
    v13 = (char *)objc_msgSend(v10, sel_length);
    if (!v13)
      goto LABEL_23;
    if (*v12)
    {
      if (v13 == (char *)1)
        goto LABEL_23;
      if (v12[1])
      {
        v14 = 2;
        while (v13 != (char *)v14)
        {
          if (!v12[v14++])
          {
            v16 = v14 - 1;
            if ((uint64_t)v13 >= v16)
              goto LABEL_19;
            __break(1u);
            goto LABEL_15;
          }
        }
        goto LABEL_23;
      }
      v16 = 1;
    }
    else
    {
      v16 = 0;
    }
LABEL_19:
    v22 = v16 + 1;
    if ((char *)(v16 + 1) != v13)
    {
      v23 = &v13[~v16];
      v24 = &v12[v22];
      while (!*v24++)
      {
        if (!--v23)
          goto LABEL_23;
      }
LABEL_3:
      v9 = 0;
      goto LABEL_16;
    }
LABEL_23:
    v26 = specialized UnsafeMutableBufferPointer.initialize<A>(from:)(v29, v12, (int64_t)v13, a1, a2);
    if ((v29[0] == v29[1] || v29[0] == 0) && v26 < a2)
    {
      a1[v26] = 0;
      v9 = 1;
      goto LABEL_16;
    }
    goto LABEL_3;
  }
  v9 = 1;
  specialized UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(1, (uint64_t)a1, a2, 1, v8, (uint64_t)objc_msgSend(v7, sel_length));
LABEL_16:
  objc_autoreleasePoolPop(v6);
  return v9;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  char *v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  char *v37;
  unsigned __int8 v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  Swift::Int v42;
  int v43;
  Swift::Int v44;
  _DWORD *v45;
  Swift::Int v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unsigned __int8 v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  Swift::Int v124;
  Swift::Int v125;
  void (*v126)(char *, uint64_t);
  void (*v127)(char *, uint64_t);
  Swift::Int v128;
  Swift::Int v129;
  _DWORD *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  Swift::Int v141;
  uint64_t v142;
  unsigned int v143;

  v140 = type metadata accessor for Unicode.CanonicalCombiningClass();
  v134 = *(_QWORD *)(v140 - 8);
  MEMORY[0x1E0C80A78](v140);
  v139 = (char *)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v138 = (char *)&v118 - v5;
  v137 = type metadata accessor for Unicode.Scalar.Properties();
  v133 = *(_QWORD *)(v137 - 8);
  MEMORY[0x1E0C80A78](v137);
  v136 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v135 = (char *)&v118 - v8;
  v9 = a1[1];
  v10 = _minimumMergeRunLength(_:)(v9);
  if (v10 >= v9)
  {
    if (v9 < 0)
      goto LABEL_134;
    if (v9)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v9, 1, a1);
    return;
  }
  if (v9 >= 0)
    v11 = v9;
  else
    v11 = v9 + 1;
  if (v9 < -1)
    goto LABEL_142;
  v120 = a1;
  v132 = v1;
  v124 = v10;
  if (v9 < 2)
  {
    v14 = (char *)MEMORY[0x1E0DEE9D8];
    v131 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    v123 = MEMORY[0x1E0DEE9D8];
    if (v9 != 1)
    {
      v17 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_100:
      if (v17 >= 2)
      {
        v111 = *v120;
        do
        {
          v112 = v17 - 2;
          if (v17 < 2)
            goto LABEL_129;
          if (!v111)
            goto LABEL_141;
          v113 = *(_QWORD *)&v14[16 * v112 + 32];
          v114 = *(_QWORD *)&v14[16 * v17 + 24];
          v115 = v132;
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v111 + 4 * v113), (char *)(v111 + 4 * *(_QWORD *)&v14[16 * v17 + 16]), (char *)(v111 + 4 * v114), v131);
          v132 = v115;
          if (v115)
            break;
          if (v114 < v113)
            goto LABEL_130;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
          if (v112 >= *((_QWORD *)v14 + 2))
            goto LABEL_131;
          v116 = &v14[16 * v112 + 32];
          *(_QWORD *)v116 = v113;
          *((_QWORD *)v116 + 1) = v114;
          v117 = *((_QWORD *)v14 + 2);
          if (v17 > v117)
            goto LABEL_132;
          memmove(&v14[16 * v17 + 16], &v14[16 * v17 + 32], 16 * (v117 - v17));
          *((_QWORD *)v14 + 2) = v117 - 1;
          v17 = v117 - 1;
        }
        while (v117 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v123 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v12 = v11 >> 1;
    v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v13 + 16) = v12;
    v123 = v13;
    v131 = (char *)(v13 + 32);
  }
  v15 = 0;
  v16 = *a1;
  v121 = *a1 + 8;
  v119 = v16 - 4;
  v14 = (char *)MEMORY[0x1E0DEE9D8];
  v142 = v16;
  v125 = v9;
  while (1)
  {
    v18 = v15;
    v19 = v15 + 1;
    v129 = v15;
    if (v15 + 1 >= v9)
    {
      v39 = v124;
    }
    else
    {
      v20 = v135;
      Unicode.Scalar.properties.getter();
      v21 = v138;
      Unicode.Scalar.Properties.canonicalCombiningClass.getter();
      v22 = *(void (**)(char *, uint64_t))(v133 + 8);
      v23 = v137;
      v22(v20, v137);
      LODWORD(v130) = Unicode.CanonicalCombiningClass.rawValue.getter();
      v24 = *(void (**)(char *, uint64_t))(v134 + 8);
      v25 = v21;
      v26 = v140;
      v24(v25, v140);
      v27 = v136;
      Unicode.Scalar.properties.getter();
      v28 = v139;
      Unicode.Scalar.Properties.canonicalCombiningClass.getter();
      v127 = v22;
      v22(v27, v23);
      LODWORD(v128) = Unicode.CanonicalCombiningClass.rawValue.getter();
      v126 = v24;
      v24(v28, v26);
      v19 = v18 + 2;
      if (v18 + 2 < v9)
      {
        v122 = v14;
        v29 = v121 + 4 * v18;
        while (1)
        {
          v143 = v130 < v128;
          v30 = v135;
          Unicode.Scalar.properties.getter();
          v31 = v138;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          v32 = v137;
          v33 = v127;
          v127(v30, v137);
          LOBYTE(v141) = Unicode.CanonicalCombiningClass.rawValue.getter();
          LODWORD(v141) = v141;
          v34 = v140;
          v35 = v126;
          v126(v31, v140);
          v36 = v136;
          Unicode.Scalar.properties.getter();
          v37 = v139;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          v33(v36, v32);
          v38 = Unicode.CanonicalCombiningClass.rawValue.getter();
          v35(v37, v34);
          if (v143 == v141 >= v38)
            break;
          v29 += 4;
          ++v19;
          v9 = v125;
          if (v125 == v19)
          {
            v19 = v125;
            v14 = v122;
            goto LABEL_23;
          }
        }
        v14 = v122;
        v9 = v125;
LABEL_23:
        v18 = v129;
      }
      v39 = v124;
      v40 = v142;
      if (v130 < v128)
      {
        if (v19 < v18)
          goto LABEL_135;
        if (v18 < v19)
        {
          v41 = v19 - 1;
          v42 = v18;
          do
          {
            if (v42 != v41)
            {
              if (!v40)
                goto LABEL_140;
              v43 = *(_DWORD *)(v40 + 4 * v42);
              *(_DWORD *)(v40 + 4 * v42) = *(_DWORD *)(v40 + 4 * v41);
              *(_DWORD *)(v40 + 4 * v41) = v43;
            }
            v91 = ++v42 < v41--;
          }
          while (v91);
        }
      }
    }
    if (v19 < v9)
    {
      if (__OFSUB__(v19, v18))
        goto LABEL_133;
      if (v19 - v18 < v39)
        break;
    }
LABEL_51:
    if (v19 < v18)
      goto LABEL_128;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
    v59 = *((_QWORD *)v14 + 2);
    v58 = *((_QWORD *)v14 + 3);
    v17 = v59 + 1;
    v60 = v142;
    if (v59 >= v58 >> 1)
    {
      v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v14);
      v60 = v142;
      v14 = v110;
    }
    *((_QWORD *)v14 + 2) = v17;
    v61 = v14 + 32;
    v62 = &v14[16 * v59 + 32];
    *(_QWORD *)v62 = v18;
    *((_QWORD *)v62 + 1) = v19;
    v141 = v19;
    if (v59)
    {
      while (1)
      {
        v63 = v17 - 1;
        if (v17 >= 4)
        {
          v68 = &v61[16 * v17];
          v69 = *((_QWORD *)v68 - 8);
          v70 = *((_QWORD *)v68 - 7);
          v74 = __OFSUB__(v70, v69);
          v71 = v70 - v69;
          if (v74)
            goto LABEL_117;
          v73 = *((_QWORD *)v68 - 6);
          v72 = *((_QWORD *)v68 - 5);
          v74 = __OFSUB__(v72, v73);
          v66 = v72 - v73;
          v67 = v74;
          if (v74)
            goto LABEL_118;
          v75 = v17 - 2;
          v76 = &v61[16 * v17 - 32];
          v78 = *(_QWORD *)v76;
          v77 = *((_QWORD *)v76 + 1);
          v74 = __OFSUB__(v77, v78);
          v79 = v77 - v78;
          if (v74)
            goto LABEL_120;
          v74 = __OFADD__(v66, v79);
          v80 = v66 + v79;
          if (v74)
            goto LABEL_123;
          if (v80 >= v71)
          {
            v98 = &v61[16 * v63];
            v100 = *(_QWORD *)v98;
            v99 = *((_QWORD *)v98 + 1);
            v74 = __OFSUB__(v99, v100);
            v101 = v99 - v100;
            if (v74)
              goto LABEL_127;
            v91 = v66 < v101;
            goto LABEL_88;
          }
        }
        else
        {
          if (v17 != 3)
          {
            v92 = *((_QWORD *)v14 + 4);
            v93 = *((_QWORD *)v14 + 5);
            v74 = __OFSUB__(v93, v92);
            v85 = v93 - v92;
            v86 = v74;
            goto LABEL_82;
          }
          v65 = *((_QWORD *)v14 + 4);
          v64 = *((_QWORD *)v14 + 5);
          v74 = __OFSUB__(v64, v65);
          v66 = v64 - v65;
          v67 = v74;
        }
        if ((v67 & 1) != 0)
          goto LABEL_119;
        v75 = v17 - 2;
        v81 = &v61[16 * v17 - 32];
        v83 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        v84 = __OFSUB__(v82, v83);
        v85 = v82 - v83;
        v86 = v84;
        if (v84)
          goto LABEL_122;
        v87 = &v61[16 * v63];
        v89 = *(_QWORD *)v87;
        v88 = *((_QWORD *)v87 + 1);
        v74 = __OFSUB__(v88, v89);
        v90 = v88 - v89;
        if (v74)
          goto LABEL_125;
        if (__OFADD__(v85, v90))
          goto LABEL_126;
        if (v85 + v90 >= v66)
        {
          v91 = v66 < v90;
LABEL_88:
          if (v91)
            v63 = v75;
          goto LABEL_90;
        }
LABEL_82:
        if ((v86 & 1) != 0)
          goto LABEL_121;
        v94 = &v61[16 * v63];
        v96 = *(_QWORD *)v94;
        v95 = *((_QWORD *)v94 + 1);
        v74 = __OFSUB__(v95, v96);
        v97 = v95 - v96;
        if (v74)
          goto LABEL_124;
        if (v97 < v85)
          goto LABEL_14;
LABEL_90:
        v102 = v63 - 1;
        if (v63 - 1 >= v17)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v60)
          goto LABEL_139;
        v103 = v14;
        v104 = &v61[16 * v102];
        v105 = *(_QWORD *)v104;
        v106 = &v61[16 * v63];
        v107 = *((_QWORD *)v106 + 1);
        v108 = v132;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v60 + 4 * *(_QWORD *)v104), (char *)(v60 + 4 * *(_QWORD *)v106), (char *)(v60 + 4 * v107), v131);
        v132 = v108;
        if (v108)
          goto LABEL_111;
        if (v107 < v105)
          goto LABEL_114;
        if (v63 > *((_QWORD *)v103 + 2))
          goto LABEL_115;
        *(_QWORD *)v104 = v105;
        *(_QWORD *)&v61[16 * v102 + 8] = v107;
        v109 = *((_QWORD *)v103 + 2);
        if (v63 >= v109)
          goto LABEL_116;
        v14 = v103;
        v17 = v109 - 1;
        memmove(&v61[16 * v63], v106 + 16, 16 * (v109 - 1 - v63));
        *((_QWORD *)v103 + 2) = v109 - 1;
        v60 = v142;
        if (v109 <= 2)
          goto LABEL_14;
      }
    }
    v17 = 1;
LABEL_14:
    v15 = v141;
    if (v141 >= v9)
      goto LABEL_100;
  }
  if (__OFADD__(v18, v39))
    goto LABEL_136;
  if (v18 + v39 >= v9)
    v44 = v9;
  else
    v44 = v18 + v39;
  if (v44 >= v18)
  {
    if (v19 != v44)
    {
      v122 = v14;
      v45 = (_DWORD *)(v119 + 4 * v19);
      v128 = v44;
      do
      {
        v141 = v19;
        v46 = v18;
        v130 = v45;
        do
        {
          v47 = v135;
          Unicode.Scalar.properties.getter();
          v48 = v138;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          v49 = *(void (**)(char *, uint64_t))(v133 + 8);
          v50 = v137;
          v49(v47, v137);
          LOBYTE(v143) = Unicode.CanonicalCombiningClass.rawValue.getter();
          v143 = v143;
          v51 = *(void (**)(char *, uint64_t))(v134 + 8);
          v52 = v48;
          v53 = v140;
          v51(v52, v140);
          v54 = v136;
          Unicode.Scalar.properties.getter();
          v55 = v139;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          v49(v54, v50);
          v56 = Unicode.CanonicalCombiningClass.rawValue.getter();
          v51(v55, v53);
          if (v143 >= v56)
            break;
          if (!v142)
            goto LABEL_138;
          v57 = *v45;
          *v45 = v45[1];
          v45[1] = v57;
          --v45;
          ++v46;
        }
        while (v141 != v46);
        v19 = v141 + 1;
        v18 = v129;
        v45 = v130 + 1;
      }
      while (v141 + 1 != v128);
      v19 = v128;
      v14 = v122;
      v9 = v125;
    }
    goto LABEL_51;
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;

  v29 = a1;
  v7 = type metadata accessor for Unicode.CanonicalCombiningClass();
  v37 = *(_QWORD *)(v7 - 8);
  v38 = v7;
  MEMORY[0x1E0C80A78](v7);
  v36 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v35 = (char *)&v27 - v10;
  v11 = type metadata accessor for Unicode.Scalar.Properties();
  v33 = *(_QWORD *)(v11 - 8);
  v34 = v11;
  MEMORY[0x1E0C80A78](v11);
  v32 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v31 = (char *)&v27 - v14;
  v28 = a2;
  if (a3 != a2)
  {
    v39 = *a4;
    v15 = (_DWORD *)(v39 + 4 * a3 - 4);
    v16 = v34;
LABEL_5:
    v17 = v29;
    v30 = v15;
    while (1)
    {
      v18 = v31;
      Unicode.Scalar.properties.getter();
      v19 = v35;
      Unicode.Scalar.Properties.canonicalCombiningClass.getter();
      v20 = *(void (**)(char *, uint64_t))(v33 + 8);
      v20(v18, v16);
      LOBYTE(v40) = Unicode.CanonicalCombiningClass.rawValue.getter();
      v40 = v40;
      v21 = *(void (**)(char *, uint64_t))(v37 + 8);
      v22 = v19;
      v23 = v38;
      v21(v22, v38);
      v24 = v32;
      Unicode.Scalar.properties.getter();
      v25 = v36;
      Unicode.Scalar.Properties.canonicalCombiningClass.getter();
      v20(v24, v16);
      LOBYTE(v24) = Unicode.CanonicalCombiningClass.rawValue.getter();
      v21(v25, v23);
      if (v40 >= v24)
      {
LABEL_4:
        ++a3;
        v15 = v30 + 1;
        if (a3 == v28)
          return;
        goto LABEL_5;
      }
      if (!v39)
        break;
      v26 = *v15;
      *v15 = v15[1];
      v15[1] = v26;
      --v15;
      if (a3 == ++v17)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t result;
  uint64_t v48;
  char *v49;
  char *v50;
  unsigned int v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  const void *v64;
  char *v65;

  v8 = type metadata accessor for Unicode.CanonicalCombiningClass();
  v61 = *(_QWORD *)(v8 - 8);
  v62 = v8;
  MEMORY[0x1E0C80A78](v8);
  v60 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v59 = (char *)&v48 - v11;
  v12 = type metadata accessor for Unicode.Scalar.Properties();
  v57 = *(_QWORD *)(v12 - 8);
  v58 = v12;
  MEMORY[0x1E0C80A78](v12);
  v56 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v55 = (char *)&v48 - v15;
  v16 = a2 - a1;
  v17 = a2 - a1 + 3;
  if (a2 - a1 >= 0)
    v17 = a2 - a1;
  v18 = v17 >> 2;
  v53 = a3;
  v19 = a3 - a2;
  v20 = v19 / 4;
  v65 = a1;
  v64 = a4;
  if (v17 >> 2 >= v19 / 4)
  {
    if (v19 >= -3)
    {
      if (a4 != a2 || &a2[4 * v20] <= a4)
        memmove(a4, a2, 4 * v20);
      v34 = &a4[4 * v20];
      v63 = v34;
      v65 = a2;
      if (v19 >= 4 && a1 < a2)
      {
        v35 = v53 - 4;
        v36 = a2;
        v49 = a1;
        v50 = a4;
        v37 = v58;
        do
        {
          v54 = a2;
          v52 = v34;
          v53 = v35 + 4;
          v38 = v34 - 4;
          v36 -= 4;
          v39 = v55;
          Unicode.Scalar.properties.getter();
          v40 = v59;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          v41 = *(void (**)(char *, uint64_t))(v57 + 8);
          v41(v39, v37);
          LOBYTE(v51) = Unicode.CanonicalCombiningClass.rawValue.getter();
          v51 = v51;
          v42 = *(void (**)(char *, uint64_t))(v61 + 8);
          v43 = v40;
          v44 = v62;
          v42(v43, v62);
          v45 = v56;
          Unicode.Scalar.properties.getter();
          v46 = v60;
          Unicode.Scalar.Properties.canonicalCombiningClass.getter();
          v41(v45, v37);
          LOBYTE(v45) = Unicode.CanonicalCombiningClass.rawValue.getter();
          v42(v46, v44);
          if (v51 >= v45)
          {
            v63 = v38;
            v36 = v54;
            if (v53 < v52 || v35 >= v52 || v53 != v52)
              *(_DWORD *)v35 = *(_DWORD *)v38;
            v34 = v38;
          }
          else
          {
            v34 = v52;
            if (v53 != v54 || v35 >= v54)
              *(_DWORD *)v35 = *(_DWORD *)v36;
            v65 = v36;
          }
          if (v34 <= v50)
            break;
          v35 -= 4;
          a2 = v36;
        }
        while (v36 > v49);
      }
      goto LABEL_41;
    }
  }
  else if (v16 >= -3)
  {
    if (a4 != a1 || &a1[4 * v18] <= a4)
      memmove(a4, a1, 4 * v18);
    v52 = &a4[4 * v18];
    v63 = v52;
    if (v16 >= 4 && a2 < v53)
    {
      do
      {
        v21 = v55;
        Unicode.Scalar.properties.getter();
        v22 = v59;
        Unicode.Scalar.Properties.canonicalCombiningClass.getter();
        v23 = *(void (**)(char *, uint64_t))(v57 + 8);
        v24 = a4;
        v25 = a2;
        v26 = v58;
        v23(v21, v58);
        LOBYTE(v54) = Unicode.CanonicalCombiningClass.rawValue.getter();
        LODWORD(v54) = v54;
        v27 = *(void (**)(char *, uint64_t))(v61 + 8);
        v28 = v22;
        v29 = v62;
        v27(v28, v62);
        v30 = v56;
        Unicode.Scalar.properties.getter();
        v31 = v60;
        Unicode.Scalar.Properties.canonicalCombiningClass.getter();
        v23(v30, v26);
        LOBYTE(v30) = Unicode.CanonicalCombiningClass.rawValue.getter();
        v27(v31, v29);
        if (v54 >= v30)
        {
          v33 = v25;
          if (a1 != v24)
            *(_DWORD *)a1 = *(_DWORD *)v24;
          a4 = v24 + 4;
          v64 = v24 + 4;
          v32 = v33;
        }
        else
        {
          v32 = v25 + 4;
          if (a1 < v25 || a1 >= v32 || a1 != v25)
            *(_DWORD *)a1 = *(_DWORD *)v25;
          a4 = v24;
        }
        a1 += 4;
        v65 = a1;
        if (a4 >= v52)
          break;
        a2 = v32;
      }
      while (v32 < v53);
    }
LABEL_41:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v65, &v64, &v63);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.remove(at:)(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(v1 + 4);
  if (v2)
  {
    if (result <= 0xEFu)
    {
      v3 = (*(_DWORD *)v1 >> result);
      *(_DWORD *)v1 = (*(_DWORD *)v1 >> (((result + 16) >> 1) & 0x18) >> (((result + 16) >> 1) & 0x18) << ((result + 16 - ((((((result + 16) - result) & 0xF000u) >> 12) + 16) & 0x10)) & 0x10)) | *(_DWORD *)v1 & ((1 << ((result >> 1) & 0x18) << ((result >> 1) & 0x18)) - 1);
      *(_BYTE *)(v1 + 4) = v2
                         - ((((((result + 16) - result) & 0xF000u) >> 12) + 16) & 0xF0);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(v1 + 4);
  if (v2)
  {
    if (result <= 0xF7u)
    {
      v3 = (*(_DWORD *)v1 >> result);
      *(_DWORD *)v1 = (*(_DWORD *)v1 >> (((result + 8) >> 1) & 0x1C) >> (((result + 8) >> 1) & 0x1C) << ((result + 8 - ((((((result + 8) - result) & 0xE000u) >> 13) + 8) & 0x18)) & 0x18)) | *(_DWORD *)v1 & ((1 << ((result >> 1) & 0x1C) << ((result >> 1) & 0x1C)) - 1);
      *(_BYTE *)(v1 + 4) = v2
                         - ((((((result + 8) - result) & 0xE000u) >> 13) + 8) & 0xF8);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized fillFromSortBuffer #1 <A><A1>() in UnsafeBufferPointer._decomposed<A>(_:as:into:nullTerminated:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  _BYTE *v25;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v27;

  v4 = (uint64_t *)(result + 16);
  if (*(_QWORD *)(*(_QWORD *)(result + 16) + 16))
  {
    specialized MutableCollection<>.sort(by:)((char **)(result + 16));
    result = *v4;
    v8 = *(_QWORD *)(*v4 + 16);
    if (v8)
    {
      v9 = 0;
      v10 = result + 32;
      while (1)
      {
        v11 = *(_DWORD *)(v10 + 4 * v9);
        if (v11 > 0x7F)
        {
          v19 = (*(_DWORD *)(v10 + 4 * v9) & 0x3F) << 8;
          if (v11 >= 0x800)
          {
            v20 = v11 >> 12;
            v21 = (v19 | (v11 >> 6) & 0x3F) << 8;
            v22 = HIWORD(v11);
            result = (v21 | (v11 >> 12) & 0x3F) << 8;
            v23 = (result | (v11 >> 18)) - 2122219023;
            v24 = (v21 | v20) + 8487393;
            v12 = v22 ? v23 : v24;
          }
          else
          {
            v12 = (v19 | (v11 >> 6)) + 33217;
          }
        }
        else
        {
          v12 = v11 + 1;
        }
        if (!a2)
          break;
        v13 = *(_QWORD *)(a3 + 16);
        v14 = a4 - v13;
        if (__OFSUB__(a4, v13))
        {
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          break;
        }
        if (v14 < 4 - (__clz(v12) >> 3))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
          lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>.DecompositionError);
          swift_allocError();
          *v25 = 0;
          return swift_willThrow();
        }
        if (!v14)
          goto LABEL_34;
        v15 = 0;
        ++v9;
        result = a2 + v13;
        do
        {
          if (v14 == v15)
          {
            __break(1u);
            goto LABEL_31;
          }
          v16 = v12;
          if (!v12)
          {
            v14 = v15;
            goto LABEL_17;
          }
          *(_BYTE *)(result + v15) = v12 - 1;
          v12 >>= 8;
          ++v15;
        }
        while (v14 != v15);
        if (v16 > 0xFF)
          goto LABEL_34;
LABEL_17:
        v17 = __OFADD__(v13, v14);
        v18 = v13 + v14;
        if (v17)
          goto LABEL_32;
        *(_QWORD *)(a3 + 16) = v18;
        if (v9 == v8)
          goto LABEL_26;
      }
      __break(1u);
LABEL_34:
      __break(1u);
    }
    else
    {
LABEL_26:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v27 = *v4;
      if (isUniquelyReferenced_nonNull_native)
      {
        return (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v27 + 16));
      }
      else
      {
        *v4 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v27 + 24) >> 1);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  _BYTE *v25;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v27;

  v4 = (uint64_t *)(result + 16);
  if (*(_QWORD *)(*(_QWORD *)(result + 16) + 16))
  {
    specialized MutableCollection<>.sort(by:)((char **)(result + 16));
    result = *v4;
    v8 = *(_QWORD *)(*v4 + 16);
    if (v8)
    {
      v9 = 0;
      v10 = result + 32;
      while (1)
      {
        v11 = *(_DWORD *)(v10 + 4 * v9);
        if (v11 > 0x7F)
        {
          v19 = (*(_DWORD *)(v10 + 4 * v9) & 0x3F) << 8;
          if (v11 >= 0x800)
          {
            v20 = v11 >> 12;
            v21 = (v19 | (v11 >> 6) & 0x3F) << 8;
            v22 = HIWORD(v11);
            result = (v21 | (v11 >> 12) & 0x3F) << 8;
            v23 = (result | (v11 >> 18)) - 2122219023;
            v24 = (v21 | v20) + 8487393;
            v12 = v22 ? v23 : v24;
          }
          else
          {
            v12 = (v19 | (v11 >> 6)) + 33217;
          }
        }
        else
        {
          v12 = v11 + 1;
        }
        if (!a2)
          break;
        v13 = *(_QWORD *)(a3 + 16);
        v14 = a4 - v13;
        if (__OFSUB__(a4, v13))
        {
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          break;
        }
        if (v14 < 4 - (__clz(v12) >> 3))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
          lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt16>.DecompositionError);
          swift_allocError();
          *v25 = 0;
          return swift_willThrow();
        }
        if (!v14)
          goto LABEL_36;
        result = v12 >> 8;
        *(_BYTE *)(a2 + v13) = v12 - 1;
        if (v14 == 1)
        {
LABEL_15:
          if ((_DWORD)result)
            goto LABEL_36;
          v17 = __OFADD__(v13, v14);
          v18 = a4;
          if (v17)
            goto LABEL_34;
        }
        else
        {
          v15 = 1;
          while (1)
          {
            if (v14 == v15)
            {
              __break(1u);
              goto LABEL_33;
            }
            if (v12 < 0x100)
              break;
            v16 = result;
            *(_BYTE *)(a2 + v13 + v15) = result - 1;
            result = result >> 8;
            ++v15;
            v12 = v16;
            if (v14 == v15)
              goto LABEL_15;
          }
          v17 = __OFADD__(v13, v15);
          v18 = v13 + v15;
          if (v17)
            goto LABEL_34;
        }
        ++v9;
        *(_QWORD *)(a3 + 16) = v18;
        if (v9 == v8)
          goto LABEL_28;
      }
      __break(1u);
LABEL_36:
      __break(1u);
    }
    else
    {
LABEL_28:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v27 = *v4;
      if (isUniquelyReferenced_nonNull_native)
      {
        return (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v27 + 16));
      }
      else
      {
        *v4 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v27 + 24) >> 1);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser;
  if (!lazy protocol witness table cache variable for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEE4E0], MEMORY[0x1E0DEE4D8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser);
  }
  return result;
}

uint64_t outlined copy of PathOrURL(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5;

  if ((a4 & 1) == 0)
    return swift_bridgeObjectRetain();
  swift_retain();
  v5 = a1;
  return swift_retain();
}

uint64_t sub_181CF4134()
{
  return swift_deallocObject();
}

uint64_t sub_181CF4144()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x186DA9D64](&protocol conformance descriptor for UnsafeBufferPointer<A>.DecompositionError, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser;
  if (!lazy protocol witness table cache variable for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser)
  {
    result = MEMORY[0x186DA9D64](MEMORY[0x1E0DEE460], MEMORY[0x1E0DEE458]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UnsafeBufferPointer.DecompositionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181CF4468 + 4 * byte_182104335[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181CF449C + 4 * byte_182104330[v4]))();
}

uint64_t sub_181CF449C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CF44A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181CF44ACLL);
  return result;
}

uint64_t sub_181CF44B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181CF44C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181CF44C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CF44CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for UnsafeBufferPointer.DecompositionError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeBufferPointer.DecompositionError);
}

void base witness table accessor for Equatable in UnsafeBufferPointer<A>.DecompositionError()
{
  JUMPOUT(0x186DA9D64);
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2, (void (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2, (void (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  char v2;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a2), (v2 & 1) != 0))
    return swift_retain();
  else
    return 0;
}

{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2, (void (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2, (void (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, unsigned __int8 *a2)
{
  char v2;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a2), (v2 & 1) != 0))
    return swift_retain();
  else
    return 1;
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  char v3;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16) && (a3(a2), (v3 & 1) != 0))
    return swift_retain();
  else
    return 1;
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4, Swift::UInt a5)
{
  char v5;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5), (v5 & 1) != 0))
  {
    return swift_retain();
  }
  else
  {
    return 0;
  }
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, double *a2)
{
  char v2;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a2), (v2 & 1) != 0))
    return swift_retain();
  else
    return 1;
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  char v5;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 | ((HIDWORD(a4) & 1) << 32), a5),
        (v5 & 1) != 0))
  {
    return swift_retain();
  }
  else
  {
    return 1;
  }
}

void *specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  void *v5;
  id v6;

  v2 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
    return 0;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v3);
  v6 = v5;
  return v5;
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  char v4;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4), (v4 & 1) != 0))
    return swift_retain();
  else
    return 1;
}

uint64_t static Locale.legacyKey(forKey:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  BOOL v11;
  BOOL v12;
  char v13;
  BOOL v14;
  BOOL v15;
  char v16;
  BOOL v17;
  BOOL v18;
  char v19;
  BOOL v20;
  BOOL v21;
  char v22;
  BOOL v23;
  BOOL v24;
  char v25;
  BOOL v26;
  BOOL v27;
  char v28;
  BOOL v29;
  BOOL v30;
  char v31;
  BOOL v32;
  BOOL v33;
  char v34;
  BOOL v35;
  BOOL v36;
  char v37;
  BOOL v38;
  BOOL v39;
  char v40;
  BOOL v41;
  BOOL v42;
  char v43;
  BOOL v44;
  BOOL v45;
  char v46;
  BOOL v47;
  BOOL v48;
  char v49;
  BOOL v50;
  BOOL v51;
  char v52;
  BOOL v53;
  BOOL v54;
  char v55;
  BOOL v56;
  BOOL v57;
  char v58;
  BOOL v59;
  BOOL v60;
  char v61;
  BOOL v62;
  BOOL v63;
  char v64;
  BOOL v65;
  BOOL v66;
  char v67;
  BOOL v68;
  char v69;
  char v70;
  BOOL v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;

  if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000)
    goto LABEL_35;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_35;
  v7 = 0xEC0000006574616ELL;
  v8 = 0x7265746C616C6F63;
  if (a1 == 0x7265746C616C6F63 && a2 == 0xEC0000006574616ELL)
    goto LABEL_35;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x776B6361626C6F63 && a2 == 0xEC00000073647261)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x66657361636C6F63 && a2 == 0xEC00000074737269)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6C657361636C6F63 && a2 == 0xEC0000006C657665)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000015 && a2 == 0x800000018230BD80)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6F6974616C6C6F63 && a2 == 0xE90000000000006ELL)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000010 && a2 == 0x800000018230BDA0)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x72656D756E6C6F63 && a2 == 0xEA00000000006369)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x64726F65726C6F63 && a2 == 0xEA00000000007265)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6E657274736C6F63 && a2 == 0xEB00000000687467)
  {
    goto LABEL_35;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v11 = a1 == 0x79636E6572727563 && a2 == 0xE800000000000000;
  v12 = v11;
  if ((v10 & 1) != 0
    || v12
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x7372756F68 && a2 == 0xE500000000000000)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x6572757361656DLL && a2 == 0xE700000000000000)
  {
    goto LABEL_35;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v14 = a1 == 0x737265626D756ELL && a2 == 0xE700000000000000;
  v15 = v14;
  if ((v13 & 1) != 0 || v15)
    goto LABEL_35;
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v17 = a1 == 0x656E6F7A656D6974 && a2 == 0xE800000000000000;
  v18 = v17;
  if ((v16 & 1) != 0
    || v18
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x656C626169726176 && a2 == 0xEB00000000706F74)
  {
    goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 26211 && a2 == 0xE200000000000000)
    goto LABEL_35;
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v20 = a1 == 12388 && a2 == 0xE200000000000000;
  v21 = v20;
  if ((v19 & 1) != 0 || v21)
    goto LABEL_35;
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v23 = a1 == 30820 && a2 == 0xE200000000000000;
  v24 = v23;
  if ((v22 & 1) != 0 || v24)
    goto LABEL_35;
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v26 = a1 == 28005 && a2 == 0xE200000000000000;
  v27 = v26;
  if ((v25 & 1) != 0 || v27)
    goto LABEL_35;
  v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v29 = a1 == 30566 && a2 == 0xE200000000000000;
  v30 = v29;
  if ((v28 & 1) != 0 || v30)
    goto LABEL_35;
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v32 = a1 == 12392 && a2 == 0xE200000000000000;
  v33 = v32;
  if ((v31 & 1) != 0 || v33)
    goto LABEL_35;
  v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v35 = a1 == 12393 && a2 == 0xE200000000000000;
  v36 = v35;
  if ((v34 & 1) != 0 || v36)
    goto LABEL_35;
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v38 = a1 == 12395 && a2 == 0xE200000000000000;
  v39 = v38;
  if ((v37 & 1) != 0 || v39)
    goto LABEL_35;
  v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v41 = a1 == 30315 && a2 == 0xE200000000000000;
  v42 = v41;
  if ((v40 & 1) != 0 || v42)
    goto LABEL_35;
  v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v44 = a1 == 25196 && a2 == 0xE200000000000000;
  v45 = v44;
  if ((v43 & 1) != 0 || v45)
    goto LABEL_35;
  v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v47 = a1 == 30572 && a2 == 0xE200000000000000;
  v48 = v47;
  if ((v46 & 1) != 0 || v48)
    goto LABEL_35;
  v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v50 = a1 == 12397 && a2 == 0xE200000000000000;
  v51 = v50;
  if ((v49 & 1) != 0 || v51)
    goto LABEL_35;
  v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v53 = a1 == 26482 && a2 == 0xE200000000000000;
  v54 = v53;
  if ((v52 & 1) != 0 || v54)
    goto LABEL_35;
  v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v56 = a1 == 12403 && a2 == 0xE200000000000000;
  v57 = v56;
  if ((v55 & 1) != 0 || v57)
    goto LABEL_35;
  v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v59 = a1 == 25715 && a2 == 0xE200000000000000;
  v60 = v59;
  if ((v58 & 1) != 0 || v60)
    goto LABEL_35;
  v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v62 = a1 == 29555 && a2 == 0xE200000000000000;
  v63 = v62;
  if ((v61 & 1) != 0 || v63)
    goto LABEL_35;
  v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v65 = a1 == 12404 && a2 == 0xE200000000000000;
  v66 = v65;
  if ((v64 & 1) != 0
    || v66
    || ((v67 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 24950)
      ? (v68 = a2 == 0xE200000000000000)
      : (v68 = 0),
        !v68 ? (v69 = 0) : (v69 = 1),
        (v67 & 1) != 0
     || (v69 & 1) != 0
     || ((v70 = _stringCompareWithSmolCheck(_:_:expecting:)(), a1 == 12408)
       ? (v71 = a2 == 0xE200000000000000)
       : (v71 = 0),
         !v71 ? (v72 = 0) : (v72 = 1),
         (v70 & 1) != 0 || (v72 & 1) != 0 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))))
  {
LABEL_35:
    result = swift_bridgeObjectRetain();
LABEL_36:
    v8 = a1;
    v7 = a2;
LABEL_37:
    *a3 = v8;
    a3[1] = v7;
    return result;
  }
  if (a1 == 24931 && a2 == 0xE200000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v7 = 0xE800000000000000;
    v8 = 0x7261646E656C6163;
    goto LABEL_37;
  }
  if (a1 == 24939 && a2 == 0xE200000000000000)
    goto LABEL_37;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    goto LABEL_37;
  if (a1 == 25195 && a2 == 0xE200000000000000)
  {
    v8 = 0x776B6361626C6F63;
    v7 = 0xEC00000073647261;
    goto LABEL_37;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = 0x776B6361626C6F63;
  v7 = 0xEC00000073647261;
  if ((result & 1) != 0)
    goto LABEL_37;
  if (a1 == 26219 && a2 == 0xE200000000000000)
  {
    v8 = 0x66657361636C6F63;
    v7 = 0xEC00000074737269;
    goto LABEL_37;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = 0x66657361636C6F63;
  v7 = 0xEC00000074737269;
  if ((result & 1) != 0)
    goto LABEL_37;
  if (a1 == 25451 && a2 == 0xE200000000000000)
  {
    v8 = 0x6C657361636C6F63;
    v7 = 0xEC0000006C657665;
    goto LABEL_37;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = 0x6C657361636C6F63;
  v7 = 0xEC0000006C657665;
  if ((result & 1) != 0)
    goto LABEL_37;
  v8 = 0xD000000000000015;
  v7 = 0x800000018230BD80;
  if (a1 == 26731 && a2 == 0xE200000000000000)
    goto LABEL_37;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    goto LABEL_37;
  if (a1 == 28515 && a2 == 0xE200000000000000)
  {
    v8 = 0x6F6974616C6C6F63;
    v7 = 0xE90000000000006ELL;
    goto LABEL_37;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = 0x6F6974616C6C6F63;
  v7 = 0xE90000000000006ELL;
  if ((result & 1) != 0)
    goto LABEL_37;
  v7 = 0x800000018230BDA0;
  if (a1 == 27499 && a2 == 0xE200000000000000)
  {
    v8 = 0xD000000000000010;
    goto LABEL_37;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = 0xD000000000000010;
  if ((result & 1) != 0)
    goto LABEL_37;
  if (a1 == 28267 && a2 == 0xE200000000000000)
  {
    v8 = 0x72656D756E6C6F63;
    v7 = 0xEA00000000006369;
    goto LABEL_37;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = 0x72656D756E6C6F63;
  v7 = 0xEA00000000006369;
  if ((result & 1) != 0)
    goto LABEL_37;
  v7 = 0xEA00000000007265;
  if (a1 == 29291 && a2 == 0xE200000000000000)
  {
    v8 = 0x64726F65726C6F63;
    goto LABEL_37;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = 0x64726F65726C6F63;
  if ((result & 1) != 0)
    goto LABEL_37;
  if (a1 == 29547 && a2 == 0xE200000000000000)
  {
    v8 = 0x6E657274736C6F63;
    v7 = 0xEB00000000687467;
    goto LABEL_37;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = 0x6E657274736C6F63;
  v7 = 0xEB00000000687467;
  if ((result & 1) != 0)
    goto LABEL_37;
  if (a1 == 30051 && a2 == 0xE200000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v7 = 0xE800000000000000;
    v8 = 0x79636E6572727563;
    goto LABEL_37;
  }
  if (a1 == 25448 && a2 == 0xE200000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v7 = 0xE500000000000000;
    v8 = 0x7372756F68;
    goto LABEL_37;
  }
  if (a1 == 29549 && a2 == 0xE200000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v7 = 0xE700000000000000;
    v8 = 0x6572757361656DLL;
    goto LABEL_37;
  }
  if (a1 == 30062 && a2 == 0xE200000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v7 = 0xE700000000000000;
    v8 = 0x737265626D756ELL;
    goto LABEL_37;
  }
  if (a1 == 31348 && a2 == 0xE200000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v7 = 0xE800000000000000;
    v8 = 0x656E6F7A656D6974;
    goto LABEL_37;
  }
  if (a1 == 29814 && a2 == 0xE200000000000000)
  {
    v8 = 0x656C626169726176;
    v7 = 0xEB00000000706F74;
    goto LABEL_37;
  }
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = 0x656C626169726176;
  v7 = 0xEB00000000706F74;
  if ((result & 1) != 0)
    goto LABEL_37;
  v73 = String.utf8CString.getter() + 32;
  v74 = uloc_toLegacyKey();
  if (v74)
  {
    if (v74 != v73)
    {
      v8 = String.init(cString:)();
      v7 = v75;
      result = swift_release();
      goto LABEL_37;
    }
    swift_bridgeObjectRetain();
    result = swift_release();
    goto LABEL_36;
  }
  result = swift_release();
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void *_LocaleICU.State.NumberFormattersBox.formatter(for:identifier:numberSymbols:)(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void *result;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  int64_t v30;
  unint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[6];

  v64[5] = *MEMORY[0x1E0C80C00];
  v8 = *v4;
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v10 & 1) != 0)
      return *(void **)(*(_QWORD *)(v8 + 56) + 8 * v9);
  }
  String.utf8CString.getter();
  v12 = (_QWORD *)unum_open();
  swift_release();
  if (!v12)
    return 0;
  v13 = a1;
  if (unum_getAttribute() != 1)
    unum_setAttribute();
  unum_setAttribute();
  unum_setContext();
  v63 = (uint64_t)v12;
  if (!a4)
  {
LABEL_43:
    v12 = v61;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v64[0] = *v61;
    a2 = v64[0];
    *v61 = 0x8000000000000000;
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    v34 = *(_QWORD *)(a2 + 16);
    v35 = (v33 & 1) == 0;
    v36 = __OFADD__(v34, v35);
    v37 = v34 + v35;
    if (v36)
      goto LABEL_56;
    LOBYTE(a4) = v33;
    if (*(_QWORD *)(a2 + 24) < v37)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native);
      v38 = v64[0];
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      if ((a4 & 1) == (v39 & 1))
        goto LABEL_49;
      v18 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_57;
    v38 = a2;
LABEL_49:
    if ((a4 & 1) == 0)
    {
LABEL_90:
      specialized _NativeDictionary._insert(at:key:value:)(v18, v13, v63, (_QWORD *)v38);
      goto LABEL_91;
    }
LABEL_50:
    *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v18) = v63;
LABEL_91:
    *v12 = v38;
    swift_bridgeObjectRelease();
    return (void *)v63;
  }
  v60 = a1;
  v62 = a4 + 64;
  v14 = 1 << *(_BYTE *)(a4 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(a4 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  v18 = swift_bridgeObjectRetain();
  v13 = 0;
  if (!v16)
    goto LABEL_12;
LABEL_11:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v19 | (v13 << 6); ; i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    a2 = *(unsigned int *)(*(_QWORD *)(a4 + 48) + 4 * i);
    v24 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 16 * i);
    v26 = *v24;
    v25 = v24[1];
    if ((v25 & 0x1000000000000000) != 0)
    {
      v18 = String.UTF16View._foreignCount()();
      v27 = v18;
      if (!v18)
      {
LABEL_36:
        v28 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        goto LABEL_37;
      }
    }
    else
    {
      v18 = String.UTF16View._nativeGetOffset(for:)();
      v27 = v18;
      if (!v18)
        goto LABEL_36;
    }
    if (v27 < 1)
    {
      v28 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      v28 = (_QWORD *)swift_allocObject();
      v29 = _swift_stdlib_malloc_size(v28);
      v30 = v29 - 32;
      if (v29 < 32)
        v30 = v29 - 31;
      v28[2] = v27;
      v28[3] = v30 & 0xFFFFFFFFFFFFFFFELL;
    }
    swift_bridgeObjectRetain_n();
    v12 = (_QWORD *)specialized Sequence._copySequenceContents(initializing:)((uint64_t)v64, (uint64_t)(v28 + 4), v27, v26, v25);
    v18 = swift_bridgeObjectRelease();
    if (v12 != (_QWORD *)v27)
      goto LABEL_53;
    v18 = swift_bridgeObjectRelease();
    v12 = (_QWORD *)v63;
LABEL_37:
    v31 = v28[2];
    LODWORD(v64[0]) = 0;
    if ((a2 & 0x80000000) != 0)
      break;
    if (v31 >> 31)
      goto LABEL_52;
    unum_setSymbol();
    v18 = swift_release();
    if (v16)
      goto LABEL_11;
LABEL_12:
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_54;
    if (v21 >= v17)
    {
LABEL_42:
      swift_release();
      v13 = v60;
      goto LABEL_43;
    }
    v22 = *(_QWORD *)(v62 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_42;
      v22 = *(_QWORD *)(v62 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_42;
        v22 = *(_QWORD *)(v62 + 8 * v13);
        if (!v22)
        {
          v23 = v21 + 3;
          if (v23 >= v17)
            goto LABEL_42;
          v22 = *(_QWORD *)(v62 + 8 * v23);
          if (!v22)
          {
            while (1)
            {
              v13 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_55;
              if (v13 >= v17)
                goto LABEL_42;
              v22 = *(_QWORD *)(v62 + 8 * v13);
              ++v23;
              if (v22)
                goto LABEL_25;
            }
          }
          v13 = v23;
        }
      }
    }
LABEL_25:
    v16 = (v22 - 1) & v22;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  v40 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, UnsafeMutablePointer<UnsafeMutableRawPointer?>>);
  v41 = static _DictionaryStorage.copy(original:)();
  v38 = v41;
  if (!*(_QWORD *)(a2 + 16))
  {
LABEL_89:
    swift_bridgeObjectRelease();
    v18 = v40;
    if ((a4 & 1) == 0)
      goto LABEL_90;
    goto LABEL_50;
  }
  result = (void *)(v41 + 64);
  v42 = a2 + 64;
  v43 = (unint64_t)((1 << *(_BYTE *)(v38 + 32)) + 63) >> 6;
  if (v38 != a2 || (unint64_t)result >= v42 + 8 * v43)
    result = memmove(result, (const void *)(a2 + 64), 8 * v43);
  v44 = 0;
  *(_QWORD *)(v38 + 16) = *(_QWORD *)(a2 + 16);
  v45 = 1 << *(_BYTE *)(a2 + 32);
  v46 = -1;
  if (v45 < 64)
    v46 = ~(-1 << v45);
  v47 = v46 & *(_QWORD *)(a2 + 64);
  v48 = (unint64_t)(v45 + 63) >> 6;
  while (2)
  {
    if (v47)
    {
      v49 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      v50 = v49 | (v44 << 6);
LABEL_65:
      v51 = 4 * v50;
      v52 = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v50);
      v53 = 8 * v50;
      v54 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v53);
      *(_DWORD *)(*(_QWORD *)(v38 + 48) + v51) = v52;
      *(_QWORD *)(*(_QWORD *)(v38 + 56) + v53) = v54;
      continue;
    }
    break;
  }
  v55 = v44 + 1;
  if (__OFADD__(v44, 1))
  {
    __break(1u);
    goto LABEL_93;
  }
  if (v55 >= v48)
    goto LABEL_89;
  v56 = *(_QWORD *)(v42 + 8 * v55);
  ++v44;
  if (v56)
    goto LABEL_88;
  v44 = v55 + 1;
  if (v55 + 1 >= v48)
    goto LABEL_89;
  v56 = *(_QWORD *)(v42 + 8 * v44);
  if (v56)
    goto LABEL_88;
  v44 = v55 + 2;
  if (v55 + 2 >= v48)
    goto LABEL_89;
  v56 = *(_QWORD *)(v42 + 8 * v44);
  if (v56)
    goto LABEL_88;
  v44 = v55 + 3;
  if (v55 + 3 >= v48)
    goto LABEL_89;
  v56 = *(_QWORD *)(v42 + 8 * v44);
  if (v56)
    goto LABEL_88;
  v44 = v55 + 4;
  if (v55 + 4 >= v48)
    goto LABEL_89;
  v56 = *(_QWORD *)(v42 + 8 * v44);
  if (v56)
    goto LABEL_88;
  v44 = v55 + 5;
  if (v55 + 5 >= v48)
    goto LABEL_89;
  v56 = *(_QWORD *)(v42 + 8 * v44);
  if (v56)
    goto LABEL_88;
  v44 = v55 + 6;
  if (v55 + 6 >= v48)
    goto LABEL_89;
  v56 = *(_QWORD *)(v42 + 8 * v44);
  if (v56)
  {
LABEL_88:
    v47 = (v56 - 1) & v56;
    v50 = __clz(__rbit64(v56)) + (v44 << 6);
    goto LABEL_65;
  }
  v57 = v55 + 7;
  if (v57 >= v48)
    goto LABEL_89;
  v58 = v13;
  v59 = v42;
  v56 = *(_QWORD *)(v42 + 8 * v57);
  if (v56)
  {
    v44 = v57;
    v12 = v61;
    goto LABEL_88;
  }
  while (1)
  {
    v44 = v57 + 1;
    if (__OFADD__(v57, 1))
      break;
    v12 = v61;
    v13 = v58;
    if (v44 >= v48)
      goto LABEL_89;
    v42 = v59;
    v56 = *(_QWORD *)(v59 + 8 * v44);
    ++v57;
    if (v56)
      goto LABEL_88;
  }
LABEL_93:
  __break(1u);
  return result;
}

Swift::Void __swiftcall _LocaleICU.State.NumberFormattersBox.cleanup()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;

  v1 = *(_QWORD *)v0 + 64;
  v2 = 1 << *(_BYTE *)(*(_QWORD *)v0 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(*(_QWORD *)v0 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    v7 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v7 >= v5)
      goto LABEL_23;
    v8 = *(_QWORD *)(v1 + 8 * v7);
    ++v6;
    if (!v8)
    {
      v6 = v7 + 1;
      if (v7 + 1 >= v5)
        goto LABEL_23;
      v8 = *(_QWORD *)(v1 + 8 * v6);
      if (!v8)
      {
        v6 = v7 + 2;
        if (v7 + 2 >= v5)
          goto LABEL_23;
        v8 = *(_QWORD *)(v1 + 8 * v6);
        if (!v8)
        {
          v6 = v7 + 3;
          if (v7 + 3 >= v5)
            goto LABEL_23;
          v8 = *(_QWORD *)(v1 + 8 * v6);
          if (!v8)
            break;
        }
      }
    }
LABEL_22:
    v4 = (v8 - 1) & v8;
LABEL_5:
    unum_close();
  }
  v9 = v7 + 4;
  if (v9 >= v5)
  {
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)v0 = MEMORY[0x1E0DEE9E0];
    return;
  }
  v8 = *(_QWORD *)(v1 + 8 * v9);
  if (v8)
  {
    v6 = v9;
    goto LABEL_22;
  }
  while (1)
  {
    v6 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v6 >= v5)
      goto LABEL_23;
    v8 = *(_QWORD *)(v1 + 8 * v6);
    ++v9;
    if (v8)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _LocaleICU.State.NumberFormattersBox()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _LocaleICU.State.NumberFormattersBox(uint64_t a1)
{
  uint64_t *v1;

  specialized Dictionary<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _LocaleICU.State.NumberFormattersBox()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _LocaleICU.State.NumberFormattersBox(unint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t _LocaleICU.State.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t ObjectType;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = *(unsigned __int8 *)(v1 + 96);
  v4 = *(_QWORD *)(v1 + 112);
  v21 = *(_QWORD *)(v1 + 136);
  v30 = *(_QWORD *)(v1 + 144);
  v28 = *(_QWORD *)(v1 + 168);
  v31 = *(_QWORD *)(v1 + 176);
  v27 = *(_QWORD *)(v1 + 104);
  v50 = *(_QWORD *)(v1 + 200);
  v38 = *(char *)(v1 + 208);
  v39 = *(unsigned __int8 *)(v1 + 265);
  v22 = *(_QWORD *)(v1 + 272);
  v40 = *(unsigned __int8 *)(v1 + 280);
  v32 = *(char *)(v1 + 281);
  v29 = *(_QWORD *)(v1 + 288);
  v51 = *(_QWORD *)(v1 + 296);
  v33 = *(unsigned __int8 *)(v1 + 320);
  v23 = *(_QWORD *)(v1 + 328);
  v52 = *(_QWORD *)(v1 + 336);
  v42 = *(_QWORD *)(v1 + 368);
  v24 = *(_QWORD *)(v1 + 360);
  v34 = *(_QWORD *)(v1 + 392);
  v25 = *(_QWORD *)(v1 + 400);
  v26 = *(_QWORD *)(v1 + 408);
  v53 = *(_QWORD *)(v1 + 416);
  v43 = *(_QWORD *)(v1 + 448);
  v44 = *(_QWORD *)(v1 + 456);
  v45 = *(_QWORD *)(v1 + 464);
  v46 = *(_QWORD *)(v1 + 472);
  v47 = *(_QWORD *)(v1 + 480);
  v5 = *(_QWORD *)(v1 + 504);
  v48 = *(_QWORD *)(v1 + 488);
  v49 = *(_QWORD *)(v1 + 496);
  v6 = *(_QWORD *)(v1 + 520);
  v7 = *(_QWORD *)(v1 + 528);
  v35 = *(_QWORD *)(v1 + 512);
  v36 = *(_QWORD *)(v1 + 536);
  if (*(_QWORD *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if ((_DWORD)v3 != 16)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v3);
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Locale.Language.Components.hash(into:)();
    if ((_DWORD)v3 != 16)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
LABEL_6:
  v41 = v6;
  v37 = v5;
  if (v4)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v27, v4);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v27, v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v8 = v51;
  if (v30 != 1)
  {
    Hasher._combine(_:)(1u);
    if (v30)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v21, v30);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v8 = v51;
      outlined consume of Locale.Subdivision??(v21, v30);
      if (!v31)
        goto LABEL_18;
    }
    else
    {
      Hasher._combine(_:)(0);
      outlined consume of Locale.Subdivision??(v21, 0);
      if (!v31)
        goto LABEL_18;
    }
LABEL_11:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v28, v31);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v28, v31);
    v9 = v34;
    if (v50)
      goto LABEL_12;
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_20;
  }
  Hasher._combine(_:)(0);
  if (v31)
    goto LABEL_11;
LABEL_18:
  Hasher._combine(_:)(0);
  v9 = v34;
  if (!v50)
    goto LABEL_19;
LABEL_12:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v50 + 16));
  v10 = *(_QWORD *)(v50 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    v11 = v50 + 56;
    do
    {
      v11 += 32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v8 = v51;
  }
LABEL_20:
  if (v38 == 7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (v39)
  {
    Hasher._combine(_:)(0);
    if (!v40)
      goto LABEL_25;
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized Optional<A>.hash(into:)();
    if (!v40)
    {
LABEL_25:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v22);
      if (v32 != 4)
        goto LABEL_26;
LABEL_30:
      Hasher._combine(_:)(0);
      if (v8)
        goto LABEL_27;
      goto LABEL_31;
    }
  }
  Hasher._combine(_:)(0);
  if (v32 == 4)
    goto LABEL_30;
LABEL_26:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v29, v8);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v29, v8);
    goto LABEL_32;
  }
LABEL_31:
  Hasher._combine(_:)(0);
LABEL_32:
  if (v33 == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v33 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  if (v52 == 1)
  {
    Hasher._combine(_:)(0);
    v13 = v42;
    if (v42 == 1)
      goto LABEL_37;
LABEL_47:
    Hasher._combine(_:)(1u);
    if (v13)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v24, v13);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v18 = v24;
      v19 = v13;
    }
    else
    {
      Hasher._combine(_:)(0);
      v18 = v24;
      v19 = 0;
    }
    outlined consume of Locale.Subdivision??(v18, v19);
    if (v9 != 1)
      goto LABEL_38;
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }
  Hasher._combine(_:)(1u);
  v13 = v42;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v16 = v23;
    v17 = v52;
  }
  else
  {
    Hasher._combine(_:)(0);
    v16 = v23;
    v17 = 0;
  }
  outlined consume of Locale.Subdivision??(v16, v17);
  if (v42 != 1)
    goto LABEL_47;
LABEL_37:
  Hasher._combine(_:)(0);
  if (v9 == 1)
    goto LABEL_51;
LABEL_38:
  Hasher._combine(_:)(1u);
  if (v9)
  {
    Hasher._combine(_:)(1u);
    ObjectType = swift_getObjectType();
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 112);
    swift_unknownObjectRetain();
    v15(a1, ObjectType, v25);
    outlined consume of TimeZone??(v9);
  }
  else
  {
    Hasher._combine(_:)(0);
    outlined consume of TimeZone??(0);
  }
LABEL_52:
  if (v53 != 1)
  {
    Hasher._combine(_:)(1u);
    if (v53)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v26, v53);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      outlined consume of Locale.Subdivision??(v26, v53);
      if (v43)
        goto LABEL_54;
    }
    else
    {
      Hasher._combine(_:)(0);
      outlined consume of Locale.Subdivision??(v26, 0);
      if (v43)
        goto LABEL_54;
    }
LABEL_57:
    Hasher._combine(_:)(0);
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  if (!v43)
    goto LABEL_57;
LABEL_54:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_58:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v36);
  return swift_bridgeObjectRelease();
}

Swift::Int _LocaleICU.State.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  void (*v22)(_BYTE *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[80];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 112);
  v41 = *(_QWORD *)(v0 + 144);
  v27 = *(_QWORD *)(v0 + 136);
  v34 = *(_QWORD *)(v0 + 168);
  v42 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 200);
  v33 = *(_QWORD *)(v0 + 104);
  v43 = *(char *)(v0 + 208);
  v45 = *(unsigned __int8 *)(v0 + 280);
  v44 = *(unsigned __int8 *)(v0 + 265);
  v46 = *(char *)(v0 + 281);
  v36 = *(_QWORD *)(v0 + 296);
  v35 = *(_QWORD *)(v0 + 288);
  v37 = *(unsigned __int8 *)(v0 + 320);
  v28 = *(_QWORD *)(v0 + 272);
  v29 = *(_QWORD *)(v0 + 328);
  v56 = *(_QWORD *)(v0 + 336);
  v57 = *(_QWORD *)(v0 + 368);
  v30 = *(_QWORD *)(v0 + 360);
  v31 = *(_QWORD *)(v0 + 400);
  v58 = *(_QWORD *)(v0 + 416);
  v32 = *(_QWORD *)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 448);
  v47 = *(_QWORD *)(v0 + 392);
  v48 = *(_QWORD *)(v0 + 456);
  v49 = *(_QWORD *)(v0 + 464);
  v50 = *(_QWORD *)(v0 + 472);
  v51 = *(_QWORD *)(v0 + 480);
  v52 = *(_QWORD *)(v0 + 488);
  v53 = *(_QWORD *)(v0 + 504);
  v54 = *(_QWORD *)(v0 + 512);
  v55 = *(_QWORD *)(v0 + 520);
  v38 = *(_QWORD *)(v0 + 496);
  v39 = *(_QWORD *)(v0 + 528);
  v40 = *(_QWORD *)(v0 + 536);
  Hasher.init(_seed:)();
  if (v1 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Locale.Language.Components.hash(into:)();
  }
  v6 = v58;
  v7 = v56;
  if ((_DWORD)v2 == 16)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  v8 = v57;
  if (v3)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v33, v3);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v33, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (v41 == 1)
  {
    Hasher._combine(_:)(0);
    v9 = v42;
    if (!v42)
      goto LABEL_12;
LABEL_18:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v34, v9);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v34, v9);
    if (!v4)
      goto LABEL_13;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  if (v41)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.Subdivision??(v27, v41);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 = v27;
    v11 = v41;
  }
  else
  {
    Hasher._combine(_:)(0);
    v10 = v27;
    v11 = 0;
  }
  outlined consume of Locale.Subdivision??(v10, v11);
  v9 = v42;
  if (v42)
    goto LABEL_18;
LABEL_12:
  Hasher._combine(_:)(0);
  if (!v4)
  {
LABEL_13:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v4 + 16));
  v12 = *(_QWORD *)(v4 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    v13 = v4 + 56;
    do
    {
      v13 += 32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    v6 = v58;
    v7 = v56;
    v8 = v57;
  }
LABEL_23:
  if (v43 == 7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (v44)
  {
    Hasher._combine(_:)(0);
    if (!v45)
      goto LABEL_28;
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized Optional<A>.hash(into:)();
    if (!v45)
    {
LABEL_28:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v28);
      if (v46 != 4)
        goto LABEL_29;
LABEL_33:
      Hasher._combine(_:)(0);
      if (v36)
        goto LABEL_30;
      goto LABEL_34;
    }
  }
  Hasher._combine(_:)(0);
  if (v46 == 4)
    goto LABEL_33;
LABEL_29:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v36)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v35, v36);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v35, v36);
    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
LABEL_35:
  if (v37 == 2)
  {
    v14 = 0;
  }
  else
  {
    v14 = v37 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
    v15 = v47;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v15 = v47;
    if (v7)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v16 = v29;
      v17 = v7;
    }
    else
    {
      Hasher._combine(_:)(0);
      v16 = v29;
      v17 = 0;
    }
    outlined consume of Locale.Subdivision??(v16, v17);
  }
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if (v8)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v30, v8);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v18 = v30;
      v19 = v8;
      v6 = v58;
    }
    else
    {
      Hasher._combine(_:)(0);
      v18 = v30;
      v19 = 0;
    }
    outlined consume of Locale.Subdivision??(v18, v19);
  }
  if (v15 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if (v15)
    {
      Hasher._combine(_:)(1u);
      v20 = v15;
      ObjectType = swift_getObjectType();
      v22 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v31 + 112);
      swift_unknownObjectRetain();
      v22(v59, ObjectType, v31);
      v23 = v20;
    }
    else
    {
      Hasher._combine(_:)(0);
      v23 = 0;
    }
    outlined consume of TimeZone??(v23);
  }
  if (v6 != 1)
  {
    Hasher._combine(_:)(1u);
    if (v6)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v32, v6);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v24 = v32;
      v25 = v6;
    }
    else
    {
      Hasher._combine(_:)(0);
      v24 = v32;
      v25 = 0;
    }
    outlined consume of Locale.Subdivision??(v24, v25);
    if (!v5)
      goto LABEL_58;
LABEL_63:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }
  Hasher._combine(_:)(0);
  if (v5)
    goto LABEL_63;
LABEL_58:
  Hasher._combine(_:)(0);
LABEL_64:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v40);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _LocaleICU.State()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  uint64_t v12;
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  void (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[80];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 112);
  v40 = *(_QWORD *)(v0 + 144);
  v26 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 176);
  v33 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 200);
  v32 = *(_QWORD *)(v0 + 104);
  v41 = *(char *)(v0 + 208);
  v43 = *(unsigned __int8 *)(v0 + 280);
  v42 = *(unsigned __int8 *)(v0 + 265);
  v44 = *(char *)(v0 + 281);
  v35 = *(_QWORD *)(v0 + 296);
  v34 = *(_QWORD *)(v0 + 288);
  v36 = *(unsigned __int8 *)(v0 + 320);
  v27 = *(_QWORD *)(v0 + 272);
  v28 = *(_QWORD *)(v0 + 328);
  v54 = *(_QWORD *)(v0 + 336);
  v55 = *(_QWORD *)(v0 + 368);
  v29 = *(_QWORD *)(v0 + 360);
  v30 = *(_QWORD *)(v0 + 400);
  v57 = *(_QWORD *)(v0 + 416);
  v31 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 448);
  v45 = *(_QWORD *)(v0 + 392);
  v46 = *(_QWORD *)(v0 + 456);
  v47 = *(_QWORD *)(v0 + 464);
  v48 = *(_QWORD *)(v0 + 472);
  v49 = *(_QWORD *)(v0 + 480);
  v50 = *(_QWORD *)(v0 + 488);
  v51 = *(_QWORD *)(v0 + 504);
  v52 = *(_QWORD *)(v0 + 512);
  v53 = *(_QWORD *)(v0 + 520);
  v37 = *(_QWORD *)(v0 + 496);
  v38 = *(_QWORD *)(v0 + 528);
  v39 = *(_QWORD *)(v0 + 536);
  Hasher.init(_seed:)();
  if (v1 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Locale.Language.Components.hash(into:)();
  }
  v56 = v6;
  v8 = v54;
  v7 = v55;
  if ((_DWORD)v2 == 16)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  if (v3)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v32, v3);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v32, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (v40 == 1)
  {
    Hasher._combine(_:)(0);
    if (!v4)
      goto LABEL_12;
LABEL_18:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v33, v4);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v33, v4);
    if (!v5)
      goto LABEL_13;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  if (v40)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.Subdivision??(v26, v40);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v9 = v26;
    v10 = v40;
  }
  else
  {
    Hasher._combine(_:)(0);
    v9 = v26;
    v10 = 0;
  }
  outlined consume of Locale.Subdivision??(v9, v10);
  if (v4)
    goto LABEL_18;
LABEL_12:
  Hasher._combine(_:)(0);
  if (!v5)
  {
LABEL_13:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  v11 = *(_QWORD *)(v5 + 16);
  Hasher._combine(_:)(v11);
  if (v11)
  {
    swift_bridgeObjectRetain();
    v12 = v5 + 56;
    do
    {
      v12 += 32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    v8 = v54;
    v7 = v55;
  }
LABEL_23:
  if (v41 == 7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (v42)
  {
    Hasher._combine(_:)(0);
    if (!v43)
      goto LABEL_28;
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized Optional<A>.hash(into:)();
    if (!v43)
    {
LABEL_28:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v27);
      if (v44 != 4)
        goto LABEL_29;
LABEL_33:
      Hasher._combine(_:)(0);
      if (v35)
        goto LABEL_30;
      goto LABEL_34;
    }
  }
  Hasher._combine(_:)(0);
  if (v44 == 4)
    goto LABEL_33;
LABEL_29:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v35)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v34, v35);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v34, v35);
    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
LABEL_35:
  if (v36 == 2)
  {
    v13 = 0;
  }
  else
  {
    v13 = v36 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
    v14 = v45;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v14 = v45;
    if (v8)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v15 = v28;
      v16 = v8;
    }
    else
    {
      Hasher._combine(_:)(0);
      v15 = v28;
      v16 = 0;
    }
    outlined consume of Locale.Subdivision??(v15, v16);
  }
  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if (v7)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v29, v7);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v17 = v29;
      v18 = v7;
    }
    else
    {
      Hasher._combine(_:)(0);
      v17 = v29;
      v18 = 0;
    }
    outlined consume of Locale.Subdivision??(v17, v18);
  }
  if (v14 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if (v14)
    {
      Hasher._combine(_:)(1u);
      v19 = v14;
      ObjectType = swift_getObjectType();
      v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v30 + 112);
      swift_unknownObjectRetain();
      v21(v58, ObjectType, v30);
      v22 = v19;
    }
    else
    {
      Hasher._combine(_:)(0);
      v22 = 0;
    }
    outlined consume of TimeZone??(v22);
  }
  if (v57 != 1)
  {
    Hasher._combine(_:)(1u);
    if (v57)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v31, v57);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v23 = v31;
      v24 = v57;
    }
    else
    {
      Hasher._combine(_:)(0);
      v23 = v31;
      v24 = 0;
    }
    outlined consume of Locale.Subdivision??(v23, v24);
    if (!v56)
      goto LABEL_58;
LABEL_63:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }
  Hasher._combine(_:)(0);
  if (v56)
    goto LABEL_63;
LABEL_58:
  Hasher._combine(_:)(0);
LABEL_64:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v39);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t _LocaleICU.init(components:)(void *__src)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[22];
  uint64_t __dst[45];

  v2 = v1;
  v3 = __src;
  memcpy(__dst, __src, 0x160uLL);
  memcpy(v82, v3, sizeof(v82));
  Locale.Components.icuIdentifier.getter();
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)(v2 + 24) = v5;
  swift_bridgeObjectRetain();
  LOBYTE(v3) = specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v2 + 32) = v3 & 1;
  _s10Foundation17LocalePreferencesVSgWOi0_(v82);
  v67 = v2;
  outlined init with take of LocalePreferences?((uint64_t)v82, v2 + 40);
  v6 = 1;
  v7 = __dst[18];
  if (__dst[18])
  {
    v66 = __dst[20];
    v63 = __dst[19];
    v6 = __dst[18];
    v59 = __dst[17];
  }
  else
  {
    v66 = 0;
    v63 = 0;
    v59 = 0;
  }
  if (__dst[31])
  {
    v64 = __dst[32];
    v65 = __dst[30];
    v60 = __dst[31];
    v61 = __dst[33];
  }
  else
  {
    v64 = 0;
    v65 = 0;
    v60 = 1;
    v61 = 0;
  }
  v80 = __dst[14];
  v8 = __dst[15];
  v9 = __dst[16];
  v51 = __dst[21];
  v79 = __dst[22];
  v10 = __dst[23];
  v11 = __dst[24];
  v81 = __dst[27];
  v12 = __dst[28];
  v13 = __dst[29];
  v42 = __dst[31];
  v44 = __dst[30];
  v38 = __dst[17];
  v37 = __dst[26];
  v35 = __dst[35];
  v36 = __dst[34];
  v14 = __dst[13];
  if (__dst[35])
  {
    v56 = __dst[36];
    v57 = __dst[34];
    v54 = __dst[35];
    v55 = __dst[37];
  }
  else
  {
    v56 = 0;
    v57 = 0;
    v54 = 1;
    v55 = 0;
  }
  v62 = v6;
  v77 = __dst[5];
  v78 = __dst[4];
  v75 = __dst[7];
  v76 = __dst[6];
  v73 = __dst[9];
  v74 = __dst[8];
  v71 = __dst[11];
  v72 = __dst[10];
  v46 = __dst[12];
  v50 = __dst[25];
  v53 = BYTE1(__dst[25]);
  v15 = __dst[38];
  v16 = __dst[39];
  v70 = __dst[41];
  v58 = __dst[0];
  v48 = __dst[2];
  v49 = __dst[1];
  v47 = __dst[3];
  v34 = __dst[13];
  if (__dst[41])
  {
    v68 = __dst[42];
    v69 = __dst[43];
    v33 = __dst[39];
    v17 = __dst[40];
    outlined copy of Locale.LanguageCode?(__dst[0], __dst[1]);
    outlined copy of Locale.LanguageCode?(v78, v77);
    outlined copy of Locale.LanguageCode?(v74, v73);
    outlined copy of Locale.LanguageCode?(v14, v80);
    outlined copy of Locale.LanguageCode?(v38, v7);
    v18 = v51;
    outlined copy of Locale.LanguageCode?(v51, v79);
    v19 = v37;
    outlined copy of Locale.LanguageCode?(v37, v81);
    outlined copy of Locale.LanguageCode?(v44, v42);
    outlined copy of Locale.LanguageCode?(v36, v35);
    swift_unknownObjectRetain();
    v45 = v17;
    v20 = v17;
    v16 = v33;
    outlined copy of Locale.LanguageCode?(v20, v70);
  }
  else
  {
    outlined copy of Locale.LanguageCode?(__dst[0], __dst[1]);
    outlined copy of Locale.LanguageCode?(v78, v77);
    outlined copy of Locale.LanguageCode?(v74, v73);
    outlined copy of Locale.LanguageCode?(v14, v80);
    outlined copy of Locale.LanguageCode?(v38, v7);
    v18 = v51;
    outlined copy of Locale.LanguageCode?(v51, v79);
    v19 = v37;
    outlined copy of Locale.LanguageCode?(v37, v81);
    outlined copy of Locale.LanguageCode?(v44, v42);
    outlined copy of Locale.LanguageCode?(v36, v35);
    swift_unknownObjectRetain();
    v45 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 1;
  }
  outlined release of Locale.Components(__dst);
  if (v15)
    v21 = v16;
  else
    v21 = 0;
  v52 = v21;
  if (v15 <= 1)
    v22 = 1;
  else
    v22 = v15;
  if (v81)
    v23 = v13;
  else
    v23 = 0;
  v41 = v23;
  v43 = v22;
  if (v81)
    v24 = v12;
  else
    v24 = 0;
  if (v81)
    v25 = v19;
  else
    v25 = 0;
  v39 = v25;
  v40 = v24;
  if (v79)
    v26 = v18;
  else
    v26 = 0;
  if (v79)
  {
    v27 = v11;
  }
  else
  {
    v10 = 0;
    v27 = 0;
  }
  if (v80)
    v28 = v34;
  else
    v28 = 0;
  if (v80)
    v29 = v8;
  else
    v29 = 0;
  if (!v80)
    v9 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_LocaleICU.State>._Buffer);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 24) = v49;
  *(_QWORD *)(v30 + 32) = v48;
  *(_QWORD *)(v30 + 40) = v47;
  *(_QWORD *)(v30 + 48) = v78;
  *(_QWORD *)(v30 + 56) = v77;
  *(_QWORD *)(v30 + 64) = v76;
  *(_QWORD *)(v30 + 72) = v75;
  *(_QWORD *)(v30 + 80) = v74;
  *(_QWORD *)(v30 + 88) = v73;
  *(_QWORD *)(v30 + 96) = v72;
  *(_QWORD *)(v30 + 104) = v71;
  *(_BYTE *)(v30 + 112) = v46;
  *(_QWORD *)(v30 + 120) = v28;
  *(_QWORD *)(v30 + 128) = v80;
  *(_QWORD *)(v30 + 136) = v29;
  *(_QWORD *)(v30 + 144) = v9;
  *(_QWORD *)(v30 + 152) = v59;
  *(_QWORD *)(v30 + 160) = v62;
  *(_DWORD *)(v30 + 560) = 0;
  *(_QWORD *)(v30 + 168) = v63;
  *(_QWORD *)(v30 + 176) = v66;
  *(_QWORD *)(v30 + 184) = v26;
  *(_QWORD *)(v30 + 192) = v79;
  *(_QWORD *)(v30 + 200) = v10;
  *(_QWORD *)(v30 + 208) = v27;
  *(_QWORD *)(v30 + 216) = 0;
  *(_BYTE *)(v30 + 224) = v50;
  *(_BYTE *)(v30 + 280) = 0;
  *(_OWORD *)(v30 + 248) = 0u;
  *(_OWORD *)(v30 + 232) = 0u;
  *(_BYTE *)(v30 + 281) = 1;
  *(_QWORD *)(v30 + 288) = 0;
  *(_BYTE *)(v30 + 296) = 1;
  *(_BYTE *)(v30 + 297) = v53;
  *(_QWORD *)(v30 + 304) = v39;
  *(_QWORD *)(v30 + 312) = v81;
  *(_QWORD *)(v30 + 320) = v40;
  *(_QWORD *)(v30 + 328) = v41;
  *(_BYTE *)(v30 + 336) = 2;
  *(_QWORD *)(v30 + 344) = v65;
  *(_QWORD *)(v30 + 352) = v60;
  *(_QWORD *)(v30 + 360) = v64;
  *(_QWORD *)(v30 + 368) = v61;
  *(_QWORD *)(v30 + 376) = v57;
  *(_QWORD *)(v30 + 384) = v54;
  *(_QWORD *)(v30 + 392) = v56;
  *(_QWORD *)(v30 + 400) = v55;
  *(_QWORD *)(v30 + 408) = v43;
  *(_QWORD *)(v30 + 416) = v52;
  *(_QWORD *)(v30 + 424) = v45;
  *(_QWORD *)(v30 + 432) = v70;
  *(_QWORD *)(v30 + 440) = v68;
  *(_QWORD *)(v30 + 448) = v69;
  v31 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v30 + 456) = 0;
  *(_QWORD *)(v30 + 464) = 0;
  *(_QWORD *)(v30 + 472) = v31;
  *(_QWORD *)(v30 + 480) = v31;
  *(_QWORD *)(v30 + 488) = v31;
  *(_QWORD *)(v30 + 496) = v31;
  *(_QWORD *)(v30 + 504) = v31;
  *(_QWORD *)(v30 + 512) = v31;
  *(_QWORD *)(v30 + 520) = v31;
  *(_QWORD *)(v30 + 528) = v31;
  *(_QWORD *)(v30 + 536) = v31;
  *(_QWORD *)(v30 + 544) = v31;
  *(_QWORD *)(v30 + 552) = v31;
  *(_QWORD *)(v67 + 184) = v30;
  *(_QWORD *)(v30 + 16) = v58;
  *(_OWORD *)(v30 + 264) = 0u;
  return v67;
}

uint64_t closure #1 in _LocaleICU.identifierDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char v4;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;

  v9 = *(_QWORD *)(a1 + 456);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v11 & 1) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
      v14 = *v12;
      v13 = v12[1];
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v16 = swift_retain();
  specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3, MEMORY[0x1E0DE63E8]);
  v53 = v17;
  v13 = v18;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v54 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0x8000000000000000;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v22 = *(_QWORD *)(v54 + 16);
  v23 = (v20 & 1) == 0;
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }
  else
  {
    v4 = v20;
    if (*(_QWORD *)(v54 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      v25 = v54;
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v27 & 1))
        goto LABEL_52;
      v21 = v26;
      if ((v4 & 1) == 0)
        goto LABEL_47;
LABEL_12:
      v28 = (_QWORD *)(*(_QWORD *)(v25 + 56) + 16 * v21);
      swift_bridgeObjectRelease();
      v14 = v53;
      *v28 = v53;
      v28[1] = v13;
LABEL_48:
      *(_QWORD *)(a1 + 456) = v25;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v25 = v54;
      if ((v20 & 1) != 0)
        goto LABEL_12;
LABEL_47:
      v48 = a2;
      v14 = v53;
      specialized _NativeDictionary._insert(at:key:value:)(v21, v48, a3, v53, v13, v25);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  v49 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  v29 = static _DictionaryStorage.copy(original:)();
  v25 = v29;
  if (!*(_QWORD *)(v54 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    v21 = v49;
    if ((v4 & 1) != 0)
      goto LABEL_12;
    goto LABEL_47;
  }
  v30 = (void *)(v29 + 64);
  v31 = (unint64_t)((1 << *(_BYTE *)(v25 + 32)) + 63) >> 6;
  if (v25 != v54 || (unint64_t)v30 >= v54 + 64 + 8 * v31)
    memmove(v30, (const void *)(v54 + 64), 8 * v31);
  v50 = v54 + 64;
  v32 = 0;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v54 + 16);
  v33 = 1 << *(_BYTE *)(v54 + 32);
  v34 = -1;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  v35 = v34 & *(_QWORD *)(v54 + 64);
  v51 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      v36 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      v52 = v32;
      v37 = v36 | (v32 << 6);
      goto LABEL_22;
    }
    v44 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v44 >= v51)
      goto LABEL_46;
    v45 = *(_QWORD *)(v50 + 8 * v44);
    v46 = v32 + 1;
    if (!v45)
    {
      v46 = v32 + 2;
      if (v32 + 2 >= v51)
        goto LABEL_46;
      v45 = *(_QWORD *)(v50 + 8 * v46);
      if (!v45)
      {
        v46 = v32 + 3;
        if (v32 + 3 >= v51)
          goto LABEL_46;
        v45 = *(_QWORD *)(v50 + 8 * v46);
        if (!v45)
        {
          v46 = v32 + 4;
          if (v32 + 4 >= v51)
            goto LABEL_46;
          v45 = *(_QWORD *)(v50 + 8 * v46);
          if (!v45)
          {
            v46 = v32 + 5;
            if (v32 + 5 >= v51)
              goto LABEL_46;
            v45 = *(_QWORD *)(v50 + 8 * v46);
            if (!v45)
            {
              v46 = v32 + 6;
              if (v32 + 6 >= v51)
                goto LABEL_46;
              v45 = *(_QWORD *)(v50 + 8 * v46);
              if (!v45)
              {
                v46 = v32 + 7;
                if (v32 + 7 >= v51)
                  goto LABEL_46;
                v45 = *(_QWORD *)(v50 + 8 * v46);
                if (!v45)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_45:
    v35 = (v45 - 1) & v45;
    v52 = v46;
    v37 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_22:
    v38 = 16 * v37;
    v39 = (uint64_t *)(*(_QWORD *)(v54 + 48) + v38);
    v40 = *v39;
    v41 = v39[1];
    v42 = (_QWORD *)(*(_QWORD *)(v25 + 48) + v38);
    v43 = *(_OWORD *)(*(_QWORD *)(v54 + 56) + v38);
    *v42 = v40;
    v42[1] = v41;
    *(_OWORD *)(*(_QWORD *)(v25 + 56) + v38) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32 = v52;
  }
  v47 = v32 + 8;
  if (v32 + 8 >= v51)
    goto LABEL_46;
  v45 = *(_QWORD *)(v50 + 8 * v47);
  if (v45)
  {
    v46 = v32 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    v46 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    if (v46 >= v51)
      goto LABEL_46;
    v45 = *(_QWORD *)(v50 + 8 * v46);
    ++v47;
    if (v45)
      goto LABEL_45;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _LocaleICU.languageCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char v4;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;

  v9 = *(_QWORD *)(a1 + 472);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v11 & 1) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
      v14 = *v12;
      v13 = v12[1];
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v16 = swift_retain();
  specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3, MEMORY[0x1E0DE63E0]);
  v53 = v17;
  v13 = v18;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v54 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 472) = 0x8000000000000000;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v22 = *(_QWORD *)(v54 + 16);
  v23 = (v20 & 1) == 0;
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }
  else
  {
    v4 = v20;
    if (*(_QWORD *)(v54 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      v25 = v54;
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v27 & 1))
        goto LABEL_52;
      v21 = v26;
      if ((v4 & 1) == 0)
        goto LABEL_47;
LABEL_12:
      v28 = (_QWORD *)(*(_QWORD *)(v25 + 56) + 16 * v21);
      swift_bridgeObjectRelease();
      v14 = v53;
      *v28 = v53;
      v28[1] = v13;
LABEL_48:
      *(_QWORD *)(a1 + 472) = v25;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v25 = v54;
      if ((v20 & 1) != 0)
        goto LABEL_12;
LABEL_47:
      v48 = a2;
      v14 = v53;
      specialized _NativeDictionary._insert(at:key:value:)(v21, v48, a3, v53, v13, v25);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  v49 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  v29 = static _DictionaryStorage.copy(original:)();
  v25 = v29;
  if (!*(_QWORD *)(v54 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    v21 = v49;
    if ((v4 & 1) != 0)
      goto LABEL_12;
    goto LABEL_47;
  }
  v30 = (void *)(v29 + 64);
  v31 = (unint64_t)((1 << *(_BYTE *)(v25 + 32)) + 63) >> 6;
  if (v25 != v54 || (unint64_t)v30 >= v54 + 64 + 8 * v31)
    memmove(v30, (const void *)(v54 + 64), 8 * v31);
  v50 = v54 + 64;
  v32 = 0;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v54 + 16);
  v33 = 1 << *(_BYTE *)(v54 + 32);
  v34 = -1;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  v35 = v34 & *(_QWORD *)(v54 + 64);
  v51 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      v36 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      v52 = v32;
      v37 = v36 | (v32 << 6);
      goto LABEL_22;
    }
    v44 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v44 >= v51)
      goto LABEL_46;
    v45 = *(_QWORD *)(v50 + 8 * v44);
    v46 = v32 + 1;
    if (!v45)
    {
      v46 = v32 + 2;
      if (v32 + 2 >= v51)
        goto LABEL_46;
      v45 = *(_QWORD *)(v50 + 8 * v46);
      if (!v45)
      {
        v46 = v32 + 3;
        if (v32 + 3 >= v51)
          goto LABEL_46;
        v45 = *(_QWORD *)(v50 + 8 * v46);
        if (!v45)
        {
          v46 = v32 + 4;
          if (v32 + 4 >= v51)
            goto LABEL_46;
          v45 = *(_QWORD *)(v50 + 8 * v46);
          if (!v45)
          {
            v46 = v32 + 5;
            if (v32 + 5 >= v51)
              goto LABEL_46;
            v45 = *(_QWORD *)(v50 + 8 * v46);
            if (!v45)
            {
              v46 = v32 + 6;
              if (v32 + 6 >= v51)
                goto LABEL_46;
              v45 = *(_QWORD *)(v50 + 8 * v46);
              if (!v45)
              {
                v46 = v32 + 7;
                if (v32 + 7 >= v51)
                  goto LABEL_46;
                v45 = *(_QWORD *)(v50 + 8 * v46);
                if (!v45)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_45:
    v35 = (v45 - 1) & v45;
    v52 = v46;
    v37 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_22:
    v38 = 16 * v37;
    v39 = (uint64_t *)(*(_QWORD *)(v54 + 48) + v38);
    v40 = *v39;
    v41 = v39[1];
    v42 = (_QWORD *)(*(_QWORD *)(v25 + 48) + v38);
    v43 = *(_OWORD *)(*(_QWORD *)(v54 + 56) + v38);
    *v42 = v40;
    v42[1] = v41;
    *(_OWORD *)(*(_QWORD *)(v25 + 56) + v38) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32 = v52;
  }
  v47 = v32 + 8;
  if (v32 + 8 >= v51)
    goto LABEL_46;
  v45 = *(_QWORD *)(v50 + 8 * v47);
  if (v45)
  {
    v46 = v32 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    v46 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    if (v46 >= v51)
      goto LABEL_46;
    v45 = *(_QWORD *)(v50 + 8 * v46);
    ++v47;
    if (v45)
      goto LABEL_45;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _LocaleICU.subdivision.getter@<X0>(_QWORD *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;

  v4 = a1[45];
  v3 = a1[46];
  v5 = a1[47];
  v6 = (void *)a1[48];
  if (v3 == 1)
  {
    v8 = specialized static Locale.keywordValue(identifier:key:)();
    if (v9)
    {
      v10 = v8;
      v11 = v9;
      v12 = String.lowercased()();
      a1[45] = v10;
      a1[46] = v11;
      *(Swift::String *)(a1 + 47) = v12;
      a2->_countAndFlagsBits = v10;
      a2->_object = v11;
      a2[1] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(a1 + 45) = 0u;
      *(_OWORD *)(a1 + 47) = 0u;
      *a2 = 0u;
      a2[1] = 0u;
    }
  }
  else
  {
    a2->_countAndFlagsBits = v4;
    a2->_object = (void *)v3;
    a2[1]._countAndFlagsBits = v5;
    a2[1]._object = v6;
  }
  return outlined copy of Locale.Subdivision??(v4, v3);
}

uint64_t closure #1 in _LocaleICU.variant.getter@<X0>(_QWORD *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;

  v4 = a1[51];
  v3 = a1[52];
  v5 = a1[53];
  v6 = (void *)a1[54];
  if (v3 == 1)
  {
    swift_retain();
    v8 = specialized _withFixedCharBuffer(size:_:)(257);
    v10 = v9;
    swift_release();
    if (v10)
    {
      v11 = String.lowercased()();
      a1[51] = v8;
      a1[52] = v10;
      *(Swift::String *)(a1 + 53) = v11;
      a2->_countAndFlagsBits = v8;
      a2->_object = v10;
      a2[1] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(a1 + 51) = 0u;
      *(_OWORD *)(a1 + 53) = 0u;
      *a2 = 0u;
      a2[1] = 0u;
    }
  }
  else
  {
    a2->_countAndFlagsBits = v4;
    a2->_object = (void *)v3;
    a2[1]._countAndFlagsBits = v5;
    a2[1]._object = v6;
  }
  return outlined copy of Locale.Subdivision??(v4, v3);
}

uint64_t closure #1 in _LocaleICU.scriptCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  char v4;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;

  v9 = *(_QWORD *)(a1 + 488);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
    if ((v11 & 1) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
      v14 = *v12;
      v13 = v12[1];
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v16 = swift_retain();
  v52 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  v13 = v17;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0x8000000000000000;
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
  v21 = *(_QWORD *)(v53 + 16);
  v22 = (v19 & 1) == 0;
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }
  else
  {
    v4 = v19;
    if (*(_QWORD *)(v53 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      v24 = v53;
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
      if ((v4 & 1) != (v26 & 1))
        goto LABEL_52;
      v20 = v25;
      if ((v4 & 1) == 0)
        goto LABEL_47;
LABEL_12:
      v27 = (uint64_t *)(*(_QWORD *)(v24 + 56) + 16 * v20);
      swift_bridgeObjectRelease();
      v14 = v52;
      *v27 = v52;
      v27[1] = v13;
LABEL_48:
      *(_QWORD *)(a1 + 488) = v24;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v24 = v53;
      if ((v19 & 1) != 0)
        goto LABEL_12;
LABEL_47:
      v47 = a2;
      v14 = v52;
      specialized _NativeDictionary._insert(at:key:value:)(v20, v47, a3, v52, v13, v24);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  v48 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  v28 = static _DictionaryStorage.copy(original:)();
  v24 = v28;
  if (!*(_QWORD *)(v53 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    v20 = v48;
    if ((v4 & 1) != 0)
      goto LABEL_12;
    goto LABEL_47;
  }
  v29 = (void *)(v28 + 64);
  v30 = (unint64_t)((1 << *(_BYTE *)(v24 + 32)) + 63) >> 6;
  if (v24 != v53 || (unint64_t)v29 >= v53 + 64 + 8 * v30)
    memmove(v29, (const void *)(v53 + 64), 8 * v30);
  v49 = v53 + 64;
  v31 = 0;
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v53 + 16);
  v32 = 1 << *(_BYTE *)(v53 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & *(_QWORD *)(v53 + 64);
  v50 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v51 = v31;
      v36 = v35 | (v31 << 6);
      goto LABEL_22;
    }
    v43 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v43 >= v50)
      goto LABEL_46;
    v44 = *(_QWORD *)(v49 + 8 * v43);
    v45 = v31 + 1;
    if (!v44)
    {
      v45 = v31 + 2;
      if (v31 + 2 >= v50)
        goto LABEL_46;
      v44 = *(_QWORD *)(v49 + 8 * v45);
      if (!v44)
      {
        v45 = v31 + 3;
        if (v31 + 3 >= v50)
          goto LABEL_46;
        v44 = *(_QWORD *)(v49 + 8 * v45);
        if (!v44)
        {
          v45 = v31 + 4;
          if (v31 + 4 >= v50)
            goto LABEL_46;
          v44 = *(_QWORD *)(v49 + 8 * v45);
          if (!v44)
          {
            v45 = v31 + 5;
            if (v31 + 5 >= v50)
              goto LABEL_46;
            v44 = *(_QWORD *)(v49 + 8 * v45);
            if (!v44)
            {
              v45 = v31 + 6;
              if (v31 + 6 >= v50)
                goto LABEL_46;
              v44 = *(_QWORD *)(v49 + 8 * v45);
              if (!v44)
              {
                v45 = v31 + 7;
                if (v31 + 7 >= v50)
                  goto LABEL_46;
                v44 = *(_QWORD *)(v49 + 8 * v45);
                if (!v44)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_45:
    v34 = (v44 - 1) & v44;
    v51 = v45;
    v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_22:
    v37 = 16 * v36;
    v38 = (uint64_t *)(*(_QWORD *)(v53 + 48) + v37);
    v39 = *v38;
    v40 = v38[1];
    v41 = (_QWORD *)(*(_QWORD *)(v24 + 48) + v37);
    v42 = *(_OWORD *)(*(_QWORD *)(v53 + 56) + v37);
    *v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(*(_QWORD *)(v24 + 56) + v37) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = v51;
  }
  v46 = v31 + 8;
  if (v31 + 8 >= v50)
    goto LABEL_46;
  v44 = *(_QWORD *)(v49 + 8 * v46);
  if (v44)
  {
    v45 = v31 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    v45 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v45 >= v50)
      goto LABEL_46;
    v44 = *(_QWORD *)(v49 + 8 * v45);
    ++v46;
    if (v44)
      goto LABEL_45;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _LocaleICU.variantCode.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v1 = *(_QWORD *)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  closure #1 in _LocaleICU.variant.getter((_QWORD *)(v1 + 16), &v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  object = v5._object;
  if (!v5._object)
    return 0;
  countAndFlagsBits = v5._countAndFlagsBits;
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(countAndFlagsBits, (uint64_t)object);
  return countAndFlagsBits;
}

uint64_t closure #1 in _LocaleICU.variantCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  char v4;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;

  v9 = *(_QWORD *)(a1 + 496);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
    if ((v11 & 1) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
      v14 = *v12;
      v13 = v12[1];
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v16 = swift_retain();
  specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  v53 = v17;
  v13 = v18;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v54 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 496) = 0x8000000000000000;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
  v22 = *(_QWORD *)(v54 + 16);
  v23 = (v20 & 1) == 0;
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }
  else
  {
    v4 = v20;
    if (*(_QWORD *)(v54 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      v25 = v54;
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
      if ((v4 & 1) != (v27 & 1))
        goto LABEL_52;
      v21 = v26;
      if ((v4 & 1) == 0)
        goto LABEL_47;
LABEL_12:
      v28 = (_QWORD *)(*(_QWORD *)(v25 + 56) + 16 * v21);
      swift_bridgeObjectRelease();
      v14 = v53;
      *v28 = v53;
      v28[1] = v13;
LABEL_48:
      *(_QWORD *)(a1 + 496) = v25;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v25 = v54;
      if ((v20 & 1) != 0)
        goto LABEL_12;
LABEL_47:
      v48 = a2;
      v14 = v53;
      specialized _NativeDictionary._insert(at:key:value:)(v21, v48, a3, v53, v13, v25);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  v49 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  v29 = static _DictionaryStorage.copy(original:)();
  v25 = v29;
  if (!*(_QWORD *)(v54 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    v21 = v49;
    if ((v4 & 1) != 0)
      goto LABEL_12;
    goto LABEL_47;
  }
  v30 = (void *)(v29 + 64);
  v31 = (unint64_t)((1 << *(_BYTE *)(v25 + 32)) + 63) >> 6;
  if (v25 != v54 || (unint64_t)v30 >= v54 + 64 + 8 * v31)
    memmove(v30, (const void *)(v54 + 64), 8 * v31);
  v50 = v54 + 64;
  v32 = 0;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v54 + 16);
  v33 = 1 << *(_BYTE *)(v54 + 32);
  v34 = -1;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  v35 = v34 & *(_QWORD *)(v54 + 64);
  v51 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      v36 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      v52 = v32;
      v37 = v36 | (v32 << 6);
      goto LABEL_22;
    }
    v44 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v44 >= v51)
      goto LABEL_46;
    v45 = *(_QWORD *)(v50 + 8 * v44);
    v46 = v32 + 1;
    if (!v45)
    {
      v46 = v32 + 2;
      if (v32 + 2 >= v51)
        goto LABEL_46;
      v45 = *(_QWORD *)(v50 + 8 * v46);
      if (!v45)
      {
        v46 = v32 + 3;
        if (v32 + 3 >= v51)
          goto LABEL_46;
        v45 = *(_QWORD *)(v50 + 8 * v46);
        if (!v45)
        {
          v46 = v32 + 4;
          if (v32 + 4 >= v51)
            goto LABEL_46;
          v45 = *(_QWORD *)(v50 + 8 * v46);
          if (!v45)
          {
            v46 = v32 + 5;
            if (v32 + 5 >= v51)
              goto LABEL_46;
            v45 = *(_QWORD *)(v50 + 8 * v46);
            if (!v45)
            {
              v46 = v32 + 6;
              if (v32 + 6 >= v51)
                goto LABEL_46;
              v45 = *(_QWORD *)(v50 + 8 * v46);
              if (!v45)
              {
                v46 = v32 + 7;
                if (v32 + 7 >= v51)
                  goto LABEL_46;
                v45 = *(_QWORD *)(v50 + 8 * v46);
                if (!v45)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_45:
    v35 = (v45 - 1) & v45;
    v52 = v46;
    v37 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_22:
    v38 = 16 * v37;
    v39 = (uint64_t *)(*(_QWORD *)(v54 + 48) + v38);
    v40 = *v39;
    v41 = v39[1];
    v42 = (_QWORD *)(*(_QWORD *)(v25 + 48) + v38);
    v43 = *(_OWORD *)(*(_QWORD *)(v54 + 56) + v38);
    *v42 = v40;
    v42[1] = v41;
    *(_OWORD *)(*(_QWORD *)(v25 + 56) + v38) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32 = v52;
  }
  v47 = v32 + 8;
  if (v32 + 8 >= v51)
    goto LABEL_46;
  v45 = *(_QWORD *)(v50 + 8 * v47);
  if (v45)
  {
    v46 = v32 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    v46 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    if (v46 >= v51)
      goto LABEL_46;
    v45 = *(_QWORD *)(v50 + 8 * v46);
    ++v47;
    if (v45)
      goto LABEL_45;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

CFMutableCharacterSetRef _LocaleICU.exemplarCharacterSet.getter@<X0>(uint64_t *a1@<X8>)
{
  CFMutableCharacterSetRef result;
  CFMutableCharacterSetRef v3;
  uint64_t v4;
  uint64_t v5;
  int ItemCount;
  int v7;
  int v8;
  const __CFString *v9;
  __CFCharacterSet *v10;
  int Item;
  id v12;
  char v13;
  const __CFCharacterSet *v14;
  CFMutableCharacterSetRef v15;
  char v16;
  const __CFCharacterSet *v17;
  CFMutableCharacterSetRef v18;
  uint64_t v19;
  void *v20;
  const __CFCharacterSet *v21;
  CFMutableCharacterSetRef v22;
  const __CFString *v23;
  __CFCharacterSet *v24;
  void *v25;
  uint64_t v26;
  __CFCharacterSet *v27;
  const __CFCharacterSet *v28;
  CFMutableCharacterSetRef v29;
  __CFCharacterSet *v30;
  void *v31;
  uint64_t *v32;
  int v33;
  CFRange v34;
  CFRange v35;

  String.utf8CString.getter();
  ulocdata_open();
  swift_release();
  ulocdata_getExemplarSet();
  result = CFCharacterSetCreateMutable(0);
  if (!result)
    goto LABEL_36;
  v3 = result;
  type metadata accessor for __CharacterSetStorage();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_BYTE *)(v4 + 24) = 1;
  v5 = swift_slowAlloc();
  ItemCount = uset_getItemCount();
  if (ItemCount < 0)
LABEL_31:
    __break(1u);
  v7 = ItemCount;
  v32 = a1;
  if (!ItemCount)
  {
LABEL_29:
    *v32 = v4;
    swift_retain();
    MEMORY[0x186DA9E78](v5, -1, -1);
    swift_release();
    uset_close();
    return (CFMutableCharacterSetRef)ulocdata_close();
  }
  v8 = 0;
  v33 = ItemCount;
  while (1)
  {
    if (v7 == v8)
    {
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      goto LABEL_31;
    }
    Item = uset_getItem();
    if (Item > 0)
      break;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v16 = *(_BYTE *)(v4 + 24);
      v17 = (const __CFCharacterSet *)*(id *)(v4 + 16);
      result = CFCharacterSetCreateMutableCopy(0, v17);
      v18 = result;
      if ((v16 & 1) != 0)
      {
        if (!result)
          goto LABEL_37;
      }
      else if (!result)
      {
        goto LABEL_38;
      }

      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = v18;
      *(_BYTE *)(v26 + 24) = 1;
      swift_release();
      v4 = v26;
      v7 = v33;
    }
    v27 = *(__CFCharacterSet **)(v4 + 16);
    if ((*(_BYTE *)(v4 + 24) & 1) != 0)
    {
      v34.location = 0;
      v34.length = 1;
      CFCharacterSetAddCharactersInRange(v27, v34);
      goto LABEL_7;
    }
    v28 = v27;
    result = CFCharacterSetCreateMutableCopy(0, v28);
    if (!result)
      goto LABEL_33;
    v29 = result;
    v30 = result;
    v35.location = 0;
    v35.length = 1;
    CFCharacterSetAddCharactersInRange(v30, v35);

    v31 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v29;
    *(_BYTE *)(v4 + 24) = 1;

LABEL_6:
    v7 = v33;
LABEL_7:
    if (v7 == ++v8)
      goto LABEL_29;
  }
  v12 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCharacters_length_, v5, Item);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

  String.init<A>(_:)();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v13 = *(_BYTE *)(v4 + 24);
    v14 = (const __CFCharacterSet *)*(id *)(v4 + 16);
    result = CFCharacterSetCreateMutableCopy(0, v14);
    v15 = result;
    if ((v13 & 1) != 0)
    {
      if (!result)
        goto LABEL_34;
    }
    else if (!result)
    {
      goto LABEL_35;
    }

    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v15;
    *(_BYTE *)(v19 + 24) = 1;
    swift_release();
    v4 = v19;
  }
  v20 = *(void **)(v4 + 16);
  if ((*(_BYTE *)(v4 + 24) & 1) != 0)
  {
    v9 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    v10 = v20;
    CFCharacterSetAddCharactersInString(v10, v9);
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  v21 = v20;
  result = CFCharacterSetCreateMutableCopy(0, v21);
  if (result)
  {
    v22 = result;
    v23 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    v24 = v22;
    CFCharacterSetAddCharactersInString(v24, v23);

    swift_unknownObjectRelease();
    v25 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v22;
    *(_BYTE *)(v4 + 24) = 1;
    swift_bridgeObjectRelease();

    goto LABEL_6;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void closure #1 in _LocaleICU.timeZone.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18[4];

  v4 = *(_QWORD *)(a1 + 392);
  v5 = *(_QWORD *)(a1 + 400);
  if (v4 != 1)
  {
    *a2 = v4;
    a2[1] = v5;
    goto LABEL_12;
  }
  v7 = (_QWORD *)(a1 + 392);
  v8 = specialized static Locale.keywordValue(identifier:key:)();
  if (!v9)
  {
    *v7 = 0;
    v7[1] = 0;
    goto LABEL_11;
  }
  v10 = v9;
  v16 = v7;
  v17 = v8;
  if (one-time initialization token for cache != -1)
    swift_once();
  v18[3] = (uint64_t)&v16;
  v11 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in TimeZoneCache.fixed(_:)(v17, v10, v18);
  if (!v2)
  {
    os_unfair_lock_unlock(v11);
    swift_release_n();
    v12 = v18[0];
    v13 = v18[1];
    swift_bridgeObjectRelease();
    if (v12)
    {
      v14 = *(_QWORD *)(a1 + 392);
      swift_unknownObjectRetain();
      outlined consume of TimeZone??(v14);
      *(_QWORD *)(a1 + 392) = v12;
      *(_QWORD *)(a1 + 400) = v13;
      *a2 = v12;
      a2[1] = v13;
LABEL_12:
      outlined copy of TimeZone??(v4);
      return;
    }
    outlined consume of TimeZone??(*(_QWORD *)(a1 + 392));
    v15 = v16;
    *v16 = 0;
    v15[1] = 0;
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_12;
  }
  os_unfair_lock_unlock(v11);
  __break(1u);
}

uint64_t closure #1 in _LocaleICU.collationIdentifierDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  char v4;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;

  v9 = *(_QWORD *)(a1 + 512);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
    if ((v11 & 1) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
      v14 = *v12;
      v13 = v12[1];
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v16 = swift_retain();
  v54._countAndFlagsBits = a2;
  v54._object = a3;
  v52 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, v54);
  v13 = v17;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 512) = 0x8000000000000000;
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
  v21 = *(_QWORD *)(v53 + 16);
  v22 = (v19 & 1) == 0;
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }
  else
  {
    v4 = v19;
    if (*(_QWORD *)(v53 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      v24 = v53;
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
      if ((v4 & 1) != (v26 & 1))
        goto LABEL_52;
      v20 = v25;
      if ((v4 & 1) == 0)
        goto LABEL_47;
LABEL_12:
      v27 = (uint64_t *)(*(_QWORD *)(v24 + 56) + 16 * v20);
      swift_bridgeObjectRelease();
      v14 = v52;
      *v27 = v52;
      v27[1] = v13;
LABEL_48:
      *(_QWORD *)(a1 + 512) = v24;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v24 = v53;
      if ((v19 & 1) != 0)
        goto LABEL_12;
LABEL_47:
      v47 = a2;
      v14 = v52;
      specialized _NativeDictionary._insert(at:key:value:)(v20, v47, a3, v52, v13, v24);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  v48 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  v28 = static _DictionaryStorage.copy(original:)();
  v24 = v28;
  if (!*(_QWORD *)(v53 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    v20 = v48;
    if ((v4 & 1) != 0)
      goto LABEL_12;
    goto LABEL_47;
  }
  v29 = (void *)(v28 + 64);
  v30 = (unint64_t)((1 << *(_BYTE *)(v24 + 32)) + 63) >> 6;
  if (v24 != v53 || (unint64_t)v29 >= v53 + 64 + 8 * v30)
    memmove(v29, (const void *)(v53 + 64), 8 * v30);
  v49 = v53 + 64;
  v31 = 0;
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v53 + 16);
  v32 = 1 << *(_BYTE *)(v53 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & *(_QWORD *)(v53 + 64);
  v50 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v51 = v31;
      v36 = v35 | (v31 << 6);
      goto LABEL_22;
    }
    v43 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v43 >= v50)
      goto LABEL_46;
    v44 = *(_QWORD *)(v49 + 8 * v43);
    v45 = v31 + 1;
    if (!v44)
    {
      v45 = v31 + 2;
      if (v31 + 2 >= v50)
        goto LABEL_46;
      v44 = *(_QWORD *)(v49 + 8 * v45);
      if (!v44)
      {
        v45 = v31 + 3;
        if (v31 + 3 >= v50)
          goto LABEL_46;
        v44 = *(_QWORD *)(v49 + 8 * v45);
        if (!v44)
        {
          v45 = v31 + 4;
          if (v31 + 4 >= v50)
            goto LABEL_46;
          v44 = *(_QWORD *)(v49 + 8 * v45);
          if (!v44)
          {
            v45 = v31 + 5;
            if (v31 + 5 >= v50)
              goto LABEL_46;
            v44 = *(_QWORD *)(v49 + 8 * v45);
            if (!v44)
            {
              v45 = v31 + 6;
              if (v31 + 6 >= v50)
                goto LABEL_46;
              v44 = *(_QWORD *)(v49 + 8 * v45);
              if (!v44)
              {
                v45 = v31 + 7;
                if (v31 + 7 >= v50)
                  goto LABEL_46;
                v44 = *(_QWORD *)(v49 + 8 * v45);
                if (!v44)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_45:
    v34 = (v44 - 1) & v44;
    v51 = v45;
    v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_22:
    v37 = 16 * v36;
    v38 = (uint64_t *)(*(_QWORD *)(v53 + 48) + v37);
    v39 = *v38;
    v40 = v38[1];
    v41 = (_QWORD *)(*(_QWORD *)(v24 + 48) + v37);
    v42 = *(_OWORD *)(*(_QWORD *)(v53 + 56) + v37);
    *v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(*(_QWORD *)(v24 + 56) + v37) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = v51;
  }
  v46 = v31 + 8;
  if (v31 + 8 >= v50)
    goto LABEL_46;
  v44 = *(_QWORD *)(v49 + 8 * v46);
  if (v44)
  {
    v45 = v31 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    v45 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v45 >= v50)
      goto LABEL_46;
    v44 = *(_QWORD *)(v49 + 8 * v45);
    ++v46;
    if (v44)
      goto LABEL_45;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _LocaleICU.collation.getter@<X0>(_QWORD *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  void *v13;
  uint64_t v14;
  __int128 v15;

  v4 = a1[13];
  v3 = a1[14];
  v5 = a1[15];
  v6 = (void *)a1[16];
  if (v3)
  {
    a2->_countAndFlagsBits = v4;
    a2->_object = (void *)v3;
    a2[1]._countAndFlagsBits = v5;
    a2[1]._object = v6;
  }
  else
  {
    v8 = specialized static Locale.keywordValue(identifier:key:)();
    if (v9)
    {
      v10 = v8;
      v11 = v9;
      v12 = String.lowercased()();
      a1[13] = v10;
      a1[14] = v11;
      *(Swift::String *)(a1 + 15) = v12;
      a2->_countAndFlagsBits = v10;
      a2->_object = v11;
      a2[1] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v14 = static Locale.Collation.standard;
      v13 = (void *)unk_1EDC464D0;
      v15 = xmmword_1EDC464D8;
      a1[13] = static Locale.Collation.standard;
      a1[14] = v13;
      *(_OWORD *)(a1 + 15) = v15;
      a2->_countAndFlagsBits = v14;
      a2->_object = v13;
      a2[1] = (Swift::String)v15;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }
  }
  return outlined copy of Locale.LanguageCode?(v4, v3);
}

uint64_t closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)@<X0>(UChar *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t Name;
  uint64_t result;
  uint64_t v7;

  if (!a1)
    __break(1u);
  v4 = String.utf8CString.getter();
  u_charsToUChars((const char *)(v4 + 32), a1, 3);
  swift_release();
  a1[3] = 0;
  String.utf8CString.getter();
  Name = ucurr_getName();
  result = swift_release();
  if (Name)
  {
    result = specialized String.init(_utf16:)(Name, 0);
    *a2 = result;
    if (v7)
      a2[1] = v7;
    else
      a2[1] = 0;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t closure #1 in _LocaleICU.currencySymbolDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char v4;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;

  v9 = *(_QWORD *)(a1 + 520);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v11 & 1) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
      v14 = *v12;
      v13 = v12[1];
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v16 = swift_retain();
  v52 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  v13 = v17;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53 = *(_QWORD *)(a1 + 520);
  *(_QWORD *)(a1 + 520) = 0x8000000000000000;
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v21 = *(_QWORD *)(v53 + 16);
  v22 = (v19 & 1) == 0;
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }
  else
  {
    v4 = v19;
    if (*(_QWORD *)(v53 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      v24 = v53;
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v26 & 1))
        goto LABEL_52;
      v20 = v25;
      if ((v4 & 1) == 0)
        goto LABEL_47;
LABEL_12:
      v27 = (uint64_t *)(*(_QWORD *)(v24 + 56) + 16 * v20);
      swift_bridgeObjectRelease();
      v14 = v52;
      *v27 = v52;
      v27[1] = v13;
LABEL_48:
      *(_QWORD *)(a1 + 520) = v24;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v24 = v53;
      if ((v19 & 1) != 0)
        goto LABEL_12;
LABEL_47:
      v47 = a2;
      v14 = v52;
      specialized _NativeDictionary._insert(at:key:value:)(v20, v47, a3, v52, v13, v24);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  v48 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  v28 = static _DictionaryStorage.copy(original:)();
  v24 = v28;
  if (!*(_QWORD *)(v53 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    v20 = v48;
    if ((v4 & 1) != 0)
      goto LABEL_12;
    goto LABEL_47;
  }
  v29 = (void *)(v28 + 64);
  v30 = (unint64_t)((1 << *(_BYTE *)(v24 + 32)) + 63) >> 6;
  if (v24 != v53 || (unint64_t)v29 >= v53 + 64 + 8 * v30)
    memmove(v29, (const void *)(v53 + 64), 8 * v30);
  v49 = v53 + 64;
  v31 = 0;
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v53 + 16);
  v32 = 1 << *(_BYTE *)(v53 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & *(_QWORD *)(v53 + 64);
  v50 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v51 = v31;
      v36 = v35 | (v31 << 6);
      goto LABEL_22;
    }
    v43 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v43 >= v50)
      goto LABEL_46;
    v44 = *(_QWORD *)(v49 + 8 * v43);
    v45 = v31 + 1;
    if (!v44)
    {
      v45 = v31 + 2;
      if (v31 + 2 >= v50)
        goto LABEL_46;
      v44 = *(_QWORD *)(v49 + 8 * v45);
      if (!v44)
      {
        v45 = v31 + 3;
        if (v31 + 3 >= v50)
          goto LABEL_46;
        v44 = *(_QWORD *)(v49 + 8 * v45);
        if (!v44)
        {
          v45 = v31 + 4;
          if (v31 + 4 >= v50)
            goto LABEL_46;
          v44 = *(_QWORD *)(v49 + 8 * v45);
          if (!v44)
          {
            v45 = v31 + 5;
            if (v31 + 5 >= v50)
              goto LABEL_46;
            v44 = *(_QWORD *)(v49 + 8 * v45);
            if (!v44)
            {
              v45 = v31 + 6;
              if (v31 + 6 >= v50)
                goto LABEL_46;
              v44 = *(_QWORD *)(v49 + 8 * v45);
              if (!v44)
              {
                v45 = v31 + 7;
                if (v31 + 7 >= v50)
                  goto LABEL_46;
                v44 = *(_QWORD *)(v49 + 8 * v45);
                if (!v44)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_45:
    v34 = (v44 - 1) & v44;
    v51 = v45;
    v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_22:
    v37 = 16 * v36;
    v38 = (uint64_t *)(*(_QWORD *)(v53 + 48) + v37);
    v39 = *v38;
    v40 = v38[1];
    v41 = (_QWORD *)(*(_QWORD *)(v24 + 48) + v37);
    v42 = *(_OWORD *)(*(_QWORD *)(v53 + 56) + v37);
    *v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(*(_QWORD *)(v24 + 56) + v37) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = v51;
  }
  v46 = v31 + 8;
  if (v31 + 8 >= v50)
    goto LABEL_46;
  v44 = *(_QWORD *)(v49 + 8 * v46);
  if (v44)
  {
    v45 = v31 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    v45 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v45 >= v50)
      goto LABEL_46;
    v44 = *(_QWORD *)(v49 + 8 * v45);
    ++v46;
    if (v44)
      goto LABEL_45;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _LocaleICU.currencyCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char v4;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;

  v9 = *(_QWORD *)(a1 + 528);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v11 & 1) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
      v14 = *v12;
      v13 = v12[1];
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v16 = swift_retain();
  v52 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  v13 = v17;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53 = *(_QWORD *)(a1 + 528);
  *(_QWORD *)(a1 + 528) = 0x8000000000000000;
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v21 = *(_QWORD *)(v53 + 16);
  v22 = (v19 & 1) == 0;
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }
  else
  {
    v4 = v19;
    if (*(_QWORD *)(v53 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      v24 = v53;
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v26 & 1))
        goto LABEL_52;
      v20 = v25;
      if ((v4 & 1) == 0)
        goto LABEL_47;
LABEL_12:
      v27 = (uint64_t *)(*(_QWORD *)(v24 + 56) + 16 * v20);
      swift_bridgeObjectRelease();
      v14 = v52;
      *v27 = v52;
      v27[1] = v13;
LABEL_48:
      *(_QWORD *)(a1 + 528) = v24;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v24 = v53;
      if ((v19 & 1) != 0)
        goto LABEL_12;
LABEL_47:
      v47 = a2;
      v14 = v52;
      specialized _NativeDictionary._insert(at:key:value:)(v20, v47, a3, v52, v13, v24);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  v48 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  v28 = static _DictionaryStorage.copy(original:)();
  v24 = v28;
  if (!*(_QWORD *)(v53 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    v20 = v48;
    if ((v4 & 1) != 0)
      goto LABEL_12;
    goto LABEL_47;
  }
  v29 = (void *)(v28 + 64);
  v30 = (unint64_t)((1 << *(_BYTE *)(v24 + 32)) + 63) >> 6;
  if (v24 != v53 || (unint64_t)v29 >= v53 + 64 + 8 * v30)
    memmove(v29, (const void *)(v53 + 64), 8 * v30);
  v49 = v53 + 64;
  v31 = 0;
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v53 + 16);
  v32 = 1 << *(_BYTE *)(v53 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & *(_QWORD *)(v53 + 64);
  v50 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v51 = v31;
      v36 = v35 | (v31 << 6);
      goto LABEL_22;
    }
    v43 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v43 >= v50)
      goto LABEL_46;
    v44 = *(_QWORD *)(v49 + 8 * v43);
    v45 = v31 + 1;
    if (!v44)
    {
      v45 = v31 + 2;
      if (v31 + 2 >= v50)
        goto LABEL_46;
      v44 = *(_QWORD *)(v49 + 8 * v45);
      if (!v44)
      {
        v45 = v31 + 3;
        if (v31 + 3 >= v50)
          goto LABEL_46;
        v44 = *(_QWORD *)(v49 + 8 * v45);
        if (!v44)
        {
          v45 = v31 + 4;
          if (v31 + 4 >= v50)
            goto LABEL_46;
          v44 = *(_QWORD *)(v49 + 8 * v45);
          if (!v44)
          {
            v45 = v31 + 5;
            if (v31 + 5 >= v50)
              goto LABEL_46;
            v44 = *(_QWORD *)(v49 + 8 * v45);
            if (!v44)
            {
              v45 = v31 + 6;
              if (v31 + 6 >= v50)
                goto LABEL_46;
              v44 = *(_QWORD *)(v49 + 8 * v45);
              if (!v44)
              {
                v45 = v31 + 7;
                if (v31 + 7 >= v50)
                  goto LABEL_46;
                v44 = *(_QWORD *)(v49 + 8 * v45);
                if (!v44)
                  break;
              }
            }
          }
        }
      }
    }
LABEL_45:
    v34 = (v44 - 1) & v44;
    v51 = v45;
    v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_22:
    v37 = 16 * v36;
    v38 = (uint64_t *)(*(_QWORD *)(v53 + 48) + v37);
    v39 = *v38;
    v40 = v38[1];
    v41 = (_QWORD *)(*(_QWORD *)(v24 + 48) + v37);
    v42 = *(_OWORD *)(*(_QWORD *)(v53 + 56) + v37);
    *v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(*(_QWORD *)(v24 + 56) + v37) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = v51;
  }
  v46 = v31 + 8;
  if (v31 + 8 >= v50)
    goto LABEL_46;
  v44 = *(_QWORD *)(v49 + 8 * v46);
  if (v44)
  {
    v45 = v31 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    v45 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v45 >= v50)
      goto LABEL_46;
    v44 = *(_QWORD *)(v49 + 8 * v45);
    ++v46;
    if (v44)
      goto LABEL_45;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _LocaleICU.currency.getter@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  uint64_t v15;

  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144);
  v7 = a1 + 136;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(void **)(v7 + 24);
  if (v6 == 1)
  {
    v15 = v5;
    swift_retain();
    v10 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257, 0);
    v12 = v11;
    swift_release();
    if (v12)
    {
      v13 = String.lowercased()();
      *(_QWORD *)(a1 + 136) = v10;
      *(_QWORD *)(a1 + 144) = v12;
      *(Swift::String *)(a1 + 152) = v13;
      a2->_countAndFlagsBits = v10;
      a2->_object = v12;
      a2[1] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *a2 = 0u;
      a2[1] = 0u;
    }
    v5 = v15;
  }
  else
  {
    a2->_countAndFlagsBits = v5;
    a2->_object = (void *)v6;
    a2[1]._countAndFlagsBits = v8;
    a2[1]._object = v9;
  }
  return outlined copy of Locale.Subdivision??(v5, v6);
}

uint64_t _LocaleICU.delimiterString(_:)()
{
  uint64_t v0;
  int Delimiter;
  uint64_t v2;
  _DWORD v5[70];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5[69] = 0;
  String.utf8CString.getter();
  ulocdata_open();
  v0 = swift_release();
  MEMORY[0x1E0C80A78](v0);
  v5[68] = 0;
  Delimiter = ulocdata_getDelimiter();
  v2 = 0;
  if (Delimiter <= 130 && Delimiter > 0)
    v2 = specialized String.init(_utf16:)((uint64_t)v5, Delimiter);
  ulocdata_close();
  return v2;
}

uint64_t closure #1 in _LocaleICU.firstDayOfWeek.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v4;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int Attribute;
  unsigned int v13;
  char v14;
  unsigned __int8 v15;
  int v16[12];
  uint64_t v17;
  _BYTE v18[144];
  char v19[48];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(result + 208);
  if (v4 != 7)
    goto LABEL_25;
  v6 = result;
  v7._countAndFlagsBits = specialized static Locale.keywordValue(identifier:key:)();
  if (!v7._object || (result = Locale.Weekday.init(rawValue:)(v7, v19), LOBYTE(v4) = v19[0], v19[0] == 7))
  {
    outlined init with take of LocalePreferences?(a2 + 40, (uint64_t)v18);
    outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v19);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v19) != 1)
    {
      if (v20)
      {
        _LocaleICU._lockedCalendarIdentifier(_:)(v6, &v15);
        v8 = v15;
        outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v16);
        v9 = v17;
        if (v17)
        {
          if (*(_QWORD *)(v17 + 16))
          {
            result = specialized __RawDictionaryStorage.find<A>(_:)(v8);
            if ((v10 & 1) != 0)
            {
              v11 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * result);
              if (v11 < (uint64_t)0xFFFFFFFF80000000)
              {
LABEL_27:
                __break(1u);
                goto LABEL_28;
              }
              if (v11 > 0x7FFFFFFF)
              {
LABEL_28:
                __break(1u);
                goto LABEL_29;
              }
              if ((int)v11 > 0 && v11 < 8)
              {
                if (one-time initialization token for weekdays == -1)
                {
LABEL_22:
                  if ((unint64_t)v11 > *((_QWORD *)static Locale.Weekday.weekdays + 2))
                    __break(1u);
                  LOBYTE(v4) = *((_BYTE *)static Locale.Weekday.weekdays + v11 + 31);
                  goto LABEL_24;
                }
LABEL_29:
                result = swift_once();
                goto LABEL_22;
              }
            }
          }
        }
      }
    }
    v16[0] = 0;
    String.utf8CString.getter();
    LODWORD(v11) = ucal_open();
    swift_release();
    if (v16[0] > 0 || (Attribute = ucal_getAttribute(), Attribute - 8 < 0xFFFFFFF9))
    {
      *(_BYTE *)(v6 + 208) = 0;
      *a3 = 0;
      return ucal_close();
    }
    v13 = Attribute;
    if (one-time initialization token for weekdays != -1)
      swift_once();
    if (*((_QWORD *)static Locale.Weekday.weekdays + 2) >= (unint64_t)v13)
    {
      v14 = *((_BYTE *)static Locale.Weekday.weekdays + v13 + 31);
      *(_BYTE *)(v6 + 208) = v14;
      *a3 = v14;
      return ucal_close();
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_24:
  *(_BYTE *)(v6 + 208) = v4;
LABEL_25:
  *a3 = v4;
  return result;
}

uint64_t _LocaleICU.weekendRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  char v4;
  char v6;

  v3 = *(os_unfair_lock_s **)(v1 + 184);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  closure #1 in _LocaleICU.firstDayOfWeek.getter((uint64_t)&v3[4], v1, &v6);
  os_unfair_lock_unlock(v3 + 140);
  swift_release();
  v4 = v6;
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  closure #1 in _LocaleICU.weekendRange.getter((uint64_t)&v3[4], v4, a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

uint64_t closure #1 in _LocaleICU.weekendRange.getter@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  double v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t inited;
  void *v8;
  uint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  char v25;
  char v26;
  int v27;
  int DayOfWeekType;
  char v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  char v36;
  unsigned int v37;
  int WeekendTransition;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v44;
  uint64_t v45;

  v5 = v3;
  if ((*(_BYTE *)(result + 265) & 1) == 0)
  {
    v29 = *(_BYTE *)(result + 264);
    v30 = *(_OWORD *)(result + 232);
    *(_OWORD *)a3 = *(_OWORD *)(result + 216);
    *(_OWORD *)(a3 + 16) = v30;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 248);
    *(_BYTE *)(a3 + 48) = v29 & 1;
    return result;
  }
  LOBYTE(v6) = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = 0;
  v45 = inited + 32;
  *(_QWORD *)(inited + 40) = 0;
  *(_QWORD *)(inited + 48) = 0;
  *(_DWORD *)(inited + 56) = 0;
  if (one-time initialization token for weekdays != -1)
    goto LABEL_122;
LABEL_3:
  v8 = static Locale.Weekday.weekdays;
  swift_bridgeObjectRetain();
  v9 = specialized Collection<>.firstIndex(of:)(v6, (uint64_t)v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    __break(1u);
LABEL_129:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_124;
  }
  if ((v12 & 0x8000000000000000) != 0 || HIDWORD(v12))
    goto LABEL_129;
  v13 = v12 % 7;
  *(_DWORD *)(inited + 32) = v12;
  *(_DWORD *)(inited + 36) = v12 % 7 + 1;
  v14 = v12 % 7 + 2;
  if (v13 == 6)
    v14 = 1;
  v15 = v14 % 7;
  *(_DWORD *)(inited + 40) = v14;
  *(_DWORD *)(inited + 44) = v14 % 7 + 1;
  v16 = v14 % 7 + 2;
  if (v15 == 6)
    v16 = 1;
  v17 = v16 % 7;
  *(_DWORD *)(inited + 48) = v16;
  *(_DWORD *)(inited + 52) = v16 % 7 + 1;
  v18 = v16 % 7 + 2;
  if (v17 == 6)
    v18 = 1;
  *(_DWORD *)(inited + 56) = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UCalendarWeekdayType>);
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_182065B90;
  *(_QWORD *)(v6 + 32) = 0;
  v44 = (_DWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 56) = 0;
  v19 = String.utf8CString.getter();
  ucal_open();
  swift_release();
  if ((*(_DWORD *)(inited + 32) & 0x80000000) != 0)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    if (v22 != 5)
    {
      if (*(_DWORD *)(v6 + 52) == 1)
      {
LABEL_83:
        v32 = 5;
        goto LABEL_87;
      }
      if (v22 != 6)
      {
        if (*(_DWORD *)(v6 + 56) != 1)
          goto LABEL_98;
LABEL_86:
        v32 = 6;
LABEL_87:
        v24 = *(_DWORD *)(v45 + 4 * v32);
        v35 = 1;
        if ((v21 & 1) == 0)
        {
          v39 = (int64x2_t)*(unint64_t *)&v20;
          v21 = 1;
          goto LABEL_118;
        }
        v36 = 0;
        if ((_DWORD)inited == 1)
          goto LABEL_89;
LABEL_100:
        if (v5 >= 7)
        {
LABEL_101:
          if (*(_DWORD *)(v6 + 56) == 1)
          {
            v42 = 6;
            goto LABEL_115;
          }
          if (*(_DWORD *)(v6 + 52) == 1)
          {
            v42 = 5;
            goto LABEL_115;
          }
          if (*(_DWORD *)(v6 + 48) == 1)
          {
LABEL_106:
            v42 = 4;
            goto LABEL_115;
          }
          if (*(_DWORD *)(v6 + 44) == 1)
          {
LABEL_108:
            v42 = 3;
            goto LABEL_115;
          }
          if (*(_DWORD *)(v6 + 40) == 1)
          {
LABEL_110:
            v42 = 2;
            goto LABEL_115;
          }
          if (*(_DWORD *)(v6 + 36) == 1)
          {
LABEL_112:
            v42 = 1;
            goto LABEL_115;
          }
          if (*v44 == 1)
          {
LABEL_114:
            v42 = 0;
LABEL_115:
            if ((v36 & 1) != 0)
              goto LABEL_116;
            v19 = *(_DWORD *)(v45 + 4 * v42);
            v39 = vdupq_n_s64(1uLL);
            *(double *)v39.i64 = v20;
            v21 = v35;
LABEL_118:
            *(double *)a3 = v4;
            *(_QWORD *)(a3 + 8) = v21;
            *(int64x2_t *)(a3 + 16) = v39;
            *(_QWORD *)(a3 + 32) = v24;
            *(_QWORD *)(a3 + 40) = v19;
            *(_BYTE *)(a3 + 48) = 0;
LABEL_119:
            ucal_close();
            swift_setDeallocating();
            return swift_setDeallocating();
          }
LABEL_116:
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
          *(_BYTE *)(a3 + 48) = 1;
          goto LABEL_119;
        }
LABEL_124:
        __break(1u);
      }
    }
    goto LABEL_125;
  }
  v23 = 0;
  v24 = 0;
  v19 = 0;
  v25 = 1;
  inited = v45;
  v26 = 1;
  while (1)
  {
    DayOfWeekType = ucal_getDayOfWeekType();
    v5 = *(_QWORD *)(v6 + 16);
    if (v23 >= v5)
      goto LABEL_80;
    *(_QWORD *)&v20 = v6 + 4 * v23;
    *(_DWORD *)(*(_QWORD *)&v20 + 32) = DayOfWeekType;
    if (DayOfWeekType == 3)
    {
      v26 = 0;
      v19 = *(_DWORD *)inited;
      goto LABEL_16;
    }
    if (DayOfWeekType == 2)
      break;
LABEL_16:
    if (v23 == 6)
    {
      inited = *v44;
      if ((_DWORD)inited == 1)
      {
        v31 = 1;
        if ((v25 & 1) != 0)
          goto LABEL_34;
        goto LABEL_49;
      }
      if ((_DWORD)inited == 3 || (_DWORD)inited == 2)
      {
LABEL_27:
        v31 = 0;
        if ((v25 & 1) == 0)
          goto LABEL_49;
LABEL_34:
        v21 = 1;
        v4 = 0.0;
        if ((v26 & 1) != 0)
        {
          v20 = 0.0;
          if ((v31 & 1) == 0)
            goto LABEL_36;
LABEL_55:
          if (v5 >= 7)
          {
            if (*(_DWORD *)(v6 + 56) != 1)
            {
              v32 = 0;
              goto LABEL_87;
            }
            if (*(_DWORD *)(v6 + 52) != 1)
              goto LABEL_86;
            if (*(_DWORD *)(v6 + 48) != 1)
              goto LABEL_83;
            if (*(_DWORD *)(v6 + 44) == 1)
            {
              if (*(_DWORD *)(v6 + 40) == 1)
              {
                if (*(_DWORD *)(v6 + 36) == 1)
                {
                  if (*v44 == 1)
                  {
LABEL_98:
                    if (!v21)
                      goto LABEL_116;
                    v24 = 0;
                    v35 = 1;
                    v36 = 1;
                    if ((_DWORD)inited != 1)
                      goto LABEL_100;
                    goto LABEL_89;
                  }
LABEL_41:
                  v32 = 1;
                  goto LABEL_87;
                }
LABEL_47:
                v32 = 2;
                goto LABEL_87;
              }
LABEL_75:
              v32 = 3;
              goto LABEL_87;
            }
LABEL_78:
            v32 = 4;
            goto LABEL_87;
          }
LABEL_127:
          __break(1u);
          __break(1u);
        }
        v33 = inited;
LABEL_53:
        v37 = v21;
        WeekendTransition = ucal_getWeekendTransition();
        v21 = 0;
        if (!v37)
        {
          v39.i64[1] = 0;
          *(double *)v39.i64 = (double)WeekendTransition / 1000.0;
          goto LABEL_118;
        }
        v20 = (double)WeekendTransition / 1000.0;
        LODWORD(inited) = v33;
        if ((v31 & 1) != 0)
          goto LABEL_55;
LABEL_36:
        if (v5 <= 1)
          v22 = 1;
        else
          v22 = v5;
        if (v5 >= 2)
        {
          if (*(_DWORD *)(v6 + 36) == 1)
            goto LABEL_41;
          if (v22 != 2)
          {
            if (*(_DWORD *)(v6 + 40) == 1)
              goto LABEL_47;
            if (v22 != 3)
            {
              if (*(_DWORD *)(v6 + 44) == 1)
                goto LABEL_75;
              if (v22 != 4)
              {
                if (*(_DWORD *)(v6 + 48) != 1)
                  goto LABEL_81;
                goto LABEL_78;
              }
            }
          }
        }
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
        goto LABEL_127;
      }
      if (v5 == 1)
        goto LABEL_72;
LABEL_68:
      v40 = 9;
      while (1)
      {
        v41 = v40 - 7;
        if (__OFADD__(v40 - 8, 1))
          break;
        if ((*(_DWORD *)(v6 + 4 * v40) - 1) < 3)
          goto LABEL_27;
        ++v40;
        if (v41 == v5)
          goto LABEL_72;
      }
      __break(1u);
LABEL_122:
      swift_once();
      goto LABEL_3;
    }
LABEL_17:
    v27 = *(_DWORD *)(inited + 4);
    inited += 4;
    ++v23;
    if (v27 < 0)
      goto LABEL_79;
  }
  v24 = *(_DWORD *)inited;
  if (v23 != 6)
  {
    v25 = 0;
    goto LABEL_17;
  }
  inited = *v44;
  if ((_DWORD)inited == 1)
  {
    v31 = 1;
LABEL_49:
    v34 = ucal_getWeekendTransition();
    v35 = 0;
    v4 = (double)v34 / 1000.0;
    if ((v26 & 1) == 0)
    {
      v33 = inited;
      v21 = 0;
      goto LABEL_53;
    }
    v20 = 0.0;
    v36 = 0;
    if ((_DWORD)inited != 1)
      goto LABEL_100;
LABEL_89:
    if (v5 >= 7)
    {
      if (*(_DWORD *)(v6 + 56) != 1)
        goto LABEL_101;
      if (*(_DWORD *)(v6 + 36) != 1)
        goto LABEL_114;
      if (*(_DWORD *)(v6 + 40) != 1)
        goto LABEL_112;
      if (*(_DWORD *)(v6 + 44) != 1)
        goto LABEL_110;
      if (*(_DWORD *)(v6 + 48) != 1)
        goto LABEL_108;
      if (*(_DWORD *)(v6 + 52) != 1)
        goto LABEL_106;
      goto LABEL_116;
    }
    goto LABEL_126;
  }
  if ((_DWORD)inited == 2 || (_DWORD)inited == 3)
  {
    v31 = 0;
    goto LABEL_49;
  }
  if (v5 != 1)
  {
    v25 = 0;
    goto LABEL_68;
  }
LABEL_72:
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_BYTE *)(a3 + 48) = 1;
  ucal_close();
  swift_setDeallocating();
  return swift_setDeallocating();
}

uint64_t closure #1 in _LocaleICU.minimumDaysInFirstWeek.getter@<X0>(__int128 a1@<X1:X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _BYTE *v4;
  uint64_t Attribute;
  int v7;
  _BYTE v8[144];
  _BYTE v9[144];
  uint64_t v10;

  v2 = a1;
  v10 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 280) == 1)
  {
    v4 = (_BYTE *)(a1 + 280);
    outlined init with take of LocalePreferences?(*((_QWORD *)&a1 + 1) + 40, (uint64_t)v8);
    outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v9);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v9) == 1
      || (_LocaleICU._lockedCalendarIdentifier(_:)(v2, &v7),
          *(Swift::Int_optional *)&a1 = _LocaleICU.forceMinDaysInFirstWeek(_:)((Foundation::Calendar::Identifier)&v7),
          (BYTE8(a1) & 1) != 0))
    {
      v7 = 0;
      String.utf8CString.getter();
      ucal_open();
      swift_release();
      if (v7 <= 0)
        Attribute = (int)ucal_getAttribute();
      else
        Attribute = 1;
      *(_QWORD *)(v2 + 272) = Attribute;
      *v4 = 0;
      *a2 = Attribute;
      *(_QWORD *)&a1 = ucal_close();
    }
    else
    {
      *(_QWORD *)(v2 + 272) = a1;
      *v4 = 0;
      *a2 = a1;
    }
  }
  else
  {
    *a2 = *(_QWORD *)(a1 + 272);
  }
  return a1;
}

Swift::Int_optional __swiftcall _LocaleICU.forceMinDaysInFirstWeek(_:)(Foundation::Calendar::Identifier a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  Swift::Bool v6;
  Swift::Int v7;
  _BYTE v8[144];
  _BYTE v9[56];
  uint64_t v10;
  Swift::Int_optional result;

  v2 = *(unsigned __int8 *)a1;
  outlined init with take of LocalePreferences?(v1 + 40, (uint64_t)v8);
  outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v9);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v9) != 1
    && (v3 = v10) != 0
    && *(_QWORD *)(v10 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  result.value = v7;
  result.is_nil = v6;
  return result;
}

uint64_t _LocaleICU._lockedNumberingSystem(_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[22];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a1[21];
  v4 = a1[22];
  v6 = a1[23];
  v7 = a1[24];
  if (v4)
  {
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    a2[3] = v7;
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 16);
    v10 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain();
    Locale.Components.init(identifier:)(v9, v10, v16);
    v11 = v17;
    if (v17)
    {
      v13 = v18;
      v12 = v19;
      v14 = v16[21];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined release of Locale.Components(v16);
      a1[21] = v14;
      a1[22] = v11;
      a1[23] = v13;
      a1[24] = v12;
      *a2 = v14;
      a2[1] = v11;
      a2[2] = v13;
      a2[3] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      Locale.NumberingSystem.init(localeIdentifier:)(a2);
      outlined release of Locale.Components(v16);
    }
  }
  return outlined copy of Locale.LanguageCode?(v5, v4);
}

uint64_t closure #1 in _LocaleICU.numberingSystem.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17[22];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a1[21];
  v5 = a1[22];
  v7 = a1[23];
  v8 = a1[24];
  if (v5)
  {
    *a3 = v6;
    a3[1] = v5;
    a3[2] = v7;
    a3[3] = v8;
  }
  else
  {
    v21 = v3;
    v11 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    Locale.Components.init(identifier:)(v11, v10, v17);
    v12 = v18;
    if (v18)
    {
      v13 = v20;
      v16 = v19;
      v14 = v17[21];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined release of Locale.Components(v17);
      a1[21] = v14;
      a1[22] = v12;
      a1[23] = v16;
      a1[24] = v13;
      *a3 = v14;
      a3[1] = v12;
      a3[2] = v16;
      a3[3] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      Locale.NumberingSystem.init(localeIdentifier:)(a3);
      outlined release of Locale.Components(v17);
    }
  }
  return outlined copy of Locale.LanguageCode?(v6, v5);
}

void closure #1 in _LocaleICU.availableNumberingSystems.getter(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  os_unfair_lock_s *v44;
  uint64_t v45;
  uint64_t ObjectType;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  Swift::String v52;
  unint64_t countAndFlagsBits;
  void *object;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65[3];
  uint64_t v66;
  _OWORD v67[22];
  _OWORD v68[22];
  _OWORD __src[22];
  uint64_t __dst[47];

  v4 = a1;
  __dst[44] = *MEMORY[0x1E0C80C00];
  v5 = a1[25];
  if (v5)
  {
    *a3 = v5;
    swift_bridgeObjectRetain();
    return;
  }
  v64 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>);
  v7 = swift_allocObject();
  v59 = v7 + 32;
  if (one-time initialization token for latn != -1)
LABEL_36:
    swift_once();
  v8 = qword_1EDC464F0;
  v10 = *((_QWORD *)&xmmword_1EDC464F8 + 1);
  v9 = xmmword_1EDC464F8;
  *(_QWORD *)(v7 + 32) = static Locale.NumberingSystem.latn;
  *(_QWORD *)(v7 + 40) = v8;
  *(_OWORD *)(v7 + 48) = __PAIR128__(v10, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v56 = v4;
  v58 = a2;
  _LocaleICU._lockedNumberingSystem(_:)(v4, (uint64_t *)(v7 + 64));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Locale.NumberingSystem>);
  v11 = static _SetStorage.allocate(capacity:)();
  v12 = 0;
  v13 = 0;
  v62 = v11 + 56;
  do
  {
    v14 = v12;
    v15 = (uint64_t *)(v59 + 32 * v13);
    a2 = v15[1];
    v60 = *v15;
    v16 = v15[2];
    v17 = v15[3];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v11 + 32);
    v7 = v18 & ~v19;
    v20 = v7 >> 6;
    v21 = *(_QWORD *)(v62 + 8 * (v7 >> 6));
    v22 = 1 << v7;
    if (((1 << v7) & v21) != 0)
    {
      v4 = *(_QWORD **)(v11 + 48);
      v23 = &v4[4 * v7];
      v24 = v23[2] == v16 && v23[3] == v17;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
      v25 = ~v19;
      while (1)
      {
        v7 = (v7 + 1) & v25;
        v20 = v7 >> 6;
        v21 = *(_QWORD *)(v62 + 8 * (v7 >> 6));
        v22 = 1 << v7;
        if ((v21 & (1 << v7)) == 0)
          break;
        v26 = &v4[4 * v7];
        v27 = v26[2] == v16 && v26[3] == v17;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_5;
      }
    }
    *(_QWORD *)(v62 + 8 * v20) = v22 | v21;
    v28 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 32 * v7);
    *v28 = v60;
    v28[1] = a2;
    v28[2] = v16;
    v28[3] = v17;
    v29 = *(_QWORD *)(v11 + 16);
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (v30)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    *(_QWORD *)(v11 + 16) = v31;
LABEL_6:
    v12 = 1;
    v13 = 1;
  }
  while ((v14 & 1) == 0);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v66 = v11;
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_182065BC0;
  v33 = String.lowercased()();
  *(_QWORD *)(v32 + 32) = 0x746C7561666564;
  *(_QWORD *)(v32 + 40) = 0xE700000000000000;
  *(Swift::String *)(v32 + 48) = v33;
  v34 = (uint64_t *)(v32 + 56);
  v35 = String.lowercased()();
  *(_QWORD *)(v32 + 64) = 0x65766974616ELL;
  *(_QWORD *)(v32 + 72) = 0xE600000000000000;
  *(Swift::String *)(v32 + 80) = v35;
  v36 = String.lowercased()();
  *(_QWORD *)(v32 + 96) = 0x6F69746964617274;
  *(_QWORD *)(v32 + 104) = 0xEB000000006C616ELL;
  *(Swift::String *)(v32 + 112) = v36;
  v37 = String.lowercased()();
  v4 = 0;
  *(_QWORD *)(v32 + 128) = 0x65636E616E6966;
  *(_QWORD *)(v32 + 136) = 0xE700000000000000;
  *(Swift::String *)(v32 + 144) = v37;
  v63 = *(_QWORD *)(v58 + 16);
  v59 = v32;
  v61 = *(_QWORD *)(v58 + 24);
  while (1)
  {
    v39 = *(v34 - 1);
    v38 = *v34;
    v41 = *(v34 - 3);
    v40 = *(v34 - 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Locale.Components.init(identifier:)(v63, v61, v68);
    outlined consume of Locale.LanguageCode?(*((uint64_t *)&v68[10] + 1), *(uint64_t *)&v68[11]);
    *((_QWORD *)&v68[10] + 1) = v41;
    *(_QWORD *)&v68[11] = v40;
    *((_QWORD *)&v68[11] + 1) = v39;
    *(_QWORD *)&v68[12] = v38;
    __src[0] = v68[0];
    __src[1] = v68[1];
    __src[2] = v68[2];
    __src[3] = v68[3];
    __src[4] = v68[4];
    __src[5] = v68[5];
    LOBYTE(__src[6]) = v68[6];
    *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)((char *)&v68[6] + 8);
    *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)((char *)&v68[7] + 8);
    *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)((char *)&v68[8] + 8);
    *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)((char *)&v68[9] + 8);
    *((_QWORD *)&__src[10] + 1) = v41;
    *(_QWORD *)&__src[11] = v40;
    *((_QWORD *)&__src[11] + 1) = v39;
    *(_QWORD *)&__src[12] = v38;
    WORD4(__src[12]) = WORD4(v68[12]);
    __src[13] = v68[13];
    __src[14] = v68[14];
    __src[15] = v68[15];
    __src[16] = v68[16];
    __src[17] = v68[17];
    __src[18] = v68[18];
    __src[19] = v68[19];
    __src[20] = v68[20];
    __src[21] = v68[21];
    memcpy(__dst, __src, 0x160uLL);
    outlined retain of Locale.Components((uint64_t *)__src);
    if (one-time initialization token for cache != -1)
      swift_once();
    v42 = static LocaleCache.cache + 16;
    v43 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v43);
    closure #1 in LocaleCache.fixedComponents(_:)(v42, __dst, v67);
    v44 = v43;
    if (v64)
      break;
    os_unfair_lock_unlock(v43);
    swift_release_n();
    outlined release of Locale.Components((uint64_t *)__src);
    v45 = *((_QWORD *)&v67[0] + 1);
    a2 = *(_QWORD *)&v67[0];
    ObjectType = swift_getObjectType();
    v47 = *(void (**)(uint64_t, uint64_t))(v45 + 64);
    swift_unknownObjectRetain();
    v47(ObjectType, v45);
    swift_unknownObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v48 = unumsys_open();
    swift_release();
    if (v48)
    {
      v44 = (os_unfair_lock_s *)MEMORY[0x186DAA76C](v48);
      if (!v44)
      {
        __break(1u);
        break;
      }
      v49 = String.init(cString:)();
      v51 = v50;
      v52 = String.lowercased()();
      countAndFlagsBits = v52._countAndFlagsBits;
      object = v52._object;
    }
    else
    {
      v49 = static Locale.NumberingSystem.latn;
      v51 = qword_1EDC464F0;
      object = (void *)*((_QWORD *)&xmmword_1EDC464F8 + 1);
      countAndFlagsBits = xmmword_1EDC464F8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    unumsys_close();
    specialized Set._Variant.insert(_:)(v65, v49, v51, countAndFlagsBits, (unint64_t)object);
    swift_unknownObjectRelease();
    v7 = v65[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memcpy(v67, v68, sizeof(v67));
    outlined release of Locale.Components((uint64_t *)v67);
    if (v4 == (_QWORD *)3)
    {
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v55 = specialized _copyCollectionToContiguousArray<A>(_:)(v66);
      swift_bridgeObjectRelease();
      swift_retain();
      swift_bridgeObjectRelease();
      v56[25] = v55;
      *a3 = v55;
      return;
    }
    v4 = (_QWORD *)((char *)v4 + 1);
    v34 += 4;
    if ((unint64_t)v4 >= *(_QWORD *)(v59 + 16))
    {
      __break(1u);
      goto LABEL_35;
    }
  }
  os_unfair_lock_unlock(v44);
  __break(1u);
}

uint64_t protocol witness for _LocaleProtocol.init(components:) in conformance _LocaleICU(void *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  _LocaleICU.init(components:)(a1);
  return v2;
}

uint64_t protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.identifierDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.languageCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.languageCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.scriptCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.scriptCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.variantCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.variantCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencyCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.currencyCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbolDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.currencySymbolDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifierDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.collationIdentifierDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifier.getter in conformance _LocaleICU()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t countAndFlagsBits;
  Swift::String v4;

  v1 = *(_QWORD *)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  partial apply for closure #1 in _LocaleICU.collation.getter((_QWORD *)(v1 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  countAndFlagsBits = v4._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t protocol witness for _LocaleProtocol.groupingSeparator.getter in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.groupingSeparator.getter(&v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbol.getter in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.currencySymbol.getter(&v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.quotationBeginDelimiter.getter in conformance _LocaleICU()
{
  return _LocaleICU.delimiterString(_:)();
}

uint64_t protocol witness for _LocaleProtocol.quotationEndDelimiter.getter in conformance _LocaleICU()
{
  return _LocaleICU.delimiterString(_:)();
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationBeginDelimiter.getter in conformance _LocaleICU()
{
  return _LocaleICU.delimiterString(_:)();
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationEndDelimiter.getter in conformance _LocaleICU()
{
  return _LocaleICU.delimiterString(_:)();
}

uint64_t protocol witness for _LocaleProtocol.currency.getter in conformance _LocaleICU@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 184);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.currency.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.numberingSystem.getter in conformance _LocaleICU@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 184);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.numberingSystem.getter((_QWORD *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.availableNumberingSystems.getter in conformance _LocaleICU()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  partial apply for closure #1 in _LocaleICU.availableNumberingSystems.getter((_QWORD *)(v1 + 16), &v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.firstDayOfWeek.getter in conformance _LocaleICU@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 184);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  closure #1 in _LocaleICU.firstDayOfWeek.getterpartial apply((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.minimumDaysInFirstWeek.getter in conformance _LocaleICU()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 184);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.minimumDaysInFirstWeek.getter((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.collation.getter in conformance _LocaleICU@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 184);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.collation.getter((_QWORD *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.timeZone.getter in conformance _LocaleICU@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(v1 + 184);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.timeZone.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.subdivision.getter in conformance _LocaleICU@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 184);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.subdivision.getter((_QWORD *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));
  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.variant.getter in conformance _LocaleICU@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 184);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.variant.getter((_QWORD *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));
  return swift_release();
}

unint64_t protocol witness for _LocaleProtocol.forceMinDaysInFirstWeek(_:) in conformance _LocaleICU(Foundation::Calendar::Identifier a1)
{
  return (unint64_t)_LocaleICU.forceMinDaysInFirstWeek(_:)(a1);
}

uint64_t static Locale.windowsLocaleCode(fromIdentifier:)()
{
  unsigned int LCID;

  String.utf8CString.getter();
  LCID = uloc_getLCID();
  swift_release();
  return LCID;
}

uint64_t static Locale.identifier(_:from:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  __int128 v13;

  v5 = *a1;
  v6 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v7 = static LocaleCache.cache + 16;
  v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in LocaleCache.fixed(_:)(v7, a2, a3, &v13);
  os_unfair_lock_unlock(v8);
  swift_bridgeObjectRelease();
  swift_release_n();
  v9 = *((_QWORD *)&v13 + 1);
  ObjectType = swift_getObjectType();
  LOBYTE(v13) = v5;
  v11 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v9 + 416))(&v13, ObjectType, v9);
  swift_unknownObjectRelease();
  return v11;
}

uint64_t closure #1 in static Locale.identifierWithKeywordValue(_:key:value:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (result)
  {
    v9 = (char *)result;
    v10 = String.utf8CString.getter();
    strlcpy(v9, (const char *)(v10 + 32), 0x9DuLL);
    swift_release();
    String.utf8CString.getter();
    String.utf8CString.getter();
    v11 = uloc_setKeywordValue();
    swift_release();
    result = swift_release();
    if (v11 >= 1)
    {
      v9[v11] = 0;
      *a9 = String.init(cString:)();
      a9[1] = v12;
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

unint64_t specialized static _LocaleICU.State.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  int v246;
  char v247;
  char v248;
  char v249;
  int v250;
  char v251;
  char v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  uint64_t v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  __int128 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v350 = *(_QWORD *)(a1 + 32);
  v352 = *(_QWORD *)(a1 + 40);
  v354 = *(_QWORD *)(a1 + 48);
  v351 = *(_QWORD *)(a1 + 56);
  v349 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 80);
  v355 = *(_QWORD *)(a1 + 72);
  v353 = *(_QWORD *)(a1 + 88);
  v278 = *(unsigned __int8 *)(a1 + 96);
  v270 = *(_QWORD *)(a1 + 104);
  v276 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 128);
  v274 = *(_QWORD *)(a1 + 120);
  v264 = *(_QWORD *)(a1 + 136);
  v271 = *(_QWORD *)(a1 + 144);
  v268 = *(_QWORD *)(a1 + 152);
  v266 = *(_QWORD *)(a1 + 160);
  v256 = *(_QWORD *)(a1 + 168);
  v262 = *(_QWORD *)(a1 + 176);
  v259 = *(_QWORD *)(a1 + 184);
  v260 = *(_QWORD *)(a1 + 192);
  v258 = *(_QWORD *)(a1 + 200);
  v254 = *(unsigned __int8 *)(a1 + 208);
  v8 = *(_OWORD *)(a1 + 216);
  v9 = *(_OWORD *)(a1 + 232);
  v10 = *(_OWORD *)(a1 + 248);
  v248 = *(_BYTE *)(a1 + 264);
  v249 = *(_BYTE *)(a1 + 280);
  v252 = *(_BYTE *)(a1 + 265);
  v244 = *(_QWORD *)(a1 + 272);
  v246 = *(unsigned __int8 *)(a1 + 281);
  v230 = *(_QWORD *)(a1 + 288);
  v242 = *(_QWORD *)(a1 + 296);
  v239 = *(_QWORD *)(a1 + 304);
  v240 = *(_QWORD *)(a1 + 312);
  v232 = *(unsigned __int8 *)(a1 + 320);
  v221 = *(_QWORD *)(a1 + 328);
  v224 = *(_QWORD *)(a1 + 352);
  v225 = *(_QWORD *)(a1 + 344);
  v212 = *(_QWORD *)(a1 + 360);
  v219 = *(_QWORD *)(a1 + 368);
  v215 = *(_QWORD *)(a1 + 384);
  v216 = *(_QWORD *)(a1 + 392);
  v217 = *(_QWORD *)(a1 + 376);
  v11 = *(_QWORD *)(a1 + 408);
  v209 = *(_QWORD *)(a1 + 400);
  v12 = *(_QWORD *)(a1 + 424);
  v227 = *(_QWORD *)(a1 + 336);
  v228 = *(_QWORD *)(a1 + 416);
  v13 = *(_QWORD *)(a1 + 432);
  v201 = *(_QWORD *)(a1 + 440);
  v204 = *(_QWORD *)(a1 + 448);
  v198 = *(_QWORD *)(a1 + 456);
  v199 = *(_QWORD *)(a1 + 464);
  v15 = *(_QWORD *)(a1 + 472);
  v14 = *(_QWORD *)(a1 + 480);
  v17 = *(_QWORD *)(a1 + 488);
  v16 = *(_QWORD *)(a1 + 496);
  v19 = *(_QWORD *)(a1 + 504);
  v18 = *(_QWORD *)(a1 + 512);
  v20 = *(_QWORD *)(a1 + 520);
  v21 = *(_QWORD *)(a1 + 528);
  v22 = *(_QWORD *)(a1 + 536);
  v23 = *(_OWORD *)(a2 + 248);
  v250 = *(unsigned __int8 *)(a2 + 280);
  v24 = *(_QWORD *)(a2 + 8);
  v309 = *(_QWORD *)a2;
  v316 = *(_QWORD *)(a2 + 16);
  v302 = *(_QWORD *)(a2 + 24);
  v295 = *(_QWORD *)(a2 + 32);
  v324 = *(_QWORD *)(a2 + 40);
  v332 = *(_QWORD *)(a2 + 48);
  v340 = *(_QWORD *)(a2 + 56);
  v279 = *(_QWORD *)(a2 + 64);
  v284 = *(_QWORD *)(a2 + 72);
  v289 = *(_QWORD *)(a2 + 80);
  v281 = *(_QWORD *)(a2 + 88);
  v277 = *(unsigned __int8 *)(a2 + 96);
  v269 = *(_QWORD *)(a2 + 104);
  v275 = *(_QWORD *)(a2 + 112);
  v273 = *(_QWORD *)(a2 + 120);
  v272 = *(_QWORD *)(a2 + 128);
  v25 = *(_QWORD *)(a2 + 144);
  v263 = *(_QWORD *)(a2 + 136);
  v267 = *(_QWORD *)(a2 + 152);
  v265 = *(_QWORD *)(a2 + 160);
  v255 = *(_QWORD *)(a2 + 168);
  v26 = *(_QWORD *)(a2 + 184);
  v261 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a2 + 192);
  v257 = *(_QWORD *)(a2 + 200);
  v253 = *(unsigned __int8 *)(a2 + 208);
  v234 = *(_QWORD *)(a2 + 216);
  v235 = *(_QWORD *)(a2 + 224);
  v236 = *(_QWORD *)(a2 + 232);
  v237 = *(_QWORD *)(a2 + 240);
  v247 = *(_BYTE *)(a2 + 264);
  v251 = *(_BYTE *)(a2 + 265);
  v243 = *(_QWORD *)(a2 + 272);
  v245 = *(unsigned __int8 *)(a2 + 281);
  v229 = *(_QWORD *)(a2 + 288);
  v241 = *(_QWORD *)(a2 + 296);
  v238 = *(_QWORD *)(a2 + 304);
  v233 = *(_QWORD *)(a2 + 312);
  v231 = *(unsigned __int8 *)(a2 + 320);
  v220 = *(_QWORD *)(a2 + 328);
  v226 = *(_QWORD *)(a2 + 336);
  v223 = *(_QWORD *)(a2 + 344);
  v222 = *(_QWORD *)(a2 + 352);
  v211 = *(_QWORD *)(a2 + 360);
  v218 = *(_QWORD *)(a2 + 368);
  v214 = *(_QWORD *)(a2 + 376);
  v213 = *(_QWORD *)(a2 + 384);
  v210 = *(_QWORD *)(a2 + 392);
  v208 = *(_QWORD *)(a2 + 400);
  v203 = *(_QWORD *)(a2 + 408);
  v207 = *(_QWORD *)(a2 + 416);
  v205 = *(_QWORD *)(a2 + 424);
  v206 = *(_QWORD *)(a2 + 432);
  v200 = *(_QWORD *)(a2 + 440);
  v202 = *(_QWORD *)(a2 + 448);
  v196 = *(_QWORD *)(a2 + 456);
  v197 = *(_QWORD *)(a2 + 464);
  v191 = *(_QWORD *)(a2 + 472);
  v192 = *(_QWORD *)(a2 + 480);
  v193 = *(_QWORD *)(a2 + 488);
  v194 = *(_QWORD *)(a2 + 496);
  v28 = *(_QWORD *)(a2 + 512);
  v195 = *(_QWORD *)(a2 + 504);
  v29 = *(_QWORD *)(a2 + 520);
  v30 = *(_QWORD *)(a2 + 528);
  v31 = *(_QWORD *)(a2 + 536);
  v348 = v3;
  if (v3 == 1)
  {
    v186 = v11;
    v187 = *(_QWORD *)(a2 + 192);
    v189 = *(_QWORD *)(a2 + 144);
    v190 = v7;
    v32 = v353;
    v33 = v6;
    v34 = v349;
    v35 = v2;
    v36 = v4;
    v37 = v5;
    v38 = v350;
    v188 = *(_QWORD *)(a2 + 184);
    v39 = v352;
    v40 = v354;
    v41 = v351;
    v184 = *(_QWORD *)(a2 + 512);
    v185 = *(_QWORD *)(a2 + 520);
    v42 = *(_QWORD *)(a2 + 8);
    if (v24 == 1)
      goto LABEL_9;
LABEL_6:
    *(_QWORD *)&v368 = v35;
    *((_QWORD *)&v368 + 1) = v348;
    *(_QWORD *)&v369 = v36;
    *((_QWORD *)&v369 + 1) = v37;
    *(_QWORD *)&v370 = v38;
    *((_QWORD *)&v370 + 1) = v39;
    v371 = v40;
    v372 = v41;
    v373 = v34;
    v374 = v355;
    v375 = v33;
    v376 = v32;
    v377 = v309;
    v378 = v42;
    v379 = v316;
    v380 = v302;
    v381 = v295;
    v382 = v324;
    v383 = v332;
    v384 = v340;
    v385 = v279;
    v386 = v284;
    v387 = v289;
    v388 = v281;
    outlined consume of Locale.Language?(v309, v42, v316, v302, v295, v324, v332, v340, v279, v284, v289, v281, (void (*)(void))outlined copy of Locale.LanguageCode?);
    outlined release of (Locale.Language?, Locale.Language?)((uint64_t)&v368);
    return 0;
  }
  *(_QWORD *)&v368 = v2;
  *((_QWORD *)&v368 + 1) = v3;
  *(_QWORD *)&v369 = v4;
  *((_QWORD *)&v369 + 1) = v5;
  *(_QWORD *)&v370 = v350;
  *((_QWORD *)&v370 + 1) = v352;
  v371 = v354;
  v372 = v351;
  v373 = v349;
  v374 = v355;
  v375 = v6;
  v376 = v353;
  if (v24 == 1)
  {
    v43 = v4;
    v44 = v5;
    outlined copy of Locale.LanguageCode?(v2, v3);
    outlined copy of Locale.LanguageCode?(v350, v352);
    v45 = v6;
    outlined copy of Locale.LanguageCode?(v349, v355);
    outlined copy of Locale.LanguageCode?(v2, v3);
    outlined copy of Locale.LanguageCode?(v350, v352);
    outlined copy of Locale.LanguageCode?(v349, v355);
    v35 = v2;
    v46 = v3;
    v36 = v43;
    v37 = v44;
    outlined consume of Locale.LanguageCode?(v2, v46);
    v38 = v350;
    v39 = v352;
    v40 = v354;
    v41 = v351;
    outlined consume of Locale.LanguageCode?(v350, v352);
    v34 = v349;
    v33 = v45;
    v32 = v353;
    outlined consume of Locale.LanguageCode?(v349, v355);
    v42 = 1;
    goto LABEL_6;
  }
  v189 = v25;
  v190 = v7;
  v187 = v27;
  v188 = v26;
  v184 = v28;
  v185 = v29;
  v357 = v309;
  v358 = v24;
  v359 = v316;
  v360 = v302;
  *(_QWORD *)&v361 = v295;
  *((_QWORD *)&v361 + 1) = v324;
  v362 = v332;
  v363 = v340;
  v364 = v279;
  v365 = v284;
  v366 = v289;
  v367 = v281;
  v158 = v2;
  v159 = v4;
  v303 = v12;
  v296 = v14;
  v310 = v13;
  v168 = v30;
  v174 = v31;
  v161 = v5;
  v162 = v16;
  v186 = v11;
  v163 = v15;
  v165 = v21;
  v290 = v20;
  v280 = v18;
  v285 = v19;
  v282 = v17;
  v333 = v9;
  v341 = v8;
  v317 = v23;
  v325 = v10;
  outlined consume of Locale.Language?(v2, v3, v4, v5, v350, v352, v354, v351, v349, v355, v6, v353, (void (*)(void))outlined copy of Locale.LanguageCode?);
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v350, v352);
  outlined copy of Locale.LanguageCode?(v349, v355);
  v160 = specialized static Locale.Language.Components.== infix(_:_:)((uint64_t *)&v368, &v357);
  v48 = v6;
  v49 = v370;
  v50 = v373;
  v51 = v374;
  v52 = v48;
  outlined consume of Locale.LanguageCode?(v368, *((uint64_t *)&v368 + 1));
  outlined consume of Locale.LanguageCode?(v49, *((uint64_t *)&v49 + 1));
  outlined consume of Locale.LanguageCode?(v50, v51);
  outlined consume of Locale.Language?(v158, v348, v159, v161, v350, v352, v354, v351, v349, v355, v52, v353, (void (*)(void))outlined consume of Locale.LanguageCode?);
  v23 = v317;
  v10 = v325;
  v9 = v333;
  v8 = v341;
  v16 = v162;
  v15 = v163;
  v30 = v168;
  v31 = v174;
  v14 = v296;
  v12 = v303;
  v13 = v310;
  v17 = v282;
  v19 = v285;
  v18 = v280;
  v20 = v290;
  v21 = v165;
  if (!v160)
    return 0;
LABEL_9:
  if (v278 == 16)
  {
    if (v277 != 16)
      return 0;
  }
  else if (v277 == 16 || v278 != v277)
  {
    return 0;
  }
  if (!v276)
  {
    if (!v275)
      goto LABEL_21;
LABEL_30:
    v69 = v269;
    v70 = v275;
    outlined copy of Locale.LanguageCode?(v269, v275);
    v71 = v270;
    v72 = v276;
LABEL_31:
    outlined consume of Locale.LanguageCode?(v71, v72);
    outlined consume of Locale.LanguageCode?(v69, v70);
    return 0;
  }
  if (!v275)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_30;
  }
  if (v274 != v273 || v190 != v272)
  {
    v304 = v12;
    v297 = v14;
    v311 = v13;
    v169 = v30;
    v175 = v31;
    v53 = v21;
    v54 = v20;
    v55 = v18;
    v56 = v19;
    v57 = v16;
    v58 = v17;
    v59 = v15;
    v334 = v9;
    v342 = v8;
    v318 = v23;
    v326 = v10;
    v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v23 = v318;
    v10 = v326;
    v9 = v334;
    v8 = v342;
    v15 = v59;
    v30 = v169;
    v31 = v175;
    v14 = v297;
    v12 = v304;
    v13 = v311;
    v17 = v58;
    v16 = v57;
    v19 = v56;
    v18 = v55;
    v20 = v54;
    v21 = v53;
    if ((v60 & 1) == 0)
      return 0;
  }
LABEL_21:
  if (v271 == 1)
  {
    if (v189 == 1)
      goto LABEL_23;
LABEL_33:
    v73 = v264;
    v74 = v271;
    outlined copy of Locale.Subdivision??(v264, v271);
    v75 = v263;
    v76 = v263;
    v77 = v189;
    v78 = v189;
LABEL_34:
    outlined copy of Locale.Subdivision??(v76, v78);
    outlined consume of Locale.Subdivision??(v73, v74);
    outlined consume of Locale.Subdivision??(v75, v77);
    return 0;
  }
  if (v189 == 1)
    goto LABEL_33;
  v79 = v271;
  if (!v271)
  {
    v80 = v264;
    v81 = v263;
    if (!v189)
    {
      v307 = v12;
      v300 = v14;
      v314 = v13;
      v179 = v31;
      v166 = v21;
      v292 = v20;
      v103 = v18;
      v104 = v19;
      v105 = v16;
      v106 = v17;
      v107 = v30;
      v108 = v15;
      v338 = v9;
      v346 = v8;
      v322 = v23;
      v330 = v10;
      outlined copy of Locale.Subdivision??(v264, 0);
      outlined copy of Locale.Subdivision??(v263, 0);
      v23 = v322;
      v10 = v330;
      v9 = v338;
      v8 = v346;
      v15 = v108;
      v30 = v107;
      v31 = v179;
      v14 = v300;
      v12 = v307;
      v13 = v314;
      v17 = v106;
      v16 = v105;
      v19 = v104;
      v18 = v103;
      v20 = v292;
      v21 = v166;
      goto LABEL_23;
    }
    outlined copy of Locale.LanguageCode?(v264, 0);
LABEL_51:
    v100 = v189;
    outlined copy of Locale.LanguageCode?(v81, v189);
    v101 = v80;
    v102 = v271;
LABEL_52:
    outlined consume of Locale.LanguageCode?(v101, v102);
    outlined consume of Locale.LanguageCode?(v81, v100);
    outlined consume of Locale.Subdivision??(v80, v79);
    return 0;
  }
  v80 = v264;
  v81 = v263;
  if (!v189)
  {
    outlined copy of Locale.Subdivision??(v264, v271);
    outlined copy of Locale.Subdivision??(v264, v271);
    outlined copy of Locale.Subdivision??(v264, v271);
    outlined copy of Locale.Subdivision??(v263, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  if (v268 != v267 || v266 != v265)
  {
    v306 = v12;
    v299 = v14;
    v313 = v13;
    v171 = v30;
    v177 = v31;
    v82 = v21;
    v83 = v20;
    v84 = v18;
    v85 = v19;
    v86 = v16;
    v87 = v17;
    v88 = v15;
    v336 = v9;
    v344 = v8;
    v320 = v23;
    v328 = v10;
    v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v23 = v320;
    v10 = v328;
    v9 = v336;
    v8 = v344;
    v15 = v88;
    v30 = v171;
    v31 = v177;
    v14 = v299;
    v12 = v306;
    v13 = v313;
    v17 = v87;
    v16 = v86;
    v19 = v85;
    v18 = v84;
    v20 = v83;
    v21 = v82;
    if ((v89 & 1) == 0)
      return 0;
  }
LABEL_23:
  if (!v262)
  {
    if (!v261)
      goto LABEL_42;
    goto LABEL_49;
  }
  if (!v261)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_49:
    v69 = v255;
    v70 = v261;
    outlined copy of Locale.LanguageCode?(v255, v261);
    v71 = v256;
    v72 = v262;
    goto LABEL_31;
  }
  if (v259 != v188 || v260 != v187)
  {
    v305 = v12;
    v298 = v14;
    v312 = v13;
    v170 = v30;
    v176 = v31;
    v61 = v21;
    v62 = v20;
    v63 = v18;
    v64 = v19;
    v65 = v16;
    v66 = v17;
    v67 = v15;
    v335 = v9;
    v343 = v8;
    v319 = v23;
    v327 = v10;
    v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v23 = v319;
    v10 = v327;
    v9 = v335;
    v8 = v343;
    v15 = v67;
    v30 = v170;
    v31 = v176;
    v14 = v298;
    v12 = v305;
    v13 = v312;
    v17 = v66;
    v16 = v65;
    v19 = v64;
    v18 = v63;
    v20 = v62;
    v21 = v61;
    if ((v68 & 1) == 0)
      return 0;
  }
LABEL_42:
  if (v258)
  {
    if (!v257)
      return 0;
    v90 = v21;
    v291 = v20;
    v91 = v18;
    v286 = v19;
    v92 = v16;
    v93 = v17;
    v94 = v13;
    v95 = v12;
    v96 = v14;
    v178 = v31;
    v97 = v30;
    v98 = v15;
    v337 = v9;
    v345 = v8;
    v321 = v23;
    v329 = v10;
    v99 = specialized static Array<A>.== infix(_:_:)(v258, v257);
    v23 = v321;
    v10 = v329;
    v9 = v337;
    v8 = v345;
    v15 = v98;
    v30 = v97;
    v31 = v178;
    v14 = v96;
    v12 = v95;
    v13 = v94;
    v17 = v93;
    v16 = v92;
    v19 = v286;
    v18 = v91;
    v20 = v291;
    v21 = v90;
    if ((v99 & 1) == 0)
      return 0;
  }
  else if (v257)
  {
    return 0;
  }
  if (v254 == 7)
  {
    if (v253 != 7)
      return 0;
  }
  else
  {
    if (v253 == 7)
      return 0;
    v109 = v21;
    v293 = v20;
    v110 = v18;
    v287 = v19;
    v111 = v16;
    v112 = v17;
    v113 = v13;
    v114 = v12;
    v115 = v14;
    v180 = v31;
    v116 = v30;
    v117 = v15;
    v339 = v9;
    v347 = v8;
    v323 = v23;
    v331 = v10;
    v118 = specialized == infix<A>(_:_:)(v254, v253);
    v23 = v323;
    v10 = v331;
    v9 = v339;
    v8 = v347;
    v15 = v117;
    v30 = v116;
    v31 = v180;
    v14 = v115;
    v12 = v114;
    v13 = v113;
    v17 = v112;
    v16 = v111;
    v19 = v287;
    v18 = v110;
    v20 = v293;
    v21 = v109;
    if ((v118 & 1) == 0)
      return 0;
  }
  if ((v252 & 1) != 0)
  {
    if ((v251 & 1) == 0)
      return 0;
  }
  else
  {
    if ((v251 & 1) != 0)
      return 0;
    if ((v248 & 1) != 0)
    {
      if ((v247 & 1) == 0)
        return 0;
    }
    else
    {
      v172 = v30;
      v181 = v31;
      v301 = v14;
      v308 = v12;
      v315 = v13;
      v283 = v17;
      v368 = v8;
      v369 = v9;
      v370 = v10;
      LOBYTE(v371) = 0;
      if ((v247 & 1) != 0)
        return 0;
      v119 = v15;
      v120 = v16;
      v121 = v19;
      v122 = v18;
      v123 = v20;
      v124 = v21;
      v357 = v234;
      LOBYTE(v358) = v235 & 1;
      v359 = v236;
      LOBYTE(v360) = v237 & 1;
      v361 = v23;
      v125 = specialized static WeekendRange.== infix(_:_:)((uint64_t)&v368, (uint64_t)&v357);
      v21 = v124;
      v20 = v123;
      v18 = v122;
      v19 = v121;
      v16 = v120;
      v17 = v283;
      v13 = v315;
      v12 = v308;
      v14 = v301;
      v30 = v172;
      v31 = v181;
      v15 = v119;
      if (!v125)
        return 0;
    }
  }
  if ((v249 & 1) != 0)
  {
    if (!v250)
      return 0;
  }
  else
  {
    v126 = v250;
    if (v244 != v243)
      v126 = 1;
    if ((v126 & 1) != 0)
      return 0;
  }
  if (v246 == 4)
  {
    if (v245 != 4)
      return 0;
  }
  else
  {
    if (v245 == 4)
      return 0;
    v127 = v21;
    v294 = v20;
    v128 = v18;
    v288 = v19;
    v129 = v16;
    v130 = v17;
    v131 = v13;
    v132 = v12;
    v133 = v14;
    v182 = v31;
    v134 = v30;
    v135 = v15;
    v136 = specialized == infix<A>(_:_:)(v246, v245);
    v15 = v135;
    v30 = v134;
    v31 = v182;
    v14 = v133;
    v12 = v132;
    v13 = v131;
    v17 = v130;
    v16 = v129;
    v19 = v288;
    v18 = v128;
    v20 = v294;
    v21 = v127;
    if ((v136 & 1) == 0)
      return 0;
  }
  v173 = v30;
  v183 = v31;
  v164 = v15;
  if (!v242)
  {
    if (!v241)
      goto LABEL_87;
    goto LABEL_91;
  }
  if (!v241)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_91:
    v69 = v229;
    v70 = v241;
    outlined copy of Locale.LanguageCode?(v229, v241);
    v71 = v230;
    v72 = v242;
    goto LABEL_31;
  }
  v137 = v14;
  v138 = v12;
  v139 = v13;
  v140 = v17;
  v141 = v16;
  v142 = v19;
  v143 = v18;
  v144 = v20;
  v145 = v21;
  if (v239 != v238 || v240 != v233)
  {
    v146 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v14 = v137;
    v12 = v138;
    v13 = v139;
    v17 = v140;
    v16 = v141;
    v19 = v142;
    v18 = v143;
    v20 = v144;
    v21 = v145;
    if ((v146 & 1) == 0)
      return 0;
  }
LABEL_87:
  v167 = v21;
  v147 = v14;
  v148 = v12;
  v149 = v13;
  v150 = v17;
  v151 = v16;
  v152 = v19;
  v153 = v18;
  v154 = v20;
  if (v232 == 2)
  {
    if (v231 != 2)
      return 0;
  }
  else if (v231 == 2 || ((((v232 & 1) == 0) ^ v231) & 1) == 0)
  {
    return 0;
  }
  if (v227 == 1)
  {
    if (v226 == 1)
      goto LABEL_96;
    goto LABEL_109;
  }
  if (v226 == 1)
  {
LABEL_109:
    v73 = v221;
    v74 = v227;
    outlined copy of Locale.Subdivision??(v221, v227);
    v75 = v220;
    v76 = v220;
    v77 = v226;
    v78 = v226;
    goto LABEL_34;
  }
  if (!v227)
  {
    if (!v226)
    {
      outlined copy of Locale.Subdivision??(v221, 0);
      outlined copy of Locale.Subdivision??(v220, 0);
      goto LABEL_96;
    }
    outlined copy of Locale.LanguageCode?(v221, 0);
    goto LABEL_129;
  }
  if (!v226)
  {
    outlined copy of Locale.Subdivision??(v221, v227);
    outlined copy of Locale.Subdivision??(v221, v227);
    outlined copy of Locale.Subdivision??(v221, v227);
    outlined copy of Locale.Subdivision??(v220, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_129:
    v81 = v220;
    v100 = v226;
    outlined copy of Locale.LanguageCode?(v220, v226);
    v80 = v221;
    v101 = v221;
    v79 = v227;
    v102 = v227;
    goto LABEL_52;
  }
  if ((v225 != v223 || v224 != v222) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 0;
LABEL_96:
  if (v219 == 1)
  {
    if (v218 == 1)
      goto LABEL_98;
    goto LABEL_117;
  }
  if (v218 == 1)
  {
LABEL_117:
    v73 = v212;
    v74 = v219;
    outlined copy of Locale.Subdivision??(v212, v219);
    v75 = v211;
    v76 = v211;
    v77 = v218;
    v78 = v218;
    goto LABEL_34;
  }
  if (!v219)
  {
    if (!v218)
    {
      outlined copy of Locale.Subdivision??(v212, 0);
      outlined copy of Locale.Subdivision??(v211, 0);
      goto LABEL_98;
    }
    outlined copy of Locale.LanguageCode?(v212, 0);
    goto LABEL_140;
  }
  if (!v218)
  {
    outlined copy of Locale.Subdivision??(v212, v219);
    outlined copy of Locale.Subdivision??(v212, v219);
    outlined copy of Locale.Subdivision??(v212, v219);
    outlined copy of Locale.Subdivision??(v211, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_140:
    v81 = v211;
    v100 = v218;
    outlined copy of Locale.LanguageCode?(v211, v218);
    v80 = v212;
    v101 = v212;
    v79 = v219;
    v102 = v219;
    goto LABEL_52;
  }
  if ((v217 != v214 || v215 != v213) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 0;
LABEL_98:
  if (v216 == 1)
  {
    v155 = v228;
    if (v210 == 1)
      goto LABEL_100;
LABEL_127:
    outlined copy of TimeZone??(v216);
    outlined copy of TimeZone??(v210);
    outlined consume of TimeZone??(v216);
    outlined consume of TimeZone??(v210);
    return 0;
  }
  if (v210 == 1)
    goto LABEL_127;
  if (!v216)
  {
    if (!v210)
    {
      outlined copy of TimeZone??(0);
      outlined copy of TimeZone??(0);
      v155 = v228;
      goto LABEL_100;
    }
LABEL_151:
    swift_unknownObjectRelease();
    outlined consume of TimeZone??(v216);
    return 0;
  }
  *(_QWORD *)&v368 = v216;
  *((_QWORD *)&v368 + 1) = v209;
  if (!v210)
  {
    outlined copy of TimeZone??(v216);
    outlined copy of TimeZone??(v216);
    outlined copy of TimeZone??(v216);
    outlined copy of TimeZone??(0);
    swift_unknownObjectRelease();
    goto LABEL_151;
  }
  v357 = v210;
  v358 = v208;
  outlined copy of TimeZone??(v216);
  outlined copy of TimeZone??(v216);
  swift_unknownObjectRetain();
  v356 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v368, (uint64_t)&v357);
  swift_unknownObjectRelease();
  outlined consume of TimeZone??(v216);
  outlined consume of TimeZone??(v216);
  v155 = v228;
  if ((v356 & 1) == 0)
    return 0;
LABEL_100:
  if (v155 == 1)
  {
    v156 = v186;
    v157 = v228;
    if (v207 == 1)
      goto LABEL_102;
    goto LABEL_138;
  }
  v156 = v186;
  v157 = v228;
  if (v207 == 1)
  {
LABEL_138:
    v73 = v156;
    v74 = v157;
    outlined copy of Locale.Subdivision??(v156, v157);
    v75 = v203;
    v76 = v203;
    v77 = v207;
    v78 = v207;
    goto LABEL_34;
  }
  if (!v228)
  {
    if (!v207)
    {
      outlined copy of Locale.Subdivision??(v186, 0);
      outlined copy of Locale.Subdivision??(v203, 0);
      goto LABEL_102;
    }
    outlined copy of Locale.LanguageCode?(v186, 0);
LABEL_168:
    outlined copy of Locale.LanguageCode?(v203, v207);
    outlined consume of Locale.LanguageCode?(v186, v228);
    outlined consume of Locale.LanguageCode?(v203, v207);
    outlined consume of Locale.Subdivision??(v186, v228);
    return 0;
  }
  if (!v207)
  {
    outlined copy of Locale.Subdivision??(v186, v228);
    outlined copy of Locale.Subdivision??(v186, v228);
    outlined copy of Locale.Subdivision??(v186, v228);
    outlined copy of Locale.Subdivision??(v203, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_168;
  }
  if ((v148 != v205 || v149 != v206) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 0;
LABEL_102:
  if (!v204)
  {
    if (!v202)
      goto LABEL_153;
    return 0;
  }
  if (!v202 || (v201 != v200 || v204 != v202) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 0;
LABEL_153:
  if ((specialized static Dictionary<>.== infix(_:_:)(v198, v196) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v199, v197) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v164, v191) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v147, v192) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v150, v193) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v151, v194) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v152, v195) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v153, v184) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v154, v185) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v167, v173) & 1) == 0)
  {
    return 0;
  }
  return specialized static Dictionary<>.== infix(_:_:)(v22, v183);
}

